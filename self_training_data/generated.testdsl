problem Generated/0 {
code {
        func generate_list_of_multiples(n: int, m: int) -> list<int>
    }
    tests {
        template nse {
            (4, 5) -> [4, 8, 12, 16, 20]
(3, 3) -> [3, 6, 9]
(0, 10) -> [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
(-4, 5) -> [-4, -8, -12, -16, -20]
(7, 1) -> [7]
        }
    }
}

problem Generated/1 {
code {
        func generate_multiples_of_number(num: int, times: int) -> list<int>
    }
    tests {
        template nse {
            (5, 5) -> [5, 10, 15, 20, 25]
(9, 3) -> [9, 18, 27]
(3, 10) -> [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]
(0, 10) -> [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
(1, 0) -> []
        }
    }
}

problem Generated/2 {
code {
        func generate_fibonacci(n: int) -> list<int>
    }
    tests {
        template nse {
            (1) -> [1]
(2) -> [1, 1]
(5) -> [1, 1, 2, 3, 5]
(10) -> [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
(0) -> []
        }
    }
}

problem Generated/3 {
code {
        func get_range_based_on_length(length: int) -> list<int>
    }
    tests {
        template nse {
            (0) -> []
(1) -> [0]
(5) -> [0, 1, 2, 3, 4]
(10) -> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
(2) -> [0, 1]
        }
    }
}

problem Generated/4 {
code {
        func generate_odd_numbers(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [1, 3, 5]
(10) -> [1, 3, 5, 7, 9]
(0) -> []
(1) -> [1]
(20) -> [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
        }
    }
}

problem Generated/5 {
code {
        func generate_sequence(start: int, length: int, step: int) -> list<int>
    }
    tests {
        template nse {
            (1, 5, 2) -> [1, 3, 5, 7, 9]
(0, 3, -2) -> [0, -2, -4]
(10, 1, 0) -> [10]
(1, 0, 3) -> []
(2, 4, 0) -> [2, 2, 2, 2]
        }
    }
}

problem Generated/6 {
code {
        func generate_sequence_between(start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            (1, 10) -> [6, 7, 8, 9, 10]
(-10, 10) -> [-10, -9, -8, -7, -6, 6, 7, 8, 9, 10]
(0, 5) -> []
(-3, 3) -> []
(-10, -4) -> [-10, -9, -8, -7, -6]
        }
    }
}

problem Generated/7 {
code {
        func generate_pattern(n: int) -> list<string>
    }
    tests {
        template nse {
            (2) -> ["01", "10"]
(3) -> ["012", "101", "210"]
(5) -> ["01234", "10123", "21012", "32101", "43210"]
(1) -> ["0"]
(4) -> ["0123", "1012", "2101", "3210"]
        }
    }
}

problem Generated/8 {
code {
        func generate_odd_numbers_within_range(start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            (1, 10) -> [1, 3, 5, 7, 9]
(-5, 5) -> [-5, -3, -1, 1, 3, 5]
(-10, -1) -> [-9, -7, -5, -3, -1]
(0, 0) -> []
(-100, 100) -> [-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]
        }
    }
}

problem Generated/9 {
code {
        func sum_of_all_even_numbers_in_range(start: int, last: int) -> int
    }
    tests {
        template nse {
            (1, 10) -> 30
(0, 0) -> 0
(2, 3) -> 2
(10, 20) -> 90
(1, 3) -> 2
        }
    }
}

problem Generated/10 {
code {
        func sum_of_squares(n: int) -> int
    }
    tests {
        template nse {
            (5) -> 55
(1) -> 1
(10) -> 385
(0) -> 0
(-1) -> 0
        }
    }
}

problem Generated/11 {
code {
        func sum_of_odd_numbers(n: int) -> int
    }
    tests {
        template nse {
            (5) -> 9
(10) -> 25
(15) -> 64
(20) -> 100
(0) -> 0
        }
    }
}

problem Generated/12 {
code {
        func sum_of_even_numbers(n: int) -> int
    }
    tests {
        template nse {
            (7) -> 12
(10) -> 30
(1) -> 0
(0) -> 0
(20) -> 110
        }
    }
}

problem Generated/13 {
code {
        func max_index_in_range(elements: list<int>, start: int, last: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 0, 3) -> 2
([1, 2, 3, 4, 5], 2, 5) -> 4
([1, 7, 4, 9, 5], 1, 4) -> 3
([1, 7, 4, 9, 5], 0, 4) -> 3
([1, 2, 3, 4, 5, 6, 7, 8], 2, 7) -> 6
        }
    }
}

problem Generated/14 {
code {
        func get_max_multiples_in_range(divisor: int, limit: int) -> int
    }
    tests {
        template nse {
            (3, 10) -> 9
(5, 20) -> 20
(7, 49) -> 49
(2, 5) -> 4
(9, 30) -> 27
        }
    }
}

problem Generated/15 {
code {
        func get_max_squares(upper_limit: int) -> int
    }
    tests {
        template nse {
            (10) -> 9
(15) -> 9
(8) -> 4
(25) -> 25
(27) -> 25
        }
    }
}

problem Generated/16 {
code {
        func min_square_within_range(lower: int, upper: int) -> int
    }
    tests {
        template nse {
            (1, 10) -> 1
(3, 5) -> 9
(-5, 5) -> 0
(10, 20) -> 100
(1, 1) -> 1
        }
    }
}

problem Generated/17 {
code {
        func get_min_element_index(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 0
([7, 3, 5, 9, 6]) -> 1
([1, 7, 4, 9, 5]) -> 0
([10, 20, 30, 40, 50]) -> 0
([-1, -2, -3, -4, -5]) -> 4
        }
    }
}

problem Generated/18 {
code {
        func multiply_each_elem(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) -> [5, 8, 9, 8, 5]
([1, 2], [5, 4, 3]) -> [5, 8]
([1, 2, 3], [4, 5]) -> [4, 10]
([1], [2]) -> [2]
([], []) -> []
        }
    }
}

problem Generated/19 {
code {
        func generate_list_of_divisible_numbers(num: int, limit: int) -> list<int>
    }
    tests {
        template nse {
            (3, 10) -> [3, 6, 9]
(5, 15) -> [5, 10, 15]
(7, 21) -> [7, 14, 21]
(2, 5) -> [2, 4]
(6, 12) -> [6, 12]
        }
    }
}

problem Generated/20 {
code {
        func multiply_lists(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) -> [5, 8, 9, 8, 5]
([1, 2, 3], [4, 5, 6]) -> [4, 10, 18]
([7, 6, 5, 4, 3], [2, 3, 4, 5, 6]) -> [14, 18, 20, 20, 18]
([1, 2, 3], [4, 5, 6, 7]) -> [4, 10, 18]
([], [4, 5, 6]) -> []
        }
    }
}

problem Generated/21 {
code {
        func zip_and_multiply(numbers1: list<int>, numbers2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) -> [1, 4, 9, 16, 25]
([2, 4, 6, 8, 10], [3, 3, 3, 3, 3]) -> [6, 12, 18, 24, 30]
([1, 3, 5, 7, 9], [2, 4, 6, 8, 10]) -> [2, 12, 30, 56, 90]
([], []) -> []
([1, 2, 3], [4, 5, 6, 7]) -> [4, 10, 18]
        }
    }
}

problem Generated/22 {
code {
        func generate_list_of_powers(b: int, power_count: int) -> list<int>
    }
    tests {
        template nse {
            (2, 5) -> [1, 2, 4, 8, 16]
(3, 3) -> [1, 3, 9]
(7, 0) -> []
(1, 10) -> [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
(0, 5) -> [1, 0, 0, 0, 0]
        }
    }
}

problem Generated/23 {
code {
        func generate_multipliers(n: int) -> list<int>
    }
    tests {
        template nse {
            (1) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
(5) -> [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]
(0) -> [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
(-3) -> [-3, -6, -9, -12, -15, -18, -21, -24, -27, -30]
(7) -> [7, 14, 21, 28, 35, 42, 49, 56, 63, 70]
        }
    }
}

problem Generated/24 {
code {
        func generate_table(size: int, sym: string) -> list<string>
    }
    tests {
        template nse {
            (3, "*") -> ["***", "***", "***"]
(5, "-") -> ["-----", "-----", "-----", "-----", "-----"]
(2, "a") -> ["aa", "aa"]
(4, "$") -> ["$$$$", "$$$$", "$$$$", "$$$$"]
(1, "X") -> ["X"]
        }
    }
}

problem Generated/25 {
code {
        func get_even_indexed_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [1, 3, 5, 7, 9]
([2, 4, -6, 0, 1, 5, 7]) -> [2, -6, 1, 7]
([0, 0, 0, 0, 0, 0]) -> [0, 0, 0]
([1, 3, 5, 7]) -> [1, 5]
([0]) -> [0]
        }
    }
}

problem Generated/26 {
code {
        func generate_multiplication_tables(n: int) -> list<list<int>>
    }
    tests {
        template nse {
            (1) -> [[1]]
(2) -> [[1, 2], [2, 4]]
(3) -> [[1, 2, 3], [2, 4, 6], [3, 6, 9]]
(5) -> [[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20], [5, 10, 15, 20, 25]]
(10) -> [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], [3, 6, 9, 12, 15, 18, 21, 24, 27, 30], [4, 8, 12, 16, 20, 24, 28, 32, 36, 40], [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [6, 12, 18, 24, 30, 36, 42, 48, 54, 60], [7, 14, 21, 28, 35, 42, 49, 56, 63, 70], [8, 16, 24, 32, 40, 48, 56, 64, 72, 80], [9, 18, 27, 36, 45, 54, 63, 72, 81, 90], [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]]
        }
    }
}

problem Generated/27 {
code {
        func even_numbers_in_range(start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            (1, 10) -> [2, 4, 6, 8, 10]
(0, 20) -> [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
(7, 13) -> [8, 10, 12]
(3, 3) -> []
(4, 4) -> [4]
        }
    }
}

problem Generated/28 {
code {
        func filter_even_numbers(start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            (1, 10) -> [2, 4, 6, 8]
(0, 1) -> [0]
(10, 20) -> [10, 12, 14, 16, 18]
(1, 2) -> []
(7, 7) -> []
        }
    }
}

problem Generated/29 {
code {
        func get_even_numbers_in_range(start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            (1, 10) -> [2, 4, 6, 8, 10]
(5, 15) -> [6, 8, 10, 12, 14]
(3, 4) -> [4]
(7, 11) -> [8, 10]
(15, 20) -> [16, 18, 20]
        }
    }
}

problem Generated/30 {
code {
        func get_even_numbers_in_range(start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            (0, 10) -> [0, 2, 4, 6, 8]
(1, 5) -> [2, 4]
(10, 20) -> [10, 12, 14, 16, 18]
(11, 16) -> [12, 14]
(15, 15) -> []
        }
    }
}

problem Generated/31 {
code {
        func filter_even_numbers_in_range(start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            (0, 10) -> [0, 2, 4, 6, 8, 10]
(1, 10) -> [2, 4, 6, 8, 10]
(1, 1) -> []
(10, 1) -> []
(-5, 5) -> [-4, -2, 0, 2, 4]
        }
    }
}

problem Generated/32 {
code {
        func filter_odd_numbers_in_range(start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            (1, 10) -> [1, 3, 5, 7, 9]
(0, 15) -> [1, 3, 5, 7, 9, 11, 13]
(3, 5) -> [3]
(2, 2) -> []
(11, 14) -> [11, 13]
        }
    }
}

problem Generated/33 {
code {
        func filter_even_numbers_in_range(lower: int, upper: int) -> list<int>
    }
    tests {
        template nse {
            (1, 10) -> [2, 4, 6, 8, 10]
(7, 17) -> [8, 10, 12, 14, 16]
(1, 20) -> [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
(3, 6) -> [4, 6]
(11, 13) -> [12]
        }
    }
}

problem Generated/34 {
code {
        func filter_even_numbers(n: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [2, 4, 6, 8, 10]
(5) -> [2, 4]
(2) -> [2]
(1) -> []
(11) -> [2, 4, 6, 8, 10]
        }
    }
}

problem Generated/35 {
code {
        func sort_numbers_in_desc(n: int) -> list<int>
    }
    tests {
        template nse {
            (12345) -> [5, 4, 3, 2, 1]
(987654321) -> [9, 8, 7, 6, 5, 4, 3, 2, 1]
(11111111) -> [1, 1, 1, 1, 1, 1, 1, 1]
(654321) -> [6, 5, 4, 3, 2, 1]
(0) -> [0]
        }
    }
}

problem Generated/36 {
code {
        func sorted_squares(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([-5, -3, -1, 0, 2, 4, 6]) -> [0, 1, 4, 9, 16, 25, 36]
([1, 2, 3, 4, 5]) -> [1, 4, 9, 16, 25]
([0, 1, 3, 5, 9]) -> [0, 1, 9, 25, 81]
([-9, -5, -3, 0, 2, 4]) -> [0, 4, 9, 16, 25, 81]
([2, 2, 2, 2]) -> [4, 4, 4, 4]
        }
    }
}

problem Generated/37 {
code {
        func sort_list_in_desc_order(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.1, 3.2, 2.1, 5.4, 6.0]) -> [6.0, 5.4, 3.2, 2.1, 1.1]
([1.1, 1.1, 1.1, 1.1]) -> [1.1, 1.1, 1.1, 1.1]
([1.2, 2.4, 3.6, 4.8, 6.0]) -> [6.0, 4.8, 3.6, 2.4, 1.2]
([]) -> []
([10.0, 5.0, 2.0, 7.5, 3.2]) -> [10.0, 7.5, 5.0, 3.2, 2.0]
        }
    }
}

problem Generated/38 {
code {
        func generate_sorted_list_with_condition(num_elements: int, condition: string) -> list<int>
    }
    tests {
        template nse {
            (10, "1") -> [1]
(30, "2") -> [2, 12, 22]
(50, "3") -> [3, 13, 23, 33, 43]
(15, "0") -> [10]
(25, "5") -> [5, 15, 25]
        }
    }
}

problem Generated/39 {
code {
        func generate_list_of_even_numbers(n: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [2, 4, 6, 8, 10]
(1) -> []
(0) -> []
(15) -> [2, 4, 6, 8, 10, 12, 14]
(20) -> [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
        }
    }
}

problem Generated/40 {
code {
        func generate_even_numbers(start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            (1, 10) -> [2, 4, 6, 8, 10]
(0, 0) -> [0]
(7, 7) -> []
(-5, 5) -> [-4, -2, 0, 2, 4]
(-10, -2) -> [-10, -8, -6, -4, -2]
        }
    }
}

problem Generated/41 {
code {
        func generate_even_numbers(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [0, 2, 4]
(8) -> [0, 2, 4, 6, 8]
(1) -> [0]
(0) -> [0]
(10) -> [0, 2, 4, 6, 8, 10]
        }
    }
}

problem Generated/42 {
code {
        func get_ascii_alphabets(start: int, last: int) -> list<string>
    }
    tests {
        template nse {
            (65, 70) -> ["A", "B", "C", "D", "E", "F"]
(97, 101) -> ["a", "b", "c", "d", "e"]
(65, 65) -> ["A"]
(90, 65) -> []
(48, 57) -> ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
        }
    }
}

problem Generated/43 {
code {
        func get_ascii_values(stringacters: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("world") -> [119, 111, 114, 108, 100]
("") -> []
(" ") -> [32]
("Hello, World!") -> [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33]
        }
    }
}

problem Generated/44 {
code {
        func generate_ascii_range_strings(start: string, last: string) -> list<string>
    }
    tests {
        template nse {
            ("a", "f") -> ["a", "b", "c", "d", "e", "f"]
("p", "t") -> ["p", "q", "r", "s", "t"]
("A", "F") -> ["A", "B", "C", "D", "E", "F"]
("0", "3") -> ["0", "1", "2", "3"]
("2", "7") -> ["2", "3", "4", "5", "6", "7"]
        }
    }
}

problem Generated/45 {
code {
        func ascii_codes_in_range(start: string, last: string) -> list<int>
    }
    tests {
        template nse {
            ("A", "Z") -> [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]
("a", "z") -> [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]
("0", "9") -> [48, 49, 50, 51, 52, 53, 54, 55, 56, 57]
("!", "/") -> [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]
("a", "A") -> []
        }
    }
}

problem Generated/46 {
code {
        func is_prime(num: int) -> bool
    }
    tests {
        template nse {
            (2) -> true
(3) -> true
(5) -> true
(7) -> true
(10) -> false
        }
    }
}

problem Generated/47 {
code {
        func is_prime(num: int) -> bool
    }
    tests {
        template nse {
            (2) -> true
(3) -> true
(5) -> true
(11) -> true
(15) -> false
        }
    }
}

problem Generated/48 {
code {
        func check_all_numbers_in_range(start: int, last: int, numbers: list<int>) -> bool
    }
    tests {
        template nse {
            (1, 5, [1, 2, 3, 4, 5]) -> true
(1, 5, [1, 3, 5]) -> true
(1, 5, [0, 2, 4]) -> false
(1, 5, [1, 5, 10]) -> false
(0, 9, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> true
        }
    }
}

problem Generated/49 {
code {
        func is_prime(num: int) -> bool
    }
    tests {
        template nse {
            (2) -> true
(3) -> true
(4) -> false
(7) -> true
(11) -> true
        }
    }
}

problem Generated/50 {
code {
        func is_prime(num: int) -> bool
    }
    tests {
        template nse {
            (7) -> true
(2) -> true
(8) -> false
(11) -> true
(16) -> false
        }
    }
}

problem Generated/51 {
code {
        func check_divisible(n: int, arr: list<int>) -> bool
    }
    tests {
        template nse {
            (2, [4, 6, 8, 10]) -> true
(3, [3, 6, 9, 12]) -> true
(5, [5, 10, 15, 20]) -> true
(7, [7, 14, 21, 28]) -> true
(4, [4, 5, 6, 8]) -> false
        }
    }
}

problem Generated/52 {
code {
        func binary_representation_of_numbers(n: int) -> list<string>
    }
    tests {
        template nse {
            (1) -> ["1"]
(2) -> ["1", "10"]
(5) -> ["1", "10", "11", "100", "101"]
(10) -> ["1", "10", "11", "100", "101", "110", "111", "1000", "1001", "1010"]
(15) -> ["1", "10", "11", "100", "101", "110", "111", "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"]
        }
    }
}

problem Generated/53 {
code {
        func binary_representation_of_number_range(start: int, last: int) -> list<string>
    }
    tests {
        template nse {
            (1, 5) -> ["1", "10", "11", "100", "101"]
(10, 15) -> ["1010", "1011", "1100", "1101", "1110", "1111"]
(0, 0) -> ["0"]
(0, 1) -> ["0", "1"]
(16, 20) -> ["10000", "10001", "10010", "10011", "10100"]
        }
    }
}

problem Generated/54 {
code {
        func binary_range(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["0b1", "0b10", "0b11", "0b100", "0b101"]
(1) -> ["0b1"]
(0) -> []
(20) -> ["0b1", "0b10", "0b11", "0b100", "0b101", "0b110", "0b111", "0b1000", "0b1001", "0b1010", "0b1011", "0b1100", "0b1101", "0b1110", "0b1111", "0b10000", "0b10001", "0b10010", "0b10011", "0b10100"]
(8) -> ["0b1", "0b10", "0b11", "0b100", "0b101", "0b110", "0b111", "0b1000"]
        }
    }
}

problem Generated/55 {
code {
        func get_binaries_of_range(start: int, last: int) -> list<string>
    }
    tests {
        template nse {
            (1, 5) -> ["1", "10", "11", "100", "101"]
(3, 8) -> ["11", "100", "101", "110", "111", "1000"]
(0, 3) -> ["0", "1", "10", "11"]
(0, 0) -> ["0"]
(12, 14) -> ["1100", "1101", "1110"]
        }
    }
}

problem Generated/56 {
code {
        func binary_range(start: int, last: int) -> list<string>
    }
    tests {
        template nse {
            (1, 5) -> ["1", "10", "11", "100", "101"]
(0, 0) -> ["0"]
(7, 9) -> ["111", "1000", "1001"]
(3, 4) -> ["11", "100"]
(1, 2) -> ["1", "10"]
        }
    }
}

problem Generated/57 {
code {
        func binary_repr_of_range(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["000", "001", "010", "011", "100"]
(10) -> ["0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001"]
(1) -> ["0"]
(0) -> []
(11) -> ["0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010"]
        }
    }
}

problem Generated/58 {
code {
        func generate_binary_strings(n: int) -> list<string>
    }
    tests {
        template nse {
            (1) -> ["0", "1"]
(2) -> ["00", "01", "10", "11"]
(3) -> ["000", "001", "010", "011", "100", "101", "110", "111"]
(4) -> ["0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"]
(5) -> ["00000", "00001", "00010", "00011", "00100", "00101", "00110", "00111", "01000", "01001", "01010", "01011", "01100", "01101", "01110", "01111", "10000", "10001", "10010", "10011", "10100", "10101", "10110", "10111", "11000", "11001", "11010", "11011", "11100", "11101", "11110", "11111"]
        }
    }
}

problem Generated/59 {
code {
        func generate_binary_list(n: int) -> list<string>
    }
    tests {
        template nse {
            (1) -> ["0", "1"]
(2) -> ["00", "01", "10", "11"]
(3) -> ["000", "001", "010", "011", "100", "101", "110", "111"]
(4) -> ["0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"]
(5) -> ["00000", "00001", "00010", "00011", "00100", "00101", "00110", "00111", "01000", "01001", "01010", "01011", "01100", "01101", "01110", "01111", "10000", "10001", "10010", "10011", "10100", "10101", "10110", "10111", "11000", "11001", "11010", "11011", "11100", "11101", "11110", "11111"]
        }
    }
}

problem Generated/60 {
code {
        func word_count(sentence: string) -> int
    }
    tests {
        template nse {
            ("Hello world") -> 2
("The quick brown fox jumps over the lazy dog") -> 9
("One two three") -> 3
("   ") -> 0
("") -> 0
        }
    }
}

problem Generated/61 {
code {
        func generate_range_of_words(word_range: string) -> list<string>
    }
    tests {
        template nse {
            ("a-z") -> ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
("A-Z") -> ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]
("0-9") -> ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
("a-d") -> ["a", "b", "c", "d"]
("K-P") -> ["K", "L", "M", "N", "O", "P"]
        }
    }
}

problem Generated/62 {
code {
        func generate_range_list_from_split(input_s: string) -> list<int>
    }
    tests {
        template nse {
            ("1 5") -> [1, 2, 3, 4, 5]
("0 0") -> [0]
("-5 0") -> [-5, -4, -3, -2, -1, 0]
("10 15") -> [10, 11, 12, 13, 14, 15]
("10 10") -> [10]
        }
    }
}

problem Generated/63 {
code {
        func get_even_numbers(input_str: string) -> list<int>
    }
    tests {
        template nse {
            ("2 10") -> [2, 4, 6, 8, 10]
("5 17") -> [6, 8, 10, 12, 14, 16]
("10 20") -> [10, 12, 14, 16, 18, 20]
("1 3") -> [2]
("100 115") -> [100, 102, 104, 106, 108, 110, 112, 114]
        }
    }
}

problem Generated/64 {
code {
        func generate_dash_separated_string(n: int) -> string
    }
    tests {
        template nse {
            (5) -> "1-2-3-4-5"
(1) -> "1"
(0) -> ""
(10) -> "1-2-3-4-5-6-7-8-9-10"
(3) -> "1-2-3"
        }
    }
}

problem Generated/65 {
code {
        func generate_string_with_range(start: int, last: int, separator: string) -> string
    }
    tests {
        template nse {
            (1, 5, ",") -> "1,2,3,4,5"
(1, 1, "-") -> "1"
(10, 15, " ") -> "10 11 12 13 14 15"
(-5, 0, "") -> "-5-4-3-2-10"
(0, 5, "+") -> "0+1+2+3+4+5"
        }
    }
}

problem Generated/66 {
code {
        func create_sentence_from_words(words: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "", "python", "", "is", "awesome", ""]) -> "hello world python is awesome"
(["I", "am", "a", "robot"]) -> "I am a robot"
([""]) -> ""
([]) -> ""
(["Python", "", "is", "", "a", "", "popular", "programming", "language"]) -> "Python is a popular programming language"
        }
    }
}

problem Generated/67 {
code {
        func generate_string_from_range(start: int, stop: int, step: int, delimiter: string) -> string
    }
    tests {
        template nse {
            (1, 10, 1, "-") -> "1-2-3-4-5-6-7-8-9"
(1, 10, 2, ",") -> "1,3,5,7,9"
(0, 100, 5, "-->") -> "0-->5-->10-->15-->20-->25-->30-->35-->40-->45-->50-->55-->60-->65-->70-->75-->80-->85-->90-->95"
(3, 10, 2, "") -> "3579"
(5, 5, 1, ":") -> ""
        }
    }
}

problem Generated/68 {
code {
        func join_numbers_with_separator(numbers: list<int>, separator: string) -> string
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], "-") -> "1-2-3-4-5"
([7, 3, 5, 9, 6], ",") -> "7,3,5,9,6"
([1, 7, 4, 9, 5], "") -> "17495"
([], "-") -> ""
([1, 2, 3, 4, 5, 6, 7, 8], " ") -> "1 2 3 4 5 6 7 8"
        }
    }
}

problem Generated/69 {
code {
        func concatenate_range_as_string(first: int, last: int, step: int, separator: string) -> string
    }
    tests {
        template nse {
            (1, 10, 1, ",") -> "1,2,3,4,5,6,7,8,9"
(1, 10, 2, ",") -> "1,3,5,7,9"
(10, 1, -1, " ") -> "10 9 8 7 6 5 4 3 2"
(10, 1, -2, " ") -> "10 8 6 4 2"
(5, 5, 1, ",") -> ""
        }
    }
}

problem Generated/70 {
code {
        func concatenate_numbers(n: int, delimiter: string) -> string
    }
    tests {
        template nse {
            (5, "---") -> "1---2---3---4---5"
(1, "-") -> "1"
(4, "") -> "1234"
(0, "-") -> ""
(10, ", ") -> "1, 2, 3, 4, 5, 6, 7, 8, 9, 10"
        }
    }
}

problem Generated/71 {
code {
        func generate_phone_number(numbers: list<int>) -> string
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) -> "(123) 456-7890"
([0, 3, 2, 1, 4, 5, 7, 6, 9, 8]) -> "(032) 145-7698"
([1, 2, 3, 4, 5]) -> "(123) 45-"
([0, 3, 2, 1, 4, 5, 7]) -> "(032) 145-7"
([1, 2, 3, 4]) -> "(123) 4-"
        }
    }
}

problem Generated/72 {
code {
        func generate_csv_string(rows: int, columns: int, delimiter: string) -> string
    }
    tests {
        template nse {
            (3, 5, ",") -> "11,12,13,14,15\n21,22,23,24,25\n31,32,33,34,35"
(1, 1, "-") -> "11"
(2, 2, "|") -> "11|12\n21|22"
(5, 1, ",") -> "11\n21\n31\n41\n51"
(0, 5, ",") -> ""
        }
    }
}

problem Generated/73 {
code {
        func generate_lower_case_alphabets(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["a", "b", "c", "d", "e"]
(10) -> ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]
(0) -> []
(-5) -> []
(26) -> ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
        }
    }
}

problem Generated/74 {
code {
        func create_alphabets_list(start: string, last: string) -> list<string>
    }
    tests {
        template nse {
            ("a", "f") -> ["a", "b", "c", "d", "e", "f"]
("A", "G") -> ["a", "b", "c", "d", "e", "f", "g"]
("z", "z") -> ["z"]
("Z", "Z") -> ["z"]
("e", "b") -> []
        }
    }
}

problem Generated/75 {
code {
        func generate_alphabets(start: string, last: string) -> list<string>
    }
    tests {
        template nse {
            ("a", "e") -> ["a", "b", "c", "d", "e"]
("f", "j") -> ["f", "g", "h", "i", "j"]
("A", "E") -> ["a", "b", "c", "d", "e"]
("F", "J") -> ["f", "g", "h", "i", "j"]
("x", "A") -> []
        }
    }
}

problem Generated/76 {
code {
        func generate_lowercased_strings(start: int, last: int, pre: string) -> list<string>
    }
    tests {
        template nse {
            (1, 5, "foo") -> ["foo1", "foo2", "foo3", "foo4", "foo5"]
(0, 3, "bar") -> ["bar0", "bar1", "bar2", "bar3"]
(5, 5, "baz") -> ["baz5"]
(7, 10, "") -> ["7", "8", "9", "10"]
(1, 1, "qux") -> ["qux1"]
        }
    }
}

problem Generated/77 {
code {
        func generate_lowercase_strings(start: int, last: int, pre: string) -> list<string>
    }
    tests {
        template nse {
            (1, 6, "test_") -> ["test_1", "test_2", "test_3", "test_4", "test_5"]
(10, 13, "HELLO_") -> ["hello_10", "hello_11", "hello_12"]
(1, 1, "example_") -> []
(3, 6, "") -> ["3", "4", "5"]
(-5, 0, "negative_") -> ["negative_-5", "negative_-4", "negative_-3", "negative_-2", "negative_-1"]
        }
    }
}

problem Generated/78 {
code {
        func generate_lower_case_strings(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["a", "b", "c", "d", "e"]
(0) -> []
(1) -> ["a"]
(26) -> ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
(10) -> ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]
        }
    }
}

problem Generated/79 {
code {
        func create_uppercase_list(n: int, s: string) -> list<string>
    }
    tests {
        template nse {
            (3, "hello") -> ["HELLO", "HELLO", "HELLO"]
(0, "world") -> []
(1, "") -> [""]
(5, "python") -> ["PYTHON", "PYTHON", "PYTHON", "PYTHON", "PYTHON"]
(2, "list comprehension") -> ["LIST COMPREHENSION", "LIST COMPREHENSION"]
        }
    }
}

problem Generated/80 {
code {
        func generate_uppercase_strings(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["1", "2", "3", "4", "5"]
(0) -> []
(1) -> ["1"]
(10) -> ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
(3) -> ["1", "2", "3"]
        }
    }
}

problem Generated/81 {
code {
        func generate_uppercase_strings(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["1", "2", "3", "4", "5"]
(0) -> []
(1) -> ["1"]
(15) -> ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15"]
(7) -> ["1", "2", "3", "4", "5", "6", "7"]
        }
    }
}

problem Generated/82 {
code {
        func capitalized_strings(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["1", "2", "3", "4", "5"]
(10) -> ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
(3) -> ["1", "2", "3"]
(0) -> []
(1) -> ["1"]
        }
    }
}

problem Generated/83 {
code {
        func get_uppercase_strings(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["1", "2", "3", "4", "5"]
(10) -> ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
(0) -> []
(1) -> ["1"]
(20) -> ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20"]
        }
    }
}

problem Generated/84 {
code {
        func upper_case_range(start: int, last: int) -> list<string>
    }
    tests {
        template nse {
            (1, 5) -> ["1", "2", "3", "4", "5"]
(3, 8) -> ["3", "4", "5", "6", "7", "8"]
(4, 4) -> ["4"]
(0, 2) -> ["0", "1", "2"]
(-5, -1) -> ["-5", "-4", "-3", "-2", "-1"]
        }
    }
}

problem Generated/85 {
code {
        func get_lowercase_letters(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["a", "b", "c", "d", "e"]
(10) -> ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]
(0) -> []
(1) -> ["a"]
(26) -> ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
        }
    }
}

problem Generated/86 {
code {
        func filter_uppercase_letters(input_s: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World") -> ["H", "W"]
("UPPERCASE") -> ["U", "P", "P", "E", "R", "C", "A", "S", "E"]
("lowercase") -> []
("1234") -> []
("") -> []
        }
    }
}

problem Generated/87 {
code {
        func get_uppercase_letters_in_range(start: string, last: string) -> list<string>
    }
    tests {
        template nse {
            ("A", "F") -> ["A", "B", "C", "D", "E", "F"]
("d", "g") -> []
("M", "T") -> ["M", "N", "O", "P", "Q", "R", "S", "T"]
("a", "z") -> []
("G", "G") -> ["G"]
        }
    }
}

problem Generated/88 {
code {
        func alphabetical_range(start: string, last: string) -> list<string>
    }
    tests {
        template nse {
            ("a", "f") -> ["A", "B", "C", "D", "E", "F"]
("h", "m") -> ["H", "I", "J", "K", "L", "M"]
("t", "z") -> ["T", "U", "V", "W", "X", "Y", "Z"]
("A", "M") -> ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M"]
("e", "X") -> ["E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X"]
        }
    }
}

problem Generated/89 {
code {
        func generate_alpha_strings(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz"]
(1) -> ["abcdefghijklmnopqrstuvwxyz"]
(0) -> []
(10) -> ["abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz"]
(3) -> ["abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz"]
        }
    }
}

problem Generated/90 {
code {
        func generate_alphabetic_strings(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz"]
(3) -> ["abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz"]
(0) -> []
(1) -> ["abcdefghijklmnopqrstuvwxyz"]
(10) -> ["abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz"]
        }
    }
}

problem Generated/91 {
code {
        func get_alpha_strings(n: int) -> list<string>
    }
    tests {
        template nse {
            (1) -> ["a"]
(2) -> ["a", "ab"]
(4) -> ["a", "ab", "abc", "abcd"]
(6) -> ["a", "ab", "abc", "abcd", "abcde", "abcdef"]
(10) -> ["a", "ab", "abc", "abcd", "abcde", "abcdef", "abcdefg", "abcdefgh", "abcdefghi", "abcdefghij"]
        }
    }
}

problem Generated/92 {
code {
        func find_numbers_in_string(s: string, start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            ("abc123def456", 0, 100) -> [123, 456]
("This is a test string with numbers 123 and 456", 0, 100) -> [123, 456]
("NoNumbersInThisString", 0, 100) -> []
("", 0, 100) -> []
("The number is 1", 0, 100) -> [1]
        }
    }
}

problem Generated/93 {
code {
        func sum_numbers_in_string(s: string) -> int
    }
    tests {
        template nse {
            ("abc123xyz") -> 6
("1") -> 1
("12345") -> 15
("abc") -> 0
("") -> 0
        }
    }
}

problem Generated/94 {
code {
        func get_digits_in_range(start: int, last: int, txt: string) -> list<int>
    }
    tests {
        template nse {
            (0, 9, "abc123xyz") -> [1, 2, 3]
(0, 9, "12345") -> [1, 2, 3, 4, 5]
(0, 9, "") -> []
(3, 7, "891237") -> [3, 7]
(1, 1, "1") -> [1]
        }
    }
}

problem Generated/95 {
code {
        func get_numbers_from_string(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello 123 world 456") -> [123, 456]
("1 2 3 4 5") -> [1, 2, 3, 4, 5]
("the quick 23 brown fox jumps over the 45 lazy dog") -> [23, 45]
("") -> []
("1 2 three 4 five") -> [1, 2, 4]
        }
    }
}

problem Generated/96 {
code {
        func get_numbers_from_string(s: string) -> list<int>
    }
    tests {
        template nse {
            ("The numbers are 1, 2, 3, and 4") -> [1, 2, 3, 4]
("There are no numbers here") -> []
("1 2 3 4 5 6 7 8 9 10") -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
("The answer is 42") -> [42]
("There are two numbers, 1 and 2") -> [1, 2]
        }
    }
}

problem Generated/97 {
code {
        func create_list_of_strings(n: int, pre: string) -> list<string>
    }
    tests {
        template nse {
            (5, "hello") -> ["hello1", "hello2", "hello3", "hello4", "hello5"]
(3, "world") -> ["world1", "world2", "world3"]
(0, "hi") -> []
(10, "") -> ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
(3, "a") -> ["a1", "a2", "a3"]
        }
    }
}

problem Generated/98 {
code {
        func filter_string_list_on_prefix(str_lst: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
(["apple", "banana", "cherry", "date"], "e") -> []
([], "a") -> []
        }
    }
}

problem Generated/99 {
code {
        func get_string_starts_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "avocado", "grape"], "a") -> ["apple", "apricot", "avocado"]
(["apple", "banana", "apricot", "avocado", "grape"], "b") -> ["banana"]
([], "c") -> []
(["mango", "pineapple", "watermelon", "kiwi"], "k") -> ["kiwi"]
(["mango", "pineapple", "watermelon", "kiwi"], "p") -> ["pineapple"]
        }
    }
}

problem Generated/100 {
code {
        func find_words_starting_with_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
(["apple", "banana", "cherry", "date"], "e") -> []
        }
    }
}

problem Generated/101 {
code {
        func get_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
(["apple", "banana", "cherry", "date"], "e") -> []
([], "a") -> []
        }
    }
}

problem Generated/102 {
code {
        func get_words_starting_with(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hi", "there"], "h") -> ["hello", "hi"]
(["hello", "world", "hi", "there"], "w") -> ["world"]
(["hello", "world", "hi", "there"], "") -> ["hello", "world", "hi", "there"]
([], "h") -> []
(["", "hello", "world"], "") -> ["", "hello", "world"]
        }
    }
}

problem Generated/103 {
code {
        func get_words_starting_with_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "orange", "grapefruit"], "ap") -> ["apple", "apricot"]
(["apple", "banana", "apricot", "orange", "grapefruit"], "o") -> ["orange"]
([], "a") -> []
(["apple", "banana", "apricot", "orange", "grapefruit"], "") -> ["apple", "banana", "apricot", "orange", "grapefruit"]
(["apple", "banana", "apricot", "orange", "grapefruit"], "p") -> []
        }
    }
}

problem Generated/104 {
code {
        func generate_count_string(target_s: string, count: int) -> list<string>
    }
    tests {
        template nse {
            ("hello", 3) -> ["hello_0", "hello_1", "hello_2"]
("world", 5) -> ["world_0", "world_1", "world_2", "world_3", "world_4"]
("good", 1) -> ["good_0"]
("", 3) -> ["_0", "_1", "_2"]
("calculator", 0) -> []
        }
    }
}

problem Generated/105 {
code {
        func replace_list_elements(elements: list<string>, old: string, new_dat: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "apple", "grape"], "apple", "mango") -> ["mango", "banana", "orange", "mango", "grape"]
(["apple", "banana", "orange", "apple", "grape"], "mango", "guava") -> ["apple", "banana", "orange", "apple", "grape"]
([], "mango", "guava") -> []
(["apple", "banana"], "banana", "mango") -> ["apple", "mango"]
(["apple", "banana", "orange", "apple", "grape"], "grape", "mango") -> ["apple", "banana", "orange", "apple", "mango"]
        }
    }
}

problem Generated/106 {
code {
        func replace_num_in_list(elements: list<int>, old: int, new_dat: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2, 6) -> [1, 6, 3, 4, 5]
([1, 2, 3, 4, 5, 2], 2, 6) -> [1, 6, 3, 4, 5, 6]
([1, 2, 3, 4, 5], 6, 7) -> [1, 2, 3, 4, 5]
([], 6, 7) -> []
([6, 6, 6, 6], 6, 7) -> [7, 7, 7, 7]
        }
    }
}

problem Generated/107 {
code {
        func replace_element_in_range(elements: list<int>, start: int, last: int, replacement: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2, 4, 9) -> [1, 2, 9, 9, 9]
([7, 3, 5, 9, 6], 0, 2, 0) -> [0, 0, 0, 9, 6]
([1, 7, 4, 9, 5], 1, 3, 8) -> [1, 8, 8, 8, 5]
([1, 7, 4, 9, 5], 0, 0, 0) -> [0, 7, 4, 9, 5]
([1, 2, 3, 4, 5, 6, 7, 8], 4, 6, 0) -> [1, 2, 3, 4, 0, 0, 0, 8]
        }
    }
}

problem Generated/108 {
code {
        func replace_elements_in_list(elements: list<string>, original: string, replacement: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "banana", "apple"], "banana", "orange") -> ["apple", "orange", "cherry", "orange", "apple"]
(["a", "b", "c", "a", "d"], "a", "x") -> ["x", "b", "c", "x", "d"]
(["dog", "cat", "hamster", "cat"], "cat", "bird") -> ["dog", "bird", "hamster", "bird"]
(["a", "a", "a", "a", "a"], "a", "x") -> ["x", "x", "x", "x", "x"]
(["1", "2", "3", "4", "5"], "6", "7") -> ["1", "2", "3", "4", "5"]
        }
    }
}

problem Generated/109 {
code {
        func replace_elements_in_list(elements: list<int>, old: int, new_dat: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 9) -> [1, 2, 9, 4, 5]
([1, 7, 4, 9, 5], 7, 0) -> [1, 0, 4, 9, 5]
([1, 2, 3, 4, 5], 6, 8) -> [1, 2, 3, 4, 5]
([], 6, 8) -> []
([1, 2, 1, 3, 1], 1, 0) -> [0, 2, 0, 3, 0]
        }
    }
}

problem Generated/110 {
code {
        func replace_values_in_range(elements: list<int>, start: int, last: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 1, 3, 9) -> [1, 9, 9, 9, 5]
([1, 2, 3, 4, 5], 0, 4, 0) -> [0, 0, 0, 0, 0]
([1, 2, 3, 4, 5], 2, 2, 7) -> [1, 2, 7, 4, 5]
([-1, -2, -3, -4, -5], 1, 3, 0) -> [-1, 0, 0, 0, -5]
([1, 2, 3, 4, 5], 10, 20, 9) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/111 {
code {
        func generate_list_from_range(start: int, last: int, step: int) -> list<int>
    }
    tests {
        template nse {
            (1, 10, 1) -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
(1, 10, 2) -> [1, 3, 5, 7, 9]
(1, 10, 3) -> [1, 4, 7]
(1, 10, 4) -> [1, 5, 9]
(10, 1, -1) -> [10, 9, 8, 7, 6, 5, 4, 3, 2]
        }
    }
}

problem Generated/112 {
code {
        func generate_fibonacci_numbers(n: int) -> list<int>
    }
    tests {
        template nse {
            (0) -> []
(1) -> [0]
(2) -> [0, 1]
(5) -> [0, 1, 1, 2, 3]
(10) -> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
        }
    }
}

problem Generated/113 {
code {
        func generate_list_with_range(start: int, stop: int, step: int) -> list<int>
    }
    tests {
        template nse {
            (0, 10, 2) -> [0, 2, 4, 6, 8]
(0, 10, 3) -> [0, 3, 6, 9]
(0, 10, 5) -> [0, 5]
(10, 0, -1) -> [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
(0, 0, 1) -> []
        }
    }
}

problem Generated/114 {
code {
        func generate_fibonacci_sequence(n: int) -> list<int>
    }
    tests {
        template nse {
            (0) -> []
(1) -> [0]
(2) -> [0, 1]
(5) -> [0, 1, 1, 2, 3]
(10) -> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
        }
    }
}

problem Generated/115 {
code {
        func generate_multiples_of_n(n: int, count: int) -> list<int>
    }
    tests {
        template nse {
            (5, 10) -> [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]
(2, 5) -> [2, 4, 6, 8, 10]
(0, 7) -> [0, 0, 0, 0, 0, 0, 0]
(4, 0) -> []
(3, 3) -> [3, 6, 9]
        }
    }
}

problem Generated/116 {
code {
        func generate_list_within_range(lower: int, upper: int, step: int) -> list<int>
    }
    tests {
        template nse {
            (0, 10, 1) -> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
(1, 11, 2) -> [1, 3, 5, 7, 9]
(10, 0, -1) -> [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
(10, 10, 1) -> []
(0, 0, 1) -> []
        }
    }
}

problem Generated/117 {
code {
        func generate_fibonacci_sequence(n: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
(1) -> [0]
(0) -> []
(-5) -> []
(6) -> [0, 1, 1, 2, 3, 5]
        }
    }
}

problem Generated/118 {
code {
        func generate_fibonacci_sequence(n: int) -> list<int>
    }
    tests {
        template nse {
            (1) -> [1]
(2) -> [1, 1]
(7) -> [1, 1, 2, 3, 5, 8, 13]
(10) -> [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
(0) -> []
        }
    }
}

problem Generated/119 {
code {
        func generate_fibonacci_numbers(n: int) -> list<int>
    }
    tests {
        template nse {
            (0) -> []
(1) -> [0]
(2) -> [0, 1]
(5) -> [0, 1, 1, 2, 3]
(10) -> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
        }
    }
}

problem Generated/120 {
code {
        func generate_fibonacci_sequence(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [0, 1, 1, 2, 3]
(1) -> [0]
(2) -> [0, 1]
(11) -> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
(0) -> []
        }
    }
}

problem Generated/121 {
code {
        func generate_reverse_list(length: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [-5, -4, -3, -2, -1]
(1) -> [-1]
(0) -> []
(7) -> [-7, -6, -5, -4, -3, -2, -1]
(3) -> [-3, -2, -1]
        }
    }
}

problem Generated/122 {
code {
        func get_sorted_squares(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([-3, -2, -1, 0, 1, 2, 3]) -> [0, 1, 1, 4, 4, 9, 9]
([6, 8, 2, 5, 9, 1, 3]) -> [1, 4, 9, 25, 36, 64, 81]
([5, 4, 3, 2, 1]) -> [1, 4, 9, 16, 25]
([-6, 2, -3, 9, -1]) -> [1, 4, 9, 36, 81]
([]) -> []
        }
    }
}

problem Generated/123 {
code {
        func get_sorted_squares(nums: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([-4, -1, 0, 3, 10]) -> [0, 1, 9, 16, 100]
([1, 2, 3, 4, 5]) -> [1, 4, 9, 16, 25]
([-5, -4, -3, -2, -1]) -> [1, 4, 9, 16, 25]
([0]) -> [0]
([]) -> []
([-10, -3, 0, 5, 9]) -> [0, 9, 25, 81, 100]
        }
    }
}

problem Generated/124 {
code {
        func get_sorted_even_range(start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            (1, 10) -> [2, 4, 6, 8, 10]
(10, 20) -> [10, 12, 14, 16, 18, 20]
(5, 5) -> []
(7, 9) -> [8]
(0, 0) -> [0]
        }
    }
}

problem Generated/125 {
code {
        func sort_list_within_range(elements: list<int>, start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 9, 2, 8, 3, 7, 4, 6, 5], 3, 7) -> [3, 4, 5, 6, 7]
([1, 9, 2, 8, 3, 7, 4, 6, 5], 9, 9) -> [9]
([1, 9, 2, 8, 3, 7, 4, 6, 5], 10, 15) -> []
([1, 9, 2, 8, 3, 7, 4, 6, 5], 4, 2) -> []
([], 1, 5) -> []
        }
    }
}

problem Generated/126 {
code {
        func sort_list_in_range(elements: list<int>, start_idx: int, end_idx: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 3, 2, 5, 4], 1, 3) -> [1, 2, 3, 5, 4]
([5, 4, 3, 2, 1], 1, 3) -> [5, 2, 3, 4, 1]
([1, 2, 3, 4, 5], 1, 3) -> [1, 2, 3, 4, 5]
([1, 3, 5, 2, 4, 6], 2, 4) -> [1, 3, 2, 4, 5, 6]
([1, 2, 3, 4, 5], 0, 4) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/127 {
code {
        func find_all_occurrences(elements: list<int>, target: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([1, 2, 3, 4, 3], 3) -> [2, 4]
([5, 4, 3, 2, 1], 6) -> []
([1, 2, 3, 4, 5], 6) -> []
([], 5) -> []
        }
    }
}

problem Generated/128 {
code {
        func get_indexes_of_value(items: list<int>, value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([7, 3, 5, 9, 6], 5) -> [2]
([1, 7, 4, 9, 5], 0) -> []
([1, 7, 4, 9, 5], 7) -> [1]
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> [7]
        }
    }
}

problem Generated/129 {
code {
        func get_indices_of_value(elements: list<int>, value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [1]
([7, 3, 5, 9, 6, 3], 3) -> [1, 5]
([1, 7, 4, 9, 5], 3) -> []
([1, 7, 4, 9, 5, 4], 4) -> [2, 5]
([1, 2, 3, 2, 1, 3], 3) -> [2, 5]
        }
    }
}

problem Generated/130 {
code {
        func get_indexes_of_items(lst: list<int>, item: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 4, 5, 2], 2) -> [1, 3, 6]
([1, 2, 3, 4, 5], 6) -> []
([2, 2, 2, 2, 2], 2) -> [0, 1, 2, 3, 4]
([], 4) -> []
([4], 4) -> [0]
        }
    }
}

problem Generated/131 {
code {
        func find_index_of_target(elements: list<int>, target: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([0, 2, 0, 4, 0], 0) -> [0, 2, 4]
([7, 3, 5, 9, 6, 5, 1, 5], 5) -> [2, 5, 7]
([], 5) -> []
([1, 2, 3, 4, 5], 6) -> []
        }
    }
}

problem Generated/132 {
code {
        func find_indices_of_values(elements: list<int>, values: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [1, 3, 5]) -> [0, 2, 4]
([7, 3, 5, 9, 6], [5, 7, 9]) -> [2, 0, 3]
([1, 7, 4, 9, 5], [6, 2, 8]) -> []
([1, 7, 4, 9, 5], [1, 7, 4, 9, 5]) -> [0, 1, 2, 3, 4]
([1, 2, 3, 4, 5, 6, 7, 8], [2, 4, 6, 8, 10]) -> [1, 3, 5, 7]
        }
    }
}

problem Generated/133 {
code {
        func find_indexes_of_element(elements: list<int>, target: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([7, 3, 5, 9, 6], 7) -> [0]
([1, 7, 4, 9, 5], 5) -> [4]
([1, 7, 4, 9, 5], 10) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> [7]
        }
    }
}

problem Generated/134 {
code {
        func get_indexes_of_occurrence(elements: list<int>, target: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([7, 3, 5, 9, 6, 3], 3) -> [1, 5]
([1, 7, 4, 9, 5], 0) -> []
([], 2) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> [7]
        }
    }
}

problem Generated/135 {
code {
        func reverse_range(n: int) -> list<int>
    }
    tests {
        template nse {
            (1) -> [1]
(5) -> [5, 4, 3, 2, 1]
(10) -> [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
(2) -> [2, 1]
(0) -> []
        }
    }
}

problem Generated/136 {
code {
        func reverse_range(n: int, start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            (10, 2, 6) -> [6, 5, 4, 3, 2]
(5, 0, 4) -> [4, 3, 2, 1, 0]
(8, 1, 1) -> [1]
(3, 2, 2) -> [2]
(10, 0, 9) -> [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
        }
    }
}

problem Generated/137 {
code {
        func shift_list(elements: list<int>, k: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [4, 5, 1, 2, 3]
([1, 2, 3, 4, 5], 7) -> [4, 5, 1, 2, 3]
([1, 2, 3, 4, 5], 0) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5], 5) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5], -2) -> [3, 4, 5, 1, 2]
        }
    }
}

problem Generated/138 {
code {
        func create_copy_of_list(elements: list<double>, n: int) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0], 2) -> [1.0, 2.0, 3.0, 1.0, 2.0, 3.0]
([1.0, 2.0], 0) -> []
([], 5) -> []
([9.0], 3) -> [9.0, 9.0, 9.0]
([1.0, 2.0, 3.0, 4.0], 3) -> [1.0, 2.0, 3.0, 4.0, 1.0, 2.0, 3.0, 4.0, 1.0, 2.0, 3.0, 4.0]
        }
    }
}

problem Generated/139 {
code {
        func copy_list_with_range(elements: list<int>, start: int, stop: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 1, 4) -> [2, 3, 4]
([1, 7, 4, 9, 5], 2, 3) -> [4]
([1, 7, 4, 9, 5], 3, 3) -> []
([1, 7, 4, 9, 5], 0, 5) -> [1, 7, 4, 9, 5]
([1, 2, 3, 4, 5, 6, 7, 8], 2, 7) -> [3, 4, 5, 6, 7]
        }
    }
}

problem Generated/140 {
code {
        func duplicate_list_n_times(lst: list<int>, n: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], 0) -> []
([1, 2, 3], 1) -> [1, 2, 3]
([1, 2, 3], 2) -> [1, 2, 3, 1, 2, 3]
([4, 7, 2], 4) -> [4, 7, 2, 4, 7, 2, 4, 7, 2, 4, 7, 2]
([], 6) -> []
        }
    }
}

problem Generated/141 {
code {
        func copy_and_replace(elements: list<int>, old: int, new_dat: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2, 7) -> [1, 7, 3, 4, 5]
([1, 2, 3, 2, 5, 2], 2, 7) -> [1, 7, 3, 7, 5, 7]
([], 2, 7) -> []
([2, 2, 2, 2, 2], 2, 7) -> [7, 7, 7, 7, 7]
([1, 3, 5, 7, 9], 8, 2) -> [1, 3, 5, 7, 9]
        }
    }
}

problem Generated/142 {
code {
        func generate_range_of_squares(start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            (1, 5) -> [1, 4, 9, 16, 25]
(-3, 3) -> [9, 4, 1, 0, 1, 4, 9]
(0, 0) -> [0]
(-1, 1) -> [1, 0, 1]
(5, 10) -> [25, 36, 49, 64, 81, 100]
        }
    }
}

problem Generated/143 {
code {
        func generate_even_numbers(num: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [0, 2, 4, 6, 8]
(5) -> [0, 2, 4]
(1) -> [0]
(0) -> []
(20) -> [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
        }
    }
}

problem Generated/144 {
code {
        func get_even_numbers(n: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [0, 2, 4, 6, 8]
(5) -> [0, 2, 4]
(0) -> []
(20) -> [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
(25) -> [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]
        }
    }
}

problem Generated/145 {
code {
        func get_square_roots(n: int) -> list<int>
    }
    tests {
        template nse {
            (16) -> [0, 1, 2, 3, 4]
(9) -> [0, 1, 2, 3]
(10) -> [0, 1, 2, 3]
(25) -> [0, 1, 2, 3, 4, 5]
(1) -> [0, 1]
        }
    }
}

problem Generated/146 {
code {
        func generate_even_numbers(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [1, 2]
(10) -> [1, 2, 3, 4, 5]
(20) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
(25) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
(1) -> []
        }
    }
}

problem Generated/147 {
code {
        func divide_list_into_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5, 0]]
([7, 3, 5, 9, 6, 2], 3) -> [[7, 3, 5], [9, 6, 2]]
([1, 7, 4, 9, 5], 1) -> [[1], [7], [4], [9], [5]]
([1, 7, 4, 9, 5], 10) -> [[1, 7, 4, 9, 5, 0, 0, 0, 0, 0]]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8]]
        }
    }
}

problem Generated/148 {
code {
        func get_square_numbers(num: int) -> list<int>
    }
    tests {
        template nse {
            (25) -> [0, 1, 4, 9, 16, 25]
(10) -> [0, 1, 4, 9]
(8) -> [0, 1, 4]
(0) -> [0]
(36) -> [0, 1, 4, 9, 16, 25, 36]
        }
    }
}

problem Generated/149 {
code {
        func get_squares(n: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [1, 4, 9]
(25) -> [1, 4, 9, 16, 25]
(3) -> [1]
(1) -> [1]
(0) -> []
        }
    }
}

problem Generated/150 {
code {
        func get_primes(n: int) -> list<int>
    }
    tests {
        template nse {
            (25) -> [2, 3, 5, 7, 11, 13, 17, 19, 23]
(10) -> [2, 3, 5, 7]
(2) -> [2]
(1) -> []
(0) -> []
        }
    }
}

problem Generated/151 {
code {
        func get_primes_within_range(n: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [2, 3, 5, 7]
(20) -> [2, 3, 5, 7, 11, 13, 17, 19]
(1) -> []
(2) -> [2]
(30) -> [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
        }
    }
}

problem Generated/152 {
code {
        func get_primes(n: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [2,3,5,7]
(20) -> [2,3,5,7,11,13,17,19]
(30) -> [2,3,5,7,11,13,17,19,23,29]
(40) -> [2,3,5,7,11,13,17,19,23,29,31,37]
(50) -> [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]
        }
    }
}

problem Generated/153 {
code {
        func get_primes(n: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [2, 3, 5, 7]
(20) -> [2, 3, 5, 7, 11, 13, 17, 19]
(5) -> [2, 3, 5]
(1) -> []
(100) -> [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
        }
    }
}

problem Generated/154 {
code {
        func get_primes(n: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [2, 3, 5, 7]
(20) -> [2, 3, 5, 7, 11, 13, 17, 19]
(30) -> [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
(40) -> [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]
(50) -> [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]
        }
    }
}

problem Generated/155 {
code {
        func generate_power_list(n: int, power: int) -> list<int>
    }
    tests {
        template nse {
            (5, 2) -> [1, 4, 9, 16, 25]
(3, 3) -> [1, 8, 27]
(0, 5) -> []
(8, 1) -> [1, 2, 3, 4, 5, 6, 7, 8]
(6, 0) -> [1, 1, 1, 1, 1, 1]
        }
    }
}

problem Generated/156 {
code {
        func generate_power_list(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [1, 2, 4, 8, 16]
(0) -> []
(1) -> [1]
(10) -> [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]
(3) -> [1, 2, 4]
        }
    }
}

problem Generated/157 {
code {
        func generate_powers_of_two(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [1, 2, 4, 8, 16]
(3) -> [1, 2, 4]
(10) -> [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]
(1) -> [1]
(0) -> []
        }
    }
}

problem Generated/158 {
code {
        func generate_power_list(n: int, p: int) -> list<int>
    }
    tests {
        template nse {
            (5, 2) -> [0, 1, 4, 9, 16]
(3, 3) -> [0, 1, 8]
(2, 4) -> [0, 1]
(6, 1) -> [0, 1, 2, 3, 4, 5]
(8, 5) -> [0, 1, 32, 243, 1024, 3125, 7776, 16807]
        }
    }
}

problem Generated/159 {
code {
        func power_of_two(n: int) -> list<int>
    }
    tests {
        template nse {
            (0) -> []
(1) -> [1]
(2) -> [1, 2]
(5) -> [1, 2, 4, 8, 16]
(10) -> [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]
        }
    }
}

problem Generated/160 {
code {
        func power_of_range(n: int, k: int) -> list<int>
    }
    tests {
        template nse {
            (5, 2) -> [1, 4, 9, 16, 25]
(3, 3) -> [1, 8, 27]
(7, 1) -> [1, 2, 3, 4, 5, 6, 7]
(0, 2) -> []
(1, 1) -> [1]
        }
    }
}

problem Generated/161 {
code {
        func compute_product_of_range(start: int, last: int) -> int
    }
    tests {
        template nse {
            (1, 5) -> 120
(3, 8) -> 20160
(0, 0) -> 0
(-4, 4) -> 0
(3, 3) -> 3
        }
    }
}

problem Generated/162 {
code {
        func product_of_range(n: int, m: int) -> int
    }
    tests {
        template nse {
            (1, 5) -> 120
(3, 9) -> 181440
(2, 2) -> 2
(0, 5) -> 0
(4, 4) -> 4
        }
    }
}

problem Generated/163 {
code {
        func multiply_range(start: int, last: int) -> int
    }
    tests {
        template nse {
            (1, 5) -> 120
(5, 1) -> 1
(1, 1) -> 1
(4, 4) -> 4
(2, 10) -> 3628800
        }
    }
}

problem Generated/164 {
code {
        func multiply_range(start: int, last: int) -> int
    }
    tests {
        template nse {
            (1, 5) -> 120
(3, 6) -> 360
(10, 12) -> 1320
(4, 4) -> 4
(0, 10) -> 0
        }
    }
}

problem Generated/165 {
code {
        func split_string_by_range(s: string, n: int) -> list<string>
    }
    tests {
        template nse {
            ("1234567890", 1) -> ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0"]
("1234567890", 3) -> ["123", "456", "789", "0"]
("abcdefghij", 2) -> ["ab", "cd", "ef", "gh", "ij"]
("Testing", 3) -> ["Tes", "tin", "g"]
("OneTwoThreeFour", 4) -> ["OneT", "woTh", "reeF", "our"]
        }
    }
}

problem Generated/166 {
code {
        func split_string_by_length(sentence: string, length: int) -> list<string>
    }
    tests {
        template nse {
            ("The quick brown fox jumps over the lazy dog", 4) -> ["The ", "quic", "k br", "own ", "fox ", "jump", "s ov", "er t", "he l", "azy ", "dog"]
("The quick brown fox jumps over the lazy dog", 10) -> ["The quick ", "brown fox ", "jumps over", " the lazy ", "dog"]
("The quick brown fox jumps over the lazy dog", 20) -> ["The quick brown fox ", "jumps over the lazy ", "dog"]
("Hello World", 5) -> ["Hello", " Worl", "d"]
("Hello World", 20) -> ["Hello World"]
        }
    }
}

problem Generated/167 {
code {
        func create_list_with_len(length: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [0, 1, 2, 3, 4]
(1) -> [0]
(0) -> []
(10) -> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
(3) -> [0, 1, 2]
        }
    }
}

problem Generated/168 {
code {
        func generate_even_numbers(n: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [2, 4, 6, 8, 10]
(7) -> [2, 4, 6]
(1) -> []
(20) -> [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
(15) -> [2, 4, 6, 8, 10, 12, 14]
        }
    }
}

problem Generated/169 {
code {
        func create_incremental_list(length: int, start: int, increment_by: int) -> list<int>
    }
    tests {
        template nse {
            (5, 2, 3) -> [2, 5, 8, 11, 14]
(3, -5, -3) -> [-5, -8, -11]
(1, 0, 10) -> [0]
(0, 10, 5) -> []
(10, 0, 0) -> [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        }
    }
}

problem Generated/170 {
code {
        func generate_fibonacci(n: int) -> list<int>
    }
    tests {
        template nse {
            (0) -> []
(1) -> [0]
(2) -> [0, 1]
(5) -> [0, 1, 1, 2, 3]
(10) -> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
        }
    }
}

problem Generated/171 {
code {
        func generate_sequence_by_length(length: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [1, 2, 3, 4, 5]
(10) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
(1) -> [1]
(0) -> []
(20) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
        }
    }
}

problem Generated/172 {
code {
        func generate_odd_numbers(n: int) -> list<int>
    }
    tests {
        template nse {
            (1) -> [1]
(2) -> [1, 3]
(3) -> [1, 3, 5]
(4) -> [1, 3, 5, 7]
(5) -> [1, 3, 5, 7, 9]
        }
    }
}

problem Generated/173 {
code {
        func generate_list_of_even_nums(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [2, 4]
(8) -> [2, 4, 6, 8]
(10) -> [2, 4, 6, 8, 10]
(1) -> []
(15) -> [2, 4, 6, 8, 10, 12, 14]
        }
    }
}

problem Generated/174 {
code {
        func generate_n_by_n_identity_matrix(n: int) -> list<list<int>>
    }
    tests {
        template nse {
            (3) -> [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
(4) -> [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]
(1) -> [[1]]
(5) -> [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]]
(2) -> [[1, 0], [0, 1]]
        }
    }
}

problem Generated/175 {
code {
        func get_absolute_difference(n: int, numbers: list<int>) -> int
    }
    tests {
        template nse {
            (4, [1,2,3,4]) -> 2
(5, [1,3,2,4,5]) -> 1
(3, [1,5,-3]) -> 7
(6, [1,2,3,4,5,6]) -> 3
(10, [4,3,2,5,-1,6,8,9,2,4]) -> 12
        }
    }
}

problem Generated/176 {
code {
        func get_len_diff(list1: list<string>, list2: list<string>) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "cherry"], ["apple", "banana", "cherry"]) -> 0
([], ["apple", "banana", "cherry"]) -> 3
(["apple", "banana", "cherry"], []) -> 3
(["apple", "banana", "cherry"], ["cherry", "banana", "apple"]) -> 0
(["apple", "banana", "cherry"], ["grape", "orange"]) -> 1
        }
    }
}

problem Generated/177 {
code {
        func average_of_list(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 3.0
([0.0, 0.0, 0.0, 0.0]) -> 0.0
([]) -> 0.0
([0.5, 1.5, 2.5]) -> 1.5
([5.0, 10.0, 15.0]) -> 10.0
        }
    }
}

problem Generated/178 {
code {
        func average_of_list(elements: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 3.0
([1.0]) -> 1.0
([]) -> 0.0
([0.0, 0.0, 0.0, 0.0, 0.0]) -> 0.0
([10.0, 20.0, 30.0]) -> 20.0
        }
    }
}

problem Generated/179 {
code {
        func average_of_numbers(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 3.0
([0.0, 0.0, 0.0, 0.0, 0.0]) -> 0.0
([]) -> 0.0
([1.0, -2.0, 3.0, -4.0, 5.0]) -> 0.6
([1.0, 1.0, 2.0, 3.0, 5.0]) -> 2.4
        }
    }
}

problem Generated/180 {
code {
        func find_longest_word(words: list<string>) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "durian"]) -> "banana"
(["I", "am", "a", "Python", "programmer"]) -> "programmer"
(["a", "aa", "aaa", "aaaa"]) -> "aaaa"
(["Python", "is", "a", "fun", "language"]) -> "language"
(["short", "longword", "hello", "world", "python", "programming"]) -> "programming"
        }
    }
}

problem Generated/181 {
code {
        func min_length_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["apple", "orange", "banana", "mango", "kiwi"]) -> "kiwi"
(["cat", "puppy", "dog", "mouse"]) -> "cat"
(["zebra", "lion", "tiger", "elephant", "giraffe"]) -> "lion"
(["web", "request", "response", "cookies"]) -> "web"
(["abc", "def", "gh", "ijkl"]) -> "gh"
        }
    }
}

problem Generated/182 {
code {
        func min_word_by_length(words: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python", "jupyter"]) -> "hello"
([]) -> ""
(["", "hello", "world", "", "python"]) -> "hello"
(["python"]) -> "python"
(["apple", "banana", "cherry", "dates", "elderberry", "fig"]) -> "fig"
        }
    }
}

problem Generated/183 {
code {
        func transpose_matrix(matrix: list<list<int>>) -> list<list<int>>
    }
    tests {
        template nse {
            ([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
([[1, 2], [3, 4], [5, 6], [7, 8]]) -> [[1, 3, 5, 7], [2, 4, 6, 8]]
([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]
([[1], [2], [3], [4]]) -> [[1, 2, 3, 4]]
([[1, 2, 3, 4]]) -> [[1], [2], [3], [4]]
        }
    }
}

problem Generated/184 {
code {
        func get_common_prefix(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["flower", "flow", "flight"]) -> "fl"
(["dog", "racecar", "car"]) -> ""
(["hello"]) -> "hello"
([]) -> ""
(["", ""]) -> ""
        }
    }
}

problem Generated/185 {
code {
        func multiply_corresponding_lists(a: list<int>, b: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [6, 7, 8]) -> [6, 14, 24]
([10, 20, 30], [1, 2, 3, 4, 5]) -> [10, 40, 90]
([1, 2, 3], [4, 5, 6]) -> [4, 10, 18]
([1, 2, 3], []) -> []
([], [4, 5, 6]) -> []
        }
    }
}

problem Generated/186 {
code {
        func combine_lists_with_length(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) -> [2, 4, 6, 8, 10]
([1, 1, 1, 1], [2, 2, 2, 2, 2]) -> [3, 3, 3, 3]
([1, 2, 3], [2, 4]) -> [3, 6]
([0, 0, 0], [0, 0, 0]) -> [0, 0, 0]
([1], [2, 4, 6, 8]) -> [3]
        }
    }
}

problem Generated/187 {
code {
        func get_even_indexed_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 3, 5]
([2, 3, 4, 5]) -> [2, 4]
([0, 1, 2, 3, 4, 6]) -> [0, 2, 4]
([1, 7, 4, 9, 5]) -> [1, 4, 5]
([1]) -> [1]
        }
    }
}

problem Generated/188 {
code {
        func calculate_average_of_index_with_value(elements: list<int>) -> double
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 2.0
([7, 3, 5, 9, 6]) -> 2.0
([1, 7, 4, 9, 5]) -> 2.0
([1, 7]) -> 0.5
([1]) -> 0.0
        }
    }
}

problem Generated/189 {
code {
        func count_distinct_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([1, 2, 1, 4, 4, 2, 3]) -> 4
([1, 7, 4, 9, 5]) -> 5
([-1, -2, -3, -4, -5]) -> 5
([1, 2, 3, 4, 5, 6, 7, 8]) -> 8
        }
    }
}

problem Generated/190 {
code {
        func count_unique_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> 5
([1, 1, 1, 1, 1]) -> 1
([]) -> 0
([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) -> 10
        }
    }
}

problem Generated/191 {
code {
        func count_unique_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([1, 1, 3, 3, 5]) -> 3
([3, 3, 3, 3, 3]) -> 1
([]) -> 0
([1, 2, 3, 3, 2, 1]) -> 3
        }
    }
}

problem Generated/192 {
code {
        func filter_short_strings(strs: list<string>, min_length: int) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "kiwi", "orange", "pear"], 5) -> ["apple", "banana", "orange"]
(["apple", "banana", "kiwi", "orange", "pear"], 4) -> ["apple", "banana", "kiwi", "orange", "pear"]
([], 5) -> []
(["apple", "banana", "kiwi", "orange", "pear"], 10) -> []
(["a", "bb", "ccc", "dddd"], 2) -> ["bb", "ccc", "dddd"]
        }
    }
}

problem Generated/193 {
code {
        func get_top_n_longest_str(dat: list<string>, n: int) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date", "elderberry"], 3) -> ["elderberry", "banana", "cherry"]
(["apple", "banana", "cherry", "date", "elderberry"], 6) -> ["elderberry", "banana", "cherry", "apple", "date"]
([], 4) -> []
(["a", "be", "see", "de"], 1) -> ["see"]
(["a", "be", "see", "de"], 0) -> []
        }
    }
}

problem Generated/194 {
code {
        func generate_alphabets(num: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["a", "b", "c", "d", "e"]
(1) -> ["a"]
(0) -> []
(26) -> ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
(2) -> ["a", "b"]
        }
    }
}

problem Generated/195 {
code {
        func generate_string_from_codes(codes: list<int>) -> string
    }
    tests {
        template nse {
            ([97, 98, 99, 100]) -> "abcd"
([65, 66, 67, 68]) -> "ABCD"
([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]) -> "Hello World!"
([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, -33]) -> "Hello World"
([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 257]) -> "Hello World"
        }
    }
}

problem Generated/196 {
code {
        func count_binary_one(num: int) -> int
    }
    tests {
        template nse {
            (10) -> 2
(15) -> 4
(8) -> 1
(32) -> 1
(7) -> 3
        }
    }
}

problem Generated/197 {
code {
        func count_binary_ones(n: int) -> int
    }
    tests {
        template nse {
            (10) -> 2
(25) -> 3
(5) -> 2
(0) -> 0
(1023) -> 10
        }
    }
}

problem Generated/198 {
code {
        func get_binary_lengths(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 2, 3, 3]
([10, 15, 256, 1024, 65535]) -> [4, 4, 9, 11, 16]
([0, 8, 16, 32, 64]) -> [1, 4, 5, 6, 7]
([175, 244, 19, 64, 8]) -> [8, 8, 5, 7, 4]
([]) -> []
        }
    }
}

problem Generated/199 {
code {
        func count_binary_digits(num: int) -> int
    }
    tests {
        template nse {
            (7) -> 3
(15) -> 4
(0) -> 0
(1) -> 1
(97) -> 3
        }
    }
}

problem Generated/200 {
code {
        func find_longest_word(sentence: string) -> string
    }
    tests {
        template nse {
            ("The quick brown fox jumps over the lazy dog") -> "quick"
("Python is an easy to learn, powerful programming language") -> "programming"
("This is a test sentence") -> "sentence"
("Short") -> "Short"
("One more test for good measure") -> "measure"
        }
    }
}

problem Generated/201 {
code {
        func join_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "!", "", "how", "are", "you"], " ") -> "hello world ! how are you"
(["a", "b", "c", "d", "e"], "") -> "abcde"
(["a", "b", "", "d", "e"], " ") -> "a b d e"
([], " ") -> ""
(["", "", "", ""], "") -> ""
        }
    }
}

problem Generated/202 {
code {
        func concatenate_strings(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], " ") -> "hello world"
(["hello", "", "world"], " ") -> "hello world"
(["hello", "world", ""], " ") -> "hello world"
(["hello", "", "world", ""], " ") -> "hello world"
([], " ") -> ""
        }
    }
}

problem Generated/203 {
code {
        func concatenate_strings(str_lst: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "!"], " ") -> "hello world !"
(["apple", "banana", "orange"], ", ") -> "apple, banana, orange"
(["a", "b", "c"], "") -> "abc"
([], " ") -> ""
(["hello"], "") -> "hello"
        }
    }
}

problem Generated/204 {
code {
        func concatenate_strings(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "", "python"], " ") -> "hello world python"
(["hello", "world", "", "python"], "") -> "helloworldpython"
([], " ") -> ""
(["hello"], "") -> "hello"
(["", "", "", ""], " ") -> ""
        }
    }
}

problem Generated/205 {
code {
        func concatenate_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], " ") -> "hello world"
(["hello", "", "world"], " ") -> "hello world"
(["hello", "", "world"], "") -> "helloworld"
([], " ") -> ""
(["test"], "") -> "test"
        }
    }
}

problem Generated/206 {
code {
        func capitalize_join(words: list<string>, sep: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], "-") -> "Hello-World"
(["Python", "is", "awesome"], " ") -> "Python Is Awesome"
([], "__") -> ""
(["one"], "") -> "One"
(["tHe", "rAinBOW", "nAtIon"], "*") -> "The*Rainbow*Nation"
        }
    }
}

problem Generated/207 {
code {
        func get_joined_string(elements: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["a", "b", "c"], ",") -> "a,b,c"
(["foo", "bar", "baz"], "-") -> "foo-bar-baz"
(["hello", "world"], " ") -> "hello world"
([], "-") -> ""
(["Python"], "") -> "Python"
        }
    }
}

problem Generated/208 {
code {
        func concatenate_strings_with_separator(string_lst: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["Hello", "world", "", "Python"], " ") -> "Hello world Python"
(["a", "", "b", "", "c"], ",") -> "a,b,c"
([], ";") -> ""
(["python", "is", "fun"], "") -> "pythonisfun"
(["123", "456", "789"], "-") -> "123-456-789"
        }
    }
}

problem Generated/209 {
code {
        func concatenate_strings(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "", "python", "", "is", "awesome"], " ") -> "hello world python is awesome"
(["hello", "world", "", "python", "", "is", "awesome"], "") -> "helloworldpythonisawesome"
(["", "", ""], " ") -> ""
([], " ") -> ""
(["hello", "world"], "123") -> "hello123world"
        }
    }
}

problem Generated/210 {
code {
        func get_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Banana", "", "GRAPE", "Watermelon"]) -> ["APPLE", "BANANA", "GRAPE", "WATERMELON"]
(["Python", "JAVA", "c++"]) -> ["PYTHON", "JAVA", "C++"]
([]) -> []
([""]) -> []
(["a", "b", "C"]) -> ["A", "B", "C"]
        }
    }
}

problem Generated/211 {
code {
        func get_uppercase_string_lengths(string_lst: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["abc", "def", "Ghi", "JKL"]) -> [3, 3, 3, 3]
(["ABC", "DEF", "GHI", "JKL"]) -> [3, 3, 3, 3]
([]) -> []
(["This", "is", "a", "test", "string"]) -> [4, 2, 1, 4, 6]
(["some", "LOWERcase", "And", "Some", "UPPERCASE"]) -> [4, 9, 3, 4, 9]
        }
    }
}

problem Generated/212 {
code {
        func count_lowercase_strings(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["Abc", "def", "Ghi", "jkl"]) -> 2
(["a", "b", "c"]) -> 3
(["A", "B", "C"]) -> 0
([]) -> 0
(["abc", "def", "ghi", "jkl"]) -> 4
        }
    }
}

problem Generated/213 {
code {
        func count_uppercase_words(words: list<string>) -> int
    }
    tests {
        template nse {
            (["HELLO", "WORLD"]) -> 2
(["Hello", "WoRLd"]) -> 0
(["Hello", "WORLD"]) -> 1
([]) -> 0
([""]) -> 0
        }
    }
}

problem Generated/214 {
code {
        func count_alpha_words(txt: string) -> int
    }
    tests {
        template nse {
            ("Hello World") -> 2
("This is a test sentence.") -> 4
("This is a 123 test.") -> 3
("") -> 0
("Hey there") -> 2
        }
    }
}

problem Generated/215 {
code {
        func get_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "", "python"]) -> ["hello", "world", "python"]
(["I", "am", "a", "bot", "1"]) -> ["I", "am", "a", "bot"]
([]) -> []
(["123", "", "!!!", " "]) -> []
(["alpha", "beta", "gamma", "delta"]) -> ["alpha", "beta", "gamma", "delta"]
        }
    }
}

problem Generated/216 {
code {
        func get_alpha_word_count(words: list<string>) -> int
    }
    tests {
        template nse {
            (["apple", "berry", "cherry", "durian", "eggfruit", "fig"]) -> 6
(["apple", "123", "cherry", "durian", "eggfruit", "fig"]) -> 5
(["apple", "", "cherry", "durian", "eggfruit", "fig"]) -> 5
([]) -> 0
(["apple", "berry", "cherry"]) -> 3
        }
    }
}

problem Generated/217 {
code {
        func count_numbers_in_strings(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["hello", "12345", "world123", "abc456def"]) -> [0, 5, 3, 3]
(["12", "34", "56", "78"]) -> [2, 2, 2, 2]
([]) -> []
(["a", "bb", "ccc"]) -> [0, 0, 0]
(["1 2 3", "4 5 6 7 8 9"]) -> [3, 6]
        }
    }
}

problem Generated/218 {
code {
        func count_digits_in_strings(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["hello", "123", "world", "456"]) -> [0, 3, 0, 3]
(["0000000", "0", "1234", "abc123"]) -> [7, 1, 4, 3]
(["no digits", "in", "this", "string"]) -> [0, 0, 0, 0]
(["1", "22", "333", "4444", "55555"]) -> [1, 2, 3, 4, 5]
([]) -> []
        }
    }
}

problem Generated/219 {
code {
        func count_digits_in_str(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["abc123", "def456", "ghi789"]) -> [3, 3, 3]
(["1q2w3e4r5t", "12345", "a1b2c3d4"]) -> [5, 5, 4]
(["", " ", "   "]) -> [0, 0, 0]
(["123", "456", "789", "101112"]) -> [3, 3, 3, 6]
(["hello", "world"]) -> [0, 0]
        }
    }
}

problem Generated/220 {
code {
        func count_digits_in_list(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["123", "4", "56", "abc", "", "789"]) -> 4
(["1", "2", "3", "4", "5"]) -> 5
(["abcd", "efgh", "ijkl", "mnop", "qrst", "uvw", "xyz"]) -> 0
([]) -> 0
(["12", "", "34", "56", "78"]) -> 4
        }
    }
}

problem Generated/221 {
code {
        func count_digits_in_string_list(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["hello", "world", "123", "456"]) -> 6
(["hello", "world", "", " ", "0123456789"]) -> 10
([]) -> 0
(["no digits"]) -> 0
(["123456789"]) -> 9
        }
    }
}

problem Generated/222 {
code {
        func get_string_starts_with_substr(strs: list<string>, substr: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "e") -> []
([], "a") -> []
        }
    }
}

problem Generated/223 {
code {
        func count_words_starting_with_prefix(words: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "cherry", "date"], "a") -> 2
(["apple", "banana", "apricot", "cherry", "date"], "b") -> 1
(["apple", "banana", "apricot", "cherry", "date"], "c") -> 1
(["apple", "banana", "apricot", "cherry", "date"], "d") -> 1
(["apple", "banana", "apricot", "cherry", "date"], "e") -> 0
        }
    }
}

problem Generated/224 {
code {
        func count_starting_with(words: list<string>, start: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "dates"], "a") -> 1
(["apple", "banana", "cherry", "dates"], "c") -> 1
(["apple", "banana", "cherry", "dates"], "") -> 4
(["apple", "banana", "cherry", "dates"], "e") -> 0
([], "a") -> 0
        }
    }
}

problem Generated/225 {
code {
        func filter_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "apricot"], "ap") -> ["apple", "apricot"]
(["apple", "banana", "cherry", "apricot"], "pear") -> []
(["apple", "banana", "cherry", "apricot"], "a") -> ["apple", "apricot"]
(["apple", "banana", "cherry", "apricot"], "") -> ["apple", "banana", "cherry", "apricot"]
(["apple", "banana", "cherry", "apricot"], "c") -> ["cherry"]
        }
    }
}

problem Generated/226 {
code {
        func get_startswith_count(strs: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "avocado"], "a") -> 2
(["apple", "banana", "orange", "avocado"], "b") -> 1
(["apple", "banana", "orange", "avocado"], "c") -> 0
([], "a") -> 0
(["alphabet", "alpaca", "alligator", "apple"], "al") -> 3
        }
    }
}

problem Generated/227 {
code {
        func count_strings_starting_with_prefix(strs: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "peach", "apricot", "pineapple"], "ap") -> 2
(["apple", "banana", "peach", "apricot", "pineapple"], "ban") -> 1
(["apple", "banana", "peach", "apricot", "pineapple"], "") -> 5
(["apple", "banana", "peach", "apricot", "pineapple"], "mango") -> 0
(["apple", "banana", "peach", "apricot", "pineapple"], "z") -> 0
        }
    }
}

problem Generated/228 {
code {
        func count_strings_starting_with(strs: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["hello", "world", "hello world", "goodbye"], "hello") -> 2
(["hello", "world", "hello world", "goodbye"], "good") -> 1
(["hello", "world", "hello world", "goodbye"], "hi") -> 0
(["hello", "hello world", "hello", "world", "goodbye"], "he") -> 3
([], "hello") -> 0
        }
    }
}

problem Generated/229 {
code {
        func count_substring_occurrences(s: string, subs: string) -> int
    }
    tests {
        template nse {
            ("hello world", "l") -> 3
("hello world", "ll") -> 1
("hello world", "y") -> 0
("This is a test string", "is") -> 2
("repeatrepeat", "at") -> 2
        }
    }
}

problem Generated/230 {
code {
        func replace_elements_in_list(elements: list<string>, old_elem: string, new_elem: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apple", "orange"], "apple", "lemon") -> ["lemon", "banana", "lemon", "orange"]
(["apple", "banana", "apple", "orange"], "peach", "lemon") -> ["apple", "banana", "apple", "orange"]
([], "peach", "lemon") -> []
(["a", "b", "c"], "a", "") -> ["", "b", "c"]
(["a", "b", "c"], "", "d") -> ["a", "b", "c"]
        }
    }
}

problem Generated/231 {
code {
        func replace_element_in_list(elements: list<string>, old: string, new_dat: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange"], "banana", "kiwi") -> ["apple", "kiwi", "orange"]
(["apple", "banana", "orange"], "pear", "kiwi") -> ["apple", "banana", "orange"]
(["apple", "banana", "banana", "orange"], "banana", "kiwi") -> ["apple", "kiwi", "kiwi", "orange"]
([], "pear", "kiwi") -> []
(["apple", "banana", "orange"], "", "") -> ["apple", "banana", "orange"]
        }
    }
}

problem Generated/232 {
code {
        func replace_list_items(elements: list<string>, search: string, replace: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "apple"], "apple", "orange") -> ["orange", "banana", "cherry", "orange"]
(["car", "bar", "tar", "far"], "r", "z") -> ["caz", "baz", "taz", "faz"]
(["book", "cook", "look", "rook"], "o", "u") -> ["buuk", "cuuk", "luuk", "ruuk"]
(["apple", "banana", "cherry", "apple"], "orange", "lemon") -> ["apple", "banana", "cherry", "apple"]
([], "orange", "lemon") -> []
        }
    }
}

problem Generated/233 {
code {
        func replace_substring_in_list(words: list<string>, old_subs: string, new_subs: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "test"], "h", "w") -> ["wello", "world", "test"]
(["hello", "world", "test"], "l", "L") -> ["heLLo", "worLd", "test"]
(["hello", "world", "test"], "test", "sample") -> ["hello", "world", "sample"]
(["hello", "world", "test"], "test", "") -> ["hello", "world", ""]
(["hello", "world", "test"], "z", "a") -> ["hello", "world", "test"]
        }
    }
}

problem Generated/234 {
code {
        func replace_element_in_list(elements: list<string>, old_element: string, new_element: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "orange", "banana", "apple", "mango"], "apple", "kiwi") -> ["kiwi", "orange", "banana", "kiwi", "mango"]
(["apple", "orange", "banana", "apple", "mango"], "kiwi", "grape") -> ["apple", "orange", "banana", "apple", "mango"]
(["apple", "orange", "banana", "apple", "mango"], "banana", "kiwi") -> ["apple", "orange", "kiwi", "apple", "mango"]
([], "apple", "kiwi") -> []
(["apple", "orange", "banana", "apple", "mango"], "", "kiwi") -> ["apple", "orange", "banana", "apple", "mango"]
        }
    }
}

problem Generated/235 {
code {
        func replace_element_in_list(elements: list<string>, old_elem: string, new_elem: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "apple", "orange"], "apple", "mango") -> ["mango", "banana", "orange", "mango", "orange"]
(["hello", "world", "how", "are", "you"], "how", "where") -> ["hello", "world", "where", "are", "you"]
(["alpha", "beta", "gamma", "delta", "alpha"], "alpha", "omega") -> ["omega", "beta", "gamma", "delta", "omega"]
(["red", "green", "yellow", "blue"], "purple", "violet") -> ["red", "green", "yellow", "blue"]
(["alpha", "beta", "gamma", "delta", "alpha"], "zeta", "xi") -> ["alpha", "beta", "gamma", "delta", "alpha"]
        }
    }
}

problem Generated/236 {
code {
        func create_list_of_zeros(size: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [0, 0, 0, 0, 0]
(0) -> []
(1) -> [0]
(10) -> [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
(3) -> [0, 0, 0]
        }
    }
}

problem Generated/237 {
code {
        func sort_list_and_get_median(elements: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 3.0
([1.0, 2.0, 3.0, 4.0]) -> 2.5
([1.0]) -> 1.0
([4.0, 2.0, 1.0, 3.0]) -> 2.5
([5.0, 3.0, 2.0, 1.0, 4.0]) -> 3.0
        }
    }
}

problem Generated/238 {
code {
        func sort_list_of_lists_based_on_len(elements: list<list<int>>) -> list<list<int>>
    }
    tests {
        template nse {
            ([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]) -> [[10], [4, 5], [1, 2, 3], [6, 7, 8, 9]]
([[15, 23, 45], [1, 2, 3, 4], [10, 11, 12]]) -> [[15, 23, 45], [10, 11, 12], [1, 2, 3, 4]]
([[], [], []]) -> [[], [], []]
([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]) -> [[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]
([[2, 3, 4, 1, 5, 6], [1, 2], [1]]) -> [[1], [1, 2], [2, 3, 4, 1, 5, 6]]
        }
    }
}

problem Generated/239 {
code {
        func sort_list_by_length(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World", "Python", "Programming", "Language"]) -> ["Hello", "World", "Python", "Language", "Programming"]
(["cat", "dog", "elephant", "lion"]) -> ["cat", "dog", "lion", "elephant"]
([]) -> []
(["Hello"]) -> ["Hello"]
(["abc", "def", "gh", "ijkl", "mno"]) -> ["gh", "abc", "def", "mno", "ijkl"]
        }
    }
}

problem Generated/240 {
code {
        func get_indexes_of_occurrences(elements: list<int>, search_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 5, 6, 2], 2) -> [1, 3, 6]
([7, 3, 5, 9, 6], 4) -> []
([1, 7, 4, 9, 5], 5) -> [4]
([1, 7, 4, 9, 5], 1) -> [0]
([], 1) -> []
        }
    }
}

problem Generated/241 {
code {
        func find_element_positions(elements: list<int>, target: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([7, 3, 5, 9, 6], 7) -> [0]
([1, 7, 4, 9, 5, 7, 1], 1) -> [0, 6]
([1, 7, 4, 9, 5], -1) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> [7]
        }
    }
}

problem Generated/242 {
code {
        func find_indexes_of_elements(elements: list<int>, element: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 4, 5, 2], 2) -> [1, 3, 6]
([7, 3, 5, 9, 6], 4) -> []
([1, 7, 4, 9, 5], 5) -> [4]
([1, 7, 4, 9, 5], 8) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> [4]
        }
    }
}

problem Generated/243 {
code {
        func find_indices_of_element(elements: list<string>, target: string) -> list<int>
    }
    tests {
        template nse {
            (["a", "b", "c", "a", "d"], "a") -> [0, 3]
(["a", "b", "c", "a", "d"], "b") -> [1]
(["a", "b", "c", "a", "d"], "e") -> []
(["a", "b", "c", "d"], "d") -> [3]
([], "a") -> []
        }
    }
}

problem Generated/244 {
code {
        func reverse_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([1]) -> [1]
([]) -> []
([1, 2, 3, 4, 5, 6, 7, 8]) -> [8, 7, 6, 5, 4, 3, 2, 1]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/245 {
code {
        func reverse_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([1, 7, 4, 9, 5]) -> [5, 9, 4, 7, 1]
([]) -> []
([1, 2, 3, 4, 5, 6, 7, 8]) -> [8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/246 {
code {
        func reverse_list_slice(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([1]) -> [1]
([]) -> []
([-1, -2, -3, -4, -5]) -> [-5, -4, -3, -2, -1]
([1, 2, 3, 4, 5, 6, 7, 8, 9]) -> [9, 8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/247 {
code {
        func reverse_string_list(my_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"]) -> ["date", "cherry", "banana", "apple"]
(["four", "score", "and", "seven", "years", "ago"]) -> ["ago", "years", "seven", "and", "score", "four"]
(["hello", "world"]) -> ["world", "hello"]
(["python", "is", "awesome"]) -> ["awesome", "is", "python"]
([]) -> []
        }
    }
}

problem Generated/248 {
code {
        func copy_and_reverse(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"]) -> ["date", "cherry", "banana", "apple"]
(["hello", "world"]) -> ["world", "hello"]
([]) -> []
(["a"]) -> ["a"]
(["a", "b", "c", "d", "e"]) -> ["e", "d", "c", "b", "a"]
        }
    }
}

problem Generated/249 {
code {
        func copy_and_capitalize_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Mary", "had", "a", "little", "lamb"]) -> ["MARY", "HAD", "A", "LITTLE", "LAMB"]
(["Happy", "birthday", "to", "you"]) -> ["HAPPY", "BIRTHDAY", "TO", "YOU"]
([]) -> []
(["I", "am", "a", "Python", "programmer"]) -> ["I", "AM", "A", "PYTHON", "PROGRAMMER"]
(["python", "is", "fun"]) -> ["PYTHON", "IS", "FUN"]
        }
    }
}

problem Generated/250 {
code {
        func copy_and_double_list(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [2.0, 4.0, 6.0, 8.0, 10.0]
([3.14, 2.71, 1.41]) -> [6.28, 5.42, 2.82]
([]) -> []
([-1.0, -2.5, 3.14]) -> [-2.0, -5.0, 6.28]
([0.0]) -> [0.0]
        }
    }
}

problem Generated/251 {
code {
        func count_distinct_letters(txt: string) -> int
    }
    tests {
        template nse {
            ("hello world") -> 7
("Python is a cool language") -> 14
("Hello World!") -> 7
("123456") -> 0
("") -> 0
        }
    }
}

problem Generated/252 {
code {
        func count_distinct_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([1, 1, 1, 1, 1]) -> 1
([1, 2, 3, 4, 2]) -> 4
([5, 4, 3, 2, 1]) -> 5
([]) -> 0
        }
    }
}

problem Generated/253 {
code {
        func count_distinct_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]) -> 5
([1, 2, 3, 4, 4, 3, 2, 1]) -> 4
([1, 1, 1, 1, 1, 1]) -> 1
([5, 4, 3, 2, 1]) -> 5
        }
    }
}

problem Generated/254 {
code {
        func count_unique_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([1, 2, 1, 3, 2, 4, 5]) -> 5
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> 5
([1, 1, 1, 1, 1, 1]) -> 1
([]) -> 0
        }
    }
}

problem Generated/255 {
code {
        func count_words(sentence: string, words: list<string>) -> int
    }
    tests {
        template nse {
            ("The quick brown fox jumps over the lazy dog", ["fox", "dog"]) -> 2
("The quick brown fox jumps over the lazy dog", ["fox", "cat"]) -> 1
("The quick brown fox jumps over the lazy dog", ["wolf", "cat"]) -> 0
("Hello World! This is a test.", ["hello", "world", "this", "test"]) -> 4
("", ["cat", "dog"]) -> 0
        }
    }
}

problem Generated/256 {
code {
        func get_lower_half_of_list(arr: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2]
([7, 3, 5, 9]) -> [7, 3]
([1, 7, 4, 9, 5, 2]) -> [1, 7, 4]
([1, 2, 3, 4]) -> [1, 2]
([5]) -> []
        }
    }
}

problem Generated/257 {
code {
        func get_floor_half_length(items: list<string>) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "kiwi", "lemon"]) -> 2
(["one", "two", "three", "four", "five", "six"]) -> 3
(["dog", "cat", "elephant", "giraffe"]) -> 2
(["chicken", "duck", "goose"]) -> 1
(["book", "pen", "pencil", "notebook", "ruler"]) -> 2
        }
    }
}

problem Generated/258 {
code {
        func get_sqrt_floor_length(n: int) -> int
    }
    tests {
        template nse {
            (16) -> 4
(25) -> 5
(10) -> 3
(30) -> 5
(50) -> 7
        }
    }
}

problem Generated/259 {
code {
        func group_list_by_size(lst: list<int>, size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5, 6], 2) -> [[1, 2], [3, 4], [5, 6]]
([1, 2, 3, 4, 5, 6, 7], 3) -> [[1, 2, 3], [4, 5, 6], [7]]
([1, 2, 3, 4, 5, 6, 7], 4) -> [[1, 2, 3, 4], [5, 6, 7]]
([1, 2, 3, 4, 5, 6, 7, 8], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8]]
        }
    }
}

problem Generated/260 {
code {
        func split_list_into_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5], 1) -> [[1], [2], [3], [4], [5]]
([1, 2, 3, 4, 5], 5) -> [[1, 2, 3, 4, 5]]
([], 2) -> []
([1], 2) -> [[1]]
        }
    }
}

problem Generated/261 {
code {
        func split_list_to_chunks(items: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6], 2) -> [[1, 2], [3, 4], [5, 6]]
([1, 2, 3, 4, 5, 6], 3) -> [[1, 2, 3], [4, 5, 6]]
([1, 2, 3, 4, 5, 6], 4) -> [[1, 2, 3, 4], [5, 6]]
([1, 2, 3, 4, 5, 6], 6) -> [[1, 2, 3, 4, 5, 6]]
([1, 2, 3, 4, 5, 6, 7, 8], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8]]
        }
    }
}

problem Generated/262 {
code {
        func find_squares(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [1, 4, 9]
([0, 25, 36, 49, 64, 100]) -> [0, 25, 36, 49, 64, 100]
([2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> []
([1]) -> [1]
([16, 25, 36, 49, 64, 81]) -> [16, 25, 36, 49, 64, 81]
        }
    }
}

problem Generated/263 {
code {
        func calculate_power_of_numbers(numbers: list<int>, power: int) -> list<double>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([2, 4, 6, 8, 10], 3) -> [8.0, 64.0, 216.0, 512.0, 1000.0]
([1, 2, 3, 4, 5], 0) -> [1.0, 1.0, 1.0, 1.0, 1.0]
([2, 4, 6, 8, 10], -1) -> [0.5, 0.25, 0.16666666666666666, 0.125, 0.1]
([], 2) -> []
        }
    }
}

problem Generated/264 {
code {
        func get_power_of_list(numbers: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0]) -> 16
([1.0, 2.0]) -> 4
([1.0]) -> 1
([]) -> 0
([1.0, 2.0, 3.0]) -> 9
        }
    }
}

problem Generated/265 {
code {
        func length_of_hypotenuse(sides: list<double>) -> double
    }
    tests {
        template nse {
            ([3.0, 4.0]) -> 5.0
([5.0, 12.0]) -> 13.0
([7.0, 24.0]) -> 25.0
([8.0, 15.0]) -> 17.0
([9.0, 40.0]) -> 41.0
        }
    }
}

problem Generated/266 {
code {
        func calculate_power_of_element(elements: list<int>, power: int) -> list<double>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [1.0, 8.0, 27.0, 64.0, 125.0]
([-1, -2, -3, -4, -5], 2) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([1, 2, 3, 4, 5], 0) -> [1.0, 1.0, 1.0, 1.0, 1.0]
([10, 8, 6, 4, 2], -1) -> [0.1, 0.125, 0.16666666666666666, 0.25, 0.5]
([], 3) -> []
        }
    }
}

problem Generated/267 {
code {
        func get_squares_up_to_n(n: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [1, 4, 9]
(0) -> []
(1) -> [1]
(20) -> [1, 4, 9, 16]
(100) -> [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
        }
    }
}

problem Generated/268 {
code {
        func multiply_list_elements(elements: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 120
([7.0, 3.0, 5.0, 9.0, 6.0]) -> 5670
([]) -> 0
([1.0, 2.0, 3.0, 0.0, 5.0]) -> 0
([-1.0, 2.0, -3.0, 4.0, -5.0]) -> -120
        }
    }
}

problem Generated/269 {
code {
        func count_words(sentence: string) -> int
    }
    tests {
        template nse {
            ("Hello world") -> 2
("My name is John") -> 4
("This is a test") -> 4
("  ") -> 0
("") -> 0
        }
    }
}

problem Generated/270 {
code {
        func abs_diff_between_n_and_elements(n: int, elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            (2, [1, 2, 3, 4, 5]) -> [1, 0, 1, 2, 3]
(-3, [1, -2, -3, 4, 5]) -> [4, 1, 0, 7, 8]
(10, []) -> []
(0, [23, -4, 5, 10]) -> [23, 4, 5, 10]
(3, [3, 3, 3, 3]) -> [0, 0, 0, 0]
        }
    }
}

problem Generated/271 {
code {
        func generate_list_of_absolute_diff(n: int) -> list<int>
    }
    tests {
        template nse {
            (2) -> [0, 1, 1, 0]
(3) -> [0, 1, 2, 1, 0, 1, 2, 1, 0]
(4) -> [0, 1, 2, 3, 1, 0, 1, 2, 2, 1, 0, 1, 3, 2, 1, 0]
(0) -> []
(1) -> [0]
        }
    }
}

problem Generated/272 {
code {
        func generate_numbers_abs_diff(n: int, k: int) -> list<int>
    }
    tests {
        template nse {
            (5, 3) -> [2, 1, 0, 1, 2]
(1, 1) -> [0]
(0, 1) -> []
(10, 5) -> [4, 3, 2, 1, 0, 1, 2, 3, 4, 5]
(4, 10) -> [9, 8, 7, 6]
        }
    }
}

problem Generated/273 {
code {
        func create_list_of_absolute_numbers(num: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]
(0) -> [0]
(3) -> [3, 2, 1, 0, 1, 2, 3]
(7) -> [7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7]
(1) -> [1, 0, 1]
        }
    }
}

problem Generated/274 {
code {
        func get_absolute_values(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.0, 0.1, -0.1, 1.5, -1.5]) -> [0.0, 0.1, 0.1, 1.5, 1.5]
([]) -> []
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]
        }
    }
}

problem Generated/275 {
code {
        func absolute_value_of_string_lengths(elements: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["hello", "world", "this", "is", "openai"]) -> [5, 5, 4, 2, 6]
(["AI", "is", "the", "future"]) -> [2, 2, 3, 6]
(["", "", "", "", ""]) -> [0, 0, 0, 0, 0]
([]) -> []
(["open", "ai"]) -> [4, 2]
        }
    }
}

problem Generated/276 {
code {
        func get_abs_length_diff(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["hello", "world", "", "python"]) -> 1
([]) -> 0
(["abc", "def", "ghi"]) -> 0
(["", "", "", ""]) -> 4
(["test"]) -> 0
        }
    }
}

problem Generated/277 {
code {
        func get_absolute_diff_list(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 1.0, 1.0, 1.0]
([0.5, 1.5, 2.5, 3.5, 4.5]) -> [1.0, 1.0, 1.0, 1.0]
([0.1, 0.2, 0.3, 0.4, 0.5]) -> [0.1, 0.1, 0.1, 0.1]
([4.5, 3.5, 2.5, 1.5, 0.5]) -> [1.0, 1.0, 1.0, 1.0]
([1.0, 4.0, 2.0, 6.0, 3.0]) -> [3.0, 2.0, 4.0, 3.0]
        }
    }
}

problem Generated/278 {
code {
        func get_abs_sum_of_list(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> 15.0
([1.0, 2.0, 3.0, 4.0, 5.0]) -> 15.0
([]) -> 0.0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 15.0
([0.0, -2.0, 3.0, -4.0, 5.0]) -> 14.0
        }
    }
}

problem Generated/279 {
code {
        func sum_of_absolute_values(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> 15
([7, -3, 5, -9, 6]) -> 30
([1, 2, 3, 4, 5]) -> 15
([-1, -2, -3, -4, -5]) -> 15
([1, -1, 2, -2, 3, -3, 4, -4, 5, -5]) -> 30
        }
    }
}

problem Generated/280 {
code {
        func sum_of_absolute_values(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> 15
([1, 2, 3, 4, 5]) -> 15
([-1, -2, -3, -4, -5]) -> 15
([0, 0, 0, 0, 0]) -> 0
([1, -1, 1, -1, 1]) -> 5
        }
    }
}

problem Generated/281 {
code {
        func sum_absolute_values(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([-1, -2, -3, -4, -5]) -> 15
([0, 0, 0, 0, 0]) -> 0
([-1, 2, -3, 4, -5]) -> 15
([0, 1, -2, 3, -4, 5]) -> 15
        }
    }
}

problem Generated/282 {
code {
        func get_max_abs_diff(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 4.0
([10.0, -5.0, 20.0, -3.0, 15.0]) -> 25.0
([0.0, 0.0, 0.0, 0.0]) -> 0.0
([1.0, -1.0, 1.0, -1.0, 1.0]) -> 2.0
([-5.0, -10.0, -15.0, 0.0, 5.0, 10.0, 15.0]) -> 30.0
        }
    }
}

problem Generated/283 {
code {
        func find_max_diff(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 1
([5, 4, 3, 2, 1]) -> 1
([1, 2, 3, 1, 2, 3]) -> 2
([1, 1, 1, 1]) -> 0
([1]) -> 0
        }
    }
}

problem Generated/284 {
code {
        func max_absolute_difference(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([7, 3, 5, 9, 6]) -> 6
([1, 7, 4, 9, 5]) -> 8
([1, -7, 4, 9, -5]) -> 16
([1, 2, 3, 4, 5, 6, 7, 8]) -> 7
        }
    }
}

problem Generated/285 {
code {
        func find_absolute_max(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> 5.0
([0.0, -2.0, 3.0, -4.0, 5.0]) -> 5.0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 5.0
([1.5, 2.3, 4.6, 7.1]) -> 7.1
([-1.5, 2.3, -4.6, 7.1]) -> 7.1
        }
    }
}

problem Generated/286 {
code {
        func max_abs_diff(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([5, 4, 3, 2, 1]) -> 4
([1, 1, 1, 1, 1]) -> 0
([-1, -2, -3, -4, -5]) -> 4
([10, 20, 30, 40, 50, 60, 70]) -> 60
        }
    }
}

problem Generated/287 {
code {
        func min_abs_difference(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 1.0
([1.0, 3.0, 5.0, 7.0]) -> 2.0
([1.0, 1.0, 1.0, 1.0, 1.0]) -> 0.0
([-1.0, 0.0, 1.0, 3.0]) -> 1.0
([2.0, 4.0, 6.0, 8.0, 10.0]) -> 2.0
        }
    }
}

problem Generated/288 {
code {
        func find_closest_number(numbers: list<double>, target: double) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 3.3) -> 3.0
([1.0, 2.0, 3.0, 4.0, 5.0], 2.7) -> 3.0
([1.0, 2.0, 3.0, 4.0, 5.0], 2.3) -> 2.0
([-1.0, -2.0, -3.0, -4.0, -5.0], -2.7) -> -3.0
([-1.0, -2.0, -3.0, -4.0, -5.0], -2.3) -> -2.0
        }
    }
}

problem Generated/289 {
code {
        func get_absolute_difference(list1: list<double>, list2: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.5, 2.0, 3.0, 4.0, 5.5], [1.0, 2.0, 3.5, 4.0, 6.0]) -> [0.5, 0.0, 0.5, 0.0, 0.5]
([1.5, 2.0, 3.0, 4.0, 5.5], [1.5, 2.0, 3.0, 4.0, 5.5]) -> [0.0, 0.0, 0.0, 0.0, 0.0]
([1.5, 2.0, 3.0, 4.0, 5.5], [-1.0, 2.0, -3.5, 4.0, -6.0]) -> [2.5, 0.0, 6.5, 0.0, 11.5]
([1.5, 2.0, 3.0], [1.5, 2.0, 3.0, 4.0, 5.5]) -> [0.0, 0.0, 0.0]
([1.0, -2.0, 3.0, -4.0], [1.0, -2.0, 3.0, -4.0]) -> [0.0, 0.0, 0.0, 0.0]
        }
    }
}

problem Generated/290 {
code {
        func get_abs_diff(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [3, 3, 3]
([4, 5, 6], [1, 2, 3]) -> [3, 3, 3]
([1, 3, 5, 7], [2, 4, 6, 8]) -> [1, 1, 1, 1]
([2, 4, 6, 8], [1, 3, 5, 7]) -> [1, 1, 1, 1]
([1, 2, 3, 4], [1, 2, 3]) -> [0, 0, 0]
        }
    }
}

problem Generated/291 {
code {
        func get_absolute_differences(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) -> [4, 2, 0, 2, 4]
([0, 0, 0, 0, 0], [0, 0, 0, 0, 0]) -> [0, 0, 0, 0, 0]
([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) -> [0, 0, 0, 0, 0]
([10, 20, 30], [5, 10, 15]) -> [5, 10, 15]
([1, 2, 3], [-1, -2, -3]) -> [2, 4, 6]
        }
    }
}

problem Generated/292 {
code {
        func find_abs_difference(elements: list<int>, target: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2, 1, 0, 1, 2]
([7, 3, 5, 9, 6], 5) -> [2, 2, 0, 4, 1]
([1, 7, 4, 9, 5], 2) -> [1, 5, 2, 7, 3]
([1, 7, 4, 9, 5], -2) -> [3, 9, 6, 11, 7]
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> [4, 3, 2, 1, 0, 1, 2, 3]
        }
    }
}

problem Generated/293 {
code {
        func find_abs_diff(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 1, 1, 1]
([7, 3, 5, 9, 6]) -> [4, 2, 4, 3]
([1, -2, 3, -4, 5]) -> [3, 5, 7, 9]
([1, 7, 4, 9, 5]) -> [6, 3, 5, 4]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [1, 1, 1, 1, 1, 1, 1]
        }
    }
}

problem Generated/294 {
code {
        func get_diff_between_adjacent(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 1.0, 1.0, 1.0]
([7.0, 3.0, 5.0, 9.0, 6.0]) -> [4.0, 2.0, 4.0, 3.0]
([1.0, 7.0, 4.0, 9.0, 5.0]) -> [6.0, 3.0, 5.0, 4.0]
([1.0, -2.0, 3.0, -4.0, 5.0]) -> [3.0, 5.0, 7.0, 9.0]
([1.0, 2.0, 3.0]) -> [1.0, 1.0]
        }
    }
}

problem Generated/295 {
code {
        func sort_list_by_abs(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> [1, -2, 3, -4, 5]
([5, -4, 3, -2, 1]) -> [1, -2, 3, -4, 5]
([0, -2, 3, -4, 5]) -> [0, -2, 3, -4, 5]
([-1, -2, -3, -4, -5]) -> [-1, -2, -3, -4, -5]
([]) -> []
        }
    }
}

problem Generated/296 {
code {
        func sort_list_by_abs(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([0, 5, 2, -8, 3]) -> [0, 2, 3, 5, -8]
([-3, -1, 0, 2, 4]) -> [0, -1, 2, -3, 4]
([0]) -> [0]
        }
    }
}

problem Generated/297 {
code {
        func sort_list_based_on_abs(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> [1, -2, 3, -4, 5]
([1, 7, 4, 9, 5]) -> [1, 4, 5, 7, 9]
([-3, 0, 2, -1, 4]) -> [0, -1, 2, -3, 4]
([]) -> []
([1]) -> [1]
        }
    }
}

problem Generated/298 {
code {
        func decode_cipher(cipher: list<int>) -> string
    }
    tests {
        template nse {
            ([72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100]) -> "Hello, World"
([110, 111, 118, 97, 107, 32, 74, 111, 107, 111]) -> "novak Joko"
([71, 114, 101, 97, 116, 101, 114, 32, 68, 101, 110, 105, 101, 100, 33]) -> "Greater Denied!"
([84, 111, 109, 32, 97, 110, 100, 32, 74, 101, 114, 114, 121]) -> "Tom and Jerry"
([66, 108, 117, 101, 32, 72, 105, 103, 104]) -> "Blue High"
        }
    }
}

problem Generated/299 {
code {
        func compute_absolute_difference_of_string(s: string) -> int
    }
    tests {
        template nse {
            ("abc") -> 2
("abcde") -> 4
("aaa") -> 0
("ab") -> 1
("") -> 0
        }
    }
}

problem Generated/300 {
code {
        func check_list_elements_within_range(numbers: list<int>, range_value: int) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 5) -> true
([-1, -2, -3, -4, -5], 6) -> true
([0, 2, -3, 4, 0], 3) -> false
([1, 2, 3, 4, 5], 3) -> false
([1, 2, 3, 4, 5], 0) -> false
        }
    }
}

problem Generated/301 {
code {
        func are_all_numbers_positive(numbers: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> true
([-1.0, 2.0, 3.0, 4.0, 5.0]) -> false
([0.0, 2.0, -3.0, 4.0, 5.0]) -> false
([1.0, 1.5, 2.0, 2.5]) -> true
([0.0, -1.0, -2.0, -3.0, -4.0]) -> false
        }
    }
}

problem Generated/302 {
code {
        func is_list_all_positive(numbers: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> true
([-1.0, 2.0, -3.0, 4.0, -5.0]) -> false
([0.0, 2.0, -3.0, 4.0, 5.0]) -> false
([1.0]) -> true
([]) -> true
        }
    }
}

problem Generated/303 {
code {
        func is_absolute_all_positive(numbers: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> true
([1.0, -2.0, 3.0, -4.0, 5.0]) -> false
([-1.0, 0.0, -3.0, -4.0, 5.0]) -> false
([0.0, 0.0, 0.0, 0.0, 0.0]) -> true
([]) -> true
        }
    }
}

problem Generated/304 {
code {
        func binary_representation_of_abs(num: int) -> string
    }
    tests {
        template nse {
            (10) -> "1010"
(-10) -> "1010"
(0) -> "0"
(121) -> "1111001"
(-121) -> "1111001"
        }
    }
}

problem Generated/305 {
code {
        func binary_repr_of_abs_difference(num1: int, num2: int) -> string
    }
    tests {
        template nse {
            (10, 5) -> "101"
(11, 6) -> "101"
(101, 101) -> "0"
(0, 0) -> "0"
(-5, 10) -> "1111"
        }
    }
}

problem Generated/306 {
code {
        func get_binary_abs(numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, -3, -4, 5]) -> ["1", "10", "11", "100", "101"]
([0, 2, 4, -6]) -> ["0", "10", "100", "110"]
([-1, -2, -3, -4, -5]) -> ["1", "10", "11", "100", "101"]
([1, 2, 4, 8, 16]) -> ["1", "10", "100", "1000", "10000"]
([1]) -> ["1"]
        }
    }
}

problem Generated/307 {
code {
        func get_binary_absolute_list(numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, -3, -4, 5]) -> ["0b1", "0b10", "0b11", "0b100", "0b101"]
([0, 7, -7, 8, -8]) -> ["0b0", "0b111", "0b111", "0b1000", "0b1000"]
([-1, -2, -3, -4, -5]) -> ["0b1", "0b10", "0b11", "0b100", "0b101"]
([0]) -> ["0b0"]
([]) -> []
        }
    }
}

problem Generated/308 {
code {
        func get_abs_binary_list(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> [1, 10, 11, 100, 101]
([8, -5, 0, 2, -10]) -> [1000, 101, 0, 10, 1010]
([16, 32, 64, 128]) -> [10000, 100000, 1000000, 10000000]
([5, -10, 15, -20]) -> [101, 1010, 1111, 10100]
([1, 2, 3, 4, 5, 6, 7, 8, 9]) -> [1, 10, 11, 100, 101, 110, 111, 1000, 1001]
        }
    }
}

problem Generated/309 {
code {
        func sum_of_absolute_values(s: string) -> int
    }
    tests {
        template nse {
            ("1 -2 3 -4 5") -> 15
("-1 2 -3 4 -5") -> 15
("1 2 3 4 5") -> 15
("-1 -2 -3 -4 -5") -> 15
("0 0 0 0 0") -> 0
        }
    }
}

problem Generated/310 {
code {
        func get_absolute_values_as_string(elements: list<int>) -> string
    }
    tests {
        template nse {
            ([-1, 2, -3, 4, -5]) -> "1,2,3,4,5"
([0, 2, -3, 4, -5]) -> "0,2,3,4,5"
([-7, -6, -5, -4, -3, -2, -1]) -> "7,6,5,4,3,2,1"
([1, 2, 3, 4, 5]) -> "1,2,3,4,5"
([-1, -2, -3, -4, -5]) -> "1,2,3,4,5"
        }
    }
}

problem Generated/311 {
code {
        func join_abs_values(nums: list<int>, sep: string) -> string
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5], ", ") -> "1, 2, 3, 4, 5"
([-1, 2, -3, 4, -5], "; ") -> "1; 2; 3; 4; 5"
([0, 0, 0], "-") -> "0-0-0"
([], ":") -> ""
([10, 20, 30], "") -> "102030"
        }
    }
}

problem Generated/312 {
code {
        func join_abs_numbers(numbers: list<int>, delimiter: string) -> string
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5], ",") -> "1,2,3,4,5"
([11, 22, 33, 44, 55], "-") -> "11-22-33-44-55"
([-1, -2, -3, -4, -5], "") -> "12345"
([7, 8, 9, 10], "") -> "78910"
([0, 1, 2, 3], " ") -> "0 1 2 3"
        }
    }
}

problem Generated/313 {
code {
        func concatenate_abs_values(elements: list<double>, delimiter: string) -> string
    }
    tests {
        template nse {
            ([1.0, -2.0, 0.0, 3.0, -4.0, 5.0], ",") -> "1.0,2.0,0.0,3.0,4.0,5.0"
([7.3, 0.02, -3.1, 5.6], " ") -> "7.3 0.02 3.1 5.6"
([], ":") -> ""
([-1.0, 2.0, -3.0], "") -> "1.02.03.0"
([0.5, -0.5, 0.0], "") -> "0.50.50.0"
        }
    }
}

problem Generated/314 {
code {
        func get_lower_abs_values_strings(elements: list<double>) -> list<string>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> ["1.0", "2.0", "3.0", "4.0", "5.0"]
([-1.0, -2.5, 3.14, 4.7, -5.9]) -> ["1.0", "2.5", "3.14", "4.7", "5.9"]
([0.0, 1.234, -3.456, 5.678, -7.89]) -> ["0.0", "1.234", "3.456", "5.678", "7.89"]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> ["1.0", "2.0", "3.0", "4.0", "5.0"]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> ["1.0", "2.0", "3.0", "4.0", "5.0"]
        }
    }
}

problem Generated/315 {
code {
        func get_uppercase_abs_numbers(numbers: list<double>) -> list<string>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> ["1.0", "2.0", "3.0", "4.0", "5.0"]
([1.2, 3.4, -5.6, 7.8]) -> ["1.2", "3.4", "5.6", "7.8"]
([]) -> []
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> ["1.0", "2.0", "3.0", "4.0", "5.0"]
([0.0, -2.0, 3.0, -4.0, 5.0]) -> ["0.0", "2.0", "3.0", "4.0", "5.0"]
        }
    }
}

problem Generated/316 {
code {
        func get_uppercase_abs(numbers: list<double>) -> list<string>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> ["1.0", "2.0", "3.0", "4.0", "5.0"]
([0.0, 3.14, -8.9, 100.1, -4.5]) -> ["0.0", "3.14", "8.9", "100.1", "4.5"]
([-2.5, -1.0, 0.0, 1.0, 2.5]) -> ["2.5", "1.0", "0.0", "1.0", "2.5"]
([]) -> []
([10.0, 20.0, 30.0]) -> ["10.0", "20.0", "30.0"]
        }
    }
}

problem Generated/317 {
code {
        func abs_upper_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "world", "python", "", "abs"]) -> ["HELLO", "WORLD", "PYTHON", "ABS"]
(["Python", "is", "Awesome"]) -> ["PYTHON", "IS", "AWESOME"]
(["Test", "", "Python"]) -> ["TEST", "PYTHON"]
([]) -> []
(["", "", ""]) -> []
        }
    }
}

problem Generated/318 {
code {
        func get_uppercase_abs_str(numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> ["1", "2", "3", "4", "5"]
([1, 2, 3, 4, 5]) -> ["1", "2", "3", "4", "5"]
([-1, -2, -3, -4, -5]) -> ["1", "2", "3", "4", "5"]
([0, -2, 3, -4, 5]) -> ["0", "2", "3", "4", "5"]
([]) -> []
        }
    }
}

problem Generated/319 {
code {
        func get_absolute_lowecase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "world", "PYTHON", "Programming"]) -> ["world"]
(["hello", "world", "python", "programming"]) -> ["hello", "world", "python", "programming"]
([]) -> []
(["12sd", "sSf", "DWSD", "fsd"]) -> ["12sd", "fsd"]
(["hello", "WORLD", "Python", "Programming"]) -> ["hello"]
([" ", "abcde", "", "ABCD", "efgh"]) -> ["abcde", "efgh"]
        }
    }
}

problem Generated/320 {
code {
        func get_abs_of_alpha_strings(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["12", "-5", "abc", "7", "def", "-10"]) -> [12, 5, 7, 10]
(["1", "-2", "3", "-4", "5"]) -> [1, 2, 3, 4, 5]
(["hello", "world"]) -> []
(["A", "B", "C"]) -> []
(["-1", "-2", "3", "-4", "5"]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/321 {
code {
        func sum_abs_of_digit_in_str(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["1", "2", "-3", "4"]) -> 10
(["123", "456"]) -> 21
(["hello", "world"]) -> 0
([]) -> 0
(["12", "34", "56"]) -> 21
        }
    }
}

problem Generated/322 {
code {
        func get_abs_val_of_sum_of_digits(num: int) -> int
    }
    tests {
        template nse {
            (123) -> 6
(-123) -> 6
(0) -> 0
(123456789) -> 45
(-123456789) -> 45
        }
    }
}

problem Generated/323 {
code {
        func count_strings_starting_with(str_lst: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "avocado"], "a") -> 2
(["apple", "banana", "orange", "avocado"], "av") -> 1
(["apple", "banana", "orange", "avocado"], "p") -> 0
(["apple", "-apple", "orange", "-orange"], "app") -> 2
(["apple", "-apple", "orange", "-orange"], "-") -> 2
        }
    }
}

problem Generated/324 {
code {
        func count_occurrences(txt: string, stringacters: list<string>) -> list<int>
    }
    tests {
        template nse {
            ("hello world", ["o", "l", "h"]) -> [2, 3, 1]
("hello world", ["a", "b", "c"]) -> [0, 0, 0]
("mississippi", ["s", "i", "p"]) -> [4, 4, 2]
("", ["a", "b", "c"]) -> [0, 0, 0]
("abcd", []) -> []
        }
    }
}

problem Generated/325 {
code {
        func replace_negative_number_with_abs(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.0, -2.0, 3.0, -4.0, 5.0]) -> [0.0, 2.0, 3.0, 4.0, 5.0]
([]) -> []
        }
    }
}

problem Generated/326 {
code {
        func replace_abs_values(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([-1.0, 2.0, -3.0, 4.0, -5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.0, 0.5, -0.5, 1.0, -1.0]) -> [0.0, 0.5, 0.5, 1.0, 1.0]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([]) -> []
        }
    }
}

problem Generated/327 {
code {
        func replace_negative_numbers(input_lst: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> [1, 2, 3, 4, 5]
([-1, -2, -3, -4, -5]) -> [1, 2, 3, 4, 5]
([]) -> []
([0, 1, 2, 3, 4, 5]) -> [0, 1, 2, 3, 4, 5]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/328 {
code {
        func replace_negative_nums(numbers: list<int>, replace_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5], 0) -> [1, 2, 3, 4, 5]
([1, -2, 3, -4, 5], 9) -> [1, 2, 3, 4, 5]
([1, -2, 3, -4, 0, 5], 9) -> [1, 2, 3, 4, 9, 5]
([1, 2, 3, 4, 5], 9) -> [1, 2, 3, 4, 5]
([1, 0, 3, -4, 5], 5) -> [1, 5, 3, 4, 5]
        }
    }
}

problem Generated/329 {
code {
        func replace_elements_by_abs(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> [1, 2, 3, 4, 5]
([-1, -2, -3, -4, -5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
([0, -1, -2, 3, 4]) -> [0, 1, 2, 3, 4]
        }
    }
}

problem Generated/330 {
code {
        func replace_negative_numbers(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([-1.0, 2.0, -3.0, 4.0, -5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.0, 0.0, 0.0, 0.0, 0.0]) -> [0.0, 0.0, 0.0, 0.0, 0.0]
([-1.0, 0.0, 1.0, -2.0, 2.0]) -> [1.0, 0.0, 1.0, 2.0, 2.0]
        }
    }
}

problem Generated/331 {
code {
        func replace_negative_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, -4, -5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([-1, -2, -3, -4, -5]) -> [1, 2, 3, 4, 5]
([0, -2, 3, -4, 5]) -> [0, 2, 3, 4, 5]
([]) -> []
        }
    }
}

problem Generated/332 {
code {
        func get_absolute_values(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([1.5, -2.3, 3.7, -4.8, 0.9, 5.6]) -> [1.5, 2.3, 3.7, 4.8, 0.9, 5.6]
([0.0, -2.0, 3.0, -4.0, 5.0]) -> [0.0, 2.0, 3.0, 4.0, 5.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([]) -> []
        }
    }
}

problem Generated/333 {
code {
        func get_absolute_values(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> [1, 2, 3, 4, 5]
([-1, -2, -3, -4, -5]) -> [1, 2, 3, 4, 5]
([0, 1, 2, 3, 4, 5]) -> [0, 1, 2, 3, 4, 5]
([]) -> []
([1]) -> [1]
        }
    }
}

problem Generated/334 {
code {
        func add_absolute_values_to_list(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.0, -2.0, 3.0, -4.0, 5.0]) -> [0.0, 2.0, 3.0, 4.0, 5.0]
([1.01, 2.02, -3.03, 4.04, -5.05]) -> [1.01, 2.02, 3.03, 4.04, 5.05]
        }
    }
}

problem Generated/335 {
code {
        func sort_list_by_absolute_value(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> [1, -2, 3, -4, 5]
([7, 3, 5, 9, 6]) -> [3, 5, 6, 7, 9]
([1, 7, 4, 9, 5]) -> [1, 4, 5, 7, 9]
([-1, -7, 4, -9, 5]) -> [-1, 4, 5, -7, -9]
([1, 2, 3, -4, -5, 6, 7, -8, 9]) -> [1, 2, 3, -4, -5, 6, 7, -8, 9]
        }
    }
}

problem Generated/336 {
code {
        func get_diff_between_adjacent_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 1, 1, 1]
([7, 3, 5, 9, 6]) -> [4, 2, 4, 3]
([1]) -> []
([]) -> []
([1, -2, 3, -4, 5]) -> [3, 5, 7, 9]
        }
    }
}

problem Generated/337 {
code {
        func sort_by_abs_then_pop(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.5, 3.2, -4.8, 5.5]) -> [5.5, 1.0, -2.5, 3.2, -4.8]
([1.0, 2.5, 3.2, 4.8, 5.5]) -> [5.5, 1.0, 2.5, 3.2, 4.8]
([-1.0, -2.5, -3.2, -4.8, -5.5]) -> [-5.5, -1.0, -2.5, -3.2, -4.8]
([1.5, 2.5, 3.0, 4.0, 5.5]) -> [5.5, 1.5, 2.5, 3.0, 4.0]
([1.0, 1.0, 1.0, 1.0, 1.0]) -> [1.0, 1.0, 1.0, 1.0, 1.0]
        }
    }
}

problem Generated/338 {
code {
        func sort_abs_values(values: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([-1.5, 2.4, -3.3, 4.2, -5.1]) -> [1.5, 2.4, 3.3, 4.2, 5.1]
([0.0, 1.0, 2.0, 3.0]) -> [0.0, 1.0, 2.0, 3.0]
([0.0, -1.0, -2.0, -3.0]) -> [0.0, 1.0, 2.0, 3.0]
([]) -> []
        }
    }
}

problem Generated/339 {
code {
        func find_closest_index(numbers: list<double>, target: double) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 3.8) -> 3
([1.0, 2.0, 3.0, 4.0, 5.0], 0.5) -> 0
([1.0, 2.0, 3.0, 4.0, 5.0], 6.0) -> 4
([1.0, 2.0, 3.0, 4.0, 5.0], 3.0) -> 2
([1.0, 2.0, 3.0, 4.0, 5.0], 2.5) -> 1
        }
    }
}

problem Generated/340 {
code {
        func get_index_of_closest(numbers: list<int>, target: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 2
([10, 20, 30, 40, 50], 31) -> 2
([-1, -5, 10, 20, 30], -3) -> 0
([1, 2, 3, 4, 5], 6) -> 4
([1, 2, 3, 4, 5], 0) -> 0
        }
    }
}

problem Generated/341 {
code {
        func get_reverse_sorted_absolute_values(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> [5, 4, 3, 2, 1]
([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([-1, -2, -3, -4, -5]) -> [5, 4, 3, 2, 1]
([-1, 0, 1, 2, 3]) -> [3, 2, 1, 0, 1]
([0]) -> [0]
        }
    }
}

problem Generated/342 {
code {
        func reverse_list_and_abs(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [5.0, 4.0, 3.0, 2.0, 1.0]
([]) -> []
([0.0, 2.0, -3.0, -4.0]) -> [4.0, 3.0, 2.0, 0.0]
([1.1111, 2.2222, 3.3333]) -> [3.3333, 2.2222, 1.1111]
([-1.0, -7.0, -4.0, -9.0, -5.0]) -> [5.0, 9.0, 4.0, 7.0, 1.0]
        }
    }
}

problem Generated/343 {
code {
        func reverse_list_and_make_abs(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([-1, 2, -3, 4, -5]) -> [5, 4, 3, 2, 1]
([0]) -> [0]
([7, 4, 2, 9, 5, 1, 3, 6]) -> [6, 3, 1, 5, 9, 2, 4, 7]
([-7, -4, -2, -9, -5, -1, -3, -6]) -> [6, 3, 1, 5, 9, 2, 4, 7]
        }
    }
}

problem Generated/344 {
code {
        func reverse_and_abs_list(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> [5, 4, 3, 2, 1]
([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([-1, -2, -3, -4, -5]) -> [5, 4, 3, 2, 1]
([]) -> []
([0, -2, 3, -4, 5]) -> [5, 4, 3, 2, 0]
        }
    }
}

problem Generated/345 {
code {
        func abs_diff_of_lists(list1: list<double>, list2: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], [5.0, 4.0, 3.0, 2.0, 1.0]) -> [4.0, 2.0, 0.0, 2.0, 4.0]
([1.0, 2.0, 3.0], [3.0, 2.0, 1.0, 0.0, -1.0]) -> [2.0, 0.0, 2.0]
([1.0, 2.0, 3.0, 4.0], [4.0, 3.0, 2.0]) -> [3.0, 1.0, 1.0]
([1.0, 2.0, 3.0], [1.0, 2.0, 3.0]) -> [0.0, 0.0, 0.0]
([], []) -> []
        }
    }
}

problem Generated/346 {
code {
        func copy_and_absolute_list(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([-1.0, 2.0, -3.0, 4.0, -5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([]) -> []
([0.0]) -> [0.0]
([1.0, 1.5, 2.0, 2.5]) -> [1.0, 1.5, 2.0, 2.5]
        }
    }
}

problem Generated/347 {
code {
        func copy_and_absolute_list(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([-1.0, 2.0, -3.0, 4.0, -5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.0, 2.5, -3.7, 4.2, -5.8]) -> [0.0, 2.5, 3.7, 4.2, 5.8]
([]) -> []
([5.0, -5.0, 5.0, -5.0]) -> [5.0, 5.0, 5.0, 5.0]
([1.5, -2.5, 3.5, -4.5, 5.5]) -> [1.5, 2.5, 3.5, 4.5, 5.5]
        }
    }
}

problem Generated/348 {
code {
        func copy_list_negated(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> [-1, -2, -3, -4, -5]
([-1, -2, -3, -4, -5]) -> [-1, -2, -3, -4, -5]
([0, 0, 0, 0, 0]) -> [0, 0, 0, 0, 0]
([1, 2, 3, 4, 5]) -> [-1, -2, -3, -4, -5]
([]) -> []
        }
    }
}

problem Generated/349 {
code {
        func copy_list_and_abs_values(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> [1, 2, 3, 4, 5]
([0, 0, 0, 0, 0]) -> [0, 0, 0, 0, 0]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([-1, -2, -3, -4, -5]) -> [1, 2, 3, 4, 5]
([]) -> []
        }
    }
}

problem Generated/350 {
code {
        func get_absolute_copy(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([-1, 2, -3, 4, -5]) -> [1, 2, 3, 4, 5]
([0, 0, 0, 0]) -> [0, 0, 0, 0]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([-1, -2, -3, -4, -5]) -> [1, 2, 3, 4, 5]
([]) -> []
        }
    }
}

problem Generated/351 {
code {
        func copy_and_abs_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([-1, -2, -3, -4, -5]) -> [1, 2, 3, 4, 5]
([1, -2, 3, -4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
([0]) -> [0]
        }
    }
}

problem Generated/352 {
code {
        func copy_and_abs_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> [1, 2, 3, 4, 5]
([-1, -2, -3, -4, -5]) -> [1, 2, 3, 4, 5]
([]) -> []
([2, 4, 6, 8, 10]) -> [2, 4, 6, 8, 10]
([0, 1, -1, 2, -2]) -> [0, 1, 1, 2, 2]
        }
    }
}

problem Generated/353 {
code {
        func floor_abs(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.5, -2.5, 3.2, -4.8, 5.6]) -> [1, 2, 3, 4, 5]
([0.0, 1.0, -1.0, 2.7, -2.7, 3.5, -3.5]) -> [0, 1, 1, 2, 2, 3, 3]
([1.23, -2.34, 3.45, -4.56]) -> [1, 2, 3, 4]
([0.5, 1.5, -1.5, 2.5, -2.5]) -> [0, 1, 1, 2, 2]
([-1.23, -2.34, -3.45, -4.56]) -> [1, 2, 3, 4]
        }
    }
}

problem Generated/354 {
code {
        func get_odd_abs_floor(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.5, -4.7, 5.2]) -> [1, 3, 4, 5]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 3, 5]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1, 3, 5]
([6.0, 4.0, 2.0, 0.0, -3.5]) -> [3]
([0.0, -2.0, 3.6, -4.2, 5.6]) -> [3, 4, 5]
        }
    }
}

problem Generated/355 {
code {
        func get_floor_abs(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, -3.4, 5.6, -7.8, 9.0]) -> [1, 3, 5, 7, 9]
([5.4321, 1.2345, 6.789, 123.456]) -> [5, 1, 6, 123]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1, 2, 3, 4, 5]
([0.0, 1.0, 2.0, 3.0, 4.0, 5.0]) -> [0, 1, 2, 3, 4, 5]
([-3.1415, -2.7183, 0.0, 2.7183, 3.1415]) -> [3, 2, 0, 2, 3]
        }
    }
}

problem Generated/356 {
code {
        func calculate_euclidean_distance(vector1: list<double>, vector2: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0], [2.0, 3.0, 4.0]) -> 1.732
([0.0, 0.0, 0.0], [1.0, 1.0, 1.0]) -> 1.732
([1.0, 2.0, 3.0, 4.0], [2.0, 3.0, 4.0, 5.0]) -> 2.0
([1.0, 2.0, 3.0], [1.0, 2.0, 3.0]) -> 0.0
([3.0, 2.0, 1.0], [0.0, 0.0, 0.0]) -> 3.742
        }
    }
}

problem Generated/357 {
code {
        func floor_abs_list(elements: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.4, -2.7, 3.5, -4.1, 5.9]) -> [1, 2, 3, 4, 5]
([0.0, 2.9, -5.7, 11.4, -10.1]) -> [0, 2, 5, 11, 10]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 2, 3, 4, 5]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1, 2, 3, 4, 5]
([0.0, -2.9, 5.7, -11.4, 10.1]) -> [0, 2, 5, 11, 10]
        }
    }
}

problem Generated/358 {
code {
        func floor_abs_list(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.3, 3.6, -4.9, 5.2]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([1.4, 2.9, 3.6, 4.5, 5.2]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([-1.4, -2.9, -3.6, -4.5, -5.2]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([1.0, 0.0, -3.0, 2.5, -5.2]) -> [1.0, 0.0, 3.0, 2.0, 5.0]
([0.0, 0.5, 1.2, 2.0, 3.0]) -> [0.0, 0.0, 1.0, 2.0, 3.0]
        }
    }
}

problem Generated/359 {
code {
        func get_abs_ceil(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.0, -2.5, 3.7, -4.3, 5.1]) -> [1, 3, 4, 5, 6]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1, 2, 3, 4, 5]
([0.0, 0.5, 1.2, 2.7, 3.3]) -> [0, 1, 2, 3, 4]
([1.5, -2.8, 3.1, -4.9, 5.6]) -> [2, 3, 4, 5, 6]
([1.1, 2.2, 3.3, 4.4, 5.5]) -> [2, 3, 4, 5, 6]
        }
    }
}

problem Generated/360 {
code {
        func absolute_difference(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.5, 2.7, 3.1, 4.9, 5.0]) -> [0.5, 0.3, 0.9, 0.1, 0.0]
([5.5, 6.8, 10.3, 8.2, 3.0]) -> [0.5, 0.2, 0.7, 0.8, 0.0]
([0.0, -2.0, 3.0, -4.0, 5.0]) -> [0.0, 0.0, 0.0, 0.0, 0.0]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [0.0, 0.0, 0.0, 0.0, 0.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [0.0, 0.0, 0.0, 0.0, 0.0]
        }
    }
}

problem Generated/361 {
code {
        func round_up_absolute_values(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.5, -2.7, 3.8, -4.1, 5.0]) -> [2, 3, 4, 5, 5]
([0.0, 1.1, 2.2, 3.3, 4.4]) -> [0, 2, 3, 4, 5]
([-1.1, -2.2, -3.3, -4.4, -5.5]) -> [2, 3, 4, 5, 6]
([1.0, 1.1, 1.2, 1.3, 1.4]) -> [1, 2, 2, 2, 2]
([-2.5, -1.4, 0.0, 1.4, 2.5]) -> [3, 2, 0, 2, 3]
        }
    }
}

problem Generated/362 {
code {
        func get_ceil_abs_diff(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.3, 2.5, 4.8, 7.2]) -> [2, 3, 3]
([0.1, 0.9, 3.4, 4.9]) -> [1, 3, 2]
([10.0, 9.0, 8.0, 7.0, 6.0]) -> [1, 1, 1, 1]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 1, 1, 1]
([1.0]) -> []
        }
    }
}

problem Generated/363 {
code {
        func euclidean_distance(point1: list<double>, point2: list<double>) -> double
    }
    tests {
        template nse {
            ([0.0, 0.0], [3.0, 4.0]) -> 5.0
([1.0, 2.0, 3.0], [4.0, 5.0, 6.0]) -> 5.196152422706632
([2.0, 4.0, 6.0], [1.0, 3.0, 5.0]) -> 1.7320508075688772
([0.0], [0.0]) -> 0.0
([1.0, 2.0], [1.0, 2.0]) -> 0.0
        }
    }
}

problem Generated/364 {
code {
        func abs_pow_list(numbers: list<double>, power: double) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2.0) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([-1.0, -2.0, -3.0, -4.0, -5.0], 2.0) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([1.0, -2.0, 3.0, -4.0, 5.0], 5.0) -> [1.0, 32.0, 243.0, 1024.0, 3125.0]
([3.0, 4.0, 5.0], 1.0) -> [3.0, 4.0, 5.0]
([1.0, 2.0, 3.0, 4.0], 0.5) -> [1.0, 1.4142135623730951, 1.7320508075688772, 2.0]
        }
    }
}

problem Generated/365 {
code {
        func abs_pow_of_numbers(numbers: list<double>, power: double) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, -3.0, -4.0, 5.0], 2.0) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([-1.0, -2.0, -3.0, -4.0, -5.0], 3.0) -> [1.0, 8.0, 27.0, 64.0, 125.0]
([0.0, 1.0, -1.0, 2.0, -2.0], 5.0) -> [0.0, 1.0, 1.0, 32.0, 32.0]
([1.0, 1.0, 1.0, 1.0, 1.0], 0.5) -> [1.0, 1.0, 1.0, 1.0, 1.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 1.0) -> [1.0, 2.0, 3.0, 4.0, 5.0]
        }
    }
}

problem Generated/366 {
code {
        func calculate_power_of_numbers(numbers: list<double>, power: double) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0], 2.0) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 3.0) -> [1.0, 8.0, 27.0, 64.0, 125.0]
([-1.0, -2.0, -3.0, -4.0, -5.0], 2.0) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 0.5) -> [1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979]
([1.0, 2.0, 3.0, 4.0, 5.0], -1.0) -> [1.0, 0.5, 0.3333333333333333, 0.25, 0.2]
        }
    }
}

problem Generated/367 {
code {
        func multiply_abs_list_elements(elements: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> 120.0
([1.0, 2.0, 3.0, 4.0, 5.0]) -> 120.0
([1.0, -2.0, 3.0, -4.0, 0.0]) -> 0.0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 120.0
([0.0, -2.0, 3.0, -4.0, 5.0]) -> 0.0
        }
    }
}

problem Generated/368 {
code {
        func multiply_absolute_values(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 120
([-1, 2, -3, 4, -5]) -> 120
([0, 1, -1, 2, -2]) -> 0
([0, 0, 0, 0, 0]) -> 0
([2, -4, 6, -8, 10]) -> 3840
        }
    }
}

problem Generated/369 {
code {
        func multiply_elements(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 120
([-1, -2, -3, -4, -5]) -> 120
([1, 2, 3, 4, 0]) -> 24
([1, -2, 3, -4, 5]) -> 120
([1, 2, -3, 4, 5]) -> 120
        }
    }
}

problem Generated/370 {
code {
        func multiply_abs_element(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 120
([-1, 2, -3, 4, -5]) -> 120
([-1, -2, -3, -4, -5]) -> 120
([10, 2, -3, 4, 5]) -> 1200
([1, -2, 3, -4, 5]) -> 120
        }
    }
}

problem Generated/371 {
code {
        func product_of_absolute_values(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> 120.0
([1.0, 2.0, 3.0, 4.0, 5.0]) -> 120.0
([1.0, 2.0, 3.0, 4.0, 5.0, 0.0]) -> 0.0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 120.0
([0.0, -2.0, 3.0, -4.0, 5.0]) -> 0.0
        }
    }
}

problem Generated/372 {
code {
        func product_of_absolute_values(elements: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> 120.0
([1.0, 2.0, 3.0, 4.0, 5.0]) -> 120.0
([1.0, 2.0, 3.0, 4.0, 5.0, 0.0]) -> 0.0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 120.0
([0.0, -2.0, 3.0, -4.0, 5.0]) -> 0.0
        }
    }
}

problem Generated/373 {
code {
        func product_of_positive_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 120
([-1, 2, 0, -4, 5]) -> 10
([1, -1, 2, -2, 3, -3]) -> 6
([-1, -2, -3]) -> 0
([]) -> 0
        }
    }
}

problem Generated/374 {
code {
        func sum_of_even_numbers(n: int) -> int
    }
    tests {
        template nse {
            (10) -> 30
(13) -> 42
(15) -> 56
(20) -> 110
(6) -> 12
        }
    }
}

problem Generated/375 {
code {
        func sum_of_even_numbers_in_range(n: int) -> int
    }
    tests {
        template nse {
            (10) -> 30
(0) -> 0
(1) -> 0
(14) -> 56
(20) -> 110
        }
    }
}

problem Generated/376 {
code {
        func sum_of_odd_numbers(n: int) -> int
    }
    tests {
        template nse {
            (10) -> 25
(1) -> 1
(5) -> 9
(20) -> 100
(0) -> 0
        }
    }
}

problem Generated/377 {
code {
        func get_avg_salary_of_dept(salaries: list<double>, dept: list<string>, target_dept: string) -> double
    }
    tests {
        template nse {
            ([1000.0, 2000.0, 3000.0, 4000.0, 5000.0], ["Sales", "HR", "Sales", "IT", "IT"], "Sales") -> 2000.0
([1000.0, 2000.0, 3000.0, 4000.0, 5000.0], ["Sales", "HR", "Sales", "IT", "IT"], "IT") -> 4500.0
([1000.0, 2000.0, 3000.0, 4000.0, 5000.0], ["Sales", "HR", "Sales", "IT", "IT"], "Marketing") -> 0.0
([], [], "IT") -> 0.0
([1000.0, 2000.0, 3000.0, 4000.0, 5000.0], ["Sales", "HR", "Sales", "IT", "IT"], "HR") -> 2000.0
        }
    }
}

problem Generated/378 {
code {
        func get_avg_odd_nums(numbers: list<int>) -> double
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 3.0
([7, 3, 5, 9, 6]) -> 6.0
([2, 4, 6, 8]) -> 0.0
([]) -> 0.0
([1, 2, 3, 4, 5, 6, 7, 8]) -> 4.0
        }
    }
}

problem Generated/379 {
code {
        func avg_salary(salaries: list<int>) -> double
    }
    tests {
        template nse {
            ([1000, 2000, 3000, 4000, 5000]) -> 3000.0
([2000, 3200, 1500, 4800, 6500]) -> 3600.0
([4000, 3000, 2000, 1000]) -> 2500.0
([2000, 3000, 4000]) -> 3000.0
([]) -> 0.0
        }
    }
}

problem Generated/380 {
code {
        func calculate_average(numbers: list<int>) -> double
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 3.0
([7, 3, 5, 9, 6]) -> 6.0
([]) -> 0.0
([1, 7, 4, 9, 5]) -> 5.2
([1, 2, 3, 4, 5, 6, 7, 8]) -> 4.5
        }
    }
}

problem Generated/381 {
code {
        func sum_abs_of_numbers(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> 15.0
([1.0, 2.0, 3.0, 4.0, 5.0]) -> 15.0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 15.0
([0.0, -2.0, 3.0, -4.0, 5.0]) -> 14.0
([]) -> 0.0
        }
    }
}

problem Generated/382 {
code {
        func sum_of_absolute(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([-1, -2, -3, -4, -5]) -> 15
([0]) -> 0
([1, -2, 3, -4, 5]) -> 15
([1, 2, 3, -4, -5]) -> 15
        }
    }
}

problem Generated/383 {
code {
        func sum_of_absolute_values(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> 15
([1, 2, 3, 4, 5]) -> 15
([1, 2, 3, 4, 0]) -> 10
([-1, -2, -3, -4, -5]) -> 15
([0, 0, 0, 0]) -> 0
        }
    }
}

problem Generated/384 {
code {
        func sum_of_abs_values(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> 15.0
([1.0, 2.0, 3.0, 4.0, 5.0]) -> 15.0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 15.0
([0.0]) -> 0.0
([]) -> 0.0
        }
    }
}

problem Generated/385 {
code {
        func sum_of_absolute_values(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> 15
([1, 2, 3, 4, 5]) -> 15
([-1, -2, -3, -4, -5]) -> 15
([0, -2, 3, -4, 5]) -> 14
([0]) -> 0
        }
    }
}

problem Generated/386 {
code {
        func sum_absolute_values(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> 15.0
([1.0, 2.0, 3.0, 4.0, 5.0]) -> 15.0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 15.0
([0.0, -2.0, 3.0, -4.0, 5.0]) -> 14.0
([]) -> 0.0
        }
    }
}

problem Generated/387 {
code {
        func get_absolute_sum(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([-1, 2, -3, 4, -5]) -> 15
([0, 0, 0, 0, 0]) -> 0
([-1, -2, -3, -4, -5]) -> 15
([1, -2, 3, -4, 5]) -> 15
        }
    }
}

problem Generated/388 {
code {
        func multiply_and_sum_lists(list1: list<int>, list2: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> 32
([7, 8, 9], [1, 2, 3]) -> 50
([1, 2, 3, 4, 5], [1, -1, 1, -1, 1]) -> 3
([0, 0, 0], [1, 2, 3]) -> 0
([], []) -> 0
        }
    }
}

problem Generated/389 {
code {
        func sum_of_products(list1: list<int>, list2: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> 32
([0, 0, 0], [-1, 2, -3]) -> 0
([10, 20, 30], [0, 0, 0]) -> 0
([2, 3, 4], [5, 6]) -> 28
([1, 2], [3, 4, 5]) -> 11
        }
    }
}

problem Generated/390 {
code {
        func sum_two_lists(list1: list<double>, list2: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0], [4.0, 5.0, 6.0]) -> [5.0, 7.0, 9.0]
([1.0, -2.0, 3.0], [5.0, -6.0, 7.0]) -> [6.0, -8.0, 10.0]
([1.0, 2.0, 3.0, 4.0], [5.0, 6.0]) -> [6.0, 8.0]
([], []) -> []
([1.0], [2.0]) -> [3.0]
        }
    }
}

problem Generated/391 {
code {
        func dot_product(vec1: list<double>, vec2: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0], [4.0, 5.0, 6.0]) -> 32.0
([1.0, 2.0, 3.0], [1.0, 1.0, 1.0]) -> 6.0
([0.0, 2.0, 0.0], [1.0, 0.0, -1.0]) -> 0.0
([1.0, 2.0], [-3.0, 4.0]) -> 5.0
([0.0, 0.0], [0.0, 0.0]) -> 0.0
        }
    }
}

problem Generated/392 {
code {
        func sum_even_index_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([2, 1, 4, 3, 6, 5]) -> 12
([1, 2, 3, 4, 5]) -> 9
([0, 1, 0, 1, 0, 1]) -> 0
([1, 1, 1, 1, 1]) -> 3
([]) -> 0
        }
    }
}

problem Generated/393 {
code {
        func sum_of_unique_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([]) -> 0
([1,2,3,4,5]) -> 15
([1,2,3,2,1]) -> 6
([1,2,3,4,5,4,3,2,1]) -> 15
([1,2,3,-1,2,-1,4]) -> 9
        }
    }
}

problem Generated/394 {
code {
        func sum_of_unique_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 4, 3]) -> 10
([4, 5, 6, 7, 8, 9]) -> 39
([1, 1, 1, 1, 1, 1]) -> 1
([]) -> 0
([2, 4, 6, 8]) -> 20
        }
    }
}

problem Generated/395 {
code {
        func sum_unique_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([1, 2, 2, 3, 4, 4, 4, 5]) -> 15
([10, 20, 30, 40, 50]) -> 150
([1, 2, 3, 2, 1, 4, 5, 4, 6, 5]) -> 21
([]) -> 0
        }
    }
}

problem Generated/396 {
code {
        func sum_unique_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1, 4, 5, 4, 6, 7, 5, 8, 3]) -> 36
([1, 2, 3, 4, 5]) -> 15
([1, 1, 1, 1, 1, 1]) -> 1
([1, -2, 3, -4, 5]) -> 3
([]) -> 0
        }
    }
}

problem Generated/397 {
code {
        func sum_unique_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> 15
([1, -2, 3, -4, 5]) -> 3
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 55
([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) -> 55
        }
    }
}

problem Generated/398 {
code {
        func get_unique_numbers_sum(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([1, 2, 2, 4, 5, 5]) -> 12
([1, 5, 0, -2, 3, 4, -2]) -> 11
([1, -1, 2, -2, 3, -3]) -> 0
([]) -> 0
        }
    }
}

problem Generated/399 {
code {
        func sum_of_even_nums(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 30
([5, 7, 9, 11, 13]) -> 0
([2, 4, 6, 8, 10]) -> 30
([]) -> 0
([1, 3, 5, 7, 9]) -> 0
        }
    }
}

problem Generated/400 {
code {
        func sum_of_even_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 6
([7, 3, 5, 9, 6]) -> 6
([1, 7, 4, 9, 5]) -> 4
([]) -> 0
([2, 4, 6, 8, 10]) -> 30
        }
    }
}

problem Generated/401 {
code {
        func sum_of_even_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 6
([0, 1, 2, 3, 4, 5]) -> 6
([2, 4, 6, 8, 10]) -> 30
([1, 3, 5, 7, 9]) -> 0
([]) -> 0
        }
    }
}

problem Generated/402 {
code {
        func sum_of_even_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 6
([7, 3, 5, 9, 6]) -> 6
([1, 7, 4, 9, 5]) -> 4
([1, 7, 3, 9, 5]) -> 0
([1, 2, 3, 4, 5, 6, 7, 8]) -> 20
        }
    }
}

problem Generated/403 {
code {
        func sum_even_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 30
([5, 7, 9, 11, 13]) -> 0
([2, 4, 6, 8, 10]) -> 30
([1, 3, 5, 7, 9]) -> 0
([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 30
        }
    }
}

problem Generated/404 {
code {
        func sum_even_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 30
([2, 4, 6, 8, 10]) -> 30
([1, 3, 5, 7, 9]) -> 0
([1, 3, 5, 7, 10]) -> 10
([0, 11, 12, 13, 14]) -> 26
        }
    }
}

problem Generated/405 {
code {
        func sum_of_even_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9]) -> 20
([7, 5, 11, 3, 1, 9, 15]) -> 0
([10, 20, 30, 40, 50]) -> 150
([]) -> 0
([1, 3, 5]) -> 0
        }
    }
}

problem Generated/406 {
code {
        func sum_of_odd_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([]) -> 0
([1, 2, 3, 4, 5]) -> 9
([2, 4, 6, 8]) -> 0
([1, 3, 5, 7, 9]) -> 25
([1, 1, 1, 1, 1, 1, 1, 1]) -> 8
        }
    }
}

problem Generated/407 {
code {
        func sum_even_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 30
([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> 20
([2, 4, 6, 8, 10]) -> 30
([1, 3, 5, 7, 9]) -> 0
([]) -> 0
        }
    }
}

problem Generated/408 {
code {
        func sum_of_top_k_numbers(numbers: list<int>, k: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 12
([7, 3, 5, 9, 6], 2) -> 16
([1, 7, 4, 9, 5], 0) -> 0
([1, 7, 4, 9, 5], 5) -> 26
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> 36
        }
    }
}

problem Generated/409 {
code {
        func sum_first_k_smallest(numbers: list<int>, k: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 6
([7, 3, 5, 9, 6], 2) -> 8
([1, 7, 4, 9, 5], 5) -> 26
([1, 7, 4, 9, 5], 0) -> 0
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> 36
        }
    }
}

problem Generated/410 {
code {
        func get_sum_of_max_k_elements(elements: list<int>, k: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 12
([1, 2, 3, 4, 5], 5) -> 15
([9, 3, 1, 8, 5], 2) -> 17
([6, 8, 2, 4, 3, 1, 9], 4) -> 27
([1, 2, 3, 4, 5], 0) -> 0
        }
    }
}

problem Generated/411 {
code {
        func sum_of_largest_n(numbers: list<int>, n: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 12
([7, 3, 5, 9, 6], 2) -> 16
([1, 7, 4, 9, 5], 5) -> 26
([1, 7, 4, 9, 5], 0) -> 0
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> 36
        }
    }
}

problem Generated/412 {
code {
        func sorted_and_sum_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([5, 4, 3, 2, 1]) -> 15
([1, -2, 3, -4, 5]) -> 9
([0, 0, 0, 0, 0]) -> 0
([-1, 2, 3, -4, 5]) -> 10
        }
    }
}

problem Generated/413 {
code {
        func check_all_elements_sum_to_n(elements: list<int>, n: int) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3], 6) -> true
([1, 2, 3], 5) -> false
([0, 0, 0, 0, 0], 0) -> true
([1, 3, -4, 6, -2], 4) -> true
([1, 3, -4, 6, -2], 0) -> false
        }
    }
}

problem Generated/414 {
code {
        func is_list_positive(numbers: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> true
([1.0, -2.0, 3.0, -4.0, 5.0]) -> false
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> false
([0.0, 2.0, 3.0]) -> false
([0.5, 0.25, 0.125]) -> true
        }
    }
}

problem Generated/415 {
code {
        func check_all_positive_or_negative(numbers: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> false
([1.0, 2.0, 3.0, 4.0, 5.0]) -> true
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> true
([0.0, -2.0, 3.0, -4.0, 5.0]) -> false
([]) -> false
        }
    }
}

problem Generated/416 {
code {
        func are_all_elements_positive(elements: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> true
([0.0, 2.0, 3.0, 4.0, 5.0]) -> false
([-1.0, 2.0, 3.0, 4.0, 5.0]) -> false
([1.0, 2.0, 3.0, -4.0, 5.0]) -> false
([1.0, 2.0, 3.0, 4.0, 0.0]) -> false
        }
    }
}

problem Generated/417 {
code {
        func sum_of_numbres_in_string(input_str: string) -> int
    }
    tests {
        template nse {
            ("Hello 123 World 789") -> 912
("1 2 3 4 5") -> 15
("I have 10 dollars") -> 10
("") -> 0
("Hello World") -> 0
        }
    }
}

problem Generated/418 {
code {
        func sum_of_integers_in_string(input_s: string) -> int
    }
    tests {
        template nse {
            ("hello world 123") -> 123
("1 2 3 4 5") -> 15
("there are no numbers here") -> 0
("123 456 789") -> 1368
("0 1 2 3 4 5 6 7 8 9") -> 45
        }
    }
}

problem Generated/419 {
code {
        func concatenate_strings(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "", "python", "is", "great"], " ") -> "hello world python is great"
(["", "", "", ""], "-") -> ""
(["apple", "banana", "orange"], ", ") -> "apple, banana, orange"
(["a", "b", "c"], "") -> "abc"
([], ", ") -> ""
        }
    }
}

problem Generated/420 {
code {
        func concatenate_strings(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["Hello", "world", "", "Python", ""], " ") -> "Hello world Python"
(["This", "is", "a", "test"], "-") -> "This-is-a-test"
(["Python", "is", "fun", "!"], "") -> "Pythonisfun!"
([], " ") -> ""
(["1", "2", "3", "4", "5"], ",") -> "1,2,3,4,5"
        }
    }
}

problem Generated/421 {
code {
        func concatenate_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python"], " ") -> "hello world python"
(["apple", "banana", "cherry"], ",") -> "apple,banana,cherry"
(["dog", "cat", "bird"], " and ") -> "dog and cat and bird"
([], "-") -> ""
(["hello"], "") -> "hello"
        }
    }
}

problem Generated/422 {
code {
        func concatenate_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], " ") -> "hello world"
(["a", "b", "c"], ", ") -> "a, b, c"
([], "-") -> ""
(["only one string"], "") -> "only one string"
(["one", "two", "three"], "") -> "onetwothree"
        }
    }
}

problem Generated/423 {
code {
        func combine_strings(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "PYTHON"], "-") -> "HELLO-WORLD-PYTHON"
(["hello", "", "python"], "") -> "HELLOPYTHON"
(["h", "e", "l", "l", "o"], ",") -> "H,E,L,L,O"
([], "-") -> ""
(["Hello", "World", "Python"], "") -> "HELLOWORLDPYTHON"
        }
    }
}

problem Generated/424 {
code {
        func join_numbers(numbers: list<int>, separator: string) -> string
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], "-") -> "1-2-3-4-5"
([7, 3, 5, 9, 6], ", ") -> "7, 3, 5, 9, 6"
([1, 7, 4, 9, 5], "") -> "17495"
([1, 7, 4, 9, 5], " ") -> "1 7 4 9 5"
([1, 2, 3, 4, 5, 6, 7, 8], "-_-") -> "1-_-2-_-3-_-4-_-5-_-6-_-7-_-8"
        }
    }
}

problem Generated/425 {
code {
        func concatenate_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "!"], " ") -> "hello world !"
(["hello", "world", "!"], "") -> "helloworld!"
(["a", "b", "c"], ",") -> "a,b,c"
(["abc", "def", "ghi"], "-") -> "abc-def-ghi"
(["1", "2", "3", "4"], "") -> "1234"
        }
    }
}

problem Generated/426 {
code {
        func concatenate_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "how", "are", "you"], " ") -> "hello world how are you"
(["hello", "world", "how", "are", "you"], "") -> "helloworldhowareyou"
(["hello", "world", "how", "are", "you"], ",") -> "hello,world,how,are,you"
(["1", "2", "3", "4", "5"], " + ") -> "1 + 2 + 3 + 4 + 5"
([], " ") -> ""
        }
    }
}

problem Generated/427 {
code {
        func sum_matching_strings(strs: list<string>, m: string) -> int
    }
    tests {
        template nse {
            (["Hello", "WORLD", "hello", "worlD"], "Hello") -> 10
(["apple", "banana", "orange", "grape"], "orange") -> 6
(["apple", "", "ORANGE", "Grape"], "grape") -> 5
(["hi", "HELLO", "hI", "hello"], "hey") -> 0
(["", "", "", ""], "") -> 0
        }
    }
}

problem Generated/428 {
code {
        func sum_of_length_of_uppercase_strings(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["ABC", "def", "GHI"]) -> 6
(["A", "B", "C"]) -> 3
(["a", "b", "c"]) -> 0
([]) -> 0
(["AAA", "BBB", "CCC"]) -> 9
        }
    }
}

problem Generated/429 {
code {
        func sum_of_alphabets(s: string) -> int
    }
    tests {
        template nse {
            ("abcde") -> 15
("ab23cde") -> 15
("") -> 0
("A1B2C3") -> 6
("12345") -> 0
        }
    }
}

problem Generated/430 {
code {
        func sum_of_numbers_in_string(s: string) -> int
    }
    tests {
        template nse {
            ("1 2 3 4 5") -> 15
("10 20 hello 30") -> 60
("hello world") -> 0
("12 34 56 78 90") -> 270
("1 2 three 4 five") -> 7
        }
    }
}

problem Generated/431 {
code {
        func sum_of_numbers_in_string(input_s: string) -> int
    }
    tests {
        template nse {
            ("hello world!! 123") -> 123
("abc123def456") -> 579
("no numbers here") -> 0
("1 2 3 4 5") -> 15
("") -> 0
        }
    }
}

problem Generated/432 {
code {
        func sum_of_numbers_in_string(s: string) -> int
    }
    tests {
        template nse {
            ("Hello 123 world 456") -> 579
("The quick brown fox jumps over 1234 dogs.") -> 1234
("I have 2 oranges and 3 apples") -> 5
("There are no numbers here") -> 0
("") -> 0
        }
    }
}

problem Generated/433 {
code {
        func sum_of_numbers_in_str(s: string) -> int
    }
    tests {
        template nse {
            ("hello world 123") -> 123
("There are 21 students in the class.") -> 21
("The answer is: 42") -> 42
("No numbers here.") -> 0
("") -> 0
        }
    }
}

problem Generated/434 {
code {
        func sum_of_all_numbers(txt: string) -> int
    }
    tests {
        template nse {
            ("hello 123 world 456") -> 579
("hello world 123") -> 123
("123 456") -> 579
("") -> 0
("hello world") -> 0
        }
    }
}

problem Generated/435 {
code {
        func sum_of_numbers_in_list(elements: list<string>) -> int
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"]) -> 15
(["10", "20", "30", "40", "50"]) -> 150
(["1", "20", "3", "400", "5"]) -> 429
(["a", "b", "c", "d", "e"]) -> 0
(["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]) -> 55
        }
    }
}

problem Generated/436 {
code {
        func sum_of_all_numbers_in_string(input_s: string) -> int
    }
    tests {
        template nse {
            ("There are 2 apples and 3 oranges") -> 5
("The answer is 42") -> 42
("This string has no numbers") -> 0
("1 2 3 4 5") -> 15
("10 20 30 40 50") -> 150
        }
    }
}

problem Generated/437 {
code {
        func sum_of_strings_starting_with_prefix(strs: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["100", "200", "300", "400", "500"], "1") -> 100
(["100", "200", "300", "400", "500"], "2") -> 200
(["100", "200", "300", "400", "500"], "3") -> 300
(["100", "200", "300", "400", "500"], "4") -> 400
(["100", "200", "300", "400", "500"], "5") -> 500
        }
    }
}

problem Generated/438 {
code {
        func sum_numbers_starting_with_prefix(numbers: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["123", "234", "345", "456", "567"], "2") -> 234
(["123", "234", "345", "456", "567"], "") -> 1725
(["123", "234", "345", "456", "567"], "4") -> 456
(["1", "2", "3", "4", "5"], "6") -> 0
([], "1") -> 0
        }
    }
}

problem Generated/439 {
code {
        func sum_of_elements_in_list(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([-1, -2, -3, -4, -5]) -> 0
([0, 1, 0, 3, 0, 5]) -> 9
([4, 3, 2, 1, 0, -1, -2, -3]) -> 10
([0, 0, 0, 0, 0, 0, 0, 0, 0]) -> 0
        }
    }
}

problem Generated/440 {
code {
        func generate_fibonacci_sequence(n: int) -> list<int>
    }
    tests {
        template nse {
            (1) -> [0]
(2) -> [0, 1]
(5) -> [0, 1, 1, 2, 3]
(10) -> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
(12) -> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
        }
    }
}

problem Generated/441 {
code {
        func generate_fibonacci_series(length: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [0, 1, 1, 2, 3]
(0) -> []
(1) -> [0]
(2) -> [0, 1]
(7) -> [0, 1, 1, 2, 3, 5, 8]
        }
    }
}

problem Generated/442 {
code {
        func add_two_lists(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [5, 7, 9]
([1, 2, 3], [2, 4, 6, 8, 10]) -> [3, 6, 9]
([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) -> [6, 6, 6, 6, 6]
([1, 2, 3], []) -> []
([], [1, 2, 3]) -> []
        }
    }
}

problem Generated/443 {
code {
        func sum_of_natural_numbers(n: int) -> int
    }
    tests {
        template nse {
            (10) -> 55
(5) -> 15
(1) -> 1
(0) -> 0
(100) -> 5050
        }
    }
}

problem Generated/444 {
code {
        func sum_largest_numbers(numbers: list<int>, count: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 12
([7, 3, 5, 9, 6], 2) -> 16
([1, 7, 4, 9, 5], 5) -> 26
([1, 7, 4, 9, 5], 0) -> 0
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> 36
        }
    }
}

problem Generated/445 {
code {
        func sum_of_top_k(elements: list<int>, k: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 12
([7, 3, 5, 9, 6], 2) -> 16
([1, 7, 4, 9, 5], 5) -> 26
([1, 7, 4, 9, 5], 0) -> 0
([1, 2, 3, 4, 5, 6, 7, 8], 10) -> 36
        }
    }
}

problem Generated/446 {
code {
        func sum_largest_k_elements(numbers: list<int>, k: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 12
([7, 3, 5, 9, 6], 2) -> 16
([1, 7, 4, 9, 5], 5) -> 26
([1, 7, 4, 9, 5], 0) -> 0
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> 36
        }
    }
}

problem Generated/447 {
code {
        func sum_of_largest_k_elements(elements: list<int>, k: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 12
([7, 3, 5, 9, 6], 2) -> 16
([1, 7, 4, 9, 5], 5) -> 26
([1, 7, 4, 9, 5], 0) -> 0
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> 36
        }
    }
}

problem Generated/448 {
code {
        func sum_top_k_scores(scores: list<int>, k: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> 9
([5, 4, 3, 2, 1], 3) -> 12
([5, 4, 3, 2, 1], 0) -> 0
([5, 4, 3, 2, 1], 5) -> 15
([10, 9, 8, 7, 6], 4) -> 34
        }
    }
}

problem Generated/449 {
code {
        func sum_until_first_negative(elements: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 15.0
([1.0, -2.0, 3.0, -4.0, 5.0]) -> 1.0
([1.0, 2.0, 3.0, 4.0, 5.0, -2.0, 1.0, 2.0]) -> 15.0
([1.0, 2.0, 3.0, 4.0, 5.0, -2.0, -1.0, 2.0]) -> 15.0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 0.0
        }
    }
}

problem Generated/450 {
code {
        func sum_of_reversed_lists(lists: list<list<int>>) -> int
    }
    tests {
        template nse {
            ([[1,2,3],[4,5,6],[7,8,9]]) -> 45
([[9,8,7], [6,5,4], [3,2,1]]) -> 45
([[1, 2, 3], [4, 5], [6, 7, 8, 9, 10]]) -> 55
([[], [], []]) -> 0
([[2, 3], [1], [4, 5, 6]]) -> 21
        }
    }
}

problem Generated/451 {
code {
        func sum_of_range_reversed(n: int) -> int
    }
    tests {
        template nse {
            (5) -> 15
(10) -> 55
(1) -> 1
(0) -> 0
(100) -> 5050
        }
    }
}

problem Generated/452 {
code {
        func reverse_and_sum(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([7, 3, 5, 9, 6]) -> 30
([1, 7, 4, 9, 5]) -> 26
([1, 7, 4, 9, -5]) -> 21
([-1, -2, -3, -4, -5]) -> 0
        }
    }
}

problem Generated/453 {
code {
        func sum_of_list_elements_in_reverse_order(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([5, 4, 3, 2, 1]) -> 15
([1, 3, 5, 7, 9]) -> 25
([2, 4, 6, 8, 10]) -> 30
([0, 1, 0, 1, 0, 1, 0]) -> 3
        }
    }
}

problem Generated/454 {
code {
        func find_sum_of_unique_numbers(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([1, 2, 3, 4, 5, 1, 2]) -> 15
([1, 1, 1, 1, 1]) -> 1
([]) -> 0
([-1, 0, 1, 2, 3, -1, 0, 1]) -> 5
        }
    }
}

problem Generated/455 {
code {
        func sum_of_filtered_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([-1, 2, -3, 4, -5]) -> 6
([0, 0, 0]) -> 0
([10, 20, 30]) -> 60
([-10, -20, -30]) -> 0
        }
    }
}

problem Generated/456 {
code {
        func calculate_list_sum(numbers: list<int>, times: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3], 3) -> 18
([7, 3, 5], 4) -> 60
([1, 2], 2) -> 6
([1, 2, 3], 1) -> 6
([], 3) -> 0
        }
    }
}

problem Generated/457 {
code {
        func sum_of_two_lists(list1: list<double>, list2: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0], [4.0, 5.0, 6.0]) -> [5.0, 7.0, 9.0]
([1.1, 2.2, 3.3], [-1.1, -2.2, -3.3]) -> [0.0, 0.0, 0.0]
([1.0, 2.0, 3.0], []) -> []
([], [4.0, 5.0, 6.0]) -> []
([1.0, -2.0, 3.0, -4.0, 5.0], [1.0, 2.0, 3.0, 4.0, 5.0]) -> [2.0, 0.0, 6.0, 0.0, 10.0]
        }
    }
}

problem Generated/458 {
code {
        func sum_unique_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([5, 4, 3, 2, 1]) -> 15
([1, 3, 3, 4, 5]) -> 13
([1, 2, 2, 2, 2]) -> 3
([1, 1, 1, 1, 1]) -> 1
        }
    }
}

problem Generated/459 {
code {
        func sum_unique_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 3, 2, 4, 5]) -> 15
([1, 2, 2, 1, 3, 3, 4, 5]) -> 15
([1, 2, 3, 4, 5]) -> 15
([1, 1, 1, 1, 1]) -> 1
([1, 2, 3, 4, 5, 4, 3, 2, 1]) -> 15
        }
    }
}

problem Generated/460 {
code {
        func sum_of_unique_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([1, 2, 3, 3, 4, 5, 5]) -> 15
([1]) -> 1
([]) -> 0
([1, 1, 1, 1, 1, 1, 1]) -> 1
        }
    }
}

problem Generated/461 {
code {
        func sum_floor_divide(elements: list<double>, divisor: int) -> int
    }
    tests {
        template nse {
            ([1.5, 2.7, 3.2, 4.8], 2) -> 5
([1.5, 2.7, 3.2, 4.8], 3) -> 3
([4.5, 6.9, 3.2, 7.8], 4) -> 5
([4.5, 6.9, 3.2, 7.8], 2) -> 10
([1.0, 2.0, 3.0, 4.0], 1) -> 10
        }
    }
}

problem Generated/462 {
code {
        func calculate_total_pages(num_items: int, items_per_page: int) -> int
    }
    tests {
        template nse {
            (10, 2) -> 5
(100, 20) -> 5
(47, 10) -> 5
(100, 7) -> 15
(1, 5) -> 1
        }
    }
}

problem Generated/463 {
code {
        func get_avg_of_list(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 3
([7, 3, 5, 9, 6]) -> 6
([1, 2, 3, 4]) -> 2
([5, 6, 7, 8, 9]) -> 7
([2, 4, 6, 8, 10]) -> 6
        }
    }
}

problem Generated/464 {
code {
        func calculate_num_of_pages(total_items: int, items_per_page: int) -> int
    }
    tests {
        template nse {
            (50, 10) -> 5
(0, 10) -> 0
(5, 5) -> 1
(12, 5) -> 3
(100, 7) -> 15
        }
    }
}

problem Generated/465 {
code {
        func sum_even(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 30
([2, 4, 6, 8, 10]) -> 30
([1, 3, 5, 7, 9]) -> 0
([2, -4, 6, 8, -12]) -> 0
([1, 5, 7, 9, 11, 13, 15]) -> 0
        }
    }
}

problem Generated/466 {
code {
        func calculate_sum_of_power(numbers: list<double>, power: int) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0], 2) -> 30.0
([1.0, 2.0, 3.0, 4.0], 3) -> 100.0
([1.0, -2.0, 3.0, -4.0, 5.0], 2) -> 55.0
([0.0, 0.0, 0.0, 0.0], 5) -> 0.0
([], 4) -> 0.0
        }
    }
}

problem Generated/467 {
code {
        func calculate_power_sum(numbers: list<int>, power: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> 55
([2, 3, 4], 3) -> 99
([1, 1, 1, 1], 4) -> 4
([], 2) -> 0
([5], 0) -> 1
        }
    }
}

problem Generated/468 {
code {
        func multiply_even_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9]) -> 384
([1, 3, 5, 7, 9]) -> 0
([2, 4, 6, 8, 10]) -> 3840
([0, 2, 4, 6, 8]) -> 0
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 3840
        }
    }
}

problem Generated/469 {
code {
        func product_of_odds(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([2, 4, 6, 8, 10]) -> 1
([1, 3, 5, 7, 9]) -> 945
([2, 3, 4, 5, 6, 7, 8, 9]) -> 945
([0, 1, 2, 3, 4, 5]) -> 15
        }
    }
}

problem Generated/470 {
code {
        func multiply_even_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 3840
([2, 4, 6, 8, 10]) -> 3840
([1, 3, 5, 7, 9]) -> 1
([]) -> 1
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) -> 46080
        }
    }
}

problem Generated/471 {
code {
        func multiply_odd_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9]) -> 945
([2, 4, 6, 8]) -> 1
([1, 1, 1, 1, 1]) -> 1
([2, 3, 5, 7]) -> 105
([]) -> 1
        }
    }
}

problem Generated/472 {
code {
        func multiply_odd_elements(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([7, 3, 5, 9, 6]) -> 945
([2, 4, 6, 8, 10]) -> 1
([]) -> 1
([1, 3, 5, 7, 9]) -> 945
        }
    }
}

problem Generated/473 {
code {
        func sum_numbers_in_string(s: string) -> int
    }
    tests {
        template nse {
            ("There are 12 apples and 15 bananas") -> 27
("The answer is 42") -> 42
("No numbers here") -> 0
("1 2 3 4 5") -> 15
("1000000") -> 1000000
        }
    }
}

problem Generated/474 {
code {
        func sum_of_numbers_in_string(input_str: string) -> int
    }
    tests {
        template nse {
            ("Hello World 123 567") -> 690
("ab1cd2ef3gh4") -> 10
("12345") -> 12345
("Hello") -> 0
("a1b2c3d4e5") -> 15
        }
    }
}

problem Generated/475 {
code {
        func sum_numbers_in_string(s: string) -> int
    }
    tests {
        template nse {
            ("abc123def456") -> 579
("1a2b3c4d5e") -> 15
("111") -> 111
("") -> 0
("a") -> 0
        }
    }
}

problem Generated/476 {
code {
        func max_element_in_range(start: int, last: int, step: int) -> int
    }
    tests {
        template nse {
            (1, 10, 1) -> 9
(1, 10, 2) -> 9
(1, 100, 10) -> 91
(1, 5, 1) -> 4
(1, 5, 2) -> 3
        }
    }
}

problem Generated/477 {
code {
        func max_odd_number_in_range(k: int, n: int) -> int
    }
    tests {
        template nse {
            (1, 10) -> 9
(0, 10) -> 9
(10, 20) -> 19
(10, 12) -> 11
(0, 0) -> -1
        }
    }
}

problem Generated/478 {
code {
        func find_max_even_number(n: int) -> int
    }
    tests {
        template nse {
            (10) -> 10
(15) -> 14
(20) -> 20
(5) -> 4
(1) -> 0
        }
    }
}

problem Generated/479 {
code {
        func get_max_sum_of_ranges(numbers: list<int>, range_size: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6], 2) -> 11
([1, 2, 3, 4, 5, 6], 3) -> 15
([1, 2, 3, 4, 5, 6], 4) -> 18
([1, 2, 3, 4, 5, 6, 7, 8], 3) -> 21
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> 26
        }
    }
}

problem Generated/480 {
code {
        func max_difference_between_consecutive_numbers(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 1
([5, 4, 3, 2, 1]) -> -1
([1, 3, 5, 8, 10]) -> 3
([2, 2, 2, 2, 2]) -> 0
([1, 5, 2, 8, 3]) -> 6
        }
    }
}

problem Generated/481 {
code {
        func get_longest_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["cat", "dog", "elephant", "giraffe", "lion"]) -> "elephant"
(["apple", "banana", "kiwi", "orange"]) -> "banana"
(["a", "bb", "ccc", "dddd"]) -> "dddd"
(["hello", "world"]) -> "hello"
(["", "a", "aa", "aaa"]) -> "aaa"
        }
    }
}

problem Generated/482 {
code {
        func find_max_absolute_value(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> 5.0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 5.0
([0.0, 0.1, -0.2, 0.3, -0.4]) -> 0.4
([1.0, 2.0, 3.0, 4.0, 5.0]) -> 5.0
([1.234, -2.345, 3.456, -4.567, 5.678]) -> 5.678
        }
    }
}

problem Generated/483 {
code {
        func find_max_absolute_difference(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 4.0
([5.0, 4.0, 3.0, 2.0, 1.0]) -> 4.0
([2.0, -2.0, 3.0, -4.0, 5.0]) -> 9.0
([1.0, 1.0, 1.0, 1.0]) -> 0.0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 4.0
        }
    }
}

problem Generated/484 {
code {
        func max_absolute_value(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> 5.0
([1.0, 2.0, -3.0, 4.0, -5.0]) -> 5.0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 5.0
([0.0, 0.0, 0.0, 0.0, 0.0]) -> 0.0
([1.0, 2.0, 3.0, 4.0, 5.0]) -> 5.0
        }
    }
}

problem Generated/485 {
code {
        func max_abs_difference(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.1, 2.2, 3.3, 4.4, 5.5]) -> 4.4
([5.5, 4.4, 3.3, 2.2, 1.1]) -> 4.4
([2.0, 2.0, 2.0, 2.0]) -> 0.0
([1.0, 2.0, 3.0, -1.0, -2.0, -3.0]) -> 6.0
([0.0, 0.0, 0.0, 0.0]) -> 0.0
        }
    }
}

problem Generated/486 {
code {
        func get_max_absolute_difference(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([10, 20, 30, 40, 50]) -> 40
([-10, -20, -30, -40, -50]) -> 40
([1, 1, 1, 1, 1]) -> 0
([1, 3, 5, 7, 9]) -> 8
        }
    }
}

problem Generated/487 {
code {
        func max_absolute_difference(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([1, -2, 3, -4, 5]) -> 9
([1, 2, -3, 4, 5]) -> 8
([1, 1, 1, 1, 1]) -> 0
([5, 4, 3, 2, 1]) -> 4
        }
    }
}

problem Generated/488 {
code {
        func max_absolute_difference(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 4.0
([7.0, 3.0, 5.0, 9.0, 6.0]) -> 6.0
([1.0, 7.0, 4.0, 9.0, 5.0]) -> 8.0
([1.0, 7.0, 4.0, 9.0, 5.0, 2.0]) -> 8.0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 4.0
        }
    }
}

problem Generated/489 {
code {
        func calculate_max_profit(stock_prices: list<double>) -> double
    }
    tests {
        template nse {
            ([310.0, 315.0, 275.0, 295.0, 260.0, 270.0, 290.0, 230.0, 255.0, 250.0]) -> 30.0
([310.0, 315.0]) -> 5.0
([310.0]) -> 0.0
([]) -> 0.0
([1.0, 2.0, 3.0, 4.0, 5.0]) -> 4.0
        }
    }
}

problem Generated/490 {
code {
        func max_min_diff(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([7, 3, 5, 9, 6]) -> 6
([1, 7, 4, 9, 5]) -> 8
([1, 7, 4, 9, 5, -2]) -> 11
([1, 2, 3, 4, 5, 6, 7, 8]) -> 7
        }
    }
}

problem Generated/491 {
code {
        func find_max_min_diff(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([7, 3, 5, 9, 6]) -> 6
([1, 7, 4, 9, 5]) -> 8
([-1, -2, -3, -4, -5]) -> 4
([1, 2, 3, 4, 5, 6, 7, 8]) -> 7
        }
    }
}

problem Generated/492 {
code {
        func get_range(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 4.0
([5.0, 4.0, 3.0, 2.0, 1.0]) -> 4.0
([1.0, -2.0, 3.0, -4.0, 5.0]) -> 9.0
([0.0]) -> 0.0
([1.0]) -> 0.0
        }
    }
}

problem Generated/493 {
code {
        func find_max_min_diff(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 4.0
([0.0, -2.0, 3.0, -4.0, 5.0]) -> 9.0
([1.0, -2.0, 3.5, -4.2, 5.6]) -> 9.8
([1.0, 1.0, 1.0, 1.0, 1.0]) -> 0.0
([1.0, 2.0, 3.0, 4.0, -5.0]) -> 9.0
        }
    }
}

problem Generated/494 {
code {
        func get_max_index(elements: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> 4
([1.0, 2.0, 3.0, 4.0, 5.0]) -> 4
([1.0, 2.0, 3.0, 4.0, 5.0, 1.0]) -> 4
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 0
([0.0, -2.0, 3.0, -4.0, 5.0]) -> 4
        }
    }
}

problem Generated/495 {
code {
        func get_max_index(numbers: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 4
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 0
([0.0, -2.0, 3.0, -4.0, 5.0]) -> 4
([1.0, 7.0, 4.0, 9.0, 5.0]) -> 3
([1.0, -2.0, -3.0, 4.0, 5.0]) -> 4
        }
    }
}

problem Generated/496 {
code {
        func get_max_index(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([7, 3, 5, 9, 6]) -> 3
([1, 7, 4, 9, 5]) -> 3
([1, -7, -4, -9, -5]) -> 0
([1, 2, 3, 4, 5, 7, 6, 8]) -> 7
        }
    }
}

problem Generated/497 {
code {
        func find_index_of_max_element(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([7, 3, 5, 9, 6]) -> 3
([1, 7, 4, 9, 5]) -> 3
([-5, -3, -6, -2, -4]) -> 3
([1, 2, 3, 4, 5, 6, 7, 8]) -> 7
        }
    }
}

problem Generated/498 {
code {
        func find_max_index(numbers: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 4
([1.0, 7.0, 4.0, 9.0, 5.0]) -> 3
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 0
([3.5, 2.4, 8.9, 1.2]) -> 2
([1.0, 2.0, 3.0, 4.0, 5.0, 4.0, 3.0, 2.0, 1.0]) -> 4
        }
    }
}

problem Generated/499 {
code {
        func get_max_even(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 10
([1, 3, 5, 7, 9]) -> -1
([2, 4, 6, 8, 10]) -> 10
([1, 11, 111, 3, 33, 333]) -> -1
([4]) -> 4
        }
    }
}

problem Generated/500 {
code {
        func max_filtered_value(elements: list<double>, filter_values: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], [2.0, 3.0, 5.0]) -> 5.0
([1.0, 2.0, 3.0, 4.0, 5.0], [6.0, 7.0, 8.0]) -> -inf
([1.0, 2.0, 3.0, 4.0, 5.0], []) -> -inf
([1.0, 2.0, 3.0, 4.0, 5.0], [2.5, 3.5]) -> -inf
([-1.0, -2.0, -3.0, -4.0, -5.0], [-3.0, -4.0, -5.0]) -> -3.0
        }
    }
}

problem Generated/501 {
code {
        func max_even(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 10
([1, 3, 5, 7, 9]) -> -1
([]) -> -1
([2, 4, 6, 8, 10]) -> 10
([1, 3, 5, 7, 8, 6, 4, 2]) -> 8
        }
    }
}

problem Generated/502 {
code {
        func get_sorted_max_items(items: list<int>, count: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [5, 4, 3]
([7, 3, 5, 9, 6], 2) -> [9, 7]
([1, 7, 4, 9, 5], 5) -> [9, 7, 5, 4, 1]
([1, 7, 4, 9, 5], 0) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> [8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/503 {
code {
        func get_max_n_elements(numbers: list<int>, n: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [5, 4, 3]
([7, 3, 5, 9, 6], 2) -> [9, 7]
([1, 7, 4, 9, 5], 5) -> [9, 7, 5, 4, 1]
([1, 7, 4, 9, 5], 0) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> [8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/504 {
code {
        func get_top_n_elements(elements: list<int>, n: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [5, 4, 3]
([7, 3, 5, 9, 6], 2) -> [9, 7]
([1, 7, 4, 9, 5], 0) -> []
([1, 7, 4, 9, 5], 10) -> [9, 7, 5, 4, 1]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [8, 7, 6, 5]
        }
    }
}

problem Generated/505 {
code {
        func get_sorted_max_n(elements: list<double>, n: int) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 3) -> [5.0, 4.0, 3.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 6) -> [5.0, 4.0, 3.0, 2.0, 1.0]
([0.0, -2.0, 3.0, -4.0, 5.0], 2) -> [5.0, 3.0]
([1.23, 4.56, 7.89, 0.12], 1) -> [7.89]
([1.23, 4.56, 7.89, 0.12], 0) -> []
        }
    }
}

problem Generated/506 {
code {
        func get_max_n_elements(elements: list<double>, n: int) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 3) -> [5.0, 4.0, 3.0]
([10.0, -2.0, 3.0, -4.0, 25.0], 2) -> [25.0, 10.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 0) -> []
([0.0, -2.0, 3.0, -4.0, 5.0], 4) -> [5.0, 3.0, 0.0, -2.0]
([1.0, 2.0, 1.0, 2.0, 1.0], 2) -> [2.0, 2.0]
        }
    }
}

problem Generated/507 {
code {
        func get_top_k_numbers(numbers: list<int>, k: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [5, 4, 3]
([7, 3, 5, 9, 6], 2) -> [9, 7]
([1, 7, 4, 9, 5], 5) -> [9, 7, 5, 4, 1]
([1, 7, 4, 9, 5], 1) -> [9]
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> [8, 7, 6, 5, 4]
        }
    }
}

problem Generated/508 {
code {
        func are_all_numbers_below_max(numbers: list<int>, max_value: int) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 6) -> true
([1, 2, 3, 4, 5], 5) -> false
([1, 2, 3, 4, 5], 4) -> false
([100, 200, 300, 400, 500], 1000) -> true
([], 10) -> true
        }
    }
}

problem Generated/509 {
code {
        func is_all_greater_than_max(numbers: list<int>, max_value: int) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 0) -> true
([1, 2, 3, 4, 5], 5) -> false
([], 0) -> true
([5, 5, 5, 5, 5], 4) -> true
([1, 2, 3, 4, 5], 6) -> false
        }
    }
}

problem Generated/510 {
code {
        func is_list_ascending(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([6, 7, 8, 9, 10]) -> true
([1, 2, 3, 4, 2, 5]) -> false
([-1, 0, 1, 2, 3]) -> true
([3, 2, 1]) -> false
        }
    }
}

problem Generated/511 {
code {
        func check_all_numbers_less_than_max(numbers: list<int>, maximum: int) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 6) -> true
([1, 2, 3, 4, 5], 5) -> false
([1, 2, 3, 4, 5], 4) -> false
([], 6) -> true
([1, 3, 5, 7, 9, 11], 12) -> true
        }
    }
}

problem Generated/512 {
code {
        func is_all_elements_max(elements: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> false
([7.0, 7.0, 7.0, 7.0, 7.0]) -> true
([2.0, 2.0, 2.0]) -> true
([1.0, 2.0, 3.0, 4.0, 4.0]) -> false
([1.0, 2.0, 3.0, 3.0, 3.0]) -> false
        }
    }
}

problem Generated/513 {
code {
        func max_binary_gap(num: int) -> int
    }
    tests {
        template nse {
            (9) -> 2
(529) -> 4
(20) -> 1
(15) -> 0
(1041) -> 5
        }
    }
}

problem Generated/514 {
code {
        func largest_binary_digit(num: int) -> int
    }
    tests {
        template nse {
            (10) -> 1
(101) -> 1
(5) -> 1
(16) -> 1
(0) -> 0
        }
    }
}

problem Generated/515 {
code {
        func max_binary_digit(num: int) -> int
    }
    tests {
        template nse {
            (12345) -> 1
(1234567890) -> 1
(1024) -> 1
(10) -> 1
(15) -> 1
        }
    }
}

problem Generated/516 {
code {
        func find_longest_word(word_lst: list<string>) -> string
    }
    tests {
        template nse {
            (["cat", "dog", "elephant", "giraffe"]) -> "elephant"
(["hello", "world", "python", "is", "great"]) -> "python"
(["one", "two", "three", "four", "five"]) -> "three"
(["cat", "dog", "elephant", "giraffe", "horse"]) -> "elephant"
(["apple", "banana", "cherry", "date"]) -> "banana"
        }
    }
}

problem Generated/517 {
code {
        func get_longest_word(words: list<string>) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "kiwi", "mango", "orange"]) -> "banana"
(["python", "java", "rust", "c++", "javascript"]) -> "javascript"
(["programming", "is", "fun"]) -> "programming"
(["a", "bb", "ccc", "dd", "e", "fff"]) -> "ccc"
(["hello", "world", "this", "is", "openai"]) -> "openai"
        }
    }
}

problem Generated/518 {
code {
        func max_string_by_lowercase(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "Cherry", "Durian", "eggplant"]) -> "eggplant"
(["Ketchup", "Mustard", "Mayonnaise", "Relish"]) -> "Relish"
(["car", "van", "Truck", "bus", "Motorcycle"]) -> "van"
(["a", "b", "c", "d", "e"]) -> "e"
(["D", "C", "B", "A"]) -> "D"
        }
    }
}

problem Generated/519 {
code {
        func get_max_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["Apple", "banana", "Cherry", "Date", "elderberry"]) -> "elderberry"
(["car", "bus", "train", "airplane"]) -> "train"
(["Python", "Java", "C++", "JavaScript"]) -> "Python"
(["dog", "cat", "bird"]) -> "dog"
(["One", "two", "three", "Four"]) -> "two"
        }
    }
}

problem Generated/520 {
code {
        func get_longest_word(words: list<string>) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"]) -> "banana"
(["elephant", "dog", "cat", "lion", "tiger", "fish"]) -> "elephant"
(["python", "java", "c++", "ruby"]) -> "python"
(["Hello", "world", "this", "is", "OpenAI"]) -> "OpenAI"
(["", "a", "ab", "abc"]) -> "abc"
        }
    }
}

problem Generated/521 {
code {
        func find_max_uppercase_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON"]) -> "WORLD"
([]) -> ""
(["", "PYTHON", "HELLO"]) -> "PYTHON"
(["hello", "world", "python"]) -> ""
(["", "", ""]) -> ""
        }
    }
}

problem Generated/522 {
code {
        func get_longest_uppercase_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["Python", "is", "a", "GREAT", "language"]) -> "GREAT"
(["Python", "is", "a", "great", "language"]) -> ""
(["PYTHON", "is", "a", "GREAT", "LANGUAGE"]) -> "LANGUAGE"
([]) -> ""
([""]) -> ""
        }
    }
}

problem Generated/523 {
code {
        func find_max_uppercase_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "AI", "EnginEERing"]) -> "WORLD"
(["hello", "world", "ai", "engineering"]) -> ""
(["HELLO", "WORLD", "AI", "ENGINEERING"]) -> "WORLD"
(["", "world", "ai", "engineering"]) -> ""
(["", "", "", ""]) -> ""
        }
    }
}

problem Generated/524 {
code {
        func find_longest_uppercase_word(words: list<string>) -> string
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON"]) -> "PYTHON"
(["HELLO", "WORLD", ""]) -> "HELLO"
(["hello", "world", "python"]) -> ""
(["", "", ""]) -> ""
([]) -> ""
        }
    }
}

problem Generated/525 {
code {
        func get_max_uppercase_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["ABC", "DEF", "GHI"]) -> "ABC"
(["ABC", "dEF", "ghI"]) -> "ABC"
(["abc", "def", "ghi"]) -> ""
(["A", "BCD", "EF"]) -> "BCD"
([]) -> ""
        }
    }
}

problem Generated/526 {
code {
        func find_longest_uppercase_str(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "WORLD", "test", "HELLO"]) -> "WORLD"
(["apple", "BANANA", "pear", "PINEAPPLE", "orange"]) -> "PINEAPPLE"
(["hello", "world", "test", "python"]) -> ""
([]) -> ""
(["JAVA", "python", "CSS", "HTML", "javascript"]) -> "JAVA"
        }
    }
}

problem Generated/527 {
code {
        func max_word_length(s: string) -> int
    }
    tests {
        template nse {
            ("Hello World") -> 5
("    ") -> 0
("a") -> 1
("this is a sample string to test the function") -> 8
("Python is awesome") -> 7
        }
    }
}

problem Generated/528 {
code {
        func find_max_num_in_string(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["hello", "world", "123", "456", "789"]) -> 789
(["this", "is", "a", "test", "case"]) -> -1
(["1", "2", "3", "4", "5"]) -> 5
(["abc", "123", "xyz"]) -> 123
([]) -> -1
        }
    }
}

problem Generated/529 {
code {
        func find_max_number_in_string(s: string) -> int
    }
    tests {
        template nse {
            ("The maximum number is 10") -> 10
("123") -> 123
("No numbers here") -> 0
("The numbers are 1, 2, 3, 4, and 5.") -> 5
("The largest number is 20, and there is also a smaller one, 5") -> 20
        }
    }
}

problem Generated/530 {
code {
        func get_max_digit_in_list(elements: list<string>) -> int
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"]) -> 5
(["1a", "2b", "3c", "4d", "5e"]) -> 5
([]) -> -1
(["a", "b", "c"]) -> -1
(["hello", "world", "3"]) -> 3
        }
    }
}

problem Generated/531 {
code {
        func get_max_startswith_str(strs: list<string>, pre: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "avocado"], "a") -> "avocado"
(["apple", "banana", "apricot", "avocado"], "b") -> "banana"
(["apple", "banana", "apricot", "avocado"], "c") -> ""
(["alpha", "beta", "gamma", "delta"], "d") -> "delta"
([], "a") -> ""
        }
    }
}

problem Generated/532 {
code {
        func find_max_value_with_prefix(words: list<string>, pre: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "cherry", "pineapple"], "ap") -> "apricot"
(["apple", "banana", "apricot", "cherry", "pineapple"], "c") -> "cherry"
(["apple", "banana", "apricot", "cherry", "pineapple"], "p") -> "pineapple"
([], "a") -> ""
(["dog", "cat", "horse", "elephant"], "lion") -> ""
        }
    }
}

problem Generated/533 {
code {
        func find_max_string_startswith(strs: list<string>, pre: string) -> string
    }
    tests {
        template nse {
            (["cat", "dog", "catch", "doggy"], "c") -> "catch"
(["hello", "world", "hi", "python"], "h") -> "hello"
(["hello", "world", "hi", "python"], "p") -> "python"
(["hello", "world", "hi", "python"], "x") -> ""
([], "c") -> ""
        }
    }
}

problem Generated/534 {
code {
        func find_longest_startswith(words: list<string>, pre: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "goodbye", "python"], "h") -> "hello"
(["hello", "world", "goodbye", "python"], "g") -> "goodbye"
(["hello", "world", "goodbye", "python"], "x") -> ""
(["", "python", "is", "great", "!", ""], "") -> "python"
(["", "python", "is", "great", "!", ""], " ") -> ""
        }
    }
}

problem Generated/535 {
code {
        func replace_max(numbers: list<int>, replace_with: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 0) -> 4
([1, 2, 3, 4, 5], 6) -> 6
([6, 6, 6], 0) -> 0
([1, 2, 3, 3, 2, 1], 0) -> 2
([3, 2, 1, 3, 2, 1], 5) -> 5
        }
    }
}

problem Generated/536 {
code {
        func get_max_elements(numbers: list<int>, count: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [5, 4, 3]
([7, 3, 5, 9, 6], 2) -> [9, 7]
([1, 7, 4, 9, 5], 1) -> [9]
([1, 7, 4, 9, 5], 0) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> [8, 7, 6, 5, 4]
        }
    }
}

problem Generated/537 {
code {
        func max_elements_in_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [4]
([7, 3, 5, 9, 6]) -> [3]
([1, 1, 1, 1, 1]) -> [0, 1, 2, 3, 4]
([1, -7, 4, -9, 5]) -> [4]
([-1, -2, -3, -4, -5]) -> [0]
        }
    }
}

problem Generated/538 {
code {
        func max_sum_list(lists: list<list<int>>) -> list<int>
    }
    tests {
        template nse {
            ([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> [7, 8, 9]
([[-1, -2, -3], [4, 5, 6], [7, 8, 9]]) -> [7, 8, 9]
([[], [4, 5, 6], [7, 8, 9]]) -> [7, 8, 9]
([[1, 2], [4, 5, 6], [7, 8, 9]]) -> [7, 8, 9]
([[-1, -2, -3], [], [7, 8, 9]]) -> [7, 8, 9]
        }
    }
}

problem Generated/539 {
code {
        func max_element_within_limit(elements: list<int>, limit: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 3
([7, 3, 5, 9, 6], 6) -> 6
([1, 2, 3, 4, 5], 10) -> 5
([1, 7, 4, 9, 5], 3) -> 1
([], 3) -> 0
([1, 2, 3, 4, 5], -1) -> 0
        }
    }
}

problem Generated/540 {
code {
        func get_top_n_scores(scores: list<int>, n: int) -> list<int>
    }
    tests {
        template nse {
            ([10, 20, 30, 40, 50], 3) -> [50, 40, 30]
([10, 20, 30, 40, 50], 6) -> [50, 40, 30, 20, 10]
([90, 80, 70, 60, 50], 2) -> [90, 80]
([50, 40, 30, 20, 10], 0) -> []
([70, 80, 60, 90, 50], 4) -> [90, 80, 70, 60]
        }
    }
}

problem Generated/541 {
code {
        func find_max_elem_indexes(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [4]
([-1, -2, -3, -4, -5]) -> [0]
([1, 7, 4, 9, 5]) -> [3]
([1, 7, 4, 9, 9, 5]) -> [3, 4]
([]) -> []
        }
    }
}

problem Generated/542 {
code {
        func get_index_of_highest_value(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([1, 2, 3, 5, 5]) -> 3
([1, 7, 4, 9, 5]) -> 3
([1, 7, 4, -9, 5]) -> 1
([1, 2, 3, 4, 5, 6, 7, 8]) -> 7
        }
    }
}

problem Generated/543 {
code {
        func get_index_of_max_value(numbers: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 4
([5.0, 2.0, 3.0, 4.0, 5.0]) -> 0
([1.0, 2.0, 3.0, 4.0, 5.0, 5.0]) -> 4
([1.0, 2.0, 3.0, 4.0, 5.0, 5.0, 4.0]) -> 4
([1.0, 2.0, 3.0, 4.0, 5.0, 5.0, 4.0, 5.0]) -> 4
        }
    }
}

problem Generated/544 {
code {
        func get_max_index(elements: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 2.0, 1.0]) -> 2
([7.0, 3.0, 5.0, 9.0, 6.0]) -> 3
([1.0, 7.0, 4.0, 9.0, 5.0]) -> 3
([1.0, 7.0, 4.0, 9.0, 5.0, 9.0]) -> 3
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 0
        }
    }
}

problem Generated/545 {
code {
        func get_index_of_max_element(elements: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 4
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 0
([0.0, -2.0, 3.0, -4.0, 5.0, 5.0]) -> 4
([1.0, 7.0, 4.0, 9.0, 5.0]) -> 3
([1.0, 2.0, 3.0, 4.0, 5.0, 5.0, 4.0]) -> 4
        }
    }
}

problem Generated/546 {
code {
        func find_max_index_in_list(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([1, 2, 3, 5, 5]) -> 3
([1, 2, 5, 5, 5]) -> 2
([5, 5, 5, 5, 5]) -> 0
([1, 2, 3, 4, -5]) -> 3
        }
    }
}

problem Generated/547 {
code {
        func find_index_of_max(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([7, 3, 5, 9, 6]) -> 3
([1, 7, 4, 9, 5]) -> 3
([-1, -7, -4, -9, -5]) -> 0
([3, 2, 3, 4, 5, 3]) -> 4
        }
    }
}

problem Generated/548 {
code {
        func get_max_from_reversed_list(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([1, 2, 3, 4, 5, 6]) -> 6
([5, 4, 3, 2, 1]) -> 5
([10, 20, 30, 40, 50]) -> 50
([50, 40, 30, 20, 10]) -> 50
        }
    }
}

problem Generated/549 {
code {
        func reverse_find_max(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([7, 3, 5, 9, 6]) -> 9
([1, 7, 4, 9, 5]) -> 9
([1, 2, 3, 4, 5, 6, 7, 8]) -> 8
([8, 7, 6, 5, 4, 3, 2, 1]) -> 8
        }
    }
}

problem Generated/550 {
code {
        func get_second_largest_element(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([7, 3, 5, 9, 6]) -> 7
([1, 7, 4, 9, 5]) -> 7
([1, 7, 4, 9, 5, 2, 7]) -> 7
([1, 2, 3, 4, 5, 6, 7, 8]) -> 7
        }
    }
}

problem Generated/551 {
code {
        func find_second_largest(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([7, 3, 5, 9, 6]) -> 7
([1, 7, 4, 9, 5]) -> 7
([1, 7, 4, 9, 5, 9]) -> 9
([1, 2]) -> 1
        }
    }
}

problem Generated/552 {
code {
        func find_max_unique_sum(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([7, 3, 5, 9, 6]) -> 30
([1, 7, 4, 9, 5]) -> 26
([-1, -2, -3, -4, -5]) -> 0
([1, 2, 3, 4, 5, 6, 7, 8]) -> 36
        }
    }
}

problem Generated/553 {
code {
        func max_length_of_uniq_substring(s: string) -> int
    }
    tests {
        template nse {
            ("abcabcbb") -> 3
("bbbbb") -> 1
("pwwkew") -> 3
(" ") -> 1
("abcdef") -> 6
        }
    }
}

problem Generated/554 {
code {
        func get_max_occurrences(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 1
([7, 3, 5, 9, 6, 3, 3]) -> 3
([1, 7, 4, 9, 5, 1, 1, 4]) -> 3
([1, 7, 4, 9, 5, 2, 2, 4]) -> 2
([1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8]) -> 4
        }
    }
}

problem Generated/555 {
code {
        func max_floor_value(numbers: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.5, 3.9, 4.2, 5.8]) -> 5
([1.1, 2.4, 3.6, 4.8, 5.9]) -> 5
([1.2, 2.7, 3.3, 4.1, 5.5]) -> 5
([1.9, 2.8, 3.4, 4.5, 5.1]) -> 5
([1.1, 2.1, 3.1, 4.1, 5.1]) -> 5
        }
    }
}

problem Generated/556 {
code {
        func get_max_floor_sqrt(numbers: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 2
([9.0, 16.0, 25.0, 36.0, 49.0]) -> 7
([0.0, 0.25, 0.5, 1.0, 2.0]) -> 1
([0.0, 1.0, 0.25, 4.0, 9.0, 16.0]) -> 4
([0.0, 0.1, 0.2, 0.3, 0.4]) -> 0
        }
    }
}

problem Generated/557 {
code {
        func max_floor(numbers: list<double>) -> int
    }
    tests {
        template nse {
            ([1.2, 2.3, 3.4, 4.5, 5.6]) -> 5
([1.3, 2.4, 3.5, 4.6, 5.7]) -> 5
([1.01, 2.02, 3.03, 4.04, 5.05]) -> 5
([1.0, 2.0, 3.0, 4.0, 5.0]) -> 5
([1.99, 2.99, 3.99, 4.99, 5.99]) -> 5
        }
    }
}

problem Generated/558 {
code {
        func max_of_ceil(elements: list<double>) -> int
    }
    tests {
        template nse {
            ([1.2, 3.8, 2.1, 4.5, 9.3]) -> 10
([1.2, 3.8, 2.1, 4.5, 9.0]) -> 9
([1.0, 2.0, 3.0, 4.0, 5.0]) -> 5
([1.1, 2.2, 3.3, 4.4, 5.5]) -> 6
([-1.5, -2.8, -3.1, -4.5, -9.3]) -> -1
        }
    }
}

problem Generated/559 {
code {
        func max_value_square_root(elements: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 4.0, 9.0, 16.0, 25.0]) -> 5.0
([7.0, 14.0, 21.0, 28.0, 35.0]) -> 5.916079783099616
([0.0, 50.0, 100.0, 150.0, 200.0]) -> 14.142135623730951
([10.0, 20.0, 30.0, 40.0, 50.0]) -> 7.0710678118654755
([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]) -> 2.449489742783178
        }
    }
}

problem Generated/560 {
code {
        func max_square_root(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([4.0, 9.0, 16.0, 25.0, 36.0]) -> 6.0
([1.0, 2.0, 3.0, 4.0, 5.0]) -> 2.23606797749979
([0.0, 1.0, 2.0, 3.0, 4.0, 5.0]) -> 2.23606797749979
([1.0, 4.0, 9.0, 16.0, 25.0, 36.0]) -> 6.0
([1.0, 3.0, 5.0, 7.0, 9.0]) -> 3.0
        }
    }
}

problem Generated/561 {
code {
        func max_sqrt(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([4.0, 9.0, 16.0, 25.0, 36.0]) -> 6.0
([1.0, 2.0, 3.0, 4.0, 5.0]) -> 2.23606797749979
([0.25, 0.5, 0.75, 1.0]) -> 1.0
([0.0, 1.0, 2.0, 3.0]) -> 1.7320508075688772
([100.0, 121.0, 144.0, 169.0]) -> 13.0
        }
    }
}

problem Generated/562 {
code {
        func max_square_root(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 4.0, 9.0, 16.0, 25.0]) -> 5.0
([1.0, -4.0, 9.0, -16.0, 25.0]) -> 5.0
([-1.0, -4.0, -9.0, -16.0, -25.0]) -> 0.0
([0.0, 2.0, 4.0, 10.0]) -> 3.1622776601683795
([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]) -> 2.8284271247461903
        }
    }
}

problem Generated/563 {
code {
        func max_square_root(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([4, 9, 16, 25, 36, 49, 64, 81]) -> 9
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 3
([0, 10, 20, 30, 40, 50]) -> 7
([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) -> 31
([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) -> 6
        }
    }
}

problem Generated/564 {
code {
        func max_power(numbers: list<int>, power: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 125
([7, 3, 5, 9, 6], 2) -> 81
([1, 7, 4, 9, 5], 1) -> 9
([1, 7, 4, 9, 5], 0) -> 1
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> 4096
        }
    }
}

problem Generated/565 {
code {
        func max_powered_element(elements: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 25.0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 25.0
([0.0, 2.0, 3.0, 4.0, 5.0]) -> 25.0
([1.0, 2.5, 3.0, 0.4, 5.0]) -> 25.0
([1.0]) -> 1.0
        }
    }
}

problem Generated/566 {
code {
        func get_max_power(numbers: list<double>, power: double) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2.0) -> 25.0
([1.0, 2.0, 3.0, 4.0, 5.0], 1.0) -> 5.0
([1.0, 2.0, 3.0, 4.0, 5.0], 0.5) -> 2.23606797749979
([1.0, 2.0, -3.0, 4.0, 5.0], 2.0) -> 25.0
([-1.0, -2.0, -3.0], 3.0) -> -1.0
        }
    }
}

problem Generated/567 {
code {
        func max_pow_element(elements: list<double>, power: int) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2) -> 25.0
([1.0, 2.0, 3.0, 4.0, 5.0], 3) -> 125.0
([-1.0, -2.0, -3.0, -4.0, -5.0], 3) -> -1.0
([0.0, 1.0, 2.0, 3.0, 4.0, 5.0], 0) -> 1.0
([7.0, 8.0, 9.0, 10.0], 1) -> 10.0
        }
    }
}

problem Generated/568 {
code {
        func get_max_product(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 60
([-10, -10, 5, 2]) -> 500
([1, 2, 0, 3, 4, 5]) -> 60
([1, -2, 3, -4, 5, -6]) -> 120
([10, -10, 5, -5, 5]) -> 500
        }
    }
}

problem Generated/569 {
code {
        func max_word_length_in_sentence(sentence: string) -> int
    }
    tests {
        template nse {
            ("Hello there, how are you?") -> 5
("The quick brown fox jumps over the lazy dog.") -> 5
("I am a sentence with words of varying lengths.") -> 8
("  Spaces    should not count   ") -> 6
("") -> 0
        }
    }
}

problem Generated/570 {
code {
        func get_max_word_length(sentence: string) -> int
    }
    tests {
        template nse {
            ("Hello world!") -> 5
("The quick brown fox jumps over the lazy dog") -> 5
("I love Python!") -> 6
("  ") -> 0
("1,2,3,4,5") -> 1
        }
    }
}

problem Generated/571 {
code {
        func get_max_word_length(s: string) -> int
    }
    tests {
        template nse {
            ("Hello World") -> 5
("The quick brown fox jumps over the lazy dog") -> 5
("This is a sentence with a very long word like supercalifragilisticexpialidocious") -> 34
("") -> 0
("1 22 333 4444 55555 666666 7777777") -> 7
        }
    }
}

problem Generated/572 {
code {
        func shortest_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["dog", "cat", "bird", "rat"]) -> "dog"
(["this", "is", "a", "test"]) -> "a"
(["these", "are", "some", "longer", "strings"]) -> "are"
(["", "a", "ab", "abc", "abcd"]) -> ""
(["short", "medium", "reallylongword"]) -> "short"
        }
    }
}

problem Generated/573 {
code {
        func get_closest_to_zero(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> 1.0
([1.0, 2.0, 3.0, 4.0, 5.0]) -> 1.0
([-0.1, -2.3, -3.8, 4.2, 5.5]) -> -0.1
([0.0, -2.0, 3.0, -4.0, 5.0]) -> 0.0
([10.0, 7.0, 3.0, -2.0, -5.0]) -> -2.0
        }
    }
}

problem Generated/574 {
code {
        func find_closest_to_zero(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 1
([7, -3, 5, 9, 6]) -> -3
([1, 7, 4, 9, 5]) -> 1
([-1, -7, -4, -9, -5]) -> -1
([1, 2, -3, 4, -5, 6]) -> 1
        }
    }
}

problem Generated/575 {
code {
        func find_closest_number(numbers: list<double>, target: double) -> double
    }
    tests {
        template nse {
            ([1.0, 2.5, 3.7, 4.2, 5.1], 3.8) -> 3.7
([7.1, 8.2, 6.3, 9.4, 10.5], 7.5) -> 7.1
([1.0, 2.5, 3.7, 4.2, 5.1], 1.2) -> 1.0
([-1.0, -2.5, -3.7, -4.2, -5.1], -4.0) -> -4.2
([1.0, 2.5, 3.7, 4.2, 5.1], 10.0) -> 5.1
        }
    }
}

problem Generated/576 {
code {
        func min_distance_from_number(numbers: list<int>, num: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 1) -> 0
([7, 3, 5, 9, 6], 10) -> 1
([1, 7, 4, 9, 5], 6) -> 1
([1, 7, 4, 9, 5], 0) -> 1
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> 0
        }
    }
}

problem Generated/577 {
code {
        func find_closest_zero_index(numbers: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> 0
([1.0, 0.0, 3.0, -4.0, 5.0]) -> 1
([1.0, 0.0, -3.0, -4.0, 5.0]) -> 1
([1.0, 2.0, 3.0, 4.0, 5.0]) -> 0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 0
        }
    }
}

problem Generated/578 {
code {
        func find_closest_to_zero(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 1
([-5, -4, -3, -2, -1]) -> -1
([0, 5, 8, -3, -6]) -> 0
([2, 2, 2, -3, -3]) -> 2
([1, 4, -8, 16, -32]) -> 1
        }
    }
}

problem Generated/579 {
code {
        func calculate_average(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 3.0
([0.0, 0.0, 0.0, 0.0]) -> 0.0
([]) -> 0.0
([-1.0, -2.0, 3.0, 4.0, 5.0]) -> 1.8
([0.0, 1.0, 2.0, 3.0, 4.0, 5.0]) -> 2.5
        }
    }
}

problem Generated/580 {
code {
        func min_sum_of_k_elements(elements: list<int>, k: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 6
([7, 3, 5, 9, 6], 4) -> 21
([1, 7, 4, 9, 5], 1) -> 1
([1, 7, 4, 9, 5], 0) -> 0
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> 15
        }
    }
}

problem Generated/581 {
code {
        func get_min_max_diff(nums: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([7, 3, 5, 9, 6]) -> 6
([1, 7, 4, 9, 5]) -> 8
([1, 7, 4, 9, 5, -3]) -> 12
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 9
        }
    }
}

problem Generated/582 {
code {
        func get_min_max_diff(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([5, 4, 3, 2, 1]) -> 4
([1, 1, 1, 1, 1]) -> 0
([]) -> 0
([1, 2, 3, -4, -5]) -> 8
        }
    }
}

problem Generated/583 {
code {
        func min_max_diff(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([7, 3, 5, 9, 6]) -> 6
([1, 7, 4, 9, 5]) -> 8
([10, 10, 10, 10, 10]) -> 0
([]) -> 0
        }
    }
}

problem Generated/584 {
code {
        func find_diff_between_max_min(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 4.0
([1.0, 2.0, 2.5, 4.0, 5.0]) -> 4.0
([1.0, 1.0, 1.0, 1.0, 1.0]) -> 0.0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 4.0
([1.0, 2.0, -3.0, 4.0, 5.0]) -> 8.0
        }
    }
}

problem Generated/585 {
code {
        func min_max_diff(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([7, 3, 5, 9, 6]) -> 6
([1, 7, 4, 9, 5]) -> 8
([1, -7, 4, -9, 5]) -> 14
([1, 2, 3, 4, 5, 6, 7, 8]) -> 7
        }
    }
}

problem Generated/586 {
code {
        func find_min_score(scores: list<list<double>>) -> list<double>
    }
    tests {
        template nse {
            ([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0], [10.0, 11.0, 12.0]]) -> [1.0, 2.0, 3.0]
([[10.2, 9.8, 10.5], [9.6, 9.3, 9.1], [8.7, 9.1, 8.2]]) -> [8.7, 9.1, 8.2]
([[1.0, 1.0], [2.0, 2.0], [3.0, 3.0], [4.0, 4.0]]) -> [1.0, 1.0]
([[3.2, 4.5, 6.7], [1.2, 2.3, 3.4]]) -> [1.2, 2.3, 3.4]
([[1.2, 3.4], [5.6, 7.8]]) -> [1.2, 3.4]
        }
    }
}

problem Generated/587 {
code {
        func get_min_values(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) -> [1, 2, 3, 2, 1]
([7, 3, 5, 9, 6], [2, 8, 4, 1, -2]) -> [2, 3, 4, 1, -2]
([1, 2, 3, 4, 5], [-1, -2, -3, -4, -5]) -> [-1, -2, -3, -4, -5]
([1, 2, 3], [4, 5, 6, 7]) -> [1, 2, 3]
([], []) -> []
([1, 2, 3], []) -> []
        }
    }
}

problem Generated/588 {
code {
        func get_min_of_lists(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [6, 2, 8, 4, 0]) -> [1, 2, 3, 4, 0]
([7, 3, 5], [0, 2, -3, 4, 0]) -> [0, 2, -3]
([1, 7, 4], [1, 2, 3]) -> [1, 2, 3]
([1, 7, 4], [-1, -2, -3]) -> [-1, -2, -3]
([1, 2, 3, 4, 5], [10, 9, 8, 7, 6]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/589 {
code {
        func get_min_of_pairs(first_lst: list<int>, second_lst: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) -> [1, 2, 3, 4, 5]
([10, 20, 30, 40, 50], [50, 40, 30, 20, 10]) -> [10, 20, 30, 20, 10]
([1, 1, 1, 1, 1], [2, 2, 2, 2, 2]) -> [1, 1, 1, 1, 1]
([10, -20, 30, -40, 50], [50, 40, 30, 20, 10]) -> [10, -20, 30, -40, 10]
([100, 200, 300], [500, 400, 300, 200, 100]) -> [100, 200, 300]
        }
    }
}

problem Generated/590 {
code {
        func find_min_in_column(matrix: list<list<int>>, column: int) -> int
    }
    tests {
        template nse {
            ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) -> 1
([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) -> 2
([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) -> 3
([[4, 5, 6], [1, 2, 3], [7, 8, 9]], 0) -> 1
([[4, 5, 6], [1, 2, 3], [7, 8, 9]], 1) -> 2
([[4, 5, 6], [1, 2, 3], [7, 8, 9]], 2) -> 3
        }
    }
}

problem Generated/591 {
code {
        func find_min_of_each_element(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) -> [1, 2, 3, 2, 1]
([7, 3, 5, 9, 6], [2, 8, 4, 1, 10]) -> [2, 3, 4, 1, 6]
([1, 7, 4, 9, 5], [1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 7, 4, 9, 5], [10, 9, 8, 7, 6]) -> [1, 7, 4, 7, 5]
([1, 2, 3], []) -> []
        }
    }
}

problem Generated/592 {
code {
        func get_min_index(numbers: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 0
([5.0, 4.0, 3.0, 2.0, 1.0]) -> 4
([0.0, -2.0, 3.0, -4.0, 5.0]) -> 3
([1.0, 1.0, 1.0, 1.0]) -> 0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 4
        }
    }
}

problem Generated/593 {
code {
        func get_min_index(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 0
([7, 3, 5, 9, 6]) -> 1
([1, 7, 4, 9, 5]) -> 0
([1, 0, 0, 0, 5]) -> 1
([1, 1, 1, 1, 1]) -> 0
        }
    }
}

problem Generated/594 {
code {
        func min_index(elements: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 0
([7.0, 3.0, 5.0, 9.0, 6.0]) -> 1
([1.0, 7.0, 4.0, 9.0, 5.0]) -> 0
([0.0, -2.0, 3.0, -4.0, 5.0]) -> 3
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 4
        }
    }
}

problem Generated/595 {
code {
        func get_index_of_min_value(elements: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> 3
([0.0]) -> 0
([5.4, 2.3, 1.6, 6.7, 0.1]) -> 4
([-8.7, -3.4, -1.5, -7.8]) -> 0
([1.0, 2.4, -5.6, 4.7, 3.8]) -> 2
        }
    }
}

problem Generated/596 {
code {
        func get_min_index(elements: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 0
([1.0, 0.0, 3.0, 4.0, 5.0]) -> 1
([1.0, 2.0, 3.0, 0.0, 5.0]) -> 3
([1.0, 2.0, 3.0, 4.0, -5.0]) -> 4
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 4
        }
    }
}

problem Generated/597 {
code {
        func get_min_index(elements: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 0
([5.0, 4.0, 3.0, 2.0, 1.0]) -> 4
([1.0, -2.0, 3.0, -4.0, 5.0]) -> 3
([0.0, 0.0, 0.0, 0.0, 0.0]) -> 0
([1.0, 1.0, 1.0, 1.0, 1.0]) -> 0
        }
    }
}

problem Generated/598 {
code {
        func find_smallest_unique_element(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 3, 4]) -> 1
([1, 1, 1, 2, 2, 3]) -> 3
([1, 1, 1, 1, 2, 2]) -> -1
([2, 3, 4, 5, 5, 4]) -> 2
([1, 2, 4, 6, 8, 10]) -> 1
        }
    }
}

problem Generated/599 {
code {
        func find_min_unique_element(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 1
([1, 1, 2, 3, 3, 4, 5, 5, 6]) -> 2
([2, 2, 3, 4, 4, 5, 5]) -> 3
([1, 2, 3, 4, 4, 3, 2, 1]) -> -1
([]) -> -1
        }
    }
}

problem Generated/600 {
code {
        func get_min_score(scores: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 0
([7.0, 3.0, 5.0, 9.0, 6.0]) -> 1
([1.0, 7.0, 4.0, 9.0, 5.0]) -> 0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 4
([1.0, 2.0, 3.0, 0.0, 5.0, 6.0, 7.0, 8.0]) -> 3
        }
    }
}

problem Generated/601 {
code {
        func min_value_from_list(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 1
([7, 3, 5, 9, 6]) -> 3
([-1, -2, -3, -4, -5]) -> -1
([0, 2, -3, 4, 0]) -> 2
([]) -> -1
        }
    }
}

problem Generated/602 {
code {
        func find_min_element_in_list(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 1
([-2, -3, -4, -5]) -> -1
([0, 2, -3, 4, 0]) -> 2
([]) -> -1
([-1, -2, -3, 1, 2, 3]) -> 1
        }
    }
}

problem Generated/603 {
code {
        func find_min_length_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> "hello"
(["quick", "", "brown", "fox"]) -> "fox"
(["", "", ""]) -> ""
([]) -> ""
(["a", "bb", "ccccc", "ddd"]) -> "a"
        }
    }
}

problem Generated/604 {
code {
        func min_positive_number(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 1.0
([3.0, 0.5, -1.0, 2.0, 4.0]) -> 0.5
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> inf
([0.0, 0.0, 0.0, 0.0, 0.0]) -> inf
([]) -> inf
        }
    }
}

problem Generated/605 {
code {
        func get_top_k_elements(elements: list<double>, k: int) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 3) -> [5.0, 4.0, 3.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 6) -> [5.0, 4.0, 3.0, 2.0, 1.0]
([3.0, 2.0, 1.0], 2) -> [3.0, 2.0]
([1.0, 2.0, 3.0], 0) -> []
([], 3) -> []
        }
    }
}

problem Generated/606 {
code {
        func get_sorted_first_n_smallest_elements(elements: list<int>, n: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [1, 2, 3]
([7, 3, 5, 9, 6], 2) -> [3, 5]
([1, 7, 4, 9, 5], 5) -> [1, 4, 5, 7, 9]
([1, 7, 4, 9, 5], 0) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> [1, 2, 3, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/607 {
code {
        func get_min_k_elements(elements: list<int>, k: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [1, 2, 3]
([7, 3, 5, 9, 6], 2) -> [3, 5]
([1, 7, 4, 9, 5], 6) -> [1, 4, 5, 7, 9]
([1, 7, 4, 9, 5], 0) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 10) -> [1, 2, 3, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/608 {
code {
        func find_top_k_elements(elements: list<int>, k: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [3, 4, 5]
([7, 3, 5, 9, 6], 2) -> [7, 9]
([1, 7, 4, 9, 5], 5) -> [1, 4, 5, 7, 9]
([1, 7, 4, 9, 5], 0) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> [1, 2, 3, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/609 {
code {
        func get_min_ascii_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["abc", "def", "ghi", "jkl"]) -> "abc"
(["abc", "def", "ghi", "JKL"]) -> "JKL"
(["Abc", "def", "ghi", "jkl"]) -> "Abc"
(["x", "y", "z"]) -> "x"
(["", " ", "1", "a"]) -> ""
        }
    }
}

problem Generated/610 {
code {
        func get_lowest_ascii(words: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> "hello"
(["apple", "banana", "orange", "lemon"]) -> "apple"
(["Python", "is", "amazing"]) -> "is"
(["I", "love", "my", "cat"]) -> "I"
(["Programming", "is", "fun"]) -> "is"
        }
    }
}

problem Generated/611 {
code {
        func check_min_value_positive(numbers: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> true
([0.0, 2.0, 3.0, 4.0, 5.0]) -> false
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> false
([0.0]) -> false
([1.0, 1.0, 1.0, 1.0, 1.0]) -> true
        }
    }
}

problem Generated/612 {
code {
        func has_all_values_less_than_threshold(numbers: list<double>, threshold: double) -> bool
    }
    tests {
        template nse {
            ([0.1, 0.2, 0.3, 0.4, 0.5], 0.6) -> true
([0.1, 0.2, 0.3, 0.4, 0.5], 0.2) -> false
([], 0.0) -> true
([3.0, 4.0, 5.0, 6.0], 7.0) -> true
([3.0, 4.0, 5.0, 6.0], 4.0) -> false
        }
    }
}

problem Generated/613 {
code {
        func is_list_min_positive(elements: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> true
([1.0, -2.0, 3.0, -4.0, 5.0]) -> false
([1.0]) -> true
([]) -> false
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> false
        }
    }
}

problem Generated/614 {
code {
        func min_binary_value(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 1
([7, 6, 5, 4, 3, 2, 1]) -> 1
([0, 0, 0, 0, 0]) -> 0
([10, 20, 30, 40, 50]) -> 1010
([9, 15, 23, 94, 81]) -> 1001
        }
    }
}

problem Generated/615 {
code {
        func min_binary_val(numbers: list<int>) -> string
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> "1"
([0, 1, 2, 4, 8]) -> "0"
([-8, -5, -2, -1, 0]) -> "-1000"
([-1, 0, 1, 2, 3]) -> "-1"
([-7, -4, 2, 3, 5]) -> "-111"
        }
    }
}

problem Generated/616 {
code {
        func find_shortest_word(sentence: string) -> int
    }
    tests {
        template nse {
            ("The quick brown fox jumped over the lazy dog") -> 3
("This is a test sentence") -> 1
("Hello World") -> 5
("I am a Python developer") -> 1
("To be or not to be, that is the question") -> 2
        }
    }
}

problem Generated/617 {
code {
        func find_shortest_word(sentence: string) -> int
    }
    tests {
        template nse {
            ("The shortest word is a") -> 1
("I love programming") -> 1
("To be or not to be") -> 2
("This is a test case") -> 1
("Python is a high level language") -> 1
        }
    }
}

problem Generated/618 {
code {
        func get_min_element_with_lower_case(elements: list<string>) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "Orange", "grapes", "Mango"]) -> "apple"
(["apple", "banana", "orange", "grapes", "mango"]) -> "apple"
(["apple", "banana", "ORANGE", "grapes", "Mango"]) -> "apple"
(["Apple", "banana", "Orange", "grapes", "Mango"]) -> "apple"
(["Apple", "Banana", "Orange", "Grapes", "Mango"]) -> "apple"
        }
    }
}

problem Generated/619 {
code {
        func get_min_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "Cat", "DOG"]) -> "apple"
(["Pineapple", "grape", "Lemon", "kiwi"]) -> "grape"
(["One", "two", "three", "Four"]) -> "Four"
(["dog", "cat", "rat"]) -> "cat"
(["hello", "world"]) -> "hello"
        }
    }
}

problem Generated/620 {
code {
        func find_min_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["Hello", "world", "Python", "Programming"]) -> "Hello"
(["apple", "banana", "Cherry", "Date"]) -> "apple"
(["AAA", "aaa", "BBB", "bbb"]) -> "AAA"
(["David", "Bruce", "ALice", "Xavier"]) -> "ALice"
(["Python", "programming", "language", "is", "fun"]) -> "fun"
        }
    }
}

problem Generated/621 {
code {
        func find_min_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"]) -> "apple"
(["Django", "Flask", "bottle", "FastAPI"]) -> "bottle"
(["AMZ", "APPL", "GGL", "FB"]) -> "AMZ"
(["watermelon", "Watermelon", "WATERMELON"]) -> "watermelon"
(["Zebra", "apple", "cat", "dog", "elephant"]) -> "apple"
        }
    }
}

problem Generated/622 {
code {
        func get_min_city_name(cities: list<string>) -> string
    }
    tests {
        template nse {
            (["New York", "Los Angeles", "Chicago", "Houston", "Philadelphia"]) -> "Chicago"
(["Istanbul", "Ankara", "İzmir", "Adana", "Bursa"]) -> "Adana"
(["San Francisco", "Seattle", "Portland", "Denver", "Salt Lake City"]) -> "Denver"
(["Paris", "Marseille", "Lyon", "Nice", "Toulouse"]) -> "Lyon"
(["Tokyo", "Osaka", "Nagoya", "Sapporo", "Kobe"]) -> "Kobe"
        }
    }
}

problem Generated/623 {
code {
        func find_min_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["apple", "Ball", "cat", "Dog", "ELEPHANT"]) -> "apple"
(["Software", "Engineering", "is", "a", "fun", "course"]) -> "a"
(["PYTHON", "javascript", "PHP", "rUbY", "scala"]) -> "javascript"
(["Is", "this", "a", "joke?"]) -> "a"
(["ONE", "TWO", "three", "FOUR", "five"]) -> "five"
        }
    }
}

problem Generated/624 {
code {
        func get_min_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python", "programming"]) -> "hello"
(["This", "is", "a", "test", "case"]) -> "a"
(["A", "a", "1", "b", "B"]) -> "1"
(["Python", "java", "C++", "ruby"]) -> "C++"
(["PYTHON", "Java", "c++", "ruby"]) -> "c++"
        }
    }
}

problem Generated/625 {
code {
        func get_shortest_uppercase_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["apple", "Banana", "cat", "DOG"]) -> "CAT"
(["Apple", "banana", "cat", "dog"]) -> "CAT"
(["APPLE", "banana", "cat", "DOG"]) -> "CAT"
(["apple", "banana", "cat", "dog"]) -> "CAT"
(["a", "bb", "ccc", "dddd"]) -> "A"
        }
    }
}

problem Generated/626 {
code {
        func find_min_lowercase(words: list<string>) -> string
    }
    tests {
        template nse {
            (["Hello", "World", "Python", "is", "awesome"]) -> "awesome"
(["HELLO", "WORLD", "PYTHON", "IS", "AWESOME"]) -> ""
(["Hello", "world", "python", "is", "awesome"]) -> "awesome"
(["Python", "is", "a", "widely", "used", "high-level", "programming", "language"]) -> "a"
([]) -> ""
        }
    }
}

problem Generated/627 {
code {
        func min_uppercase(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["Hello", "WORLD", "PYTHON"]) -> "PYTHON"
(["hello", "world", "python"]) -> ""
(["This", "is", "a", "TEST", "case"]) -> "TEST"
([]) -> ""
(["ab", "BC", "de", "FG"]) -> "BC"
        }
    }
}

problem Generated/628 {
code {
        func find_min_uppercase_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["Hello", "WORLD", "PYTHON"]) -> "PYTHON"
(["Hello", "WORLD", "Python"]) -> "WORLD"
(["hello", "world", "python"]) -> ""
([]) -> ""
(["HELLO", "WORLD", "PYTHON"]) -> "HELLO"
        }
    }
}

problem Generated/629 {
code {
        func get_min_uppercase_str(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["APPLE", "banana", "CHERRY", "date"]) -> "APPLE"
(["apple", "banana", "cherry", "date"]) -> ""
([]) -> ""
(["A", "B", "C", "D"]) -> "A"
(["a", "b", "c", "d"]) -> ""
        }
    }
}

problem Generated/630 {
code {
        func min_uppercase_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["PYTHON", "JAVA", "c++", "RUBY"]) -> "JAVA"
(["UPPER", "lower", "UPPERCASE"]) -> "UPPER"
([]) -> ""
(["not", "a", "single", "uppercase", "letter"]) -> ""
(["CSS", "HTML", "JavaScript", "Python"]) -> "CSS"
        }
    }
}

problem Generated/631 {
code {
        func min_alpha_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["abc", "def", "ghi", "jkl"]) -> "abc"
(["abc", "def", "123", "jkl"]) -> "abc"
(["abc", "def", "", "jkl"]) -> "abc"
(["123", "456", "789"]) -> ""
(["", "", ""]) -> ""
        }
    }
}

problem Generated/632 {
code {
        func get_min_alpha_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> "hello"
(["alpha", "beta", "charlie", "delta"]) -> "alpha"
(["123", "456", "789"]) -> ""
(["hello", "world", "123"]) -> "hello"
([]) -> ""
        }
    }
}

problem Generated/633 {
code {
        func min_alpha_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "Python", "123"]) -> "Python"
(["hello", "world", "Python", "123", "Alice"]) -> "Alice"
(["123", "456", "789"]) -> ""
([]) -> ""
(["one", "two", "three"]) -> "one"
        }
    }
}

problem Generated/634 {
code {
        func find_min_digit(txt: string) -> int
    }
    tests {
        template nse {
            ("abc123d") -> 1
("0dwf24d") -> 0
("no_digits") -> -1
("") -> -1
("987") -> 7
        }
    }
}

problem Generated/635 {
code {
        func min_digit_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "123", "abc123", "345", "def"]) -> "123"
(["hello", "world", "abc", "efg"]) -> ""
(["456", "2", "333", "1", "0"]) -> "0"
([]) -> ""
(["1a", "2b", "3c"]) -> "1a"
        }
    }
}

problem Generated/636 {
code {
        func find_min_digit_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["123", "456", "789"]) -> "123"
(["123", "456", "a7z8b9"]) -> "123"
(["abc", "def", "ghi"]) -> ""
(["", "1", "2", "3"]) -> "1"
([]) -> ""
        }
    }
}

problem Generated/637 {
code {
        func get_minimal_string(strs: list<string>, pre: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "pineapple", "pear"], "p") -> "pear"
(["apple", "banana", "pineapple", "pear"], "c") -> ""
(["apple", "banana", "pineapple", "pear"], "a") -> "apple"
([], "a") -> ""
(["a", "bb", "ccc", "dd"], "") -> "a"
        }
    }
}

problem Generated/638 {
code {
        func find_min_startswith(strs: list<string>, pre: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "avocado", "cherry"], "a") -> "apple"
(["apple", "banana", "avocado", "cherry"], "b") -> "banana"
(["apple", "banana", "avocado", "cherry"], "c") -> "cherry"
([], "a") -> ""
(["apple", "banana", "avocado", "cherry"], "") -> "apple"
        }
    }
}

problem Generated/639 {
code {
        func find_min_string_with_prefix(strs: list<string>, pre: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "pear", "peach", "orange"], "p") -> "peach"
(["apple", "banana", "pear", "peach", "orange"], "a") -> "apple"
([], "p") -> ""
(["apple", "banana", "pear", "peach", "orange"], "b") -> "banana"
(["apple", "banana", "pear", "peach", "orange"], "z") -> ""
        }
    }
}

problem Generated/640 {
code {
        func get_min_elements(elements: list<double>, k: int) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 3) -> [1.0, 1.0, 1.0]
([7.0, 3.0, 5.0, 9.0, 6.0], 2) -> [3.0, 3.0]
([1.0, 7.0, 4.0, 9.0, 5.0], 5) -> [1.0, 1.0, 1.0, 1.0, 1.0]
([1.0, 7.0, 4.0, 9.0, 5.0], 0) -> []
([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0], 4) -> [1.0, 1.0, 1.0, 1.0]
        }
    }
}

problem Generated/641 {
code {
        func find_min_indexes(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([10, 20, 30, 40, 50]) -> [0]
([10, 20, 30, 10, 20]) -> [0, 3]
([50, 40, 30, 20, 10]) -> [4]
([10, 10, 10, 10, 10]) -> [0, 1, 2, 3, 4]
([-10, 0, 10, 20, 30]) -> [0]
        }
    }
}

problem Generated/642 {
code {
        func get_minimum_sorted_elements(elements: list<int>, k: int) -> list<int>
    }
    tests {
        template nse {
            ([5, 4, 3, 2, 1], 2) -> [1, 2]
([1, 3, 2, 4, 5], 3) -> [1, 2, 3]
([10, 20, 30, 40, 50], 5) -> [10, 20, 30, 40, 50]
([10, 20, 30, 40, 50], 0) -> []
([3, 1, 4, 2, 5, 8, 7], 4) -> [1, 2, 3, 4]
        }
    }
}

problem Generated/643 {
code {
        func min_of_sorted_list(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 1
([7, 3, 5, 9, 6]) -> 3
([1, 7, 4, 9, 5]) -> 1
([-1, -7, -4, -9, -5]) -> -9
([0, 0, 0, 0, 0]) -> 0
        }
    }
}

problem Generated/644 {
code {
        func get_top_k_numbers(numbers: list<int>, k: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [1, 2, 3]
([7, 3, 5, 9, 6], 2) -> [3, 5]
([1, 7, 4, 9, 5], 5) -> [1, 4, 5, 7, 9]
([1, 7, 4, 9, 5], 0) -> []
([], 5) -> []
        }
    }
}

problem Generated/645 {
code {
        func get_min_index(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 0
([7, 3, 5, 9, 6]) -> 1
([1, 7, 4, 9, 5]) -> 0
([1, 7, 4, 1, 5]) -> 0
([1, 1, 1, 1, 1]) -> 0
        }
    }
}

problem Generated/646 {
code {
        func find_second_smallest_element(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 2
([7, 3, 5, 9, 6]) -> 5
([1, 1, 1, 1, 1]) -> -1
([1, 7, 4, 9, 5]) -> 4
([1, 2, 3, 4, 5, 6, 7, 8]) -> 2
        }
    }
}

problem Generated/647 {
code {
        func get_min_index(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 0
([7, 3, 5, 9, 6]) -> 1
([1, 7, 4, 9, 5]) -> 0
([1, 7, -4, 9, 5]) -> 2
([1, 2, 3, 4, 5, 6, 7, 8]) -> 0
        }
    }
}

problem Generated/648 {
code {
        func get_index_of_min(elements: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> 3
([1.0, 2.0, 3.0, 4.0, 5.0]) -> 0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 4
([0.0, -2.0, 3.0, -4.0, 5.0]) -> 3
([3.0]) -> 0
        }
    }
}

problem Generated/649 {
code {
        func index_of_min_element(numbers: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> 3
([1.0, 2.0, 3.0, 4.0, 5.0]) -> 0
([1.0, 2.0, 3.0, -4.0, -5.0]) -> 4
([5.0, 4.0, 3.0, 2.0, 1.0]) -> 4
([0.0, 0.0, 0.0, 0.0, 0.0]) -> 0
        }
    }
}

problem Generated/650 {
code {
        func find_min_indexes(elements: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [0]
([1.0, 2.0, 3.0, 0.0, 5.0]) -> [3]
([1.0, 2.0, 3.0, 1.0, 5.0, 1.0]) -> [0, 3, 5]
([1.0, -2.0, 3.0, -4.0, 5.0]) -> [3]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [4]
        }
    }
}

problem Generated/651 {
code {
        func get_lowest_indexes(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [0]
([2.0, 9.0, 1.0, 9.0, 2.0]) -> [2]
([1.0, 1.0, 3.0, 4.0, 5.0]) -> [0, 1]
([1.0, -1.0, -1.0, -1.0, 5.0]) -> [1, 2, 3]
([1.0, 1.0, 1.0, 1.0, 1.0]) -> [0, 1, 2, 3, 4]
        }
    }
}

problem Generated/652 {
code {
        func min_index(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 0, 5]) -> 4
([7, 3, 5, 9, 6]) -> 1
([1, 7, 4, 9, 5]) -> 0
([-1, -4, -1, -9, -5]) -> 3
([1, 2, 3, 4, 5, 6, 7, 8]) -> 0
        }
    }
}

problem Generated/653 {
code {
        func find_index_of_min(numbers: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 0
([5.0, 4.0, 3.0, 2.0, 1.0]) -> 4
([1.0, 2.0, 3.0, 1.0]) -> 0
([1.1, 1.2, 1.3, 1.1]) -> 0
([2.2, 1.4, 3.6, 1.4, 4.4]) -> 1
        }
    }
}

problem Generated/654 {
code {
        func reverse_sort_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [9, 7, 6, 5, 3]
([]) -> []
([1]) -> [1]
([4, -3, 7, 2, -8]) -> [7, 4, 2, -3, -8]
        }
    }
}

problem Generated/655 {
code {
        func reverse_sort_and_select_min(elements: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 1.0
([5.0, 4.0, 3.0, 2.0, 1.0]) -> 1.0
([1.0, -2.0, 3.0, -4.0, 5.0]) -> -4.0
([0.0, 0.0, 0.0, 0.0]) -> 0.0
([1.11, 1.12, 1.13, 1.14]) -> 1.11
        }
    }
}

problem Generated/656 {
code {
        func reverse_sorted_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [9, 7, 6, 5, 3]
([1, 7, 4, 9, 5]) -> [9, 7, 5, 4, 1]
([]) -> []
([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) -> [4, 4, 4, 4, 3, 3, 3, 2, 2, 1]
        }
    }
}

problem Generated/657 {
code {
        func get_first_k_items(elements: list<int>, k: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [1, 2, 3]
([7, 3, 5, 9, 6], 2) -> [3, 5]
([1, 7, 4, 9, 5], 5) -> [1, 4, 5, 7, 9]
([1, 7, 4, 9, 5], 0) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> [1, 2, 3, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/658 {
code {
        func get_smallest_numbers(numbers: list<int>, count: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [1, 2, 3]
([7, 3, 5, 9, 6], 5) -> [3, 5, 6, 7, 9]
([1, 2, 3, 4, 5], 0) -> []
([1, 7, 4, 9, 5], 2) -> [1, 4]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [1, 2, 3, 4]
        }
    }
}

problem Generated/659 {
code {
        func sort_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 1, 4, 2, 5]) -> [1, 2, 3, 4, 5]
([7, 3, 5, 9, 6]) -> [3, 5, 6, 7, 9]
([1, 7, 4, 9, 5]) -> [1, 4, 5, 7, 9]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
        }
    }
}

problem Generated/660 {
code {
        func keep_n_smallest_elements(elements: list<int>, n: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [1, 2, 3]
([7, 3, 5, 9, 6], 4) -> [3, 5, 6, 7]
([], 3) -> []
([1, 7, 4, 9, 5], 5) -> [1, 4, 5, 7, 9]
([1, 2, 3, 4, 5, 6, 7, 8], 0) -> []
        }
    }
}

problem Generated/661 {
code {
        func get_min_unique(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 3, 4, 4, 5, 5]) -> 1
([3, 5, 1, 2, 4, 6, 7]) -> 1
([1, 1, 1, 1, 1, 1]) -> 1
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 1
([4, -1, 3, 5, 9, -6, 4, 4]) -> -6
        }
    }
}

problem Generated/662 {
code {
        func find_smallest_num_not_in_list(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 6
([7, 3, 5, 9, 6]) -> 1
([1, 2, 3, 4, 5, 6, 7, 8]) -> 9
([1, 3, 4, 5, 7, 8]) -> 2
([2, 2, 2, 2, 2, 2, 2, 2]) -> 1
        }
    }
}

problem Generated/663 {
code {
        func smallest_n_unique_elements(elements: list<int>, n: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [1, 2, 3]
([1, 7, 4, 9, 5], 5) -> [1, 4, 5, 7, 9]
([1, 2, 3, 4, 5], 10) -> [1, 2, 3, 4, 5]
([1, 1, 2, 2, 3, 3, 4, 4], 3) -> [1, 2, 3]
([-3, -2, -1, 0, 1, 2, 3], 4) -> [-3, -2, -1, 0]
        }
    }
}

problem Generated/664 {
code {
        func min_floor(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.5, 2.7, 3.2, 4.8, 5.9]) -> 1.0
([1.0, 2.0, 3.0, 4.0, 5.0]) -> 1.0
([-1.5, -2.7, -3.2, -4.8, -5.9]) -> -6.0
([0.5, 1.5, 2.5, 3.5, 4.5]) -> 0.0
([2.8, 3.9, 4.0, 5.1, 6.2]) -> 2.0
        }
    }
}

problem Generated/665 {
code {
        func find_min_sqrt(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 1
([100, 200, 300, 400]) -> 10
([63, 89, 126, 173, 245]) -> 7
([2, 3, 5, 7, 11, 13, 17, 19]) -> 1
([21, 29, 35, 49, 55, 77, 85, 91]) -> 4
        }
    }
}

problem Generated/666 {
code {
        func find_min_floor(numbers: list<double>) -> int
    }
    tests {
        template nse {
            ([1.2, 2.3, 3.4, 4.5, 5.6]) -> 1
([1.1, 2.9, 3.8, 4.2, 5.6]) -> 1
([-1.2, -2.3, -3.4, -4.5, -5.6]) -> -6
([3.14, 2.71, 1.41, 1.61, 1.73]) -> 1
([-2.5, 2.5, 3.6, -3.6, 4.0, -4.0]) -> -4
        }
    }
}

problem Generated/667 {
code {
        func min_floor(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.5, 2.7, 3.1, 4.9, 5.2]) -> 1.0
([0.1, 0.8, 0.9, 1.5, 1.9]) -> 0.0
([10.1, 8.7, 6.5, 4.3, 2.1]) -> 2.0
([-1.5, -2.7, -3.1, -4.9, -5.2]) -> -6.0
([0.0, 1.0, 2.0, 3.0, 4.0]) -> 0.0
        }
    }
}

problem Generated/668 {
code {
        func get_min_num_of_boxes(num_of_items: int, items_per_box: int) -> int
    }
    tests {
        template nse {
            (10, 2) -> 5
(15, 3) -> 5
(25, 4) -> 7
(9, 3) -> 3
(3, 10) -> 1
        }
    }
}

problem Generated/669 {
code {
        func get_ceil_min(numbers: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 1
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> -5
([0.5, 1.2, 3.4, 2.8, 0.0]) -> 0
([1.5, 2.4, 3.8, 4.1, 5.9]) -> 2
([1.2, 1.8, 2.5, 2.6, 3.1]) -> 2
        }
    }
}

problem Generated/670 {
code {
        func min_sqrt(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 1.0
([0.0, 1.0, 4.0, 9.0, 16.0]) -> 0.0
([16.0, 25.0, 36.0, 49.0, 64.0]) -> 4.0
([0.0, 1.0, 2.0, 3.0]) -> 0.0
([9.0, 16.0, 25.0, 36.0, 49.0]) -> 3.0
        }
    }
}

problem Generated/671 {
code {
        func get_min_power(numbers: list<double>, power: int) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 1) -> 1.0
([1.0, 2.0, 3.0, 4.0, 5.0], 2) -> 1.0
([1.0, 2.0, 3.0, 4.0, 5.0], 3) -> 1.0
([1.0, 2.0, 3.0, 4.0, 5.0], 0) -> 1.0
([1.0, 2.0, 3.0, 4.0, 5.0], -1) -> 0.2
        }
    }
}

problem Generated/672 {
code {
        func calculate_power_of_min(numbers: list<double>, power: int) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2) -> 1
([3.0, 2.0, 7.0, 1.0, 9.0], 3) -> 1
([3.0, 2.0, 7.0, 1.0, 9.0], 2) -> 1
([], 2) -> -1
([1.0, 2.0, 3.0, 4.0, 5.0], 1) -> 1
        }
    }
}

problem Generated/673 {
code {
        func find_closest_to_power(numbers: list<int>, power: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> 1
([1, 2, 3, 4, 5], 3) -> 1
([-1, -2, -3, -4, -5], 2) -> -1
([-1, -2, -3, -4, -5], 3) -> -1
([0, 1, 2, 3, 4, 5], 2) -> 0
        }
    }
}

problem Generated/674 {
code {
        func multiply_list(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 120.0
([1.0, -2.0, 3.0, -4.0, 5.0]) -> 120.0
([7.0, 3.0, 5.0, 9.0, 6.0]) -> 5670.0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> -120.0
([0.0, 2.0, -3.0, 4.0, 5.0]) -> 0.0
        }
    }
}

problem Generated/675 {
code {
        func find_shortest_word(sentence: string) -> int
    }
    tests {
        template nse {
            ("Hello world") -> 5
("This is a test sentence") -> 1
("To be or not to be, that is the question") -> 2
("") -> 0
("Hello") -> 5
        }
    }
}

problem Generated/676 {
code {
        func min_word_length(sentence: string) -> int
    }
    tests {
        template nse {
            ("This is a test") -> 1
("Hello world") -> 5
("Hello\nworld") -> 5
("        ") -> 0
("") -> 0
        }
    }
}

problem Generated/677 {
code {
        func smallest_word_length(sentence: string) -> int
    }
    tests {
        template nse {
            ("This is a test sentence") -> 1
("Hello world") -> 5
("Python has a lot of built-in functions") -> 1
("This is a test sentence with a very long word") -> 1
("Short words") -> 5
        }
    }
}

problem Generated/678 {
code {
        func generate_fizz_buzz_list(n: int) -> list<string>
    }
    tests {
        template nse {
            (15) -> ["1", "2", "Fizz", "4", "Buzz", "Fizz", "7", "8", "Fizz", "Buzz", "11", "Fizz", "13", "14", "FizzBuzz"]
(1) -> ["1"]
(5) -> ["1", "2", "Fizz", "4", "Buzz"]
(20) -> ["1", "2", "Fizz", "4", "Buzz", "Fizz", "7", "8", "Fizz", "Buzz", "11", "Fizz", "13", "14", "FizzBuzz", "16", "17", "Fizz", "19", "Buzz"]
(30) -> ["1", "2", "Fizz", "4", "Buzz", "Fizz", "7", "8", "Fizz", "Buzz", "11", "Fizz", "13", "14", "FizzBuzz", "16", "17", "Fizz", "19", "Buzz", "Fizz", "22", "23", "Fizz", "Buzz", "26", "Fizz", "28", "29", "FizzBuzz"]
        }
    }
}

problem Generated/679 {
code {
        func multiply_lists(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [4, 10, 18]
([0, 7, 9, 3], [9, 5, 6, 4]) -> [0, 35, 54, 12]
([1, 2, 3, 4], [0, 0, 0, 0]) -> [0, 0, 0, 0]
([1, 2], [10, 20, 30]) -> [10, 40]
([1, 0, -3], [0, -2, 4]) -> [0, 0, -12]
        }
    }
}

problem Generated/680 {
code {
        func zip_and_square(lst1: list<int>, lst2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [17, 29, 45]
([0, 0, 0], [1, 2, 3]) -> [1, 4, 9]
([-1, -2, -3], [4, 5, 6]) -> [17, 29, 45]
([1, 3, 5, 7], [2, 4, 6]) -> [5, 25, 61]
([1, 2, 3], [4, 5]) -> [17, 29]
        }
    }
}

problem Generated/681 {
code {
        func multiply_lists(a: list<int>, b: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [4, 10, 18]
([0, 0, 0], [1, 2, 3]) -> [0, 0, 0]
([1, 2, 3, 4], [1, 2, 3]) -> [1, 4, 9]
([1, 2, 3], [0, 0, 0]) -> [0, 0, 0]
([1], [2]) -> [2]
        }
    }
}

problem Generated/682 {
code {
        func multiply_lists(list_one: list<int>, list_two: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [4, 10, 18]
([0, 0, 0], [4, 5, 6]) -> [0, 0, 0]
([1, 2, 3], [0, 0, 0]) -> [0, 0, 0]
([1, 2, 3, 4], [4, 3, 2]) -> [4, 6, 6]
([1, 2, 3], [4, 5, 6, 7]) -> [4, 10, 18]
        }
    }
}

problem Generated/683 {
code {
        func generate_sum_of_two_lists(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [5, 7, 9]
([10, 20, 30], [40, 50, 60]) -> [50, 70, 90]
([1, 2, 3, 4], [10, 20, 30]) -> [11, 22, 33]
([], []) -> []
([5], [5]) -> [10]
        }
    }
}

problem Generated/684 {
code {
        func zip_and_concatenate_lists(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [1, 4, 2, 5, 3, 6]
([1, 2, 3, 4], [5, 6, 7]) -> [1, 5, 2, 6, 3, 7, 4]
([1, 2], [5, 6, 7]) -> [1, 5, 2, 6, 7]
([1, 2, 3], []) -> [1, 2, 3]
([], [4, 5, 6]) -> [4, 5, 6]
        }
    }
}

problem Generated/685 {
code {
        func transpose_matrix(matrix: list<list<int>>) -> list<list<int>>
    }
    tests {
        template nse {
            ([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]
([[1, 4], [2, 5], [3, 6]]) -> [[1, 2, 3], [4, 5, 6]]
([[1]]) -> [[1]]
([[1, 2], [3, 4], [5, 6], [7, 8]]) -> [[1, 3, 5, 7], [2, 4, 6, 8]]
        }
    }
}

problem Generated/686 {
code {
        func merge_two_lists(first_lst: list<int>, second_lst: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [5, 7, 9]
([1, 2, 3], []) -> []
([], [4, 5, 6]) -> []
([1, 2, 3, 4], [5, 6]) -> [6, 8]
([1, 2], [4, 5, 6]) -> [5, 7]
        }
    }
}

problem Generated/687 {
code {
        func pairwise_addition_of_lists(l1: list<int>, l2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [5, 7, 9]
([7, 8, 9], [4, 3, 2, 1]) -> [11, 11, 11]
([1, 2, 3, 4, 5], [4, 5, 6]) -> [5, 7, 9]
([1, 2, 3], [4, 5, 6, 7, 8]) -> [5, 7, 9]
([], []) -> []
([1], []) -> []
        }
    }
}

problem Generated/688 {
code {
        func combine_lists(list_a: list<int>, list_b: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4], [5, 6, 7, 8]) -> [6, 8, 10, 12]
([1, 2, 3], [4, 5, 6, 7, 8]) -> [5, 7, 9]
([1, 2, 3, 4, 5], []) -> []
([], [1, 2, 3, 4, 5]) -> []
([1, 2, 3], [1, 2, 3]) -> [2, 4, 6]
        }
    }
}

problem Generated/689 {
code {
        func zip_and_abs(list1: list<double>, list2: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0], [3.0, 2.0, 1.0]) -> [2.0, 0.0, 2.0]
([-1.0, 2.0, -3.0], [3.0, -2.0, 1.0]) -> [4.0, 4.0, 4.0]
([0.0, 0.0, 0.0], [0.0, 0.0, 0.0]) -> [0.0, 0.0, 0.0]
([1.0, 2.0, 3.0, 4.0], [4.0, 3.0, 2.0, 1.0]) -> [3.0, 1.0, 1.0, 3.0]
([-1.0, -2.0, -3.0], [-3.0, -2.0, -1.0]) -> [2.0, 0.0, 2.0]
        }
    }
}

problem Generated/690 {
code {
        func zip_two_lists_and_get_abs_diff(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [1, 2, 3]) -> [0, 0, 0]
([1, 4, 3], [10, 2, 5]) -> [9, 2, 2]
([1, -4, 7], [-2, 5, 3]) -> [3, 9, 4]
([3, 8, 1, 5], [2, 6, -1, 3]) -> [1, 2, 2, 2]
([1, 2, 3], [4, 5, 6]) -> [3, 3, 3]
        }
    }
}

problem Generated/691 {
code {
        func zip_and_absolute(v1: list<double>, v2: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], [2.0, 4.0, 6.0, 8.0, 10.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([5.0, 4.0, 3.0, 2.0, 1.0], [1.0, 2.0, 3.0, 4.0, 5.0]) -> [4.0, 2.0, 0.0, 2.0, 4.0]
([1.0, 2.0], [3.0, 4.0, 5.0]) -> [2.0, 2.0]
([0.0, 0.0], [0.0, 0.0]) -> [0.0, 0.0]
([], []) -> []
        }
    }
}

problem Generated/692 {
code {
        func zip_lists_and_calc_abs_diff(list1: list<double>, list2: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0], [1.0, 2.0, 3.0]) -> [0.0, 0.0, 0.0]
([1.0, 2.0, 3.0], [4.0, 5.0, 6.0]) -> [3.0, 3.0, 3.0]
([-4.0, 6.0, -3.0], [2.0, 9.0, 7.0]) -> [6.0, 3.0, 10.0]
([5.0, 4.0, 3.0], [1.0, 2.0]) -> [4.0, 2.0]
([1.0], [1.0]) -> [0.0]
        }
    }
}

problem Generated/693 {
code {
        func zip_two_lists_and_abs_diff(list1: list<double>, list2: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.5, 4.8], [0.5, 1.5, 3.5, 5.8]) -> [0.5, 0.5, 0.0, 1.0]
([10.0, 20.0, 30.0], [5.0, 15.0, 25.0]) -> [5.0, 5.0, 5.0]
([1.0, 2.0, 3.0], [2.0, 3.0, 4.0]) -> [1.0, 1.0, 1.0]
([1.5, 2.5, 3.5], [1.5, 2.5, 3.5]) -> [0.0, 0.0, 0.0]
([], []) -> []
        }
    }
}

problem Generated/694 {
code {
        func sum_of_multiply(list1: list<int>, list2: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> 32
([0, 0, 0], [4, 5, 6]) -> 0
([1, 2, 3], [-4, -5, -6]) -> -32
([1, 2, 3], [0, 0, 0]) -> 0
([1, 2, 3], [1, 2]) -> 5
        }
    }
}

problem Generated/695 {
code {
        func zip_and_sum(arr1: list<int>, arr2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [5, 7, 9]
([1, 1, 1], [1, 1, 1]) -> [2, 2, 2]
([10, 20, 30], [-5, -15, -25]) -> [5, 5, 5]
([1, 2, 3, 4, 5], [1, -1, 1, -1, 1]) -> [2, 1, 4, 3, 6]
([1], [1]) -> [2]
        }
    }
}

problem Generated/696 {
code {
        func sum_of_corresponding_values(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [5, 7, 9]
([0, 0, 0], [4, 5, 6]) -> [4, 5, 6]
([1, 2, 3], [-1, -2, -3]) -> [0, 0, 0]
([1, 2], [4, 5, 6]) -> [5, 7]
([], []) -> []
([10, 20, 30], [40, 50]) -> [50, 70]
        }
    }
}

problem Generated/697 {
code {
        func sum_of_products(list1: list<int>, list2: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> 32
([0, 1, 2], [-1, -1, -1]) -> -3
([1, 2, 3], [0, 0, 0]) -> 0
([1], [1]) -> 1
([1, 2, 3], [4]) -> 4
        }
    }
}

problem Generated/698 {
code {
        func get_max_value_by_index(nums1: list<int>, nums2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [4, 5, 6]
([10, 20, 30], [40, 50, 60]) -> [40, 50, 60]
([1, 2, 3], [4, 5, 2]) -> [4, 5, 3]
([5, 8, 3], [2, 6, 10]) -> [5, 8, 10]
([100, 200, 300], [200, 200, 50]) -> [200, 200, 300]
        }
    }
}

problem Generated/699 {
code {
        func find_max_value_in_lists(list1: list<int>, list2: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> 18
([1, 2, 3, 4], [4, 5, 6, 7]) -> 28
([-1, -2, -3], [4, 5, 6]) -> -4
([1, 2, 3], [-4, -5, -6]) -> -4
([1, 2, 3, 4], [0, 0, 0, 0]) -> 0
        }
    }
}

problem Generated/700 {
code {
        func get_max_grade(english_grades: list<int>, math_grades: list<int>, science_grades: list<int>) -> int
    }
    tests {
        template nse {
            ([85, 90, 92, 78, 89], [95, 87, 80, 92, 81], [89, 92, 91, 87, 90]) -> 95
([92, 78, 89, 85, 90], [80, 92, 81, 95, 87], [91, 87, 90, 89, 92]) -> 95
([70, 75, 80, 85, 90], [75, 80, 85, 90, 95], [80, 85, 90, 95, 100]) -> 100
([90, 88, 86, 84, 82], [85, 83, 81, 79, 77], [80, 82, 84, 86, 88]) -> 90
([75, 76, 77, 78, 79], [80, 81, 82, 83, 84], [85, 86, 87, 88, 89]) -> 89
        }
    }
}

problem Generated/701 {
code {
        func find_min_value(matrix: list<list<int>>) -> list<int>
    }
    tests {
        template nse {
            ([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> [1, 2, 3]
([[1, 5, 2], [4, 2, 6], [7, 8, 1]]) -> [1, 2, 1]
([[1, 2, 3], [4, 2, 1], [7, 6, 5]]) -> [1, 2, 1]
([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) -> [3, 2, 1]
([[1, 2], [3, 4], [5, 6], [7, 8]]) -> [1, 2]
        }
    }
}

problem Generated/702 {
code {
        func find_least_common_multiple(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([2, 3, 4, 5]) -> 60
([2, 4, 6, 8]) -> 24
([3, 5, 7, 9]) -> 315
([1, 2, 3, 4, 5]) -> 60
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 2520
        }
    }
}

problem Generated/703 {
code {
        func get_min_scores(scores: list<list<int>>) -> list<int>
    }
    tests {
        template nse {
            ([[50, 70, 80], [60, 80, 90], [70, 90, 100]]) -> [50, 70, 80]
([[2, 4, 6, 8], [1, 5, 3, 9], [7, 6, 8, 4]]) -> [1, 4, 3, 4]
([[90, 80], [85, 95], [75, 90], [80, 85]]) -> [75, 80]
([[23, 45, 67], [34, 56, 78]]) -> [23, 45, 67]
([[1, 2], [3, 4], [5, 6]]) -> [1, 2]
        }
    }
}

problem Generated/704 {
code {
        func combine_lists(list1: list<int>, list2: list<string>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6], ["apple", "banana", "cherry", "date", "elderberry", "fig"]) -> ["banana", "date", "fig"]
([2, 3, 4, 5], ["apple", "banana", "cherry", "date"]) -> ["apple", "cherry"]
([1, 3, 5], ["apple", "banana", "cherry"]) -> []
([2, 4, 6], []) -> []
([], ["apple", "banana", "cherry"]) -> []
        }
    }
}

problem Generated/705 {
code {
        func filter_names(names: list<string>, ages: list<double>) -> list<string>
    }
    tests {
        template nse {
            (["Alice", "Bob", "Charlie"], [25.0, 16.0, 35.0]) -> ["Alice", "Charlie"]
(["Mary", "John", "Sue"], [18.0, 25.0, 30.0]) -> ["John", "Sue"]
(["Neha", "Amit", "Rahul"], [15.0, 20.0, 22.0]) -> ["Amit", "Rahul"]
(["A", "B", "C"], [100.0, 200.0, 300.0]) -> ["A", "B", "C"]
(["Lisa", "Tom", "Jenny"], [20.0, 17.0, 25.0]) -> ["Lisa", "Jenny"]
        }
    }
}

problem Generated/706 {
code {
        func string_from_ascii(numbers: list<int>) -> string
    }
    tests {
        template nse {
            ([65, 66, 67, 68, 69]) -> "ABCDE"
([119, 111, 114, 108, 100]) -> "world"
([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]) -> "Hello World"
([110, 111, 116, 104, 105, 110, 103]) -> "nothing"
([84, 101, 115, 116]) -> "Test"
        }
    }
}

problem Generated/707 {
code {
        func string_from_ascii(ascii_lst: list<int>) -> string
    }
    tests {
        template nse {
            ([65, 66, 67]) -> "ABC"
([97, 98, 99, 100, 101]) -> "abcde"
([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]) -> "Hello World"
([33, 36, 94, 42, 51]) -> "!$^*3"
([49, 50, 51, 52]) -> "1234"
        }
    }
}

problem Generated/708 {
code {
        func is_same_shape(matrix: list<list<int>>) -> bool
    }
    tests {
        template nse {
            ([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> true
([[1, 2, 3], [4, 5], [7, 8, 9]]) -> false
([[1, 2], [4, 5, 6], [7, 8, 9]]) -> false
([[], [], []]) -> true
([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) -> true
        }
    }
}

problem Generated/709 {
code {
        func check_all_lists_equal(lists: list<list<int>>) -> bool
    }
    tests {
        template nse {
            ([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) -> true
([[1, 2], [3, 4], [5, 6]]) -> false
([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) -> false
([[1], [1], [1]]) -> true
([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> false
        }
    }
}

problem Generated/710 {
code {
        func check_common_prefix(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["flower", "flow", "flight"]) -> true
(["dog", "racecar", "car"]) -> false
([]) -> false
(["ab", "a"]) -> true
(["abcde", "abcd", "abc"]) -> true
        }
    }
}

problem Generated/711 {
code {
        func all_elements_are_equal(list1: list<int>, list2: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3], [1, 2, 3]) -> true
([1, 2, 3], [1, 2, 4]) -> false
([1, 2, 3], [1, 2]) -> true
([1, 2], [1, 2, 3]) -> true
([], []) -> true
        }
    }
}

problem Generated/712 {
code {
        func binary_zip(nums1: list<int>, nums2: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> ["101", "111", "111"]
([10, 20, 30], [4, 5, 6]) -> ["1110", "10101", "11110"]
([1, 1, 1], [1, 1, 1]) -> ["1", "1", "1"]
([0, 0, 0], [1, 1, 1]) -> ["1", "1", "1"]
([1, 2, 3, 4], [1, 2, 3]) -> ["1", "10", "11"]
        }
    }
}

problem Generated/713 {
code {
        func zip_and_convert_to_binary(nums1: list<int>, nums2: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4], [5, 6, 7, 8]) -> ["101", "110", "111", "1100"]
([0, 0, 0, 0], [1, 2, 4, 8]) -> ["1", "10", "100", "1000"]
([1, 3, 5, 7], [2, 3, 6, 7]) -> ["11", "11", "111", "111"]
([1, 3, 5, 7], [0, 0, 0, 0]) -> ["1", "11", "101", "111"]
([1, 2, 3, 4], [1, 2, 3, 4]) -> ["1", "10", "11", "100"]
        }
    }
}

problem Generated/714 {
code {
        func zip_and_convert_to_binary(numbers1: list<int>, numbers2: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> ["0b101", "0b111", "0b111"]
([5, 10, 15], [6, 9, 12]) -> ["0b111", "0b1011", "0b1111"]
([0, 0, 0], [0, 0, 0]) -> ["0b0", "0b0", "0b0"]
([255, 255, 255], [0, 0, 0]) -> ["0b11111111", "0b11111111", "0b11111111"]
([0, 0, 0], [255, 255, 255]) -> ["0b11111111", "0b11111111", "0b11111111"]
        }
    }
}

problem Generated/715 {
code {
        func get_names_from_email(emails: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["abc@gmail.com", "def@yahoo.com", "ghi@hotmail.com"]) -> ["abc", "def", "ghi"]
(["abc.def@gmail.com", "def@yahoo.com", "ghi.jkl@hotmail.com"]) -> ["abc.def", "def", "ghi.jkl"]
([]) -> []
(["a@b.c"]) -> ["a"]
(["a.b@c.d"]) -> ["a.b"]
        }
    }
}

problem Generated/716 {
code {
        func get_first_names(full_names: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["John Doe", "Jane Smith", "Bob Johnson"]) -> ["John", "Jane", "Bob"]
(["Alice", "Bob", "Charlie"]) -> ["Alice", "Bob", "Charlie"]
(["Ravi Kumar", "Sara Khan", "Mukesh Patel"]) -> ["Ravi", "Sara", "Mukesh"]
([]) -> []
(["SingleName"]) -> ["SingleName"]
        }
    }
}

problem Generated/717 {
code {
        func merge_lists(list1: list<string>, list2: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "orange"], ["red", "yellow", "orange"], "-") -> "apple-red-banana-yellow-orange-orange"
(["apple", "banana"], ["red", "yellow", "orange"], "-") -> "apple-red-banana-yellow"
(["apple", "banana", "orange"], ["red", "yellow"], "-") -> "apple-red-banana-yellow"
([], ["red", "yellow", "orange"], "-") -> ""
(["apple", "banana", "orange"], [], "-") -> ""
        }
    }
}

problem Generated/718 {
code {
        func merge_two_lists(list1: list<string>, list2: list<string>, delimiter: string) -> list<string>
    }
    tests {
        template nse {
            (["a", "b", "c", "d"], ["1", "2", "3", "4"], "") -> ["a1", "b2", "c3", "d4"]
(["a", "b", "c"], ["1", "2", "3", "4"], "-") -> ["a-1", "b-2", "c-3"]
(["hello", "world", "this", "is", "openai"], ["world", "is", "openai", "hello", "this"], " ") -> ["hello world", "world is", "this openai", "is hello", "openai this"]
([], [], ", ") -> []
(["a", "b", "c"], ["1", "2", "3"], " ") -> ["a 1", "b 2", "c 3"]
        }
    }
}

problem Generated/719 {
code {
        func join_lists_by_index(list1: list<string>, list2: list<string>) -> string
    }
    tests {
        template nse {
            (["apple", "orange", "banana"], ["red", "orange", "yellow"]) -> "apple-red,orange-orange,banana-yellow"
(["dog", "cat", "hamster", "parrot", "fish"], ["brown", "black", "grey"]) -> "dog-brown,cat-black,hamster-grey"
(["hello"], ["world"]) -> "hello-world"
([], []) -> ""
(["a", "b", "c"], []) -> ""
        }
    }
}

problem Generated/720 {
code {
        func zip_lists_to_string(list1: list<string>, list2: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python"], ["yes", "no", "maybe"]) -> "hello_yes-world_no-python_maybe"
(["red", "green", "blue"], ["apple", "banana", "orange"]) -> "red_apple-green_banana-blue_orange"
(["1", "2", "3"], ["4", "5", "6"]) -> "1_4-2_5-3_6"
([], []) -> ""
(["hello"], ["world"]) -> "hello_world"
        }
    }
}

problem Generated/721 {
code {
        func merge_lists_with_joiner(list1: list<string>, list2: list<string>, joiner: string) -> list<string>
    }
    tests {
        template nse {
            (["a", "b", "c"], ["1", "2", "3"], "-") -> ["a-1", "b-2", "c-3"]
(["apple", "banana", "cherry"], ["red", "yellow", "red"], " of color ") -> ["apple of color red", "banana of color yellow", "cherry of color red"]
([], [], "-") -> []
(["a", "b", "c"], ["1", "2"], "-") -> ["a-1", "b-2"]
(["a"], ["1", "2", "3"], "-") -> ["a-1"]
        }
    }
}

problem Generated/722 {
code {
        func zip_two_lists_and_convert_to_lower(list1: list<string>, list2: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World", "Python"], ["Programming", "is", "Fun"]) -> ["helloprogramming", "worldis", "pythonfun"]
(["Hi", "there", "How", "are", "you"], ["", "", "", "", ""]) -> ["hi", "there", "how", "are", "you"]
(["One", "Two", "Three"], ["", " ", "  "]) -> ["one", "two ", "three  "]
([], []) -> []
(["The", "quick", "brown", "fox"], ["jumps", "over", "the", "lazy", "dog"]) -> ["thejumps", "quickover", "brownthe", "foxlazy"]
        }
    }
}

problem Generated/723 {
code {
        func combine_lower_strings(strs1: list<string>, strs2: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "WORLD", "Python"], ["is", "AWESOME", "rocks"]) -> ["hellois", "worldawesome", "pythonrocks"]
(["GOOD", "Morning", "FrIeNdS"], ["afternoon", "EVENING", "night"]) -> ["goodafternoon", "morningevening", "friendsnight"]
([], []) -> []
(["x"], ["y"]) -> ["xy"]
(["abc", "def", "ghi"], ["123", "456"]) -> ["abc123", "def456"]
        }
    }
}

problem Generated/724 {
code {
        func zip_upper_strings(strings1: list<string>, strings2: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world"], ["python", "programming"]) -> ["HELLO PYTHON", "WORLD PROGRAMMING"]
(["apple", "orange", "banana"], ["pear", "grape", "kiwi"]) -> ["APPLE PEAR", "ORANGE GRAPE", "BANANA KIWI"]
([], []) -> []
(["a", "b", "c"], []) -> []
([], ["1", "2", "3"]) -> []
        }
    }
}

problem Generated/725 {
code {
        func uppercase_zip(words1: list<string>, words2: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world"], ["python", "programming"]) -> ["HELLO-PYTHON", "WORLD-PROGRAMMING"]
(["apple", "orange", "grape"], ["pie", "juice", "jelly"]) -> ["APPLE-PIE", "ORANGE-JUICE", "GRAPE-JELLY"]
([], ["empty", "list"]) -> []
(["test"], ["OnlyOneWord"]) -> ["TEST-ONLYONEWORD"]
(["one", "two", "three"], []) -> []
        }
    }
}

problem Generated/726 {
code {
        func zip_and_upper_case(letters: string, numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            ("hello", [1, 2, 3, 4, 5]) -> ["h1", "e2", "l3", "l4", "o5"]
("python", [4, 3, 2, 1, 5, 6]) -> ["p4", "y3", "t2", "h1", "o5", "n6"]
("", [1, 2, 3]) -> []
("abc", []) -> []
("", []) -> []
        }
    }
}

problem Generated/727 {
code {
        func zip_and_uppercase(strs: list<string>, numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"], [1, 2, 3]) -> ["HELLO1", "WORLD2", "PYTHON3"]
(["this", "is", "a", "test"], [0, 0, 0, 0]) -> ["THIS0", "IS0", "A0", "TEST0"]
(["_test_", "_test_"], [1, 2]) -> ["_TEST_1", "_TEST_2"]
([], []) -> []
(["test"], [1, 2, 3]) -> ["TEST1"]
        }
    }
}

problem Generated/728 {
code {
        func uppercase_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "BANANA", "Cherry", "DATE"]) -> ["APPLE", "BANANA", "CHERRY", "DATE"]
(["apple", "banana", "cherry", "date"]) -> ["APPLE", "BANANA", "CHERRY", "DATE"]
(["APPLE", "BANANA", "CHERRY", "DATE"]) -> ["APPLE", "BANANA", "CHERRY", "DATE"]
([]) -> []
(["123", "abc", "def", "XYZ"]) -> ["123", "ABC", "DEF", "XYZ"]
        }
    }
}

problem Generated/729 {
code {
        func zip_and_filter_strings(strings1: list<string>, strings2: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "today", "is", "sunny"], ["", "1", "a", "B", " "]) -> ["today", "is"]
(["apple", "banana", "carrot"], ["", "1", "2"]) -> []
(["python", "java", "ruby"], ["is", "1", "a"]) -> ["python", "ruby"]
([], ["is", "1", "a"]) -> []
([], []) -> []
        }
    }
}

problem Generated/730 {
code {
        func merge_alpha_numeric_strings(alpha_strs: list<string>, numeric_strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["abc", "def", "ghi"], ["123", "456", "789"]) -> ["abc123", "def456", "ghi789"]
(["a1", "b2", "c3"], ["1", "2", "3"]) -> []
(["abc", "", "def"], ["123", "456", "789"]) -> ["abc123", "def789"]
(["abc"], ["123", "456", "789"]) -> ["abc123"]
([], ["123", "456", "789"]) -> []
        }
    }
}

problem Generated/731 {
code {
        func get_digit_count_in_str_list(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["hello", "world", "123"]) -> [0, 0, 3]
(["abc", "123", "def", "456", "ghi"]) -> [0, 3, 0, 3, 0]
(["1", "2", "3", "4", "5"]) -> [1, 1, 1, 1, 1]
(["", " ", "\n", "\t"]) -> [0, 0, 0, 0]
(["123", "456", "789"]) -> [3, 3, 3]
        }
    }
}

problem Generated/732 {
code {
        func filter_digits_in_str(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["123", "abc", "4d5e"]) -> ["123", "", "45"]
(["1a2b3c", "456", "xyz"]) -> ["123", "456", ""]
(["", "a1b2c3", "d4e5f6"]) -> ["", "123", "456"]
(["some", "random", "strings", "here"]) -> ["", "", "", ""]
(["1", "22", "333", "4444"]) -> ["1", "22", "333", "4444"]
        }
    }
}

problem Generated/733 {
code {
        func filter_names_starting_with_prefix(names: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["John", "Jacob", "Jingleheimer", "Schmidt"], "J") -> ["John", "Jacob", "Jingleheimer"]
(["Mary", "Maggie", "Megan", "Molly"], "M") -> ["Mary", "Maggie", "Megan", "Molly"]
(["David", "Daniel", "Donald", "Derek"], "D") -> ["David", "Daniel", "Donald", "Derek"]
(["Amy", "Adam", "Aaron", "Annie"], "A") -> ["Amy", "Adam", "Aaron", "Annie"]
([], "A") -> []
        }
    }
}

problem Generated/734 {
code {
        func filter_words_starting_with_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "pear"], "a") -> ["apple"]
(["apple", "banana", "orange", "pear"], "b") -> ["banana"]
(["apple", "banana", "orange", "pear"], "p") -> ["pear"]
(["apple", "banana", "orange", "pear"], "c") -> []
(["apple", "banana", "orange", "pear"], "o") -> ["orange"]
        }
    }
}

problem Generated/735 {
code {
        func find_matching_prefixes(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "apricot", "avocado", "banana", "blueberry"], "a") -> ["apple", "apricot", "avocado"]
(["apple", "apricot", "avocado", "banana", "blueberry"], "ap") -> ["apple", "apricot"]
(["apple", "apricot", "avocado", "banana", "blueberry"], "ban") -> ["banana"]
([], "a") -> []
(["hello", "world"], "") -> ["hello", "world"]
        }
    }
}

problem Generated/736 {
code {
        func filter_strings_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hey", "hi", "howdy"], "h") -> ["hello", "hey", "hi", "howdy"]
(["hello", "world", "hey", "hi", "howdy"], "w") -> ["world"]
(["hello", "world", "hey", "hi", "howdy"], "x") -> []
([], "h") -> []
(["hi", "hi", "hey", "hello", "hi"], "hi") -> ["hi", "hi", "hi"]
        }
    }
}

problem Generated/737 {
code {
        func get_names_starting_with(names: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["Alice", "Bob", "Charlie", "David", "Eve"], "C") -> ["Charlie"]
(["Alice", "Bob", "Charlie", "David", "Eve"], "B") -> ["Bob"]
(["Alice", "Bob", "Charlie", "David", "Eve"], "D") -> ["David"]
(["Alice", "Bob", "Charlie", "David", "Eve"], "Z") -> []
(["A", "B", "AA", "BB", "AAA", "BBB"], "A") -> ["A", "AA", "AAA"]
        }
    }
}

problem Generated/738 {
code {
        func zip_filter_strings_by_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "avocado", "orange"], "a") -> ["apple", "avocado"]
(["apple", "banana", "avocado", "orange"], "b") -> ["banana"]
([], "a") -> []
(["apple", "banana", "avocado", "orange"], "") -> ["apple", "banana", "avocado", "orange"]
(["apple", "banana", "avocado", "orange"], "o") -> ["orange"]
        }
    }
}

problem Generated/739 {
code {
        func replace_list_values(values: list<string>, old: list<string>, new_dat: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "orange", "banana", "kiwi"], ["orange", "kiwi"], ["mango", "watermelon"]) -> ["apple", "mango", "banana", "watermelon"]
(["hello", "world", "foo", "bar"], ["foo"], ["hi"]) -> ["hello", "world", "hi", "bar"]
(["hello", "world", "foo", "bar"], ["foo", "world"], ["hi", "earth"]) -> ["hello", "earth", "hi", "bar"]
([], [], []) -> []
(["hello", "world"], ["foo"], ["bar"]) -> ["hello", "world"]
        }
    }
}

problem Generated/740 {
code {
        func replace_values_in_list(elements: list<string>, old_values: list<string>, new_value: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "grape"], ["banana", "grape"], "fruit") -> ["apple", "fruit", "orange", "fruit"]
(["apple", "banana", "orange", "grape"], ["mango"], "fruit") -> ["apple", "banana", "orange", "grape"]
([], ["banana", "grape"], "fruit") -> []
(["apple", "banana", "orange", "grape"], [], "fruit") -> ["apple", "banana", "orange", "grape"]
(["apple", "banana", "orange", "grape"], ["banana", "grape", "apple"], "fruit") -> ["fruit", "fruit", "orange", "fruit"]
        }
    }
}

problem Generated/741 {
code {
        func replace_substrings(strs: list<string>, old_subs: string, new_subs: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hello", "world"], "world", "python") -> ["hello", "python", "hello", "python"]
(["hello", "world", "python", "programming"], "o", "0") -> ["hell0", "w0rld", "pyth0n", "pr0gramming"]
(["h", "e", "l", "l", "o"], "e", "a") -> ["h", "a", "l", "l", "o"]
(["hello", "world", "python", "programming"], "o", "") -> ["hell", "wrld", "pythn", "prgramming"]
(["hello", "world", "python", "programming"], "j", "k") -> ["hello", "world", "python", "programming"]
        }
    }
}

problem Generated/742 {
code {
        func replace_in_list(words: list<string>, old_word: string, new_word: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python", "python"], "python", "java") -> ["hello", "world", "java", "java"]
(["hello", "world", "python", "python"], "java", "python") -> ["hello", "world", "python", "python"]
([], "python", "java") -> []
(["hello", "world", "python"], "python", "") -> ["hello", "world", ""]
(["hello", "world", "Python"], "python", "java") -> ["hello", "world", "Python"]
        }
    }
}

problem Generated/743 {
code {
        func merge_lists(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [0, 2, 0, 4, 0]) -> [2, 4]
([7, 3, 5, 9, 6], [0, -2, 0, -4, 0]) -> []
([1, 7, 4, 9, 5], [1, 2, 3, 4, 5]) -> [1, 7, 4, 9, 5]
([1, 7, 4, 9, 5], [-1, -2, -3, -4, -5]) -> []
([1, 2, 3, 4, 5, 6, 7, 8], [1, -1, -1, 1, 0, 0, 1, 1]) -> [1, 4, 7, 8]
        }
    }
}

problem Generated/744 {
code {
        func merge_lists(list1: list<string>, list2: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["a", "b", "c"], ["1", "2", "3"]) -> ["a1", "b2", "c3"]
(["Hello", "World"], ["Python", "Programming"]) -> ["HelloPython", "WorldProgramming"]
([], []) -> []
([], ["Python", "Programming"]) -> []
(["Hello", "World"], []) -> []
        }
    }
}

problem Generated/745 {
code {
        func pairwise_sum(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([], []) -> []
([1, 2, 3], [4, 5, 6]) -> [5, 7, 9]
([-1, -2, -3], [4, 5, 6]) -> [3, 3, 3]
([1, 2, 3], [-4, -5, -6]) -> [-3, -3, -3]
([1, 2, 3, 4], [5, 6, 7]) -> [6, 8, 10]
([1, 2, 3], [4, 5, 6, 7]) -> [5, 7, 9]
        }
    }
}

problem Generated/746 {
code {
        func zip_and_combine_lists(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [5, 7, 9]
([10, 20, 30, 40], [1, 2, 3, 4]) -> [11, 22, 33, 44]
([-5, 10, -15], [7, 8, 9]) -> [2, 18, -6]
([1, 2, 3, 4], [4, 3, 2]) -> [5, 5, 5]
([0, 0, 0], [0, 0, 0]) -> [0, 0, 0]
        }
    }
}

problem Generated/747 {
code {
        func zip_and_concatenate_lists(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [1, 4, 2, 5, 3, 6]
([7, 8, 9], [10, 11, 12]) -> [7, 10, 8, 11, 9, 12]
([1, 1, 1], [2, 2, 2]) -> [1, 2, 1, 2, 1, 2]
([], []) -> []
([1, 2, 3, 4], [5, 6, 7]) -> [1, 5, 2, 6, 3, 7]
        }
    }
}

problem Generated/748 {
code {
        func get_indices_of_common_elements(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) -> [3, 4]
([1, 3, 5, 7, 9], [2, 4, 6, 8, 10]) -> []
([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) -> [0, 1, 2, 3, 4]
([1, 2, 3, 4, 5], [6, 7, 8, 9, 0]) -> []
([], []) -> []
        }
    }
}

problem Generated/749 {
code {
        func find_indexes_of_elements(elements: list<int>, search_elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [2, 4]) -> [1, 3]
([7, 3, 5, 9, 6], [3, 9]) -> [1, 3]
([1, 7, 4, 9, 5], [10, 20, 30]) -> []
([1, 7, 4, 9, 5], [4]) -> [2]
([1, 2, 3, 4, 5, 6, 7, 8], [2, 4, 6]) -> [1, 3, 5]
        }
    }
}

problem Generated/750 {
code {
        func get_indices_of_common_elements(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [4, 3, 6, 7, 8]) -> [2, 3]
([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) -> []
([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) -> [0, 1, 2, 3, 4]
([1, 2, 3, 4, 5], [1, 1, 1, 1, 1]) -> [0]
([1, 2, 3, 4, 5], []) -> []
        }
    }
}

problem Generated/751 {
code {
        func combine_lists(l1: list<int>, l2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [5, 7, 9]
([0, 0, 0], [1, 1, 1]) -> [1, 1, 1]
([-1, -2, -3], [1, 2, 3]) -> [0, 0, 0]
([10, 20, 30], [1, 2]) -> [11, 22]
([1, 2], [10, 20, 30]) -> [11, 22]
        }
    }
}

problem Generated/752 {
code {
        func merge_lists(list_a: list<int>, list_b: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [1, 4, 2, 5, 3, 6]
([1, 2, 3, 4], [5, 6]) -> [1, 5, 2, 6, 3, 4]
([1, 2], [3, 4, 5, 6]) -> [1, 3, 2, 4, 5, 6]
([], [1, 2, 3]) -> [1, 2, 3]
([1, 2, 3], []) -> [1, 2, 3]
        }
    }
}

problem Generated/753 {
code {
        func create_list_from_two_lists(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4], [5, 6, 7, 8]) -> [6, 8, 10, 12]
([1, 2, 3], [4, 5, 6]) -> [5, 7, 9]
([10, 20, 30], [1, 2, 3]) -> [11, 22, 33]
([1], [2]) -> [3]
([], []) -> []
([-1, -2, -3], [1, 2, 3]) -> [0, 0, 0]
        }
    }
}

problem Generated/754 {
code {
        func merge_lists_with_zip(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [5, 7, 9]
([1, 2, 3], [4, 5, 6, 7, 8]) -> [5, 7, 9, 7, 8]
([1], []) -> [1]
([], []) -> []
([1, 2], [-1, -2]) -> [0, 0]
        }
    }
}

problem Generated/755 {
code {
        func merge_lists_without_duplicates(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4], [3, 4, 5, 6]) -> [1, 2, 3, 4, 5, 6]
([1, 1, 2, 3], [2, 2, 3, 4]) -> [1, 2, 3, 4]
([], []) -> []
([1, 2, 3], []) -> [1, 2, 3]
([], [1, 2, 3]) -> [1, 2, 3]
        }
    }
}

problem Generated/756 {
code {
        func find_unique_pairs(lst1: list<int>, lst2: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> 3
([1, 2, 3], [1, 2, 3]) -> 3
([1, 2, 3], [1, 2, 3, 4]) -> 3
([1, 2, 3], [3, 2, 1]) -> 3
([1, 2, 3], [4, 5, 6, 7]) -> 3
        }
    }
}

problem Generated/757 {
code {
        func zip_and_floor_div(nums1: list<double>, nums2: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([10.0, 20.0, 30.0, 40.0, 50.0], [2.0, 3.0, 4.0, 5.0, 6.0]) -> [5, 6, 7, 8, 8]
([0.0, 1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0, 4.0, 5.0]) -> [0, 0, 0, 0, 0]
([10.0, 20.0, 30.0, 40.0, 50.0], [1.0, 2.0, 3.0, 4.0, 5.0]) -> [10, 10, 10, 10, 10]
([100.0, 50.0, 25.0, 10.0, 5.0], [2.0, 3.0, 4.0, 5.0, 6.0]) -> [50, 16, 6, 2, 0]
([1.0, 2.0, 3.0, 4.0, 5.0], [0.5, 1.5, 2.5, 3.5, 4.5]) -> [2, 1, 1, 1, 1]
        }
    }
}

problem Generated/758 {
code {
        func average_using_round_down(elements: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 3
([7.0, 3.0, 5.0, 9.0, 6.0]) -> 6
([1.0, 7.0, 4.0, 9.0, 5.0]) -> 5
([1.0, 7.0, 4.0, 9.0]) -> 5
([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]) -> 4
        }
    }
}

problem Generated/759 {
code {
        func zip_list_round(num_list1: list<double>, num_list2: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.1, 2.2, 3.3], [1.0, 2.0, 3.0]) -> [1, 4, 9]
([3.3, 2.2, 1.1], [3.0, 2.0, 1.0]) -> [9, 4, 1]
([0.5, 1.5, 2.5], [2.0, 1.5, 0.5]) -> [1, 2, 1]
([1.0, 2.0, 3.0], [0.1, 0.2, 0.3]) -> [0, 0, 0]
([1.1, 2.2, 3.3], []) -> []
        }
    }
}

problem Generated/760 {
code {
        func zip_vectors_and_floor(vect1: list<double>, vect2: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 3.1, 2.7], [1.5, 0.7, 0.3]) -> [1, 2, 0]
([0.5, 0.8, 1.2], [3.3, 2.2, 1.1]) -> [1, 1, 1]
([2.5, 1.4], [0.3, 0.8]) -> [0, 1]
([2.5], [0.3]) -> [0]
([], []) -> []
        }
    }
}

problem Generated/761 {
code {
        func zip_and_floor(list_a: list<double>, list_b: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 3.4, 5.6], [7.8, 9.1, 2.3]) -> [9, 30, 12]
([1.0, 2.0, 3.0], [4.0, 5.0, 6.0]) -> [4, 10, 18]
([3.0, 2.0, 1.0], [6.0, 5.0, 4.0]) -> [18, 10, 4]
([0.1, 0.2, 0.3], [10.0, 20.0, 30.0]) -> [1, 4, 9]
([0.0, 10.0, 20.0], [3.0, 2.0, 1.0]) -> [0, 20, 20]
        }
    }
}

problem Generated/762 {
code {
        func zip_and_floor_lists(list1: list<double>, list2: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 2.3, 3.4], [0.1, 0.2, 0.3]) -> [0, 0, 1]
([2.4, 3.6, 4.8], [1.0, 2.0, 3.0]) -> [2, 7, 14]
([0.0, 1.0, 2.0], [1.0, 2.0, 3.0]) -> [0, 2, 6]
([6.0, 7.0, 8.0], [2.0, 3.0, 1.0]) -> [12, 21, 8]
([5.5, 4.4, 3.3], [1.0, 0.5, 2.0]) -> [5, 2, 6]
        }
    }
}

problem Generated/763 {
code {
        func chunk_list(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5, 6], 2) -> [[1, 2], [3, 4], [5, 6]]
([1, 2, 3, 4, 5], 1) -> [[1], [2], [3], [4], [5]]
([1, 2, 3, 4, 5], 5) -> [[1, 2, 3, 4, 5]]
        }
    }
}

problem Generated/764 {
code {
        func zip_and_group(elements: list<int>, n: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8]]
([1, 2, 3], 2) -> [[1, 2], [3]]
([1, 2, 3, 4, 5, 6], 1) -> [[1], [2], [3], [4], [5], [6]]
([1, 2, 3, 4, 5, 6], 4) -> [[1, 2, 3, 4], [5, 6]]
([], 3) -> []
([1], 2) -> [[1]]
        }
    }
}

problem Generated/765 {
code {
        func group_list_into_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5, 6], 2) -> [[1, 2], [3, 4], [5, 6]]
([1, 2, 3], 1) -> [[1], [2], [3]]
([1, 2, 3, 4], 4) -> [[1, 2, 3, 4]]
        }
    }
}

problem Generated/766 {
code {
        func raise_pow_numbers(numbers: list<double>, powers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([2.0, 3.0, 4.0], [3.0, 2.0, 1.0]) -> [8.0, 9.0, 4.0]
([0.5, 0.25, 1.0, 4.0], [2.0, 3.0, 4.0, 5.0]) -> [0.25, 0.015625, 1.0, 1024.0]
([10.0, 2.0, 0.5], [0.0, 0.5, 1.0]) -> [1.0, 1.4142135623730951, 0.5]
([1.0, 2.0, 3.0, 4.0], [3.0, 2.0]) -> [1.0, 4.0]
([], []) -> []
([5.0], [0.0]) -> [1.0]
        }
    }
}

problem Generated/767 {
code {
        func raise_powers_of_numbers(numbers1: list<int>, numbers2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]) -> [1, 8, 81, 1024, 15625]
([7, 3, 5, 9, 6], [0, 2, 3, 4, 0]) -> [1, 9, 125, 6561, 1]
([1, 2, 3, 4, 5], [-1, -2, -3, -4, -5]) -> [1, 0, 0, 0, 0]
([1, 7, 4, 9, 5], [0, 0, 0, 0, 0]) -> [1, 1, 1, 1, 1]
([1, 2, 3], [3, 2, 1]) -> [1, 4, 3]
        }
    }
}

problem Generated/768 {
code {
        func calculate_power_of_elements(b: list<double>, exponent: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([2.0, 3.0, 4.0], [2.0, 3.0, 4.0]) -> [4.0, 27.0, 256.0]
([2.0, 3.0, 4.0], [0.0, 1.0]) -> [1.0, 3.0]
([2.0, 3.0], [0.0, 1.0, 2.0]) -> [1.0, 3.0]
([2.0, 3.0, 4.0], [0.5, 1.5, 2.5]) -> [1.4142135623730951, 5.196152422706632, 32.0]
([], []) -> []
([2.0, 3.0, 4.0], []) -> []
        }
    }
}

problem Generated/769 {
code {
        func calc_power_of_pairs(numbers1: list<int>, numbers2: list<int>) -> list<double>
    }
    tests {
        template nse {
            ([2, 4, 6], [3, 2, 4]) -> [8.0, 16.0, 1296.0]
([1, 2, 3], [1, 2, 3]) -> [1.0, 4.0, 27.0]
([2, 3, 4], [1, 0, -1]) -> [2.0, 1.0, 0.25]
([10, 100, 1000], [0, 1, 2]) -> [1.0, 100.0, 1000000.0]
([2, 2, 2], [3, 3, 3]) -> [8.0, 8.0, 8.0]
        }
    }
}

problem Generated/770 {
code {
        func element_wise_multiply_reduce(elements1: list<double>, elements2: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], [1.0, 2.0, 3.0, 4.0, 5.0]) -> 55.0
([1.0, 2.0, 3.0], [4.0, 5.0, 6.0]) -> 32.0
([1.0, 2.0, 3.0, 4.0, 5.0], [-1.0, -2.0, -3.0, -4.0, -5.0]) -> -55.0
([1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0]) -> 14.0
([], []) -> 0.0
        }
    }
}

problem Generated/771 {
code {
        func multiply_corresponding_lists(list1: list<int>, list2: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) -> 35
([1, 2, 3], [0, 0, 0]) -> 0
([-1, 2, -3], [-1, 2, -3]) -> 14
([10, 20, 30, 40], [1, 2, 3, 4]) -> 300
([1, 2, 3], [4, 5, 6, 7]) -> 32
        }
    }
}

problem Generated/772 {
code {
        func multiply_lists(l1: list<int>, l2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) -> [4, 10, 18, 28, 40]
([1, 2, 3], [0, 0, 0]) -> [0, 0, 0]
([0, 0, 0], [1, 2, 3]) -> [0, 0, 0]
([], []) -> []
([1, 2, 3], [4, 5]) -> [4, 10]
        }
    }
}

problem Generated/773 {
code {
        func get_longest_non_digit_word_from_list(words: list<string>) -> string
    }
    tests {
        template nse {
            (["1hello", "world123", "good", "morning88"]) -> "morning"
(["123", "4", "56"]) -> ""
([]) -> ""
(["3.14", "pi", "e", "2"]) -> "pi"
(["app", "le", "banana", "1234", "pear", "kiwi"]) -> "banana"
        }
    }
}

problem Generated/774 {
code {
        func extract_words(sentence: string, exclude_words: list<string>) -> list<string>
    }
    tests {
        template nse {
            ("This is a sample sentence.", []) -> ["this", "is", "a", "sample", "sentence"]
("This is a sample sentence.", ["is", "sentence"]) -> ["this", "a", "sample"]
("Hello, World! How are you today?", ["you"]) -> ["hello", "world", "how", "are", "today"]
("Python is a powerful language.", ["language", "is", "a"]) -> ["python", "powerful"]
("One fish, two fish, red fish, blue fish.", ["fish"]) -> ["one", "two", "red", "blue"]
        }
    }
}

problem Generated/775 {
code {
        func count_word_occurrences(txt: string, words: list<string>) -> list<int>
    }
    tests {
        template nse {
            ("Hello, world! How are you today?", ["hello", "world", "you"]) -> [1, 1, 1]
("This is a test. This is only a test.", ["this", "is", "test"]) -> [2, 2, 2]
("Python is a popular programming language.", ["python", "programming", "language"]) -> [1, 1, 1]
("The quick brown fox jumps over the lazy dog.", ["the", "quick", "brown"]) -> [2, 1, 1]
("To be or not to be, that is the question.", ["to", "be", "question"]) -> [2, 2, 1]
        }
    }
}

problem Generated/776 {
code {
        func power_list(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [1, 2, 4, 8, 16]
(0) -> []
(1) -> [1]
(10) -> [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]
(3) -> [1, 2, 4]
        }
    }
}

problem Generated/777 {
code {
        func generate_squares(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [0, 1, 4, 9, 16]
(10) -> [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
(1) -> [0]
(0) -> []
(3) -> [0, 1, 4]
        }
    }
}

problem Generated/778 {
code {
        func generate_alternate_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 3, 5]
([7, 3, 5, 9, 6]) -> [7, 5, 6]
([1, 7, 4, 9, 5]) -> [1, 4, 5]
([1, 7, 4, 9, 5, 3]) -> [1, 4, 5]
([1]) -> [1]
        }
    }
}

problem Generated/779 {
code {
        func square_of_even_indices(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 9, 25]
([7, 3, 5, 9, 6]) -> [49, 25, 36]
([1, 7, 4, 9, 5]) -> [1, 16, 25]
([]) -> []
([1, 2, 3, 4, 5, 6, 7, 8]) -> [1, 9, 25, 49]
        }
    }
}

problem Generated/780 {
code {
        func generate_list_of_squares(start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            (1, 5) -> [1, 4, 9, 16, 25]
(0, 0) -> [0]
(3, 3) -> [9]
(5, 1) -> []
(6, 9) -> [36, 49, 64, 81]
        }
    }
}

problem Generated/781 {
code {
        func generate_incremental_list(length: int, start: int, step: int) -> list<int>
    }
    tests {
        template nse {
            (5, 0, 1) -> [0, 1, 2, 3, 4]
(3, 5, -1) -> [5, 4, 3]
(4, 3, 3) -> [3, 6, 9, 12]
(1, 0, 0) -> [0]
(8, 2, 2) -> [2, 4, 6, 8, 10, 12, 14, 16]
        }
    }
}

problem Generated/782 {
code {
        func get_index_of_even_number(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [1, 3, 5, 7, 9]
([0, 0, 0, 0, 0]) -> [0, 1, 2, 3, 4]
([1, 3, 5, 7, 9]) -> []
([2, 4, 6, 8, 10]) -> [0, 1, 2, 3, 4]
([1, 1, 1, 1, 1]) -> []
        }
    }
}

problem Generated/783 {
code {
        func get_index_of_nearest(elements: list<double>, target: double) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 3.6) -> 3
([1.0, 2.0, 3.0, 4.0, 5.0], 2.5) -> 1
([-1.0, -2.0, -3.0, -4.0, -5.0], 1.0) -> 0
([0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 1.0) -> 0
([1.5, 2.5, 3.5, 4.5, 5.5], 3.6) -> 2
        }
    }
}

problem Generated/784 {
code {
        func get_absolute_values(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.0, 0.001, 0.01, 0.1, 1.0]) -> [0.0, 0.001, 0.01, 0.1, 1.0]
([]) -> []
([5.0, -4.0]) -> [5.0, 4.0]
        }
    }
}

problem Generated/785 {
code {
        func get_absolute_diff_list(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 1.0, 1.0, 1.0]
([1.0, -2.0, 3.0, -4.0, 5.0]) -> [3.0, 5.0, 7.0, 9.0]
([1.0, 1.5, 2.0, 2.5, 3.0]) -> [0.5, 0.5, 0.5, 0.5]
([0.0, 0.0, 0.0, 0.0, 0.0]) -> [0.0, 0.0, 0.0, 0.0]
([1.0]) -> []
        }
    }
}

problem Generated/786 {
code {
        func get_absolute_diff_from_prev(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 3, 5, 7, 9]) -> [2, 2, 2, 2]
([2, 5, 8, 11]) -> [3, 3, 3]
([2, -1, 4, -6, 8]) -> [3, 5, 10, 14]
([4, 4, 4]) -> [0, 0]
([-1, -5, -7, -3]) -> [4, 2, 4]
        }
    }
}

problem Generated/787 {
code {
        func get_highest_mark_index(marks: list<int>) -> int
    }
    tests {
        template nse {
            ([89, 76, 92, 88, 95]) -> 4
([56, 67, 78, 89, 90]) -> 4
([90, 89, 88, 87]) -> 0
([78, 90, 67]) -> 1
([1, 2, 3, 4, 5]) -> 4
        }
    }
}

problem Generated/788 {
code {
        func find_max_integer_index(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([7, 3, 5, 9, 6]) -> 3
([1, 7, 4, 9, 5]) -> 3
([1, 7, 4, 9, 5, 9, 7, 3, 5, 2]) -> 3
([1, -7, -4, 9, 5, -9, 7, -3, 5, 2]) -> 3
        }
    }
}

problem Generated/789 {
code {
        func get_max_value_index(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([7, 3, 5, 9, 6]) -> 3
([1, 7, 4, 9, 5]) -> 3
([1, -7, 4, -9, 5]) -> 4
([1, 2, 3, 4, 5, 6, 7, 8]) -> 7
        }
    }
}

problem Generated/790 {
code {
        func get_index_of_max_elem(elements: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> 4
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 0
([0.0, 0.0, 0.0, 0.0]) -> 0
([1.0, 1.0, 1.0, 2.0, 1.0]) -> 3
([-1.0, 0.0, 1.0, 2.0, 3.0]) -> 4
        }
    }
}

problem Generated/791 {
code {
        func min_index_from_list(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 0
([7, 3, 5, 9, 6]) -> 1
([10, 3, 4, 5, 2]) -> 4
([5, 8, 1, 3, 9, -2]) -> 5
([10, 10, 10, 10, 10]) -> 0
        }
    }
}

problem Generated/792 {
code {
        func get_index_of_min_elem(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 0
([7, 3, 5, 9, 6]) -> 1
([1, 7, 4, 9, 5]) -> 0
([1, 7, 4, 9, 5, -6, 8]) -> 5
([-1, -2, -3, -4, -5]) -> 4
        }
    }
}

problem Generated/793 {
code {
        func find_min_index(elements: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 0
([7.0, 3.0, 5.0, 9.0, 6.0]) -> 1
([1.0, 7.0, 4.0, 9.0, 5.0]) -> 0
([-1.0, -7.0, -4.0, -9.0, -5.0]) -> 3
([10.0, 5.0, -3.0, 7.0, 2.0, -1.0, 13.0]) -> 2
        }
    }
}

problem Generated/794 {
code {
        func get_odd_index_sum(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 6
([7, 3, 5, 9, 6]) -> 12
([1, 7, 4, 9, 5]) -> 16
([1, 7, 4, 9, 5, 3]) -> 19
([1, 2]) -> 2
        }
    }
}

problem Generated/795 {
code {
        func get_even_indexed_elem(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 3, 5]
([7, 3, 5, 9, 6]) -> [7, 5, 6]
([1, 7, 4, 9, 5]) -> [1, 4, 5]
([1, 7, 4, 9, 5, 3]) -> [1, 4, 5]
([2]) -> [2]
        }
    }
}

problem Generated/796 {
code {
        func filter_odd_index(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [2, 4]
([7, 3, 5, 9, 6]) -> [3, 9]
([1, 7, 4, 9, 5]) -> [7, 9]
([1, 7]) -> [7]
([1]) -> []
        }
    }
}

problem Generated/797 {
code {
        func filter_list_elements(elements: list<int>, target: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [1]
([7, 3, 5, 9, 6], 9) -> [3]
([1, 7, 4, 9, 5], 6) -> []
([3, 3, 3, 3, 3], 3) -> [0, 1, 2, 3, 4]
([5, 7, 2, 6, 7], 7) -> [1, 4]
        }
    }
}

problem Generated/798 {
code {
        func filter_list_based_on_index(elements: list<int>, index_lst: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [0, 2, 4]) -> [2, 4]
([7, 3, 5, 9, 6], [1, 3]) -> [7, 5, 6]
([1, 7, 4, 9, 5], []) -> [1, 7, 4, 9, 5]
([1, 7, 4, 9, 5], [0, 1, 2, 3, 4]) -> []
([1, 2, 3, 4, 5, 6, 7, 8], [1, 3, 4]) -> [1, 3, 6, 7, 8]
        }
    }
}

problem Generated/799 {
code {
        func filter_even_indexes(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 3, 5]
([7, 3, 5, 9, 6]) -> [7, 5, 6]
([1, 7, 4, 9, 5]) -> [1, 4, 5]
([]) -> []
([1, 2, 3, 4, 5, 6, 7, 8]) -> [1, 3, 5, 7]
        }
    }
}

problem Generated/800 {
code {
        func filter_by_index_range(elements: list<int>, start_idx: int, end_idx: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 0, 2) -> [1, 2, 3]
([1, 2, 3, 4, 5], 2, 4) -> [3, 4, 5]
([1, 2, 3, 4, 5], 0, 0) -> [1]
([1, 2, 3, 4, 5], 4, 5) -> [5]
([1, 2, 3, 4, 5, 6, 7, 8], 3, 7) -> [4, 5, 6, 7, 8]
        }
    }
}

problem Generated/801 {
code {
        func sort_list_by_length(items: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python", "is", "awesome"]) -> ["is", "hello", "world", "python", "awesome"]
(["cat", "dog", "bird"]) -> ["cat", "dog", "bird"]
([]) -> []
(["", "1", "22", "333"]) -> ["", "1", "22", "333"]
(["a", "aa", "aaa", "aaaa", "aaaaa"]) -> ["a", "aa", "aaa", "aaaa", "aaaaa"]
        }
    }
}

problem Generated/802 {
code {
        func sort_list_with_index(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [0, 1, 2, 3, 4]
([7, 3, 5, 9, 6]) -> [1, 2, 4, 0, 3]
([1, 7, 4, 9, 5]) -> [0, 2, 4, 1, 3]
([1, 7, 4, 9, 5, 2]) -> [0, 5, 2, 4, 1, 3]
([1, 7, 4, 9, 5, 2, 10]) -> [0, 5, 2, 4, 1, 3, 6]
        }
    }
}

problem Generated/803 {
code {
        func encode_ascii(s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello, World!") -> [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33]
("") -> []
("123") -> [49, 50, 51]
("aBcDeFgHiJkLmNoPqRsTuVwXyZ") -> [97, 66, 99, 68, 101, 70, 103, 72, 105, 74, 107, 76, 109, 78, 111, 80, 113, 82, 115, 84, 117, 86, 119, 88, 121, 90]
("abcdefghijklmnopqrstuvwxyz") -> [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]
        }
    }
}

problem Generated/804 {
code {
        func get_chr_from_indexes(indexes: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J"]
([23, 8, 11, 11, 14, 25]) -> ["X", "I", "L", "L", "O", "Z"]
([1, 4, 7, 10, 13]) -> ["B", "E", "H", "K", "N"]
([0, 2, 4, 6, 8]) -> ["A", "C", "E", "G", "I"]
([20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) -> ["U", "T", "S", "R", "Q", "P", "O", "N", "M", "L", "K"]
        }
    }
}

problem Generated/805 {
code {
        func string_to_ascii(word: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("world") -> [119, 111, 114, 108, 100]
("") -> []
("123") -> [49, 50, 51]
("!@#") -> [33, 64, 35]
        }
    }
}

problem Generated/806 {
code {
        func get_ascii_values(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["a", "b", "c", "d", "e"]) -> [97, 98, 99, 100, 101]
(["A", "B", "C", "D", "E"]) -> [65, 66, 67, 68, 69]
(["0", "1", "2", "3", "4"]) -> [48, 49, 50, 51, 52]
(["!", "@", "#", "$", "%"]) -> [33, 64, 35, 36, 37]
(["+", "-", "*", "/", "="]) -> [43, 45, 42, 47, 61]
        }
    }
}

problem Generated/807 {
code {
        func has_all_positive_numbers(numbers: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([-1, 2, 3, 4, 5]) -> false
([1, -2, 3, 4, 5]) -> false
([1, 2, 3, 4, -5]) -> false
([0, 1, 2, 3, 4, 5]) -> false
        }
    }
}

problem Generated/808 {
code {
        func is_list_sorted_by_index(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([7, 3, 5, 9, 6]) -> false
([1, 7, 4, 9, 5]) -> false
([1, 2, 3, 4, 5, 6, 7, 8]) -> true
([8, 7, 6, 5, 4, 3, 2, 1]) -> false
        }
    }
}

problem Generated/809 {
code {
        func is_all_palindromes(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["abba", "radar", "civic", "deified"]) -> true
(["hello", "world", "python", "programming"]) -> false
(["racecar", "level", "kayak", "rotor"]) -> true
(["hello", "olleh", "world", "dlrow"]) -> false
(["", "x", "xyx", "xyzzyx"]) -> true
        }
    }
}

problem Generated/810 {
code {
        func check_odd_numbers_in_list(numbers: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 3, 5, 7]) -> true
([2, 4, 6, 8]) -> false
([1, 2, 3, 4]) -> false
([]) -> true
([5, 7, 9, 11, 13, 15, 17, 19, 21, 23]) -> true
        }
    }
}

problem Generated/811 {
code {
        func is_list_element_even(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> false
([2, 4, 6, 8, 10]) -> true
([2, 5, 4, 6, 8]) -> false
([1, 3, 5, 7, 9]) -> false
([0, 10, 20, 30, 40]) -> true
        }
    }
}

problem Generated/812 {
code {
        func binary_representation_of_index(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["0", "1", "10", "11", "100"]
(10) -> ["0", "1", "10", "11", "100", "101", "110", "111", "1000", "1001"]
(0) -> []
(1) -> ["0"]
(2) -> ["0", "1"]
        }
    }
}

problem Generated/813 {
code {
        func get_binary_representation_of_indices(elements: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["0", "1", "10", "11", "100"]
([7, 3, 5, 9, 6]) -> ["0", "1", "10", "11", "100"]
([1, 7, 4, 9, 5]) -> ["0", "1", "10", "11", "100"]
([1, 7, 4, 9, 5, 10, 13]) -> ["0", "1", "10", "11", "100", "101", "110"]
([1, 2, 3, 4, 5, 6, 7, 8]) -> ["0", "1", "10", "11", "100", "101", "110", "111"]
        }
    }
}

problem Generated/814 {
code {
        func binary_representation_of_index(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["0", "1", "10", "11", "100"]
(1) -> ["0"]
(0) -> []
(10) -> ["0", "1", "10", "11", "100", "101", "110", "111", "1000", "1001"]
(15) -> ["0", "1", "10", "11", "100", "101", "110", "111", "1000", "1001", "1010", "1011", "1100", "1101", "1110"]
        }
    }
}

problem Generated/815 {
code {
        func count_words_length(sentence: string) -> list<int>
    }
    tests {
        template nse {
            ("This is a sentence") -> [4, 2, 1, 8]
("Hello world") -> [5, 5]
("Mary had a little lamb") -> [4, 3, 1, 6, 4]
("") -> []
("Seize the day") -> [5, 3, 3]
        }
    }
}

problem Generated/816 {
code {
        func join_string_from_list(elements: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], ", ") -> "0-apple, 1-banana, 2-cherry, 3-date"
(["a", "b", "c"], "") -> "0-a1-b2-c"
(["hello", "world"], " ") -> "0-hello 1-world"
([], "") -> ""
(["123"], "-") -> "0-123"
        }
    }
}

problem Generated/817 {
code {
        func concatenate_strings(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["apple", "orange", "banana", "melon"], ", ") -> "1:apple, 2:orange, 3:banana, 4:melon"
(["apple", "orange", "banana", "melon"], "-") -> "1:apple-2:orange-3:banana-4:melon"
([], " ") -> ""
(["apple"], " ") -> "1:apple"
(["apple", "orange", "banana", "melon"], "") -> "1:apple2:orange3:banana4:melon"
        }
    }
}

problem Generated/818 {
code {
        func join_strings_with_delim(strs: list<string>, delim: string) -> string
    }
    tests {
        template nse {
            (["apple", "orange", "banana", "peach"], "->") -> "0:apple->1:orange->2:banana->3:peach"
(["python", "java", "ruby"], " | ") -> "0:python | 1:java | 2:ruby"
(["cat", "dog", "fish", "bird"], " - ") -> "0:cat - 1:dog - 2:fish - 3:bird"
([], ";") -> ""
(["hello"], "-") -> "0:hello"
        }
    }
}

problem Generated/819 {
code {
        func join_list_of_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python"], ",") -> "0:hello,1:world,2:python"
(["apple", "banana", "mango"], "") -> "0:apple1:banana2:mango"
(["One", "Two", "Three"], " ") -> "0:One 1:Two 2:Three"
([], ",") -> ""
(["onlyone"], ":") -> "0:onlyone"
        }
    }
}

problem Generated/820 {
code {
        func join_list_with_separator(elements: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry"], ", ") -> "0:apple, 1:banana, 2:cherry"
(["apple"], ", ") -> "0:apple"
([], ", ") -> ""
(["apple", "banana", "cherry"], "") -> "0:apple1:banana2:cherry"
(["apple", "banana", "cherry"], " - ") -> "0:apple - 1:banana - 2:cherry"
        }
    }
}

problem Generated/821 {
code {
        func lowercase_str_list(str_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "how", "Are", "YOu"]) -> ["hello", "world", "how", "are", "you"]
(["Abc", "DEF", "gHi", "JKL", "mno"]) -> ["abc", "def", "ghi", "jkl", "mno"]
([]) -> []
(["Python", "Java", "", "C++"]) -> ["python", "java", "", "c++"]
(["One", "two", "three", "four", "five"]) -> ["one", "two", "three", "four", "five"]
(["Abcde", "FGHIJ", "KLMNO", "pqrst", "UVWXYZ"]) -> ["abcde", "fghij", "klmno", "pqrst", "uvwxyz"]
        }
    }
}

problem Generated/822 {
code {
        func lowercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD"]) -> ["hello", "world"]
(["HALF", "FULL"]) -> ["half", "full"]
(["1", "2", "3"]) -> ["1", "2", "3"]
(["", " ", "  "]) -> ["", " ", "  "]
(["$#@!", "CompUter"]) -> ["$#@!", "computer"]
        }
    }
}

problem Generated/823 {
code {
        func convert_strings_to_uppercase(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> ["HELLO", "WORLD", "PYTHON"]
(["PYTHON", "is", "fun"]) -> ["PYTHON", "IS", "FUN"]
(["", "", ""]) -> ["", "", ""]
([]) -> []
(["2", "4", "6"]) -> ["2", "4", "6"]
        }
    }
}

problem Generated/824 {
code {
        func uppercase_strings_with_index(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> ["0: HELLO", "1: WORLD", "2: PYTHON"]
(["Hello", "WORLD", "Python"]) -> ["0: HELLO", "1: WORLD", "2: PYTHON"]
(["HELLO", "WORLD", "PYTHON"]) -> ["0: HELLO", "1: WORLD", "2: PYTHON"]
(["", "a", "ab"]) -> ["0: ", "1: A", "2: AB"]
([]) -> []
(["1"]) -> ["0: 1"]
        }
    }
}

problem Generated/825 {
code {
        func convert_list_elements_to_uppercase(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world"]) -> ["HELLO", "WORLD"]
(["Python", "is", "awesome"]) -> ["PYTHON", "IS", "AWESOME"]
(["List", "comprehensions", "are", "great"]) -> ["LIST", "COMPREHENSIONS", "ARE", "GREAT"]
(["cOmpREheNSioN", "iS", "fUn"]) -> ["COMPREHENSION", "IS", "FUN"]
([]) -> []
        }
    }
}

problem Generated/826 {
code {
        func get_uppercase_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("HELLO WORLD") -> ["HELLO", "WORLD"]
("Hello WORLD") -> ["WORLD"]
("Hello World") -> []
("A B C D E F G H I J K L M N O P Q R S T U V W X Y Z") -> ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]
("") -> []
        }
    }
}

problem Generated/827 {
code {
        func count_all_digits_in_strings(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"]) -> 5
(["abcd", "efgh", "ijkl"]) -> 0
(["1a", "2b3", "c4d5"]) -> 5
(["hello", "world", "123"]) -> 3
(["", "12", "34"]) -> 4
        }
    }
}

problem Generated/828 {
code {
        func get_positions_of_digits(s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello, world!") -> []
("12abc3") -> [0, 1, 5]
("1 2 3 4 5") -> [0, 2, 4, 6, 8]
(" ") -> []
("") -> []
        }
    }
}

problem Generated/829 {
code {
        func get_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
(["apple", "banana", "cherry", "date"], "e") -> []
([], "a") -> []
        }
    }
}

problem Generated/830 {
code {
        func find_matched_strs(strs: list<string>, pattern: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "durian"], "a") -> ["apple"]
(["apple", "banana", "cherry", "durian"], "b") -> ["banana"]
(["apple", "banana", "cherry", "durian"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "durian"], "d") -> ["durian"]
(["apple", "banana", "cherry", "durian"], "e") -> []
        }
    }
}

problem Generated/831 {
code {
        func get_words_starting_with(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date", "fig"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date", "fig"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date", "fig"], "d") -> ["date"]
(["apple", "banana", "cherry", "date", "fig"], "f") -> ["fig"]
(["apple", "banana", "cherry", "date", "fig"], "g") -> []
        }
    }
}

problem Generated/832 {
code {
        func find_words_starting_with_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "pineapple", "kiwi"], "a") -> ["apple"]
(["apple", "banana", "orange", "pineapple", "kiwi"], "p") -> ["pineapple"]
(["apple", "banana", "orange", "pineapple", "kiwi"], "b") -> ["banana"]
(["apple", "banana", "orange", "pineapple", "kiwi"], "k") -> ["kiwi"]
([], "a") -> []
(["apple", "banana", "orange", "pineapple", "kiwi"], "") -> ["apple", "banana", "orange", "pineapple", "kiwi"]
        }
    }
}

problem Generated/833 {
code {
        func find_indexes_of_prefix(strs: list<string>, pre: string) -> list<int>
    }
    tests {
        template nse {
            (["apple", "banana", "ape", "orange"], "ap") -> [0, 2]
(["apple", "banana", "ape", "orange"], "b") -> [1]
(["apple", "banana", "ape", "orange"], "o") -> [3]
(["apple", "banana", "ape", "orange"], "e") -> []
([], "a") -> []
        }
    }
}

problem Generated/834 {
code {
        func startswith_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hi", "there"], "h") -> ["hello", "hi"]
(["hello", "world", "hi", "there"], "wo") -> ["world"]
([], "h") -> []
(["hello", "world", "hi", "there"], "g") -> []
(["h", "hi", "he", "hello"], "he") -> ["he", "hello"]
        }
    }
}

problem Generated/835 {
code {
        func get_words_starting_with(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "hi", "hey", "howdy", "hehe", "hoho"], "he") -> ["hello", "hey", "hehe"]
(["hello", "hi", "hey", "howdy", "hehe", "hoho"], "ho") -> ["howdy", "hoho"]
(["apple", "banana", "cherry", "date", "kiwi"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date", "kiwi"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date", "kiwi"], "z") -> []
        }
    }
}

problem Generated/836 {
code {
        func get_string_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hi", "hey"], "h") -> ["hello", "hi", "hey"]
(["hello", "world", "hi", "hey"], "w") -> ["world"]
(["hello", "world", "hi", "hey"], "x") -> []
(["hello", "world", "hi", "hey"], "") -> ["hello", "world", "hi", "hey"]
([], "h") -> []
        }
    }
}

problem Generated/837 {
code {
        func find_words_starting_with_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "orange"], "a") -> ["apple"]
(["apple", "banana", "cherry", "orange"], "bana") -> ["banana"]
(["apple", "banana", "cherry", "orange"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "orange"], "d") -> []
([], "prefix") -> []
        }
    }
}

problem Generated/838 {
code {
        func count_substrings(strs: list<string>, substr: string) -> list<int>
    }
    tests {
        template nse {
            (["hello", "world", "test"], "l") -> [2, 1, 0]
(["hello", "world", "test"], "lo") -> [1, 0, 0]
(["hello", "world", "test"], "ll") -> [1, 0, 0]
(["hello", "world", "test"], "hell") -> [1, 0, 0]
(["hello", "world", "test"], "test") -> [0, 0, 1]
        }
    }
}

problem Generated/839 {
code {
        func replace_string_in_list(elements: list<string>, old_word: string, new_word: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "banana", "grape"], "banana", "mango") -> ["apple", "mango", "orange", "mango", "grape"]
(["apple", "banana", "orange", "banana", "grape"], "peach", "mango") -> ["apple", "banana", "orange", "banana", "grape"]
(["apple", "banana", "orange", "banana", "grape"], "banana", "") -> ["apple", "", "orange", "", "grape"]
([], "banana", "mango") -> []
(["banana", "banana", "banana", "banana", "banana"], "banana", "mango") -> ["mango", "mango", "mango", "mango", "mango"]
        }
    }
}

problem Generated/840 {
code {
        func replace_element_at_indexes(elements: list<int>, indexes: list<int>, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [0, 2, 4], 9) -> [9, 2, 9, 4, 9]
([1, 2, 3, 4, 5], [], 9) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1], [0, 1, 2, 3], -1) -> [-1, -1, -1, -1]
([1, 2, 3], [1], 7) -> [1, 7, 3]
([8, 7, 6, 5], [2, 3], 0) -> [8, 7, 0, 0]
        }
    }
}

problem Generated/841 {
code {
        func replace_by_index(elements: list<string>, idx: list<int>, new_value: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "grape", "kiwi"], [0, 3, 4], "mango") -> ["mango", "banana", "orange", "mango", "mango"]
(["apple", "banana", "orange", "grape", "kiwi"], [1, 2, 3], "fruit") -> ["apple", "fruit", "fruit", "fruit", "kiwi"]
(["apple", "banana", "orange", "grape", "kiwi"], [0, 1, 2, 3, 4], "fruit") -> ["fruit", "fruit", "fruit", "fruit", "fruit"]
(["cat", "dog", "elephant", "lion", "tiger"], [0, 2, 4], "zoo") -> ["zoo", "dog", "zoo", "lion", "zoo"]
(["apple", "banana", "orange", "grape", "kiwi"], [], "mango") -> ["apple", "banana", "orange", "grape", "kiwi"]
        }
    }
}

problem Generated/842 {
code {
        func add_index_to_list_elements(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "orange", "banana"]) -> ["0_apple", "1_orange", "2_banana"]
(["Hello", "World"]) -> ["0_Hello", "1_World"]
(["", "Hello"]) -> ["0_", "1_Hello"]
(["Wow", "Such", "Python"]) -> ["0_Wow", "1_Such", "2_Python"]
([]) -> []
        }
    }
}

problem Generated/843 {
code {
        func append_index_to_elements(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "pear", "orange", "grape"]) -> ["0:apple", "1:banana", "2:pear", "3:orange", "4:grape"]
(["python", "java", "c++", "go", "ruby"]) -> ["0:python", "1:java", "2:c++", "3:go", "4:ruby"]
(["Hello", "world", "how", "are", "you", "doing", "?"]) -> ["0:Hello", "1:world", "2:how", "3:are", "4:you", "5:doing", "6:?"]
([]) -> []
(["1", "2", "3"]) -> ["0:1", "1:2", "2:3"]
        }
    }
}

problem Generated/844 {
code {
        func enumerate_and_append(elements: list<int>, to_applast: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 7) -> [1, 7, 3, 7, 5]
([7, 3, 5, 9, 6], 4) -> [7, 4, 5, 4, 6]
([1, 7, 4, 9, 5], 2) -> [1, 2, 4, 2, 5]
([], 5) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 0) -> [1, 0, 3, 0, 5, 0, 7, 0]
        }
    }
}

problem Generated/845 {
code {
        func add_index_to_elements(elements: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["0: 1", "1: 2", "2: 3", "3: 4", "4: 5"]
([0, 0, 0, 0, 0]) -> ["0: 0", "1: 0", "2: 0", "3: 0", "4: 0"]
([5, 4, 3, 2, 1]) -> ["0: 5", "1: 4", "2: 3", "3: 2", "4: 1"]
([8, 16, 32, 64, 128]) -> ["0: 8", "1: 16", "2: 32", "3: 64", "4: 128"]
([1, -1, 1, -1, 1]) -> ["0: 1", "1: -1", "2: 1", "3: -1", "4: 1"]
        }
    }
}

problem Generated/846 {
code {
        func append_index_to_element(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["a", "b", "c", "d"]) -> ["a0", "b1", "c2", "d3"]
(["apple", "banana", "cherry"]) -> ["apple0", "banana1", "cherry2"]
(["hello", "world"]) -> ["hello0", "world1"]
([]) -> []
(["python"]) -> ["python0"]
        }
    }
}

problem Generated/847 {
code {
        func add_index_to_string(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["a", "b", "c", "d", "e"]) -> ["0: a", "1: b", "2: c", "3: d", "4: e"]
(["apple", "banana", "cherry", "date"]) -> ["0: apple", "1: banana", "2: cherry", "3: date"]
(["This", "is", "a", "sentence", "."]) -> ["0: This", "1: is", "2: a", "3: sentence", "4: ."]
(["Python", "is", "a", "fun", "language"]) -> ["0: Python", "1: is", "2: a", "3: fun", "4: language"]
(["Hello", "world", "!"]) -> ["0: Hello", "1: world", "2: !"]
        }
    }
}

problem Generated/848 {
code {
        func add_index_as_suffix(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "grape"]) -> ["apple_0", "banana_1", "orange_2", "grape_3"]
(["a", "b", "c", "d", "e"]) -> ["a_0", "b_1", "c_2", "d_3", "e_4"]
([]) -> []
(["hello"]) -> ["hello_0"]
(["cat", "dog", "bat", "rat", "cow"]) -> ["cat_0", "dog_1", "bat_2", "rat_3", "cow_4"]
        }
    }
}

problem Generated/849 {
code {
        func sort_list_with_index(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 5, 3, 9, 2]) -> [1, 2, 3, 5, 9]
([3, 10, 8, 7, 15, 2]) -> [2, 3, 7, 8, 10, 15]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([9, 6, 3, 8, 1]) -> [1, 3, 6, 8, 9]
([7, 5, 3, 1]) -> [1, 3, 5, 7]
        }
    }
}

problem Generated/850 {
code {
        func find_indexes_of_element(elements: list<int>, element: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) -> [4]
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11) -> []
([1, 2, 3, 4, 3, 2, 1], 2) -> [1, 5]
([1, 2, 3, 4, 3, 2, 1], 3) -> [2, 4]
([1, 2, 3, 4, 5], 1) -> [0]
        }
    }
}

problem Generated/851 {
code {
        func get_indices_of_value(elements: list<int>, value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([7, 3, 5, 9, 6], 5) -> [2]
([1, 7, 4, 9, 5], 2) -> []
([1, 7, 4, 9, 5, 7], 7) -> [1, 5]
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> [7]
        }
    }
}

problem Generated/852 {
code {
        func get_indices_of_element(elements: list<int>, target: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([7, 3, 5, 9, 6], 6) -> [4]
([1, 7, 4, 9, 5], 8) -> []
([1, 7, 4, 9, 5, 4, 3, 4], 4) -> [2, 5, 7]
([1, 2, 3, 4, 5, 6, 7, 8], 1) -> [0]
        }
    }
}

problem Generated/853 {
code {
        func indices_of_value_in_list(elements: list<int>, value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([7, 3, 5, 9, 6], 5) -> [2]
([1, 7, 4, 9, 5], 10) -> []
([1, 7, 4, 9, 5, 7], 7) -> [1, 5]
([1, 2, 3, 4, 5, 6, 7, 8], 1) -> [0]
        }
    }
}

problem Generated/854 {
code {
        func get_indices_of_items(items: list<int>, values: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [2, 4]) -> [1, 3]
([7, 3, 5, 9, 6], [3, 9]) -> [1, 3]
([1, 7, 4, 9, 5], [5, 9, 4]) -> [2, 3, 4]
([1, 7, 4, 9, 5], []) -> []
([1, 2, 3, 4, 5, 6, 7, 8], [2, 4, 6, 8]) -> [1, 3, 5, 7]
        }
    }
}

problem Generated/855 {
code {
        func find_indices_of_elements(elements: list<int>, search_elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [1, 3, 5]) -> [0, 2, 4]
([7, 3, 5, 9, 6], [3, 9, 7]) -> [0, 1, 3]
([1, 7, 4, 9, 5], [6, 2, 8, 10]) -> []
([1, 7, 4, 9, 5], [7, 4, 5]) -> [1, 2, 4]
([1, 2, 3, 4, 5, 6, 7, 8], [1, 4, 7, 8]) -> [0, 3, 6, 7]
        }
    }
}

problem Generated/856 {
code {
        func find_indexes_of_element(elements: list<int>, target: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([1, 2, 3, 4, 5], 6) -> []
([1, 2, 3, 2, 5], 2) -> [1, 3]
([0, 0, 0, 0, 0], 0) -> [0, 1, 2, 3, 4]
([], 1) -> []
([1], 1) -> [0]
        }
    }
}

problem Generated/857 {
code {
        func reverse_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([1, 7, 4, 9, 5]) -> [5, 9, 4, 7, 1]
([]) -> []
([1]) -> [1]
        }
    }
}

problem Generated/858 {
code {
        func double_odd_index_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 4, 3, 8, 5]
([7, 3, 5, 9, 6]) -> [7, 6, 5, 18, 6]
([1, 7, 4, 9, 5]) -> [1, 14, 4, 18, 5]
([]) -> []
([1, 2, 3, 4, 5, 6, 7, 8]) -> [1, 4, 3, 8, 5, 12, 7, 16]
        }
    }
}

problem Generated/859 {
code {
        func double_list_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [2, 4, 6, 8, 10]
([7, 3, 5, 9, 6]) -> [14, 6, 10, 18, 12]
([]) -> []
([1, 7, 4, 9, 5]) -> [2, 14, 8, 18, 10]
([1, -2, 3, -4, 5]) -> [2, -4, 6, -8, 10]
        }
    }
}

problem Generated/860 {
code {
        func increment_even_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [2, 2, 4, 4, 6]
([7, 3, 5, 9, 6]) -> [8, 3, 6, 9, 7]
([1, 7, 4, 9, 5]) -> [2, 7, 5, 9, 6]
([]) -> []
([1, 2, 3, 4, 5, 6, 7, 8]) -> [2, 2, 4, 4, 6, 6, 8, 8]
        }
    }
}

problem Generated/861 {
code {
        func increment_every_other_element(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [2, 2, 4, 4, 6]
([0, 2, -3, 4, 0]) -> [1, 2, -2, 4, 1]
([7, 3, 5, 9, 6]) -> [8, 3, 6, 9, 7]
([1, 7, 4, 9, 5]) -> [2, 7, 5, 9, 6]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [2, 2, 4, 4, 6, 6, 8, 8]
        }
    }
}

problem Generated/862 {
code {
        func find_duplicate_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 3]) -> [3]
([1, 1, 2, 3, 4, 4, 5]) -> [1, 4]
([1, 2, 3, 4, 5]) -> []
([1, -1, 2, -1, -2, 3]) -> [-1]
([1, 1, 1, 1, 1]) -> [1]
        }
    }
}

problem Generated/863 {
code {
        func floor_list_elements(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.5, 2.7, 0.3, 4.9, 5.2]) -> [1, 2, 0, 4, 5]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 2, 3, 4, 5]
([-1.5, -2.7, -0.3, -4.9, -5.2]) -> [-2, -3, -1, -5, -6]
([1.23, 2.45, 4.67, 8.91]) -> [1, 2, 4, 8]
([0.0, 5.6, 8.7, -10.2]) -> [0, 5, 8, -11]
        }
    }
}

problem Generated/864 {
code {
        func get_integer_floor(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.5, 2.7, 3.2, 4.8, 5.0]) -> [1, 2, 3, 4, 5]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 2, 3, 4, 5]
([1.8, 2.2, 3.6, 4.4, 5.9, 6.1]) -> [1, 2, 3, 4, 5, 6]
([0.1, 0.6, 0.9, 1.4, 1.9, 2.4, 2.9]) -> [0, 0, 0, 1, 1, 2, 2]
([-1.5, -2.7, -3.2, -4.8, -5.0]) -> [-2, -3, -4, -5, -5]
        }
    }
}

problem Generated/865 {
code {
        func split_list_into_sublists(elements: list<int>, sublist_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5, 0]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5, 0]]
([1, 2, 3, 4, 5], 4) -> [[1, 2, 3, 4], [5, 0, 0, 0]]
([1, 2, 3, 4, 5], 5) -> [[1, 2, 3, 4, 5]]
([1, 2, 3, 4, 5], 6) -> [[1, 2, 3, 4, 5, 0]]
        }
    }
}

problem Generated/866 {
code {
        func group_into_batches(elements: list<int>, batch_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5], 1) -> [[1], [2], [3], [4], [5]]
([1, 2, 3, 4, 5], 5) -> [[1, 2, 3, 4, 5]]
([1, 2, 3, 4, 5, 6], 4) -> [[1, 2, 3, 4], [5, 6]]
        }
    }
}

problem Generated/867 {
code {
        func split_list_into_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5], 1) -> [[1], [2], [3], [4], [5]]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8]]
([1], 5) -> [[1]]
        }
    }
}

problem Generated/868 {
code {
        func split_list_into_chunks(elements: list<string>, chunk_size: int) -> list<list<string>>
    }
    tests {
        template nse {
            (["a", "b", "c", "d", "e", "f", "g", "h"], 3) -> [["a", "b", "c"], ["d", "e", "f"], ["g", "h"]]
(["a", "b", "c", "d", "e", "f", "g", "h"], 2) -> [["a", "b"], ["c", "d"], ["e", "f"], ["g", "h"]]
(["a", "b", "c", "d", "e", "f", "g", "h"], 1) -> [["a"], ["b"], ["c"], ["d"], ["e"], ["f"], ["g"], ["h"]]
(["a", "b", "c"], 3) -> [["a", "b", "c"]]
([], 5) -> []
(["a", "b", "c", "d", "e", "f", "g", "h"], 4) -> [["a", "b", "c", "d"], ["e", "f", "g", "h"]]
        }
    }
}

problem Generated/869 {
code {
        func group_elements_by_index(elements: list<int>, group_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5, 6], 2) -> [[1, 2], [3, 4], [5, 6]]
([1, 2, 3, 4, 5, 6], 4) -> [[1, 2, 3, 4], [5, 6]]
([1, 2, 3, 4, 5, 6, 7], 3) -> [[1, 2, 3], [4, 5, 6], [7]]
        }
    }
}

problem Generated/870 {
code {
        func chunk_list(elements: list<int>, size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5], 1) -> [[1], [2], [3], [4], [5]]
([1, 2, 3, 4, 5], 5) -> [[1, 2, 3, 4, 5]]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8]]
        }
    }
}

problem Generated/871 {
code {
        func split_list_into_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([7, 3, 5, 9, 6], 3) -> [[7, 3, 5], [9, 6]]
([1, 7, 4, 9, 5], 7) -> [[1, 7, 4, 9, 5]]
([1, 7, 4, 9, 5], 1) -> [[1], [7], [4], [9], [5]]
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> [[1, 2, 3, 4, 5], [6, 7, 8]]
        }
    }
}

problem Generated/872 {
code {
        func sqrt_of_index(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 4.0, 9.0, 16.0, 25.0]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772, 2.0]
([0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979, 2.449489742783178, 2.6457513110645907, 2.8284271247461903, 3.0]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772, 2.0]
([0.0, 0.0, 0.0, 0.0, 0.0]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772, 2.0]
([]) -> []
        }
    }
}

problem Generated/873 {
code {
        func sqrt_of_index(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772, 2.0]
([9.0, 16.0, 25.0]) -> [0.0, 1.0, 1.4142135623730951]
([1.0, 8.0, 27.0, 64.0, 125.0]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772, 2.0]
([]) -> []
([4.0, 16.0, 36.0]) -> [0.0, 1.0, 1.4142135623730951]
        }
    }
}

problem Generated/874 {
code {
        func get_sqrt_of_even_index(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 1.7320508075688772, 2.23606797749979]
([7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0]) -> [2.6457513110645907, 2.23606797749979, 1.7320508075688772, 1.0]
([2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]) -> [1.4142135623730951, 2.0, 2.449489742783178, 2.8284271247461903]
([1.0, 4.0, 9.0, 16.0, 25.0, 36.0, 49.0, 64.0, 81.0]) -> [1.0, 3.0, 5.0, 7.0, 9.0]
([]) -> []
        }
    }
}

problem Generated/875 {
code {
        func apply_pow_on_list(numbers: list<double>, power: double) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2.0) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 0.5) -> [1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979]
([1.5, 2.5, 3.5, 4.5], 3.0) -> [3.375, 15.625, 42.875, 91.125]
([0.0, 1.0, 2.0, 3.0, 4.0, 5.0], 1.0) -> [0.0, 1.0, 2.0, 3.0, 4.0, 5.0]
([], 2.0) -> []
        }
    }
}

problem Generated/876 {
code {
        func power_list_based_on_index(elements: list<double>, power: double) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2.0) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 0.5) -> [1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979]
([2.0, 4.0, 6.0, 8.0], 3.0) -> [8.0, 64.0, 216.0, 512.0]
([1.0, -2.0, 3.0, -4.0, 5.0], 2.0) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([], 2.0) -> []
        }
    }
}

problem Generated/877 {
code {
        func multiply_list_except_index(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [120, 60, 40, 30, 24]
([7, 3, 5, 9, 6]) -> [810, 1890, 1134, 630, 945]
([1, 1, 1, 1, 1]) -> [1, 1, 1, 1, 1]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [40320, 20160, 13440, 10080, 8064, 6720, 5760, 5040]
([2, 4, 6, 8]) -> [192, 96, 64, 48]
        }
    }
}

problem Generated/878 {
code {
        func multiply_odd_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([7, 3, 5, 9, 6]) -> 945
([2, 4, 6, 8, 10]) -> 0
([1, 7, 4, 9, 5]) -> 315
([1, 2, 3, 4, 5, 6, 7, 8]) -> 105
        }
    }
}

problem Generated/879 {
code {
        func compute_sum_of_indices(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 10
([7, 3, 5, 9, 6]) -> 10
([1, 7, 4, 9, 5]) -> 10
([]) -> 0
([1, 2, 3, 4, 5, 6, 7, 8]) -> 28
        }
    }
}

problem Generated/880 {
code {
        func split_string_by_regex_pattern(s: string, pattern: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello world", " ") -> ["Hello", "world"]
("Hello world, how are you?", "[ ,]") -> ["Hello", "world", "how", "are", "you?"]
("1,2,3,4,5,6,7", ",") -> ["1", "2", "3", "4", "5", "6", "7"]
("1 2,3 4,5 6", "[ ,]") -> ["1", "2", "3", "4", "5", "6"]
("Hello", " ") -> ["Hello"]
        }
    }
}

problem Generated/881 {
code {
        func split_string_by_regex(s: string, regex: string) -> list<string>
    }
    tests {
        template nse {
            ("The quick brown fox jumps over the lazy dog", " ") -> ["The", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]
("ab;cde,efg:hi", "[,;:]") -> ["ab", "cde", "efg", "hi"]
("one!two?three:four", "[!?:]") -> ["one", "two", "three", "four"]
("", " ") -> [""]
("splitbyme", " ") -> ["splitbyme"]
        }
    }
}

problem Generated/882 {
code {
        func find_missing_numbers(numbers: list<int>, max_num: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 4, 6], 6) -> [3, 5]
([2, 3, 5], 5) -> [1, 4]
([1, 3, 5, 7, 9], 10) -> [2, 4, 6, 8, 10]
([], 5) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5], 5) -> []
        }
    }
}

problem Generated/883 {
code {
        func get_unique_numbers(n: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [4, 6, 8, 9, 10]
(15) -> [4, 6, 8, 9, 10, 12, 14, 15]
(20) -> [4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20]
(25) -> [4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25]
(30) -> [4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30]
        }
    }
}

problem Generated/884 {
code {
        func get_unique_numbers_in_range(start: int, last: int, nums: list<int>) -> list<int>
    }
    tests {
        template nse {
            (1, 10, [2, 4, 6, 8]) -> [1, 3, 5, 7, 9, 10]
(0, 5, [0, 1, 2, 3, 4]) -> [5]
(1, 3, []) -> [1, 2, 3]
(1, 5, [1, 3, 5]) -> [2, 4]
(10, 20, [11, 13, 15, 20]) -> [10, 12, 14, 16, 17, 18, 19]
        }
    }
}

problem Generated/885 {
code {
        func get_unique_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([1, 1, 1, 1, 1]) -> 1
([]) -> 0
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) -> 10
([7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) -> 10
        }
    }
}

problem Generated/886 {
code {
        func count_unique_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([1, 1, 1, 1, 1]) -> 1
([]) -> 0
([1, 2, 3, 2, 1]) -> 3
([100, 200, 300, 400, 500, 500, 400, 300, 200, 100]) -> 5
        }
    }
}

problem Generated/887 {
code {
        func get_distinct_absolute_values(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([-1, -2, -3, -4, -5]) -> [1, 2, 3, 4, 5]
([0, 1, -2, 3, -4, 5]) -> [0, 1, 2, 3, 4, 5]
([7, 3, 5, 9, 6]) -> [3, 5, 6, 7, 9]
([-5, 4, -3, 2, -1, 0]) -> [0, 1, 2, 3, 4, 5]
        }
    }
}

problem Generated/888 {
code {
        func unique_absolute_values(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 3.0, 4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.0, -2.0, 3.0, -4.0, 5.0]) -> [0.0, 2.0, 3.0, 4.0, 5.0]
([]) -> []
        }
    }
}

problem Generated/889 {
code {
        func get_unique_absolute_values(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 2, 3, 3]) -> [1, 2, 3]
([-1, -1, -2, -2, -3, -3]) -> [1, 2, 3]
([0, 0, 0, 0, 0, 0]) -> [0]
([]) -> []
([1, 2, -3, -4, -5]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/890 {
code {
        func sum_of_unique_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([1, 2, 1, 4, 3, 5, 3]) -> 15
([1, 1, 1, 1, 1]) -> 1
([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) -> 0
([]) -> 0
        }
    }
}

problem Generated/891 {
code {
        func calculate_sum_of_unique_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1, 4, 5, 4, 6]) -> 21
([3, 1, 4, 1, 5, 9, 2, 6, 5, 4]) -> 30
([1, 2, 3, 4, 5, 6, 7, 8, 9]) -> 45
([2, 4, 6, 8, 10]) -> 30
([1, 3, 5, 7, 9, 11]) -> 36
        }
    }
}

problem Generated/892 {
code {
        func sum_unique_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([1, 2, 3, 2, 5]) -> 9
([2, 2, 2, 2, 2]) -> 0
([]) -> 0
([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) -> 0
        }
    }
}

problem Generated/893 {
code {
        func get_sum_of_unique_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([1, 1, 1, 1, 1]) -> 1
([1, 2, 3, 1, 2, 3, 4, 5]) -> 15
([]) -> 0
([-2, -1, 0, 1, 2]) -> 0
        }
    }
}

problem Generated/894 {
code {
        func sum_of_unique_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1, 4]) -> 10
([1, 2, 3, 4, 5]) -> 15
([1, 1, 1, 1, 1]) -> 1
([]) -> 0
([-1, -2, -3, -4, -5]) -> -15
        }
    }
}

problem Generated/895 {
code {
        func sum_of_unique_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1, 4, 5, 3]) -> 15
([1, 2, 3, 4, 5]) -> 15
([1, 1, 1, 1, 1, 1, 1]) -> 1
([1, 2, 3, 2, 3, 1, 4, 5]) -> 15
([]) -> 0
        }
    }
}

problem Generated/896 {
code {
        func sum_unique_values(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> 15
([1, 2, 2, 1, 3, 4, 5, 4]) -> 15
([1, 1, 1, 1, 1]) -> 1
([]) -> 0
        }
    }
}

problem Generated/897 {
code {
        func unique_sum(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([1, 1, 2, 2, 3, 3, 4, 4]) -> 10
([1, 1, 1, 1, 1]) -> 1
([-1, 0, 1, -1, 0, 1]) -> 0
([]) -> 0
        }
    }
}

problem Generated/898 {
code {
        func find_duplicate_max(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([7, 3, 5, 9, 6]) -> 9
([1, 7, 4, 9, 5, 7]) -> 9
([1, 7, 4, 9, 5, 7, 9]) -> 9
([1, 1, 1, 1, 1, 7, 4, 9, 5, 7, 9, 9]) -> 9
        }
    }
}

problem Generated/899 {
code {
        func get_min_uncommon_element(list1: list<int>, list2: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) -> 1
([1, 2, 3, 4], [1, 2, 3, 4, 5]) -> 5
([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) -> -1
([1, 2, 3], [4, 5, 6]) -> 1
([1, 2, 3, 4], [4, 5, 6]) -> 1
        }
    }
}

problem Generated/900 {
code {
        func find_min_unique_number(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 1
([1, 2, 1, 4, 5]) -> 2
([1, 2, 3, 3, 2, 5]) -> 1
([7, 7, 7, 7, 7, 7]) -> -1
([]) -> -1
        }
    }
}

problem Generated/901 {
code {
        func find_second_minimum(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 2
([7, 3, 5, 9, 6]) -> 5
([1, 2, 2]) -> 2
([1, 1, 1, 1]) -> -1
([1, 2]) -> 2
        }
    }
}

problem Generated/902 {
code {
        func get_unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 4, 3, 5, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1]) -> [1]
([1, 2, 3, 4, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([]) -> []
        }
    }
}

problem Generated/903 {
code {
        func get_unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 2, 3, 3, 4, 4]) -> [1, 2, 3, 4]
([]) -> []
([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        }
    }
}

problem Generated/904 {
code {
        func remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 3, 4, 4, 5]) -> [1, 2, 5]
([1, 1, 2, 2, 3, 3]) -> []
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
([1]) -> [1]
        }
    }
}

problem Generated/905 {
code {
        func get_unique_elements(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "apple", "date", "banana"]) -> ["cherry", "date"]
(["apple", "banana", "cherry", "date", "elderberry"]) -> ["apple", "banana", "cherry", "date", "elderberry"]
([]) -> []
(["banana"]) -> ["banana"]
(["apple", "Apple", "banana", "Banana", "date", "DATE"]) -> ["apple", "Apple", "banana", "Banana", "date", "DATE"]
        }
    }
}

problem Generated/906 {
code {
        func sort_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([3, 2, 1, 4, 2, 3, 5, 4, 6]) -> [1, 2, 3, 4, 5, 6]
([1, 1, 1, 1, 1]) -> [1]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([]) -> []
        }
    }
}

problem Generated/907 {
code {
        func get_sorted_unique_values(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5, 1, 2, 3]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 3, 2, 2, 4, 4, 5, 1]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1, 1]) -> [1]
        }
    }
}

problem Generated/908 {
code {
        func get_sorted_unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 2, 3, 3, 4, 4]) -> [1, 2, 3, 4]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1]) -> [1]
([]) -> []
([7, 3, 5, 5, 9, 6, 7, 3]) -> [3, 5, 6, 7, 9]
        }
    }
}

problem Generated/909 {
code {
        func get_unique_sorted_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 1, 2, 4, 5, 3]) -> [1, 2, 3, 4, 5]
([2, 1, 3, 5, 4]) -> [1, 2, 3, 4, 5]
([6, 6, 6, 6, 6]) -> [6]
([]) -> []
([9]) -> [9]
        }
    }
}

problem Generated/910 {
code {
        func get_unique_sorted_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 2, 3, 4, 4, 5, 5, 5]) -> [1, 2, 3, 4, 5]
([9, 8, 7, 6, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
([8, 8, 8, 8, 8, 8]) -> [8]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
        }
    }
}

problem Generated/911 {
code {
        func get_sorted_unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 3, 2, 2, 4, 3, 5, 1]) -> [1, 2, 3, 4, 5]
([7, 2, 9, 1, 8, 2, 4]) -> [1, 2, 4, 7, 8, 9]
([1, 1, 1, 1, 1, 1, 1]) -> [1]
([]) -> []
([3, 5, 2, 8, 1]) -> [1, 2, 3, 5, 8]
([2, 4, 6, 8, 10]) -> [2, 4, 6, 8, 10]
        }
    }
}

problem Generated/912 {
code {
        func get_sorted_unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5, 5, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([]) -> []
([-1, -2, 3, 4, 5, 5, -2, 3]) -> [-2, -1, 3, 4, 5]
        }
    }
}

problem Generated/913 {
code {
        func get_sorted_unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 1, 3, 4, 2, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
        }
    }
}

problem Generated/914 {
code {
        func sort_and_remove_duplicates(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "banana", "cherry", "apple"]) -> ["apple", "banana", "cherry"]
(["dog", "CAT", "elephant", "Cat", "dog"]) -> ["CAT", "Cat", "dog", "elephant"]
(["ant", "ant", "ant", "ant"]) -> ["ant"]
([""]) -> [""]
([]) -> []
        }
    }
}

problem Generated/915 {
code {
        func has_all_elements(elements: list<int>, subset: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [1, 2, 3]) -> true
([1, 2, 3, 4, 5], [0, 2, 3]) -> false
([1, 2, 3, 4, 5], [1]) -> true
([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) -> true
([], [1, 2, 3]) -> false
        }
    }
}

problem Generated/916 {
code {
        func has_unique_elements(items: list<string>) -> bool
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"]) -> true
(["apple", "banana", "cherry", "banana"]) -> false
([]) -> true
(["hello"]) -> true
([" ", " ", " ", "  "]) -> false
        }
    }
}

problem Generated/917 {
code {
        func all_items_in_set(elements1: list<int>, elements2: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3], [2, 1, 3]) -> true
([1, 2, 3], [2, 1, 3, 4]) -> false
([1, 2, 3], []) -> false
([1, 2, 3], [3, 2, 1]) -> true
([], []) -> true
        }
    }
}

problem Generated/918 {
code {
        func check_if_list_is_subset(list1: list<int>, list2: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3], [1, 2, 3, 4, 5]) -> true
([1, 2, 3, 4, 5], [1, 2, 3]) -> false
([1, 2, 3], [3, 2, 1]) -> true
([0, -1, -2], [1, 2, 3]) -> false
([], [1, 2, 3]) -> true
        }
    }
}

problem Generated/919 {
code {
        func join_set_to_string(items: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "apple", "pear", "banana"], ", ") -> "apple, banana, orange, pear"
(["apple", "banana", "orange", "apple", "pear", "banana"], "") -> "applebananaorangepear"
(["apple", "banana", "orange", "apple", "pear", "banana"], " | ") -> "apple | banana | orange | pear"
(["apple", "banana", "orange", "apple", "pear", "banana"], ",") -> "apple,banana,orange,pear"
([], ", ") -> ""
        }
    }
}

problem Generated/920 {
code {
        func get_uppercase_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("HELLO WORLD") -> ["HELLO", "WORLD"]
("Hello, World!") -> []
("Python is a GREAT language") -> ["GREAT"]
("ALL CAPS IS REALLY SHOUTING!") -> ["ALL", "CAPS", "IS", "REALLY"]
("123 456 789") -> []
        }
    }
}

problem Generated/921 {
code {
        func replace_element_in_list(elements: list<string>, old_elem: string, new_elem: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "banana", "pear", "kiwi"], "banana", "orange") -> ["apple", "orange", "orange", "pear", "kiwi"]
(["yes", "yes", "no", "yes", "no"], "no", "maybe") -> ["yes", "yes", "maybe", "yes", "maybe"]
(["aa", "bb", "cc", "dd"], "ee", "ff") -> ["aa", "bb", "cc", "dd"]
(["Python", "Java", "C++", "Ruby"], "C++", "Go") -> ["Python", "Java", "Go", "Ruby"]
(["A", "B", "C", "D", "E"], "E", "F") -> ["A", "B", "C", "D", "F"]
        }
    }
}

problem Generated/922 {
code {
        func replace_list_elements(elements: list<string>, old_elements: list<string>, new_element: string) -> list<string>
    }
    tests {
        template nse {
            (["cat", "dog", "rabbit", "cat", "dog"], ["cat", "dog"], "hamster") -> ["hamster", "hamster", "rabbit", "hamster", "hamster"]
(["cat", "dog", "rabbit", "cat", "dog"], ["hamster"], "hamster") -> ["cat", "dog", "rabbit", "cat", "dog"]
(["cat", "dog", "rabbit", "cat", "dog"], ["rabbit"], "hamster") -> ["cat", "dog", "hamster", "cat", "dog"]
(["cat", "dog", "rabbit", "cat", "dog"], ["cat", "hamster"], "hamster") -> ["hamster", "dog", "rabbit", "hamster", "dog"]
([], ["cat", "dog"], "hamster") -> []
        }
    }
}

problem Generated/923 {
code {
        func replace_list_elements(input_lst: list<string>, old_value: string, new_value: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hello", "goodbye", "world"], "hello", "hi") -> ["hi", "world", "hi", "goodbye", "world"]
(["cat", "dog", "cat", "mouse"], "dog", "parrot") -> ["cat", "parrot", "cat", "mouse"]
(["red", "yellow", "green", "blue"], "purple", "pink") -> ["red", "yellow", "green", "blue"]
(["apple", "orange", "banana", "apple"], "orange", "cherry") -> ["apple", "cherry", "banana", "apple"]
(["dog", "cat", "rat", "bat", "elephant"], "rat", "hamster") -> ["dog", "cat", "hamster", "bat", "elephant"]
        }
    }
}

problem Generated/924 {
code {
        func replace_words_in_list(words: list<string>, old_word: string, new_word: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "apple"], "apple", "orange") -> ["orange", "banana", "cherry", "orange"]
(["apple", "banana", "cherry"], "orange", "lemon") -> ["apple", "banana", "cherry"]
(["apple", "banana", "cherry"], "banana", "cherry") -> ["apple", "cherry", "cherry"]
([], "banana", "cherry") -> []
(["apple", "banana", "cherry"], "orange", "") -> ["apple", "banana", "cherry"]
        }
    }
}

problem Generated/925 {
code {
        func unique_elements_from_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]) -> [1, 2, 3, 4, 5]
([7, 3, 7, 9, 3, 6, 7, 9, 6, 4]) -> [3, 4, 6, 7, 9]
([1, 1, 1, 1, 1, 1]) -> [1]
([]) -> []
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/926 {
code {
        func unique_numbers_with_order_preserved(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 1, 3, 4, 3, 5, 6, 2, 6]) -> [1, 2, 3, 4, 5, 6]
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
([1, 1, 1, 1, 1]) -> [1]
([]) -> []
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([-1, 1, -2, 2, -3, 3]) -> [-1, 1, -2, 2, -3, 3]
        }
    }
}

problem Generated/927 {
code {
        func unique_elements_in_order(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 2, 3, 3, 3, 4, 4]) -> [1, 2, 3, 4]
([3, 3, -1, 0, 2, 0, 2]) -> [3, -1, 0, 2]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
([1, 1, 1, 1, 1, 1]) -> [1]
        }
    }
}

problem Generated/928 {
code {
        func remove_duplicate_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 2, 3, 4, 4, 5, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 2, 3, 4, 4, 5, 5, 1]) -> [1, 2, 3, 4, 5]
([3, 1, 4, 1, 5, 9, 2, 6, 5]) -> [3, 1, 4, 5, 9, 2, 6]
([5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
        }
    }
}

problem Generated/929 {
code {
        func unique_items_from_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 2, 3, 1]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1, 1, 1]) -> [1]
([1, 2, 3, 4]) -> [1, 2, 3, 4]
([4, 3, 2, 1]) -> [1, 2, 3, 4]
([]) -> []
        }
    }
}

problem Generated/930 {
code {
        func sort_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 2, 3, 3]) -> [1, 2, 3]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 3, 2, 5, 4, 7, 6, 9, 8, 10]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
([1, 1, 1]) -> [1]
        }
    }
}

problem Generated/931 {
code {
        func unique_even_sorted_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6]) -> [2, 4, 6]
([7, 3, 5, 9, 1]) -> []
([1, 3, 5, 7, 9]) -> []
([4, 2, 2, 6, 4, 8, 10, 10, 8, 8, 4]) -> [2, 4, 6, 8, 10]
([10, 12, 8, 6, 4]) -> [4, 6, 8, 10, 12]
        }
    }
}

problem Generated/932 {
code {
        func unique_sorted_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([3, 2, 1, 3, 2, 1, 4, 5, 6, 6, 5]) -> [1, 2, 3, 4, 5, 6]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([3, 2, 1, 4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
([1]) -> [1]
        }
    }
}

problem Generated/933 {
code {
        func get_unique_sorted_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([3, 2, 1, 2, 3]) -> [1, 2, 3]
([1, 1, 1, 1, 1]) -> [1]
([]) -> []
        }
    }
}

problem Generated/934 {
code {
        func get_unique_sorted_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([2, 3, 1, 5, 4, 3, 1]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1, 1]) -> [1]
([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) -> [1, 2, 3, 4]
        }
    }
}

problem Generated/935 {
code {
        func remove_duplicates_and_sort(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([4, 3, 2, 1, 5, 5, 5, 1]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 2, 2, 2, 3, 3, 3]) -> [1, 2, 3]
([2, 3, 1, 4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
        }
    }
}

problem Generated/936 {
code {
        func sort_list_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([2, 3, 1, 5, 1, 2, 8, 3]) -> [1, 2, 3, 5, 8]
([7, 5, 3, 1, 7, 9, 3]) -> [1, 3, 5, 7, 9]
([1, 1, 1, 1]) -> [1]
([2, 4, 1, 3, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
        }
    }
}

problem Generated/937 {
code {
        func sort_unique_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 2, 1]) -> [1, 2, 3]
([3, 2, 1, -1, -2, 4]) -> [-2, -1, 1, 2, 3, 4]
([10, 23, 11, 23, 15, 28]) -> [10, 11, 15, 23, 28]
        }
    }
}

problem Generated/938 {
code {
        func unique_list_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 4, 4, 1, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1]) -> [1]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 2, 4, 4, 1, 5, 5, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
        }
    }
}

problem Generated/939 {
code {
        func reverse_unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
([1, 1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8]) -> [7, 5, 3, 2]
([2, 2, 3, 4, 5, 5, 6, 6, 7, 7]) -> [4, 3]
([1, 1]) -> []
([]) -> []
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) -> []
        }
    }
}

problem Generated/940 {
code {
        func unique_elements_in_reverse_order(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([1, 1, 2, 3, 3, 4, 5, 5]) -> [5, 4, 3, 2, 1]
([1, 2, 2, 3, 4, 4, 5]) -> [5, 4, 3, 2, 1]
([5, 5, 5, 5, 5]) -> [5]
([]) -> []
        }
    }
}

problem Generated/941 {
code {
        func reverse_unique_values(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([1, 1, 1, 1, 1]) -> [1]
([1, 2, 2, 3, 3, 3, 4, 5, 5, 5]) -> [5, 4, 3, 2, 1]
([]) -> []
([2, 3, 2, 1, 3, 4, 1, 5]) -> [5, 4, 3, 2, 1]
        }
    }
}

problem Generated/942 {
code {
        func remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([]) -> []
([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) -> [1]
        }
    }
}

problem Generated/943 {
code {
        func remove_duplicates_and_sort(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 2, 2, 3, 4, 4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
([1, 2, -3, 0, 0, -3]) -> [-3, 0, 1, 2]
        }
    }
}

problem Generated/944 {
code {
        func remove_duplicates(nums: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 3, 3, 3, 4, 5, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 2, 1]) -> [1, 2, 3]
([]) -> []
([1]) -> [1]
        }
    }
}

problem Generated/945 {
code {
        func find_duplicates(items: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> []
([1, 2, 3, 4, 5, 2, 3]) -> [2, 3]
([1, 1, 1, 2, 2, 3, 4, 5, 5]) -> [1, 2, 5]
([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/946 {
code {
        func copy_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([7, 3, 5, 9, 6, 7, 5, 3]) -> [7, 3, 5, 9, 6]
([1, 7, 4, 9, 5]) -> [1, 7, 4, 9, 5]
([]) -> []
([1, 2, 3, 4, 5, 6, 7, 8]) -> [1, 2, 3, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/947 {
code {
        func remove_duplicate_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
([1, 2, 3, 4, 5, 1, 2, 3]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5, 1, 2, 3, 5, 4]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/948 {
code {
        func unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 1, 4, 5, 4]) -> [1, 2, 4, 5]
([1, 1, 1, 1, 1]) -> [1]
([]) -> []
([1, 2, 1, 1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/949 {
code {
        func unique_elements_in_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 3, 4, 1, 5, 6, 6, 7]) -> [1, 2, 3, 4, 5, 6, 7]
([1, 2, 2, 2, 2, 2, 2, 1, 1, 1]) -> [1, 2]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
([1]) -> [1]
        }
    }
}

problem Generated/950 {
code {
        func count_common_elements(list1: list<int>, list2: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3], [3, 4, 5, 6]) -> 1
([1, 2, 3], [3, 2, 1]) -> 3
([1, 2, 3], [4, 5, 6]) -> 0
([], [1, 2, 3]) -> 0
([1, 2, 3], []) -> 0
        }
    }
}

problem Generated/951 {
code {
        func count_words(sentence: string, words: list<string>) -> int
    }
    tests {
        template nse {
            ("I love coding with Python", ["Python"]) -> 1
("I love coding with Python", ["Python", "love"]) -> 2
("I love coding with Python", ["Java"]) -> 0
("I love coding with Python", []) -> 0
("", ["Python"]) -> 0
        }
    }
}

problem Generated/952 {
code {
        func get_unique_elements_using_set(elements: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.5, 2.7, 3.1, 4.8, 5.1]) -> [1, 2, 3, 4, 5]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 2, 3, 4, 5]
([1.1, 2.2, 3.3, 4.4, 5.5]) -> [1, 2, 3, 4, 5]
([1.9, 2.1, 3.8, 4.3, 5.2]) -> [1, 2, 3, 4, 5]
([1.0, 1.5, 2.0, 2.5, 3.0]) -> [1, 2, 3]
        }
    }
}

problem Generated/953 {
code {
        func get_unique_elements(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 2.3, 3.4, 4.5, 5.6]) -> [1, 2, 3, 4, 5]
([1.9, 2.1, 3.5, 4.6, 5.2]) -> [1, 2, 3, 4, 5]
([1.1, 2.2, 3.3, 4.4, 5.5]) -> [1, 2, 3, 4, 5]
([1.2, 2.5, 3.7, 4.8, 5.1]) -> [1, 2, 3, 4, 5]
([1.5, 2.4, 3.3, 4.2, 5.1]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/954 {
code {
        func get_unique_elements(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.1, 2.9, 3.5, 4.0, 1.0, 3.3, 2.4]) -> [1.0, 2.0, 3.0, 4.0]
([1.9, 2.9, 3.1, 4.9, 1.0, 3.3, 2.4]) -> [1.0, 2.0, 3.0, 4.0]
([1.1234, 2.2345, 2.3456, 3.4567, 4.5678, 5.6789]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([1.99, 3.01, 3.99, 2.01, 4.99, 1.01]) -> [1.0, 2.0, 3.0, 4.0]
([]) -> []
        }
    }
}

problem Generated/955 {
code {
        func ceil_of_set_length_divided_by_n(elements: list<int>, n: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> 3
([7, 3, 5, 9, 6], 3) -> 2
([1, 7, 4, 9, 5], 1) -> 5
([1, 7, 4, 9, 5], 7) -> 1
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> 2
        }
    }
}

problem Generated/956 {
code {
        func get_common_divisors(num1: int, num2: int) -> list<int>
    }
    tests {
        template nse {
            (10, 15) -> [1, 5]
(17, 23) -> [1]
(25, 100) -> [1, 5, 25]
(13, 39) -> [1, 13]
(36, 48) -> [1, 2, 3, 4, 6, 12]
        }
    }
}

problem Generated/957 {
code {
        func get_distinct_divisors(num: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [1, 2, 5, 10]
(15) -> [1, 3, 5, 15]
(21) -> [1, 3, 7, 21]
(28) -> [1, 2, 4, 7, 14, 28]
(33) -> [1, 3, 11, 33]
        }
    }
}

problem Generated/958 {
code {
        func get_power_set(elements: list<int>) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3]) -> [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]
([4, 5]) -> [[], [4], [5], [4, 5]]
([1]) -> [[], [1]]
([]) -> [[]]
([6, 7, 8, 9]) -> [[], [6], [7], [6, 7], [8], [6, 8], [7, 8], [6, 7, 8], [9], [6, 9], [7, 9], [6, 7, 9], [8, 9], [6, 8, 9], [7, 8, 9], [6, 7, 8, 9]]
        }
    }
}

problem Generated/959 {
code {
        func check_dict_values(items: list<string>, values: list<int>, threshold: int) -> bool
    }
    tests {
        template nse {
            (["a", "b", "c"], [1, 2, 3], 0) -> true
(["a", "b", "c", "d"], [1, 2, 3, -1], 0) -> false
([], [], 0) -> true
(["a", "b", "c"], [1, 2, 3], 5) -> false
(["a"], [10], 5) -> true
        }
    }
}

problem Generated/960 {
code {
        func get_top_k_words(words: list<string>, k: int) -> list<string>
    }
    tests {
        template nse {
            (["apple", "orange", "banana", "apple", "orange", "orange", "cherry"], 2) -> ["orange", "apple"]
(["apple", "orange", "banana", "apple", "orange", "orange", "cherry"], 3) -> ["orange", "apple", "banana"]
(["apple", "orange", "banana", "apple", "orange", "orange", "cherry"], 5) -> ["orange", "apple", "banana", "cherry"]
([], 2) -> []
(["apple"], 1) -> ["apple"]
        }
    }
}

problem Generated/961 {
code {
        func copy_and_modify_list(elements: list<int>, key: int, value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2, 100) -> [1, 2, 100, 4, 5]
([7, 3, 5, 9, 6], 3, 0) -> [7, 3, 5, 0, 6]
([1, 7, 4, 9, 5], 0, 100) -> [100, 7, 4, 9, 5]
([1, 7, 4, 9, 5], 4, -10) -> [1, 7, 4, 9, -10]
([1, 2, 3, 4, 5, 6, 7, 8], 5, 0) -> [1, 2, 3, 4, 5, 0, 7, 8]
        }
    }
}

problem Generated/962 {
code {
        func count_distinct_words(s: string) -> int
    }
    tests {
        template nse {
            ("The quick brown fox jumps over the lazy dog") -> 9
("Python is an interpreted, high-level, general-purpose programming language") -> 8
("The quick brown fox jumps over the quick brown dog") -> 8
("Count the number of distinct words in this sentence") -> 9
("Python is a widely used high-level programming language for general-purpose programming") -> 10
        }
    }
}

problem Generated/963 {
code {
        func filter_even_numbers(start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            (1, 10) -> [2, 4, 6, 8]
(5, 13) -> [6, 8, 10, 12]
(1, 1) -> []
(11, 15) -> [12, 14]
(0, 20) -> [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
        }
    }
}

problem Generated/964 {
code {
        func filter_numbers_divisible_by_n(n: int, elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            (3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [3, 6, 9]
(2, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [2, 4, 6, 8, 10]
(5, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [5, 10]
(1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
(7, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [7]
        }
    }
}

problem Generated/965 {
code {
        func filter_and_range(n: int, c: list<int>) -> list<int>
    }
    tests {
        template nse {
            (6, [1, 2, 3, 0, 5, -6]) -> [0, 1, 2, 4]
(10, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) -> []
(5, [1, 1, 1, 1, 1]) -> [0, 1, 2, 3, 4]
(2, [-1, 1]) -> [1]
(4, [1, -1, 1, -1]) -> [0, 2]
        }
    }
}

problem Generated/966 {
code {
        func filter_numbers_within_range(numbers: list<int>, start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 7) -> [3, 4, 5, 6, 7]
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 5) -> [5]
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11, 15) -> []
([], 1, 10) -> []
        }
    }
}

problem Generated/967 {
code {
        func filter_even_numbers(start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            (0, 10) -> [0, 2, 4, 6, 8]
(1, 5) -> [2, 4]
(3, 13) -> [4, 6, 8, 10, 12]
(2, 20) -> [2, 4, 6, 8, 10, 12, 14, 16, 18]
(9, 15) -> [10, 12, 14]
        }
    }
}

problem Generated/968 {
code {
        func get_even_numbers(limit: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [0, 2, 4, 6, 8]
(5) -> [0, 2, 4]
(1) -> [0]
(20) -> [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
(15) -> [0, 2, 4, 6, 8, 10, 12, 14]
        }
    }
}

problem Generated/969 {
code {
        func filter_list_of_strings(strs: list<string>, min_length: int) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "my", "name", "is", "OpenAI"], 3) -> ["hello", "world", "name", "OpenAI"]
(["Python", "is", "a", "powerful", "programming", "language"], 5) -> ["Python", "powerful", "programming", "language"]
(["", "a", "ab", "abc", "abcd", "abcde"], 2) -> ["ab", "abc", "abcd", "abcde"]
(["a", "aa", "aaa", "aaaa", "aaaaa"], 3) -> ["aaa", "aaaa", "aaaaa"]
([], 1) -> []
        }
    }
}

problem Generated/970 {
code {
        func filter_positive_numbers(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, 3.0, 5.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> []
([0.0, -2.0, 3.0, -4.0, 5.0]) -> [0.0, 3.0, 5.0]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([]) -> []
        }
    }
}

problem Generated/971 {
code {
        func filter_positive_numbers(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, 3.0, 5.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> []
([0.0, -2.0, 3.0, -4.0, 5.0]) -> [0.0, 3.0, 5.0]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([-1.0, 0.0, 1.0, -2.0, 2.0]) -> [0.0, 1.0, 2.0]
        }
    }
}

problem Generated/972 {
code {
        func filter_odd_abs_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> [1, 3, 5]
([7, -3, 5, -9, 6]) -> [7, 3, 5, 9]
([2, -8, 4, -10]) -> []
([1, 2, 3, 4, 5]) -> [1, 3, 5]
([]) -> []
        }
    }
}

problem Generated/973 {
code {
        func filter_list_based_on_abs(numbers: list<double>, threshold: double) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2.5) -> [3.0, 4.0, 5.0]
([-1.0, 2.0, -3.0, 4.0, -5.0], 2.5) -> [-3.0, 4.0, -5.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 5.0) -> []
([1.0, 2.0, 3.0, 4.0, 5.0], 0.0) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([], 2.5) -> []
        }
    }
}

problem Generated/974 {
code {
        func sum_even_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 6
([10, 12, 14, 16, 18]) -> 70
([1, 3, 5, 7, 9]) -> 0
([]) -> 0
([2, 4, 6, 8, 10]) -> 30
        }
    }
}

problem Generated/975 {
code {
        func sum_of_evens(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 30
([2, 4, 6, 8, 10]) -> 30
([1, 3, 5, 7, 9]) -> 0
([]) -> 0
([2, 3, 7, 8, 11]) -> 10
        }
    }
}

problem Generated/976 {
code {
        func sum_of_odd_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 25
([2, 4, 6, 8, 10]) -> 0
([1, 3, 5, 7, 9]) -> 25
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) -> 36
([0, 2, 4, 6, 8]) -> 0
        }
    }
}

problem Generated/977 {
code {
        func sum_even_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8]) -> 20
([7, 3, 5, 9, 11]) -> 0
([2, 4, 6, 8, 10]) -> 30
([1, 3, 5, 7, 9]) -> 0
([]) -> 0
        }
    }
}

problem Generated/978 {
code {
        func sum_of_even_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 30
([2, 4, 6, 8, 10]) -> 30
([1, 3, 5, 7, 9]) -> 0
([]) -> 0
([1, 7, 4, 9, 5, 12, 13, 10]) -> 26
        }
    }
}

problem Generated/979 {
code {
        func sum_of_even_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 6
([10, 12, 14, 16, 18]) -> 70
([17, 23, 29, 31, 37]) -> 0
([11, 13, 15, 17]) -> 0
([2, 4, 6, 8]) -> 20
        }
    }
}

problem Generated/980 {
code {
        func filter_list_based_on_max_value(elements: list<double>, max_value: double) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 3.0) -> [1.0, 2.0]
([2.0, 4.0, 6.0, 8.0, 10.0], 6.0) -> [2.0, 4.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 5.0) -> [1.0, 2.0, 3.0, 4.0]
([1.0, 2.0, 3.0, 3.0, 4.0, 5.0], 4.0) -> [1.0, 2.0, 3.0, 3.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 1.0) -> []
        }
    }
}

problem Generated/981 {
code {
        func filter_list_based_on_min(elements: list<int>, minimum: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [4]
([7, 3, 5, 9, 6], 5) -> [6]
([1, 7, 4, 9, 5], 10) -> []
([2, 4, 6, 8, 10], 5) -> [6, 8, 10]
([1, 3, 5, 7, 9], 2) -> []
        }
    }
}

problem Generated/982 {
code {
        func filter_list_and_get_min(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 2
([7, 3, 5, 9, 6]) -> 6
([1, 7, 4, 9, 5]) -> 4
([-1, -2, -3, -4, -5]) -> -1
([1, 3, 5, 7, 9]) -> -1
        }
    }
}

problem Generated/983 {
code {
        func filter_list_based_on_min_value(elements: list<int>, threshold: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [3, 4, 5]
([7, 3, 5, 9, 6], 7) -> [9]
([1, 7, 4, 9, 5], 10) -> []
([1, 7, 4, 9, 5], 1) -> [7, 4, 9, 5]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [5, 6, 7, 8]
        }
    }
}

problem Generated/984 {
code {
        func filter_and_get_smallest(numbers: list<int>, threshold: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 4
([1, 2, 3, 4, 5], 6) -> -1
([5, 4, 3, 2, 1], 2) -> 3
([0, 0, 0, 0, 0], 1) -> -1
([2, 4, 6, 8, 10], 1) -> 2
        }
    }
}

problem Generated/985 {
code {
        func filter_by_common_elements(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]) -> [2, 4]
([7, 3, 5, 9, 6], [0, 2, -3, 4, 0]) -> []
([1, 7, 4, 9, 5], [1, 2, 3, 4, 5]) -> [1, 4, 5]
([1, 7, 4, 9, 5], [1, 7, 4, 9, 5]) -> [1, 7, 4, 9, 5]
([1, 2, 3, 4, 5, 6, 7, 8], [2, 4, 6, 8, 10]) -> [2, 4, 6, 8]
        }
    }
}

problem Generated/986 {
code {
        func filter_list_by_zip(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [0, 2, -3, 4, 0]) -> [2, 4]
([7, 3, 5, 9, 6], [0, 2, -3, 4, 0]) -> [3, 9]
([1, 2, 3], [4, 5, 6]) -> [1, 2, 3]
([-1, -2, -3], [4, 5, 6]) -> []
([1, 2, 3, 4, 5, 6, 7, 8], [0, -1, -1, 1, 0, 0, 1, 1]) -> [4, 7, 8]
        }
    }
}

problem Generated/987 {
code {
        func filter_list_based_on_index(elements: list<int>, indexes: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [0, 2, 4]) -> [1, 3, 5]
([7, 3, 5, 9, 6], [1, 3, 4]) -> [3, 9, 6]
([1, 7, 4, 9, 5], [5]) -> []
([1, 7, 4, 9, 5], []) -> []
([1, 2, 3, 4, 5, 6, 7, 8], [1, 3, 5, 7]) -> [2, 4, 6, 8]
        }
    }
}

problem Generated/988 {
code {
        func filter_strings_based_on_len(strs: list<string>, min_len: int, max_len: int) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python", "is", "awesome"], 4, 6) -> ["hello", "world", "python"]
(["abc", "abcd", "abcde", "abcdef", "abcdefg"], 3, 5) -> ["abc", "abcd", "abcde"]
(["a", "bb", "ccc", "dddd", "eeeee"], 2, 3) -> ["bb", "ccc"]
([], 3, 5) -> []
(["hello", "world", "python", "is", "awesome"], 0, 10) -> ["hello", "world", "python", "is", "awesome"]
        }
    }
}

problem Generated/989 {
code {
        func filter_even_positions(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 3, 5]
([7, 3, 5, 9, 6]) -> [7, 5, 6]
([1, 7, 4, 9, 5]) -> [1, 4, 5]
([1, 7, 4, 9, 5, 3]) -> [1, 4, 5]
([]) -> []
        }
    }
}

problem Generated/990 {
code {
        func filter_list_based_on_index(elements: list<int>, indexes: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [0, 2, 4]) -> [1, 3, 5]
([7, 3, 5, 9, 6], [1, 3]) -> [3, 9]
([1, 7, 4, 9, 5], []) -> []
([1, 7, 4, 9, 5], [1, 2, 3, 4, 5]) -> [7, 4, 9, 5]
([1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/991 {
code {
        func filter_list_based_on_index(elements: list<int>, indexes: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [0, 2, 4]) -> [1, 3, 5]
([7, 3, 5, 9, 6], [1, 3]) -> [3, 9]
([1, 7, 4, 9, 5], []) -> []
([1, 7, 4, 9, 5], [0, 1, 2, 3, 4]) -> [1, 7, 4, 9, 5]
([1, 2, 3, 4, 5, 6, 7, 8], [1, 3, 5, 7]) -> [2, 4, 6, 8]
        }
    }
}

problem Generated/992 {
code {
        func filter_list_by_index(lst: list<int>, indices: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [0, 2, 3]) -> [1, 3, 4]
([7, 3, 5, 9, 6], [1, 3]) -> [3, 9]
([1, 7, 4, 9, 5], []) -> []
([1, 7, 4, 9, 5], [3, 4, 5]) -> [9, 5]
([1, 2, 3, 4, 5, 6, 7, 8], [1, 3, 5, 7]) -> [2, 4, 6, 8]
        }
    }
}

problem Generated/993 {
code {
        func filter_even_index_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 3, 5]
([7, 3, 5, 9, 6]) -> [7, 5, 6]
([1, 7, 4, 9, 5]) -> [1, 4, 5]
([1, 7, 4, 9, 5, 2]) -> [1, 4, 5]
([1]) -> [1]
        }
    }
}

problem Generated/994 {
code {
        func filter_unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 1, 2, 3]) -> [4, 5]
([1, 1, 1, 1, 1]) -> []
([]) -> []
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5, 2, 3, 4, 5]) -> [1]
        }
    }
}

problem Generated/995 {
code {
        func filter_duplicates(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 2, 3, 3]) -> []
([1, 2, 3, 2, 4, 5]) -> [1, 3, 4, 5]
([1, 1, 1, 1, 1]) -> []
([]) -> []
([1, 2, 3, 4, 5, 6, 7, 8]) -> [1, 2, 3, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/996 {
code {
        func filter_unique_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1, 5, 6, 5, 5, 6, 7, 8, 7, 9]) -> [3, 8, 9]
([1, 1, 1, 1, 1, 1, 1, 1]) -> []
([1, 2, 3, 4, 5, 6, 7, 8]) -> [1, 2, 3, 4, 5, 6, 7, 8]
([1, 2, 3, 1, 2, 3]) -> []
([1, 1, 2, 2, 3, 3]) -> []
        }
    }
}

problem Generated/997 {
code {
        func filter_common_elements(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [0, 2, -3, 4, 0]) -> [2, 4]
([7, 3, 5, 9, 6], [0, 2, -3, 4, 0]) -> []
([1, 7, 4, 9, 5], [1, 2, 3, 4, 5]) -> [1, 4, 5]
([1, 7, 4, 9, 5], [-1, -2, -3, -4, -5]) -> []
([1, 2, 3, 4, 5, 6, 7, 8], [1, -1, -1, 1, 0, 0, 1, 1]) -> [1]
        }
    }
}

problem Generated/998 {
code {
        func filter_duplicate_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 2, 3, 4, 4]) -> [1, 3]
([1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) -> []
([2, 4, 6, 8, 10]) -> [2, 4, 6, 8, 10]
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> []
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/999 {
code {
        func filter_and_sort_even_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [2, 4, 6, 8, 10]
([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) -> [2, 4, 6, 8, 10]
([1, 3, 5, 7, 9]) -> []
([2, 4, 6, 8]) -> [2, 4, 6, 8]
([]) -> []
([11, 17, 20, 21, 25, 26, 30, 36, 40]) -> [20, 26, 30, 36, 40]
        }
    }
}

problem Generated/1000 {
code {
        func filter_and_sort_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [10, 8, 6, 4, 2]
([2, 4, 6, 8, 10]) -> [10, 8, 6, 4, 2]
([1, 3, 5, 7, 9]) -> []
([0, 1, 0, 1, 0, 1]) -> [0, 0, 0]
([2, 5, 4, 8, 7]) -> [8, 4, 2]
        }
    }
}

problem Generated/1001 {
code {
        func filter_and_sort_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6]) -> [6, 4, 2]
([10, 8, 6, 4, 2, 0]) -> [10, 8, 6, 4, 2]
([-1, -2, -3, -4, -5]) -> []
([1, 3, 5, 7]) -> []
([2, 4, 6, 8]) -> [8, 6, 4, 2]
        }
    }
}

problem Generated/1002 {
code {
        func filter_vowels(letters: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["a", "b", "c", "d", "e", "f", "g", "h", "i"]) -> ["a", "e", "i"]
(["A", "B", "C", "D", "E", "F", "G", "H", "I"]) -> ["A", "E", "I"]
(["a", "B", "c", "D", "e", "F", "g", "H", "i"]) -> ["a", "e", "i"]
([]) -> []
(["r", "s", "t", "l", "n", "m", "b", "g"]) -> []
        }
    }
}

problem Generated/1003 {
code {
        func filter_vowels(s: string) -> string
    }
    tests {
        template nse {
            ("apple") -> "ae"
("banana") -> "aaa"
("cherry") -> "e"
("mango") -> "ao"
("orange") -> "oae"
        }
    }
}

problem Generated/1004 {
code {
        func filter_alphabets(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "abc", "!@#", "A1B2C3"]) -> ["hello", "world", "abc"]
(["the", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]) -> ["the", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]
(["123", "456", "789"]) -> []
(["AbCdEfGhIjKlMnOpQrStUvWxYz", "aBcDeFgHiJkLmNoPqRsTuVwXyZ"]) -> ["AbCdEfGhIjKlMnOpQrStUvWxYz", "aBcDeFgHiJkLmNoPqRsTuVwXyZ"]
([]) -> []
        }
    }
}

problem Generated/1005 {
code {
        func filter_alphabets(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "ABC", "xyz"]) -> ["hello", "world", "ABC", "xyz"]
(["a", "b", "c", "d", "e"]) -> ["a", "b", "c", "d", "e"]
(["123", "456", "789"]) -> []
([]) -> []
(["Hello", "World", "Python", "3.0"]) -> ["Hello", "World", "Python"]
        }
    }
}

problem Generated/1006 {
code {
        func filter_list_based_on_sublist(large_lst: list<int>, sub_lst: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [2, 4]) -> true
([7, 3, 5, 9, 6], [2, 4]) -> false
([1, 7, 4, 9, 5], []) -> true
([1, 7, 4, 9, 5], [10, 20]) -> false
([1, 2, 3, 4, 5, 6, 7, 8], [1, 3, 8]) -> true
        }
    }
}

problem Generated/1007 {
code {
        func filter_binaries(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([2, 3, 4, 5, 6, 7, 8, 9]) -> [2, 4, 6, 8]
([10, 11, 12, 13, 14, 15, 16, 17]) -> [10, 12, 14, 16]
([0, 1, 2, 3, 4, 5, 6, 7]) -> [0, 2, 4, 6]
([1023, 1024, 1025, 1026, 1027]) -> [1024, 1026]
([511, 512, 513, 514, 515]) -> [512, 514]
        }
    }
}

problem Generated/1008 {
code {
        func filter_words_by_length(sentence: string, min_length: int) -> list<string>
    }
    tests {
        template nse {
            ("The quick brown fox jumps over the lazy dog", 4) -> ["quick", "brown", "jumps", "over", "lazy"]
("Hello, my name is John", 3) -> ["Hello,", "name", "John"]
("This is a test sentence to check the function", 2) -> ["This", "is", "test", "sentence", "to", "check", "the", "function"]
("This is a test sentence to check the function", 4) -> ["This", "test", "sentence", "check", "function"]
("The cat in the hat", 10) -> []
        }
    }
}

problem Generated/1009 {
code {
        func filter_and_join_string(strs: list<string>, subs: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "", "python"], ", ") -> "hello, world, python"
(["what", "", "", "is", "", "", "this"], " ") -> "what is this"
(["", "", "", "", ""], "-") -> ""
([], "->") -> ""
(["a", "b", "c"], "") -> "abc"
        }
    }
}

problem Generated/1010 {
code {
        func filter_words_based_on_length(words: list<string>, length: int) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date", "elderberry"], 5) -> "banana-cherry-elderberry"
(["apple", "banana", "cherry", "date", "elderberry"], 6) -> "elderberry"
(["apple", "banana", "cherry", "date", "elderberry"], 4) -> "apple-banana-cherry-elderberry"
(["apple", "banana", "cherry", "date", "elderberry"], 10) -> ""
([], 5) -> ""
        }
    }
}

problem Generated/1011 {
code {
        func filter_words_starting_with_vowel(words: list<string>) -> string
    }
    tests {
        template nse {
            (["Apple", "Orange", "Banana", "Egg", "Ink"]) -> "Apple, Orange, Egg, Ink"
(["a", "e", "i", "o", "u"]) -> "a, e, i, o, u"
(["Python", "Java", "Go", "Swift"]) -> ""
([]) -> ""
(["Ant", "Elephant", "Iguana", "Ostrich", "Umbrella"]) -> "Ant, Elephant, Iguana, Ostrich, Umbrella"
        }
    }
}

problem Generated/1012 {
code {
        func filter_list_by_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Banana", "orange", "Pineapple"], "P") -> ["Pineapple"]
(["apple", "Banana", "orange", "Pineapple"], "a") -> ["apple"]
(["apple", "Banana", "orange", "Pineapple"], "b") -> ["Banana"]
(["apple", "Banana", "orange", "Pineapple"], "") -> ["apple", "Banana", "orange", "Pineapple"]
([], "a") -> []
        }
    }
}

problem Generated/1013 {
code {
        func filter_lower_string(strs: list<string>, sub_s: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Banana", "Cherry", "date"], "a") -> ["apple", "Banana", "date"]
(["apple", "Banana", "Cherry", "date"], "C") -> ["Cherry"]
(["apple", "Banana", "Cherry", "date"], "x") -> []
([], "a") -> []
(["a", "b", "c"], "") -> ["a", "b", "c"]
        }
    }
}

problem Generated/1014 {
code {
        func filter_names_starting_with_vowel(names: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Alice", "Bob", "Charlie", "David", "Eve"]) -> ["Alice", "Eve"]
(["Amy", "Bill", "Cathy", "David", "Elizabeth"]) -> ["Amy", "Elizabeth"]
([]) -> []
(["Uma", "Vijay", "William", "Xander", "Yara", "Zach"]) -> ["Uma"]
(["Oscar", "Ivan", "Andrew", "Elsa", "Avery"]) -> ["Oscar", "Ivan", "Andrew", "Elsa", "Avery"]
        }
    }
}

problem Generated/1015 {
code {
        func filter_strings_starting_with_vowel(input_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "Banana", "Mango", "orange", "kiwi"]) -> ["Apple", "orange"]
(["cat", "dog", "elephant", "iguana"]) -> ["elephant", "iguana"]
([]) -> []
(["apple", "banana", "cherry", "date"]) -> ["apple"]
(["ant", "bat", "cat"]) -> ["ant"]
        }
    }
}

problem Generated/1016 {
code {
        func filter_names_by_prefix(names: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["John", "Jane", "David", "Diana", "Eva"], "j") -> ["John", "Jane"]
(["John", "Jane", "David", "Diana", "Eva"], "d") -> ["David", "Diana"]
(["John", "Jane", "David", "Diana", "Eva"], "z") -> []
(["John", "jane", "David", "Diana", "Eva"], "J") -> ["John", "jane"]
([], "a") -> []
(["Scott", "John", "jane", "DAVID", "Diana", "eva"], "s") -> ["Scott"]
        }
    }
}

problem Generated/1017 {
code {
        func filter_strings_by_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "bat", "Cat", "dog", "egg"], "a") -> ["apple"]
(["apple", "bat", "Cat", "dog", "egg"], "B") -> ["bat"]
(["apple", "bat", "Cat", "dog", "egg"], "c") -> ["Cat"]
(["apple", "bat", "Cat", "dog", "egg"], "D") -> ["dog"]
([], "a") -> []
(["apple", "bat", "Cat", "dog", "egg"], "") -> ["apple", "bat", "Cat", "dog", "egg"]
        }
    }
}

problem Generated/1018 {
code {
        func filter_upper_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "world", "PYTHON", "3.8", "UNIVERSE"]) -> ["HELLO", "PYTHON", "UNIVERSE"]
(["", " ", "123", "?!@", "UPPER", "lower"]) -> ["UPPER"]
(["a", "b", "c", "d", "E", "F", "g", "h", "I"]) -> ["E", "F", "I"]
([]) -> []
(["UPPERCASE", "lowercase", "Title"]) -> ["UPPERCASE"]
        }
    }
}

problem Generated/1019 {
code {
        func filter_upper_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "WORLD", "123", "", "Python"]) -> ["HELLO", "WORLD", "PYTHON"]
(["ABC", "def", "", "ghi", "123"]) -> ["ABC", "DEF", "GHI"]
(["lowercase", "Uppercase", "bothLOWERCASEandUPPERCASE"]) -> ["LOWERCASE", "UPPERCASE", "BOTHLOWERCASEANDUPPERCASE"]
(["", "", ""]) -> []
(["123", "456", "789"]) -> []
        }
    }
}

problem Generated/1020 {
code {
        func filter_lowercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "PYTHON", "is", "FUN"]) -> ["hello", "world", "is"]
(["Python", "is", "AWESOME"]) -> ["is"]
([]) -> []
(["", "lowercase", "UPPERCASE"]) -> ["lowercase"]
(["lowercase", "UPPERCASE", "MiXeDcAsE"]) -> ["lowercase"]
        }
    }
}

problem Generated/1021 {
code {
        func filter_lower_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "world", "Python", "is", "FUN"]) -> ["world", "is"]
(["This", "is", "a", "test", "string"]) -> ["is", "a", "test", "string"]
(["PYTHON", "IS", "FUN"]) -> []
(["123", "abc", "def"]) -> ["abc", "def"]
([]) -> []
        }
    }
}

problem Generated/1022 {
code {
        func filter_lower_case_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "world", "I", "am", "AI"]) -> ["world", "am"]
(["Data", "Science", "Python", "API"]) -> []
(["This", "is", "a", "Test", "Case"]) -> ["is", "a"]
(["HELLO", "WORLD"]) -> []
([]) -> []
        }
    }
}

problem Generated/1023 {
code {
        func filter_lower_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "WORLD", "Python", "code", "HELLO"]) -> ["hello", "code"]
(["a", "b", "c", "d"]) -> ["a", "b", "c", "d"]
(["A", "B", "C", "D"]) -> []
([]) -> []
(["lowercase", "UPPERCASE", "MixedCase", "onlylowercase"]) -> ["lowercase", "onlylowercase"]
        }
    }
}

problem Generated/1024 {
code {
        func filter_lower_case_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "world", "Python", "is", "fun"]) -> ["world", "is", "fun"]
(["hello", "WORLD", "PytHon", "Is", "fUn"]) -> ["hello"]
(["python", "javascript", "typescript"]) -> ["python", "javascript", "typescript"]
(["", " ", "  ", "   "]) -> []
([" a ", "B", " c ", "D"]) -> [" a ", " c "]
        }
    }
}

problem Generated/1025 {
code {
        func filter_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "this", "IS", "a", "PythoN", "test"]) -> ["WORLD", "IS"]
(["UPPER", "lower"]) -> ["UPPER"]
(["lower"]) -> []
([]) -> []
(["Hello", "WORLD", "", "TEST"]) -> ["WORLD", "TEST"]
        }
    }
}

problem Generated/1026 {
code {
        func filter_uppercase(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON", "AI"]) -> ["HELLO", "WORLD", "PYTHON", "AI"]
(["hello", "world", "python", "ai"]) -> []
([]) -> []
(["HELLO", "world", "PYTHON", "ai"]) -> ["HELLO", "PYTHON"]
(["", "HELLO", "WORLD", "PYTHON", "AI", ""]) -> ["HELLO", "WORLD", "PYTHON", "AI"]
        }
    }
}

problem Generated/1027 {
code {
        func filter_uppercase_strings(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["APPLE", "Orange", "Banana", "PEAR"]) -> ["APPLE", "PEAR"]
(["ALL CAPS", "mixed Case", "lowercase", "123"]) -> ["ALL CAPS"]
(["A", "b", "C", "d", "E"]) -> ["A", "C", "E"]
(["", "", ""]) -> []
(["ALL", "CAPS", "HERE"]) -> ["ALL", "CAPS", "HERE"]
        }
    }
}

problem Generated/1028 {
code {
        func filter_names(names: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["John", "Mary", "James", "123"]) -> ["John", "Mary", "James"]
(["Alice", "Bob", "Charlie", "David"]) -> ["Alice", "Bob", "Charlie", "David"]
(["", " ", "  ", "Sarah", "123", "Mary", "!@$!#"]) -> ["Sarah", "Mary"]
(["Mary", "had", "a", "little", "lamb"]) -> ["Mary", "had", "a", "little", "lamb"]
([]) -> []
        }
    }
}

problem Generated/1029 {
code {
        func filter_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "456"]) -> ["hello", "world"]
(["I", "am", "an", "AI"]) -> ["I", "am", "an", "AI"]
([]) -> []
(["Hello", "World"]) -> ["Hello", "World"]
(["Hello", "", "World"]) -> ["Hello", "World"]
        }
    }
}

problem Generated/1030 {
code {
        func filter_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "abc", ""]) -> ["hello", "world", "abc"]
(["", "123", "abc"]) -> ["abc"]
(["123", "456", "789"]) -> []
(["a", "b", "c"]) -> ["a", "b", "c"]
(["hello", "123", "world", "", "test"]) -> ["hello", "world", "test"]
        }
    }
}

problem Generated/1031 {
code {
        func filter_alphabets_from_list(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "", "python", "3.14", "apple"]) -> ["hello", "world", "python", "apple"]
(["hello", "world", "123", "", "python", "3.14"]) -> ["hello", "world", "python"]
([]) -> []
([""]) -> []
(["1234", "456", "789", "012"]) -> []
        }
    }
}

problem Generated/1032 {
code {
        func filter_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "apple", "orange"]) -> ["hello", "world", "apple", "orange"]
(["alpha", "beta", "gamma", "delta"]) -> ["alpha", "beta", "gamma", "delta"]
(["123", "456", "abc", "def"]) -> ["abc", "def"]
([]) -> []
(["", " ", "\n"]) -> []
        }
    }
}

problem Generated/1033 {
code {
        func filter_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "abc123"]) -> ["hello", "world"]
(["Hello", "WORLD", "123", "abc123"]) -> ["Hello", "WORLD"]
(["", " ", "1", "2", "3"]) -> []
(["a", "1", "b", "2", "c", "3"]) -> ["a", "b", "c"]
(["Python", "is", "awesome"]) -> ["Python", "is", "awesome"]
        }
    }
}

problem Generated/1034 {
code {
        func filter_string_list(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "foo", "bar"]) -> ["hello", "world", "foo", "bar"]
(["hEllo", "WorLd", "1_23", "fOo", "Bar"]) -> ["hEllo", "WorLd", "fOo", "Bar"]
([]) -> []
(["", "123", "!", "456"]) -> []
(["Hello", "World", "", "This", "is", "a", "test"]) -> ["Hello", "World", "This", "is", "a", "test"]
        }
    }
}

problem Generated/1035 {
code {
        func filter_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "python", "java"]) -> ["hello", "world", "python", "java"]
(["hello", "", "world", " ", "123", "python", "java"]) -> ["hello", "world", "python", "java"]
(["123", "", " ", "!", "@", "9", "python", "java"]) -> ["python", "java"]
([]) -> []
(["h1e2l3l4o", "w5o4r3l2d1", "!@#$%^&*()", "python", "java"]) -> ["python", "java"]
        }
    }
}

problem Generated/1036 {
code {
        func filter_list_of_ints(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"]) -> [1, 2, 3, 4, 5]
(["123", "456", "abc", "def", "789"]) -> [123, 456, 789]
([]) -> []
(["1", "2", "3a", "4b", "5c"]) -> [1, 2]
(["a1", "b2", "c3", "d4", "e5"]) -> []
        }
    }
}

problem Generated/1037 {
code {
        func filter_string_list_for_digits(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["abc", "123", "def", "456"]) -> ["123", "456"]
(["1", "2", "3", "4", "5"]) -> ["1", "2", "3", "4", "5"]
(["a", "b", "c"]) -> []
(["123", "abc", "456"]) -> ["123", "456"]
(["123456", "7890"]) -> ["123456", "7890"]
        }
    }
}

problem Generated/1038 {
code {
        func filter_string_list(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["a", "b", "c", "d", "e"]) -> []
(["1", "2", "3", "4", "5"]) -> ["1", "2", "3", "4", "5"]
(["a", "1", "b", "2", "c", "3"]) -> ["1", "2", "3"]
(["1", "3", "5", "7", "9"]) -> ["1", "3", "5", "7", "9"]
([]) -> []
        }
    }
}

problem Generated/1039 {
code {
        func filter_numeric_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["123", "abc", "234", "def", "345"]) -> ["123", "234", "345"]
(["123", "abc", "234", "def", "345", "xyz"]) -> ["123", "234", "345"]
(["123", "234", "345"]) -> ["123", "234", "345"]
(["abc", "def", "xyz"]) -> []
([]) -> []
        }
    }
}

problem Generated/1040 {
code {
        func filter_list_of_strings(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["123", "456", "789", "abc", "def"]) -> ["123", "456", "789"]
(["123", "456", "", "789", "abc", "def"]) -> ["123", "456", "789"]
(["", " ", "", ""]) -> []
(["00", "0000", "0", "1234"]) -> ["00", "0000", "0", "1234"]
([]) -> []
        }
    }
}

problem Generated/1041 {
code {
        func filter_digit_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["123", "456", "789", "abc", "def"]) -> ["123", "456", "789"]
(["123", "4", "5", "67890", "abc", "def"]) -> ["123", "4", "5", "67890"]
(["12a", "b45", "6c7", "def"]) -> []
([]) -> []
(["123"]) -> ["123"]
        }
    }
}

problem Generated/1042 {
code {
        func filter_digit_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"]) -> ["1", "2", "3", "4", "5"]
(["123", "abc", "456", "def"]) -> ["123", "456"]
(["1", "a", "2", "b", "3", "c", "4", "d", "5", "e"]) -> ["1", "2", "3", "4", "5"]
([]) -> []
(["ab", "cd", "ef"]) -> []
        }
    }
}

problem Generated/1043 {
code {
        func filter_list_with_prefix(elements: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "grapes", "kiwi"], "a") -> ["apple"]
(["apple", "banana", "orange", "grapes", "kiwi"], "b") -> ["banana"]
(["apple", "banana", "orange", "grapes", "kiwi"], "o") -> ["orange"]
(["apple", "banana", "orange", "grapes", "kiwi"], "ki") -> ["kiwi"]
(["apple", "banana", "orange", "grapes", "kiwi"], "p") -> []
        }
    }
}

problem Generated/1044 {
code {
        func filter_string_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hi", "hey", "hi there"], "h") -> ["hello", "hi", "hey", "hi there"]
(["hello", "world", "hi", "hey", "hi there"], "w") -> ["world"]
(["hello", "world", "hi", "hey", "hi there"], "hi") -> ["hi", "hi there"]
(["hello", "world", "hi", "hey", "hi there"], "e") -> []
([], "a") -> []
        }
    }
}

problem Generated/1045 {
code {
        func filter_list_by_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "orange"], "a") -> ["apple", "apricot"]
(["apple", "banana", "apricot", "orange"], "b") -> ["banana"]
(["apple", "banana", "apricot", "orange"], "c") -> []
(["apple", "banana", "apricot", "orange"], "") -> ["apple", "banana", "apricot", "orange"]
(["apple", "banana", "apple pie", "orange", "apricot"], "apple") -> ["apple", "apple pie"]
        }
    }
}

problem Generated/1046 {
code {
        func filter_string_list_based_on_prefix(str_lst: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "hi", "python", "world"], "h") -> ["hello", "hi"]
(["hello", "hi", "python", "world"], "py") -> ["python"]
(["hello", "hi", "python", "world"], "z") -> []
([], "h") -> []
(["hello", "hi", "python", "world"], "") -> ["hello", "hi", "python", "world"]
        }
    }
}

problem Generated/1047 {
code {
        func filter_strings_starts_with(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["foo", "bar", "baz", "qux"], "b") -> ["bar", "baz"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
([], "z") -> []
(["foo", "bar", "baz", "qux"], "") -> ["foo", "bar", "baz", "qux"]
(["", "", "", ""], "") -> ["", "", "", ""]
        }
    }
}

problem Generated/1048 {
code {
        func filter_strings_starting_with(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "pineapple"], "a") -> ["apple"]
(["apple", "banana", "orange", "pineapple"], "b") -> ["banana"]
(["apple", "banana", "orange", "pineapple"], "p") -> ["pineapple"]
(["apple", "banana", "orange", "pineapple"], "") -> ["apple", "banana", "orange", "pineapple"]
([], "m") -> []
        }
    }
}

problem Generated/1049 {
code {
        func filter_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "z") -> []
(["abc", "ab", "abcdef", "xyz"], "ab") -> ["abc", "ab", "abcdef"]
(["xyz", "abc", "lmn", "def"], "") -> ["xyz", "abc", "lmn", "def"]
        }
    }
}

problem Generated/1050 {
code {
        func filter_string_based_on_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "pear", "peach"], "ap") -> ["apple", "apricot"]
(["apple", "banana", "apricot", "pear", "peach"], "pe") -> ["pear", "peach"]
(["apple", "banana", "apricot", "pear", "peach"], "x") -> []
(["melon", "mango", "orange", "grape", "guava"], "m") -> ["melon", "mango"]
([], "a") -> []
        }
    }
}

problem Generated/1051 {
code {
        func filter_list_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
(["apple", "banana", "cherry", "date"], "e") -> []
        }
    }
}

problem Generated/1052 {
code {
        func filter_and_replace_list(names: list<string>, old_name: string, new_name: string) -> list<string>
    }
    tests {
        template nse {
            (["Alice", "Bob", "Charlie", "Alice"], "Alice", "Linda") -> ["Linda", "Bob", "Charlie", "Linda"]
(["Alice", "Bob", "Charlie", "Alice"], "David", "Linda") -> ["Alice", "Bob", "Charlie", "Alice"]
(["Alice", "Bob", "Charlie", "Alice"], "Charlie", "David") -> ["Alice", "Bob", "David", "Alice"]
([], "Charlie", "David") -> []
(["Charlie"], "Charlie", "David") -> ["David"]
        }
    }
}

problem Generated/1053 {
code {
        func replace_elements_in_list(elements: list<string>, old_value: string, new_value: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "apple", "cherry"], "apple", "pear") -> ["pear", "banana", "orange", "pear", "cherry"]
(["cat", "dog", "cat", "dog", "cat"], "cat", "hamster") -> ["hamster", "dog", "hamster", "dog", "hamster"]
(["1", "2", "3", "4", "5"], "7", "8") -> ["1", "2", "3", "4", "5"]
([], "dog", "hamster") -> []
(["apple", "banana", "orange", "apple", "cherry"], "berry", "pear") -> ["apple", "banana", "orange", "apple", "cherry"]
        }
    }
}

problem Generated/1054 {
code {
        func filter_odd_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 3, 5]
([7, 3, 5, 9, 6]) -> [7, 3, 5, 9]
([2, 4, 6, 8, 10]) -> []
([1, 7, 4, 9, 5]) -> [1, 7, 9, 5]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [1, 3, 5, 7]
        }
    }
}

problem Generated/1055 {
code {
        func filter_and_remove_duplicates(elements: list<string>, filters: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "banana", "mango", "kiwi"], ["banana", "mango", "guava"]) -> ["banana", "mango"]
(["apple", "banana", "orange", "banana", "mango", "kiwi"], ["strawberry", "cherry", "guava"]) -> []
([], []) -> []
(["apple", "banana", "orange", "banana", "mango", "kiwi"], []) -> []
([], ["strawberry", "cherry", "guava"]) -> []
        }
    }
}

problem Generated/1056 {
code {
        func filter_out_elements(elements: list<int>, filter_num: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [1, 2, 4, 5]
([1, 2, 3, 4, 5], 9) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5], 1) -> [2, 3, 4, 5]
([1, 2, 3, 4, 5], 5) -> [1, 2, 3, 4]
([1, 1, 1, 1, 1], 1) -> []
        }
    }
}

problem Generated/1057 {
code {
        func filter_out_even_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [1, 3, 5, 7, 9]
([2, 4, 6, 8, 10]) -> []
([1, 3, 5, 7, 9]) -> [1, 3, 5, 7, 9]
([]) -> []
([2, 4, 6, 8, 9, 11, 13]) -> [9, 11, 13]
        }
    }
}

problem Generated/1058 {
code {
        func filter_and_sort_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [10, 8, 6, 4, 2]
([9, 7, 5, 3, 1]) -> []
([8, -3, 5, 2, -6, 1]) -> [8, 2, -6]
([1, 3, 5, 7]) -> []
([0, 2, 4, 6, 8, 10]) -> [10, 8, 6, 4, 2, 0]
        }
    }
}

problem Generated/1059 {
code {
        func filter_positives_and_sort(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> [1, 3, 5]
([7, -3, 5, -9, 6]) -> [5, 6, 7]
([]) -> []
([0, -2, -3, -4, -5]) -> []
([1, 2, 3, 4, 5, 6, 7, 8]) -> [1, 2, 3, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/1060 {
code {
        func remove_negative_sort_desc(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> [5, 3, 1]
([10, 20, -5, 30, -15, 40]) -> [40, 30, 20, 10]
([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([-1, -2, -3, -4, -5]) -> []
([]) -> []
        }
    }
}

problem Generated/1061 {
code {
        func filter_sorted_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [10, 8, 6, 4, 2]
([2, 4, 6, 8, 10]) -> [10, 8, 6, 4, 2]
([1, 3, 5, 7, 9]) -> []
([20, 30, 40, 50]) -> [50, 40, 30, 20]
([11, 13, 14, 15, 17]) -> [14]
        }
    }
}

problem Generated/1062 {
code {
        func filter_sorted_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, -3, 4, -5, 6, -7, 8, -9]) -> [1, 2, 4, 6, 8]
([-5, -4, -3, -2, -1]) -> []
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([0, 1, 2, 3, 4]) -> [1, 2, 3, 4]
([-1, 0, 1]) -> [1]
        }
    }
}

problem Generated/1063 {
code {
        func filter_sort_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, -3, 5, -9, 6]) -> [7, 6, 5]
([0, 0, -1, -2, -3, -4]) -> []
([-1, -2, -3, -4, -5]) -> []
([1, -2, 3, -4, 5]) -> [5, 3, 1]
        }
    }
}

problem Generated/1064 {
code {
        func filter_sort_list(elements: list<int>, threshold: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [3, 4, 5]
([7, 3, 5, 9, 6], 5) -> [6, 7, 9]
([1, 7, 4, 9, 5], 10) -> []
([1, -7, 4, 9, 5], -6) -> [1, 4, 5, 9]
([9, 2, 6, 4, 1, 7], 4) -> [6, 7, 9]
        }
    }
}

problem Generated/1065 {
code {
        func filter_list_by_index(elements: list<int>, indices: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [0, 2, 4]) -> [1, 3, 5]
([7, 3, 5, 9, 6], [1, 3]) -> [3, 9]
([1, 7, 4, 9, 5], [1, 2, 3, 4]) -> [7, 4, 9, 5]
([1, 7, 4, 9, 5], [5, 6, 7, 8]) -> []
([1, 2, 3, 4, 5, 6, 7, 8], [0, 2, 3, 6, 7]) -> [1, 3, 4, 7, 8]
        }
    }
}

problem Generated/1066 {
code {
        func filter_list_based_on_indexes(elements: list<int>, indexes: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [0, 2, 4]) -> [1, 3, 5]
([7, 3, 5, 9, 6], [1, 3]) -> [3, 9]
([1, 7, 4, 9, 5], [0, 2, 3, 4]) -> [1, 4, 9, 5]
([1, 7, 4, 9, 5], []) -> []
([1, 2, 3, 4, 5, 6, 7, 8], [1, 3, 5, 7]) -> [2, 4, 6, 8]
        }
    }
}

problem Generated/1067 {
code {
        func filter_list_with_duplicates(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 1, 3, 4, 2]) -> [1, 2, 3, 4]
([7, 8, 9, 8, 7, 6]) -> [7, 8, 9, 6]
([1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/1068 {
code {
        func filter_list_based_on_value(elements: list<int>, value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [3]
([7, 3, 5, 9, 6], 4) -> []
([1, 7, 4, 9, 5], 7) -> [7]
([1, 7, 4, 9, 5], 12) -> []
([1, 2, 3, 4, 3, 5, 3], 3) -> [3, 3, 3]
        }
    }
}

problem Generated/1069 {
code {
        func filter_element_indices(elements: list<int>, value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([7, 3, 5, 9, 6, 3], 3) -> [1, 5]
([1, 7, 4, 9, 5], 6) -> []
([1, 7, 4, 9, 4, 5], 4) -> [2, 4]
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> [7]
        }
    }
}

problem Generated/1070 {
code {
        func reverse_filter_list(elements: list<int>, c: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [0, 2, -3, 4, 0]) -> [4, 2]
([7, 3, 5, 9, 6], [0, 2, -3, 4, 0]) -> [9, 3]
([1, 7, 4, 9, 5], [1, 2, 3, 4, 5]) -> [5, 9, 4, 7, 1]
([1, 7, 4, 9, 5], [-1, -2, -3, -4, -5]) -> []
([1, 2, 3, 4, 5, 6, 7, 8], [1, -1, -1, 1, 0, 0, 1, 1]) -> [8, 7, 4, 1]
        }
    }
}

problem Generated/1071 {
code {
        func reverse_and_filter_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([-1, 2, -3, 4, 5]) -> [5, 4, 2]
([0, -2, 3, -4, 0]) -> [3]
([-1, -2, -3, -4, -5]) -> []
([1, 2, 3, 4, 5, 6, 7, 8]) -> [8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/1072 {
code {
        func reverse_filter_list(elements: list<string>, s: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
(["apple", "banana", "cherry", "date"], "e") -> []
        }
    }
}

problem Generated/1073 {
code {
        func filter_list_copy(numbers: list<int>, c: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [4, 5]
([7, 3, 5, 9, 6], 6) -> [7, 9]
([], 0) -> []
([1, 2, 3, 4, 5], 10) -> []
([1, 2, 3, 4, 5], 0) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/1074 {
code {
        func filter_list_copy(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [2, 4]
([7, 3, 5, 9, 6]) -> [6]
([1, 7, 4, 9, 5, 3]) -> [4]
([]) -> []
([1, 3, 5]) -> []
        }
    }
}

problem Generated/1075 {
code {
        func filter_copy(nums: list<int>, value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [1, 2, 4, 5]
([1, 3, 3, 4, 5], 3) -> [1, 4, 5]
([7, 3, 5, 9, 6], 7) -> [3, 5, 9, 6]
([1, 7, 4, 9, 5], 0) -> [1, 7, 4, 9, 5]
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> [1, 2, 3, 4, 5, 6, 7]
        }
    }
}

problem Generated/1076 {
code {
        func filter_even_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6]) -> [2, 4, 6]
([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> [0, 2, 4, 6, 8]
([11, 21, 33, 44, 55, 66, 77, 88, 99]) -> [44, 66, 88]
([2, 4, 6, 8, 10]) -> [2, 4, 6, 8, 10]
([]) -> []
        }
    }
}

problem Generated/1077 {
code {
        func filter_list_copy(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([7, 3, 5, 9, 6, 0]) -> [7, 3, 5, 9, 6]
([1, -2, 3, -4, 5]) -> [1, 3, 5]
([]) -> []
([-1, -2, -3, -4, -5]) -> []
([1, 2, 3, 4, 5, 6, 7, 8]) -> [1, 2, 3, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/1078 {
code {
        func filter_positive_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([0, 1, 2, -3, 4, 5]) -> [1, 2, 4, 5]
([]) -> []
([-1, -2, -3]) -> []
([7, -3, 5, 9, -6]) -> [7, 5, 9]
([1, 2, 3, 0, -1, -2]) -> [1, 2, 3]
        }
    }
}

problem Generated/1079 {
code {
        func filter_odd_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [1, 3, 5, 7, 9]
([2, 4, 6, 8, 10]) -> []
([1, 3, 5, 7, 9]) -> [1, 3, 5, 7, 9]
([]) -> []
([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) -> [-1, -3, -5, -7, -9]
        }
    }
}

problem Generated/1080 {
code {
        func filter_list_unique(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "banana", "date", "apple"]) -> ["apple", "banana", "cherry", "date"]
(["apple", "apple", "apple", "apple"]) -> ["apple"]
([]) -> []
(["car", "dog", "bike", "bike", "eel", "dog"]) -> ["car", "dog", "bike", "eel"]
(["a", "b", "c", "d", "e", "f", "g"]) -> ["a", "b", "c", "d", "e", "f", "g"]
        }
    }
}

problem Generated/1081 {
code {
        func filter_unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) -> [1, 2, 3, 4, 5, -1, -2, -3, -4, -5]
([1, 1, 1, 1, 1]) -> [1]
([1, 2, 1, 2, 3, 4, 5, 4, 3]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/1082 {
code {
        func get_unique_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1, 5, 3, 7, 9, 8, 2]) -> [1, 2, 3, 5, 7, 9, 8]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
([1, 1, 1, 1, 1]) -> [1]
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        }
    }
}

problem Generated/1083 {
code {
        func get_unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 4, 1, 5]) -> [1, 2, 3, 4, 5]
([3, 2, 1, 3, 2, 1]) -> [3, 2, 1]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
([1, 1, 1, 1, 1]) -> [1]
        }
    }
}

problem Generated/1084 {
code {
        func filter_duplicate_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1, 5, 6, 5, 5, 5]) -> [1, 2, 3, 5, 6]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([3, 3, 3, 3, 3]) -> [3]
([]) -> []
([1, 2, 3, 2, 1, -5, 0, -5, 5, 5]) -> [1, 2, 3, -5, 0, 5]
        }
    }
}

problem Generated/1085 {
code {
        func filter_duplicate_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
([1, 2, 3, 4, 4, 3, 2, 1]) -> [1, 2, 3, 4]
([1, 1, 1, 1, 1, 1]) -> [1]
        }
    }
}

problem Generated/1086 {
code {
        func filter_even_nums(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [2, 4, 6, 8, 10]
([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> [0, 2, 4, 6, 8]
([1, 3, 5, 7, 9]) -> []
([2, 4, 6, 8, 10]) -> [2, 4, 6, 8, 10]
([]) -> []
([11, 22, 33, 44, 55]) -> [22, 44]
        }
    }
}

problem Generated/1087 {
code {
        func filter_list_by_len(elements: list<string>, max_len: int) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date", "elderberry"], 6) -> ["apple", "banana", "cherry", "date"]
(["apple", "banana", "cherry", "date", "elderberry"], 5) -> ["apple", "date"]
([], 5) -> []
(["abcdef"], 3) -> []
(["a", "bb", "ccc", "dddd", "eeeee"], 2) -> ["a", "bb"]
(["a", "bb", "ccc", "dddd", "eeeee"], 10) -> ["a", "bb", "ccc", "dddd", "eeeee"]
        }
    }
}

problem Generated/1088 {
code {
        func filter_list_by_length(strs: list<string>, min_length: int) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "this", "is", "a", "test"], 4) -> ["hello", "world", "this", "test"]
(["python", "is", "a", "high-level", "language"], 3) -> ["python", "high-level", "language"]
([], 5) -> []
(["cat", "dog", "mouse", "hamster"], 2) -> ["cat", "dog", "mouse", "hamster"]
(["apple", "banana", "kiwi", "pear", "orange"], 6) -> ["banana", "orange"]
        }
    }
}

problem Generated/1089 {
code {
        func filter_is_perfect_square(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [1, 4, 9]
([16, 25, 36, 49, 64, 81, 100]) -> [16, 25, 36, 49, 64, 81, 100]
([15, 23, 34, 45, 56, 67, 78, 89]) -> []
([]) -> []
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 25, 36, 49, 64, 81, 100]) -> [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
        }
    }
}

problem Generated/1090 {
code {
        func filter_primes(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9]) -> [2, 3, 5, 7]
([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) -> [11, 13, 17, 19]
([0, -1, 2, 3, 4, 5, 6, 7, 8, 9]) -> [2, 3, 5, 7]
([]) -> []
([21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) -> [23, 29]
        }
    }
}

problem Generated/1091 {
code {
        func filter_prime_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [2, 3, 5]
([7, 3, 5, 9, 6]) -> [7, 3, 5]
([1, 7, 4, 9, 5]) -> [7, 5]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [2, 3, 5, 7]
([45, 89, 101, 67, 103]) -> [89, 101, 67, 103]
        }
    }
}

problem Generated/1092 {
code {
        func filter_list_based_on_sqrt(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [1, 4, 9]
([81, 100, 121, 144, 225]) -> [81, 100, 121, 144, 225]
([3, 5, 7, 11, 13, 17, 19, 23, 29]) -> []
([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> [0, 1, 4, 9]
([]) -> []
        }
    }
}

problem Generated/1093 {
code {
        func filter_prime_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [2, 3, 5, 7]
([11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) -> [11, 13, 17, 19]
([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [2, 3, 5, 7]
([21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) -> [23, 29]
([31, 32, 33, 34, 35, 36, 37, 38, 39, 40]) -> [31, 37]
        }
    }
}

problem Generated/1094 {
code {
        func filter_prime_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [2, 3, 5, 7]
([11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) -> [11, 13, 17, 19]
([2, 3, 5, 7, 11, 13, 17, 19]) -> [2, 3, 5, 7, 11, 13, 17, 19]
([]) -> []
([0, 1, 4, 6, 8, 9, 10]) -> []
        }
    }
}

problem Generated/1095 {
code {
        func filter_perfect_squares(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [1, 4, 9]
([15, 20, 25, 30, 35, 40, 45, 50]) -> [25]
([2, 3, 5, 7, 11, 13]) -> []
([0, 1, 2, 3, 4]) -> [0, 1, 4]
([16, 25, 36, 49, 64, 81]) -> [16, 25, 36, 49, 64, 81]
        }
    }
}

problem Generated/1096 {
code {
        func filter_power_of_two(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 8, 16, 32]) -> [1, 2, 4, 8, 16, 32]
([10, 12, 15, 20, 28, 30, 35]) -> []
([1, 3, 5, 7, 9]) -> [1]
([2, 4, 6, 8, 10, 12, 14, 16]) -> [2, 4, 8, 16]
([1, 2, 4, 8, 16, 17, 18, 19, 20]) -> [1, 2, 4, 8, 16]
        }
    }
}

problem Generated/1097 {
code {
        func filter_square_numbers(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 4.0]
([1.0, 4.0, 9.0, 16.0, 25.0]) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([0.0, 0.5, 2.0, 3.5, 4.0]) -> [0.0, 4.0]
([0.0, 0.5, 2.0, 3.5, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]) -> [0.0, 4.0, 9.0]
([]) -> []
([2.25, 3.5, 6.25, 42.0]) -> []
        }
    }
}

problem Generated/1098 {
code {
        func filter_out_odd_pow(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [2, 4, 6, 8, 10]
([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> [0, 2, 4, 6, 8]
([2, 3, 5, 7, 11, 13, 17, 19]) -> [2]
([]) -> []
([4, 16, 64, 256, 1024]) -> [4, 16, 64, 256, 1024]
([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) -> []
        }
    }
}

problem Generated/1099 {
code {
        func filter_reduce_list(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 8
([7, 3, 5, 9, 6]) -> 6
([1, 7, 4, 9, 5]) -> 4
([1, 7, 4, 9, 5, 10]) -> 40
([2, 4, 6, 8]) -> 384
        }
    }
}

problem Generated/1100 {
code {
        func generate_sorted_list(num: int, start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            (3, 1, 10) -> [3, 6, 9]
(4, 1, 15) -> [4, 8, 12]
(7, -10, 20) -> [-7, 0, 7, 14]
(1, 1, 10) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
(2, -10, 10) -> [-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10]
        }
    }
}

problem Generated/1101 {
code {
        func generate_even_numbers(n: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [2, 4, 6, 8, 10]
(5) -> [2, 4]
(1) -> []
(6) -> [2, 4, 6]
(12) -> [2, 4, 6, 8, 10, 12]
        }
    }
}

problem Generated/1102 {
code {
        func generate_sorted_list(num: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [0, 1, 4, 9, 16]
(1) -> [0]
(10) -> [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
(0) -> []
(3) -> [0, 1, 4]
        }
    }
}

problem Generated/1103 {
code {
        func generate_sorted_multiples(multiple: int, start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            (2, 1, 10) -> [2, 4, 6, 8, 10]
(5, 10, 30) -> [10, 15, 20, 25, 30]
(3, -9, 15) -> [-9, -6, -3, 0, 3, 6, 9, 12, 15]
(1, 10, 20) -> [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
(7, 5, 17) -> [7, 14]
        }
    }
}

problem Generated/1104 {
code {
        func generate_sorted_numbers(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [5, 4, 3, 2, 1]
(1) -> [1]
(10) -> [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
(3) -> [3, 2, 1]
(7) -> [7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/1105 {
code {
        func get_list_of_multiples(n: int, length: int) -> list<int>
    }
    tests {
        template nse {
            (2, 5) -> [2, 4, 6, 8, 10]
(3, 4) -> [3, 6, 9, 12]
(5, 6) -> [5, 10, 15, 20, 25, 30]
(7, 3) -> [7, 14, 21]
(0, 5) -> [0, 0, 0, 0, 0]
        }
    }
}

problem Generated/1106 {
code {
        func sort_list_by_length(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["cat", "dog", "elephant", "lion", "tiger"]) -> ["cat", "dog", "lion", "tiger", "elephant"]
(["apple", "mango", "banana", "cherry"]) -> ["apple", "mango", "banana", "cherry"]
(["a", "ab", "abc", "abcd", "abcde"]) -> ["a", "ab", "abc", "abcd", "abcde"]
([]) -> []
(["a", "bb", "ccc", "dddd", "eeeee", "fffffff"]) -> ["a", "bb", "ccc", "dddd", "eeeee", "fffffff"]
        }
    }
}

problem Generated/1107 {
code {
        func sort_strings_by_length(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["a", "ab", "abc", "abcd"]) -> ["a", "ab", "abc", "abcd"]
(["abcd", "abc", "ab", "a"]) -> ["a", "ab", "abc", "abcd"]
([]) -> []
(["hello", "world", "python", "is", "fun"]) -> ["is", "fun", "hello", "world", "python"]
(["apple", "banana", "cherry"]) -> ["apple", "banana", "cherry"]
        }
    }
}

problem Generated/1108 {
code {
        func sort_list_based_on_string_length(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["cat", "dog", "elephant", "bird"]) -> ["cat", "dog", "bird", "elephant"]
(["apple", "banana", "cherry", "date"]) -> ["date", "apple", "banana", "cherry"]
(["car", "bus", "train", "bicycle", "motorcycle"]) -> ["car", "bus", "train", "bicycle", "motorcycle"]
([]) -> []
(["1234", "12", "123", "1"]) -> ["1", "12", "123", "1234"]
        }
    }
}

problem Generated/1109 {
code {
        func sort_list_by_length(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["cat", "apple", "dog", "banana"]) -> ["cat", "dog", "apple", "banana"]
(["python", "code", "challenge"]) -> ["code", "python", "challenge"]
(["amazing", "fantastic", "good"]) -> ["good", "amazing", "fantastic"]
([]) -> []
(["a", "aa", "aaa", "aaaa", "aaaaa"]) -> ["a", "aa", "aaa", "aaaa", "aaaaa"]
        }
    }
}

problem Generated/1110 {
code {
        func sort_list_based_on_abs(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, -2.0, 3.0, -4.0, 5.0]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([-5.0, -4.0, -3.0, -2.0, -1.0]) -> [-1.0, -2.0, -3.0, -4.0, -5.0]
([0.0, 2.0, 3.0, 0.0, 5.0]) -> [0.0, 0.0, 2.0, 3.0, 5.0]
([]) -> []
        }
    }
}

problem Generated/1111 {
code {
        func sort_list_by_abs_value(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, -2.0, 3.0, -4.0, 5.0]
([1.0, 2.0, -3.0, -4.0, 5.0]) -> [1.0, 2.0, -3.0, -4.0, 5.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [-1.0, -2.0, -3.0, -4.0, -5.0]
([0.0, -2.0, 3.0, -4.0, 5.0]) -> [0.0, -2.0, 3.0, -4.0, 5.0]
([]) -> []
        }
    }
}

problem Generated/1112 {
code {
        func sort_list_based_on_abs(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> [1, -2, 3, -4, 5]
([1, 7, 4, 9, 5]) -> [1, 4, 5, 7, 9]
([-5, -4, -3, -2, -1]) -> [-1, -2, -3, -4, -5]
([0, 3, 0, -4, 2]) -> [0, 0, 2, 3, -4]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/1113 {
code {
        func sort_list_based_on_abs(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([3.0, -2.0, 0.0, 1.0, -4.0, 5.0]) -> [0.0, 1.0, -2.0, 3.0, -4.0, 5.0]
([10.0, 20.0, 30.0, -40.0]) -> [10.0, 20.0, 30.0, -40.0]
([0.0, 5.0, -15.0, 10.0, -5.0]) -> [0.0, 5.0, -5.0, 10.0, -15.0]
([]) -> []
([1.0, 2.0, 3.0]) -> [1.0, 2.0, 3.0]
        }
    }
}

problem Generated/1114 {
code {
        func sort_list_based_on_abs(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> [1, -2, 3, -4, 5]
([7, 3, 5, 9, 6]) -> [3, 5, 6, 7, 9]
([1, 7, 4, 9, 5]) -> [1, 4, 5, 7, 9]
([1, 7, 4, -9, 5]) -> [1, 4, 5, 7, -9]
([1, 2, 3, 4, -5, -6, -7, -8]) -> [1, 2, 3, 4, -5, -6, -7, -8]
        }
    }
}

problem Generated/1115 {
code {
        func get_sum_of_top_k_elements(elements: list<int>, k: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 12
([7, 3, 5, 9, 6], 2) -> 16
([1, 7, 4, 9, 5], 5) -> 26
([1, 7, 4, 9, 5], 0) -> 0
([1, 2, 3, 4, 5, 6, 7, 8], 10) -> 36
        }
    }
}

problem Generated/1116 {
code {
        func get_top_k_sum(numbers: list<int>, k: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 12
([4, 9, 5, 2, 3], 4) -> 21
([1, 7, 4, 9, 5], 2) -> 16
([1, 7, 4, 9, 5], 0) -> 0
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> 36
        }
    }
}

problem Generated/1117 {
code {
        func sum_top_k_elements(elements: list<int>, k: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 12
([7, 3, 5, 9, 6], 2) -> 16
([1, 7, 4, 9, 5], 5) -> 26
([1, 7, 4, 9, 5], 0) -> 0
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> 36
        }
    }
}

problem Generated/1118 {
code {
        func get_sum_of_top_k_numbers(numbers: list<int>, k: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 12
([7, 3, 5, 9, 6], 2) -> 16
([1, 7, 4, 9, 5], 5) -> 26
([1, 7, 4, 9, 5], 0) -> 0
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> 36
        }
    }
}

problem Generated/1119 {
code {
        func get_sum_of_largest_elements(numbers: list<int>, count: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 12
([7, 3, 5, 9, 6], 2) -> 16
([1, 7, 4, 9, 5], 5) -> 26
([1, 7, 4, 9, 5], 0) -> 0
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> 26
        }
    }
}

problem Generated/1120 {
code {
        func sort_and_sum_elements(elements: list<double>, limit: double) -> double
    }
    tests {
        template nse {
            ([1.2, 3.4, 1.0, 2.5, 7.8, 3.3], 2.5) -> 14.5
([10.0, 20.0, 30.0, 40.0, 50.0], 25.0) -> 120.0
([0.1, 0.2, 0.3, 0.4, 0.5], 0.5) -> 0.0
([1.0, 2.0, 3.0, 4.0, 5.0], 10.0) -> 0.0
([1.0, -2.0, 3.0, -4.0, 5.0], -1.0) -> 9.0
        }
    }
}

problem Generated/1121 {
code {
        func sort_and_get_max(nums: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8]) -> 8
([1, 3, 5]) -> -1
([2, 4, 6, 8]) -> 8
([]) -> -1
([3, 6, 2, 9, 12, 10]) -> 12
        }
    }
}

problem Generated/1122 {
code {
        func sort_list_and_compute_max(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, -3, 4, 5]) -> 5
([-2, -4, -6, -8]) -> -1
([7, 3, 5, 9, 6]) -> 9
([]) -> -1
([1, 0, 3, 0, 5]) -> 5
        }
    }
}

problem Generated/1123 {
code {
        func sort_and_get_max_sum(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 9
([5, 4, 3, 2, 1]) -> 9
([1, 2, 3, 4, 5, 6]) -> 11
([6, 5, 4, 3, 2, 1]) -> 11
([1, 1, 1, 1, 1, 1, 1]) -> 2
        }
    }
}

problem Generated/1124 {
code {
        func sort_ascending_and_get_max(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([5, 4, 3, 2, 1]) -> 5
([-3, -2, -1, 0, 1, 2, 3]) -> 3
([1, 2, 3, 6, 5, 4, 9, 8, 7]) -> 9
([-1, -2, -3, -4, -5]) -> -1
        }
    }
}

problem Generated/1125 {
code {
        func sort_list_and_get_max(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([7, 3, -5, 9, 6]) -> 9
([-1, -2, -3, -4, -5]) -> -1
([1, 0, 4, 9, 5]) -> 9
([1, 2, 3, 4, 5, 6, 7, 8, 0]) -> 8
        }
    }
}

problem Generated/1126 {
code {
        func sort_list_desc_and_get_max_elements(elements: list<int>, num_of_max: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) -> [10, 9, 8, 7, 6]
([5, 4, 3, 2, 1], 3) -> [5, 4, 3]
([1, 3, 2, 4, 6, 5, 8, 7, 9, 10], 8) -> [10, 9, 8, 7, 6, 5, 4, 3]
([-1, -2, -3, -4, -5], 2) -> [-1, -2]
([1, 2, 3], 5) -> [3, 2, 1]
        }
    }
}

problem Generated/1127 {
code {
        func sort_and_get_max(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 5.0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> -1.0
([0.0, 2.0, 3.0, 0.0, 5.0]) -> 5.0
([1.0, 0.0, 3.0, 4.0, 5.0]) -> 5.0
([1.0, 0.0, -3.0, 4.0, -5.0]) -> 4.0
        }
    }
}

problem Generated/1128 {
code {
        func sort_list_based_on_min(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([4, 1, 5, 3, 2]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 3, 4]) -> [1, 2, 3, 4]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([3, 4, 2, 1, 5]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/1129 {
code {
        func sort_and_get_min(numbers: list<int>, c: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> 3
([1, 2, 2, 3, 4, 5], 2) -> 3
([5, 4, 3, 2, 1], 3) -> 4
([5, 4, 3, 2, 1], 7) -> -1
([1, 2, 3, 4, 5], 5) -> -1
        }
    }
}

problem Generated/1130 {
code {
        func get_sorted_min_n_values(elements: list<int>, n: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 5, 4, 2, 3], 3) -> [1, 2, 3]
([1, 5, 4, 2, 3], 5) -> [1, 2, 3, 4, 5]
([1, 5, 4, 2, 3], 1) -> [1]
([10, 25, 30, 15], 2) -> [10, 15]
([10, 25, 30, 15], 5) -> [10, 15, 25, 30]
        }
    }
}

problem Generated/1131 {
code {
        func sort_list_and_return_min(elements: list<double>) -> double
    }
    tests {
        template nse {
            ([3.0, 2.0, 1.0, -4.0, 5.0]) -> 1.0
([-3.0, -2.0, -1.0, -4.0, -5.0]) -> 0.0
([0.0, 2.0, -3.0, 4.0, 5.0]) -> 2.0
([1.0, 2.0, 3.0]) -> 1.0
([]) -> 0.0
        }
    }
}

problem Generated/1132 {
code {
        func sort_by_second_list(list1: list<int>, list2: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [0.1, 0.7, 0.3, 0.4, 0.2]) -> [1, 5, 3, 4, 2]
([3, 7, 1, 8, 6], [1.0, 2.0, 3.0, 4.0, 5.0]) -> [3, 7, 1, 8, 6]
([1, 2, 3, 4, 5], [5.0, 4.0, 3.0, 2.0, 1.0]) -> [5, 4, 3, 2, 1]
([10, 20, 30, 40, 50], [0.5, 0.1, 0.3, 0.4, 0.2]) -> [20, 50, 30, 40, 10]
([5, 4, 3, 2, 1], [1.0, 2.0, 3.0, 4.0, 5.0]) -> [5, 4, 3, 2, 1]
        }
    }
}

problem Generated/1133 {
code {
        func sort_list_based_on_index(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([3, 2, 1, 4, 5]) -> [1, 2, 3, 4, 5]
([20, 30, 10, 40, 50]) -> [10, 20, 30, 40, 50]
([2, 5, 3, 1, 4]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/1134 {
code {
        func sort_unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 3, 4, 4, 5, 5, 5]) -> [1, 2, 3, 4, 5]
([4, 8, 2, 1, 6]) -> [1, 2, 4, 6, 8]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1, 1]) -> [1]
        }
    }
}

problem Generated/1135 {
code {
        func sort_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 2, 1, 3, 2, 4, 3, 1, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1]) -> [1]
        }
    }
}

problem Generated/1136 {
code {
        func get_sorted_unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 3, 2, 1, 5, 5, 5, 4, 4]) -> [1, 2, 3, 4, 5]
([-1, -2, -3, -4, -5]) -> [-5, -4, -3, -2, -1]
([1, -2, 3, -4, 5]) -> [-4, -2, 1, 3, 5]
        }
    }
}

problem Generated/1137 {
code {
        func sort_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 2, 1]) -> [1, 2, 3]
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([5, 5, 5, 5, 5]) -> [5]
        }
    }
}

problem Generated/1138 {
code {
        func get_unique_sorted_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 2, 2, 3, 4, 4, 5, 5, 5]) -> [1, 2, 3, 4, 5]
([2, 4, 6, 8, 10, 12, 14]) -> [2, 4, 6, 8, 10, 12, 14]
        }
    }
}

problem Generated/1139 {
code {
        func sort_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 5, 3, 4, 5]) -> [1, 3, 4, 5]
([7, 3, 5, 9, 6]) -> [3, 5, 6, 7, 9]
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
([]) -> []
        }
    }
}

problem Generated/1140 {
code {
        func sort_list_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 2, 1, 4, 5, 4]) -> [1, 2, 3, 4, 5]
([-1, -2, -3, -2, -1, -4, -5, -4]) -> [-5, -4, -3, -2, -1]
([5, 5, 5, 5, 5, 5]) -> [5]
        }
    }
}

problem Generated/1141 {
code {
        func filter_and_sort_list(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [10, 8, 6, 4, 2]
([2, 5, 7, 9, 11]) -> [2]
([1, 3, 5, 7, 9]) -> []
([10]) -> [10]
([]) -> []
        }
    }
}

problem Generated/1142 {
code {
        func filter_sort_list(elements: list<int>, c: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [5, 4, 3]
([7, 3, 5, 9, 6], 10) -> []
([1, 7, 4, 9, 5], 3) -> [9, 7, 5, 4]
([1, 7, 4, 9, 5], -2) -> [9, 7, 5, 4, 1]
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> [8, 7, 6]
        }
    }
}

problem Generated/1143 {
code {
        func sort_odd_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([5, 3, 2, 8, 1, 4]) -> [1, 3, 2, 8, 5, 4]
([9, 8, 7, 6, 5, 4]) -> [5, 8, 7, 6, 9, 4]
([1, 3, 5, 7, 9]) -> [1, 3, 5, 7, 9]
([2, 4, 6, 8, 10]) -> [2, 4, 6, 8, 10]
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        }
    }
}

problem Generated/1144 {
code {
        func sort_and_filter_even_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8]) -> [2, 4, 6, 8]
([2, 4, 6, 8]) -> [2, 4, 6, 8]
([1, 3, 5, 7, 9]) -> []
([1, 3, 2, 4, 5]) -> [2, 4]
([]) -> []
        }
    }
}

problem Generated/1145 {
code {
        func sort_alphabetically(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["banana", "apple", "Orange", "kiwi", "cherry", "Lemon"]) -> ["apple", "banana", "cherry", "kiwi", "Lemon", "Orange"]
(["Zebra", "elephant", "ant", "bear", "lion"]) -> ["ant", "bear", "elephant", "lion", "Zebra"]
(["cat", "dog", "fish", "bird", "rat"]) -> ["bird", "cat", "dog", "fish", "rat"]
(["a", "A", "b", "B", "c", "C"]) -> ["a", "A", "b", "B", "c", "C"]
([]) -> []
        }
    }
}

problem Generated/1146 {
code {
        func sort_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["banana", "apple", "Cherry", "Kiwi", "mango"]) -> ["apple", "banana", "Cherry", "Kiwi", "mango"]
(["Grapefruit", "orange", "grape", "BLUEBERRY", "raspberry", "lemon"]) -> ["BLUEBERRY", "grape", "Grapefruit", "lemon", "orange", "raspberry"]
(["Pineapple", "apricot", "watermelon", "cantaloupe", "Honeydew"]) -> ["apricot", "cantaloupe", "Honeydew", "Pineapple", "watermelon"]
([]) -> []
(["a", "B", "c", "D", "e", "F"]) -> ["a", "B", "c", "D", "e", "F"]
        }
    }
}

problem Generated/1147 {
code {
        func sort_string(s: string) -> string
    }
    tests {
        template nse {
            ("dcbabc") -> "abbccd"
("hello") -> "ehllo"
("world") -> "dlorw"
("") -> ""
("python") -> "hnopty"
        }
    }
}

problem Generated/1148 {
code {
        func sort_strings_based_on_ascii(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["abc", "def", "ghi"]) -> ["abc", "def", "ghi"]
(["ghi", "def", "abc"]) -> ["abc", "def", "ghi"]
(["cab", "bac", "abc"]) -> ["abc", "bac", "cab"]
(["bca", "abc", "bac"]) -> ["abc", "bac", "bca"]
(["bc", "a", "ab"]) -> ["a", "ab", "bc"]
        }
    }
}

problem Generated/1149 {
code {
        func sort_strings_based_on_ascii(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["abc", "def", "ghi"]) -> ["abc", "def", "ghi"]
(["def", "abc", "ghi"]) -> ["abc", "def", "ghi"]
(["cba", "dcba", "bca"]) -> ["bca", "cba", "dcba"]
(["aaa", "bbb", "ccc"]) -> ["aaa", "bbb", "ccc"]
(["cb", "bc", "a"]) -> ["a", "bc", "cb"]
        }
    }
}

problem Generated/1150 {
code {
        func sort_strings_based_on_ascii(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"]) -> ["apple", "banana", "cherry", "date"]
(["apple", "banana", "CHERRY", "date"]) -> ["CHERRY", "apple", "banana", "date"]
(["Zebra", "Lion", "Tiger", "Elephant", "Bear"]) -> ["Bear", "Elephant", "Lion", "Tiger", "Zebra"]
(["zoo", "ant", "fly", "bee", "dog"]) -> ["ant", "bee", "dog", "fly", "zoo"]
([]) -> []
        }
    }
}

problem Generated/1151 {
code {
        func is_list_sorted_and_unique(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([5, 4, 3, 2, 1]) -> true
([1, 2, 3, 2, 5]) -> false
([1, 1, 1, 2, 3]) -> false
([]) -> true
        }
    }
}

problem Generated/1152 {
code {
        func is_list_sorted_and_unique(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([1, 1, 2, 3, 4, 5]) -> false
([1, 2, 3, 3, 4, 5]) -> false
([5, 4, 3, 2, 1]) -> false
([1]) -> true
        }
    }
}

problem Generated/1153 {
code {
        func is_sorted_and_unique(items: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([1, 2, 2, 4, 5]) -> false
([5, 4, 3, 2, 1]) -> false
([1, 2, 3, 4, 5, 5, 6]) -> false
([4, 5, 2, 3, 1]) -> false
        }
    }
}

problem Generated/1154 {
code {
        func is_sorted_list(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([1, 2, 3, 8, 5]) -> false
([5, 4, 3, 2, 1]) -> false
([1, 1, 2, 3, 4]) -> true
([5, 5, 5, 5, 5]) -> true
        }
    }
}

problem Generated/1155 {
code {
        func sort_and_join_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "-") -> "apple-banana-cherry-date"
(["apple", "banana", "cherry", "date"], "") -> "applebananacherrydate"
([], "-") -> ""
(["a"], "-") -> "a"
(["World", "Hello"], " ") -> "Hello World"
        }
    }
}

problem Generated/1156 {
code {
        func sort_list_and_join(elements: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["foo", "bar", "baz", "hello", "world"], "-") -> "bar-baz-foo-hello-world"
(["foo", "bar", "baz", "hello", "world"], "") -> "barbazfoohelloworld"
(["foo", "bar", "baz", "hello", "world"], " ") -> "bar baz foo hello world"
(["foo", "Foo", "bar", "Baz", "hello", "World"], "") -> "BazFooWorldbarfoohello"
(["123", "321", "456", "654", "789", "987"], "") -> "123321456654789987"
        }
    }
}

problem Generated/1157 {
code {
        func sort_and_join(items: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "pear"], ", ") -> "apple, banana, orange, pear"
(["hello", "world", "python"], " ") -> "hello python world"
(["5", "2", "8", "1", "9"], "") -> "12589"
(["foo", "bar", "hello", "world"], " ") -> "bar foo hello world"
([], ", ") -> ""
        }
    }
}

problem Generated/1158 {
code {
        func sort_and_join_words(words: list<string>, join_str: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "Cat", "dog"], ", ") -> "apple, banana, Cat, dog"
(["this", "is", "a", "test"], " ") -> "a is test this"
(["Python", "Java", "C++", "Scala"], ", ") -> "C++, Java, Python, Scala"
(["A", "B", "C", "D"], "") -> "ABCD"
([], ", ") -> ""
        }
    }
}

problem Generated/1159 {
code {
        func sort_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Orange", "BANANA", "Cherry"]) -> ["apple", "BANANA", "Cherry", "Orange"]
(["Cat", "dog", "elephant", "Ant"]) -> ["Ant", "Cat", "dog", "elephant"]
([]) -> []
(["a", "b", "c", "d", "e"]) -> ["a", "b", "c", "d", "e"]
(["Zebra", "Lion", "Tiger", "Elephant", "monkey"]) -> ["Elephant", "Lion", "monkey", "Tiger", "Zebra"]
        }
    }
}

problem Generated/1160 {
code {
        func sort_list_of_strings(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["cat", "dog", "apple", "banana", "Fish"]) -> ["apple", "banana", "cat", "dog", "fish"]
(["blue", "green", "RED", "yellow", "PURPLE"]) -> ["blue", "green", "purple", "red", "yellow"]
(["alpha", "BETA", "Gamma", "DELTA"]) -> ["alpha", "beta", "delta", "gamma"]
([]) -> []
(["Paper", "Rock", "Scissors"]) -> ["paper", "rock", "scissors"]
        }
    }
}

problem Generated/1161 {
code {
        func sort_list_of_strings(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Banana", "Orange", "grapes", "Pineapple"]) -> ["apple", "Banana", "grapes", "Orange", "Pineapple"]
(["dog", "Cat", "Rabbit", "hamster"]) -> ["Cat", "dog", "hamster", "Rabbit"]
(["python", "java", "ruby", "Go", "Scala", "Perl"]) -> ["Go", "java", "Perl", "python", "ruby", "Scala"]
(["Python", "Java", "Ruby", "Go", "Scala", "Perl"]) -> ["Go", "Java", "Perl", "Python", "Ruby", "Scala"]
(["python", "java", "1C", "Go", "Scala", "Perl"]) -> ["1C", "Go", "java", "Perl", "python", "Scala"]
        }
    }
}

problem Generated/1162 {
code {
        func sort_strings_ignore_case(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Banana", "cherry", "date", "eggplant"]) -> ["apple", "Banana", "cherry", "date", "eggplant"]
(["Zebra", "apple", "banana", "Date", "cherry"]) -> ["apple", "banana", "cherry", "Date", "Zebra"]
([]) -> []
(["Hello", "World", "In", "Python"]) -> ["Hello", "In", "Python", "World"]
(["HAllo", "aLpha", "beTA", "DAte"]) -> ["aLpha", "beTA", "DAte", "HAllo"]
        }
    }
}

problem Generated/1163 {
code {
        func sort_strings_case_insensitive(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "banana", "cherry", "date"]) -> ["Apple", "banana", "cherry", "date"]
(["apple", "banana", "cherry", "date"]) -> ["apple", "banana", "cherry", "date"]
(["apple", "banana", "Cherry", "date"]) -> ["apple", "banana", "Cherry", "date"]
([]) -> []
(["A", "b", "c", "D", "e"]) -> ["A", "b", "c", "D", "e"]
        }
    }
}

problem Generated/1164 {
code {
        func sort_strings_ignore_case(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "cat", "Ball", "Dog"]) -> ["apple", "Ball", "cat", "Dog"]
(["Orange", "banana", "apple", "grape"]) -> ["apple", "banana", "grape", "Orange"]
(["A", "b", "C", "d"]) -> ["A", "b", "C", "d"]
(["zebra", "Ant", "lion", "Bear"]) -> ["Ant", "Bear", "lion", "zebra"]
([]) -> []
        }
    }
}

problem Generated/1165 {
code {
        func sort_strings_uppercase(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date", "Elderberry"]) -> ["APPLE", "BANANA", "CHERRY", "DATE", "ELDERBERRY"]
(["cat", "dog", "elephant", "fish", "goat", "hippo"]) -> ["CAT", "DOG", "ELEPHANT", "FISH", "GOAT", "HIPPO"]
([]) -> []
(["Python", "Java", "Ruby", "C++"]) -> ["C++", "JAVA", "PYTHON", "RUBY"]
(["alpha", "bravo", "charlie", "delta", "echo", "foxtrot"]) -> ["ALPHA", "BRAVO", "CHARLIE", "DELTA", "ECHO", "FOXTROT"]
        }
    }
}

problem Generated/1166 {
code {
        func sort_string_list_case_insensitive(string_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Mango", "Banana", "Pineapple"]) -> ["apple", "Banana", "Mango", "Pineapple"]
(["Zebra", "tiger", "Lion", "elephant"]) -> ["elephant", "Lion", "tiger", "Zebra"]
(["CAT", "Dog", "fish", "Bird", "RABBIT"]) -> ["Bird", "CAT", "Dog", "fish", "RABBIT"]
([]) -> []
(["a", "B", "c", "D", "e"]) -> ["a", "B", "c", "D", "e"]
        }
    }
}

problem Generated/1167 {
code {
        func sort_str_list(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "Cat", "dog", "Elephant"]) -> ["APPLE", "BANANA", "CAT", "DOG", "ELEPHANT"]
(["Python", "java", "C", "C++", "Ruby"]) -> ["C", "C++", "JAVA", "PYTHON", "RUBY"]
(["hello", "world"]) -> ["HELLO", "WORLD"]
([]) -> []
(["Apple"]) -> ["APPLE"]
        }
    }
}

problem Generated/1168 {
code {
        func sort_and_uppercase(str_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"]) -> ["APPLE", "BANANA", "CHERRY", "DATE"]
(["a", "B", "c", "D"]) -> ["A", "B", "C", "D"]
(["123", "45", "6789", "0"]) -> ["0", "123", "45", "6789"]
(["Hello", "world", "!", "Hello"]) -> ["!", "HELLO", "HELLO", "WORLD"]
(["Z", "a", "B", "c", "D"]) -> ["A", "B", "C", "D", "Z"]
        }
    }
}

problem Generated/1169 {
code {
        func sort_list_case_insensitive(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Orange", "grape", "Banana"]) -> ["apple", "Banana", "grape", "Orange"]
(["rose", "lily", "tulip", "Daisy"]) -> ["Daisy", "lily", "rose", "tulip"]
(["Hello", "Python", "world", "is", "awesome"]) -> ["awesome", "Hello", "is", "Python", "world"]
(["This", "is", "a", "test", "for", "sorting"]) -> ["a", "for", "is", "sorting", "test", "This"]
(["A", "B", "C", "D", "E"]) -> ["A", "B", "C", "D", "E"]
        }
    }
}

problem Generated/1170 {
code {
        func sort_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"]) -> ["APPLE", "BANANA", "CHERRY", "DATE"]
(["dog", "Cat", "Mouse", "Horse"]) -> ["CAT", "DOG", "HORSE", "MOUSE"]
(["Grapes", "mango", "Pineapple", "orange"]) -> ["GRAPES", "MANGO", "ORANGE", "PINEAPPLE"]
([]) -> []
(["hello", "world"]) -> ["HELLO", "WORLD"]
        }
    }
}

problem Generated/1171 {
code {
        func sort_lowercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["dog", "Cat", "apple", "BAnana"]) -> ["apple", "dog"]
([]) -> []
(["a", "b", "c"]) -> ["a", "b", "c"]
(["Zebra", "cat", "dog", "Fish"]) -> ["cat", "dog"]
(["apple", "banana", "cherry", "date", "Eggplant"]) -> ["apple", "banana", "cherry", "date"]
        }
    }
}

problem Generated/1172 {
code {
        func sort_lowercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "Cat", "dog", "Elephant"]) -> ["apple", "banana", "dog"]
(["Foo", "bar", "InTerNeT", "python"]) -> ["bar", "python"]
([]) -> []
(["python", "Python", "PYTHON"]) -> ["python"]
(["a", "aa", "aaa"]) -> ["a", "aa", "aaa"]
        }
    }
}

problem Generated/1173 {
code {
        func sort_lower_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World", "Python", "is", "Awesome"]) -> ["is"]
(["AbC", "Def", "Ghi", "jkl", "Mno"]) -> ["jkl"]
([]) -> []
(["a", "b", "c", "d", "e"]) -> ["a", "b", "c", "d", "e"]
(["A", "B", "C", "D", "E"]) -> []
        }
    }
}

problem Generated/1174 {
code {
        func sort_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Abc", "DEF", "abc", "def", "GHI"]) -> ["DEF", "GHI"]
(["QWERTY", "ASDF", "zxcv"]) -> ["ASDF", "QWERTY"]
([]) -> []
(["xyz", "ABC", "123"]) -> ["ABC"]
(["A", "B", "C", "D"]) -> ["A", "B", "C", "D"]
        }
    }
}

problem Generated/1175 {
code {
        func sort_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "!", "Python", "3.8"]) -> ["Python", "hello", "world"]
(["", " ", "123", "!@$#", "abc"]) -> ["abc"]
(["elephant", "DOG", "cat", "Lion"]) -> ["DOG", "Lion", "cat", "elephant"]
(["good", "bad", "ugly", "awesome"]) -> ["awesome", "bad", "good", "ugly"]
(["a", "b", "c", "d", "e"]) -> ["a", "b", "c", "d", "e"]
        }
    }
}

problem Generated/1176 {
code {
        func sort_alpha_strings(str_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date", "1024", "#hashtag"]) -> ["apple", "banana", "cherry", "date"]
(["Zebra", "elephant", "giraffe", "lion", "tiger"]) -> ["Zebra", "elephant", "giraffe", "lion", "tiger"]
(["apple", "banana", "Cherry", "date", "1024", "#hashtag"]) -> ["Cherry", "apple", "banana", "date"]
(["", " ", "  ", "a", "ab", "abc", "123"]) -> ["a", "ab", "abc"]
(["carrot", "apple", "banana", "Cherry", "date", "1024", "#hashtag"]) -> ["Cherry", "apple", "banana", "carrot", "date"]
        }
    }
}

problem Generated/1177 {
code {
        func sort_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["a", "b", "c", "d", "e", "f"]) -> ["a", "b", "c", "d", "e", "f"]
(["d", "e", "f", "a", "b", "c"]) -> ["a", "b", "c", "d", "e", "f"]
(["abc", "def", "ghi"]) -> ["abc", "def", "ghi"]
(["def", "abc", "123", "ghi"]) -> ["abc", "def", "123", "ghi"]
(["def", "abc", "123", "ghi", "xyz"]) -> ["abc", "def", "123", "ghi", "xyz"]
        }
    }
}

problem Generated/1178 {
code {
        func sort_string_based_on_digits(input_s: string) -> string
    }
    tests {
        template nse {
            ("a5bcd3efg6hi2jk1") -> "abcdefghijk12356"
("ab9cd5efg2hi1jkl3mnopq4rst0uvwxy6z") -> "abcdefghijklmnopqrstuvwxyz01234569"
("123ab456cd7") -> "abcd1234567"
("abcde") -> "abcde"
("321") -> "321"
        }
    }
}

problem Generated/1179 {
code {
        func sort_string_based_on_digits(str_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["abc123", "def456", "ghi789", "jklmno", "123", "456", "789"]) -> ["123", "456", "789", "abc123", "def456", "ghi789", "jklmno"]
(["a1b2c3", "d4e5f6", "g7h8i9", "jklmno", "1", "2", "3"]) -> ["1", "2", "3", "a1b2c3", "d4e5f6", "g7h8i9", "jklmno"]
(["a", "b", "c", "1", "2", "3"]) -> ["1", "2", "3", "a", "b", "c"]
(["a2b1c3", "d4e5f6", "g7h8i9", "jklmno", "1", "2", "3"]) -> ["1", "2", "3", "a2b1c3", "d4e5f6", "g7h8i9", "jklmno"]
(["a1b1c1", "a2b2c2", "a3b3c3"]) -> ["a1b1c1", "a2b2c2", "a3b3c3"]
        }
    }
}

problem Generated/1180 {
code {
        func sort_list_based_on_number_in_string(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["word2", "word3", "word1", "word4", "word10", "word11"]) -> ["word1", "word2", "word3", "word4", "word10", "word11"]
(["hello1", "world2", "3sun"]) -> ["hello1", "world2", "3sun"]
(["a1", "b2", "c3", "123", "4d"]) -> ["a1", "b2", "c3", "4d", "123"]
([]) -> []
(["word", "another", "one"]) -> ["word", "another", "one"]
        }
    }
}

problem Generated/1181 {
code {
        func sort_list_of_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["a", "b", "c", "d"]) -> ["a", "b", "c", "d"]
(["b", "a", "c", "d"]) -> ["a", "b", "c", "d"]
(["1", "2", "3", "4"]) -> ["1", "2", "3", "4"]
(["1", "2", "3", "4", "a", "b", "c"]) -> ["1", "2", "3", "4", "a", "b", "c"]
(["1", "2", "a", "3", "4", "b", "c"]) -> ["1", "2", "3", "4", "a", "b", "c"]
        }
    }
}

problem Generated/1182 {
code {
        func sort_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "orange", "kiwi"], "a") -> ["apple"]
(["apple", "banana", "cherry", "orange", "kiwi"], "b") -> ["banana"]
(["apple", "banana", "cherry", "orange", "kiwi"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "orange", "kiwi"], "k") -> ["kiwi"]
(["apple", "banana", "cherry", "orange", "kiwi"], "z") -> []
        }
    }
}

problem Generated/1183 {
code {
        func sort_string_list(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "Acid", "cat", "Alphabet"]) -> ["Acid", "Alphabet", "apple", "banana", "cat"]
(["alpha", "beta", "gamma", "delta", "epsilon"]) -> ["alpha", "beta", "delta", "epsilon", "gamma"]
(["Airel", "Bella", "alice", "bob", "amber"]) -> ["Airel", "alice", "amber", "Bella", "bob"]
(["ant", "Antique", "bear", "ball", "atlas"]) -> ["Antique", "ant", "atlas", "ball", "bear"]
([]) -> []
        }
    }
}

problem Generated/1184 {
code {
        func sort_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "ant", "banana", "anchor", "cat"], "a") -> ["anchor", "ant", "apple"]
(["apple", "ant", "banana", "anchor", "cat"], "b") -> ["banana"]
([], "a") -> []
(["ant", "antenna", "antique", "bat", "ban"], "an") -> ["ant", "antenna", "antique"]
(["apple", "ant", "banana", "anchor", "cat"], "") -> ["anchor", "ant", "apple", "banana", "cat"]
        }
    }
}

problem Generated/1185 {
code {
        func sort_strings_starting_with(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "avocado", "orange", "pear"], "a") -> ["apple", "avocado"]
(["apple", "banana", "avocado", "orange", "pear"], "b") -> ["banana"]
(["apple", "banana", "avocado", "orange", "pear"], "p") -> ["pear"]
(["apple", "banana", "avocado", "orange", "pear"], "xyz") -> []
([], "a") -> []
        }
    }
}

problem Generated/1186 {
code {
        func sort_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "kiwi", "orange"], "a") -> ["apple", "apricot"]
(["football", "cricket", "hockey", "basketball", "tennis"], "cric") -> ["cricket"]
(["python", "java", "c++", "javascript", "swift", "go"], "j") -> ["java", "javascript"]
(["car", "bus", "train", "plane", "ship"], "x") -> []
(["mythology", "history", "geography", "science"], "m") -> ["mythology"]
        }
    }
}

problem Generated/1187 {
code {
        func get_sorted_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date", "coconut"], "c") -> ["cherry", "coconut"]
(["elephant", "lion", "tiger", "crocodile", "zebra"], "l") -> ["lion"]
(["Sam", "John", "Alex", "Katie", "Sophie", "Samantha"], "") -> ["Alex", "John", "Katie", "Sam", "Samantha", "Sophie"]
(["a", "aa", "aaa", "aaaa", "aaaaa"], "aa") -> ["aa", "aaa", "aaaa", "aaaaa"]
(["1", "11", "111", "2", "22", "222"], "2") -> ["2", "22", "222"]
        }
    }
}

problem Generated/1188 {
code {
        func sort_string_list_by_prefix(str_lst: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["abc", "acd", "bcd", "def"], "a") -> ["abc", "acd"]
(["abc", "acd", "bcd", "def"], "d") -> ["def"]
(["abc", "acd", "abcd", "def"], "ab") -> ["abc", "abcd"]
(["abc", "acd", "bcd", "def"], "") -> ["abc", "acd", "bcd", "def"]
(["abc", "acd", "bcd", "def"], "e") -> []
        }
    }
}

problem Generated/1189 {
code {
        func get_sorted_string_list(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "durian", "elderberry"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "durian", "elderberry"], "a") -> ["apple"]
(["apple", "banana", "cherry", "durian", "elderberry"], "d") -> ["durian"]
(["apple", "banana", "cherry", "durian", "elderberry"], "z") -> []
([], "a") -> []
        }
    }
}

problem Generated/1190 {
code {
        func sort_strings_starting_with(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
(["apple", "banana", "cherry", "date"], "") -> ["apple", "banana", "cherry", "date"]
(["apple", "banana", "cherry", "date"], "e") -> []
        }
    }
}

problem Generated/1191 {
code {
        func sort_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "") -> ["apple", "banana", "cherry", "date"]
(["apple", "banana", "cherry", "date"], "z") -> []
(["alpha", "beta", "gamma", "delta"], "g") -> ["gamma"]
(["hello", "world", "Python", "programming"], "pro") -> ["programming"]
        }
    }
}

problem Generated/1192 {
code {
        func sort_list_and_append(elements: list<int>, to_applast: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 6], [5, 7, 8, 9]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
([5, 4, 3, 2, 1], [6, 7, 8, 9]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
([1, 2, 3, 4, 6], []) -> [1, 2, 3, 4, 6]
([], [5, 7, 8, 9]) -> [5, 7, 8, 9]
([3, 2, 1], [1, 2, 3]) -> [1, 1, 2, 2, 3, 3]
        }
    }
}

problem Generated/1193 {
code {
        func sort_list_and_pop(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 5, 2, 4, 3]) -> [5, 4, 3, 2, 1]
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
([1, 1, 1, 1, 1]) -> [1, 1, 1, 1, 1]
([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([1]) -> [1]
        }
    }
}

problem Generated/1194 {
code {
        func sort_list_and_pop_largest(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([7, 3, 5, 9, 6]) -> 9
([1, 7, 4, 9, 5]) -> 9
([1, 7, 4, 9]) -> 9
([5, 4, 3, 2, 1]) -> 5
        }
    }
}

problem Generated/1195 {
code {
        func pop_largest_n_elements(elements: list<int>, n: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [5, 4, 3]
([7, 3, 5, 9, 6], 2) -> [9, 7]
([1, 7, 4, 9, 5], 5) -> [9, 7, 5, 4, 1]
([1, 7, 4, 9, 5], 0) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> [8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/1196 {
code {
        func sort_list_asc_desc(elements: list<int>, sort_order: string) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], "ASC") -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5], "DESC") -> [5, 4, 3, 2, 1]
([5, 4, 3, 2, 1], "ASC") -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1], "DESC") -> [5, 4, 3, 2, 1]
([], "ASC") -> []
([1], "DESC") -> [1]
        }
    }
}

problem Generated/1197 {
code {
        func sort_list_with_order(elements: list<int>, order: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [1,2,3,4,5]) -> [1, 2, 3, 4, 5]
([3, 1, 4, 2, 5], [1,2,3,4,5]) -> [1, 2, 3, 4, 5]
([3, 1, 4, 2, 5], [5,4,3,2,1]) -> [5, 4, 3, 2, 1]
([3, 2, 2, 1, 5], [1,2,3,4,5]) -> [1, 2, 2, 3, 5]
([1, 2, 3, 4, 5], [5,4,3,2,1]) -> [5, 4, 3, 2, 1]
        }
    }
}

problem Generated/1198 {
code {
        func sort_and_reverse(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [9, 7, 6, 5, 3]
([1, 7, 4, 9, 5]) -> [9, 7, 5, 4, 1]
([1, 7, 4, 9, 5, -3]) -> [9, 7, 5, 4, 1, -3]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/1199 {
code {
        func reverse_sorted_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
([1, 3, 2, 4, 5]) -> [5, 4, 3, 2, 1]
([1, 1, 1, 1, 1]) -> [1, 1, 1, 1, 1]
([]) -> []
        }
    }
}

problem Generated/1200 {
code {
        func sort_and_reverse(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
([1, 3, 2, 5, 4]) -> [5, 4, 3, 2, 1]
([1, 1, 1, 1, 1]) -> [1, 1, 1, 1, 1]
([]) -> []
        }
    }
}

problem Generated/1201 {
code {
        func get_sorted_list_desc(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([5, 1, 3, 4, 2]) -> [5, 4, 3, 2, 1]
([5, 5, 5, 5, 5]) -> [5, 5, 5, 5, 5]
([6, 2, 7, 1, 9, 8, 5]) -> [9, 8, 7, 6, 5, 2, 1]
([]) -> []
        }
    }
}

problem Generated/1202 {
code {
        func sort_list_desc_order(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 7, 4, 9, 5]) -> [9, 7, 5, 4, 1]
([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
([]) -> []
([1]) -> [1]
        }
    }
}

problem Generated/1203 {
code {
        func sorted_and_reversed_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([4, 2, 9, 1, 6, 3]) -> [9, 6, 4, 3, 2, 1]
([5, 5, 5, 5, 5]) -> [5, 5, 5, 5, 5]
([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([2, 2, 3, 3, 1, 1]) -> [3, 3, 2, 2, 1, 1]
([]) -> []
        }
    }
}

problem Generated/1204 {
code {
        func sort_and_reverse_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([3, 1, 4, 2, 5]) -> [5, 4, 3, 2, 1]
([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
([]) -> []
([1]) -> [1]
        }
    }
}

problem Generated/1205 {
code {
        func sort_and_reverse_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
([1, 3, 2, 5, 4]) -> [5, 4, 3, 2, 1]
([-1, 0, -2, 2, 1]) -> [2, 1, 0, -1, -2]
([5, 5, 5, 5, 0]) -> [5, 5, 5, 5, 0]
        }
    }
}

problem Generated/1206 {
code {
        func sort_list_with_copy(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [5.0, 4.0, 3.0, 2.0, 1.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [-1.0, -2.0, -3.0, -4.0, -5.0]
([5.0, 4.0, 3.0, 2.0, 1.0]) -> [5.0, 4.0, 3.0, 2.0, 1.0]
([1.0, -2.0, 3.0, -4.0, 5.0]) -> [5.0, 3.0, 1.0, -2.0, -4.0]
([]) -> []
        }
    }
}

problem Generated/1207 {
code {
        func sort_list_without_modifying_original(original_lst: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([10, 1, 7, 5, 3, 2]) -> [1, 2, 3, 5, 7, 10]
([1]) -> [1]
([3, -1, 0, 7, 4]) -> [-1, 0, 3, 4, 7]
([]) -> []
        }
    }
}

problem Generated/1208 {
code {
        func sort_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 5, 2, 4, 3]) -> [1, 2, 3, 4, 5]
([]) -> []
([1, 2, 2, 3, 3, 3, 4, 5, 5]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/1209 {
code {
        func sort_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 2, 3, 4, 5, 5]) -> [1, 2, 3, 4, 5]
([7, 3, 5, 9, 6]) -> [3, 5, 6, 7, 9]
([-7, -3, 0, 9, 6]) -> [-7, -3, 0, 6, 9]
([1, 1, 1, 1, 1]) -> [1]
([]) -> []
([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/1210 {
code {
        func sort_list_copy(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([5, 3, 2, 4, 1]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
([9, 8, 7, 6, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
([-1, -2, 3, 4, 5]) -> [-2, -1, 3, 4, 5]
        }
    }
}

problem Generated/1211 {
code {
        func sort_list_and_make_unique(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 3, 2, 4, 3, 5, 5, 5, 2, 0]) -> [0, 1, 2, 3, 4, 5]
([1, 2, 2, 2, 3, 3, 4, 4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
        }
    }
}

problem Generated/1212 {
code {
        func sort_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 3, 2, 2, 4, 1, 5, 3]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 2, 1, 4, 5, 3, 4, 5, 6, 7, 6, 8]) -> [1, 2, 3, 4, 5, 6, 7, 8]
([1, 1, 1, 1, 1, 1, 1]) -> [1]
        }
    }
}

problem Generated/1213 {
code {
        func sort_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([3, 2, 1, 2, 3, 4, 5, 4]) -> [1, 2, 3, 4, 5]
([1, 3, 2, 4, 5]) -> [1, 2, 3, 4, 5]
([1, -2, 1, -2, -1]) -> [-2, -1, 1]
([1]) -> [1]
([]) -> []
        }
    }
}

problem Generated/1214 {
code {
        func unique_sorted_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 2, 3, 4, 1]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
([1]) -> [1]
([3, 1, 4, 2, 3, 1]) -> [1, 2, 3, 4]
        }
    }
}

problem Generated/1215 {
code {
        func unique_sorted_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 2, 3, 3, 5, 5]) -> [1, 2, 3, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([10, 5, 5, 3, 8, 8, 2, 2]) -> [2, 3, 5, 8, 10]
([0, 0, 0, 0, 0]) -> [0]
        }
    }
}

problem Generated/1216 {
code {
        func sort_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 2, 2, 3, 4, 4, 4, 5, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 3, 4, 4, 5, 5, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/1217 {
code {
        func sort_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([2, 1, 3, 1, 2, 3, 4, 4, 5]) -> [1, 2, 3, 4, 5]
([2, 4, 1, 3, 5, 1, 3, 2, 4, 5]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/1218 {
code {
        func sort_and_remove_duplicates(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apple", "lemon", "banana"]) -> ["apple", "banana", "lemon"]
(["cat", "dog", "cow", "dog", "elephant", "cat"]) -> ["cat", "cow", "dog", "elephant"]
([]) -> []
(["hello", "world"]) -> ["hello", "world"]
(["python", "python", "python"]) -> ["python"]
        }
    }
}

problem Generated/1219 {
code {
        func sort_list_and_remove_duplicates(lst: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([3, 4, 1, 5, 2]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1]) -> [1]
([]) -> []
([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) -> [1, 2, 3, 4]
        }
    }
}

problem Generated/1220 {
code {
        func sort_and_floor(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 3.6, 2.5, 4.1]) -> [1, 2, 3, 4]
([5.9, 4.2, 3.3, 7.8, 2.1]) -> [2, 3, 4, 5, 7]
([2.0, 3.0, 4.0, 5.0]) -> [2, 3, 4, 5]
([1.6, 3.2, 4.5, 2.1]) -> [1, 2, 3, 4]
([4.1, 3.9, 4.2, 3.8]) -> [3, 3, 4, 4]
        }
    }
}

problem Generated/1221 {
code {
        func sort_and_floor(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([3.7, 2.1, 4.9, 1.8]) -> [1, 2, 3, 4]
([9.8, 1.2, 5.6, 3.4, 7.0]) -> [1, 3, 5, 7, 9]
([11.9, 2.4, 6.7, 3.2]) -> [2, 3, 6, 11]
([7.3, 2.8, 6.1, 5.5, 1.7, 4.9]) -> [1, 2, 4, 5, 6, 7]
([1.5, 2.5, 3.5, 4.5]) -> [1, 2, 3, 4]
        }
    }
}

problem Generated/1222 {
code {
        func sort_list_elements_rounded_down(elements: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 2.3, 3.4, 4.5, 5.6]) -> [1, 2, 3, 4, 5]
([1.2, 2.3, 3.4, 4.5, 0.6]) -> [0, 1, 2, 3, 4]
([1.234, 3.456, 5.678]) -> [1, 3, 5]
([1.234, 3.456, 5.678, 9.999]) -> [1, 3, 5, 9]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/1223 {
code {
        func sort_and_floor(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 3.7, 4.5, 2.1, 5.4]) -> [1, 2, 3, 4, 5]
([4.8, 3.2, 2.1, 5.5, 6.3]) -> [2, 3, 4, 5, 6]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 2, 3, 4, 5]
([6.0, 5.0, 4.0, 3.0, 2.0]) -> [2, 3, 4, 5, 6]
([4.5, 4.5, 4.5, 4.5]) -> [4, 4, 4, 4]
        }
    }
}

problem Generated/1224 {
code {
        func sort_list_and_get_chunk(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 7, 4, 9, 5], 2) -> [[1, 4], [5, 7], [9]]
([7, 3, 5, 9, 6], 3) -> [[3, 5, 6], [7, 9]]
([1, 2, 3, 4, 5], 1) -> [[1], [2], [3], [4], [5]]
([1, 7, 4, 9, 5], 10) -> [[1, 4, 5, 7, 9]]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8]]
        }
    }
}

problem Generated/1225 {
code {
        func sort_list_and_get_subsets(elements: list<int>, subset_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([7, 3, 5, 9, 6], 3) -> [[3, 5, 6], [7, 9]]
([1, 7, 4, 9, 5], 1) -> [[1], [4], [5], [7], [9]]
([1, 7, 4, 9, 5], 5) -> [[1, 4, 5, 7, 9]]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8]]
        }
    }
}

problem Generated/1226 {
code {
        func sort_numbers_and_square_root(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([4.0, 16.0, 1.0, 9.0, 25.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([9.0, 16.0, 4.0, 25.0, 1.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979]
([5.0, 4.0, 3.0, 2.0, 1.0]) -> [1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979]
([0.0, 1.0, 2.0, 3.0, 4.0, 5.0]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979]
        }
    }
}

problem Generated/1227 {
code {
        func sort_list_of_squares(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 1, 1, 2, 2]
([6, 7, 8, 9, 10]) -> [2, 2, 2, 3, 3]
([121, 144, 169, 196, 225]) -> [11, 12, 13, 14, 15]
([0, 2, 4, 6, 8]) -> [0, 1, 2, 2, 2]
([5, 10, 15, 20, 25]) -> [2, 3, 3, 4, 5]
        }
    }
}

problem Generated/1228 {
code {
        func sort_list_by_power(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([3, 4, 2, 1, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([0, 1, -1, 2, -2]) -> [0, 1, -1, 2, -2]
([]) -> []
        }
    }
}

problem Generated/1229 {
code {
        func sort_list_based_on_power(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([5, 2, 3, 1, 4]) -> [1, 2, 3, 4, 5]
([0, 10, -1, 7, 3]) -> [0, -1, 3, 7, 10]
([-5, -2, -3, -1, -4]) -> [-1, -2, -3, -4, -5]
([1, 9, 8, 6, 3, 2, 4, 7, 5]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
([2, 4, 8, 16, 32]) -> [2, 4, 8, 16, 32]
        }
    }
}

problem Generated/1230 {
code {
        func sort_and_reduce(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 12345
([5, 4, 3, 2, 1]) -> 12345
([3, 1, 4]) -> 134
([9, 8, 7, 6]) -> 6789
([3]) -> 3
        }
    }
}

problem Generated/1231 {
code {
        func multiply_and_sort(numbers: list<int>, factor: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [2, 4, 6, 8, 10]
([7, 3, 5, 9, 6], -1) -> [-9, -7, -6, -5, -3]
([1, 7, 4, 9, 5], 5) -> [5, 20, 25, 35, 45]
([1, 7, 4, 9, 5], 0) -> [0, 0, 0, 0, 0]
([1, 2, 3, 4, 5, 6, 7, 8], -2) -> [-16, -14, -12, -10, -8, -6, -4, -2]
        }
    }
}

problem Generated/1232 {
code {
        func merge_sort_lists(lists: list<list<int>>) -> list<int>
    }
    tests {
        template nse {
            ([[1, 3, 5], [2, 4, 6], [7, 8, 9]]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
([[1, 5], [2], [7, 3, 6, 4]]) -> [1, 2, 3, 4, 5, 6, 7]
([[], [1, 2, 3], [], [4], [5, 6]]) -> [1, 2, 3, 4, 5, 6]
([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
([[1, 2, 3]]) -> [1, 2, 3]
        }
    }
}

problem Generated/1233 {
code {
        func get_even_numbers(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [2, 4]
(10) -> [2, 4, 6, 8, 10]
(15) -> [2, 4, 6, 8, 10, 12, 14]
(20) -> [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
(0) -> []
        }
    }
}

problem Generated/1234 {
code {
        func get_even_numbers_from_range(start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            (1, 10) -> [2, 4, 6, 8]
(0, 11) -> [0, 2, 4, 6, 8, 10]
(2, 20) -> [2, 4, 6, 8, 10, 12, 14, 16, 18]
(3, 9) -> [4, 6, 8]
(1, 1) -> []
        }
    }
}

problem Generated/1235 {
code {
        func get_even_numbers(limit: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [2, 4, 6, 8, 10]
(15) -> [2, 4, 6, 8, 10, 12, 14]
(5) -> [2, 4]
(1) -> []
(20) -> [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
        }
    }
}

problem Generated/1236 {
code {
        func filter_int_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["123", "456", "789"]) -> ["123", "456", "789"]
(["a", "b", "c"]) -> []
(["123", "hello", "world", "456"]) -> ["123", "456"]
([]) -> []
([""]) -> []
        }
    }
}

problem Generated/1237 {
code {
        func is_all_uppercase_strings(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON"]) -> true
(["HELLO", "WORLD", "pyThon"]) -> false
(["hello", "python", "world"]) -> false
(["", " ", ""]) -> false
([]) -> true
        }
    }
}

problem Generated/1238 {
code {
        func sum_of_integers_in_string_list(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"]) -> 15
(["1", "2", "abc", "4", "5"]) -> 12
(["1", "-2", "3", "4", "5"]) -> 13
([]) -> 0
(["10", "20", "30", "40", "50"]) -> 150
        }
    }
}

problem Generated/1239 {
code {
        func split_string_only_alpha(input_s: string) -> list<string>
    }
    tests {
        template nse {
            ("Hi, I am a string!") -> ["Hi", "I", "am", "a", "string"]
("Another test without any punctuations") -> ["Another", "test", "without", "any", "punctuations"]
("123 456 789") -> []
("A test with numbers 1234") -> ["A", "test", "with", "numbers"]
("") -> []
        }
    }
}

problem Generated/1240 {
code {
        func generate_alphabets(start: int, last: int) -> list<string>
    }
    tests {
        template nse {
            (1, 4) -> ["b", "c", "d"]
(0, 2) -> ["a", "b"]
(20, 26) -> ["u", "v", "w", "x", "y", "z"]
(1, 1) -> []
(5, 10) -> ["f", "g", "h", "i", "j"]
        }
    }
}

problem Generated/1241 {
code {
        func generate_alphabets(start_idx: int, end_idx: int) -> list<string>
    }
    tests {
        template nse {
            (1, 6) -> ["b", "c", "d", "e", "f"]
(0, 3) -> ["a", "b", "c"]
(2, 7) -> ["c", "d", "e", "f", "g"]
(4, 8) -> ["e", "f", "g", "h"]
(15, 18) -> ["p", "q", "r"]
        }
    }
}

problem Generated/1242 {
code {
        func get_string_from_ascii(ascii_lst: list<int>) -> string
    }
    tests {
        template nse {
            ([65, 66, 67, 68, 69]) -> "ABCDE"
([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]) -> "Hello World"
([104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]) -> "hello world"
([120, 121, 122, 91, 93, 92, 94, 95, 96]) -> "xyz[]\\^_`"
([]) -> ""
        }
    }
}

problem Generated/1243 {
code {
        func convert_list_to_ascii(elements: list<int>) -> string
    }
    tests {
        template nse {
            ([65, 66, 67, 68, 69, 70]) -> "ABCDEF"
([84, 101, 115, 116, 32, 83, 116, 114, 105, 110, 103]) -> "Test String"
([72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100]) -> "Hello, World"
([104, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]) -> "hello World!"
([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, -1, 128]) -> "Hello World!"
        }
    }
}

problem Generated/1244 {
code {
        func convert_list_to_string(string_codes: list<int>) -> string
    }
    tests {
        template nse {
            ([97, 98, 99, 100, 101]) -> "abcde"
([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]) -> "Hello World"
([119, 111, 114, 107, 32, 102, 114, 111, 109, 32, 104, 111, 109, 101]) -> "work from home"
([73, 32, 99, 97, 110, 32, 99, 111, 100, 101, 32, 105, 110, 32, 112, 121, 116, 104, 111, 110, 63]) -> "I can code in python?"
([77, 97, 107, 101, 32, 116, 104, 101, 32, 109, 111, 115, 116, 32, 111, 102, 32, 105, 116]) -> "Make the most of it"
        }
    }
}

problem Generated/1245 {
code {
        func convert_list_to_string(elements: list<int>) -> string
    }
    tests {
        template nse {
            ([65, 66, 67, 68, 69, 70]) -> "ABCDEF"
([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]) -> "Hello World"
([103, 111, 111, 100, 98, 121, 101]) -> "goodbye"
([72, -101, -108, 108, 111, 32, 87, -111, 114, 108, 100]) -> "Hello World"
([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]) -> "Hello World"
        }
    }
}

problem Generated/1246 {
code {
        func find_smallest_ascii(words: list<string>) -> string
    }
    tests {
        template nse {
            (["abc", "def", "xyz"]) -> "abc"
(["abc", "def", "xyz", "lmn"]) -> "abc"
(["abc", "def", "xyz", "efg"]) -> "abc"
(["aaa", "bbb", "ccc"]) -> "aaa"
(["ff", "c", "aa", "z"]) -> "c"
        }
    }
}

problem Generated/1247 {
code {
        func get_string_from_ascii(numbers: list<int>) -> string
    }
    tests {
        template nse {
            ([65, 66, 67, 68, 69]) -> "ABCDE"
([72, 101, 108, 108, 111]) -> "Hello"
([119, 111, 114, 108, 100]) -> "world"
([83, 111, 109, 101, 32, 101, 120, 97, 109, 112, 108, 101, 115]) -> "Some examples"
([73, 32, 108, 111, 118, 101, 32, 80, 121, 116, 104, 111, 110]) -> "I love Python"
        }
    }
}

problem Generated/1248 {
code {
        func get_string_from_ascii(ascii_lst: list<int>) -> string
    }
    tests {
        template nse {
            ([65, 66, 67, 68]) -> "ABCD"
([97, 98, 99, 100]) -> "abcd"
([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]) -> "Hello World!"
([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]) -> "Hello World"
([104, 101, 108, 108, 111]) -> "hello"
        }
    }
}

problem Generated/1249 {
code {
        func convert_int_list_to_string(numbers: list<int>) -> string
    }
    tests {
        template nse {
            ([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]) -> "Hello World"
([65, 66, 67, 68, 69]) -> "ABCDE"
([116, 101, 115, 116]) -> "test"
([97, 98, 99, 32, 100, 101, 102]) -> "abc def"
([]) -> ""
        }
    }
}

problem Generated/1250 {
code {
        func sort_by_ascii_val(values: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([97, 98, 99, 100]) -> ["a", "b", "c", "d"]
([105, 111, 117, 101, 97]) -> ["a", "e", "i", "o", "u"]
([65, 66, 67, 68, 69, 90, 89, 88, 87, 86]) -> ["A", "B", "C", "D", "E", "V", "W", "X", "Y", "Z"]
([49, 50, 51, 52, 53, 54, 55, 56, 57, 48]) -> ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
([98, 121, 116, 101, 115]) -> ["b", "e", "s", "t", "y"]
        }
    }
}

problem Generated/1251 {
code {
        func filter_non_ascii(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World", "你好", "世界"]) -> ["Hello", "World"]
(["Python", "is", "a", "high-level", "interpreted", "programming", "language"]) -> ["Python", "is", "a", "high-level", "interpreted", "programming", "language"]
(["I", "love", "to", "code", "in", "Python", "编程"]) -> ["I", "love", "to", "code", "in", "Python"]
(["Hello", "World", "こんにちは", "世界"]) -> ["Hello", "World"]
(["Hello", "世界"]) -> ["Hello"]
        }
    }
}

problem Generated/1252 {
code {
        func convert_string(input_s: string, offset: int) -> string
    }
    tests {
        template nse {
            ("hello", 1) -> "ifmmp"
("world", -1) -> "vnqkc"
("abc", 3) -> "def"
("xyz", -3) -> "uvw"
("python", 0) -> "python"
        }
    }
}

problem Generated/1253 {
code {
        func encode_decode_string(s: string) -> string
    }
    tests {
        template nse {
            ("abc") -> "abc"
("hello world") -> "hello world"
("Python is awesome!") -> "Python is awesome!"
("1a2b3c4d5e6f") -> "1a2b3c4d5e6f"
("UPPERCASE") -> "UPPERCASE"
        }
    }
}

problem Generated/1254 {
code {
        func convert_string_to_ascii(txt: string) -> list<int>
    }
    tests {
        template nse {
            ("hello world") -> [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]
("") -> []
("1234567890") -> [49, 50, 51, 52, 53, 54, 55, 56, 57, 48]
("AaBbcC") -> [65, 97, 66, 98, 99, 67]
("testing...123") -> [116, 101, 115, 116, 105, 110, 103, 46, 46, 46, 49, 50, 51]
        }
    }
}

problem Generated/1255 {
code {
        func convert_text_to_ascii(txt: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("Python is awesome!") -> [80, 121, 116, 104, 111, 110, 32, 105, 115, 32, 97, 119, 101, 115, 111, 109, 101, 33]
("") -> []
("This is just a test") -> [84, 104, 105, 115, 32, 105, 115, 32, 106, 117, 115, 116, 32, 97, 32, 116, 101, 115, 116]
("12345") -> [49, 50, 51, 52, 53]
        }
    }
}

problem Generated/1256 {
code {
        func convert_string_to_ascii(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello world") -> [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]
("abcdefg") -> [97, 98, 99, 100, 101, 102, 103]
("12345") -> [49, 50, 51, 52, 53]
("") -> []
("AaBbCc") -> [65, 97, 66, 98, 67, 99]
        }
    }
}

problem Generated/1257 {
code {
        func encode_decode_string(s: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "hello world"
("python code") -> "python code"
("1234") -> "1234"
("") -> ""
("Lorem ipsum dolor sit amet, consectetur adipiscing elit.") -> "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
        }
    }
}

problem Generated/1258 {
code {
        func convert_string_to_ascii(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello world") -> [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]
("Python is awesome!") -> [80, 121, 116, 104, 111, 110, 32, 105, 115, 32, 97, 119, 101, 115, 111, 109, 101, 33]
("12345") -> [49, 50, 51, 52, 53]
("!@#$%") -> [33, 64, 35, 36, 37]
("") -> []
        }
    }
}

problem Generated/1259 {
code {
        func are_all_ascii(strs: list<int>) -> bool
    }
    tests {
        template nse {
            ([65, 97, 116, 115, 32, 109, 97, 116, 116, 101, 114, 115, 33]) -> true
([65, 97, 116, 115, 32, 109, 97, 116, 116, 101, 114, 115, 33, 128]) -> false
([128, 129, 130, 131, 132]) -> false
([33, 44, 64, 90]) -> true
([65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]) -> true
        }
    }
}

problem Generated/1260 {
code {
        func validate_input_string(input_s: string) -> bool
    }
    tests {
        template nse {
            ("Hello, world!") -> true
("こんにちは") -> false
("Привет, мир!") -> false
("Hello12345") -> true
("") -> true
        }
    }
}

problem Generated/1261 {
code {
        func is_ascii_string(input_s: string) -> bool
    }
    tests {
        template nse {
            ("hello world") -> true
("こんにちは") -> false
("I am ASCII") -> true
("") -> true
("1234") -> true
        }
    }
}

problem Generated/1262 {
code {
        func is_all_ascii(txt: string) -> bool
    }
    tests {
        template nse {
            ("Hello, world!") -> true
("") -> true
("こんにちは") -> false
("Hello, world! こんにちは") -> false
("Lorem Ipsum is simply dummy text of the printing and typesetting industry.") -> true
        }
    }
}

problem Generated/1263 {
code {
        func encode_string_to_binary(s: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World") -> ["01001000", "01100101", "01101100", "01101100", "01101111", "00100000", "01010111", "01101111", "01110010", "01101100", "01100100"]
("Python is awesome") -> ["01010000", "01111001", "01110100", "01101000", "01101111", "01101110", "00100000", "01101001", "01110011", "00100000", "01100001", "01110111", "01100101", "01110011", "01101111", "01101101", "01100101"]
("1234") -> ["00110001", "00110010", "00110011", "00110100"]
("abcdefghijklmnopqrstuvwxyz") -> ["01100001", "01100010", "01100011", "01100100", "01100101", "01100110", "01100111", "01101000", "01101001", "01101010", "01101011", "01101100", "01101101", "01101110", "01101111", "01110000", "01110001", "01110010", "01110011", "01110100", "01110101", "01110110", "01110111", "01111000", "01111001", "01111010"]
("") -> []
        }
    }
}

problem Generated/1264 {
code {
        func decode_message(message: string) -> string
    }
    tests {
        template nse {
            ("01100010 01101111 01110100 01110100 01101100 01100101 00100000 01101111 01100110 00100000 01100110 01110101 01101110") -> "bottle of fun"
("01010100 01100101 01110011 01110100 00100000 01101101 01100101 01110011 01110011 01100001 01100111 01100101 00100000 01100101 01101110 01100100 01100101 01100100 00100000 01101001 01101110 00100000 01100010 01101001 01101110 01100001 01110010 01111001") -> "Test message ended in binary"
("01110011 01101111 00100000 01100111 01101111 01101111 01100100 00100000 01101110 01101111 01110111") -> "so good now"
("01010111 01100101 01101100 01100011 01101111 01101101 01100101 00100000 01110100 01101111 00100000 01000011 01101111 01110010 01101110 01100101 01101100 01101100") -> "Welcome to Cornell"
("01001000 01100001 01110000 01110000 01111001 00100000 01001100 01110101 01101110 01100011 01101000") -> "Happy Lunch"
        }
    }
}

problem Generated/1265 {
code {
        func decode_message(encoded_message: string) -> string
    }
    tests {
        template nse {
            ("01000001 01101110 01100100 00100000 01110111 01101001 01110100 01101000 00100000 01110100 01101000 01101001 01110011 00100000 01101000 01100101 01101100 01110000") -> "And with this help"
("01101001 01101110 00100000 01101111 01110100 01101000 01100101 01110010 00100000 01110100 01101111 00100000 01110100 01100101 01101100 01101100 00100000 01111001 01101111 01110101") -> "in other to tell you"
("01110111 01101000 01100001 01110100 00100000 01111001 01101111 01110101 00100000 01100100 01101111 00100000 01100110 01101111 01110010") -> "what you do for"
("01101111 01110100 01101000 01100101 01110010 01110011 00101100 00100000 01110100 01101111 00100000 01110100 01100101 01101100 01101100 00100000 01110100 01101000 01100101 01101101") -> "others, to tell them"
("01110111 01101000 01100001 01110100 00100000 01111001 01101111 01110101 00100000 01110111 01100001 01101110 01110100 00100000 01110111 01101001 01110100 01101000 00100000 01110100 01101000 01100101 01101101") -> "what you want with them"
        }
    }
}

problem Generated/1266 {
code {
        func decode_string(s: string) -> string
    }
    tests {
        template nse {
            ("65 66 67 68 69") -> "ABCDE"
("104 101 108 108 111 44 32 119 111 114 108 100") -> "hello, world"
("98 121 101 33 32 72 111 119 32 97 114 101 32 121 111 117 63") -> "bye! How are you?"
("33 64 35 36 37 94 38 42 40 41") -> "!@#$%^&*()"
("97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122") -> "abcdefghijklmnopqrstuvwxyz"
        }
    }
}

problem Generated/1267 {
code {
        func convert_list_of_ascii_to_string(ascii_lst: list<int>) -> string
    }
    tests {
        template nse {
            ([72, 101, 108, 108, 111]) -> "Hello"
([65, 66, 67, 68, 69, 70]) -> "ABCDEF"
([87, 111, 114, 108, 100]) -> "World"
([98, 121, 116, 101, 115]) -> "bytes"
([115, 116, 114, 105, 110, 103]) -> "string"
        }
    }
}

problem Generated/1268 {
code {
        func stringify_list_of_ints(elements: list<int>) -> string
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> "12345"
([0, 0, 0, 0]) -> "0000"
([9, 8, 7, 6, 5]) -> "98765"
([1, 3, 5, 7, 9]) -> "13579"
([0, 2, 4, 6, 8]) -> "02468"
        }
    }
}

problem Generated/1269 {
code {
        func convert_ascii_list_to_string(ascii_lst: list<int>) -> string
    }
    tests {
        template nse {
            ([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]) -> "Hello World"
([65, 66, 67, 68, 69]) -> "ABCDE"
([120, 121, 122, 32, 65, 66, 67, 68, 69]) -> "xyz ABCDE"
([98, 111, 110, 106, 111, 117, 114]) -> "bonjour"
([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]) -> "Hello World!"
        }
    }
}

problem Generated/1270 {
code {
        func convert_ascii_to_string(nums: list<int>) -> string
    }
    tests {
        template nse {
            ([65, 98, 99, 100, 101]) -> "Abcde"
([104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]) -> "hello world"
([87, 111, 119, 33]) -> "Wow!"
([97, 32, 98, 105, 103, 32, 99, 111, 109, 112, 117, 116, 101, 114]) -> "a big computer"
([84, 104, 101, 32, 102, 117, 116, 117, 114, 101, 32, 105, 115, 32, 105, 110, 32, 121, 111, 117, 114, 32, 104, 97, 110, 100, 115]) -> "The future is in your hands"
        }
    }
}

problem Generated/1271 {
code {
        func to_lower_case(input_str: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "hello world"
("GReetings!") -> "greetings!"
("PASSWORD123") -> "password123"
("") -> ""
("12345") -> "12345"
        }
    }
}

problem Generated/1272 {
code {
        func convert_string_to_lower_ascii(input_s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello World!") -> [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33]
("Python is Easy") -> [112, 121, 116, 104, 111, 110, 32, 105, 115, 32, 101, 97, 115, 121]
("XYZ") -> [120, 121, 122]
("") -> []
("1+1=2") -> [49, 43, 49, 61, 50]
        }
    }
}

problem Generated/1273 {
code {
        func convert_ascii_to_lowercase(ascii_lst: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([72, 69, 76, 76, 79]) -> ["h", "e", "l", "l", "o"]
([97, 98, 99, 100, 101]) -> ["a", "b", "c", "d", "e"]
([70, 105, 115, 104, 99, 97, 107]) -> ["f", "i", "s", "h", "c", "a", "k"]
([73, 110, 116, 101, 114, 110, 101, 116]) -> ["i", "n", "t", "e", "r", "n", "e", "t"]
([80, 121, 116, 104, 111, 110]) -> ["p", "y", "t", "h", "o", "n"]
        }
    }
}

problem Generated/1274 {
code {
        func lowercase_ascii_letters(n: int) -> string
    }
    tests {
        template nse {
            (0) -> ""
(1) -> "a"
(2) -> "ab"
(10) -> "abcdefghij"
(26) -> "abcdefghijklmnopqrstuvwxyz"
        }
    }
}

problem Generated/1275 {
code {
        func convert_string_to_lowercase(input_s: string) -> string
    }
    tests {
        template nse {
            ("Hello, World!") -> "hello, world!"
("This Is A Test") -> "this is a test"
("ALLCAPS") -> "allcaps"
("") -> ""
("sTrAnGe") -> "strange"
        }
    }
}

problem Generated/1276 {
code {
        func convert_ascii_to_uppercase(input_s: string) -> string
    }
    tests {
        template nse {
            ("hello world!") -> "HELLO WORLD!"
("Hello World!") -> "HELLO WORLD!"
("hEllo wORld!") -> "HELLO WORLD!"
("1234ABCD") -> "1234ABCD"
("") -> ""
        }
    }
}

problem Generated/1277 {
code {
        func get_lowercase_ascii(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["a", "B", "c", "D", "e"]) -> [97, 99, 101]
(["a", "z", "A", "Z"]) -> [97, 122]
([]) -> []
(["1", "2", "3"]) -> []
(["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) -> [97, 98, 99, 100, 101, 102, 103, 104, 105, 106]
        }
    }
}

problem Generated/1278 {
code {
        func get_lowercase_letters(n: int) -> list<string>
    }
    tests {
        template nse {
            (0) -> []
(1) -> ["a"]
(5) -> ["a", "b", "c", "d", "e"]
(15) -> ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o"]
(26) -> ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
        }
    }
}

problem Generated/1279 {
code {
        func get_uppercase_letters(s: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World") -> ["H", "W"]
("AbCdEFGhiJKlmnOPqrSTuVWxyZ") -> ["A", "C", "E", "F", "G", "J", "K", "O", "P", "S", "T", "V", "W", "Z"]
("  ") -> []
("") -> []
("Hello world!") -> ["H"]
("HELLO world!") -> ["H", "E", "L", "L", "O"]
        }
    }
}

problem Generated/1280 {
code {
        func filter_alphabets(input_s: string) -> string
    }
    tests {
        template nse {
            ("Hello World!") -> "HelloWorld"
("This is a test.") -> "Thisisatest"
("12345") -> ""
("alphaBET") -> "alphaBET"
("ABABAB123456") -> "ABABAB"
        }
    }
}

problem Generated/1281 {
code {
        func get_numbers_in_string(s: string) -> list<int>
    }
    tests {
        template nse {
            ("") -> []
("abc123def456") -> [1, 2, 3, 4, 5, 6]
("A1B2C3D4E5") -> [1, 2, 3, 4, 5]
("a1b2c3d4e5") -> [1, 2, 3, 4, 5]
("12345") -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/1282 {
code {
        func get_numbers_from_string(input_s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello123world456") -> [1, 2, 3, 4, 5, 6]
("python3.9") -> [3, 9]
("ABCD") -> []
("1234567890") -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
("1a2b3c4d5e6f") -> [1, 2, 3, 4, 5, 6]
        }
    }
}

problem Generated/1283 {
code {
        func convert_ascii_to_num(ascii_lst: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([65, 66, 67, 97, 98, 99]) -> []
([48, 49, 50, 51, 52, 53]) -> [0, 1, 2, 3, 4, 5]
([48, 49, 50, 51, 52, 53, 97, 98, 99]) -> [0, 1, 2, 3, 4, 5]
([65, 66, 67, 68, 69, 70, 71, 72, 73, 74]) -> []
([97, 98, 99, 50, 51, 52, 53, 54, 55]) -> [2, 3, 4, 5, 6, 7]
        }
    }
}

problem Generated/1284 {
code {
        func convert_string_to_ascii(txt: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello World 1234") -> [49, 50, 51, 52]
("12a3b4c") -> [49, 50, 51, 52]
("This is a test") -> []
("111222333444") -> [49, 49, 49, 50, 50, 50, 51, 51, 51, 52, 52, 52]
("") -> []
        }
    }
}

problem Generated/1285 {
code {
        func convert_string_to_ascii(input_str: string) -> list<int>
    }
    tests {
        template nse {
            ("hello123world456") -> [49, 50, 51, 52, 53, 54]
("abcde") -> []
("12hello34world") -> [49, 50, 51, 52]
("1") -> [49]
("") -> []
        }
    }
}

problem Generated/1286 {
code {
        func get_letters_from_string(input_s: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World 123") -> ["H", "e", "l", "l", "o", "W", "o", "r", "l", "d"]
("This is a test") -> ["T", "h", "i", "s", "i", "s", "a", "t", "e", "s", "t"]
("Python1234") -> ["P", "y", "t", "h", "o", "n"]
("123456") -> []
("") -> []
        }
    }
}

problem Generated/1287 {
code {
        func get_words_starting_with_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "avocado", "pear"], "a") -> ["apple", "apricot", "avocado"]
(["apple", "banana", "apricot", "avocado", "pear"], "b") -> ["banana"]
(["apple", "banana", "apricot", "avocado", "pear"], "p") -> ["pear"]
([], "a") -> []
(["cat", "dog", "camel"], "c") -> ["cat", "camel"]
        }
    }
}

problem Generated/1288 {
code {
        func get_strings_starting_with(strs: list<string>, stringacter: int) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "mango"], 97) -> ["apple"]
(["apple", "banana", "cherry", "mango"], 99) -> ["cherry"]
(["apple", "banana", "cherry", "mango"], 102) -> []
(["apple", "Banana", "cherry", "mango"], 66) -> ["Banana"]
([], 97) -> []
        }
    }
}

problem Generated/1289 {
code {
        func get_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "orange", "pear"], "a") -> ["apple"]
(["apple", "banana", "cherry", "orange", "pear"], "b") -> ["banana"]
(["apple", "banana", "cherry", "orange", "pear"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "orange", "pear"], "d") -> []
([], "a") -> []
        }
    }
}

problem Generated/1290 {
code {
        func get_words_starting_with(words: list<string>, s: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date", "eggplant"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date", "eggplant"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date", "eggplant"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date", "eggplant"], "e") -> ["eggplant"]
(["apple", "banana", "cherry", "date", "eggplant"], "f") -> []
        }
    }
}

problem Generated/1291 {
code {
        func convert_ascii_to_str(ascii_codes: list<int>) -> string
    }
    tests {
        template nse {
            ([65, 66, 67, 68]) -> "ABCD"
([97, 98, 99, 100]) -> "abcd"
([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]) -> "Hello World"
([33, 64, 35, 36, 37, 94]) -> "!@#$%^"
([120, 121, 122]) -> "xyz"
        }
    }
}

problem Generated/1292 {
code {
        func create_string_from_ascii_codes(codes: list<int>) -> string
    }
    tests {
        template nse {
            ([97, 98, 99]) -> "abc"
([72, 101, 108, 108, 111]) -> "Hello"
([73, 32, 76, 111, 118, 101, 32, 67, 111, 100, 105, 110, 103]) -> "I Love Coding"
([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]) -> "Hello World!"
([67, 111, 100, 105, 110, 103, 32, 73, 110, 116, 101, 114, 118, 105, 101, 119]) -> "Coding Interview"
        }
    }
}

problem Generated/1293 {
code {
        func convert_number_to_ascii(numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([65, 66, 67, 68, 69]) -> ["A", "B", "C", "D", "E"]
([104, 101, 108, 108, 111]) -> ["h", "e", "l", "l", "o"]
([49, 50, 51, 52, 53]) -> ["1", "2", "3", "4", "5"]
([87, 111, 114, 108, 100, 33]) -> ["W", "o", "r", "l", "d", "!"]
([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]) -> ["H", "e", "l", "l", "o", " ", "W", "o", "r", "l", "d"]
        }
    }
}

problem Generated/1294 {
code {
        func convert_ascii_to_alpha(ascii_lst: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([65, 66, 67, 97, 98, 99]) -> ["A", "B", "C", "a", "b", "c"]
([119, 111, 114, 100]) -> ["w", "o", "r", "d"]
([49, 50, 51, 52, 53]) -> ["1", "2", "3", "4", "5"]
([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]) -> ["H", "e", "l", "l", "o", " ", "W", "o", "r", "l", "d", "!"]
([105, 110, 116, 101, 114, 110, 101, 116]) -> ["i", "n", "t", "e", "r", "n", "e", "t"]
        }
    }
}

problem Generated/1295 {
code {
        func sort_string_by_ascii(input_s: string) -> string
    }
    tests {
        template nse {
            ("hello") -> "ehllo"
("world") -> "dlorw"
("python") -> "hnopty"
("abcd") -> "abcd"
("") -> ""
        }
    }
}

problem Generated/1296 {
code {
        func sort_by_ascii(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["abc", "def", "ghi"]) -> ["abc", "def", "ghi"]
(["ghi", "def", "abc"]) -> ["abc", "def", "ghi"]
(["a", "b", "c"]) -> ["a", "b", "c"]
(["aaa", "aa", "a"]) -> ["a", "aa", "aaa"]
(["car", "boat", "train"]) -> ["boat", "car", "train"]
        }
    }
}

problem Generated/1297 {
code {
        func reverse_string(word: string) -> string
    }
    tests {
        template nse {
            ("hello") -> "olleh"
("Python is Awesome") -> "emosewA si nohtyP"
("") -> ""
("I love Python") -> "nohtyP evol I"
("Abc123") -> "321cbA"
        }
    }
}

problem Generated/1298 {
code {
        func get_ascii_letters(count: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["a", "b", "c", "d", "e"]
(0) -> []
(1) -> ["a"]
(26) -> ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
(3) -> ["a", "b", "c"]
        }
    }
}

problem Generated/1299 {
code {
        func create_string_from_ascii(ascii_codes: list<int>) -> string
    }
    tests {
        template nse {
            ([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]) -> "Hello World"
([65, 66, 67, 97, 98, 99]) -> "ABCabc"
([119, 111, 114, 107, 32, 102, 114, 111, 109, 32, 104, 111, 109, 101]) -> "work from home"
([116, 101, 115, 116, 105, 110, 103, 32, 49, 50, 51]) -> "testing 123"
([72, 105, 32, 116, 104, 101, 114, 101]) -> "Hi there"
        }
    }
}

problem Generated/1300 {
code {
        func string_from_ascii(numbers: list<int>) -> string
    }
    tests {
        template nse {
            ([65, 66, 67, 97, 98, 99, 32, 33, 34]) -> "ABCabc !\""
([119, 111, 119, 32, 119, 111, 119]) -> "wow wow"
([104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]) -> "hello world"
([97, 98, 99, 49, 50, 51]) -> "abc123"
([72, 101, 108, 108, 111, 32, 70, 114, 111, 109, 32, 65, 105, 32, 87, 111, 114, 108, 100]) -> "Hello From Ai World"
        }
    }
}

problem Generated/1301 {
code {
        func string_to_ascii(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello world") -> [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]
("") -> []
("a") -> [97]
("12345") -> [49, 50, 51, 52, 53]
("Hello World") -> [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]
        }
    }
}

problem Generated/1302 {
code {
        func get_pow_sequence(b: int, length: int) -> list<int>
    }
    tests {
        template nse {
            (2, 5) -> [1, 2, 4, 8, 16]
(3, 3) -> [1, 3, 9]
(4, 0) -> []
(5, 1) -> [1]
(2, 0) -> []
        }
    }
}

problem Generated/1303 {
code {
        func concatenate_ascii(strs: list<int>) -> string
    }
    tests {
        template nse {
            ([65, 66, 67]) -> "ABC"
([97, 98, 99, 100]) -> "abcd"
([120, 121, 122]) -> "xyz"
([]) -> ""
([35, 36, 37]) -> "#$%"
        }
    }
}

problem Generated/1304 {
code {
        func convert_to_string(nums: list<int>) -> string
    }
    tests {
        template nse {
            ([65, 66, 67, 68]) -> "ABCD"
([104, 101, 108, 108, 111]) -> "hello"
([72, 105, 32, 116, 104, 101, 114, 101]) -> "Hi there"
([119, 111, 114, 108, 100]) -> "world"
([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]) -> "Hello World"
        }
    }
}

problem Generated/1305 {
code {
        func convert_to_ascii_string(nums: list<int>) -> string
    }
    tests {
        template nse {
            ([72, 101, 108, 108, 111]) -> "Hello"
([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]) -> "Hello World"
([65, 108, 112, 104, 97, 32, 66, 101, 116, 97]) -> "Alpha Beta"
([67, 111, 100, 101]) -> "Code"
([72, 105, 33]) -> "Hi!"
        }
    }
}

problem Generated/1306 {
code {
        func concat_ascii_values(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["a", "b", "c", "d"]) -> "abcd"
(["A", "B", "C", "D"]) -> "ABCD"
(["!", "$", "%"]) -> "!$%"
(["2", "3", "4"]) -> "234"
([]) -> ""
(["h", "e", "y"]) -> "hey"
        }
    }
}

problem Generated/1307 {
code {
        func get_ascii_string(numbers: list<int>) -> string
    }
    tests {
        template nse {
            ([72, 101, 108, 108, 111]) -> "Hello"
([118, 105, 114, 116, 117, 97, 108]) -> "virtual"
([65, 83, 67, 73, 73]) -> "ASCII"
([72, 97, 112, 112, 121]) -> "Happy"
([66, 121, 116, 101]) -> "Byte"
        }
    }
}

problem Generated/1308 {
code {
        func concatenate_ascii_codes(stringacters: list<string>) -> string
    }
    tests {
        template nse {
            (["a", "b", "c"]) -> "abc"
(["H", "e", "l", "l", "o"]) -> "Hello"
(["8", "1", "0"]) -> "810"
(["+", "-", "*"]) -> "+-*"
(["%", "/", "@", "$"]) -> "%/@$"
        }
    }
}

problem Generated/1309 {
code {
        func get_ascii_values(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("world") -> [119, 111, 114, 108, 100]
("a") -> [97]
("") -> []
("123") -> [49, 50, 51]
("python") -> [112, 121, 116, 104, 111, 110]
        }
    }
}

problem Generated/1310 {
code {
        func get_ascii_values(strs: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("world") -> [119, 111, 114, 108, 100]
("") -> []
("12345") -> [49, 50, 51, 52, 53]
("Python") -> [80, 121, 116, 104, 111, 110]
        }
    }
}

problem Generated/1311 {
code {
        func get_ascii_codes(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("12345") -> [49, 50, 51, 52, 53]
("abCDefG") -> [97, 98, 67, 68, 101, 102, 71]
("") -> []
("Python is fun!") -> [80, 121, 116, 104, 111, 110, 32, 105, 115, 32, 102, 117, 110, 33]
        }
    }
}

problem Generated/1312 {
code {
        func ascii_codes_of_string(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("world") -> [119, 111, 114, 108, 100]
("") -> []
("aA1") -> [97, 65, 49]
("@?#") -> [64, 63, 35]
("   ") -> [32, 32, 32]
        }
    }
}

problem Generated/1313 {
code {
        func string_to_ascii(string_value: string) -> list<int>
    }
    tests {
        template nse {
            ("hello world") -> [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]
("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789") -> [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57]
("1234567890") -> [49, 50, 51, 52, 53, 54, 55, 56, 57, 48]
(" ") -> [32]
("") -> []
        }
    }
}

problem Generated/1314 {
code {
        func get_ascii_code_for_string(input_s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello world") -> [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]
("python") -> [112, 121, 116, 104, 111, 110]
("coding") -> [99, 111, 100, 105, 110, 103]
("") -> []
("1337") -> [49, 51, 51, 55]
        }
    }
}

problem Generated/1315 {
code {
        func string_to_ascii(s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello, world!") -> [72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33]
("") -> []
("Lorem ipsum dolor sit amet") -> [76, 111, 114, 101, 109, 32, 105, 112, 115, 117, 109, 32, 100, 111, 108, 111, 114, 32, 115, 105, 116, 32, 97, 109, 101, 116]
("1234") -> [49, 50, 51, 52]
("\n\t") -> [10, 9]
        }
    }
}

problem Generated/1316 {
code {
        func get_ascii_codes(strs: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello, world!") -> [72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33]
("") -> []
("Python is Fun!") -> [80, 121, 116, 104, 111, 110, 32, 105, 115, 32, 70, 117, 110, 33]
("12345") -> [49, 50, 51, 52, 53]
("AaBbCcDdEe") -> [65, 97, 66, 98, 67, 99, 68, 100, 69, 101]
        }
    }
}

problem Generated/1317 {
code {
        func encode_strings_to_ascii(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["abc", "def", "ghi"]) -> [97, 98, 99, 100, 101, 102, 103, 104, 105]
(["Hello", "World"]) -> [72, 101, 108, 108, 111, 87, 111, 114, 108, 100]
(["Python"]) -> [80, 121, 116, 104, 111, 110]
([]) -> []
(["a", ""]) -> [97]
        }
    }
}

problem Generated/1318 {
code {
        func string_to_ascii(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["hello", "world"]) -> [104, 101, 108, 108, 111, 119, 111, 114, 108, 100]
(["Python", "is", "awesome"]) -> [80, 121, 116, 104, 111, 110, 105, 115, 97, 119, 101, 115, 111, 109, 101]
(["Hello", "ACM", "ICPC"]) -> [72, 101, 108, 108, 111, 65, 67, 77, 73, 67, 80, 67]
(["a", "b", "c"]) -> [97, 98, 99]
(["", ""]) -> []
        }
    }
}

problem Generated/1319 {
code {
        func string_to_ascii_list(input_s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello, world!") -> [72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33]
("Python is cool") -> [80, 121, 116, 104, 111, 110, 32, 105, 115, 32, 99, 111, 111, 108]
("") -> []
("I love Python") -> [73, 32, 108, 111, 118, 101, 32, 80, 121, 116, 104, 111, 110]
("123") -> [49, 50, 51]
        }
    }
}

problem Generated/1320 {
code {
        func get_ascii_codes(txt: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello, World!") -> [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33]
("Python is awesome") -> [80, 121, 116, 104, 111, 110, 32, 105, 115, 32, 97, 119, 101, 115, 111, 109, 101]
("1234") -> [49, 50, 51, 52]
("") -> []
(" ") -> [32]
        }
    }
}

problem Generated/1321 {
code {
        func convert_string_to_ascii(s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello World!") -> [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]
("Python") -> [80, 121, 116, 104, 111, 110]
("12345") -> [49, 50, 51, 52, 53]
("") -> []
("This string contains spaces and numbers: 123 456") -> [84, 104, 105, 115, 32, 115, 116, 114, 105, 110, 103, 32, 99, 111, 110, 116, 97, 105, 110, 115, 32, 115, 112, 97, 99, 101, 115, 32, 97, 110, 100, 32, 110, 117, 109, 98, 101, 114, 115, 58, 32, 49, 50, 51, 32, 52, 53, 54]
        }
    }
}

problem Generated/1322 {
code {
        func get_ascii_indexes(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello world!") -> [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33]
("12345") -> [49, 50, 51, 52, 53]
("abcde") -> [97, 98, 99, 100, 101]
("") -> []
("This is a sentence.") -> [84, 104, 105, 115, 32, 105, 115, 32, 97, 32, 115, 101, 110, 116, 101, 110, 99, 101, 46]
        }
    }
}

problem Generated/1323 {
code {
        func filter_ascii_letters(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["a", "b", "c", "d", "e"]) -> ["a", "b", "c", "d", "e"]
(["a", "@", "B", "d", "E"]) -> ["a", "B", "d", "E"]
(["A", "B", "C", "D", "E"]) -> ["A", "B", "C", "D", "E"]
(["7", "&", "%", "4"]) -> []
(["a", "b", "c", "D", "E", "f", "G", "h"]) -> ["a", "b", "c", "D", "E", "f", "G", "h"]
        }
    }
}

problem Generated/1324 {
code {
        func filter_words_starting_with_letter(words: list<string>, letter: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "z") -> []
(["apple", "banana", "Cherry", "Date"], "C") -> ["Cherry"]
([], "a") -> []
        }
    }
}

problem Generated/1325 {
code {
        func sort_strings_by_ascii(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"]) -> ["apple", "banana", "cherry", "date"]
(["apple", "Banana", "Cherry", "date", "Eggplant"]) -> ["Banana", "Cherry", "Eggplant", "apple", "date"]
(["apple", "apple", "apple", "apple", "apple"]) -> ["apple", "apple", "apple", "apple", "apple"]
([]) -> []
(["B", "A", "a", "b"]) -> ["A", "B", "a", "b"]
        }
    }
}

problem Generated/1326 {
code {
        func sort_words_by_ascii(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"]) -> ["apple", "banana", "cherry", "date"]
(["dog", "cat", "zebra", "bird"]) -> ["bird", "cat", "dog", "zebra"]
(["hello", "world", "python", "programming"]) -> ["hello", "programming", "python", "world"]
(["more", "and", "more", "words"]) -> ["and", "more", "more", "words"]
([]) -> []
        }
    }
}

problem Generated/1327 {
code {
        func string_to_ascii(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("Python is awesome!") -> [80, 121, 116, 104, 111, 110, 32, 105, 115, 32, 97, 119, 101, 115, 111, 109, 101, 33]
("H@ppy Bir7hday") -> [72, 64, 112, 112, 121, 32, 66, 105, 114, 55, 104, 100, 97, 121]
("") -> []
("1 2 3 go!") -> [49, 32, 50, 32, 51, 32, 103, 111, 33]
        }
    }
}

problem Generated/1328 {
code {
        func text_to_ascii(txt: string) -> list<int>
    }
    tests {
        template nse {
            ("hello world") -> [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]
("Python is fun") -> [80, 121, 116, 104, 111, 110, 32, 105, 115, 32, 102, 117, 110]
("") -> []
("1, 2, 3, GO!") -> [49, 44, 32, 50, 44, 32, 51, 44, 32, 71, 79, 33]
("Lorem Ipsum") -> [76, 111, 114, 101, 109, 32, 73, 112, 115, 117, 109]
        }
    }
}

problem Generated/1329 {
code {
        func get_ascii_codes(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello world") -> [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]
("Python is awesome") -> [80, 121, 116, 104, 111, 110, 32, 105, 115, 32, 97, 119, 101, 115, 111, 109, 101]
("") -> []
("12345") -> [49, 50, 51, 52, 53]
("aBcDeFgHiJkLmNoPqRsTuVwXyZ") -> [97, 66, 99, 68, 101, 70, 103, 72, 105, 74, 107, 76, 109, 78, 111, 80, 113, 82, 115, 84, 117, 86, 119, 88, 121, 90]
        }
    }
}

problem Generated/1330 {
code {
        func convert_string_to_ascii(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("world") -> [119, 111, 114, 108, 100]
("Python is awesome") -> [80, 121, 116, 104, 111, 110, 32, 105, 115, 32, 97, 119, 101, 115, 111, 109, 101]
("") -> []
("a") -> [97]
        }
    }
}

problem Generated/1331 {
code {
        func convert_string_to_ascii(s: string) -> list<int>
    }
    tests {
        template nse {
            ("") -> []
("Hello World") -> [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]
("abc123") -> [97, 98, 99, 49, 50, 51]
("Python3") -> [80, 121, 116, 104, 111, 110, 51]
("\n\t") -> [10, 9]
("Hello World!") -> [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]
        }
    }
}

problem Generated/1332 {
code {
        func is_ascii_lowercase(s: string) -> bool
    }
    tests {
        template nse {
            ("hello") -> true
("world!") -> false
("") -> true
("123") -> false
("abc123") -> false
        }
    }
}

problem Generated/1333 {
code {
        func get_binary_representation_of_string(input_s: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello, World!") -> ["01001000", "01100101", "01101100", "01101100", "01101111", "00101100", "00100000", "01010111", "01101111", "01110010", "01101100", "01100100", "00100001"]
("Python is awesome") -> ["01010000", "01111001", "01110100", "01101000", "01101111", "01101110", "00100000", "01101001", "01110011", "00100000", "01100001", "01110111", "01100101", "01110011", "01101111", "01101101", "01100101"]
("Hello") -> ["01001000", "01100101", "01101100", "01101100", "01101111"]
("") -> []
(" ") -> ["00100000"]
        }
    }
}

problem Generated/1334 {
code {
        func get_binary_of_string(s: string) -> list<string>
    }
    tests {
        template nse {
            ("hello") -> ["01101000", "01100101", "01101100", "01101100", "01101111"]
("world") -> ["01110111", "01101111", "01110010", "01101100", "01100100"]
("Python") -> ["01010000", "01111001", "01110100", "01101000", "01101111", "01101110"]
("programming") -> ["01110000", "01110010", "01101111", "01100111", "01110010", "01100001", "01101101", "01101101", "01101001", "01101110", "01100111"]
("list comprehension") -> ["01101100", "01101001", "01110011", "01110100", "00100000", "01100011", "01101111", "01101101", "01110000", "01110010", "01100101", "01101000", "01100101", "01101110", "01110011", "01101001", "01101111", "01101110"]
        }
    }
}

problem Generated/1335 {
code {
        func convert_to_binary(s: string) -> list<string>
    }
    tests {
        template nse {
            ("hello") -> ["01101000", "01100101", "01101100", "01101100", "01101111"]
("world") -> ["01110111", "01101111", "01110010", "01101100", "01100100"]
("Python") -> ["01010000", "01111001", "01110100", "01101000", "01101111", "01101110"]
("") -> []
("1") -> ["00110001"]
        }
    }
}

problem Generated/1336 {
code {
        func encode_string(s: string) -> string
    }
    tests {
        template nse {
            ("hello") -> "104101108108111"
("world") -> "119111114108100"
("") -> ""
(" ") -> "32"
("!!") -> "3333"
        }
    }
}

problem Generated/1337 {
code {
        func encrypt_string(s: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "104-101-108-108-111-32-119-111-114-108-100"
("python3.9") -> "112-121-116-104-111-110-51-46-57"
("") -> ""
("A") -> "65"
("abc123") -> "97-98-99-49-50-51"
        }
    }
}

problem Generated/1338 {
code {
        func sort_str_based_on_ascii(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "World", "PYTHON", "program"]) -> ["hello", "program", "PYTHON", "World"]
(["dog", "cat", "ant", "bird"]) -> ["ant", "bird", "cat", "dog"]
(["Python", "is", "an", "INTERESTING", "programming", "language"]) -> ["an", "INTERESTING", "is", "language", "programming", "Python"]
([]) -> []
(["A", "aaa", "bB", "Bb", "jio", "jIo", "JIo"]) -> ["A", "aaa", "bB", "Bb", "jio", "jIo", "JIo"]
        }
    }
}

problem Generated/1339 {
code {
        func string_to_ascii_lowercase(word: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello, World!") -> [104, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33]
("TESTING") -> [116, 101, 115, 116, 105, 110, 103]
("Python is a great language") -> [112, 121, 116, 104, 111, 110, 32, 105, 115, 32, 97, 32, 103, 114, 101, 97, 116, 32, 108, 97, 110, 103, 117, 97, 103, 101]
("") -> []
("lOrEm iPsUm") -> [108, 111, 114, 101, 109, 32, 105, 112, 115, 117, 109]
        }
    }
}

problem Generated/1340 {
code {
        func string_to_ascii_lowercase(given_s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello World") -> [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]
("AbCdEfG") -> [97, 98, 99, 100, 101, 102, 103]
("1234567890") -> [49, 50, 51, 52, 53, 54, 55, 56, 57, 48]
("!@#$%^&*()") -> [33, 64, 35, 36, 37, 94, 38, 42, 40, 41]
("") -> []
        }
    }
}

problem Generated/1341 {
code {
        func convert_to_ascii_lowercase(input_s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello World") -> [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]
("1234") -> [49, 50, 51, 52]
("AbCdEfG") -> [97, 98, 99, 100, 101, 102, 103]
("") -> []
("abc123!@#") -> [97, 98, 99, 49, 50, 51, 33, 64, 35]
        }
    }
}

problem Generated/1342 {
code {
        func convert_string_to_ascii_lowercase(stringacters: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["A", "B", "C", "d", "E"]) -> [97, 98, 99, 100, 101]
(["a", "b", "c", "d", "e"]) -> [97, 98, 99, 100, 101]
(["H", "E", "L", "L", "O"]) -> [104, 101, 108, 108, 111]
(["h", "e", "l", "l", "o"]) -> [104, 101, 108, 108, 111]
(["c", "o", "d", "e"]) -> [99, 111, 100, 101]
        }
    }
}

problem Generated/1343 {
code {
        func get_ascii_lower(word: string) -> list<int>
    }
    tests {
        template nse {
            ("HELLO") -> [104, 101, 108, 108, 111]
("World") -> [119, 111, 114, 108, 100]
("") -> []
("hEllO") -> [104, 101, 108, 108, 111]
("cAt") -> [99, 97, 116]
        }
    }
}

problem Generated/1344 {
code {
        func convert_to_uppercase(string_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> ["H", "E", "L", "L", "O", "W", "O", "R", "L", "D", "P", "Y", "T", "H", "O", "N"]
(["a", "b", "c"]) -> ["A", "B", "C"]
(["HELLO", "WORLD", "PYTHON"]) -> []
([]) -> []
(["Hello", "", "Python"]) -> ["E", "L", "L", "O", "Y", "T", "H", "O", "N"]
        }
    }
}

problem Generated/1345 {
code {
        func convert_to_uppercase(s: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "HELLO WORLD"
("Python is a great language!") -> "PYTHON IS A GREAT LANGUAGE!"
("L33t h@ck3r$") -> "L33T H@CK3R$"
("") -> ""
("12345") -> "12345"
        }
    }
}

problem Generated/1346 {
code {
        func convert_to_uppercase(input_s: string) -> list<int>
    }
    tests {
        template nse {
            ("") -> []
("abc") -> [65, 66, 67]
("ABC") -> [65, 66, 67]
("Hello World") -> [72, 69, 76, 76, 79, 32, 87, 79, 82, 76, 68]
("1a2b3c") -> [49, 65, 50, 66, 51, 67]
        }
    }
}

problem Generated/1347 {
code {
        func convert_to_uppercase(input_s: string) -> string
    }
    tests {
        template nse {
            ("Hello, World!") -> "HELLO, WORLD!"
("ABC123def") -> "ABC123DEF"
("") -> ""
("Hello") -> "HELLO"
("1aBcD") -> "1ABCD"
        }
    }
}

problem Generated/1348 {
code {
        func convert_to_uppercase(txt: string) -> list<int>
    }
    tests {
        template nse {
            ("hello world") -> [72, 69, 76, 76, 79, 32, 87, 79, 82, 76, 68]
("Python Program") -> [80, 89, 84, 72, 79, 78, 32, 80, 82, 79, 71, 82, 65, 77]
("") -> []
("1a2b3c4d5e") -> [49, 65, 50, 66, 51, 67, 52, 68, 53, 69]
("Abc@123") -> [65, 66, 67, 64, 49, 50, 51]
        }
    }
}

problem Generated/1349 {
code {
        func convert_to_upper_case(word: string) -> list<int>
    }
    tests {
        template nse {
            ("hello world") -> [72, 69, 76, 76, 79, 32, 87, 79, 82, 76, 68]
("turing machine") -> [84, 85, 82, 73, 78, 71, 32, 77, 65, 67, 72, 73, 78, 69]
("") -> []
("2 + 2 = 4") -> [50, 32, 43, 32, 50, 32, 61, 32, 52]
("cOmpLeX sTraiNg") -> [67, 79, 77, 80, 76, 69, 88, 32, 83, 84, 82, 65, 73, 78, 71]
        }
    }
}

problem Generated/1350 {
code {
        func upper_case_string(input_s: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "HELLO WORLD"
("Python") -> "PYTHON"
("Test String") -> "TEST STRING"
("") -> ""
("    ") -> "    "
        }
    }
}

problem Generated/1351 {
code {
        func get_uppercase_letters(s: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World!") -> ["H", "W"]
("ABCD") -> ["A", "B", "C", "D"]
("xyz") -> []
("I AM SHOUTING") -> ["I", "A", "M", "S", "H", "O", "U", "T", "I", "N", "G"]
("") -> []
        }
    }
}

problem Generated/1352 {
code {
        func get_ascii_uppercase(s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello World") -> [72, 87]
("Python") -> [80]
("UPPERCASE") -> [85, 80, 80, 69, 82, 67, 65, 83, 69]
("lowercase") -> []
("") -> []
        }
    }
}

problem Generated/1353 {
code {
        func get_ascii_values_of_alphabets_in_string(input_s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello, world!") -> [72, 101, 108, 108, 111, 119, 111, 114, 108, 100]
("aBcDeFgHiJkLmNoPqRsTuVwXyZ") -> [97, 66, 99, 68, 101, 70, 103, 72, 105, 74, 107, 76, 109, 78, 111, 80, 113, 82, 115, 84, 117, 86, 119, 88, 121, 90]
("") -> []
("1234") -> []
("Abcdefg1234%$#") -> [65, 98, 99, 100, 101, 102, 103]
        }
    }
}

problem Generated/1354 {
code {
        func convert_string_to_int_list(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("Python is fun!") -> [80, 121, 116, 104, 111, 110, 105, 115, 102, 117, 110]
("") -> []
("123") -> []
("Hello, World!") -> [72, 101, 108, 108, 111, 87, 111, 114, 108, 100]
        }
    }
}

problem Generated/1355 {
code {
        func string_to_ascii(txt: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello World!") -> [72, 101, 108, 108, 111, 87, 111, 114, 108, 100]
("Python is great!") -> [80, 121, 116, 104, 111, 110, 105, 115, 103, 114, 101, 97, 116]
("The quick brown fox jumps over the lazy dog") -> [84, 104, 101, 113, 117, 105, 99, 107, 98, 114, 111, 119, 110, 102, 111, 120, 106, 117, 109, 112, 115, 111, 118, 101, 114, 116, 104, 101, 108, 97, 122, 121, 100, 111, 103]
("12345") -> []
("") -> []
        }
    }
}

problem Generated/1356 {
code {
        func get_ord_values(s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello World!") -> [72, 101, 108, 108, 111, 87, 111, 114, 108, 100]
("AbC123!") -> [65, 98, 67]
("5,4,3,2,1!") -> []
("") -> []
("Who let the dogs out?") -> [87, 104, 111, 108, 101, 116, 116, 104, 101, 100, 111, 103, 115, 111, 117, 116]
        }
    }
}

problem Generated/1357 {
code {
        func alphabet_to_ord(word: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello World") -> [72, 101, 108, 108, 111, 87, 111, 114, 108, 100]
("A quick brown fox jumps over the lazy dog") -> [65, 113, 117, 105, 99, 107, 98, 114, 111, 119, 110, 102, 111, 120, 106, 117, 109, 112, 115, 111, 118, 101, 114, 116, 104, 101, 108, 97, 122, 121, 100, 111, 103]
("") -> []
("1234567890") -> []
("aBcDeFgHiJkLmNoPqRsTuVwXyZ") -> [97, 66, 99, 68, 101, 70, 103, 72, 105, 74, 107, 76, 109, 78, 111, 80, 113, 82, 115, 84, 117, 86, 119, 88, 121, 90]
        }
    }
}

problem Generated/1358 {
code {
        func sum_of_digits_in_words(words: string) -> int
    }
    tests {
        template nse {
            ("hello123world") -> 6
("1a2b3c4d5e") -> 15
("") -> 0
("abc def") -> 0
("1 2 3 4 5") -> 15
        }
    }
}

problem Generated/1359 {
code {
        func sum_of_ascii_digits_in_string(s: string) -> int
    }
    tests {
        template nse {
            ("") -> 0
("abc") -> 0
("123") -> 6
("a1b2c3") -> 6
("123abc456def") -> 21
        }
    }
}

problem Generated/1360 {
code {
        func sum_of_digits_in_string(s: string) -> int
    }
    tests {
        template nse {
            ("Hello World 123") -> 6
("The quick brown fox jumps over the lazy dog") -> 0
("123456789") -> 45
("12ab34cd56") -> 21
("") -> 0
        }
    }
}

problem Generated/1361 {
code {
        func sum_of_digit_in_str(mystr: string) -> int
    }
    tests {
        template nse {
            ("hello123world") -> 6
("123456789") -> 45
("A1B2C3D4E5") -> 15
("") -> 0
("hello world") -> 0
        }
    }
}

problem Generated/1362 {
code {
        func count_digits_in_string(input_s: string) -> int
    }
    tests {
        template nse {
            ("hello world") -> 0
("12345") -> 5
("") -> 0
("a1b2c3d4e5") -> 5
("1") -> 1
        }
    }
}

problem Generated/1363 {
code {
        func sum_of_digits_in_string(s: string) -> int
    }
    tests {
        template nse {
            ("Hello123World") -> 6
("9823478174") -> 53
("abcd") -> 0
("1a2b3c4d5e") -> 15
("") -> 0
        }
    }
}

problem Generated/1364 {
code {
        func convert_string_to_ascii_codes(s: string) -> list<int>
    }
    tests {
        template nse {
            ("abc123def456") -> [49, 50, 51, 52, 53, 54]
("HelloWorld") -> []
("12345") -> [49, 50, 51, 52, 53]
("") -> []
("a1b2c3d4e5") -> [49, 50, 51, 52, 53]
        }
    }
}

problem Generated/1365 {
code {
        func find_words_starting_with(words: list<string>, letter: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
(["apple", "banana", "cherry", "date"], "z") -> []
        }
    }
}

problem Generated/1366 {
code {
        func find_string_starts_with(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "kiwi", "peach"], "a") -> ["apple", "apricot"]
(["apple", "banana", "apricot", "kiwi", "peach"], "b") -> ["banana"]
([], "a") -> []
(["apple", "banana", "apricot", "kiwi", "peach"], "") -> ["apple", "banana", "apricot", "kiwi", "peach"]
(["apple", "banana", "apricot", "kiwi", "peach"], "c") -> []
        }
    }
}

problem Generated/1367 {
code {
        func get_words_starting_with(words: list<string>, letter: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "durian", "eggplant"], "a") -> ["apple"]
(["apple", "banana", "cherry", "durian", "eggplant"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "durian", "eggplant"], "e") -> ["eggplant"]
(["apple", "banana", "cherry", "durian", "eggplant"], "f") -> []
(["apple", "banana", "cherry", "durian", "eggplant"], "a") -> ["apple"]
        }
    }
}

problem Generated/1368 {
code {
        func string_to_ascii(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello world") -> [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]
("AaBbCc") -> [65, 97, 66, 98, 67, 99]
("") -> []
("1234") -> [49, 50, 51, 52]
("Python is awesome") -> [80, 121, 116, 104, 111, 110, 32, 105, 115, 32, 97, 119, 101, 115, 111, 109, 101]
        }
    }
}

problem Generated/1369 {
code {
        func string_to_ascii(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("python") -> [112, 121, 116, 104, 111, 110]
("coding is fun") -> [99, 111, 100, 105, 110, 103, 32, 105, 115, 32, 102, 117, 110]
("") -> []
("123abc") -> [49, 50, 51, 97, 98, 99]
        }
    }
}

problem Generated/1370 {
code {
        func convert_string_to_ascii_list(input_str: string) -> list<int>
    }
    tests {
        template nse {
            ("") -> []
("a") -> [97]
("Hello, World!") -> [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33]
("12345") -> [49, 50, 51, 52, 53]
("Python is fun") -> [80, 121, 116, 104, 111, 110, 32, 105, 115, 32, 102, 117, 110]
        }
    }
}

problem Generated/1371 {
code {
        func string_to_ascii_list(input_s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("world") -> [119, 111, 114, 108, 100]
("Python3") -> [80, 121, 116, 104, 111, 110, 51]
("") -> []
("123") -> [49, 50, 51]
        }
    }
}

problem Generated/1372 {
code {
        func convert_string_to_ascii(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("Python is awesome") -> [80, 121, 116, 104, 111, 110, 32, 105, 115, 32, 97, 119, 101, 115, 111, 109, 101]
("") -> []
("1234") -> [49, 50, 51, 52]
("a b c d") -> [97, 32, 98, 32, 99, 32, 100]
        }
    }
}

problem Generated/1373 {
code {
        func convert_string_to_ascii_list(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("12345") -> [49, 50, 51, 52, 53]
("") -> []
(" Python") -> [32, 80, 121, 116, 104, 111, 110]
("HELLO") -> [72, 69, 76, 76, 79]
        }
    }
}

problem Generated/1374 {
code {
        func convert_string_to_ascii(s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello, World!") -> [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33]
("") -> []
("12345") -> [49, 50, 51, 52, 53]
("aAbBcC") -> [97, 65, 98, 66, 99, 67]
("$#%") -> [36, 35, 37]
        }
    }
}

problem Generated/1375 {
code {
        func convert_string_to_ord_list(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("world") -> [119, 111, 114, 108, 100]
("") -> []
("1234") -> [49, 50, 51, 52]
("danish@openai.com") -> [100, 97, 110, 105, 115, 104, 64, 111, 112, 101, 110, 97, 105, 46, 99, 111, 109]
        }
    }
}

problem Generated/1376 {
code {
        func encode_string(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("world") -> [119, 111, 114, 108, 100]
("hello world") -> [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]
("") -> []
("1a2b3c4d") -> [49, 97, 50, 98, 51, 99, 52, 100]
        }
    }
}

problem Generated/1377 {
code {
        func decode_message(msg: string) -> string
    }
    tests {
        template nse {
            ("Hello, world!") -> "Hello, world!"
("\u00a9") -> "\u00a9"
("Hello, \u4E16\u754C!") -> "Hello, 世界!"
("J\u00fcrgen Kr\u00f6ger") -> "Jürgen Kröger"
("\u6D4B\u8BD5\u4E00\u4E0B") -> "测试一下"
        }
    }
}

problem Generated/1378 {
code {
        func remove_words_starting_with_letter(words: list<string>, letter: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "mango"], "b") -> ["apple", "orange", "mango"]
(["apple", "banana", "orange", "mango"], "o") -> ["apple", "banana", "mango"]
(["dog", "cat", "elephant", "lion"], "d") -> ["cat", "elephant", "lion"]
([], "x") -> []
(["hello", "world"], "h") -> ["world"]
        }
    }
}

problem Generated/1379 {
code {
        func sort_list_of_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python", "is", "awesome"]) -> ["awesome", "hello", "is", "python", "world"]
(["apple", "banana", "cat", "dog", "egg"]) -> ["apple", "banana", "cat", "dog", "egg"]
(["a", "b", "c", "d"]) -> ["a", "b", "c", "d"]
(["abcd", "dcba", "cbad", "bacd"]) -> ["abcd", "bacd", "cbad", "dcba"]
([]) -> []
        }
    }
}

problem Generated/1380 {
code {
        func sort_strings_by_ascii(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["abc", "def", "ghi"]) -> ["abc", "def", "ghi"]
(["cba", "bca", "abc"]) -> ["abc", "bca", "cba"]
(["abb", "abc", "aab", "bbc"]) -> ["aab", "abb", "abc", "bbc"]
(["hello", "world", "python", "is", "great"]) -> ["great", "hello", "is", "python", "world"]
(["zoo", "apple", "banana"]) -> ["apple", "banana", "zoo"]
        }
    }
}

problem Generated/1381 {
code {
        func sort_string(s: string) -> string
    }
    tests {
        template nse {
            ("cba") -> "abc"
("hello") -> "ehllo"
("") -> ""
("hEllo") -> "Ehllo"
("12345") -> "12345"
        }
    }
}

problem Generated/1382 {
code {
        func reverse_string(s: string) -> string
    }
    tests {
        template nse {
            ("hello") -> "olleh"
("python") -> "nohtyp"
("") -> ""
("a") -> "a"
("ab") -> "ba"
        }
    }
}

problem Generated/1383 {
code {
        func reverse_word(word: string) -> string
    }
    tests {
        template nse {
            ("hello") -> "olleh"
("python is easy") -> "ysae si nohtyp"
("12345") -> "54321"
("a b c") -> "c b a"
("") -> ""
        }
    }
}

problem Generated/1384 {
code {
        func reverse_string_from_ord(s: string) -> string
    }
    tests {
        template nse {
            ("hello") -> "olleh"
("abcdefghijklmnopqrstuvwxyz") -> "zyxwvutsrqponmlkjihgfedcba"
("1234567890") -> "0987654321"
("") -> ""
(" ") -> " "
        }
    }
}

problem Generated/1385 {
code {
        func copy_and_shift(s: string, shift: int) -> string
    }
    tests {
        template nse {
            ("abcxyz", 2) -> "cdezab"
("def", -1) -> "cde"
("abcxyz", 26) -> "abcxyz"
("abcxyz", 0) -> "abcxyz"
("ABCD", 2) -> "ABCD"
        }
    }
}

problem Generated/1386 {
code {
        func string_to_ord_list(dat: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("world") -> [119, 111, 114, 108, 100]
("python") -> [112, 121, 116, 104, 111, 110]
("") -> []
("123") -> [49, 50, 51]
        }
    }
}

problem Generated/1387 {
code {
        func string_to_ascii(string_value: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello World") -> [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]
("Python is awesome") -> [80, 121, 116, 104, 111, 110, 32, 105, 115, 32, 97, 119, 101, 115, 111, 109, 101]
("") -> []
("12345") -> [49, 50, 51, 52, 53]
("AbCdEfGhIjK") -> [65, 98, 67, 100, 69, 102, 71, 104, 73, 106, 75]
        }
    }
}

problem Generated/1388 {
code {
        func get_ascii_values(s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello, World!") -> [72, 101, 108, 108, 111, 87, 111, 114, 108, 100]
("Python3") -> [80, 121, 116, 104, 111, 110]
("") -> []
("Testing the function!") -> [84, 101, 115, 116, 105, 110, 103, 116, 104, 101, 102, 117, 110, 99, 116, 105, 111, 110]
("12345") -> []
        }
    }
}

problem Generated/1389 {
code {
        func get_ascii_values(s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello, world!") -> [72, 101, 108, 108, 111, 119, 111, 114, 108, 100]
("Python 3.9.0") -> [80, 121, 116, 104, 111, 110]
("") -> []
("A quick brown fox jumps over the lazy dog") -> [65, 113, 117, 105, 99, 107, 98, 114, 111, 119, 110, 102, 111, 120, 106, 117, 109, 112, 115, 111, 118, 101, 114, 116, 104, 101, 108, 97, 122, 121, 100, 111, 103]
("12345") -> []
        }
    }
}

problem Generated/1390 {
code {
        func concatenate_ascii_values(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["a", "b", "c"]) -> 294
(["h", "e", "l", "l", "o"]) -> 532
(["1", "2", "3"]) -> 150
([]) -> 0
(["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]) -> 2015
        }
    }
}

problem Generated/1391 {
code {
        func is_prime(num: int) -> bool
    }
    tests {
        template nse {
            (2) -> true
(3) -> true
(4) -> false
(5) -> true
(6) -> false
        }
    }
}

problem Generated/1392 {
code {
        func is_prime(num: int) -> bool
    }
    tests {
        template nse {
            (2) -> true
(7) -> true
(10) -> false
(7919) -> true
(100) -> false
        }
    }
}

problem Generated/1393 {
code {
        func check_prime_number(num: int) -> bool
    }
    tests {
        template nse {
            (1) -> false
(2) -> true
(3) -> true
(4) -> false
(5) -> true
(6) -> false
(7) -> true
(8) -> false
(9) -> false
(10) -> false
        }
    }
}

problem Generated/1394 {
code {
        func are_all_strings_longer_than_n(strs: list<string>, n: int) -> bool
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], 3) -> true
(["apple", "banana", "cherry", "date"], 5) -> false
([], 1) -> true
(["abc"], 0) -> true
(["", "a", "bb", "ccc"], 2) -> false
        }
    }
}

problem Generated/1395 {
code {
        func is_list_all_even(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([2, 4, 6, 8, 10]) -> true
([3, 6, 4, 8, 10]) -> false
([]) -> true
([1, 2]) -> false
([2, 4, 6, 8, 10, 11]) -> false
        }
    }
}

problem Generated/1396 {
code {
        func is_list_all_absolute(numbers: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([-1, 2, -3, 4, -5]) -> false
([]) -> true
([0]) -> true
([0, 1, -1]) -> false
        }
    }
}

problem Generated/1397 {
code {
        func is_list_close_to_zero(numbers: list<double>, tolerance: double) -> bool
    }
    tests {
        template nse {
            ([0.1, 0.2, 0.3], 0.5) -> true
([-0.2, 0.3, 0.1], 0.5) -> true
([0.1, 0.2, 0.3], 0.1) -> false
([-0.2, 0.3, 0.1], 0.2) -> false
([0.0, 0.0, 0.0], 0.1) -> true
        }
    }
}

problem Generated/1398 {
code {
        func all_values_within_threshold(numbers: list<double>, threshold: double) -> bool
    }
    tests {
        template nse {
            ([0.1, 0.2, 0.3], 0.5) -> true
([0.1, -0.2, 0.3], 0.5) -> true
([0.1, 0.2, 0.3], 0.2) -> false
([], 0.5) -> true
([1.0, 2.0, 3.0, 4.0, 5.0], 0.0) -> false
        }
    }
}

problem Generated/1399 {
code {
        func is_abs_all_less_than_num(numbers: list<int>, limit: int) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 6) -> true
([7, 8, 9, 10], 5) -> false
([-1, 2, -3, 4, -5], 6) -> true
([1, 2, 3, 4, 5], 5) -> false
([], 100) -> true
        }
    }
}

problem Generated/1400 {
code {
        func is_all_positive_or_negative(numbers: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> false
([1.0, 2.0, 3.0, 4.0, 5.0]) -> true
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> true
([-1.0, 2.0, 3.0, -4.0, 5.0]) -> false
([0.0, -2.0, 3.0, -4.0, 5.0]) -> false
        }
    }
}

problem Generated/1401 {
code {
        func has_all_positive_or_negative_numbers(numbers: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> false
([1.0, 2.0, 3.0, 4.0, 5.0]) -> true
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> true
([0.0, -2.0, 3.0, -4.0, 5.0]) -> false
([0.0, 0.0, 0.0]) -> true
        }
    }
}

problem Generated/1402 {
code {
        func is_sum_of_elements_greater_than_zero(elements: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0]) -> true
([-1.0, 2.0, 3.0]) -> false
([0.0, 2.0, 3.0]) -> false
([1.0, -2.0, 3.0]) -> false
([]) -> false
        }
    }
}

problem Generated/1403 {
code {
        func check_max_abs_val(numbers: list<double>, threshold: double) -> bool
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0], 5.0) -> true
([1.0, -2.0, 3.0, -4.0, 5.0], 4.0) -> false
([1.0, 2.0, 3.0, 4.0, 5.0], 6.0) -> true
([-1.0, -2.0, -3.0, -4.0, -5.0], 5.0) -> true
([0.0, -2.0, 3.0, -4.0, 5.0], 5.0) -> true
        }
    }
}

problem Generated/1404 {
code {
        func are_all_numbers_less_than_max(numbers: list<double>, max_value: double) -> bool
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 6.0 ) -> true
([1.0, 2.0, 3.0, 4.0, 5.0], 5.0 ) -> false
([-1.0, -2.0, -3.0, -4.0, -5.0], 0.0) -> true
([], 5.0) -> true
([1.0, 2.0, 3.0, 4.0, 5.0], 3.5) -> false
        }
    }
}

problem Generated/1405 {
code {
        func check_min_value_below_threshold(numbers: list<double>, threshold: double) -> bool
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 10.0) -> true
([1.0, 2.0, 3.0, 4.0, 5.0], 3.0) -> false
([1.0, 2.0, 3.0, 4.0, 5.0], 1.0) -> false
([1.0, 2.0, 3.0, 4.0, 5.0], 0.5) -> false
([], 10.0) -> true
        }
    }
}

problem Generated/1406 {
code {
        func is_list_all_numbers_less_than_min(elements: list<int>, min_num: int) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 6) -> true
([1, 2, 3, 4, 5], 4) -> false
([7, 3, 5, 9, 6], 10) -> true
([1, 7, 4, 9, 5], 0) -> false
([1, 2, 3, 4, 5, 6, 7, 8], 1) -> false
        }
    }
}

problem Generated/1407 {
code {
        func is_list_in_range(elements: list<int>, start: int, last: int) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 1, 5) -> true
([1, 2, 3, 4, 5], 2, 4) -> false
([1, 2, 3, 4, 5], 3, 6) -> false
([1, 2, 3, 4, 5], 0, 6) -> true
([1, 2, 3, 4, 5], 1, 1) -> false
        }
    }
}

problem Generated/1408 {
code {
        func check_is_increasing(numbers: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([1, 1, 1, 1, 1]) -> false
([5, 4, 3, 2, 1]) -> false
([]) -> true
([1]) -> true
        }
    }
}

problem Generated/1409 {
code {
        func check_if_lists_equal(list1: list<int>, list2: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) -> true
([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]) -> false
([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) -> false
([1], [1]) -> true
([], []) -> true
        }
    }
}

problem Generated/1410 {
code {
        func is_square_matrix(matrix: list<list<int>>) -> bool
    }
    tests {
        template nse {
            ([[1, 2], [3, 4]]) -> true
([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> true
([[1, 2, 3], [4, 5, 6]]) -> false
([[1, 2], [3, 4], [5, 6]]) -> false
([[1, 2, 3], [4, 5, 6], [7, 8]]) -> false
        }
    }
}

problem Generated/1411 {
code {
        func check_elements_greater_than_index(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([1, 2, 3, 2, 5]) -> false
([3, 2, 1]) -> false
([2, 3, 5, 8, 13]) -> true
([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) -> false
        }
    }
}

problem Generated/1412 {
code {
        func is_list_all_positive(numbers: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> true
([1.0, -2.0, 3.0, -4.0, 5.0]) -> false
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> false
([0.0, 2.0, 3.0, 4.0, 5.0]) -> false
([]) -> true
        }
    }
}

problem Generated/1413 {
code {
        func is_all_elements_positive(elements: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> true
([-1.0, 2.0, 3.0, 4.0, 5.0]) -> false
([0.0, 2.0, 3.0, 4.0, 5.0]) -> false
([]) -> true
([0.0, -2.0, 3.0, -4.0, 5.0]) -> false
        }
    }
}

problem Generated/1414 {
code {
        func is_list_contains_all(elements: list<int>, search_elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [2]) -> true
([1, 2, 3, 4, 5], [2, 6]) -> false
([1, 2, 3, 4, 5], [2, 4, 5]) -> true
([], [2, 4, 5]) -> false
([1, 3, 5, 7, 9], [3, 5, 7, 9, 1]) -> true
        }
    }
}

problem Generated/1415 {
code {
        func check_all_numbers_positive(numbers: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> false
([1.0, 2.0, 3.0, 4.0, 5.0]) -> true
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> false
([0.0, 2.0, 3.0, 4.0, 5.0]) -> false
([]) -> true
        }
    }
}

problem Generated/1416 {
code {
        func check_if_unique(elements: list<string>) -> bool
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "pear"]) -> true
(["apple", "banana", "orange", "pear", "banana"]) -> false
([]) -> true
(["apple"]) -> true
(["apple", "banana", "apple"]) -> false
        }
    }
}

problem Generated/1417 {
code {
        func check_dict_keys(keys: list<string>, values: list<int>, required_keys: list<string>) -> bool
    }
    tests {
        template nse {
            (["a", "b", "c"], [1, 2, 3], ["a", "c"]) -> true
(["a", "b", "c"], [1, 2, 3], ["a", "d"]) -> false
([], [], []) -> true
([], [], ["a"]) -> false
(["a", "b", "c"], [1, 2, 3], []) -> true
        }
    }
}

problem Generated/1418 {
code {
        func are_all_items_matching(elements: list<int>, c: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [0, 2, -3, 4, 0]) -> true
([7, 3, 5, 9, 6], [0, 2, -3, 4, 0]) -> false
([1, 7, 4, 9, 5], [1, 2, 3, 4, 5]) -> false
([1, 7, 4, 9, 5], [-1, -2, -3, -4, -5]) -> true
([1, 2, 3, 4, 5, 6, 7, 8], [1, -1, -1, 1, 0, 0, 1, 1]) -> false
        }
    }
}

problem Generated/1419 {
code {
        func is_sorted_desc(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([5, 4, 3, 2, 1]) -> true
([5, 4, 3, 5, 1]) -> false
([1, 2, 3, 4, 5]) -> false
([3, 3, 2, 2, 1]) -> true
([1]) -> true
        }
    }
}

problem Generated/1420 {
code {
        func is_sorted_and_unique(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([1, 3, 2, 4, 5]) -> false
([1, 1, 2, 2, 3, 3]) -> false
([1]) -> true
([]) -> true
        }
    }
}

problem Generated/1421 {
code {
        func is_sorted_and_positive(numbers: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> true
([1.0, 0.0, 3.0, 4.0, 5.0]) -> false
([-1.0, 2.0, 3.0, 4.0, 5.0]) -> false
([1.0, 2.0, 3.0, 4.0, -5.0]) -> false
([]) -> true
        }
    }
}

problem Generated/1422 {
code {
        func is_list_sorted_desc(arr: list<double>) -> bool
    }
    tests {
        template nse {
            ([5.0, 4.0, 3.0, 2.0, 1.0]) -> true
([1.0, 2.0, 3.0, 4.0, 5.0]) -> false
([1.0, 2.0, 3.0, 4.0, 5.0, 4.0]) -> false
([5.0, 4.0, 3.0, 2.0, 2.0]) -> true
([5.0, 4.0, 3.0, 2.0, 2.5]) -> false
        }
    }
}

problem Generated/1423 {
code {
        func are_elements_sorted(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([7, 3, 5, 9, 6]) -> false
([1, 7, 4, 9, 5]) -> false
([1, 2, 3, 4, 4, 5]) -> true
([]) -> true
        }
    }
}

problem Generated/1424 {
code {
        func is_sorted_desc(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([5, 4, 3, 2, 1]) -> true
([1, 2, 3, 4, 5]) -> false
([1, 3, 2, 4, 5]) -> false
([10, 7, 5, 2, 1]) -> true
([10, 7, 5, 2, 5]) -> false
        }
    }
}

problem Generated/1425 {
code {
        func is_ascii_string(txt: string) -> bool
    }
    tests {
        template nse {
            ("Hello, World!") -> true
("こんにちは") -> false
("") -> true
("1234567890") -> true
("\n\t\r") -> true
        }
    }
}

problem Generated/1426 {
code {
        func is_string_all_printable(s: string) -> bool
    }
    tests {
        template nse {
            ("Hello, World!") -> true
("the quick brown fox jumps over the lazy dog") -> true
("") -> true
("Hello,\nWorld!") -> false
("Hello\tWorld!") -> false
        }
    }
}

problem Generated/1427 {
code {
        func is_ascii(txt: string) -> bool
    }
    tests {
        template nse {
            ("abc") -> true
("test") -> true
("Hello, World!") -> true
("你好，世界！") -> false
("") -> true
        }
    }
}

problem Generated/1428 {
code {
        func check_string_contains_only_ascii_lowercase(s: string) -> bool
    }
    tests {
        template nse {
            ("hello") -> true
("world") -> true
("Hello") -> false
("1234") -> false
("abc123") -> false
        }
    }
}

problem Generated/1429 {
code {
        func is_string_lowercase(s: string) -> bool
    }
    tests {
        template nse {
            ("hello") -> true
("Hello") -> false
("") -> true
("123") -> false
("hello123") -> false
        }
    }
}

problem Generated/1430 {
code {
        func all_bits_set(num: int) -> bool
    }
    tests {
        template nse {
            (7) -> true
(15) -> true
(8) -> false
(31) -> true
(0) -> false
        }
    }
}

problem Generated/1431 {
code {
        func check_strings_prefix(strs: list<string>, pre: string) -> bool
    }
    tests {
        template nse {
            (["apple", "apricot", "avocado"], "a") -> true
(["hello", "world", "python"], "h") -> false
(["cat", "car", "cab"], "ca") -> true
(["python", "java", "javascript"], "py") -> false
([], "a") -> true
        }
    }
}

problem Generated/1432 {
code {
        func is_all_lowercase(words: list<string>) -> bool
    }
    tests {
        template nse {
            (["hello", "world", "how", "are", "you"]) -> true
(["Hello", "World", "How", "Are", "You"]) -> false
([]) -> true
(["HELLO", "WORLD", "HOW", "ARE", "YOU"]) -> false
(["heLLO", "wORLD", "how", "aRe", "you"]) -> false
        }
    }
}

problem Generated/1433 {
code {
        func is_all_lowercase(input_s: string) -> bool
    }
    tests {
        template nse {
            ("hello world") -> true
("") -> true
("Hello World") -> false
("hello World") -> false
("123") -> true
        }
    }
}

problem Generated/1434 {
code {
        func is_all_upper(texts: list<string>) -> bool
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON"]) -> true
(["Hello", "WORLD", "Python"]) -> false
([]) -> true
(["", "", ""]) -> true
(["123", "456", "789"]) -> true
        }
    }
}

problem Generated/1435 {
code {
        func is_all_uppercase(txt: string) -> bool
    }
    tests {
        template nse {
            ("THIS IS ALL UPPERCASE") -> true
("THIS is NOT all UPPERCASE") -> false
("this is not all uppercase") -> false
("123 !@#") -> true
("") -> true
        }
    }
}

problem Generated/1436 {
code {
        func is_all_uppercase(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["HELLO", "WORLD"]) -> true
(["Hello", "WORLD"]) -> false
([]) -> true
(["", "HELLO", "WORLD"]) -> true
(["Hello", "world"]) -> false
        }
    }
}

problem Generated/1437 {
code {
        func check_all_strings_lowercase(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> true
(["hello", "WoRLD", "python"]) -> false
([]) -> true
(["PYTHON", "JAVA", "C++"]) -> false
(["hello", "world", "Python"]) -> false
        }
    }
}

problem Generated/1438 {
code {
        func check_if_all_lower(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> true
(["Hello", "world", "python"]) -> false
([]) -> true
(["hello", "WORLD", "Python"]) -> false
(["python", "programming"]) -> true
        }
    }
}

problem Generated/1439 {
code {
        func check_all_uppercase(words: list<string>) -> bool
    }
    tests {
        template nse {
            (["HELLO", "WORLD"]) -> true
(["Hello", "WORLD"]) -> false
(["", "WORLD"]) -> false
(["HELLO", "WORLD", "PYTHON", "PROGRAMMING"]) -> true
(["HELLO", "WORLD", "python", "PROGRAMMING"]) -> false
        }
    }
}

problem Generated/1440 {
code {
        func are_all_strings_uppercase(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON"]) -> true
(["hello", "WORLD", "PYTHON"]) -> false
(["", "WORLD", "PYTHON"]) -> false
([]) -> true
(["1234", "ABCDE", "fghij"]) -> false
        }
    }
}

problem Generated/1441 {
code {
        func is_all_uppercase(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["HELLO", "WORLD"]) -> true
(["Hello", "WORLD"]) -> false
([]) -> true
(["123", "ABC"]) -> false
(["A", "B", "C"]) -> true
        }
    }
}

problem Generated/1442 {
code {
        func is_alpha_string(s: string) -> bool
    }
    tests {
        template nse {
            ("hello") -> true
("hello world") -> false
("HelloWorld") -> true
("123") -> false
("") -> true
        }
    }
}

problem Generated/1443 {
code {
        func are_all_strings_alpha(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["abc", "def", "ghi"]) -> true
(["abc", "def", "123"]) -> false
([]) -> true
(["", "", ""]) -> true
(["test", "this", "function"]) -> true
        }
    }
}

problem Generated/1444 {
code {
        func are_all_alpha(elements: list<string>) -> bool
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> true
(["hello", "world", "python3"]) -> false
([]) -> true
(["1", "2", "3"]) -> false
(["hello", "world", "python", "3"]) -> false
        }
    }
}

problem Generated/1445 {
code {
        func check_alpha_string(input_s: string) -> bool
    }
    tests {
        template nse {
            ("HelloWorld") -> true
("Apple123") -> false
("Thisisalongstringsowewillseewhatwillhappenifitwillpass") -> true
("") -> true
("1234") -> false
        }
    }
}

problem Generated/1446 {
code {
        func is_alpha_string(s: string) -> bool
    }
    tests {
        template nse {
            ("hello") -> true
("HeLlO") -> true
("hello123") -> false
(" ") -> false
("Hello World") -> false
        }
    }
}

problem Generated/1447 {
code {
        func check_num_strings(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["123", "456", "789"]) -> true
(["123", "456", "789", "a"]) -> false
([]) -> true
(["a", "b", "c"]) -> false
(["123", "4a6", "789"]) -> false
        }
    }
}

problem Generated/1448 {
code {
        func is_all_numbers(elements: list<string>) -> bool
    }
    tests {
        template nse {
            (["123", "456", "789"]) -> true
(["123", "4a6", "789"]) -> false
([]) -> true
(["12.3", "456", "789"]) -> false
(["-123", "456", "789"]) -> false
        }
    }
}

problem Generated/1449 {
code {
        func check_list_for_digits(elements: list<string>) -> bool
    }
    tests {
        template nse {
            (["123", "456", "789"]) -> true
(["123", "4a6", "789"]) -> false
(["123", "456", "78.9"]) -> false
(["1", "2", "3", "4", "5"]) -> true
([]) -> true
        }
    }
}

problem Generated/1450 {
code {
        func is_list_of_ints(elements: list<string>) -> bool
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"]) -> true
(["123", "456", "789"]) -> true
(["1", "2", "3", "4", "5", "a"]) -> false
(["1", "2", "3", "4", "-5"]) -> false
([]) -> true
        }
    }
}

problem Generated/1451 {
code {
        func is_digits_only(input_strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["123", "456", "789"]) -> true
(["123", "456", "7e9"]) -> false
(["123", "45 6", "789"]) -> false
(["", "0", "1234"]) -> true
(["123", "4.56", "789"]) -> false
        }
    }
}

problem Generated/1452 {
code {
        func all_strings_start_with_prefix(strs: list<string>, pre: string) -> bool
    }
    tests {
        template nse {
            (["apple", "application", "apartment"], "ap") -> true
(["apple", "application", "apartment"], "app") -> false
([], "ap") -> true
(["ap"], "ap") -> true
(["apple", "application", "apartment"], "") -> true
        }
    }
}

problem Generated/1453 {
code {
        func all_start_with(strs: list<string>, pre: string) -> bool
    }
    tests {
        template nse {
            (["hello", "hey", "hi"], "h") -> true
(["hello", "hey", "hi"], "e") -> false
(["hello", "hey", "hi"], "") -> true
(["", "", ""], "") -> true
(["a", "b", "c"], "ab") -> false
        }
    }
}

problem Generated/1454 {
code {
        func has_all_words(sentence: string, words: list<string>) -> bool
    }
    tests {
        template nse {
            ("This is a sample sentence", ["sample", "sentence"]) -> true
("This is a sample sentence", ["sample", "notfound"]) -> false
("This is a sample sentence", ["This", "is", "a", "sample", "sentence"]) -> true
("This is a sample sentence", ["This", "is", "a", "sample", "notfound"]) -> false
("This is a sample sentence", []) -> true
        }
    }
}

problem Generated/1455 {
code {
        func check_word_count(sentence: string, words: list<string>) -> bool
    }
    tests {
        template nse {
            ("The quick brown fox jumps over the lazy dog", ["quick", "dog"]) -> true
("The quick brown fox jumps over the lazy dog", ["quick", "cat"]) -> false
("", ["quick", "dog"]) -> false
("The quick brown fox jumps over the lazy dog", []) -> true
("The quick quick quick quick quick quick quick quick quick quick brown fox", ["quick", "fox"]) -> true
        }
    }
}

problem Generated/1456 {
code {
        func has_all_substrings(s: string, substrs: list<string>) -> bool
    }
    tests {
        template nse {
            ("hello world!", ["lo", "wo", "d", "h", "he"]) -> true
("hello world!", ["lol", "wo", "d", "h", "he"]) -> false
("hello world!", [""]) -> true
("", ["lo", "wo", "d", "h", "he"]) -> false
("hello world!", ["hello", "world"]) -> true
        }
    }
}

problem Generated/1457 {
code {
        func replace_list_elements(elements: list<string>, old: string, new_dat: string) -> list<string>
    }
    tests {
        template nse {
            (["cat", "dog", "rat"], "dog", "elephant") -> ["cat", "elephant", "rat"]
(["apple", "orange", "banana"], "kiwi", "grape") -> ["apple", "orange", "banana"]
(["one", "two", "one", "three"], "one", "four") -> ["four", "two", "four", "three"]
(["yellow", "red", "green", "red", "orange"], "red", "blue") -> ["yellow", "blue", "green", "blue", "orange"]
(["hello", "world"], "hi", "bye") -> ["hello", "world"]
        }
    }
}

problem Generated/1458 {
code {
        func replace_string_elements(elements: list<string>, old: string, new_dat: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "apple", "banana"], "banana", "orange") -> ["apple", "orange", "cherry", "apple", "orange"]
(["hello", "world", "hello"], "hello", "hi") -> ["hi", "world", "hi"]
(["hello", "world", "hello"], "orange", "hi") -> ["hello", "world", "hello"]
([], "apple", "orange") -> []
(["apple", "banana", "cherry", "apple", "banana"], "", "orange") -> ["apple", "banana", "cherry", "apple", "banana"]
        }
    }
}

problem Generated/1459 {
code {
        func replace_elements_in_list(elements: list<string>, old_value: string, new_value: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "banana", "apple"], "banana", "orange") -> ["apple", "orange", "cherry", "orange", "apple"]
(["apple", "banana", "cherry", "banana", "apple"], "orange", "kiwi") -> ["apple", "banana", "cherry", "banana", "apple"]
(["apple", "banana", "cherry", "banana", "apple"], "apple", "pear") -> ["pear", "banana", "cherry", "banana", "pear"]
([], "orange", "kiwi") -> []
(["apple", "banana", "cherry", "banana", "apple"], "banana", "") -> ["apple", "", "cherry", "", "apple"]
        }
    }
}

problem Generated/1460 {
code {
        func replace_all(input_lst: list<string>, old_value: string, new_value: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "grapes", "banana", "orange"], "banana", "kiwi") -> ["apple", "kiwi", "grapes", "kiwi", "orange"]
(["apple", "banana", "grapes", "banana", "orange"], "strawberry", "kiwi") -> ["apple", "banana", "grapes", "banana", "orange"]
(["apple", "banana", "grapes", "banana", "orange"], "banana", "") -> ["apple", "", "grapes", "", "orange"]
([], "banana", "kiwi") -> []
(["banana", "banana", "banana"], "banana", "kiwi") -> ["kiwi", "kiwi", "kiwi"]
        }
    }
}

problem Generated/1461 {
code {
        func replace_elements_in_list(elements: list<string>, old: string, new_dat: string) -> list<string>
    }
    tests {
        template nse {
            (["a", "b", "c", "d"], "c", "p") -> ["a", "b", "p", "d"]
(["a", "b", "c", "d"], "f", "p") -> ["a", "b", "c", "d"]
(["John", "Doe", "John", "Doe", "John"], "John", "Jane") -> ["Jane", "Doe", "Jane", "Doe", "Jane"]
(["a", "b", "c", "d"], "b", "") -> ["a", "", "c", "d"]
(["111", "222", "333", "444"], "222", "555") -> ["111", "555", "333", "444"]
        }
    }
}

problem Generated/1462 {
code {
        func replace_items_in_list(elements: list<string>, old_item: string, new_item: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "pear", "banana", "orange"], "banana", "peach") -> ["apple", "peach", "pear", "peach", "orange"]
(["apple", "banana", "pear", "banana", "orange"], "mango", "peach") -> ["apple", "banana", "pear", "banana", "orange"]
([], "banana", "peach") -> []
(["apple", "banana", "pear", "banana", "orange"], "banana", "") -> ["apple", "", "pear", "", "orange"]
(["apple", "banana", "pear", "banana", "orange"], "banana", "banana") -> ["apple", "banana", "pear", "banana", "orange"]
        }
    }
}

problem Generated/1463 {
code {
        func append_numbers_to_list(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, -3, 4, 5]) -> [2, 4]
([7, 3, 5, 9, 6]) -> [6]
([1, 7, 4, 9, 5]) -> [4]
([1, 7, -4, 9, -5]) -> []
([1, 2, 3, 4, 5, 6, 7, 8]) -> [2, 4, 6, 8]
        }
    }
}

problem Generated/1464 {
code {
        func is_anagram(s: string, t: string) -> bool
    }
    tests {
        template nse {
            ("anagram", "nagaram") -> true
("rat", "car") -> false
("", "") -> true
("ab", "a") -> false
("aaaabbbb", "abababab") -> true
        }
    }
}

problem Generated/1465 {
code {
        func is_sorted_and_unique(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([1, 2, 2, 4, 5]) -> false
([1, 2, 3, -4, 5]) -> true
([1, 2, 3, 0, 5]) -> true
([1, 1, 1, 1]) -> false
        }
    }
}

problem Generated/1466 {
code {
        func is_sorted_descending(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([5, 4, 3, 2, 1]) -> true
([1, 2, 3, 4, 5]) -> false
([1, 7, 4, 9, 5]) -> false
([1, 1, 1, 1, 1]) -> true
([1]) -> true
        }
    }
}

problem Generated/1467 {
code {
        func is_list_asc_sorted(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([]) -> true
([3, 2, 1]) -> false
([1, 2, 3, 5, 4]) -> false
([1]) -> true
        }
    }
}

problem Generated/1468 {
code {
        func is_list_increasing(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([1, 7, 3, 9, 6]) -> false
([1, 2, 3, 1, 5, 6, 7, 8]) -> false
([1, 2, 3, 4, 4, 6, 7, 8]) -> false
([1, 2, 3, 4, 5, 6, 7, 8]) -> true
        }
    }
}

problem Generated/1469 {
code {
        func check_indices(elements: list<int>, indices: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [0, 2, 4]) -> true
([1, 2, 3, 4, 5], [0, 2, 5]) -> false
([1, 2, 3, 4, 5], [1, 3]) -> true
([1, 2, 3, 4, 5], []) -> true
([1, 2, 3, 4, 5], [-1, 2, 4]) -> false
        }
    }
}

problem Generated/1470 {
code {
        func check_palindrome(input_lst: list<string>) -> bool
    }
    tests {
        template nse {
            (["racecar", "radar", "level", "deified", "civic"]) -> true
(["racecar", "radar", "level", "deified", "palindrome"]) -> false
(["hello", "world", "python"]) -> false
(["abb", "b", "a"]) -> false
(["a", "b", "a"]) -> true
        }
    }
}

problem Generated/1471 {
code {
        func are_lists_equal(list1: list<int>, list2: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) -> true
([7, 3, 5, 9, 6], [0, 2, -3, 4, 0]) -> false
([1, 7, 4, 9, 5], [1, 2, 3, 4, 5]) -> false
([1, 7, 4, 9, 5], [5, 9, 4, 7, 1]) -> true
([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]) -> false
        }
    }
}

problem Generated/1472 {
code {
        func check_all_unique(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([1, 2, 3, 4, 5, 1]) -> false
([]) -> true
([1, 1, 1]) -> false
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> true
        }
    }
}

problem Generated/1473 {
code {
        func check_floor_equal(numbers: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> true
([1.0, 2.1, 3.2, 4.3, 5.4]) -> false
([1.5, 2.5, 3.5, 4.5, 5.5]) -> false
([1.0, -2.0, 3.0, -4.0, 5.0]) -> true
([0.0, 0.1, -0.1, 5.0, -6.8]) -> false
        }
    }
}

problem Generated/1474 {
code {
        func check_all_elements_integer(elements: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> true
([1.0, 2.0, 3.0, 4.5, 5.0]) -> false
([0.0, -2.0, 3.0, -4.0, 5.0]) -> true
([1.2, 2.4, 3.6, 4.8, 5.0]) -> false
([]) -> true
        }
    }
}

problem Generated/1475 {
code {
        func all_elements_floored(numbers: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> true
([1.1, 2.2, 3.3, 4.4, 5.5]) -> false
([0.5, 1.5, 2.5, 3.5, 4.5]) -> false
([1.0, 2.0, 3.0, 4.0, 5.1]) -> false
([]) -> true
        }
    }
}

problem Generated/1476 {
code {
        func all_numbers_above_threshold(numbers: list<double>, threshold: double) -> bool
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2.0) -> false
([1.0, 2.0, 3.0, 4.0, 5.0], 0.0) -> true
([0.0, 0.0, 0.0, 0.0], 0.0) -> false
([-1.0, -2.0, -3.0, -4.0, -5.0], -6.0) -> true
([1.0, 2.0, 3.0, 4.0, 5.0], 5.0) -> false
        }
    }
}

problem Generated/1477 {
code {
        func check_if_all_numbers_are_squares(numbers: list<int>) -> bool
    }
    tests {
        template nse {
            ([4, 9, 16, 25, 36]) -> true
([1, 3, 5, 7, 11]) -> false
([0, 1, 4, 9, 16, 25]) -> true
([2, 4, 8, 16, 32]) -> false
([81, 64, 49, 36, 25, 16, 9, 4, 1]) -> true
        }
    }
}

problem Generated/1478 {
code {
        func is_prime(num: int) -> bool
    }
    tests {
        template nse {
            (17) -> true
(23) -> true
(29) -> true
(100) -> false
(55) -> false
        }
    }
}

problem Generated/1479 {
code {
        func is_perfect_square_list(numbers: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 4, 9, 16, 25]) -> true
([2, 4, 6, 8]) -> false
([100, 121, 144, 169, 196]) -> true
([99, 102, 105, 110]) -> false
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> false
        }
    }
}

problem Generated/1480 {
code {
        func is_perfect_square(numbers: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 4, 9, 16, 25]) -> true
([2, 4, 8, 16, 32]) -> false
([144, 196, 121]) -> true
([25, 45, 100, 10]) -> false
([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> false
        }
    }
}

problem Generated/1481 {
code {
        func is_prime_list(numbers: list<int>) -> bool
    }
    tests {
        template nse {
            ([2, 3, 5, 7, 11]) -> true
([4, 6, 8, 9, 10]) -> false
([29, 31, 37, 41, 43]) -> true
([1, 3, 5, 7, 9]) -> false
([]) -> true
        }
    }
}

problem Generated/1482 {
code {
        func is_perfect_square_list(numbers: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 4, 9, 16, 25]) -> true
([1, 2, 3, 4, 5]) -> false
([0, 4, 16, 25, 36]) -> true
([1, 8, 27, 64, 125]) -> false
([144, 169, 196, 225, 256]) -> true
        }
    }
}

problem Generated/1483 {
code {
        func is_perfect_square_list(numbers: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 4, 9, 16, 25, 36]) -> true
([2, 3, 5, 7, 11, 13]) -> false
([1, 3, 5, 7, 11, 13]) -> false
([4, 16, 36, 81]) -> true
([1, 9, 25, 49]) -> true
        }
    }
}

problem Generated/1484 {
code {
        func is_list_items_equal(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 1, 1, 1, 1]) -> true
([2, 2, 2, 2, 2]) -> true
([1, 2, 1, 2, 1]) -> false
([0]) -> true
([]) -> true
        }
    }
}

problem Generated/1485 {
code {
        func check_if_all_elements_divisible(numbers: list<int>, divisor: int) -> bool
    }
    tests {
        template nse {
            ([10, 20, 30, 40, 50], 10) -> true
([10, 20, 31, 40, 50], 10) -> false
([1, 2, 3, 4, 5], 1) -> true
([1, 2, 3, 4, 5], 2) -> false
([], 10) -> true
([0], 10) -> true
        }
    }
}

problem Generated/1486 {
code {
        func check_if_all_elements_are_positive(numbers: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> true
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> false
([0.0, 1.0, -1.0, 2.0, -2.0]) -> false
([3.14, 2.71, 1.62, 0.0]) -> false
([]) -> true
        }
    }
}

problem Generated/1487 {
code {
        func is_valid_email(email: string) -> bool
    }
    tests {
        template nse {
            ("johndoe@example.com") -> true
("johndoe@example") -> false
("") -> false
("johndoe@") -> false
("johndoe@example.") -> false
        }
    }
}

problem Generated/1488 {
code {
        func generate_binary_substrings(n: int) -> list<string>
    }
    tests {
        template nse {
            (1) -> ["0", "1"]
(2) -> ["00", "01", "10", "11"]
(3) -> ["000", "001", "010", "011", "100", "101", "110", "111"]
(4) -> ["0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"]
(5) -> ["00000", "00001", "00010", "00011", "00100", "00101", "00110", "00111", "01000", "01001", "01010", "01011", "01100", "01101", "01110", "01111", "10000", "10001", "10010", "10011", "10100", "10101", "10110", "10111", "11000", "11001", "11010", "11011", "11100", "11101", "11110", "11111"]
        }
    }
}

problem Generated/1489 {
code {
        func generate_binary_numbers(n: int) -> list<string>
    }
    tests {
        template nse {
            (1) -> ["0", "1"]
(2) -> ["00", "01", "10", "11"]
(3) -> ["000", "001", "010", "011", "100", "101", "110", "111"]
(4) -> ["0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", 
        "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"]
(5) -> ["00000", "00001", "00010", "00011", "00100", "00101", "00110", "00111",
        "01000", "01001", "01010", "01011", "01100", "01101", "01110", "01111",
        "10000", "10001", "10010", "10011", "10100", "10101", "10110", "10111",
        "11000", "11001", "11010", "11011", "11100", "11101", "11110", "11111"]
        }
    }
}

problem Generated/1490 {
code {
        func get_binary_numbers_within_range(start: int, last: int) -> list<string>
    }
    tests {
        template nse {
            (1, 5) -> ["1", "10", "11", "100", "101"]
(0, 0) -> ["0"]
(7, 10) -> ["111", "1000", "1001", "1010"]
(5, 5) -> ["101"]
(15, 17) -> ["1111", "10000", "10001"]
        }
    }
}

problem Generated/1491 {
code {
        func generate_binary_numbers(n: int) -> list<string>
    }
    tests {
        template nse {
            (1) -> ["0", "1"]
(2) -> ["00", "01", "10", "11"]
(3) -> ["000", "001", "010", "011", "100", "101", "110", "111"]
(4) -> ["0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"]
(5) -> ["00000", "00001", "00010", "00011", "00100", "00101", "00110", "00111", "01000", "01001", "01010", "01011", "01100", "01101", "01110", "01111", "10000", "10001", "10010", "10011", "10100", "10101", "10110", "10111", "11000", "11001", "11010", "11011", "11100", "11101", "11110", "11111"]
        }
    }
}

problem Generated/1492 {
code {
        func binary_range(n: int) -> list<string>
    }
    tests {
        template nse {
            (1) -> ["0", "1"]
(2) -> ["00", "01", "10", "11"]
(3) -> ["000", "001", "010", "011", "100", "101", "110", "111"]
(4) -> ["0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"]
(5) -> ["00000", "00001", "00010", "00011", "00100", "00101", "00110", "00111", "01000", "01001", "01010", "01011", "01100", "01101", "01110", "01111", "10000", "10001", "10010", "10011", "10100", "10101", "10110", "10111", "11000", "11001", "11010", "11011", "11100", "11101", "11110", "11111"]
        }
    }
}

problem Generated/1493 {
code {
        func get_binary_range(start: int, stop: int) -> list<string>
    }
    tests {
        template nse {
            (1, 5) -> ["1", "10", "11", "100"]
(5, 10) -> ["101", "110", "111", "1000", "1001"]
(0, 0) -> []
(0, 1) -> ["0"]
(7, 8) -> ["111"]
        }
    }
}

problem Generated/1494 {
code {
        func get_binary_representations(n: int) -> list<string>
    }
    tests {
        template nse {
            (1) -> ["0", "1"]
(2) -> ["00", "01", "10", "11"]
(3) -> ["000", "001", "010", "011", "100", "101", "110", "111"]
(4) -> ["0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"]
(5) -> ["00000", "00001", "00010", "00011", "00100", "00101", "00110", "00111", "01000", "01001", "01010", "01011", "01100", "01101", "01110", "01111", "10000", "10001", "10010", "10011", "10100", "10101", "10110", "10111", "11000", "11001", "11010", "11011", "11100", "11101", "11110", "11111"]
        }
    }
}

problem Generated/1495 {
code {
        func get_binary_mapping(n: int) -> list<string>
    }
    tests {
        template nse {
            (1) -> ["0", "1"]
(2) -> ["00", "01", "10", "11"]
(3) -> ["000", "001", "010", "011", "100", "101", "110", "111"]
(4) -> ["0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"]
(5) -> ["00000", "00001", "00010", "00011", "00100", "00101", "00110", "00111", "01000", "01001", "01010", "01011", "01100", "01101", "01110", "01111", "10000", "10001", "10010", "10011", "10100", "10101", "10110", "10111", "11000", "11001", "11010", "11011", "11100", "11101", "11110", "11111"]
        }
    }
}

problem Generated/1496 {
code {
        func get_binary_lengths(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 2, 3, 3]
([0, 8, 64, 512, 4096]) -> [1, 4, 7, 10, 13]
([15, 31, 63, 127, 255]) -> [4, 5, 6, 7, 8]
([23, 45, 67, 89, 111]) -> [5, 6, 7, 7, 7]
([16, 32, 64, 128, 256, 512]) -> [5, 6, 7, 8, 9, 10]
        }
    }
}

problem Generated/1497 {
code {
        func count_ones_in_binary(num: int) -> int
    }
    tests {
        template nse {
            (7) -> 3
(15) -> 4
(11) -> 3
(0) -> 0
(1) -> 1
        }
    }
}

problem Generated/1498 {
code {
        func count_ones_in_binary(num: int) -> int
    }
    tests {
        template nse {
            (5) -> 2
(15) -> 4
(255) -> 8
(1024) -> 1
(0) -> 0
        }
    }
}

problem Generated/1499 {
code {
        func binary_length(num: int) -> int
    }
    tests {
        template nse {
            (12) -> 4
(35) -> 6
(0) -> 1
(1) -> 1
(1023) -> 10
        }
    }
}

problem Generated/1500 {
code {
        func count_ones_in_binary(num: int) -> int
    }
    tests {
        template nse {
            (10) -> 2
(15) -> 4
(0) -> 0
(255) -> 8
(1024) -> 1
        }
    }
}

problem Generated/1501 {
code {
        func count_set_bits(num: int) -> int
    }
    tests {
        template nse {
            (5) -> 2
(15) -> 4
(1) -> 1
(0) -> 0
(255) -> 8
        }
    }
}

problem Generated/1502 {
code {
        func binary_length(num: int) -> int
    }
    tests {
        template nse {
            (10) -> 4
(0) -> 1
(100) -> 7
(256) -> 9
(1023) -> 10
        }
    }
}

problem Generated/1503 {
code {
        func get_binary_representations(numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["1", "10", "11", "100", "101"]
([0, 1, 0, 1, 0]) -> ["0", "1", "0", "1", "0"]
([10, 20, 30, 40, 50]) -> ["1010", "10100", "11110", "101000", "110010"]
([255, 128, 64, 32, 16, 8, 4, 2, 1]) -> ["11111111", "10000000", "1000000", "100000", "10000", "1000", "100", "10", "1"]
([]) -> []
        }
    }
}

problem Generated/1504 {
code {
        func binary_representation_of_abs_num(num: int) -> string
    }
    tests {
        template nse {
            (10) -> "1010"
(-10) -> "1010"
(0) -> "0"
(42) -> "101010"
(-42) -> "101010"
        }
    }
}

problem Generated/1505 {
code {
        func binary_absolute(num: int) -> string
    }
    tests {
        template nse {
            (5) -> "101"
(-10) -> "1010"
(0) -> "0"
(100) -> "1100100"
(-256) -> "100000000"
        }
    }
}

problem Generated/1506 {
code {
        func get_binary_repr(n: int) -> list<int>
    }
    tests {
        template nse {
            (27) -> [1, 1, 0, 1, 1]
(-11) -> [1, 0, 1, 1]
(0) -> [0]
(1024) -> [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
(-1024) -> [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        }
    }
}

problem Generated/1507 {
code {
        func sum_of_binary_digits(num: int) -> int
    }
    tests {
        template nse {
            (5) -> 2
(10) -> 2
(23) -> 4
(341) -> 5
(1024) -> 1
        }
    }
}

problem Generated/1508 {
code {
        func sum_binary_digits(num: int) -> int
    }
    tests {
        template nse {
            (10) -> 2
(23) -> 4
(7) -> 3
(0) -> 0
(123456789) -> 16
        }
    }
}

problem Generated/1509 {
code {
        func max_binary_gap(n: int) -> int
    }
    tests {
        template nse {
            (9) -> 2
(529) -> 4
(20) -> 1
(15) -> 0
(1041) -> 5
        }
    }
}

problem Generated/1510 {
code {
        func get_max_binary_digit(num: int) -> int
    }
    tests {
        template nse {
            (0) -> 0
(10) -> 1
(16) -> 1
(32) -> 1
(67) -> 1
        }
    }
}

problem Generated/1511 {
code {
        func max_binary_gap(num: int) -> int
    }
    tests {
        template nse {
            (9) -> 2
(529) -> 4
(20) -> 1
(15) -> 0
(1041) -> 5
        }
    }
}

problem Generated/1512 {
code {
        func max_binary_gap(num: int) -> int
    }
    tests {
        template nse {
            (9) -> 2
(529) -> 4
(15) -> 0
(20) -> 1
(32) -> 0
        }
    }
}

problem Generated/1513 {
code {
        func find_max_binary_digits(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 3
([7, 3, 8, 9, 6]) -> 4
([0, 0, 0, 0, 0]) -> 1
([1, 7, 4, 9, 5]) -> 4
([1, 2, 3, 4, 5, 6, 7, 8]) -> 4
        }
    }
}

problem Generated/1514 {
code {
        func largest_binary_digit(num: int) -> int
    }
    tests {
        template nse {
            (7) -> 1
(15) -> 1
(32) -> 1
(1025) -> 1
(10000) -> 1
        }
    }
}

problem Generated/1515 {
code {
        func get_binary_zip(numbers: list<int>, letters: list<string>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], ["a", "b", "c", "d", "e"]) -> ["1a", "10b", "11c", "100d", "101e"]
([10, 20, 30, 40], ["A", "B", "C", "D"]) -> ["1010A", "10100B", "11110C", "101000D"]
([5, 6, 7], ["x", "y", "z"]) -> ["101x", "110y", "111z"]
([4, 3, 2, 1], ["alpha", "beta", "gamma", "delta"]) -> ["100alpha", "11beta", "10gamma", "1delta"]
([16, 32, 64], ["A", "B", "C"]) -> ["10000A", "100000B", "1000000C"]
        }
    }
}

problem Generated/1516 {
code {
        func get_ones_positions(num: int) -> list<int>
    }
    tests {
        template nse {
            (7) -> [0, 1, 2]
(10) -> [1, 3]
(15) -> [0, 1, 2, 3]
(2) -> [1]
(0) -> []
        }
    }
}

problem Generated/1517 {
code {
        func generate_binary_strings(n: int) -> list<string>
    }
    tests {
        template nse {
            (1) -> ["0", "1"]
(2) -> ["00", "01", "10", "11"]
(3) -> ["000", "001", "010", "011", "100", "101", "110", "111"]
(4) -> ["0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"]
(5) -> ["00000", "00001", "00010", "00011", "00100", "00101", "00110", "00111", "01000", "01001", "01010", "01011", "01100", "01101", "01110", "01111", "10000", "10001", "10010", "10011", "10100", "10101", "10110", "10111", "11000", "11001", "11010", "11011", "11100", "11101", "11110", "11111"]
        }
    }
}

problem Generated/1518 {
code {
        func convert_to_binary_list(elements: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["1", "10", "11", "100", "101"]
([7, 3, 5, 9, 6]) -> ["111", "11", "101", "1001", "110"]
([0, 7, 4, 9, 5]) -> ["0", "111", "100", "1001", "101"]
([1, 7, 4, 9, 5]) -> ["1", "111", "100", "1001", "101"]
([1, 2, 3, 4, 5, 6, 7, 8]) -> ["1", "10", "11", "100", "101", "110", "111", "1000"]
        }
    }
}

problem Generated/1519 {
code {
        func get_binary_of_indexed_elements(elements: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["0", "1", "10", "11", "100"]
([7, 3, 5, 9, 6]) -> ["0", "1", "10", "11", "100"]
([1, 7, 4, 9, 5]) -> ["0", "1", "10", "11", "100"]
([1, 2, 3, 4, 5, 6, 7, 8]) -> ["0", "1", "10", "11", "100", "101", "110", "111"]
([]) -> []
        }
    }
}

problem Generated/1520 {
code {
        func binary_representation(numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([2, 4, 8, 16, 32]) -> ["10", "100", "1000", "10000", "100000"]
([1, 3, 5, 7, 9]) -> ["1", "11", "101", "111", "1001"]
([0, 15, 255, 1024, 4096]) -> ["0", "1111", "11111111", "10000000000", "1000000000000"]
([31, 63, 127, 255, 511]) -> ["11111", "111111", "1111111", "11111111", "111111111"]
([10, 20, 30, 40, 50]) -> ["1010", "10100", "11110", "101000", "110010"]
        }
    }
}

problem Generated/1521 {
code {
        func sort_binary_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([0, 1, 3, 5, 7, 15]) -> [0, 1, 3, 5, 7, 15]
([8, 4, 2, 1]) -> [1, 2, 4, 8]
([31, 15, 7, 3, 1]) -> [1, 3, 7, 15, 31]
        }
    }
}

problem Generated/1522 {
code {
        func sort_binary_based_on_value(binary_nums: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([0, 1, 10, 11, 100, 101]) -> [0, 1, 10, 11, 100, 101]
([101, 10, 11, 100, 0, 1]) -> [0, 1, 10, 11, 100, 101]
([0, 1, 10, 11, 100, 101, 110, 111, 1000, 1001]) -> [0, 1, 10, 11, 100, 101, 110, 111, 1000, 1001]
([111, 101, 1, 110]) -> [1, 101, 110, 111]
([111, 101, 1, 110, 1001]) -> [1, 101, 110, 111, 1001]
        }
    }
}

problem Generated/1523 {
code {
        func sort_binary_strings(binary_strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["10", "11", "01", "00"]) -> ["00", "01", "10", "11"]
(["101", "011", "111", "000"]) -> ["000", "011", "101", "111"]
(["1", "0", "10", "11", "111"]) -> ["0", "1", "10", "11", "111"]
(["11011", "0101", "1001"]) -> ["0101", "1001", "11011"]
(["111111", "000", "10101", "111001", "1"]) -> ["000", "1", "10101", "111001", "111111"]
        }
    }
}

problem Generated/1524 {
code {
        func binary_repr_to_string(binary_repr: string) -> string
    }
    tests {
        template nse {
            ("1100001 1100010 1100011") -> "abc"
("1000011 1001001 1010110 0100001") -> "CIV!"
("1100001") -> "a"
("1000001 1000010 1000011") -> "ABC"
("1110100 1100101 1101000") -> "teh"
        }
    }
}

problem Generated/1525 {
code {
        func convert_string_to_binary(s: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World!") -> ["01001000", "01100101", "01101100", "01101100", "01101111", "00100000", "01010111", "01101111", "01110010", "01101100", "01100100", "00100001"]
("") -> []
("1") -> ["00110001"]
("abcdefg") -> ["01100001", "01100010", "01100011", "01100100", "01100101", "01100110", "01100111"]
("12345") -> ["00110001", "00110010", "00110011", "00110100", "00110101"]
        }
    }
}

problem Generated/1526 {
code {
        func is_binary_string(s: string) -> bool
    }
    tests {
        template nse {
            ("1010") -> true
("") -> true
("-1010") -> true
("0123") -> false
("1010a") -> false
        }
    }
}

problem Generated/1527 {
code {
        func binary_string_to_list(binary_s: string) -> list<int>
    }
    tests {
        template nse {
            ("0b1010101") -> [1, 0, 1, 0, 1, 0, 1]
("0b111000111") -> [1, 1, 1, 0, 0, 0, 1, 1, 1]
("0b1") -> [1]
("0b0") -> [0]
("0b1101100011101") -> [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1]
        }
    }
}

problem Generated/1528 {
code {
        func binary_list_to_string(binary_lst: list<int>) -> string
    }
    tests {
        template nse {
            ([1, 0, 1, 0, 0, 1, 1, 0]) -> "10100110"
([1, 1, 1, 1, 0, 0, 0, 0]) -> "11110000"
([0, 0, 0, 0, 0, 0, 0, 0]) -> "00000000"
([1, 1, 1, 1, 1, 1, 1, 1]) -> "11111111"
([1, 0, 0, 1, 0, 0, 0, 0]) -> "10010000"
        }
    }
}

problem Generated/1529 {
code {
        func binary_repr(num: int, width: int) -> string
    }
    tests {
        template nse {
            (0, 0) -> "0"
(0, 1) -> "0"
(1, 4) -> "0001"
(10, 4) -> "1010"
(255, 8) -> "11111111"
        }
    }
}

problem Generated/1530 {
code {
        func binary_string_base_2(num: int) -> string
    }
    tests {
        template nse {
            (10) -> "00001010"
(0) -> "00000000"
(255) -> "11111111"
(100) -> "01100100"
(31) -> "00011111"
        }
    }
}

problem Generated/1531 {
code {
        func binary_string_lower(num: int) -> string
    }
    tests {
        template nse {
            (10) -> "1010"
(5) -> "101"
(255) -> "11111111"
(0) -> "0"
(123456789) -> "111010110111100110100010101"
        }
    }
}

problem Generated/1532 {
code {
        func binary_string_lower(num: int) -> string
    }
    tests {
        template nse {
            (0) -> "0"
(4) -> "100"
(13) -> "1101"
(100) -> "1100100"
(255) -> "11111111"
        }
    }
}

problem Generated/1533 {
code {
        func binary_string_to_lowercase(binary_s: string) -> string
    }
    tests {
        template nse {
            ("10101010") -> "10101010"
("111100001010101011001") -> "111100001010101011001"
("0") -> "0"
("10101010101010101") -> "10101010101010101"
("10011010010010100100") -> "10011010010010100100"
        }
    }
}

problem Generated/1534 {
code {
        func binary_strings_from_list(numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["1", "10", "11", "100", "101"]
([0, 15, 255, 1024]) -> ["0", "1111", "11111111", "10000000000"]
([10, 20, 30, 40, 50]) -> ["1010", "10100", "11110", "101000", "110010"]
([1, 3, 5, 7, 9]) -> ["1", "11", "101", "111", "1001"]
([0, 1, 2, 4, 8, 16, 32]) -> ["0", "1", "10", "100", "1000", "10000", "100000"]
        }
    }
}

problem Generated/1535 {
code {
        func binary_string_of_number(num: int) -> string
    }
    tests {
        template nse {
            (4) -> "100"
(15) -> "1111"
(0) -> "0"
(243) -> "11110011"
(1023) -> "1111111111"
        }
    }
}

problem Generated/1536 {
code {
        func convert_decimal_to_binary_with_uppercase(dec_num: int) -> string
    }
    tests {
        template nse {
            (10) -> "1010"
(105) -> "1101001"
(0) -> "0"
(2) -> "10"
(31) -> "11111"
        }
    }
}

problem Generated/1537 {
code {
        func convert_to_binary_and_uppercase(n: int) -> string
    }
    tests {
        template nse {
            (15) -> "1111"
(0) -> "0"
(8) -> "1000"
(10) -> "1010"
(31) -> "11111"
        }
    }
}

problem Generated/1538 {
code {
        func get_binary_string(num: int) -> string
    }
    tests {
        template nse {
            (0) -> "0"
(15) -> "1111"
(27) -> "11011"
(1023) -> "1111111111"
(1024) -> "10000000000"
        }
    }
}

problem Generated/1539 {
code {
        func convert_decimal_to_binary(num: int) -> string
    }
    tests {
        template nse {
            (2) -> "10"
(15) -> "1111"
(100) -> "1100100"
(0) -> "0"
(1) -> "1"
        }
    }
}

problem Generated/1540 {
code {
        func get_binary_string(num: int) -> string
    }
    tests {
        template nse {
            (10) -> "1010"
(0) -> "0"
(31) -> "11111"
(256) -> "100000000"
(118) -> "1110110"
        }
    }
}

problem Generated/1541 {
code {
        func get_binary_string_uppercase(num: int) -> string
    }
    tests {
        template nse {
            (5) -> "101"
(9) -> "1001"
(0) -> "0"
(15) -> "1111"
(123456) -> "11110001001000000"
        }
    }
}

problem Generated/1542 {
code {
        func convert_numbers_to_binary_strings(numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["1", "10", "11", "100", "101"]
([7, 3, 5, 9, 6]) -> ["111", "11", "101", "1001", "110"]
([0, 0, 0, 0, 0]) -> ["0", "0", "0", "0", "0"]
([1, 7, 4, 9, 5]) -> ["1", "111", "100", "1001", "101"]
([15, 16, 255, 256, 1024]) -> ["1111", "10000", "11111111", "100000000", "10000000000"]
        }
    }
}

problem Generated/1543 {
code {
        func binary_strings(n: int) -> list<string>
    }
    tests {
        template nse {
            (1) -> ["0", "1"]
(2) -> ["00", "01", "10", "11"]
(3) -> ["000", "001", "010", "011", "100", "101", "110", "111"]
(4) -> ["0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"]
(5) -> ["00000", "00001", "00010", "00011", "00100", "00101", "00110", "00111", "01000", "01001", "01010", "01011", "01100", "01101", "01110", "01111", "10000", "10001", "10010", "10011", "10100", "10101", "10110", "10111", "11000", "11001", "11010", "11011", "11100", "11101", "11110", "11111"]
        }
    }
}

problem Generated/1544 {
code {
        func count_binary_digits(n: int) -> int
    }
    tests {
        template nse {
            (0) -> 0
(7) -> 3
(15) -> 4
(100) -> 3
(1023) -> 10
        }
    }
}

problem Generated/1545 {
code {
        func convert_decimal_to_binary(n: int) -> list<int>
    }
    tests {
        template nse {
            (7) -> [1, 1, 1]
(12) -> [1, 1, 0, 0]
(0) -> [0]
(1) -> [1]
(1024) -> [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        }
    }
}

problem Generated/1546 {
code {
        func convert_to_binary_strings(elements: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["1", "10", "11", "100", "101"]
([7, 3, 5, 9, 6]) -> ["111", "11", "101", "1001", "110"]
([15, 16, 17, 18, 19]) -> ["1111", "10000", "10001", "10010", "10011"]
([0, 1, 2, 3, 4, 5]) -> ["0", "1", "10", "11", "100", "101"]
([31, 32, 33, 34, 35]) -> ["11111", "100000", "100001", "100010", "100011"]
        }
    }
}

problem Generated/1547 {
code {
        func convert_to_binary(decimal_numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["1", "10", "11", "100", "101"]
([0, 15, 255]) -> ["0", "1111", "11111111"]
([16, 32, 64, 128]) -> ["10000", "100000", "1000000", "10000000"]
([7, 13]) -> ["111", "1101"]
([100, 255, 1]) -> ["1100100", "11111111", "1"]
        }
    }
}

problem Generated/1548 {
code {
        func binary_expansion(num: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [1, 0, 1]
(10) -> [1, 0, 1, 0]
(24) -> [1, 1, 0, 0, 0]
(7) -> [1, 1, 1]
(0) -> [0]
        }
    }
}

problem Generated/1549 {
code {
        func binary_representation(n: int) -> list<int>
    }
    tests {
        template nse {
            (8) -> [1, 0, 0, 0]
(0) -> [0]
(7) -> [1, 1, 1]
(15) -> [1, 1, 1, 1]
(99) -> [1, 1, 0, 0, 0, 1, 1]
        }
    }
}

problem Generated/1550 {
code {
        func get_binary_digits(num: int) -> list<int>
    }
    tests {
        template nse {
            (12) -> [0, 0, 1, 1]
(23) -> [1, 1, 1, 0, 1]
(255) -> [1, 1, 1, 1, 1, 1, 1, 1]
(0) -> []
(1) -> [1]
        }
    }
}

problem Generated/1551 {
code {
        func binary_conversion(num: int) -> list<int>
    }
    tests {
        template nse {
            (0) -> [0, 0, 0, 0, 0, 0, 0, 0]
(128) -> [1, 0, 0, 0, 0, 0, 0, 0]
(15) -> [0, 0, 0, 0, 1, 1, 1, 1]
(255) -> [1, 1, 1, 1, 1, 1, 1, 1]
(42) -> [0, 0, 1, 0, 1, 0, 1, 0]
        }
    }
}

problem Generated/1552 {
code {
        func get_binary_digits(num: int) -> list<int>
    }
    tests {
        template nse {
            (0) -> [0]
(1) -> [1]
(2) -> [0, 1]
(9) -> [1, 0, 0, 1]
(16) -> [0, 0, 0, 0, 1]
        }
    }
}

problem Generated/1553 {
code {
        func sort_binary(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 3, 1, 4, 2]) -> [1, 2, 3, 4, 5]
([0, 1, 2, 3, 4, 5, 6, 7]) -> [0, 1, 2, 3, 4, 5, 6, 7]
([4, 7, 1, 3, 6, 5, 2, 0]) -> [0, 1, 2, 3, 4, 5, 6, 7]
([8, 4, 10, 2, 6, 7, 3, 5]) -> [2, 3, 4, 5, 6, 7, 8, 10]
        }
    }
}

problem Generated/1554 {
code {
        func reverse_binary(num: int) -> int
    }
    tests {
        template nse {
            (10) -> 5
(2) -> 1
(7) -> 7
(4) -> 1
(536870912) -> 1
        }
    }
}

problem Generated/1555 {
code {
        func reverse_binary_number(num: int) -> int
    }
    tests {
        template nse {
            (10) -> 5
(25) -> 19
(100) -> 19
(0) -> 0
(1) -> 1
        }
    }
}

problem Generated/1556 {
code {
        func reverse_binary(num: int) -> int
    }
    tests {
        template nse {
            (10) -> 5
(15) -> 15
(50) -> 19
(255) -> 255
(1024) -> 1
        }
    }
}

problem Generated/1557 {
code {
        func reverse_binary(num: int) -> int
    }
    tests {
        template nse {
            (10) -> 5
(127) -> 127
(109) -> 91
(2147483647) -> 2147483647
(31) -> 31
        }
    }
}

problem Generated/1558 {
code {
        func reverse_binary(num: int) -> int
    }
    tests {
        template nse {
            (10) -> 5
(15) -> 15
(20) -> 5
(32) -> 1
(1023) -> 1023
        }
    }
}

problem Generated/1559 {
code {
        func get_binary_list(num: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [1, 0, 1, 0]
(7) -> [1, 1, 1]
(0) -> [0]
(1) -> [1]
(1024) -> [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        }
    }
}

problem Generated/1560 {
code {
        func binary_string_list(numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["1", "10", "11", "100", "101"]
([10, 20, 30]) -> ["1010", "10100", "11110"]
([0, 1, 2, 3, 4]) -> ["0", "1", "10", "11", "100"]
([]) -> []
([17, 18, 19, 20]) -> ["10001", "10010", "10011", "10100"]
([63, 64]) -> ["111111", "1000000"]
        }
    }
}

problem Generated/1561 {
code {
        func get_binary_copies(elements: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["0b1", "0b10", "0b11", "0b100", "0b101"]
([0, 12, 24, 36, 48]) -> ["0b0", "0b1100", "0b11000", "0b100100", "0b110000"]
([7, 8, 9, 10, 11]) -> ["0b111", "0b1000", "0b1001", "0b1010", "0b1011"]
([255, 0, 128, 64, 32]) -> ["0b11111111", "0b0", "0b10000000", "0b1000000", "0b100000"]
([15, 31, 63, 127, 255]) -> ["0b1111", "0b11111", "0b111111", "0b1111111", "0b11111111"]
        }
    }
}

problem Generated/1562 {
code {
        func copy_list_and_apply_bin(numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["0b1", "0b10", "0b11", "0b100", "0b101"]
([0, 15, 16, 255]) -> ["0b0", "0b1111", "0b10000", "0b11111111"]
([7, 6, 5, 4, 3, 2, 1]) -> ["0b111", "0b110", "0b101", "0b100", "0b11", "0b10", "0b1"]
([10, 20, 30, 40, 50]) -> ["0b1010", "0b10100", "0b11110", "0b101000", "0b110010"]
([1024, 2048, 4096, 8192]) -> ["0b10000000000", "0b100000000000", "0b1000000000000", "0b10000000000000"]
        }
    }
}

problem Generated/1563 {
code {
        func binary_list(numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["00000001", "00000010", "00000011", "00000100", "00000101"]
([255, 34, 56]) -> ["11111111", "00100010", "00111000"]
([0, 15, 240]) -> ["00000000", "00001111", "11110000"]
([5, 10, 15, 20]) -> ["00000101", "00001010", "00001111", "00010100"]
([30, 50, 70]) -> ["00011110", "00110010", "01000110"]
        }
    }
}

problem Generated/1564 {
code {
        func binary_representation_of_numbers(numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["0b1", "0b10", "0b11", "0b100", "0b101"]
([0, 10, 20, 30]) -> ["0b0", "0b1010", "0b10100", "0b11110"]
([16, 32, 64, 128]) -> ["0b10000", "0b100000", "0b1000000", "0b10000000"]
([-1, -2, -3, -4, -5]) -> ["-0b1", "-0b10", "-0b11", "-0b100", "-0b101"]
([0, 1, 3, 7, 15, 31]) -> ["0b0", "0b1", "0b11", "0b111", "0b1111", "0b11111"]
        }
    }
}

problem Generated/1565 {
code {
        func transform_list_to_binary(elements: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["1", "10", "11", "100", "101"]
([7, 3, 5, 9, 6]) -> ["111", "11", "101", "1001", "110"]
([0, 0, 0, 0, 0]) -> ["0", "0", "0", "0", "0"]
([1024, 512, 256, 128, 64]) -> ["10000000000", "1000000000", "100000000", "10000000", "1000000"]
([31, 15, 7, 3, 1]) -> ["11111", "1111", "111", "11", "1"]
        }
    }
}

problem Generated/1566 {
code {
        func unique_binary_representation(nums: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([2, 3, 4, 5, 6, 7, 8, 9]) -> 8
([1, 3, 5, 7, 9]) -> 5
([0, 0, 1, 1, 2, 2, 3, 3]) -> 4
([1, 1, 1, 1, 1]) -> 1
        }
    }
}

problem Generated/1567 {
code {
        func unique_binary_representation(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([1, 1, 1, 1, 1]) -> 1
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> 5
([]) -> 0
([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> 10
        }
    }
}

problem Generated/1568 {
code {
        func distinct_binary_reps(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([0, 0, 0, 0, 0]) -> 1
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> 5
([512, 256, 128, 64, 32, 16, 8, 4, 2, 1]) -> 10
([3, 4, 5, 6, 7]) -> 5
        }
    }
}

problem Generated/1569 {
code {
        func binary_representation(num: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [1, 0, 1, 0]
(42) -> [1, 0, 1, 0, 1, 0]
(1) -> [1]
(0) -> [0]
(100) -> [1, 1, 0, 0, 1, 0, 0]
        }
    }
}

problem Generated/1570 {
code {
        func bin_to_decimal(binary: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["0", "1", "10", "11", "100"]) -> [0, 1, 2, 3, 4]
(["110", "1010", "11111"]) -> [6, 10, 31]
(["1001", "10101", "110011", "111111"]) -> [9, 21, 51, 63]
(["1", "11", "111", "1111"]) -> [1, 3, 7, 15]
([]) -> []
        }
    }
}

problem Generated/1571 {
code {
        func get_binary_of_numbers(numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([3, 5, 7, 9, 11]) -> ["0b11", "0b101", "0b111", "0b1001", "0b1011"]
([0, 1, 10, 20, 100]) -> ["0b0", "0b1", "0b1010", "0b10100", "0b1100100"]
([256, 512, 1024, 2048]) -> ["0b100000000", "0b1000000000", "0b10000000000", "0b100000000000"]
([1023, 1024, 1025, 2047, 2048]) -> ["0b1111111111", "0b10000000000", "0b10000000001", "0b11111111111", "0b100000000000"]
([64, 128, 192, 256, 320]) -> ["0b1000000", "0b10000000", "0b11000000", "0b100000000", "0b101000000"]
        }
    }
}

problem Generated/1572 {
code {
        func get_binary_representation(num: int) -> string
    }
    tests {
        template nse {
            (10) -> "1010"
(0) -> "0"
(123456) -> "11110001001000000"
(256) -> "100000000"
(1) -> "1"
        }
    }
}

problem Generated/1573 {
code {
        func count_bits(num: int) -> int
    }
    tests {
        template nse {
            (5) -> 2
(0) -> 0
(10) -> 2
(256) -> 1
(1024) -> 1
        }
    }
}

problem Generated/1574 {
code {
        func binary_conversion(num: int) -> string
    }
    tests {
        template nse {
            (10) -> "1010"
(15) -> "1111"
(255) -> "1111 1111"
(16) -> "0001 0000"
(0) -> "0000"
        }
    }
}

problem Generated/1575 {
code {
        func binary_power_of_2(num: int) -> string
    }
    tests {
        template nse {
            (0) -> "1"
(1) -> "10"
(4) -> "10000"
(5) -> "100000"
(10) -> "10000000000"
        }
    }
}

problem Generated/1576 {
code {
        func binary_reduction(numbers: list<int>, op: string) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], "+") -> 15
([1, 2, 3, 4, 5], "-") -> -13
([1, 2, 3, 4, 5], "*") -> 120
([10, 5, 1], "/") -> 2
([10, 5, 1], "&") -> 0
([10, 5, 1], "|") -> 15
([10, 5, 1], "^") -> 14
        }
    }
}

problem Generated/1577 {
code {
        func binary_string_to_list(binary: string) -> list<int>
    }
    tests {
        template nse {
            ("0b1010101") -> [1010101]
("0b1101 0b110 0b101101") -> [1101, 110, 101101]
("0b1101") -> [1101]
("") -> []
("0b110  0b111 0b10 0b0 0b1") -> [110, 111, 10, 0, 1]
        }
    }
}

problem Generated/1578 {
code {
        func split_string(s: string, n: int) -> list<string>
    }
    tests {
        template nse {
            ("Hello, world!", 1) -> ["H", "e", "l", "l", "o", ",", " ", "w", "o", "r", "l", "d", "!"]
("Hello, world!", 2) -> ["He", "ll", "o,", " w", "or", "ld", "!"]
("Hello, world!", 3) -> ["Hel", "lo,", " wo", "rld", "!"]
("abcdefghijklmnopqrstuvwxyz", 5) -> ["abcde", "fghij", "klmno", "pqrst", "uvwxy", "z"]
("", 4) -> []
        }
    }
}

problem Generated/1579 {
code {
        func generate_sequence(start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            (1, 5) -> [1, 2, 3, 4, 5]
(10, 20) -> [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
(0, 0) -> [0]
(-5, 5) -> [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]
(100, 105) -> [100, 101, 102, 103, 104, 105]
        }
    }
}

problem Generated/1580 {
code {
        func create_list_of_multiples(num: int, n: int) -> list<int>
    }
    tests {
        template nse {
            (2, 5) -> [2, 4, 6, 8, 10]
(5, 3) -> [5, 10, 15]
(9, 7) -> [9, 18, 27, 36, 45, 54, 63]
(1, 10) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
(0, 5) -> [0, 0, 0, 0, 0]
        }
    }
}

problem Generated/1581 {
code {
        func count_words_in_sentence(sentence: string) -> int
    }
    tests {
        template nse {
            ("Hello World") -> 2
("The quick brown fox jumps over the lazy dog") -> 9
("  Spaces before and after    ") -> 4
("") -> 0
("One-word-sentence") -> 1
        }
    }
}

problem Generated/1582 {
code {
        func split_strings(input_s: string) -> list<string>
    }
    tests {
        template nse {
            ("abc") -> ["ab", "c_"]
("abcdef") -> ["ab", "cd", "ef"]
("abcdefg") -> ["ab", "cd", "ef", "g_"]
("a") -> ["a_"]
("") -> []
        }
    }
}

problem Generated/1583 {
code {
        func get_longest_word(sentence: string) -> string
    }
    tests {
        template nse {
            ("This is a test sentence.") -> "sentence."
("One two three four five six seven eight nine ten eleven twelve") -> "eleven"
("There are some equal length words in this sentence") -> "sentence"
("alphabetical order") -> "alphabetical"
("word") -> "word"
        }
    }
}

problem Generated/1584 {
code {
        func split_words(sentence: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello world") -> [5, 5]
("Python is awesome") -> [6, 2, 7]
("") -> []
("  I  am   a weird  \t sentence  ") -> [1, 2, 1, 5, 8]
("OneWord") -> [7]
        }
    }
}

problem Generated/1585 {
code {
        func find_avg_of_cols(matrix: list<list<int>>) -> list<double>
    }
    tests {
        template nse {
            ( [[1, 2, 3],
  [4, -5, 6],
  [-7, 8, 9],
  [10, -11, -12]] ) -> [5.5, 6.5, 7.5]
( [[0, 0, 0, 0],
  [0, 0, 0, 0],
  [0, 0, 0, 0],
  [0, 0, 0, 0]] ) -> [0.0, 0.0, 0.0, 0.0]
( [[-1, -2, -3],
  [-4, -5, -6]] ) -> [2.5, 3.5, 4.5]
( [[-1, -2, -3],
  [4, 5, 6]] ) -> [2.5, 3.5, 4.5]
( [[1, 2],
  [3, 4],
  [5, 6],
  [7, 8],
  [9, 10]] ) -> [5.0, 6.0]
        }
    }
}

problem Generated/1586 {
code {
        func get_sum_of_diffs(numbers: string) -> int
    }
    tests {
        template nse {
            ("1 2 3 4 5") -> 4
("5 4 3 2 1") -> 4
("1") -> 0
("1 2") -> 1
("") -> 0
        }
    }
}

problem Generated/1587 {
code {
        func sum_of_numbers_in_string(s: string) -> int
    }
    tests {
        template nse {
            ("abc 123 def 456 ghi 789") -> 1368
("abc def ghi") -> 0
("123") -> 123
("1 2 3 4 5") -> 15
("abc 1 def 2 ghi 3") -> 6
        }
    }
}

problem Generated/1588 {
code {
        func sum_of_integers_in_strings(input_str: string) -> int
    }
    tests {
        template nse {
            ("Hello World 123") -> 123
("1 2 3 4 5") -> 15
("no numbers here") -> 0
("one 1") -> 1
("1 2 three 4 five 6") -> 13
        }
    }
}

problem Generated/1589 {
code {
        func find_shortest_word_length(s: string) -> int
    }
    tests {
        template nse {
            ("Hello world") -> 5
("The quick brown fox jumps over the lazy dog") -> 3
("Python is awesome") -> 2
("The cat in the hat") -> 2
("This is a test sentence") -> 1
        }
    }
}

problem Generated/1590 {
code {
        func find_shortest_word(sentence: string) -> int
    }
    tests {
        template nse {
            ("Hello world") -> 5
("I am the walrus") -> 1
("this is a test") -> 1
("") -> 0
("   ") -> 0
        }
    }
}

problem Generated/1591 {
code {
        func get_word_index(sentence: string, word: string) -> list<int>
    }
    tests {
        template nse {
            ("hello world hello world hello", "hello") -> [0, 2, 4]
("a b c d e f g h i j k l m n o p q r s t u v w x y z", "p") -> [15]
("This is a sentence with many words in it", "is") -> [1]
("", "hello") -> []
("hello", "world") -> []
        }
    }
}

problem Generated/1592 {
code {
        func sort_words_in_sentence(sentence: string) -> string
    }
    tests {
        template nse {
            ("hello world how are you") -> "are hello how world you"
("this is a test sentence") -> "a is sentence test this"
("Python is a popular programming language") -> "Python a is language popular programming"
("I love to code in Python") -> "I Python code in love to"
("this is an example for sorting words in a sentence") -> "a an example for in is sentence sorting this words"
        }
    }
}

problem Generated/1593 {
code {
        func sort_by_last_name(names: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["John Smith", "Mary Johnson", "Bob Adams", "Doe Black", "Alan McKennedy"]) -> ["Bob Adams", "Doe Black", "Mary Johnson", "Alan McKennedy", "John Smith"]
(["John Smith", "Mary Johnson", "Bob Adams", "Doe Black", "Alan McKennedy", "Anne Bower"]) -> ["Bob Adams", "Doe Black", "Anne Bower", "Mary Johnson", "Alan McKennedy", "John Smith"]
(["Anne Bower"]) -> ["Anne Bower"]
([]) -> []
(["Doe Black", "Mary Johnson", "Bob Adams", "Doe Black", "Alan McKennedy", "Anne Bower"]) -> ["Bob Adams", "Doe Black", "Doe Black", "Anne Bower", "Mary Johnson", "Alan McKennedy"]
        }
    }
}

problem Generated/1594 {
code {
        func sort_list_of_strings_by_length(string_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "cat", "dog", "banana"]) -> ["cat", "dog", "apple", "banana"]
(["paper", "to", "write", "on"]) -> ["to", "on", "paper", "write"]
(["I", "love", "Python"]) -> ["I", "love", "Python"]
([]) -> []
(["one", "two", "three", "four", "five"]) -> ["one", "two", "four", "five", "three"]
        }
    }
}

problem Generated/1595 {
code {
        func get_decoded_string(s: string) -> string
    }
    tests {
        template nse {
            ("72 101 108 108 111 32 87 111 114 108 100") -> "Hello World"
("72 105 32 104 97 116 101 32 115 111 109 101 32 102 117 110 32 119 105 116 104 32 80 121 116 104 111 110 33") -> "Hi hate some fun with Python!"
("49 32 50 32 51 32 52 32 53 32 54 32 55 32 56 32 57 32 48") -> "1 2 3 4 5 6 7 8 9 0"
("84 104 101 114 101 32 105 115 32 110 111 32 55 32 105 110 32 116 104 105 115 32 115 116 114 105 110 103") -> "There is no 7 in this string"
("51 52 32 50 54 32 51 52 32 48 49 32 54 54 32 48") -> "34 26 34 01 66 0"
        }
    }
}

problem Generated/1596 {
code {
        func split_by_delimiter(input_str: string, delimiter: string) -> list<string>
    }
    tests {
        template nse {
            ("hello world python"," ") -> ["hello", "world", "python"]
("Lorem ipsum dolor sit amet.","t") -> ["Lorem ipsum dolor si", " ame", "."]
("red,green,blue,yellow", ",") -> ["red", "green", "blue", "yellow"]
("alpha.beta.gamma.delta",".") -> ["alpha", "beta", "gamma", "delta"]
("foo bar baz", "z") -> ["foo bar ba", ""]
        }
    }
}

problem Generated/1597 {
code {
        func is_valid_sentence(s: string, words: list<string>) -> bool
    }
    tests {
        template nse {
            ("the quick brown fox jumps over the lazy dog", ["quick", "brown", "jumps"]) -> true
("the quick brown fox jumps over the lazy dog", ["quick", "brown", "jumps", "cat"]) -> false
("I am a sentence", ["I", "sentence"]) -> true
("I am a sentence", ["I", "cat"]) -> false
("This is a long sentence that contains many words.", ["long", "many"]) -> true
        }
    }
}

problem Generated/1598 {
code {
        func reverse_words_in_sentence(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "olleH dlroW"
("Coding is fun") -> "gnidoC si nuf"
("Python is awesome") -> "nohtyP si emosewa"
("A man a plan a canal Panama") -> "A nam a nalp a lanac amanaP"
("   ") -> ""
        }
    }
}

problem Generated/1599 {
code {
        func reverse_words_in_string(s: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "olleH dlroW"
("Python is fun!") -> "nohtyP si !nuf"
("My name is Bond, James Bond.") -> "yM eman si ,dnoB semaJ .dnoB"
("The quick brown fox jumps over the lazy dog.") -> "ehT kciuq nworb xof spmuj revo eht yzal .god"
("") -> ""
        }
    }
}

problem Generated/1600 {
code {
        func reverse_words(sentence: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "olleh dlrow"
("python is great") -> "nohtyp si taerg"
("i love coding") -> "i evol gnidoc"
("example input") -> "elpmaxe tupni"
("reversed words") -> "desrever sdrow"
        }
    }
}

problem Generated/1601 {
code {
        func reverse_words_in_string(s: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "olleH dlroW"
("Welcome to the jungle") -> "emocleW ot eht elgnuj"
("To be or not to be") -> "oT eb ro ton ot eb"
("") -> ""
("     ") -> ""
        }
    }
}

problem Generated/1602 {
code {
        func replace_word_in_sentence(sentence: string, old: string, new_dat: string) -> string
    }
    tests {
        template nse {
            ("Hello world", "world", "python") -> "Hello python"
("The quick brown fox jumps over the lazy dog", "fox", "cat") -> "The quick brown cat jumps over the lazy dog"
("Hello world, world of Python", "", "a") -> "Hello world, world of Python"
("Hello world, world of Python", "python", "C++") -> "Hello world, world of Python"
("", "python", "C++") -> ""
        }
    }
}

problem Generated/1603 {
code {
        func reverse_words_in_string(s: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "olleh dlrow"
("a b c d e f g") -> "a b c d e f g"
(" this has  four   spaces ") -> "siht sah ruof secaps"
(" u o y e h t r o ") -> "u o y e h t r o"
("") -> ""
        }
    }
}

problem Generated/1604 {
code {
        func get_lowest_case_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World") -> ["hello", "world"]
("Hello    World") -> ["hello", "world"]
("Hello   !!  WoRLD") -> ["hello", "world"]
("") -> []
("123 456") -> []
        }
    }
}

problem Generated/1605 {
code {
        func get_lower_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("Python is an interpreted, high-level, general-purpose programming language.") -> 
["python", "is", "an", "interpreted,", "high-level,", "general-purpose", "programming", "language."]
("This is a test sentence for testing the function.") -> 
["this", "is", "a", "test", "sentence", "for", "testing", "the", "function."]
("") -> []
("   ") -> []
("Just one word") -> ["just", "one", "word"]
        }
    }
}

problem Generated/1606 {
code {
        func split_and_lower(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World") -> ["hello", "world"]
("Today is Thursday") -> ["today", "is", "thursday"]
("The quick brown fox jumps over the lazy dog") -> ["the", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]
("One two Three four FIVE") -> ["one", "two", "three", "four", "five"]
("") -> []
        }
    }
}

problem Generated/1607 {
code {
        func get_lower_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("The Quick Brown Fox Jumps Over The Lazy Dog") -> ["the", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]
("PYTHON IS AWESOME") -> ["python", "is", "awesome"]
("Hello, World!") -> ["hello,", "world!"]
("1 2 3 4 5") -> ["1", "2", "3", "4", "5"]
("") -> []
        }
    }
}

problem Generated/1608 {
code {
        func get_lowercased_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("this IS a TeST sEnTencE") -> ["this", "is", "a", "test", "sentence"]
("Hello, world! How are you doing today?") -> ["hello,", "world!", "how", "are", "you", "doing", "today?"]
("CamelCaseSentence with Acronyms U.S.A and U.K.") -> ["camelcasesentence", "with", "acronyms", "u.s.a", "and", "u.k."]
("The quick brown fox jumps over the lazy dog") -> ["the", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]
("") -> []
        }
    }
}

problem Generated/1609 {
code {
        func lower_and_split_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World") -> ["hello", "world"]
("Goodbye cruel world") -> ["goodbye", "cruel", "world"]
(" A   B C               D E  F") -> ["a", "b", "c", "d", "e", "f"]
("HELLO   wORLd") -> ["hello", "world"]
("") -> []
        }
    }
}

problem Generated/1610 {
code {
        func convert_to_uppercase(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World") -> ["HELLO", "WORLD"]
("Python is an interpreted, high-level, general-purpose programming language.") -> ["PYTHON", "IS", "AN", "INTERPRETED,", "HIGH-LEVEL,", "GENERAL-PURPOSE", "PROGRAMMING", "LANGUAGE."]
("") -> []
("  hello      world    !") -> ["HELLO", "WORLD", "!"]
(" 1 2 3 4 5 ") -> ["1", "2", "3", "4", "5"]
        }
    }
}

problem Generated/1611 {
code {
        func uppercase_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("I love Python programming") -> ["I", "LOVE", "PYTHON", "PROGRAMMING"]
("HELLO WORLD") -> ["HELLO", "WORLD"]
("  Testing  one  two    three   ") -> ["TESTING", "ONE", "TWO", "THREE"]
("Coding is Fun!") -> ["CODING", "IS", "FUN!"]
("a b c d e") -> ["A", "B", "C", "D", "E"]
        }
    }
}

problem Generated/1612 {
code {
        func uppercase_words_in_sentence(sentence: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "HELLO WORLD"
("a lazy fox jumps over the brown dog") -> "A LAZY FOX JUMPS OVER THE BROWN DOG"
("this is a test sentence") -> "THIS IS A TEST SENTENCE"
("PYTHON IS COOL") -> "PYTHON IS COOL"
("    ") -> ""
        }
    }
}

problem Generated/1613 {
code {
        func uppercase_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("hello world") -> ["HELLO", "WORLD"]
("GooD MoRniNG") -> ["GOOD", "MORNING"]
("I    aM a memBer of tEaM") -> ["I", "AM", "A", "MEMBER", "OF", "TEAM"]
("") -> []
("124 5 6 78") -> ["124", "5", "6", "78"]
        }
    }
}

problem Generated/1614 {
code {
        func split_and_upper(s: string) -> list<string>
    }
    tests {
        template nse {
            ("hello world") -> ["HELLO", "WORLD"]
("python is awesome") -> ["PYTHON", "IS", "AWESOME"]
("123 456 789") -> ["123", "456", "789"]
(" HELLO  WORLD ") -> ["HELLO", "WORLD"]
("") -> []
        }
    }
}

problem Generated/1615 {
code {
        func get_lower_case_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World") -> []
("this is a lowercase string") -> ["this", "is", "a", "lowercase", "string"]
("A quick brown fox jumps over the lazy dog") -> ["quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]
("UPPER CASE") -> []
("") -> []
("2+2=4") -> []
        }
    }
}

problem Generated/1616 {
code {
        func find_upper_words(txt: string) -> list<string>
    }
    tests {
        template nse {
            ("PYTHON is an awesome language to work with") -> ["PYTHON"]
("The quick brown fox JUMPS OVER the lazy dog") -> ["JUMPS", "OVER"]
("THIS IS A TEST") -> ["THIS", "IS", "A", "TEST"]
("") -> []
("no uppercase words here") -> []
        }
    }
}

problem Generated/1617 {
code {
        func get_uppercase_words(txt: string) -> list<string>
    }
    tests {
        template nse {
            ("HELLO WORLD") -> ["HELLO", "WORLD"]
("Hello World") -> []
("HELLO     WORLD") -> ["HELLO", "WORLD"]
("HELLO\nWORLD") -> ["HELLO", "WORLD"]
("   HELLO WORLD  ") -> ["HELLO", "WORLD"]
        }
    }
}

problem Generated/1618 {
code {
        func get_digit_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("I am 25 now") -> ["25"]
("23 is a good number") -> ["23"]
("I am not that old") -> []
("7 up is a drink") -> ["7"]
("99 bottles of beer") -> ["99"]
        }
    }
}

problem Generated/1619 {
code {
        func filter_string_starts_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "Python", "programming"], "pro") -> ["programming"]
(["hello", "world", "Python", "programming"], "Py") -> ["Python"]
(["", "world", "Python", ""], "") -> ["", "world", "Python", ""]
(["hello", "world", "Python", "programming"], "java") -> []
([], "prefix") -> []
        }
    }
}

problem Generated/1620 {
code {
        func get_matching_strings(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["alpha", "beta", "gamma", "delta"], "al") -> ["alpha"]
(["apple", "apricot", "banana", "orange"], "ap") -> ["apple", "apricot"]
(["cat", "dog", "elephant", "giraffe"], "e") -> ["elephant"]
(["python", "java", "ruby", "c++"], "c") -> ["c++"]
(["zero", "one", "two", "three"], "z") -> ["zero"]
        }
    }
}

problem Generated/1621 {
code {
        func filter_words_starting_with_prefix(sentence: string, pre: string) -> list<string>
    }
    tests {
        template nse {
            ("The quick brown fox jumps over the lazy dog", "the") -> ["the"]
("The quick brown fox jumps over the lazy dog", "fox") -> ["fox"]
("The quick brown fox jumps over the lazy dog", "dog") -> ["dog"]
("The quick brown fox jumps over the lazy dog", "jump") -> ["jumps"]
("The quick brown fox jumps over the lazy dog", "bear") -> []
        }
    }
}

problem Generated/1622 {
code {
        func get_words_starting_with_prefix(words: string, pre: string) -> list<string>
    }
    tests {
        template nse {
            ("apple banana cherry date", "a") -> ["apple"]
("apple banana cherry date", "b") -> ["banana"]
("apple banana cherry date", "c") -> ["cherry"]
("apple banana cherry date", "d") -> ["date"]
("apple banana cherry date", "e") -> []
        }
    }
}

problem Generated/1623 {
code {
        func get_names_starting_with_prefix(names_str: string, pre: string) -> list<string>
    }
    tests {
        template nse {
            ("John Smith Alice Bob", "J") -> ["John"]
("John Smith Alice Bob", "A") -> ["Alice"]
("John Smith Alice Bob", "B") -> ["Bob"]
("John Smith Alice Bob", "S") -> ["Smith"]
("John Smith Alice Bob", "K") -> []
        }
    }
}

problem Generated/1624 {
code {
        func count_word_occurrences(sentence: string, words: list<string>) -> list<int>
    }
    tests {
        template nse {
            ("I love Python and Python is the best language for programming", ["Python", "best"]) -> [2, 1]
("I am a Python developer", ["Java", "developer"]) -> [0, 1]
("Python is the best language for programming", ["Python", "for"]) -> [1, 1]
("I am a Python developer and Python is awesome", ["Python", "developer", "awesome"]) -> [2, 1, 1]
("", ["Python", "best"]) -> [0, 0]
        }
    }
}

problem Generated/1625 {
code {
        func count_words(sentence: string, words: list<string>) -> int
    }
    tests {
        template nse {
            ("the quick brown fox jumps over the lazy dog", ["the", "fox"]) -> 2
("the quick brown fox jumps over the lazy dog", ["cat", "dog"]) -> 1
("the quick brown fox jumps over the lazy dog", []) -> 0
("", ["cat", "dog"]) -> 0
("the quick brown fox jumps over the lazy dog", ["the", "The"]) -> 1
        }
    }
}

problem Generated/1626 {
code {
        func count_words_with_prefix(txt: string, pre: string) -> int
    }
    tests {
        template nse {
            ("hello world, hello python", "hello") -> 2
("The sun sets in the west", "the") -> 1
("hello world, hello python", "world") -> 1
("", "hello") -> 0
("hello", "") -> 1
        }
    }
}

problem Generated/1627 {
code {
        func replace_word_in_sentence(sentence: string, old_word: string, new_word: string) -> string
    }
    tests {
        template nse {
            ("I love programming", "programming", "Python") -> "I love Python"
("Iloveprogramming", "programming", "Python") -> "IlovePython"
("Python is fun", "Java", "C++") -> "Python is fun"
("Python is fun", "Python", "C++") -> "C++ is fun"
("Python is fun", "Python", "Python") -> "Python is fun"
        }
    }
}

problem Generated/1628 {
code {
        func split_sentence(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("This is a sentence") -> ["This", "is", "a", "sentence"]
("  This is also a sentence.  ") -> ["This", "is", "also", "a", "sentence."]
("") -> []
("Hello   world") -> ["Hello", "world"]
("This is a very long sentence with many words in it") -> ["This", "is", "a", "very", "long", "sentence", "with", "many", "words", "in", "it"]
        }
    }
}

problem Generated/1629 {
code {
        func split_string_into_words(txt: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World") -> ["Hello", "World"]
("The quick brown fox jumps over the lazy dog") -> ["The", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]
("") -> []
("  ") -> []
("a b c d") -> ["a", "b", "c", "d"]
("one 1 two 2 three 3") -> ["one", "1", "two", "2", "three", "3"]
        }
    }
}

problem Generated/1630 {
code {
        func split_string_to_list(input_str: string, delimiter: string) -> list<string>
    }
    tests {
        template nse {
            ("a b c d e", " ") -> ["a", "b", "c", "d", "e"]
("python,java,javascript,c++", ",") -> ["python", "java", "javascript", "c++"]
("hello world", "o") -> ["hell", " w", "rld"]
("alpha-beta-gamma", "-") -> ["alpha", "beta", "gamma"]
("", " ") -> []
        }
    }
}

problem Generated/1631 {
code {
        func get_last_word_from_string(input_str: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "World"
(" Goodbye ") -> "Goodbye"
("") -> ""
("OnlyOneWord") -> "OnlyOneWord"
("    ") -> ""
        }
    }
}

problem Generated/1632 {
code {
        func remove_duplicates_from_list(input_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hello", "world", "testing"]) -> ["hello", "world", "testing"]
(["python", "python", "python", "python", "python"]) -> ["python"]
(["apple", "orange", "banana", "kiwi"]) -> ["apple", "orange", "banana", "kiwi"]
([]) -> []
(["a"]) -> ["a"]
        }
    }
}

problem Generated/1633 {
code {
        func remove_last_word(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello world") -> "Hello"
("  Hello world  ") -> "Hello"
("Hello") -> ""
("") -> ""
("Hello there how are you doing") -> "Hello there how are you"
        }
    }
}

problem Generated/1634 {
code {
        func get_last_word_of_sentence(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "World"
("Hello World ") -> ""
(" ") -> ""
("") -> ""
("This is a longer sentence with multiple words") -> "words"
        }
    }
}

problem Generated/1635 {
code {
        func split_and_pop(sentence: string, idx: int) -> string
    }
    tests {
        template nse {
            ("This is a test sentence", 1) -> "is"
("Hello world", 0) -> "Hello"
("a b c d e", 4) -> "e"
("Test 1 2 3", 2) -> "2"
("The quick brown fox jumps over the lazy dog", 3) -> "fox"
        }
    }
}

problem Generated/1636 {
code {
        func sort_words_in_sentence(sentence: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "hello world"
("the quick brown fox jumps over the lazy dog") -> "brown dog fox jumps lazy over quick the the"
("this is a sentence") -> "a is sentence this"
("a s t u c") -> "a c s t u"
("1 2 3 4 5") -> "1 2 3 4 5"
        }
    }
}

problem Generated/1637 {
code {
        func sort_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("hello world how are you") -> ["are", "hello", "how", "world", "you"]
("Python is an interpreted language") -> ["an", "interpreted", "is", "language", "Python"]
("This is a Test string") -> ["a", "is", "string", "Test", "This"]
("TestStringWithNoSpaces") -> ["TestStringWithNoSpaces"]
("") -> []
        }
    }
}

problem Generated/1638 {
code {
        func sort_words_in_string(sentence: string) -> string
    }
    tests {
        template nse {
            ("This is a test sentence") -> "This a is sentence test"
("Sorting multiple words in python") -> "Sorting in multiple python words"
("b c a e d") -> "a b c d e"
("1 2 3 5 4") -> "1 2 3 4 5"
("") -> ""
        }
    }
}

problem Generated/1639 {
code {
        func reverse_word_order(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "World Hello"
("Alice and Bob went to the store") -> "store the to went Bob and Alice"
("We are going to the zoo") -> "zoo the to going are We"
(" The quick brown fox ") -> "fox brown quick The"
("  ") -> ""
        }
    }
}

problem Generated/1640 {
code {
        func reverse_word_order(s: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "World Hello"
("This is a test") -> "test a is This"
("   Hello   World  ") -> "World Hello"
("123 45 6") -> "6 45 123"
("") -> ""
        }
    }
}

problem Generated/1641 {
code {
        func reverse_word_order(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello world") -> "world Hello"
("I love Python") -> "Python love I"
("This is a test") -> "test a is This"
("Single") -> "Single"
("") -> ""
        }
    }
}

problem Generated/1642 {
code {
        func reverse_word_order(words: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "world hello"
("This is a long string of words and numbers 1234567890") -> "1234567890 numbers and words of string long a is This"
("") -> ""
("SingleWord") -> "SingleWord"
("one 1 two 2 three 3") -> "3 three 2 two 1 one"
        }
    }
}

problem Generated/1643 {
code {
        func reverse_word_order(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "World Hello"
("The quick brown fox jumps over the lazy dog") -> "dog lazy the over jumps fox brown quick The"
("Python is an interpreted high-level programming language") -> "language programming high-level interpreted an is Python"
("") -> ""
("SingleWord") -> "SingleWord"
        }
    }
}

problem Generated/1644 {
code {
        func reverse_words(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "World Hello"
("This is a sentence") -> "sentence a is This"
("Python is awesome") -> "awesome is Python"
("") -> ""
(" hello world ") -> "world hello"
        }
    }
}

problem Generated/1645 {
code {
        func reverse_words(txt: string) -> string
    }
    tests {
        template nse {
            ("Hello world") -> "olleH dlrow"
("Python is awesome") -> "nohtyP si emosewa"
("") -> ""
("    ") -> ""
("A") -> "A"
        }
    }
}

problem Generated/1646 {
code {
        func reverse_words_in_sentence(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "olleH dlroW"
("Python is awesome") -> "nohtyP si emosewa"
("  Hello  World  ") -> "olleH dlroW"
("") -> ""
(" a b c ") -> "a b c"
        }
    }
}

problem Generated/1647 {
code {
        func get_unique_words(txt: string) -> list<string>
    }
    tests {
        template nse {
            ("hello world world world world hello world goodbye") -> ["hello", "world", "goodbye"]
("") -> []
("the quick brown fox jumps over the lazy dog") -> ["the", "quick", "brown", "fox", "jumps", "over", "lazy", "dog"]
("a a b b c c d d e e f f g g h h i i j j k k l l m m n n o o p p q q r r s s t t u u v v w w x x y y z z") -> ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
("one two three four five six seven eight nine ten ten nine eight seven six five four three two one") -> ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten"]
        }
    }
}

problem Generated/1648 {
code {
        func word_count(txt: string, words: list<string>) -> int
    }
    tests {
        template nse {
            ("Hello World", ["hello", "world"]) -> 2
("An apple a day keeps the doctor away", ["apple", "doctor"]) -> 2
("Python is a great programming language", ["java", "C++"]) -> 0
("I love Python Programming Language", ["python", "programming", "language", "java"]) -> 3
("A quick brown fox jumps over the lazy dog", ["fox", "dog"]) -> 2
        }
    }
}

problem Generated/1649 {
code {
        func group_anagrams(words: list<string>) -> list<list<string>>
    }
    tests {
        template nse {
            (["eat", "tea", "tan", "ate", "nat", "bat"]) -> [["eat", "tea", "ate"], ["tan", "nat"], ["bat"]]
(["race", "care", "acre", "crae"]) -> [["race", "care", "acre", "crae"]]
(["abc", "def", "xyz", "cba", "fed", "zyx"]) -> [["abc", "cba"], ["def", "fed"], ["xyz", "zyx"]]
([]) -> []
(["a"]) -> [["a"]]
(["cat", "tac", "dog"]) -> [["cat", "tac"], ["dog"]]
        }
    }
}

problem Generated/1650 {
code {
        func split_string_into_chunks(s: string, chunk_size: int) -> list<string>
    }
    tests {
        template nse {
            ("Hello, World!", 3) -> ["Hel", "lo,", " Wo", "rld", "!"]
("This is a long string", 4) -> ["This", " is ", "a lo", "ng s", "trin", "g"]
("Short", 5) -> ["Short"]
("", 2) -> []
("Another String", 7) -> ["Another", " String"]
("Spaced Out", 3) -> ["Spa", "ced", " Ou", "t"]
        }
    }
}

problem Generated/1651 {
code {
        func split_string_into_chunks(string_value: string, chunk_size: int) -> list<string>
    }
    tests {
        template nse {
            ("hello world", 3) -> ["hel", "lo ", "wor", "ld"]
("The quick brown fox jumps over the lazy dog", 5) -> ["The q", "uick ", "brown", " fox ", "jumps", " over", " the ", "lazy ", "dog"]
("abcdefghijklmnopqrstuvwxyz", 1) -> ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
("1234567890", 4) -> ["1234", "5678", "90"]
("", 3) -> []
        }
    }
}

problem Generated/1652 {
code {
        func split_string_into_chunks(s: string, chunk_size: int) -> list<string>
    }
    tests {
        template nse {
            ("Hello World", 5) -> ["Hello", " Worl", "d"]
("aabbccdd", 3) -> ["aab", "bcc", "dd"]
("123456789", 2) -> ["12", "34", "56", "78", "9"]
("abcd", 2) -> ["ab", "cd"]
("", 4) -> []
        }
    }
}

problem Generated/1653 {
code {
        func split_string_into_chunks(s: string, k: int) -> list<string>
    }
    tests {
        template nse {
            ("abcdefgh", 3) -> ["abc", "def", "gh"]
("Hello, World!", 5) -> ["Hello", ", Wor", "ld!"]
("Today is a good day", 6) -> ["Today ", "is a g", "ood da", "y"]
("Lorem ipsum dolor sit amet", 7) -> ["Lorem i", "psum do", "lor sit", " amet"]
("123456789", 3) -> ["123", "456", "789"]
        }
    }
}

problem Generated/1654 {
code {
        func get_square_root_list(numbers_s: string) -> list<double>
    }
    tests {
        template nse {
            ("4 9 16 25 36") -> [2.0, 3.0, 4.0, 5.0, 6.0]
("1 4 9 16 25 36 49 64 81 100") -> [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]
("") -> []
("2.25 7.84 12.96") -> [1.5, 2.8, 3.6]
("16 36 81") -> [4.0, 6.0, 9.0]
        }
    }
}

problem Generated/1655 {
code {
        func compute_power_of_numbers(numbers: string) -> list<double>
    }
    tests {
        template nse {
            ("1 2 3 4 5") -> [1.0, 4.0, 9.0, 16.0, 25.0]
("-1.2 2.3 -3.4 4.5 -5.6") -> [1.44, 5.289999999999999, 11.559999999999999, 20.25, 31.359999999999996]
("1.0 2.0 3.0") -> [1.0, 4.0, 9.0]
("1.1 2.2 3.3 4.4 5.5") -> [1.21, 4.840000000000001, 10.889999999999999, 19.360000000000003, 30.25]
("0.0 1.0 2.0 3.0 4.0 5.0") -> [0.0, 1.0, 4.0, 9.0, 16.0, 25.0]
        }
    }
}

problem Generated/1656 {
code {
        func square_of_numbers_in_string(input_s: string) -> list<int>
    }
    tests {
        template nse {
            ("2 4 6 8 10") -> [4, 16, 36, 64, 100]
("1 10 100 1000") -> [1, 100, 10000, 1000000]
("0 1 2 3 4 5 6 7 8 9") -> [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
("10") -> [100]
("5 6") -> [25, 36]
        }
    }
}

problem Generated/1657 {
code {
        func merge_lists(lists: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["1 2 3", "4 5 6", "7 8 9"]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
(["10 20 30"]) -> [10, 20, 30]
(["-1 -2 -3", "4 5 6", "-7 -8 -9"]) -> [-1, -2, -3, 4, 5, 6, -7, -8, -9]
([]) -> []
(["1 2 3", "4 5", "6 7 8 9"]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
        }
    }
}

problem Generated/1658 {
code {
        func concatenate_list_of_words(words: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "helloworld"
("this is a test") -> "thisisatest"
("one two three four") -> "onetwothreefour"
("good bad ugly") -> "goodbadugly"
("cat dog mouse") -> "catdogmouse"
        }
    }
}

problem Generated/1659 {
code {
        func flatten_and_reduce(strs: list<string>, delimiter: string) -> int
    }
    tests {
        template nse {
            (["1,2,3", "4,5,6", "7,8,9"], ",") -> 45
(["1:2:3", "4:5:6", "7:8:9"], ":") -> 45
(["1 2 3", "4 5 6", "7 8 9"], " ") -> 45
(["10:20", "30:40", "50:60"], ":") -> 210
(["10 20", "30 40", "50 60"], " ") -> 210
        }
    }
}

problem Generated/1660 {
code {
        func count_words_in_sentence(sentence: string) -> int
    }
    tests {
        template nse {
            ("The quick brown fox jumps over the lazy dog") -> 9
("I am groot") -> 3
("Count the words in this sentence") -> 6
("Hello World") -> 2
("One Two Three Four Five") -> 5
        }
    }
}

problem Generated/1661 {
code {
        func concatenate_strings(txt: string, separator: string) -> string
    }
    tests {
        template nse {
            ("Hello World", " ") -> "HelloWorld"
("Hello,World", ",") -> "HelloWorld"
("Hello|World|Python", "|") -> "HelloWorldPython"
("1,2,3,4,5", ",") -> "12345"
("", "|") -> ""
        }
    }
}

problem Generated/1662 {
code {
        func split_string_by_delimiter(input_s: string, delimiter: string) -> list<string>
    }
    tests {
        template nse {
            ("hello,world", ",") -> ["hello", "world"]
("hello/world", "/") -> ["hello", "world"]
("hello     world", " +") -> ["hello", "world"]
("hello world", ":") -> ["hello world"]
("helloworld", ",") -> ["helloworld"]
        }
    }
}

problem Generated/1663 {
code {
        func join_elements_with_separator(elements: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry"], ", ") -> "0, 1, 2"
(["a", "b", "c", "d"], "") -> "0123"
(["Python", "Java", "C++"], " | ") -> "0 | 1 | 2"
(["apple", "banana", "cherry"], "") -> "012"
([], ", ") -> ""
        }
    }
}

problem Generated/1664 {
code {
        func create_string_of_numbers(n: int, m: int, sep: string) -> string
    }
    tests {
        template nse {
            (1, 5, ",") -> "1,2,3,4,5"
(0, 0, ";") -> "0"
(-5, 5, " ") -> "-5 -4 -3 -2 -1 0 1 2 3 4 5"
(1, 1, ",") -> "1"
(100, 105, "") -> "100101102103104105"
        }
    }
}

problem Generated/1665 {
code {
        func concatenate_range(start: int, last: int, sep: string) -> string
    }
    tests {
        template nse {
            (1, 5, "-") -> "1-2-3-4-5"
(1, 1, "-") -> "1"
(5, 10, " ") -> "5 6 7 8 9 10"
(10, 14, "") -> "1011121314"
(1, 0, "-") -> ""
        }
    }
}

problem Generated/1666 {
code {
        func join_numbers_with_delimiter(numbers: list<int>, delimiter: string) -> string
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], ",") -> "0,1,2,3,4"
([1, -2, 3, -4, 5], "-") -> "0-2-4"
([0, 0, 0, 0, 0], ",") -> ""
([-1, -2, -3, -4, -5], "/") -> ""
([1, 0, 3, 0, 0, 6], " ") -> "0 2 5"
        }
    }
}

problem Generated/1667 {
code {
        func generate_string(num: int, s: string) -> string
    }
    tests {
        template nse {
            (5, "a") -> "aaaaa"
(3, "b") -> "bbb"
(0, "z") -> ""
(2, "") -> ""
(7, "c") -> "ccccccc"
        }
    }
}

problem Generated/1668 {
code {
        func join_numbers_in_range(start: int, last: int, delim: string) -> string
    }
    tests {
        template nse {
            (1, 6, ",") -> "1,2,3,4,5"
(5, 12, ".") -> "5.6.7.8.9.10.11"
(1, 2, "") -> "1"
(1, 1, "-") -> ""
(0, 3, "-") -> "0-1-2"
        }
    }
}

problem Generated/1669 {
code {
        func create_sequence_string(start: int, last: int, sep: string) -> string
    }
    tests {
        template nse {
            (1, 5, "-") -> "1-2-3-4-5"
(1, 1, ",") -> "1"
(5, 1, " ") -> ""
(1, 10, "") -> "12345678910"
(3, 3, "-") -> "3"
        }
    }
}

problem Generated/1670 {
code {
        func generate_multiples_of_num(num: int, max_multiple: int) -> string
    }
    tests {
        template nse {
            (3, 5) -> "3 6 9 12 15"
(2, 6) -> "2 4 6 8 10 12"
(5, 3) -> "5 10 15"
(7, 0) -> ""
(1, 10) -> "1 2 3 4 5 6 7 8 9 10"
        }
    }
}

problem Generated/1671 {
code {
        func create_string_from_range(start: int, last: int, step: int, seperator: string) -> string
    }
    tests {
        template nse {
            (1, 9, 2, "-") -> "1-3-5-7"
(10, 20, 1, " ") -> "10 11 12 13 14 15 16 17 18 19"
(7, 1, -1, ",") -> "7,6,5,4,3,2"
(0, 10, 3, "") -> "0369"
(1, 1, 1, "-") -> ""
        }
    }
}

problem Generated/1672 {
code {
        func join_words(words: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "", "python", "is", "great"], " ") -> "hello world python is great"
(["hello", "world"], "") -> "helloworld"
(["one", "two", "three", "four"], "-") -> "one-two-three-four"
(["", "", "", ""], " ") -> ""
([], " ") -> ""
        }
    }
}

problem Generated/1673 {
code {
        func concatenate_strings_with_separator(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["Hello", "World", "", "Python"], ", ") -> "Hello, World, Python"
(["Hello", "World"], "") -> "HelloWorld"
(["", "", ""], "-") -> ""
([], ", ") -> ""
(["Hello", "         ", "Python"], " ") -> "Hello Python"
        }
    }
}

problem Generated/1674 {
code {
        func join_strings_with_length(strs: list<string>, length: int) -> string
    }
    tests {
        template nse {
            (["apple", "orange", "banana", "grape"], 5) -> "apple-grape"
(["apple", "orange", "banana", "grape"], 6) -> "orange-banana"
(["apple", "orange", "banana", "grape"], 4) -> ""
([], 5) -> ""
(["apple", "orange", "banana", "grape"], 0) -> ""
        }
    }
}

problem Generated/1675 {
code {
        func join_long_words(words: list<string>, length: int, separator: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "kiwi"], 5, "-") -> "banana-orange"
(["apple", "banana", "orange", "kiwi"], 10, ",") -> ""
(["This", "is", "a", "longer", "sentence"], 4, " ") -> "longer sentence"
(["This", "is", "another", "sentence"], 0, " ") -> "This is another sentence"
([], 2, ".") -> ""
        }
    }
}

problem Generated/1676 {
code {
        func concatenate_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "", "python", "is", "awesome"]) -> "helloworldpythonisawesome"
(["", "", "", ""]) -> ""
([]) -> ""
(["abc", "def", "ghi"]) -> "abcdefghi"
(["hello", "", "world"]) -> "helloworld"
        }
    }
}

problem Generated/1677 {
code {
        func concatenate_strings(strs: list<string>, sep: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], " ") -> "hello world"
(["python", "is", "fun"], "-") -> "python-is-fun"
(["", "what", "", "is"], " ") -> "what is"
([], ",") -> ""
(["this", "is", "a", "test"], "") -> "thisisatest"
        }
    }
}

problem Generated/1678 {
code {
        func join_abs_values(items: list<int>, delimiter: string) -> string
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], ", ") -> "1, 2, 3, 4, 5"
([-1, -2, -3, -4, -5], ", ") -> "1, 2, 3, 4, 5"
([0, -2, 3, -4, 5], ", ") -> "0, 2, 3, 4, 5"
([1, -2, 3, -4, 5], "") -> "12345"
([1, 2, 3, 4, 5], "") -> "12345"
        }
    }
}

problem Generated/1679 {
code {
        func join_absolute_values(elements: list<int>, delimiter: string) -> string
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], "-") -> "1-2-3-4-5"
([7, 3, -5, 9, -6], "") -> "73596"
([1, -7, -4, 9, -5], ":") -> "1:7:4:9:5"
([1, 7, 4, 9, 5], " ") -> "1 7 4 9 5"
([-1, -2, -3, -4, -5], "-") -> "1-2-3-4-5"
        }
    }
}

problem Generated/1680 {
code {
        func join_abs_values(elements: list<int>, separator: string) -> string
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5], ",") -> "1,2,3,4,5"
([1, 2, 3, 4, 5], "") -> "12345"
([1, 2, 3, 4, 5], " ") -> "1 2 3 4 5"
([-1, -2, -3, -4, -5], "_") -> "1_2_3_4_5"
([0, -2, 3, -4, 5], ",") -> "0,2,3,4,5"
        }
    }
}

problem Generated/1681 {
code {
        func abs_join(numbers: list<double>, delimiter: string) -> string
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0], "-") -> "1.0-2.0-3.0-4.0-5.0"
([1.0, 2.0, 3.0, 4.0, 5.0], ",") -> "1.0,2.0,3.0,4.0,5.0"
([-1.0, -2.0, -3.0, -4.0, -5.0], ";") -> "1.0;2.0;3.0;4.0;5.0"
([0.0, -2.0, 3.0, -4.0, 5.0], "") -> "0.02.03.04.05.0"
([5.0], "") -> "5.0"
        }
    }
}

problem Generated/1682 {
code {
        func abs_join(numbers: list<int>, delimiter: string) -> string
    }
    tests {
        template nse {
            ([1, 2, 3, -4, -5], ", ") -> "1, 2, 3, 4, 5"
([-1, -2, -3, -4, -5], "") -> "12345"
([1, 2, 3, 4, 5], " - ") -> "1 - 2 - 3 - 4 - 5"
([], ";") -> ""
([0, 2, -3, 4, 0], " / ") -> "0 / 2 / 3 / 4 / 0"
        }
    }
}

problem Generated/1683 {
code {
        func get_abs_values_as_str(numbers: list<double>) -> string
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> "1.0,2.0,3.0,4.0,5.0"
([0.0, -2.0, 3.0, -4.0, 5.0]) -> "0.0,2.0,3.0,4.0,5.0"
([-1.2, -3.4, 5.6, 7.8]) -> "1.2,3.4,5.6,7.8"
([0.0, 0.0, 0.0, 0.0]) -> "0.0,0.0,0.0,0.0"
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> "1.0,2.0,3.0,4.0,5.0"
        }
    }
}

problem Generated/1684 {
code {
        func join_numbers_with_delimiter(numbers: list<double>, delimiter: string) -> string
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0], "-") -> "1.0-3.0-5.0"
([1.0, 2.0, 3.0, 4.0, 5.0], ",") -> "1.0,2.0,3.0,4.0,5.0"
([1.0, 2.0, 3.0, 4.0, 5.0], ";") -> "1.0;2.0;3.0;4.0;5.0"
([-1.0, -2.0, -3.0, -4.0, -5.0], ",") -> ""
([0.0, -2.0, 3.0, -4.0, 5.0], "-") -> "0.0-3.0-5.0"
        }
    }
}

problem Generated/1685 {
code {
        func calculate_sum_of_digits(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([7, 3, 5, 9, 6]) -> 30
([1, 7, 4, 9, 5]) -> 26
([0, 0, 0, 0, 0, 0]) -> 0
([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) -> 45
        }
    }
}

problem Generated/1686 {
code {
        func join_numbers_with_comma(numbers: list<int>) -> string
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> "1,2,3,4,5"
([7, 3, 5, 9, 6]) -> "7,3,5,9,6"
([1, 7, 4, 9, 5]) -> "1,7,4,9,5"
([0, 0, 0, 0, 0]) -> "0,0,0,0,0"
([1, 3, 5, 7, 9]) -> "1,3,5,7,9"
        }
    }
}

problem Generated/1687 {
code {
        func join_sum_of_digits(numbers: list<int>) -> string
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> "15"
([7, 3, 5, 9, 6]) -> "30"
([0, 0, 0, 0, 0]) -> "0"
([]) -> "0"
([123, 456, 789]) -> "45"
        }
    }
}

problem Generated/1688 {
code {
        func get_longest_words(words: list<string>) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "pear", "watermelon", "orange"]) -> "watermelon"
(["cat", "dog", "elephant", "lion", "tiger"]) -> "elephant"
(["car", "bike", "bus", "train", "airplane", "boat"]) -> "airplane"
(["python", "java", "ruby", "c++", "javascript"]) -> "javascript"
(["hello", "world"]) -> "hello,world"
        }
    }
}

problem Generated/1689 {
code {
        func join_longest_words(words: list<string>, delim: string) -> string
    }
    tests {
        template nse {
            (["cat", "dog", "elephant", "cow"], "-") -> "elephant"
(["apple", "banana", "mango", "strawberry"], "") -> "strawberry"
(["cat", "dog", "elephant", "cow"], "") -> "elephant"
(["I", "am", "a", "robot"], "_") -> "robot"
(["Python", "Java", "C++", "JavaScript"], " ") -> "JavaScript"
        }
    }
}

problem Generated/1690 {
code {
        func find_longest_word(words: list<string>) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "durian", "elderberry"]) -> "apple"
(["cat", "dog", "elephant", "rabbit"]) -> "cat"
(["a", "ab", "abc", "abcd", "abcde"]) -> "a"
(["I", "am", "the", "best", "assistant", "ever"]) -> "I"
(["one", "two", "three", "four", "five"]) -> "one"
        }
    }
}

problem Generated/1691 {
code {
        func concatenate_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "how", "are", "you?"], " ") -> "hello world how are you?"
(["hello", "world", "how", "are", "you?"], "") -> "helloworldhowareyou?"
(["", "is", "this", "", "a", "test"], "-") -> "-is-this--a-test"
([], "") -> ""
(["a"], "-") -> "a"
        }
    }
}

problem Generated/1692 {
code {
        func merge_lists_to_string(list1: list<string>, list2: list<string>) -> string
    }
    tests {
        template nse {
            (["a", "b", "c"], ["1", "2", "3"]) -> "a1b2c3"
(["abc", "def", "ghi"], ["123", "456", "789"]) -> "abc123def456ghi789"
(["hello", "world", "python"], ["123", "456", "789"]) -> "hello123world456python789"
(["a", "b", "c"], []) -> ""
([], ["1", "2", "3"]) -> ""
        }
    }
}

problem Generated/1693 {
code {
        func merge_two_lists(list1: list<string>, list2: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["a", "b", "c"], ["1", "2", "3"], "-") -> "a-1-b-2-c-3"
(["a", "b", "c"], ["1", "2"], "-") -> "a-1-b-2"
(["a", "b"], ["1", "2", "3"], "-") -> "a-1-b-2"
([], ["1", "2", "3"], "-") -> ""
(["a", "b", "c"], [], "-") -> ""
        }
    }
}

problem Generated/1694 {
code {
        func combine_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], " ") -> "hello world"
(["cat", "dog", "fish"], ", ") -> "cat, dog, fish"
(["one", "two", "three"], "") -> "onetwothree"
(["apple", "banana", "cherry"], " and ") -> "apple and banana and cherry"
(["foo", "bar"], ":") -> "foo:bar"
        }
    }
}

problem Generated/1695 {
code {
        func join_by_index(strs: list<string>, indices: list<int>) -> string
    }
    tests {
        template nse {
            (["h", "e", "l", "l", "o"], [0, 2, 4]) -> "hlo"
(["h", "e", "l", "l", "o"], [0, -2, 4]) -> "ho"
(["h", "e", "l", "l", "o"], [0, 2, 4, 6]) -> "hlo"
(["h", "e", "l", "l", "o"], []) -> ""
([], [1, 2, 3]) -> ""
        }
    }
}

problem Generated/1696 {
code {
        func join_string_at_indices(strs: list<string>, indices: list<int>) -> string
    }
    tests {
        template nse {
            (["h", "e", "l", "l", "o"], [0, 2, 4, 6]) -> "hlo"
(["h", "e", "l", "l", "o"], []) -> ""
([], []) -> ""
(["h", "e", "l", "l", "o"], [0, 1, 2, 3, 4]) -> "hello"
(["h", "e", "l", "l", "o"], [0, 1, 2, 3, 4, 5]) -> "hello"
        }
    }
}

problem Generated/1697 {
code {
        func concatenate_strings_with_sep(strs: list<string>, sep: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "this", "is", "OpenAI"], " ") -> "hello world this is OpenAI"
(["a", "b", "c"], ",") -> "a,b,c"
(["Open", "AI", "is", "awesome"], "") -> "OpenAIisawesome"
([], " ") -> ""
(["one"], "") -> "one"
        }
    }
}

problem Generated/1698 {
code {
        func join_list_of_strings(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry"], ", ") -> "apple, banana, cherry"
(["apple", "banana", "cherry"], " - ") -> "apple - banana - cherry"
([], " - ") -> ""
(["apple"], " - ") -> "apple"
(["apple", "banana", ""], ", ") -> "apple, banana, "
        }
    }
}

problem Generated/1699 {
code {
        func join_strings_based_on_cond(strs: list<string>, c: list<int>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], [0, 2, -3, 4], ", ") -> "banana, date"
(["apple", "banana", "cherry", "date"], [0, 2, -3, 4], "-") -> "banana-date"
(["apple", "banana", "cherry", "date"], [-1, -2, -3, -4], ", ") -> ""
(["apple", "banana", "cherry", "date"], [1, 2, 3, 4], ", ") -> "apple, banana, cherry, date"
(["apple", "banana", "cherry", "date"], [1, -2, 3, -4], " - ") -> "apple - cherry"
        }
    }
}

problem Generated/1700 {
code {
        func concatenate_strings_with_delim(strs: list<string>, delim: string) -> string
    }
    tests {
        template nse {
            (["", "hello", "world", "", " ", "python"], " ") -> "hello world python"
(["hello", "world"], "") -> "helloworld"
(["", " ", "", "  ", "   ", "hi"], " ") -> "hi"
([], ",") -> ""
(["", "", ""], ",") -> ""
        }
    }
}

problem Generated/1701 {
code {
        func join_strings_with_sep(strs: list<string>, sep: string) -> string
    }
    tests {
        template nse {
            (["hello", "", "world", "python"], ", ") -> "hello, world, python"
(["hello", "world", "python"], "") -> "helloworldpython"
(["hello", "world", "", "python", ""], " ") -> "hello world python"
([], ",") -> ""
(["python"], ", ") -> "python"
        }
    }
}

problem Generated/1702 {
code {
        func merge_and_sort_strings(str_lst: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["Dog", "cat", "APPLE", "banana"], ", ") -> "apple, banana, cat, dog"
([], ",") -> ""
(["abc", "def", "ghi", "jkl"], "") -> "abcdefghijkl"
(["python", "java", "c++", "javascript"], " ") -> "c++ java javascript python"
(["a", "a", "b", "b", "c", "c"], "-") -> "a-a-b-b-c-c"
        }
    }
}

problem Generated/1703 {
code {
        func sort_and_join_strings(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python"], " ") -> "hello python world"
(["abc", "def", "ghi"], "") -> "abcdefghi"
(["cat", "dog", "elephant", "bird"], "-") -> "bird-cat-dog-elephant"
(["banana", "apple", "orange"], ", ") -> "apple, banana, orange"
([], "-") -> ""
        }
    }
}

problem Generated/1704 {
code {
        func sort_and_join_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "grape", "orange"], ", ") -> "apple, banana, grape, orange"
(["apple", "banana", "grape", "orange"], "") -> "applebananagrapeorange"
([], ", ") -> ""
(["z", "a", "c", "d", "b"], "") -> "abcdz"
(["z", "a", "c", "d", "b"], ",") -> "a,b,c,d,z"
        }
    }
}

problem Generated/1705 {
code {
        func reorder_words(sentence: string) -> string
    }
    tests {
        template nse {
            ("world hello abc def") -> "abc def hello world"
("bedroom window has a broken glass") -> "a bedroom broken glass has window"
("Aa Bb Cc Dd eE") -> "Aa Bb Cc Dd eE"
("The quick brown fox jumps over the lazy dog") -> "brown dog fox jumps lazy over quick The the"
("a b c D E f g H i j K") -> "a b c D E f g H i j K"
        }
    }
}

problem Generated/1706 {
code {
        func join_sorted_words(words: list<string>) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "Cherry", "date"]) -> "apple_banana_cherry_date"
(["A", "b", "c", "D"]) -> "a_b_c_d"
(["Hii", "Hello", "Hola"]) -> "hello_hii_hola"
(["Python", "Java", "Javascript", "Ruby"]) -> "java_javascript_python_ruby"
([]) -> ""
        }
    }
}

problem Generated/1707 {
code {
        func sort_join_string_list(str_lst: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], ",") -> "apple,banana,cherry,date"
(["apple", "", "cherry", "date"], "") -> "applecherrydate"
(["cat", "dog", "ant", "bat"], "-") -> "ant-bat-cat-dog"
([], ",") -> ""
(["apple", "Cherry", "banana", "Date"], ",") -> "Cherry,Date,apple,banana"
        }
    }
}

problem Generated/1708 {
code {
        func convert_ascii_to_string(ascii_codes: list<int>) -> string
    }
    tests {
        template nse {
            ([83, 101, 99, 114, 101, 116, 32, 77, 101, 115, 115, 97, 103, 101, 115]) -> "Secret Messages"
([65, 98, 99, 100, 101, 102]) -> "Abcdef"
([104, 105, 106, 107, 108, 109, 32, 110, 111, 112, 113, 114]) -> "hijklm nopqr"
([]) -> ""
([112, 101, 114, 102, 111, 114, 109, 97, 110, 99, 101]) -> "performance"
([37, 56, 100, 33, 70, 108, 111, 119]) -> "%8d!Flow"
        }
    }
}

problem Generated/1709 {
code {
        func get_string_from_ascii(ascii_values: list<int>) -> string
    }
    tests {
        template nse {
            ([65, 66, 67, 68, 69]) -> "ABCDE"
([97, 98, 99]) -> "abc"
([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]) -> "Hello World"
([72, 101, 108, 108, 111]) -> "Hello"
([72, 105, 32, 116, 104, 101, 114, 101]) -> "Hi there"
        }
    }
}

problem Generated/1710 {
code {
        func generate_string_from_list(stringacters: list<int>) -> string
    }
    tests {
        template nse {
            ([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]) -> "Hello World"
([97, 98, 99, 100]) -> "abcd"
([65, 66, 67, 68, 69]) -> "ABCDE"
([]) -> ""
([65, 32, 115, 116, 114, 105, 110, 103]) -> "A string"
        }
    }
}

problem Generated/1711 {
code {
        func convert_ascii_to_string(numbers: list<int>) -> string
    }
    tests {
        template nse {
            ([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]) -> "Hello World"
([65, 66, 67, 68, 69, 70]) -> "ABCDEF"
([97, 98, 99, 100]) -> "abcd"
([74, 117, 112, 121, 116, 101, 114]) -> "Jupyter"
([101, 109, 111, 106, 105]) -> "emoji"
        }
    }
}

problem Generated/1712 {
code {
        func ascii_to_string(stringacters: list<int>) -> string
    }
    tests {
        template nse {
            ([72, 101, 108, 108, 111]) -> "Hello"
([119, 111, 114, 108, 100]) -> "world"
([69, 120, 97, 109, 112, 108, 101, 33]) -> "Example!"
([72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]) -> "Hello world"
([84, 104, 105, 115, 32, 105, 115, 32, 97, 32, 116, 101, 115, 116, 33]) -> "This is a test!"
        }
    }
}

problem Generated/1713 {
code {
        func convert_string_to_unicode(s: string) -> string
    }
    tests {
        template nse {
            ("Hello!") -> "72,101,108,108,111,33"
("Python") -> "80,121,116,104,111,110"
("This is a test.") -> "84,104,105,115,32,105,115,32,97,32,116,101,115,116,46"
("") -> ""
("1234") -> "49,50,51,52"
        }
    }
}

problem Generated/1714 {
code {
        func create_string_from_ascii(ascii_lst: list<int>) -> string
    }
    tests {
        template nse {
            ([65, 66, 67, 68, 69]) -> "ABCDE"
([104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]) -> "hello world"
([72, 101, 108, 108, 111, 32, 116, 104, 101, 114, 101]) -> "Hello there"
([83, 116, 101, 118, 101, 32, 74, 111, 98, 115]) -> "Steve Jobs"
([80, 121, 116, 104, 111, 110, 32, 65, 105]) -> "Python Ai"
        }
    }
}

problem Generated/1715 {
code {
        func convert_to_ascii_string(stringacters: list<string>) -> string
    }
    tests {
        template nse {
            (["a", "b", "c", "d"]) -> "97,98,99,100"
(["A", "B", "C", "D"]) -> "65,66,67,68"
(["1", "2", "3", "4"]) -> "49,50,51,52"
(["!", "@", "#", "$"]) -> "33,64,35,36"
([]) -> ""
        }
    }
}

problem Generated/1716 {
code {
        func join_if_all_true(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> "helloworldpython"
(["hello", "world", "123"]) -> ""
(["Python", "is", "awesome"]) -> "Pythonisawesome"
(["check", "if", "all", "are", "strings"]) -> "checkifallarestrings"
(["a", "b", "c", "d", "e", "f", "g"]) -> "abcdefg"
        }
    }
}

problem Generated/1717 {
code {
        func reverse_words(sentence: string) -> string
    }
    tests {
        template nse {
            ("python is cool") -> "nohtyp si looc"
("hello world") -> "olleh dlrow"
("This is a test") -> "sihT si a tset"
("reversed words in a sentence") -> "desrever sdrow ni a ecnetnes"
("1 2 3 4 5") -> "1 2 3 4 5"
        }
    }
}

problem Generated/1718 {
code {
        func reverse_words(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello world") -> "olleH dlrow"
("My name is John") -> "yM eman si nhoJ"
("ABC DEF GHI") -> "CBA FED IHG"
("Python is awesome") -> "nohtyP si emosewa"
("Reverse this string") -> "esreveR siht gnirts"
        }
    }
}

problem Generated/1719 {
code {
        func join_strings_with_sep(strs: list<string>, sep: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "!"], " ") -> "hello world !"
(["", "world", "!"], " ") -> "world !"
(["hello", "", "!"], " ") -> "hello !"
([], ",") -> ""
(["abc", "def", "ghi"], "") -> "abcdefghi"
(["one", "two", "three"], "-") -> "one-two-three"
        }
    }
}

problem Generated/1720 {
code {
        func reverse_words_in_sentence(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello world") -> "olleH dlrow"
("This is a test") -> "sihT si a tset"
("a") -> "a"
("Hannah sees Anna") -> "hannaH sees annA"
("") -> ""
        }
    }
}

problem Generated/1721 {
code {
        func title_case_sentence(sentence: string) -> string
    }
    tests {
        template nse {
            ("the quick brown fox jumps over the lazy dog") -> "The Quick Brown Fox Jumps Over The Lazy Dog"
("a man a plan a canal panama") -> "A Man A Plan A Canal Panama"
("hello world") -> "Hello World"
("") -> ""
("   hello   world   ") -> "Hello World"
        }
    }
}

problem Generated/1722 {
code {
        func capitalize_first_word(sentence: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "Hello World"
("i am a python programmer") -> "I Am A Python Programmer"
("this is a test sentence") -> "This Is A Test Sentence"
("") -> ""
("  test all  spaces  ") -> "Test All Spaces"
        }
    }
}

problem Generated/1723 {
code {
        func join_list_of_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["AbC", "dEf", "GHi"]) -> "abc-def-ghi"
(["PYTHON", "is", "FUN"]) -> "python-is-fun"
(["This", "is", "a", "TEST"]) -> "this-is-a-test"
([]) -> ""
(["123", "456", "789"]) -> "123-456-789"
        }
    }
}

problem Generated/1724 {
code {
        func join_strings_lower_case(elements: list<string>, sep: string) -> string
    }
    tests {
        template nse {
            (["Hello", "World", "PYTHON"], " ") -> "hello world python"
(["apple", "ORANGE", "Banana"], "-") -> "apple-orange-banana"
([], ",") -> ""
(["123", "456", "789"], "") -> "123456789"
(["hi"], "") -> "hi"
        }
    }
}

problem Generated/1725 {
code {
        func join_strings_lowercase(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["John", "Doe", "Jane"], " ") -> "john doe jane"
(["A", "B", "C"], ",") -> "a,b,c"
([], "-") -> ""
(["I", "am", "a", "ROBOT"], "") -> "iamarobot"
(["Hello", "WORLD"], "_") -> "hello_world"
        }
    }
}

problem Generated/1726 {
code {
        func join_string_with_separator(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["Apple", "Orange", "Banana"], ", ") -> "apple, orange, banana"
(["Hello", "world", "!!"], "") -> "helloworld!!"
(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], " - ") -> "sunday - monday - tuesday - wednesday - thursday - friday - saturday"
(["JANUARY", "FEBRUARY", "MARCH", "APRIL"], "/") -> "january/february/march/april"
(["1", "2", "3", "4"], ", ") -> "1, 2, 3, 4"
        }
    }
}

problem Generated/1727 {
code {
        func concatenate_list_of_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["apple", "Banana", "orange", "Pineapple"]) -> "apple-banana-orange-pineapple"
(["Hi", "HELLO", "heLLo", "hI"]) -> "hi-hello-hello-hi"
(["123", "456", "789"]) -> "123-456-789"
(["a", "b", "c", "d", "E", "f"]) -> "a-b-c-d-e-f"
([]) -> ""
        }
    }
}

problem Generated/1728 {
code {
        func join_upper_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world"]) -> "HELLOWORLD"
(["Python", "is", "a", "great", "language"]) -> "PYTHONISAGREATLANGUAGE"
([]) -> ""
(["t", "e", "s", "t"]) -> "TEST"
(["s", "p", "a", "c", "e"]) -> "SPACE"
        }
    }
}

problem Generated/1729 {
code {
        func uppercase_and_join(words: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], " ") -> "HELLO WORLD"
(["apple", "banana", "cherry"], ",") -> "APPLE,BANANA,CHERRY"
(["python", "is", "fun"], "") -> "PYTHONISFUN"
([], "-") -> ""
(["this", "is", "a", "test"], "123") -> "THIS123IS123A123TEST"
        }
    }
}

problem Generated/1730 {
code {
        func concat_strings_uppercase(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], "_") -> "HELLO_WORLD"
(["apple", "banana", "orange"], ", ") -> "APPLE, BANANA, ORANGE"
(["python", "is", "fun"], "") -> "PYTHONISFUN"
([], "-") -> ""
(["Python"], " ") -> "PYTHON"
        }
    }
}

problem Generated/1731 {
code {
        func join_strings_in_list(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], "") -> "HELLOWORLD"
(["hello", "world"], "-") -> "HELLO-WORLD"
(["Python", "is", "awesome"], " ") -> "PYTHON IS AWESOME"
([], "-") -> ""
(["1", "2", "3", "4"], " ") -> "1 2 3 4"
(["abcd", "efgh", "ijkl"], ",") -> "ABCD,EFGH,IJKL"
        }
    }
}

problem Generated/1732 {
code {
        func concatenate_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["Hello", "World"]) -> "HELLO-WORLD"
(["foo", "BAR", "baz", "QUX"]) -> "FOO-BAR-BAZ-QUX"
(["Python", "Java", "Ruby", "Go"]) -> "PYTHON-JAVA-RUBY-GO"
(["", "", ""]) -> "--"
([]) -> ""
(["spam", "spam", "eggs", "spam"]) -> "SPAM-SPAM-EGGS-SPAM"
        }
    }
}

problem Generated/1733 {
code {
        func join_strings_in_uppercase(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python"], " ") -> "HELLO WORLD PYTHON"
([], ",") -> ""
(["my", "name", "is", "Python"], "") -> "MYNAMEISPYTHON"
(["my", "name", "is", "Python", "3"], ",") -> "MY,NAME,IS,PYTHON,3"
(["one"], " ") -> "ONE"
        }
    }
}

problem Generated/1734 {
code {
        func get_uppercase_joined_string(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], " ") -> "HELLO WORLD"
(["Hello", "WorlD"], "") -> "HELLOWORLD"
(["this", "is", "a", "test"], ",") -> "THIS,IS,A,TEST"
([], "-") -> ""
(["OnlyOne"], ".") -> "ONLYONE"
        }
    }
}

problem Generated/1735 {
code {
        func join_list_of_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python"], "_") -> "HELLO_WORLD_PYTHON"
(["A", "B", "C"], "") -> "ABC"
(["", "", ""], " ") -> "  "
([], "-") -> ""
(["this", "is", "a", "long", "string"], ",") -> "THIS,IS,A,LONG,STRING"
        }
    }
}

problem Generated/1736 {
code {
        func join_uppercase(elements: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], "-") -> "HELLO-WORLD"
(["good", "morning", "everyone"], " ") -> "GOOD MORNING EVERYONE"
(["Python", "is", "FUN"], "") -> "PYTHONISFUN"
(["abc", "def", "ghi"], "") -> "ABCDEFGHI"
(["coffee", "tea", "milk", "juice"], "+") -> "COFFEE+TEA+MILK+JUICE"
        }
    }
}

problem Generated/1737 {
code {
        func join_lowercase_strings(str_lst: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["aa", "Bb", "Cc", "dd"], "-") -> "aa-dd"
(["a", "ab", "ABC", "def"], ".") -> "a.ab.def"
(["Python", "is", "FUN"], " ") -> "is"
([], ";") -> ""
(["1", "2", "3"], " ") -> ""
        }
    }
}

problem Generated/1738 {
code {
        func join_lower_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["Apple", "Ball", "Cat", "Dog"], ", ") -> ""
(["apple", "ball", "cat", "dog"], ", ") -> "apple, ball, cat, dog"
(["apple", "BALL", "CAT", "dog"], ", ") -> "apple, dog"
([], ", ") -> ""
(["a", "b", "c"], "") -> "abc"
        }
    }
}

problem Generated/1739 {
code {
        func join_all_uppercase_words(words: list<string>) -> string
    }
    tests {
        template nse {
            (["HELLO", "WORLD"]) -> "HELLO-WORLD"
(["Hello", "WORLD"]) -> "WORLD"
(["hello", "world"]) -> ""
(["UPPER", "case", "words", "ONLY"]) -> "UPPER-ONLY"
([]) -> ""
        }
    }
}

problem Generated/1740 {
code {
        func join_alpha_words(words: list<string>, sep: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], " ") -> "hello world"
(["this", "is", "test", "123"], "-") -> "this-is-test"
(["Python", "is", "awesome", "3.7"], "") -> "Pythonisawesome"
(["alpha", "beta", "gamma", "delta"], " ") -> "alpha beta gamma delta"
([], "-") -> ""
        }
    }
}

problem Generated/1741 {
code {
        func join_alpha_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "123", "python", "is", "great"], " ") -> "hello world python is great"
(["alpha", "beta", "gamma", "delta"], "-") -> "alpha-beta-gamma-delta"
(["", " ", "123", "abc"], ",") -> "abc"
([], "-") -> ""
([""], " ") -> ""
        }
    }
}

problem Generated/1742 {
code {
        func join_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "kiwi", "123", "orange"], "-") -> "apple-banana-kiwi-orange"
(["apple", "banana", "kiwi", "123", "orange"], " ") -> "apple banana kiwi orange"
(["apple", "banana", "kiwi", "123", "orange"], "") -> "applebananakiwiorange"
([], "-") -> ""
(["123", "456", "789"], " ") -> ""
        }
    }
}

problem Generated/1743 {
code {
        func join_alpha_strings(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["a", "b", "c"], "-") -> "a-b-c"
(["a1", "b2", "c3"], "-") -> ""
(["hello", "world"], "") -> "helloworld"
(["this", "is", "a", "test"], " ") -> "this is a test"
([], " ") -> ""
        }
    }
}

problem Generated/1744 {
code {
        func join_digits(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["abc", "123", "def", "456"]) -> "123456"
(["abc", "def", "ghi"]) -> ""
(["123", "456", "789"]) -> "123456789"
(["1", "2", "3", "4", "5"]) -> "12345"
(["abc", "123", "", "def", "456"]) -> "123456"
        }
    }
}

problem Generated/1745 {
code {
        func join_strings_from_list(elements: list<string>) -> string
    }
    tests {
        template nse {
            (["a", "b", "4", "c", "d"]) -> "4"
(["1", "2", "3", "4", "5"]) -> "12345"
(["a", "b", "c", "d"]) -> ""
([]) -> ""
(["", "1", "2", "3", "4", "5", ""]) -> "12345"
        }
    }
}

problem Generated/1746 {
code {
        func join_digits_only(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["abc", "123", "456", "def"], ", ") -> "123, 456"
(["x", "12", "ab", "34", "c"], "") -> "1234"
(["x", "12", "ab", "34", "c"], " ") -> "12 34"
(["123", "456", "789"], "-") -> "123-456-789"
(["", "123", "45", "6", "7", "89", ""], "") -> "123456789"
        }
    }
}

problem Generated/1747 {
code {
        func join_digits(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["123", "abc", "456", "def"]) -> "123456"
(["1", "2", "3", "4", "5"]) -> "12345"
(["abc", "def", "ghi"]) -> ""
(["1", "2", "three", "4", "five"]) -> "124"
(["123", "456", "789"]) -> "123456789"
        }
    }
}

problem Generated/1748 {
code {
        func join_digits(inputs: list<string>) -> string
    }
    tests {
        template nse {
            (["a", "1", "b", "2", "c", "3"]) -> "123"
(["12", "34", "56", "78"]) -> "12345678"
(["a", "b", "c"]) -> ""
(["1", "2", "3", "4"]) -> "1234"
(["a", "1", "b", "c", "2", "3"]) -> "123"
        }
    }
}

problem Generated/1749 {
code {
        func get_string_from_list(words: list<string>, pre: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "b") -> "banana"
(["apple", "banana", "cherry", "date"], "c") -> "cherry"
(["apple", "banana", "cherry", "date"], "d") -> "date"
(["apple", "banana", "cherry", "date"], "e") -> ""
(["apple", "banana", "cherry", "date"], "a") -> "apple"
        }
    }
}

problem Generated/1750 {
code {
        func join_strings_starting_with_prefix(strs: list<string>, pre: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "avocado", "orange"], "a") -> "appleavocado"
(["apple", "banana", "avocado", "orange"], "b") -> "banana"
(["hello", "world"], "he") -> "hello"
(["hello", "world"], "w") -> "world"
([], "t") -> ""
        }
    }
}

problem Generated/1751 {
code {
        func join_strings_starting_with(strs: list<string>, start: string, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "hi", "goodbye", "hey"], "h", "-") -> "hello-hi-hey"
(["hello", "world", "hi", "goodbye", "hey"], "w", ", ") -> "world"
(["hello", "world", "hi", "goodbye", "hey"], "g", " ") -> "goodbye"
([], "h", "-") -> ""
(["hello", "world", "hi", "goodbye", "hey"], "", ",") -> "hello,world,hi,goodbye,hey"
        }
    }
}

problem Generated/1752 {
code {
        func join_strings_starting_with_prefix(strs: list<string>, pre: string) -> string
    }
    tests {
        template nse {
            (["apple", "orange", "apricot", "banana"], "a") -> "apple-apricot"
(["apple", "orange", "apricot", "banana"], "o") -> "orange"
(["apple", "orange", "apricot", "banana"], "b") -> "banana"
(["apple", "orange", "apricot", "banana"], "c") -> ""
([], "d") -> ""
        }
    }
}

problem Generated/1753 {
code {
        func join_strings_starting_with_prefix(strs: list<string>, pre: string) -> string
    }
    tests {
        template nse {
            (["apple", "ant", "banana", "cat"], "a") -> "appleant"
(["apple", "ant", "banana", "cat"], "b") -> "banana"
([], "a") -> ""
(["apple", "ant", "banana", "cat"], "") -> "appleantbananacat"
(["", "ant", "banana", "cat"], "a") -> "ant"
        }
    }
}

problem Generated/1754 {
code {
        func join_strings_starting_with_prefix(strs: list<string>, pre: string, joiner: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a", ",") -> "apple"
(["apple", "banana", "cherry", "date"], "b", ",") -> "banana"
(["apple", "banana", "cherry", "date"], "c", ",") -> "cherry"
(["apple", "banana", "cherry", "date"], "d", ",") -> "date"
(["apple", "banana", "cherry", "date"], "e", ",") -> ""
        }
    }
}

problem Generated/1755 {
code {
        func concat_strings_starting_with_prefix(strs: list<string>, pre: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "avocado", "blueberry"], "a") -> "appleavocado"
(["apple", "banana", "avocado", "blueberry"], "b") -> "bananablueberry"
([], "c") -> ""
(["apple", "banana", "avocado", "blueberry"], "") -> "applebananaavocadoblueberry"
(["apple", "banana", "avocado", "blueberry"], "x") -> ""
        }
    }
}

problem Generated/1756 {
code {
        func replace_and_join(words: list<string>, old: string, new_dat: string, join_s: string) -> string
    }
    tests {
        template nse {
            (["Python", "is", "amazing"], "amazing", "great", " ") -> "Python is great"
(["Hello", "world"], "o", "0", "-") -> "Hell0-w0rld"
(["One", "Two", "One", "Three"], "One", "Four", "<>") -> "Four<>Two<>Four<>Three"
(["I", "love", "Python"], "P", "", "-") -> "I-love-ython"
([], "a", "b", "_") -> ""
        }
    }
}

problem Generated/1757 {
code {
        func replace_elements_join_strings(words: list<string>, old: string, new_dat: string) -> string
    }
    tests {
        template nse {
            (["I", "love", "Python"], "o", "a") -> "I lave Pythan"
(["Hello", "world"], "l", "x") -> "Hexxo worxd"
(["This", "is", "a", "test"], "t", "") -> "This is a es"
(["Hello", "world"], "z", "a") -> "Hello world"
(["One", "for", "all", "and", "all", "for", "one"], "o", "x") -> "One fxr all and all fxr xne"
        }
    }
}

problem Generated/1758 {
code {
        func concatenate_strings(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python"], " ") -> "hello world python"
([], ",") -> ""
(["apple", "orange", "mango"], "-") -> "apple-orange-mango"
(["Hello", "World"], "") -> "HelloWorld"
(["This", "is", "a", "string"], " ** ") -> "This ** is ** a ** string"
        }
    }
}

problem Generated/1759 {
code {
        func join_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python"], " ") -> "hello world python"
(["hello", "world", "python"], "") -> "helloworldpython"
(["ab", "cd", "ef"], "-") -> "ab-cd-ef"
(["a", "b", "c", "d"], "") -> "abcd"
(["wow", "this", "is", "amazing"], "!!!") -> "wow!!!this!!!is!!!amazing"
        }
    }
}

problem Generated/1760 {
code {
        func join_strings_with_separator(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["", "hello", "   ", "world", "  "], ", ") -> "hello, world"
(["this", "is", "a", "test"], " ") -> "this is a test"
(["", "", ""], " ") -> ""
([], ", ") -> ""
(["1", "2", "3"], "") -> "123"
        }
    }
}

problem Generated/1761 {
code {
        func concatenate_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], " ") -> "hello world"
(["hello", "", "world"], " ") -> "hello world"
(["hello", "", "world", "", ""], " ") -> "hello world"
([], "-") -> ""
(["hello"], "") -> "hello"
        }
    }
}

problem Generated/1762 {
code {
        func concatenate_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["Hello", "world", "!"], " ") -> "Hello world !"
(["Python", "is", "awesome"], "-") -> "Python-is-awesome"
(["1", "2", "3", "4", "5"], ",") -> "1,2,3,4,5"
(["What", "is", "love?"], "") -> "Whatislove?"
(["", "", ""], "-") -> "--"
        }
    }
}

problem Generated/1763 {
code {
        func format_list_as_string(elements: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], " ") -> "hello world"
(["hello", "", "world"], " ") -> "hello world"
(["  ", "hello", "", "world"], " ") -> "hello world"
([], " ") -> ""
([], "") -> ""
        }
    }
}

problem Generated/1764 {
code {
        func concatenate_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "good", "morning"], " ") -> "hello world good morning"
(["a", "b", "c", "d"], "") -> "abcd"
(["a", "b", "c", "d"], "-") -> "a-b-c-d"
(["apple", "banana", "cherry", "date"], ",") -> "apple,banana,cherry,date"
([], " ") -> ""
        }
    }
}

problem Generated/1765 {
code {
        func sort_and_join_strings(strs: list<string>, delim: string) -> string
    }
    tests {
        template nse {
            (["apple", "orange", "banana"], ",") -> "apple,banana,orange"
(["Java", "Python", "JavaScript", "C#", "Ruby"], "_") -> "C#_Java_JavaScript_Python_Ruby"
(["A", "B", "C", "D", "E", "F"], "") -> "ABCDEF"
([], "-") -> ""
(["this is the last test"], " ") -> "this is the last test"
        }
    }
}

problem Generated/1766 {
code {
        func sort_and_join_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["Hello", "World", "From", "OpenAI"], " ") -> "From Hello OpenAI World"
(["c", "b", "a"], "") -> "abc"
(["q", "w", "e"], "-") -> "e-q-w"
([], " ") -> ""
(["Hello", "World"], " ") -> "Hello World"
        }
    }
}

problem Generated/1767 {
code {
        func sort_and_join_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["banana", "apple", "orange", "grapes"], ", ") -> "apple, banana, grapes, orange"
(["z", "y", "x", "w"], "") -> "wxyz"
(["q", "r", "p", "s"], " - ") -> "p - q - r - s"
([], ", ") -> ""
(["abc"], "") -> "abc"
        }
    }
}

problem Generated/1768 {
code {
        func sort_and_join_strings(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["banana", "apple", "orange", "pear"], ", ") -> "APPLE, BANANA, ORANGE, PEAR"
(["john", "jacob", "jingle", "heimer", "schmidt"], "-") -> "HEIMER-JACOB-JINGLE-JOHN-SCHMIDT"
(["python", "java", "go", "c++"], ";") -> "C++;GO;JAVA;PYTHON"
([], ",") -> ""
(["hello"], "") -> "HELLO"
        }
    }
}

problem Generated/1769 {
code {
        func sort_and_join_strings(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["dog", "cat", "bat", "apple"], ", ") -> "apple, bat, cat, dog"
(["hello", "world", "python", "is", "fun"], " ") -> "fun hello is python world"
(["A", "B", "C", "D", "E", "F", "G"], "") -> "ABCDEFG"
(["apple", "banana", "kiwi", "cucumber"], " and ") -> "apple and banana and cucumber and kiwi"
(["zoo", "cat", "dog", "bat"], "-") -> "bat-cat-dog-zoo"
        }
    }
}

problem Generated/1770 {
code {
        func sort_and_join_strings(strs: list<string>, sep: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "-") -> "apple-banana-cherry-date"
(["cat", "dog", "elephant", "bee"], "") -> "beecatdogelephant"
(["Python", "Java", "C++", "JavaScript"], ".") -> "C++.Java.JavaScript.Python"
(["ERROR", "WARNING", "INFO", "DEBUG"], " ") -> "DEBUG ERROR INFO WARNING"
([], ",") -> ""
(["hello"], "") -> "hello"
        }
    }
}

problem Generated/1771 {
code {
        func create_label_str(labels: list<string>, idx: int) -> string
    }
    tests {
        template nse {
            (["apple", "orange", "banana", "peach"], 2) -> "apple, orange, peach"
(["dog", "cat", "fish"], 0) -> "cat, fish"
(["red", "yellow", "green", "blue", "purple"], 4) -> "red, yellow, green, blue"
(["one", "two", "three", "four", "five", "six"], 0) -> "two, three, four, five, six"
(["a", "b", "c"], 1) -> "a, c"
        }
    }
}

problem Generated/1772 {
code {
        func join_list_of_strings(original: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "orange"], "-") -> "0-1-2"
(["cat", "dog", "elephant", "dog", "cat"], " ") -> "0 1 2 1 0"
(["hello", "world"], "") -> "01"
(["Python", "is", "awesome"], ".") -> "0.1.2"
(["This", "is", "a", "sentence"], "-") -> "0-1-2-3"
        }
    }
}

problem Generated/1773 {
code {
        func join_list_of_strings_except_indexes(strs: list<string>, indexes: list<int>, join_s: string) -> string
    }
    tests {
        template nse {
            (["a", "b", "c", "d", "e"], [1, 3], " ") -> "a c e"
(["hello", "world", "this", "is", "openai"], [0, 4], "-") -> "world-this-is"
(["hello", "world", "this", "is", "openai"], [], "-") -> "hello-world-this-is-openai"
(["one", "two", "three", "four", "five"], [0, 1, 2, 3, 4], "-") -> ""
(["one", "two", "three", "four", "five"], [0, 2, 4], " ") -> "two four"
        }
    }
}

problem Generated/1774 {
code {
        func reverse_and_join(words: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "good", "morning"], " ") -> "morning good world hello"
(["1", "2", "3", "4"], "-") -> "4-3-2-1"
(["hello"], "") -> "hello"
([], " ") -> ""
(["", "world", ""], " ") -> " world "
        }
    }
}

problem Generated/1775 {
code {
        func reverse_and_join_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> "nohtyp,dlrow,olleh"
(["first", "second", "third"]) -> "driht,dnoces,tsrif"
(["apple", "banana", "cherry"]) -> "yrrehc,ananab,elppa"
(["one"]) -> "eno"
([]) -> ""
        }
    }
}

problem Generated/1776 {
code {
        func join_reverse_str_list(elements: list<string>, sep: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry"], ", ") -> "cherry, banana, apple"
(["a", "b", "c"], "") -> "cba"
(["hello", "world"], " ") -> "world hello"
([], ", ") -> ""
(["single-element"], ", ") -> "single-element"
        }
    }
}

problem Generated/1777 {
code {
        func join_and_copy_list(original_lst: list<string>, delimiter: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "how", "are", "you"], " ") -> ["hello world how are you", "hello", "world", "how", "are", "you"]
(["hello", "world"], "") -> ["helloworld", "hello", "world"]
(["Python", "is", "a", "great", "language"], "-") -> ["Python-is-a-great-language", "Python", "is", "a", "great", "language"]
([], ",") -> [""]
(["This", "is", "a", "test"], " ") -> ["This is a test", "This", "is", "a", "test"]
        }
    }
}

problem Generated/1778 {
code {
        func join_list_of_strings(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["Hello", "World"], " ") -> "Hello World"
(["Python", "is", "fun"], "-") -> "Python-is-fun"
(["1", "2", "3", "4", "5"], "") -> "12345"
([], "-") -> ""
(["Only one string"], " ") -> "Only one string"
        }
    }
}

problem Generated/1779 {
code {
        func join_list(elements: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python"], " ") -> "hello world python"
(["", "", ""], "-") -> "--"
([], ",") -> ""
(["hello", "world", "python"], "") -> "helloworldpython"
(["1", "2", "3"], " ") -> "1 2 3"
        }
    }
}

problem Generated/1780 {
code {
        func merge_lists_to_str(list1: list<string>, list2: list<string>) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry"], ["orange", "melon", "grape"]) -> "apple-banana-cherry-orange-melon-grape"
([], ["orange", "melon", "grape"]) -> "orange-melon-grape"
(["apple", "banana", "cherry"], []) -> "apple-banana-cherry"
([], []) -> ""
(["apple"], ["banana"]) -> "apple-banana"
        }
    }
}

problem Generated/1781 {
code {
        func double_list_elements(original_lst: list<int>) -> string
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> "2-4-6-8-10"
([0, 1, -1, 2, -2]) -> "0-2--2-4--4"
([]) -> ""
([10,100,1000]) -> "20-200-2000"
([-5,-4,-3,-2,-1,0,1,2,3,4,5]) -> "-10--8--6--4--2-0-2-4-6-8-10"
        }
    }
}

problem Generated/1782 {
code {
        func join_string_from_list(input_lst: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python"], " ") -> "python world hello"
(["this", "is", "a", "test"], "-") -> "test-a-is-this"
([], " ") -> ""
(["python"], "") -> "python"
(["hello", "world"], "123") -> "world123hello"
        }
    }
}

problem Generated/1783 {
code {
        func join_first_n_elements(elements: list<string>, n: int) -> string
    }
    tests {
        template nse {
            (["a", "b", "c", "d", "e", "f"], 3) -> "abc"
(["a", "b", "c", "d", "e", "f"], 6) -> "abcdef"
(["x", "y", "z"], 2) -> "xy"
(["x", "y", "z"], 5) -> "xyz"
([], 3) -> ""
        }
    }
}

problem Generated/1784 {
code {
        func join_strings_index(words: list<string>, start: int, last: int) -> string
    }
    tests {
        template nse {
            (["hello", "world", "this", "is", "openai"], 1, 4) -> "world_this_is"
(["hello", "world", "this", "is", "openai"], 0, 10) -> "hello_world_this_is_openai"
(["hello", "world", "this", "is", "openai"], 3, 8) -> "is_openai"
([], 0, 5) -> ""
(["hello", "world"], -3, 5) -> "hello_world"
        }
    }
}

problem Generated/1785 {
code {
        func join_strings_using_separator(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["a", "b", "c", "d", "e", "f"], "-") -> "a-c-e"
(["apple", "banana", "cherry", "date", "elderberry", "fig"], " ") -> "apple cherry elderberry"
(["apple", "banana", "cherry", "date", "elderberry", "fig"], "-") -> "apple-cherry-elderberry"
([], " ") -> ""
(["only_one"], " ") -> "only_one"
(["only_one", "two"], " ") -> "only_one"
        }
    }
}

problem Generated/1786 {
code {
        func join_string_with_floor(elements: list<double>, separator: string) -> string
    }
    tests {
        template nse {
            ([1.2, 2.7, 3.8, 4.1], ", ") -> "1, 2, 3, 4"
([7.5, 3.1, 5.9, 9.4], " - ") -> "7 - 3 - 5 - 9"
([1.9, 7.2, 4.5, 9.8, 5.1], "") -> "17495"
([1.2, 2.7, 3.8, 4.1], " ") -> "1 2 3 4"
([-1.2, -2.7, -3.8, -4.1], ",") -> "-2,-3,-4,-5"
        }
    }
}

problem Generated/1787 {
code {
        func join_list_of_numbers(numbers: list<double>, delimiter: string) -> string
    }
    tests {
        template nse {
            ([1.0, 2.5, 3.6, 4.2, 5.9], ",") -> "1,2,3,4,5"
([2.5, 3.6, 4.2, 5.9], "-") -> "2-3-4-5"
([2.5, 3.6, 4.2, 5.9], "") -> "2345"
([-2.5, -3.6, -4.2, -5.9], ".") -> "-3.-4.-5.-6"
([2.0, 3.0, 4.0, 5.0], "-") -> "2-3-4-5"
        }
    }
}

problem Generated/1788 {
code {
        func join_list_of_ints(nums: list<int>, delimiter: string) -> string
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], ", ") -> "1, 2, 3, 4, 5"
([7, 3, 5, 9, 6], "") -> "73596"
([1, 7, 4, 9, 5], "/") -> "1/7/4/9/5"
([1, 7, 4, 9, 5], " ") -> "1 7 4 9 5"
([1, 2, 3, 4, 5, 6, 7, 8], " - ") -> "1 - 2 - 3 - 4 - 5 - 6 - 7 - 8"
        }
    }
}

problem Generated/1789 {
code {
        func split_string_into_chunks(s: string, chunk_size: int) -> list<string>
    }
    tests {
        template nse {
            ("abcdefg", 2) -> ["ab", "cd", "ef", "g"]
("Hello World", 5) -> ["Hello", " Worl", "d"]
("123456789", 3) -> ["123", "456", "789"]
("Python is awesome", 8) -> ["Python i", "s awesom", "e"]
("Hello World", 20) -> ["Hello World"]
        }
    }
}

problem Generated/1790 {
code {
        func join_list_of_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"], ",") -> "a,b,c,d,e,f,g,h,i,j"
(["a", "b", "c", "d", "e", "f", "g", "h"], ",") -> "a,b,c,d,e,f,g,h"
(["Hello", "world"], "") -> "Helloworld"
(["foo", "bar", "baz"], ",") -> "foo,bar,baz"
(["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"], " ") -> "a b c d e f g h i j"
        }
    }
}

problem Generated/1791 {
code {
        func concatenate_elements(elements: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["apple", "orange", "banana"], ", ") -> "apple, orange, banana"
(["Hello", "world"], "") -> "Helloworld"
(["a", "b", "c"], "-") -> "a-b-c"
([], ", ") -> ""
(["x"], "-") -> "x"
        }
    }
}

problem Generated/1792 {
code {
        func join_strings_with_separator(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "this", "is", "openai"], "") -> "helloworldthisisopenai"
(["hello", "world", "this", "is", "openai"], " ") -> "hello world this is openai"
(["hello", "world", "this", "is", "openai"], ", ") -> "hello, world, this, is, openai"
([], " ") -> ""
(["hello"], "") -> "hello"
        }
    }
}

problem Generated/1793 {
code {
        func format_numbers(numbers: list<double>) -> string
    }
    tests {
        template nse {
            ([4.0, 9.0, 16.0, 25.0, 36.0]) -> "2.00, 3.00, 4.00, 5.00, 6.00"
([-2.0, -4.0, -6.0, 9.0, 16.0]) -> "1.41, 2.00, 2.45, 3.00, 4.00"
([]) -> ""
([0.0, -4.0, 9.0, -16.0, 25.0, -36.0]) -> "0.00, 2.00, 3.00, 4.00, 5.00, 6.00"
([5.0, 10.0, 15.0]) -> "2.24, 3.16, 3.87"
        }
    }
}

problem Generated/1794 {
code {
        func join_squares_of_numbers(numbers: list<int>, separator: string) -> string
    }
    tests {
        template nse {
            ([1, 4, 9, 16, 25], "-") -> "1-2-3-4-5"
([0, 1, 2, 3, 4], " ") -> "0 1 1 1 2"
([1, 4, 9, 16, 25], "") -> "12345"
([11, 15, 20, 25, 30], ",") -> "3,3,4,5,5"
([2, 3, 5, 7, 11], "_") -> "1_1_2_2_3"
        }
    }
}

problem Generated/1795 {
code {
        func join_squares(numbers: list<int>) -> string
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> "1.0, 1.41, 1.73, 2.0, 2.24"
([2, 4, 6, 8, 10]) -> "1.41, 2.0, 2.45, 2.83, 3.16"
([1, -2, 3, -4, 5]) -> "1.0, 1.73, 2.24"
([-1, -2, -3, -4, -5]) -> ""
([0, 6, -3, 9, -5]) -> "2.45, 3.0"
        }
    }
}

problem Generated/1796 {
code {
        func join_numbers_in_sqrt(numbers: list<int>) -> string
    }
    tests {
        template nse {
            ([4, 9, 16, 25, 36]) -> "2,3,4,5,6"
([1, 2, 3, 4, 5]) -> "1,1,1,2,2"
([0, 16, 4, 9, 100]) -> "0,4,2,3,10"
([144, 64, 49, 36, 81]) -> "12,8,7,6,9"
([10, 25, 3, 7]) -> "3,5,1,2"
        }
    }
}

problem Generated/1797 {
code {
        func join_sqrt(numbers: list<double>, delimiter: string) -> string
    }
    tests {
        template nse {
            ([4.0, 9.0, 16.0, 25.0], ",") -> "2.0,3.0,4.0,5.0"
([1.0, 2.0, 3.0, 4.0, 5.0], "-") -> "1.0-1.4142135623730951-1.7320508075688772-2.0-2.23606797749979"
([], "") -> ""
([25.0], ",") -> "5.0"
([0.25, 0.81, 1.69], ",") -> "0.5,0.9,1.3"
        }
    }
}

problem Generated/1798 {
code {
        func generate_power_strings(b: int, powers: list<int>) -> string
    }
    tests {
        template nse {
            (2, [0, 1, 2, 3]) -> "1-2-4-8"
(3, [2, 4, 6]) -> "9-81-729"
(5, [1, 2, 3, 4, 5]) -> "5-25-125-625-3125"
(7, [0, 2, 4, 6]) -> "1-49-2401-117649"
(10, [3, 5, 7, 10]) -> "1000-100000-10000000-10000000000"
        }
    }
}

problem Generated/1799 {
code {
        func combine_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "this", "is", "a", "test"], " ") -> "hello world this is a test"
(["hello", "world", "this", "is", "a", "test"], "") -> "helloworldthisisatest"
([], " ") -> ""
(["only"], ",") -> "only"
(["a", "b", "c"], ",") -> "a,b,c"
(["one", "two", "three", "four", "five"], " -> ") -> "one -> two -> three -> four -> five"
        }
    }
}

problem Generated/1800 {
code {
        func concatenate_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], " ") -> "hello world"
(["i", "love", "python"], "-") -> "i-love-python"
(["one"], " ") -> "one"
([], "-") -> ""
(["Python"], "") -> "Python"
        }
    }
}

problem Generated/1801 {
code {
        func concatenate_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "how", "are", "you?"], " ") -> "hello world how are you?"
(["hello", "world", "how", "are", "you?"], "") -> "helloworldhowareyou?"
(["1", "2", "3", "4", "5"], ", ") -> "1, 2, 3, 4, 5"
([], ", ") -> ""
(["apple"], "") -> "apple"
        }
    }
}

problem Generated/1802 {
code {
        func join_list_elements(elements: list<string>, sep: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], " ") -> "hello world"
([], "") -> ""
(["a", "b", "c", "d"], "-") -> "a-b-c-d"
(["hello"], "") -> "hello"
(["", "world"], " ") -> " world"
        }
    }
}

problem Generated/1803 {
code {
        func concatenate_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "kiwi", "mango"], ", ") -> "apple, banana, kiwi, mango"
([], ", ") -> ""
(["Hello"], " ") -> "Hello"
(["Hello", "World"], " ") -> "Hello World"
(["a", "b", "c", "d"], "") -> "abcd"
        }
    }
}

problem Generated/1804 {
code {
        func reverse_words_in_sentence(sentence: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "olleh dlrow"
("this is a sentence") -> "siht si a ecnetnes"
("123 456 789") -> "321 654 987"
("Python is fun") -> "nohtyP si nuf"
("") -> ""
        }
    }
}

problem Generated/1805 {
code {
        func reverse_comma_separated_string(s: string) -> string
    }
    tests {
        template nse {
            ("apple,banana,kiwi,mango") -> "mango,kiwi,banana,apple"
("programming,  languages,  are,  fun") -> "fun,are,languages,programming"
("python") -> "python"
("") -> ""
("1,2,3,4,5,6,7,8,9,10") -> "10,9,8,7,6,5,4,3,2,1"
        }
    }
}

problem Generated/1806 {
code {
        func generate_lowercase_strings(size: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["a", "b", "c", "d", "e"]
(0) -> []
(1) -> ["a"]
(10) -> ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]
(26) -> ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
        }
    }
}

problem Generated/1807 {
code {
        func generate_lowercase_strings(string_count: int) -> list<string>
    }
    tests {
        template nse {
            (0) -> [""]
(1) -> ["a"]
(3) -> ["abc"]
(5) -> ["abcde"]
(10) -> ["abcdefghij"]
        }
    }
}

problem Generated/1808 {
code {
        func lowercase_list_of_strings(strs: list<string>, start: int, last: int) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "Banana", "Orange", "Mango", "Grapes"], 0, 3) -> ["apple", "banana", "orange"]
(["Apple", "Banana", "Orange", "Mango", "Grapes"], 2, 5) -> ["orange", "mango", "grapes"]
(["apple", "banana", "orange", "mango", "grapes"], 0, 5) -> ["apple", "banana", "orange", "mango", "grapes"]
(["Apple", "Banana", "Orange", "Mango", "Grapes"], 0, 0) -> []
(["Apple", "Banana", "Orange", "Mango", "Grapes"], 3, 2) -> []
        }
    }
}

problem Generated/1809 {
code {
        func get_lowercase_strings(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["1", "2", "3", "4", "5"]
(0) -> []
(1) -> ["1"]
(10) -> ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
(3) -> ["1", "2", "3"]
        }
    }
}

problem Generated/1810 {
code {
        func generate_lower_strings(start: int, last: int) -> list<string>
    }
    tests {
        template nse {
            (0, 5) -> ["0", "1", "2", "3", "4", "5"]
(3, 7) -> ["3", "4", "5", "6", "7"]
(10, 15) -> ["10", "11", "12", "13", "14", "15"]
(1, 1) -> ["1"]
(89, 92) -> ["89", "90", "91", "92"]
        }
    }
}

problem Generated/1811 {
code {
        func generate_lowercase_strings(length: int) -> list<string>
    }
    tests {
        template nse {
            (1) -> ["abcdefghijklmnopqrstuvwxyz"]
(2) -> ["abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz"]
(3) -> ["abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz"]
(0) -> []
(4) -> ["abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz"]
        }
    }
}

problem Generated/1812 {
code {
        func count_lower_case_strings(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["Hello", "world", "Python", "programming"]) -> 2
(["Hello", "WORLD", "PYTHON", "PROGRAMMING"]) -> 0
(["Hello", "World", "Python", "Programming"]) -> 0
([]) -> 0
(["hello", "world", "python", "programming"]) -> 4
        }
    }
}

problem Generated/1813 {
code {
        func lower_case_list(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "Banana", "Orange"]) -> ["apple", "banana", "orange"]
(["Hello", "WORLD", "hOw", "aRe", "YOu"]) -> ["hello", "world", "how", "are", "you"]
([]) -> []
(["CaT", "DOG", "BiRD", "fisH"]) -> ["cat", "dog", "bird", "fish"]
(["I", "AM", "The", "BeST"]) -> ["i", "am", "the", "best"]
        }
    }
}

problem Generated/1814 {
code {
        func get_shortest_name(names: list<string>) -> string
    }
    tests {
        template nse {
            (["Alice", "Bob", "Charlie", "Dan", "Eve"]) -> "bob"
(["Adam", "Ben", "Carla", "David", "Elizabeth"]) -> "ben"
(["apple", "banana", "cherry", "date"]) -> "date"
(["A", "b", "c", "d", "e", "f", "G"]) -> "a"
(["a", "aa", "aaa", "aaaa", "aaaaa"]) -> "a"
        }
    }
}

problem Generated/1815 {
code {
        func count_lowercase_strings(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["Hello", "WoRLD", "python", "IS", "fun"]) -> 2
(["hellO", "WORLD", "python", "IS", "Fun"]) -> 1
(["HELLO", "WORLD", "PYTHON", "IS", "FUN"]) -> 0
([]) -> 0
(["abcd", "efgh", "ijkl", "mnop", "qrst", "uvwx", "yz"]) -> 7
        }
    }
}

problem Generated/1816 {
code {
        func lowercase_and_absolute(strs: list<string>, numbers: list<double>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World", "Python"], [2.0, -3.0, 5.0]) -> ["hello", "world", "python", "2.0", "3.0", "5.0"]
(["Testing", "Python", "lower"], [-1.2, 3.4, 5.6]) -> ["testing", "python", "lower", "1.2", "3.4", "5.6"]
(["UPPERCASE", "lowercase", "MixedCase"], [0.0, -10.5, 15.8]) -> ["uppercase", "lowercase", "mixedcase", "0.0", "10.5", "15.8"]
(["Testing", "123", "Mixed", "CASE"], [1.1, -2.2, 3.3, -4.4]) -> ["testing", "123", "mixed", "case", "1.1", "2.2", "3.3", "4.4"]
([], []) -> []
        }
    }
}

problem Generated/1817 {
code {
        func lowercase_abs(s: string) -> string
    }
    tests {
        template nse {
            ("Hello World!") -> "hello world!"
("zYXwVUTsrqpoNMLkjIhGfEDCBa") -> "zyxwvutsrqponmlkjihgfedcba"
("") -> ""
("1234") -> "1234"
("AbCdEfGhIjKlMnOpQrStUvWxYz") -> "abcdefghijklmnopqrstuvwxyz"
        }
    }
}

problem Generated/1818 {
code {
        func get_longest_word_with_vowels(words: list<string>) -> string
    }
    tests {
        template nse {
            (["Hi", "Hello", "World"]) -> "hello"
(["Python", "Java", "Ruby", "C++"]) -> "python"
(["apple", "banana", "grape", "orange"]) -> "banana"
(["", "", "a"]) -> "a"
([]) -> ""
        }
    }
}

problem Generated/1819 {
code {
        func find_max_element_in_lowercase(elements: list<string>) -> string
    }
    tests {
        template nse {
            (["Hello", "World", "ABC"]) -> "world"
(["book", "Pencil", "Eraser"]) -> "pencil"
(["elephant", "dog", "cat", "bird"]) -> "elephant"
(["Python", "Java", "C++", "Perl"]) -> "python"
(["a", "b", "c", "d"]) -> "d"
        }
    }
}

problem Generated/1820 {
code {
        func get_shortest_case_insensitive_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["aaa", "AaA", "B", "b", "c"]) -> "B"
(["python", "Java", "C#", "C++", "R"]) -> "R"
(["Hello", "world", "this", "is", "Python"]) -> "is"
(["abc", "defgh", "ijklm", "nopqrs", "tuvwxyz"]) -> "abc"
(["AAAA", "aaaa", "AAaa", "aAaA"]) -> "AAAA"
        }
    }
}

problem Generated/1821 {
code {
        func find_smallest_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["Apple", "banana", "Cat", "Dog", "elephant"]) -> "Apple"
(["a", "b", "c", "d", "e"]) -> "a"
(["", "a", "Ab", "ac", "Abc"]) -> ""
(["apple", "banana", "cherry", "date", "elderberry"]) -> "apple"
(["book", "apple", "Dog", "elephant", "cat"]) -> "apple"
        }
    }
}

problem Generated/1822 {
code {
        func min_lowercase_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["banana", "apple", "Orange", "mango", "lemon"]) -> "apple"
(["CAT", "dog", "rat", "bat"]) -> "bat"
(["Turtle", "rabbit", "elephant", "lion"]) -> "elephant"
(["School", "work", "home"]) -> "home"
(["Python", "java", "c++", "ruby", "perl"]) -> "c++"
        }
    }
}

problem Generated/1823 {
code {
        func compare_strings(s1: string, s2: string) -> bool
    }
    tests {
        template nse {
            ("Hello World", "hello world") -> true
("HELLO World", "hello world") -> true
("Hello World", "Goodbye World") -> false
("Python3", "python2") -> false
("", "") -> true
        }
    }
}

problem Generated/1824 {
code {
        func equal_strings(str1: string, str2: string) -> bool
    }
    tests {
        template nse {
            ("Hello World", "hElLo WoRlD") -> true
("Python", "Java") -> false
("", "") -> true
("ComPuteR", "cOmPuTeR") -> true
("12345", "12345") -> true
        }
    }
}

problem Generated/1825 {
code {
        func string_case_insensitive_comparison(str1: string, str2: string) -> bool
    }
    tests {
        template nse {
            ("Hello, World!", "HELLO, WORLD!") -> true
("AbcDefG", "aBCdEFg") -> true
("abc", "def") -> false
("Hello, World!", "Hello, World!") -> true
("", "") -> true
        }
    }
}

problem Generated/1826 {
code {
        func string_lower_case_zip(str1: string, str2: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello", "world") -> ["hw", "eo", "lr", "ll", "od"]
("AbC", "dEf") -> ["ad", "be", "cf"]
("a", "b") -> ["ab"]
("", "") -> []
("ABCDEF", "GHIJKL") -> ["ag", "bh", "ci", "dj", "ek", "fl"]
        }
    }
}

problem Generated/1827 {
code {
        func compare_strings_case_insensitive(str1: string, str2: string) -> bool
    }
    tests {
        template nse {
            ("Hello World", "hello world") -> true
("Python", "java") -> false
("PYTHON", "python") -> true
("123", "321") -> false
("", "") -> true
        }
    }
}

problem Generated/1828 {
code {
        func is_anagram(s: string, t: string) -> bool
    }
    tests {
        template nse {
            ("Anagram", "Nagaram") -> true
("rat", "car") -> false
("Listen", "silent") -> true
("", "") -> true
("A", "a") -> true
        }
    }
}

problem Generated/1829 {
code {
        func lower_case_elements(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "BaNaNa", "Cherry", "dates", "Elderberry"]) -> ["apple", "banana", "cherry", "dates", "elderberry"]
(["Python", "Java", "C++", "JavaScript"]) -> ["python", "java", "c++", "javascript"]
([]) -> []
(["HELLO", "WORLD"]) -> ["hello", "world"]
(["mICROsOFT", "gOOgle", "AMAZON"]) -> ["microsoft", "google", "amazon"]
        }
    }
}

problem Generated/1830 {
code {
        func filter_lower_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "WORLD", "Python", "is", "Fun"]) -> ["hello", "is"]
(["1", "2", "3", "4", "5"]) -> ["1", "2", "3", "4", "5"]
([]) -> []
(["hello", "world", "python", "is", "fun"]) -> ["hello", "world", "python", "is", "fun"]
(["HELLO", "WORLD", "PYTHON", "IS", "FUN"]) -> []
        }
    }
}

problem Generated/1831 {
code {
        func filter_words_with_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "Avocado"], "a") -> ["apple", "Avocado"]
(["Apple", "banana", "Cherry", "avocado"], "c") -> ["Cherry"]
(["Apple", "banana", "Cherry", "avocado"], "A") -> ["Apple", "avocado"]
([], "a") -> []
([""], "") -> [""]
        }
    }
}

problem Generated/1832 {
code {
        func filter_capitalized_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "world", "Python", "is", "fun"]) -> ["Hello", "Python"]
(["hello", "world", "python"]) -> []
(["Python", "is", "a", "great", "language"]) -> ["Python"]
(["Java", "is", "a", "great", "language"]) -> ["Java"]
(["Ruby"]) -> ["Ruby"]
        }
    }
}

problem Generated/1833 {
code {
        func sort_strings_lower(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "banana", "ORANGE", "grapes"]) -> ["apple", "banana", "grapes", "orange"]
(["PYTHON", "java", "c++", "Javascript"]) -> ["c++", "java", "javascript", "python"]
(["hello", "world", "this", "is", "python"]) -> ["hello", "is", "python", "this", "world"]
(["a", "A"]) -> ["a", "a"]
([]) -> []
        }
    }
}

problem Generated/1834 {
code {
        func sort_strings_case_insensitive(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Banana", "cat", "Dog"]) -> ["apple", "Banana", "cat", "Dog"]
(["David", "Alex", "bob", "Alexa"]) -> ["Alex", "Alexa", "bob", "David"]
(["python", "java", "c++", "javascript"]) -> ["c++", "java", "javascript", "python"]
(["A", "b", "C", "d"]) -> ["A", "b", "C", "d"]
(["hello", "HELLO", "heLLo", "hello"]) -> ["hello", "HELLO", "heLLo", "hello"]
        }
    }
}

problem Generated/1835 {
code {
        func sort_string_list(str_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "grape", "kiwi"]) -> ["apple", "banana", "grape", "kiwi", "orange"]
(["APPLE", "banana", "orange", "Grape", "kiwi"]) -> ["apple", "banana", "grape", "kiwi", "orange"]
(["Vaibhav", "is", "a", "Data", "Scientist"]) -> ["a", "data", "is", "scientist", "vaibhav"]
(["No", "one", "can", "make", "you", "feel", "inferior", "without", "your", "consent"]) -> ["can", "consent", "feel", "inferior", "make", "no", "one", "without", "you", "your"]
([]) -> []
        }
    }
}

problem Generated/1836 {
code {
        func sort_strings_case_insensitive(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "banana", "cherry", "date"]) -> ["Apple", "banana", "cherry", "date"]
(["dog", "Cat", "fish", "Bird"]) -> ["Bird", "Cat", "dog", "fish"]
([]) -> []
(["c", "B", "a"]) -> ["a", "B", "c"]
(["ant", "bee", "spider", "Worm"]) -> ["ant", "bee", "spider", "Worm"]
        }
    }
}

problem Generated/1837 {
code {
        func sort_strings_in_lowercase(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "banana", "ORANGE", "grape"]) -> ["apple", "banana", "grape", "orange"]
(["JANUARY", "FEBRUARY", "MARCH", "APRIL"]) -> ["april", "february", "january", "march"]
(["Python", "JAVA", "c++", "julIa"]) -> ["c++", "java", "julia", "python"]
(["GO", "RUST", "julia", "cpp"]) -> ["cpp", "go", "julia", "rust"]
([]) -> []
        }
    }
}

problem Generated/1838 {
code {
        func string_to_lower(s: string) -> string
    }
    tests {
        template nse {
            ("Hello, World!") -> "hello, world!"
("AbCdeFgHiJkLmNoPqRsTuVwXyZ") -> "abcdefghijklmnopqrstuvwxyz"
("1234567890") -> "1234567890"
("hello123WORLD!") -> "hello123world!"
("LemOnS") -> "lemons"
        }
    }
}

problem Generated/1839 {
code {
        func string_to_lower_case(input_s: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "hello world"
("A quick brown fox Jumped over the Lazy dog") -> "a quick brown fox jumped over the lazy dog"
("123 AbC 456") -> "123 abc 456"
("rAnDoM cAsE") -> "random case"
("") -> ""
        }
    }
}

problem Generated/1840 {
code {
        func translate_to_lowercase_string(txt: string) -> string
    }
    tests {
        template nse {
            ("Hello World!") -> "hello world!"
("python") -> "python"
("UPPER CASE TEXT") -> "upper case text"
("") -> ""
("123") -> "123"
        }
    }
}

problem Generated/1841 {
code {
        func string_to_alphabet_index(input_str: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [8, 5, 12, 12, 15]
("HELLO") -> [8, 5, 12, 12, 15]
("hE2lLO") -> [8, 5, 12, 12, 15]
("") -> []
("82@#^*") -> []
        }
    }
}

problem Generated/1842 {
code {
        func string_to_lower_case(dat: string) -> string
    }
    tests {
        template nse {
            ("Hello World!") -> "hello world!"
("This is A TEST") -> "this is a test"
("STRING") -> "string"
("") -> ""
("123") -> "123"
        }
    }
}

problem Generated/1843 {
code {
        func convert_string_to_lower(s: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "hello world"
("Lower Case") -> "lower case"
("UPPER CASE") -> "upper case"
("") -> ""
("12345") -> "12345"
        }
    }
}

problem Generated/1844 {
code {
        func string_to_ascii_values(str_in_dat: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello World") -> [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]
("I am a Python Developer") -> [105, 32, 97, 109, 32, 97, 32, 112, 121, 116, 104, 111, 110, 32, 100, 101, 118, 101, 108, 111, 112, 101, 114]
("1 2 3 Test") -> [49, 32, 50, 32, 51, 32, 116, 101, 115, 116]
("") -> []
("aBc DeFg HiJkL") -> [97, 98, 99, 32, 100, 101, 102, 103, 32, 104, 105, 106, 107, 108]
        }
    }
}

problem Generated/1845 {
code {
        func str_to_ascii(txt: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello World!") -> [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33]
("Python is AWESOME") -> [112, 121, 116, 104, 111, 110, 32, 105, 115, 32, 97, 119, 101, 115, 111, 109, 101]
("1234567890") -> [49, 50, 51, 52, 53, 54, 55, 56, 57, 48]
("AbCdEfG123!@#") -> [97, 98, 99, 100, 101, 102, 103, 49, 50, 51, 33, 64, 35]
("") -> []
        }
    }
}

problem Generated/1846 {
code {
        func is_all_lower_case(words: list<string>) -> bool
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> true
(["Hello", "world", "python"]) -> false
([]) -> true
(["hello", "world", "PYTHON"]) -> false
(["One", "Two", "Three"]) -> false
        }
    }
}

problem Generated/1847 {
code {
        func is_all_lowercase(words: list<string>) -> bool
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> true
(["Hello", "world", "python"]) -> false
([]) -> true
(["a", "B", "C"]) -> false
(["lowercase", "only"]) -> true
        }
    }
}

problem Generated/1848 {
code {
        func is_all_lowercase(words: list<string>) -> bool
    }
    tests {
        template nse {
            (["abc", "def", "ghi"]) -> true
(["abc", "def", "GHI"]) -> false
(["hello", "world"]) -> true
(["Hello", "world"]) -> false
(["this", "is", "a", "test"]) -> true
        }
    }
}

problem Generated/1849 {
code {
        func lowercase_binary(number_lst: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["1", "10", "11", "100", "101"]
([0, 15, 255]) -> ["0", "1111", "11111111"]
([7, 63, 127]) -> ["111", "111111", "1111111"]
([32, 64, 128]) -> ["100000", "1000000", "10000000"]
([10, 20, 30]) -> ["1010", "10100", "11110"]
        }
    }
}

problem Generated/1850 {
code {
        func get_lowercase_binary(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["0000", "0001", "0010", "0011", "0100"]
(0) -> []
(1) -> ["0000"]
(10) -> ["0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001"]
(16) -> ["0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"]
        }
    }
}

problem Generated/1851 {
code {
        func lowercase_string_to_binary(input_s: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World") -> ["01101000", "01100101", "01101100", "01101100", "01101111", "00100000", "01110111", "01101111", "01110010", "01101100", "01100100"]
("Python") -> ["01110000", "01111001", "01110100", "01101000", "01101111", "01101110"]
("lowercase") -> ["01101100", "01101111", "01110111", "01100101", "01110010", "01100011", "01100001", "01110011", "01100101"]
("") -> []
("1234") -> ["00110001", "00110010", "00110011", "00110100"]
        }
    }
}

problem Generated/1852 {
code {
        func get_lowercased_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World") -> ["hello", "world"]
("A quick brown fox jumps over the lazy dog") -> ["a", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]
("Programming is fun") -> ["programming", "is", "fun"]
("") -> []
("      ") -> []
        }
    }
}

problem Generated/1853 {
code {
        func split_and_lower(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("The quick brown fox") -> ["the", "quick", "brown", "fox"]
("JUMP over The LAzy Dog") -> ["jump", "over", "the", "lazy", "dog"]
(" A B   C D ") -> ["a", "b", "c", "d"]
("") -> []
("This is a sentence with no punctuation") -> ["this", "is", "a", "sentence", "with", "no", "punctuation"]
        }
    }
}

problem Generated/1854 {
code {
        func get_lowercase_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello world") -> ["hello", "world"]
("The quick brown fox jumps over the lazy dog") -> ["the", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]
("PYTHON is an amazing programming language") -> ["python", "is", "an", "amazing", "programming", "language"]
("  This Sentence Has     Extra Spaces  ") -> ["this", "sentence", "has", "extra", "spaces"]
("") -> []
        }
    }
}

problem Generated/1855 {
code {
        func lowercase_and_split(s: string) -> list<string>
    }
    tests {
        template nse {
            ("This is a STRING") -> ["this", "is", "a", "string"]
("") -> []
(" Hello    World ") -> ["hello", "world"]
(" 1234 Test 5678 ") -> ["1234", "test", "5678"]
("ONLY UPPERCASE") -> ["only", "uppercase"]
        }
    }
}

problem Generated/1856 {
code {
        func join_list_of_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["Apple", "Ball", "Cat", "Dog"], "-") -> "apple-ball-cat-dog"
(["This", "Is", "A", "Test"], "+") -> "this+is+a+test"
(["Hello", "World"], "") -> "helloworld"
(["PYTHON", "IS", "AWESOME"], " ") -> "python is awesome"
(["123", "456", "789"], ",") -> "123,456,789"
        }
    }
}

problem Generated/1857 {
code {
        func join_list_of_strings(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["Hello", "WORLD"], "-") -> "hello-world"
(["This", "Is", "A", "Test"], " ") -> "this is a test"
(["Red", "Green", "Blue"], ", ") -> "red, green, blue"
([], "") -> ""
(["ONLY ONE ELEMENT"], " ") -> "only one element"
        }
    }
}

problem Generated/1858 {
code {
        func convert_list_to_lowercase_str(elements: list<string>) -> string
    }
    tests {
        template nse {
            (["Hello", "World"]) -> "helloworld"
(["This", "Is", "A", "Test"]) -> "thisisatest"
([]) -> ""
(["ONE", "TWO", "THREE"]) -> "onetwothree"
(["eXaMpLe"]) -> "example"
        }
    }
}

problem Generated/1859 {
code {
        func join_str_list_lowercase(str_lst: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["AbC", "dEf", "Ghi"], "-") -> "abc-def-ghi"
(["apple", "banana", "cherry"], ",") -> "apple,banana,cherry"
(["PYTHON", "is", "AwEsOmE"], " ") -> "python is awesome"
([], "-") -> ""
([""], "-") -> ""
        }
    }
}

problem Generated/1860 {
code {
        func lowercase_and_join_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["Hi", "ThErE", "hOw", "aRe", "yOu"], "-") -> "hi-there-how-are-you"
(["", "2", "5", "8", ""], "") -> "258"
(["Hello", "my", "name", "is", "John"], " ") -> "hello my name is john"
(["LION", "Tiger", "Bear", "Leopard"], ", ") -> "lion, tiger, bear, leopard"
(["Python", "c++", "JAVA", "Ruby"], ".") -> "python.c++.java.ruby"
        }
    }
}

problem Generated/1861 {
code {
        func concat_strings(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["Hello", "World"], " ") -> "hello world"
(["I", "Am", "A", "Python", "Programmer"], "-") -> "i-am-a-python-programmer"
(["Goodbye", "Cruel", "World"], "") -> "goodbyecruelworld"
([], ",") -> ""
(["Python"], " ") -> "python"
        }
    }
}

problem Generated/1862 {
code {
        func alternate_case(s: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "hElLo wOrLd"
("PYTHON") -> "pYtHoN"
("AbCdEfG") -> "aBcDeFg"
("1234") -> "1234"
("") -> ""
        }
    }
}

problem Generated/1863 {
code {
        func convert_list_case(strs: list<string>, cas: string) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World", "Python"], "lower") -> ["hello", "world", "python"]
(["Hello", "World", "Python"], "upper") -> ["HELLO", "WORLD", "PYTHON"]
(["HeLLo", "wOrLD", "PYThOn"], "lower") -> ["hello", "world", "python"]
(["HeLLo", "wOrLD", "PYThOn"], "upper") -> ["HELLO", "WORLD", "PYTHON"]
([], "lower") -> []
        }
    }
}

problem Generated/1864 {
code {
        func toggle_case(txt: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "hELLO wORLD"
("Python is Awesome") -> "pYTHON IS aWESOME"
("pYTHON iS aWESOME") -> "Python Is Awesome"
("12345") -> "12345"
("") -> ""
        }
    }
}

problem Generated/1865 {
code {
        func case_converter(words: list<string>, case_type: string) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World", "Python"], "lower") -> ["hello", "world", "python"]
(["Hello", "World", "Python"], "upper") -> ["HELLO", "WORLD", "PYTHON"]
([], "lower") -> []
(["Hello"], "invalid") -> []
(["", "PYTHON"], "upper") -> ["", "PYTHON"]
        }
    }
}

problem Generated/1866 {
code {
        func switch_case(word: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "hELLO wORLD"
("") -> ""
("aBcDeFgHiJkLmNoPqRsTuVwXyZ") -> "AbCdEfGhIjKlMnOpQrStUvWxYz"
("lowercase") -> "LOWERCASE"
("UPPERCASE") -> "uppercase"
        }
    }
}

problem Generated/1867 {
code {
        func case_converter(dat: list<string>, cas: string) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World"], "upper") -> ["HELLO", "WORLD"]
(["Hello", "World"], "lower") -> ["hello", "world"]
(["hELLO", "wORLD"], "upper") -> ["HELLO", "WORLD"]
(["hELLO", "wORLD"], "lower") -> ["hello", "world"]
([], "lower") -> []
        }
    }
}

problem Generated/1868 {
code {
        func case_insensitive_filter(keywords: list<string>, phrase: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange"], "I love to eat Apples and Bananas") -> ["apple", "banana"]
(["hi", "hello", "hey"], "Hi! How are you?") -> ["hi"]
(["Python", "Java", "JavaScript"], "I like python but prefer javascript over Java") -> ["Python", "Java", "JavaScript"]
(["dog", "cat", "hamster"], "I have a fish and a cat as pets.") -> ["cat"]
(["one", "two", "three"], "I have 1 apple, 2 bananas and three oranges.") -> ["three"]
        }
    }
}

problem Generated/1869 {
code {
        func swap_case_in_string(s: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "hELLO wORLD"
("aBcDeFg123#$%") -> "AbCdEfG123#$%"
("PYTHON") -> "python"
("") -> ""
(" ") -> " "
        }
    }
}

problem Generated/1870 {
code {
        func filter_all_lowercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "WORLD", "this", "IS", "a", "test"]) -> ["hello", "this", "a", "test"]
([]) -> []
(["ONLYUPPERCASE", "ONLYUPPERCASE2"]) -> []
(["alllowercase", "anotherlowersentence", "andanotherone"]) -> ["alllowercase", "anotherlowersentence", "andanotherone"]
(["UPPERandlowerCASE", "lowercase1", "UPPERCASE2"]) -> ["lowercase1"]
        }
    }
}

problem Generated/1871 {
code {
        func get_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "hOW", "aRE", "YOu"]) -> ["WORLD"]
(["HELLO", "WORLD", "hello", "world"]) -> ["HELLO", "WORLD"]
(["hello", "world", "how", "are", "you"]) -> []
([]) -> []
(["A", "B", "C"]) -> ["A", "B", "C"]
        }
    }
}

problem Generated/1872 {
code {
        func get_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["ABCD", "efg", "HIJKLM", "nop"]) -> ["abcd", "hijklm"]
(["abcd", "efg", "hijklm", "nop"]) -> []
(["ABC", "DEF", "GHI", "JKL", "MNO"]) -> ["abc", "def", "ghi", "jkl", "mno"]
(["a", "B", "c", "D", "e", "F"]) -> ["b", "d", "f"]
(["A", "B", "", "D"]) -> ["a", "b", "d"]
        }
    }
}

problem Generated/1873 {
code {
        func get_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "WORLD", "how", "ARE", "you"]) -> ["WORLD", "ARE"]
(["PYTHON", "is", "GREAT"]) -> ["PYTHON", "GREAT"]
(["hello", "world", "how", "are", "you"]) -> []
(["", " ", "  ", "  ", "   "]) -> []
(["", "", "", "", ""]) -> []
        }
    }
}

problem Generated/1874 {
code {
        func get_alpha_lower_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "bAnAnA", "Cherry", "DURian", "45"]) -> ["apple", "banana", "cherry", "durian"]
(["Hello", "World", "Python"]) -> ["hello", "world", "python"]
(["This", "is", "a", "mix", "of", "words", "and", "numbers", "123"]) -> ["this", "is", "a", "mix", "of", "words", "and", "numbers"]
([]) -> []
(["", "aBC", "dEFG", "hIJK"]) -> ["abc", "defg", "hijk"]
        }
    }
}

problem Generated/1875 {
code {
        func filter_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World", "123", "python", "Goodbye"]) -> ["hello", "world", "python", "goodbye"]
(["Happy", "New", "Year", "2022"]) -> ["happy", "new", "year"]
([]) -> []
(["!#$", "aBc", "DEF", "123", "   ", "GhiJ"]) -> ["abc", "def", "ghij"]
(["", " ", "   ", "!!!", "????"]) -> []
        }
    }
}

problem Generated/1876 {
code {
        func get_lower_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World", "123"]) -> ["hello", "world"]
(["This", "is", "a", "test"]) -> ["this", "is", "a", "test"]
([]) -> []
(["Shall", "we", "go", "for", "a", "walk", "?"]) -> ["shall", "we", "go", "for", "a", "walk"]
(["All", "work", "and", "no", "play", "makes", "Jack", "a", "dull", "boy"]) -> ["all", "work", "and", "no", "play", "makes", "jack", "a", "dull", "boy"]
        }
    }
}

problem Generated/1877 {
code {
        func get_all_lower_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "LOVE"]) -> ["hello", "world", "love"]
(["Hello", "WORLD", "123", "loVe"]) -> ["hello", "world", "love"]
(["Welcome", "to", "OpenAI", "API"]) -> ["welcome", "to", "openai", "api"]
([]) -> []
(["TEST"]) -> ["test"]
        }
    }
}

problem Generated/1878 {
code {
        func get_matching_strings(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "Hi", "HelloWorld", "python"], "h") -> ["hello", "hi", "helloworld"]
(["hello", "world", "Hi", "HelloWorld", "python"], "w") -> ["world"]
(["hello", "world", "Hi", "HelloWorld", "python"], "H") -> ["hello", "hi", "helloworld"]
(["hello", "world", "Hi", "HelloWorld", "python"], "x") -> []
([], "h") -> []
        }
    }
}

problem Generated/1879 {
code {
        func get_matching_strings(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "Apricot", "cherry"], "a") -> ["apple", "Apricot"]
(["apple", "banana", "Apricot", "cherry"], "c") -> ["cherry"]
(["apple", "banana", "Apricot", "cherry"], "b") -> ["banana"]
(["apple", "banana", "Apricot", "cherry"], "d") -> []
([], "a") -> []
        }
    }
}

problem Generated/1880 {
code {
        func find_matching_prefixes(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "blueberry", "orange"], "a") -> ["apple", "apricot"]
(["apple", "banana", "apricot", "blueberry", "orange"], "b") -> ["banana", "blueberry"]
(["apple", "banana", "apricot", "blueberry", "orange"], "c") -> []
([], "a") -> []
(["apple", "banana", "apricot", "blueberry", "orange"], "") -> ["apple", "banana", "apricot", "blueberry", "orange"]
        }
    }
}

problem Generated/1881 {
code {
        func filter_string_list_startswith(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "Apricot", "apricot"], "ap") -> ["apple", "Apricot", "apricot"]
(["Python", "Rust", "Java", "C++", "C#"], "c") -> ["C++", "C#"]
([], "a") -> []
(["Django", "Flask", "FastAPI", "Bottle"], "fast") -> ["FastAPI"]
(["Python", "Rust", "Java", "C++", "C#"], "") -> ["Python", "Rust", "Java", "C++", "C#"]
        }
    }
}

problem Generated/1882 {
code {
        func get_matching_strings(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "Apricot", "lemon"], "a") -> ["apple", "Apricot"]
(["apple", "banana", "Apricot", "lemon"], "le") -> ["lemon"]
([], "a") -> []
(["apple", "banana", "Apricot", "lemon"], "") -> ["apple", "banana", "Apricot", "lemon"]
(["apple", "banana", "Apricot", "lemon"], "orange") -> []
        }
    }
}

problem Generated/1883 {
code {
        func get_lowercased_elements_starting_with(elements: list<string>, initial: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "Carrot", "date", "Egg"], "c") -> ["carrot"]
(["Apple", "banana", "Carrot", "date", "Egg"], "b") -> ["banana"]
(["Apple", "banana", "Carrot", "date", "Egg"], "a") -> ["apple"]
(["Apple", "banana", "Carrot", "date", "Egg"], "") -> ["apple", "banana", "carrot", "date", "egg"]
([], "") -> []
        }
    }
}

problem Generated/1884 {
code {
        func get_matching_strings(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "orange", "avocado"], "ap") -> ["apple", "apricot"]
(["apple", "banana", "apricot", "orange", "avocado"], "ba") -> ["banana"]
(["apple", "banana", "apricot", "orange", "avocado"], "A") -> ["apple", "apricot", "avocado"]
(["apple", "banana", "apricot", "orange", "avocado"], "kiwi") -> []
(["apple", "banana", "apricot", "orange", "avocado"], "") -> ["apple", "banana", "apricot", "orange", "avocado"]
        }
    }
}

problem Generated/1885 {
code {
        func count_substring_occurrences(input_s: string, subs: string) -> int
    }
    tests {
        template nse {
            ("hello world", "o") -> 2
("hello world", "l") -> 3
("hello world", "ld") -> 1
("hello world", "h") -> 1
("hello world", "x") -> 0
        }
    }
}

problem Generated/1886 {
code {
        func count_substring_case_insensitive(s: string, sub: string) -> int
    }
    tests {
        template nse {
            ("hello world", "o") -> 2
("Hello world", "o") -> 2
("hello world", "world") -> 1
("Hello World", "world") -> 1
("hello world", "j") -> 0
        }
    }
}

problem Generated/1887 {
code {
        func append_lowercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "heLLo"]) -> ["hello", "world", "hello", "lowercase"]
(["ABC", "DEF", "GHI"]) -> ["abc", "def", "ghi", "lowercase"]
([]) -> ["lowercase"]
(["ab", "CD", "ef"]) -> ["ab", "cd", "ef", "lowercase"]
(["HeLlO", "wOrLd"]) -> ["hello", "world", "lowercase"]
        }
    }
}

problem Generated/1888 {
code {
        func append_lower_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["PYTHON", "JAVA", "RUBY", "C"]) -> ["python!", "java!", "ruby!", "c!"]
(["Hi", "THERE", "HOW", "aRe", "yOu"]) -> ["hi!", "there!", "how!", "are!", "you!"]
([]) -> []
([""]) -> ["!"]
(["pYTHON"]) -> ["python!"]
        }
    }
}

problem Generated/1889 {
code {
        func add_lower_case_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "How", "Are", "You"]) -> ["hello", "world", "how", "are", "you", "lowercase"]
(["apple", "ORANGE", "banana", "GRAPE", "PEAR"]) -> ["apple", "orange", "banana", "grape", "pear", "lowercase"]
([]) -> ["lowercase"]
(["one", "two", "three"]) -> ["one", "two", "three", "lowercase"]
(["Python", "JAVA", "Ruby", "PERL"]) -> ["python", "java", "ruby", "perl", "lowercase"]
        }
    }
}

problem Generated/1890 {
code {
        func add_lowercase_elements(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "Mango", "Banana"]) -> ["apple", "mango", "banana", "done"]
(["This", "is", "a", "test"]) -> ["this", "is", "a", "test", "done"]
([]) -> ["done"]
(["UPPERCASE", "lowercase", "mIxEdCaSe"]) -> ["uppercase", "lowercase", "mixedcase", "done"]
(["ALL", "ELEMENTS", "ARE", "UPPERCASE"]) -> ["all", "elements", "are", "uppercase", "done"]
        }
    }
}

problem Generated/1891 {
code {
        func append_lowercase_strings(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["a", "B", "c", "D", "", "E"]) -> ["a", "b", "c", "d", "e"]
([]) -> []
(["aBC", "", "dEF"]) -> ["abc", "def"]
(["Hello", "WORLD", "In", "Python"]) -> ["hello", "world", "in", "python"]
(["A", "B", "C", "D", "E"]) -> ["a", "b", "c", "d", "e"]
        }
    }
}

problem Generated/1892 {
code {
        func remove_words_from_list(words: list<string>, to_remove: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python", "programming"], ["Python", "programming"]) -> ["hello", "world"]
(["apple", "banana", "orange", "grape"], ["PEAR", "banana"]) -> ["apple", "orange", "grape"]
(["blue", "Red", "GREEN", "yellow", "purple"], ["red", "YELLOW"]) -> ["blue", "GREEN", "purple"]
(["dog", "cat", "fish", "bird"], ["elephant", "giraffe"]) -> ["dog", "cat", "fish", "bird"]
([], ["Python"]) -> []
        }
    }
}

problem Generated/1893 {
code {
        func remove_word_from_list(words: list<string>, word_to_remove: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "kiwi"], "banana") -> ["apple", "orange", "kiwi"]
(["apple", "banana", "orange", "kiwi"], "mango") -> ["apple", "banana", "orange", "kiwi"]
(["apple", "BANANA", "orange", "KIWI"], "banana") -> ["apple", "orange", "KIWI"]
([], "banana") -> []
(["apple", "BANANA", "orange", "kiwi", "banana"], "banana") -> ["apple", "orange", "kiwi"]
        }
    }
}

problem Generated/1894 {
code {
        func sort_strings_case_insensitive(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Banana", "cherry", "Date"]) -> ["apple", "Banana", "cherry", "Date"]
(["cat", "DOG", "bird", "Fish"]) -> ["bird", "cat", "DOG", "Fish"]
(["Python", "java", "c++", "Ruby"]) -> ["c++", "java", "Python", "Ruby"]
(["Red", "Green", "Blue", "Yellow"]) -> ["Blue", "Green", "Red", "Yellow"]
(["alpha", "beta", "Gamma", "Delta", "epsilon"]) -> ["alpha", "beta", "Delta", "epsilon", "Gamma"]
        }
    }
}

problem Generated/1895 {
code {
        func sort_strings_lower(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Banana", "cherry", "Durian", "eggplant"]) -> ["apple", "banana", "cherry", "durian", "eggplant"]
(["hello", "WORLD", "Python", "iS", "GReat"]) -> ["great", "hello", "is", "python", "world"]
([]) -> []
(["CAT", "dog", "Elephant", "fish"]) -> ["cat", "dog", "elephant", "fish"]
(["A", "B", "C", "D", "E"]) -> ["a", "b", "c", "d", "e"]
        }
    }
}

problem Generated/1896 {
code {
        func sort_strings_list_in_lowercase(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "banana", "Orange", "pineapple"]) -> ["apple", "banana", "orange", "pineapple"]
(["Apple", "banana", "orange", "pineapple"]) -> ["apple", "banana", "orange", "pineapple"]
(["Cat", "dog", "Elephant", "Tiger", "Lion"]) -> ["cat", "dog", "elephant", "lion", "tiger"]
([]) -> []
(["Python", "java", "c++", "ruby", "perl", "HTML"]) -> ["c++", "html", "java", "perl", "python", "ruby"]
        }
    }
}

problem Generated/1897 {
code {
        func sort_strings_in_lower_case(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "ball", "Cat", "IPhone"]) -> ["apple", "ball", "cat", "iphone"]
(["Python", "java", "c++", "Swift"]) -> ["c++", "java", "python", "swift"]
(["Ironman", "thor", "DrStrange", "Hulk"]) -> ["drstrange", "hulk", "ironman", "thor"]
([]) -> []
(["A", "B", "C", "D"]) -> ["a", "b", "c", "d"]
        }
    }
}

problem Generated/1898 {
code {
        func sort_list_of_strings(str_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "banana", "Mango", "grapes"]) -> ["apple", "banana", "grapes", "mango"]
(["PYTHON", "java", "c++", "ruby"]) -> ["c++", "java", "python", "ruby"]
(["alpha", "beta", "gamma", "delta"]) -> ["alpha", "beta", "delta", "gamma"]
(["cat", "Dog", "elephant", "Ant"]) -> ["ant", "cat", "dog", "elephant"]
([]) -> []
        }
    }
}

problem Generated/1899 {
code {
        func sort_list_of_strings(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "world", "Python", "Programming"]) -> ["hello", "programming", "python", "world"]
(["Apple", "banana", "orange", "grape"]) -> ["apple", "banana", "grape", "orange"]
([]) -> []
(["A", "b", "c", "d", "E"]) -> ["a", "b", "c", "d", "e"]
(["Python", "is", "Awesome"]) -> ["awesome", "is", "python"]
        }
    }
}

problem Generated/1900 {
code {
        func find_index_of_word(words: list<string>, target_word: string) -> list<int>
    }
    tests {
        template nse {
            (["Hello", "world", "hello", "python"], "hello") -> [0, 2]
(["apple", "banana", "Cherry", "banana", "grape"], "BANANA") -> [1, 3]
(["cat", "dog", "Dog", "Rat"], "rat") -> [3]
(["apple", "banana", "Cherry", "banana", "grape"], "Kiwi") -> []
(["Apple", "Banana", "Apple", "Pineapple"], "pineapple") -> [3]
        }
    }
}

problem Generated/1901 {
code {
        func find_index_of_element(elements: list<string>, target: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "Cherry", "date", "Elderberry"], "cherry") -> 2
(["apple", "banana", "Cherry", "date", "Elderberry"], "kiwi") -> -1
(["apple", "banana", "Cherry", "date", "Elderberry"], "APPLE") -> 0
(["apple", "banana", "Cherry", "date", "Elderberry"], "") -> -1
(["apple", "banana", "Cherry", "date", "Elderberry"], "elderberry") -> 4
        }
    }
}

problem Generated/1902 {
code {
        func find_indexes_of_substring(strs: list<string>, subs: string) -> list<int>
    }
    tests {
        template nse {
            (["abcd", "efgh", "ijkl", "mnop"], "BC") -> [0]
(["abcd", "efgh", "ijkl", "mnop"], "iJkL") -> [2]
(["abcd", "efgh", "ijkl", "mnop"], "mn") -> [3]
(["abcd", "efgh", "ijkl", "mnop"], "xy") -> []
([], "abcd") -> []
        }
    }
}

problem Generated/1903 {
code {
        func reverse_and_lower_list(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World", "!"]) -> ["!", "world", "hello"]
(["a", "b", "c", "d", "e", "f"]) -> ["f", "e", "d", "c", "b", "a"]
(["This", "Is", "A", "Test"]) -> ["test", "a", "is", "this"]
([]) -> []
(["PYTHON", "is", "AWESOME"]) -> ["awesome", "is", "python"]
        }
    }
}

problem Generated/1904 {
code {
        func reverse_lower_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "123"]) -> ["321", "dlrow", "olleh"]
(["AbC", "xYz"]) -> ["zyx", "cba"]
(["nO", "LoNgEr", "OnE"]) -> ["eno", "regnol", "on"]
([]) -> []
(["apple", "Banana", "Cherry", "DURIAN"]) -> ["nairud", "yrrehc", "ananab", "elppa"]
        }
    }
}

problem Generated/1905 {
code {
        func reverse_and_lower(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["AbC","dEF","Ghi"]) -> ["ihg","fed","cba"]
(["Hello","World"]) -> ["dlrow","olleh"]
([]) -> []
(["a","ab","abc"]) -> ["cba","ba","a"]
(["PyThOn","iS","AwEsOmE"]) -> ["emosewa","si","nohtyp"]
        }
    }
}

problem Generated/1906 {
code {
        func reverse_and_lower(string_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World"]) -> ["dlrow", "olleh"]
(["AbC", "DeF", "GH"]) -> ["hg", "fed", "cba"]
(["123", "456", "789"]) -> ["987", "654", "321"]
([]) -> []
(["A", "a"]) -> ["a", "a"]
        }
    }
}

problem Generated/1907 {
code {
        func reverse_and_lower_string_elements(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["APPLE", "BANANA", "ORANGE", "MANGO"]) -> ["ognam", "egnaro", "ananab", "elppa"]
(["Python", "JAVA", "c++", "Ruby", "Scala"]) -> ["alacs", "ybur", "++c", "avaj", "nohtyp"]
([]) -> []
(["a", "aa", "aaa", "aaaa", "aaaaa"]) -> ["aaaaa", "aaaa", "aaa", "aa", "a"]
(["AbC", "dEF", "GhI", "jKL", "mNO"]) -> ["onm", "lkj", "ihg", "fed", "cba"]
        }
    }
}

problem Generated/1908 {
code {
        func get_lower_case_list(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "Banana", "Cherry", "Date"]) -> ["apple", "banana", "cherry", "date"]
(["Lion", "Elephant", "Tiger", "Leopard"]) -> ["lion", "elephant", "tiger", "leopard"]
(["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]) -> ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
([]) -> []
(["Hello", "World"]) -> ["hello", "world"]
(["PYTHON", "is", "FUN"]) -> ["python", "is", "fun"]
        }
    }
}

problem Generated/1909 {
code {
        func copy_and_lowercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World", "Python"]) -> ["hello", "world", "python"]
(["This", "is", "a", "tEst"]) -> ["this", "is", "a", "test"]
([]) -> []
(["LOWERCASE", "UPPERCASE"]) -> ["lowercase", "uppercase"]
(["123", "abc", "Test", "PYTHON"]) -> ["123", "abc", "test", "python"]
        }
    }
}

problem Generated/1910 {
code {
        func copy_and_lower_list(items: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "Banana", "Orange", "Pineapple", "Kiwi"]) -> ["apple", "banana", "orange", "pineapple", "kiwi"]
(["RED", "GREEN", "BLue"]) -> ["red", "green", "blue"]
([]) -> []
(["Hello", "World"]) -> ["hello", "world"]
(["JAVASCRIPT", "PYTHON", "RUBY", "PHP"]) -> ["javascript", "python", "ruby", "php"]
        }
    }
}

problem Generated/1911 {
code {
        func copy_and_lowercase(names: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Alice", "Bob", "Charlie"]) -> ["alice", "bob", "charlie"]
(["ALICE", "BOB", "CHARLIE"]) -> ["alice", "bob", "charlie"]
([]) -> []
([""]) -> [""]
(["Alice", "Alice", "Alice"]) -> ["alice", "alice", "alice"]
        }
    }
}

problem Generated/1912 {
code {
        func copy_and_lower_list(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "BANANA", "Cherry", "Dates", "EGGFRUIT"]) -> ["apple", "banana", "cherry", "dates", "eggfruit"]
([]) -> []
(["apple"]) -> ["apple"]
(["APPLE", "BANANA", "CHERRY"]) -> ["apple", "banana", "cherry"]
(["aPpLe", "bAnAnA", "cHeRrY"]) -> ["apple", "banana", "cherry"]
        }
    }
}

problem Generated/1913 {
code {
        func copy_and_lower_str_list(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["UPPER", "lower", "MiXeD"]) -> ["upper", "lower", "mixed"]
(["ALL", "CAPS", "HERE"]) -> ["all", "caps", "here"]
([]) -> []
(["Only One"]) -> ["only one"]
(["A", "b", "c", "D", "e"]) -> ["a", "b", "c", "d", "e"]
        }
    }
}

problem Generated/1914 {
code {
        func copy_and_lower(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "WORLD"]) -> ["hello", "world"]
(["AbCdEfG", "XyZ"]) -> ["abcdefg", "xyz"]
(["Python", "Is", "AWesome"]) -> ["python", "is", "awesome"]
(["", "EMPTY"]) -> ["", "empty"]
(["1", "TWO", "3", "FOUR"]) -> ["1", "two", "3", "four"]
        }
    }
}

problem Generated/1915 {
code {
        func copy_and_convert_to_lower(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "How", "ArE", "YoU"]) -> ["hello", "world", "how", "are", "you"]
(["Is", "ThIs", "WoRkInG", "?"]) -> ["is", "this", "working", "?"]
(["hEllo", "WOrld"]) -> ["hello", "world"]
([]) -> []
([""]) -> [""]
        }
    }
}

problem Generated/1916 {
code {
        func count_words(sentence: string, words: list<string>) -> int
    }
    tests {
        template nse {
            ("The quick brown fox jumps over the lazy dog", ["the", "fox", "dog"]) -> 3
("The quick brown fox jumps over the lazy dog", ["the", "fox", "cat"]) -> 2
("The quick brown fox jumps over the lazy dog", []) -> 0
("", ["the", "fox", "dog"]) -> 0
("The quick brown fox jumps over the lazy dog", ["THE", "FOX", "DOG"]) -> 3
        }
    }
}

problem Generated/1917 {
code {
        func get_lower_case_list(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["abc", "DEF", "hIjklmn", "opqrs", "TUV"]) -> ["abc", "def", "hijklmn", "opqrs", "tuv"]
(["Abc", "DEf", "HIJKLMN", "opQRS", "tuV"]) -> ["abc", "def", "hijklmn", "opqrs", "tuv"]
(["Hello", "World"]) -> ["hello", "world"]
([]) -> []
(["xyz"]) -> ["xyz"]
        }
    }
}

problem Generated/1918 {
code {
        func convert_list_to_lower_and_floor(elements: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["Apple", "Ball", "Cat"]) -> [97, 112, 112, 108, 101, 98, 97, 108, 108, 99, 97, 116]
(["Python", "is", "Fun"]) -> [112, 121, 116, 104, 111, 110, 105, 115, 102, 117, 110]
(["HELLO", "WORLD"]) -> [104, 101, 108, 108, 111, 119, 111, 114, 108, 100]
([]) -> []
(["123", "456", "789"]) -> [49, 50, 51, 52, 53, 54, 55, 56, 57]
        }
    }
}

problem Generated/1919 {
code {
        func calculate_power_of_string_lengths(strs: list<string>, power: int) -> list<double>
    }
    tests {
        template nse {
            (["Hello", "World", "Python"], 2) -> [25.0, 25.0, 36.0]
(["Hello", "World", "Python"], 3) -> [125.0, 125.0, 216.0]
(["abc", "defg", "hijkl"], 2) -> [9.0, 16.0, 25.0]
([], 5) -> []
([""], 4) -> [0.0]
        }
    }
}

problem Generated/1920 {
code {
        func concatenate_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["This", "is", "a", "Test"]) -> "thisisatest"
(["Hello", "WORLD", "how", "Are", "yOu"]) -> "helloworldhowareyou"
([]) -> ""
(["ALL", "CAPS"]) -> "allcaps"
(["1", "2", "3"]) -> "123"
        }
    }
}

problem Generated/1921 {
code {
        func concat_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["Hello", "World", "!"]) -> "helloworld!"
(["Python", "Is", "Fun"]) -> "pythonisfun"
(["Lowercase", "UPPERCASE"]) -> "lowercaseuppercase"
(["123", "456", "789"]) -> "123456789"
(["One", "Two", "Three", "Four", "Five"]) -> "onetwothreefourfive"
        }
    }
}

problem Generated/1922 {
code {
        func concatenate_strings(str_lst: list<string>) -> string
    }
    tests {
        template nse {
            (["Hello", "WORLD", "how", "aRe", "You"]) -> "helloworldhowareyou"
(["I", "Am", "A", "roBot"]) -> "iamarobot"
([""]) -> ""
([]) -> ""
(["I", "aM", "GoiNg", "to", "pasS", "ThIs", "tesT"]) -> "iamgoingtopassthistest"
        }
    }
}

problem Generated/1923 {
code {
        func concatenate_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "!!!"]) -> "helloworld!!!"
(["ThIs", "Is", "SoMe", "TeXt"]) -> "thisissometext"
(["This", "is", "a", "test"]) -> "thisisatest"
([]) -> ""
(["A"]) -> "a"
        }
    }
}

problem Generated/1924 {
code {
        func concatenate_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["Hello", "WORLD"]) -> "helloworld"
(["Python", "is", "AWESOME"]) -> "pythonisawesome"
(["Lower", "Case", "String"]) -> "lowercasestring"
(["Python", "Programming", "Language"]) -> "pythonprogramminglanguage"
(["The", "quick", "BROWN", "fox", "JUMPS", "over", "the", "lazy", "DOG"]) -> "thequickbrownfoxjumpsoverthelazydog"
        }
    }
}

problem Generated/1925 {
code {
        func split_string_to_lowercase(txt: string, delim: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World", " ") -> ["hello", "world"]
("The Quick Brown Fox Jumps Over The Lazy Dog", " ") -> ["the", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]
("This is a test, just a test", ",") -> ["this is a test", " just a test"]
("one two three four five", "_") -> ["one two three four five"]
("", "_") -> [""]
        }
    }
}

problem Generated/1926 {
code {
        func split_string_on_punctuations(in_dat: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello, World!") -> ["hello", "world"]
("The quick brown fox jumps over the lazy dog.") -> ["the", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]
("This is a test sentence. It should be properly split.") -> ["this", "is", "a", "test", "sentence", "it", "should", "be", "properly", "split"]
("No punctuation here") -> ["no", "punctuation", "here"]
("") -> []
        }
    }
}

problem Generated/1927 {
code {
        func get_lowercased_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World!") -> ["hello", "world"]
("Hey, how are you?") -> ["hey", "how", "are", "you"]
("To be or not to be, that is the question.") -> ["to", "be", "or", "not", "to", "be", "that", "is", "the", "question"]
("Python3 is AWESOME") -> ["python", "is", "awesome"]
("This is a test without any special characters") -> ["this", "is", "a", "test", "without", "any", "special", "characters"]
        }
    }
}

problem Generated/1928 {
code {
        func generate_uppercase_strings(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["1", "2", "3", "4", "5"]
(0) -> []
(1) -> ["1"]
(10) -> ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
(15) -> ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15"]
        }
    }
}

problem Generated/1929 {
code {
        func generate_uppercase_strings(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["0", "1", "2", "3", "4"]
(0) -> []
(1) -> ["0"]
(10) -> ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
(3) -> ["0", "1", "2"]
        }
    }
}

problem Generated/1930 {
code {
        func generate_upper_case_strings(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["1", "2", "3", "4", "5"]
(1) -> ["1"]
(10) -> ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
(0) -> []
(-5) -> []
        }
    }
}

problem Generated/1931 {
code {
        func get_uppercase_strings(start: int, last: int) -> list<string>
    }
    tests {
        template nse {
            (1, 5) -> ["1", "2", "3", "4", "5"]
(10, 15) -> ["10", "11", "12", "13", "14", "15"]
(-2, 0) -> ["-2", "-1", "0"]
(20, 25) -> ["20", "21", "22", "23", "24", "25"]
(7, 7) -> ["7"]
        }
    }
}

problem Generated/1932 {
code {
        func generate_uppercase_strings(n: int) -> list<string>
    }
    tests {
        template nse {
            (1) -> ["1"]
(3) -> ["1", "2", "3"]
(7) -> ["1", "2", "3", "4", "5", "6", "7"]
(0) -> []
(10) -> ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
        }
    }
}

problem Generated/1933 {
code {
        func create_uppercase_strings(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["1", "2", "3", "4", "5"]
(0) -> []
(1) -> ["1"]
(10) -> ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
(3) -> ["1", "2", "3"]
        }
    }
}

problem Generated/1934 {
code {
        func generate_uppercase_strings(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["1", "2", "3", "4", "5"]
(1) -> ["1"]
(10) -> ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
(0) -> []
(3) -> ["1", "2", "3"]
        }
    }
}

problem Generated/1935 {
code {
        func create_uppercase_strings(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["1", "2", "3", "4", "5"]
(0) -> []
(1) -> ["1"]
(10) -> ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
(3) -> ["1", "2", "3"]
        }
    }
}

problem Generated/1936 {
code {
        func build_uppercase_strings(n: int, s: string) -> list<string>
    }
    tests {
        template nse {
            (3, "hello") -> ["HELLO", "HELLO", "HELLO"]
(1, "world") -> ["WORLD"]
(5, "Python") -> ["PYTHON", "PYTHON", "PYTHON", "PYTHON", "PYTHON"]
(0, "Programming") -> []
(2, "AI") -> ["AI", "AI"]
        }
    }
}

problem Generated/1937 {
code {
        func convert_to_uppercase(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python", "is", "amazing", ""]) -> ["HELLO", "WORLD", "PYTHON", "IS", "AMAZING"]
(["samsung", "apple", "google", "microsoft"]) -> ["SAMSUNG", "APPLE", "GOOGLE", "MICROSOFT"]
([]) -> []
(["", "", "", ""]) -> []
(["1", "2", "3", "4", "5"]) -> ["1", "2", "3", "4", "5"]
(["alpha", "beta", "", "gamma", ""]) -> ["ALPHA", "BETA", "GAMMA"]
        }
    }
}

problem Generated/1938 {
code {
        func get_uppercase_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("HELLO WORLD") -> ["HELLO", "WORLD"]
("Hello World") -> []
("DOGS CATS FISH BIRDS") -> ["DOGS", "CATS", "FISH", "BIRDS"]
("Coding is fun") -> []
("") -> []
        }
    }
}

problem Generated/1939 {
code {
        func upper_case_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world"]) -> ["HELLO", "WORLD"]
(["Python", "is", "awesome", "!"]) -> ["PYTHON", "IS", "AWESOME", "!"]
(["", "Python", "", "is", "", "awesome", "!"]) -> ["PYTHON", "IS", "AWESOME", "!"]
(["hElLo", "wOrLd"]) -> ["HELLO", "WORLD"]
([]) -> []
        }
    }
}

problem Generated/1940 {
code {
        func uppercase_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "PYTHON"]) -> ["HELLO", "WORLD", "PYTHON"]
(["abc", "", "def"]) -> ["ABC", "DEF"]
([]) -> []
([""]) -> []
(["Python", "is", "awesome", "!"]) -> ["PYTHON", "IS", "AWESOME", "!"]
        }
    }
}

problem Generated/1941 {
code {
        func to_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "", "python"]) -> ["HELLO", "WORLD", "PYTHON"]
(["a", "b", "c", "d", "e"]) -> ["A", "B", "C", "D", "E"]
(["This", "is", "a", "test"]) -> ["THIS", "IS", "A", "TEST"]
([]) -> []
(["123", "asf@#", "testing", "1234"]) -> ["123", "ASF@#", "TESTING", "1234"]
        }
    }
}

problem Generated/1942 {
code {
        func get_uppercase_abs(numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> ["1", "2", "3", "4", "5"]
([1, 2, 3, 4, 5]) -> ["1", "2", "3", "4", "5"]
([-1, -2, -3, -4, -5]) -> ["1", "2", "3", "4", "5"]
([0, 0, 0, 0, 0]) -> ["0", "0", "0", "0", "0"]
([1, 2, -3, -4, 5]) -> ["1", "2", "3", "4", "5"]
        }
    }
}

problem Generated/1943 {
code {
        func get_upper_strings_with_absolute_length(strs: list<string>, length: int) -> list<string>
    }
    tests {
        template nse {
            (["cat", "dog", "tree", "apple", "book", "pen"], 3) -> ["CAT", "DOG", "PEN"]
(["cat", "", "tree", "apple", "book", "pen"], 0) -> [""]
(["cat", "dog", "tree", "apple", "book", "pen"], -3) -> []
(["cat", "dog", "tree", "apple", "book", "pen"], 4) -> ["TREE", "BOOK"]
(["cat", "DOG", "tree", "apPle", "book", "pen"], 5) -> ["APPLE"]
        }
    }
}

problem Generated/1944 {
code {
        func get_longest_uppercase_word(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello WORLD") -> "WORLD"
("good morning") -> ""
("UPPERCASE IS LOUDER") -> "UPPERCASE"
("") -> ""
("ABC DEF GHI JKL") -> "ABC"
        }
    }
}

problem Generated/1945 {
code {
        func get_min_uppercase_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["apple", "Ball", "cat", "DOG", "Elephant"]) -> "APPLE"
(["C", "c", "B", "b", "a", "A"]) -> "A"
(["abc", "def", "ghi"]) -> "ABC"
(["PYTHON", "jAVA", "c++", "c#", "R"]) -> "C#"
(["z", "y", "x", "w"]) -> "W"
        }
    }
}

problem Generated/1946 {
code {
        func merge_strings(strings1: list<string>, strings2: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "orange", "banana"], ["red", "orange", "yellow"]) -> ["APPLE-RED", "ORANGE-ORANGE", "BANANA-YELLOW"]
(["cat", "dog", "fish"], ["white", "black", "orange"]) -> ["CAT-WHITE", "DOG-BLACK", "FISH-ORANGE"]
(["a", "b", "c"], ["1", "2", "3"]) -> ["A-1", "B-2", "C-3"]
([], []) -> []
(["hello"], ["world"]) -> ["HELLO-WORLD"]
        }
    }
}

problem Generated/1947 {
code {
        func merge_and_uppercase_lists(lst1: list<string>, lst2: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"], ["code", "is", "fun"]) -> ["HELLOCODE", "WORLDIS", "PYTHONFUN"]
(["A", "B", "C"], ["D", "E", "F"]) -> ["AD", "BE", "CF"]
(["London", "New York", "Paris"], ["England", "USA", "France"]) -> ["LONDONENGLAND", "NEW YORKUSA", "PARISFRANCE"]
(["One", "Two", "Three", "Four"], ["Eleven", "Twelve", "Thirteen"]) -> ["ONEELEVEN", "TWOTWELVE", "THREETHIRTEEN"]
(["Apple", "Banana", "Cherry"], ["Red", "Yellow", "Red"]) -> ["APPLERED", "BANANAYELLOW", "CHERRYRED"]
        }
    }
}

problem Generated/1948 {
code {
        func make_uppercase_pairs(strs1: list<string>, strs2: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"], ["code", "language", "program"]) -> ["HELLO-CODE", "WORLD-LANGUAGE", "PYTHON-PROGRAM"]
(["apple", "banana"], ["fruit", ""]) -> ["APPLE-FRUIT", "BANANA-"]
([], []) -> []
(["cat"], ["dog"]) -> ["CAT-DOG"]
(["hello", "world"], ["python"]) -> ["HELLO-PYTHON"]
        }
    }
}

problem Generated/1949 {
code {
        func uppercase_zip_strings(str_list_1: list<string>, str_list_2: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world"], ["python", "programming"]) -> ["HELLOPYTHON", "WORLDPROGRAMMING"]
(["this", "is", "a", "test"], ["list", "comprehension", "python", "zip"]) -> ["THISLIST", "ISCOMPREHENSION", "APYTHON", "TESTZIP"]
([], []) -> []
(["abc"], ["xyz"]) -> ["ABCXYZ"]
(["nyc"], ["la"]) -> ["NYCLA"]
        }
    }
}

problem Generated/1950 {
code {
        func make_all_upper_case(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> ["HELLO", "WORLD", "PYTHON"]
(["I", "love", "coding"]) -> ["I", "LOVE", "CODING"]
([]) -> []
(["This", "Is", "A", "Test"]) -> ["THIS", "IS", "A", "TEST"]
(["PYTHON", "is", "FUN"]) -> ["PYTHON", "IS", "FUN"]
        }
    }
}

problem Generated/1951 {
code {
        func capitalize_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python", "program"]) -> ["HELLO", "world", "PYTHON", "program"]
(["a", "b", "c", "d", "e", "f"]) -> ["A", "b", "C", "d", "E", "f"]
(["WELCOME", "TO", "OPEN", "AI"]) -> ["WELCOME", "to", "OPEN", "ai"]
([]) -> []
(["this", "is", "a", "test"]) -> ["THIS", "is", "A", "test"]
        }
    }
}

problem Generated/1952 {
code {
        func make_upper_case(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> ["HELLO", "WORLD", "PYTHON"]
(["hello", "WORLD", "Python"]) -> ["HELLO", "WORLD", "PYTHON"]
(["hEllo", "WOrld", "PythON"]) -> ["HELLO", "WORLD", "PYTHON"]
([]) -> []
([""]) -> [""]
        }
    }
}

problem Generated/1953 {
code {
        func make_upper_case(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "durian", "elderberry"]) -> ["APPLE", "BANANA", "CHERRY", "DURIAN", "ELDERBERRY"]
(["Hello", "WORLD", "how", "Are", "you"]) -> ["HELLO", "WORLD", "HOW", "ARE", "YOU"]
([]) -> []
(["a"]) -> ["A"]
(["January", "FeBruary", "MARCH", "aprIl"]) -> ["JANUARY", "FEBRUARY", "MARCH", "APRIL"]
        }
    }
}

problem Generated/1954 {
code {
        func upper_case_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "World", "PYTHON", "123", "!" ]) -> ["HELLO", "WORLD", "PYTHON", "123", "!"]
(["a", "b", "c"]) -> ["A", "B", "C"]
(["", " ", "  "]) -> ["", " ", "  "]
([]) -> []
(["Hello", "world"]) -> ["HELLO", "WORLD"]
        }
    }
}

problem Generated/1955 {
code {
        func convert_uppercase(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python", "programming", "language"]) -> ["HELLO", "world", "PYTHON", "programming", "LANGUAGE"]
(["ALL", "CAPITAL", "LETTERS"]) -> ["ALL", "CAPITAL", "LETTERS"]
(["string", "to", "check", "uppercase"]) -> ["STRING", "to", "CHECK", "uppercase"]
([]) -> []
(["A", "B", "C", "D", "E", "F"]) -> ["A", "B", "C", "D", "E", "F"]
        }
    }
}

problem Generated/1956 {
code {
        func uppercase_str_list(str_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> ["HELLO", "WORLD", "PYTHON"]
(["apple", "banana", "cherry"]) -> ["APPLE", "BANANA", "CHERRY"]
([]) -> []
(["One", "Two", "Three"]) -> ["ONE", "TWO", "THREE"]
(["a", "b", "c", "d", "e"]) -> ["A", "B", "C", "D", "E"]
        }
    }
}

problem Generated/1957 {
code {
        func get_uppercase_words(txt: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello world is a great PROGRAM") -> ["PROGRAM"]
("HELLO WORLD IS A GREAT PROGRAM") -> ["HELLO", "WORLD", "IS", "A", "GREAT", "PROGRAM"]
("hello world") -> []
("One UPPER two UPPPER three UPPPPER") -> ["UPPER", "UPPPER", "UPPPPER"]
("") -> []
        }
    }
}

problem Generated/1958 {
code {
        func sort_strings_uppercase(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["banana", "apple", "cherry", "date", "Blueberry"]) -> ["APPLE", "BANANA", "BLUEBERRY", "CHERRY", "DATE"]
(["tiger", "Lion", "elephant", "Leopard"]) -> ["ELEPHANT", "LEOPARD", "LION", "TIGER"]
(["Ant", "BAT", "Cat", "dog", "Rat"]) -> ["ANT", "BAT", "CAT", "DOG", "RAT"]
(["monK", "DonkeY", "llama", "goat"]) -> ["DONKEY", "GOAT", "LLAMA", "MONK"]
([]) -> []
        }
    }
}

problem Generated/1959 {
code {
        func sort_upper_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "mango", "grapes"]) -> ["APPLE", "BANANA", "GRAPES", "MANGO", "ORANGE"]
(["Hello", "World", "Python", "Programming"]) -> ["HELLO", "PROGRAMMING", "PYTHON", "WORLD"]
([]) -> []
([""]) -> [""]
(["abcd", "BCDE", "efgh", "DEFG"]) -> ["ABCD", "BCDE", "DEFG", "EFGH"]
        }
    }
}

problem Generated/1960 {
code {
        func sort_upper_string_list(str_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "Date"]) -> ["APPLE", "BANANA", "CHERRY", "DATE"]
(["cherry", "APPLE", "date", "banana"]) -> ["APPLE", "BANANA", "CHERRY", "DATE"]
(["apple", "banana", "cherry", "Date", "fig"]) -> ["APPLE", "BANANA", "CHERRY", "DATE", "FIG"]
(["APPLE", "BANANA", "CHERRY", "DATE"]) -> ["APPLE", "BANANA", "CHERRY", "DATE"]
([]) -> []
        }
    }
}

problem Generated/1961 {
code {
        func sort_uppercase_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "PYTHON", "AI", "Team"]) -> ["AI", "PYTHON", "WORLD"]
(["HELLO", "WORLD", "PYTHON", "AI", "TEAM"]) -> ["AI", "HELLO", "PYTHON", "TEAM", "WORLD"]
(["Hello", "WORLD", "Python", "ai", "Team"]) -> ["WORLD"]
(["Hello", "WORLD", "", "ai", "Team"]) -> ["WORLD"]
([]) -> []
        }
    }
}

problem Generated/1962 {
code {
        func sort_strings_in_uppercase(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "orange", "banana", "grape"]) -> ["APPLE", "BANANA", "GRAPE", "ORANGE"]
(["Sony", "apple", "samsung", "Nokia"]) -> ["APPLE", "NOKIA", "SAMSUNG", "SONY"]
(["XYZ", "ABC", "PQR", "LMN"]) -> ["ABC", "LMN", "PQR", "XYZ"]
([]) -> []
(["hello", "world", "Python"]) -> ["HELLO", "PYTHON", "WORLD"]
        }
    }
}

problem Generated/1963 {
code {
        func sort_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "python", "IS", "great"]) -> ["IS", "WORLD"]
(["apple", "BANANA", "mango", "GRAPES"]) -> ["BANANA", "GRAPES"]
(["", "123", "abc", "XYZ"]) -> ["XYZ"]
([]) -> []
(["A", "a", "AA", "aa"]) -> ["A", "AA"]
        }
    }
}

problem Generated/1964 {
code {
        func convert_string_to_uppercase(s: string) -> string
    }
    tests {
        template nse {
            ("hello, world!") -> "HELLO, WORLD!"
("PYTHON is AWESOME!") -> "PYTHON IS AWESOME!"
("123, abc") -> "123, ABC"
("") -> ""
("PYTHON") -> "PYTHON"
        }
    }
}

problem Generated/1965 {
code {
        func convert_to_uppercase(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello World!") -> "HELLO WORLD!"
("March 7, 2022") -> "MARCH 7, 2022"
("I am a python developer.") -> "I AM A PYTHON DEVELOPER."
("") -> ""
("123") -> "123"
        }
    }
}

problem Generated/1966 {
code {
        func convert_string_to_caps(txt: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "HELLO WORLD"
("Test Case") -> "TEST CASE"
("12345") -> "12345"
("AbCdefGHIjklmnOP") -> "ABCDEFGHIJKLMNOP"
("") -> ""
        }
    }
}

problem Generated/1967 {
code {
        func convert_str_to_uppercase(input_str: string) -> string
    }
    tests {
        template nse {
            ("Hello World!") -> "HELLO WORLD!"
("python") -> "PYTHON"
("tHIS is A sAMPLE sTRING") -> "THIS IS A SAMPLE STRING"
("12345") -> "12345"
("") -> ""
        }
    }
}

problem Generated/1968 {
code {
        func uppercase_vowels(txt: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "hEllO wOrld"
("The quick brown fox jumps over the lazy dog.") -> "ThE qUIck brOwn fOx jUmps OvEr thE lAzy dOg."
("") -> ""
("aeiou") -> "AEIOU"
("AEIOU") -> "AEIOU"
        }
    }
}

problem Generated/1969 {
code {
        func convert_to_uppercase(strs: list<int>) -> string
    }
    tests {
        template nse {
            ([97, 98, 99, 100]) -> "ABCD"
([65, 66, 67, 68]) -> "ABCD"
([97, 98, 99, 68]) -> "ABCD"
([97, 66, 99, 68]) -> "ABCD"
([73, 110, 116, 101, 114, 101, 115, 116, 105, 110, 103]) -> "INTERESTING"
        }
    }
}

problem Generated/1970 {
code {
        func convert_string_to_uppercase(s: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "HELLO WORLD"
("AaBbCcDdEe") -> "AABBCCDDEE"
("12#56@#%^") -> "12#56@#%^"
("") -> ""
("This is a test!") -> "THIS IS A TEST!"
        }
    }
}

problem Generated/1971 {
code {
        func convert_string_to_ascii_uppercase(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello world") -> [72, 69, 76, 76, 79, 32, 87, 79, 82, 76, 68]
("Python") -> [80, 89, 84, 72, 79, 78]
("ABCDEFGHIJKLMN") -> [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78]
("xyz") -> [88, 89, 90]
("123") -> [49, 50, 51]
        }
    }
}

problem Generated/1972 {
code {
        func convert_string_to_ascii_uppercase(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [72, 69, 76, 76, 79]
("world") -> [87, 79, 82, 76, 68]
("") -> []
("PYTHON") -> [80, 89, 84, 72, 79, 78]
("cOmpUTEr") -> [67, 79, 77, 80, 85, 84, 69, 82]
        }
    }
}

problem Generated/1973 {
code {
        func convert_to_uppercase_string(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [72, 69, 76, 76, 79]
("world!") -> [87, 79, 82, 76, 68, 33]
("") -> []
("123") -> [49, 50, 51]
("aBcDeFgHiJkLmNoPqRsTuVwXyZ") -> [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]
        }
    }
}

problem Generated/1974 {
code {
        func convert_to_uppercase_ascii(string_lst: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["hello", "world"]) -> [72, 69, 76, 76, 79, 87, 79, 82, 76, 68]
(["Python", "is", "awesome"]) -> [80, 89, 84, 72, 79, 78, 73, 83, 65, 87, 69, 83, 79, 77, 69]
([]) -> []
(["abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"]) -> [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]
(["123", "456", "789"]) -> [49, 50, 51, 52, 53, 54, 55, 56, 57]
        }
    }
}

problem Generated/1975 {
code {
        func convert_string_to_uppercase(txt: string) -> list<int>
    }
    tests {
        template nse {
            ("hello world") -> [72, 69, 76, 76, 79, 32, 87, 79, 82, 76, 68]
("aBcDeFgHiJkLmNoPqRsTuVwXyZ") -> [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]
("") -> []
("123") -> [49, 50, 51]
("Hello World!") -> [72, 69, 76, 76, 79, 32, 87, 79, 82, 76, 68, 33]
        }
    }
}

problem Generated/1976 {
code {
        func convert_to_uppercase(txt: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello World") -> [72, 69, 76, 76, 79, 32, 87, 79, 82, 76, 68]
("Python is awesome") -> [80, 89, 84, 72, 79, 78, 32, 73, 83, 32, 65, 87, 69, 83, 79, 77, 69]
("1234") -> [49, 50, 51, 52]
("") -> []
("aBcDeFg") -> [65, 66, 67, 68, 69, 70, 71]
        }
    }
}

problem Generated/1977 {
code {
        func convert_string_to_ascii_uppercase(s: string) -> list<int>
    }
    tests {
        template nse {
            ("abcde") -> [65, 66, 67, 68, 69]
("Hello World!") -> [72, 69, 76, 76, 79, 32, 87, 79, 82, 76, 68, 33]
("") -> []
("1234") -> [49, 50, 51, 52]
("Python is fun!") -> [80, 89, 84, 72, 79, 78, 32, 73, 83, 32, 70, 85, 78, 33]
        }
    }
}

problem Generated/1978 {
code {
        func check_if_all_strings_upper(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["FOO", "BAR", "BAZ"]) -> true
(["foo", "BAR", "BAZ"]) -> false
([]) -> true
(["FOO", "BAZ", "qux"]) -> false
(["", " ", "  "]) -> true
        }
    }
}

problem Generated/1979 {
code {
        func check_all_uppercase(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON"]) -> true
(["Hello", "WORLD", "PYTHON"]) -> false
([]) -> true
(["123", "ABC"]) -> true
(["", " "]) -> true
        }
    }
}

problem Generated/1980 {
code {
        func is_all_uppercase(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["HELLO", "WORLD"]) -> true
(["Hello", "World"]) -> false
(["PYTHON", "IS", "AWESOME"]) -> true
([]) -> true
(["", ""]) -> true
        }
    }
}

problem Generated/1981 {
code {
        func is_all_uppercase(words: list<string>) -> bool
    }
    tests {
        template nse {
            (["PYTHON", "IS", "GREAT"]) -> true
(["this", "IS", "lowercase"]) -> false
([]) -> true
(["UPPERCASE"]) -> true
(["", " "]) -> true
        }
    }
}

problem Generated/1982 {
code {
        func check_uppercase(words: list<string>) -> bool
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "MACHINE", "LEARNING"]) -> true
(["HELLO", "WORLD", "MACHINE", "learning"]) -> false
(["Hello", "World", "Machine", "Learning"]) -> false
(["HELLO"]) -> true
([]) -> true
        }
    }
}

problem Generated/1983 {
code {
        func are_all_uppercase(words: list<string>) -> bool
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON"]) -> true
(["Hello", "WORLD", "Python"]) -> false
(["", "", ""]) -> false
([""]) -> false
([]) -> true
        }
    }
}

problem Generated/1984 {
code {
        func to_uppercase_binary(num: int) -> string
    }
    tests {
        template nse {
            (10) -> "1010"
(255) -> "11111111"
(127) -> "1111111"
(0) -> "0"
(1234567890) -> "1001001100101100000001011010010"
        }
    }
}

problem Generated/1985 {
code {
        func convert_list_to_bin_str_upper(elements: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["1", "10", "11", "100", "101"]
([0, 1, 2, 3]) -> ["0", "1", "10", "11"]
([7, 8, 9, 10]) -> ["111", "1000", "1001", "1010"]
([16, 17, 18, 19]) -> ["10000", "10001", "10010", "10011"]
([255, 256, 257, 258, 259]) -> ["11111111", "100000000", "100000001", "100000010", "100000011"]
        }
    }
}

problem Generated/1986 {
code {
        func convert_to_uppercase(txt: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello world") -> ["HELLO", "WORLD"]
("Welcome to OpenAI") -> ["WELCOME", "TO", "OPENAI"]
("") -> []
("I am an AI") -> ["I", "AM", "AN", "AI"]
("This is Python") -> ["THIS", "IS", "PYTHON"]
        }
    }
}

problem Generated/1987 {
code {
        func uppercase_first_word(sentence: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "Hello World"
("The quick brown fox jumps over the lazy dog") -> "The Quick Brown Fox Jumps Over The Lazy Dog"
("PYTHON is a great programming language") -> "PYTHON Is A Great Programming Language"
("") -> ""
("singleword") -> "Singleword"
        }
    }
}

problem Generated/1988 {
code {
        func split_upper(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("hello world") -> ["HELLO", "WORLD"]
("Hello,    World!    ") -> ["HELLO,", "WORLD!"]
("this is a test sentence") -> ["THIS", "IS", "A", "TEST", "SENTENCE"]
("Another Sentence") -> ["ANOTHER", "SENTENCE"]
("  ") -> []
        }
    }
}

problem Generated/1989 {
code {
        func convert_to_uppercase(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("the quick brown fox") -> ["THE", "QUICK", "BROWN", "FOX"]
("The Lazy Dog") -> ["THE", "LAZY", "DOG"]
("HELLO WORLD") -> ["HELLO", "WORLD"]
("   ") -> []
("") -> []
        }
    }
}

problem Generated/1990 {
code {
        func capitalize_words(sentence: string) -> string
    }
    tests {
        template nse {
            ("this is a sample sentence") -> "THIS IS A SAMPLE SENTENCE"
("HELLO WORLD") -> "HELLO WORLD"
("i aM aLwaYS HaPPy") -> "I AM ALWAYS HAPPY"
("") -> ""
("hELlo wOrlD") -> "HELLO WORLD"
        }
    }
}

problem Generated/1991 {
code {
        func convert_and_uppercase_strings(strs: string) -> list<string>
    }
    tests {
        template nse {
            ("hello world") -> ["HELLO", "WORLD"]
("This is a test string") -> ["THIS", "IS", "A", "TEST", "STRING"]
("uPpER cAsE TeXT") -> ["UPPER", "CASE", "TEXT"]
("") -> []
("    ") -> []
        }
    }
}

problem Generated/1992 {
code {
        func concatenate_and_uppercase(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], " ") -> "HELLO WORLD"
(["this", "is", "a", "test"], "-") -> "THIS-IS-A-TEST"
(["ALL", "CAPS"], "") -> "ALLCAPS"
(["one", "more", "test"], ",") -> "ONE,MORE,TEST"
(["concatenate", "uppercase", "test"], "_") -> "CONCATENATE_UPPERCASE_TEST"
        }
    }
}

problem Generated/1993 {
code {
        func join_uppercase_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world"]) -> "HELLOWORLD"
(["Hello", "WORLD"]) -> "HELLOWORLD"
(["hello", "123", "world"]) -> "HELLOWORLD"
(["He", "ll", "o", "", "Wor", "l", "d"]) -> "HELLOWORLD"
(["", " ", "   "]) -> ""
        }
    }
}

problem Generated/1994 {
code {
        func join_string_list(elements: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "orange"], ",") -> "APPLE,BANANA,ORANGE"
(["apple", "banana", "orange"], "") -> "APPLEBANANAORANGE"
(["1", "2", "3"], "-") -> "1-2-3"
(["Python", "Java", "C#", "JavaScript"], " ") -> "PYTHON JAVA C# JAVASCRIPT"
(["Hello", "World"], "123") -> "HELLO123WORLD"
        }
    }
}

problem Generated/1995 {
code {
        func upper_case_join(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["python", "is", "fun"], "-") -> "PYTHON-IS-FUN"
(["abc", "def", "ghi"], "") -> "ABCDEFGHI"
(["Hello", "WORLD"], " ") -> "HELLO WORLD"
(["first", "second", "third"], "_") -> "FIRST_SECOND_THIRD"
(["1", "2", "3"], "-") -> "1-2-3"
        }
    }
}

problem Generated/1996 {
code {
        func concatenate_and_uppercase_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["this", "is", "a", "test"]) -> "THISISATEST"
(["HELLO", "WORLD"]) -> "HELLOWORLD"
(["abc", "def", "ghi"]) -> "ABCDEFGHI"
(["", "", ""]) -> ""
(["1", "2", "3"]) -> "123"
        }
    }
}

problem Generated/1997 {
code {
        func concatenate_and_uppercase(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world"]) -> "HELLOWORLD"
(["PyThOn", "iS", "cOoL"]) -> "PYTHONISCOOL"
(["List", "Comprehension", "Is", "Awesome"]) -> "LISTCOMPREHENSIONISAWESOME"
(["a", "b", "c", "d", "e"]) -> "ABCDE"
([]) -> ""
        }
    }
}

problem Generated/1998 {
code {
        func join_uppercase_strings(strs: list<string>, sep: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python"], "-") -> "HELLO-WORLD-PYTHON"
(["Here", "Are", "Some", "Mixed", "Strings", "123"], "") -> "HEREARESOMEMIXEDSTRINGS"
(["ALL", "CAPITAL", "LETTERS"], "_") -> "ALL_CAPITAL_LETTERS"
(["123", "456", "789"], ",") -> ""
(["foo", "bar", "baz", "qux"], " ") -> "FOO BAR BAZ QUX"
        }
    }
}

problem Generated/1999 {
code {
        func uppercase_join(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], " ") -> "HELLO WORLD"
(["this", "is", "a", "test"], "-") -> "THIS-IS-A-TEST"
([], "") -> ""
(["Python", "is", "fun"], "") -> "PYTHONISFUN"
(["a"], "") -> "A"
        }
    }
}

problem Generated/2000 {
code {
        func alter_string_case(input_str: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "HeLlO WoRlD"
("aBcDeFgHiJkLmNoPqRsTuVwXyZ") -> "AbCdEfGhIjKlMnOpQrStUvWxYz"
("123456") -> "123456"
("") -> ""
("a") -> "A"
        }
    }
}

problem Generated/2001 {
code {
        func convert_string_case(strs: list<string>, cas: string) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "how", "ARE", "you"], "upper") -> ["HELLO", "WORLD", "HOW", "ARE", "YOU"]
(["Hello", "WORLD", "how", "ARE", "you"], "lower") -> ["hello", "world", "how", "are", "you"]
(["Hello", "WORLD", "how", "ARE", "you"], "mixed") -> ["Hello", "WORLD", "how", "ARE", "you"]
(["This", "Is", "a", "Test"], "lower") -> ["this", "is", "a", "test"]
([], "upper") -> []
        }
    }
}

problem Generated/2002 {
code {
        func alter_case_based_on_cond(elements: list<string>, c: list<int>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "ORANGE", "BaNaNa", "KiWi"], [0, 1, -1, 1]) -> ["apple", "ORANGE", "banana", "KIWI"]
(["apple", "ORANGE", "BaNaNa", "KiWi"], [1, -1, 1, -1]) -> ["APPLE", "orange", "BANANA", "kiwi"]
(["apple", "ORANGE", "BaNaNa", "KiWi"], [0, 0, 0, 0]) -> ["apple", "orange", "banana", "kiwi"]
(["apple", "ORANGE", "BaNaNa", "KiWi"], [1, 1, 1, 1]) -> ["APPLE", "ORANGE", "BANANA", "KIWI"]
([], []) -> []
        }
    }
}

problem Generated/2003 {
code {
        func transform_string_case(s: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "hELLO wORLD"
("PythonProgramming") -> "pYTHONpROGRAMMING"
("CoDiNgIsAwEsOmE") -> "cOdInGiSaWeSoMe"
("1234") -> "1234"
("") -> ""
        }
    }
}

problem Generated/2004 {
code {
        func convert_lowercase_to_uppercase(txt: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "HELLO WORLD"
("This is a Test") -> "THIS IS A TEST"
("ALL UPPERCASE") -> "ALL UPPERCASE"
("all lowercase") -> "ALL LOWERCASE"
("HeLLo WoRld 123") -> "HELLO WORLD 123"
        }
    }
}

problem Generated/2005 {
code {
        func get_uppercase_strings_from_list(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "WORLD", "Python", "is", "fun"]) -> ["HELLO", "IS", "FUN"]
(["ABCD", "EFGH", "IJKL", "MNOP", "QRST"]) -> []
([]) -> []
(["hello", "world"]) -> ["HELLO", "WORLD"]
(["PYTHON", "IS", "AWESOME"]) -> []
        }
    }
}

problem Generated/2006 {
code {
        func get_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON", "IS", "AWESOME"]) -> ["HELLO", "WORLD", "PYTHON", "IS", "AWESOME"]
(["Hello", "WORLD", "Python", "is", "awesome"]) -> ["WORLD"]
([]) -> []
(["python", "is", "a", "great", "language"]) -> []
(["PYTHON", "IS", "GREAT"]) -> ["PYTHON", "IS", "GREAT"]
        }
    }
}

problem Generated/2007 {
code {
        func convert_to_uppercase(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "WORLD", "ThErE", "hELLo"]) -> ["HELLO", "WORLD", "THERE", "HELLO"]
(["PYTHON", "IS", "AWESOME"]) -> ["PYTHON", "IS", "AWESOME"]
(["", "EMPTY"]) -> ["", "EMPTY"]
(["ALL", "CAPITAL", "LETTERS"]) -> ["ALL", "CAPITAL", "LETTERS"]
(["lowercase", "UPPERCASE", ""]) -> ["LOWERCASE", "UPPERCASE", ""]
        }
    }
}

problem Generated/2008 {
code {
        func uppercase_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Abc", "1def", "GHI", "jkl"]) -> ["ABC", "GHI", "JKL"]
(["This", "is", "a", "test", "!"]) -> ["THIS", "IS", "A", "TEST"]
([]) -> []
([""]) -> []
(["a", "B", "c", "D", "e"]) -> ["A", "B", "C", "D", "E"]
(["abc", "def", "ghi", "jkl"]) -> ["ABC", "DEF", "GHI", "JKL"]
        }
    }
}

problem Generated/2009 {
code {
        func upper_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "world", "123", "PYTHON"]) -> ["HELLO", "WORLD", "PYTHON"]
(["ABC", "", "def", "pqr", "XYZ"]) -> ["ABC", "DEF", "PQR", "XYZ"]
(["", " ", "  ", "12", "3Q", "4t5", "!#$%"]) -> []
(["Alpha", "Beta", "Gamma", "Delta"]) -> ["ALPHA", "BETA", "GAMMA", "DELTA"]
(["", " ", "  ", "!", "@", "#", "$", "%"]) -> []
        }
    }
}

problem Generated/2010 {
code {
        func get_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "Python"]) -> ["HELLO", "WORLD", "PYTHON"]
(["", " ", "   ", "  hello  world  "]) -> []
(["Programming", "is", "Fun"]) -> ["PROGRAMMING", "IS", "FUN"]
(["hElLo", "wOrLd", "pYtHoN"]) -> ["HELLO", "WORLD", "PYTHON"]
(["1", "2", "3"]) -> []
        }
    }
}

problem Generated/2011 {
code {
        func uppercase_alpha_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "what", "is", "Up"]) -> ["HELLO", "WORLD", "WHAT", "IS", "UP"]
(["python", "is", "a", "GReat", "language"]) -> ["PYTHON", "IS", "A", "GREAT", "LANGUAGE"]
(["this", "is", "a", "test", "123"]) -> ["THIS", "IS", "A", "TEST"]
([]) -> []
([""]) -> []
        }
    }
}

problem Generated/2012 {
code {
        func uppercase_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "world", "!", "123"]) -> ["HELLO", "WORLD"]
(["abc", "def", "gHi", "JKL"]) -> ["ABC", "DEF", "GHI", "JKL"]
(["a", "B", "c", "D"]) -> ["A", "B", "C", "D"]
(["$%^", "12abc", "3.14"]) -> []
(["Hi", "1", "", "World"]) -> ["HI", "WORLD"]
        }
    }
}

problem Generated/2013 {
code {
        func get_uppercase_digits(txt: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World! 123") -> ["1", "2", "3"]
("I am a Python Developer.") -> []
("We are in 2022.") -> ["2", "0", "2", "2"]
("") -> []
("1a2b3c4D5E6F") -> ["1", "2", "3", "4", "5", "6"]
        }
    }
}

problem Generated/2014 {
code {
        func upper_string_digits(txt: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World 123") -> ["1", "2", "3"]
("1a2b3c4d5e") -> ["1", "2", "3", "4", "5"]
("aAbBcCdDeEfF") -> []
("") -> []
("1234") -> ["1", "2", "3", "4"]
        }
    }
}

problem Generated/2015 {
code {
        func get_uppercase_digits(s: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello, World! 123") -> ["1", "2", "3"]
("I have 2 apples and 3 oranges") -> ["2", "3"]
("No digits here!") -> []
("A1B2C3D4E5F6G7H8I9J10") -> ["1", "2", "3", "4", "5", "6", "7", "8", "9", "1", "0"]
("") -> []
        }
    }
}

problem Generated/2016 {
code {
        func upper_case_words_starting_with_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "avocado"], "a") -> ["APPLE", "APRICOT", "AVOCADO"]
(["apple", "banana", "apricot", "avocado"], "b") -> ["BANANA"]
(["apple", "banana", "apricot", "avocado"], "") -> ["APPLE", "BANANA", "APRICOT", "AVOCADO"]
(["hello", "world", "python", "programming", "language"], "p") -> ["PYTHON", "PROGRAMMING"]
(["hello", "world", "python", "programming", "language"], "h") -> ["HELLO"]
        }
    }
}

problem Generated/2017 {
code {
        func get_uppercase_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "Banana", "Cherry", "Apricot"], "A") -> ["APPLE", "APRICOT"]
(["Hello", "world", "Python", "Machine"], "M") -> ["MACHINE"]
(["Water", "melon", "grapes", "Cucumber"], "w") -> []
([], "A") -> []
(["apple", "apricot", "banana", "cherry"], "a") -> ["APPLE", "APRICOT"]
        }
    }
}

problem Generated/2018 {
code {
        func get_uppercase_words_starting_with(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "Banana", "Orange", "Avocado"], "A") -> ["APPLE", "AVOCADO"]
(["Apple", "Banana", "Orange", "Avocado"], "B") -> ["BANANA"]
(["Apple", "Banana", "Orange", "Avocado"], "q") -> []
([], "A") -> []
(["apple", "banana", "orange", "avocado"], "a") -> []
        }
    }
}

problem Generated/2019 {
code {
        func get_uppercase_strings_starting_with(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "Orange", "grapes"], "o") -> ["ORANGE"]
(["apple", "banana", "Orange", "grapes"], "b") -> ["BANANA"]
(["apple", "banana", "Orange", "grapes"], "") -> ["APPLE", "BANANA", "ORANGE", "GRAPES"]
([], "o") -> []
(["apple", "banana", "Orange", "grapes"], "x") -> []
        }
    }
}

problem Generated/2020 {
code {
        func count_uppercase_letters(words: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "hOW", "Are", "YOU"]) -> [1, 5, 2, 1, 3]
(["a", "aa", "aaa", "aaaa"]) -> [0, 0, 0, 0]
(["A", "AA", "AAA", "AAAA"]) -> [1, 2, 3, 4]
([]) -> []
(["Hello", "WORLD", ""]) -> [1, 5, 0]
        }
    }
}

problem Generated/2021 {
code {
        func replace_substrings_with_uppercase(elements: list<string>, substrs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "grape"], ["orange"]) -> ["apple", "banana", "ORANGE", "grape"]
(["cat", "dog", "bird", "fish"], ["cat", "bird"]) -> ["CAT", "dog", "BIRD", "fish"]
(["Java", "Python", "Ruby", "Perl"], ["C++"]) -> ["Java", "Python", "Ruby", "Perl"]
([], ["C++"]) -> []
(["a", "b", "c", "d"], []) -> ["a", "b", "c", "d"]
        }
    }
}

problem Generated/2022 {
code {
        func convert_to_upper_and_append(strs: list<string>, new_s: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world"], "goodbye") -> ["HELLO", "WORLD", "GOODBYE"]
([], "python") -> ["PYTHON"]
(["The", "quick", "brown", "fox"], "jumped") -> ["THE", "QUICK", "BROWN", "FOX", "JUMPED"]
(["This", "is", "a", "sentence."], "Adding") -> ["THIS", "IS", "A", "SENTENCE.", "ADDING"]
(["No", "need", "to", "shout"], "quietly") -> ["NO", "NEED", "TO", "SHOUT", "QUIETLY"]
        }
    }
}

problem Generated/2023 {
code {
        func uppercase_and_append(strs: list<string>, new_s: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world"], "Python") -> ["HELLO", "WORLD", "PYTHON"]
([], "Python") -> ["PYTHON"]
(["Python"], "is cool") -> ["PYTHON", "IS COOL"]
(["this", "is", "a", "test"], "") -> ["THIS", "IS", "A", "TEST", ""]
(["uppercase", "all", "strings"], "and append a new one") -> ["UPPERCASE", "ALL", "STRINGS", "AND APPEND A NEW ONE"]
        }
    }
}

problem Generated/2024 {
code {
        func convert_elements_to_uppercase(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> ["HELLO", "WORLD", "PYTHON"]
(["a", "b", "c"]) -> ["A", "B", "C"]
([]) -> []
([""]) -> [""]
(["a", "b", "c", "d", "e", "f", "g"]) -> ["A", "B", "C", "D", "E", "F", "G"]
        }
    }
}

problem Generated/2025 {
code {
        func upper_and_append_strings(words: list<string>, suffix: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "", "python"], "_suffix") -> ["HELLO_suffix", "WORLD_suffix", "PYTHON_suffix"]
(["apple", "banana", "orange"], "") -> ["APPLE", "BANANA", "ORANGE"]
([], "_suffix") -> []
(["hello", "world", "Python"], "+") -> ["HELLO+", "WORLD+", "PYTHON+"]
(["hello", "", "Python"], "_suffix") -> ["HELLO_suffix", "PYTHON_suffix"]
        }
    }
}

problem Generated/2026 {
code {
        func convert_str_to_upper_and_append(words: list<string>, suffix: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world"], "123") -> ["HELLO123", "WORLD123"]
(["Python", "is", "awesome"], "-!") -> ["PYTHON-!", "IS-!", "AWESOME-!"]
([], "!!") -> []
(["testing"], "") -> ["TESTING"]
(["another", "test", "case"], "") -> ["ANOTHER", "TEST", "CASE"]
        }
    }
}

problem Generated/2027 {
code {
        func convert_to_upper_and_append(elements: list<string>, suffix: string) -> list<string>
    }
    tests {
        template nse {
            (["cat", "dog", "bird"], "s") -> ["CATs", "DOGs", "BIRDs"]
(["apple", "orange", "banana"], "") -> ["APPLE", "ORANGE", "BANANA"]
([], "s") -> []
(["camel"], "ss") -> ["CAMELss"]
(["Alice", "Bob", "Charlie", "Dave"], "man") -> ["ALICEman", "BOBman", "CHARLIEman", "DAVEman"]
        }
    }
}

problem Generated/2028 {
code {
        func convert_string_list_to_uppercase(string_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> ["HELLO", "WORLD", "PYTHON"]
(["Python", "is", "fun"]) -> ["PYTHON", "IS", "FUN"]
(["the", "quick", "brown", "fox"]) -> ["THE", "QUICK", "BROWN", "FOX"]
(["Python"]) -> ["PYTHON"]
([]) -> []
        }
    }
}

problem Generated/2029 {
code {
        func capitalize_and_remove_last_item(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "how", "are", "you"]) -> ["HELLO", "WORLD", "HOW", "ARE"]
(["this", "is", "a", "test"]) -> ["THIS", "IS", "A"]
([""]) -> []
(["I", "am", "Groot"]) -> ["I", "AM"]
(["Python", "is", "fun", "!"]) -> ["PYTHON", "IS", "FUN"]
        }
    }
}

problem Generated/2030 {
code {
        func sort_and_upper_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["abc", "def", "ghi", "jkl", "mno"]) -> ["ABC", "DEF", "GHI", "JKL", "MNO"]
(["pqr", "stu", "vwx", "yz", "abc"]) -> ["ABC", "PQR", "STU", "VWX", "YZ"]
(["banana", "apple", "pear", "orange", "kiwi"]) -> ["APPLE", "BANANA", "KIWI", "ORANGE", "PEAR"]
(["red", "green", "blue", "yellow", "purple"]) -> ["BLUE", "GREEN", "PURPLE", "RED", "YELLOW"]
(["cat", "dog", "fish", "bird", "tiger"]) -> ["BIRD", "CAT", "DOG", "FISH", "TIGER"]
        }
    }
}

problem Generated/2031 {
code {
        func sort_and_uppercase(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "orange", "banana", "pear"]) -> ["APPLE", "BANANA", "ORANGE", "PEAR"]
(["Python", "Java", "C++", "Ruby", "PHP"]) -> ["C++", "JAVA", "PHP", "PYTHON", "RUBY"]
(["Google", "Microsoft", "Facebook"]) -> ["FACEBOOK", "GOOGLE", "MICROSOFT"]
(["Dog", "Cat", "Fish", "Bird"]) -> ["BIRD", "CAT", "DOG", "FISH"]
(["Monday", "Tuesday", "Wednesday"]) -> ["MONDAY", "TUESDAY", "WEDNESDAY"]
        }
    }
}

problem Generated/2032 {
code {
        func find_word_indexes(words: list<string>, word_to_find: string) -> list<int>
    }
    tests {
        template nse {
            (["hello", "World", "Python", "WORLD", "World"], "world") -> [1, 3, 4]
(["hello", "World", "Python", "WORLD", "World"], "python") -> [2]
(["hello", "World", "Python", "WORLD", "World"], "Java") -> []
([], "Python") -> []
(["Python", "Python", "Python"], "Python") -> [0, 1, 2]
        }
    }
}

problem Generated/2033 {
code {
        func reverse_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World"]) -> ["DLROW", "OLLEH"]
(["hello", "world"]) -> ["DLROW", "OLLEH"]
([]) -> []
(["Orange", "Apple", "Mango", "Banana"]) -> ["ANANAB", "OGNAM", "ELPPA", "EGNARO"]
(["abc", "123", "XYZ"]) -> ["ZYX", "321", "CBA"]
        }
    }
}

problem Generated/2034 {
code {
        func reverse_and_uppercase_words(s: string) -> string
    }
    tests {
        template nse {
            ("Hello world") -> "DLROW OLLEH"
("The quick brown fox jumps over the lazy dog") -> "GOD YZAL EHT REVO SPMUJ XOF NWORB KCIUQ EHT"
("Python is awesome") -> "EMOSEWA SI NOHTYP"
("") -> ""
("This is a test") -> "TSET A SI SIHT"
        }
    }
}

problem Generated/2035 {
code {
        func reverse_and_uppercase(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> ["NOHTYP", "DLROW", "OLLEH"]
(["I", "am", "a", "Python", "programmer"]) -> ["REMMARGORP", "NOHTYP", "A", "MA", "I"]
(["A", "B", "C"]) -> ["C", "B", "A"]
([]) -> []
(["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) -> ["J", "I", "H", "G", "F", "E", "D", "C", "B", "A"]
        }
    }
}

problem Generated/2036 {
code {
        func reverse_and_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python", "is", "great"]) -> ["TAERG", "SI", "NOHTYP", "DLROW", "OLLEH"]
(["I", "am", "a", "Python", "programmer"]) -> ["REMMARGORP", "NOHTYP", "A", "MA", "I"]
([]) -> []
(["test"]) -> ["TSET"]
(["1234", "5678", "abcd", "efgh"]) -> ["HGFE", "DCBA", "8765", "4321"]
        }
    }
}

problem Generated/2037 {
code {
        func convert_list_to_uppercase(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world"]) -> ["HELLO", "WORLD"]
([]) -> []
(["This", "is", "a", "test"]) -> ["THIS", "IS", "A", "TEST"]
(["ConVert", "To", "UppeRCase"]) -> ["CONVERT", "TO", "UPPERCASE"]
(["UPPER", "AND", "lower"]) -> ["UPPER", "AND", "LOWER"]
        }
    }
}

problem Generated/2038 {
code {
        func uppercase_and_copy(texts: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world"]) -> ["HELLO", "WORLD"]
(["hello", "WORLD"]) -> ["HELLO", "WORLD"]
([]) -> []
(["123", "bcd", "FGH"]) -> ["123", "BCD", "FGH"]
(["Hello", "world", "Python"]) -> ["HELLO", "WORLD", "PYTHON"]
        }
    }
}

problem Generated/2039 {
code {
        func uppercase_list(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world"]) -> ["HELLO", "WORLD"]
(["abc", "def", "ghi"]) -> ["ABC", "DEF", "GHI"]
([]) -> []
(["Test"]) -> ["TEST"]
(["This", "is", "a", "mixed", "LIST"]) -> ["THIS", "IS", "A", "MIXED", "LIST"]
        }
    }
}

problem Generated/2040 {
code {
        func capitalize_and_copy_list(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "orange", "banana"]) -> ["APPLE", "ORANGE", "BANANA"]
(["Python", "is", "an", "awesome", "programming", "language"]) -> ["PYTHON", "IS", "AN", "AWESOME", "PROGRAMMING", "LANGUAGE"]
([]) -> []
(["Hello", "World"]) -> ["HELLO", "WORLD"]
(["This", "is", "a", "sentence"]) -> ["THIS", "IS", "A", "SENTENCE"]
        }
    }
}

problem Generated/2041 {
code {
        func copy_and_uppercase_list(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> ["HELLO", "WORLD", "PYTHON"]
([]) -> []
(["a", "b", "c"]) -> ["A", "B", "C"]
(["", "", ""]) -> ["", "", ""]
(["Hello", "WORLD", "Python"]) -> ["HELLO", "WORLD", "PYTHON"]
        }
    }
}

problem Generated/2042 {
code {
        func copy_and_upper_list(items: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world"]) -> ["HELLO", "WORLD"]
(["This", "is", "a", "test"]) -> ["THIS", "IS", "A", "TEST"]
([]) -> []
(["1", "2", "3"]) -> ["1", "2", "3"]
(["apple", "orange", "banana"]) -> ["APPLE", "ORANGE", "BANANA"]
        }
    }
}

problem Generated/2043 {
code {
        func convert_to_uppercase(dat: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["a", "b", "c", "d"]) -> ["A", "B", "C", "D"]
(["Hello", "Python", "World"]) -> ["HELLO", "PYTHON", "WORLD"]
(["We", "are", "learning", "Python"]) -> ["WE", "ARE", "LEARNING", "PYTHON"]
([]) -> []
([""]) -> [""]
        }
    }
}

problem Generated/2044 {
code {
        func copy_and_uppercase(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> ["HELLO", "WORLD", "PYTHON"]
(["Python", "is", "fun", "!"]) -> ["PYTHON", "IS", "FUN", "!"]
(["this", "is", "a", "test"]) -> ["THIS", "IS", "A", "TEST"]
([]) -> []
(["Hello"]) -> ["HELLO"]
        }
    }
}

problem Generated/2045 {
code {
        func copy_and_uppercase(names: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["john", "jane", "doe", "smith"]) -> ["JOHN", "JANE", "DOE", "SMITH"]
(["Robert", "Downey", "Junior"]) -> ["ROBERT", "DOWNEY", "JUNIOR"]
(["anil", "kumar", "singh"]) -> ["ANIL", "KUMAR", "SINGH"]
([]) -> []
([""]) -> [""]
        }
    }
}

problem Generated/2046 {
code {
        func floor_all_and_capitalize(elements: list<double>) -> list<string>
    }
    tests {
        template nse {
            ([1.2, 3.4, 5.6, 7.8]) -> ["1", "3", "5", "7"]
([1.0, 3.4, 5.6, 7.8]) -> ["1", "3", "5", "7"]
([1.2, 3.4, -5.6, 7.8]) -> ["1", "3", "-6", "7"]
([]) -> []
([0.9, 1.3, 2.5, 3.8]) -> ["0", "1", "2", "3"]
        }
    }
}

problem Generated/2047 {
code {
        func round_down_and_uppercase(numbers: list<double>) -> list<string>
    }
    tests {
        template nse {
            ([1.2, 2.7, 3.5, 4.0, 5.3]) -> ["1", "2", "3", "4", "5"]
([0.9, 8.1, 6.4, 2.0, 3.9]) -> ["0", "8", "6", "2", "3"]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> ["1", "2", "3", "4", "5"]
([1.9, 2.1, 3.9, 4.0, 5.0]) -> ["1", "2", "3", "4", "5"]
([-1.2, -2.3, -3.5, -4.6, -5.7]) -> ["-2", "-3", "-4", "-5", "-6"]
        }
    }
}

problem Generated/2048 {
code {
        func upper_case_first_n_elements(words: list<string>, n: int) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python", "code"], 2) -> ["HELLO", "WORLD", "python", "code"]
(["python", "is", "powerful", "language"], 4) -> ["PYTHON", "IS", "POWERFUL", "LANGUAGE"]
(["uppercase", "the", "first"], 0) -> ["uppercase", "the", "first"]
(["hello", "world"], 5) -> ["HELLO", "WORLD"]
([], 3) -> []
        }
    }
}

problem Generated/2049 {
code {
        func get_uppercase_sqrt(elements: list<double>) -> list<string>
    }
    tests {
        template nse {
            ([4.0, 9.0, 16.0, 25.0, 36.0]) -> ["2.0", "3.0", "4.0", "5.0", "6.0"]
([0.0, 1.0, 2.0, 3.0, 4.0]) -> ["0.0", "1.0", "1.4142135623730951", "1.7320508075688772", "2.0"]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> ["1.0", "1.4142135623730951", "1.7320508075688772", "2.0", "2.23606797749979"]
([-1.0, 4.0, -9.0, 16.0, -25.0]) -> ["2.0", "4.0"]
([1.0, 2.0, -3.0, 4.0, -5.0]) -> ["1.0", "1.4142135623730951", "2.0"]
        }
    }
}

problem Generated/2050 {
code {
        func uppercase_first_n_elements(strs: list<string>, n: int) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "pear"], 2) -> ["APPLE", "BANANA", "orange", "pear"]
(["hello", "world"], 0) -> ["hello", "world"]
(["one", "two", "three", "four", "five"], 5) -> ["ONE", "TWO", "THREE", "FOUR", "FIVE"]
(["a", "b", "c", "d", "e"], 4) -> ["A", "B", "C", "D", "e"]
(["Python", "is", "fun"], 3) -> ["PYTHON", "IS", "FUN"]
        }
    }
}

problem Generated/2051 {
code {
        func upper_string_power(strs: list<string>, power: int) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world"], 3) -> ["HELLOHELLOHELLO", "WORLDWORLDWORLD"]
([], 5) -> []
(["abc"], 0) -> [""]
(["Hello", "world", "!"], 1) -> ["HELLO", "WORLD", "!"]
(["This", "is", "a", "test"], 2) -> ["THISTHIS", "ISIS", "AA", "TESTTEST"]
        }
    }
}

problem Generated/2052 {
code {
        func calculate_powers_of_strings(strs: list<string>, power: int) -> list<double>
    }
    tests {
        template nse {
            (["hello", "world", "python"], 2) -> [25.0, 25.0, 36.0]
(["HELLO", "WORLD", "PYTHON"], 3) -> [125.0, 125.0, 216.0]
([], 5) -> []
(["hello"], 0) -> [1.0]
(["hello", "world", "python"], -2) -> [0.04, 0.04, 0.027777777777777776]
        }
    }
}

problem Generated/2053 {
code {
        func concat_strings_in_uppercase(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world"]) -> "HELLOWORLD"
(["Python", "is", "fun"]) -> "PYTHONISFUN"
(["this", "is", "a", "test"]) -> "THISISATEST"
(["", "", ""]) -> ""
(["I", "love", "Python"]) -> "ILOVEPYTHON"
        }
    }
}

problem Generated/2054 {
code {
        func concatenate_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world"]) -> "HELLOWORLD"
(["U", "n", "i", "c", "o", "r", "n"]) -> "UNICORN"
(["a", "b", "c", "d"]) -> "ABCD"
(["AY", "u", "W", "w", "z"]) -> "AYUWWZ"
(["jUst", "a", "tEsT", "cAsE"]) -> "JUSTATESTCASE"
        }
    }
}

problem Generated/2055 {
code {
        func concat_upper_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["This", "is", "a", "test"]) -> "THISISATEST"
(["i", "love", "python"]) -> "ILOVEPYTHON"
([]) -> ""
(["Hello"]) -> "HELLO"
(["Python", "is", "fun"]) -> "PYTHONISFUN"
        }
    }
}

problem Generated/2056 {
code {
        func concatenate_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world"]) -> "HELLOWORLD"
(["Python", "is", "cool"]) -> "PYTHONISCOOL"
(["so", "many", "languages", "to", "learn"]) -> "SOMANYLANGUAGESTOLEARN"
(["I", "love", "coding"]) -> "ILOVECODING"
(["reduce", "is", "cool"]) -> "REDUCEISCOOL"
        }
    }
}

problem Generated/2057 {
code {
        func concatenate_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> "HELLOWORLDPYTHON"
(["a", "b", "c", "d"]) -> "ABCD"
(["", " ", "  ", "python"]) -> "   PYTHON"
([]) -> ""
(["Hello", "World", "Python"]) -> "HELLOWORLDPYTHON"
        }
    }
}

problem Generated/2058 {
code {
        func split_string_and_uppercase(txt: string, separator: string) -> list<string>
    }
    tests {
        template nse {
            ("hello world", " ") -> ["HELLO", "WORLD"]
("This is a test", " ") -> ["THIS", "IS", "A", "TEST"]
("I_Love_Python", "_") -> ["I", "LOVE", "PYTHON"]
("hELLO wORLD", " ") -> ["HELLO", "WORLD"]
("Apple,Banana,Cherry,Dates", ",") -> ["APPLE", "BANANA", "CHERRY", "DATES"]
        }
    }
}

problem Generated/2059 {
code {
        func split_and_uppercase(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello, World!") -> ["HELLO", "WORLD"]
("Python is awesome!") -> ["PYTHON", "IS", "AWESOME"]
("") -> []
("   ") -> []
("This has a lot of spaces in between") -> ["THIS", "HAS", "A", "LOT", "OF", "SPACES", "IN", "BETWEEN"]
        }
    }
}

problem Generated/2060 {
code {
        func split_and_uppercase(input_str: string, delimiter: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World", " ") -> ["HELLO", "WORLD"]
("I,am,test,case", ",") -> ["I", "AM", "TEST", "CASE"]
("Splitting!done@with#many$symbols", "[!@#$]") -> ["SPLITTING", "DONE", "WITH", "MANY", "SYMBOLS"]
("NoDelimiterInThisString", ",") -> ["NODELIMITERINTHISSTRING"]
("", ",") -> [""]
        }
    }
}

problem Generated/2061 {
code {
        func split_and_upper(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello, World!") -> ["HELLO", "WORLD"]
("HeLLo123$$$WorLD") -> ["HELLO", "WORLD"]
("the cat in the hat") -> ["THE", "CAT", "IN", "THE", "HAT"]
("crazy") -> ["CRAZY"]
("123") -> []
        }
    }
}

problem Generated/2062 {
code {
        func count_lowercase_letters(word: string) -> int
    }
    tests {
        template nse {
            ("Hello World") -> 8
("") -> 0
("ALL CAPS") -> 0
("1234") -> 0
("CamelCase") -> 7
        }
    }
}

problem Generated/2063 {
code {
        func count_lower_case_letters(s: string) -> int
    }
    tests {
        template nse {
            ("Hello World") -> 8
("Python Is Awesome") -> 12
("THIS IS ALL CAPITAL LETTERS") -> 0
("12345") -> 0
("") -> 0
        }
    }
}

problem Generated/2064 {
code {
        func count_lower_case_strings(strs: list<string>) -> int
    }
    tests {
        template nse {
            ([]) -> 0
(["hello", "World"]) -> 1
(["apple", "banana", "cherry", "date"]) -> 4
(["Hello", "WORLD"]) -> 0
(["a", "b", "c"]) -> 3
        }
    }
}

problem Generated/2065 {
code {
        func filter_lowercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "Cherry", "DATE", "elephant", "fig", "Grapes"]) -> ["apple", "banana", "elephant", "fig"]
(["HELLO", "WORLD", "PYTHON"]) -> []
([]) -> []
(["abc", "def"]) -> ["abc", "def"]
(["XYZ", "abc", "pqr", "lmn"]) -> ["abc", "pqr", "lmn"]
        }
    }
}

problem Generated/2066 {
code {
        func get_max_lowercase(txt: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "r"
("The quick brown fox jumps over the lazy dog") -> "z"
("UPPERCASE") -> ""
("lowercase") -> "w"
("1 2 3 4 5") -> ""
        }
    }
}

problem Generated/2067 {
code {
        func find_min_lower(input_s: string) -> string
    }
    tests {
        template nse {
            ("hello World") -> "d"
("Python") -> "h"
("UPPER") -> ""
("MIXED Case") -> "a"
("") -> ""
        }
    }
}

problem Generated/2068 {
code {
        func find_min_lowercase(string_lst: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "Python", "is", "good"]) -> "good"
(["HELLO", "WORLD", "PYTHON", "IS", "GOOD"]) -> ""
(["abc", "def", "ghi", "jkl"]) -> "abc"
(["aaa", "bbb", "ccc", "ddd"]) -> "aaa"
([]) -> ""
        }
    }
}

problem Generated/2069 {
code {
        func get_words_in_lowercase(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World", "This", "Is", "OpenAI"]) -> []
(["the", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]) -> ["the", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]
(["MY", "name", "is", "OpenAI"]) -> ["name", "is"]
(["This", "is", "a", "TEST"]) -> ["is", "a"]
([]) -> []
(["HELLO", "WORLD"]) -> []
        }
    }
}

problem Generated/2070 {
code {
        func zip_and_check_all_lower(str1: string, str2: string) -> bool
    }
    tests {
        template nse {
            ("hello", "world") -> true
("hello", "WORLD") -> false
("Hello", "world") -> false
("hello", "world!") -> true
("heLlo", "worLd") -> false
        }
    }
}

problem Generated/2071 {
code {
        func get_lower_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "WORLD", "Python"]) -> ["hello"]
(["HELLO", "WORLD", "PYTHON"]) -> []
(["hello", "world", "python"]) -> ["hello", "world", "python"]
(["hElLo", "wOrLd", "pYtHoN"]) -> []
([]) -> []
        }
    }
}

problem Generated/2072 {
code {
        func get_all_lower_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "world", "!", "I", "am", "an", "AI", "assistant"]) -> ["world", "am", "an", "assistant"]
(["this", "is", "a", "test", "for", "the", "function", "get_all_lower_strings"]) -> ["this", "is", "a", "test", "for", "the", "function", "get_all_lower_strings"]
(["HELLO", "WORLD", "!", "I", "AM", "AN", "AI", "ASSISTANT"]) -> []
([]) -> []
(["Hello", "WORLD", "!"]) -> []
        }
    }
}

problem Generated/2073 {
code {
        func get_lowercase_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "WORLD", "Python", "is", "FUN"]) -> ["hello", "is"]
(["i", "love", "coding", "so", "much"]) -> ["i", "love", "coding", "so", "much"]
([]) -> []
(["HELLO", "WORLD"]) -> []
(["This", "is", "a", "Test"]) -> ["is", "a"]
(["ALL", "CAPITAL", "LETTERS"]) -> []
        }
    }
}

problem Generated/2074 {
code {
        func filter_lowercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "WORLD", "Python", "is", "FUN"]) -> ["hello", "is"]
(["hello", "world", "PYTHON", "IS", "FUUUUN"]) -> ["hello", "world"]
(["I", "am", "a", "GOOD", "AI", "model"]) -> ["am", "a", "model"]
(["", " ", "   ", "a", "B", "3"]) -> ["a"]
(["python", "is", "a", "great", "language"]) -> ["python", "is", "a", "great", "language"]
        }
    }
}

problem Generated/2075 {
code {
        func filter_lowercase_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "world", "PYTHON", "is", "GREAT"]) -> ["world", "is"]
(["lowercase", "Word", "Filter", "in", "pyThon"]) -> ["lowercase", "in"]
([]) -> []
(["hello", "world"]) -> ["hello", "world"]
(["123", "python", "filter", "7.2"]) -> ["python", "filter"]
        }
    }
}

problem Generated/2076 {
code {
        func sort_lower_case_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Banana", "orange", "PEAR", "peach"]) -> ["apple", "orange", "peach"]
(["Hello", "WORLD", "Pascal", "Java", "Python"]) -> []
(["bat", "cat", "dog", "elephant", "fish"]) -> ["bat", "cat", "dog", "elephant", "fish"]
([]) -> []
(["A", "B", "C"]) -> []
        }
    }
}

problem Generated/2077 {
code {
        func is_all_lowercase(s: string) -> bool
    }
    tests {
        template nse {
            ("hello") -> true
("Hello") -> false
("hELLO") -> false
("") -> true
("lowercase") -> true
        }
    }
}

problem Generated/2078 {
code {
        func check_if_all_lowercase(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["hello", "world", "this", "is", "lowercase"]) -> true
(["Hello", "world", "this", "is", "lowercase"]) -> false
(["123", "abc", "456"]) -> false
([]) -> true
(["hello", "WORLD", "this", "is", "lowercase"]) -> false
        }
    }
}

problem Generated/2079 {
code {
        func get_lowercase_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("This is a Sentence") -> ["is", "a"]
("ALL caps") -> ["caps"]
("this has 1 number") -> ["this", "has", "number"]
("CamelCase") -> []
("") -> []
        }
    }
}

problem Generated/2080 {
code {
        func join_lower_strings(strs: list<string>, join_s: string) -> string
    }
    tests {
        template nse {
            (["Hello", "World"], " ") -> ""
(["Hello", "world"], " ") -> "world"
(["hello", "WORLD", "123"], "-") -> "hello"
(["HeLLo", "WorLD", "lorem", "ipsum"], "") -> "loremipsum"
([], " ") -> ""
([""], "-") -> ""
        }
    }
}

problem Generated/2081 {
code {
        func join_lower_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "WORLD", "Python", "is", "FUN"]) -> "hellois"
(["PyThOn", "is", "AWESOME"]) -> "is"
([]) -> ""
(["Hello", "World"]) -> ""
(["apple", "banana", "cherry"]) -> "applebananacherry"
        }
    }
}

problem Generated/2082 {
code {
        func concatenate_lowercase_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["I", "am", "a", "Robot"], "-") -> "am-a"
(["I", "am", "a", "Robot"], " ") -> "am a"
(["Hello", "WORLD", "test", "Python"], ", ") -> "test"
([], "-") -> ""
([""], " ") -> ""
        }
    }
}

problem Generated/2083 {
code {
        func lowercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "ORANGE", "banana", "Pineapple"]) -> ["apple", "banana"]
(["Hello", "World", "python", "is", "Awesome"]) -> ["python", "is"]
([]) -> []
(["", "a", "B", "c", "D"]) -> ["a", "c"]
(["a", "b", "c", "d", "e"]) -> ["a", "b", "c", "d", "e"]
        }
    }
}

problem Generated/2084 {
code {
        func convert_lower_to_upper_in_list(str_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["python", "JAVA", "c", "c++", "c#"]) -> ["PYTHON", "JAVA", "C", "C++", "C#"]
(["abc", "def", "GHI"]) -> ["ABC", "DEF", "GHI"]
(["123", "4a", "b5", "67"]) -> ["123", "4A", "B5", "67"]
([]) -> []
(["PYTHON"]) -> ["PYTHON"]
        }
    }
}

problem Generated/2085 {
code {
        func uppercase_only_lower_case(input_s: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "HELLO WORLD"
("HAKUNA MATATA") -> "HAKUNA MATATA"
("Coding is Fun") -> "CODING IS FUN"
("") -> ""
("1234") -> "1234"
        }
    }
}

problem Generated/2086 {
code {
        func get_all_lower_alphabets(s: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World") -> ["e", "l", "l", "o", "o", "r", "l", "d"]
("Python Programming ") -> ["y", "t", "h", "o", "n", "r", "o", "g", "r", "a", "m", "m", "i", "n", "g"]
("1234") -> []
("!AbC123$") -> ["b"]
("") -> []
        }
    }
}

problem Generated/2087 {
code {
        func get_lower_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "WORLD", "Python", "123", "HeLlO"]) -> ["hello"]
(["lowercase", "UPPERCASE", "Title Case", "12345", "1One1"]) -> ["lowercase"]
([]) -> []
(["a", "b", "c"]) -> ["a", "b", "c"]
(["a", "B", "c"]) -> ["a", "c"]
        }
    }
}

problem Generated/2088 {
code {
        func filter_string(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "Python", "3.14"]) -> ["hello", "world"]
(["python", "java", "ruby", "perl", "php"]) -> ["python", "java", "ruby", "perl", "php"]
(["123", "456", "789", "1000"]) -> []
([]) -> []
(["", " ", "a", "A"]) -> ["a"]
        }
    }
}

problem Generated/2089 {
code {
        func find_words_with_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "welcome", "home", "HELLO", "WORLD"], "h") -> ["hello", "home"]
(["hello", "world", "welcome", "home", "HELLO", "WORLD"], "w") -> ["world", "welcome"]
(["hello", "world", "welcome", "home", "HELLO", "WORLD"], "H") -> []
(["apple", "banana", "grape", "orange", "kiwi"], "a") -> ["apple"]
(["apple", "banana", "grape", "orange", "kiwi"], "k") -> ["kiwi"]
        }
    }
}

problem Generated/2090 {
code {
        func get_lower_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cucumber", "date"], "a") -> ["apple"]
(["apple", "banana", "cucumber", "date"], "c") -> ["cucumber"]
(["apple", "Banana", "cucumber", "Date"], "c") -> ["cucumber"]
(["apple", "banana", "cucumber", "date"], "") -> ["apple", "banana", "cucumber", "date"]
([], "a") -> []
(["apple", "banana", "cucumber", "date"], "z") -> []
        }
    }
}

problem Generated/2091 {
code {
        func get_lower_case_words_starting_with(words: list<string>, start_s: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "ant", "Bad", "cat", "dog"], "a") -> ["apple", "ant"]
(["apple", "ant", "Bad", "cat", "dog"], "b") -> []
(["apple", "ant", "Bad", "cat", "dog"], "B") -> []
([], "a") -> []
(["apricot", "banana", "cherry", "date", "elderberry"], "c") -> ["cherry"]
        }
    }
}

problem Generated/2092 {
code {
        func filter_words(words: list<string>, letter: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Ant", "book", "cat", "Dog"], "a") -> ["apple"]
(["apple", "Ant", "book", "cat", "Dog"], "b") -> ["book"]
(["apple", "Ant", "book", "cat", "Dog"], "c") -> ["cat"]
(["apple", "Ant", "book", "cat", "Dog"], "d") -> []
(["apple", "Ant", "book", "cat", "Dog"], "A") -> []
        }
    }
}

problem Generated/2093 {
code {
        func filter_strings(string_lst: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "Cherry", "durian"], "a") -> ["apple"]
(["cat", "dog", "elephant", "fish"], "e") -> ["elephant"]
(["apple", "banana", "Cherry", "durian"], "b") -> ["banana"]
(["cat", "dog", "elephant", "fish"], "") -> ["cat", "dog", "elephant", "fish"]
(["apple", "banana", "Cherry", "durian"], "C") -> []
        }
    }
}

problem Generated/2094 {
code {
        func replace_lower_case_strings(strs: list<string>, old_s: string, new_s: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange"], "apple", "mango") -> ["mango", "banana", "orange"]
(["apple", "banana", "orange"], "grape", "mango") -> ["apple", "banana", "orange"]
(["apple", "banana", "orange"], "banana", "peach") -> ["apple", "peach", "orange"]
([], "banana", "peach") -> []
(["APPLE", "BANANA", "ORANGE"], "banana", "peach") -> ["APPLE", "BANANA", "ORANGE"]
        }
    }
}

problem Generated/2095 {
code {
        func get_all_lowercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "Python", "is", "awesome"]) -> ["hello", "world", "is", "awesome"]
(["Python", "is", "an", "INTERPRETED", "language"]) -> ["is", "an", "language"]
([]) -> []
(["PYTHON", "IS", "AWESOME"]) -> []
(["This", "is", "a", "lowercase", "string"]) -> ["is", "a", "lowercase", "string"]
        }
    }
}

problem Generated/2096 {
code {
        func get_all_lower_words(s: string) -> list<string>
    }
    tests {
        template nse {
            ("Hasta la vista, baby") -> ["la", "vista,", "baby"]
("Winter is Coming") -> ["is"]
("Hello World") -> []
("This is a sentence") -> ["is", "a", "sentence"]
("The quick brown fox jumps over the lazy dog") -> ["quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]
        }
    }
}

problem Generated/2097 {
code {
        func get_lowercases(string_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "WORLD", "Python"]) -> ["hello"]
(["hey", "HOLA", "hi", "there"]) -> ["hey", "hi", "there"]
([]) -> []
(["", "world", "tHIs", "is", "a", "test"]) -> ["world", "is", "a", "test"]
(["NO", "UPPERCASE", "LETTERS"]) -> []
(["My", "name", "is", "Bond", "James", "Bond"]) -> ["name", "is"]
        }
    }
}

problem Generated/2098 {
code {
        func get_all_lowercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "WORLD", "python", "IS", "fun"]) -> ["hello", "python", "fun"]
(["TeSt", "123", "abc", "DEF"]) -> ["abc"]
([]) -> []
(["UPPERCASE"]) -> []
(["this", "is", "a", "sentence"]) -> ["this", "is", "a", "sentence"]
        }
    }
}

problem Generated/2099 {
code {
        func sort_lower_case_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["One", "two", "Three", "four"]) -> ["four", "two", "One", "Three"]
(["hello", "World", "python", "language", "programming"]) -> ["hello", "language", "programming", "python", "World"]
(["Apple", "orange", "banana", "Mango"]) -> ["banana", "orange", "Apple", "Mango"]
(["Python", "programming", "language", "is", "awesome"]) -> ["awesome", "is", "language", "programming", "Python"]
([]) -> []
        }
    }
}

problem Generated/2100 {
code {
        func sort_lower_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Ball", "cat", "dog", "egg", "Frog"]) -> ["apple", "cat", "dog", "egg"]
(["You", "are", "EXCITING"]) -> ["are"]
(["a", "b", "c", "d", "e"]) -> ["a", "b", "c", "d", "e"]
(["WORLD", "HELLO"]) -> []
([]) -> []
        }
    }
}

problem Generated/2101 {
code {
        func find_all_lower_indexes(elements: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["Hello", "world", "PYTHON", "is", "Fun"]) -> [1, 3]
(["hello", "world", "python", "is", "fun"]) -> [0, 1, 2, 3, 4]
(["HELLO", "WORLD", "PYTHON", "IS", "FUN"]) -> []
(["", "a", "b", "c", "D"]) -> [1, 2, 3]
([]) -> []
        }
    }
}

problem Generated/2102 {
code {
        func find_first_lower_case(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "python", "is", "AWESOME"]) -> 2
(["hello", "world", "python", "is", "awesome"]) -> 0
(["HELLO", "WORLD", "PYTHON", "IS", "AWESOME"]) -> -1
([]) -> -1
(["123", "abc", "def"]) -> 1
        }
    }
}

problem Generated/2103 {
code {
        func copy_and_make_lower(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "WORLD", "foo", "BAR"]) -> ["hello", "foo"]
(["LOWERCASE", "lowercase", "MixedCase", "snake_case"]) -> ["lowercase", "snake_case"]
(["ALLCAPS", "UPPERCASE", "TitleCase"]) -> []
([]) -> []
(["this", "is", "a", "test"]) -> ["this", "is", "a", "test"]
        }
    }
}

problem Generated/2104 {
code {
        func copy_list_of_lowercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "World", "python", "language"]) -> ["hello", "python", "language"]
(["HELLO", "WORLD", "PYTHON", "LANGUAGE"]) -> []
(["", " ", "lower", "case"]) -> ["lower", "case"]
(["UPPER", "lower"]) -> ["lower"]
([]) -> []
        }
    }
}

problem Generated/2105 {
code {
        func count_lower_strings(words: list<string>, n: int) -> int
    }
    tests {
        template nse {
            (["Hello", "world", "Python", "is", "awesome"], 2) -> 1
(["I", "love", "Python", "programming"], 3) -> 0
(["hello", "world", "python", "is", "awesome"], 1) -> 5
([], 2) -> 0
(["HELLO", "WORLD", "PYTHON", "IS", "AWESOME"], 3) -> 0
        }
    }
}

problem Generated/2106 {
code {
        func count_uppercase_words(txt: string) -> int
    }
    tests {
        template nse {
            ("This is a Test Text") -> 2
("aAa bBb cCc") -> 2
("this is all lowercase") -> 0
("ONE TWO THREE FOUR") -> 2
("") -> 0
        }
    }
}

problem Generated/2107 {
code {
        func get_uppercase_string_count(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["hello", "world"]) -> 0
(["Hello", "world"]) -> 1
(["Hello", "World"]) -> 2
(["ALL", "CAPS"]) -> 2
(["lower", "CASE"]) -> 1
        }
    }
}

problem Generated/2108 {
code {
        func concatenate_lowercase_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["abc", "def", "GHI", "jklmnop"]) -> "abcdefjklmnop"
(["a", "b", "c", "d", "e"]) -> "abcde"
([]) -> ""
(["ABC", "DEF", "GHI", "JKLMNOP"]) -> ""
(["a", "b", "c", "d", "e", "A", "B", "C"]) -> "abcde"
        }
    }
}

problem Generated/2109 {
code {
        func split_string_by_lower_case(input_s: string) -> list<string>
    }
    tests {
        template nse {
            ("HelloWorld") -> ["ello", "orld"]
("Hello_World") -> ["ello", "orld"]
("hello_world") -> ["hello", "world"]
("") -> []
("HELLO_WORLD") -> []
        }
    }
}

problem Generated/2110 {
code {
        func split_string_on_lower_case(s: string) -> list<string>
    }
    tests {
        template nse {
            ("HelloWorld") -> ["ello", "orld"]
("Hello World") -> ["ello", "orld"]
("UPPER") -> []
("lower") -> ["lower"]
("lowercaseStringWithNumbers1234") -> ["lowercase", "tring", "ith", "umbers"]
        }
    }
}

problem Generated/2111 {
code {
        func split_string_on_lower_case(s: string) -> list<string>
    }
    tests {
        template nse {
            ("HelloWorld") -> ["ello", "orld"]
("ThisIsATest") -> ["his", "s", "est"]
("123Testing123") -> ["esting"]
("SplitOnLower") -> ["plit", "n", "ower"]
("CamelCase") -> ["amel", "ase"]
        }
    }
}

problem Generated/2112 {
code {
        func split_string_by_lower_case(s: string) -> list<string>
    }
    tests {
        template nse {
            ("helloWorldHowAreYou") -> ["hello", "orld", "ow", "re", "ou"]
("ThisIsATestString") -> ["his", "s", "est", "tring"]
("myPythonProgram") -> ["my", "ython", "rogram"]
("") -> []
("ALLCAPS") -> []
        }
    }
}

problem Generated/2113 {
code {
        func get_uppercase_strings(txt: string) -> list<string>
    }
    tests {
        template nse {
            ("HELLO WORLD") -> ["HELLO", "WORLD"]
("Hello World") -> []
("THIS IS A TEST") -> ["THIS", "IS", "A", "TEST"]
("THIS TEST SHOULD PASS") -> ["THIS", "TEST", "SHOULD", "PASS"]
("JUST ONE LONG STRING") -> ["JUST", "ONE", "LONG", "STRING"]
        }
    }
}

problem Generated/2114 {
code {
        func count_uppercase_strings(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON", "IS", "FUN"]) -> 5
(["Hello", "WORLD", "python", "is", "FUN"]) -> 2
([]) -> 0
(["123", "ABC", "def", "GHI"]) -> 2
(["", "A", "b", "CD"]) -> 2
        }
    }
}

problem Generated/2115 {
code {
        func get_all_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON"]) -> ["HELLO", "WORLD", "PYTHON"]
(["hello", "WORLD", "PyThon"]) -> ["WORLD"]
([]) -> []
(["", " ", "  "]) -> []
(["Hello World", "PYTHON", "gOOgle"]) -> ["PYTHON"]
(["a", "b", "c"]) -> []
        }
    }
}

problem Generated/2116 {
code {
        func count_uppercase_strings(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["HELLO", "world", "GREETINGS", "EVERYONE"]) -> 3
(["hello", "world", "greetings", "everyone"]) -> 0
(["", "HELLO", "WORLD", ""]) -> 2
([]) -> 0
(["hElLo", "wOrLd", "gReEtInGs", "eVeRyOnE"]) -> 0
        }
    }
}

problem Generated/2117 {
code {
        func all_uppercase(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["HELLO", "WORLD"]) -> true
(["hello", "world"]) -> false
([]) -> true
([""]) -> false
(["UPPER", "CASE", "WORDS"]) -> true
        }
    }
}

problem Generated/2118 {
code {
        func count_uppercase_strings(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["Hello", "WORLD", "Python", "is", "FUN"]) -> 2
(["ALL", "STRINGS", "ARE", "UPPERCASE"]) -> 4
(["no", "UPPERCASE", "strings", "here"]) -> 1
(["235", "     ", "HELLO", "", "WORLD"]) -> 2
([]) -> 0
        }
    }
}

problem Generated/2119 {
code {
        func count_uppercase_strings(strs: list<string>, threshold: int) -> int
    }
    tests {
        template nse {
            (["ABC", "DEF", "GHI", "JKL", "MNO"], 3) -> 2
(["ABC", "DEF", "GHI", "JKL", "MNO"], 5) -> 0
(["AbC", "DeF", "GH", "JKL", "MNO"], 2) -> 1
(["a", "b", "c", "d", "e"], 0) -> 0
(["", "", "", ""], 1) -> 1
        }
    }
}

problem Generated/2120 {
code {
        func find_min_uppercase(words: list<string>) -> string
    }
    tests {
        template nse {
            (["APPLE", "banana", "CHERRY", "dandelion"]) -> "APPLE"
(["apple", "banana", "cherry", "dandelion"]) -> ""
(["PYTHON", "java", "c++", "C#", "Go"]) -> "C#"
([]) -> ""
(["apple", "BANANA", "cherry", "DANDELION"]) -> "BANANA"
        }
    }
}

problem Generated/2121 {
code {
        func filter_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "world", "PYTHON", "is", "AWESOME"]) -> ["HELLO", "PYTHON", "AWESOME"]
(["python", "JAVA", "c++", "C#", "javascript"]) -> ["JAVA", "C#"]
(["PYTHON", "IS", "AWESOME"]) -> ["PYTHON", "IS", "AWESOME"]
([]) -> []
(["123", "456", "7", "8", "9"]) -> []
        }
    }
}

problem Generated/2122 {
code {
        func filter_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "world", "I", "AM", "here"]) -> ["HELLO", "I", "AM"]
(["me", "myself", "and", "i"]) -> []
(["ABC", "DEF", "GHI", "JKL"]) -> ["ABC", "DEF", "GHI", "JKL"]
(["LOWERCASE", "uppercase", "MiXeDcAsE"]) -> ["LOWERCASE"]
([""]) -> []
        }
    }
}

problem Generated/2123 {
code {
        func filter_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "Python", "IS", "Fun"]) -> ["WORLD", "IS"]
(["UPPERCASE", "lowercase", "nOTuPPERnoTlOWER"]) -> ["UPPERCASE"]
(["ABC", "123", "abc"]) -> ["ABC"]
([]) -> []
(["", " ", "  ", "A", "b", "C"]) -> ["A", "C"]
        }
    }
}

problem Generated/2124 {
code {
        func filter_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "Python", "Programming"]) -> ["HELLO", "WORLD"]
(["HELLO", "WORLD", "PYTHON", "PROGRAMMING"]) -> ["HELLO", "WORLD", "PYTHON", "PROGRAMMING"]
(["hello", "world", "python", "programming"]) -> []
(["", "1", "2", "ABCD", "EFGH"]) -> ["ABCD", "EFGH"]
([]) -> []
        }
    }
}

problem Generated/2125 {
code {
        func sort_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["abc", "DEF", "ghi", "JKL", "mno"]) -> ["DEF", "JKL"]
(["ABC", "DEF", "GHI", "JKL", "MNO"]) -> ["ABC", "DEF", "GHI", "JKL", "MNO"]
(["abc", "def", "ghi", "jkl", "mno"]) -> []
(["", " ", "A", "B"]) -> ["A", "B"]
([]) -> []
        }
    }
}

problem Generated/2126 {
code {
        func get_all_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["APPLE", "banana", "GRAPE", "pear", "CHERRY"]) -> ["APPLE", "CHERRY", "GRAPE"]
(["PYTHON", "LANGUAGES", "ARE", "FUN"]) -> ["ARE", "FUN", "LANGUAGES", "PYTHON"]
(["HELLO", "WORLD"]) -> ["HELLO", "WORLD"]
([]) -> []
(["abc", "DEF", "ghi", "JKL"]) -> ["DEF", "JKL"]
        }
    }
}

problem Generated/2127 {
code {
        func sort_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "world", "TEST", "CASE"]) -> ["CASE", "HELLO", "TEST"]
(["ABC", "ZYZ", "xyz", "aaa", "PPP"]) -> ["ABC", "PPP", "ZYZ"]
(["ABC", "DEF", "GHI"]) -> ["ABC", "DEF", "GHI"]
(["xyz", "abc", "lmn", "pqr", "GHI"]) -> ["GHI"]
([]) -> []
        }
    }
}

problem Generated/2128 {
code {
        func sort_uppercase_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["APPLE", "banana", "ORANGE", "grape", "KIWI"]) -> ["APPLE", "KIWI", "ORANGE"]
(["APPLE", "BANANA", "ORANGE", "GRAPE", "KIWI"]) -> ["APPLE", "BANANA", "GRAPE", "KIWI", "ORANGE"]
([]) -> []
(["Apple", "Banana", "Orange", "Grape", "Kiwi"]) -> []
(["APPLE"]) -> ["APPLE"]
        }
    }
}

problem Generated/2129 {
code {
        func find_uppercase_letters(input_s: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World") -> ["H", "W"]
("AbCdefgHiKlmnOp") -> ["A", "C", "H", "K", "O"]
("") -> []
("1234") -> []
("!!!Iam$$$") -> ["I"]
        }
    }
}

problem Generated/2130 {
code {
        func convert_uppercase_to_ascii(word: string) -> list<int>
    }
    tests {
        template nse {
            ("HELLO") -> [72, 69, 76, 76, 79]
("") -> []
("Python") -> [80]
("PYTHON") -> [80, 89, 84, 72, 79, 78]
("Hello World") -> [72, 87]
        }
    }
}

problem Generated/2131 {
code {
        func check_all_caps(words: list<string>) -> bool
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON"]) -> true
(["Hello", "WORLD", "PYTHON"]) -> false
(["HELLO", " ", "PYTHON"]) -> false
([]) -> true
(["H", "E", "L", "L", "O"]) -> true
        }
    }
}

problem Generated/2132 {
code {
        func check_all_uppercase(words: list<string>) -> bool
    }
    tests {
        template nse {
            (["HELLO", "WORLD"]) -> true
(["Hello", "WORLD"]) -> false
(["HELLO", "WORLD", ""]) -> false
([]) -> true
(["hello"]) -> false
        }
    }
}

problem Generated/2133 {
code {
        func all_strings_uppercase(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON"]) -> true
(["HELLO", "wORLD", "PYTHON"]) -> false
([]) -> true
(["", " ", "  "]) -> false
(["!@#$", "ABCDEF", "GHIJKL"]) -> false
        }
    }
}

problem Generated/2134 {
code {
        func get_all_uppercase_words(txt: string) -> list<string>
    }
    tests {
        template nse {
            ("HELLO WORLD") -> ["HELLO", "WORLD"]
("HeLLo WoRLD") -> []
("Python is AWESOME") -> ["AWESOME"]
("UPPERCASE WORDS ARE COOL") -> ["UPPERCASE", "WORDS", "ARE", "COOL"]
("This is a sentence with no uppercase words.") -> []
        }
    }
}

problem Generated/2135 {
code {
        func get_uppercase_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("HELLO WORLD") -> ["HELLO", "WORLD"]
("Hello World") -> []
("HAPPY NEW YEAR") -> ["HAPPY", "NEW", "YEAR"]
("Hello I AM ROBOT") -> ["I", "AM", "ROBOT"]
("") -> []
        }
    }
}

problem Generated/2136 {
code {
        func get_uppercase_words(txt: string) -> list<string>
    }
    tests {
        template nse {
            ("HELLO WORLD") -> ["HELLO", "WORLD"]
("Hello World") -> []
("The QUICK Brown FOX") -> ["QUICK", "FOX"]
("THE RAIN IN SPAIN") -> ["THE", "RAIN", "IN", "SPAIN"]
("The quick brown fox") -> []
        }
    }
}

problem Generated/2137 {
code {
        func concatenate_uppercase_strings(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["HELLO", "WORLD"], "_") -> "HELLO_WORLD"
(["HAPPY", "NEW", "YEAR"], "") -> "HAPPYNEWYEAR"
(["Hello", "WORLD", "Foo", "BAR", "baz"], ".") -> "WORLD.BAR"
(["Foo", "Bar", "Baz", "qux", "QUUX"], " ") -> "QUUX"
([], " ") -> ""
        }
    }
}

problem Generated/2138 {
code {
        func join_uppercase_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["HELLO", "world"], " ") -> "HELLO"
(["hello", "WORLD"], "") -> "WORLD"
(["abc", "DEF", "ghi"], ",") -> "DEF"
([], "\n") -> ""
(["", " ", "  "], ",") -> ""
        }
    }
}

problem Generated/2139 {
code {
        func join_upper_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["HELLO", "WORLD"]) -> "HELLO_WORLD"
(["hello", "world"]) -> ""
(["HELLO", "WORLD", "UPPERCASE"]) -> "HELLO_WORLD_UPPERCASE"
(["ALL", "CAPITAL", "LETTERS", "ARE", "UPPERCASE"]) -> "ALL_CAPITAL_LETTERS_ARE_UPPERCASE"
([]) -> ""
        }
    }
}

problem Generated/2140 {
code {
        func join_uppercase_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["HELLO", "WORLD"]) -> "HELLO-WORLD"
(["Hello", "WORLD", "python"]) -> "WORLD"
(["HELLO"]) -> "HELLO"
(["hello", "world"]) -> ""
([]) -> ""
        }
    }
}

problem Generated/2141 {
code {
        func concatenate_uppercase_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["HELLO", "WORLD"]) -> "HELLO-WORLD"
(["Hello", "WORLD"]) -> "WORLD"
(["THIS", "is", "ALL", "caps"]) -> "THIS-ALL"
(["all", "lowercase"]) -> ""
([]) -> ""
        }
    }
}

problem Generated/2142 {
code {
        func swap_case(input_str: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "hELLO wORLD"
("tHIS IS A TEST") -> "This is a test"
("12345") -> "12345"
("") -> ""
("Coding Is Fun!") -> "cODING iS fUN!"
        }
    }
}

problem Generated/2143 {
code {
        func convert_list_case(words: list<string>, cas: string) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World", "123"], "upper") -> ["HELLO", "WORLD", "123"]
(["Hello", "World", "123"], "lower") -> ["hello", "world", "123"]
([], "lower") -> []
([""], "upper") -> [""]
(["AbC", "DeF", "gHi"], "") -> ["abc", "def", "ghi"]
        }
    }
}

problem Generated/2144 {
code {
        func transform_uppercase_to_lowercase(txt: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "hello world"
("hElLO wORlD") -> "hello world"
("This is a test") -> "this is a test"
("12345") -> "12345"
("HeLLo WORLd") -> "hello world"
        }
    }
}

problem Generated/2145 {
code {
        func swap_case(input_s: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "hELLO wORLD"
("ThiS Is a TeSt") -> "tHIs iS A tEsT"
("12345") -> "12345"
("") -> ""
("sPecial CHaracters!!@#$%^&*()_+") -> "SpECIAL chARACTERS!!@#$%^&*()_+"
        }
    }
}

problem Generated/2146 {
code {
        func swap_case(s: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "hELLO wORLD"
("Python is Fun") -> "pYTHON IS fUN"
("") -> ""
("12345") -> "12345"
("hElLo") -> "HeLlO"
        }
    }
}

problem Generated/2147 {
code {
        func convert_all_to_uppercase(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON", "is", "COOL"]) -> ["HELLO", "WORLD", "PYTHON", "IS", "COOL"]
(["23", "PYTHON", "JAVA", "CPP"]) -> ["23", "PYTHON", "JAVA", "CPP"]
([]) -> []
(["HELLO", "WORLD", "PYTHON", "IS", "COOL"]) -> ["HELLO", "WORLD", "PYTHON", "IS", "COOL"]
(["hello", "world", "python", "is", "cool"]) -> ["HELLO", "WORLD", "PYTHON", "IS", "COOL"]
        }
    }
}

problem Generated/2148 {
code {
        func upper_case_elements(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "WORLD"]) -> ["HELLO", "WORLD"]
(["Hello", "world"]) -> ["Hello", "world"]
(["hello", "WORLD"]) -> ["hello", "WORLD"]
(["UPPER", "lower", "tITLE"]) -> ["UPPER", "lower", "tITLE"]
([]) -> []
        }
    }
}

problem Generated/2149 {
code {
        func make_all_uppercase(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON", "IS", "GREAT"]) -> ["HELLO", "WORLD", "PYTHON", "IS", "GREAT"]
(["PYTHON", "is", "GREAT"]) -> ["PYTHON", "is", "GREAT"]
([]) -> []
(["THIS", "is", "AN", "EXAMPLE"]) -> ["THIS", "is", "AN", "EXAMPLE"]
(["HELLO", "WORLD", "PYTHON", "IS", "GREAT"]) -> ["HELLO", "WORLD", "PYTHON", "IS", "GREAT"]
        }
    }
}

problem Generated/2150 {
code {
        func split_string_by_case(s: string) -> list<string>
    }
    tests {
        template nse {
            ("HelloWorld") -> ["Hello", "World"]
("CamelCase") -> ["Camel", "Case"]
("kebab-case") -> ["kebab", "case"]
("snake_case") -> ["snake", "case"]
("") -> []
        }
    }
}

problem Generated/2151 {
code {
        func filter_uppercase_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON", "IS", "GREAT"]) -> ["HELLO", "WORLD", "PYTHON", "IS", "GREAT"]
(["HELLO", "world", "PYTHON", "is", "GREAT"]) -> ["HELLO", "PYTHON", "GREAT"]
(["123", " ", "PYTHON", "is", "GREAT"]) -> ["PYTHON", "GREAT"]
([]) -> []
(["", "  ", "PYTHON", "is", "GREAT"]) -> ["PYTHON", "GREAT"]
        }
    }
}

problem Generated/2152 {
code {
        func filter_uppercase_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON"]) -> ["HELLO", "WORLD", "PYTHON"]
(["hello", "world", "Python"]) -> []
(["", "PYTHON", "world", "!@#$%^&*()"]) -> ["PYTHON"]
([]) -> []
(["HELLO", "WORLD", "PYTh"]) -> ["HELLO", "WORLD"]
        }
    }
}

problem Generated/2153 {
code {
        func filter_uppercase_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "world", "PYTHON", "123", "", "UPPER"]) -> ["HELLO", "PYTHON", "UPPER"]
(["PYTHON", "IS", "AWESOME"]) -> ["PYTHON", "IS", "AWESOME"]
(["HELLO", "world", "PYTHON", "123", "", "UPPER", "lower"]) -> ["HELLO", "PYTHON", "UPPER"]
([]) -> []
(["a", "b", "c"]) -> []
        }
    }
}

problem Generated/2154 {
code {
        func filter_uppercase_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON", "3.10"]) -> ["HELLO", "WORLD", "PYTHON"]
(["Hello", "WOrld", "pyThon", "3.10"]) -> []
([]) -> []
(["PYTHON", "ISTHEBEST", "LANGUAGE"]) -> ["PYTHON", "ISTHEBEST", "LANGUAGE"]
(["4", "U", "2", "SEE", "7"]) -> ["U", "SEE"]
        }
    }
}

problem Generated/2155 {
code {
        func get_uppercase_digits(s: string) -> list<string>
    }
    tests {
        template nse {
            ("Abc123") -> ["A", "1", "2", "3"]
("Hello World! 123") -> ["H", "W", "1", "2", "3"]
("ABC123") -> ["A", "B", "C", "1", "2", "3"]
("hello world") -> []
("") -> []
        }
    }
}

problem Generated/2156 {
code {
        func get_uppercase_starts_with(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "WELCOME", "TO", "PYTHON"], "W") -> ["WORLD", "WELCOME"]
(["HELLO", "WORLD", "WELCOME", "TO", "PYTHON"], "H") -> ["HELLO"]
(["HELLO", "WORLD", "WELCOME", "TO", "PYTHON"], "PY") -> ["PYTHON"]
([], "W") -> []
(["HELLO", "WORLD", "WELCOME", "TO", "PYTHON"], "") -> ["HELLO", "WORLD", "WELCOME", "TO", "PYTHON"]
        }
    }
}

problem Generated/2157 {
code {
        func uppercase_startswith(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "world", "PYTHON", "py"], "PY") -> ["PYTHON"]
(["HELLO", "world", "PYTHON", "py"], "W") -> []
(["HELLO", "world", "PYTHON", "py"], "") -> ["HELLO", "PYTHON"]
([], "PY") -> []
(["HELLO", "WORLD", "PYTHON"], "HE") -> ["HELLO"]
        }
    }
}

problem Generated/2158 {
code {
        func get_uppercase_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["APPLE", "BALL", "CAR", "DOG", "ELEPHANT"], "A") -> ["APPLE"]
(["APPLE", "BALL", "CAR", "DOG", "ELEPHANT"], "B") -> ["BALL"]
(["APPLE", "BALL", "CAR", "DOG", "ELEPHANT"], "C") -> ["CAR"]
(["APPLE", "BALL", "CAR", "DOG", "ELEPHANT"], "D") -> ["DOG"]
(["APPLE", "BALL", "CAR", "DOG", "ELEPHANT"], "E") -> ["ELEPHANT"]
        }
    }
}

problem Generated/2159 {
code {
        func count_uppercase_words(elements: list<string>) -> int
    }
    tests {
        template nse {
            (["APPLE", "BANANA", "Cherry", "Date"]) -> 2
(["apple", "banana", "cherry", "date"]) -> 0
([]) -> 0
(["MANGO"]) -> 1
(["apple", "BANANA", "CHERRY", "date"]) -> 2
        }
    }
}

problem Generated/2160 {
code {
        func replace_uppercase_in_list(strs: list<string>, replacement: string) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World", "PYTHON", "CODE"], "-") -> ["Hello", "World", "-", "-"]
(["Hello World", "PYTHON", "Code"], "+") -> ["Hello World", "+", "Code"]
([], "*") -> []
(["hello", "world"], "#") -> ["hello", "world"]
(["1", "2", "3"], "x") -> ["1", "2", "3"]
        }
    }
}

problem Generated/2161 {
code {
        func replace_all_uppercase_strings(strs: list<string>, old: string, new_dat: string) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON", "IS", "GREAT"], "IS", "WAS") -> ["HELLO", "WORLD", "PYTHON", "WAS", "GREAT"]
(["HELLO", "WORLD", "PYTHON", "IS", "GREAT"], "is", "was") -> ["HELLO", "WORLD", "PYTHON", "IS", "GREAT"]
(["HELLO", "WORLD", "PYTHON", "IS", "GREAT"], "PYTHON", "JAVA") -> ["HELLO", "WORLD", "JAVA", "IS", "GREAT"]
([], "", "") -> []
(["HELLO", "WORLD", "PYTHON", "IS", "GREAT"], "", "") -> ["HELLO", "WORLD", "PYTHON", "IS", "GREAT"]
        }
    }
}

problem Generated/2162 {
code {
        func replace_uppercase_strings(strs: list<string>, replacement: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "WORLD", "this", "is", "PYTHON"], "***") -> ["hello", "***", "this", "is", "***"]
(["hello", "world", "this", "is", "python"], "###") -> ["hello", "world", "this", "is", "python"]
([], "!!!") -> []
(["HELLO"], "world") -> ["world"]
(["PYTHON"], "") -> [""]
        }
    }
}

problem Generated/2163 {
code {
        func get_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "This", "Is", "A", "Test"]) -> ["WORLD", "A"]
(["A", "b", "C", "d", "E", "f", "G"]) -> ["A", "C", "E", "G"]
([]) -> []
(["hello", "world", "this", "is", "a", "test"]) -> []
(["HELLO", "", "ThIs", "IS", "a", "tESt"]) -> ["HELLO", "IS"]
        }
    }
}

problem Generated/2164 {
code {
        func get_all_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["APPLE", "ORANGE", "banana", "PEAR", "kiwi"]) -> ["APPLE", "ORANGE", "PEAR"]
(["HARRY", "ron", "hermione", "SNAPE", "lupin"]) -> ["HARRY", "SNAPE"]
([]) -> []
(["PYTHON"]) -> ["PYTHON"]
(["A", "B", "C", "D", "E"]) -> ["A", "B", "C", "D", "E"]
        }
    }
}

problem Generated/2165 {
code {
        func remove_uppercase_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hi", "HELLO", "everyone"]) -> ["hi", "everyone"]
(["keep", "CALM", "and", "code", "on"]) -> ["keep", "and", "code", "on"]
(["KEEP", "THE", "NOISE", "DOWN"]) -> []
([]) -> []
([""]) -> [""]
        }
    }
}

problem Generated/2166 {
code {
        func sort_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["APPLE", "banana", "CHERRY", "dates"]) -> ["APPLE", "CHERRY"]
(["APPLE", "BANANA", "CHERRY", "DATE"]) -> ["APPLE", "BANANA", "CHERRY", "DATE"]
(["apple", "banana", "cherry", "dates"]) -> []
([]) -> []
(["A", "B", "C", "D", "E", "F", "G"]) -> ["A", "B", "C", "D", "E", "F", "G"]
        }
    }
}

problem Generated/2167 {
code {
        func sort_uppercase_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON", "AI"]) -> ["AI", "HELLO", "PYTHON", "WORLD"]
(["HELLO", "WORLD", "python", "AI"]) -> ["AI", "HELLO", "WORLD"]
(["hello", "world", "python", "ai"]) -> []
([]) -> []
(["ABCD", "EFGH", "IJKLMNOP", "QRSTUVWXY", "Z"]) -> ["ABCD", "EFGH", "IJKLMNOP", "QRSTUVWXY", "Z"]
        }
    }
}

problem Generated/2168 {
code {
        func sort_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["FISH", "cat", "DOG", "bird"]) -> ["DOG", "FISH"]
(["APPLE", "BANANA", "ORANGE", "lemon"]) -> ["APPLE", "BANANA", "ORANGE"]
(["apple", "banana", "orange", "lemon"]) -> []
([]) -> []
(["", " ", "  ", "A", "AA"]) -> ["A", "AA"]
        }
    }
}

problem Generated/2169 {
code {
        func sort_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON", "is", "Awsome"]) -> ["HELLO", "PYTHON", "WORLD"]
(["B", "C", "A", "a", "c", "b"]) -> ["A", "B", "C"]
(["How", "Are", "You", "doing", "?"]) -> []
([]) -> []
(["Python", "is", "A", "wonderful", "language"]) -> ["A"]
        }
    }
}

problem Generated/2170 {
code {
        func get_uppercase_element_index(elements: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["A", "b", "C", "D", "e"]) -> [0, 2, 3]
(["hello", "WORLD", "!", "1"]) -> [1]
(["", "a", "b", "C", "D", "e"]) -> [3, 4]
([]) -> []
(["AAA", "BBB"]) -> [0, 1]
        }
    }
}

problem Generated/2171 {
code {
        func find_uppercase_word_index(words: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["APPLE", "banana", "CHERRY", "dAtE"]) -> [0, 2]
(["alpha", "BRAVO", "charlie", "DELTA"]) -> [1, 3]
(["A", "b", "C", "d", "E"]) -> [0, 2, 4]
(["a", "b", "c", "d", "E"]) -> [4]
([]) -> []
        }
    }
}

problem Generated/2172 {
code {
        func get_index_of_all_uppercase_strings(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["ABCD", "efg", "Hijk", "LMNO", "pqr"]) -> [0, 3]
(["HELLO", "WORLD", "PYTHON"]) -> [0, 1, 2]
(["abc", "123", "XYZ", "789"]) -> [2]
(["", "ABC", "DEF", ""]) -> [1, 2]
(["abc", "def", "ghi"]) -> []
        }
    }
}

problem Generated/2173 {
code {
        func copy_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "world", "PYTHON", "is", "fun"]) -> ["HELLO", "PYTHON"]
(["ALL", "CAPS", "ARE", "NOT", "CREATED", "EQUAL"]) -> ["ALL", "CAPS", "ARE", "NOT", "CREATED", "EQUAL"]
(["", "", "", ""]) -> []
(["1", "2", "3", "4", "5"]) -> []
(["PYTHON", "code", "tests", "and", "debugging"]) -> ["PYTHON"]
        }
    }
}

problem Generated/2174 {
code {
        func get_uppercase_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON"]) -> ["HELLO", "WORLD", "PYTHON"]
(["Hello", "WORLD", "Python"]) -> ["WORLD"]
([]) -> []
(["#@$", "12", "ABC", "def"]) -> ["ABC"]
(["", "PYTHON", ""]) -> ["PYTHON"]
        }
    }
}

problem Generated/2175 {
code {
        func get_num_of_uppercase_strings(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON"]) -> 2
(["HELLO", "WORLD", "PYTHON", "IS", "AWESOME"]) -> 3
(["hello", "world", "python"]) -> 0
([]) -> 0
(["UP", "UP", "DOWN", "UP"]) -> 2
        }
    }
}

problem Generated/2176 {
code {
        func generate_alpha_string(length: int) -> string
    }
    tests {
        template nse {
            (5) -> "abcde"
(0) -> ""
(1) -> "a"
(26) -> "abcdefghijklmnopqrstuvwxyz"
(100) -> "abcdefghijklmnopqrstuvwxyz"
        }
    }
}

problem Generated/2177 {
code {
        func count_alpha_words(words: list<string>) -> int
    }
    tests {
        template nse {
            (["hello", "world", "123", "abc"]) -> 3
(["hello", "world", "123", "", "abc"]) -> 3
(["alpha", "beta", "gamma", "delta", "epsilon"]) -> 5
(["123", "", "456"]) -> 0
([]) -> 0
        }
    }
}

problem Generated/2178 {
code {
        func get_all_alpha_strings(string_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World", "123", "Python"]) -> ["Hello", "World", "Python"]
(["Hello", "", "Python", "is", "fun"]) -> ["Hello", "Python", "is", "fun"]
([]) -> []
(["123", "456"]) -> []
(["", "", ""]) -> []
        }
    }
}

problem Generated/2179 {
code {
        func get_alpha_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "", "abc123"]) -> ["hello", "world"]
(["Peter", "Piper", "Picked", "A", "Peck", "Of", "Pickled", "Peppers"]) -> ["Peter", "Piper", "Picked", "A", "Peck", "Of", "Pickled", "Peppers"]
(["", "", ""]) -> []
(["1", "2", "3"]) -> []
([]) -> []
        }
    }
}

problem Generated/2180 {
code {
        func find_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "abc", " ", "goodbye"]) -> ["hello", "world", "abc", "goodbye"]
([]) -> []
(["1", "2", "3"]) -> []
(["?", ".", "!", ":", ";"]) -> []
(["a", "b", "c"]) -> []
        }
    }
}

problem Generated/2181 {
code {
        func find_max_alpha_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "a", "9", "python"]) -> "python"
(["hello", "world", "a", "9"]) -> "hello"
(["1", "2", "3", "4", "5"]) -> ""
([]) -> ""
(["hello", "world"]) -> "hello"
        }
    }
}

problem Generated/2182 {
code {
        func largest_alpha_word(sentence: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "hello"
("Python is awesome") -> "awesome"
("1234 5678") -> ""
("Today is Monday and it is raining.") -> "Monday"
("I love to code in Python") -> "Python"
        }
    }
}

problem Generated/2183 {
code {
        func find_min_alpha_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python", "3.9"]) -> "hello"
(["1234", "5678", "90"]) -> ""
(["hello", "world", "Java", "Python"]) -> "Java"
(["alpha", "beta", "gamma", "delta"]) -> "alpha"
([]) -> ""
        }
    }
}

problem Generated/2184 {
code {
        func find_min_alpha_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python", "java", "cpp", "c", "rust"]) -> "c"
(["123", "abc", "xyz", "def", "456"]) -> "abc"
(["!@#", "$%^", "&*(", "123", "abc"]) -> "abc"
([]) -> ""
(["123", "456", "789"]) -> ""
        }
    }
}

problem Generated/2185 {
code {
        func find_min_alpha_word(words: list<string>) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "mango", "orange", "pear", "peach", "grapes"]) -> "apple"
(["123", "456", "abc", "def", "xyz", "789"]) -> "abc"
([]) -> ""
(["123", "456", "789"]) -> ""
(["apple", "banana", "mango", "orange", "pear", "peach"]) -> "apple"
        }
    }
}

problem Generated/2186 {
code {
        func find_min_alpha_str(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python", "2021"]) -> "hello"
(["hello", "world", "python", "2021", "abc"]) -> "abc"
(["123", "456", "789", "!@#"]) -> ""
(["hello", "world", "PYTHON", "2021"]) -> "PYTHON"
(["", "", "hello", "world"]) -> "hello"
        }
    }
}

problem Generated/2187 {
code {
        func min_alphabetic_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "Python", "is", "awesome"]) -> "awesome"
(["123", "456", "789"]) -> ""
(["alpha", "beta", "gamma", "Delta"]) -> "alpha"
(["", "10", "Python", "", "is", "awesome"]) -> "awesome"
([]) -> ""
        }
    }
}

problem Generated/2188 {
code {
        func find_min_alpha(word: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "d"
("abcABC123") -> "a"
("123456789") -> ""
("hello") -> "e"
("") -> ""
        }
    }
}

problem Generated/2189 {
code {
        func get_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "456"]) -> ["hello", "world"]
(["+93", "1-800-555-1212", "555-1212", "David", "Hoffman"]) -> ["David", "Hoffman"]
(["Building", "A", "Cohesive", "Team"]) -> ["Building", "A", "Cohesive", "Team"]
([]) -> []
(["12345", "abcdef", "1a2b3c"]) -> ["abcdef"]
        }
    }
}

problem Generated/2190 {
code {
        func find_alpha_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "Python", "456"]) -> ["hello", "world", "Python"]
(["A", "B", "C", "D"]) -> ["A", "B", "C", "D"]
(["Apple", "Bee", "Cat", "Dog"]) -> ["Apple", "Bee", "Cat", "Dog"]
(["@Apple", "Bee", "Cat", "Dog"]) -> ["Bee", "Cat", "Dog"]
([]) -> []
        }
    }
}

problem Generated/2191 {
code {
        func get_unique_alphabets(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello, World!") -> ["H", "W", "d", "e", "l", "o", "r"]
("The quick brown fox jumps over the lazy dog") -> ["T", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
("123") -> []
("") -> []
("Hello23") -> ["H", "e", "l", "o"]
        }
    }
}

problem Generated/2192 {
code {
        func filter_string_list_alpha(str_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123"]) -> ["hello", "world"]
(["123", "456", "789"]) -> []
(["", " ", "a", "1"]) -> ["a"]
(["A", "b", "C", "d"]) -> ["A", "b", "C", "d"]
(["", "", ""]) -> []
        }
    }
}

problem Generated/2193 {
code {
        func filter_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "abc123", "Python"]) -> ["hello", "world", "Python"]
(["apple", "banana", "cherry", "date", "egg"]) -> ["apple", "banana", "cherry", "date", "egg"]
(["1", "2", "3", "4", "5"]) -> []
([]) -> []
(["hello", "123", "world", "456"]) -> ["hello", "world"]
        }
    }
}

problem Generated/2194 {
code {
        func filter_only_alpha(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "python", "is", "awesome"]) -> ["hello", "world", "python", "is", "awesome"]
(["", "  ", "only", "alpha", "words", "should", "be", "in", "the", "result"]) -> ["only", "alpha", "words", "should", "be", "in", "the", "result"]
([]) -> []
(["123", "456", "789"]) -> []
(["!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "_", "+", "=", "-", "1", "2", "3"]) -> []
        }
    }
}

problem Generated/2195 {
code {
        func filter_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World", "123", "Test", "test"]) -> ["Hello", "World", "Test", "test"]
(["Python", "3.9", "Welcome", "2012"]) -> ["Python", "Welcome"]
([]) -> []
(["123", "456", "789"]) -> []
(["apple", "banana", "cherry", "123", "test"]) -> ["apple", "banana", "cherry", "test"]
        }
    }
}

problem Generated/2196 {
code {
        func sort_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "abc", "3.14"]) -> ["abc", "hello", "world"]
(["Python", "is", "awesome", ".", "Amazing"]) -> ["Amazing", "Python", "awesome", "is"]
(["C", "Java", "JavaScript", "Python", "Ruby"]) -> ["C", "Java", "JavaScript", "Python", "Ruby"]
(["apple", "banana", "cherry", "date", "3.14"]) -> ["apple", "banana", "cherry", "date"]
([]) -> []
        }
    }
}

problem Generated/2197 {
code {
        func sort_string_list(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Ball", "cat", "Dog", "1", "23"]) -> ["apple", "Ball", "cat", "Dog", "1", "23"]
(["Apple", "ball", "Cat", "dog"]) -> ["Apple", "ball", "Cat", "dog"]
(["apple", "ball", "cat", "dog"]) -> ["apple", "ball", "cat", "dog"]
(["123", "456", "789"]) -> ["123", "456", "789"]
([]) -> []
        }
    }
}

problem Generated/2198 {
code {
        func sort_strings(string_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Banana", "dog", "cat", "123"]) -> ["apple", "Banana", "cat", "dog", "123"]
(["Sort", "this", "List", "Please"]) -> ["List", "Please", "Sort", "this"]
(["alpha", "beta", "gamma", "delta", "epsilon"]) -> ["alpha", "beta", "delta", "epsilon", "gamma"]
(["a", "1", "b", "2", "c", "3"]) -> ["a", "b", "c", "1", "2", "3"]
([]) -> []
        }
    }
}

problem Generated/2199 {
code {
        func sort_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Orange", "banana", "melon", "777"]) -> ["Orange", "apple", "banana", "melon"]
(["alpha", "beta", "gamma", "delta"]) -> ["alpha", "beta", "delta", "gamma"]
(["house", "car", "apple", "grape", "0.5"]) -> ["apple", "car", "grape", "house"]
([]) -> []
(["A", "C", "E", "B", "D"]) -> ["A", "B", "C", "D", "E"]
        }
    }
}

problem Generated/2200 {
code {
        func sort_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "123", "grape"]) -> ["apple", "banana", "grape", "orange"]
(["Python", "is", "a", "great", "language"]) -> ["a", "great", "is", "language", "Python"]
(["a", "b", "c", "d"]) -> ["a", "b", "c", "d"]
([]) -> []
(["ZEBRA", "lion", "tiger", "parrot"]) -> ["lion", "parrot", "tiger", "ZEBRA"]
        }
    }
}

problem Generated/2201 {
code {
        func sort_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["abc", "def", "123", "ghi"]) -> ["abc", "def", "ghi"]
(["aa", "bb", "cc", "dd"]) -> ["aa", "bb", "cc", "dd"]
(["a", "b", "c", "d"]) -> ["a", "b", "c", "d"]
(["ab3c", "d7e", "fgh"]) -> ["fgh"]
(["123", "456", "789"]) -> []
        }
    }
}

problem Generated/2202 {
code {
        func filter_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python", "123", "abc"]) -> ["hello", "world", "python", "abc"]
(["car", "apple", "house", "tiger"]) -> ["car", "apple", "house", "tiger"]
(["1", "2", "3", "4"]) -> []
(["", "", ""]) -> []
([]) -> []
        }
    }
}

problem Generated/2203 {
code {
        func generate_alphabets(n: int) -> string
    }
    tests {
        template nse {
            (5) -> "abcde"
(0) -> ""
(26) -> "abcdefghijklmnopqrstuvwxyz"
(30) -> "abcdefghijklmnopqrstuvwxyz"
(-2) -> ""
        }
    }
}

problem Generated/2204 {
code {
        func generate_alphabets_string(start: int, last: int) -> string
    }
    tests {
        template nse {
            (0, 0) -> "a"
(0, 1) -> "ab"
(0, 2) -> "abc"
(2, 4) -> "cde"
(23, 25) -> "xyz"
        }
    }
}

problem Generated/2205 {
code {
        func string_to_ascii(input_s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello, World!") -> [72, 101, 108, 108, 111, 87, 111, 114, 108, 100]
("justtesting") -> [106, 117, 115, 116, 116, 101, 115, 116, 105, 110, 103]
("1234") -> []
("") -> []
("Testing with Spaces") -> [84, 101, 115, 116, 105, 110, 103, 119, 105, 116, 104, 83, 112, 97, 99, 101, 115]
        }
    }
}

problem Generated/2206 {
code {
        func check_alpha_strings(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> true
(["hello", "world", "123"]) -> false
(["abc", "DEF", "ghi"]) -> true
(["hello world", "python3"]) -> false
([]) -> true
        }
    }
}

problem Generated/2207 {
code {
        func check_strings_alpha(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> true
(["hello", "world", "python", "123"]) -> false
(["hello", "world", "python", ""]) -> false
([]) -> true
(["h", "e", "l", "l", "o"]) -> true
        }
    }
}

problem Generated/2208 {
code {
        func is_alpha_string(string_value: string) -> bool
    }
    tests {
        template nse {
            ("Python") -> true
("Python3") -> false
("This is a test") -> false
("HelloWorld") -> true
("") -> true
        }
    }
}

problem Generated/2209 {
code {
        func is_string_all_alpha(s: string) -> bool
    }
    tests {
        template nse {
            ("hello") -> true
("Hello") -> true
("Hello World") -> false
("") -> true
("123") -> false
        }
    }
}

problem Generated/2210 {
code {
        func are_strings_alpha(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> true
(["hello", "world123", "python"]) -> false
(["hello123", "world123", "python"]) -> false
(["", " ", "  "]) -> false
([]) -> true
        }
    }
}

problem Generated/2211 {
code {
        func is_all_alpha(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["hello", "world", "Python", "Programming"]) -> true
(["hello", "world", "Python", "Programming", "2021"]) -> false
([]) -> true
(["hello", "2021"]) -> false
(["d", "e", "f"]) -> true
        }
    }
}

problem Generated/2212 {
code {
        func is_only_alpha_strings(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> true
(["hello", "world", "python3"]) -> false
(["hello", "world", "pytHon"]) -> true
([]) -> true
(["", "  ", "python"]) -> false
        }
    }
}

problem Generated/2213 {
code {
        func are_all_strings_alpha(elements: list<string>) -> bool
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> true
(["hello", "world", "python3"]) -> false
(["hello", "world", "Python"]) -> true
([]) -> true
(["123", "456", "789"]) -> false
        }
    }
}

problem Generated/2214 {
code {
        func join_alpha_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["abc", "123", "def", "456"], "-") -> "abc-def"
(["abc", "123", "def", "456"], "") -> "abcdef"
(["abc", "def", "ghi", "jkl"], " ") -> "abc def ghi jkl"
(["123", "456", "789"], ",") -> ""
([], "-") -> ""
        }
    }
}

problem Generated/2215 {
code {
        func concatenate_alpha_strings(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["Hello", "world", "!", "This", "is", "123", "Python", "Programming"], " ") -> "Hello world This is Python Programming"
(["Hello", "world"], "-") -> "Hello-world"
(["", " ", "123", ".", "This", "is", "Python", "Programming"], "") -> "ThisisPythonProgramming"
(["one", "two", "three", "four", "five"], "-") -> "one-two-three-four-five"
([], " ") -> ""
        }
    }
}

problem Generated/2216 {
code {
        func concatenate_alpha_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "2021"]) -> "helloworld"
(["Test", "for", "alpha", "strings", "Only"]) -> "TestforalphastringsOnly"
(["123", "  ", "hi", "   ", "!", "world"]) -> "hiworld"
([]) -> ""
(["123", "456", "789"]) -> ""
        }
    }
}

problem Generated/2217 {
code {
        func join_alpha_strings(strs: list<string>, delim: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "123"], "-") -> "hello-world"
(["a", "%", "b", "$", "c", "^", "d"], "") -> "abcd"
(["123", "456", "789"], "_") -> ""
([], "-") -> ""
(["alpha", "beta", "gamma"], " ") -> "alpha beta gamma"
        }
    }
}

problem Generated/2218 {
code {
        func join_alpha_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world"]) -> "helloworld"
(["hello", "123", "world"]) -> "helloworld"
(["", "hello", "world"]) -> "helloworld"
([]) -> ""
(["h", "e", "l", "l", "o"]) -> "hello"
        }
    }
}

problem Generated/2219 {
code {
        func join_alpha_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "123", "python", "321"], " ") -> "hello world python"
(["Python", "3.8", "is", "Awesome"], "-") -> "Python-is-Awesome"
(["abc", "def", "ghi"], "") -> "abcdefghi"
(["Python", "3.8", "is", "Awesome"], "") -> "PythonisAwesome"
(["", "", ""], " ") -> ""
        }
    }
}

problem Generated/2220 {
code {
        func get_lowercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World", "123", "Python", "is", "Fun"]) -> ["hello", "world", "python", "is", "fun"]
(["This", "is", "a", "Test"]) -> ["this", "is", "a", "test"]
(["ALL", "CAPS"]) -> ["all", "caps"]
([]) -> []
(["1", "2", "3"]) -> []
        }
    }
}

problem Generated/2221 {
code {
        func get_lowercase_alpha_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World") -> ["hello", "world"]
("I Love Python Programming") -> ["i", "love", "python", "programming"]
("") -> []
("An apple a day keeps the doctor away") -> ["an", "apple", "a", "day", "keeps", "the", "doctor", "away"]
("1234") -> []
        }
    }
}

problem Generated/2222 {
code {
        func convert_all_strings_to_uppercase(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World", "123", "Python", "is", "awesome"]) -> ["HELLO", "WORLD", "123", "PYTHON", "IS", "AWESOME"]
(["yo", "Ho", "uP", "dOwN"]) -> ["YO", "HO", "UP", "DOWN"]
(["In", "the", "Year", "2525"]) -> ["IN", "THE", "YEAR", "2525"]
(["Only", "lowercase", "letters", "allowed"]) -> ["ONLY", "LOWERCASE", "LETTERS", "ALLOWED"]
(["345", "678", "901", "01", "12"]) -> ["345", "678", "901", "01", "12"]
        }
    }
}

problem Generated/2223 {
code {
        func convert_to_upper_alpha(dat: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World", "!", "123"]) -> ["HELLO", "WORLD"]
(["hola", "amigo", "!", "123"]) -> ["HOLA", "AMIGO"]
(["A", "B", "c", "d", "ef"]) -> ["A", "B", "C", "D", "EF"]
([]) -> []
(["Hello", "World", "123", "!"]) -> ["HELLO", "WORLD"]
        }
    }
}

problem Generated/2224 {
code {
        func convert_uppercase_alpha(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123"]) -> ["HELLO", "WORLD", "123"]
(["This", "is", "a", "Test"]) -> ["THIS", "IS", "A", "TEST"]
(["this", "is", "an", "example"]) -> ["THIS", "IS", "AN", "EXAMPLE"]
(["t1", "t2", "t3"]) -> ["t1", "t2", "t3"]
([]) -> []
        }
    }
}

problem Generated/2225 {
code {
        func filter_lower_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "WORLD", "Python", "123", "world"]) -> ["hello", "world"]
(["Apple", "banana", "2Bananas", "Coconut"]) -> ["banana"]
([]) -> []
(["alpha", "lower", "ALPHA", "UPPER"]) -> ["alpha", "lower"]
(["one", "ONE", "OnE"]) -> ["one"]
        }
    }
}

problem Generated/2226 {
code {
        func get_lower_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "world", "Python", "3.9"]) -> ["world"]
(["hello", "world", "python", "3.9"]) -> ["hello", "world", "python"]
([]) -> []
(["Hello", "World", "Python", "3.9"]) -> []
(["Hello", "world", "Python", "3.9", "hElLo"]) -> ["world"]
        }
    }
}

problem Generated/2227 {
code {
        func filter_uppercase_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "world", "PYTHON", "is", "Fun"]) -> ["HELLO", "PYTHON"]
(["hello", "world", "python", "is", "fun"]) -> []
(["@#HELLO", "WORLD@#@", "PYTHON", "is", "Fun"]) -> ["PYTHON"]
([]) -> []
(["", " ", "  ", " !!!"]) -> []
        }
    }
}

problem Generated/2228 {
code {
        func filter_uppercase_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "123", "UPPERCASE"]) -> ["HELLO", "WORLD", "UPPERCASE"]
(["Hello", "WORLD", "123", "upperCase"]) -> ["WORLD"]
(["", "  ", "lowercase"]) -> []
(["123", "456", "789"]) -> []
(["H", "E", "L", "L", "O"]) -> ["H", "E", "L", "L", "O"]
        }
    }
}

problem Generated/2229 {
code {
        func filter_uppercase_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "Python"]) -> ["HELLO", "WORLD"]
(["hello", "WORLD", "123", "python"]) -> ["WORLD"]
(["HELLO", "", "WORLD", "PYTHON"]) -> ["HELLO", "WORLD", "PYTHON"]
([]) -> []
(["HELLO", "WORLD", "PYTHON"]) -> ["HELLO", "WORLD", "PYTHON"]
        }
    }
}

problem Generated/2230 {
code {
        func get_uppercase_alpha(s: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World!") -> ["H", "W"]
("AbCdeFgHiJkL") -> ["A", "C", "F", "H", "J", "L"]
("12345") -> []
("This Is a Test") -> ["T", "I", "T"]
("") -> []
        }
    }
}

problem Generated/2231 {
code {
        func get_alpha_strings_starting_with(strs: list<string>, letter: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "ball", "cat", "dog", "elephant"], "a") -> ["apple"]
(["apple", "ball", "cat", "dog", "elephant"], "b") -> ["ball"]
(["apple", "ball", "cat", "dog", "elephant"], "d") -> ["dog"]
(["apple", "ball", "cat", "dog", "elephant"], "e") -> ["elephant"]
(["apple", "ball", "cat", "dog", "elephant"], "f") -> []
        }
    }
}

problem Generated/2232 {
code {
        func get_alpha_strings_starting_with(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python", "is", "fun"], "h") -> ["hello"]
(["hello", "world", "python", "is", "fun"], "") -> ["hello", "world", "python", "is", "fun"]
(["hello", "world", "python", "is", "fun"], "p") -> ["python"]
(["hello", "world", "python", "is", "fun"], "z") -> []
([], "") -> []
        }
    }
}

problem Generated/2233 {
code {
        func find_words_starting_with(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "donut", "elephant"], "a") -> ["apple"]
(["apple", "banana", "cherry", "donut", "elephant"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "donut", "elephant"], "d") -> ["donut"]
(["apple", "banana", "cherry", "donut", "elephant"], "e") -> ["elephant"]
(["apple", "banana", "cherry", "donut", "elephant"], "f") -> []
        }
    }
}

problem Generated/2234 {
code {
        func count_words_starting_with(words: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "avocado"], "a") -> 3
(["apple", "banana", "apricot", "avocado"], "b") -> 1
(["apple", "banana", "apricot", "avocado"], "ap") -> 2
(["one", "two", "three", "four"], "t") -> 2
(["one", "two", "three", "four"], "o") -> 1
        }
    }
}

problem Generated/2235 {
code {
        func filter_words_startswith(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cat", "dog", "elephant"], "a") -> ["apple"]
(["apple", "banana", "cat", "dog", "elephant"], "b") -> ["banana"]
(["apple", "banana", "cat", "dog", "elephant"], "e") -> ["elephant"]
(["apple", "banana", "cat", "dog", "elephant"], "f") -> []
(["apple123", "banana", "cat", "dog", "elephant"], "a") -> []
        }
    }
}

problem Generated/2236 {
code {
        func filter_alpha_startswith(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "123", "grape"], "a") -> ["apple"]
(["apple", "banana", "orange", "123", "grape"], "b") -> ["banana"]
(["apple", "banana", "orange", "123", "grape"], "g") -> ["grape"]
(["apple", "banana", "orange", "123", "grape"], "") -> ["apple", "banana", "orange", "grape"]
([], "a") -> []
        }
    }
}

problem Generated/2237 {
code {
        func get_alpha_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "5", "car", "dog"], "a") -> ["apple"]
(["apple", "banana", "5", "car", "dog"], "b") -> ["banana"]
(["apple", "banana", "5", "car", "dog"], "") -> ["apple", "banana", "car", "dog"]
(["apple", "banana", "5", "car", "dog"], "d") -> ["dog"]
(["apple", "banana", "5", "car", "dog"], "e") -> []
        }
    }
}

problem Generated/2238 {
code {
        func filter_words_starting_with_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "grape", "blueberry"], "a") -> ["apple"]
(["apple", "banana", "orange", "grape", "blueberry"], "b") -> ["banana", "blueberry"]
(["apple", "banana", "orange", "grape", "blueberry"], "o") -> ["orange"]
(["apple", "banana", "orange", "grape", "blueberry"], "g") -> ["grape"]
(["apple", "banana", "orange", "grape", "blueberry"], "b") -> ["banana", "blueberry"]
        }
    }
}

problem Generated/2239 {
code {
        func count_alpha_words(sentence: string) -> int
    }
    tests {
        template nse {
            ("Hello world") -> 2
("How are you?") -> 2
("I am doing great today!") -> 4
("") -> 0
("1 2 3 4") -> 0
        }
    }
}

problem Generated/2240 {
code {
        func replace_alpha_list(elements: list<string>, replacement: string) -> list<string>
    }
    tests {
        template nse {
            (["a", "b", "c", "1", "2", "3"], "*") -> ["*", "*", "*", "1", "2", "3"]
(["Hello", "World", "!", "123"], "*") -> ["*", "*", "!", "123"]
(["a", "1", "b", "2", "c", "3"], "#") -> ["#", "1", "#", "2", "#", "3"]
([], "*") -> []
(["123", "456", "789"], "#") -> ["123", "456", "789"]
        }
    }
}

problem Generated/2241 {
code {
        func replace_strings_in_list(elements: list<string>, old_value: string, new_value: string) -> list<string>
    }
    tests {
        template nse {
            (["foo", "bar", "baz"], "bar", "hello") -> ["foo", "hello", "baz"]
(["hello", "world", "hello"], "world", "worlds") -> ["hello", "worlds", "hello"]
(["apple", "banana", "cherry"], "kiwi", "mango") -> ["apple", "banana", "cherry"]
(["apple", "banana", "cherry"], "banana", "grape") -> ["apple", "grape", "cherry"]
([], "", "") -> []
        }
    }
}

problem Generated/2242 {
code {
        func filter_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "foo", "bar"]) -> ["hello", "world", "foo", "bar"]
(["hello", "world", "", "", "foo", "bar"]) -> ["hello", "world", "foo", "bar"]
(["", "", "", ""]) -> []
([]) -> []
(["123", "abc", "456", "def"]) -> ["abc", "def"]
        }
    }
}

problem Generated/2243 {
code {
        func extract_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "test", "case"]) -> ["hello", "world", "test", "case"]
(["Python", "R", "MATLAB", "4"]) -> ["Python", "R", "MATLAB"]
(["1", "2", "3", "4", "5"]) -> []
([]) -> []
(["hello", "WORLD", "python", "java"]) -> ["hello", "WORLD", "python", "java"]
        }
    }
}

problem Generated/2244 {
code {
        func filter_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "world", "123", "python", "is", "fun"]) -> ["Hello", "world", "python", "is", "fun"]
(["alpha", "beta", "gamma", "delta"]) -> ["alpha", "beta", "gamma", "delta"]
(["123", "456", "789"]) -> []
([]) -> []
(["a", "B", "c", "d"]) -> ["a", "B", "c", "d"]
        }
    }
}

problem Generated/2245 {
code {
        func remove_non_alpha(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "abc", "456"]) -> ["hello", "world", "abc"]
(["123", "456", "!@#", "abc", "def"]) -> ["abc", "def"]
(["hello", "world"]) -> ["hello", "world"]
([]) -> []
(["$$$", "%%%"]) -> []
        }
    }
}

problem Generated/2246 {
code {
        func sort_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["foo", "bar", "baz", "qux", "1", "2", "3"]) -> ["bar", "baz", "foo", "qux"]
(["xyz", "abc", "123", "def", "456"]) -> ["abc", "def", "xyz"]
(["", ".", "a", "b", "c"]) -> ["a", "b", "c"]
([]) -> []
(["123", "456", "789"]) -> []
        }
    }
}

problem Generated/2247 {
code {
        func sort_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "zebra", "dog", "cat"]) -> ["apple", "banana", "cat", "dog", "zebra"]
(["a", "b", "c"]) -> ["a", "b", "c"]
(["a", "b", "c", "1", "2", "3"]) -> ["a", "b", "c"]
([]) -> []
(["apple", "banana", "Apple", "DOG", "cat"]) -> ["Apple", "DOG", "apple", "banana", "cat"]
        }
    }
}

problem Generated/2248 {
code {
        func sort_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["a", "b", "c", "d"]) -> ["a", "b", "c", "d"]
(["a", "B", "c", "D"]) -> ["B", "D", "a", "c"]
(["apple", "ball", "CAt", "dog", "elephant"]) -> ["CAt", "apple", "ball", "dog", "elephant"]
([]) -> []
(["", " ", "123", "abc"]) -> ["abc"]
        }
    }
}

problem Generated/2249 {
code {
        func sort_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "mango", "cherry"]) -> ["apple", "banana", "cherry", "mango", "orange"]
(["apple", "banana", "orange", "mango", "1234"]) -> ["apple", "banana", "mango", "orange"]
(["a", "b", "c", "d", "e"]) -> ["a", "b", "c", "d", "e"]
(["hello", "world"]) -> ["hello", "world"]
(["1234", "5678"]) -> []
        }
    }
}

problem Generated/2250 {
code {
        func sort_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date", "1", "2"]) -> ["apple", "banana", "cherry", "date"]
([]) -> []
(["1", "2", "3"]) -> []
(["Apple", "apple", "BANANA", "banana"]) -> ["Apple", "BANANA", "apple", "banana"]
(["A", "B", "C", "D", "E"]) -> ["A", "B", "C", "D", "E"]
        }
    }
}

problem Generated/2251 {
code {
        func sort_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "abc", "efg"]) -> ["abc", "efg", "hello", "world"]
(["a", "b", "c", "d", "e"]) -> ["a", "b", "c", "d", "e"]
(["a", "b", "c", "123", "def"]) -> ["a", "b", "c", "def"]
(["123", "456", "789"]) -> []
(["", " ", "  ", "a", "  b  "]) -> ["a"]
        }
    }
}

problem Generated/2252 {
code {
        func sort_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["abc", "xyz", "def", "pqr", "123", "klm", "456"]) -> ["abc", "def", "klm", "pqr", "xyz"]
(["the", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]) -> ["brown", "dog", "fox", "jumps", "lazy", "over", "quick", "the", "the"]
(["hello", "world", "this", "is", "openai"]) -> ["hello", "is", "openai", "this", "world"]
(["I", "am", "not", "a", "robot"]) -> ["I", "a", "am", "not", "robot"]
(["123", "456", "789"]) -> []
        }
    }
}

problem Generated/2253 {
code {
        func sort_alphabetic_words(sentence: string) -> string
    }
    tests {
        template nse {
            ("A quick brown fox jumps over the lazy dog") -> "A brown dog fox jumps lazy over quick the"
("The quick brown fox jumps over the lazy dog") -> "The brown dog fox jumps lazy over quick the"
("This is a sentence to test the function") -> "This a function is sentence test the to"
("The sun rises in the east") -> "The east in rises sun the"
("A b c d e f g h i j k l m n o p q r s t u v w x y z") -> "A b c d e f g h i j k l m n o p q r s t u v w x y z"
        }
    }
}

problem Generated/2254 {
code {
        func get_indexes_of_alpha_strings(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["hello", "world", "123", "4", "me"]) -> [0, 1, 4]
(["the", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]) -> [0, 1, 2, 3, 4, 5, 6, 7, 8]
(["1", "2", "3", "4", "5"]) -> []
([]) -> []
(["hello", "world", "", " ", "me"]) -> [0, 1, 4]
        }
    }
}

problem Generated/2255 {
code {
        func find_indexes_of_alpha_strings(words: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["apple", "banana", "cat", "dog", "elephant"]) -> [0, 1, 2, 3, 4]
(["1", "2", "3", "4", "5"]) -> []
(["apple", "orange", "grape", "1", "2"]) -> [0, 1, 2]
([]) -> []
(["", " ", "apple", "banana"]) -> [2, 3]
        }
    }
}

problem Generated/2256 {
code {
        func get_alpha_indexes(words: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["Hello", "World", "!", "Python"]) -> [0, 1, 3]
(["Apple", "Ball", "1", "Cat", "Dog"]) -> [0, 1, 3, 4]
(["1", "2", "3", "4", "5"]) -> []
([]) -> []
(["1", "2", "Three", "4", "Five"]) -> [2, 4]
        }
    }
}

problem Generated/2257 {
code {
        func get_index_of_alpha_elements(elements: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["a", "b", "c", "4", "5"]) -> [0, 1, 2]
(["1", "2", "3", "4", "5"]) -> []
(["a", "b", "c", "d", "e"]) -> [0, 1, 2, 3, 4]
([]) -> []
(["1", "2", "a", "3", "4", "b", "5"]) -> [2, 5]
        }
    }
}

problem Generated/2258 {
code {
        func get_alpha_indices(items: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["a", "1", "b", "2", "c", "3"]) -> [0, 2, 4]
(["1", "2", "3", "4", "5", "6"]) -> []
(["a", "b", "c", "d", "e", "f"]) -> [0, 1, 2, 3, 4, 5]
(["123", "abc", "456", "efg", "789", "hij"]) -> [1, 3, 5]
(["", "a", "", "b", "", "c"]) -> [1, 3, 5]
        }
    }
}

problem Generated/2259 {
code {
        func reverse_alpha_strings(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "", "123", "orange"]) -> ["egnaro", "ananab", "elppa"]
(["hello", "world", "python", "is", "fun"]) -> ["nuf", "si", "nohtyp", "dlrow", "olleh"]
(["a", "b", "c"]) -> ["c", "b", "a"]
(["1", "2", "3"]) -> []
([]) -> []
        }
    }
}

problem Generated/2260 {
code {
        func copy_list_and_remove_non_alpha(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "orange"]) -> ["apple", "banana", "cherry", "orange"]
(["apple", "banana", "1", "orange"]) -> ["apple", "banana", "orange"]
(["apple", "banana", "!", "orange"]) -> ["apple", "banana", "orange"]
(["apple", "banana", "", "orange"]) -> ["apple", "banana", "orange"]
([]) -> []
        }
    }
}

problem Generated/2261 {
code {
        func get_alpha_strings(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "123", "world", "456"]) -> ["hello", "world"]
(["YAY", "123", "WOOHOO", "789"]) -> ["YAY", "WOOHOO"]
(["abc", "def", "ghi", "jkl", "mno"]) -> ["abc", "def", "ghi", "jkl", "mno"]
(["!@#$%^&*()", "123", "zyx", "wvu", "tsr"]) -> ["zyx", "wvu", "tsr"]
(["", "", "", "", ""]) -> []
        }
    }
}

problem Generated/2262 {
code {
        func filter_alphabetic_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "test", "python"]) -> ["hello", "world", "test", "python"]
([]) -> []
(["", "12", "python", "3"]) -> ["python"]
(["1", "12", "123", "1234"]) -> []
(["a", "aa", "aaa", "aaaa"]) -> ["a", "aa", "aaa", "aaaa"]
        }
    }
}

problem Generated/2263 {
code {
        func copy_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "python", "is", "awesome"]) -> ["hello", "world", "python", "is", "awesome", "hello", "world", "python", "is", "awesome"]
(["abc", "def", "ghi", "jkl"]) -> ["abc", "def", "ghi", "jkl", "abc", "def", "ghi", "jkl"]
(["1", "2", "3"]) -> []
([]) -> []
(["hello", "", "world"]) -> ["hello", "world", "hello", "world"]
        }
    }
}

problem Generated/2264 {
code {
        func copy_and_remove_non_alpha_elements(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123"]) -> ["hello", "world"]
(["alpha", "beta", "gamma"]) -> ["alpha", "beta", "gamma"]
([]) -> []
(["hi", "there", "!", "how", "are", "you"]) -> ["hi", "there", "how", "are", "you"]
(["this", "is", "a", "pen"]) -> ["this", "is", "a", "pen"]
        }
    }
}

problem Generated/2265 {
code {
        func copy_alpha_elements(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["a", "b", "c", "d", "e"]) -> ["a", "b", "c", "d", "e"]
(["a", "b", "c", "d", "e", "1", "2", "3"]) -> ["a", "b", "c", "d", "e"]
(["1", "2", "3"]) -> []
(["a", "", "c", "d", "e"]) -> ["a", "c", "d", "e"]
([]) -> []
        }
    }
}

problem Generated/2266 {
code {
        func count_distinct_letters(input_str: string) -> int
    }
    tests {
        template nse {
            ("hello world") -> 7
("I am a Python developer") -> 15
("") -> 0
("12345") -> 0
("!!@#%$") -> 0
        }
    }
}

problem Generated/2267 {
code {
        func reduce_concat_alpha_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["abc", "def", "ghi"]) -> "abcdefghi"
(["a1b2c3", "def", "ghi"]) -> "defghi"
(["abc", "5", "def", "2", "ghi"]) -> "abcdefghi"
(["", "", ""]) -> ""
([]) -> ""
        }
    }
}

problem Generated/2268 {
code {
        func concatenate_alpha_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["Hello", "World", "123", "Python", "is", "awesome"]) -> "HelloWorldPythonisawesome"
(["test", "123", "hello", "world"]) -> "testhelloworld"
([]) -> ""
(["abc", "def", "ghi", "", "jkl"]) -> "abcdefghijkl"
(["a", "b", "c", "d", "e"]) -> "abcde"
(["123"]) -> ""
        }
    }
}

problem Generated/2269 {
code {
        func concat_alpha_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["Hello", "World", "today", "is", "Friday"]) -> "HelloWorldtodayisFriday"
(["Today", "is", "2021-11-19"]) -> "Todayis"
(["", " ", "123"]) -> ""
(["abcde"]) -> "abcde"
([]) -> ""
        }
    }
}

problem Generated/2270 {
code {
        func concat_alpha_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "123", "abc", "456"]) -> "helloworldabc"
(["hello", "world", "python", "is", "awesome"]) -> "helloworldpythonisawesome"
(["123", "456", "789"]) -> ""
(["a", "b", "c"]) -> "abc"
([]) -> ""
        }
    }
}

problem Generated/2271 {
code {
        func concat_all_alpha_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "123", "456"]) -> "helloworld"
(["hello", "world"]) -> "helloworld"
(["123", "456"]) -> ""
([]) -> ""
(["", "world", "!", "hello"]) -> "worldhello"
        }
    }
}

problem Generated/2272 {
code {
        func split_string_alpha_numeric(input_str: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello world. How are you today?") -> ["Hello", "world", "How", "are", "you", "today"]
("This is a test 1234.") -> ["This", "is", "a", "test"]
("No numbers, only words.") -> ["No", "numbers", "only", "words"]
("") -> []
("Only123numbers") -> []
        }
    }
}

problem Generated/2273 {
code {
        func split_alpha_numeric(s: string) -> list<string>
    }
    tests {
        template nse {
            ("hello123world") -> ["hello", "123", "world"]
("he123llo123world") -> ["he", "123", "llo", "123", "world"]
("hello") -> ["hello"]
("") -> []
("123") -> ["123"]
        }
    }
}

problem Generated/2274 {
code {
        func split_alpha_and_non_alpha(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello, World!") -> ["Hello", "World"]
("Python is 3.9.0") -> ["Python", "is"]
("You got $99.99") -> ["You", "got"]
("Testing the function") -> ["Testing", "the", "function"]
("99 bottles of beer") -> ["bottles", "of", "beer"]
        }
    }
}

problem Generated/2275 {
code {
        func get_range_of_numbers(txt: string) -> list<int>
    }
    tests {
        template nse {
            ("The quick brown fox jumps over the 2 lazy dogs") -> [2]
("There are no numbers in this text") -> []
("The answer is 42") -> [42]
("The range is from 10 to 15") -> [10, 11, 12, 13, 14, 15]
("3 7 1 8 9") -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
        }
    }
}

problem Generated/2276 {
code {
        func count_numeric_strings(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"]) -> 5
(["1", "2", "3", "4", "5", "hello"]) -> 5
(["1", "2", "3", "4", "5", "", "hello"]) -> 5
(["a", "b", "c", "d", "e"]) -> 0
([]) -> 0
        }
    }
}

problem Generated/2277 {
code {
        func count_digits(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["abc123", "def456", "ghi789"]) -> [3, 3, 3]
(["a1b2c3d", "e5f6g7h8"]) -> [3, 4]
(["1", "2", "3", "4"]) -> [1, 1, 1, 1]
(["", "", ""]) -> [0, 0, 0]
(["a", "b", "c"]) -> [0, 0, 0]
        }
    }
}

problem Generated/2278 {
code {
        func count_num_strings(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["123", "abc", "456", "def", "789"]) -> 3
(["123", "456", "789"]) -> 3
(["abc", "def", "hij"]) -> 0
(["123", "abc", "def", "456", "hij", "789"]) -> 3
([]) -> 0
        }
    }
}

problem Generated/2279 {
code {
        func count_digits(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["123", "abc", "456"]) -> [3, 0, 3]
(["a1b2c3d4", "1234", "abcd", "1a2b3c4d"]) -> [4, 4, 0, 4]
([]) -> []
(["123"]) -> [3]
(["abc"]) -> [0]
        }
    }
}

problem Generated/2280 {
code {
        func count_string_digits(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["2 cats", "3 dogs", "1 bird"]) -> [1, 1, 1]
(["I am 25 years old", "Python is 3rd most popular language"]) -> [2, 1]
(["1", "11", "111"]) -> [1, 2, 3]
(["hello", "world"]) -> [0, 0]
([]) -> []
        }
    }
}

problem Generated/2281 {
code {
        func count_digits_in_list(lst: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["123", "abc", "4d5f"]) -> [3, 0, 2]
(["", " ", "   ", "  3  "]) -> [0, 0, 0, 1]
(["12345", "67890", "qwerty"]) -> [5, 5, 0]
([]) -> []
(["$%*(#&^@", "!@#$%^&*()", "1234567890"]) -> [0, 0, 10]
        }
    }
}

problem Generated/2282 {
code {
        func sum_of_digits(alpha_numeric_s: string) -> int
    }
    tests {
        template nse {
            ("hello123world") -> 6
("1a2b3c4d5e") -> 15
("") -> 0
("a!-=@#$%^&*()_+`~") -> 0
("123456789") -> 45
        }
    }
}

problem Generated/2283 {
code {
        func find_sum_of_abs_numbers_in_str(input_str: string) -> int
    }
    tests {
        template nse {
            ("Hello World 123") -> 123
("The quick brown fox jumps over the 2 lazy dogs") -> 2
("123 456 789") -> 1368
("") -> 0
("a b c d e") -> 0
        }
    }
}

problem Generated/2284 {
code {
        func sum_of_numbers_in_string(txt: string) -> int
    }
    tests {
        template nse {
            ("abc123def456") -> 579
("a1b2c3") -> 6
("1") -> 1
("123") -> 123
("") -> 0
        }
    }
}

problem Generated/2285 {
code {
        func sum_numbers_in_string(s: string) -> int
    }
    tests {
        template nse {
            ("Hello 123 world 456") -> 579
("The answer is 42") -> 42
("No numbers here!") -> 0
("") -> 0
("1 2 3 4 5") -> 15
        }
    }
}

problem Generated/2286 {
code {
        func find_max_int_in_string(input_str: string) -> int
    }
    tests {
        template nse {
            ("The 2 quick brown foxes jumped over the 12 lazy dogs") -> 12
("No numbers here") -> -1
("10 20 30 40 50") -> 50
("abc def ghi") -> -1
("d1g2h3f4h5") -> 5
        }
    }
}

problem Generated/2287 {
code {
        func max_num_in_str(input_str: string) -> int
    }
    tests {
        template nse {
            ("Hello 123 World 45") -> 123
("I am 23 years old") -> 23
("No numbers here!") -> -1
("1 2 3 4 5 6 7 8 9") -> 9
("  I have 123 spaces 456  ") -> 456
        }
    }
}

problem Generated/2288 {
code {
        func find_max_digit_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["one", "two", "3", "four"]) -> "3"
(["12345", "67890", "0000"]) -> "67890"
(["abc", "def", "ghi"]) -> ""
(["111", "222", "333", "999"]) -> "999"
(["", "1", "2"]) -> "2"
        }
    }
}

problem Generated/2289 {
code {
        func get_max_digit_string(txt: string) -> int
    }
    tests {
        template nse {
            ("This is a test 123") -> 123
("No digits in this string") -> -1
("123 456 789 999") -> 999
("") -> -1
("Words and 4") -> 4
        }
    }
}

problem Generated/2290 {
code {
        func find_max_num_in_string(s: string) -> int
    }
    tests {
        template nse {
            ("I have 2 dogs and 3 cats") -> 3
("") -> 0
("The quick brown fox jumps over the lazy dog") -> 0
("The 1 2 3") -> 3
("This is only string") -> 0
        }
    }
}

problem Generated/2291 {
code {
        func min_digit_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["a", "b", "123", "cde"]) -> "123"
(["a", "b", "cde", "fgh"]) -> ""
(["123", "456", "789", "0"]) -> "0"
(["1", "22", "333", "4444", "55555"]) -> "1"
(["", " ", "  ", "\t", "\n"]) -> ""
        }
    }
}

problem Generated/2292 {
code {
        func concatenate_digits(str_lst: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "123", "world"]) -> "123"
(["1", "2", "3", "4", "5"]) -> "12345"
(["a", "b", "c"]) -> ""
(["123"]) -> "123"
([]) -> ""
        }
    }
}

problem Generated/2293 {
code {
        func concatenate_string_with_digits(str_lst: list<string>) -> string
    }
    tests {
        template nse {
            (["a", "b", "1", "c", "2"]) -> "12"
(["a", "b", "c", "d"]) -> ""
(["1", "2", "3", "4", "5"]) -> "12345"
(["a", "1", "b", "2", "c", "3", "d", "4"]) -> "1234"
([]) -> ""
        }
    }
}

problem Generated/2294 {
code {
        func get_digit_counts(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["abc123", "def456", "ghi789"]) -> [3, 3, 3]
(["12ab", "34cd", "56ef", "ghij"]) -> [2, 2, 2, 0]
(["1234", "56789"]) -> [4, 5]
(["hello", "world"]) -> [0, 0]
([]) -> []
        }
    }
}

problem Generated/2295 {
code {
        func extract_digits_from_strings(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["abcd", "1234", "efgh", "5678", "ijk9"]) -> [1234, 5678, 9]
(["1", "22", "333", "4444"]) -> [1, 22, 333, 4444]
(["abcd", "efgh", "ijkl", "mnop"]) -> []
(["12ab", "cd34", "56ef", "ghij"]) -> [12, 34, 56]
(["Hello, World!", "12345", "python"]) -> [12345]
        }
    }
}

problem Generated/2296 {
code {
        func list_of_digit_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["123", "abc", "456"]) -> ["123", "456"]
(["1a2b3c", "4d5e6f", "7g8h9i"]) -> []
([]) -> []
(["123", "456", "789"]) -> ["123", "456", "789"]
(["1", "2", "3"]) -> ["1", "2", "3"]
        }
    }
}

problem Generated/2297 {
code {
        func filter_numeric_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["123", "abc", "456", "def", "789"]) -> ["123", "456", "789"]
(["1", "22", "333", "4444", "abc", "defg", "123"]) -> ["1", "22", "333", "4444", "123"]
(["123", "456", "789"]) -> ["123", "456", "789"]
(["abc", "defg"]) -> []
([]) -> []
        }
    }
}

problem Generated/2298 {
code {
        func get_index_of_digit_strings(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["123", "abc", "456", "def", "789"]) -> [0, 2, 4]
(["abc", "def", "ghi"]) -> []
(["1", "2", "3", "4", "5"]) -> [0, 1, 2, 3, 4]
([]) -> []
(["123", "45a6", "78"]) -> [0, 2]
        }
    }
}

problem Generated/2299 {
code {
        func get_unique_digits(inp_str: string) -> list<int>
    }
    tests {
        template nse {
            ("1a2b3c4d5e") -> [1, 2, 3, 4, 5]
("hello world") -> []
("1234") -> [1, 2, 3, 4]
("1a2a3a4a5a") -> [1, 2, 3, 4, 5]
("") -> []
        }
    }
}

problem Generated/2300 {
code {
        func count_unique_digits(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["abc123", "456def", "789ghi"]) -> 9
(["123", "456", "789"]) -> 9
(["abc", "def", "ghi"]) -> 0
(["abc123", "456def", "789ghi", "0123jkl"]) -> 10
(["123", "123", "123"]) -> 3
        }
    }
}

problem Generated/2301 {
code {
        func filter_digits_in_list(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["abc", "123", "def", "456"]) -> ["123", "456"]
(["Hello", "World", "123", "456"]) -> ["123", "456"]
([]) -> []
(["1", "2", "3", "4", "5"]) -> ["1", "2", "3", "4", "5"]
(["a", "b", "c"]) -> []
        }
    }
}

problem Generated/2302 {
code {
        func filter_digits(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["1", "2", "3", "dog", "4", "cat", "5"]) -> ["1", "2", "3", "4", "5"]
(["1", "2", "3"]) -> ["1", "2", "3"]
([]) -> []
(["dog", "cat"]) -> []
(["1", "2", "3", "4", "5"]) -> ["1", "2", "3", "4", "5"]
(["1a", "2b", "3c", "4d", "5e"]) -> []
        }
    }
}

problem Generated/2303 {
code {
        func get_all_digits_from_strings(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["1", "2", "3", "abc", "def"]) -> [1, 2, 3]
(["123", "456", "789", "abc", "def"]) -> [123, 456, 789]
(["abc", "def", "xyz"]) -> []
([]) -> []
(["1", "2", "3", "4", "5", "6", "7", "8", "9"]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
        }
    }
}

problem Generated/2304 {
code {
        func filter_digit_strings(string_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"]) -> ["1", "2", "3", "4", "5"]
(["a", "b", "c", "d", "e"]) -> []
(["1", "2", "a", "3", "b", "4", "c", "5"]) -> ["1", "2", "3", "4", "5"]
([]) -> []
(["123", "456", "789"]) -> ["123", "456", "789"]
        }
    }
}

problem Generated/2305 {
code {
        func filter_digits_from_strings(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "123", "orange", "456", "grape"]) -> ["123", "456"]
(["1", "22", "333", "4444", "55555"]) -> ["1", "22", "333", "4444", "55555"]
(["a", "b", "c"]) -> []
(["11", "22", "adfsd"]) -> ["11", "22"]
([]) -> []
        }
    }
}

problem Generated/2306 {
code {
        func sort_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["abc", "123", "def", "456", "ghi"]) -> ["123", "456", "abc", "def", "ghi"]
(["abc", "def", "ghi"]) -> ["abc", "def", "ghi"]
([]) -> []
(["1", "2", "3"]) -> ["1", "2", "3"]
(["1", "2", "3", "a", "b"]) -> ["1", "2", "3", "a", "b"]
        }
    }
}

problem Generated/2307 {
code {
        func sort_numeric_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "123", "world", "456"]) -> ["hello", "world", "123", "456"]
(["a", "b", "c"]) -> ["a", "b", "c"]
(["abc", "123", "def", "456", "789"]) -> ["abc", "def", "123", "456", "789"]
(["1", "2", "3"]) -> ["1", "2", "3"]
([]) -> []
        }
    }
}

problem Generated/2308 {
code {
        func sort_list_of_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "1", "2", "3"]) -> ["hello", "world", "1", "2", "3"]
(["10", "9", "8", "7", "6", "5", "4", "3", "2", "1"]) -> ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
(["1", "2", "3", "world", "hello"]) -> ["hello", "world", "1", "2", "3"]
(["hello", "world"]) -> ["hello", "world"]
(["", "1", "hello"]) -> ["", "hello", "1"]
        }
    }
}

problem Generated/2309 {
code {
        func sort_integer_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["abc", "123", "45", "def", "678"]) -> ["45", "123", "678"]
(["5", "4", "10", "0", "2"]) -> ["0", "2", "4", "5", "10"]
([]) -> []
(["1", "2", "3", "4", "5"]) -> ["1", "2", "3", "4", "5"]
(["a", "b", "c"]) -> []
        }
    }
}

problem Generated/2310 {
code {
        func sort_strings_by_digit(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["123", "abc", "1", "def", "5"]) -> ["1", "5", "123", "abc", "def"]
(["a1", "b2", "c3", "d4", "e5"]) -> ["a1", "b2", "c3", "d4", "e5"]
(["3", "1", "2"]) -> ["1", "2", "3"]
(["abc", "def", "ghi"]) -> ["abc", "def", "ghi"]
(["123", "456", "789"]) -> ["123", "456", "789"]
        }
    }
}

problem Generated/2311 {
code {
        func get_all_numbers_from_strings(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["abc123", "def456", "ghi789"]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
(["abc", "def", "ghi"]) -> []
(["abc1", "2def", "gh3i"]) -> [1, 2, 3]
([]) -> []
(["123"]) -> [1, 2, 3]
        }
    }
}

problem Generated/2312 {
code {
        func convert_str_to_ascii(s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello World 1234") -> [49, 50, 51, 52]
("1234") -> [49, 50, 51, 52]
("Hello World") -> []
("") -> []
("1a2b3c4d") -> [49, 50, 51, 52]
        }
    }
}

problem Generated/2313 {
code {
        func convert_str_to_ascii(txt: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello 123") -> [49, 50, 51]
("12345") -> [49, 50, 51, 52, 53]
("no digits here") -> []
("1a2b3c") -> [49, 50, 51]
("3n1f4j5") -> [51, 49, 52, 53]
        }
    }
}

problem Generated/2314 {
code {
        func decrypt_message(message: string) -> string
    }
    tests {
        template nse {
            ("72 105 32 116 104 101 114 101") -> "Hi there"
("116 104 101 32 97 110 115 119 101 114 32 105 115 32 53") -> "the answer is 5"
("87 101 108 99 111 109 101 32 116 111 32 80 121 116 104 111 110") -> "Welcome to Python"
("73 32 99 97 110 32 67 111 100 101") -> "I can Code"
("49 50 51 52 53 54 55 56 57 48") -> "1234567890"
        }
    }
}

problem Generated/2315 {
code {
        func string_to_ascii(s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello World123") -> [49, 50, 51]
("Python3 is the best") -> [51]
("1234567890") -> [49, 50, 51, 52, 53, 54, 55, 56, 57, 48]
("") -> []
("abcxyz") -> []
        }
    }
}

problem Generated/2316 {
code {
        func decrypt_string(encrypted_s: string) -> string
    }
    tests {
        template nse {
            ("72 101 108 108 111 32 87 111 114 108 100") -> "Hello World"
("65 66 67 68 69 70") -> "ABCDEF"
("") -> ""
("70 108 97 107 101 32 83 97 110 100 119 105 99 104") -> "Flake Sandwich"
("105 116 115 32 50 48 50 48") -> "its 2020"
        }
    }
}

problem Generated/2317 {
code {
        func get_ascii_sum_of_numbers(input_s: string) -> int
    }
    tests {
        template nse {
            ("abc123") -> 150
("123abc") -> 150
("a1b2c3") -> 150
("") -> 0
("123") -> 150
        }
    }
}

problem Generated/2318 {
code {
        func convert_string_to_ascii(s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello123World456") -> [49, 50, 51, 52, 53, 54]
("12345") -> [49, 50, 51, 52, 53]
("a1b2c3d4e5") -> [49, 50, 51, 52, 53]
("Hello World!") -> []
("1!2@3#4$") -> [49, 50, 51, 52]
        }
    }
}

problem Generated/2319 {
code {
        func concatenate_ascii_digits(s: string) -> int
    }
    tests {
        template nse {
            ("abc123def456") -> 123456
("1a2b3c4d5e6f7g8h9i0j") -> 1234567890
("a!b@c#d$e%f^g&h*i(j)k") -> 0
("9") -> 9
("") -> 0
        }
    }
}

problem Generated/2320 {
code {
        func sum_of_digits_in_str(input_str: string) -> int
    }
    tests {
        template nse {
            ("hello123") -> 6
("abc123def") -> 6
("1a2b3c4d5e") -> 15
("") -> 0
("no_digits") -> 0
        }
    }
}

problem Generated/2321 {
code {
        func sum_ord_of_digits(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["abc123", "def456", "ghi789"]) -> [6, 15, 24]
(["123456789", "01234", "999"]) -> [45, 10, 27]
([]) -> []
(["abc", "def", "ghi"]) -> [0, 0, 0]
(["a1", "b2", "c3"]) -> [1, 2, 3]
        }
    }
}

problem Generated/2322 {
code {
        func check_all_strings_are_digits(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["12", "345", "6789"]) -> true
(["0", "00", "000", "0000"]) -> true
(["123", "45O", "6abc"]) -> false
(["1", "2", "3", "4", "5"]) -> true
([]) -> true
        }
    }
}

problem Generated/2323 {
code {
        func is_all_numeric(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["123", "456", "789"]) -> true
(["123", "4a6", "789"]) -> false
(["1", "2", "3", "4", "5"]) -> true
([]) -> true
(["0", "00", "000"]) -> true
        }
    }
}

problem Generated/2324 {
code {
        func check_if_all_elements_are_digits(elements: list<string>) -> bool
    }
    tests {
        template nse {
            (["123", "456", "789"]) -> true
(["12a", "45c6", "7.89"]) -> false
([]) -> true
(["123", "4 5 6", "789"]) -> false
(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]) -> true
        }
    }
}

problem Generated/2325 {
code {
        func check_all_digits(str_lst: list<string>) -> bool
    }
    tests {
        template nse {
            (["123", "456", "789"]) -> true
(["123", "4d6", "789"]) -> false
([]) -> true
(["123", "4567", "8", "90"]) -> true
(["12 3", "4.56", "789"]) -> false
        }
    }
}

problem Generated/2326 {
code {
        func is_all_nums(strs: list<string>) -> bool
    }
    tests {
        template nse {
            (["123", "456", "789"]) -> true
(["12a", "456", "789"]) -> false
(["12", "5 6", "789"]) -> false
(["1", "2", "3"]) -> true
([]) -> true
        }
    }
}

problem Generated/2327 {
code {
        func get_sum_of_numbers(txt: string) -> int
    }
    tests {
        template nse {
            ("Hello 123 World 45") -> 168
("I am 25 years old and 5 feet 11 inches tall") -> 41
("") -> 0
("Hello, World!") -> 0
("1 2 3 4 5") -> 15
        }
    }
}

problem Generated/2328 {
code {
        func sum_of_digits_in_num(sentence: string) -> int
    }
    tests {
        template nse {
            ("There are 5 apples and 12 bananas") -> 8
("The price is $15.99") -> 24
("3 horses and 2 cows in the field") -> 5
("1 2 3 4 5") -> 15
("No digits in this sentence") -> 0
        }
    }
}

problem Generated/2329 {
code {
        func find_sum_of_numbers_in_string(input_str: string) -> int
    }
    tests {
        template nse {
            ("Hello World! 123 456") -> 579
("I have 2 apples and 3 oranges") -> 5
("There are no numbers in this string") -> 0
("1 2 3 4 5") -> 15
("") -> 0
        }
    }
}

problem Generated/2330 {
code {
        func get_sum_of_numbers_in_string(s: string) -> int
    }
    tests {
        template nse {
            ("abc 123 def 456 ghi jkl 789") -> 1368
("12345") -> 12345
("") -> 0
("abc") -> 0
("1 2 3 4 5 6 7 8 9 10") -> 55
        }
    }
}

problem Generated/2331 {
code {
        func extract_digits_from_string(s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello 123 world 4 5") -> [123, 4, 5]
("1 2 3 4 5") -> [1, 2, 3, 4, 5]
("Python is the best 123") -> [123]
("No digits here") -> []
("") -> []
        }
    }
}

problem Generated/2332 {
code {
        func concatenate_digits(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["a", "b", "123", "c", "456"]) -> "123456"
(["12", "34", "a", "b", "c"]) -> "1234"
(["1", "2", "3", "4"]) -> "1234"
([]) -> ""
(["a", "b", "c"]) -> ""
(["1", "2", "3", "4", "5", "6", "7", "8", "9", "0"]) -> "1234567890"
        }
    }
}

problem Generated/2333 {
code {
        func join_only_digits(str_lst: list<string>) -> string
    }
    tests {
        template nse {
            (["123", "abc", "456"]) -> "123456"
(["1", "2", "3", "4", "5"]) -> "12345"
(["abc", "def", "ghi"]) -> ""
(["1", "2", "3", "4", "5", "6", "7", "8", "9", "0"]) -> "1234567890"
(["hello", "world", "123", "foo", "bar", "456"]) -> "123456"
        }
    }
}

problem Generated/2334 {
code {
        func join_digits_only_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["abc", "123", "def", "456", "789"]) -> "123456789"
(["abc", "def", "ghi"]) -> ""
(["123", "345", "678"]) -> "123345678"
(["Hello", "World", "2021"]) -> "2021"
(["1", "2", "3", "4", "5"]) -> "12345"
        }
    }
}

problem Generated/2335 {
code {
        func concatenate_digits(digits: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"], ",") -> "1,2,3,4,5"
(["1", "a", "2", "b", "3", "c", "4", "d", "5"], "-") -> "1-2-3-4-5"
(["a", "b", "c"], "") -> ""
([], ",") -> ""
(["1", "2", "3", "4", "5"], "") -> "12345"
        }
    }
}

problem Generated/2336 {
code {
        func join_digits(numbers: list<string>, sep: string) -> string
    }
    tests {
        template nse {
            (["123", "456", "789"], "-") -> "123-456-789"
(["12a3", "45.6", "7^89"], "") -> ""
(["12a3", "45.6", "789"], "") -> "789"
([], "-") -> ""
(["1", "2", "3"], "") -> "123"
        }
    }
}

problem Generated/2337 {
code {
        func join_digits(dat: list<string>) -> string
    }
    tests {
        template nse {
            (["abc1", "2def3", "4ghi"]) -> "1234"
(["1a2b", "3c4d", "5e6f"]) -> "123456"
(["abc", "def", "ghi"]) -> ""
(["1", "2", "3"]) -> "123"
(["a", "b", "c"]) -> ""
        }
    }
}

problem Generated/2338 {
code {
        func join_digits(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["ab", "12c", "d45ef"]) -> "1245"
(["1a2b3c4d"]) -> "1234"
([]) -> ""
(["abc", "def"]) -> ""
(["123", "45", "67"]) -> "1234567"
        }
    }
}

problem Generated/2339 {
code {
        func extract_digits_from_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["123", "45", "hello", "world", "678"]) -> ["123", "45", "678"]
(["abc", "def", "123"]) -> ["123"]
(["123", "ABCD", "efg"]) -> ["123"]
(["123", "", " "]) -> ["123"]
([]) -> []
        }
    }
}

problem Generated/2340 {
code {
        func find_lower_digit_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["abc", "123", "DEF", "456"]) -> ["123", "456"]
(["Abc", "123", "Def", "456"]) -> ["123", "456"]
(["abc", "def", "ghi", "jkl"]) -> []
(["ABCD", "1234", "efgh", "5678"]) -> ["1234", "5678"]
([]) -> []
        }
    }
}

problem Generated/2341 {
code {
        func filter_string_list(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["123", "abc", "456", "DEF"]) -> ["123", "456"]
(["1", "2", "3", "4", "5"]) -> ["1", "2", "3", "4", "5"]
(["123", "abc", "", "456", "DEF"]) -> ["123", "456"]
([]) -> []
(["a", "b", "c"]) -> []
        }
    }
}

problem Generated/2342 {
code {
        func extract_uppercase_digits(s: string) -> list<string>
    }
    tests {
        template nse {
            ("hello world 123") -> ["1", "2", "3"]
("ABCD1234") -> ["1", "2", "3", "4"]
("") -> []
("Hello! 123") -> ["1", "2", "3"]
("no digits here") -> []
        }
    }
}

problem Generated/2343 {
code {
        func uppercase_digit_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["abc", "123", "DEF", "456"]) -> ["abc", "123", "DEF", "456"]
(["abc", "123", "def", "456"]) -> ["abc", "123", "def", "456"]
(["123", "456"]) -> ["123", "456"]
([]) -> []
(["1", "22", "333", "4444"]) -> ["1", "22", "333", "4444"]
        }
    }
}

problem Generated/2344 {
code {
        func convert_and_filter(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["123", "456", "789", "abc", "DEF"]) -> [123, 456, 789]
(["1", "2", "3", "", "4", "a", "B", "c"]) -> [1, 2, 3, 4]
([]) -> []
(["123456789"]) -> [123456789]
(["", " ", "  ", "1"]) -> [1]
        }
    }
}

problem Generated/2345 {
code {
        func extract_numbers_from_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["123", "456", "789"]) -> ["123", "456", "789"]
(["abc", "def", "123"]) -> ["123"]
(["", "1234", "hello"]) -> ["1234"]
(["12 34", "8a8", "b1b"]) -> []
(["999", "3e4", "1.2"]) -> ["999"]
        }
    }
}

problem Generated/2346 {
code {
        func filter_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "WORLD", "this", "is", "123"]) -> ["hello", "this", "is"]
(["", "hi", "bye", "12", "abcd"]) -> ["hi", "bye", "abcd"]
(["This", "iS", "a", "Test"]) -> ["a"]
(["1", "2", "3", "four", "5"]) -> ["four"]
([]) -> []
        }
    }
}

problem Generated/2347 {
code {
        func filter_uppercase_digits(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "123", "WORLD", "456"]) -> ["123", "WORLD", "456"]
(["This", "is", "a", "Test"]) -> []
(["123", "456", "789"]) -> ["123", "456", "789"]
(["HELLO", "WORLD", "123"]) -> ["HELLO", "WORLD", "123"]
(["1", "2", "3", "a", "b", "c"]) -> ["1", "2", "3"]
        }
    }
}

problem Generated/2348 {
code {
        func filter_string_based_on_cond(strs: list<string>, c: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "WORLD", "123", "456"], "123") -> ["123", "456"]
(["hello", "WORLD", "123", "456"], "ABC") -> ["WORLD"]
(["hello", "WORLD", "123", "456"], "world") -> []
(["hello"], "123") -> []
(["123"], "") -> ["123"]
        }
    }
}

problem Generated/2349 {
code {
        func get_uppercase_digits(s: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello, 123 World!") -> ["1", "2", "3"]
("H3LLO W0RLD") -> ["3", "0"]
("Testing 123") -> ["1", "2", "3"]
("") -> []
("Hello_World_123") -> ["1", "2", "3"]
        }
    }
}

problem Generated/2350 {
code {
        func count_strings_starting_with_digit(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["123abc", "456def", "789ghi"]) -> 3
(["1", "2", "3"]) -> 3
(["abc123", "def456", "ghi789"]) -> 0
(["", "1abc", "2def"]) -> 2
([]) -> 0
        }
    }
}

problem Generated/2351 {
code {
        func count_digits_in_list(words: list<string>) -> int
    }
    tests {
        template nse {
            (["hello", "world", "123"]) -> 3
(["1", "22", "333", "4444"]) -> 10
([]) -> 0
(["abc", "def", "ghi"]) -> 0
(["1a2b3c", "4d5e6f", "7g8h9i"]) -> 9
        }
    }
}

problem Generated/2352 {
code {
        func count_numbers_in_list(elements: list<string>) -> int
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "hello"]) -> 4
(["Hey", "there", "how", "are", "you?"]) -> 0
(["We", "have", "123", "students", "this", "year"]) -> 1
([]) -> 0
(["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]) -> 10
        }
    }
}

problem Generated/2353 {
code {
        func extract_numbers_from_strings(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["hello 123 world", "456"]) -> [123, 456]
(["test 123", "string", "456 is a number"]) -> [123, 456]
(["12", "3", "45", "6"]) -> [12, 3, 45, 6]
(["no numbers here", "just", "some", "words"]) -> []
(["123 456 789", "0 1 2 3 4", " 5 6 7 8 9"]) -> [123, 456, 789, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        }
    }
}

problem Generated/2354 {
code {
        func extract_all_digits(input_str: string) -> list<int>
    }
    tests {
        template nse {
            ("abc123def456") -> [1, 2, 3, 4, 5, 6]
("1a2b3c4d5e6") -> [1, 2, 3, 4, 5, 6]
("no digits here") -> []
("") -> []
(" 1 2 3 4 5 6 ") -> [1, 2, 3, 4, 5, 6]
        }
    }
}

problem Generated/2355 {
code {
        func extract_numbers_from_string(s: string) -> list<int>
    }
    tests {
        template nse {
            ("abc 123 def 456 ghi 789") -> [123, 456, 789]
("I have 2 apples and 3 bananas") -> [2, 3]
("No numbers here") -> []
("1234567890") -> [1234567890]
("") -> []
        }
    }
}

problem Generated/2356 {
code {
        func get_all_numbers_from_string(input_str: string) -> list<int>
    }
    tests {
        template nse {
            ("There are 2 apples and 3 oranges in the basket") -> [2, 3]
("There are no numbers in this string") -> []
("10 20 30 40 50") -> [10, 20, 30, 40, 50]
("") -> []
("The answer is 42") -> [42]
        }
    }
}

problem Generated/2357 {
code {
        func extract_digits_from_string(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> []
("Hello1234") -> [1, 2, 3, 4]
("1a2b3c4d5e") -> [1, 2, 3, 4, 5]
("") -> []
("abc") -> []
        }
    }
}

problem Generated/2358 {
code {
        func extract_numbers_from_strings(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["123", "456", "789"]) -> [123, 456, 789]
(["1", "2", "three", "4", "5"]) -> [1, 2, 4, 5]
(["a", "@", "3", "&", "$", "5"]) -> [3, 5]
([]) -> []
(["1.1", "2", "3.5", "4", "5.8"]) -> [2, 4]
        }
    }
}

problem Generated/2359 {
code {
        func get_digits_from_string(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello world 123") -> [1, 2, 3]
("hello 1234") -> [1, 2, 3, 4]
("no digits here") -> []
("") -> []
("9876543210") -> [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
        }
    }
}

problem Generated/2360 {
code {
        func remove_digits(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "1234"]) -> ["hello", "world"]
(["1234"]) -> []
(["hi", "1234"]) -> ["hi"]
([]) -> []
(["1", "2", "3"]) -> []
        }
    }
}

problem Generated/2361 {
code {
        func sort_list_of_numeric_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"]) -> ["1", "2", "3", "4", "5"]
(["10", "2", "5", "100", "1"]) -> ["1", "2", "5", "10", "100"]
(["5", "a", "3", "b", "1"]) -> ["1", "3", "5", "a", "b"]
(["123", "456", "789"]) -> ["123", "456", "789"]
([""]) -> [""]
        }
    }
}

problem Generated/2362 {
code {
        func get_index_of_digit(txt: string) -> list<int>
    }
    tests {
        template nse {
            ("abc123") -> [3, 4, 5]
("UNICORN") -> []
("123") -> [0, 1, 2]
("We are the champions, my friends!") -> []
("") -> []
        }
    }
}

problem Generated/2363 {
code {
        func get_indexes_of_numbers(items: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["1", "2", "3", "a", "b", "c"]) -> [0, 1, 2]
(["a", "b", "c", "4", "5", "6"]) -> [3, 4, 5]
(["x", "y", "z"]) -> []
(["1", "2", "3", "4", "5", "6"]) -> [0, 1, 2, 3, 4, 5]
([]) -> []
        }
    }
}

problem Generated/2364 {
code {
        func reverse_string_of_digits(s: string) -> string
    }
    tests {
        template nse {
            ("abc123def456") -> "abc654def321"
("1234") -> "4321"
("a1b2c3d4e5") -> "a5b4c3d2e1"
("") -> ""
("hello world") -> "hello world"
        }
    }
}

problem Generated/2365 {
code {
        func copy_integer_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "456"]) -> ["123", "456", "hello", "world", "123", "456"]
(["123", "456", "789"]) -> ["123", "456", "789", "123", "456", "789"]
(["9", "8", "7", "6", "5", "4", "3", "2", "1", "0"]) -> ["9", "8", "7", "6", "5", "4", "3", "2", "1", "0", "9", "8", "7", "6", "5", "4", "3", "2", "1", "0"]
([]) -> []
(["hello", "world"]) -> ["hello", "world"]
        }
    }
}

problem Generated/2366 {
code {
        func copy_and_remove_non_digits(input_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"]) -> ["1", "2", "3", "4", "5"]
(["1", "2", "a", "b", "c"]) -> ["1", "2"]
([]) -> []
(["abc", "def", "123", "456"]) -> ["123", "456"]
(["1234", "5678", "90"]) -> ["1234", "5678", "90"]
(["1", "2", "", "3"]) -> ["1", "2", "3"]
        }
    }
}

problem Generated/2367 {
code {
        func copy_and_remove_non_digits(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["1234", "56", "abc", "789"]) -> ["1234", "56", "789"]
(["1a2b3c4d5e6f7g8h9i", "23", "4"]) -> ["23", "4"]
(["Hello", "World"]) -> []
([]) -> []
(["-123", "0", "1.23"]) -> ["0"]
        }
    }
}

problem Generated/2368 {
code {
        func copy_list_with_only_digits(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "456", "789"]) -> ["123", "456", "789"]
(["hello", "world"]) -> []
(["123", "456", "789"]) -> ["123", "456", "789"]
([]) -> []
(["12", "34"]) -> ["12", "34"]
        }
    }
}

problem Generated/2369 {
code {
        func filter_only_digit_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["some", "1", "2", "3"]) -> ["1", "2", "3"]
(["1", "2", "3"]) -> ["1", "2", "3"]
(["some", "text", "with", "no", "digits"]) -> []
(["", "1", "2", "3"]) -> ["1", "2", "3"]
(["1", "2", "3", ""]) -> ["1", "2", "3"]
        }
    }
}

problem Generated/2370 {
code {
        func copy_and_remove_non_digits(input_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"]) -> ["1", "2", "3", "4", "5"]
(["one", "2", "three", "4", "five"]) -> ["2", "4"]
([]) -> []
(["1", "2", "3", "4", "5", "-6", "+7"]) -> ["1", "2", "3", "4", "5"]
(["", " ", "a", "1", "B", "c", "4"]) -> ["1", "4"]
        }
    }
}

problem Generated/2371 {
code {
        func get_count_of_unique_digits(input_s: string) -> int
    }
    tests {
        template nse {
            ("hello123world") -> 3
("12345") -> 5
("a1b2c3d4e5") -> 5
("abcd") -> 0
("1a2b3c4d5e") -> 5
        }
    }
}

problem Generated/2372 {
code {
        func get_unique_digits(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello123") -> [1, 2, 3]
("a1b2c3d4e5") -> [1, 2, 3, 4, 5]
("no_digits_here") -> []
("1111111111") -> [1]
("abc 123 xyz 456") -> [1, 2, 3, 4, 5, 6]
        }
    }
}

problem Generated/2373 {
code {
        func sum_of_integer_strings(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"]) -> 15
(["10", "20", "30", "40", "50"]) -> 150
(["abc", "def", "123", "456"]) -> 579
(["1.0", "2.0", "3.0", "4.0", "5.0"]) -> 0
([]) -> 0
        }
    }
}

problem Generated/2374 {
code {
        func sum_of_numerical_strings(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["12", "34", "56"]) -> 102
(["1a", "2b", "3c"]) -> 0
(["1", "2", "3"]) -> 6
(["1.2", "3.4", "5.6"]) -> 0
(["10", "20", "30", "40"]) -> 100
        }
    }
}

problem Generated/2375 {
code {
        func average_of_numbers_in_string(s: string) -> double
    }
    tests {
        template nse {
            ("The price of an apple is 4 dollars and 25 cents") -> 14.0
("Good morning! 22 3 4") -> 9.0
("2022 is coming soon") -> 2022.0
("Hello world") -> 0.0
("") -> 0.0
        }
    }
}

problem Generated/2376 {
code {
        func sum_of_numbers_in_string(txt: string) -> int
    }
    tests {
        template nse {
            ("hello123world456") -> 579
("1a2b3c4d5e") -> 15
("no_numbers_here") -> 0
("") -> 0
("123 456 789") -> 1368
        }
    }
}

problem Generated/2377 {
code {
        func average_of_numbers_in_string(s: string) -> int
    }
    tests {
        template nse {
            ("There are 3 monkeys in the tree and 2 bananas on the floor") -> 2
("The price of the apple is 10 and that of the orange is 20") -> 15
("The quick brown fox jumps over the lazy dog") -> 0
("a1b2c3d4e5f6") -> 3
("1234") -> 1234
        }
    }
}

problem Generated/2378 {
code {
        func sum_numbers_in_string(s: string) -> int
    }
    tests {
        template nse {
            ("hello 123 world 456") -> 579
("I have 3 apples and 5 bananas") -> 8
("The answer to life, the universe and everything is 42") -> 42
("No numbers here") -> 0
("") -> 0
        }
    }
}

problem Generated/2379 {
code {
        func count_non_digit_strings(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["123", "456", "789"]) -> 0
(["abc", "def", "ghi"]) -> 3
(["abc", "123", "def", "789"]) -> 2
(["123"]) -> 0
([]) -> 0
        }
    }
}

problem Generated/2380 {
code {
        func multiply_numbers_in_string(input_str: string) -> int
    }
    tests {
        template nse {
            ("5x3x4") -> 60
("x3x4") -> 12
("x3x4y2") -> 24
("1") -> 1
("abc") -> 1
        }
    }
}

problem Generated/2381 {
code {
        func sum_of_integer_strings(string_lst: list<string>) -> int
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"]) -> 15
(["1", "2", "3", "a", "5"]) -> 11
(["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]) -> 55
(["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "a", "b", "c"]) -> 55
([]) -> 0
        }
    }
}

problem Generated/2382 {
code {
        func multiply_digits(s: string) -> int
    }
    tests {
        template nse {
            ("abc123def456") -> 720
("13a2b4c") -> 24
("i love programming") -> 0
("1 23 45 6") -> 720
("11") -> 1
        }
    }
}

problem Generated/2383 {
code {
        func sum_numbers_in_strings(txt: string) -> int
    }
    tests {
        template nse {
            ("The price of the item is $123.45") -> 168
("The year is 2022") -> 2022
("The 22nd of the month is today") -> 22
("No numbers in this string") -> 0
("1 2 3 4 5 6 7 8 9 10") -> 55
        }
    }
}

problem Generated/2384 {
code {
        func concatenate_digit_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["abc", "123", "def", "456", "ghi"]) -> "123456"
(["1", "2", "3", "4"]) -> "1234"
(["12", "345", "6789", "0"]) -> "1234567890"
(["a", "b", "c", "de", "fg"]) -> ""
([]) -> ""
        }
    }
}

problem Generated/2385 {
code {
        func split_string_and_return_numbers(input_s: string) -> list<int>
    }
    tests {
        template nse {
            ("abc123def456gh") -> [123, 456]
("1abc23def45gh") -> [1, 23, 45]
("a1b2c3d4e5") -> [1, 2, 3, 4, 5]
("a9b8c7d6e5") -> [9, 8, 7, 6, 5]
("12345") -> [12345]
        }
    }
}

problem Generated/2386 {
code {
        func split_string_on_digits(txt: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello 123 World") -> ["Hello ", "123", " World"]
("") -> []
("1,2,3,4,5") -> ["1", ",", "2", ",", "3", ",", "4", ",", "5"]
("H3ll0 W0rld") -> ["H", "3", "ll", "0", " W", "0", "rld"]
("The quick brown fox jumps over the lazy dog.") -> ["The quick brown fox jumps over the lazy dog."]
        }
    }
}

problem Generated/2387 {
code {
        func split_string_on_digits(s: string) -> list<string>
    }
    tests {
        template nse {
            ("hello123world456") -> ["hello", "123", "world", "456"]
("abc") -> ["abc"]
("123") -> ["123"]
("a1b2c3") -> ["a", "1", "b", "2", "c", "3"]
("a1b2c3d") -> ["a", "1", "b", "2", "c", "3", "d"]
        }
    }
}

problem Generated/2388 {
code {
        func split_string_and_filter_numbers(input_s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello 123 World 456!") -> [123, 456]
("1 2 3 4 5") -> [1, 2, 3, 4, 5]
("This string has no numbers") -> []
("") -> []
(" 22 11 # $% 33") -> [22, 11, 33]
        }
    }
}

problem Generated/2389 {
code {
        func split_string_on_digit(s: string) -> list<string>
    }
    tests {
        template nse {
            ("a1b2c3d") -> ["a", "1", "b", "2", "c", "3", "d"]
("1a2b3") -> ["1", "a", "2", "b", "3"]
("abcde") -> ["abcde"]
("a1b2c3d") -> ["a", "1", "b", "2", "c", "3", "d"]
("") -> []
        }
    }
}

problem Generated/2390 {
code {
        func split_string_and_filter(phrase: string, min_len: int) -> list<string>
    }
    tests {
        template nse {
            ("I have 2 apples and 3 bananas", 1) -> ["2", "3"]
("1000 dances with 1234 wolves", 2) -> ["1000", "1234"]
("Apple Cherry Berry", 3) -> []
("This text has no numbers", 2) -> []
("3", 1) -> ["3"]
        }
    }
}

problem Generated/2391 {
code {
        func split_string_on_digits(s: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello1234World") -> ["Hello", "World"]
("12Hello1234World45") -> ["Hello", "World"]
("12345") -> []
("HelloWorld") -> ["HelloWorld"]
("1") -> []
        }
    }
}

problem Generated/2392 {
code {
        func split_string_and_filter_digits(s: string) -> list<int>
    }
    tests {
        template nse {
            ("abc123def456") -> [123, 456]
("a1b2c3d4e5f6") -> [1, 2, 3, 4, 5, 6]
("abc") -> []
("12345") -> [12345]
("Hello World 123") -> [123]
        }
    }
}

problem Generated/2393 {
code {
        func get_words_starting_with_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "") -> ["apple", "banana", "cherry", "date"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "pqr") -> []
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
        }
    }
}

problem Generated/2394 {
code {
        func get_matching_words(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
(["apple", "banana", "cherry", "date"], "e") -> []
        }
    }
}

problem Generated/2395 {
code {
        func get_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date", "elderberry"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date", "elderberry"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date", "elderberry"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date", "elderberry"], "") -> ["apple", "banana", "cherry", "date", "elderberry"]
([], "a") -> []
        }
    }
}

problem Generated/2396 {
code {
        func count_words_starting_with_prefix(words: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> 1
(["apple", "banana", "cherry", "date"], "d") -> 1
(["apple", "banana", "cherry", "date"], "c") -> 1
(["apple", "banana", "cherry", "date"], "e") -> 0
(["apple", "banana", "cherry", "date"], "ca") -> 0
        }
    }
}

problem Generated/2397 {
code {
        func get_sublist_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "avocado", "berry"], "a") -> ["apple", "avocado"]
(["apple", "banana", "avocado", "berry"], "b") -> ["banana", "berry"]
(["apple", "banana", "avocado", "berry"], "c") -> []
(["apple", "avocado", "apple", "berry"], "apple") -> ["apple", "apple"]
([], "prefix") -> []
(["prefix", "notprefix", "prefixnot"], "prefix") -> ["prefix", "prefixnot"]
        }
    }
}

problem Generated/2398 {
code {
        func get_starting_with(words: list<string>, letter: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "kiwi", "mango"], "a") -> ["apple"]
(["apple", "banana", "cherry", "kiwi", "mango"], "b") -> ["banana"]
(["apple", "banana", "cherry", "kiwi", "mango"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "kiwi", "mango"], "k") -> ["kiwi"]
(["apple", "banana", "cherry", "kiwi", "mango"], "m") -> ["mango"]
        }
    }
}

problem Generated/2399 {
code {
        func get_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hi", "there"], "h") -> ["hello", "hi"]
(["hello", "world", "hi", "there"], "w") -> ["world"]
(["hello", "world", "hi", "there"], "t") -> ["there"]
([], "h") -> []
(["hello", "world", "hi", "there"], "") -> ["hello", "world", "hi", "there"]
        }
    }
}

problem Generated/2400 {
code {
        func get_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "avocado"], "a") -> ["apple", "apricot", "avocado"]
(["apple", "banana", "apricot", "avocado"], "b") -> ["banana"]
(["apple", "banana", "apricot", "avocado"], "c") -> []
(["apple", "banana", "apricot", "avocado"], "") -> ["apple", "banana", "apricot", "avocado"]
([], "a") -> []
        }
    }
}

problem Generated/2401 {
code {
        func get_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "e") -> []
(["apple", "banana", "cherry", "date"], "") -> ["apple", "banana", "cherry", "date"]
        }
    }
}

problem Generated/2402 {
code {
        func find_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "pear", "grape"], "a") -> ["apple"]
(["apple", "banana", "orange", "pear", "grape"], "b") -> ["banana"]
(["apple", "banana", "orange", "pear", "grape"], "") -> ["apple", "banana", "orange", "pear", "grape"]
(["apple", "banana", "orange", "pear", "grape"], "pe") -> ["pear"]
([], "a") -> []
        }
    }
}

problem Generated/2403 {
code {
        func filter_strings_starting_with(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "durian"], "a") -> ["apple"]
(["apple", "banana", "cherry", "durian"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "durian"], "b") -> ["banana"]
(["apple", "banana", "cherry", "durian"], "") -> ["apple", "banana", "cherry", "durian"]
([], "a") -> []
        }
    }
}

problem Generated/2404 {
code {
        func filter_strings_starting_with(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "avocado", "grape", "orange"], "a") -> ["apple", "avocado"]
(["apple", "banana", "avocado", "grape", "orange"], "g") -> ["grape"]
(["apple", "banana", "avocado", "grape", "orange"], "e") -> []
([], "a") -> []
([""], "") -> []
        }
    }
}

problem Generated/2405 {
code {
        func find_matching_prefix(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["flower", "flow", "flight"]) -> "fl"
(["dog", "racecar", "car"]) -> ""
(["dog", "doggy", "do"]) -> "do"
(["cat", "cat", "cat"]) -> "cat"
(["car", "cartoon", "card"]) -> "car"
        }
    }
}

problem Generated/2406 {
code {
        func get_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "") -> ["apple", "banana", "cherry", "date"]
(["apple", "banana", "cherry", "date"], "grape") -> []
        }
    }
}

problem Generated/2407 {
code {
        func find_words_starting_with_vowel(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Ball", "cat", "Elephant", "fan", "goat", "Igloo"]) -> ["apple", "Elephant", "Igloo"]
(["", "Ball", "cat", "Elephant", "fan", "goat", "Igloo"]) -> ["Elephant", "Igloo"]
([]) -> []
(["apple", "Ball", "cat", "Elephant", "fan", "goat", "igloo"]) -> ["apple", "Elephant", "igloo"]
(["apple", "Ball", "cat", "Elephant", "fan", "goat", "Igloo", "Oval"]) -> ["apple", "Elephant", "Igloo", "Oval"]
        }
    }
}

problem Generated/2408 {
code {
        func find_elements_starting_with_string(elements: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "pear", "avocado"], "a") -> ["apple", "apricot", "avocado"]
(["apple", "banana", "apricot", "pear", "avocado"], "b") -> ["banana"]
(["cat", "dog", "elephant", "giraffe"], "e") -> ["elephant"]
([], "a") -> []
(["abc", "def", "ghi", "jkl"], "") -> ["abc", "def", "ghi", "jkl"]
        }
    }
}

problem Generated/2409 {
code {
        func get_longest_string_starting_with_prefix(strs: list<string>, pre: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "avocado", "orange"], "a") -> "apricot"
(["apple", "banana", "apricot", "avocado", "orange"], "o") -> "orange"
(["apple", "banana", "apricot", "avocado", "orange"], "b") -> "banana"
([], "a") -> ""
(["hello", "world", "this", "is", "a", "test"], "t") -> "this"
        }
    }
}

problem Generated/2410 {
code {
        func get_longest_prefix(words: list<string>) -> string
    }
    tests {
        template nse {
            (["flower", "flow", "flight"]) -> "fl"
(["dog", "racecar", "car"]) -> ""
(["apple", "ape", "april"]) -> "ap"
([]) -> ""
(["abc"]) -> "abc"
        }
    }
}

problem Generated/2411 {
code {
        func find_shortest_starting_with(elements: list<string>, pre: string) -> string
    }
    tests {
        template nse {
            (["abcd", "ab", "abcde", "a"], "a") -> "a"
(["abcd", "ab", "abcde", "a"], "ab") -> "ab"
(["abcd", "ab", "abcde", "a"], "abc") -> "abcd"
(["abcd", "ab", "abcde", "a"], "abcd") -> "abcd"
(["abcd", "ab", "abcde", "a"], "e") -> ""
        }
    }
}

problem Generated/2412 {
code {
        func filter_strings_starting_with_given_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "orange"], "a") -> ["apple"]
(["apple", "banana", "cherry", "orange"], "b") -> ["banana"]
([], "c") -> []
(["cat", "dog", "cow", "camel"], "ca") -> ["cat", "camel"]
(["cat", "dog", "cow", "camel"], "d") -> ["dog"]
        }
    }
}

problem Generated/2413 {
code {
        func filter_names_starting_with(names: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["John Smith", "Jane Doe", "James Johnson", "Amy White"], "J") -> ["John Smith", "Jane Doe", "James Johnson"]
(["John Smith", "Jane Doe", "James Johnson", "Amy White"], "A") -> ["Amy White"]
(["John Smith", "Jane Doe", "James Johnson", "Amy White"], "K") -> []
([], "A") -> []
(["One", "Two", "Three"], "") -> ["One", "Two", "Three"]
        }
    }
}

problem Generated/2414 {
code {
        func get_strings_starting_with(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "z") -> []
([], "a") -> []
        }
    }
}

problem Generated/2415 {
code {
        func get_matching_prefix(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["flower", "flow", "flight"]) -> "fl"
(["dog", "racecar", "car"]) -> ""
(["apple", "ape", "apartment"]) -> "ap"
(["", "abc", "abcdef"]) -> ""
(["abcd", "ab", "abcdef", "abcde"]) -> "ab"
        }
    }
}

problem Generated/2416 {
code {
        func find_matching_prefixes(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "pear", "peach"], "ap") -> ["apple", "apricot"]
(["apple", "banana", "apricot", "pear", "peach"], "pe") -> ["pear", "peach"]
(["apple", "banana", "apricot", "pear", "peach"], "") -> ["apple", "banana", "apricot", "pear", "peach"]
([], "ap") -> []
(["apple", "banana", "apricot", "pear", "peach"], "pl") -> []
        }
    }
}

problem Generated/2417 {
code {
        func find_common_prefix(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["flower", "flow", "flight"]) -> "fl"
(["dog", "racecar", "car"]) -> ""
([]) -> ""
(["hello", "hello world", "hello everyone"]) -> "hello"
(["apple", "ape", "april"]) -> "ap"
        }
    }
}

problem Generated/2418 {
code {
        func get_matching_prefixes(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "orange", "grapefruit"], "a") -> ["apple", "apricot"]
(["apple", "banana", "apricot", "orange", "grapefruit"], "b") -> ["banana"]
(["apple", "banana", "apricot", "orange", "grapefruit"], "g") -> ["grapefruit"]
(["apple", "banana", "apricot", "orange", "grapefruit"], "") -> ["apple", "banana", "apricot", "orange", "grapefruit"]
(["apple", "banana", "apricot", "orange", "grapefruit"], "kiwi") -> []
        }
    }
}

problem Generated/2419 {
code {
        func get_items_starting_with(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "apricot"], "a") -> ["apple", "apricot"]
(["apple", "banana", "cherry", "apricot"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "apricot"], "b") -> ["banana"]
(["apple", "banana", "cherry", "apricot"], "d") -> []
(["apple", "banana", "cherry", "apricot"], "") -> ["apple", "banana", "cherry", "apricot"]
        }
    }
}

problem Generated/2420 {
code {
        func get_words_starting_with_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "durian", "elderberry"], "b") -> ["banana"]
(["apple", "banana", "cherry", "durian", "elderberry"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "durian", "elderberry"], "e") -> ["elderberry"]
(["apple", "banana", "cherry", "durian", "elderberry"], "f") -> []
(["apple", "banana", "cherry", "durian", "elderberry"], "") -> ["apple", "banana", "cherry", "durian", "elderberry"]
        }
    }
}

problem Generated/2421 {
code {
        func find_substrings_starting_with_given_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "orange"], "a") -> ["apple"]
(["apple", "banana", "cherry", "orange"], "b") -> ["banana"]
(["apple", "banana", "cherry", "orange"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "orange"], "d") -> []
(["apple", "banana", "cherry", "orange"], "o") -> ["orange"]
        }
    }
}

problem Generated/2422 {
code {
        func filter_startswith(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "kiwi"], "a") -> ["apple"]
(["apple", "banana", "orange", "kiwi"], "b") -> ["banana"]
(["apple", "banana", "orange", "kiwi"], "k") -> ["kiwi"]
(["apple", "banana", "orange", "kiwi"], "z") -> []
([], "a") -> []
        }
    }
}

problem Generated/2423 {
code {
        func get_words_starting_with(string_lst: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date", "elderberry"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date", "elderberry"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date", "elderberry"], "e") -> ["elderberry"]
(["apple", "banana", "cherry", "date", "elderberry"], "z") -> []
([], "b") -> []
        }
    }
}

problem Generated/2424 {
code {
        func get_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "kiwi", "orange", "pear"], "a") -> ["apple"]
(["apple", "banana", "kiwi", "orange", "pear"], "b") -> ["banana"]
(["apple", "banana", "kiwi", "orange", "pear"], "k") -> ["kiwi"]
(["apple", "banana", "kiwi", "orange", "pear"], "p") -> ["pear"]
(["apple", "banana", "kiwi", "orange", "pear"], "m") -> []
        }
    }
}

problem Generated/2425 {
code {
        func find_strings_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hi", "there"], "h") -> ["hello", "hi"]
(["hello", "world", "hi", "there"], "w") -> ["world"]
(["hello", "world", "hi", "there"], "x") -> []
(["abc", "abcd", "abcde", "abcdef", "abcdefg"], "abcd") -> ["abcd", "abcde", "abcdef", "abcdefg"]
(["abc", "abcd", "abcde", "abcdef", "abcdefg"], "") -> ["abc", "abcd", "abcde", "abcdef", "abcdefg"]
        }
    }
}

problem Generated/2426 {
code {
        func find_strings(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "orange", "pear"], "a") -> ["apple"]
(["apple", "banana", "cherry", "orange", "pear"], "b") -> ["banana"]
(["apple", "banana", "cherry", "orange", "pear"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "orange", "pear"], "p") -> ["pear"]
(["apple", "banana", "cherry", "orange", "pear"], "x") -> []
        }
    }
}

problem Generated/2427 {
code {
        func find_matching_prefixes(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hey", "hi"], "h") -> ["hello", "hey", "hi"]
(["hello", "world", "hey", "hi"], "he") -> ["hello", "hey"]
(["hello", "world", "hey", "hi"], "w") -> ["world"]
(["hello", "world", "hey", "hi"], "z") -> []
([], "h") -> []
        }
    }
}

problem Generated/2428 {
code {
        func find_words_starting_with(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "orange", "kiwi"], "a") -> ["apple", "apricot"]
(["apple", "banana", "apricot", "orange", "kiwi"], "b") -> ["banana"]
(["apple", "banana", "apricot", "orange", "kiwi"], "c") -> []
([], "a") -> []
([], "") -> []
        }
    }
}

problem Generated/2429 {
code {
        func get_all_words_starting_with(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "avocado", "orange", "apricot"], "a") -> ["apple", "apricot", "avocado"]
(["apple", "banana", "avocado", "orange", "apricot"], "b") -> ["banana"]
(["apple", "banana", "avocado", "orange", "apricot"], "") -> ["apple", "apricot", "avocado", "banana", "orange"]
(["apple", "banana", "avocado", "orange", "apricot"], "x") -> []
(["apple", "banana", "Avocado", "orange", "apricot"], "a") -> ["apple", "apricot"]
        }
    }
}

problem Generated/2430 {
code {
        func filter_string_list_based_on_prefix(elements: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "grape", "cherry"], "a") -> ["apple"]
(["apple", "banana", "orange", "grape", "cherry"], "g") -> ["grape"]
(["apple", "banana", "orange", "grape", "cherry"], "c") -> ["cherry"]
(["apple", "banana", "orange", "grape", "cherry"], "") -> ["apple", "banana", "orange", "grape", "cherry"]
([], "a") -> []
        }
    }
}

problem Generated/2431 {
code {
        func filter_string_based_on_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
(["apple", "banana", "cherry", "date"], "e") -> []
(["a", "aa", "aaa", "aaaa"], "aa") -> ["aa", "aaa", "aaaa"]
        }
    }
}

problem Generated/2432 {
code {
        func filter_by_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date", "elderberry"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date", "elderberry"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date", "elderberry"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date", "elderberry"], "d") -> ["date"]
(["apple", "banana", "cherry", "date", "elderberry"], "e") -> ["elderberry"]
        }
    }
}

problem Generated/2433 {
code {
        func filter_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "durian"], "a") -> ["apple"]
(["apple", "banana", "cherry", "durian"], "") -> ["apple", "banana", "cherry", "durian"]
(["apple", "banana", "cherry", "durian"], "d") -> ["durian"]
([], "a") -> []
(["cat", "dog", "bat", "mat"], "b") -> ["bat"]
        }
    }
}

problem Generated/2434 {
code {
        func filter_strings_starting_with_prefix(str_lst: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "pear"], "a") -> ["apple"]
(["apple", "banana", "orange", "pear"], "b") -> ["banana"]
(["apple", "banana", "orange", "pear"], "p") -> ["pear"]
(["apple", "banana", "orange", "pear"], "z") -> []
([], "a") -> []
        }
    }
}

problem Generated/2435 {
code {
        func filter_string_by_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date", "elderberry"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date", "elderberry"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date", "elderberry"], "") -> ["apple", "banana", "cherry", "date", "elderberry"]
(["apple", "banana", "cherry", "date", "elderberry"], "z") -> []
([], "a") -> []
        }
    }
}

problem Generated/2436 {
code {
        func filter_string_based_on_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hi", "hey", "holla"], "h") -> ["hello", "hi", "hey", "holla"]
(["hello", "world", "hi", "hey", "holla"], "w") -> ["world"]
(["hello", "world", "hi", "hey", "holla"], "ho") -> ["holla"]
(["hello", "world", "hi", "hey", "holla"], "z") -> []
([], "") -> []
        }
    }
}

problem Generated/2437 {
code {
        func filter_string_list(strs: list<string>, target: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "pear", "mango"], "a") -> ["apple"]
(["apple", "banana", "orange", "pear", "mango"], "b") -> ["banana"]
(["apple", "banana", "orange", "pear", "mango"], "m") -> ["mango"]
([], "a") -> []
(["apple", "banana", "orange", "pear", "mango"], "") -> ["apple", "banana", "orange", "pear", "mango"]
        }
    }
}

problem Generated/2438 {
code {
        func filter_string_starting_with(strs: list<string>, pattern: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "how", "are", "you"], "h") -> ["hello", "how"]
(["hello", "world", "how", "are", "you"], "w") -> ["world"]
(["hello", "world", "how", "are", "you"], "z") -> []
(["hello", "world", "how", "are", "you"], "") -> ["hello", "world", "how", "are", "you"]
([], "h") -> []
        }
    }
}

problem Generated/2439 {
code {
        func sort_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "grape", "avocado"], "a") -> ["apple", "apricot", "avocado"]
(["apple", "banana", "apricot", "grape", "avocado"], "b") -> ["banana"]
(["apple", "banana", "apricot", "grape", "avocado"], "") -> ["apple", "apricot", "avocado", "banana", "grape"]
(["apple", "banana", "apricot", "grape", "avocado"], "c") -> []
([], "a") -> []
        }
    }
}

problem Generated/2440 {
code {
        func sort_words_starting_with(words: list<string>, letter: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "mango", "grape"], "a") -> ["apple"]
(["apple", "banana", "orange", "mango", "grape"], "b") -> ["banana"]
(["apple", "banana", "orange", "mango", "grape"], "c") -> []
(["dog", "cat", "cow", "elephant", "giraffe"], "c") -> ["cat", "cow"]
(["a", "ab", "ac", "ba", "bc", "ca", "cb"], "a") -> ["a", "ab", "ac"]
        }
    }
}

problem Generated/2441 {
code {
        func sort_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hey", "hi", "hiya"], "h") -> ["hello", "hey", "hi", "hiya"]
(["hello", "world", "hey", "hi", "hiya"], "hey") -> ["hey"]
(["hello", "world", "hey", "hi", "hiya"], "x") -> []
(["Hello", "world", "Welcome", "to", "Python"], "W") -> ["Welcome"]
([], "hello") -> []
        }
    }
}

problem Generated/2442 {
code {
        func get_sorted_names_starting_with(names: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["Alice", "Bob", "Charlie", "David", "Ella"], "C") -> ["Charlie"]
(["Alice", "Bob", "Charlie", "David", "Ella"], "B") -> ["Bob"]
(["Alice", "Bob", "Charlie", "David", "Ella"], "D") -> ["David"]
(["Alice", "Bob", "Charlie", "David", "Ella"], "E") -> ["Ella"]
(["Alice", "Bob", "Charlie", "David", "Ella"], "F") -> []
        }
    }
}

problem Generated/2443 {
code {
        func get_strings_starting_with_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "pear", "orange"], "a") -> ["apple"]
(["apple", "banana", "cherry", "pear", "orange"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "pear", "orange"], "p") -> ["pear"]
(["apple", "banana", "cherry", "pear", "orange"], "b") -> ["banana"]
(["apple", "banana", "cherry", "pear", "orange"], "") -> ["apple", "banana", "cherry", "pear", "orange"]
        }
    }
}

problem Generated/2444 {
code {
        func get_strings_starting_with(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "orange", "pineapple"], "ap") -> ["apple", "apricot"]
(["cat", "dog", "cow", "chicken", "crow"], "c") -> ["cat", "cow", "chicken", "crow"]
(["happy", "sad", "angry", "excited", "bored"], "s") -> ["sad"]
(["happy", "sad", "angry", "excited", "bored"], "h") -> ["happy"]
(["happy", "sad", "angry", "excited", "bored"], "") -> ["happy", "sad", "angry", "excited", "bored"]
        }
    }
}

problem Generated/2445 {
code {
        func filter_string_starting_with_vowel(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "Ball", "Cat", "Dog", "Elephant"]) -> ["Apple", "Elephant"]
(["ocean", "Island", "sky", "green", "yellow"]) -> ["ocean", "Island"]
(["Umbrella", "Fan", "Bus", "Tree", "Icecream"]) -> ["Umbrella", "Icecream"]
(["atom", "element", "molecule", "compound", "gas", "liquid", "solid"]) -> ["atom", "element"]
(["snake", "ladder", "game", "board"]) -> []
        }
    }
}

problem Generated/2446 {
code {
        func get_words_starting_with(words: list<string>, letter: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "kiwi", "peach"], "a") -> ["apple"]
(["apple", "banana", "orange", "kiwi", "peach"], "b") -> ["banana"]
(["apple", "banana", "orange", "kiwi", "peach"], "p") -> ["peach"]
(["apple", "banana", "orange", "kiwi", "peach"], "z") -> []
(["apple", "banana", "orange", "Kiwi", "peach"], "K") -> ["Kiwi"]
        }
    }
}

problem Generated/2447 {
code {
        func get_words_starting_with_letter(words: list<string>, letter: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "durian"], "a") -> ["apple"]
(["apple", "banana", "cherry", "durian"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "durian"], "d") -> ["durian"]
(["apple", "banana", "cherry", "durian"], "e") -> []
(["apple", "banana", "cherry", "durian"], "b") -> ["banana"]
        }
    }
}

problem Generated/2448 {
code {
        func check_prefix_in_strings(strs: list<string>, pre: string) -> bool
    }
    tests {
        template nse {
            (["apple", "app", "apartment", "application"], "ap") -> true
(["apple", "app", "apartment", "application"], "app") -> false
(["apple", "app", "apartment", "application"], "apt") -> false
(["apple", "apple", "apple", "apple"], "apple") -> true
([], "prefix") -> true
        }
    }
}

problem Generated/2449 {
code {
        func check_prefix_in_list(str_lst: list<string>, pre: string) -> bool
    }
    tests {
        template nse {
            (["hello", "hey", "hi"], "h") -> true
(["hello", "hey", "hi"], "he") -> false
(["hello", "hey", "hi"], "hi") -> false
([""], "") -> true
([], "") -> true
        }
    }
}

problem Generated/2450 {
code {
        func check_prefix_all_strings(strs: list<string>, pre: string) -> bool
    }
    tests {
        template nse {
            (["apple", "application", "apartment", "ape"], "ap") -> true
(["apple", "application", "apartment", "ape"], "app") -> false
(["apple", "application", "apartment", "ape"], "a") -> true
(["", "application", "apartment", "ape"], "") -> true
(["", "", "", ""], "a") -> false
        }
    }
}

problem Generated/2451 {
code {
        func has_prefix_in_all(strs: list<string>, pre: string) -> bool
    }
    tests {
        template nse {
            (["apple", "application", "app", "ap"], "ap") -> true
(["apple", "application", "app", "ap"], "app") -> false
(["apple", "application", "app", "ap"], "") -> true
(["Web", "World", "Wide", "Webster"], "W") -> true
(["Web", "World", "Wide", "Webster"], "Web") -> false
        }
    }
}

problem Generated/2452 {
code {
        func is_string_start_with_all_prefixes(s: string, prefixes: list<string>) -> bool
    }
    tests {
        template nse {
            ("hello world", ["he", "hel", "hell", "hello"]) -> true
("hello world", ["he", "hel", "hell", "wo"]) -> false
("", [""]) -> true
("hello", [""]) -> true
("hello", []) -> true
        }
    }
}

problem Generated/2453 {
code {
        func get_words_startswith(phrase: string, pre: string) -> list<string>
    }
    tests {
        template nse {
            ("hello world, this is a test", "t") -> ["this", "test"]
("hello world, this is a test", "w") -> ["world,"]
("hello world, this is a test", "a") -> ["a"]
("hello world, this is a test", "hello") -> ["hello"]
("hello world, this is a test", " ") -> []
        }
    }
}

problem Generated/2454 {
code {
        func get_matching_strings(strs: list<string>, pre: string, suffix: string) -> list<string>
    }
    tests {
        template nse {
            (["abc", "defgh", "xyz", "pqr", "abcxyz", "mnpqrsabc"], "abc", "xyz") -> ["abcxyz"]
(["abc", "def", "xyz"], "", "") -> ["abc", "def", "xyz"]
(["abc", "def", "xyz"], "a", "z") -> []
(["abc", "defgh", "xyz", "pqr", "abcxyz", "mnpqrsabc"], "pqr", "abc") -> []
(["abc", "defgh", "xyz", "pqr", "abcxyz", "mnpqrsabc"], "mn", "abc") -> ["mnpqrsabc"]
        }
    }
}

problem Generated/2455 {
code {
        func get_strings_starting_with(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "how", "are", "you"], "h") -> ["hello", "how"]
(["hello", "world", "how", "are", "you"], "w") -> ["world"]
([], "h") -> []
(["", "", ""], "") -> ["", "", ""]
(["abc", "def", "efg", "hij"], "ef") -> ["efg"]
        }
    }
}

problem Generated/2456 {
code {
        func get_words_starting_with_prefix(sentence: string, pre: string) -> list<string>
    }
    tests {
        template nse {
            ("hello world, this is a test", "h") -> ["hello"]
("hello world, this is a test", "t") -> ["this", "test"]
("hello world, this is a test", "z") -> []
("", "z") -> []
("hello", "hello") -> ["hello"]
        }
    }
}

problem Generated/2457 {
code {
        func join_strings_starting_with_prefix(strs: list<string>, pre: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "carrot"], "a") -> "apple+apricot"
(["apple", "banana", "apricot", "carrot"], "b") -> "banana"
(["apple", "banana", "apricot", "carrot"], "c") -> "carrot"
(["apple", "banana", "apricot", "carrot"], "") -> "apple+banana+apricot+carrot"
([], "a") -> ""
        }
    }
}

problem Generated/2458 {
code {
        func join_strings_starting_with(strs: list<string>, pre: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> "apple"
(["apple", "banana", "cherry", "date"], "c") -> "cherry"
(["apple", "banana", "cherry", "date"], "") -> "apple_banana_cherry_date"
(["apple", "banana", "cherry", "date"], "z") -> ""
(["apple", "banana", "cherry", "date"], "ch") -> "cherry"
        }
    }
}

problem Generated/2459 {
code {
        func join_words_starting_with_prefix(words: list<string>, pre: string, separator: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "peach", "avocado"], "ap", "-") -> "apple-apricot"
(["apple", "banana", "apricot", "peach", "avocado"], "b", ",") -> "banana"
(["apple", "banana", "apricot", "peach", "avocado"], "c", "-") -> ""
([], "a", "-") -> ""
(["apple"], "apple", "-") -> "apple"
        }
    }
}

problem Generated/2460 {
code {
        func join_strings_starting_with_prefix(words: list<string>, pre: string, delimiter: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "apricot"], "a", ", ") -> "apple, apricot"
(["apple", "banana", "orange", "apricot"], "b", ", ") -> "banana"
(["apple", "banana", "orange", "apricot"], "o", "") -> "orange"
(["apple", "banana", "orange", "apricot"], "t", ", ") -> ""
(["apple", "banana", "orange", "apricot"], "", ", ") -> "apple, banana, orange, apricot"
        }
    }
}

problem Generated/2461 {
code {
        func join_strings_starting_with_prefix(strs: list<string>, pre: string, join_with: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a", ", ") -> "apple"
(["apple", "banana", "cherry", "date"], "c", ", ") -> "cherry"
(["apple", "banana", "cherry", "date"], "d", ", ") -> "date"
(["apple", "banana", "cherry", "date"], "e", ", ") -> ""
(["apple", "banana", "cherry", "date"], "", ", ") -> "apple, banana, cherry, date"
        }
    }
}

problem Generated/2462 {
code {
        func concat_strings_starting_with_prefix(words: list<string>, pre: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "how", "are", "you"], "h") -> "hellohow"
(["hello", "world", "how", "are", "you"], "w") -> "world"
(["hello", "world", "how", "are", "you"], "x") -> ""
(["", "world", "", "are", ""], "") -> "worldare"
(["a", "bb", "ccc", "dddd"], "z") -> ""
        }
    }
}

problem Generated/2463 {
code {
        func join_words_starting_with_prefix(words: list<string>, pre: string, separator: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "avocado"], "a", ";") -> "apple;apricot;avocado"
(["apple", "banana", "apricot", "avocado"], "b", "-") -> "banana"
(["apple", "banana", "apricot", "avocado"], "", ",") -> "apple,banana,apricot,avocado"
([], "a", ";") -> ""
(["a", "aa", "aaa", "ab", "ba", "bb", "bc"], "a", ",") -> "a,aa,aaa,ab"
(["python", "java", "go", "ruby"], "p", " ") -> "python"
        }
    }
}

problem Generated/2464 {
code {
        func filter_string_list(elements: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "Cherry", "dango", "eggplant"], "a") -> ["apple"]
(["apple", "banana", "Cherry", "dango", "eggplant"], "e") -> ["eggplant"]
(["apple", "banana", "Cherry", "dango", "eggplant"], "d") -> ["dango"]
(["apple", "banana", "Cherry", "dango", "eggplant"], "C") -> ["Cherry"]
(["apple", "banana", "Cherry", "dango", "eggplant"], "f") -> []
        }
    }
}

problem Generated/2465 {
code {
        func get_matching_strings(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["cat", "dog", "cow", "camel"], "c") -> ["cat", "cow", "camel"]
(["Python", "Java", "C++", "JavaScript"], "j") -> ["Java", "JavaScript"]
(["apple", "banana", "kiwi", "Orange"], "") -> ["apple", "banana", "kiwi", "Orange"]
(["apple", "banana", "kiwi", "Orange"], "P") -> []
([], "h") -> []
        }
    }
}

problem Generated/2466 {
code {
        func filter_string_list(elements: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "carrot", "Date"], "a") -> ["apple"]
(["apple", "banana", "carrot", "Date"], "B") -> ["banana"]
(["apple", "banana", "carrot", "Date"], "c") -> ["carrot"]
(["apple", "banana", "carrot", "Date"], "") -> ["apple", "banana", "carrot", "Date"]
(["apple", "banana", "carrot", "Date"], "z") -> []
        }
    }
}

problem Generated/2467 {
code {
        func filter_strings_starting_with_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "Banana", "orange", "grapes", "peach"], "a") -> ["Apple"]
(["Apple", "Banana", "orange", "grapes", "peach"], "o") -> ["orange"]
(["Apple", "Banana", "orange", "grapes", "peach"], "") -> ["Apple", "Banana", "orange", "grapes", "peach"]
([], "a") -> []
(["a", "aa", "aaa"], "A") -> ["a", "aa", "aaa"]
        }
    }
}

problem Generated/2468 {
code {
        func filter_start_with(names: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["Jay", "Jason", "John", "Jane", "Jill"], "j") -> ["Jay", "Jason", "John", "Jane", "Jill"]
(["Jay", "Jason", "John", "Jane", "Jill"], "Ja") -> ["Jay", "Jason", "Jane"]
(["Jay", "Jason", "John", "Jane", "Jill"], "k") -> []
([], "j") -> []
(["Jay", "Jason", "John", "Jane", "Jill"], "") -> ["Jay", "Jason", "John", "Jane", "Jill"]
        }
    }
}

problem Generated/2469 {
code {
        func filter_case_insensitive_start_with(elements: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hi", "hey", "Hola"], "h") -> ["hello", "hi", "hey", "Hola"]
(["hello", "world", "hi", "hey", "Hola"], "he") -> ["hello", "hey"]
(["hello", "world", "hi", "hey", "Hola"], "w") -> ["world"]
(["hello", "world", "hi", "hey", "Hola"], "") -> ["hello", "world", "hi", "hey", "Hola"]
(["hello", "world", "hi", "hey", "Hola"], "x") -> []
        }
    }
}

problem Generated/2470 {
code {
        func get_lower_startswith_strings(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "Python", "programming", "language"], "p") -> ["programming"]
(["hello", "world", "Python", "programming", "language"], "h") -> ["hello"]
([], "p") -> []
(["python", "programming", "pascal", "perl", "php"], "p") -> ["python", "programming", "pascal", "perl", "php"]
(["C", "C++", "Java", "Python"], "c") -> []
        }
    }
}

problem Generated/2471 {
code {
        func get_strings_starting_with_and_islower(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hi", "there"], "h") -> ["hello", "hi"]
(["hello", "world", "hi", "there"], "t") -> ["there"]
(["Hello", "WORLD", "Hi", "THERE"], "h") -> []
(["hello", "world", "hi", "there"], "") -> ["hello", "world", "hi", "there"]
([], "h") -> []
        }
    }
}

problem Generated/2472 {
code {
        func get_lowercase_strings_starting_with(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "Python", "is", "Fun"], "h") -> ["hello"]
(["hello", "world", "Python", "is", "Fun"], "p") -> []
(["apple", "banana", "cherry", "date", "elderberry"], "c") -> ["cherry"]
([], "a") -> []
(["Amber", "Belle", "Cindy"], "c") -> []
        }
    }
}

problem Generated/2473 {
code {
        func get_uppercase_words_starting_with(words: list<string>, letter: string) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "world", "PYTHON", "is", "fun"], "P") -> ["PYTHON"]
(["ABC", "DEF", "GHI", "JKL", "MNO"], "D") -> ["DEF"]
(["HELLO", "PYTHON", "WORLD", "PYTHON"], "P") -> ["PYTHON", "PYTHON"]
([], "P") -> []
(["hello", "WORLD", "python", "is", "FUN"], "W") -> ["WORLD"]
        }
    }
}

problem Generated/2474 {
code {
        func find_uppercase_prefixes(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "python", "UPPERCASE", "CAPSLOCK"]) -> ["WORLD", "UPPERCASE", "CAPSLOCK"]
(["HELLO", "WORLD", "PYTHON", "UPPERCASE", "CAPSLOCK"]) -> ["HELLO", "WORLD", "PYTHON", "UPPERCASE", "CAPSLOCK"]
(["Hello", "WORLD", "python", "UPPERCASE", "CAPSLOCK", "HelloWorld"]) -> ["WORLD", "UPPERCASE", "CAPSLOCK"]
(["Hello", "WORLD", "python", "UPPERCASE", "CAPSLOCK", "helloworld"]) -> ["WORLD", "UPPERCASE", "CAPSLOCK"]
([]) -> []
        }
    }
}

problem Generated/2475 {
code {
        func get_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "Python", "Programming"]) -> ["WORLD"]
(["apple", "banana", "Aardvark", "Zoo", "Ant"]) -> ["Aardvark", "Ant"]
(["UPPERCASE", "lowercase", "Another", "Apple"]) -> ["UPPERCASE", "Another", "Apple"]
(["Mango", "Ball", "Apple", "Candy"]) -> ["Apple"]
(["", "a", "A", "3", "(*&^%"]) -> ["A"]
        }
    }
}

problem Generated/2476 {
code {
        func find_uppercase_starting_substrings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "world", "Python", "is", "awesome"]) -> ["Hello", "Python"]
(["abc", "DEF", "Ghi", "jkl", "MNO"]) -> ["DEF", "Ghi", "MNO"]
(["a", "b", "c"]) -> []
([]) -> []
(["This", "is", "a", "Test"]) -> ["This", "Test"]
        }
    }
}

problem Generated/2477 {
code {
        func find_words_starting_with(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "dog", "elephant"], "a") -> ["apple"]
(["apple", "banana", "cherry", "dog", "elephant"], "b") -> ["banana"]
(["apple", "banana", "cherry", "dog", "elephant"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "dog", "elephant"], "d") -> ["dog"]
(["apple", "banana", "cherry", "dog", "elephant"], "e") -> ["elephant"]
        }
    }
}

problem Generated/2478 {
code {
        func filter_strings_starting_with(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "avocado", "grapefruit"], "a") -> ["apple", "avocado"]
(["apple", "banana", "avocado", "grapefruit"], "b") -> ["banana"]
(["apple", "banana", "avocado", "grapefruit"], "g") -> ["grapefruit"]
(["apple", "1orange", "3kiwi", "guava"], "") -> ["apple", "guava"]
(["apple", "banana", "avocado", "grapefruit"], "z") -> []
        }
    }
}

problem Generated/2479 {
code {
        func filter_alphabetic_strings(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "ball", "cat", "dog", "elephant", "frog"], "a") -> ["apple"]
(["apple", "ball", "cat", "dog", "elephant", "frog"], "e") -> ["elephant"]
(["apple", "ball", "cat", "dog", "elephant", "frog"], "b") -> ["ball"]
(["apple", "ball", "cat", "dog", "elephant", "frog"], "c") -> ["cat"]
(["apple", "ball", "cat", "dog", "elephant", "frog"], "f") -> ["frog"]
        }
    }
}

problem Generated/2480 {
code {
        func get_alpha_strings_starting_with(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "123", "carrot", "dog", "elephant"], "a") -> ["apple"]
(["apple", "banana", "123", "carrot", "dog", "elephant"], "") -> ["apple", "banana", "carrot", "dog", "elephant"]
(["apple", "banana", "123", "carrot", "dog", "elephant"], "d") -> ["dog"]
(["apple", "banana", "123", "carrot", "dog", "elephant"], "e") -> ["elephant"]
([], "a") -> []
        }
    }
}

problem Generated/2481 {
code {
        func count_words_with_prefix(words: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["hello", "world", "hey", "hurray", "hi"], "h") -> 4
(["hello", "world", "hey", "hurray", "hi"], "hey") -> 1
(["hello", "world", "hey", "hurray", "hi"], "x") -> 0
(["hello", "world", "hey", "hurray", "hi"], "") -> 5
([], "hey") -> 0
        }
    }
}

problem Generated/2482 {
code {
        func count_strings_starting_with(strs: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> 1
(["apple", "banana", "cherry", "date"], "b") -> 1
(["apple", "banana", "cherry", "date"], "c") -> 1
(["apple", "banana", "cherry", "date"], "d") -> 1
(["apple", "banana", "cherry", "date"], "e") -> 0
        }
    }
}

problem Generated/2483 {
code {
        func count_words_starting_with(words: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "avocado", "orange", "grapefruit"], "a") -> 2
(["apple", "banana", "avocado", "orange", "grapefruit"], "b") -> 1
(["apple", "banana", "avocado", "orange", "grapefruit"], "") -> 5
(["apple", "banana", "avocado", "orange", "grapefruit"], "g") -> 1
([], "a") -> 0
        }
    }
}

problem Generated/2484 {
code {
        func count_strings_starting_with(strs: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "avocado", "kiwi"], "a") -> 3
(["apple", "banana", "apricot", "avocado", "kiwi"], "b") -> 1
(["apple", "banana", "apricot", "avocado", "kiwi"], "ap") -> 2
(["apple", "banana", "apricot", "avocado", "kiwi"], "c") -> 0
([], "a") -> 0
        }
    }
}

problem Generated/2485 {
code {
        func count_strings_starting_with_prefix(strs: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "grape", "apricot"], "a") -> 2
(["apple", "banana", "orange", "grape", "apricot"], "b") -> 1
(["apple", "banana", "orange", "grape", "apricot"], "c") -> 0
([], "hello") -> 0
(["hello", "world", "hello world"], "hello") -> 2
        }
    }
}

problem Generated/2486 {
code {
        func count_strings_starting_with(strs: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "apricot"], "a") -> 2
(["apple", "banana", "orange", "apricot"], "b") -> 1
(["apple", "banana", "orange", "apricot"], "c") -> 0
(["hello", "world", "python", "java"], "p") -> 1
(["hello", "world", "python", "java"], "h") -> 1
        }
    }
}

problem Generated/2487 {
code {
        func replace_string_in_list(elements: list<string>, old_str: string, new_str: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hello_world"], "hello", "hi") -> ["hi", "world", "hi_world"]
(["hello", "world", "hello_world"], "hi", "hey") -> ["hello", "world", "hello_world"]
(["hello", "world", "hello_world"], "world", "worldwide") -> ["hello", "worldwide", "hello_world"]
([], "hello", "hi") -> []
(["hello"], "hello", "hi") -> ["hi"]
        }
    }
}

problem Generated/2488 {
code {
        func filter_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hi", "hey", "howdy"], "h") -> ["hello", "hi", "hey", "howdy"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
([], "a") -> []
(["test", "testify", "team", "tired"], "t") -> ["test", "testify", "team", "tired"]
(["", "", "test", "this", "thing"], "") -> ["", "", "test", "this", "thing"]
        }
    }
}

problem Generated/2489 {
code {
        func get_matching_strings(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "apricot", "avocado"], "a") -> ["apple", "apricot", "avocado"]
(["apple", "banana", "orange", "apricot", "avocado"], "b") -> ["banana"]
(["apple", "banana", "orange", "apricot", "avocado"], "c") -> []
([], "a") -> []
(["apple", "banana", "orange", "apricot", "avocado"], "") -> ["apple", "banana", "orange", "apricot", "avocado"]
        }
    }
}

problem Generated/2490 {
code {
        func get_countries_starting_with(countries: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["India", "United States", "United Kingdom", "Australia", "Russia"], "U") -> ["United States", "United Kingdom"]
(["India", "United States", "United Kingdom", "Australia", "Russia"], "A") -> ["Australia"]
(["India", "United States", "United Kingdom", "Australia", "Russia"], "R") -> ["Russia"]
(["India", "United States", "United Kingdom", "Australia", "Russia"], "J") -> []
([], "U") -> []
        }
    }
}

problem Generated/2491 {
code {
        func filter_words_starting_with(words: list<string>, letter: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "orange"], "a") -> ["apple"]
(["apple", "banana", "cherry", "orange"], "c") -> ["cherry"]
([], "a") -> []
(["cucumber", "carrot", "cabbage"], "c") -> ["cucumber", "carrot", "cabbage"]
(["apple", "banana", "cherry", "orange"], "b") -> ["banana"]
        }
    }
}

problem Generated/2492 {
code {
        func get_prefix_strings(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
([], "f") -> []
        }
    }
}

problem Generated/2493 {
code {
        func get_words_starting_with_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date", "fig"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date", "fig"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date", "fig"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date", "fig"], "d") -> ["date"]
(["apple", "banana", "cherry", "date", "fig"], "f") -> ["fig"]
        }
    }
}

problem Generated/2494 {
code {
        func filter_strings_starting_with(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "cherry", "orange"], "a") -> ["apple", "apricot"]
(["apple", "banana", "apricot", "cherry", "orange"], "b") -> ["banana"]
(["apple", "banana", "apricot", "cherry", "orange"], "") -> ["apple", "banana", "apricot", "cherry", "orange"]
(["apple", "banana", "apricot", "cherry", "orange"], "o") -> ["orange"]
(["hello", "world", "python", "rocks"], "r") -> ["rocks"]
        }
    }
}

problem Generated/2495 {
code {
        func sort_strings_starting_with(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "avocado", "orange", "peach", "pear"], "a") -> ["apple", "avocado"]
(["apple", "banana", "avocado", "orange", "peach", "pear"], "b") -> ["banana"]
(["apple", "banana", "avocado", "orange", "peach", "pear"], "p") -> ["peach", "pear"]
(["apple", "banana", "avocado", "orange", "peach", "pear"], "") -> ["apple", "avocado", "banana", "orange", "peach", "pear"]
([], "a") -> []
        }
    }
}

problem Generated/2496 {
code {
        func sort_string_list(str_lst: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "durian"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "durian"], "b") -> ["banana"]
(["apple", "banana", "cherry", "durian"], "d") -> ["durian"]
(["apple", "banana", "cherry", "durian"], "e") -> []
([], "a") -> []
        }
    }
}

problem Generated/2497 {
code {
        func sort_strings_starting_with(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
(["apple", "banana", "cherry", "date"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date"], "") -> ["apple", "banana", "cherry", "date"]
        }
    }
}

problem Generated/2498 {
code {
        func filter_and_sort_startswith(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "pear", "avocado"], "a") -> ["apple", "apricot", "avocado"]
(["hello", "world", "python", "program"], "p") -> ["program", "python"]
(["hello", "world", "python", "program"], "w") -> ["world"]
(["apple", "banana", "apricot", "pear", "avocado"], "b") -> ["banana"]
([], "a") -> []
        }
    }
}

problem Generated/2499 {
code {
        func get_indexes_of_strings(elements: list<string>, pre: string) -> list<int>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "pear", "kiwi"], "a") -> [0]
(["apple", "banana", "orange", "pear", "kiwi"], "b") -> [1]
(["apple", "banana", "orange", "pear", "kiwi"], "o") -> [2]
(["apple", "banana", "orange", "pear", "kiwi"], "pe") -> [3]
(["apple", "banana", "orange", "pear", "kiwi"], "x") -> []
        }
    }
}

problem Generated/2500 {
code {
        func find_indexes_of_string_prefix(strs: list<string>, pre: string) -> list<int>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> [0]
(["apple", "banana", "cherry", "date"], "d") -> [3]
(["apple", "banana", "cherry", "date"], "c") -> [2]
(["apple", "banana", "cherry", "date"], "e") -> []
(["apple", "banana", "cherry", "date"], "a") -> [0]
        }
    }
}

problem Generated/2501 {
code {
        func find_indexes_of_elements_starting_with(words: list<string>, pre: string) -> list<int>
    }
    tests {
        template nse {
            (["apple", "ball", "cat", "dog", "egg"], "a") -> [0]
(["apple", "ball", "cat", "dog", "egg"], "b") -> [1]
(["apple", "ball", "cat", "dog", "egg"], "c") -> [2]
(["apple", "ball", "cat", "dog", "egg"], "d") -> [3]
(["apple", "ball", "cat", "dog", "egg"], "e") -> [4]
        }
    }
}

problem Generated/2502 {
code {
        func get_indices_of_words_starting_with(words: list<string>, pre: string) -> list<int>
    }
    tests {
        template nse {
            (["hello", "world", "hi", "there", "hey"], "h") -> [0, 2, 4]
(["hello", "world", "hi", "there", "hey"], "w") -> [1]
([], "h") -> []
(["hello", "world", "hi", "there", "hey"], "hey") -> [4]
(["hello", "world", "hi", "there", "hey"], "x") -> []
        }
    }
}

problem Generated/2503 {
code {
        func find_index_of_element_starting_with(items: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "durian"], "b") -> 1
(["apple", "banana", "cherry", "durian"], "c") -> 2
(["apple", "banana", "cherry", "durian"], "e") -> -1
([], "a") -> -1
(["apple", "banana", "apparel", "durian", "abacus"], "a") -> 0
        }
    }
}

problem Generated/2504 {
code {
        func find_elements_startswith(elements: list<string>, pre: string) -> list<int>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "pear", "kiwi"], "a") -> [0]
(["apple", "banana", "orange", "pear", "kiwi"], "b") -> [1]
(["apple", "banana", "orange", "pear", "kiwi"], "o") -> [2]
(["apple", "banana", "orange", "pear", "kiwi"], "k") -> [4]
(["apple", "banana", "orange", "pear", "kiwi"], "m") -> []
        }
    }
}

problem Generated/2505 {
code {
        func find_indexes_of_string_prefix(strs: list<string>, pre: string) -> list<int>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "avocado"], "ap") -> [0, 2]
(["apple", "banana", "apricot", "avocado"], "ban") -> [1]
(["apple", "banana", "apricot", "avocado"], "pear") -> []
(["apple", "banana", "apricot", "avocado"], "avo") -> [3]
([], "ap") -> []
        }
    }
}

problem Generated/2506 {
code {
        func get_indexes_of_strings_starting_with_prefix(words: list<string>, pre: string) -> list<int>
    }
    tests {
        template nse {
            (["apple", "banana", "blueberry", "pear", "peach"], "b") -> [1, 2]
(["apple", "banana", "blueberry", "pear", "peach"], "p") -> [3, 4]
([], "a") -> []
(["apple", "banana", "blueberry", "pear", "peach"], "") -> [0, 1, 2, 3, 4]
(["apple", "banana", "blueberry", "pear", "peach"], "c") -> []
        }
    }
}

problem Generated/2507 {
code {
        func reverse_startswith(elements: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "avocado", "orange", "pear"], "a") -> ["avocado", "apple"]
(["this", "is", "a", "test", "case"], "t") -> ["test", "this"]
(["python", "is", "a", "great", "language"], "g") -> ["great"]
(["hello", "world", "how", "are", "you"], "z") -> []
(["apple", "banana", "avocado", "orange", "pear"], "b") -> ["banana"]
        }
    }
}

problem Generated/2508 {
code {
        func reverse_strings_starting_with_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "avocado"], "a") -> ["avocado", "apricot", "apple"]
(["hello", "world", "python", "programming"], "") -> ["programming", "python", "world", "hello"]
(["abracadabra", "alakazam", "cadabra"], "cad") -> ["cadabra"]
(["testing", "the", "function"], "xyz") -> []
(["apple", "banana", "apricot", "avocado"], "b") -> ["banana"]
        }
    }
}

problem Generated/2509 {
code {
        func reverse_list_of_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "durian", "elderberry"], "b") -> ["banana"]
(["apple", "banana", "cherry", "durian", "elderberry"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "durian", "elderberry"], "e") -> ["elderberry"]
(["apple", "banana", "cherry", "durian", "elderberry"], "") -> ["elderberry", "durian", "cherry", "banana", "apple"]
([], "a") -> []
        }
    }
}

problem Generated/2510 {
code {
        func reverse_and_filter_string_list(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "grape", "apricot"], "a") -> ["apricot", "apple"]
(["apple", "banana", "orange", "grape", "apricot"], "b") -> ["banana"]
(["apple", "banana", "orange", "grape", "apricot"], "o") -> ["orange"]
(["apple", "banana", "orange", "grape", "apricot"], "") -> ["apricot", "grape", "orange", "banana", "apple"]
([], "a") -> []
        }
    }
}

problem Generated/2511 {
code {
        func copy_list_starting_with_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "apricot"], "ap") -> ["apple", "apricot"]
(["apple", "banana", "orange", "apricot"], "ban") -> ["banana"]
(["apple", "banana", "orange", "apricot"], "kiwi") -> []
(["apple", "banana", "orange", "apricot"], "") -> ["apple", "banana", "orange", "apricot"]
([], "ap") -> []
        }
    }
}

problem Generated/2512 {
code {
        func get_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "durian"], "a") -> ["apple"]
(["apple", "banana", "cherry", "durian"], "b") -> ["banana"]
([], "a") -> []
(["apple", "banana", "cherry", "durian"], "") -> ["apple", "banana", "cherry", "durian"]
(["apple", "banana", "apple pie", "durian"], "apple") -> ["apple", "apple pie"]
        }
    }
}

problem Generated/2513 {
code {
        func copy_list_starting_with_string(names: list<string>, starts_with: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "durian", "elderberry"], "a") -> ["apple"]
(["ant", "bat", "cat", "dog", "emu"], "") -> ["ant", "bat", "cat", "dog", "emu"]
(["", "", "", ""], "") -> ["", "", "", ""]
([], "z") -> []
(["apple", "banana", "cherry", "durian", "elderberry"], "c") -> ["cherry"]
        }
    }
}

problem Generated/2514 {
code {
        func copy_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "grape", "orange"], "a") -> ["apple", "apricot"]
(["apple", "banana", "apricot", "grape", "orange"], "o") -> ["orange"]
(["apple", "banana", "apricot", "grape", "orange"], "g") -> ["grape"]
(["apple", "banana", "apricot", "grape", "orange"], "") -> ["apple", "banana", "apricot", "grape", "orange"]
([], "a") -> []
        }
    }
}

problem Generated/2515 {
code {
        func copy_list_starting_with(elements: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "avocado", "orange"], "a") -> ["apple", "avocado"]
(["apple", "banana", "avocado", "orange"], "b") -> ["banana"]
([], "a") -> []
(["ant", "dog", "antelope", "elephant"], "an") -> ["ant", "antelope"]
(["car", "bus", "train", "bike"], "") -> ["car", "bus", "train", "bike"]
        }
    }
}

problem Generated/2516 {
code {
        func get_startswith_elements(elements: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
([], "a") -> []
(["apple", "banana", "cherry", "date"], "") -> ["apple", "banana", "cherry", "date"]
        }
    }
}

problem Generated/2517 {
code {
        func copy_list_starting_with(elements: list<string>, start: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
(["apple", "banana", "cherry", "date"], "x") -> []
(["watermelon", "orange", "grapes", "pear"], "o") -> ["orange"]
        }
    }
}

problem Generated/2518 {
code {
        func copy_and_filter_strings(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "ananas", "avocado"], "a") -> ["apple", "ananas", "avocado"]
(["apple", "banana", "ananas", "avocado"], "b") -> ["banana"]
(["apple", "banana", "ananas", "avocado"], "c") -> []
([], "a") -> []
(["apple", "banana", "ananas", "avocado"], "") -> ["apple", "banana", "ananas", "avocado"]
        }
    }
}

problem Generated/2519 {
code {
        func copy_list_startswith_string(elements: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
([], "d") -> []
(["dog", "cat", "lion", "elephant"], "e") -> ["elephant"]
(["12345", "67890", "abcde", "fghij"], "12") -> ["12345"]
        }
    }
}

problem Generated/2520 {
code {
        func get_words_starting_with_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
(["apple", "banana", "cherry", "date"], "e") -> []
        }
    }
}

problem Generated/2521 {
code {
        func find_elements_starting_with_substring(elements: list<string>, substr: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
(["apple", "banana", "cherry", "date"], "e") -> []
        }
    }
}

problem Generated/2522 {
code {
        func get_matching_strings(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cat", "dog", "a", "ab", "ac"], "a") -> ["apple", "a", "ab", "ac"]
(["apple", "banana", "cat", "dog", "a", "ab", "ac"], "b") -> ["banana"]
(["apple", "banana", "cat", "dog", "a", "ab", "ac"], "") -> ["apple", "banana", "cat", "dog", "a", "ab", "ac"]
([], "a") -> []
(["a", "aa", "aaa", "aaaa", "b", "bb", "bbb", "bbbb"], "aa") -> ["aa", "aaa", "aaaa"]
(["a", "aa", "aaa", "aaaa", "b", "bb", "bbb", "bbbb"], "c") -> []
        }
    }
}

problem Generated/2523 {
code {
        func filter_string_by_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "orange", "banana", "pear", "grape"], "a") -> ["apple"]
(["apple", "orange", "banana", "pear", "grape"], "bana") -> ["banana"]
(["apple", "orange", "banana", "pear", "grape"], "c") -> []
([], "a") -> []
(["apple", "orange", "banana", "pear", "grape"], "") -> ["apple", "orange", "banana", "pear", "grape"]
        }
    }
}

problem Generated/2524 {
code {
        func filter_string_starting_with_vowel(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "Ball", "cat", "Elephant", "Fan"]) -> ["Apple", "Elephant"]
(["OrAnGe", "Banana", "Kiwi", "Peach", "grapes"]) -> ["OrAnGe"]
(["ant", "bee", "cat", "dog", "elephant", "fish"]) -> ["ant", "elephant"]
([]) -> []
(["book", "airplane", "table", "egg", "umbrella", "cow"]) -> [ "airplane", "egg", "umbrella"]
        }
    }
}

problem Generated/2525 {
code {
        func get_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hi", "hey"], "h") -> ["hello", "hi", "hey"]
(["apple", "banana", "cherry", "durian"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "durian"], "d") -> ["durian"]
(["apple", "banana", "cherry", "durian"], "f") -> []
(["apple", "banana", "cherry", "durian"], "") -> ["apple", "banana", "cherry", "durian"]
        }
    }
}

problem Generated/2526 {
code {
        func find_matching_strings(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "grape", "pear"], "a") -> ["apple"]
(["apple", "banana", "orange", "grape", "pear"], "g") -> ["grape"]
(["apple", "banana", "orange", "grape", "pear"], "") -> ["apple", "banana", "orange", "grape", "pear"]
(["apple", "banana", "orange", "grape", "pear"], "kiwi") -> []
(["a", "aa", "aaa", "aaaa", "aaaaa"], "aa") -> ["aa", "aaa", "aaaa", "aaaaa"]
        }
    }
}

problem Generated/2527 {
code {
        func get_string_starts_with_uppercase(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "world", "Foo", "bar", "Baz"]) -> ["Hello", "Foo", "Baz"]
(["the", "quick", "Brown", "fox", "jumps"]) -> ["Brown"]
([]) -> []
(["a", "B", "c", "D", "e"]) -> ["B", "D"]
(["ABC", "DEF", "GHI", "JKL", "MNO"]) -> ["ABC", "DEF", "GHI", "JKL", "MNO"]
        }
    }
}

problem Generated/2528 {
code {
        func get_matching_strings(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
(["apple", "banana", "cherry", "date"], "e") -> []
        }
    }
}

problem Generated/2529 {
code {
        func get_matching_strings(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "grape", "orange", "pineapple"], "a") -> ["apple"]
(["apple", "banana", "grape", "orange", "pineapple"], "g") -> ["grape"]
(["apple", "banana", "grape", "orange", "pineapple"], "p") -> ["pineapple"]
(["apple", "banana", "grape", "orange", "pineapple"], "m") -> []
([], "p") -> []
        }
    }
}

problem Generated/2530 {
code {
        func get_num_of_strings_starting_with_prefix(str_lst: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> 1
(["apple", "banana", "cherry", "date"], "b") -> 1
(["apple", "banana", "cherry", "date"], "c") -> 1
(["apple", "banana", "cherry", "date"], "d") -> 1
(["apple", "banana", "cherry", "date"], "e") -> 0
        }
    }
}

problem Generated/2531 {
code {
        func get_strings_starting_with(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "apricot"], "ap") -> ["apple", "apricot"]
(["apple", "banana", "orange", "apricot"], "b") -> ["banana"]
([], "ap") -> []
(["apple", "banana", "orange", "apricot"], "") -> ["apple", "banana", "orange", "apricot"]
(["apple", "banana", "orange", "apricot"], "pine") -> []
        }
    }
}

problem Generated/2532 {
code {
        func get_str_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hi", "hey"], "h") -> ["hello", "hi", "hey"]
(["hello", "world", "hi", "hey"], "he") -> ["hello", "hey"]
(["hello", "world", "hi", "hey"], "w") -> ["world"]
([], "h") -> []
(["hello", "world", "hi", "hey"], "") -> ["hello", "world", "hi", "hey"]
        }
    }
}

problem Generated/2533 {
code {
        func get_power_of_numbers_starting_with(numbers: list<double>, pre: string) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], "1") -> [1.0]
([10.0, 23.0, 31.0, 42.0, 51.0], "4") -> [1764.0]
([1.0, 2.0, 3.0, 4.0, 5.0], "3") -> [9.0]
([], "4") -> []
([10.0, 23.0, 31.0, 42.0, 51.0], "6") -> []
        }
    }
}

problem Generated/2534 {
code {
        func get_power_of_numbers_starting_with_prefix(numbers: list<double>, pre: string) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], "3") -> [9.0]
([1.0, 2.0, 3.0, 4.0, 5.0], "5") -> [25.0]
([1.0, 2.0, 3.0, 4.0, 5.0], "9") -> []
([1.2, 3.4, 5.6, 7.8], "5") -> [31.36]
([0.125, 1.0, 2.0, 3.0, 4.0], "0.") -> [0.015625]
        }
    }
}

problem Generated/2535 {
code {
        func count_starting_with_prefix(strs: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "durian"], "a") -> 1
(["apple", "banana", "cherry", "durian"], "c") -> 1
(["apple", "banana", "cherry", "durian"], "e") -> 0
([], "a") -> 0
(["apple", "banana", "cherry", "apple", "durian"], "a") -> 2
        }
    }
}

problem Generated/2536 {
code {
        func count_strings_starting_with_prefix(strs: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "peach", "avocado"], "ap") -> 2
(["apple", "banana", "apricot", "peach", "avocado"], "b") -> 1
(["apple", "banana", "apricot", "peach", "avocado"], "c") -> 0
([], "ap") -> 0
(["apricot"], "ap") -> 1
        }
    }
}

problem Generated/2537 {
code {
        func concatenate_strings_starting_with_prefix(strs: list<string>, pre: string) -> string
    }
    tests {
        template nse {
            (["apple", "ball", "cat", "dog", "banana"], "b") -> "ballbanana"
(["apple", "ball", "cat", "dog", "banana"], "a") -> "apple"
(["apple", "ball", "cat", "dog", "banana"], "c") -> "cat"
([], "a") -> ""
([], "") -> ""
        }
    }
}

problem Generated/2538 {
code {
        func get_substrings_starting_with_prefix(s: string, pre: string) -> list<string>
    }
    tests {
        template nse {
            ("hello world, hello everybody, hello python", "hello") -> ["hello world, ", "hello everybody, ", "hello python"]
("The quick brown fox jumps over the lazy dog", "jumps") -> ["jumps over the lazy dog"]
("1,2,3,4,5", "4") -> ["4,5"]
("1.2.3.4.5.6", "7") -> []
("", "test") -> []
        }
    }
}

problem Generated/2539 {
code {
        func count_substr_occurrences(s: string, substr: string) -> int
    }
    tests {
        template nse {
            ("hello world", "l") -> 3
("hello world", "lo") -> 1
("hello world", "z") -> 0
("aaaaaaa", "aa") -> 6
("abcabcabc", "abc") -> 3
        }
    }
}

problem Generated/2540 {
code {
        func count_substring_occurrences(s: string, substr: string) -> int
    }
    tests {
        template nse {
            ("hello world", "o") -> 2
("abababab", "ab") -> 4
("aaaaa", "aa") -> 4
("abcdefg", "h") -> 0
("python is the best", "the") -> 1
        }
    }
}

problem Generated/2541 {
code {
        func count_substring(s: string, subs: string) -> int
    }
    tests {
        template nse {
            ("hello world", "o") -> 2
("hello world", "ll") -> 1
("hello world", "z") -> 0
("", "") -> 1
("aaaaaaa", "aa") -> 6
        }
    }
}

problem Generated/2542 {
code {
        func most_frequent_word(words: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "hello", "python"]) -> "hello"
(["apple", "banana", "cherry", "banana", "cherry", "cherry"]) -> "cherry"
(["apple", "banana", "cherry"]) -> "apple"
(["", "world", "", "python"]) -> ""
(["hello"]) -> "hello"
        }
    }
}

problem Generated/2543 {
code {
        func count_vowels(s: string) -> int
    }
    tests {
        template nse {
            ("hello world") -> 3
("Python is awesome!") -> 6
("AEIOU") -> 5
("") -> 0
("BDFGHJKLMNPQRSTVWXYZ") -> 0
        }
    }
}

problem Generated/2544 {
code {
        func check_word_count(txt: string, words: list<string>) -> bool
    }
    tests {
        template nse {
            ("The quick brown fox jumps over the lazy dog", ["dog", "fox", "jumps"]) -> true
("The quick brown fox jumps over the lazy dog", ["dog", "fox", "jumps", "cat"]) -> false
("The quick brown fox jumps over the lazy dog", []) -> true
("", ["dog", "fox", "jumps"]) -> false
("The quick brown fox jumps over the lazy dog", ["the", "brown"]) -> true
        }
    }
}

problem Generated/2545 {
code {
        func has_all_words(sentence: string, words: list<string>) -> bool
    }
    tests {
        template nse {
            ("This is a sample sentence", ["This", "a"]) -> true
("This is a sample sentence", ["This", "sample", "sentence"]) -> true
("This is a sample sentence", ["This", "not", "present"]) -> false
("This is a sample sentence", ["This", "is", "not", "present"]) -> false
("", ["This", "not", "present"]) -> false
        }
    }
}

problem Generated/2546 {
code {
        func does_string_contain_substrings(s: string, substrs: list<string>) -> bool
    }
    tests {
        template nse {
            ("The quick brown fox jumps over the lazy dog", ["jump", "dog", "fox"]) -> true
("The quick brown fox jumps over the lazy dog", ["jump", "cat", "dog"]) -> false
("", [""]) -> true
("", ["abc"]) -> false
("You can use the count method multiple times", ["count", "method", "times"]) -> true
        }
    }
}

problem Generated/2547 {
code {
        func count_num_of_ones_in_binary(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 1, 2, 1, 2]
([16, 32, 64, 128]) -> [1, 1, 1, 1]
([7, 15, 31, 63]) -> [3, 4, 5, 6]
([0, 1, 2, 3, 4, 5]) -> [0, 1, 1, 2, 1, 2]
([]) -> []
        }
    }
}

problem Generated/2548 {
code {
        func count_binary_zeros(num: int) -> int
    }
    tests {
        template nse {
            (10) -> 2
(5) -> 1
(0) -> 1
(15) -> 0
(1023) -> 0
        }
    }
}

problem Generated/2549 {
code {
        func count_occurrences_of_substring(s: string, sub: string) -> int
    }
    tests {
        template nse {
            ("This is a test string to test the function.", "test") -> 2
("Hello world!", "L") -> 3
("AbCdEfGhIjKlMnOpQrStUvWxYz", "a") -> 1
("This is a test string to test the function.", "TEST") -> 2
("", "test") -> 0
        }
    }
}

problem Generated/2550 {
code {
        func count_word_occurrences(sentence: string, words: list<string>) -> list<int>
    }
    tests {
        template nse {
            ("the quick brown fox jumps over the lazy dog", ["the", "over"]) -> [2, 1]
("Python is a high-level programming language", ["Python", "language", "java"]) -> [1, 1, 0]
("This is a sentence with repeated words in it, a sentence with words", ["sentence", "with", "words"]) -> [2, 2, 2]
("", ["word", "another"]) -> [0, 0]
("hello world", ["world", "hello"]) -> [1, 1]
        }
    }
}

problem Generated/2551 {
code {
        func count_substring_occurrence(s: string, substr: string) -> int
    }
    tests {
        template nse {
            ("hello world", "l") -> 3
("hello world", "o") -> 2
("hello world", "ll") -> 1
("hello world", "z") -> 0
("to be or not to be", "be") -> 2
        }
    }
}

problem Generated/2552 {
code {
        func count_occurrences(words: list<string>, target_word: string) -> int
    }
    tests {
        template nse {
            (["hello", "world", "hello", "python"], "hello") -> 2
(["hello", "world", "hello", "python"], "WORLD") -> 1
(["hello", "world", "hello", "python"], "Java") -> 0
([], "test") -> 0
(["test", "test", "test", "test"], "Test") -> 4
        }
    }
}

problem Generated/2553 {
code {
        func count_occurrences(strs: list<string>, target: string) -> int
    }
    tests {
        template nse {
            (["Hello", "world", "hello", "python"], "hello") -> 2
(["hello", "hi", "hey", "Hola"], "h") -> 4
(["I", "am", "a", "Python", "Developer"], "p") -> 2
(["", "", "", ""], "") -> 4
(["goodbye", "cruel", "world"], "hello") -> 0
        }
    }
}

problem Generated/2554 {
code {
        func count_digits(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["ab1", "2cd", "3ef4g"]) -> [1, 1, 2]
(["1a2b3c", "4d5e6f"]) -> [3, 3]
(["abcdefg", "hijklmn", "opqrst", "uvwxy", "z"]) -> [0, 0, 0, 0, 0]
([]) -> []
(["1", "2", "3"]) -> [1, 1, 1]
        }
    }
}

problem Generated/2555 {
code {
        func count_digits_in_strings(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["abc123", "def456", "ghi789"]) -> [3, 3, 3]
(["abc", "def", "ghi"]) -> [0, 0, 0]
(["abc123", "4", "5", "6"]) -> [3, 1, 1, 1]
([]) -> []
(["12", "34"]) -> [2, 2]
        }
    }
}

problem Generated/2556 {
code {
        func count_digits_in_string(s: string) -> int
    }
    tests {
        template nse {
            ("abc123") -> 3
("a1b2c3") -> 3
("") -> 0
("aabbcc") -> 0
("a1b2c3d4") -> 4
        }
    }
}

problem Generated/2557 {
code {
        func count_prefix_strings(strs: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["apple", "application", "banana", "cherry"], "app") -> 2
(["apple", "application", "banana", "cherry"], "ba") -> 1
(["apple", "application", "banana", "cherry"], "c") -> 1
(["apple", "application", "banana", "cherry"], "d") -> 0
([], "app") -> 0
        }
    }
}

problem Generated/2558 {
code {
        func count_strings_starting_with(strs: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "orange"], "a") -> 1
(["apple", "banana", "cherry", "orange"], "b") -> 1
(["apple", "banana", "cherry", "orange"], "c") -> 1
(["apple", "banana", "cherry", "orange"], "d") -> 0
([], "a") -> 0
        }
    }
}

problem Generated/2559 {
code {
        func count_prefix_occurrences(strs: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["abc", "abcd", "ab", "def"], "ab") -> 3
(["abc", "abcd", "ab", "def"], "ab") -> 3
(["testing", "this", "simple", "example"], "exa") -> 1
(["testing", "this", "simple", "example"], "") -> 4
([], "hello") -> 0
(["hello"], "hi") -> 0
        }
    }
}

problem Generated/2560 {
code {
        func count_prefix_in_list(elements: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "orange", "avocado"], "ap") -> 2
(["apple", "banana", "apricot", "orange", "avocado"], "ba") -> 1
([], "ba") -> 0
(["apple", "banana", "apricot", "orange", "avocado"], "") -> 5
(["apple", "banana", "apricot", "orange", "avocado"], "z") -> 0
        }
    }
}

problem Generated/2561 {
code {
        func count_strings_starting_with(strs: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["hello", "hi", "hey", "Hola"], "h") -> 3
(["hello", "hi", "hey", "Hola"], "H") -> 1
(["hello", "hi", "hey", "Hola"], "hi") -> 1
(["hello", "hi", "hey", "Hola"], "") -> 4
(["hello", "hi", "hey", "Hola"], "z") -> 0
        }
    }
}

problem Generated/2562 {
code {
        func count_words_starting_with(words: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["hello", "world", "hi", "python"], "h") -> 2
(["hello", "world", "hi", "python"], "w") -> 1
(["hello", "world", "hi", "python"], "x") -> 0
(["", "", "", ""], "") -> 4
([], "h") -> 0
        }
    }
}

problem Generated/2563 {
code {
        func replace_string_occurrence(elements: list<string>, old_s: string, new_s: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "pineapple", "orange"], "apple", "mango") -> ["mango", "banana", "pinemango", "orange"]
(["apple", "banana", "pineapple", "orange"], "kiwi", "mango") -> ["apple", "banana", "pineapple", "orange"]
([], "kiwi", "mango") -> []
(["apple"], "k", "mango") -> ["apple"]
(["apple", "apple", "apple", "apple"], "apple", "mango") -> ["mango", "mango", "mango", "mango"]
        }
    }
}

problem Generated/2564 {
code {
        func replace_in_list(elements: list<string>, old_str: string, new_str: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "apple"], "apple", "orange") -> ["orange", "banana", "cherry", "orange"]
(["apple", "banana", "cherry", "apple"], "a", "o") -> ["opple", "bonono", "cherry", "opple"]
(["apple", "banana", "cherry", "apple"], "x", "y") -> ["apple", "banana", "cherry", "apple"]
([], "a", "o") -> []
(["cat", "dog", "cat", "cat"], "cat", "") -> ["", "dog", "", ""]
        }
    }
}

problem Generated/2565 {
code {
        func count_words(s: string, words: list<string>) -> int
    }
    tests {
        template nse {
            ("hello world this is a test", ["hello", "test"]) -> 2
("apples bananas apples bananas", ["apples", "oranges"]) -> 2
("the quick brown fox jumps over the lazy dog", ["dog"]) -> 1
("one fish two fish red fish blue fish", ["fish"]) -> 4
("to be or not to be that is the question", ["question", "answer"]) -> 1
        }
    }
}

problem Generated/2566 {
code {
        func find_index_of_items(elements: list<string>, items: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["apple", "orange", "banana", "grapes", "apple"], ["apple", "banana"]) -> [0, 2]
(["apple", "orange", "banana", "grapes", "apple"], ["pear", "peach"]) -> []
(["red", "blue", "green", "yellow"], ["blue", "green"]) -> [1, 2]
(["red", "blue", "green", "yellow"], ["yellow"]) -> [3]
([], []) -> []
([""], [""]) -> [0]
        }
    }
}

problem Generated/2567 {
code {
        func copy_and_replace(elements: list<string>, pattern: string, replacement: string) -> list<string>
    }
    tests {
        template nse {
            (["abc", "def", "abc", "ghi"], "abc", "jkl") -> ["jkl", "def", "jkl", "ghi"]
(["aaa", "bbb", "ccc", "ddd"], "ddd", "eee") -> ["aaa", "bbb", "ccc", "eee"]
(["abc", "def", "ghi", "jkl"], "xyz", "mno") -> ["abc", "def", "ghi", "jkl"]
(["abc", "abc", "abc", "abc"], "abc", "") -> ["", "", "", ""]
(["abc", "  def", "ghi  ", " jkl "], " ", "") -> ["abc", "def", "ghi", "jkl"]
        }
    }
}

problem Generated/2568 {
code {
        func duplicate_elements(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> false
([1, 2, 3, 4, 5, 5]) -> true
([1, 1, 2, 3, 4, 5, 5]) -> true
([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) -> true
([1]) -> false
        }
    }
}

problem Generated/2569 {
code {
        func count_distinct_words(txt: string) -> int
    }
    tests {
        template nse {
            ("hello world hello world") -> 2
("a a a a a b b b c c d") -> 4
("this is a sentence") -> 4
("") -> 0
("one") -> 1
        }
    }
}

problem Generated/2570 {
code {
        func count_words_with_min_occurance(words: list<string>, min_occ: int) -> int
    }
    tests {
        template nse {
            (["hello", "world", "hello", "python", "world", "hello"], 1) -> 3
(["hello", "world", "hello", "python", "world", "hello"], 2) -> 2
(["hello", "world", "hello", "python", "world", "hello"], 3) -> 1
(["hello", "world", "hello", "python", "world", "hello"], 4) -> 0
([], 0) -> 0
        }
    }
}

problem Generated/2571 {
code {
        func count_occurrences_in_list(elements: list<string>, search_str: string) -> int
    }
    tests {
        template nse {
            (["hello", "world", "hello", "again"], "hello") -> 2
(["hello", "world", "hello", "again"], "python") -> 0
(["", "", "", "", ""], "") -> 5
([], "python") -> 0
(["hello"], "o") -> 1
        }
    }
}

problem Generated/2572 {
code {
        func count_string_occurrences(txt: string, search: string) -> int
    }
    tests {
        template nse {
            ("hello world", "l") -> 3
("hello world", "lo") -> 1
("hello world", "x") -> 0
("", "hello") -> 0
("hellohellohello", "hello") -> 3
        }
    }
}

problem Generated/2573 {
code {
        func count_substrings(s: string, sub: string) -> int
    }
    tests {
        template nse {
            ("hello world", "o") -> 2
("hello world", "l") -> 3
("hello world", "lo") -> 1
("hello world", "z") -> 0
("aaaaaa", "aa") -> 3
        }
    }
}

problem Generated/2574 {
code {
        func count_words_with_even_digits(words: list<string>) -> int
    }
    tests {
        template nse {
            (["hello", "world", "python", "12345"]) -> 1
(["hello", "world", "python", "2468"]) -> 1
([]) -> 0
(["2468", "8642", "1234", "5678"]) -> 4
(["abc", "def", "ghi", "jkl"]) -> 0
        }
    }
}

problem Generated/2575 {
code {
        func count_substrings(s: string, substr: string) -> int
    }
    tests {
        template nse {
            ("hello world", "l") -> 3
("hello world", "lo") -> 1
("hello world", "a") -> 0
("", "a") -> 0
("hello", "hello") -> 1
        }
    }
}

problem Generated/2576 {
code {
        func split_string_based_on_count(source: string, string_count: int) -> list<string>
    }
    tests {
        template nse {
            ("The quick brown fox jumps over the lazy dog", 5) -> ["The q", "uick ", "brown", " fox ", "jumps", " over", " the ", "lazy ", "dog"]
("The quick brown fox jumps over the lazy dog", 10) -> ["The quick ", "brown fox ", "jumps over", " the lazy ", "dog"]
("The quick brown fox jumps over the lazy dog", 3) -> ["The", " qu", "ick", " br", "own", " fo", "x j", "ump", "s o", "ver", " th", "e l", "azy", " do", "g"]
("This is a test string.", 2) -> ["Th", "is", " i", "s ", "a ", "te", "st", " s", "tr", "in", "g."]
("", 5) -> []
        }
    }
}

problem Generated/2577 {
code {
        func replace_list_elements(numbers: list<int>, old: int, new_dat: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2, 6) -> [1, 6, 3, 4, 5]
([1, 2, 3, 4, 5], 6, 7) -> [1, 2, 3, 4, 5]
([2, 4, 6, 8, 10], 5, 7) -> [2, 4, 6, 8, 10]
([1, 2, 3, 4, 5, 2, 6, 2], 2, 9) -> [1, 9, 3, 4, 5, 9, 6, 9]
([1, 1, 1, 1, 1], 1, 2) -> [2, 2, 2, 2, 2]
        }
    }
}

problem Generated/2578 {
code {
        func replace_list_elements(elements: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 6) -> [1, 2, 6, 4, 5]
([7, 3, 5, 9, 6, 3, 3], 3, 0) -> [7, 0, 5, 9, 6, 0, 0]
([1, 7, 4, 9, 5], 8, 2) -> [1, 7, 4, 9, 5]
([1, 7, 4, 9, 5, 3, 3, 3], 3, 8) -> [1, 7, 4, 9, 5, 8, 8, 8]
([1, 2, 3, 4, 5, 6, 7, 8], 1, 0) -> [0, 2, 3, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/2579 {
code {
        func replace_list_elements(input_lst: list<int>, element: int, replacement: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 7) -> [1, 2, 7, 4, 5]
([1, 2, 3, 4, 5], 6, 7) -> [1, 2, 3, 4, 5]
([1, 2, 3, 2, 5], 2, 7) -> [1, 7, 3, 7, 5]
([1, 2, 3, 4, 5], 5, 5) -> [1, 2, 3, 4, 5]
([1, 2, 3, 2, 5], 2, 2) -> [1, 2, 3, 2, 5]
        }
    }
}

problem Generated/2580 {
code {
        func replace_list_elements(elements: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 10) -> [1, 2, 10, 4, 5]
([7, 3, 5, 9, 6], 7, 2) -> [2, 3, 5, 9, 6]
([1, 7, 4, 9, 5], 12, 6) -> [1, 7, 4, 9, 5]
([], 1, 0) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 5, 10) -> [1, 2, 3, 4, 10, 6, 7, 8]
        }
    }
}

problem Generated/2581 {
code {
        func replace_elements_in_list(elements: list<int>, old: int, new_dat: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 6) -> [1, 2, 6, 4, 5]
([1, 2, 3, 4, 5], 6, 0) -> [1, 2, 3, 4, 5]
([2, 2, 2, 2, 2], 2, 0) -> [0, 0, 0, 0, 0]
([], 0, 1) -> []
([1, 2, 3, 4, 5], 4, 4) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/2582 {
code {
        func replace_element(elements: list<string>, old: string, new_dat: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry"], "banana", "orange") -> ["apple", "orange", "cherry"]
(["python", "python", "python"], "python", "java") -> ["java", "java", "java"]
([], "hello", "world") -> []
(["hello", "world"], "world", "") -> ["hello", ""]
(["a", "b", "c"], "d", "e") -> ["a", "b", "c"]
        }
    }
}

problem Generated/2583 {
code {
        func replace_value_in_list(lst: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 0) -> [1, 2, 0, 4, 5]
([1, 2, 3, 1, 2, 3], 2, 5) -> [1, 5, 3, 1, 5, 3]
([], 1, 0) -> []
([1, 2, 3], 4, 5) -> [1, 2, 3]
([1, 1, 1, 1], 1, 2) -> [2, 2, 2, 2]
        }
    }
}

problem Generated/2584 {
code {
        func replace_element_in_list(elements: list<int>, old_elem: int, new_elem: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 6) -> [1, 2, 6, 4, 5]
([7, 3, 5, 9, 6], 7, 2) -> [2, 3, 5, 9, 6]
([1, 7, 4, 9, 5], 2, 8) -> [1, 7, 4, 9, 5]
([1, 7, 4, 9, 5], 5, 2) -> [1, 7, 4, 9, 2]
([1, 2, 3, 4, 5, 6, 7, 8], 8, 0) -> [1, 2, 3, 4, 5, 6, 7, 0]
        }
    }
}

problem Generated/2585 {
code {
        func replace_list_elements(elements: list<string>, old_value: string, new_value: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "cherry", "grape") -> ["apple", "banana", "grape", "date"]
(["apple", "banana", "cherry", "date"], "berry", "grape") -> ["apple", "banana", "cherry", "date"]
(["apple", "banana", "cherry", "date"], "banana", "") -> ["apple", "", "cherry", "date"]
([], "orange", "lemon") -> []
(["apple", "banana", "cherry", "date"], "apple", "apricot") -> ["apricot", "banana", "cherry", "date"]
        }
    }
}

problem Generated/2586 {
code {
        func replace_negative_values(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, -2, 3, -4, 5]) -> [1, 2, 3, 4, 5]
([-1, -2, -3, -4, -5]) -> [1, 2, 3, 4, 5]
([]) -> []
([0, 1, 2, -3, -4, -5]) -> [0, 1, 2, 3, 4, 5]
        }
    }
}

problem Generated/2587 {
code {
        func replace_negative_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, -4, 5]) -> [1, 2, 3, 4, 5]
([7, -3, 5, 9, -6]) -> [7, 3, 5, 9, 6]
([0, -2, -3, 4, 0]) -> [0, 2, 3, 4, 0]
([-1, -7, -4, -9, -5]) -> [1, 7, 4, 9, 5]
([]) -> []
        }
    }
}

problem Generated/2588 {
code {
        func replace_negatives_with_abs(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.0, 0.0, 0.0]) -> [0.0, 0.0, 0.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.0, -1.0, 2.0, -3.0, 4.0, -5.0]) -> [0.0, 1.0, 2.0, 3.0, 4.0, 5.0]
        }
    }
}

problem Generated/2589 {
code {
        func replace_negatives(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.0, 1.0, -1.0, 2.0, -2.0]) -> [0.0, 1.0, 1.0, 2.0, 2.0]
([3.14, -2.71, 1.41, -1.73]) -> [3.14, 2.71, 1.41, 1.73]
([]) -> []
        }
    }
}

problem Generated/2590 {
code {
        func replace_negative_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, -3, 4, -5]) -> [1, 2, 3, 4, 5]
([0, 0, 0, 0]) -> [0, 0, 0, 0]
([10, -20, 30, -40, 50, -60, 70, -80, 90]) -> [10, 20, 30, 40, 50, 60, 70, 80, 90]
([-5, -4, -3, -2, -1]) -> [5, 4, 3, 2, 1]
([]) -> []
        }
    }
}

problem Generated/2591 {
code {
        func replace_negative_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([-1, 2, -3, 4, -5]) -> [1, 2, 3, 4, 5]
([-1, -2, -3, -4, -5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
([-1, 0, 1, -2, 2]) -> [1, 0, 1, 2, 2]
        }
    }
}

problem Generated/2592 {
code {
        func replace_negatives(original: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.0, -2.0, 3.0, -4.0, 5.0]) -> [0.0, 2.0, 3.0, 4.0, 5.0]
([]) -> []
([-1.5, -3.14159, 2.71828, 0.0, 1.414, -4.0]) -> [1.5, 3.14159, 2.71828, 0.0, 1.414, 4.0]
        }
    }
}

problem Generated/2593 {
code {
        func replace_max_num(numbers: list<int>, replace_num: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 6) -> [1, 2, 3, 4, 6]
([7, 3, 5, 9, 6], -1) -> [7, 3, 5, -1, 6]
([1, 7, 4, 9, 5], 0) -> [1, 7, 4, 0, 5]
([1, 7, 4, 9, 5], 0) -> [1, 7, 4, 0, 5]
([1, 2, 3, 4, 5, 6, 7, 8], 0) -> [1, 2, 3, 4, 5, 6, 7, 0]
        }
    }
}

problem Generated/2594 {
code {
        func replace_in_list(words: list<string>, old_word: string, new_word: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"], "o", "0") -> ["hell0", "w0rld", "pyth0n"]
(["hello", "world", "python"], "o", "") -> ["hell", "wrld", "pythn"]
(["hello", "world", "python"], "x", "y") -> ["hello", "world", "python"]
(["hello", "world", "python"], "l", "L") -> ["heLLo", "worLd", "python"]
([], "a", "b") -> []
        }
    }
}

problem Generated/2595 {
code {
        func replace_value_in_list(arr: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 0) -> [1, 2, 0, 4, 5]
([1, 1, 1, 1, 1], 1, 0) -> [0, 0, 0, 0, 0]
([], 1, 0) -> []
([5, 4, 3, 2, 1], 6, 0) -> [5, 4, 3, 2, 1]
([1, 2, 3, 4, 5], 1, 6) -> [6, 2, 3, 4, 5]
        }
    }
}

problem Generated/2596 {
code {
        func replace_value_in_list(elements: list<string>, old_value: string, new_value: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "apple", "date"], "apple", "mango") -> ["mango", "banana", "cherry", "mango", "date"]
(["apple", "banana", "cherry", "apple", "date"], "mango", "pear") -> ["apple", "banana", "cherry", "apple", "date"]
(["apple", "banana", "cherry", "apple", "date"], "banana", "kiwi") -> ["apple", "kiwi", "cherry", "apple", "date"]
(["apple", "banana", "cherry", "apple", "date"], "date", "peach") -> ["apple", "banana", "cherry", "apple", "peach"]
([], "apple", "mango") -> []
        }
    }
}

problem Generated/2597 {
code {
        func replace_list_elements(lst: list<int>, old: int, new_dat: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 6) -> [1, 2, 6, 4, 5]
([1, 2, 3, 4, 5], 6, 7) -> [1, 2, 3, 4, 5]
([], 1, 2) -> []
([1], 1, 2) -> [2]
([2, 4, 6, 8, 10], 5, 7) -> [2, 4, 6, 8, 10]
        }
    }
}

problem Generated/2598 {
code {
        func replace_in_list(items: list<string>, old_values: list<string>, new_values: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "banana"], ["banana", "orange"], ["pear", "kiwi"]) -> ["apple", "pear", "kiwi", "pear"]
(["apple", "banana", "orange", "banana"], ["pear", "kiwi"], ["banana", "orange"]) -> ["apple", "banana", "orange", "banana"]
([], [], []) -> []
(["apple", "banana", "orange", "banana"], ["banana", "pear"], ["kiwi", "orange"]) -> ["apple", "kiwi", "orange", "kiwi"]
(["apple", "banana", "orange", "banana"], ["pear", "kiwi"], ["kiwi", "pear"]) -> ["apple", "banana", "orange", "banana"]
        }
    }
}

problem Generated/2599 {
code {
        func replace_in_list(items: list<string>, old: string, new_dat: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "grape"], "orange", "mango") -> ["apple", "banana", "mango", "grape"]
(["hello", "world", "hello", "python"], "hello", "hi") -> ["hi", "world", "hi", "python"]
(["apple", "banana", "orange", "grape"], "pear", "mango") -> ["apple", "banana", "orange", "grape"]
([], "", "python") -> []
(["apple", "banana", "orange", "grape"], "apple", "") -> ["", "banana", "orange", "grape"]
        }
    }
}

problem Generated/2600 {
code {
        func replace_list_elements(elements: list<string>, old: string, new_dat: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], "hello", "hi") -> "hiworld"
(["hello", "world"], "hi", "hello") -> "helloworld"
(["apple", "banana", "cherry"], "banana", "orange") -> "appleorangecherry"
(["zero", "one", "two"], "three", "four") -> "zeroonetwo"
(["zero", "one", "two"], "two", "") -> "zeroone"
        }
    }
}

problem Generated/2601 {
code {
        func replace_duplicates_with_value(lst: list<int>, value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 3, 2], 0) -> [1, 2, 3, 4, 5, 0, 0]
([7, 3, 5, 9, 6, 5, 3], -1) -> [7, 3, 5, 9, 6, -1, -1]
([1, 2, 3, 4, 5], 0) -> [1, 2, 3, 4, 5]
([], 0) -> []
([1, 1, 1, 1, 1], 0) -> [1, 0, 0, 0, 0]
        }
    }
}

problem Generated/2602 {
code {
        func remove_elements_from_list(elements: list<int>, remove_lst: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [2, 4]) -> [1, 3, 5]
([7, 3, 5, 9, 6], [3, 9]) -> [7, 5, 6]
([1, 7, 4, 9, 5], [8, 2, 6]) -> [1, 7, 4, 9, 5]
([1, 7, 4, 9, 5], []) -> [1, 7, 4, 9, 5]
([1, 2, 3, 4, 5, 6, 7, 8], [1, 3, 5, 7]) -> [2, 4, 6, 8]
        }
    }
}

problem Generated/2603 {
code {
        func replace_values_in_list(elements: list<string>, old_values: list<string>, new_value: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "orange", "banana"], ["orange"], "pear") -> ["apple", "pear", "banana"]
(["apple", "orange", "banana"], ["pear"], "pear") -> ["apple", "orange", "banana"]
(["apple", "orange", "banana"], [], "pear") -> ["apple", "orange", "banana"]
([], ["pear"], "pear") -> []
(["apple", "orange", "banana"], ["apple", "banana"], "pear") -> ["pear", "orange", "pear"]
        }
    }
}

problem Generated/2604 {
code {
        func sort_list_and_replace(elements: list<int>, old: int, new_dat: int) -> list<int>
    }
    tests {
        template nse {
            ([3, 5, 2, 5, 8, 5, 1], 5, 7) -> [1, 2, 3, 7, 7, 7, 8]
([5, 5, 5, 5, 5, 5, 5], 5, 2) -> [2, 2, 2, 2, 2, 2, 2]
([1, 3, 6, 2, 4], 7, 8) -> [1, 2, 3, 4, 6]
([1, 2, 3, 4, 5], 0, 6) -> [1, 2, 3, 4, 5]
([3, 4, 2, 1], 2, 5) -> [1, 3, 4, 5]
        }
    }
}

problem Generated/2605 {
code {
        func replace_sort_list(lst: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 6) -> [1, 2, 4, 5, 6]
([5, 4, 3, 2, 1], 2, 9) -> [1, 3, 4, 5, 9]
([1, 2, 3, 4, 5], 6, 7) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1], 1, 0) -> [0, 0, 0, 0, 0]
([], 3, 6) -> []
        }
    }
}

problem Generated/2606 {
code {
        func replace_elements_sorted(elements: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 9) -> [1, 2, 4, 5, 9]
([7, 3, 5, 9, 6], 6, 2) -> [2, 3, 5, 7, 9]
([1, 7, 4, 9, 5], 2, 8) -> [1, 4, 5, 7, 9]
([1, 7, 4, 9, 5], 10, 8) -> [1, 4, 5, 7, 9]
([1, 2, 3, 4, 5, 6, 7, 8], 5, 0) -> [0, 1, 2, 3, 4, 6, 7, 8]
        }
    }
}

problem Generated/2607 {
code {
        func replace_list_element(elements: list<string>, old_element: string, new_element: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "banana"], "banana", "orange") -> ["apple", "orange", "cherry", "orange"]
(["apple", "banana", "cherry", "banana"], "grape", "orange") -> ["apple", "banana", "cherry", "banana"]
(["apple", "banana", "cherry", "banana"], "banana", "") -> ["apple", "", "cherry", ""]
(["apple", "banana", "cherry", "banana"], "apple", "orange") -> ["orange", "banana", "cherry", "banana"]
([], "apple", "orange") -> []
        }
    }
}

problem Generated/2608 {
code {
        func replace_value_in_list(elements: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 0) -> [1, 2, 0, 4, 5]
([1, 2, 3, 4, 5], 6, 0) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 3], 3, 0) -> [1, 2, 0, 4, 0]
([1, 1, 1, 1, 1], 1, 0) -> [0, 0, 0, 0, 0]
([], 1, 0) -> []
        }
    }
}

problem Generated/2609 {
code {
        func replace_binary_string(elements: list<int>, search: int, replace: int) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2, 6) -> ["1", "110", "11", "100", "101"]
([0, 1, 0, 1], 1, 2) -> ["0", "10", "0", "10"]
([3, 4, 5, 6], 9, 2) -> ["11", "100", "101", "110"]
([0, 1, 0, 1], 2, 7) -> ["0", "1", "0", "1"]
([1, 1, 1, 1], 1, 0) -> ["0", "0", "0", "0"]
        }
    }
}

problem Generated/2610 {
code {
        func replace_in_list(lst: list<string>, old: string, new_dat: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry"], "a", "e") -> ["epple", "benene", "cherry"]
(["apple", "banana", "cherry"], "o", "u") -> ["apple", "banana", "cherry"]
([], "a", "e") -> []
(["cat", "dog", "cow"], "o", "a") -> ["cat", "dag", "caw"]
(["hello", "world"], "l", "z") -> ["hezzo", "worzd"]
        }
    }
}

problem Generated/2611 {
code {
        func replace_string(sentence: string, old_word: string, new_word: string) -> string
    }
    tests {
        template nse {
            ("Today is a good day", "good", "great") -> "Today is a great day"
("The cat in the hat", "hat", "mat") -> "The cat in the mat"
("To be or not to be", "be", "eat") -> "To eat or not to eat"
("The quick brown fox", "dog", "cat") -> "The quick brown fox"
("Hello world", "Hello", "Hi") -> "Hi world"
        }
    }
}

problem Generated/2612 {
code {
        func replace_list_items(lst: list<string>, old_value: string, new_value: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "pear", "banana", "kiwi"], "banana", "orange") -> ["apple", "orange", "pear", "orange", "kiwi"]
(["hello", "world", "hello", "universe"], "hello", "hi") -> ["hi", "world", "hi", "universe"]
(["apple", "orange", "banana"], "kiwi", "grape") -> ["apple", "orange", "banana"]
(["apple", "orange", "banana"], "a", "o") -> ["opple", "oronge", "bonono"]
(["1", "2", "3"], "3", "4") -> ["1", "2", "4"]
        }
    }
}

problem Generated/2613 {
code {
        func replace_word_in_sentence(sentence: string, old_word: string, new_word: string) -> string
    }
    tests {
        template nse {
            ("I love apples, but I do not love oranges", "love", "hate") -> "I hate apples, but I do not hate oranges"
("This is a test sentence", "test", "trial") -> "This is a trial sentence"
("The quick brown fox jumps over the lazy dog", "fox", "cat") -> "The quick brown cat jumps over the lazy dog"
("The quick brown fox jumps over the lazy dog", "dog", "puppy") -> "The quick brown fox jumps over the lazy puppy"
("The quick brown fox jumps over the lazy dog", "cow", "bull") -> "The quick brown fox jumps over the lazy dog"
        }
    }
}

problem Generated/2614 {
code {
        func replace_strings(strs: list<string>, old_str: string, new_str: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "Apple"], "apple", "orange") -> ["orange", "banana", "cherry", "orange"]
([], "apple", "orange") -> []
(["apple", "banana", "cherry"], "mango", "orange") -> ["apple", "banana", "cherry"]
(["Apple", "apple", "ApPlE"], "apple", "orange") -> ["orange", "orange", "orange"]
(["apple", "banana", "cherry"], "", "orange") -> ["apple", "banana", "cherry"]
        }
    }
}

problem Generated/2615 {
code {
        func replace_list_items(lst: list<string>, old: string, new_dat: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "Cherry", "apple"], "apple", "orange") -> ["orange", "banana", "cherry", "orange"]
(["APPLE", "banana", "CHERRY", "apple"], "apple", "orange") -> ["orange", "banana", "cherry", "orange"]
(["apple", "banana", "cherry", "apple"], "PEAR", "orange") -> ["apple", "banana", "cherry", "apple"]
(["apple", "BANANA", "cherry", "kiwi"], "banana", "orange") -> ["apple", "orange", "cherry", "kiwi"]
([], "apple", "orange") -> []
        }
    }
}

problem Generated/2616 {
code {
        func replace_value_in_list(lst: list<string>, old_value: string, new_value: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "apple"], "apple", "orange") -> ["ORANGE", "banana", "cherry", "ORANGE"]
(["cat", "dog", "parrot", "dog"], "dog", "hamster") -> ["cat", "HAMSTER", "parrot", "HAMSTER"]
(["one", "two", "three", "four"], "five", "seven") -> ["one", "two", "three", "four"]
([], "apple", "orange") -> []
(["a", "b", "C", "d"], "c", "e") -> ["a", "b", "C", "d"]
        }
    }
}

problem Generated/2617 {
code {
        func replace_strings_with_uppercase(strs: list<string>, old: string, new_dat: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hello", "again"], "hello", "hi") -> ["HI", "WORLD", "HI", "AGAIN"]
(["hello", "world", "hello", "again"], "l", "x") -> ["HEXXO", "WORXD", "HEXXO", "AGAIN"]
([], "hello", "hi") -> []
(["hello"], "goodbye", "farewell") -> ["HELLO"]
(["abc", "def", "ghi", "jkl"], "", "") -> ["ABC", "DEF", "GHI", "JKL"]
        }
    }
}

problem Generated/2618 {
code {
        func replace_list_elements_with_uppercase_strings(elements: list<string>, idx: int) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry"], 0) -> ["APPLE", "banana", "cherry"]
(["apple", "banana", "cherry"], 2) -> ["apple", "banana", "CHERRY"]
(["apple", "banana", "cherry"], 1) -> ["apple", "BANANA", "cherry"]
(["apple", "banana", "cherry"], 3) -> ["apple", "banana", "cherry"]
([], 0) -> []
        }
    }
}

problem Generated/2619 {
code {
        func replace_uppercase_strings(input_lst: list<string>, replacement: string) -> list<string>
    }
    tests {
        template nse {
            (["Hi", "HELLO", "how", "ARE", "you"], "---") -> ["Hi", "---", "how", "---", "you"]
(["red", "GREEN", "blue", "YELLOW"], "white") -> ["red", "white", "blue", "white"]
(["APPLE", "banana", "grape", "PEAR", "orange"], "fruit") -> ["fruit", "banana", "grape", "fruit", "orange"]
(["a", "b", "c", "d", "e"], "x") -> ["a", "b", "c", "d", "e"]
(["UPPERCASE", "UPPERCASE", "uppercase", "UPPERCASE"], "lowercase") -> ["lowercase", "lowercase", "uppercase", "lowercase"]
        }
    }
}

problem Generated/2620 {
code {
        func replace_all_elements_with_uppercase(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "How", "Are", "You"]) -> ["REPLACED", "WORLD", "REPLACED", "REPLACED", "REPLACED"]
(["Python", "is", "AWESOME"]) -> ["REPLACED", "REPLACED", "AWESOME"]
(["UPPERCASE", "LETTERS", "SHOULD", "STAY", "SAME"]) -> ["UPPERCASE", "LETTERS", "SHOULD", "STAY", "SAME"]
(["", "", ""]) -> ["REPLACED", "REPLACED", "REPLACED"]
([]) -> []
        }
    }
}

problem Generated/2621 {
code {
        func replace_alpha_elements(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["a", "b", "c", "d", "e"]) -> ["X", "X", "X", "X", "X"]
(["hello", "world", "123", "456"]) -> ["X", "X", "123", "456"]
(["alpha", "beta", "13", "gamma", "delta"]) -> ["X", "X", "13", "X", "X"]
(["123", "456", "789"]) -> ["123", "456", "789"]
([]) -> []
        }
    }
}

problem Generated/2622 {
code {
        func replace_numbers_in_list(lst: list<string>, old: string, new_dat: string) -> list<string>
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"], "3", "13") -> ["1", "2", "13", "4", "5"]
(["cat", "dog", "3", "fish", "bird"], "3", "bird") -> ["cat", "dog", "bird", "fish", "bird"]
(["12", "13", "14", "15", "16"], "12", "19") -> ["19", "13", "14", "15", "16"]
(["apple", "banana", "cherry"], "3", "four") -> ["apple", "banana", "cherry"]
([], "3", "four") -> []
        }
    }
}

problem Generated/2623 {
code {
        func replace_list_elements(elements: list<string>, old: string, new_dat: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"], "o", "O") -> ["hellO", "wOrld", "pythOn"]
(["123", "456", "789"], "123", "1") -> ["1", "456", "789"]
(["12", "34", "56"], "7", "8") -> ["12", "34", "56"]
([], "a", "b") -> []
([""], "a", "b") -> [""]
        }
    }
}

problem Generated/2624 {
code {
        func replace_digits_in_strings(strs: list<string>, replacement: string) -> list<string>
    }
    tests {
        template nse {
            (["hello123", "world456", "python789"], "*") -> ["hello*", "world*", "python*"]
(["abc", "def", "ghi"], "x") -> ["abc", "def", "ghi"]
(["hello123", "world456", "python789"], "") -> ["hello", "world", "python"]
(["abc123", "def456", "ghi"], "x") -> ["abcx", "defx", "ghi"]
([], "y") -> []
        }
    }
}

problem Generated/2625 {
code {
        func replace_digit_strings_in_list(lst: list<string>, replacement: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123"], "*") -> ["hello", "world", "*"]
(["1", "2", "3"], "0") -> ["0", "0", "0"]
(["hello", "world"], "12345") -> ["hello", "world"]
([], "0") -> []
(["123", "abc"], "") -> ["", "abc"]
        }
    }
}

problem Generated/2626 {
code {
        func replace_element_with_prefix(elements: list<string>, pre: string, replacement: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry"], "a", "orange") -> ["orangepple", "banana", "cherry"]
(["apple", "banana", "cherry"], "ba", "pear") -> ["apple", "pearnana", "cherry"]
(["apple", "banana", "cherry"], "kiwi", "orange") -> ["apple", "banana", "cherry"]
([], "a", "orange") -> []
([""], "", "orange") -> ["orange"]
        }
    }
}

problem Generated/2627 {
code {
        func replace_elements_in_list(elements: list<string>, old_elem: string, new_elem: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hello", "python"], "hello", "hi") -> ["hi", "world", "hi", "python"]
(["apple", "banana", "cherry"], "orange", "grape") -> ["apple", "banana", "cherry"]
(["hello", "world", "hello", "python"], "hi", "hello") -> ["hello", "world", "hello", "python"]
(["apple", "banana", "cherry"], "banana", "orange") -> ["apple", "orange", "cherry"]
([], "", "new") -> []
        }
    }
}

problem Generated/2628 {
code {
        func replace_elements_in_list(elements: list<string>, old: string, new_dat: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "banana"], "banana", "orange") -> ["apple", "orange", "cherry", "orange"]
(["hello", "world", "hello", "world"], "world", "python") -> ["hello", "python", "hello", "python"]
(["a", "b", "a", "c", "a"], "a", "z") -> ["z", "b", "z", "c", "z"]
([], "a", "b") -> []
(["a", "b", "c", "d"], "e", "f") -> ["a", "b", "c", "d"]
        }
    }
}

problem Generated/2629 {
code {
        func replace_list_items(items: list<string>, old_item: string, new_item: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "banana", "melon"], "banana", "orange") -> ["apple", "orange", "cherry", "orange", "melon"]
(["one", "two", "three", "four", "five"], "six", "seven") -> ["one", "two", "three", "four", "five"]
(["one", "two", "one", "four", "one"], "one", "six") -> ["six", "two", "six", "four", "six"]
(["apple", "banana", "cherry", "banana", "melon"], "Orange", "orange") -> ["apple", "banana", "cherry", "banana", "melon"]
([], "", "new") -> []
        }
    }
}

problem Generated/2630 {
code {
        func replace_value_in_list(elements: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 4, 2], 2, 5) -> [1, 5, 3, 5, 4, 5]
([1, 2, 3, 4, 5], 6, 7) -> [1, 2, 3, 4, 5]
([1, 2, 3, 2, 4, 2], 2, 2) -> [1, 2, 3, 2, 4, 2]
([], 0, 1) -> []
([1, 1, 1, 1, 1], 1, 0) -> [0, 0, 0, 0, 0]
        }
    }
}

problem Generated/2631 {
code {
        func replace_list_elements_based_on_cond(my_lst: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 6) -> [1, 2, 6, 4, 5]
([7, 3, 5, 9, 6], 6, 2) -> [7, 3, 5, 9, 2]
([1, 7, 4, 9, 5], 8, 2) -> [1, 7, 4, 9, 5]
([1, 7, 4, 9, 5], 5, 5) -> [1, 7, 4, 9, 5]
([1, 2, 3, 4, 5, 6, 7, 8], 2, 9) -> [1, 9, 3, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/2632 {
code {
        func replace_element_in_list(elements: list<int>, old_element: int, new_element: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 6) -> [1, 2, 6, 4, 5]
([7, 3, 5, 9, 6, 3], 3, 8) -> [7, 8, 5, 9, 6, 8]
([1, 7, 4, 9, 5], 6, 0) -> [1, 7, 4, 9, 5]
([1, 7, 4, 9, 5], 5, 0) -> [1, 7, 4, 9, 0]
([1, 2, 3, 4, 5, 6, 7, 8], 2, 9) -> [1, 9, 3, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/2633 {
code {
        func replace_element_in_list(elements: list<int>, old_element: int, new_element: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 6) -> [1, 2, 6, 4, 5]
([1, 2, 3, 4, 5], 6, 7) -> [1, 2, 3, 4, 5]
([], 1, 2) -> []
([1], 1, 2) -> [2]
([1, 1, 1, 1, 1], 1, 2) -> [2, 2, 2, 2, 2]
        }
    }
}

problem Generated/2634 {
code {
        func replace_and_sort(arr: list<int>, old: int, new_dat: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 6) -> [1, 2, 4, 5, 6]
([5, 5, 5, 5, 5], 5, 1) -> [1, 1, 1, 1, 1]
([3, 4, 5, 6, 7], 2, 8) -> [3, 4, 5, 6, 7]
([5, 4, 3, 2, 1], 4, 5) -> [1, 2, 3, 5, 5]
([1, 2, 1, 2, 1, 2], 2, 3) -> [1, 1, 1, 3, 3, 3]
        }
    }
}

problem Generated/2635 {
code {
        func replace_and_sort_list(original_lst: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 6) -> [1, 2, 4, 5, 6]
([1, 2, 3, 3, 4, 5, 3], 3, 0) -> [0, 0, 0, 1, 2, 4, 5]
([3, 3, 3, 3, 3], 3, 7) -> [7, 7, 7, 7, 7]
([1, 2, 3], 4, 5) -> [1, 2, 3]
([], 1, 2) -> []
        }
    }
}

problem Generated/2636 {
code {
        func replace_elements(lst: list<int>, old_elem: int, new_elem: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 6) -> [1, 2, 6, 4, 5]
([1, 2, 3, 3, 3, 4, 5], 3, 6) -> [1, 2, 6, 6, 6, 4, 5]
([1, 1, 1, 1], 1, 0) -> [0, 0, 0, 0]
([], 3, 6) -> []
([1, 2, 3, 4, 5], 6, 7) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/2637 {
code {
        func replace_element_in_list(elements: list<int>, old_element: int, new_element: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 6) -> [1, 2, 6, 4, 5]
([1, 2, 3, 4, 5], 6, 7) -> [1, 2, 3, 4, 5]
([], 1, 2) -> []
([1], 1, 2) -> [2]
([1, 2, 3, 4, 5], 5, 10) -> [1, 2, 3, 4, 10]
        }
    }
}

problem Generated/2638 {
code {
        func replace_element_in_list(lst: list<int>, element: int, new_element: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 6) -> [1, 2, 6, 4, 5]
([1, 2, 3, 4, 5], 6, 7) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5, 3], 3, 6) -> [1, 2, 6, 4, 5, 3]
([1, 2, 3, 4, 5], 5, -1) -> [1, 2, 3, 4, -1]
([], 5, -1) -> []
        }
    }
}

problem Generated/2639 {
code {
        func replace_list_element(l: list<int>, old: int, new_dat: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 6) -> [1, 2, 6, 4, 5]
([1, 2, 3, 4, 5], 9, 6) -> [1, 2, 3, 4, 5]
([1, 2, 2, 4, 5, 2, 7], 2, 9) -> [1, 9, 9, 4, 5, 9, 7]
([3, 3, 3, 3, 3], 3, 9) -> [9, 9, 9, 9, 9]
([], 3, 9) -> []
        }
    }
}

problem Generated/2640 {
code {
        func reverse_and_remove(elements: list<int>, to_remove: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [5, 4, 2, 1]
([1, 3, 3, 4, 5], 3) -> [5, 4, 1]
([1, 2, 2, 2, 2], 2) -> [1]
([4, 4, 4, 4, 4], 2) -> [4, 4, 4, 4, 4]
([1, 2, 3], 4) -> [3, 2, 1]
        }
    }
}

problem Generated/2641 {
code {
        func replace_list_element(elements: list<int>, old: int, new_dat: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 7) -> [5, 4, 7, 2, 1]
([2, 2, 2, 2, 2], 2, 3) -> [3, 3, 3, 3, 3]
([1, 2, 3, 4, 5], 6, 7) -> [5, 4, 3, 2, 1]
([1, 2, 3, 4, 5], 1, 7) -> [5, 4, 3, 2, 7]
([], 1, 7) -> []
        }
    }
}

problem Generated/2642 {
code {
        func replace_elements_in_list(lst: list<int>, old_elem: int, new_elem: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 0) -> [1, 2, 0, 4, 5]
([1, 2, 3, 4, 5], 7, 0) -> [1, 2, 3, 4, 5]
([1, 2, 3, 2, 5], 2, 0) -> [1, 0, 3, 0, 5]
([1, 2, 1, 4, 5], 1, 7) -> [7, 2, 7, 4, 5]
([], 1, 2) -> []
        }
    }
}

problem Generated/2643 {
code {
        func replace_element_in_list(l: list<string>, old: string, new_dat: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "apple"], "apple", "orange") -> ["orange", "banana", "cherry", "orange"]
(["1", "2", "3", "4", "5"], "3", "0") -> ["1", "2", "0", "4", "5"]
(["apple", "banana", "cherry", "apple"], "orange", "pear") -> ["apple", "banana", "cherry", "apple"]
([], "apple", "orange") -> []
(["red", "green", "blue"], "green", "yellow") -> ["red", "yellow", "blue"]
        }
    }
}

problem Generated/2644 {
code {
        func replace_element_in_list(arr: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 6) -> [1, 2, 6, 4, 5]
([1, 2, 3, 4, 5], 6, 7) -> [1, 2, 3, 4, 5]
([3, 3, 3, 3, 3], 3, 7) -> [7, 7, 7, 7, 7]
([], 3, 6) -> []
([1, 2, 3, 4, 3, 5], 3, 6) -> [1, 2, 6, 4, 6, 5]
        }
    }
}

problem Generated/2645 {
code {
        func replace_element(elements: list<int>, old_elem: int, new_elem: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 5, 6) -> [1, 2, 3, 4, 6]
([1, 2, 3, 1, 5], 1, 4) -> [4, 2, 3, 4, 5]
([1, 2, 3, 4, 5], 6, 7) -> [1, 2, 3, 4, 5]
([], 1, 2) -> []
([1, 1, 1, 1, 1, 1], 1, 0) -> [0, 0, 0, 0, 0, 0]
        }
    }
}

problem Generated/2646 {
code {
        func replace_list_element(elements: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 10) -> [1, 2, 10, 4, 5]
([1, 1, 1, 1, 1], 1, 10) -> [10, 10, 10, 10, 10]
([1, 2, 3, 4, 5], 6, 10) -> [1, 2, 3, 4, 5]
([], 1, 10) -> []
([1, 2, 3, 4, 5], 1, 1) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/2647 {
code {
        func replace_element(elements: list<string>, old: string, new_dat: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "banana", "orange", "apple"], "banana", "pear") -> ["apple", "pear", "pear", "orange", "apple"]
(["a", "a", "b", "b", "c", "c"], "b", "d") -> ["a", "a", "d", "d", "c", "c"]
(["hello", "world"], "world", "Python") -> ["hello", "Python"]
(["1", "2", "3"], "4", "5") -> ["1", "2", "3"]
(["hello", "world"], "python", "Java") -> ["hello", "world"]
        }
    }
}

problem Generated/2648 {
code {
        func replace_list_items(items: list<string>, old_item: string, new_item: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry"], "banana", "orange") -> ["apple", "orange", "cherry"]
(["apple", "banana", "cherry"], "kiwi", "orange") -> ["apple", "banana", "cherry"]
([], "kiwi", "orange") -> []
(["apple", "banana", "banana"], "banana", "orange") -> ["apple", "orange", "orange"]
(["apple", "banana", "cherry"], "APPLE", "orange") -> ["apple", "banana", "cherry"]
        }
    }
}

problem Generated/2649 {
code {
        func remove_duplicates_keep_order(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 2, 3, 4, 4, 5]) -> [1, 2, 3, 4, 5]
([2, 3, 1, 4, 1, 5, 2, 3, 6]) -> [2, 3, 1, 4, 5, 6]
([]) -> []
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1]) -> [1]
        }
    }
}

problem Generated/2650 {
code {
        func replace_values(elements: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 0) -> [1, 2, 0, 4, 5]
([7, 3, 5, 9, 6], 5, 2) -> [7, 3, 2, 9, 6]
([1, 7, 4, 9, 5], 8, 2) -> [1, 7, 4, 9, 5]
([], 1, 0) -> []
([1, 2, 3, 4, 5], 6, 0) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/2651 {
code {
        func replace_values(values: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 4, 6], 4, 0) -> [1, 2, 3, 0, 5, 0, 6]
([1, 2, 3, 4, 5], 6, 0) -> [1, 2, 3, 4, 5]
([], 1, 2) -> []
([1, 1, 1, 1, 1], 1, 2) -> [2, 2, 2, 2, 2]
([1, 2, 3, 4, 5], 5, 5) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/2652 {
code {
        func replace_list_items(lst: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([], 0, 1) -> []
([1, 2, 3, 4, 5], 3, 0) -> [1, 2, 0, 4, 5]
([1, 2, 3, 3, 4, 5, 3], 3, 9) -> [1, 2, 9, 9, 4, 5, 9]
([1, 2, 3, 4, 5], 6, 9) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1], 1, 0) -> [0, 0, 0, 0]
        }
    }
}

problem Generated/2653 {
code {
        func replace_elements(elements: list<int>, old_element: int, new_element: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2, 6) -> [1, 6, 3, 4, 5]
([1, 2, 3, 4, 5], 6, 7) -> [1, 2, 3, 4, 5]
([1, 1, 2, 3, 4, 5, 1], 1, 0) -> [0, 0, 2, 3, 4, 5, 0]
([], 2, 6) -> []
([1, 2, 3, 4, 5], 5, 5) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/2654 {
code {
        func replace_substring(strs: list<string>, old: string, new_dat: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange"], "a", "e") -> ["epple", "benene", "orenge"]
(["apple", "banana", "orange"], "orange", "grapefruit") -> ["apple", "banana", "grapefruit"]
(["apple", "banana", "orange"], "mango", "peach") -> ["apple", "banana", "orange"]
(["123", "456", "789"], "3", "0") -> ["120", "456", "789"]
(["abc", "def", "ghi"], "de", "yz") -> ["abc", "yzf", "ghi"]
        }
    }
}

problem Generated/2655 {
code {
        func replace_elements(elements: list<double>, old_value: double, new_value: double) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 3.0, 6.0) -> [1.0, 2.0, 6.0, 4.0, 5.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 6.0, 7.0) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([1.0, 2.0, 3.0001, 4.0, 5.0], 3.0, 6.0) -> [1.0, 2.0, 3.0001, 4.0, 5.0]
([1.0, 2.0, 3.0000001, 4.0, 5.0], 3.0, 6.0) -> [1.0, 2.0, 6.0, 4.0, 5.0]
([], 3.0, 6.0) -> []
        }
    }
}

problem Generated/2656 {
code {
        func replace_list_elements(lst: list<double>, x: int, y: int) -> list<double>
    }
    tests {
        template nse {
            ([1.2, 2.3, 3.4, 4.5, 5.6], 2, 7) -> [1.2, 7.0, 3.4, 4.5, 5.6]
([1.5, 2.5, 3.5, 4.5, 5.5], 1, 0) -> [0.0, 2.5, 3.5, 4.5, 5.5]
([1.1, 2.2, 3.3, 4.4, 5.5], 5, 9) -> [1.1, 2.2, 3.3, 4.4, 9.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 3, 7) -> [1.0, 2.0, 7.0, 4.0, 5.0]
([1.1, 2.2, 3.3, 4.4, 5.5], 6, 9) -> [1.1, 2.2, 3.3, 4.4, 5.5]
        }
    }
}

problem Generated/2657 {
code {
        func replace_list_items(lst: list<int>, old_item: int, new_item: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 7) -> [1, 2, 7, 4, 5]
([1, 2, 3, 4, 5], 6, 7) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5], 1, 0) -> [0, 2, 3, 4, 5]
([1, 1, 1, 1, 1], 1, 2) -> [2, 2, 2, 2, 2]
([], 1, 2) -> []
        }
    }
}

problem Generated/2658 {
code {
        func replace_sqrt(numbers: list<double>, num_to_replace: double) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2.0) -> [1.0, 1.4142135623730951, 3.0, 4.0, 5.0]
([9.0, 16.0, 25.0, 36.0, 49.0], 7.0) -> [9.0, 16.0, 25.0, 36.0, 49.0]
([], 4.0) -> []
([4.0, 4.0, 4.0, 4.0, 4.0], 4.0) -> [2.0, 2.0, 2.0, 2.0, 2.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 6.0) -> [1.0, 2.0, 3.0, 4.0, 5.0]
        }
    }
}

problem Generated/2659 {
code {
        func replace_in_list(elements: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 6) -> [1, 2, 6, 4, 5]
([7, 3, 5, 9, 6], 7, 10) -> [10, 3, 5, 9, 6]
([1, 7, 4, 9, 5], 2, 8) -> [1, 7, 4, 9, 5]
([1, 7, 4, 9, 5], 5, 0) -> [1, 7, 4, 9, 0]
([1, 2, 3, 4, 5, 6, 7, 8], 3, 0) -> [1, 2, 0, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/2660 {
code {
        func get_sqrt_list(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([2.0, 4.0, 9.0, 16.0, 25.0]) -> [1.4142135623730951, 2.0, 3.0, 4.0, 5.0]
([1.0, 3.0, 5.0, 7.0, 9.0]) -> [1.0, 1.7320508075688772, 2.23606797749979, 2.6457513110645907, 3.0]
([0.0, 1.0, 4.0, 9.0, 16.0]) -> [0.0, 1.0, 2.0, 3.0, 4.0]
([0.25, 0.5, 1.0, 2.0, 4.0]) -> [0.5, 0.7071067811865476, 1.0, 1.4142135623730951, 2.0]
([]) -> []
        }
    }
}

problem Generated/2661 {
code {
        func replace_list_elements(elements: list<double>, old_value: double, new_value: double) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 3.0, 7.0) -> [1.0, 2.0, 7.0, 4.0, 5.0]
([1.0, 2.0, 3.0, 3.0, 5.0], 3.0, 0.0) -> [1.0, 2.0, 0.0, 0.0, 5.0]
([1.0, 2.5, 3.2, 4.0, 5.0], 3.0, 7.0) -> [1.0, 2.5, 3.2, 4.0, 5.0]
([0.0, 0.0, 0.0, 0.0], 0.0, 1.0) -> [1.0, 1.0, 1.0, 1.0]
([1.0, 1.000000000001, 1.0000000000001, 1.0], 1.0, 0.0) -> [0.0, 0.0, 0.0, 0.0]
        }
    }
}

problem Generated/2662 {
code {
        func power_list_elements(elements: list<int>, power: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], 2) -> [1, 4, 9]
([4, 5, 6], 3) -> [64, 125, 216]
([7, 8, 9], 1) -> [7, 8, 9]
([10, 11, 12], 0) -> [1, 1, 1]
([], 3) -> []
        }
    }
}

problem Generated/2663 {
code {
        func replace_list_elements_with_pow(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, -8.0, 9.0, -64.0, 25.0]
([0.0, 2.0, -3.0, 4.0, -5.0]) -> [0.0, 4.0, -27.0, 16.0, -125.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [-1.0, -8.0, -27.0, -64.0, -125.0]
([0.0, 0.0, 0.0]) -> [0.0, 0.0, 0.0]
([1.0, 1.0, 1.0]) -> [1.0, 1.0, 1.0]
        }
    }
}

problem Generated/2664 {
code {
        func replace_word_in_list(words: list<string>, old_word: string, new_word: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange"], "banana", "pear") -> ["apple", "pear", "orange"]
(["hello", "world", "world", "world"], "world", "universe") -> ["hello", "universe", "universe", "universe"]
(["one", "two", "three"], "four", "five") -> ["one", "two", "three"]
([], "empty", "nonempty") -> []
(["the", "quick", "brown", "fox"], "fox", "cat") -> ["the", "quick", "brown", "cat"]
        }
    }
}

problem Generated/2665 {
code {
        func replace_word_in_string(s: string, old_word: string, new_word: string) -> string
    }
    tests {
        template nse {
            ("hello world", "world", "there") -> "hello there"
("hello world", "world", "") -> "hello "
("to be or not to be", "be", "eat") -> "to eat or not to eat"
("hello world", "there", "world") -> "hello world"
("", "world", "there") -> ""
        }
    }
}

problem Generated/2666 {
code {
        func replace_in_list(elements: list<string>, old: string, new_dat: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange"], "banana", "grape") -> ["apple", "grape", "orange"]
(["The", "quick", "brown", "fox"], "fox", "dog") -> ["The", "quick", "brown", "dog"]
(["hello", "world", "hello", "world"], "world", "Python") -> ["hello", "Python", "hello", "Python"]
(["one", "two", "three"], "four", "five") -> ["one", "two", "three"]
([], "hello", "world") -> []
        }
    }
}

problem Generated/2667 {
code {
        func generate_multiples_of_given_number(num: int, count: int) -> list<int>
    }
    tests {
        template nse {
            (2, 5) -> [2, 4, 6, 8, 10]
(5, 3) -> [5, 10, 15]
(7, 7) -> [7, 14, 21, 28, 35, 42, 49]
(0, 5) -> [0, 0, 0, 0, 0]
(-2, 3) -> [-2, -4, -6]
        }
    }
}

problem Generated/2668 {
code {
        func generate_list_of_squares(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [0, 1, 4, 9, 16]
(1) -> [0]
(0) -> []
(10) -> [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
(3) -> [0, 1, 4]
        }
    }
}

problem Generated/2669 {
code {
        func generate_squares(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [0, 1, 4, 9, 16]
(0) -> []
(1) -> [0]
(2) -> [0, 1]
(10) -> [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
        }
    }
}

problem Generated/2670 {
code {
        func generate_multiples_of_3(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [3, 6, 9, 12, 15]
(1) -> [3]
(0) -> []
(10) -> [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]
(15) -> [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45]
        }
    }
}

problem Generated/2671 {
code {
        func generate_list_from_range(start: int, last: int, step: int) -> list<int>
    }
    tests {
        template nse {
            (1, 10, 2) -> [1, 3, 5, 7, 9]
(1, 5, 1) -> [1, 2, 3, 4]
(5, 1, -1) -> [5, 4, 3, 2]
(1, 1, 1) -> []
(10, 1, -2) -> [10, 8, 6, 4, 2]
        }
    }
}

problem Generated/2672 {
code {
        func generate_fibonacci_series(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [0, 1, 1, 2, 3]
(10) -> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
(0) -> []
(1) -> [0]
(2) -> [0, 1]
        }
    }
}

problem Generated/2673 {
code {
        func generate_list_of_multiples(n: int, max_multiple: int) -> list<int>
    }
    tests {
        template nse {
            (2, 8) -> [2, 4, 6, 8]
(3, 15) -> [3, 6, 9, 12, 15]
(4, 12) -> [4, 8, 12]
(5, 20) -> [5, 10, 15, 20]
(10, 50) -> [10, 20, 30, 40, 50]
        }
    }
}

problem Generated/2674 {
code {
        func generate_list_of_squares(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [0, 1, 4, 9, 16]
(1) -> [0]
(0) -> []
(10) -> [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
(15) -> [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196]
        }
    }
}

problem Generated/2675 {
code {
        func generate_even_numbers(n: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [2, 4, 6, 8, 10]
(1) -> []
(20) -> [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
(33) -> [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]
(50) -> [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]
        }
    }
}

problem Generated/2676 {
code {
        func add_values_to_list(values: list<int>, num_times: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], 3) -> [1, 2, 3, 1, 2, 3, 1, 2, 3]
([0, 5, 10], 2) -> [0, 5, 10, 0, 5, 10]
([3, 7], 5) -> [3, 7, 3, 7, 3, 7, 3, 7, 3, 7]
([1], 10) -> [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
([], 4) -> []
        }
    }
}

problem Generated/2677 {
code {
        func create_matrix(rows: int, cols: int, value: int) -> list<list<int>>
    }
    tests {
        template nse {
            (3, 3, 0) -> [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
(2, 4, -1) -> [[-1, -1, -1, -1], [-1, -1, -1, -1]]
(1, 1, 5) -> [[5]]
(0, 3, 9) -> []
(5, 0, 7) -> [[], [], [], [], []]
        }
    }
}

problem Generated/2678 {
code {
        func append_elements_to_list(elements: list<int>, length: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 8) -> [1, 2, 3, 4, 5, 0, 0, 0]
([7, 3, 5, 9, 6], 3) -> [7, 3, 5, 9, 6]
([1, 7, 4, 9, 5], 5) -> [1, 7, 4, 9, 5]
([1, 7, 4, 9, 5], 8) -> [1, 7, 4, 9, 5, 0, 0, 0]
([1, 2, 3, 4, 5, 6, 7, 8], 3) -> [1, 2, 3, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/2679 {
code {
        func add_elements_to_list(num: int, elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            (3, [1, 2, 3]) -> [4, 5, 6, 3]
(-2, [1, -1, 4, 0]) -> [-1, -3, 2, -2, -2]
(0, [1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5, 0]
(5, []) -> [5]
(2, [2]) -> [4, 2]
        }
    }
}

problem Generated/2680 {
code {
        func create_absolute_values_list(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([]) -> []
([1.5, 2.7, -4.3, 5.6]) -> [1.5, 2.7, 4.3, 5.6]
([0.0, -2.0, 3.0, -4.0, 5.0]) -> [0.0, 2.0, 3.0, 4.0, 5.0]
        }
    }
}

problem Generated/2681 {
code {
        func add_absolute_difference(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 1, 1, 1, 0]
([7, 3, 5, 9, 6]) -> [4, 2, 4, 3, 0]
([1, 7, 4, 9, 5]) -> [6, 3, 5, 4, 0]
([1, -7, 4, 9, 5]) -> [8, 11, 5, 4, 0]
([1]) -> [0]
        }
    }
}

problem Generated/2682 {
code {
        func sum_of_list_elements(lst: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 3, 6, 10, 15]
([7, 3, 5, 9, 6]) -> [7, 10, 15, 24, 30]
([1, 7, 4, 9, 5]) -> [1, 8, 12, 21, 26]
([1, -2, 3, -4, 5]) -> [1, -1, 2, -2, 3]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [1, 3, 6, 10, 15, 21, 28, 36]
        }
    }
}

problem Generated/2683 {
code {
        func create_fibonacci(n: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
(1) -> [0]
(0) -> []
(5) -> [0, 1, 1, 2, 3]
(20) -> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]
        }
    }
}

problem Generated/2684 {
code {
        func sum_of_matrices(matrix_a: list<list<int>>, matrix_b: list<list<int>>) -> list<list<int>>
    }
    tests {
        template nse {
            ([[1, 2], [3, 4]], [[1, 1], [1, 1]]) -> [[2, 3], [4, 5]]
([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
([[1, 0, 0], [0, 1, 0], [0, 0, 1]], [[1, 0, 0], [0, 1, 0], [0, 0, 1]]) -> [[2, 0, 0], [0, 2, 0], [0, 0, 2]]
([[-1, 2], [3, -4]], [[1, -1], [-1, 1]]) -> [[0, 1], [2, -3]]
([[1, 2], [3, 4]], [[-1, -2], [-3, -4]]) -> [[0, 0], [0, 0]]
        }
    }
}

problem Generated/2685 {
code {
        func add_lists_elementwise(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) -> [6, 6, 6, 6, 6]
([1, 1, 1, 1], [2, 2, 2, 2, 2]) -> [3, 3, 3, 3]
([10, 20, 30], [1, 2, 3, 4]) -> [11, 22, 33]
([1, 2, 3, 4, 5], []) -> []
([], [1, 2, 3, 4, 5]) -> []
        }
    }
}

problem Generated/2686 {
code {
        func append_to_list(in_dat: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 3, 6, 10, 15]
([10, 5, 3, 7, 2]) -> [10, 15, 18, 25, 27]
([0, 0, 0, 0, 0]) -> [0, 0, 0, 0, 0]
([1, -2, 3, -4, 5]) -> [1, -1, 2, -2, 3]
([2, 4, 6, 8, 10]) -> [2, 6, 12, 20, 30]
        }
    }
}

problem Generated/2687 {
code {
        func sum_of_list_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([7, 3, 5, 9, 6]) -> 30
([-1, -2, -3, -4, -5]) -> 0
([1, 7, 4, 9, 5]) -> 26
([1, -2, 3, -4, 5, -6, 7, -8]) -> 16
        }
    }
}

problem Generated/2688 {
code {
        func generate_fibonacci_sequence(n: int) -> list<int>
    }
    tests {
        template nse {
            (0) -> []
(1) -> [0]
(2) -> [0, 1]
(5) -> [0, 1, 1, 2, 3]
(10) -> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
        }
    }
}

problem Generated/2689 {
code {
        func find_smallest_k_elements(elements: list<int>, k: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [1, 2, 3]
([1, 7, 3, 5, 4], 5) -> [1, 3, 4, 5, 7]
([1, 7, 3, 5, 4], 7) -> [1, 3, 4, 5, 7]
([1, 7, 3, 5, 4], 0) -> []
([1, 7, 3, 5, 4], 2) -> [1, 3]
        }
    }
}

problem Generated/2690 {
code {
        func combine_lists(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [5, 7, 9]
([1, 2, 3], [4, 5]) -> [5, 7, 3]
([1, 2], [4, 5, 6]) -> [5, 7, 6]
([], []) -> []
([1], []) -> [1]
        }
    }
}

problem Generated/2691 {
code {
        func append_zip_lists(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [1, 4, 2, 5, 3, 6]
([1, 2, 3], []) -> [1, 2, 3]
([], [4, 5, 6]) -> [4, 5, 6]
([1, 2, 3, 4], [5, 6]) -> [1, 5, 2, 6, 3, 4]
([1, 2], [3, 4, 5]) -> [1, 3, 2, 4, 5]
        }
    }
}

problem Generated/2692 {
code {
        func combine_lists(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [5, 7, 9]
([0, 0, 0], [1, 2, 3]) -> [1, 2, 3]
([5, 10, 15], [-3, -5, -7]) -> [2, 5, 8]
([1, 2], [3, 4, 5]) -> [4, 6]
([1], [2]) -> [3]
        }
    }
}

problem Generated/2693 {
code {
        func add_index_to_list(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"]) -> ["0 - apple", "1 - banana", "2 - cherry", "3 - date"]
(["cat", "dog", "elephant", "fox", "goose"]) -> ["0 - cat", "1 - dog", "2 - elephant", "3 - fox", "4 - goose"]
(["python", "java", "c++"]) -> ["0 - python", "1 - java", "2 - c++"]
([]) -> []
(["apple"]) -> ["0 - apple"]
        }
    }
}

problem Generated/2694 {
code {
        func append_elements_to_list(elements: list<int>, suffix: string) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], "ABC") -> ["1ABC", "2ABC", "3ABC", "4ABC", "5ABC"]
([7, 3, 5, 9, 6], "XYZ") -> ["7XYZ", "3XYZ", "5XYZ", "9XYZ", "6XYZ"]
([1, 7, 4, 9, 5], "") -> ["1", "7", "4", "9", "5"]
([], "TEST") -> []
([1, 2, 3, 4, 5, 6, 7, 8], "123") -> ["1123", "2123", "3123", "4123", "5123", "6123", "7123", "8123"]
        }
    }
}

problem Generated/2695 {
code {
        func add_suffix_to_each_element(elements: list<string>, suffix: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry"], "pie") -> ["applepie", "bananapie", "cherrypie"]
(["dog", "cat", "horse", "mouse"], "tail") -> ["dogtail", "cattail", "horsetail", "mousetail"]
(["red", "green", "blue"], "ish") -> ["redish", "greenish", "blueish"]
([], "suffix") -> []
(["a", "b", "c"], "") -> ["a", "b", "c"]
        }
    }
}

problem Generated/2696 {
code {
        func add_index_to_list(lst: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["0:1", "1:2", "2:3", "3:4", "4:5"]
([7, 3, 5, 9, 6]) -> ["0:7", "1:3", "2:5", "3:9", "4:6"]
([1, 7, 4, 9, 5]) -> ["0:1", "1:7", "2:4", "3:9", "4:5"]
([]) -> []
([1, 2, 3]) -> ["0:1", "1:2", "2:3"]
        }
    }
}

problem Generated/2697 {
code {
        func append_greater_than_value(numbers: list<int>, value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [4, 5]
([1, 2, 3, 4, 5], 6) -> []
([7, 3, 5, 9, 6], 5) -> [7, 9, 6]
([1, 7, 4, 9, 5], 1) -> [7, 4, 9, 5]
([1, 7, 4, 9, 5], -1) -> [1, 7, 4, 9, 5]
        }
    }
}

problem Generated/2698 {
code {
        func unique_elements_in_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 3, 4]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
([1, 1, 1, 1, 1]) -> [1]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
        }
    }
}

problem Generated/2699 {
code {
        func add_unique_elements_to_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
([]) -> []
([1, 2, 3, 4, 5, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/2700 {
code {
        func remove_duplicate_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 4, 3, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1, 1]) -> [1]
([]) -> []
([1, 2, 3, 4, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([9, 8, 7, 6, 8, 5, 4, 7, 3, 2, 2, 1, 1]) -> [9, 8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/2701 {
code {
        func filter_and_append(elements: list<int>, num: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 6) -> [2, 4, 6]
([], 3) -> [3]
([5, 7, 9, 11], 4) -> [4]
([2, 4, 6, 8], 10) -> [2, 4, 6, 8, 10]
([1, 3, 5, 7], 0) -> [0]
        }
    }
}

problem Generated/2702 {
code {
        func add_even_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [4, 6, 8, 10, 12]
([7, 3, 5, 9, 6]) -> [8]
([1, 7, 4, 9, 5]) -> [6]
([1, 7, 4, 9, 5, 12, 8]) -> [6, 14, 10]
([1, 3, 5, 7, 9]) -> []
        }
    }
}

problem Generated/2703 {
code {
        func append_even_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [2, 4, 0]
([7, 3, 5, 9, 6]) -> [6, 0]
([1, 7, 4, 9, 5]) -> [4, 0]
([1, 3, 5, 7, 9]) -> [0]
([2, 4, 6, 8]) -> [2, 4, 6, 8, 0]
        }
    }
}

problem Generated/2704 {
code {
        func sort_and_append(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [1, 2, 3, 4, 5, 6]
([1, 3, 2], [6, 5, 4]) -> [1, 2, 3, 4, 5, 6]
([1, 2, 3], []) -> [1, 2, 3]
([], [4, 5, 6]) -> [4, 5, 6]
([], []) -> []
        }
    }
}

problem Generated/2705 {
code {
        func sort_and_append(orig_lst: list<int>, to_applast: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [1, 2, 3, 4, 5, 6]
([5, 4, 3, 2], [6, 7, 8]) -> [2, 3, 4, 5, 6, 7, 8]
([1, 2, 3], []) -> [1, 2, 3]
([], [4, 5, 6]) -> [4, 5, 6]
([], []) -> []
([6, 2, 8], [4, 3, 9]) -> [2, 3, 4, 6, 8, 9]
        }
    }
}

problem Generated/2706 {
code {
        func string_to_list_of_ascii_codes(input_s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("world") -> [119, 111, 114, 108, 100]
("") -> []
("abcdefghijklmnopqrstuvwxyz") -> [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]
("Hello World!") -> [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]
        }
    }
}

problem Generated/2707 {
code {
        func string_to_numbers(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("") -> []
("1a2b3c4d5e") -> [49, 97, 50, 98, 51, 99, 52, 100, 53, 101]
("This is a test string") -> [84, 104, 105, 115, 32, 105, 115, 32, 97, 32, 116, 101, 115, 116, 32, 115, 116, 114, 105, 110, 103]
("0123456789") -> [48, 49, 50, 51, 52, 53, 54, 55, 56, 57]
        }
    }
}

problem Generated/2708 {
code {
        func convert_string_to_ascii(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("world") -> [119, 111, 114, 108, 100]
("") -> []
(" ") -> [32]
("123") -> [49, 50, 51]
        }
    }
}

problem Generated/2709 {
code {
        func create_string_from_ascii(ascii_codes: list<int>) -> string
    }
    tests {
        template nse {
            ([65, 66, 67, 68]) -> "ABCD"
([104, 101, 108, 108, 111]) -> "hello"
([119, 111, 114, 108, 100]) -> "world"
([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]) -> "Hello World"
([105, 116, 101, 114, 97, 98, 108, 121]) -> "iterably"
        }
    }
}

problem Generated/2710 {
code {
        func string_to_ascii_list(s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello, world!") -> [72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33]
("Testing...") -> [84, 101, 115, 116, 105, 110, 103, 46, 46, 46]
("") -> []
("AaBbCcDdEe") -> [65, 97, 66, 98, 67, 99, 68, 100, 69, 101]
("12345") -> [49, 50, 51, 52, 53]
        }
    }
}

problem Generated/2711 {
code {
        func string_to_ascii(input_s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello, world!") -> [72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33]
("Python is awesome!") -> [80, 121, 116, 104, 111, 110, 32, 105, 115, 32, 97, 119, 101, 115, 111, 109, 101, 33]
("") -> []
("12345") -> [49, 50, 51, 52, 53]
("Welcome") -> [87, 101, 108, 99, 111, 109, 101]
        }
    }
}

problem Generated/2712 {
code {
        func append_ascii_value(txt: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello, World!") -> [72, 101, 108, 108, 111, 87, 111, 114, 108, 100]
("A quick brown fox jumps over the lazy dog.") -> [65, 113, 117, 105, 99, 107, 98, 114, 111, 119, 110, 102, 111, 120, 106, 117, 109, 112, 115, 111, 118, 101, 114, 116, 104, 101, 108, 97, 122, 121, 100, 111, 103]
("") -> []
("1234") -> []
("Hello, 1234!") -> [72, 101, 108, 108, 111]
        }
    }
}

problem Generated/2713 {
code {
        func string_to_ascii_list(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello world") -> [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]
("Hello, World!") -> [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33]
("") -> []
("123456789") -> [49, 50, 51, 52, 53, 54, 55, 56, 57]
("Testing 123") -> [84, 101, 115, 116, 105, 110, 103, 32, 49, 50, 51]
        }
    }
}

problem Generated/2714 {
code {
        func convert_string_to_ascii_list(my_str: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("world") -> [119, 111, 114, 108, 100]
("Python") -> [80, 121, 116, 104, 111, 110]
("programming") -> [112, 114, 111, 103, 114, 97, 109, 109, 105, 110, 103]
("") -> []
        }
    }
}

problem Generated/2715 {
code {
        func string_to_ascii_list(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("Python") -> [80, 121, 116, 104, 111, 110]
("12345") -> [49, 50, 51, 52, 53]
("") -> []
("python is awesome") -> [112, 121, 116, 104, 111, 110, 32, 105, 115, 32, 97, 119, 101, 115, 111, 109, 101]
        }
    }
}

problem Generated/2716 {
code {
        func convert_string_to_ascii(input_s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello, World!") -> [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33]
("abc123") -> [97, 98, 99, 49, 50, 51]
("Python is awesome!!") -> [80, 121, 116, 104, 111, 110, 32, 105, 115, 32, 97, 119, 101, 115, 111, 109, 101, 33, 33]
("") -> []
("Hello \t\t Universe") -> [72, 101, 108, 108, 111, 32, 9, 9, 32, 85, 110, 105, 118, 101, 114, 115, 101]
        }
    }
}

problem Generated/2717 {
code {
        func append_common_elements(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) -> [4, 5]
([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) -> []
([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5], [3, 4, 5, 6, 7, 8, 9, 10]) -> [3, 4, 5]
        }
    }
}

problem Generated/2718 {
code {
        func convert_to_binary(numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["00000001", "00000010", "00000011", "00000100", "00000101"]
([0, 255, 128, 32, 64, 16]) -> ["00000000", "11111111", "10000000", "00100000", "01000000", "00010000"]
([77, 107, 97, 120, 32, 105, 115, 32, 99, 111, 111, 108]) -> ["01001101", "01101011", "01100001", "01111000", "00100000", "01101001", "01110011", "00100000", "01100011", "01101111", "01101111", "01101100"]
([45, 0, 255, 256]) -> ["00101101", "00000000", "11111111", "100000000"]
([33, 34, 35, 36, 37, 38, 39]) -> ["00100001", "00100010", "00100011", "00100100", "00100101", "00100110", "00100111"]
        }
    }
}

problem Generated/2719 {
code {
        func binary_numbers(num: int) -> list<int>
    }
    tests {
        template nse {
            (0) -> [0]
(1) -> [1]
(2) -> [1, 0]
(5) -> [1, 0, 1]
(10) -> [1, 0, 1, 0]
        }
    }
}

problem Generated/2720 {
code {
        func generate_binary_list(maximum: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["000", "001", "010", "011", "100", "101"]
(0) -> ["0"]
(1) -> ["0", "1"]
(10) -> ["0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010"]
(15) -> ["0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"]
(3) -> ["00", "01", "10", "11"]
        }
    }
}

problem Generated/2721 {
code {
        func create_binary_list(n: int) -> list<string>
    }
    tests {
        template nse {
            (1) -> ["0", "1"]
(2) -> ["00", "01", "10", "11"]
(3) -> ["000", "001", "010", "011", "100", "101", "110", "111"]
(4) -> ["0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"]
(5) -> ["00000", "00001", "00010", "00011", "00100", "00101", "00110", "00111", "01000", "01001", "01010", "01011", "01100", "01101", "01110", "01111", "10000", "10001", "10010", "10011", "10100", "10101", "10110", "10111", "11000", "11001", "11010", "11011", "11100", "11101", "11110", "11111"]
        }
    }
}

problem Generated/2722 {
code {
        func binary_representation_of_numbers(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["1", "10", "11", "100", "101"]
(1) -> ["1"]
(10) -> ["1", "10", "11", "100", "101", "110", "111", "1000", "1001", "1010"]
(15) -> ["1", "10", "11", "100", "101", "110", "111", "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"]
(0) -> []
        }
    }
}

problem Generated/2723 {
code {
        func split_and_append_list(input_str: string, delimiter: string) -> list<string>
    }
    tests {
        template nse {
            ("apple,banana,lemon,mango", ",") -> ["apple", "banana", "lemon", "mango"]
("Hello World, Today is Tuesday, 7:30 PM", ",") -> ["Hello World", "Today is Tuesday", "7:30 PM"]
("Python is a High-Level Programming Language", " ") -> ["Python", "is", "a", "High-Level", "Programming", "Language"]
("one,two, , ,five", ",") -> ["one", "two", "five"]
("  Here are   some   extra spaces    ", " ") -> ["Here", "are", "some", "extra", "spaces"]
        }
    }
}

problem Generated/2724 {
code {
        func append_str_to_list(dat: string, separator: string) -> list<string>
    }
    tests {
        template nse {
            ("This is a sample string", " ") -> ["This", "is", "a", "sample", "string"]
("Python is an interpreted high-level programming language for general-purpose programming.", " ") -> ["Python", "is", "an", "interpreted", "high-level", "programming", "language", "for", "general-purpose", "programming."]
("apples,oranges,bananas", ",") -> ["apples", "oranges", "bananas"]
("1 2 3 4 5", " ") -> ["1", "2", "3", "4", "5"]
("  Hello   World    ", " ") -> ["Hello", "World"]
        }
    }
}

problem Generated/2725 {
code {
        func list_to_string(items: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["Hello", "world", "!"], " ") -> "Hello world !"
(["Apple", "Banana", "Cherry"], ", ") -> "Apple, Banana, Cherry"
(["Dog", "Cat", "Fish"], "") -> "DogCatFish"
([], " - ") -> ""
(["x"], "") -> "x"
        }
    }
}

problem Generated/2726 {
code {
        func concatenate_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], "") -> "helloworld"
(["hello", "world"], " ") -> "hello world"
(["Python", "", "is", "", "awesome"], "-") -> "Python-is-awesome"
([], " ") -> ""
(["Hello", "world", "I", "am", "a", "Python", "programmer!"], " ") -> "Hello world I am a Python programmer!"
        }
    }
}

problem Generated/2727 {
code {
        func join_strings_with_separator(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python"], ", ") -> "hello, world, python"
(["apple", "banana", "orange"], " - ") -> "apple - banana - orange"
(["1", "2", "3", "4", "5"], "") -> "12345"
(["a", "b", "c"], " ") -> "a b c"
(["1", "2", "3"], "=>") -> "1=>2=>3"
        }
    }
}

problem Generated/2728 {
code {
        func join_list_of_strings(str_lst: list<string>, join_s: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], " ") -> "hello world"
(["1", "2", "3", "4"], ",") -> "1,2,3,4"
(["a", "b", "c"], "") -> "abc"
(["cat", "dog", "fish"], " and ") -> "cat and dog and fish"
(["Hello"], " ") -> "Hello"
        }
    }
}

problem Generated/2729 {
code {
        func join_list_of_strings(string_lst: list<string>, join_s: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "how", "are", "you"], " ") -> "hello world how are you"
(["apple", "banana", "cherry"], ",") -> "apple,banana,cherry"
(["cat", "dog", "bird"], "") -> "catdogbird"
(["hello"], " ") -> "hello"
([], " ") -> ""
        }
    }
}

problem Generated/2730 {
code {
        func concatenate_strings(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "", "python"], " ") -> "hello world python"
(["a", "b", "c", "d"], "") -> "abcd"
(["hello", "world", "", "python"], "") -> "helloworldpython"
([], " ") -> ""
(["hello", "world", "python"], "-") -> "hello-world-python"
        }
    }
}

problem Generated/2731 {
code {
        func add_to_lower_list(words: list<string>, word: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Orange", "baNAna"], "peach") -> ["apple", "Orange", "baNAna", "peach"]
(["apple", "Orange", "baNAna"], "grapefruit") -> ["apple", "Orange", "baNAna", "grapefruit"]
([], "lemon") -> ["lemon"]
(["Grapes"], "PEARS") -> ["Grapes", "pears"]
(["Mango", "pIneapple"], "kiwi") -> ["Mango", "pIneapple", "kiwi"]
        }
    }
}

problem Generated/2732 {
code {
        func append_lower_strings(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "World"]) -> ["helloHello", "worldWorld"]
(["Python", "Java", "Go"]) -> ["pythonPython", "javaJava", "goGo"]
(["AbCdEfG", "hIjKlMn"]) -> ["abcdefgAbCdEfG", "hijklmnhIjKlMn"]
([]) -> []
(["PYTHON", "JAVA", "GO"]) -> ["pythonPYTHON", "javaJAVA", "goGO"]
        }
    }
}

problem Generated/2733 {
code {
        func add_lowercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["AbC", "dEf", "gHi"]) -> ["abcAbC", "defdEf", "ghigHi"]
(["HELLO", "WORLD"]) -> ["helloHELLO", "worldWORLD"]
(["Python", "JAVA", "C++"]) -> ["pythonPython", "javaJAVA", "c++C++"]
([]) -> []
(["hello"]) -> ["hellohello"]
        }
    }
}

problem Generated/2734 {
code {
        func append_upper(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> ["HELLO APPENDED", "WORLD APPENDED", "PYTHON APPENDED"]
(["This is", "a test", "sentence"]) -> ["THIS IS APPENDED", "A TEST APPENDED", "SENTENCE APPENDED"]
(["123", "45", "67"]) -> ["123 APPENDED", "45 APPENDED", "67 APPENDED"]
([]) -> []
(["!@#$", "QWERTY", "asdfgh"]) -> ["!@#$ APPENDED", "QWERTY APPENDED", "ASDFGH APPENDED"]
        }
    }
}

problem Generated/2735 {
code {
        func append_and_upper(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world"]) -> ["HELLO!", "WORLD!"]
(["Python", "is", "awesome"]) -> ["PYTHON!", "IS!", "AWESOME!"]
(["list", "comprehension", "is", "fun"]) -> ["LIST!", "COMPREHENSION!", "IS!", "FUN!"]
([]) -> []
(["one", "two", "three", "four", "five"]) -> ["ONE!", "TWO!", "THREE!", "FOUR!", "FIVE!"]
        }
    }
}

problem Generated/2736 {
code {
        func capitalize_and_add_strings(strs: list<string>, append_s: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world"], "!!!") -> ["HELLO!!!", "WORLD!!!"]
(["Alice", "Bob", "Charlie"], "") -> ["ALICE", "BOB", "CHARLIE"]
([], "empty") -> []
(["1", "2", "3"], "Appended") -> ["1Appended", "2Appended", "3Appended"]
(["apple", "banana", "cherry"], "123") -> ["APPLE123", "BANANA123", "CHERRY123"]
        }
    }
}

problem Generated/2737 {
code {
        func append_lower_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "Python", "is", "cool"]) -> ["hello", "world", "is", "cool"]
(["Python", "is", "AWESOME"]) -> ["is"]
([]) -> []
(["WORLD"]) -> []
(["Hello", "World"]) -> []
(["lower", "UPPER", "123"]) -> ["lower"]
        }
    }
}

problem Generated/2738 {
code {
        func append_lower_case_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "WORLD", "python", "is", "FUN"]) -> ["hello", "python", "is", "end"]
(["I", "am", "a", "Chatbot"]) -> ["am", "a", "end"]
([]) -> ["end"]
(["", " ", "1", "A", "B", "c", "d"]) -> ["c", "d", "end"]
(["abcdefg", "hijklmn", "opqrst", "UVWXYZ"]) -> ["abcdefg", "hijklmn", "opqrst", "end"]
        }
    }
}

problem Generated/2739 {
code {
        func add_uppercase_strings_to_list(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON"]) -> ["HELLO", "WORLD", "PYTHON"]
(["hello", "world", "python"]) -> ["No uppercase strings found"]
(["hello", "WORLD", "python"]) -> ["WORLD"]
([]) -> ["No uppercase strings found"]
([""]) -> ["No uppercase strings found"]
        }
    }
}

problem Generated/2740 {
code {
        func append_alpha_strings_to_list(input_strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "apple", "banana"]) -> ["hello", "world", "apple", "banana"]
(["", " ", "123", "apple", "banana"]) -> ["apple", "banana"]
(["HELLO", "WORLD", "apple", "banana"]) -> ["HELLO", "WORLD", "apple", "banana"]
([]) -> []
(["APPLE", "BANANA", "CAT", "DOG"]) -> ["APPLE", "BANANA", "CAT", "DOG"]
        }
    }
}

problem Generated/2741 {
code {
        func append_alpha_strings(strs: list<string>, new_strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world"], ["Python", "3.8"]) -> ["hello", "world", "Python"]
(["apple", "banana", "cherry"], ["orange", "grape"]) -> ["apple", "banana", "cherry", "orange", "grape"]
(["Python", "3.8", "is", "awesome"], ["123", "456"]) -> ["Python", "is", "awesome"]
([], ["Python", "3.8"]) -> ["Python"]
(["123", "456"], []) -> []
(["", " ", "hello", "123"], ["world", "Python", "3.8"]) -> ["hello", "world", "Python"]
        }
    }
}

problem Generated/2742 {
code {
        func append_alpha_strings(strs: list<string>, alpha: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "python", "data"], "lang") -> ["hellolang", "worldlang", "pythonlang", "datalang"]
(["alpha", "beta", "gamma", "delta"], "testing") -> ["alphatesting", "betatesting", "gammatesting", "deltatesting"]
(["testing", "with", "python", "3"], "a") -> ["testinga", "witha", "pythona"]
([], "testing") -> []
(["123", "456", "789"], "alpha") -> []
        }
    }
}

problem Generated/2743 {
code {
        func append_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "python"]) -> ["helloalpha", "worldalpha", "pythonalpha"]
(["A", "b", "c", "D"]) -> ["Aalpha", "balpha", "calpha", "Dalpha"]
(["123", "456", "789"]) -> []
(["hello", "world", "Python", "is", "awesome"]) -> ["helloalpha", "worldalpha", "Pythonalpha", "isalpha", "awesomealpha"]
(["check", "this", "list"]) -> ["checkalpha", "thisalpha", "listalpha"]
        }
    }
}

problem Generated/2744 {
code {
        func append_digit_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["123", "456", "789"]) -> ["1231", "4561", "7891"]
(["12a3", "4b5c", "d6e7f"]) -> []
(["1234", "2", "34", "8s"]) -> ["12341", "21", "341"]
([]) -> []
([""]) -> []
        }
    }
}

problem Generated/2745 {
code {
        func append_digits_from_strings(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["abc", "de12", "1f2g3h"]) -> [1, 2, 1, 2, 3]
(["1", "2", "3"]) -> [1, 2, 3]
([]) -> []
(["a", "b", "c"]) -> []
(["1a", "2b3", "c"]) -> [1, 2, 3]
        }
    }
}

problem Generated/2746 {
code {
        func append_digit_strings(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["123", "abc", "456"]) -> ["1231", "4561"]
(["12", "34", "56"]) -> ["121", "341", "561"]
(["abc", "def", "ghi"]) -> []
(["1", "12", "123"]) -> ["11", "121", "1231"]
([]) -> []
        }
    }
}

problem Generated/2747 {
code {
        func extract_digits_from_strings(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["abc123", "def456", "ghi789"]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
(["", "12", "345"]) -> [1, 2, 3, 4, 5]
(["abc", "def", "ghi"]) -> []
(["1a2b3c", "!@#$%^&*()", "4d5e6f"]) -> [1, 2, 3, 4, 5, 6]
(["123", "456", "789"]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
        }
    }
}

problem Generated/2748 {
code {
        func append_numbers_from_string(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["abc", "123", "xyz", "789"]) -> [1, 2, 3, 7, 8, 9]
(["a1b2c3d4"]) -> [1, 2, 3, 4]
(["a", "b", "c"]) -> []
(["12345"]) -> [1, 2, 3, 4, 5]
(["abc"]) -> []
        }
    }
}

problem Generated/2749 {
code {
        func extract_digits_to_list(input_s: string) -> list<int>
    }
    tests {
        template nse {
            ("abc123def456ghi") -> [1, 2, 3, 4, 5, 6]
("The answer is 42") -> [4, 2]
("No digits here") -> []
("12345") -> [1, 2, 3, 4, 5]
("abcd") -> []
        }
    }
}

problem Generated/2750 {
code {
        func add_strings_starting_with_prefix(strs: list<string>, pre: string, to_add: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"], "h", "i") -> ["helloi", "world", "python"]
(["hello", "world", "python"], "p", "ython") -> ["hello", "world", "pythonython"]
(["hello", "world", "python"], "x", "y") -> ["hello", "world", "python"]
([], "h", "i") -> []
([""], "", "world") -> ["world"]
        }
    }
}

problem Generated/2751 {
code {
        func append_substring_count(original_s: string, subs: string, n: int) -> list<string>
    }
    tests {
        template nse {
            ("hello", "world", 3) -> ["helloworld", "helloworldworld", "helloworldworldworld"]
("hello world", "!!", 4) -> ["hello world!!", "hello world!!!!", "hello world!!!!!!", "hello world!!!!!!!!"]
("hello", "world", 0) -> []
("", "abc", 5) -> ["abc", "abcabc", "abcabcabc", "abcabcabcabc", "abcabcabcabcabc"]
("Python", "", 5) -> ["Python", "Python", "Python", "Python", "Python"]
        }
    }
}

problem Generated/2752 {
code {
        func append_and_replace(dat: list<int>, old: int, new_dat: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1], 2, 4) -> [1, 4, 3, 4, 1, 1, 3, 1]
([7, 3, 5, 9, 6], 2, 4) -> [7, 3, 5, 9, 6, 7, 3, 5, 9, 6]
([1, 7, 4, 9, 5], 8, 2) -> [1, 7, 4, 9, 5, 1, 7, 4, 9, 5]
([1, 7, 4, 9, 5], 5, 5) -> [1, 7, 4, 9, 5, 1, 7, 4, 9]
([1, 2, 3, 4, 5, 6, 7, 8], 5, -5) -> [1, 2, 3, 4, -5, 6, 7, 8, 1, 2, 3, 4, 6, 7, 8]
        }
    }
}

problem Generated/2753 {
code {
        func replace_elements_in_list(elements: list<int>, old_element: int, new_element: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 6) -> [1, 2, 6, 4, 5]
([1, 2, 3, 3, 5], 3, 4) -> [1, 2, 4, 4, 5]
([7, 9, 3, 6, 3], 3, 8) -> [7, 9, 8, 6, 8]
([1, 2, 3, 4, 5], 6, 7) -> [1, 2, 3, 4, 5]
([], 2, 3) -> []
        }
    }
}

problem Generated/2754 {
code {
        func generate_fibonacci_sequence(n: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
(5) -> [1, 1, 2, 3, 5]
(1) -> [1]
(0) -> []
(15) -> [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]
        }
    }
}

problem Generated/2755 {
code {
        func reverse_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) -> [5, 4, 3, 2, 1]
([]) -> []
([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) -> [4, 3, 2, 1]
([1, 2, 3, 4, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/2756 {
code {
        func reverse_list_using_stack(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([1, 7, 4, 9, 5]) -> [5, 9, 4, 7, 1]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [8, 7, 6, 5, 4, 3, 2, 1]
([]) -> []
        }
    }
}

problem Generated/2757 {
code {
        func add_unique_elements_to_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1, 4, 5, 6, 5]) -> [1, 2, 3, 4, 5, 6]
([2, 2, 2, 2, 2]) -> [2]
([]) -> []
([1, 3, 5, 7]) -> [1, 3, 5, 7]
([1, 2, 3, 4, 5, 6, 7, 8, 9]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
([3, 3, 1, 2, 3, 2, 1, 3]) -> [3, 1, 2]
        }
    }
}

problem Generated/2758 {
code {
        func reverse_and_append(elements: list<int>, num: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 6) -> [6, 5, 4, 3, 2, 1]
([], 9) -> [9]
([1], 2) -> [2, 1]
([2, 3, 5], 7) -> [7, 5, 3, 2]
([11, 22, 33, 44], 55) -> [55, 44, 33, 22, 11]
        }
    }
}

problem Generated/2759 {
code {
        func reverse_and_copy_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([]) -> []
([1]) -> [1]
([1, 2, 3, 2, 1]) -> [1, 2, 3, 2, 1]
        }
    }
}

problem Generated/2760 {
code {
        func reverse_and_append(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1, 15]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7, 30]
([1, 7, 4, 9, 5]) -> [5, 9, 4, 7, 1, 26]
([1, 7, 4, 9, 5, 2, 3, 8]) -> [8, 3, 2, 5, 9, 4, 7, 1, 39]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [8, 7, 6, 5, 4, 3, 2, 1, 36]
        }
    }
}

problem Generated/2761 {
code {
        func reverse_and_append_lists(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1,2,3,4], [5,6,7,8]) -> [4,3,2,1,8,7,6,5]
([1,2,3,4], []) -> [4,3,2,1]
([], [5,6,7,8]) -> [8,7,6,5]
([], []) -> []
([10,20], [30,40]) -> [20,10,40,30]
        }
    }
}

problem Generated/2762 {
code {
        func reverse_and_append(elements: list<int>, num: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], 4) -> [3, 2, 1, 4]
([5, 6, 7, 8], 9) -> [8, 7, 6, 5, 9]
([], 1) -> [1]
([1], 1) -> [1, 1]
([1, 2, 3, 4, 5, 6, 7, 8], 9) -> [8, 7, 6, 5, 4, 3, 2, 1, 9]
        }
    }
}

problem Generated/2763 {
code {
        func reverse_append(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1, 5]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7, 5]
([1, 7, 4, 9, 5]) -> [5, 9, 4, 7, 1, 5]
([1, 7]) -> [7, 1, 2]
([1]) -> [1, 1]
        }
    }
}

problem Generated/2764 {
code {
        func append_to_list_and_copy(elements: list<int>, new_element: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 6) -> [6, 1, 2, 3, 4, 5]
([], 1) -> [1]
([7, 3, 5, 9, 6], 2) -> [2, 7, 3, 5, 9, 6]
([1, 7, 4, 9, 5], 0) -> [0, 1, 7, 4, 9, 5]
([1], 2) -> [2, 1]
        }
    }
}

problem Generated/2765 {
code {
        func append_element_to_list(elements: list<int>, append_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 6) -> [1, 2, 3, 4, 5, 6, 6, 6, 6, 6]
([7, 3, 5, 9, 6], 0) -> [7, 3, 5, 9, 6, 0, 0, 0, 0, 0]
([1, 7, 4, 9, 5], -2) -> [1, 7, 4, 9, 5, -2, -2, -2, -2, -2]
([], 5) -> [5, 5, 5, 5, 5]
([1, 2, 3], 7) -> [1, 2, 3, 7, 7, 7, 7, 7]
        }
    }
}

problem Generated/2766 {
code {
        func add_items_to_list(items: list<int>, count: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], 3) -> [1, 2, 3, 2, 3, 4, 3, 4, 5]
([7, 3, 5], 1) -> [7, 3, 5]
([1, 2, 3], 2) -> [1, 2, 3, 2, 3, 4]
([1, 2, 3], 0) -> []
([1], 5) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/2767 {
code {
        func append_to_list_copy(l: list<int>, e: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], 4) -> [1, 2, 3, 4]
([7, -1, 0], 9) -> [7, -1, 0, 9]
([], 1) -> [1]
([1, 2, 3], 3) -> [1, 2, 3, 3]
([1, 2, 3], -1) -> [1, 2, 3, -1]
        }
    }
}

problem Generated/2768 {
code {
        func generate_shifted_lists(input_lst: list<int>) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [[1, 2, 3, 4, 5], [2, 3, 4, 5, 1], [3, 4, 5, 1, 2], [4, 5, 1, 2, 3], [5, 1, 2, 3, 4]]
([7, 3, 5, 9]) -> [[7, 3, 5, 9], [3, 5, 9, 7], [5, 9, 7, 3], [9, 7, 3, 5]]
([]) -> [[]]
([1]) -> [[1]]
([3, 4, 5, 6, 7]) -> [[3, 4, 5, 6, 7], [4, 5, 6, 7, 3], [5, 6, 7, 3, 4], [6, 7, 3, 4, 5], [7, 3, 4, 5, 6]]
        }
    }
}

problem Generated/2769 {
code {
        func add_list_element_if_not_present(elements: list<string>, item: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange"], "grape") -> ["apple", "banana", "orange", "grape"]
(["apple", "banana", "orange"], "apple") -> ["apple", "banana", "orange"]
([], "grape") -> ["grape"]
(["apple", "banana", "orange"], "") -> ["apple", "banana", "orange", ""]
(["apple", "banana", "orange"], "Apple") -> ["apple", "banana", "orange", "Apple"]
        }
    }
}

problem Generated/2770 {
code {
        func copy_and_append_list(elements: list<int>, value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 6) -> [1, 2, 3, 4, 5, 6]
([7, 3, 5, 9, 6], 1) -> [7, 3, 5, 9, 6, 1]
([], 5) -> [5]
([1, 7, 4, 9, 5], 3) -> [1, 7, 4, 9, 5, 3]
([1, 2, 3, 4, 5, 6, 7, 8], 9) -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
        }
    }
}

problem Generated/2771 {
code {
        func add_element_to_list_at_index(elements: list<int>, idx: int, el: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2, 7) -> [1, 2, 7, 3, 4, 5]
([1, 2, 3, 4], 0, 12) -> [12, 1, 2, 3, 4]
([1, 2, 3], 3, 9) -> [1, 2, 3, 9]
([1], 0, 7) -> [7, 1]
([], 0, 7) -> [7]
        }
    }
}

problem Generated/2772 {
code {
        func append_value_to_list(original_lst: list<int>, value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], 4) -> [1, 2, 3, 4]
([7, 3, 5, 9, 6], 8) -> [7, 3, 5, 9, 6, 8]
([], 1) -> [1]
([1, 2, 3, 4, 5], 5) -> [1, 2, 3, 4, 5, 5]
([1, 7, 4, 9, 5], 0) -> [1, 7, 4, 9, 5, 0]
        }
    }
}

problem Generated/2773 {
code {
        func merge_lists_and_remove_duplicates(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [2, 3, 4]) -> [1, 2, 3, 4]
([1, 2, 3], []) -> [1, 2, 3]
([], [2, 3, 4]) -> [2, 3, 4]
([], []) -> []
([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) -> [1, 2, 3, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/2774 {
code {
        func unique_items(items: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1, 4]) -> [1, 2, 3, 4]
([4, 3, 2, 1]) -> [4, 3, 2, 1]
([]) -> []
([1, -2, -3, 2, 3]) -> [1, -2, -3, 2, 3]
([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/2775 {
code {
        func unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 3, 4, 4, 5, 5, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 4, 5]) -> [5, 4, 3]
([1, 1, 1, 1, 1]) -> [1]
([1, 2, 3, 4]) -> [1, 2, 3, 4]
([]) -> []
        }
    }
}

problem Generated/2776 {
code {
        func unique_elements_between_lists(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]) -> [1, 3, 5, 6, 8, 10]
([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) -> []
([], [6, 7, 8, 9, 10]) -> [6, 7, 8, 9, 10]
([], []) -> []
        }
    }
}

problem Generated/2777 {
code {
        func append_elements_only_once(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5, 1, 2]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4]) -> [1, 2, 3, 4]
([]) -> []
([1]) -> [1]
        }
    }
}

problem Generated/2778 {
code {
        func append_unique_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1, 4]) -> [1, 2, 3, 4]
([7, 3, 5, 5, 5, 6]) -> [7, 3, 5, 6]
([1, 7, 4, 9, 5]) -> [1, 7, 4, 9, 5]
([1, 2, 3, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5, 6, 7, 8]
([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) -> [1]
        }
    }
}

problem Generated/2779 {
code {
        func split_into_sublists(lst: list<int>, size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1,2,3,4,5,6,7], 3) -> [[1,2,3],[4,5,6],[7]]
([1,2,3,4,5,6,7], 2) -> [[1,2],[3,4],[5,6],[7]]
([1,2,3,4,5,6,7], 1) -> [[1],[2],[3],[4],[5],[6],[7]]
([1,2,3,4,5,6,7], 7) -> [[1,2,3,4,5,6,7]]
([1,2,3,4,5,6,7], 10) -> [[1,2,3,4,5,6,7]]
        }
    }
}

problem Generated/2780 {
code {
        func floor_list_elements(elements: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 3.5, 2.8, 4.2, 5.0]) -> [1, 3, 2, 4, 5]
([1.9, 2.7, 8.3, 4.5, 3.2]) -> [1, 2, 8, 4, 3]
([9.4, 2.5, 7.2, 6.8, 5.1]) -> [9, 2, 7, 6, 5]
([3.6, 7.2, 5.1, 1.9, 9.8]) -> [3, 7, 5, 1, 9]
([2.1, 5.4, 1.7, 9.1, 6.0]) -> [2, 5, 1, 9, 6]
        }
    }
}

problem Generated/2781 {
code {
        func group_list_by_size(elements: list<int>, size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8], 2) -> [[1, 2], [3, 4], [5, 6], [7, 8]]
([1, 2, 3, 4, 5, 6, 7, 8], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8]]
([1, 2, 3, 4, 5, 6, 7, 8], 1) -> [[1], [2], [3], [4], [5], [6], [7], [8]]
([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 6) -> [[1, 2, 3, 4, 5]]
        }
    }
}

problem Generated/2782 {
code {
        func append_list_elements_to_sublists(elements: list<int>, n: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5, 6], 3) -> [[1, 2, 3], [4, 5, 6]]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8]]
([1, 2, 3, 4, 5, 6, 7], 4) -> [[1, 2, 3, 4], [5, 6, 7]]
        }
    }
}

problem Generated/2783 {
code {
        func add_to_list(elements: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.5, 2.7, 3.1, 4.9, 5.0]) -> [1, 2, 3, 4, 5]
([0.1, 0.9, -1.2, 3.8, -4.5, 6.0]) -> [0, 0, -2, 3, -5, 6]
([1.1, 2.2, 3.3, 4.4, 5.5]) -> [1, 2, 3, 4, 5]
([0.1, 0.2, 0.3, 0.4, 0.5]) -> [0, 0, 0, 0, 0]
([-1.1, -2.2, -3.3, -4.4, -5.5]) -> [-2, -3, -4, -5, -6]
        }
    }
}

problem Generated/2784 {
code {
        func group_items_in_chunks(items: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5], 1) -> [[1], [2], [3], [4], [5]]
([1, 2, 3, 4, 5, 6], 2) -> [[1, 2], [3, 4], [5, 6]]
([1, 2, 3, 4, 5, 6, 7], 3) -> [[1, 2, 3], [4, 5, 6], [7]]
        }
    }
}

problem Generated/2785 {
code {
        func split_list_into_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([7, 3, 5, 9, 6], 3) -> [[7, 3, 5], [9, 6]]
([1, 7, 4, 9, 5], 1) -> [[1], [7], [4], [9], [5]]
([1, 7, 4, 9, 5], 6) -> [[1, 7, 4, 9, 5]]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8]]
        }
    }
}

problem Generated/2786 {
code {
        func split_list_into_chunks(original_lst: list<string>, chunk_size: int) -> list<list<string>>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date", "elderberry", "fig", "grape"], 2) -> [["apple", "banana"], ["cherry", "date"], ["elderberry", "fig"], ["grape"]]
(["apple", "banana", "cherry", "date", "elderberry", "fig", "grape", "honeydew"], 4) -> [["apple", "banana", "cherry", "date"], ["elderberry", "fig", "grape", "honeydew"]]
(["apple", "banana", "cherry"], 1) -> [["apple"], ["banana"], ["cherry"]]
(["apple", "banana", "cherry"], 3) -> [["apple", "banana", "cherry"]]
([], 3) -> []
(["apple"], 3) -> [["apple"]]
        }
    }
}

problem Generated/2787 {
code {
        func split_list_into_chunks(items: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5, 6], 2) -> [[1, 2], [3, 4], [5, 6]]
([1, 2, 3, 4], 5) -> [[1, 2, 3, 4]]
([1, 2, 3, 4], 1) -> [[1], [2], [3], [4]]
        }
    }
}

problem Generated/2788 {
code {
        func add_elements_to_list_in_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([7, 3, 5, 9, 6], 3) -> [[7, 3, 5], [9, 6]]
([1, 7, 4, 9, 5], 1) -> [[1], [7], [4], [9], [5]]
([], 4) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> [[1, 2, 3, 4, 5], [6, 7, 8]]
        }
    }
}

problem Generated/2789 {
code {
        func split_list_into_chunks(lst: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5, 6, 7], 2) -> [[1, 2], [3, 4], [5, 6], [7]]
([1, 2, 3, 4, 5], 5) -> [[1, 2, 3, 4, 5]]
([1, 2, 3, 4, 5], 1) -> [[1], [2], [3], [4], [5]]
        }
    }
}

problem Generated/2790 {
code {
        func split_list_into_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5, 6, 7], 4) -> [[1, 2, 3, 4], [5, 6, 7]]
([1, 2, 3, 4, 5, 6, 7], 1) -> [[1], [2], [3], [4], [5], [6], [7]]
([1, 2, 3, 4, 5, 6, 7], 10) -> [[1, 2, 3, 4, 5, 6, 7]]
        }
    }
}

problem Generated/2791 {
code {
        func chunk_list(lst: list<int>, size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8]]
([1, 2, 3, 4, 5, 6, 7, 8], 2) -> [[1, 2], [3, 4], [5, 6], [7, 8]]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8]]
([1, 2, 3, 4, 5, 6, 7, 8], 9) -> [[1, 2, 3, 4, 5, 6, 7, 8]]
([1, 2, 3, 4, 5, 6, 7, 8], 1) -> [[1], [2], [3], [4], [5], [6], [7], [8]]
        }
    }
}

problem Generated/2792 {
code {
        func split_list_into_chunks(lst: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
([1, 2, 3, 4, 5], 5) -> [[1, 2, 3, 4, 5]]
([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8]]
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> [[1, 2, 3, 4, 5], [6, 7, 8]]
        }
    }
}

problem Generated/2793 {
code {
        func square_root_list(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 4.0, 16.0, 25.0]) -> [1.0, 2.0, 4.0, 5.0]
([0.0, 1.0, 2.0, 3.0]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772]
([9.0, 16.0, 25.0, 36.0]) -> [3.0, 4.0, 5.0, 6.0]
([2.0, 3.0, 5.0, 7.0, 11.0]) -> [1.4142135623730951, 1.7320508075688772, 2.23606797749979, 2.6457513110645907, 3.3166247903554]
([100.0, 49.0, 16.0, 4.0]) -> [10.0, 7.0, 4.0, 2.0]
        }
    }
}

problem Generated/2794 {
code {
        func get_square_roots(numbers: list<int>) -> list<double>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979]
([9, 16, 25]) -> [3.0, 4.0, 5.0]
([144, 225, 256, 400]) -> [12.0, 15.0, 16.0, 20.0]
([2, 3, 5, 7, 11, 13]) -> [1.4142135623730951, 1.7320508075688772, 2.23606797749979, 2.6457513110645907, 3.3166247903554, 3.605551275463989]
([]) -> []
        }
    }
}

problem Generated/2795 {
code {
        func squared_numbers(numbers: list<int>) -> list<double>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([-2, -1, 0, 1, 2]) -> [4.0, 1.0, 0.0, 1.0, 4.0]
([10, 20, 30, 40, 50]) -> [100.0, 400.0, 900.0, 1600.0, 2500.0]
([0]) -> [0.0]
([]) -> []
        }
    }
}

problem Generated/2796 {
code {
        func pow_and_append(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [2.0, 5.0, 10.0, 17.0, 26.0, 120.0]
([-3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0]) -> [10.0, 5.0, 2.0, 1.0, 2.0, 5.0, 10.0, 0.0]
([0.0, 0.0, 0.0, 0.0]) -> [1.0, 1.0, 1.0, 1.0, 0.0]
([1.0, 2.0, 3.0]) -> [2.0, 5.0, 10.0, 6.0]
([4.0, 5.0, 6.0]) -> [17.0, 26.0, 37.0, 120.0]
        }
    }
}

problem Generated/2797 {
code {
        func square_numbers(start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            (1, 5) -> [1, 4, 9, 16, 25]
(10, 13) -> [100, 121, 144, 169]
(0, 3) -> [0, 1, 4, 9]
(-2, 3) -> [4, 1, 0, 1, 4, 9]
(10, 10) -> [100]
        }
    }
}

problem Generated/2798 {
code {
        func get_multiplied_list(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 6, 24, 120]
([2, 3, 4, 5]) -> [2, 6, 24, 120]
([5, 4, 3, 2]) -> [5, 20, 60, 120]
([10, 0, -10]) -> [10, 0, 0]
([1, 1, 1, 1, 1]) -> [1, 1, 1, 1, 1]
        }
    }
}

problem Generated/2799 {
code {
        func create_list_from_reduce(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 3, 6, 10, 15]
([-1, 2, -3, 4, -5]) -> [-1, 1, -2, 2, -3]
([3, 5, 7, 1]) -> [3, 8, 15, 16]
([10, 20, 30]) -> [10, 30, 60]
([1]) -> [1]
        }
    }
}

problem Generated/2800 {
code {
        func create_product_list(products: list<string>, categories: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["pen", "book", "table"], ["stationery", "office"]) -> ["pen (stationery)", "pen (office)", "book (stationery)", "book (office)", "table (stationery)", "table (office)"]
(["", "chair", "lamp"], ["furniture", "home"]) -> ["chair (furniture)", "chair (home)", "lamp (furniture)", "lamp (home)"]
([], ["furniture", "home"]) -> []
(["pen", "book", "table"], []) -> []
([], []) -> []
        }
    }
}

problem Generated/2801 {
code {
        func append_words_with_length(full_s: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello World") -> [5, 5]
("A B C D E") -> [1, 1, 1, 1, 1]
("How many characters are in this string?") -> [3, 4, 10, 3, 2, 4, 6]
("") -> []
("111 222 333") -> [3, 3, 3]
        }
    }
}

problem Generated/2802 {
code {
        func pop_even_positions(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6]) -> [2, 4, 6]
([7, 3, 5, 9, 6]) -> [3, 9]
([1, 2, 3]) -> [2]
([]) -> []
([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> [1, 3, 5, 7, 9]
        }
    }
}

problem Generated/2803 {
code {
        func pop_even_index_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [2, 4]
([7, 3, 5, 9, 6]) -> [3, 9]
([1, 7, 4, 9, 5]) -> [7, 9]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [2, 4, 6, 8]
([]) -> []
        }
    }
}

problem Generated/2804 {
code {
        func pop_odd_index(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 3, 5]
([1, 2, 3, 4, 5, 6]) -> [1, 3, 5]
([7, 3, 5, 9, 6]) -> [7, 5, 6]
([1, 2, 3]) -> [1, 3]
([5]) -> [5]
        }
    }
}

problem Generated/2805 {
code {
        func pop_even_index(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [2, 4]
([1, 2, 3, 4, 5, 6]) -> [2, 4, 6]
([1, 3, 5, 7, 9]) -> [3, 7]
([2, 4, 6, 8, 10]) -> [4, 8]
([1]) -> []
        }
    }
}

problem Generated/2806 {
code {
        func remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 7, 4, 9, 5, 1, 4]) -> [1, 7, 4, 9, 5]
([2, 7, 3, 9, 6, 2, 9, 3, 2, 7]) -> [2, 7, 3, 9, 6]
([]) -> []
([1, 2, 3, 4, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/2807 {
code {
        func remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
([1, 1, 1, 1, 1, 1, 1]) -> [1]
([1, 2, 3, 3, 2, 1]) -> [1, 2, 3]
        }
    }
}

problem Generated/2808 {
code {
        func remove_duplicates_and_reverse(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 1, 2, 3, 3, 4, 5, 5, 6]) -> [6, 5, 4, 3, 2, 1]
([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([1, 1, 1, 1, 1]) -> [1]
([]) -> []
        }
    }
}

problem Generated/2809 {
code {
        func pop_even_numbers(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [1, 3, 5, 7, 9]
([2, 4, 6, 8, 10]) -> []
([1, 3, 5, 7, 9]) -> [1, 3, 5, 7, 9]
([2, 3, 5, 6, 8, 10, 11, 12]) -> [3, 5, 11]
([4, 8, 12]) -> []
        }
    }
}

problem Generated/2810 {
code {
        func get_last_word(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello world") -> "world"
("How are you doing today?") -> "today?"
("") -> ""
("OneWord") -> "OneWord"
("This is a long sentence with lots of words") -> "words"
        }
    }
}

problem Generated/2811 {
code {
        func get_last_word(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "World"
("") -> ""
("Hello") -> "Hello"
("one two three four five") -> "five"
("Hola amigos!") -> "amigos!"
        }
    }
}

problem Generated/2812 {
code {
        func pop_items_from_string(string_with_spaces: string) -> list<string>
    }
    tests {
        template nse {
            ("This is a test string") -> ["string", "test", "a", "is", "This"]
("Python is awesome") -> ["awesome", "is", "Python"]
("pop me out") -> ["out", "me", "pop"]
("Hi there!") -> ["there!", "Hi"]
("") -> []
        }
    }
}

problem Generated/2813 {
code {
        func reverse_words_in_string(s: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "world hello"
(" coding is  fun    ") -> "fun is coding"
("   reverse   these words  ") -> "words these reverse"
(" onlyone ") -> "onlyone"
("") -> ""
        }
    }
}

problem Generated/2814 {
code {
        func get_last_word(sentence: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "world"
(" ") -> ""
("one word only") -> "only"
("") -> ""
("   ") -> ""
        }
    }
}

problem Generated/2815 {
code {
        func reverse_string(s: string) -> string
    }
    tests {
        template nse {
            ("hello") -> "olleh"
("python") -> "nohtyp"
("racecar") -> "racecar"
("12345") -> "54321"
("") -> ""
        }
    }
}

problem Generated/2816 {
code {
        func reverse_string(s: string, k: int) -> string
    }
    tests {
        template nse {
            ("abcdefg", 2) -> "bacdfeg"
("abcd", 2) -> "bacd"
("abcd", 4) -> "dcba"
("abcdefghij", 3) -> "cbadefihgj"
("", 3) -> ""
        }
    }
}

problem Generated/2817 {
code {
        func remove_string_element(string_lst: list<string>, element: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "apple", "Mango"], "Apple") -> ["banana", "orange", "mango"]
(["apple", "banana", "orange", "apple", "Mango"], "Potato") -> ["apple", "banana", "orange", "apple", "mango"]
([], "Potato") -> []
(["Ant", "Bat", "Cat", "Dog", "Elephant"], "dOG") -> ["ant", "bat", "cat", "elephant"]
(["Ant", "Bat", "Cat", "Dog", "Elephant"], "") -> ["ant", "bat", "cat", "dog", "elephant"]
        }
    }
}

problem Generated/2818 {
code {
        func pop_vowels(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry"]) -> ["ppl", "bnn", "chrry"]
(["Python", "Java", "C++"]) -> ["Pythn", "Jv", "C++"]
(["Hello", "world"]) -> ["Hll", "wrld"]
(["This", "is", "a", "test"]) -> ["Ths", "s", "", "tst"]
([]) -> []
        }
    }
}

problem Generated/2819 {
code {
        func sort_and_pop(numbers: list<int>, idx: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [3]
([7, 3, 5, 9, 6], 0) -> [3]
([1, 7, 4, 9, 5], 4) -> [9]
([1, 7, 4, 9, 5], 2) -> [5]
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> [6]
        }
    }
}

problem Generated/2820 {
code {
        func unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 1, 2, 3, 3, 4, 5, 5]) -> [1, 2, 3, 4, 5]
([7, 3, 5, 9, 6, 3, 7]) -> [7, 3, 5, 9, 6]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/2821 {
code {
        func remove_duplicate_and_pop_last(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 2, 3, 4, 4, 5]) -> 5
([1, 1, 1, 1, 1, 1]) -> 1
([3, 5, 7, 9, 11]) -> 11
([2, 4, 6, 8]) -> 8
([1, 2, 3, 4, 5, 6, 4, 3, 2, 1]) -> 6
        }
    }
}

problem Generated/2822 {
code {
        func remove_last_n_element(elements: list<int>, n: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [1, 2]
([7, 3, 5, 9, 6], 2) -> [7, 3, 5]
([1, 7, 4, 9, 5], 5) -> []
([1, 7, 4, 9, 5], 0) -> [1, 7, 4, 9, 5]
([1, 2, 3, 4, 5, 6, 7, 8], 2) -> [1, 2, 3, 4, 5, 6]
        }
    }
}

problem Generated/2823 {
code {
        func split_list_to_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([7, 3, 5, 9, 6], 3) -> [[7, 3, 5], [9, 6]]
([1, 7, 4, 9, 5], 1) -> [[1], [7], [4], [9], [5]]
([1, 7, 4, 9, 5], 2) -> [[1, 7], [4, 9], [5]]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8]]
        }
    }
}

problem Generated/2824 {
code {
        func split_list(original_lst: list<int>, num_splits: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8]]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [[1, 2], [3, 4], [5, 6], [7, 8]]
([1, 2, 3, 4, 5, 6, 7, 8], 2) -> [[1, 2, 3, 4], [5, 6, 7, 8]]
([1, 2, 3, 4, 5], 5) -> [[1], [2], [3], [4], [5]]
([1, 2, 3, 4, 5], 1) -> [[1, 2, 3, 4, 5]]
        }
    }
}

problem Generated/2825 {
code {
        func product_without_index(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [120, 60, 40, 30, 24]
([7, 2, 1, 5, 3, 4]) -> [120, 420, 840, 168, 280, 210]
([1, 2, 3, 4]) -> [24, 12, 8, 6]
([1, 2, 3]) -> [6, 3, 2]
([4, 2, 1]) -> [2, 4, 8]
        }
    }
}

problem Generated/2826 {
code {
        func reverse_words_in_sentence(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "World Hello"
("This is a sentence") -> "sentence a is This"
(" A B C ") -> "C B A"
("1 23 456") -> "456 23 1"
("Hello") -> "Hello"
        }
    }
}

problem Generated/2827 {
code {
        func split_and_pop(input_str: string, delimiter: string) -> list<string>
    }
    tests {
        template nse {
            ("hello,world,python", ",") -> ["python", "world", "hello"]
("1:2:3:4:5", ":") -> ["5", "4", "3", "2", "1"]
("1$2$3$4$5", "\\$") -> ["5", "4", "3", "2", "1"]
("hello world python", " ") -> ["python", "world", "hello"]
("hello,world", " ") -> ["hello,world"]
        }
    }
}

problem Generated/2828 {
code {
        func generate_sorted_list(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [5, 4, 3, 2, 1]
(1) -> [1]
(10) -> [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
(2) -> [2, 1]
(3) -> [3, 2, 1]
        }
    }
}

problem Generated/2829 {
code {
        func generate_odd_numbers(n: int) -> list<int>
    }
    tests {
        template nse {
            (9) -> [9, 7, 5, 3, 1]
(1) -> [1]
(20) -> [19, 17, 15, 13, 11, 9, 7, 5, 3, 1]
(0) -> []
(10) -> [9, 7, 5, 3, 1]
        }
    }
}

problem Generated/2830 {
code {
        func generate_sorted_list(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [5, 4, 3, 2, 1]
(1) -> [1]
(10) -> [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
(3) -> [3, 2, 1]
(7) -> [7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/2831 {
code {
        func generate_sorted_squares(nums: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([-4, -3, 1, 2, 3, 5]) -> [1, 4, 9, 9, 16, 25]
([-3, -2, -1, 0, 1]) -> [0, 1, 1, 4, 9]
([0, 1, 2, 3]) -> [0, 1, 4, 9]
([1, 2, 3, 4, 5]) -> [1, 4, 9, 16, 25]
([0]) -> [0]
        }
    }
}

problem Generated/2832 {
code {
        func generate_sorted_list(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [0, 1, 4, 9, 16]
(0) -> []
(1) -> [0]
(2) -> [0, 1]
(10) -> [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
        }
    }
}

problem Generated/2833 {
code {
        func sort_list_by_length(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["abc", "de", "f", "ghi"]) -> ["f", "de", "abc", "ghi"]
(["abc", "ab", "a"]) -> ["a", "ab", "abc"]
(["one", "two", "three", "four", "five"]) -> ["one", "two", "four", "five", "three"]
(["apple", "orange", "banana"]) -> ["apple", "orange", "banana"]
([]) -> []
        }
    }
}

problem Generated/2834 {
code {
        func sort_list_by_length(str_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["cat", "dog", "elephant", "bird"]) -> ["cat", "dog", "bird", "elephant"]
([]) -> []
(["a", "bb", "ccc", "dddd", "eeeee"]) -> ["a", "bb", "ccc", "dddd", "eeeee"]
(["123", "45", "67890", "1"]) -> ["1", "45", "123", "67890"]
(["I", "love", "Python", "so", "much"]) -> ["I", "so", "love", "much", "Python"]
        }
    }
}

problem Generated/2835 {
code {
        func sort_list_by_abs(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([3, -1, 4, 2, -5, 0]) -> [0, -1, 2, 3, 4, -5]
([0, 0, 0, 0, 0, 0]) -> [0, 0, 0, 0, 0, 0]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([-1, -2, -3, -4, -5]) -> [-1, -2, -3, -4, -5]
        }
    }
}

problem Generated/2836 {
code {
        func sort_list_by_abs_value(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> [1, -2, 3, -4, 5]
([-5, -3, 0, 1, 4, 2, 7, -9]) -> [0, 1, 2, -3, 4, -5, 7, -9]
([0, 0, 0, 0, 0]) -> [0, 0, 0, 0, 0]
([-1, -2, -3, -4, -5]) -> [-1, -2, -3, -4, -5]
([8, -3, 5, 2, -7]) -> [2, -3, 5, -7, 8]
        }
    }
}

problem Generated/2837 {
code {
        func sort_in_descending_abs_order(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> [5, -4, 3, -2, 1]
([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([-1, -2, -3, -4, -5]) -> [-5, -4, -3, -2, -1]
([0, 1, -1]) -> [1, -1, 0]
([]) -> []
        }
    }
}

problem Generated/2838 {
code {
        func sort_list_by_absolute(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> [1, -2, 3, -4, 5]
([-5, -4, -3, -2, -1]) -> [-1, -2, -3, -4, -5]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([-1, -2, -3, -4, -5]) -> [-1, -2, -3, -4, -5]
([0, 0, 1, -1, 2, -2]) -> [0, 0, 1, -1, 2, -2]
        }
    }
}

problem Generated/2839 {
code {
        func sort_numbers_by_abs(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, -2.0, 3.0, -4.0, 5.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [-1.0, -2.0, -3.0, -4.0, -5.0]
([0.0, 2.0, 3.0, -4.0, 5.0]) -> [0.0, 2.0, 3.0, -4.0, 5.0]
([1.1, 2.2, -3.3, 4.4, -5.5]) -> [1.1, 2.2, -3.3, 4.4, -5.5]
([]) -> []
        }
    }
}

problem Generated/2840 {
code {
        func get_sum_of_largest_k_numbers(numbers: list<int>, k: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 12
([7, 3, 5, 9, 6], 2) -> 16
([1, 7, 4, 9, 5], 5) -> 26
([1, 7, 4, 9, 5], 0) -> 0
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> 36
        }
    }
}

problem Generated/2841 {
code {
        func get_sum_of_n_largest_numbers(numbers: list<int>, n: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 12
([7, 3, 5, 9, 6], 2) -> 16
([1, 7, 4, 9, 5], 5) -> 26
([1, 7, 4, 9, 5], 0) -> 0
([-1, -2, -3, -4, -5], 3) -> -6
        }
    }
}

problem Generated/2842 {
code {
        func sort_list_by_max_value(elements: list<list<int>>) -> list<list<int>>
    }
    tests {
        template nse {
            ([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> [[7, 8, 9], [4, 5, 6], [1, 2, 3]]
([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) -> [[9, 8, 7], [6, 5, 4], [3, 2, 1]]
([[1, 5, 2], [3, 8, 7], [4, 9, 6]]) -> [[4, 9, 6], [3, 8, 7], [1, 5, 2]]
([[2, 7, 3], [4, 1, 9], [8, 5, 6]]) -> [[4, 1, 9], [8, 5, 6], [2, 7, 3]]
([[7, 2, 5], [3, 9, 1], [6, 4, 8]]) -> [[3, 9, 1], [6, 4, 8], [7, 2, 5]]
        }
    }
}

problem Generated/2843 {
code {
        func min_diff(nums: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 5, 3, 19, 18, 25]) -> 1
([7, 15, 23, 31, 39, 47, 55]) -> 8
([1, 2, 3, 4, 5, 6]) -> 1
([10, 20, 30, 40]) -> 10
([1, 3, 1, 3, 5]) -> 0
        }
    }
}

problem Generated/2844 {
code {
        func sort_list_and_get_min(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([5, 2, 7, 1, 6, 8]) -> 1
([4, 3, 6, 7, 2, 1]) -> 1
([-1, 0, 3, 5, 2, 4]) -> -1
([0, 0, 0, 0, 0]) -> 0
([1, 2, 3, 4, 5]) -> 1
        }
    }
}

problem Generated/2845 {
code {
        func sort_based_on_another_list(keys: list<int>, values: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [1.5, 2.5, 3.5, 4.5, 5.5]) -> [1.5, 2.5, 3.5, 4.5, 5.5]
([5, 4, 3, 2, 1], [1.5, 2.5, 3.5, 4.5, 5.5]) -> [5.5, 4.5, 3.5, 2.5, 1.5]
([1, 3, 2, 5, 4], [5.5, 2.5, 4.5, 3.5, 1.5]) -> [5.5, 4.5, 2.5, 1.5, 3.5]
([1, 2, 3, 4, 5], [1.5, 1.5, 1.5, 1.5, 1.5]) -> [1.5, 1.5, 1.5, 1.5, 1.5]
([1, 2, 3, 4, 5], [5.5, 4.5, 3.5, 2.5, 1.5]) -> [5.5, 4.5, 3.5, 2.5, 1.5]
        }
    }
}

problem Generated/2846 {
code {
        func sort_list_in_reverse_based_on_index(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([1, 7, 4, 9, 5]) -> [5, 9, 4, 7, 1]
([1, 7]) -> [7, 1]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/2847 {
code {
        func sort_and_return_first_k(elements: list<int>, k: int) -> list<int>
    }
    tests {
        template nse {
            ([5, 1, 4, 3, 2], 3) -> [1, 2, 3]
([1, 2, 3, 4, 5], 5) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1], 2) -> [1, 2]
([1, 3, 5, 2, 4], 4) -> [1, 2, 3, 4]
([1, 6, 4, 7, 5], 0) -> []
        }
    }
}

problem Generated/2848 {
code {
        func sort_list_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([3, 1, 4, 2, 5, 4, 1, 3]) -> [1, 2, 3, 4, 5]
([3, 3, 3, 3, 2, 2, 2, 1, 1, 1]) -> [1, 2, 3]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([]) -> []
        }
    }
}

problem Generated/2849 {
code {
        func sort_list_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([7, 3, 5, 9, 6, 7, 5, 3]) -> [3, 5, 6, 7, 9]
([7, 2, 4, 0, 8, 1]) -> [0, 1, 2, 4, 7, 8]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [1, 2, 3, 4, 5, 6, 7, 8]
([]) -> []
        }
    }
}

problem Generated/2850 {
code {
        func sort_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1, 4, 5, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([4, 1, 8, 3, 2, 9, 1, 4, 5]) -> [1, 2, 3, 4, 5, 8, 9]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1]) -> [1]
([]) -> []
([1]) -> [1]
        }
    }
}

problem Generated/2851 {
code {
        func sort_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 3, 2, 2, 5, 4, 3]) -> [1, 2, 3, 4, 5]
([1]) -> [1]
([]) -> []
([2, 2, 2]) -> [2]
        }
    }
}

problem Generated/2852 {
code {
        func sort_list_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([7, 3, 5, 9, 6, 5, 3]) -> [3, 5, 6, 7, 9]
([1, 1, 1, 1, 1]) -> [1]
([]) -> []
([1, 2, 3, 2, 1, 4, 5, 4]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/2853 {
code {
        func sort_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([3, 2, 1, 2, 3, 4, 5, 6, 4, 7, 8, 8, 9, 0]) -> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
([1, 2, 3, 4, 5, 6, 7, 8, 9]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) -> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
([1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, -1, -2, -3, 0]) -> [-3, -2, -1, 0, 1, 2, 3]
        }
    }
}

problem Generated/2854 {
code {
        func filter_sorted_list(numbers: list<int>, c: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 5, 2, 6, 3, 7, 4], 3) -> [4, 5, 6, 7]
([5, 4, 3, 2, 1], 0) -> [1, 2, 3, 4, 5]
([1, 10, 2, 20, 3, 30], 15) -> [20, 30]
([2, 4, 6, 8, 10], 20) -> []
([], 5) -> []
        }
    }
}

problem Generated/2855 {
code {
        func filter_sorted_list(elements: list<int>, threshold: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 6, 4, 8, 3, 9, 2], 5) -> [6, 8, 9]
([1, 6, 4, 8, 3, 9, 2], 0) -> [1, 2, 3, 4, 6, 8, 9]
([1, 6, 4, 8, 3, 9, 2], 10) -> []
([], 5) -> []
([5], 5) -> []
        }
    }
}

problem Generated/2856 {
code {
        func filter_sort_list_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 4, 9, 16, 25]
([7, -2, 5, 9, -6, 0]) -> [25, 49, 81]
([-1, -7, -4, -9, -5]) -> []
([1, 7, 4, 9, 5]) -> [1, 16, 25, 49, 81]
([]) -> []
        }
    }
}

problem Generated/2857 {
code {
        func filter_sorted_list(numbers: list<int>, c: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [4, 5]
([7, 3, 5, 9, 6], 6) -> [7, 9]
([1, 7, 4, 9, 5], 7) -> [9]
([1, 7, 4, 9, 5], 10) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [5, 6, 7, 8]
        }
    }
}

problem Generated/2858 {
code {
        func sort_and_filter_odd(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([5, 4, 3, 2, 1]) -> [1, 3, 5]
([1, 2, 3, 4, 5]) -> [1, 3, 5]
([1, 3, 5, 7, 9]) -> [1, 3, 5, 7, 9]
([2, 4, 6, 8, 10]) -> []
([3, -2, 5, -1, 2]) -> [-1, 3, 5]
        }
    }
}

problem Generated/2859 {
code {
        func sort_and_filter_elements(elements: list<int>, limit: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 5, 3, 2, 4], 3) -> [1, 2, 3]
([1, 2, 3, 4, 5], 5) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5], 0) -> []
([1, 2, -3, 4, -5], 2) -> [-5, -3, 1, 2]
([], 3) -> []
        }
    }
}

problem Generated/2860 {
code {
        func sort_string(s: string) -> string
    }
    tests {
        template nse {
            ("hello") -> "ehllo"
("python") -> "hnopty"
("world") -> "dlorw"
("") -> ""
("a") -> "a"
        }
    }
}

problem Generated/2861 {
code {
        func sort_string_by_ascii(strs: string) -> string
    }
    tests {
        template nse {
            ("hello") -> "ehllo"
("world") -> "dlorw"
("Python") -> "Phnoty"
("programming") -> "aggimmnoprr"
("abcdefghijklmnopqrstuvwxyz") -> "abcdefghijklmnopqrstuvwxyz"
        }
    }
}

problem Generated/2862 {
code {
        func sort_string(s: string) -> string
    }
    tests {
        template nse {
            ("hello") -> "ehllo"
("hEllo") -> "Ehllo"
("123456") -> "123456"
("cba") -> "abc"
("") -> ""
        }
    }
}

problem Generated/2863 {
code {
        func sort_by_ascii_value(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["cat", "mat", "pat", "bat", "rat"]) -> ["bat", "cat", "mat", "pat", "rat"]
(["good", "bad", "ugly", "nice"]) -> ["bad", "good", "nice", "ugly"]
(["zoo", "apple", "car", "mango"]) -> ["apple", "car", "mango", "zoo"]
(["python", "java", "ruby", "perl", "php"]) -> ["java", "perl", "php", "python", "ruby"]
([]) -> []
        }
    }
}

problem Generated/2864 {
code {
        func sort_string_by_ascii(s: string) -> string
    }
    tests {
        template nse {
            ("hello") -> "ehllo"
("orange") -> "aegnor"
("PYTHON") -> "HNOPTY"
("abcdefghijklmnopqrstuvwxyz") -> "abcdefghijklmnopqrstuvwxyz"
("cba9876543210") -> "0123456789abc"
        }
    }
}

problem Generated/2865 {
code {
        func check_list_sorted_and_unique(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([1, 2, 3, 4, 4, 5]) -> false
([5, 4, 3, 2, 1]) -> true
([1]) -> true
([]) -> true
        }
    }
}

problem Generated/2866 {
code {
        func check_sorted_list(lst: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([5, 4, 3, 2, 1]) -> false
([1, 3, 2, 4, 5]) -> false
([1, 2, 3, 5, 4]) -> false
([]) -> true
        }
    }
}

problem Generated/2867 {
code {
        func is_sorted_and_all_even(numbers: list<int>) -> bool
    }
    tests {
        template nse {
            ([2, 4, 6, 8, 10]) -> true
([1, 3, 5, 7, 9]) -> false
([1, 2, 3, 4, 5]) -> false
([8, 4, 6, 2, 10]) -> true
([3, 6, 2, 9, 1]) -> false
        }
    }
}

problem Generated/2868 {
code {
        func is_sorted_and_all_positive(numbers: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([5, 4, 3, 2, 1]) -> false
([1, 2, 3, 0, 5]) -> false
([-1, -2, -3, -4, -5]) -> false
([1, 3, 2, 4, 5]) -> false
        }
    }
}

problem Generated/2869 {
code {
        func is_sorted_and_even(numbers: list<int>) -> bool
    }
    tests {
        template nse {
            ([2, 4, 6, 8, 10]) -> true
([2, 4, 6, 8, 9]) -> false
([]) -> true
([1, 2, 3, 4, 5]) -> false
([1, 3, 5, 7, 9]) -> false
        }
    }
}

problem Generated/2870 {
code {
        func is_list_sorted(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([1, 2, 3, 5, 4]) -> false
([3, 2, 1]) -> false
([1]) -> true
([]) -> true
        }
    }
}

problem Generated/2871 {
code {
        func sort_and_get_binary_values(elements: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["1", "10", "11", "100", "101"]
([5, 4, 3, 2, 1]) -> ["1", "10", "11", "100", "101"]
([7, 3, 5, 9, 6]) -> ["11", "101", "110", "111", "1001"]
([10, 20, 30, 40, 50]) -> ["1010", "10100", "11110", "101000", "110010"]
([0, 1, 2, 3, 4]) -> ["0", "1", "10", "11", "100"]
        }
    }
}

problem Generated/2872 {
code {
        func sort_binary_string_list(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["110", "10", "000", "1011"]) -> ["000", "10", "110", "1011"]
(["10", "0", "111", "101"]) -> ["0", "10", "101", "111"]
([]) -> []
(["1", "10", "11", "100", "101", "110", "111"]) -> ["1", "10", "11", "100", "101", "110", "111"]
(["10110", "10010", "10101", "11010", "11111"]) -> ["10010", "10101", "10110", "11010", "11111"]
        }
    }
}

problem Generated/2873 {
code {
        func sort_and_join_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], ", ") -> "apple, banana, cherry, date"
(["world", "hello"], "") -> "helloworld"
(["a", "z", "f", "o", "b"], "-") -> "a-b-f-o-z"
(["car", "bike", "bus", "train"], " ") -> "bike bus car train"
(["John", "Mary", "Alan", "Tim"], " and ") -> "Alan and John and Mary and Tim"
        }
    }
}

problem Generated/2874 {
code {
        func sort_and_join_strings(words: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "grape", "peach"], ", ") -> "apple, banana, grape, orange, peach"
(["Python", "Java", "C++", "JavaScript"], " ") -> "C++ Java JavaScript Python"
(["Hello", "World"], "1234") -> "Hello1234World"
(["123", "45", "6", "789"], "") -> "123456789"
([], ", ") -> ""
        }
    }
}

problem Generated/2875 {
code {
        func sort_and_join(elements: list<string>) -> string
    }
    tests {
        template nse {
            (["c", "a", "b", ""]) -> "abc"
(["apple", "banana", "cherry"]) -> "applebananacherry"
([]) -> ""
(["dog", "", "cat"]) -> "catdog"
(["1", "3", "2"]) -> "123"
        }
    }
}

problem Generated/2876 {
code {
        func sort_and_join_strings(strs: list<string>, sep: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], ", ") -> "apple, banana, cherry, date"
(["zoo", "hotel", "apple", "india"], "") -> "applehotelindiazoo"
(["hello", "world"], " ") -> "hello world"
(["b", "a", "c"], "") -> "abc"
([], "-") -> ""
        }
    }
}

problem Generated/2877 {
code {
        func sort_words_and_join(words: list<string>, delim: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "this", "is", "a", "test"], " ") -> "a hello is test this world"
(["apple", "banana", "cherry", "date", "eggfruit"], "-") -> "apple-banana-cherry-date-eggfruit"
(["apple", "banana", "cherry", "date", "eggfruit"], "") -> "applebananacherrydateeggfruit"
(["one", "two", "three", "four", "five"], "+") -> "five+four+one+three+two"
([], ",") -> ""
        }
    }
}

problem Generated/2878 {
code {
        func sort_and_join_strings(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["apple", "orange", "banana"], ", ") -> "apple, banana, orange"
(["hello", "world", "how", "are", "you"], " ") -> "are hello how world you"
(["z", "y", "x"], "") -> "xyz"
([], ", ") -> ""
(["a", "b", "c", "d", "e", "f"], "") -> "abcdef"
        }
    }
}

problem Generated/2879 {
code {
        func sort_names(names: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Alice", "bob", "Charlie", "dave"]) -> ["Alice", "bob", "Charlie", "dave"]
(["Zebra", "apple", "banana", "orange"]) -> ["apple", "banana", "orange", "Zebra"]
(["Hello", "hello", "world", "World"]) -> ["Hello", "hello", "world", "World"]
([]) -> []
(["123", "abc", "ABC", "DEF", "xyz", "XYZ"]) -> ["123", "abc", "ABC", "DEF", "xyz", "XYZ"]
        }
    }
}

problem Generated/2880 {
code {
        func sort_string_case_insensitive(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Banana", "cherry", "Durian"]) -> ["apple", "Banana", "cherry", "Durian"]
(["Mango", "kiwi", "Pineapple", "Orange"]) -> ["kiwi", "Mango", "Orange", "Pineapple"]
(["book", "pen", "pencil", "ruler"]) -> ["book", "pen", "pencil", "ruler"]
(["python", "Java", "Ruby", "C++", "Perl"]) -> ["C++", "Java", "Perl", "python", "Ruby"]
([]) -> []
        }
    }
}

problem Generated/2881 {
code {
        func sort_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Banana", "carrot", "Date"]) -> ["apple", "Banana", "carrot", "Date"]
(["ball", "Apple", "dog", "cat", "Zebra"]) -> ["Apple", "ball", "cat", "dog", "Zebra"]
([]) -> []
(["A", "b", "C", "d", "e"]) -> ["A", "b", "C", "d", "e"]
(["Python", "Java", "JavaScript", "C#", "Swift"]) -> ["C#", "Java", "JavaScript", "Python", "Swift"]
        }
    }
}

problem Generated/2882 {
code {
        func sort_string_list(str_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Orange", "banana", "Pineapple"]) -> ["apple", "banana", "Orange", "Pineapple"]
(["cat", "ant", "Dog", "elephant"]) -> ["ant", "cat", "Dog", "elephant"]
([]) -> []
(["aa", "aA", "Aa", "AA"]) -> ["aa", "aA", "Aa", "AA"]
(["zebra", "lion", "tiger", "elephant"]) -> ["elephant", "lion", "tiger", "zebra"]
        }
    }
}

problem Generated/2883 {
code {
        func sort_strings_case_insensitive(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "banana", "cherry", "Date"]) -> ["Apple", "banana", "cherry", "Date"]
(["Apple", "banana", "Cherry", "date"]) -> ["Apple", "banana", "Cherry", "date"]
([]) -> []
(["AbC", "DeF", "ghI"]) -> ["AbC", "DeF", "ghI"]
(["Zebra", "Ant", "tiger", "lion"]) -> ["Ant", "lion", "tiger", "Zebra"]
        }
    }
}

problem Generated/2884 {
code {
        func sort_strings_uppercase(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "Python"]) -> ["HELLO", "PYTHON", "WORLD"]
(["banana", "apple", "orange"]) -> ["APPLE", "BANANA", "ORANGE"]
([]) -> []
(["abcd", "efg", "hijklm", "nop"]) -> ["ABCD", "EFG", "HIJKLM", "NOP"]
(["Welcome", "to", "OpenAI", "API"]) -> ["API", "OPENAI", "TO", "WELCOME"]
        }
    }
}

problem Generated/2885 {
code {
        func sort_list_of_strings_uppercase(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"]) -> ["APPLE", "BANANA", "CHERRY", "DATE"]
(["Python", "java", "C++", "ruby"]) -> ["C++", "JAVA", "PYTHON", "RUBY"]
([]) -> []
(["ALPHABET", "alphabet"]) -> ["ALPHABET", "ALPHABET"]
(["Z", "a", "C", "d"]) -> ["A", "C", "D", "Z"]
(["123", "789", "456", "321"]) -> ["123", "321", "456", "789"]
        }
    }
}

problem Generated/2886 {
code {
        func sort_strings_uppercase(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "Python", "Programming"]) -> ["HELLO", "PROGRAMMING", "PYTHON", "WORLD"]
(["apple", "banana", "cherry", "dates"]) -> ["APPLE", "BANANA", "CHERRY", "DATES"]
(["1", "2", "3", "4", "5"]) -> ["1", "2", "3", "4", "5"]
([]) -> []
(["Hello"]) -> ["HELLO"]
        }
    }
}

problem Generated/2887 {
code {
        func sort_strings_in_uppercase(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "Cherry", "date"]) -> ["APPLE", "BANANA", "CHERRY", "DATE"]
([]) -> []
(["rat", "cat", "bat", "mat"]) -> ["BAT", "CAT", "MAT", "RAT"]
(["a", "b", "c", "d", "e"]) -> ["A", "B", "C", "D", "E"]
(["qwe", "rty", "uio", "asd", "fgh"]) -> ["ASD", "FGH", "QWE", "RTY", "UIO"]
        }
    }
}

problem Generated/2888 {
code {
        func sort_lower_case_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["a", "B", "c", "D", "e"]) -> ["a", "c", "e"]
(["A", "B", "C", "D", "E"]) -> []
(["apple", "Orange", "banana", "Guava"]) -> ["apple", "banana"]
([]) -> []
(["Python", "is", "amazing"]) -> ["amazing", "is"]
        }
    }
}

problem Generated/2889 {
code {
        func sort_lowercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "banana", "cherry", "Date", "elderberry", "fig", "Grape"]) -> ["banana", "cherry", "elderberry", "fig"]
(["hello", "world", "how", "are", "you"]) -> ["are", "hello", "how", "world", "you"]
(["Python", "is", "a", "POPULAR", "programming", "language"]) -> ["a", "is", "language", "programming"]
([]) -> []
(["UPPERCASE", "ONLY"]) -> []
        }
    }
}

problem Generated/2890 {
code {
        func sort_uppercase_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "HELLO", "world"]) -> ["Hello", "world", "HELLO", "WORLD"]
(["A", "b", "c", "D", "e", "F"]) -> ["b", "c", "e", "A", "D", "F"]
([]) -> []
(["CAT", "DOG", "BIRD", "Fish"]) -> ["Fish", "BIRD", "CAT", "DOG"]
(["computer", "SCIENCE", "engineering", "mathematics"]) -> ["computer", "engineering", "mathematics", "SCIENCE"]
        }
    }
}

problem Generated/2891 {
code {
        func sort_uppercase_first(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["AAA", "bbb", "CCC", "ddd"]) -> ["AAA", "CCC", "bbb", "ddd"]
(["abcd", "efgh", "ijkl", "mnop", "qryz"]) -> ["abcd", "efgh", "ijkl", "mnop", "qryz"]
([]) -> []
(["ABC", "DEF", "GHI"]) -> ["ABC", "DEF", "GHI"]
(["abcd", "EFGH", "ijkl", "MNOP", "qryz"]) -> ["EFGH", "MNOP", "abcd", "ijkl", "qryz"]
        }
    }
}

problem Generated/2892 {
code {
        func sort_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "pear", "orange", "banana", "grape"]) -> ["apple", "banana", "grape", "orange", "pear"]
(["apple", "23", "orange", "34", "grape"]) -> ["apple", "grape", "orange"]
(["apple", "pear", "banana", "grape"]) -> ["apple", "banana", "grape", "pear"]
(["c", "a", "t", "b", "e", "p"]) -> ["a", "b", "c", "e", "p", "t"]
([]) -> []
        }
    }
}

problem Generated/2893 {
code {
        func sort_alphabetic_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python", "!", "123", "This", "is", "a", "TEST"]) -> ["TEST", "This", "a", "hello", "is", "python", "world"]
(["a", "b", "c", "d", "e", "f"]) -> ["a", "b", "c", "d", "e", "f"]
([]) -> []
(["apple", "banana", "cherry", "dog"]) -> ["apple", "banana", "cherry", "dog"]
(["A", "Z", "b", "c", "D", "e"]) -> ["A", "D", "Z", "b", "c", "e"]
        }
    }
}

problem Generated/2894 {
code {
        func sort_alphabetic_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "1", "2", "3"]) -> ["1", "2", "3", "apple", "banana", "cherry"]
(["apple", "1", "banana", "2", "cherry", "3"]) -> ["1", "2", "3", "apple", "banana", "cherry"]
(["apple", "1", "2", "banana", "cherry", "3"]) -> ["1", "2", "3", "apple", "banana", "cherry"]
([]) -> []
(["apple", "banana", "cherry"]) -> ["apple", "banana", "cherry"]
        }
    }
}

problem Generated/2895 {
code {
        func sort_alpha_numeric(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "123", "world", "456"]) -> ["hello", "world", "123", "456"]
(["foo", "bar", "baz", "123", "456"]) -> ["bar", "baz", "foo", "123", "456"]
(["a", "b", "c", "d"]) -> ["a", "b", "c", "d"]
([]) -> []
(["a", "1", "b", "2"]) -> ["a", "b", "1", "2"]
        }
    }
}

problem Generated/2896 {
code {
        func sort_numeric_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["3", "1", "4", "2", "5"]) -> ["1", "2", "3", "4", "5"]
(["1", "a", "2", "b", "3"]) -> ["a", "b", "1", "2", "3"]
(["123", "234", "345", "456"]) -> ["123", "234", "345", "456"]
(["a", "b", "c", "d"]) -> ["a", "b", "c", "d"]
(["12", "34", "56", "78"]) -> ["12", "34", "56", "78"]
        }
    }
}

problem Generated/2897 {
code {
        func sort_strings_starting_with(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "pear", "orange"], "a") -> ["apple"]
(["apple", "banana", "pear", "orange"], "b") -> ["banana"]
(["apple", "banana", "pear", "orange"], "p") -> ["pear"]
(["apple", "banana", "pear", "orange"], "q") -> []
([], "q") -> []
        }
    }
}

problem Generated/2898 {
code {
        func sort_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "grape", "apricot"], "a") -> ["apple", "apricot"]
(["apple", "banana", "orange", "grape", "apricot"], "b") -> ["banana"]
(["apple", "banana", "orange", "grape", "apricot"], "g") -> ["grape"]
(["apple", "banana", "orange", "grape", "apricot"], "") -> ["apple", "apricot", "banana", "grape", "orange"]
([], "a") -> []
        }
    }
}

problem Generated/2899 {
code {
        func sort_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date", "elderberry"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date", "elderberry"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date", "elderberry"], "") -> ["apple", "banana", "cherry", "date", "elderberry"]
([], "a") -> []
(["ant", "bat", "cat", "dog", "elephant"], "d") -> ["dog"]
        }
    }
}

problem Generated/2900 {
code {
        func sort_str_by_prefix(str_lst: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
(["apple", "banana", "cherry", "date"], "e") -> []
        }
    }
}

problem Generated/2901 {
code {
        func sort_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["abc", "bcd", "efg", "cdg", "dfe"], "a") -> ["abc"]
(["abc", "bcd", "efg", "cdg", "dfe"], "b") -> ["bcd"]
(["abc", "bcd", "efg", "cdg", "dfe"], "") -> ["abc", "bcd", "cdg", "dfe", "efg"]
(["def", "abc", "bcd", "efg", "cdg", "dfe"], "cd") -> ["cdg"]
([], "a") -> []
        }
    }
}

problem Generated/2902 {
code {
        func sort_string_list(string_lst: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date", "pear"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date", "pear"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date", "pear"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date", "pear"], "d") -> ["date"]
(["apple", "banana", "cherry", "date", "pear"], "p") -> ["pear"]
        }
    }
}

problem Generated/2903 {
code {
        func sort_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["cat", "dog", "car", "coat"], "c") -> ["car", "cat", "coat"]
(["apple", "banana", "cat", "dog", "car"], "b") -> ["banana"]
(["apple", "banana", "cat", "dog", "car"], "e") -> []
(["banana", "bat", "cat", "cow"], "ca") -> ["cat"]
(["a", "aa", "aaa", "aaaa"], "a") -> ["a", "aa", "aaa", "aaaa"]
        }
    }
}

problem Generated/2904 {
code {
        func sort_and_append(items: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([4, -2, 3, 0, 5, -1, 2]) -> [2, 3, 4, 5, 14]
([1, 2, 3, 0, -1]) -> [1, 2, 3, 6]
([-1, -2, -3]) -> [0]
([10, 20, 30, 40]) -> [10, 20, 30, 40, 100]
([]) -> [0]
        }
    }
}

problem Generated/2905 {
code {
        func sort_and_pop_highest(numbers: list<int>, n: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [5, 4]
([2, 3, 1, 4, 5], 3) -> [5, 4, 3]
([0, 10, 20, 30], 4) -> [30, 20, 10, 0]
([10, 9, 8, 7, 6], 1) -> [10]
([1, 3, 5, 7, 9], 5) -> [9, 7, 5, 3, 1]
        }
    }
}

problem Generated/2906 {
code {
        func get_top_k_numbers(numbers: list<int>, k: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [5, 4, 3]
([7, 3, 5, 9, 6], 2) -> [9, 7]
([1, 7, 4, 9, 5], 5) -> [9, 7, 5, 4, 1]
([1, 7, 4, 9, 5], 0) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> [8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/2907 {
code {
        func get_sorted_indices(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([4.0, 2.0, 1.0, 3.0, 5.0]) -> [2, 1, 3, 0, 4]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [0, 1, 2, 3, 4]
([5.0, 4.0, 3.0, 2.0, 1.0]) -> [4, 3, 2, 1, 0]
([]) -> []
([1.0, 2.5, 1.5, 2.0]) -> [0, 2, 3, 1]
        }
    }
}

problem Generated/2908 {
code {
        func sort_list_and_get_indices(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([5, 4, 3, 2, 1]) -> [4, 3, 2, 1, 0]
([1, 2, 3, 4, 5]) -> [0, 1, 2, 3, 4]
([1, 1, 1, 1, 1]) -> [0, 0, 0, 0, 0]
([3, 1, 2, 1, 4]) -> [3, 0, 2, 0, 4]
([7, 2, 5, 9, 1, 3]) -> [4, 1, 3, 5, 0, 2]
        }
    }
}

problem Generated/2909 {
code {
        func sort_and_reverse_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [9, 7, 6, 5, 3]
([1, -7, 4, -9, 5]) -> [5, 4, 1]
([]) -> []
([1, 2, 3, 4, 5, 6, 7, 8]) -> [8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/2910 {
code {
        func sort_and_reverse_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [9, 7, 6, 5, 3]
([1, 7, 4, 9, 5]) -> [9, 7, 5, 4, 1]
([4, 4, 4, 4, 4]) -> [4, 4, 4, 4, 4]
([]) -> []
        }
    }
}

problem Generated/2911 {
code {
        func sort_and_reverse_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([5, 3, 1, 4, 2]) -> [5, 4, 3, 2, 1]
([1]) -> [1]
([]) -> []
([2, 2, 2, 2, 2]) -> [2, 2, 2, 2, 2]
([-1, -2, -3, -4, -5]) -> [-1, -2, -3, -4, -5]
        }
    }
}

problem Generated/2912 {
code {
        func sort_and_reverse_list(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 3.0, 2.0, 4.0, 5.0]) -> [5.0, 4.0, 3.0, 2.0, 1.0]
([10.0, 20.0, 30.0, 40.0, 50.0]) -> [50.0, 40.0, 30.0, 20.0, 10.0]
([2.5, 3.7, 1.2, 5.8, 4.3]) -> [5.8, 4.3, 3.7, 2.5, 1.2]
([1.0, 1.0, 1.0, 1.0, 1.0]) -> [1.0, 1.0, 1.0, 1.0, 1.0]
([]) -> []
        }
    }
}

problem Generated/2913 {
code {
        func sort_and_reverse_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [9, 7, 6, 5, 3]
([1, 7, 4, 9, 5]) -> [9, 7, 5, 4, 1]
([1, 7, 4, 9, 5, 3, 8, 2]) -> [9, 8, 7, 5, 4, 3, 2, 1]
([1]) -> [1]
        }
    }
}

problem Generated/2914 {
code {
        func sort_and_reverse(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
([2, 4, 1, 5, 3]) -> [5, 4, 3, 2, 1]
([1]) -> [1]
([]) -> []
([5, 2, 7, 1, 10, 8]) -> [10, 8, 7, 5, 2, 1]
        }
    }
}

problem Generated/2915 {
code {
        func sort_and_reverse_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [9, 7, 6, 5, 3]
([1, 7, 4, 9, 5]) -> [9, 7, 5, 4, 1]
([1, 7, 4, 9, 5, 2]) -> [9, 7, 5, 4, 2, 1]
([1, 1, 1, 1]) -> [1, 1, 1, 1]
        }
    }
}

problem Generated/2916 {
code {
        func sort_list_and_return_copy(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 3.0, 2.0, 5.0, 4.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([5.0, 4.0, 3.0, 2.0, 1.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([2.5, 1.2, 4.8, 3.1, 0.9]) -> [0.9, 1.2, 2.5, 3.1, 4.8]
([3.0, 3.0, 3.0, 3.0, 3.0]) -> [3.0, 3.0, 3.0, 3.0, 3.0]
([]) -> []
        }
    }
}

problem Generated/2917 {
code {
        func sort_and_filter_duplicate(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 3, 2, 1, 4, 3, 6, 5, 4, 5]) -> [1, 2, 3, 4, 5, 6]
([3, 2, 1]) -> [1, 2, 3]
([1, 1, 1, 1, 1]) -> [1]
([]) -> []
([1, 2, 3, 3, 3, 2, 1]) -> [1, 2, 3]
([2, 4, 6, 8, 10]) -> [2, 4, 6, 8, 10]
        }
    }
}

problem Generated/2918 {
code {
        func sort_list_copy(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([5, 2, 3, 4, 1]) -> [1, 2, 3, 4, 5]
([9, 8, 7, 6, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
([]) -> []
        }
    }
}

problem Generated/2919 {
code {
        func sort_list_and_return_last_k_elements(elements: list<int>, k: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [5, 4, 3]
([7, 3, 5, 9, 6], 2) -> [9, 7]
([1, 7, 4, 9, 5], 5) -> [9, 7, 5, 4, 1]
([1, 7, 4, 9, 5], 0) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> [8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/2920 {
code {
        func sort_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [9, 7, 5, 3, 1]
([11, 22, 33, 44, 55, 66, 77, 88, 99, 100]) -> [99, 77, 55, 33, 11]
([2, 4, 6, 8, 10]) -> []
([1, 3, 5, 7, 9]) -> [9, 7, 5, 3, 1]
([1, 2, 4, 6, 7, 8, 10]) -> [7, 1]
        }
    }
}

problem Generated/2921 {
code {
        func sort_list_and_return_new(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([5, 3, 1, 7, 9, 2, 4, 6, 8]) -> [2, 4, 6, 8]
([7, 13, 21, 15, 17, 25, 11]) -> []
([1, 3, 5, 7, 9]) -> []
([2, 4, 6, 8, 10]) -> [2, 4, 6, 8, 10]
([10, 8, 6, 4, 2]) -> [2, 4, 6, 8, 10]
        }
    }
}

problem Generated/2922 {
code {
        func sort_list_copy(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([7, 3, 5, 9, 6]) -> [3, 5, 6, 7, 9]
([]) -> []
([1]) -> [1]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/2923 {
code {
        func sort_list_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([5, 3, 6, 3, 1, 4, 5, 3]) -> [1, 3, 4, 5, 6]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1]) -> [1]
([]) -> []
        }
    }
}

problem Generated/2924 {
code {
        func sort_list_and_return_copy(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([3, 2, 5, 1, 4]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1]) -> [1, 1, 1, 1, 1]
([]) -> []
        }
    }
}

problem Generated/2925 {
code {
        func sort_and_remove_duplicates(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 2, 3, 3]) -> [1, 2, 3]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 2, 1, 5, 6, 5]) -> [1, 2, 3, 5, 6]
([3, 3, 3, 3, 3]) -> [3]
        }
    }
}

problem Generated/2926 {
code {
        func add_unique_elements_to_list_and_sort(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([7, 3, 5, 9, 6]) -> [3, 5, 6, 7, 9]
([1, 7, 4, 9, 5, 7, 4]) -> [1, 4, 5, 7, 9]
([-1, 2, -3, 4, 0, -3, 5]) -> [-3, -1, 0, 2, 4, 5]
([]) -> []
        }
    }
}

problem Generated/2927 {
code {
        func sort_unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 4, 5, 3, 6, 7, 7, 2, 9]) -> [1, 2, 3, 4, 5, 6, 7, 9]
([1, 1, 1, 1, 1]) -> [1]
([]) -> []
([4, 5, 6, 7, 8, 9]) -> [4, 5, 6, 7, 8, 9]
([2, -2, 3, -3, 4, -4]) -> [-4, -3, -2, 2, 3, 4]
([1, -2, 3, -4, 5]) -> [-4, -2, 1, 3, 5]
        }
    }
}

problem Generated/2928 {
code {
        func sort_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([3, 1, 2, 2, 1, 4]) -> [1, 2, 3, 4]
([7, 3, 5, 9, 6]) -> [3, 5, 6, 7, 9]
([1, 7, 4, 9, 5]) -> [1, 4, 5, 7, 9]
([1, 7, 4, 9, 5, 1, 4, 7]) -> [1, 4, 5, 7, 9]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/2929 {
code {
        func unique_sorted_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 2, 1]) -> [1, 2, 3]
([7, 3, 5, 9, 6]) -> [3, 5, 6, 7, 9]
([1, 1, 1, 1, 1]) -> [1]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/2930 {
code {
        func sort_unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 5, 3, -4, 2, 3, -4]) -> [-4, 1, 2, 3, 5]
([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([-1, 5, -3, 7, 2, 5, -4, -1]) -> [-4, -3, -1, 2, 5, 7]
        }
    }
}

problem Generated/2931 {
code {
        func sort_list_and_find_unique(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 1, 2, 2, 3, 3]) -> [1, 2, 3]
([7, 3, 5, 9, 6]) -> [3, 5, 6, 7, 9]
([1, 1, 1, 1, 1, 1]) -> [1]
([1, 7, 4, 9, 5]) -> [1, 4, 5, 7, 9]
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        }
    }
}

problem Generated/2932 {
code {
        func sort_list_by_floor(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.2, 3.4, 2.3, 4.5, 5.6]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([5.5, 4.4, 3.3, 2.2, 1.1]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.7, 0.2, 2.8, 3.6, 4.1]) -> [0.0, 0.0, 2.0, 3.0, 4.0]
([1.1, 2.2, 3.3, 4.4, 5.5]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([2.1, 3.1, 1.1, 4.1, 5.1]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
        }
    }
}

problem Generated/2933 {
code {
        func sort_and_floor(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 3.7, 2.4, 5.9, 0.6]) -> [0, 1, 2, 3, 5]
([4.5, 5.1, 6.7, 8.2, 3.9]) -> [3, 4, 5, 6, 8]
([1.1, 2.2, 3.3, 4.4, 5.5]) -> [1, 2, 3, 4, 5]
([5.5, 4.4, 3.3, 2.2, 1.1]) -> [1, 2, 3, 4, 5]
([1.5, 2.5, 3.5, 4.5, 5.5]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/2934 {
code {
        func sort_list_based_on_divisor(numbers: list<int>, divisor: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [3, 6, 9]
([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) -> [2, 4, 6, 8]
([1, 3, 5, 7, 9], 2) -> []
([10, 20, 30, 40, 50], 7) -> []
([15, 25, 35, 45, 55], 5) -> [15, 25, 35, 45, 55]
        }
    }
}

problem Generated/2935 {
code {
        func sort_list_of_squares(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 4, 9, 16, 25]
([10, 20, 30, 40, 50]) -> [100, 400, 900, 1600, 2500]
([5, 3, 2, 7, 1]) -> [1, 4, 9, 25, 49]
([0, 1, -1, 5, -5]) -> [0, 1, 1, 25, 25]
([2, 4, 6, 8]) -> [4, 16, 36, 64]
        }
    }
}

problem Generated/2936 {
code {
        func sort_squares(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([-4, -2, -1, 0, 3, 5]) -> [0, 1, 4, 9, 16, 25]
([0, 1, 2, 3, 4, 5]) -> [0, 1, 4, 9, 16, 25]
([0, -1, -2, -3, -4, -5]) -> [0, 1, 4, 9, 16, 25]
([1, 3, 5, 7, 9]) -> [1, 9, 25, 49, 81]
([2, 4, 6, 8, 10]) -> [4, 16, 36, 64, 100]
        }
    }
}

problem Generated/2937 {
code {
        func sort_squares(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([3,1,7,2,4]) -> [1, 4, 9, 16, 49]
([5, 0, -3, 2, 1]) -> [0, 1, 4, 9, 25]
([4, 2, 1, 3]) -> [1, 4, 9, 16]
([5, 0, -2, 3, -1]) -> [0, 1, 4, 9, 25]
([0, 0, 0]) -> [0, 0, 0]
        }
    }
}

problem Generated/2938 {
code {
        func sort_squares_of_list(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 4, 9, 16, 25]
([-5, -4, -3, -2, -1]) -> [1, 4, 9, 16, 25]
([0, 1, 0, 3, 0, 2]) -> [0, 0, 0, 1, 4, 9]
([10, -2, 0, 3, 9]) -> [0, 4, 9, 81, 100]
([77, 45, 32, 21, 10]) -> [100, 441, 1024, 2025, 5929]
        }
    }
}

problem Generated/2939 {
code {
        func multiply_smallest(lst: list<int>, k: int) -> int
    }
    tests {
        template nse {
            ([2, 3, 4, 5], 2) -> 6
([2, 3, 4, 5], 3) -> 24
([4, 5, 3, 2, 1], 5) -> 120
([4, 5, 3, 2, 1], 2) -> 2
([1, 2, 3, 4, 5], 1) -> 1
        }
    }
}

problem Generated/2940 {
code {
        func get_indexes_of_val(elements: list<int>, value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([7, 3, 5, 9, 6], 7) -> [0]
([1, 7, 4, 9, 5], 2) -> []
([1, 7, 4, 9, 5], 7) -> [1]
([1, 2, 1, 4, 1, 6, 7, 8], 1) -> [0, 2, 4]
        }
    }
}

problem Generated/2941 {
code {
        func get_index_of_elements(elements: list<int>, target: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([1, 3, 5, 7, 9], 2) -> []
([10, 2, 5, 2, 7], 2) -> [1, 3]
([0, 0, 0, 0, 0], 0) -> [0, 1, 2, 3, 4]
([2, 4, 6, 8, 10], 10) -> [4]
        }
    }
}

problem Generated/2942 {
code {
        func get_indexes_of_value(elements: list<int>, value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([7, 3, 5, 9, 6], 5) -> [2]
([1, 7, 4, 9, 5], 6) -> []
([1, 7, 4, 7, 5], 7) -> [1, 3]
([1, 2, 3, 4, 5, 6, 7, 8], 1) -> [0]
        }
    }
}

problem Generated/2943 {
code {
        func get_indices_of_element(elements: list<int>, x: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([7, 3, 5, 9, 6], 5) -> [2]
([1, 7, 4, 9, 5, 7], 7) -> [1, 5]
([1, 7, 4, 9, 5], -1) -> []
([], 5) -> []
([1, 2, 3, 2, 5, 6, 2], 2) -> [1, 3, 6]
        }
    }
}

problem Generated/2944 {
code {
        func occurrences_of_value(numbers: list<int>, value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 3, 5, 7, 3, 4, 6, 3], 3) -> [1, 4, 7]
([1, 1, 1, 1, 1], 1) -> [0, 1, 2, 3, 4]
([2, 4, 6, 8, 10], 5) -> []
([2, 3, 5, 7, 11, 13], 11) -> [4]
([], 99) -> []
        }
    }
}

problem Generated/2945 {
code {
        func find_multiple_indexes(elements: list<int>, target: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([7, 3, 5, 9, 6], 7) -> [0]
([1, 7, 4, 9, 5], 10) -> []
([1, 7, 1, 9, 5], 1) -> [0, 2]
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> [7]
        }
    }
}

problem Generated/2946 {
code {
        func get_indexes_of_element(elements: list<int>, target: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([7, 3, 5, 9, 6], 6) -> [4]
([1, 7, 4, 9, 5], 11) -> []
([1, 7, 4, 9, 5, 9, 7, 4], 7) -> [1, 6]
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> [4]
        }
    }
}

problem Generated/2947 {
code {
        func find_missing_indexes(elements: list<int>, n: int) -> list<int>
    }
    tests {
        template nse {
            ([0, 1, 2, 3, 4, 5], 7) -> [6]
([0, 2, 3, 4, 5], 6) -> [1]
([3, 5, 7, 8], 10) -> [0, 1, 2, 4, 6, 9]
([0, 1, 2, 4, 5, 6, 7], 8) -> [3]
([0, 2, 4, 6, 8], 10) -> [1, 3, 5, 7, 9]
        }
    }
}

problem Generated/2948 {
code {
        func list_of_indices(elements: list<int>, target: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([1, 2, 3, 2, 5], 2) -> [1, 3]
([1, 2, 3, 4, 5], 6) -> []
([2, 4, 6, 8, 10], 8) -> [3]
([-1, 0, 1, 2, 3], -1) -> [0]
        }
    }
}

problem Generated/2949 {
code {
        func all_indices_of_element(elements: list<int>, element: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 4, 2, 5], 2) -> [1, 3, 5]
([1, 2, 3, 4, 5], 6) -> []
([], 2) -> []
([2, 2, 2, 2, 2], 2) -> [0, 1, 2, 3, 4]
([1, 2, 3, 2, 4, 2, 5], 5) -> [6]
        }
    }
}

problem Generated/2950 {
code {
        func find_indexes_of_elements(elements: list<int>, target_element: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6], 3) -> [2]
([1, 2, 3, 4, 5, 6], 7) -> []
([1, 2, 3, 3, 4, 3, 5], 3) -> [2, 3, 5]
([1, 1, 1, 1], 1) -> [0, 1, 2, 3]
([], 3) -> []
        }
    }
}

problem Generated/2951 {
code {
        func find_indexes_of_multi_occurence(elements: list<string>, target: string) -> list<int>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "apple", "banana", "apple"], "apple") -> [0, 3, 5]
(["apple", "banana", "cherry", "apple", "banana", "apple"], "banana") -> [1, 4]
(["apple", "banana", "cherry", "apple", "banana", "apple"], "cherry") -> []
([], "grape") -> []
(["apple", "banana", "cherry"], "orange") -> []
        }
    }
}

problem Generated/2952 {
code {
        func find_index_of_sublist(lst: list<int>, sub_lst: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [2, 3, 4]) -> 1
([1, 2, 3, 4, 5, 6], [3, 4]) -> 2
([1, 2, 3, 4, 5], [6]) -> -1
([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]) -> -1
([1, 2, 3, 4, 5], [1]) -> 0
        }
    }
}

problem Generated/2953 {
code {
        func get_index_of_nearest(numbers: list<int>, target: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> 1
([1, 2, 3, 4, 5], 0) -> 0
([1, 2, 3, 4, 5], 6) -> 4
([1, 3, 5, 7, 9], 6) -> 2
([1, 3, 5, 7, 9], 10) -> 4
        }
    }
}

problem Generated/2954 {
code {
        func find_closest_number_index(numbers: list<double>, target: double) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 3.7) -> 3
([1.0, 2.0, 3.0, 4.0, 5.0], 2.4) -> 1
([1.0, 2.0, 3.0, 4.0, 5.0], 0.5) -> 0
([1.0, 2.0, 3.0, 4.0, 5.0], 5.5) -> 4
([1.0, 2.0, 3.0, 4.0, 5.0], 3.5) -> 2
        }
    }
}

problem Generated/2955 {
code {
        func sum_indexes_of_element(elements: list<int>, target: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 2
([7, 3, 5, 9, 6], 6) -> 4
([1, 7, 4, 9, 5], 8) -> 0
([1, 7, 4, 9, 5], 10) -> 0
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> 4
        }
    }
}

problem Generated/2956 {
code {
        func sum_up_to_index(elements: list<double>, idx: int) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2) -> 6.0
([1.0, 2.0, 3.0, 4.0, 5.0], 5) -> 15.0
([1.0, 2.0, 3.0, 4.0, 5.0], 10) -> 15.0
([1.0, 2.0, 3.0, 4.0, 5.0], -1) -> 1.0
([], 0) -> 0.0
        }
    }
}

problem Generated/2957 {
code {
        func get_max_element_idx(elements: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 4
([1.0, 7.0, 4.0, 9.0, 5.0]) -> 3
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 0
([0.0, 0.0, 0.0, 0.0, 0.0]) -> 0
([1.0, -2.0, 3.0, -4.0, 5.0]) -> 4
        }
    }
}

problem Generated/2958 {
code {
        func get_index_of_max(numbers: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 4
([7.0, 3.0, 5.0, 9.0, 6.0]) -> 3
([1.0, 7.0, 4.0, 9.0, 5.0]) -> 3
([1.0, 7.0, 4.0, 9.0, 5.0, 9.0]) -> 3
([1.0, 2.0, 3.0, 3.0, 3.0, 4.0, 5.0]) -> 6
        }
    }
}

problem Generated/2959 {
code {
        func get_second_highest(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([7, 3, 5, 9, 6]) -> 7
([1, 1, 1, 1, 1]) -> 1
([1, 7, 4, 9, 5]) -> 7
([1, 2, 3, 4, 5, 6, 7, 8]) -> 7
        }
    }
}

problem Generated/2960 {
code {
        func find_max_index(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([7, 3, 5, 9, 6]) -> 3
([1, 7, 4, 9, 5]) -> 3
([1, 7, 4, 9, 9]) -> 3
([1, 2, 3, 4, 5, 6, 7, 8]) -> 7
        }
    }
}

problem Generated/2961 {
code {
        func get_max_index(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([7, 3, 5, 9, 6]) -> 3
([1, 7, 4, 9, 5]) -> 3
([1, 7]) -> 1
([1]) -> 0
        }
    }
}

problem Generated/2962 {
code {
        func find_min_index(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 0
([7, 3, 5, 9, 6]) -> 1
([1, 7, 4, 9, 5]) -> 0
([1, 7, 4, 9, 5, 1, 9, 1]) -> 0
([1, 2, 3, 4, 5, 6, 7, 8]) -> 0
        }
    }
}

problem Generated/2963 {
code {
        func get_min_index(elements: list<int>, target: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 2
([1, 2, 3, 4, 5], 6) -> -1
([], 1) -> -1
([1, 1, 1, 1, 1], 1) -> 0
([2, 5, 4, 3, 1], 1) -> 4
        }
    }
}

problem Generated/2964 {
code {
        func find_min_index(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 0
([7, 3, 5, 9, 6]) -> 1
([1, 7, 4, 9, 5]) -> 0
([1, 7, 4, 9, 5, 1]) -> 0
([1, 2, 3, 4, 5, 6, 7, 8]) -> 0
        }
    }
}

problem Generated/2965 {
code {
        func get_min_index(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 0
([7, 3, 5, 9, 6]) -> 1
([1, 7, 4, 9, 5]) -> 0
([1, 7, 4, 9, 5, 1]) -> 0
([1, 2, 3, 4, 5, 6, 7, 8]) -> 0
        }
    }
}

problem Generated/2966 {
code {
        func find_min_index_of_element(elements: list<int>, element: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 2
([7, 3, 5, 9, 6], 11) -> -1
([1, 7, 4, 9, 5], 7) -> 1
([1, 7, 4, 9, 5], 0) -> -1
([1, 2, 3, 4, 5, 3, 7, 8], 3) -> 2
        }
    }
}

problem Generated/2967 {
code {
        func find_min_element_index(elements: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 0
([5.0, 4.0, 3.0, 2.0, 1.0]) -> 4
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 4
([1.0, 1.0, 1.0, 1.0, 1.0]) -> 0
([5.0]) -> 0
        }
    }
}

problem Generated/2968 {
code {
        func get_indexes_of_common_elements(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) -> [3, 4]
([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) -> []
([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) -> [0, 1, 2, 3, 4]
([5, 4, 3, 2, 1], [1, 2, 3, 4, 5]) -> [0, 1, 2, 3, 4]
([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) -> [0, 1, 2, 3, 4]
        }
    }
}

problem Generated/2969 {
code {
        func find_indices(original: list<string>, subset: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "grape", "kiwi"], ["banana", "grape"]) -> [1, 3]
(["cat", "dog", "fish", "bird"], ["cat", "dog", "fish", "bird"]) -> [0, 1, 2, 3]
(["apple", "banana", "orange", "grape", "kiwi"], ["pear", "mango"]) -> []
(["hello", "world", "python"], ["world"]) -> [1]
([], ["pear", "mango"]) -> []
        }
    }
}

problem Generated/2970 {
code {
        func find_common_indices(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [0, 6, 3, 9, 5]) -> [2, 4]
([7, 3, 5, 9, 6], [0, 2, -3, 4, 0]) -> []
([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) -> [0, 1, 2, 3, 4]
([1, 7, 4, 9, 5], [1, 7, 4, 9, 5]) -> [0, 1, 2, 3, 4]
([], []) -> []
        }
    }
}

problem Generated/2971 {
code {
        func index_of_each_element(elements: list<int>, target: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([1, 2, 3, 4, 5], 6) -> []
([1, 2, 3, 4, 5, 3], 3) -> [2, 5]
([8, 9, 7, 9, 8, 9, 7], 9) -> [1, 3, 5]
([1, 2, 3, 4, 5, 5, 5], 5) -> [4, 5, 6]
        }
    }
}

problem Generated/2972 {
code {
        func find_indices(elements: list<int>, target: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([7, 3, 5, 9, 6], 6) -> [4]
([1, 7, 4, 9, 5], 8) -> []
([1, 7, 4, 9, 5], 1) -> [0]
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> [4]
        }
    }
}

problem Generated/2973 {
code {
        func find_indices_of_element(elements: list<int>, el: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([1, 2, 3, 4, 5], 6) -> []
([1, 2, 3, 3, 5], 3) -> [2, 3]
([1, 1, 1, 1, 1], 1) -> [0, 1, 2, 3, 4]
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> [7]
        }
    }
}

problem Generated/2974 {
code {
        func first_index_of_duplicate_element(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 3, 7, 8, 9]) -> 5
([1, 2, 3, 4, 5]) -> -1
([1, 1, 2, 3, 5]) -> 1
([1, -1, 2, -3, 5]) -> -1
([3, 2, 1, 3, 4]) -> 3
        }
    }
}

problem Generated/2975 {
code {
        func get_index_of_element(elements: list<int>, target: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([7, 3, 5, 9, 6], 5) -> [2]
([1, 7, 4, 9, 5], 2) -> []
([1, 7, 2, 9, 2], 2) -> [2, 4]
([1, 2, 3, 4, 5, 6, 7, 8], 1) -> [0]
        }
    }
}

problem Generated/2976 {
code {
        func get_indices_of_element(elements: list<int>, ele: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([7, 3, 5, 3, 6], 3) -> [1, 3]
([1, 7, 4, 9, 5], 6) -> []
([1, 7, 4, 9, 5], 1) -> [0]
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> [4]
        }
    }
}

problem Generated/2977 {
code {
        func find_index_of_odd_numbers(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [0, 2, 4]
([7, 3, 5, 9, 6]) -> [0, 1, 2, 3]
([1, 7, 4, 9, 5]) -> [0, 1, 3, 4]
([1, 7, 4, 9, 5, 6]) -> [0, 1, 3, 4]
([2, 4, 6, 8]) -> []
        }
    }
}

problem Generated/2978 {
code {
        func find_index_of_elements(elements: list<int>, target_elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [3, 4, 5]) -> [2, 3, 4]
([1, 2, 3, 4, 5], [6, 7, 8]) -> []
([5, 4, 3, 2, 1], [1, 3, 5]) -> [0, 2, 4]
([1, 2, 3, 4, 5], []) -> []
([1, 2, 3, 4, 5], [2, 2, 4, 5]) -> [1, 3, 4]
        }
    }
}

problem Generated/2979 {
code {
        func get_indices_of_element(elements: list<int>, element: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 4, 5, 2], 2) -> [1, 3, 6]
([1, 2, 3, 4, 5], 6) -> []
([1, 1, 1, 1, 1], 1) -> [0, 1, 2, 3, 4]
([1, 2, 3, 4, 5], 5) -> [4]
([1, 2, 3, 4, 2, 5, 2], 2) -> [1, 4, 6]
        }
    }
}

problem Generated/2980 {
code {
        func get_indices_filtered_by_element(elements: list<int>, filter_element: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 1, 4, 5], 1) -> [0, 3]
([7, 3, 5, 9, 6], 4) -> []
([1, 7, 4, 9, 5], 5) -> [4]
([1, 7, 4, 9, 5], 10) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 3) -> [2]
        }
    }
}

problem Generated/2981 {
code {
        func find_indexes_of_element(elements: list<int>, value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([7, 3, 5, 9, 6], 7) -> [0]
([1, 7, 4, 9, 5], 2) -> []
([1, 7, 4, 9, 5], 9) -> [3]
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> [4]
        }
    }
}

problem Generated/2982 {
code {
        func find_indexes_of_elems_in_list(elements: list<int>, target_elems: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 4, 5, 2], [2]) -> [1, 3, 6]
([1, 2, 3, 2, 4, 5, 2], [1, 3, 5]) -> [0, 2, 5]
([7, 8, 9, 1, 2, 3, 4], [9, 1, 4]) -> [2, 3, 6]
([7, 8, 9, 1, 2, 3, 4], [6, 5, 4]) -> [6]
([], [1, 2, 3]) -> []
        }
    }
}

problem Generated/2983 {
code {
        func filter_list_based_on_index(elements: list<int>, indexes: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [0, 2, 4]) -> [1, 3, 5]
([7, 3, 5, 9, 6], [1, 3]) -> [3, 9]
([1, 7, 4, 9, 5], [0, 1, 2, 3, 4]) -> [1, 7, 4, 9, 5]
([1, 7, 4, 9, 5], []) -> []
([1, 2, 3, 4, 5, 6, 7, 8], [0, 3, 6, 7]) -> [1, 4, 7, 8]
        }
    }
}

problem Generated/2984 {
code {
        func get_indexes_of_value(elements: list<int>, value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([7, 3, 5, 9, 6], 7) -> [0]
([1, 7, 4, 9, 5], 5) -> [4]
([1, 7, 4, 9, 5], 10) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> [7]
        }
    }
}

problem Generated/2985 {
code {
        func find_indexes_of_element(elements: list<int>, target: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 3, 2, 1], 1) -> [0, 6]
([7, 2, 5, 2, -1, 2, 7], 2) -> [1, 3, 5]
([1, 2, 3, 4, 5], 6) -> []
([], 1) -> []
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) -> [4]
        }
    }
}

problem Generated/2986 {
code {
        func string_to_ascii(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("python") -> [112, 121, 116, 104, 111, 110]
("good morning!") -> [103, 111, 111, 100, 32, 109, 111, 114, 110, 105, 110, 103, 33]
("") -> []
("01234") -> [48, 49, 50, 51, 52]
        }
    }
}

problem Generated/2987 {
code {
        func check_indexes_presence_in_list(elements: list<int>, indexes: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [0, 2, 4]) -> true
([1, 2, 3, 4, 5], [0, 2, 6]) -> false
([1, 2, 3, 4, 5], []) -> true
([], [0, 1, 2]) -> false
([1, 2, 3, 4, 5], [4, 3, 2, 1, 0]) -> true
        }
    }
}

problem Generated/2988 {
code {
        func all_index_of_element(elements: list<int>, num: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 1) -> [0]
([1, 2, 3, 4, 5], 6) -> []
([1, 2, 3, 1, 1], 1) -> [0, 3, 4]
([1, 2, 3, 2, 1, 2], 2) -> [1, 3, 5]
([7, 7, 7, 7, 7, 7], 7) -> [0, 1, 2, 3, 4, 5]
        }
    }
}

problem Generated/2989 {
code {
        func binary_index_of_element(elements: list<int>, element: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 2
([1, 2, 3, 4, 5], 6) -> -1
([1, 3, 5, 7, 9], 7) -> 3
([1, 3, 5, 7, 9], 2) -> -1
([10, 20, 30, 40, 50], 20) -> 1
        }
    }
}

problem Generated/2990 {
code {
        func find_element_index(elements: list<int>, x: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 1) -> [0]
([1, 2, 3, 4, 5], 6) -> [-1]
([1, 2, 3, 8, 9], 8) -> [3]
([1, 2, 3, 8, 9], 2) -> [1]
([1, 7, 4, 9, 5], 5) -> [4]
        }
    }
}

problem Generated/2991 {
code {
        func get_indexes_as_string(elements: list<string>, s: string) -> string
    }
    tests {
        template nse {
            (["a", "b", "c", "d", "e", "f"], "c") -> "2"
(["a", "b", "c", "c", "d", "c", "e", "f"], "c") -> "2,3,5"
(["a", "b", "c", "d", "e", "f"], "z") -> ""
(["a", "a", "a", "a", "a"], "a") -> "0,1,2,3,4"
(["a", "b", "c", "d", "e", "f"], " ") -> ""
        }
    }
}

problem Generated/2992 {
code {
        func string_from_list(items: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "kiwi", "orange"], ", ") -> "0: apple, 1: banana, 2: kiwi, 3: orange"
(["dog", "cat", "parrot", "hamster"], " | ") -> "0: dog | 1: cat | 2: parrot | 3: hamster"
([], ", ") -> ""
(["red"], ", ") -> "0: red"
(["apple", "banana", "kiwi", "orange"], "") -> "0: apple1: banana2: kiwi3: orange"
        }
    }
}

problem Generated/2993 {
code {
        func join_strings_by_list(elements: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "hello", "python"], ", ") -> "hello, world, python"
(["a", "b", "c", "d", "e", "b", "d", "e"], "-") -> "a-b-c-d-e"
(["apple", "banana", "orange", "kiwi", "orange"], "") -> "applebananaorangekiwi"
(["hello"], " ") -> "hello"
([], ";") -> ""
        }
    }
}

problem Generated/2994 {
code {
        func find_index_of_string_in_list(strs: list<string>, target: string) -> list<int>
    }
    tests {
        template nse {
            (["Apple", "Banana", "Cat", "Duck"], "apple") -> [0]
(["Apple", "Banana", "Cat", "Duck"], "Cat") -> [2]
(["Apple", "Banana", "Cat", "Duck"], "dog") -> []
([], "hello") -> []
(["AB", "CD", "EF", "AB"], "ab") -> [0]
        }
    }
}

problem Generated/2995 {
code {
        func get_index_of_string(words: list<string>, search_word: string) -> list<int>
    }
    tests {
        template nse {
            (["apple", "Banana", "orange", "pineapple", "Banana"], "banana") -> [1, 4]
(["apple", "Banana", "orange", "pineapple", "Banana"], "pineApple") -> [3]
(["apple", "Banana", "orange", "pineapple", "Banana"], "grapes") -> []
([], "apple") -> []
(["apple", "Banana", "orange", "pineapple", "Banana"], "") -> []
        }
    }
}

problem Generated/2996 {
code {
        func find_index_of_string(strs: list<string>, search_s: string) -> list<int>
    }
    tests {
        template nse {
            (["apple", "Banana", "CArrot", "dog", "Elephant"], "apple") -> [0]
(["apple", "Banana", "CArrot", "dog", "Elephant"], "banana") -> [1]
(["apple", "Banana", "CArrot", "dog", "Elephant"], "Elephant") -> [4]
([], "apple") -> []
(["apple", "Banana", "CArrot", "dog", "Elephant"], "cat") -> []
        }
    }
}

problem Generated/2997 {
code {
        func find_index_of_string(strs: list<string>, target: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "grape"], "Banana") -> 1
(["apple", "banana", "orange", "grape"], "watermelon") -> -1
(["Apple", "Banana", "Banana", "orange"], "banana") -> 1
([], "anything") -> -1
(["apple", "banana", "orange", "grape"], "") -> -1
        }
    }
}

problem Generated/2998 {
code {
        func find_index_of_elements(elements: list<string>, search_elem: string) -> list<int>
    }
    tests {
        template nse {
            (["apple", "banana", "Orange", "banana", "kiwi"], "banana") -> [1, 3]
(["apple", "banana", "Orange", "banana", "kiwi"], "KIWI") -> [4]
(["apple", "banana", "Orange", "banana", "kiwi"], "grapes") -> []
(["apple", "banana", "orange", "banana", "kiwi"], "Orange") -> [2]
([], "apple") -> []
        }
    }
}

problem Generated/2999 {
code {
        func find_index_of_string_in_list(strs: list<string>, target: string) -> list<int>
    }
    tests {
        template nse {
            (["apple", "banana", "APple", "orange", "GRAPE"], "Apple") -> [0, 2]
([], "apple") -> []
(["apple", "banana", "APple", "orange", "GRAPE"], "") -> []
(["apple", "banana", "APple", "orange", "GRAPE"], "watermelon") -> []
(["apple", "banana", "APple", "orange", "GRAPE"], "banana") -> [1]
        }
    }
}

problem Generated/3000 {
code {
        func find_indices_of_string(strs: list<string>, target: string) -> list<int>
    }
    tests {
        template nse {
            (["hello", "WORLD", "HeLlO", "world"], "hello") -> [0, 2]
(["apple", "banana", "mango", "orange"], "banana") -> [1]
(["cat", "dog", "elephant", "DOG"], "dog") -> [1, 3]
(["apple", "banana", "mango", "orange"], "grape") -> []
(["apple", "banana", "mango", "orange"], "") -> []
        }
    }
}

problem Generated/3001 {
code {
        func get_indexes_of_str(strs: list<string>, target: string) -> list<int>
    }
    tests {
        template nse {
            (["hello", "world", "python", "HELLO", "java"], "hello") -> [0, 3]
(["hello", "world", "python", "HELLO", "java"], "python") -> [2]
(["hello", "world", "python", "HELLO", "java"], "JAVA") -> [4]
(["hello", "world", "python", "HELLO", "java"], "golang") -> []
([], "python") -> []
        }
    }
}

problem Generated/3002 {
code {
        func find_index_of_first_lower_string_element(elements: list<string>) -> int
    }
    tests {
        template nse {
            (["Hello", "world", "how", "are", "you"]) -> 1
(["HELLO", "WORLD", "HOW", "ARE", "YOU"]) -> -1
(["HELLO", "world", "HOW", "are", "you"]) -> 1
(["hello", "world"]) -> 0
([]) -> -1
        }
    }
}

problem Generated/3003 {
code {
        func first_lowercase_string_index(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["Hello", "world", "this", "is", "a", "test"]) -> 1
(["HELLO", "World", "this", "is", "a", "TEST"]) -> 2
(["ALL", "CAPITAL", "LETTERS"]) -> -1
(["all", "lowercase", "letters"]) -> 0
([]) -> -1
        }
    }
}

problem Generated/3004 {
code {
        func find_uppercase_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["APPLE", "orange", "Banana", "PEAR"]) -> ["APPLE", "PEAR"]
(["APple", "orAnge", "bananA", "peAr"]) -> []
(["APPLE", "ORANGE", "BANANA", "PEAR"]) -> ["APPLE", "ORANGE", "BANANA", "PEAR"]
(["apple", "orange", "banana", "pear"]) -> []
(["A", "B", "C"]) -> ["A", "B", "C"]
        }
    }
}

problem Generated/3005 {
code {
        func get_indexes_of_alpha_strings(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["hello", "world", "123", "4", "a", "b", "c"]) -> [0, 1, 4, 5, 6]
(["abc", "def", "ghi", "jkl", "mno", "pqr", "stu"]) -> [0, 1, 2, 3, 4, 5, 6]
(["123", "456", "789", "abc", "def", "ghi", "jkl"]) -> [3, 4, 5, 6]
(["!@#", "$%^", "&*(", "abc", "def", "ghi", "jkl"]) -> [3, 4, 5, 6]
(["", "", "", "", ""]) -> []
        }
    }
}

problem Generated/3006 {
code {
        func find_indexes_of_alpha_strings(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["hello", "world", "123", "abc"]) -> [0, 1, 3]
(["1", "2", "3", "4"]) -> []
(["Hello", "world", "this", "is", "a", "test"]) -> [0, 1, 2, 3, 4, 5]
(["test", "with", "spaces"]) -> [0, 1, 2]
(["a", "b", "c", "", "d", "e", "f"]) -> [0, 1, 2, 4, 5, 6]
        }
    }
}

problem Generated/3007 {
code {
        func get_indexes_of_alpha_strings(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["hello", "world", "123", "456", "78"]) -> [0, 1]
(["hello", "world", "", "456", "78"]) -> [0, 1]
(["hello", "world", "!", "456", "78"]) -> [0, 1]
(["", "!", " "]) -> []
(["abc", "def", "ghi"]) -> [0, 1, 2]
        }
    }
}

problem Generated/3008 {
code {
        func find_alpha_string_index(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["abc", "def", "12", "klm", "34", "xyz"]) -> [0, 1, 3, 5]
(["abc", "", "def", "", "klm", "xyz"]) -> [0, 2, 4, 5]
(["123", "456", "", "789", "0"]) -> []
([]) -> []
(["a", "b", "c"]) -> [0, 1, 2]
        }
    }
}

problem Generated/3009 {
code {
        func get_index_of_alpha(elements: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["a", "b", "c", "d", "e"]) -> [0, 1, 2, 3, 4]
(["a", "1", "b", "2", "c"]) -> [0, 2, 4]
(["1", "2", "3", "4", "5"]) -> []
([]) -> []
(["1", "a", "2", "b", "3", "c"]) -> [1, 3, 5]
        }
    }
}

problem Generated/3010 {
code {
        func get_indexes_of_digit_strings(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"]) -> [0, 1, 2, 3, 4]
(["1", "test", "2", "hello", "3"]) -> [0, 2, 4]
(["a", "b", "c", "d", "e"]) -> []
([]) -> []
(["1", "2", "three", "4", "five"]) -> [0, 1, 3]
        }
    }
}

problem Generated/3011 {
code {
        func get_index_of_first_digit_string(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["hello", "world", "123", "456"]) -> 2
(["hello", "world", "abcd", "efgh"]) -> -1
(["123", "45", "678", "9"]) -> 0
(["", "1", "2", "3"]) -> 1
(["123", "45", "678", "9a"]) -> 0
        }
    }
}

problem Generated/3012 {
code {
        func find_indexes_of_digit_elements(items: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"]) -> [0, 1, 2, 3, 4]
(["1", "a", "3", "b", "5"]) -> [0, 2, 4]
(["abc", "def", "efg", "hij", "klm"]) -> []
([]) -> []
(["12", "432", "56", "889", "1"]) -> [0, 1, 2, 3, 4]
        }
    }
}

problem Generated/3013 {
code {
        func find_indices_of_digits(elements: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["a", "b", "c", "1", "2", "3"]) -> [3, 4, 5]
(["id", "name", "age", "gender", "phone"]) -> []
(["python", "programming", "2021"]) -> [2]
([]) -> []
(["1", "2", "3", "4", "5"]) -> [0, 1, 2, 3, 4]
        }
    }
}

problem Generated/3014 {
code {
        func get_index_of_digit_str(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["hello", "world", "123", "4", "5"]) -> [2, 3, 4]
(["1", "2", "3", "4", "5"]) -> [0, 1, 2, 3, 4]
(["hello", "world"]) -> []
(["hello", "123", "world"]) -> [1]
(["1", "hello", "2", "world", "3"]) -> [0, 2, 4]
        }
    }
}

problem Generated/3015 {
code {
        func find_indexes_of_strings(strs: list<string>, pre: string) -> list<int>
    }
    tests {
        template nse {
            (["hello", "world", "python", "is", "amazing"], "h") -> [0]
(["hello", "world", "python", "is", "amazing"], "w") -> [1]
(["hello", "world", "python", "is", "amazing"], "p") -> [2]
(["hello", "world", "python", "is", "amazing"], "a") -> [4]
(["hello", "world", "python", "is", "amazing"], "x") -> []
        }
    }
}

problem Generated/3016 {
code {
        func find_indexes_of_strings(strs: list<string>, pre: string) -> list<int>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> [0]
(["apple", "banana", "cherry", "date"], "b") -> [1]
(["apple", "banana", "cherry", "date"], "c") -> [2]
(["apple", "banana", "cherry", "date"], "d") -> [3]
(["apple", "banana", "cherry", "date"], "e") -> []
        }
    }
}

problem Generated/3017 {
code {
        func find_indexes_of_str(strs: list<string>, pre: string) -> list<int>
    }
    tests {
        template nse {
            (["hello", "hey", "hi", "holla"], "h") -> [0, 1, 2, 3]
(["hello", "hey", "hi", "holla"], "he") -> [0, 1]
(["hello", "hey", "hi", "holla"], "hi") -> [2]
(["hello", "hey", "hi", "holla"], "hey") -> [1]
(["hello", "hey", "hi", "holla"], "halo") -> []
        }
    }
}

problem Generated/3018 {
code {
        func find_strings_with_prefix(strs: list<string>, pre: string) -> list<int>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "orange", "pineapple"], "a") -> [0, 2]
(["apple", "banana", "apricot", "orange", "pineapple"], "p") -> [4]
(["apple", "banana", "apricot", "orange", "pineapple"], "x") -> []
(["apple", "banana", "apricot", "orange", "pineapple"], "ap") -> [0, 2]
([], "a") -> []
        }
    }
}

problem Generated/3019 {
code {
        func find_index_of_elements_starting_with_prefix(elements: list<string>, pre: string) -> list<int>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "pear", "pineapple"], "ap") -> [0, 2]
(["apple", "banana", "apricot", "pear", "pineapple"], "") -> [0, 1, 2, 3, 4]
(["apple", "banana", "apricot", "pear", "pineapple"], "pea") -> [3]
([], "test") -> []
(["test1", "test2", "test3", "test4"], "test") -> [0, 1, 2, 3]
        }
    }
}

problem Generated/3020 {
code {
        func replace_element_in_list(elements: list<string>, old: string, new_dat: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "banana", "orange"], "banana", "kiwi") -> ["apple", "kiwi", "cherry", "kiwi", "orange"]
(["apple", "banana", "cherry", "banana", "orange"], "grape", "pear") -> ["apple", "banana", "cherry", "banana", "orange"]
(["apple", "banana", "cherry", "banana", "orange"], "banana", "") -> ["apple", "", "cherry", "", "orange"]
([], "banana", "kiwi") -> []
(["banana", "banana", "banana", "banana", "banana"], "banana", "kiwi") -> ["kiwi", "kiwi", "kiwi", "kiwi", "kiwi"]
        }
    }
}

problem Generated/3021 {
code {
        func update_list_with_index(elements: list<int>) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 1, 4, 5, 1]) -> [[1], [2], [4], [5]]
([7, 3, 5, 9, 6, 7]) -> [[7], [3], [5], [9], [6]]
([1, 2, 3, 4, 5]) -> [[1], [2], [3], [4], [5]]
([]) -> []
([1, 1, 1, 1, 1, 1]) -> [[1]]
        }
    }
}

problem Generated/3022 {
code {
        func generate_index_list(elements: list<int>, target: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [2]
([1, 2, 3, 4, 5], 7) -> [-1]
([1, 7, 4, 9, 5], 5) -> [4]
([1, 7, 4, 9, 5], 1) -> [0]
([1, 2, 3, 4, 5, 6, 7, 8], 2) -> [1]
        }
    }
}

problem Generated/3023 {
code {
        func unique_elements_in_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 4, 3, 5, 6, 4]) -> [1, 2, 3, 4, 5, 6]
([5, 6, 7, 8, 9]) -> [5, 6, 7, 8, 9]
([1, 1, 1, 1, 1]) -> [1]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
        }
    }
}

problem Generated/3024 {
code {
        func get_sorted_indices(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([5, 2, 6, 1, 3, 9, 4]) -> [3, 1, 4, 6, 0, 2, 5]
([1, 3, 5, 7, 9]) -> [0, 1, 2, 3, 4]
([9, 7, 5, 3, 1]) -> [4, 3, 2, 1, 0]
([1, 2, 3, 4, 5]) -> [0, 1, 2, 3, 4]
([5, 4, 3, 2, 1]) -> [4, 3, 2, 1, 0]
        }
    }
}

problem Generated/3025 {
code {
        func reverse_index(elements: list<string>, s: string) -> list<int>
    }
    tests {
        template nse {
            (["apple", "banana", "kiwi", "apple", "orange"], "apple") -> [3, 0]
(["apple", "banana", "kiwi", "apple", "orange"], "orange") -> [4]
(["apple", "banana", "kiwi", "apple", "orange"], "mango") -> []
(["mango", "mango", "banana", "kiwi", "apple", "orange"], "mango") -> [1, 0]
(["apple", "banana", "kiwi", "apple", "orange"], "") -> []
        }
    }
}

problem Generated/3026 {
code {
        func remove_and_copy(elements: list<int>, target: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [1, 2, 4, 5]
([1, 2, 3], 0) -> [1, 2, 3]
([1, 2, 3], 2) -> [1, 3]
([2, 0, 1, 3], 2) -> [0, 1, 3]
([], 4) -> []
        }
    }
}

problem Generated/3027 {
code {
        func replace_list_element(elements: list<int>, old: int, new_dat: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2, 6) -> [1, 6, 3, 4, 5]
([1, 2, 3, 2, 5], 2, -1) -> [1, -1, 3, -1, 5]
([1, 2, 3, 2, 5], 6, -1) -> [1, 2, 3, 2, 5]
([1, 2, 3, 4, 5], 5, 10) -> [1, 2, 3, 4, 10]
([], 5, 6) -> []
        }
    }
}

problem Generated/3028 {
code {
        func replace_first_occurrence(elements: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 4], 2, 5) -> [1, 5, 3, 2, 4]
([1, 2, 3, 4, 5], 6, 7) -> [1, 2, 3, 4, 5]
([1, 2, 3], 1, 10) -> [10, 2, 3]
([1, 1, 2, 2, 3, 3], 3, 4) -> [1, 1, 2, 2, 4, 3]
([], 1, 2) -> []
        }
    }
}

problem Generated/3029 {
code {
        func replace_value_at_index(elements: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2, 7) -> [1, 7, 3, 4, 5]
([1, 2, 3, 4, 5], 6, 7) -> [1, 2, 3, 4, 5]
([1, 2, 2, 4, 2], 2, 7) -> [1, 7, 7, 4, 7]
([], 2, 7) -> []
([1, 1, 1, 1, 1], 1, 0) -> [0, 0, 0, 0, 0]
        }
    }
}

problem Generated/3030 {
code {
        func replace_first_occurrence(source_lst: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 10) -> [1, 2, 10, 4, 5]
([1, 2, 3, 4, 5], 6, 10) -> [1, 2, 3, 4, 5]
([1, 2, 3, 3, 5], 3, 10) -> [1, 2, 10, 3, 5]
([3], 3, 10) -> [10]
([], 3, 10) -> []
        }
    }
}

problem Generated/3031 {
code {
        func unique_indices(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 3, 2, 1]) -> [0, 1, 2, 3, 4]
([1, 1, 1, 1, 1, 1, 1]) -> [0]
([]) -> []
([1, 2, 2, 3, 1, 4, 5, 5, 4, 3]) -> [0, 1, 3, 5, 6]
([5, 4, 3, 2, 1]) -> [0, 1, 2, 3, 4]
        }
    }
}

problem Generated/3032 {
code {
        func unique_indices(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [0, 1, 2, 3, 4]
([1, 2, 3, 2, 5]) -> [0, 1, 2, 4]
([4, 4, 3, 2, 1]) -> [0, 2, 3, 4]
([]) -> []
([1]) -> [0]
        }
    }
}

problem Generated/3033 {
code {
        func find_max_value_index(elements: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 4
([7.0, 3.0, 5.0, 9.0, 6.0]) -> 3
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 0
([1.0, 9.0, 4.0, 9.0, 5.0]) -> 1
([1.0, 2.0, 3.0, 3.0, 2.0, 1.0]) -> 2
        }
    }
}

problem Generated/3034 {
code {
        func last_index_of_element(elements: list<int>, element: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> 1
([7, 3, 5, 9, 6], 6) -> 4
([1, 7, 4, 9, 5], 3) -> -1
([1, 7, 4, 9, 5], 5) -> 4
([1, 2, 3, 2, 5, 2], 2) -> 5
        }
    }
}

problem Generated/3035 {
code {
        func index_of_element(elements: list<int>, value: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 2
([7, 3, 5, 9, 6], 9) -> 3
([1, 7, 4, 9, 5], 10) -> -1
([1, 7, 4, 9, 5], 7) -> 1
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> 4
        }
    }
}

problem Generated/3036 {
code {
        func get_index_of_largest_element(elements: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 4
([1.0, 2.0, 3.0, 5.0, 5.0]) -> 3
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 0
([0.0, 0.0, 0.0, 0.0, 0.0]) -> 0
([1.5, 2.75, 3.0, 0.5, 5.0, 5.0]) -> 4
        }
    }
}

problem Generated/3037 {
code {
        func find_indices_of_elements(elements: list<string>, target: string) -> list<int>
    }
    tests {
        template nse {
            (["apple", "banana", "banana", "orange", "grape"], "banana") -> [1, 2]
(["apple", "banana", "banana", "orange", "grape"], "pear") -> []
(["apple", "banana", "pear", "pear", "banana", "grape"], "pear") -> [2, 3]
([], "apple") -> []
(["apple", "apple", "apple", "apple"], "apple") -> [0, 1, 2, 3]
        }
    }
}

problem Generated/3038 {
code {
        func get_last_index_of_value(elements: list<int>, value: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 3], 3) -> 5
([7, 3, 5, 9, 6], 1) -> -1
([1, 7, 4, 9, 5], 5) -> 4
([1, 7, 4, 9, 5], 7) -> 1
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> 3
        }
    }
}

problem Generated/3039 {
code {
        func find_element_in_list(elements: list<int>, value: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 2
([7, 3, 5, 9, 6], 4) -> 2
([1, 7, 4, 9, 5], 10) -> 2
([1, 7, 4, 9, 5], -1) -> 2
([1, 2, 3, 4, 5, 6, 7, 8], 9) -> 4
        }
    }
}

problem Generated/3040 {
code {
        func get_indices_of_sublist(lst: list<int>, sub: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4]) -> [1]
([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5]) -> [1]
([1, 2, 3, 4, 5, 6, 7, 8, 9], [5, 6, 7]) -> [4]
([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]) -> [0]
([1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 0, 0]) -> []
        }
    }
}

problem Generated/3041 {
code {
        func get_index_of_ceiling_element(elements: list<int>, target: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 2
([1, 2, 3, 4, 5], 6) -> 5
([1, 2, 3, 4, 5], 0) -> 0
([], 10) -> 0
([1, 3, 4, 4, 9], 5) -> 4
        }
    }
}

problem Generated/3042 {
code {
        func get_index_of_first_element_in_each_chunk(elements: list<int>, chunk_size: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [0, 3]
([1, 2, 3, 4, 5], 2) -> [0, 2, 4]
([1, 2, 3, 4, 5], 5) -> [0]
([1, 2, 3, 4, 5, 6, 7, 8], 3) -> [0, 3, 6]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [0, 4]
        }
    }
}

problem Generated/3043 {
code {
        func find_index_of_element(elements: list<int>, element: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 2
([7, 3, 5, 9, 6], 9) -> 3
([1, 7, 4, 9, 5], 8) -> -1
([1, 7, 4, 9, 5], 1) -> 0
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> 4
        }
    }
}

problem Generated/3044 {
code {
        func get_indexes_of_value(elements: list<int>, value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) -> [4]
([4, 5, 6, 7, 8, 9, 4], 4) -> [0, 6]
([2, 4, 6, 8], 1) -> []
([], 1) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> [7]
        }
    }
}

problem Generated/3045 {
code {
        func find_factor_pairs(n: int) -> list<list<int>>
    }
    tests {
        template nse {
            (12) -> [[1, 12], [2, 6], [3, 4]]
(10) -> [[1, 10], [2, 5]]
(21) -> [[1, 21], [3, 7]]
(17) -> [[1, 17]]
(100) -> [[1, 100], [2, 50], [4, 25], [5, 20], [10, 10]]
        }
    }
}

problem Generated/3046 {
code {
        func get_square_roots(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 4.0, 9.0, 16.0, 25.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([2.0, 3.0, 5.0, 7.0, 11.0]) -> [1.4142135623730951, 1.7320508075688772, 2.23606797749979, 2.6457513110645907, 3.3166247903554]
([16.0, 25.0, 36.0, 49.0, 64.0]) -> [4.0, 5.0, 6.0, 7.0, 8.0]
([1.0, 8.0, 27.0, 64.0, 125.0]) -> [1.0, 2.8284271247461903, 5.196152422706632, 8.0, 11.180339887498949]
([0.0, 1.0, 2.0, 3.0, 4.0]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772, 2.0]
        }
    }
}

problem Generated/3047 {
code {
        func find_power_of_element_in_list(elements: list<int>, power: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [0, 1, 4, 9, 16]
([1, 2, 3, 4, 5], 3) -> [0, 1, 8, 27, 64]
([1, 2, 3, 3, 2, 1], 2) -> [0, 1, 4, 4, 1, 0]
([1, 2, 3, 4], 1) -> [0, 1, 2, 3]
([2, 4, 6, 8, 10], 3) -> [0, 1, 8, 27, 64]
        }
    }
}

problem Generated/3048 {
code {
        func product_of_indices_of_val(elements: list<int>, value: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 2
([7, 3, 5, 9, 6], 4) -> -1
([1, 2, 3, 4, 5], 5) -> 4
([1, 7, 4, 9, 5], 1) -> 0
([1, 2, 3, 4, 5, 6, 7, 8], 9) -> -1
        }
    }
}

problem Generated/3049 {
code {
        func sum_of_indices(elements: list<string>, search_str: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "banana", "kiwi", "banana"], "banana") -> 9
(["apple", "banana", "orange", "banana", "kiwi", "banana"], "kiwi") -> 4
(["apple", "banana", "orange", "banana", "kiwi", "banana"], "watermelon") -> -1
([], "kiwi") -> -1
(["apple", "banana", "orange", "banana", "kiwi", "banana"], "") -> -1
        }
    }
}

problem Generated/3050 {
code {
        func find_word_locations(words: list<string>, word_to_find: string) -> list<int>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "apple", "date"], "apple") -> [0, 3]
(["apple", "banana", "cherry", "apple", "date"], "cherry") -> [2]
(["apple", "banana", "cherry", "apple", "date"], "mango") -> []
(["apple", "cherry", "cherry", "banana", "cherry"], "cherry") -> [1, 2, 4]
(["apple", "banana", "cherry", "apple", "date", "elderberry", "fig"], "fig") -> [6]
        }
    }
}

problem Generated/3051 {
code {
        func get_indices_of_word(sentence: string, word: string) -> list<int>
    }
    tests {
        template nse {
            ("Hello, how are you today?", "how") -> [1]
("Hello, how are you today?", "today") -> [4]
("Hello, how are you today?", "HELLO") -> []
("", "anything") -> []
("test test test test", "test") -> [0, 1, 2, 3]
        }
    }
}

problem Generated/3052 {
code {
        func reverse_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([1, 7, 4, 9, 5]) -> [5, 9, 4, 7, 1]
([]) -> []
([1]) -> [1]
        }
    }
}

problem Generated/3053 {
code {
        func reverse_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([]) -> []
([1, 7]) -> [7, 1]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/3054 {
code {
        func reverse_list_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1,2,3,4,5]) -> [5,4,3,2,1]
([7,3,5,9,6]) -> [6,9,5,3,7]
([]) -> []
([1]) -> [1]
([1,2,3,4,5,6,7,8,9,10]) -> [10,9,8,7,6,5,4,3,2,1]
        }
    }
}

problem Generated/3055 {
code {
        func reverse_list_items(items: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([]) -> []
([1]) -> [1]
([-1, 2, -3, 4, -5, 6]) -> [6, -5, 4, -3, 2, -1]
        }
    }
}

problem Generated/3056 {
code {
        func reverse_list_in_range(elements: list<int>, start: int, last: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 1, 3) -> [1, 4, 3, 2, 5]
([7, 3, 5, 9, 6], 0, 4) -> [6, 9, 5, 3, 7]
([1, 7, 4, 9, 5], 0, 4) -> [5, 9, 4, 7, 1]
([1, 7, 4, 9, 5], 0, 0) -> [1, 7, 4, 9, 5]
([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 7) -> [1, 2, 3, 8, 7, 6, 5, 4, 9]
        }
    }
}

problem Generated/3057 {
code {
        func reverse_list(num: int, elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            (5, [1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
(6, [1, 2, 3, 4, 5, 6]) -> [6, 5, 4, 3, 2, 1]
(3, [7, 8, 9]) -> [9, 8, 7]
(1, [0]) -> [0]
(0, []) -> []
        }
    }
}

problem Generated/3058 {
code {
        func reverse_list(n: int, elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            (5, [1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
(3, [3, 2, 1]) -> [1, 2, 3]
(6, [6, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5, 6]
(1, [99]) -> [99]
(0, []) -> []
        }
    }
}

problem Generated/3059 {
code {
        func reverse_list_range(elements: list<string>, start: int, last: int) -> list<string>
    }
    tests {
        template nse {
            (["a", "b", "c", "d", "e"], 1, 3) -> ["a", "d", "c", "b", "e"]
(["p", "q", "r", "s", "t"], 2, 4) -> ["p", "q", "t", "s", "r"]
(["x", "y", "z"], 0, 2) -> ["z", "y", "x"]
(["a", "b", "c"], 0, 2) -> ["c", "b", "a"]
(["aa", "bb", "cc", "dd"], 1, 2) -> ["aa", "cc", "bb", "dd"]
        }
    }
}

problem Generated/3060 {
code {
        func reverse_string(s: string) -> string
    }
    tests {
        template nse {
            ("hello") -> "olleh"
("world") -> "dlrow"
("reverse") -> "esrever"
("") -> ""
("a") -> "a"
        }
    }
}

problem Generated/3061 {
code {
        func reverse_list_of_list(elements: list<list<string>>) -> list<list<string>>
    }
    tests {
        template nse {
            ([["a", "b", "c"], ["d", "e", "f"], ["g", "h", "i"]]) -> [["i", "h", "g"], ["f", "e", "d"], ["c", "b", "a"]]
([["a", "b", "c"], ["d", "e", "f"], ["g", "h", "i"], ["j", "k", "l"]]) -> [["l", "k", "j"], ["i", "h", "g"], ["f", "e", "d"], ["c", "b", "a"]]
([["a"], ["d"], ["g"]]) -> [["g"], ["d"], ["a"]]
([["a", "b"], ["c", "d"]]) -> [["d", "c"], ["b", "a"]]
([[], [], []]) -> [[], [], []]
        }
    }
}

problem Generated/3062 {
code {
        func reverse_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([2, 4, 6, 8, 10]) -> [10, 8, 6, 4, 2]
([11, 22, 33, 44, 55]) -> [55, 44, 33, 22, 11]
([]) -> []
([1]) -> [1]
        }
    }
}

problem Generated/3063 {
code {
        func reverse_list(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([-1.0, 2.0, -3.0, 4.0, -5.0]) -> [5.0, 4.0, 3.0, 2.0, 1.0]
([0.0, 2.0, -3.0, 4.0, -5.0]) -> [5.0, 4.0, 3.0, 2.0, 0.0]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [5.0, 4.0, 3.0, 2.0, 1.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [5.0, 4.0, 3.0, 2.0, 1.0]
([]) -> []
        }
    }
}

problem Generated/3064 {
code {
        func reverse_list_and_abs(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [5.0, 4.0, 3.0, 2.0, 1.0]
([-1.0, -2.0, 3.0, 4.0, -5.0]) -> [5.0, 4.0, 3.0, 2.0, 1.0]
([0.0, -2.0, 3.0, -4.0, 5.0]) -> [5.0, 4.0, 3.0, 2.0, 0.0]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [5.0, 4.0, 3.0, 2.0, 1.0]
([0.0, 0.0, 0.0, 0.0, 0.0]) -> [0.0, 0.0, 0.0, 0.0, 0.0]
        }
    }
}

problem Generated/3065 {
code {
        func reverse_int_list(lst: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([-1, -2, 3, 4, -5]) -> [5, 4, 3, 2, 1]
([1, -2, -3, 4, -5]) -> [5, 4, 3, 2, 1]
([0, 0, -3, 0, 5]) -> [5, 0, 3, 0, 0]
([-5, 0, 3, 0, 5]) -> [5, 0, 3, 0, 5]
([]) -> []
        }
    }
}

problem Generated/3066 {
code {
        func reverse_and_abs(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([-1, -2, 3, -4, 5]) -> [5, 4, 3, 2, 1]
([10, 20, 30, 40, 50]) -> [50, 40, 30, 20, 10]
([0, -5, -10, 15, 20]) -> [20, 15, 10, 5, 0]
([]) -> []
        }
    }
}

problem Generated/3067 {
code {
        func reverse_list_with_abs(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [5.0, 4.0, 3.0, 2.0, 1.0]
([-1.0, 2.0, -3.0, 4.0, -5.0]) -> [5.0, 4.0, 3.0, 2.0, 1.0]
([0.0, 2.0, 0.0, 4.0, 0.0]) -> [0.0, 4.0, 0.0, 2.0, 0.0]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [5.0, 4.0, 3.0, 2.0, 1.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [5.0, 4.0, 3.0, 2.0, 1.0]
        }
    }
}

problem Generated/3068 {
code {
        func reverse_and_sum(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([3, 6, 9, 12]) -> 30
([2, -5, 8, 11, 23]) -> 39
([1, 1, 1, 1, 1, 1, 1, 1, 1]) -> 9
([1, -1, 1, -1, 1, -1]) -> 0
        }
    }
}

problem Generated/3069 {
code {
        func reverse_sort(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [4, 3, 2, 1, 5]
([7, 3, 5, 9, 6]) -> [7, 6, 5, 3, 9]
([1, 7, 4, 9, 5]) -> [7, 5, 4, 1, 9]
([9, 8, 7, 6, 5, 4, 3, 2, 1]) -> [8, 7, 6, 5, 4, 3, 2, 1, 9]
([1, 2, 3, 4, 5, 6, 7, 8, 9]) -> [8, 7, 6, 5, 4, 3, 2, 1, 9]
        }
    }
}

problem Generated/3070 {
code {
        func reverse_max(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 4
([7, 3, 5, 9, 6, 9]) -> 7
([1, 7, 4, 9, 5]) -> 7
([1, 7, 4, 9, 5, 9]) -> 7
([1, 2, 3, 4, 5, 6, 7, 8]) -> 7
        }
    }
}

problem Generated/3071 {
code {
        func reverse_min_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1]
([7, 3, 5, 9, 6]) -> [3]
([1, 7, 4, 9, 5]) -> [1]
([1, 1, 2, 1, 3, 4, 5]) -> [1, 1, 1]
([-1, 0, 1, 0, -1]) -> [-1, -1]
        }
    }
}

problem Generated/3072 {
code {
        func reverse_sort_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [9, 7, 6, 5, 3]
([1, 7, 4, 9, 5]) -> [9, 7, 5, 4, 1]
([1, 7, 4, 9, 5, -6, 0]) -> [9, 7, 5, 4, 1, 0, -6]
([1]) -> [1]
        }
    }
}

problem Generated/3073 {
code {
        func reverse_min_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1]
([7, 3, 5, 9, 6, 3]) -> [3, 3]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [1]
([1, 7, 4, 9, 5, 1]) -> [1, 1]
([9, 8, 7, 6, 5, 4, 3, 2, 1]) -> [1]
        }
    }
}

problem Generated/3074 {
code {
        func reverse_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([]) -> []
([1, 7, 4, 9, 5]) -> [5, 9, 4, 7, 1]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/3075 {
code {
        func reverse_list_based_on_index(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([1, 7, 4, 9, 5]) -> [5, 9, 4, 7, 1]
([1]) -> [1]
([]) -> []
([1, 2, 3, 4, 5, 6, 7, 8]) -> [8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/3076 {
code {
        func reverse_list_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([1, 7, 4, 9, 5]) -> [5, 9, 4, 7, 1]
([1]) -> [1]
([]) -> []
([1, 2, 3, 4, 5, 6, 7, 8]) -> [8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/3077 {
code {
        func reverse_list_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([1, 1, 2, 3, 4, 4, 5, 5]) -> [5, 4, 3, 2, 1]
([1, 2, 2, 3, 3, 3]) -> [3, 2, 1]
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
        }
    }
}

problem Generated/3078 {
code {
        func filter_and_reverse_list(elements: list<int>, c: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [0, 2, -3, 4, 0]) -> [4, 2]
([7, 3, 5, 9, 6], [0, 2, -3, 4, 0]) -> [9, 3]
([1, 7, 4, 9, 5], [1, 2, 3, 4, 5]) -> [5, 9, 4, 7, 1]
([1, 7, 4, 9, 5], [-1, -2, -3, -4, -5]) -> []
([1, 2, 3, 4, 5, 6, 7, 8], [1, -1, -1, 1, 0, 0, 1, 1]) -> [8, 7, 4, 1]
        }
    }
}

problem Generated/3079 {
code {
        func reverse_and_filter_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [10, 8, 6, 4, 2]
([3, 5, 7, 9]) -> []
([2, 4, 6, 8, 10, 12]) -> [12, 10, 8, 6, 4, 2]
([1, 3, 4, 6, 8, 9]) -> [8, 6, 4]
([1, 2, 3, 4, 5, 6, 7]) -> [6, 4, 2]
        }
    }
}

problem Generated/3080 {
code {
        func reverse_sorted_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([-1, -2, -3, -4, -5]) -> []
([0, -2, 3, -4, 5]) -> [5, 3]
([1, 7, 4, 9, 5]) -> [9, 7, 5, 4, 1]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/3081 {
code {
        func reverse_sort_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
([2, 1, 3, 5, 4]) -> [5, 4, 3, 2, 1]
([1, 1, 1, 1, 1]) -> [1, 1, 1, 1, 1]
([]) -> []
        }
    }
}

problem Generated/3082 {
code {
        func sort_list_in_reverse_order(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([-1, 2, -3, 4, 0]) -> [4, 2, 0, -1, -3]
([7, 3, 5, 9, 6]) -> [9, 7, 6, 5, 3]
([]) -> []
([1]) -> [1]
        }
    }
}

problem Generated/3083 {
code {
        func reverse_sorted_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6, 2]) -> [9, 7, 6, 5, 3, 2]
([1, 7, 4, 9, 5]) -> [9, 7, 5, 4, 1]
([1, 7, 4, 9, 5, -2]) -> [9, 7, 5, 4, 1, -2]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/3084 {
code {
        func sort_list_and_reverse(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [9, 7, 6, 5, 3]
([1, 7, 4, 9, 5]) -> [9, 7, 5, 4, 1]
([1]) -> [1]
([]) -> []
([1, 5, 2, 9, 3]) -> [9, 5, 3, 2, 1]
        }
    }
}

problem Generated/3085 {
code {
        func reverse_sorted_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([5, 2, 1, 4, 3]) -> [5, 4, 3, 2, 1]
([2, 4, 6, 8, 10]) -> [10, 8, 6, 4, 2]
([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([]) -> []
([5]) -> [5]
        }
    }
}

problem Generated/3086 {
code {
        func sort_and_reverse_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 4, 2, 3, 5]) -> [5, 4, 3, 2, 1]
([1, 1, 1, 1, 1]) -> [1, 1, 1, 1, 1]
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
([2, 5, 4, 1, 3]) -> [5, 4, 3, 2, 1]
([]) -> []
        }
    }
}

problem Generated/3087 {
code {
        func sort_and_reverse_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
([1, -2, 3, -4, 5]) -> [5, 3, 1, -2, -4]
([-1, 0, 1, -1, 0, 1]) -> [1, 1, 0, 0, -1, -1]
([11, 2, 13, 4, 5, -6, 7, 8]) -> [13, 11, 8, 7, 5, 4, 2, -6]
        }
    }
}

problem Generated/3088 {
code {
        func reverse_string(s: string) -> string
    }
    tests {
        template nse {
            ("hello") -> "olleh"
("reverse") -> "esrever"
("python") -> "nohtyp"
("") -> ""
("a") -> "a"
        }
    }
}

problem Generated/3089 {
code {
        func reverse_string_by_ascii(original: string) -> string
    }
    tests {
        template nse {
            ("hello") -> "olleh"
("world") -> "dlrow"
("") -> ""
("python") -> "nohtyp"
("reverse") -> "esrever"
        }
    }
}

problem Generated/3090 {
code {
        func reverse_word_order(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello world") -> "world Hello"
("The quick brown fox jumps over the lazy dog") -> "dog lazy the over jumps fox brown quick The"
("  Hello   world   ") -> "world Hello"
("") -> ""
("1 2 3 4") -> "4 3 2 1"
        }
    }
}

problem Generated/3091 {
code {
        func reverse_string(input_str: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "dlrow olleh"
("12345") -> "54321"
("abcde") -> "edcba"
("") -> ""
("A man a plan a canal Panama") -> "amanaP lanac a nalp a nam A"
        }
    }
}

problem Generated/3092 {
code {
        func is_list_palindrome(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1]) -> true
([1, 2, 3, 4, 5]) -> false
([1, 2, 3, 4, 3, 2, 1]) -> true
([1, 2, 3, 3, 2, 1]) -> true
([1, 2, 3, 4, 2, 1]) -> false
        }
    }
}

problem Generated/3093 {
code {
        func check_if_list_is_palindrome(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1]) -> true
([1, 2, 2, 1]) -> true
([1, 2, 3, 4, 5]) -> false
([]) -> true
([1]) -> true
        }
    }
}

problem Generated/3094 {
code {
        func is_list_palindrome(elements: list<string>) -> bool
    }
    tests {
        template nse {
            (["a", "b", "c", "b", "a"]) -> true
(["a", "b", "c", "c", "b", "a"]) -> true
(["a", "b", "c", "d", "e"]) -> false
(["a", "b", "c", "d"]) -> false
(["a"]) -> true
        }
    }
}

problem Generated/3095 {
code {
        func is_palindrome(elements: list<string>) -> bool
    }
    tests {
        template nse {
            (["a", "b", "c", "b", "a"]) -> true
(["h", "e", "l", "l", "o"]) -> false
(["r", "a", "c", "e", "c", "a", "r"]) -> true
(["m", "a", "d", "a", "m"]) -> true
(["p", "y", "t", "h", "o", "n"]) -> false
        }
    }
}

problem Generated/3096 {
code {
        func is_palindrome(elements: list<string>) -> bool
    }
    tests {
        template nse {
            (["a", "b", "c", "b", "a"]) -> true
(["a", "b", "c", "c", "b", "a"]) -> true
(["a", "b", "c", "d", "e"]) -> false
(["racecar"]) -> true
(["a"]) -> true
        }
    }
}

problem Generated/3097 {
code {
        func is_palindrome(elements: list<string>) -> bool
    }
    tests {
        template nse {
            (["a", "b", "c", "b", "a"]) -> true
(["a", "b", "d", "c", "b", "a"]) -> false
(["a", "b", "c", "c", "b", "a"]) -> true
(["a", "b", "a"]) -> true
(["a", "b"]) -> false
        }
    }
}

problem Generated/3098 {
code {
        func reverse_binary(num: int) -> int
    }
    tests {
        template nse {
            (10) -> 5
(32) -> 1
(54) -> 27
(100) -> 19
(255) -> 255
        }
    }
}

problem Generated/3099 {
code {
        func reverse_binary(num: int) -> int
    }
    tests {
        template nse {
            (10) -> 5
(0) -> 0
(1) -> 1
(100) -> 19
(256) -> 1
        }
    }
}

problem Generated/3100 {
code {
        func reverse_words_order(sentence: string) -> string
    }
    tests {
        template nse {
            ("I love coding with OpenAI") -> "OpenAI with coding love I"
("Have a nice day") -> "day nice a Have"
("This is a test") -> "test a is This"
("Hello World") -> "World Hello"
("OpenAI is awesome") -> "awesome is OpenAI"
        }
    }
}

problem Generated/3101 {
code {
        func reverse_words_in_sentence(sentence: string) -> string
    }
    tests {
        template nse {
            ("This is a test") -> "sihT si a tset"
("Hello world") -> "olleH dlrow"
("Python is awesome") -> "nohtyP si emosewa"
("Reverse words in a sentence") -> "esreveR sdrow ni a ecnetnes"
("  hello       world  ") -> "olleh dlrow"
        }
    }
}

problem Generated/3102 {
code {
        func reverse_words(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello world") -> "olleH dlrow"
("Reverse this sentence") -> "esreveR siht ecnetnes"
("abc def ghi") -> "cba fed ihg"
(" a b  c") -> "a b c"
("") -> ""
        }
    }
}

problem Generated/3103 {
code {
        func reverse_words_in_sentence(sentence: string) -> string
    }
    tests {
        template nse {
            ("The quick brown fox") -> "fox brown quick The"
("Hello world") -> "world Hello"
("Python is awesome") -> "awesome is Python"
("") -> ""
("   ") -> ""
        }
    }
}

problem Generated/3104 {
code {
        func reverse_words_order(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "World Hello"
("Python is fun to learn") -> "learn to fun is Python"
("I am a bot") -> "bot a am I"
("Python") -> "Python"
("  Hello  World  ") -> "World Hello"
        }
    }
}

problem Generated/3105 {
code {
        func reverse_words_in_sentence(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello world") -> "olleH dlrow"
("The quick brown fox jumps over the lazy dog") -> "ehT kciuq nworb xof spmuj revo eht yzal god"
("This is a test") -> "sihT si a tset"
("Python is awesome") -> "nohtyP si emosewa"
("Reverse me") -> "esreveR em"
        }
    }
}

problem Generated/3106 {
code {
        func reverse_words(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello world") -> "olleH dlrow"
("The quick brown fox") -> "ehT kciuq nworb xof"
("") -> ""
("This is a test") -> "sihT si a tset"
("   ") -> ""
        }
    }
}

problem Generated/3107 {
code {
        func reverse_word_order(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "World Hello"
("this is a sentence") -> "sentence a is this"
("") -> ""
("singleword") -> "singleword"
("  multiple   spaces  between  words   ") -> "words between spaces multiple"
        }
    }
}

problem Generated/3108 {
code {
        func reverse_join_strings(strs: list<string>, join_str: string) -> string
    }
    tests {
        template nse {
            (["Hello", "World", "Python", "Programming"], " ") -> "PROGRAMMING PYTHON WORLD HELLO"
(["Python", "Java", "C++"], "-") -> "C++-JAVA-PYTHON"
(["apple", "banana", "grape"], "") -> "GRAPEBANANAAPPLE"
([], "-") -> ""
(["Hello"], " ") -> "HELLO"
        }
    }
}

problem Generated/3109 {
code {
        func reverse_words_order(sentence: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "world hello"
("this is a test") -> "test a is this"
("only one word") -> "word one only"
("") -> ""
("   ") -> ""
        }
    }
}

problem Generated/3110 {
code {
        func reverse_join_strings(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry"], ",") -> "cherry,banana,apple"
(["Hello", "world", "!"], " ") -> "! world Hello"
(["a", "b", "c"], "") -> "cba"
(["Lorem", "ipsum", "dolor", "sit", "amet"], "-") -> "amet-sit-dolor-ipsum-Lorem"
(["1", "2", "3", "4"], "") -> "4321"
        }
    }
}

problem Generated/3111 {
code {
        func reverse_and_join_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python"], "") -> "ollehdlrownohtyp"
(["hello", "world", "python"], " ") -> "olleh dlrow nohtyp"
(["alice", "bob", "charlie"], ", ") -> "ecila, bob, eilrahc"
(["python", "go", "java"], "-") -> "nohtyp-og-avaj"
(["1", "22", "333", "4444"], " ") -> "1 22 333 4444"
        }
    }
}

problem Generated/3112 {
code {
        func reverse_join_str_list(strs: list<string>, join_str: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "this", "is", "openai"], " ") -> "openai is this world hello"
(["one", "two", "three"], ",") -> "three,two,one"
(["a", "b", "c", "d"], "") -> "dcba"
(["1", "2", "3", "4", "5"], ".") -> "5.4.3.2.1"
(["apple", "banana", "cherry", "date"], "+") -> "date+cherry+banana+apple"
        }
    }
}

problem Generated/3113 {
code {
        func reverse_words_in_sentence(sentence: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "olleh dlrow"
("this is a sentence") -> "siht si a ecnetnes"
("racecar is palindrome") -> "racecar si emordnilap"
("") -> ""
("   ") -> ""
        }
    }
}

problem Generated/3114 {
code {
        func reverse_words(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "olleH dlroW"
("This is a test") -> "sihT si a tset"
("Python is awesome") -> "nohtyP si emosewa"
("Reverse my words") -> "esreveR ym sdrow"
("") -> ""
        }
    }
}

problem Generated/3115 {
code {
        func reverse_alpha_strings(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "goodbye", "123"]) -> ["olleh", "dlrow", "eybdoog"]
(["Python", "is", "a", "nice", "programming", "language"]) -> ["nohtyP", "si", "a", "ecin", "gnimmargorp", "egaugnal"]
(["ab", "cd", "ef"]) -> ["ba", "dc", "fe"]
(["a", "b", "c"]) -> ["a", "b", "c"]
([]) -> []
        }
    }
}

problem Generated/3116 {
code {
        func reverse_order_of_numbers(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "10", "20", "30"]) -> ["30", "20", "10"]
(["123", "456", "789"]) -> ["789", "456", "123"]
(["Hello", "World", "!"]) -> []
(["1", "2", "3", "4", "5"]) -> ["5", "4", "3", "2", "1"]
(["1000", "23", "2", "200", "450"]) -> ["450", "200", "2", "23", "1000"]
        }
    }
}

problem Generated/3117 {
code {
        func reverse_string_digits(s: string) -> string
    }
    tests {
        template nse {
            ("abc123def") -> "abc321def"
("a1b2c3d4e") -> "a4b3c2d1e"
("123456789") -> "987654321"
("!@#$%^&*()") -> "!@#$%^&*()"
("") -> ""
        }
    }
}

problem Generated/3118 {
code {
        func reverse_string_starting_with_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "orange", "peach"], "ap") -> ["apricot", "apple"]
(["cat", "caterpillar", "dog", "doughnut"], "d") -> ["doughnut", "dog"]
(["apple", "banana", "apricot", "orange", "peach"], "x") -> []
(["hello", "world", "python", "is", "cool"], "p") -> ["python"]
(["a", "b", "c", "d", "e", "f"], "") -> ["f", "e", "d", "c", "b", "a"]
        }
    }
}

problem Generated/3119 {
code {
        func reverse_and_filter_string_list(string_lst: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hi", "hey", "bye"], "h") -> ["hey", "hi", "hello"]
(["apple", "banana", "orange", "peach"], "p") -> ["peach"]
(["alpha", "bravo", "charlie", "delta"], "z") -> []
([], "t") -> []
(["hello", "world", "hi", "hey", "bye"], "") -> ["bye", "hey", "hi", "world", "hello"]
        }
    }
}

problem Generated/3120 {
code {
        func reverse_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "orange"], "a") -> ["apricot", "apple"]
(["apple", "banana", "apricot", "orange"], "b") -> ["banana"]
(["apple", "banana", "apricot", "orange"], "o") -> ["orange"]
(["apple", "banana", "apricot", "orange"], "") -> ["orange", "apricot", "banana", "apple"]
([], "a") -> []
        }
    }
}

problem Generated/3121 {
code {
        func reverse_and_append(elements: list<int>, new_element: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 6) -> [5, 4, 3, 2, 1, 6]
([], 1) -> [1]
([0, 0, 0, 0, 0], 1) -> [0, 0, 0, 0, 0, 1]
([1, 2, 3, 4], 7) -> [4, 3, 2, 1, 7]
([1], 2) -> [1, 2]
        }
    }
}

problem Generated/3122 {
code {
        func reverse_and_append_list(elements: list<int>, n: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], 4) -> [4, 3, 2, 1]
([-2, 0, 1, 5], -9) -> [-9, 5, 1, 0, -2]
([0, 0, 0], 1) -> [1, 0, 0, 0]
([], 5) -> [5]
([-1, 2, 0, -3], 1) -> [1, -3, 0, 2, -1]
        }
    }
}

problem Generated/3123 {
code {
        func sort_and_reverse_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([3, 6, 8, 1, 0]) -> [8, 6, 3, 1, 0]
([-3, 6, -1, 8, 0]) -> [8, 6, 0]
([3, 3, 3, 3, 3]) -> [3, 3, 3, 3, 3]
([]) -> []
        }
    }
}

problem Generated/3124 {
code {
        func reverse_sort_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([3, 1, 4, 2, 5]) -> [5, 4, 3, 2, 1]
([7, 6, 5, 4, 3, 2, 1]) -> [7, 6, 5, 4, 3, 2, 1]
([5, 5, 5, 5, 5]) -> [5, 5, 5, 5, 5]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [8, 7, 6, 5, 4, 3, 2, 1]
([]) -> []
        }
    }
}

problem Generated/3125 {
code {
        func sort_and_reverse_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [9, 7, 6, 5, 3]
([1, 7, 4, 9, 5]) -> [9, 7, 5, 4, 1]
([1, 7, 4, 9, 5, 6, 8, 3]) -> [9, 8, 7, 6, 5, 4, 3, 1]
([5, 5, 5, 5, 5]) -> [5, 5, 5, 5, 5]
        }
    }
}

problem Generated/3126 {
code {
        func reverse_sort_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [9, 7, 6, 5, 3]
([1, 7, 4, 9, 5]) -> [9, 7, 5, 4, 1]
([1, 7, 4, 9, 5, 2]) -> [9, 7, 5, 4, 2, 1]
([1, 7, 4, 9, 0, 5, 1]) -> [9, 7, 5, 4, 1, 1, 0]
        }
    }
}

problem Generated/3127 {
code {
        func sort_and_reverse(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
([1, 3, 2, 4, 5]) -> [5, 4, 3, 2, 1]
([2, 2, 2, 2, 2]) -> [2, 2, 2, 2, 2]
([]) -> []
        }
    }
}

problem Generated/3128 {
code {
        func sort_and_reverse(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([1, 3, 2, 4, 5]) -> [5, 4, 3, 2, 1]
([1, 1, 1, 1]) -> [1, 1, 1, 1]
([3, 2, 1]) -> [3, 2, 1]
        }
    }
}

problem Generated/3129 {
code {
        func sort_and_reverse(items: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [9, 7, 6, 5, 3]
([1, 2, 3, 3, 2, 1]) -> [3, 3, 2, 2, 1, 1]
([1, 7, 4, 9, 5]) -> [9, 7, 5, 4, 1]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/3130 {
code {
        func reverse_sorted_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [9, 7, 6, 5, 3]
([1, 7, 4, 9, 5, -3, 0, 2]) -> [9, 7, 5, 4, 2, 1]
([-1, -2, -3, -4, -5]) -> []
([1, 2, 3, 4, 5, 6, -7, 8]) -> [8, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/3131 {
code {
        func sort_and_reverse_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 4, 2, 5, 3]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [9, 7, 6, 5, 3]
([1, 7, 4, 9, 5]) -> [9, 7, 5, 4, 1]
([1, 7, 4, 9, 5, -2, -4, 10]) -> [10, 9, 7, 5, 4, 1, -2, -4]
([]) -> []
([1]) -> [1]
        }
    }
}

problem Generated/3132 {
code {
        func reverse_copy_list(input_lst: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([]) -> []
([1]) -> [1]
([1, 2, 3, 2, 1]) -> [1, 2, 3, 2, 1]
        }
    }
}

problem Generated/3133 {
code {
        func reverse_and_clone_list(source: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [25, 16, 9, 4, 1]
([7, 3, 5, 9, 6]) -> [36, 81, 25, 9, 49]
([1, 7, 4, 9, 5]) -> [25, 81, 16, 49, 1]
([]) -> []
([1, 2, 3, 4, 5, 6, 7, 8]) -> [64, 49, 36, 25, 16, 9, 4, 1]
        }
    }
}

problem Generated/3134 {
code {
        func reverse_copy_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([1, 7, 4, 9, 5]) -> [5, 9, 4, 7, 1]
([1, 7, 4, 9, 5, 0]) -> [0, 5, 9, 4, 7, 1]
([1]) -> [1]
        }
    }
}

problem Generated/3135 {
code {
        func reverse_and_copy_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [-5, -4, -3, -2, -1]
([1, -2, 3, -4, 5]) -> [-5, 4, -3, 2, -1]
([1, 1, 1, 1, 1]) -> [-1, -1, -1, -1, -1]
([]) -> []
([0, 0, 0, 0, 0]) -> [0, 0, 0, 0, 0]
        }
    }
}

problem Generated/3136 {
code {
        func reverse_copy_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([3, 2, 1]) -> [1, 2, 3]
([5, 5, 5]) -> [5, 5, 5]
([]) -> []
([1]) -> [1]
        }
    }
}

problem Generated/3137 {
code {
        func reverse_list_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([1, 2, 2, 3, 4, 4, 5, 5]) -> [5, 4, 3, 2, 1]
([1, 1, 1, 1, 1]) -> [1]
([]) -> []
([1, 2, 3, 2, 1]) -> [3, 2, 1]
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
        }
    }
}

problem Generated/3138 {
code {
        func reverse_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([1, 1, 2, 2, 3, 3]) -> [3, 2, 1]
([1, 2, 3, 3, 2, 1]) -> [1, 2, 3]
([1, 2, 3, 4, 5, 5, 6, 7, 7]) -> [7, 6, 5, 4, 3, 2, 1]
([1, 2, 3, 1, 2, 3]) -> [3, 2, 1]
        }
    }
}

problem Generated/3139 {
code {
        func reverse_list_with_unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 3, 2, 1, 4]) -> [4, 1, 2, 3]
([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([1, 1, 1, 1, 1]) -> [1]
([2, 4, 6, 8, 10]) -> [10, 8, 6, 4, 2]
([]) -> []
        }
    }
}

problem Generated/3140 {
code {
        func reverse_and_remove_duplicates(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "apple", "cherry"]) -> ["cherry", "apple", "banana"]
(["dog", "cat", "dog", "cat", "mouse", "rat"]) -> ["rat", "mouse", "cat", "dog"]
(["hello", "world", "hello"]) -> ["hello", "world"]
([]) -> []
(["python", "java", "python", "ruby", "java"]) -> ["java", "ruby", "python"]
        }
    }
}

problem Generated/3141 {
code {
        func reverse_list(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [5.0, 4.0, 3.0, 2.0, 1.0]
([1.0, 2.0, 3.0, 4.0]) -> [4.0, 3.0, 2.0, 1.0]
([1.0, 2.0, 3.0]) -> [3.0, 2.0, 1.0]
([1.0]) -> [1.0]
([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]) -> [9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0]
        }
    }
}

problem Generated/3142 {
code {
        func reverse_list_in_chunks(lst: list<int>, chunk_size: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6], 2) -> [2, 1, 4, 3, 6, 5]
([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [3, 2, 1, 6, 5, 4, 9, 8, 7]
([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> [5, 4, 3, 2, 1, 8, 7, 6]
([1, 2, 3, 4, 5, 6, 7, 8], 6) -> [6, 5, 4, 3, 2, 1, 8, 7]
        }
    }
}

problem Generated/3143 {
code {
        func reverse_list_in_chunks(elements: list<int>, chunk_size: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4], 2) -> [2, 1, 4, 3]
([1, 2, 3, 4, 5], 2) -> [2, 1, 4, 3, 5]
([1, 2, 3, 4, 5, 6, 7], 3) -> [3, 2, 1, 6, 5, 4, 7]
([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [4, 3, 2, 1, 8, 7, 6, 5, 9]
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> [5, 4, 3, 2, 1, 8, 7, 6]
        }
    }
}

problem Generated/3144 {
code {
        func reverse_list_fixed_size(elements: list<int>, size: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8], 3) -> [3, 2, 1, 6, 5, 4, 8, 7]
([1, 2, 3, 4, 5, 6, 7, 8], 2) -> [2, 1, 4, 3, 6, 5, 8, 7]
([1, 2, 3, 4, 5, 6], 4) -> [4, 3, 2, 1, 6, 5]
([1, 2, 3, 4, 5, 6, 7], 3) -> [3, 2, 1, 6, 5, 4, 7]
([1, 2, 3, 4], 5) -> [4, 3, 2, 1]
        }
    }
}

problem Generated/3145 {
code {
        func reverse_list_in_groups(elements: list<int>, group_size: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [2, 1, 4, 3, 5]
([1, 2, 3, 4, 5], 3) -> [3, 2, 1, 5, 4]
([1, 2, 3, 4, 5], 1) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5], 5) -> [5, 4, 3, 2, 1]
([1, 2, 3, 4, 5, 6, 7, 8], 3) -> [3, 2, 1, 6, 5, 4, 8, 7]
        }
    }
}

problem Generated/3146 {
code {
        func reverse_chunks(elements: list<int>, chunk_size: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8], 3) -> [3, 2, 1, 6, 5, 4, 8, 7]
([1, 2, 3, 4, 5, 6, 7, 8], 2) -> [2, 1, 4, 3, 6, 5, 8, 7]
([1, 2, 3, 4], 4) -> [4, 3, 2, 1]
([1, 2, 3, 4, 5, 6], 1) -> [1, 2, 3, 4, 5, 6]
([1, 2, 3, 4], 5) -> [4, 3, 2, 1]
        }
    }
}

problem Generated/3147 {
code {
        func reverse_sqrt(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 4.0, 9.0, 16.0, 25.0]) -> [5.0, 4.0, 3.0, 2.0, 1.0]
([0.0, 0.25, 0.5, 1.0, 4.0]) -> [2.0, 1.0, 0.7071067811865476, 0.5, 0.0]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [2.23606797749979, 2.0, 1.7320508075688772, 1.4142135623730951, 1.0]
([]) -> []
([4.0, 9.0, 16.0, 25.0, 36.0]) -> [6.0, 5.0, 4.0, 3.0, 2.0]
        }
    }
}

problem Generated/3148 {
code {
        func reverse_and_sum(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([7, 3, 5, 9, 6]) -> 30
([1, 7, 4, 9, 5]) -> 26
([1, 2, 3]) -> 6
([5, 4]) -> 9
        }
    }
}

problem Generated/3149 {
code {
        func reverse_list_of_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> ["olleh", "dlrow", "nohtyp"]
(["a", "b", "c"]) -> ["a", "b", "c"]
([]) -> []
(["racecar", "level"]) -> ["racecar", "level"]
(["abc", "def", "ghi"]) -> ["cba", "fed", "ihg"]
        }
    }
}

problem Generated/3150 {
code {
        func reverse_string_words(words: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "dlroW olleH"
("Hello     World") -> "dlroW olleH"
("Hannah") -> "hannaH"
("To be or not to be") -> "eb ot ton ro eb oT"
("") -> ""
        }
    }
}

problem Generated/3151 {
code {
        func generate_sequence(length: int, start: int, step: int) -> list<int>
    }
    tests {
        template nse {
            (5, 0, 2) -> [0, 2, 4, 6, 8]
(4, 5, -2) -> [5, 3, 1, -1]
(1, 1, 0) -> [1]
(3, 0, 0) -> [0, 0, 0]
(0, 10, 2) -> []
        }
    }
}

problem Generated/3152 {
code {
        func create_copy_of_list_with_modified_elements(elements: list<int>, factor: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], 3) -> [3, 6, 9]
([0, 5, 10], -2) -> [0, -10, -20]
([2, 4, 6, 8, 10], 0) -> [0, 0, 0, 0, 0]
([7, 3, 8, 2, 4], 1) -> [7, 3, 8, 2, 4]
([1, 2, 3, 4, 5], -1) -> [-1, -2, -3, -4, -5]
        }
    }
}

problem Generated/3153 {
code {
        func copy_list_and_replace(elements: list<int>, old: int, new_dat: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 6) -> [1, 2, 6, 4, 5]
([1, 1, 1, 1, 1], 1, 0) -> [0, 0, 0, 0, 0]
([1, 2, 3, 4, 5], 6, 7) -> [1, 2, 3, 4, 5]
([], 1, 2) -> []
([1, 2, 3, 4, 5], 2, 2) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/3154 {
code {
        func duplicate_list(input_lst: list<int>, n: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], 3) -> [1, 1, 1, 2, 2, 2, 3, 3, 3]
([4, 5, 6], 5) -> [4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6]
([1, 2, 3, 4], 1) -> [1, 2, 3, 4]
([7, 8, 9], 0) -> []
([3, 2, 1], -2) -> []
        }
    }
}

problem Generated/3155 {
code {
        func copy_and_reverse(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([]) -> []
([7, 5, 3, 1]) -> [1, 3, 5, 7]
([1, 2, 3, 3, 2, 1]) -> [1, 2, 3, 3, 2, 1]
([10]) -> [10]
        }
    }
}

problem Generated/3156 {
code {
        func copy_list(elements: list<any>) -> list<any>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
(["a", "b", "c", "d", "e"]) -> ["a", "b", "c", "d", "e"]
([1.2, 2.3, 3.4, 4.5, 5.6]) -> [1.2, 2.3, 3.4, 4.5, 5.6]
([]) -> []
(["hello"]) -> ["hello"]
        }
    }
}

problem Generated/3157 {
code {
        func copy_and_add_suffix(words: list<string>, suffix: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange"], "s") -> ["apples", "bananas", "oranges"]
(["hello", "world"], "python") -> ["hellopython", "worldpython"]
([], "suffix") -> []
(["word1", "word2", "word3"], "") -> ["word1", "word2", "word3"]
(["book", "table", "chair"], "s") -> ["books", "tables", "chairs"]
        }
    }
}

problem Generated/3158 {
code {
        func copy_list_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 3, 2, 1, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
([1, 1, 1, 1, 1]) -> [1]
([]) -> []
([1]) -> [1]
        }
    }
}

problem Generated/3159 {
code {
        func copy_and_double_even(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 4, 3, 8, 5]
([2, 4, 6, 8, 10]) -> [4, 8, 12, 16, 20]
([]) -> []
([1, 3, 5, 7, 9]) -> [1, 3, 5, 7, 9]
([-1, -2, -3, -4, -5]) -> [-1, -4, -3, -8, -5]
        }
    }
}

problem Generated/3160 {
code {
        func copy_and_add_element(elements: list<int>, element: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 6) -> [1, 2, 3, 4, 5, 6]
([1, 2, 3, 4, 5], 0) -> [1, 2, 3, 4, 5, 0]
([], 10) -> [10]
([1, 2, 3], -1) -> [1, 2, 3, -1]
([-1, 0, 1], 2) -> [-1, 0, 1, 2]
        }
    }
}

problem Generated/3161 {
code {
        func copy_and_append(input_lst: list<int>, element: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], 4) -> [1, 2, 3, 4]
([5, 6, 7], 8) -> [5, 6, 7, 8]
([1, 2, 3], 3) -> [1, 2, 3, 3]
([], 1) -> [1]
([10], 20) -> [10, 20]
        }
    }
}

problem Generated/3162 {
code {
        func copy_list_and_abs(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.0, 0.5, -0.5, 1.0, -1.0]) -> [0.0, 0.5, 0.5, 1.0, 1.0]
([-1.0, 2.5, -3.5, 4.0, -5.0]) -> [1.0, 2.5, 3.5, 4.0, 5.0]
([0.0, 0.0, 0.0]) -> [0.0, 0.0, 0.0]
([]) -> []
        }
    }
}

problem Generated/3163 {
code {
        func copy_and_abs(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([-5.0, -4.0, -3.0, -2.0, -1.0]) -> [5.0, 4.0, 3.0, 2.0, 1.0]
([0.0, 9.0, 5.0, 7.0, 2.0]) -> [0.0, 9.0, 5.0, 7.0, 2.0]
([1.2345, -3.4567, -0.9876, 5.4321, 0.0]) -> [1.2345, 3.4567, 0.9876, 5.4321, 0.0]
([]) -> []
        }
    }
}

problem Generated/3164 {
code {
        func duplicate_abs_list(original: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, -2, 3, -4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
([0, 0, 0, 0, 0]) -> [0, 0, 0, 0, 0]
([-1, -2, -3, -4, -5]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/3165 {
code {
        func copy_and_abs_list(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.5, 3.7, -4.0, 5.2]) -> [1.0, 2.5, 3.7, 4.0, 5.2]
([0.0, -1.5, 3.7, 0.0, 5.2]) -> [0.0, 1.5, 3.7, 0.0, 5.2]
([-1.0, -2.5, -3.7, -4.0, -5.2]) -> [1.0, 2.5, 3.7, 4.0, 5.2]
([]) -> []
([2.3]) -> [2.3]
        }
    }
}

problem Generated/3166 {
code {
        func copy_and_abs_list(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, -3.0, 4.0, -5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.0, 1.0, -1.0, 2.0, -2.0]) -> [0.0, 1.0, 1.0, 2.0, 2.0]
([3.14, -5.6, 2.0, -8.0]) -> [3.14, 5.6, 2.0, 8.0]
([-1.0, -2.0, -3.0]) -> [1.0, 2.0, 3.0]
([0.0, 0.0, 0.0]) -> [0.0, 0.0, 0.0]
        }
    }
}

problem Generated/3167 {
code {
        func get_absolute_value_list_copy(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([-1, -2, -3, -4, -5]) -> [1, 2, 3, 4, 5]
([0, 7, -4, 9, -5]) -> [0, 7, 4, 9, 5]
([]) -> []
([3, -5, 7, -9, 11]) -> [3, 5, 7, 9, 11]
        }
    }
}

problem Generated/3168 {
code {
        func copy_list_with_abs_values(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.0, 0.1, -0.2, 0.3, -0.4]) -> [0.0, 0.1, 0.2, 0.3, 0.4]
([1.23, -4.56, 7.89]) -> [1.23, 4.56, 7.89]
([0.0, -1.0, 1.0, -1.2, 1.2]) -> [0.0, 1.0, 1.0, 1.2, 1.2]
([]) -> []
        }
    }
}

problem Generated/3169 {
code {
        func copy_and_abs_list(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.0, 0.0, 0.0]) -> [0.0, 0.0, 0.0]
([]) -> []
([1.2, 3.4, -5.6, -7.8, 9.0]) -> [1.2, 3.4, 5.6, 7.8, 9.0]
        }
    }
}

problem Generated/3170 {
code {
        func copy_and_make_elements_absolute(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, -3.0, 4.0, -5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.0, -2.0, 3.0, -4.0, 5.0]) -> [0.0, 2.0, 3.0, 4.0, 5.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([1.0, 2.5, -1.5, 4.0, -5.5]) -> [1.0, 2.5, 1.5, 4.0, 5.5]
([]) -> []
        }
    }
}

problem Generated/3171 {
code {
        func copy_and_abs(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([1.5, -2.75, 3.25, -4.5, 5.25]) -> [1.5, 2.75, 3.25, 4.5, 5.25]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([]) -> []
([0.0, -2.0, 3.0, -4.0, 0.0]) -> [0.0, 2.0, 3.0, 4.0, 0.0]
        }
    }
}

problem Generated/3172 {
code {
        func remove_duplicates_and_sum(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1, 4, 5]) -> 15
([1, 1, 1, 1, 1, 1, 1]) -> 1
([]) -> 0
([1, 2, 3, -1, -2, -3]) -> 0
([5, 4, 3, 2, 1]) -> 15
        }
    }
}

problem Generated/3173 {
code {
        func double_and_sum_list(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 30.0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> -30.0
([0.0, 0.0, 0.0, 0.0]) -> 0.0
([1.0, -2.0, 3.0, -4.0, 5.0]) -> 6.0
([0.5, 1.5, 2.5, 3.5, 4.5]) -> 25.0
        }
    }
}

problem Generated/3174 {
code {
        func compute_list_sum(input_lst: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([7, 3, 5, 9, 6]) -> 30
([1, 7, 4, 9, 5]) -> 26
([1, 7, 4, 9, 5, -2, -3, -5]) -> 16
([10, 20, 30]) -> 60
        }
    }
}

problem Generated/3175 {
code {
        func copy_and_multiply(numbers: list<int>, factor: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [2, 4, 6, 8, 10]
([7, 3, 5, 9, 6], -1) -> [-7, -3, -5, -9, -6]
([1, 7, 4, 9, 5], 0) -> [0, 0, 0, 0, 0]
([1, 7, 4, 9, 5], 1) -> [1, 7, 4, 9, 5]
([], 5) -> []
        }
    }
}

problem Generated/3176 {
code {
        func double_odd_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [2, 6, 10]
([2, 4, 6, 8, 10]) -> []
([1, 3, 5, 7, 9]) -> [2, 6, 10, 14, 18]
([0, 1, 2, 3, 4]) -> [2, 6]
([1, 2, 3, 4, 5, 6, 7, 8, 9]) -> [2, 6, 10, 14, 18]
        }
    }
}

problem Generated/3177 {
code {
        func largest_items_from_list(items: list<int>, n: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [5, 4]
([6, 7, 8, 9], 10) -> [9, 8, 7, 6]
([3, 3, 4, 4, 5, 5], 3) -> [5, 5, 4]
([4, 1, 8, 3, 2], 1) -> [8]
([], 5) -> []
        }
    }
}

problem Generated/3178 {
code {
        func find_two_max_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4]
([7, 3, 5, 9, 6]) -> [9, 7]
([1, 7, 4, 9, 5]) -> [9, 7]
([1, 7, 4, 9, 5, 9, 4, 7]) -> [9, 9]
([1, 1, 1, 1]) -> [1, 1]
        }
    }
}

problem Generated/3179 {
code {
        func find_max_in_copy_list(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 10
([10, 1, 0, -5, 9]) -> 20
([0, 0, 0, 0, 0]) -> 0
([-1, -2, -3, -4, -5]) -> -2
([1, 3, 5, 7, 9]) -> 18
        }
    }
}

problem Generated/3180 {
code {
        func find_min_copy(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [2.0, 3.0, 4.0, 5.0]
([1.0, 2.0, 1.0, 4.0, 1.0]) -> [2.0, 4.0]
([1.0, 2.0, 3.0, 4.0, 1.0]) -> [2.0, 3.0, 4.0]
([1.0, 1.0, 1.0, 1.0, 1.0]) -> []
([-1.0, -2.0, -3.0, 0.0, -4.0]) -> [-1.0, -2.0, -3.0, 0.0]
        }
    }
}

problem Generated/3181 {
code {
        func remove_min_element(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([4, 8, 2, 9, 1, 3]) -> [4, 8, 2, 9, 3]
([-1, -2, -3, -4]) -> [-1, -2, -3]
([5, 5, 5, 5]) -> [5, 5, 5]
([1, 2, 3, 4, 5]) -> [2, 3, 4, 5]
([0, 0, 0, 0]) -> [0, 0, 0]
        }
    }
}

problem Generated/3182 {
code {
        func get_top_k_elements(elements: list<int>, k: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [1, 2, 3]
([7, 3, 5, 9, 6], 2) -> [3, 5]
([1, 7, 4, 9, 5], 5) -> [1, 4, 5, 7, 9]
([1, 7, 4, 9, 5], 0) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> [1, 2, 3, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/3183 {
code {
        func calculate_element_product(arr1: list<int>, arr2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [4, 10, 18]
([0, 0, 0], [1, 2, 3]) -> [0, 0, 0]
([1, -2, 3, -4, 5], [1, 2, 3, 4, 5]) -> [1, -4, 9, -16, 25]
([1, 2, 3], [4, 5, 6, 7]) -> [4, 10, 18]
([], []) -> []
        }
    }
}

problem Generated/3184 {
code {
        func merge_two_lists(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [1, 2, 3, 4, 5, 6]
([1, 3, 5], [2, 4, 6]) -> [1, 3, 5, 2, 4, 6]
([7, 8, 9], [4, 5, 6]) -> [7, 8, 9, 4, 5, 6]
([1, 3, 5], []) -> [1, 3, 5]
([], [2, 4, 6]) -> [2, 4, 6]
        }
    }
}

problem Generated/3185 {
code {
        func transpose_matrix(matrix: list<list<int>>) -> list<list<int>>
    }
    tests {
        template nse {
            ([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
([[1, 2], [3, 4], [5, 6], [7, 8]]) -> [[1, 3, 5, 7], [2, 4, 6, 8]]
([[1, 3, 5], [2, 4, 6]]) -> [[1, 2], [3, 4], [5, 6]]
([[1, 0], [0, 1]]) -> [[1, 0], [0, 1]]
([[1, 2, 3, 4]]) -> [[1], [2], [3], [4]]
        }
    }
}

problem Generated/3186 {
code {
        func transpose_matrix(matrix: list<list<int>>) -> list<list<int>>
    }
    tests {
        template nse {
            ([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
([[1, 2], [3, 4], [5, 6]]) -> [[1, 3, 5], [2, 4, 6]]
([[1,2,3],[4,5,6]]) -> [[1, 4], [2, 5], [3, 6]]
([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) -> [[1, 4, 7, 10], [2, 5, 8, 11], [3, 6, 9, 12]]
([[1,2,3]]) -> [[1], [2], [3]]
        }
    }
}

problem Generated/3187 {
code {
        func concatenate_lists(list1: list<string>, list2: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["a", "b", "c"], ["d", "e", "f"]) -> ["a d", "b e", "c f"]
(["cat", "dog", "bird"], ["food", "leash", "cage"]) -> ["cat food", "dog leash", "bird cage"]
(["a", "b", "c"], ["d", "e"]) -> ["a d", "b e"]
([], ["d", "e", "f"]) -> []
(["cat", "dog", "bird"], []) -> []
        }
    }
}

problem Generated/3188 {
code {
        func transpose_matrix(matrix: list<list<int>>) -> list<list<int>>
    }
    tests {
        template nse {
            ([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
([[1, 2], [3, 4], [5, 6], [7, 8]]) -> [[1, 3, 5, 7], [2, 4, 6, 8]]
([[1, 2, 3], [4, 5, 6]]) -> [[1, 4], [2, 5], [3, 6]]
([[1], [2], [3], [4]]) -> [[1, 2, 3, 4]]
([[1, 2, 3]]) -> [[1], [2], [3]]
        }
    }
}

problem Generated/3189 {
code {
        func get_copy_of_even_index_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 3, 5]
([7, 3, 5, 9, 6]) -> [7, 5, 6]
([1, 7, 4, 9, 5]) -> [1, 4, 5]
([1, 7, 4, 9, 5, 3]) -> [1, 4, 5]
([1, 2]) -> [1]
        }
    }
}

problem Generated/3190 {
code {
        func copy_list_and_update_element(elements: list<int>, idx: int, value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2, 7) -> [1, 2, 7, 4, 5]
([7, 3, 5, 9, 6], 0, 8) -> [8, 3, 5, 9, 6]
([1, 2, 3, 4, 5], 4, 3) -> [1, 2, 3, 4, 3]
([1, 2, 3, 4, 5], 1, 5) -> [1, 5, 3, 4, 5]
([1, 2, 3, 4, 5], 3, 1) -> [1, 2, 3, 1, 5]
        }
    }
}

problem Generated/3191 {
code {
        func increment_odd_index_values(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [2, 2, 4, 4, 6]
([7, 3, 5, 9, 6]) -> [8, 3, 6, 9, 7]
([1, 7, 4, 9, 5]) -> [2, 7, 5, 9, 6]
([1, 7, 4, 9]) -> [2, 7, 5, 9]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [2, 2, 4, 4, 6, 6, 8, 8]
        }
    }
}

problem Generated/3192 {
code {
        func add_index_to_list_elements(elements: list<double>) -> list<string>
    }
    tests {
        template nse {
            ([1.0, 2.5, 3.6, 4.8]) -> ["0_1.0", "1_2.5", "2_3.6", "3_4.8"]
([0.0, 0.1, 0.2, 0.3, 0.4]) -> ["0_0.0", "1_0.1", "2_0.2", "3_0.3", "4_0.4"]
([-1.2, 2.0, -3.7, 4.5, -0.9]) -> ["0_-1.2", "1_2.0", "2_-3.7", "3_4.5", "4_-0.9"]
([]) -> []
([2.5]) -> ["0_2.5"]
        }
    }
}

problem Generated/3193 {
code {
        func modify_list_by_index(elements: list<int>, indexes: list<int>, values: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [1, 3], [10, 20]) -> [1, 10, 3, 20, 5]
([1, 2, 3, 4, 5], [1, 10], [10, 20]) -> [1, 10, 3, 4, 5]
([], [], []) -> []
([1, 2, 3, 4, 5], [], []) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5], [0, 1, 2, 3, 4], [1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/3194 {
code {
        func copy_list_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([]) -> []
([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/3195 {
code {
        func remove_duplicates_and_sort(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 2, 3, 3, 3, 4, 5, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1]) -> [1]
([7, 3, 5, 9, 6, 5, 3, 7]) -> [3, 5, 6, 7, 9]
([1, 7, 4, 9, 5]) -> [1, 4, 5, 7, 9]
        }
    }
}

problem Generated/3196 {
code {
        func get_unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5]) -> [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5]
([1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 5]) -> [1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 5]
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
        }
    }
}

problem Generated/3197 {
code {
        func remove_duplicate_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 2, 3, 4, 4, 5]) -> [1, 2, 3, 4, 5]
([7, 3, 5, 9, 6]) -> [7, 3, 5, 9, 6]
([1, 7, 4, 9, 5]) -> [1, 7, 4, 9, 5]
([1, 7, 4, 9, 5, 1, 4, 5, 7]) -> [1, 7, 4, 9, 5]
([]) -> []
        }
    }
}

problem Generated/3198 {
code {
        func remove_duplicates_keep_order(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5, 3, 2, 6, 7, 8, 8, 1]) -> [1, 2, 3, 4, 5, 6, 7, 8]
([1, 1, 1, 1, 1, 1, 1]) -> [1]
([]) -> []
([1, 2, 3, 4, 5, 6, 7, 8]) -> [1, 2, 3, 4, 5, 6, 7, 8]
([8, 7, 6, 5, 4, 3, 2, 1]) -> [8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/3199 {
code {
        func copy_and_filter_list(elements: list<int>, c: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [3, 4, 5]
([7, 3, 5, 9, 6], 5) -> [7, 9, 6]
([1, 7, 4, 9, 5], 10) -> []
([1, 7, 4, 9, 5], 0) -> [1, 7, 4, 9, 5]
([-2, -1, 0, 1, 2], -1) -> [0, 1, 2]
        }
    }
}

problem Generated/3200 {
code {
        func copy_and_filter_list(elements: list<int>, c: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [3, 4, 5]
([7, 3, 5, 9, 6], 6) -> [7, 9]
([1, 7, 4, 9, 5], 10) -> []
([1, 7, 4, 9, 5], 0) -> [1, 7, 4, 9, 5]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [5, 6, 7, 8]
        }
    }
}

problem Generated/3201 {
code {
        func filter_list_copy(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([-1, -2, -3, -4, -5]) -> []
([0, 1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([0, -1, 2, -3, 4, -5]) -> [2, 4]
([1, -2, 3, -4, 5]) -> [1, 3, 5]
        }
    }
}

problem Generated/3202 {
code {
        func filter_copy_of_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [2, 4, 6, 8, 10]
([2, 4, 6, 8, 10]) -> [2, 4, 6, 8, 10]
([1, 3, 5, 7, 9]) -> []
([]) -> []
([20, -6, 0, 11, -8, 13, -14, 5]) -> [20, -6, 0, -8, -14]
        }
    }
}

problem Generated/3203 {
code {
        func copy_and_filter_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 4, 9, 16, 25]
([-1, 2, -3, 4, -5]) -> [4, 16]
([]) -> []
([0, 1, -1]) -> [1]
([5, 6, 7, 8, 9]) -> [25, 36, 49, 64, 81]
        }
    }
}

problem Generated/3204 {
code {
        func filter_even_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6]) -> [1, 3, 5]
([2, 4, 6, 8]) -> []
([1, 3, 5, 7]) -> [1, 3, 5, 7]
([]) -> []
([10, 20, 30, 40, 50]) -> []
        }
    }
}

problem Generated/3205 {
code {
        func sort_list_of_lists(elements: list<list<int>>) -> list<list<int>>
    }
    tests {
        template nse {
            ([[1, 2, 3], [3, 2, 1], [1, 3, 2]]) -> [[1, 2, 3], [1, 2, 3], [1, 2, 3]]
([[10, 9, 8], [3, 5, 1], [6, 12, 9]]) -> [[8, 9, 10], [1, 3, 5], [6, 9, 12]]
([[0, 1], [-1, 0], [-1, 1]]) -> [[0, 1], [-1, 0], [-1, 1]]
([[-1, -2, -3], [-3, -2, -1], [-1, -3, -2]]) -> [[-3, -2, -1], [-3, -2, -1], [-3, -2, -1]]
([[1, 2, 3], [], [4, 5, 6]]) -> [[1, 2, 3], [], [4, 5, 6]]
        }
    }
}

problem Generated/3206 {
code {
        func sort_list_copy(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 4, 2, 5, 3]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
([1]) -> [1]
        }
    }
}

problem Generated/3207 {
code {
        func sort_list_copy(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([3, 1, 4, 2, 5]) -> [1, 2, 3, 4, 5]
([2, 2, 1, 1, 3]) -> [1, 1, 2, 2, 3]
([]) -> []
        }
    }
}

problem Generated/3208 {
code {
        func sort_and_reverse_copy_of_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([3, 6, 1, 4, 2]) -> [6, 4, 3, 2, 1]
([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) -> [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
([1, 1, 1, 1, 1, 2, 2, 2, 3, 3]) -> [3, 3, 2, 2, 2, 1, 1, 1, 1, 1]
([]) -> []
        }
    }
}

problem Generated/3209 {
code {
        func sort_and_reverse_copy(original_lst: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [9, 7, 6, 5, 3]
([1, 7, 4, 9, 5]) -> [9, 7, 5, 4, 1]
([1, 7, 4, 9, 5, 3]) -> [9, 7, 5, 4, 3, 1]
([5]) -> [5]
        }
    }
}

problem Generated/3210 {
code {
        func sort_and_copy_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 3, 2, 4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
([2, 2, 2, 1, 1, 3, 3]) -> [1, 1, 2, 2, 2, 3, 3]
        }
    }
}

problem Generated/3211 {
code {
        func sort_and_copy(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([7, 3, 5, 9, 6]) -> [3, 5, 6, 7, 9]
([1, 7, 4, 9, 5]) -> [1, 4, 5, 7, 9]
([1, 7, 4, 9, 5, 3, 2]) -> [1, 2, 3, 4, 5, 7, 9]
([1, 1, 1, 1, 1]) -> [1, 1, 1, 1, 1]
        }
    }
}

problem Generated/3212 {
code {
        func string_to_ascii_list(string_value: string) -> list<int>
    }
    tests {
        template nse {
            ("hello") -> [104, 101, 108, 108, 111]
("This is a test.") -> [84, 104, 105, 115, 32, 105, 115, 32, 97, 32, 116, 101, 115, 116, 46]
("12345") -> [49, 50, 51, 52, 53]
("") -> []
("Hi!") -> [72, 105, 33]
        }
    }
}

problem Generated/3213 {
code {
        func check_copy_identical(original_lst: list<int>, copied_lst: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) -> true
([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]) -> false
([1, 2, 3, 4, 5], [1, 2, 3, 4, 0]) -> false
([], []) -> true
([1, 2], [2, 1]) -> false
        }
    }
}

problem Generated/3214 {
code {
        func check_list_similarity(list1: list<int>, list2: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) -> true
([7, 3, 5, 9, 6], [3, 9, 5, 7, 6]) -> true
([1, 7, 4, 9, 5], [1, 7, 4, 9]) -> false
([1, 7, 4, 9, 5], [1, 7, 4, 9, 5, 6]) -> false
([1, 2, 3, 4, 5, 6, 7, 8], [2, 4, 6, 8, 10, 12, 14, 16]) -> false
        }
    }
}

problem Generated/3215 {
code {
        func do_lists_have_same_value(list1: list<int>, list2: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) -> true
([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) -> true
([1, 2, 3, 4, 5], [1, 2, 3, 4]) -> false
([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]) -> false
([], []) -> true
([1], []) -> false
        }
    }
}

problem Generated/3216 {
code {
        func are_lists_equal(list1: list<int>, list2: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3], [3, 2, 1]) -> true
([1, 2, 3], [3, 2, 1, 0]) -> false
([1, 2, 3], [4, 5, 6]) -> false
([], [1, 2, 3]) -> false
([], []) -> true
        }
    }
}

problem Generated/3217 {
code {
        func check_if_all_numbers_positive(numbers: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> true
([1.0, -2.0, 3.0, -4.0, 5.0]) -> false
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> false
([]) -> true
([0.0, 2.0, 3.0, 4.0, 5.0]) -> false
        }
    }
}

problem Generated/3218 {
code {
        func copy_and_convert_to_binary(numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["0b1", "0b10", "0b11", "0b100", "0b101"]
([0, 15, 127, 255]) -> ["0b0", "0b1111", "0b1111111", "0b11111111"]
([-5, -2, 0, 2, 5]) -> ["-0b101", "-0b10", "0b0", "0b10", "0b101"]
([256, 512, 1024, 2048]) -> ["0b100000000", "0b1000000000", "0b10000000000", "0b100000000000"]
([7, 9, 15, 29, 31]) -> ["0b111", "0b1001", "0b1111", "0b11101", "0b11111"]
        }
    }
}

problem Generated/3219 {
code {
        func copy_list_and_modify_elements(numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["1", "10", "11", "100", "101"]
([7, -3, 5, -9, 6]) -> ["111", "-11", "101", "-1001", "110"]
([0, -2, 3, -4, 5]) -> ["0", "-10", "11", "-100", "101"]
([0]) -> ["0"]
([-1, -2, -3, -4, -5]) -> ["-1", "-10", "-11", "-100", "-101"]
        }
    }
}

problem Generated/3220 {
code {
        func copy_and_modify_bits(numbers: list<int>, bit_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 0) -> [0, 2, 2, 4, 4]
([7, 3, 5, 9, 6], 1) -> [7, 3, 5, 9, 7]
([0, 1, 2, 3], 0) -> [0, 0, 2, 2]
([8, 4, 2, 1], 1) -> [9, 5, 3, 1]
([11, 5, 12, 8], 0) -> [10, 4, 12, 8]
        }
    }
}

problem Generated/3221 {
code {
        func copy_and_convert_to_binary(numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["0b1", "0b10", "0b11", "0b100", "0b101"]
([7, 3, 5, 9, 6]) -> ["0b111", "0b11", "0b101", "0b1001", "0b110"]
([0, 1, 2, 3, 4]) -> ["0b0", "0b1", "0b10", "0b11", "0b100"]
([10, 20, 30, 40, 50]) -> ["0b1010", "0b10100", "0b11110", "0b101000", "0b110010"]
([100, 200, 300, 400, 500]) -> ["0b1100100", "0b11001000", "0b100101100", "0b110010000", "0b111110100"]
        }
    }
}

problem Generated/3222 {
code {
        func copy_list_of_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World") -> ["Hello", "World"]
("This is a test") -> ["This", "is", "a", "test"]
("") -> []
("   ") -> []
("This is   a test") -> ["This", "is", "a", "test"]
        }
    }
}

problem Generated/3223 {
code {
        func copy_and_split_string(s: string, sep: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello, world!", ",") -> ["Hello", " world!"]
("The quick brown fox jumps over the lazy dog", " ") -> ["The", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]
("123-456-789", "-") -> ["123", "456", "789"]
("abc,def,ghi,jkl", ",") -> ["abc", "def", "ghi", "jkl"]
("one.two.three.four.five", ".") -> ["one", "two", "three", "four", "five"]
        }
    }
}

problem Generated/3224 {
code {
        func copy_list_of_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World!") -> ["Hello", "World!"]
("Mary had a little lamb") -> ["Mary", "had", "a", "little", "lamb"]
("") -> []
("  ") -> []
("Life is like a box of chocolates") -> ["Life", "is", "like", "a", "box", "of", "chocolates"]
        }
    }
}

problem Generated/3225 {
code {
        func copy_words_from_sentence(sentence: string, max_words: int) -> list<string>
    }
    tests {
        template nse {
            ("The quick brown fox jumps over the lazy dog", 3) -> ["The", "quick", "brown"]
("There is no place like home", 0) -> []
("Python is a high-level, interpreted programming language.", 5) -> ["Python", "is", "a", "high-level,", "interpreted"]
("The best thing about a boolean is even if you are wrong, you are only off by a bit", 10) -> ["The", "best", "thing", "about", "a", "boolean", "is", "even", "if", "you"]
("", 5) -> []
        }
    }
}

problem Generated/3226 {
code {
        func copy_words_from_sentence(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello world") -> ["Hello", "world"]
("Hello, world!") -> ["Hello,", "world!"]
("") -> []
("The quick brown fox jumps over the lazy dog.") -> ["The", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog."]
("  Spaces  between   words  ") -> ["Spaces", "between", "words"]
        }
    }
}

problem Generated/3227 {
code {
        func copy_and_split_list(txt: string, separator: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello world", " ") -> ["Hello", "world"]
("This is a test", " ") -> ["This", "is", "a", "test"]
("test,comma,separated", ",") -> ["test", "comma", "separated"]
("This string has no separator", ",") -> ["This string has no separator"]
("", " ") -> [""]
        }
    }
}

problem Generated/3228 {
code {
        func join_list_of_string(str_lst: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry"], ", ") -> "apple, banana, cherry"
(["a", "b", "c", "d"], "") -> "abcd"
(["a", "b", "c"], "-") -> "a-b-c"
([], ", ") -> ""
(["1", "2", "3"], " and ") -> "1 and 2 and 3"
        }
    }
}

problem Generated/3229 {
code {
        func concatenate_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["one", "two", "three"], ", ") -> "one, two, three"
(["a", "b", "c"], " ") -> "a b c"
(["hello", "world"], "") -> "helloworld"
(["1", "2", "3"], "-") -> "1-2-3"
([], "-") -> ""
        }
    }
}

problem Generated/3230 {
code {
        func join_strings_in_list(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], " ") -> "hello world"
(["this", "is", "a", "test"], "-") -> "this-is-a-test"
(["1", "2", "3", "4", "5"], ",") -> "1,2,3,4,5"
([], "/") -> ""
(["only one"], " ") -> "only one"
        }
    }
}

problem Generated/3231 {
code {
        func copy_and_join_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "orange"], ", ") -> "apple, banana, orange"
(["one", "two", "three"], "-") -> "one-two-three"
(["dog", "cat", "fish"], "") -> "dogcatfish"
([], ", ") -> ""
(["hello"], "") -> "hello"
        }
    }
}

problem Generated/3232 {
code {
        func copy_and_lower(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "Banana", "Cherry", "Durian"]) -> ["apple", "banana", "cherry", "durian"]
(["Hello", "World", "Python"]) -> ["hello", "world", "python"]
([]) -> []
(["The", "Quick", "Brown", "Fox"]) -> ["the", "quick", "brown", "fox"]
(["All", "CAPITALIZED"]) -> ["all", "capitalized"]
        }
    }
}

problem Generated/3233 {
code {
        func copy_and_lower_string_list(str_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "Ball", "Cat", "DOG"]) -> ["apple", "ball", "cat", "dog"]
(["One", "Two", "Three"]) -> ["one", "two", "three"]
([]) -> []
(["1", "2", "3", "4", "5"]) -> ["1", "2", "3", "4", "5"]
(["Hello", "WORLD"]) -> ["hello", "world"]
        }
    }
}

problem Generated/3234 {
code {
        func copy_and_lower_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "tHiS", "is", "A", "tEsT"]) -> ["hello", "world", "this", "is", "a", "test"]
(["Python", "is", "COOL"]) -> ["python", "is", "cool"]
([]) -> []
(["123", "abc", "dEf"]) -> ["123", "abc", "def"]
(["ALL", "CAPS"]) -> ["all", "caps"]
        }
    }
}

problem Generated/3235 {
code {
        func copy_and_lower(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "hOW", "arE", "yOU"]) -> ["hello", "world", "how", "are", "you"]
(["PYTHON", "is", "a", "POWERFUL", "language"]) -> ["python", "is", "a", "powerful", "language"]
([]) -> []
(["This", "is", "A", "tEsT", "CAsE"]) -> ["this", "is", "a", "test", "case"]
(["ALL", "CAPITAL", "LETTERS"]) -> ["all", "capital", "letters"]
        }
    }
}

problem Generated/3236 {
code {
        func copy_list_lowercase(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "Banana", "Orange", "Grapes"]) -> ["apple", "banana", "orange", "grapes"]
(["Hello", "WorLD", "PyTHoN", "123"]) -> ["hello", "world", "python", "123"]
([]) -> []
([""]) -> [""]
(["A", "a", "B", "b"]) -> ["a", "a", "b", "b"]
        }
    }
}

problem Generated/3237 {
code {
        func copy_and_lower_string_list(str_lst: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "Ball", "Cat", "Dog"]) -> ["apple", "ball", "cat", "dog"]
([]) -> []
(["Hello", "World"]) -> ["hello", "world"]
(["PythOn", "ProgRam", "sOlutionS"]) -> ["python", "program", "solutions"]
(["A", "B", "C", "D"]) -> ["a", "b", "c", "d"]
        }
    }
}

problem Generated/3238 {
code {
        func copy_and_lower(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Apple", "Banana", "Cherry", "Date"]) -> ["apple", "banana", "cherry", "date"]
(["First", "Second", "Third", "Fourth"]) -> ["first", "second", "third", "fourth"]
([]) -> []
(["One", "Two", "Three", "Four", "Five"]) -> ["one", "two", "three", "four", "five"]
(["Hello", "World"]) -> ["hello", "world"]
        }
    }
}

problem Generated/3239 {
code {
        func copy_and_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world"]) -> ["HELLO", "WORLD"]
(["Python", "Java", "C++", "JavaScript"]) -> ["PYTHON", "JAVA", "C++", "JAVASCRIPT"]
(["apple", "banana", "cherry"]) -> ["APPLE", "BANANA", "CHERRY"]
([]) -> []
([""]) -> [""]
        }
    }
}

problem Generated/3240 {
code {
        func copy_and_upper_string(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> ["HELLO", "WORLD", "PYTHON"]
([]) -> []
(["a", "b", "c"]) -> ["A", "B", "C"]
(["abc", "def", "xyz"]) -> ["ABC", "DEF", "XYZ"]
(["this", "is", "list", "of", "strings"]) -> ["THIS", "IS", "LIST", "OF", "STRINGS"]
        }
    }
}

problem Generated/3241 {
code {
        func copy_and_uppercase(elements: list<string>, upper_idx: list<int>) -> list<string>
    }
    tests {
        template nse {
            (["cat", "dog", "bird", "fish"], [1, 3]) -> ["cat", "DOG", "bird", "FISH"]
(["a", "b", "c", "d"], [0, 1, 2, 3]) -> ["A", "B", "C", "D"]
(["hello", "world", "python"], [0, -1, 2]) -> ["HELLO", "world", "PYTHON"]
(["apple", "banana", "cherry"], [-1, 3]) -> ["apple", "banana", "cherry"]
([], [0]) -> []
        }
    }
}

problem Generated/3242 {
code {
        func copy_and_uppercase(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world"]) -> ["HELLO", "WORLD"]
([]) -> []
(["an", "example", "of", "a", "list"]) -> ["AN", "EXAMPLE", "OF", "A", "LIST"]
(["Python", "is", "awesome"]) -> ["PYTHON", "IS", "AWESOME"]
(["LIST", "COMPREHENSION", "IS", "GREAT"]) -> ["LIST", "COMPREHENSION", "IS", "GREAT"]
        }
    }
}

problem Generated/3243 {
code {
        func copy_and_uppercase_strings(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> ["HELLO", "WORLD", "PYTHON"]
(["abc", "def", "ghi"]) -> ["ABC", "DEF", "GHI"]
([]) -> []
(["", "non-empty"]) -> ["", "NON-EMPTY"]
(["123", "456", "789"]) -> ["123", "456", "789"]
        }
    }
}

problem Generated/3244 {
code {
        func copy_list_and_uppercase(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["This", "is", "a", "test"]) -> ["THIS", "IS", "A", "TEST"]
([]) -> []
(["Hello", "world", "!"]) -> ["HELLO", "WORLD", "!"]
(["lowercase"]) -> ["LOWERCASE"]
(["UPPERCASE"]) -> ["UPPERCASE"]
        }
    }
}

problem Generated/3245 {
code {
        func copy_and_uppercase(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"]) -> ["HELLO", "WORLD", "PYTHON"]
(["", "empty", "strings"]) -> ["", "EMPTY", "STRINGS"]
([]) -> []
(["t", "e", "s", "t"]) -> ["T", "E", "S", "T"]
(["Abc", "dEf", "gHi"]) -> ["ABC", "DEF", "GHI"]
        }
    }
}

problem Generated/3246 {
code {
        func copy_and_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world"]) -> ["HELLO", "WORLD"]
(["Python", "Java", "C++", "JavaScript"]) -> ["PYTHON", "JAVA", "C++", "JAVASCRIPT"]
([]) -> []
(["1", "2", "3", "4", "5"]) -> ["1", "2", "3", "4", "5"]
(["hello", "world"]) -> ["HELLO", "WORLD"]
        }
    }
}

problem Generated/3247 {
code {
        func copy_lower_case_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["abc", "Def", "GHI", "jkl"]) -> ["abc", "jkl"]
(["abc", "DEF", "ghi", "JKL"]) -> ["abc", "ghi"]
(["ABC", "DEF", "GHI", "JKL"]) -> []
(["a", "b", "c", "d"]) -> ["a", "b", "c", "d"]
([]) -> []
        }
    }
}

problem Generated/3248 {
code {
        func copy_lower_case_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "Banana", "cherry", "lemon", "Peach", "mango"]) -> ["apple", "cherry", "lemon", "mango"]
(["Python", "Java", "Ruby", "C++", "JavaScript"]) -> []
(["Hello", "World"]) -> []
(["Python", "java", "Ruby", "C++", "JavaScript"]) -> ["java"]
(["c", "C", "cpp", "CPP"]) -> ["c", "cpp"]
        }
    }
}

problem Generated/3249 {
code {
        func copy_list_with_only_lowercase_strings(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "WORLD", "Python"]) -> ["hello"]
([]) -> []
(["Hello", "World"]) -> []
(["python", "is", "great"]) -> ["python", "is", "great"]
(["a", "b", "c", "d"]) -> ["a", "b", "c", "d"]
        }
    }
}

problem Generated/3250 {
code {
        func copy_uppercase_str_list(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON", "PROGRAMMING"]) -> ["HELLO", "WORLD", "PYTHON", "PROGRAMMING"]
(["HELLO", "WORLD", "python", "PROGRAMMING"]) -> ["HELLO", "WORLD", "PROGRAMMING"]
(["", "PYTHON", "", "PROGRAMMING", "IS", "FUN"]) -> ["PYTHON", "PROGRAMMING", "IS", "FUN"]
(["this", "is", "an", "example"]) -> []
(["ABC", "DEF", "GHI", "JKL"]) -> ["ABC", "DEF", "GHI", "JKL"]
        }
    }
}

problem Generated/3251 {
code {
        func copy_uppercase_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "python", "is", "GREAT"]) -> ["HELLO", "WORLD", "GREAT"]
(["THIS", "IS", "ALL", "IN", "CAPITAL", "LETTERS"]) -> ["THIS", "IS", "ALL", "IN", "CAPITAL", "LETTERS"]
(["lower", "case", "strings", "do", "not", "pass"]) -> []
([]) -> []
(["ALLCAPS"]) -> ["ALLCAPS"]
        }
    }
}

problem Generated/3252 {
code {
        func copy_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world"]) -> ["hello", "world"]
(["hello", "123", "world"]) -> ["hello", "world"]
(["hello", "", "world"]) -> ["hello", "world"]
(["h3llo", "w0rld"]) -> []
([]) -> []
        }
    }
}

problem Generated/3253 {
code {
        func get_alpha_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "python", "78"]) -> ["hello", "world", "python"]
(["alpha", "beta", "gamma", "456", "delta"]) -> ["alpha", "beta", "gamma", "delta"]
([]) -> []
(["1", "2", "3", "4"]) -> []
(["apple", "banana", "cherry", "dog", "elephant"]) -> ["apple", "banana", "cherry", "dog", "elephant"]
        }
    }
}

problem Generated/3254 {
code {
        func copy_alpha_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "1", "2", "3"]) -> ["hello", "world"]
(["this", "is", "a", "test"]) -> ["this", "is", "a", "test"]
(["", " ", "hello", "world"]) -> ["hello", "world"]
([]) -> []
(["apple", "", "banana", "orange"]) -> ["apple", "banana", "orange"]
        }
    }
}

problem Generated/3255 {
code {
        func copy_alpha_strings(items: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "123", "abc", "def"]) -> ["hello", "world", "abc", "def"]
(["123", "456", "789"]) -> []
(["a", "b", "c", "d"]) -> ["a", "b", "c", "d"]
(["", "  ", "everybody", "  "]) -> ["everybody"]
(["hello", "world", "python", "code", "hub"]) -> ["hello", "world", "python", "code", "hub"]
        }
    }
}

problem Generated/3256 {
code {
        func copy_and_filter_list(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "123", "world", "456"]) -> ["123", "456"]
(["apple", "orange", "banana"]) -> []
(["123", "456", "789"]) -> ["123", "456", "789"]
(["1", "2", "3", "4", "5"]) -> ["1", "2", "3", "4", "5"]
(["a", "b", "c"]) -> []
        }
    }
}

problem Generated/3257 {
code {
        func copy_digit_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"]) -> ["1", "2", "3", "4", "5"]
(["1", "2", "3", "4", "5", "a", "b"]) -> ["1", "2", "3", "4", "5"]
(["a", "b", "c"]) -> []
(["1", "2", "3", "4", "5"]) -> ["1", "2", "3", "4", "5"]
([]) -> []
        }
    }
}

problem Generated/3258 {
code {
        func copy_and_filter_list(items: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"]) -> ["1", "2", "3", "4", "5"]
(["1a", "2b", "3c", "4d", "5e"]) -> []
(["1", "2b", "3", "4d", "5e"]) -> ["1", "3"]
(["1", "2", "3", "4", "5", "a", "b", "c"]) -> ["1", "2", "3", "4", "5"]
([]) -> []
        }
    }
}

problem Generated/3259 {
code {
        func copy_and_filter_digits(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["abc", "123", "def", "456"]) -> ["123", "456"]
(["123", "456", "789"]) -> ["123", "456", "789"]
([]) -> []
(["no", "digits", "here"]) -> []
(["123", "abc", "456", "def", "789"]) -> ["123", "456", "789"]
        }
    }
}

problem Generated/3260 {
code {
        func copy_and_filter_digits(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"]) -> ["1", "2", "3", "4", "5"]
(["1", "2", "three", "4", "five"]) -> ["1", "2", "4"]
(["one", "1", "two", "2", "three", "3"]) -> ["1", "2", "3"]
([]) -> []
(["123", "456", "789"]) -> ["123", "456", "789"]
        }
    }
}

problem Generated/3261 {
code {
        func copy_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "papaya", "mango"], "a") -> ["apple"]
(["apple", "banana", "orange", "papaya", "mango"], "p") -> ["papaya"]
(["apple", "banana", "orange", "papaya", "mango"], "xyz") -> []
([], "a") -> []
(["hello", "world"], "") -> ["hello", "world"]
        }
    }
}

problem Generated/3262 {
code {
        func copy_list_and_filter_by_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "mango", "grapes"], "a") -> ["apple"]
(["apple", "banana", "orange", "mango", "grapes"], "m") -> ["mango"]
(["apple", "banana", "orange", "mango", "grapes"], "p") -> []
(["apple", "banana", "orange", "mango", "grapes"], "") -> ["apple", "banana", "orange", "mango", "grapes"]
([], "a") -> []
        }
    }
}

problem Generated/3263 {
code {
        func copy_string_list_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "durian", "elderberry"], "b") -> ["banana"]
(["apple", "banana", "cherry", "durian", "elderberry"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "durian", "elderberry"], "") -> ["apple", "banana", "cherry", "durian", "elderberry"]
(["apple", "banana", "cherry", "durian", "elderberry"], "ap") -> ["apple"]
([], "b") -> []
        }
    }
}

problem Generated/3264 {
code {
        func copy_list_starting_with_prefix(elements: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "avocado", "orange", "mango"], "a") -> ["apple", "avocado"]
(["apple", "banana", "avocado", "orange", "mango"], "b") -> ["banana"]
(["apple", "banana", "avocado", "orange", "mango"], "") -> ["apple", "banana", "avocado", "orange", "mango"]
([], "a") -> []
(["", "a", "aa", "aaa"], "a") -> ["a", "aa", "aaa"]
        }
    }
}

problem Generated/3265 {
code {
        func copy_list_starting_with_prefix(items: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "orange", "kiwi"], "a") -> ["apple"]
(["apple", "banana", "cherry", "orange", "kiwi"], "b") -> ["banana"]
(["apple", "banana", "cherry", "orange", "kiwi"], "c") -> ["cherry"]
([], "a") -> []
(["apple", "banana", "cherry", "orange", "kiwi"], "") -> ["apple", "banana", "cherry", "orange", "kiwi"]
        }
    }
}

problem Generated/3266 {
code {
        func copy_strings_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], "a") -> ["apple"]
(["apple", "banana", "cherry", "date"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date"], "d") -> ["date"]
(["apple", "banana", "cherry", "date"], "e") -> []
([], "a") -> []
        }
    }
}

problem Generated/3267 {
code {
        func copy_string_starting_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["cat", "dog", "cow", "chicken"], "c") -> ["cat", "cow", "chicken"]
(["apple", "banana", "cherry", "orange"], "b") -> ["banana"]
(["hello", "world", "foo", "bar"], "f") -> ["foo"]
(["hello", "world", "foo", "bar"], "z") -> []
([], "c") -> []
        }
    }
}

problem Generated/3268 {
code {
        func copy_and_filter_strings(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hi", "python", "happy"], "h") -> ["hello", "hi", "happy"]
(["hello", "world", "hi", "python", "happy"], "") -> ["hello", "world", "hi", "python", "happy"]
(["hello", "world", "hi", "python", "happy"], "p") -> ["python"]
(["", "world", "hi", "python", "happy"], "h") -> ["hi", "happy"]
([], "h") -> []
        }
    }
}

problem Generated/3269 {
code {
        func copy_list_of_str_with_count(strs: list<string>, target: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hello", "python"], "hello") -> ["hello", "hello"]
(["good", "morning", "team"], "hello") -> []
(["hello", "world", "python"], "world") -> ["world"]
([], "hello") -> []
(["hello"], "hello") -> ["hello"]
        }
    }
}

problem Generated/3270 {
code {
        func replace_list_items(lst: list<string>, old: string, new_dat: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "banana", "orange"], "banana", "kiwi") -> ["apple", "kiwi", "orange", "kiwi", "orange"]
(["apple", "banana", "orange", "banana", "orange"], "kiwi", "pear") -> ["apple", "banana", "orange", "banana", "orange"]
([], "kiwi", "pear") -> []
(["kiwi", "kiwi"], "kiwi", "pear") -> ["pear", "pear"]
(["apple", "banana", "orange"], "kiwi", "pear") -> ["apple", "banana", "orange"]
        }
    }
}

problem Generated/3271 {
code {
        func replace_elements_in_list(elements: list<int>, old: int, new_dat: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2, 9) -> [1, 9, 3, 4, 5]
([1, 2, 3, 2, 5], 2, 9) -> [1, 9, 3, 9, 5]
([1, 2, 3, 4, 5], 6, 9) -> [1, 2, 3, 4, 5]
([], 2, 9) -> []
([1, 2, 3, 4, 5, 2], 2, 9) -> [1, 9, 3, 4, 5, 9]
        }
    }
}

problem Generated/3272 {
code {
        func replace_values(copy_lst: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 7) -> [1, 2, 7, 4, 5]
([1, 2, 3, 4, 5], 0, 7) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5], 5, 5) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5], 2, 2) -> [1, 2, 3, 4, 5]
([-1, -2, -3, -4, -5], -3, 0) -> [-1, -2, 0, -4, -5]
        }
    }
}

problem Generated/3273 {
code {
        func add_suffix_to_list(elements: list<string>, suffix: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"], "_suffix") -> ["hello_suffix", "world_suffix", "python_suffix"]
([], "_suffix") -> []
(["1", "2", "3"], "") -> ["1", "2", "3"]
(["", "", ""], "123") -> ["123", "123", "123"]
(["hello", "Python"], "!!!") -> ["hello!!!", "Python!!!"]
        }
    }
}

problem Generated/3274 {
code {
        func duplicate_list_and_append(elements: list<int>, new_element: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 6) -> [1, 2, 3, 4, 5, 6]
([7, 3, 5, 9, 6], 1) -> [7, 3, 5, 9, 6, 1]
([1, 7, 4, 9, 5], -2) -> [1, 7, 4, 9, 5, -2]
([1], 2) -> [1, 2]
([], 5) -> [5]
        }
    }
}

problem Generated/3275 {
code {
        func duplicate_and_append_element(elements: list<int>, item: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 6) -> [1, 2, 3, 4, 5, 6, 6]
([7, 3, 5], 8) -> [7, 3, 5, 8, 8]
([1, 7, 4, 9, 5], -1) -> [1, 7, 4, 9, 5, -1, -1]
([1, 7, 4], 0) -> [1, 7, 4, 0, 0]
([1, 2, 3], 0) -> [1, 2, 3, 0, 0]
        }
    }
}

problem Generated/3276 {
code {
        func duplicate_and_add(numbers: list<int>, num: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 6) -> [1, 2, 3, 4, 5, 6]
([7, 3, 5, 9, 6], 0) -> [7, 3, 5, 9, 6, 0]
([1, 7, 4, 9, 5], -3) -> [1, 7, 4, 9, 5, -3]
([], 1) -> [1]
([1, 2, 3], 1) -> [1, 2, 3, 1]
        }
    }
}

problem Generated/3277 {
code {
        func copy_and_append(elements: list<int>, value: int) -> list<int>
    }
    tests {
        template nse {
            ([], 5) -> [5]
([1, 2, 3], 4) -> [1, 2, 3, 4]
([0, 0, 0], 1) -> [0, 0, 0, 1]
([5], 5) -> [5, 5]
([10, 20, 30], 40) -> [10, 20, 30, 40]
        }
    }
}

problem Generated/3278 {
code {
        func duplicate_and_add(elements: list<int>, num: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 7) -> [2, 4, 6, 8, 10, 14]
([7, 3, 5, 9, 6], 2) -> [14, 6, 10, 18, 12, 4]
([1, 7, 4, 9, 5], 3) -> [2, 14, 8, 18, 10, 6]
([1, 7, 4, 9, 5], -5) -> [2, 14, 8, 18, 10, -10]
([1, 2, 3, 4, 5, 6, 7, 8], 1) -> [2, 4, 6, 8, 10, 12, 14, 16, 2]
        }
    }
}

problem Generated/3279 {
code {
        func copy_and_append_to_list(input_lst: list<int>, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], 4) -> [1, 2, 3, 4]
([], 1) -> [1]
([1, 2, 3, 4], 5) -> [1, 2, 3, 4, 5]
([100], 0) -> [100, 0]
([0, 0, 0], 1) -> [0, 0, 0, 1]
        }
    }
}

problem Generated/3280 {
code {
        func copy_and_append(elements: list<int>, new_element: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 6) -> [1, 2, 3, 4, 5, 6]
([], 4) -> [4]
([-2, -1, 0, 1, 2], -3) -> [-2, -1, 0, 1, 2, -3]
([3], 3) -> [3, 3]
([1, 2, 3], 0) -> [1, 2, 3, 0]
        }
    }
}

problem Generated/3281 {
code {
        func remove_and_copy_list(items: list<int>, remove_indexes: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [0, 2, 4]) -> [2, 4]
([7, 3, 5, 9, 6], [0, 2, 4]) -> [3, 9]
([1, 7, 4, 9, 5], [1, 2, 3]) -> [1, 5]
([1, 7, 4, 9, 5], [0, 4]) -> [7, 4, 9]
([1, 2, 3, 4, 5], []) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/3282 {
code {
        func sort_copy_remove_duplicates(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([5.0, 4.0, 3.0, 2.0, 1.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([1.0, 3.0, 3.0, 4.0, 1.0]) -> [1.0, 3.0, 4.0]
([1.2, 1.2, 1.2, 1.3, 1.3]) -> [1.2, 1.3]
([1.0, 2.0, 3.0, 3.0, 3.0, 2.0, 1.0]) -> [1.0, 2.0, 3.0]
        }
    }
}

problem Generated/3283 {
code {
        func copy_and_sort_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [2, 4, 6, 8, 10]
([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) -> [2, 4, 6, 8, 10]
([1, 3, 5, 7, 9]) -> []
([2, 4, 6, 8, 10]) -> [2, 4, 6, 8, 10]
([]) -> []
([1, 3, 5, 7, 8, 6, 4, 2]) -> [2, 4, 6, 8]
        }
    }
}

problem Generated/3284 {
code {
        func sort_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9]) -> [8, 6, 4, 2]
([5, 9, 11, 7, 3]) -> []
([1, 1, 2, 3, 5, 8, 13]) -> [8, 2]
([2, 4, 6, 8]) -> [8, 6, 4, 2]
([1, 3, 5, 7]) -> []
        }
    }
}

problem Generated/3285 {
code {
        func sort_copy_list(lst: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([5, 3, 2, 4, 1]) -> [1, 2, 3, 4, 5]
([3, 1, 4, 1, 5, 9, 2, 6, 5]) -> [1, 1, 2, 3, 4, 5, 5, 6, 9]
([2, 4, 6, 8, 10]) -> [2, 4, 6, 8, 10]
([17, 19, 15, 18, 16]) -> [15, 16, 17, 18, 19]
([]) -> []
        }
    }
}

problem Generated/3286 {
code {
        func sort_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> [-4, -2, 1, 3, 5]
([-1, -2, -3, -4, -5]) -> [-5, -4, -3, -2, -1]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
([-1, 2, -3, 4, -5]) -> [-5, -3, -1, 2, 4]
        }
    }
}

problem Generated/3287 {
code {
        func sort_copy_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 3, 2, 5, 4]) -> [1, 2, 3, 4, 5]
([7, 3, 5, 9, 6]) -> [3, 5, 6, 7, 9]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1]) -> [1]
([]) -> []
([8, 3, 1, 6, 2, 5, 7, 4]) -> [1, 2, 3, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/3288 {
code {
        func get_sorted_list_without_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([7, 3, 5, 9, 6]) -> [3, 5, 6, 7, 9]
([1, 1, 1, 1, 1]) -> [1]
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([]) -> []
([5]) -> [5]
        }
    }
}

problem Generated/3289 {
code {
        func sort_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([4, 1, 3, 5, 2]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1]) -> [1, 1, 1, 1, 1]
([]) -> []
        }
    }
}

problem Generated/3290 {
code {
        func copy_list_and_update_element(elements: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 6) -> [1, 2, 6, 4, 5]
([7, 3, 5, 9, 6], 5, 2) -> [7, 3, 2, 9, 6]
([1, 7, 4, 9, 5], 8, 2) -> [1, 7, 4, 9, 5]
([1, 7, 4, 9, 5], 1, 10) -> [10, 7, 4, 9, 5]
([1, 2, 3, 4, 5, 6, 7, 8], 6, 0) -> [1, 2, 3, 4, 5, 0, 7, 8]
        }
    }
}

problem Generated/3291 {
code {
        func copy_and_replace(items: list<string>, old_value: string, new_value: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "grape", "apple", "orange"], "apple", "pear") -> ["pear", "banana", "grape", "pear", "orange"]
(["apple", "banana", "grape", "apple", "orange"], "guava", "pear") -> ["apple", "banana", "grape", "apple", "orange"]
(["apple", "banana", "grape", "apple", "orange"], "grape", "watermelon") -> ["apple", "banana", "watermelon", "apple", "orange"]
(["apple", "banana", "grape", "apple", "orange"], "apple", "orange") -> ["orange", "banana", "grape", "orange", "orange"]
([], "apple", "pear") -> []
        }
    }
}

problem Generated/3292 {
code {
        func copy_list_and_replace_element_at_index(lst: list<int>, idx: int, value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2, 10) -> [1, 2, 10, 4, 5]
([1, 2, 3, 4, 5], 0, 10) -> [10, 2, 3, 4, 5]
([1, 2, 3, 4, 5], 4, 10) -> [1, 2, 3, 4, 10]
([1, 2, 3, 2, 5], 1, 10) -> [1, 10, 3, 2, 5]
([1, 2, 3, 4, 5], 3, 3) -> [1, 2, 3, 3, 5]
        }
    }
}

problem Generated/3293 {
code {
        func copy_list_replace_element(elements: list<int>, old: int, new_dat: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 6) -> [1, 2, 6, 4, 5]
([1, 2, 3, 4, 5], 6, 7) -> [1, 2, 3, 4, 5]
([1, 2, 3, 3, 5], 3, 4) -> [1, 2, 4, 4, 5]
([1, 1, 1, 1, 1], 1, 2) -> [2, 2, 2, 2, 2]
([], 1, 2) -> []
        }
    }
}

problem Generated/3294 {
code {
        func copy_and_replace(elements: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1], 2, 4) -> [1, 4, 3, 4, 1]
([1, 2, 3], 4, 5) -> [1, 2, 3]
([1, 2, 3], 2, 2) -> [1, 2, 3]
([], 5, 4) -> []
([5, 5, 5, 5, 5], 5, 4) -> [4, 4, 4, 4, 4]
        }
    }
}

problem Generated/3295 {
code {
        func replace_element_at_index(elements: list<string>, old_elem: string, new_elem: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "pear", "banana"], "banana", "orange") -> ["apple", "orange", "pear", "orange"]
(["apple", "banana", "pear", "banana"], "orange", "kiwi") -> ["apple", "banana", "pear", "banana"]
(["apple", "banana", "pear", "banana"], "pear", "kiwi") -> ["apple", "banana", "kiwi", "banana"]
([], "orange", "kiwi") -> []
(["orange", "orange", "orange"], "orange", "kiwi") -> ["kiwi", "kiwi", "kiwi"]
        }
    }
}

problem Generated/3296 {
code {
        func find_and_replace_multiple_occurences(lst: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 1, 3, 1, 4], 1, 5) -> [5, 2, 5, 3, 5, 4]
([1, 2, 3, 4, 5], 6, 7) -> [1, 2, 3, 4, 5]
([], 1, 2) -> []
([1, 2, 3, 2, 1], 2, 9) -> [1, 9, 3, 9, 1]
([1, 1, 1, 1, 1, 1], 1, 0) -> [0, 0, 0, 0, 0, 0]
        }
    }
}

problem Generated/3297 {
code {
        func reverse_and_copy_list(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["a", "b", "c", "d"]) -> ["d", "c", "b", "a"]
(["hello", "world"]) -> ["world", "hello"]
(["apple", "banana", "cherry", "date", "elderberry"]) -> ["elderberry", "date", "cherry", "banana", "apple"]
([]) -> []
(["a"]) -> ["a"]
        }
    }
}

problem Generated/3298 {
code {
        func reverse_and_copy_list(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [5.0, 4.0, 3.0, 2.0, 1.0]
([5.0, 4.0, 3.0, 2.0, 1.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([]) -> []
([10.0]) -> [10.0]
([4.5, 7.8, 1.2, 0.3, 9.1]) -> [9.1, 0.3, 1.2, 7.8, 4.5]
        }
    }
}

problem Generated/3299 {
code {
        func reverse_copy_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([1]) -> [1]
([]) -> []
([1, 1, 1, 1, 1]) -> [1, 1, 1, 1, 1]
([1, 2, 3, 2, 1]) -> [1, 2, 3, 2, 1]
        }
    }
}

problem Generated/3300 {
code {
        func reverse_copy(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([]) -> []
([1]) -> [1]
([1, 2, 2, 1]) -> [1, 2, 2, 1]
        }
    }
}

problem Generated/3301 {
code {
        func copy_and_reverse_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([1]) -> [1]
([]) -> []
([1, 2, 3, 4, 5, 6, 7, 8]) -> [8, 7, 6, 5, 4, 3, 2, 1]
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/3302 {
code {
        func reverse_list_copy(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([1, 7, 4, 9, 5]) -> [5, 9, 4, 7, 1]
([1, 7, 4, 9, 5, 3]) -> [3, 5, 9, 4, 7, 1]
([]) -> []
        }
    }
}

problem Generated/3303 {
code {
        func reverse_and_copy(lst: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([]) -> []
([1]) -> [1]
([1, 2, 3, 2, 1]) -> [1, 2, 3, 2, 1]
        }
    }
}

problem Generated/3304 {
code {
        func reverse_and_copy_list(lst: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([1, 7, 4, 9, 5]) -> [5, 9, 4, 7, 1]
([1, 7]) -> [7, 1]
([1]) -> [1]
        }
    }
}

problem Generated/3305 {
code {
        func reverse_copy(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([1, 7, 4, 9, 5]) -> [5, 9, 4, 7, 1]
([1, 7, 4, 9, 5, 2]) -> [2, 5, 9, 4, 7, 1]
([]) -> []
        }
    }
}

problem Generated/3306 {
code {
        func copy_list_and_add_unique(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 3, 4, 5, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
([1, 1, 1, 1, 1]) -> [1]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 1, 2, 1, 3, 1, 4, 1, 5]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/3307 {
code {
        func get_unique_list_with_element(elements: list<int>, elem: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 6) -> [1, 2, 3, 4, 5, 6]
([7, 3, 5, 9, 6], 5) -> [3, 5, 6, 7, 9]
([1, 7, 4, 9, 5], 1) -> [1, 4, 5, 7, 9]
([], 1) -> [1]
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> [1, 2, 3, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/3308 {
code {
        func unique_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 2, 3, 3, 4, 5, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 6, 6, 7]) -> [1, 2, 3, 4, 5, 6, 7]
([]) -> []
([1]) -> [1]
        }
    }
}

problem Generated/3309 {
code {
        func remove_duplicates(items: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1, 4, 5, 4]) -> [1, 2, 3, 4, 5]
([7, 3, 5, 9, 6]) -> [7, 3, 5, 9, 6]
([1, 7, 4, 9, 5]) -> [1, 7, 4, 9, 5]
([1, 7, 4, 9, 5, 1, 4, 7]) -> [1, 7, 4, 9, 5]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [1, 2, 3, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/3310 {
code {
        func copy_and_floor(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 2.5, 3.8, 4.1, 5.9]) -> [1, 2, 3, 4, 5]
([2.3, 4.6, 7.8, 9.1]) -> [2, 4, 7, 9]
([3.3, 2.5, 5.4, 6.6, 8.9]) -> [3, 2, 5, 6, 8]
([9.9, 8.8, 7.7, 6.6, 5.5]) -> [9, 8, 7, 6, 5]
([1.1, 1.5, 1.9, 2.2, 2.9]) -> [1, 1, 1, 2, 2]
        }
    }
}

problem Generated/3311 {
code {
        func copy_and_floor_list(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.4, 2.7, 3.2, 4.9, 5.1]) -> [1, 2, 3, 4, 5]
([2.0, 4.0, 6.0, 8.0]) -> [2, 4, 6, 8]
([7.8, 3.9, 5.1, 9.7, 6.2]) -> [7, 3, 5, 9, 6]
([1.2, 1.5, 1.7]) -> [1, 1, 1]
([2.5, 3.5, 4.5]) -> [2, 3, 4]
        }
    }
}

problem Generated/3312 {
code {
        func copy_list_and_round(numbers: list<double>, decimal_places: int) -> list<int>
    }
    tests {
        template nse {
            ([1.234, 2.345, 3.456], 1) -> [12, 23, 34]
([1.234, 2.345, 3.456], 2) -> [123, 234, 345]
([1.234, 2.345, 3.456], 3) -> [1234, 2345, 3456]
([1.234, 2.345, 3.456], 0) -> [1, 2, 3]
([], 1) -> []
([1.5, 2.7, 3.9], -2) -> [0, 0, 0]
        }
    }
}

problem Generated/3313 {
code {
        func copy_list_and_floor_values(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.5, 2.8, 3.1, 4.7, 5.9]) -> [1, 2, 3, 4, 5]
([6.0, 7.3, 8.6, 9.9]) -> [6, 7, 8, 9]
([-1.5, -2.8, -3.1, -4.7, -5.9]) -> [-2, -3, -4, -5, -6]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 2, 3, 4, 5]
([1.1, 2.5, 3.9, 4.2, 5.8]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/3314 {
code {
        func copy_list_and_floor_values(elements: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 3.7, 8.9, 2.4, 5.6]) -> [1, 3, 8, 2, 5]
([0.1, 1.5, 2.9, 3.3, 4.7]) -> [0, 1, 2, 3, 4]
([0.0, 1.0, 2.0, 3.0, 4.0]) -> [0, 1, 2, 3, 4]
([7.5, 8.3, 9.1, 10.0]) -> [7, 8, 9, 10]
([1.23456789, 2.34567890, 3.45678901]) -> [1, 2, 3]
        }
    }
}

problem Generated/3315 {
code {
        func copy_and_floor_list(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 2.7, 3.1, 4.5, 5.9]) -> [1, 2, 3, 4, 5]
([-1.2, -2.7, -3.1, -4.5, -5.9]) -> [-2, -3, -4, -5, -6]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 2, 3, 4, 5]
([]) -> []
([1.2, -2.7, 3.1, -4.5, 5.9]) -> [1, -3, 3, -5, 5]
        }
    }
}

problem Generated/3316 {
code {
        func copy_and_round_list(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.1, 2.2, 3.3, 4.4, 5.5]) -> [1, 2, 3, 4, 5]
([1.9, 2.1, 3.5, 4.9]) -> [1, 2, 3, 4]
([0.1, 0.2, 0.9, 0.01, 0.99]) -> [0, 0, 0, 0, 0]
([]) -> []
([1.2, -2.3, 3.4, -4.5, 5.6]) -> [1, -3, 3, -5, 5]
        }
    }
}

problem Generated/3317 {
code {
        func copy_and_round_list(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.4, 2.5, 3.6, 4.7, 5.8]) -> [1, 2, 3, 4, 5]
([0.1, 9.9, 5.5, 3.3, 4.6]) -> [0, 9, 5, 3, 4]
([3.14, 2.71, 1.41, 1.61, 1.23]) -> [3, 2, 1, 1, 1]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 2, 3, 4, 5]
([-1.4, -2.5, -3.6, -4.7, -5.8]) -> [-2, -3, -4, -5, -6]
        }
    }
}

problem Generated/3318 {
code {
        func copy_and_round(numbers: list<double>, decimal_places: int) -> list<int>
    }
    tests {
        template nse {
            ([1.234, 2.345, 3.456], 2) -> [123, 234, 345]
([1.234, 2.345, 3.456], 0) -> [1, 2, 3]
([0.1234, 0.5678, 0.9999], 4) -> [1234, 5678, 9999]
([3.14, 2.718, 1.618], 1) -> [31, 27, 16]
([10.0, 11.1, 12.2], 0) -> [10, 11, 12]
        }
    }
}

problem Generated/3319 {
code {
        func split_list_in_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8], 2) -> [[1, 2], [3, 4], [5, 6], [7, 8]]
([1, 2, 3, 4, 5, 6, 7, 8], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8]]
([1, 2, 3, 4, 5, 6, 7, 8], 1) -> [[1], [2], [3], [4], [5], [6], [7], [8]]
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> [[1, 2, 3, 4, 5], [6, 7, 8]]
([1, 2, 3, 4, 5, 6, 7, 8], 10) -> [[1, 2, 3, 4, 5, 6, 7, 8]]
        }
    }
}

problem Generated/3320 {
code {
        func split_list_into_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5], 1) -> [[1], [2], [3], [4], [5]]
([1, 2, 3, 4, 5], 5) -> [[1, 2, 3, 4, 5]]
([1, 2, 3, 4, 5], 6) -> [[1, 2, 3, 4, 5]]
        }
    }
}

problem Generated/3321 {
code {
        func split_list_into_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8]]
([1, 2, 3, 4, 5, 6, 7, 8], 2) -> [[1, 2], [3, 4], [5, 6], [7, 8]]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8]]
([1, 2, 3], 1) -> [[1], [2], [3]]
([1, 2, 3], 5) -> [[1, 2, 3]]
        }
    }
}

problem Generated/3322 {
code {
        func split_list_into_chunks(lst: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([7, 3, 5, 9, 6], 2) -> [[7, 3], [5, 9], [6]]
([1, 7, 4, 9, 5], 5) -> [[1, 7, 4, 9, 5]]
([1, 7, 4, 9, 5], 1) -> [[1], [7], [4], [9], [5]]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8]]
        }
    }
}

problem Generated/3323 {
code {
        func square_root_list(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979]
([9.0, 16.0, 25.0]) -> [3.0, 4.0, 5.0]
([0.0, 0.25, 1.0, 2.25, 4.0]) -> [0.0, 0.5, 1.0, 1.5, 2.0]
([1.0, 4.0, 9.0, 16.0, 25.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.0]) -> [0.0]
        }
    }
}

problem Generated/3324 {
code {
        func copy_and_square_root(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 4.0, 9.0, 16.0, 25.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.0, 1.0, 2.0, 3.0, 4.0]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772, 2.0]
([125.0, 36.0, 64.0, 81.0, 100.0]) -> [11.180339887498949, 6.0, 8.0, 9.0, 10.0]
([1.0, 8.0, 27.0, 64.0, 125.0]) -> [1.0, 2.8284271247461903, 5.196152422706632, 8.0, 11.180339887498949]
([0.0, 0.25, 0.5, 0.75, 1.0]) -> [0.0, 0.5, 0.7071067811865476, 0.8660254037844386, 1.0]
        }
    }
}

problem Generated/3325 {
code {
        func copy_list_and_square(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 4.0, 9.0, 16.0, 25.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([4.0, 9.0, 16.0, 25.0]) -> [2.0, 3.0, 4.0, 5.0]
([1.0, 3.0, 5.0, 7.0, 9.0]) -> [1.0, 1.7320508075688772, 2.23606797749979, 2.6457513110645907, 3.0]
([0.0, 1.0, 2.0, 3.0]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772]
([144.0, 64.0, 16.0, 256.0]) -> [12.0, 8.0, 4.0, 16.0]
        }
    }
}

problem Generated/3326 {
code {
        func square_root_list(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([4.0, 9.0, 16.0, 25.0, 36.0]) -> [2.0, 3.0, 4.0, 5.0, 6.0]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979]
([0.0, 1.0, 2.0, 3.0, 4.0]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772, 2.0]
([1.0, 4.0, 9.0, 16.0, 25.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([]) -> []
        }
    }
}

problem Generated/3327 {
code {
        func pow_list_elements(elements: list<int>, power: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [1, 4, 9, 16, 25]
([1, 2, 3, 4, 5], 0) -> [1, 1, 1, 1, 1]
([1, 2, 3, 4, 5], -1) -> [1, 0, 0, 0, 0]
([-1, 2, -3, 4, -5], 3) -> [-1, 8, -27, 64, -125]
([], 3) -> []
        }
    }
}

problem Generated/3328 {
code {
        func copy_and_power_elements(numbers: list<double>, power: double) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2.0) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([2.0, 2.5, 3.0], 3.0) -> [8.0, 15.625, 27.0]
([1.0, 2.0, 3.0], 0.5) -> [1.0, 1.4142135623730951, 1.7320508075688772]
([1.0, -2.0, 3.0, -4.0], 3.0) -> [1.0, -8.0, 27.0, -64.0]
([], 2.0) -> []
        }
    }
}

problem Generated/3329 {
code {
        func square_each_element(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([0.0, -2.0, 3.0, -4.0, 5.0]) -> [0.0, 4.0, 9.0, 16.0, 25.0]
([]) -> []
([0.5, 2.5, 1.5]) -> [0.25, 6.25, 2.25]
([1.7, 2.9, 3.1, 4.5]) -> [2.89, 8.41, 9.61, 20.25]
        }
    }
}

problem Generated/3330 {
code {
        func pow_each_element(elements: list<double>, power: double) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2.0) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 0.0) -> [1.0, 1.0, 1.0, 1.0, 1.0]
([1.0, -2.0, 3.0, -4.0, 5.0], 3.0) -> [1.0, -8.0, 27.0, -64.0, 125.0]
([], 2.0) -> []
([2.0], 3.0) -> [8.0]
        }
    }
}

problem Generated/3331 {
code {
        func generate_squared_list(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([1.5, 2.5, 3.5, 4.5]) -> [2.25, 6.25, 12.25, 20.25]
([0.0, -1.5, 2.0, -3.5, 4.0]) -> [0.0, 2.25, 4.0, 12.25, 16.0]
([7.8, 2.3, 6.4, 4.7, 9.1]) -> [60.84, 5.29, 40.96, 22.09, 82.81]
([]) -> []
        }
    }
}

problem Generated/3332 {
code {
        func square_elements_in_list(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([1.5, 2.5, 3.5, 4.5, 5.5]) -> [2.25, 6.25, 12.25, 20.25, 30.25]
([0.0, 2.0, 3.4, -4.6, 5.7]) -> [0.0, 4.0, 11.56, 21.16, 32.49]
([0.1, 0.2, 0.3, 0.4, 0.5]) -> [0.010000000000000002, 0.04000000000000001, 0.09, 0.16000000000000003, 0.25]
        }
    }
}

problem Generated/3333 {
code {
        func square_list(nums: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([2.5, 3.7, 4.9, 5.2]) -> [6.25, 13.69, 24.01, 27.04]
([0.0, 1.0, 0.5, 10.2]) -> [0.0, 1.0, 0.25, 104.04]
([0.5, 4.6, 0.3, 2.0, 6.7]) -> [0.25, 21.16, 0.09, 4.0, 44.89]
([]) -> []
        }
    }
}

problem Generated/3334 {
code {
        func power_of_two_list(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 4, 9, 16, 25]
([7, 3, 5, 9, 6]) -> [49, 9, 25, 81, 36]
([1, 7, 4, 9, 5]) -> [1, 49, 16, 81, 25]
([0, -2, 3, -4, 5]) -> [0, 4, 9, 16, 25]
([]) -> []
        }
    }
}

problem Generated/3335 {
code {
        func multiply_list_elements(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 2.0, 6.0, 24.0, 120.0]
([0.5, 2.0, 3.0]) -> [0.5, 1.0, 3.0]
([7.0, 3.0, 5.0, 9.0, 6.0]) -> [7.0, 21.0, 105.0, 945.0, 5670.0]
([-1.0, 2.0, -3.0, 4.0]) -> [-1.0, -2.0, 6.0, 24.0]
([0.0, 7.0, 5.0, 9.0]) -> [0.0, 0.0, 0.0, 0.0]
        }
    }
}

problem Generated/3336 {
code {
        func multiply_all_numbers_in_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 6, 24, 120]
([7, 3, 5, 9, 6]) -> [7, 21, 105, 945, 5670]
([4, -2, 3, -4, 5]) -> [4, -8, -24, 96, 480]
([1, 7, 4, 9, 5]) -> [1, 7, 28, 252, 1260]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [1, 2, 6, 24, 120, 720, 5040, 40320]
        }
    }
}

problem Generated/3337 {
code {
        func multiply_list_elements(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [2, 4, 6, 8, 10]
([]) -> []
([0, 0, 0, 0]) -> [0, 0, 0, 0]
([3]) -> [6]
([2, -3, 0, 5]) -> [4, -6, 0, 10]
        }
    }
}

problem Generated/3338 {
code {
        func multiply_list_by_constant(elements: list<double>, constant: double) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2.0) -> [2.0, 4.0, 6.0, 8.0, 10.0]
([1.0, 2.0, 3.0, 4.0, 5.0], -2.0) -> [-2.0, -4.0, -6.0, -8.0, -10.0]
([0.0, 2.5, -3.0, 4.0, -1.2], 1.0) -> [0.0, 2.5, -3.0, 4.0, -1.2]
([1.0, 2.0, 3.0, 4.0, 5.0], 0.0) -> [0.0, 0.0, 0.0, 0.0, 0.0]
([], 2.0) -> []
        }
    }
}

problem Generated/3339 {
code {
        func multiply_evens_in_list(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 8
([7, 3, 5, 9, 6]) -> 6
([1, 3, 5, 7, 9]) -> 0
([2, 4, 6, 8, 10]) -> 3840
([]) -> 0
        }
    }
}

problem Generated/3340 {
code {
        func split_and_copy_list(s: string, sep: string) -> list<string>
    }
    tests {
        template nse {
            ("apple,banana,orange", ",") -> ["apple", "banana", "orange"]
("apple:banana-orange", "[:,-]") -> ["apple", "banana", "orange"]
(" a b , c  d ", ",") -> ["a b", "c  d"]
("", ":") -> [""]
("Hello world", ",") -> ["Hello world"]
        }
    }
}

problem Generated/3341 {
code {
        func reverse_words(sentence: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "olleh dlrow"
("   hello     world    ") -> "   olleh     dlrow    "
("python is fun") -> "nohtyp si nuf"
(" a b c d e ") -> " a b c d e "
("") -> ""
        }
    }
}

problem Generated/3342 {
code {
        func prime_numbers_sum(limit: int) -> int
    }
    tests {
        template nse {
            (10) -> 17
(20) -> 77
(30) -> 129
(40) -> 197
(50) -> 328
        }
    }
}

problem Generated/3343 {
code {
        func count_unique_elements(lst: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([1, 1, 1, 1, 1]) -> 1
([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) -> 5
([]) -> 0
([1, 2, 3, 2, 3, 4, 3, 4, 5, 4, 5, 6]) -> 6
        }
    }
}

problem Generated/3344 {
code {
        func count_distinct_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([1, 1, 1, 1, 1]) -> 1
([1, 2, 3, 2, 1]) -> 3
([1, 1, 2, 2, 3, 3]) -> 3
([1, 2, 3, 1, 2, 3]) -> 3
        }
    }
}

problem Generated/3345 {
code {
        func count_unique_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> 5
([1, 1, 1, 1, 1, 1, 1]) -> 1
([1, 2, 3, 4, 5]) -> 5
([]) -> 0
([1, 2, 3, 2, 1, 4, 5, 6, 5]) -> 6
        }
    }
}

problem Generated/3346 {
code {
        func count_unique_elements(elements: list<string>) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "banana", "apple"]) -> 3
(["dog", "cat", "parrot"]) -> 3
([]) -> 0
(["apple", "apple", "apple", "apple", "apple"]) -> 1
(["apple", "banana", "apple", "banana"]) -> 2
        }
    }
}

problem Generated/3347 {
code {
        func distinct_absolute_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, -2, 3, -4, 5]) -> 5
([-1, -2, -3, -4, -5]) -> 5
([1, 2, 3, 4, 5]) -> 5
([1, 1, 1, 1, 1]) -> 1
([]) -> 0
        }
    }
}

problem Generated/3348 {
code {
        func sum_unique_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]) -> 15
([1, 2, 3, 4, -4, -3, -2, -1]) -> 0
([1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) -> 6
([]) -> 0
        }
    }
}

problem Generated/3349 {
code {
        func find_sum_of_unique_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) -> 15
([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) -> 15
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 55
([]) -> 0
        }
    }
}

problem Generated/3350 {
code {
        func sum_numbers_with_unique_digits(n: int) -> int
    }
    tests {
        template nse {
            (2) -> 91
(3) -> 739
(4) -> 5275
(5) -> 32491
(1) -> 10
        }
    }
}

problem Generated/3351 {
code {
        func sum_unique_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 15
([1, 1, 2, 2, 3, 3]) -> 6
([1, -2, 0, 3, 0]) -> 2
([0, 0, 0, 0, 0]) -> 0
([1, 3, 5, 7, 9]) -> 25
        }
    }
}

problem Generated/3352 {
code {
        func sum_of_unique_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 3, 2, 1, 4, 5, 6, 5, 4, 7, 8]) -> 36
([1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3]) -> 6
([1, 2, 3, 4, 5]) -> 15
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> 15
([]) -> 0
        }
    }
}

problem Generated/3353 {
code {
        func sum_of_unique_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1, 3, 4, 5, 6, 7, 6]) -> 28
([1, 1, 1, 1, 1, 1]) -> 1
([1, 2, 3, 4, 5]) -> 15
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> 15
([]) -> 0
        }
    }
}

problem Generated/3354 {
code {
        func max_unique_digits(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([11, 22, 33, 44, 55]) -> -1
([12, 34, 56, 78, 90]) -> 90
([123, 45, 67, 89]) -> 123
([111, 222, 333, 444, 555]) -> -1
        }
    }
}

problem Generated/3355 {
code {
        func max_unique_substring(s: string) -> string
    }
    tests {
        template nse {
            ("abcabcbb") -> "abc"
("bbbbbb") -> "b"
("pwwkew") -> "wke"
("") -> ""
("abcdefghijklmnopqrstuvwxyz") -> "abcdefghijklmnopqrstuvwxyz"
        }
    }
}

problem Generated/3356 {
code {
        func find_second_minimum(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 2
([7, 3, 5, 9, 6]) -> 5
([1, 1, 1, 1, 1, 1]) -> -1
([1, 2, 2, 5, 5, 7]) -> 2
([1, 1, 2, 2, 3, 3, 4, 4]) -> 2
        }
    }
}

problem Generated/3357 {
code {
        func get_unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([7, 3, 5, 9, 6, 7]) -> [7, 3, 5, 9, 6]
([1, 7, 4, 9, 5]) -> [1, 7, 4, 9, 5]
([]) -> []
([1, 2, 3, 4, 5, 6, 7, 8]) -> [1, 2, 3, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/3358 {
code {
        func count_distinct_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) -> 5
([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) -> 5
([]) -> 0
([1, 1, 1, 1, 1, 1, 1]) -> 1
        }
    }
}

problem Generated/3359 {
code {
        func remove_duplicates_and_sort(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 3, 4, 5, 5, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([3, 1, 2, 4, 5, 2, 4]) -> [1, 2, 3, 4, 5]
([5, 3, 8, 2, 1, 1, 2, 10, 9, 8]) -> [1, 2, 3, 5, 8, 9, 10]
        }
    }
}

problem Generated/3360 {
code {
        func unique_elements_count(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 3, 2, 1]) -> 5
([1, 1, 1, 1, 1]) -> 1
([]) -> 0
([1, 2, 3, 4, 5]) -> 5
([1, 2, 3, 2, 1, 3, 4, 5]) -> 5
        }
    }
}

problem Generated/3361 {
code {
        func filter_unique_elements_from_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 3, 4, 1, 5, 2]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1]) -> [1]
([1, 2, 3, 3, 3]) -> [1, 2, 3]
([4, 3, 2, 1, 0, 1, 2, 3, 4]) -> [4, 3, 2, 1, 0]
        }
    }
}

problem Generated/3362 {
code {
        func filter_unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 2, 4]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1, 1, 1]) -> [1]
([1, 2, 3, 2, 1, 5, 5]) -> [1, 2, 3, 5]
([3, 4, 5, 6, 7, 8, 9]) -> [3, 4, 5, 6, 7, 8, 9]
([]) -> []
        }
    }
}

problem Generated/3363 {
code {
        func filter_non_duplicate_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 2, 3, 1, 7, 8, 7]) -> [1, 2, 3, 4, 5, 7, 8]
([4, 5, 6, 7, 8, 9, 3, 2, 1]) -> [4, 5, 6, 7, 8, 9, 3, 2, 1]
([1, 2, 3, 4, 5, 2, 3, 1, 7, 8, 7, 4, 5, 9]) -> [1, 2, 3, 4, 5, 7, 8, 9]
([1, 1, 1, 1, 1]) -> [1]
([]) -> []
([1, 2, 3, 4, 5, 6, 7, 8]) -> [1, 2, 3, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/3364 {
code {
        func filter_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 2, 3, 3, 4, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 2, 1]) -> [1, 2, 3]
([7, 3, 5, 9, 6, 3, 7]) -> [7, 3, 5, 9, 6]
([1, 2, 3, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/3365 {
code {
        func filter_unique_even_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 2, 3, 4, 4, 5, 6]) -> [2, 2, 4, 4, 6]
([2, 2, 2, 2, 2]) -> [2, 2, 2, 2, 2]
([1, 3, 5, 7]) -> []
([]) -> []
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [2, 4, 6, 8, 10]
        }
    }
}

problem Generated/3366 {
code {
        func filter_unique_items(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 4, 1, 5, 6, 5]) -> [1, 2, 3, 4, 5, 6]
([7, 3, 5, 9, 6, 5, 7, 3]) -> [7, 3, 5, 9, 6]
([1, 7, 4, 9, 5]) -> [1, 7, 4, 9, 5]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [1, 2, 3, 4, 5, 6, 7, 8]
([]) -> []
        }
    }
}

problem Generated/3367 {
code {
        func filter_unique_strings(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "hello", "world", "python"]) -> ["hello", "world", "python"]
([]) -> []
(["abc", "def", "def", "ghi", "abc"]) -> ["abc", "def", "ghi"]
(["a", "b", "c", "d", "e"]) -> ["a", "b", "c", "d", "e"]
(["aa", "bb", "cc"]) -> ["aa", "bb", "cc"]
        }
    }
}

problem Generated/3368 {
code {
        func get_sorted_set_elements_with_add(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([3, 4, 2, 5, 1]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]) -> [1, 2, 3, 4, 5]
([10, 20, 30, 40, 50]) -> [10, 20, 30, 40, 50]
([]) -> []
        }
    }
}

problem Generated/3369 {
code {
        func sort_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 2, 3, 3, 3, 4, 4, 5]) -> [1, 2, 3, 4, 5]
([3, 3, 0, -1, -1, 2, 2]) -> [-1, 0, 2, 3]
([0, 0, 0, 0, 0]) -> [0]
        }
    }
}

problem Generated/3370 {
code {
        func add_values_to_set(values: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 2, 2, 3, 5, 5]) -> [1, 2, 3, 5]
([]) -> []
([1, 0, -1, 10, -10]) -> [-10, -1, 0, 1, 10]
        }
    }
}

problem Generated/3371 {
code {
        func unique_sorted_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 3, 2, 3, 1, 4, 5, 4]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1]) -> [1]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([]) -> []
([1, 5, 2, 3, 4, 2, 4, 5, 1]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/3372 {
code {
        func sort_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([7, 3, 5, 9, 6, 7, 5]) -> [3, 5, 6, 7, 9]
([1, 7, 4, 9, 5]) -> [1, 4, 5, 7, 9]
([1, 1, 1, 1, 1]) -> [1]
([1, -2, 3, -4, 5, -6, 7, -8]) -> [-8, -6, -4, -2, 1, 3, 5, 7]
        }
    }
}

problem Generated/3373 {
code {
        func sort_unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 2, 1]) -> [1, 2, 3]
([3, 3, 3, 3, 3]) -> [3]
([]) -> []
([5, 2, 4, 1, 3]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/3374 {
code {
        func unique_sorted_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 1, 2, 4, 5, 3, 6]) -> [1, 2, 3, 4, 5, 6]
([1, 2, 1, 2, 1, 2, 1, 2]) -> [1, 2]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([]) -> []
        }
    }
}

problem Generated/3375 {
code {
        func check_unique_set(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([1, 1, 2, 2, 3]) -> false
([1, 1, 1, 1, 1]) -> false
([]) -> true
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> false
        }
    }
}

problem Generated/3376 {
code {
        func is_unique(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([1, 2, 3, 4, 2]) -> false
([]) -> true
([1]) -> true
([1, 1, 1, 1, 1]) -> false
        }
    }
}

problem Generated/3377 {
code {
        func check_uniqueness(items: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([1, 2, 3, 4, 5, 1]) -> false
([1, 1, 1, 1, 1]) -> false
([]) -> true
([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]) -> true
        }
    }
}

problem Generated/3378 {
code {
        func unique_binary_representation(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([129, 130, 131, 132, 133]) -> 5
([255, 253, 251, 249, 247]) -> 5
([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> 10
([0, 1, 2, 4, 8, 16]) -> 6
        }
    }
}

problem Generated/3379 {
code {
        func create_string_from_set(items: list<string>) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "Apple", "BANANA"]) -> "apple-banana-cherry"
(["car", "bus", "train", "CAR", "Bus", "TRAIN"]) -> "bus-car-train"
(["Hello", "World", "hello", "WORLD"]) -> "hello-world"
(["a", "b", "c"]) -> "a-b-c"
([]) -> ""
        }
    }
}

problem Generated/3380 {
code {
        func count_uppercase_words(words: list<string>) -> int
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON"]) -> 3
(["hello", "world", "python"]) -> 0
(["HELLO", "WORLD", "Python"]) -> 2
(["Hello", "WORLD"]) -> 1
([]) -> 0
        }
    }
}

problem Generated/3381 {
code {
        func count_uppercase_words(words: list<string>) -> int
    }
    tests {
        template nse {
            (["HELLO", "WORLD", "PYTHON"]) -> 3
(["Hello", "World", "PYTHON"]) -> 1
(["hello", "world", "python"]) -> 0
([]) -> 0
(["HELLO", "WORLD", "PYTHON", "HELLO", "PYTHON"]) -> 3
        }
    }
}

problem Generated/3382 {
code {
        func get_unique_letters(word: string) -> int
    }
    tests {
        template nse {
            ("hello") -> 4
("world") -> 5
("") -> 0
("abc123") -> 3
("Hello World") -> 7
        }
    }
}

problem Generated/3383 {
code {
        func get_distinct_numbers(numbers: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"]) -> [1, 2, 3, 4, 5]
(["1", "a", "2", "b", "3", "c"]) -> [1, 2, 3]
(["1", "2", "2", "3", "3", "3"]) -> [1, 2, 3]
(["-1", "2", "-2", "3", "3", "-1"]) -> [2, 3]
([]) -> []
        }
    }
}

problem Generated/3384 {
code {
        func add_numbers_from_string(s: string) -> int
    }
    tests {
        template nse {
            ("Hello World 123") -> 123
("abc123def456gh7") -> 586
("1a2b3c4d5e6f7g8h9i0j") -> 45
("The quick brown fox jumps over the lazy dog") -> 0
("") -> 0
        }
    }
}

problem Generated/3385 {
code {
        func add_numbers_from_string(s: string) -> int
    }
    tests {
        template nse {
            ("abcdefg12345") -> 15
("a1b2c3d4e5f6g7") -> 28
("") -> 0
("abc") -> 0
("1234567890") -> 45
        }
    }
}

problem Generated/3386 {
code {
        func replace_values_with_set_index(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [0, 1, 2, 3, 4]
([1, 2, 3, 2, 1]) -> [0, 1, 2, 1, 0]
([1, 2, 3, 4, 5, 2, 4, 3, 1, 5]) -> [0, 1, 2, 3, 4, 1, 3, 2, 0, 4]
([1, 1, 1, 1, 1]) -> [0, 0, 0, 0, 0]
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> [0, 1, 2, 3, 4, 4, 3, 2, 1, 0]
        }
    }
}

problem Generated/3387 {
code {
        func unique_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 1, 2, 4, 5, 3, 6]) -> [1, 2, 3, 4, 5, 6]
([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5]) -> [1, 2, 3, 4, 5]
([7, 3, 5, 9, 6, 7, 3, 9]) -> [7, 3, 5, 9, 6]
([1, 2, 3, 4, 5, 6]) -> [1, 2, 3, 4, 5, 6]
([]) -> []
        }
    }
}

problem Generated/3388 {
code {
        func unique_and_ordered_list(items: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 2, 3, 3]) -> [1, 2, 3]
([1, 2, 3, 4, 4, 5, 5, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
([]) -> []
        }
    }
}

problem Generated/3389 {
code {
        func unique_items_count(items: list<string>) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "apple", "grape", "banana"]) -> 4
([]) -> 0
(["apple", "orange", "apple", "orange"]) -> 2
(["a", "b", "c", "a", "b", "c", "d", "d", "d"]) -> 4
(["hello", "world", "hello"]) -> 2
        }
    }
}

problem Generated/3390 {
code {
        func unique_elements_in_order(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 2, 3, 3, 3, 4, 5, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
([]) -> []
([1, 1, 1, 1, 1]) -> [1]
        }
    }
}

problem Generated/3391 {
code {
        func unique_elements_in_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 3, 4, 4, 5, 5, 5]) -> [1, 2, 3, 4, 5]
([3, 4, 1, 3, 2, 1, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1]) -> [1]
([]) -> []
([1, 2, 3, 4]) -> [1, 2, 3, 4]
([10]) -> [10]
        }
    }
}

problem Generated/3392 {
code {
        func unique_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1, 4, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 2, 1, 4, 5, 4, 3, 2, 1, 5, 6, 7, 6]) -> [1, 2, 3, 4, 5, 6, 7]
([1, 1, 1, 1, 1]) -> [1]
([]) -> []
([1, 0, 2, 0, 3, 0]) -> [1, 0, 2, 3]
        }
    }
}

problem Generated/3393 {
code {
        func get_unique_items_by_order(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 1, 3, 4, 3, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1, 1, 1]) -> [1]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 2, 3, 5, 2, 1]) -> [1, 2, 3, 4, 5]
([]) -> []
        }
    }
}

problem Generated/3394 {
code {
        func unique_elements_in_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1, 4, 5, 4]) -> [1, 2, 3, 4, 5]
([4, 4, 4, 4, 4]) -> [4]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([]) -> []
([1, 2, 2, 1, 5, 6, 7, 5, 4]) -> [1, 2, 5, 6, 7, 4]
        }
    }
}

problem Generated/3395 {
code {
        func unique_numbers(nums: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 2, 3, 4, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1]) -> [1]
([1, 2, 1, 2, 1, 2, 3]) -> [1, 2, 3]
([]) -> []
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        }
    }
}

problem Generated/3396 {
code {
        func unique_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([10, 20, 30, 20, 10]) -> [10, 20, 30]
([1, 2, 3, -1, -2, -3, 0]) -> [1, 2, 3, -1, -2, -3, 0]
([1, 2, 1, 2, 3, 1, 2, 3, 4]) -> [1, 2, 3, 4]
([]) -> []
        }
    }
}

problem Generated/3397 {
code {
        func get_unique_sorted_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([7, 7, 5, 9, 6]) -> [5, 6, 7, 9]
([1, 1, 4, 4, 5]) -> [1, 4, 5]
([1, 7, 4, 9, 5]) -> [1, 4, 5, 7, 9]
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/3398 {
code {
        func find_unique_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 2, 3, 3, 4, 4]) -> [1, 2, 3, 4]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([]) -> []
([-1, 2, -3, 4, -5, 4, 7, 2]) -> [-5, -3, -1, 2, 4, 7]
        }
    }
}

problem Generated/3399 {
code {
        func sort_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([5, 3, 2, 4, 1]) -> [1, 2, 3, 4, 5]
([5, 5, 2, 2, 1]) -> [1, 2, 5]
([]) -> []
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/3400 {
code {
        func remove_duplicates_and_sort(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([7, 5, 5, 7, 1, 2, 1]) -> [1, 2, 5, 7]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([-5, 5, -5, 5, 0, 0]) -> [-5, 0, 5]
([]) -> []
        }
    }
}

problem Generated/3401 {
code {
        func add_unique_elements_to_set(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5, 1, 2, 3]) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 3, 2, 2, 5, 1, 4, 4]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1]) -> [1]
        }
    }
}

problem Generated/3402 {
code {
        func unique_sorted_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1]) -> [1, 2, 3]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1]) -> [1]
([2, 1, 4, 6, 2]) -> [1, 2, 4, 6]
([]) -> []
        }
    }
}

problem Generated/3403 {
code {
        func get_sorted_unique_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) -> [1, 2, 3, 4, 5]
([3, 1, 4, 1, 5, 9, 2, 6, 5, 3]) -> [1, 2, 3, 4, 5, 6, 9]
([]) -> []
([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        }
    }
}

problem Generated/3404 {
code {
        func add_and_sort(elements: list<int>, new_elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [1, 2, 3, 4, 5, 6]
([3, 4, 5, 6], [1, 2, 3]) -> [1, 2, 3, 4, 5, 6]
([1, 2, 3], []) -> [1, 2, 3]
([], [1, 2, 3]) -> [1, 2, 3]
([], []) -> []
        }
    }
}

problem Generated/3405 {
code {
        func find_first_duplicate(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 2, 3]) -> 2
([7, 3, 5, 9, 6]) -> -1
([1, 7, 4, 9, 5, 1]) -> 1
([1, 7, 4, 9, 5, 2, 6, 2, 8]) -> 2
([1, 2, 3, 4, 5, 6, 7, 8]) -> -1
        }
    }
}

problem Generated/3406 {
code {
        func unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1, 4, 3]) -> [1, 2, 3, 4]
([5, 6, 5, 6, 7, 8, 8, 9]) -> [5, 6, 7, 8, 9]
([-1, -2, 0, 1, 2, 3]) -> [-1, -2, 0, 1, 2, 3]
([]) -> []
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/3407 {
code {
        func unique_indices(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 4, 3, 2, 1]) -> [0, 1, 2, 3, 4]
([10, 20, 30, 10, 20, 30, 40, 50]) -> [0, 1, 2, 6, 7]
([1, 1, 1, 1, 1]) -> [0]
([-1, -2, -3, -4, -5]) -> [0, 1, 2, 3, 4]
([1, 2, 3, 4, 5]) -> [0, 1, 2, 3, 4]
        }
    }
}

problem Generated/3408 {
code {
        func reverse_and_remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 2, 3, 4, 5, 5]) -> [5, 4, 3, 2, 1]
([7, 3, 5, 9, 6]) -> [6, 9, 5, 3, 7]
([1, 1, 1, 1, 1]) -> [1]
([-1, -2, -3, -2, -1]) -> [-1, -2, -3]
([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3]) -> [3, 2, 1, 8, 7, 6, 5, 4]
        }
    }
}

problem Generated/3409 {
code {
        func reverse_and_remove_duplicates(items: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [5, 4, 3, 2, 1]
([1, 1, 2, 2, 3, 3]) -> [3, 2, 1]
([5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([]) -> []
([1, 2, 1, 4, 3, 4, 5, 6, 5]) -> [5, 6, 4, 3, 1, 2]
        }
    }
}

problem Generated/3410 {
code {
        func create_unique_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1, 4]) -> [1, 2, 3, 4]
([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1]) -> [1]
([]) -> []
([1, 2, 3, -1, -2, -3]) -> [1, 2, 3, -1, -2, -3]
([1, 2, 3, 1, -1, -1, 2, 3]) -> [1, 2, 3, -1]
        }
    }
}

problem Generated/3411 {
code {
        func unique_elements_in_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 1, 4, 5]) -> [1, 2, 4, 5]
([1, 1, 1, 1, 1]) -> [1]
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5]
([]) -> []
([1, 1, 2, 2, 3, 3, 4, 4]) -> [1, 2, 3, 4]
        }
    }
}

problem Generated/3412 {
code {
        func unique_elements_in_lists(lists: list<list<int>>) -> list<int>
    }
    tests {
        template nse {
            ([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) -> [1, 2, 3, 4, 5]
([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
([[1, 2, 3], [4, 5, 6], [7, 2, 9]]) -> [1, 2, 3, 4, 5, 6, 7, 9]
([[], [2, 3, 4], [3, 4, 5]]) -> [2, 3, 4, 5]
([]) -> []
        }
    }
}

problem Generated/3413 {
code {
        func unique_elements_append(elements: list<int>, new_elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
([1, 2, 3, 4, 5], [6, 3, 8, 4, 10]) -> [1, 2, 3, 4, 5, 6, 8, 10]
([], [6, 3, 8, 4, 10]) -> [6, 3, 8, 4, 10]
([1, 2, 3, 4, 5], []) -> [1, 2, 3, 4, 5]
([], []) -> []
        }
    }
}

problem Generated/3414 {
code {
        func get_unique_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5, 1, 2, 3]) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1]) -> [1]
([]) -> []
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        }
    }
}

problem Generated/3415 {
code {
        func remove_duplicates(items: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 2, 3, 3]) -> [1, 2, 3]
([]) -> []
([1, 2, 3, -1, -2, -3]) -> [1, 2, 3, -1, -2, -3]
([1, 2, 3, 3, 2, 1, 1, 2, 3]) -> [1, 2, 3]
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
        }
    }
}

problem Generated/3416 {
code {
        func unique_lists(lists: list<list<int>>) -> list<list<int>>
    }
    tests {
        template nse {
            ([[1, 2, 3], [4, 5, 6], [1, 2, 3], [7, 8, 9]]) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) -> [[1, 2, 3]]
([[], [], [], []]) -> [[]]
([[], [1], [1], [1, 2], [1, 2], [1, 2], [1, 2, 3]]) -> [[], [1], [1, 2], [1, 2, 3]]
([]) -> []
        }
    }
}

problem Generated/3417 {
code {
        func count_unique_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([1, 2, 1, 4, 3, 2, 5]) -> 5
([]) -> 0
([1, 1, 1, 1]) -> 1
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 10
        }
    }
}

problem Generated/3418 {
code {
        func count_unique_values(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([1, 1, 2, 2, 3, 3]) -> 3
([]) -> 0
([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) -> 5
([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) -> 10
        }
    }
}

problem Generated/3419 {
code {
        func count_distinct_integers(numbers: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 5
([1.0, 2.0, 3.0, 4.0, 4.0]) -> 4
([1.1, 2.2, 3.3, 4.4, 5.5]) -> 0
([1.0, 2.0, 3.5, 4.7, 5.0]) -> 3
([1.0, 1.0, 1.0, 1.0, 1.0]) -> 1
        }
    }
}

problem Generated/3420 {
code {
        func get_num_of_packs(items: list<string>, pack_size: int) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "durian"], 2) -> 2
(["apple", "banana", "cherry", "durian"], 3) -> 2
(["apple", "banana", "cherry", "durian", "apple"], 2) -> 2
(["apple", "banana", "cherry", "durian", "apple", "banana", "cherry", "durian"], 3) -> 2
(["apple"], 2) -> 1
        }
    }
}

problem Generated/3421 {
code {
        func generate_power_set(elements: list<int>) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3]) -> [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]
([4, 5, 6]) -> [[], [4], [5], [4, 5], [6], [4, 6], [5, 6], [4, 5, 6]]
([7, 8]) -> [[], [7], [8], [7, 8]]
([1]) -> [[], [1]]
([]) -> [[]]
([10, 20, 30, 40]) -> [[], [10], [20], [10, 20], [30], [10, 30], [20, 30], [10, 20, 30], [40], [10, 40], [20, 40], [10, 20, 40], [30, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]
        }
    }
}

problem Generated/3422 {
code {
        func sum_of_unique_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 1]) -> 6
([1, 1, 1, 1, 1]) -> 1
([1, 2, 3, 4, 5]) -> 15
([1, 2, 3, 4, 5, 4, 3, 2, 1]) -> 15
([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) -> 15
        }
    }
}

problem Generated/3423 {
code {
        func get_unique_list_from_lists(lists: list<list<int>>) -> list<int>
    }
    tests {
        template nse {
            ([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) -> [1, 2, 3, 4, 5]
([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 1, 2]]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
([[], [1, 2, 3], [2, 3, 4, 5]]) -> [1, 2, 3, 4, 5]
([[1, 2], [], [3, 4]]) -> [1, 2, 3, 4]
([[1, 1, 2, 2], [2, 3, 3], [3, 4, 4]]) -> [1, 2, 3, 4]
        }
    }
}

problem Generated/3424 {
code {
        func get_dict_elements(keys: list<string>, values: list<int>, search_keys: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["a", "b", "c", "d", "e"], [1, 2, 3, 4, 5], ["a", "b", "e"]) -> [1, 2, 5]
(["apple", "banana", "cherry"], [2, 3, 4], ["banana", "orange", "cherry"]) -> [3, 4]
(["a", "b", "c"], [1, 2, 3], ["d"]) -> []
([], [], ["a"]) -> []
(["a", "b", "c"], [1, 2, 3], ["b", "c", "a"]) -> [2, 3, 1]
        }
    }
}

problem Generated/3425 {
code {
        func filter_words_by_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "grape", "pineapple"], "a") -> ["apple"]
(["apple", "banana", "orange", "grape", "pineapple"], "p") -> ["pineapple"]
(["apple", "banana", "Orange", "grape", "Pineapple"], "p") -> ["Pineapple"]
([], "a") -> []
(["a", "aa", "aaa", "ab", "abc"], "a") -> ["a", "aa", "aaa", "ab", "abc"]
        }
    }
}

problem Generated/3426 {
code {
        func count_words_with_prefix(words: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "cherry"], "a") -> 1
(["apple", "banana", "cherry"], "c") -> 1
(["apple", "banana", "cherry"], "b") -> 1
(["apple", "banana", "cherry"], "d") -> 0
([], "a") -> 0
        }
    }
}

problem Generated/3427 {
code {
        func count_words(sentence: string, words: list<string>) -> int
    }
    tests {
        template nse {
            ("How many wood would a woodchuck chuck", ["wood", "chuck"]) -> 2
("The quick brown fox jumps over the lazy dog", ["the", "over", "is"]) -> 2
("The quick brown fox jumps over the lazy dog", []) -> 0
("The quick brown fox jumps over the lazy dog", ["dog"]) -> 1
("Jack and Jill went up the hill to fetch a pail of water", ["hill", "water"]) -> 2
        }
    }
}

problem Generated/3428 {
code {
        func count_unique_values(values: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 5
([1, 1, 1, 1, 1]) -> 1
([3, 2, 1, 2, 3]) -> 3
([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) -> 5
([]) -> 0
        }
    }
}

problem Generated/3429 {
code {
        func get_item_count(items: list<string>, target: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "banana", "kiwi", "banana"], "banana") -> 3
(["apple", "banana", "orange", "banana", "kiwi", "banana"], "mango") -> 0
(["apple", "banana", "orange", "banana", "kiwi", "banana"], "kiwi") -> 1
([], "apple") -> 0
(["apple"], "mango") -> 0
        }
    }
}

problem Generated/3430 {
code {
        func get_word_frequency(sentence: string, words: list<string>) -> list<int>
    }
    tests {
        template nse {
            ("The quick brown fox jumps over the lazy dog", ["the", "fox", "lazy"]) -> [2, 1, 1]
("Hello World! This is a test string", ["hello", "test", "world"]) -> [1, 1, 1]
("Python is a great programming language", ["java", "html", "python"]) -> [0, 0, 1]
("I love Python, Python is awesome", ["python", "awesome", "java"]) -> [2, 1, 0]
("", ["hello", "world", "python"]) -> [0, 0, 0]
        }
    }
}

problem Generated/3431 {
code {
        func generate_dict_keys(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["1", "2", "3", "4", "5"]
(3) -> ["1", "2", "3"]
(0) -> []
(1) -> ["1"]
(10) -> ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
        }
    }
}

problem Generated/3432 {
code {
        func generate_list_from_keys(keys: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["key", "not key", "key", "key", "not key"]) -> [0, 2, 3]
(["key", "key", "key", "key", "key"]) -> [0, 1, 2, 3, 4]
(["not key", "not key", "not key"]) -> []
(["key", "not key", "key", "not key", "key"]) -> [0, 2, 4]
(["not key", "not key", "key", "not key"]) -> [2]
        }
    }
}

problem Generated/3433 {
code {
        func generate_dict_keys(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["key_0", "key_1", "key_2", "key_3", "key_4"]
(1) -> ["key_0"]
(0) -> []
(10) -> ["key_0", "key_1", "key_2", "key_3", "key_4", "key_5", "key_6", "key_7", "key_8", "key_9"]
(3) -> ["key_0", "key_1", "key_2"]
        }
    }
}

problem Generated/3434 {
code {
        func remove_dict_keys_from_list(keys: list<string>, dat: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["a", "b", "c"], ["a", "b", "c", "d", "e"]) -> ["d", "e"]
([], ["a", "b", "c", "d", "e"]) -> ["a", "b", "c", "d", "e"]
(["a", "c"], ["a", "b", "c"]) -> ["b"]
(["apple", "banana", "orange"], ["apple", "banana", "orange"]) -> []
(["apple", "banana", "orange"], ["mango", "papaya", "kiwi"]) -> ["mango", "papaya", "kiwi"]
        }
    }
}

problem Generated/3435 {
code {
        func get_indexes(lst: list<int>, value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 2, 5, 2], 2) -> [1, 3, 5]
([1, 2, 3, 2, 5, 2], 5) -> [4]
([1, 2, 3, 2, 5, 2], 9) -> []
([1, 1, 1, 1, 1, 1], 1) -> [0, 1, 2, 3, 4, 5]
([0, 0, 0, 0, 0, 0], 1) -> []
        }
    }
}

problem Generated/3436 {
code {
        func calculate_num_of_pages(num_of_items: int, items_per_page: int) -> int
    }
    tests {
        template nse {
            (10, 2) -> 5
(20, 3) -> 7
(30, 4) -> 8
(15, 5) -> 3
(6, 10) -> 1
        }
    }
}

problem Generated/3437 {
code {
        func zip_with_higher_age(names: list<string>, ages: list<int>, threshold_age: int) -> list<string>
    }
    tests {
        template nse {
            (["Alice", "Bob", "Charlie", "David"], [25, 30, 35, 40], 30) -> ["Charlie", "David"]
(["Alice", "Bob", "Charlie"], [25, 30, 35], 25) -> ["Bob", "Charlie"]
(["Alice", "Bob"], [25, 30], 40) -> []
([], [], 30) -> []
(["Alice", "Bob", "Charlie"], [25, 30, 35], 0) -> ["Alice", "Bob", "Charlie"]
        }
    }
}

problem Generated/3438 {
code {
        func get_values_of_dept(dat: string, dept: string) -> list<int>
    }
    tests {
        template nse {
            ("dep1:10\ndep2:20\ndep1:30\ndep3:40", "dep1") -> [10, 30]
("dep1:10\ndep2:20\ndep1:30\ndep3:40", "dep2") -> [20]
("dep1:10\ndep2:20\ndep1:30\ndep3:40", "dep3") -> [40]
("", "dep1") -> []
("dep1:10\ndep2:20\ndep1:30\ndep3:40", "dep4") -> []
        }
    }
}

problem Generated/3439 {
code {
        func replace_values_in_list(elements: list<string>, old_vals: list<string>, new_value: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date"], ["apple", "banana"], "kiwi") -> ["kiwi", "kiwi", "cherry", "date"]
(["apple", "banana", "cherry", "date"], ["apple", "grape"], "kiwi") -> ["kiwi", "banana", "cherry", "date"]
(["apple", "banana", "cherry", "date"], ["grape"], "kiwi") -> ["apple", "banana", "cherry", "date"]
([], ["grape"], "kiwi") -> []
(["apple", "banana", "cherry", "date"], [], "kiwi") -> ["apple", "banana", "cherry", "date"]
        }
    }
}

problem Generated/3440 {
code {
        func replace_values_in_list(elements: list<string>, old_values: list<string>, new_values: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange"], ["apple", "orange"], ["watermelon", "cherry"]) -> ["watermelon", "banana", "cherry"]
(["ab", "cd", "ef"], ["cd", "ef"], ["12", "34"]) -> ["ab", "12", "34"]
(["ab", "cd", "ef"], ["gh", "ij"], ["12", "34"]) -> ["ab", "cd", "ef"]
(["a", "b", "c", "a", "d"], ["a", "d"], ["x", "y"]) -> ["x", "b", "c", "x", "y"]
(["apple", "banana", "orange"], [], []) -> ["apple", "banana", "orange"]
        }
    }
}

problem Generated/3441 {
code {
        func replace_values_in_list(elements: list<string>, old_values: list<string>, new_value: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "mango", "banana", "apple"], ["apple", "banana"], "fruit") -> ["fruit", "fruit", "orange", "mango", "fruit", "fruit"]
(["a", "b", "c", "d", "e"], ["a", "c", "e"], "vowel") -> ["vowel", "b", "vowel", "d", "vowel"]
(["apple", "banana", "orange", "mango", "banana", "apple"], ["", "banana"], "fruit") -> ["apple", "fruit", "orange", "mango", "fruit", "apple"]
(["apple", "banana", "orange", "mango", "banana", "apple"], ["grape", "kiwi"], "fruit") -> ["apple", "banana", "orange", "mango", "banana", "apple"]
([], ["grape", "kiwi"], "fruit") -> []
        }
    }
}

problem Generated/3442 {
code {
        func remove_duplicates(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]
([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) -> [1, 2, 3, 4, 5]
([1, 2, 1, 3, 2, 4, 5, 4]) -> [1, 2, 3, 4, 5]
([]) -> []
([5, 4, 3, 2, 1]) -> [5, 4, 3, 2, 1]
        }
    }
}

problem Generated/3443 {
code {
        func get_total_word_count(txt: string) -> int
    }
    tests {
        template nse {
            ("Hello, how are you?") -> 4
("I am fine. And you?") -> 5
("") -> 0
("   ") -> 0
("Hello,   world!  ") -> 2
        }
    }
}

problem Generated/3444 {
code {
        func encode_string(input_s: string) -> string
    }
    tests {
        template nse {
            ("aabccddd") -> "a2b1c2d3"
("abcd") -> "a1b1c1d1"
("zzzzzzzzzz") -> "z10"
("") -> ""
("aaaaabbbBc") -> "a5b3B1c1"
        }
    }
}

problem Generated/3445 {
code {
        func get_power_of_num(num: int, power: int) -> list<int>
    }
    tests {
        template nse {
            (2, 4) -> [1, 2, 4, 8, 16]
(3, 3) -> [1, 3, 9, 27]
(10, 2) -> [1, 10, 100]
(5, 0) -> [1]
(0, 5) -> [1, 0, 0, 0, 0, 0]
        }
    }
}

problem Generated/3446 {
code {
        func get_even_numbers(n: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [0, 2, 4, 6, 8]
(5) -> [0, 2, 4]
(1) -> [0]
(0) -> []
(15) -> [0, 2, 4, 6, 8, 10, 12, 14]
        }
    }
}

problem Generated/3447 {
code {
        func generate_divisible_by(divisor: int, limit: int) -> list<int>
    }
    tests {
        template nse {
            (2, 10) -> [0, 2, 4, 6, 8]
(3, 20) -> [0, 3, 6, 9, 12, 15, 18]
(4, 15) -> [0, 4, 8, 12]
(5, 5) -> [0]
(7, 30) -> [0, 7, 14, 21, 28]
        }
    }
}

problem Generated/3448 {
code {
        func get_floored_squares(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [0, 1, 4, 9, 16]
(1) -> [0]
(0) -> []
(10) -> [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
(15) -> [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196]
        }
    }
}

problem Generated/3449 {
code {
        func get_divisible_numbers(n: int, divisor: int) -> list<int>
    }
    tests {
        template nse {
            (10, 2) -> [0, 2, 4, 6, 8, 10]
(15, 3) -> [0, 3, 6, 9, 12, 15]
(20, 5) -> [0, 5, 10, 15, 20]
(25, 6) -> [0, 6, 12, 18, 24]
(30, 7) -> [0, 7, 14, 21, 28]
        }
    }
}

problem Generated/3450 {
code {
        func generate_squares_of_n_numbers(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [0, 1, 4, 9, 16]
(0) -> []
(1) -> [0]
(2) -> [0, 1]
(10) -> [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
        }
    }
}

problem Generated/3451 {
code {
        func get_even_numbers(n: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [0, 2, 4, 6, 8, 10]
(5) -> [0, 2, 4]
(16) -> [0, 2, 4, 6, 8, 10, 12, 14, 16]
(1) -> [0]
(0) -> [0]
        }
    }
}

problem Generated/3452 {
code {
        func generate_floored_range(start: double, last: double) -> list<int>
    }
    tests {
        template nse {
            (1.5, 6.9) -> [1, 2, 3, 4, 5, 6]
(-1.5, 1.5) -> [-2, -1, 0, 1]
(1.1, 1.2) -> [1]
(5.0, 5.5) -> [5]
(-10.1, -5.5) -> [-11, -10, -9, -8, -7, -6]
        }
    }
}

problem Generated/3453 {
code {
        func split_list_into_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([7, 3, 5, 9, 6], 3) -> [[7, 3, 5], [9, 6]]
([1, 7, 4, 9, 5], 1) -> [[1], [7], [4], [9], [5]]
([], 5) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8]]
        }
    }
}

problem Generated/3454 {
code {
        func absolute_floor(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.1, 2.4, -3.6, -4.9, 5.0]) -> [1, 2, 3, 4, 5]
([0.0, -2.2, 3.3, -4.4, 5.5]) -> [0, 2, 3, 4, 5]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1, 2, 3, 4, 5]
([0.4, -0.6, 0.3, -0.9, 0.5]) -> [0, 0, 0, 0, 0]
([1.9, 2.3, 3.6, 4.9, 5.0]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/3455 {
code {
        func get_rounded_abs_list(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, -2.4, 3.5, -4.8, 5.1]) -> [1, 2, 3, 4, 5]
([-1.2, 2.4, -3.5, 4.8, -5.1]) -> [1, 2, 3, 4, 5]
([0.0, -2.0, 3.4, -4.7, 5.2]) -> [0, 2, 3, 4, 5]
([0.1, -2.6, 3.9, -4.2, 5.5]) -> [0, 2, 3, 4, 5]
([1.1, 2.2, 3.3, 4.4, 5.5]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/3456 {
code {
        func sum_of_digits(num: int) -> int
    }
    tests {
        template nse {
            (1234) -> 10
(0) -> 0
(45712) -> 19
(213) -> 6
(999999999) -> 81
        }
    }
}

problem Generated/3457 {
code {
        func calculate_average_of_list(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 3.0
([1.0, -2.0, 3.0, -4.0, 5.0]) -> 0.0
([3.4, 5.6, 7.8]) -> 5.0
([10.0, 20.0, 30.0]) -> 20.0
([-1.0, 2.0, -3.0, 4.0, -5.0]) -> -1.0
        }
    }
}

problem Generated/3458 {
code {
        func sum_of_largest_ints(numbers: list<int>, k: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 12
([7, 3, 5, 9, 6], 2) -> 16
([1, 7, 4, 9, 5], 5) -> 26
([1, 7, 4, 9, 5], 0) -> 0
([1, 2, 3, 4, 5, 6, 7, 8], 10) -> 36
        }
    }
}

problem Generated/3459 {
code {
        func max_floor(numbers: list<double>) -> int
    }
    tests {
        template nse {
            ([1.3, 2.4, 3.5, 4.6, 5.7]) -> 5
([2.5, 3.3, 4.9, 5.1, 6.7]) -> 6
([1.1, 2.2, 3.3, 4.4, 5.5]) -> 5
([5.3, 3.8, 1.2, 4.4, 2.6]) -> 5
([1.9, 2.8, 3.1, 4.5, 5.7, 6.2]) -> 6
        }
    }
}

problem Generated/3460 {
code {
        func compute_min_square(area: int) -> int
    }
    tests {
        template nse {
            (16) -> 16
(20) -> 20
(100) -> 100
(29) -> 29
(36) -> 36
        }
    }
}

problem Generated/3461 {
code {
        func find_min_floor_dividend(dividlast: int, divisors: list<int>) -> int
    }
    tests {
        template nse {
            (12, [2, 3, 4, 6]) -> 2
(16, [2, 5, 7, 8]) -> 2
(25, [2, 5, 7, 8]) -> 3
(50, [3, 7, 10, 15]) -> 3
(100, [10, 20, 30, 40]) -> 2
        }
    }
}

problem Generated/3462 {
code {
        func find_min_floor_element(elements: list<double>) -> int
    }
    tests {
        template nse {
            ([1.2, 1.5, 1.8, 2.1, 2.4]) -> 1
([1.7, 2.3, 3.8, 4.5, 5.0]) -> 1
([2.9, 3.5, 4.2, 5.6, 6.7]) -> 2
([-2.3, -1.5, 0.1, 0.5, 1.9]) -> -3
([0.1, 0.2, 0.3, 0.4, 0.5]) -> 0
        }
    }
}

problem Generated/3463 {
code {
        func average_scores(scores: list<list<int>>) -> list<int>
    }
    tests {
        template nse {
            ([[90, 80, 85], [82, 92, 96], [89, 91, 90], [96, 95, 94]]) -> [89, 89, 91]
([[70, 60], [80, 70], [90, 100], [45, 65], [67, 45]]) -> [70, 68]
([[100], [90], [80], [70]]) -> [85]
([[50, 60, 70, 80], [100, 90, 80, 70]]) -> [75, 75, 75, 75]
([[10, 20], [30, 40], [50, 60], [70, 80]]) -> [40, 50]
        }
    }
}

problem Generated/3464 {
code {
        func floor_divide_lists(nums1: list<int>, nums2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) -> [1, 1, 1, 1, 1]
([10, 20, 30], [3, 4, 5]) -> [3, 5, 6]
([1, 2, 3], [4, 5, 6]) -> [0, 0, 0]
([10, 20, 30], [1, 2, 3]) -> [10, 10, 10]
([100, 200, 300], [1, 10, 100]) -> [100, 20, 3]
        }
    }
}

problem Generated/3465 {
code {
        func get_floored_division(numbers1: list<double>, numbers2: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([5.0, 9.0, 13.0], [2.0, 3.0, 4.0]) -> [2, 3, 3]
([20.0, 40.0, 60.0], [4.0, 5.0, 6.0]) -> [5, 8, 10]
([10.0, 20.0, 30.0], [1.0, 2.0, 3.0]) -> [10, 10, 10]
([1.0, 2.0, 3.0], [4.0, 5.0, 6.0]) -> [0, 0, 0]
([3.0, 5.0, 7.0], [1.0, -2.0, 4.0]) -> [3, -3, 1]
        }
    }
}

problem Generated/3466 {
code {
        func get_even_index_values(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 3.0, 5.0]
([7.0, 3.5, 5.4, 9.1, 6.7, 2.3]) -> [7.0, 5.4, 6.7]
([]) -> []
([1.0]) -> [1.0]
([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]) -> [1.0, 3.0, 5.0, 7.0]
        }
    }
}

problem Generated/3467 {
code {
        func floor_list_elements(elements: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.1, 2.9, 3.0, 4.4, 5.5]) -> [1, 2, 3, 4, 5]
([7.8, 3.2, 5.6, 9.4, 6.0]) -> [7, 3, 5, 9, 6]
([1.9, 7.4, 4.1, 9.9, 5.5]) -> [1, 7, 4, 9, 5]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 2, 3, 4, 5]
([0.1, 0.2, 0.99, 0.001, 0.5]) -> [0, 0, 0, 0, 0]
        }
    }
}

problem Generated/3468 {
code {
        func round_down_elements(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.1, 2.5, 3.8, 4.2, 5.9]) -> [1, 2, 3, 4, 5]
([7.3, 3.5, 5.2, 9.7, 6.0]) -> [7, 3, 5, 9, 6]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 2, 3, 4, 5]
([0.9, -2.3, 3.9, -4.8, 5.2]) -> [0, -3, 3, -5, 5]
([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]) -> [0, 0, 0, 0, 0, 0, 0, 0, 0]
        }
    }
}

problem Generated/3469 {
code {
        func get_unique_list(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 2, 3, 4, 5]
([1.5, 2.5, 3.5, 4.5, 5.5]) -> [1, 2, 3, 4, 5]
([1.1, 2.2, 3.3, 4.4, 5.5]) -> [1, 2, 3, 4, 5]
([5.5, 4.4, 3.3, 2.2, 1.1]) -> [1, 2, 3, 4, 5]
([1.0, 2.0, 3.0, 3.0, 2.0, 1.0]) -> [1, 2, 3]
        }
    }
}

problem Generated/3470 {
code {
        func get_unique_lower_bound(numbers: list<double>, divisor: int) -> int
    }
    tests {
        template nse {
            ([7.0, 15.0, 23.0, 31.0, 39.0], 5) -> 1
([7.0, 15.0, 23.0, 31.0, 39.0], 10) -> 0
([7.0, 15.0, 23.0, 31.0, 39.0], 15) -> 0
([7.0, 15.0, 23.0, 31.0, 39.0], 20) -> 0
([7.0, 15.0, 23.0, 31.0, 39.0], 25) -> 0
        }
    }
}

problem Generated/3471 {
code {
        func filter_odd_elements(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.4, 4.5, 5.6]) -> [1.0, 3.0, 5.0]
([2.0, 4.0, 6.0, 8.0]) -> []
([1.2, 3.4, 5.6, 7.8]) -> [1.0, 3.0, 5.0, 7.0]
([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, 3.0, 5.0]
([1.9, 2.9, 3.9, 4.2, 5.5, 6.0]) -> [1.0, 3.0, 5.0]
        }
    }
}

problem Generated/3472 {
code {
        func filter_odd_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [1, 3, 5, 7, 9]
([2, 4, 6, 8, 10]) -> []
([1, 3, 5, 7, 9]) -> [1, 3, 5, 7, 9]
([0, 1, 2, 3, 4, 5, 6]) -> [1, 3, 5]
([-5, -3, -1, 0, 2, 4, 6]) -> [-5, -3, -1]
        }
    }
}

problem Generated/3473 {
code {
        func get_floor_sorted_list(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 3.5, 2.8, 5.3, 4.1]) -> [1, 2, 3, 4, 5]
([4.9, 7.2, 3.5, 2.1, 1.9]) -> [1, 2, 3, 4, 7]
([]) -> []
([0.1, 0.9, 1.1, 1.9, 2.1]) -> [0, 0, 1, 1, 2]
([-3.4, -2.1, -1.5, 0.0, 1.5, 2.1, 3.4]) -> [-4, -3, -2, 0, 1, 2, 3]
        }
    }
}

problem Generated/3474 {
code {
        func check_list_elements(elements: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> true
([1.0, 2.5, 3.0, 4.8, 5.0]) -> false
([0.0, 0.5, -3.0, 5.8, -6.0]) -> false
([5.0]) -> true
([1.2, 2.2, -3.3, 4.4, -5.5]) -> false
        }
    }
}

problem Generated/3475 {
code {
        func count_binary_ones(n: int) -> int
    }
    tests {
        template nse {
            (5) -> 2
(16) -> 1
(255) -> 8
(1024) -> 1
(1023) -> 10
        }
    }
}

problem Generated/3476 {
code {
        func count_binary_set_bits(n: int) -> int
    }
    tests {
        template nse {
            (5) -> 2
(123) -> 6
(8) -> 1
(0) -> 0
(127) -> 7
        }
    }
}

problem Generated/3477 {
code {
        func get_binary_digits(num: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [1, 0, 1, 0]
(7) -> [1, 1, 1]
(0) -> [0]
(15) -> [1, 1, 1, 1]
(31) -> [1, 1, 1, 1, 1]
        }
    }
}

problem Generated/3478 {
code {
        func format_seconds(seconds: int) -> string
    }
    tests {
        template nse {
            (3600) -> "01:00:00"
(5000) -> "01:23:20"
(12345) -> "03:25:45"
(666) -> "00:11:06"
(60) -> "00:01:00"
        }
    }
}

problem Generated/3479 {
code {
        func convert_list_to_string(elements: list<double>, separator: string) -> string
    }
    tests {
        template nse {
            ([1.2, 2.4, 3.6, 4.8, 5.0], ",") -> "1,2,3,4,5"
([1.5, 2.9, 3.1, 4.3, 5.8], "-") -> "1-2-3-4-5"
([0.5, 1.9, 2.1, 3.3, 4.8], ".") -> "0.1.2.3.4"
([1.2, 2.4, 3.6, 4.8, 5.0], "") -> "12345"
([1.1, 2.2, 3.3, 4.4, 5.5], " ") -> "1 2 3 4 5"
        }
    }
}

problem Generated/3480 {
code {
        func concat_strings_lower(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["Hello", "World", "!"]) -> "helloworld!"
(["AbC", "DeF", "GhI"]) -> "abcdefghi"
(["abc", "12", "XYZ", "34"]) -> "abc12xyz34"
(["mno", "PqR", "stU", "vWxYz"]) -> "mnopqrstuvwxyz"
(["@#$%^&", "123", "QwErTy", "[]{}"]) -> "@#$%^&123qwerty[]{}"
        }
    }
}

problem Generated/3481 {
code {
        func get_lowered_list(strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "HOW", "aRE", "yOU"]) -> ["hello", "world", "how", "are", "you"]
(["The", "QUICK", "broWn", "FOX"]) -> ["the", "quick", "brown", "fox"]
([]) -> []
(["ONE"]) -> ["one"]
(["one", "1", "two", "2"]) -> ["one", "1", "two", "2"]
        }
    }
}

problem Generated/3482 {
code {
        func get_lowered_elements(elements: list<string>, num_elements: int) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "good", "BYE"], 3) -> ["hello", "world", "good"]
(["Python", "is", "AWESOME"], 2) -> ["python", "is"]
([], 5) -> []
(["This", "will", "test"], 1) -> ["this"]
(["math", "functools", "typing"], 0) -> []
        }
    }
}

problem Generated/3483 {
code {
        func convert_list_elements_to_uppercase(elements: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "grape", "watermelon"]) -> ["APPLE", "BANANA", "ORANGE", "GRAPE", "WATERMELON"]
(["Hello", "World", "!!"]) -> ["HELLO", "WORLD", "!!"]
(["a", "b", "c", "d", "e"]) -> ["A", "B", "C", "D", "E"]
(["This", "is", "a", "list", "of", "strings"]) -> ["THIS", "IS", "A", "LIST", "OF", "STRINGS"]
(["123", "456", "789"]) -> ["123", "456", "789"]
        }
    }
}

problem Generated/3484 {
code {
        func convert_to_floor_and_upper(elements: list<double>) -> list<string>
    }
    tests {
        template nse {
            ([1.4, 2.8, 3.2, 4.6, 5.0]) -> ["1", "2", "3", "4", "5"]
([0.1, 1.0, 2.5, 3.9]) -> ["0", "1", "2", "3"]
([3.14159265359, 2.71828182846]) -> ["3", "2"]
([9.99, 8.88, 7.77]) -> ["9", "8", "7"]
([5.5, 4.4, 3.3, 2.2, 1.1, 0.0]) -> ["5", "4", "3", "2", "1", "0"]
        }
    }
}

problem Generated/3485 {
code {
        func round_down_and_uppercase(numbers: list<double>) -> list<string>
    }
    tests {
        template nse {
            ([1.1, 2.2, 3.3, 4.4, 5.5]) -> ["1", "2", "3", "4", "5"]
([6.6, 7.7, 8.8, 9.9]) -> ["6", "7", "8", "9"]
([1.5, 2.3, 3.8, 4.1, 5.9]) -> ["1", "2", "3", "4", "5"]
([0.3, 0.9, 1.6, 2.5, 3.0]) -> ["0", "0", "1", "2", "3"]
([9.1, 8.6, 7.2, 6.7, 5.8]) -> ["9", "8", "7", "6", "5"]
        }
    }
}

problem Generated/3486 {
code {
        func floor_upper_list(numbers: list<double>) -> list<string>
    }
    tests {
        template nse {
            ([1.2, 3.4, 5.6, 7.8, 9.1]) -> ["1", "3", "5", "7", "9"]
([0.1, 0.2, 0.3, 0.4, 0.5]) -> ["0", "0", "0", "0", "0"]
([-1.2, -3.4, -5.6, -7.8, -9.1]) -> ["-2", "-4", "-6", "-8", "-10"]
([1.234, 2.345, 3.456, 4.567, 5.678]) -> ["1", "2", "3", "4", "5"]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> ["1", "2", "3", "4", "5"]
        }
    }
}

problem Generated/3487 {
code {
        func floor_and_upper(numbers: list<double>) -> list<string>
    }
    tests {
        template nse {
            ([1.2, 3.6, 5.1, 8.9, 7.2]) -> ["1", "3", "5", "8", "7"]
([-3.1, -7.6, 4.9, 8.0, 6.3]) -> ["-4", "-8", "4", "8", "6"]
([0.0, 1.0, 2.0, 3.0, 4.0]) -> ["0", "1", "2", "3", "4"]
([5.5, 6.5, 7.5, 8.5, 9.5]) -> ["5", "6", "7", "8", "9"]
([-1.2, -1.6, -2.1, -3.9, -3.2]) -> ["-2", "-2", "-3", "-4", "-4"]
        }
    }
}

problem Generated/3488 {
code {
        func sum_of_digits(numbers: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["1234", "5678", "9"]) -> [10, 26, 9]
(["1", "20", "300", "4000", "50000"]) -> [1, 2, 3, 4, 5]
(["-123", "0", "456"]) -> [6, 0, 15]
([]) -> []
(["hello", "world"]) -> [0, 0]
        }
    }
}

problem Generated/3489 {
code {
        func average_of_digit_strings(strs: list<string>) -> int
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"]) -> 3
(["a", "b", "c", "d", "e"]) -> 0
(["1", "2", "b", "c", "d", "5"]) -> 2
(["10", "15", "20", "30"]) -> 18
([]) -> 0
        }
    }
}

problem Generated/3490 {
code {
        func filter_string_with_prefix(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date", "elderberry"], "b") -> ["banana"]
(["apple", "banana", "cherry", "date", "elderberry"], "c") -> ["cherry"]
(["apple", "banana", "cherry", "date", "elderberry"], "") -> ["apple", "banana", "cherry", "date", "elderberry"]
(["apple", "banana", "cherry", "date", "elderberry"], "e") -> ["elderberry"]
(["apple", "banana", "cherry", "date", "elderberry"], "f") -> []
        }
    }
}

problem Generated/3491 {
code {
        func count_words_starting_with(words: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "durian", "eggplant"], "a") -> 1
(["apple", "banana", "cherry", "durian", "eggplant"], "b") -> 1
(["apple", "banana", "cherry", "durian", "eggplant"], "c") -> 1
(["apple", "banana", "cherry", "durian", "eggplant"], "d") -> 1
(["apple", "banana", "cherry", "durian", "eggplant"], "e") -> 1
        }
    }
}

problem Generated/3492 {
code {
        func replace_list_elements_floor(elements: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 2.8, 3.5, -4.5, 5.7]) -> [1, 2, 3, 0, 5]
([0.1, 0.5, 0.9, 1.0, -3.3]) -> [0, 0, 0, 1, 0]
([-1.2, -2.8, -3.5, -4.5, -5.7]) -> [0, 0, 0, 0, 0]
([5.0, 7.0, 9.0, 11.0, 13.0]) -> [5, 7, 9, 11, 13]
([1.1, 2.2, 3.3, 4.5, 5.6, 6.7]) -> [1, 2, 3, 4, 5, 6]
        }
    }
}

problem Generated/3493 {
code {
        func replace_list_elements_with_floor(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 2.5, 3.9, 4.1, 5.6]) -> [1, 2, 3, 4, 5]
([0.1, 0.2, 0.3, 0.4, 0.5]) -> [0, 0, 0, 0, 0]
([10.9, 20.8, 30.7, 40.6, 50.5]) -> [10, 20, 30, 40, 50]
([-1.2, -2.5, -3.9, -4.1, -5.6]) -> [-2, -3, -4, -5, -6]
([]) -> []
        }
    }
}

problem Generated/3494 {
code {
        func replace_elements(arr: list<int>, value: int) -> list<int>
    }
    tests {
        template nse {
            ([10, 20, 30, 40, 50], 10) -> [1, 2, 3, 4, 5]
([10, 20, 30, 40, 50], 12) -> [10, 20, 30, 40, 50]
([10, 20, 30, 40, 50], 5) -> [2, 4, 6, 8, 10]
([9, 27, 63, 81, 99], 9) -> [1, 3, 7, 9, 11]
([9, 27, 63, 81, 99], 3) -> [3, 9, 21, 27, 33]
        }
    }
}

problem Generated/3495 {
code {
        func floor_list_elements(elements: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.5, 2.8, 3.1, 4.7, 5.0]) -> [1, 2, 3, 4, 5]
([9.9, 8.7, 7.6, 6.5, 5.4, 4.3, 3.2, 1.1]) -> [9, 8, 7, 6, 5, 4, 3, 1]
([1.23, 4.56, 7.89]) -> [1, 4, 7]
([0.1, 0.5, 0.9, 1.1, 1.5]) -> [0, 0, 0, 1, 1]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/3496 {
code {
        func floor_even_numbers(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([3.5, 4.2, 5.9, 6.8, 7.7]) -> [3, 4, 5, 6, 7]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 2, 3, 4, 5]
([8.9, 10.2, 13.5, 16.8, 19.1]) -> [8, 10, 13, 16, 19]
([2.0, 4.0, 6.0, 8.0, 10.0]) -> [2, 4, 6, 8, 10]
([1.5, 2.5, 3.5, 4.5, 5.5]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/3497 {
code {
        func floor_number_list(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 3.5, 2.7, 4.8, 5.1]) -> [1, 3, 2, 4, 5]
([10.0, 9.9, 8.8, 7.7, 6.6]) -> [10, 9, 8, 7, 6]
([1.3, 2.4, 3.5, 4.6, 5.7]) -> [1, 2, 3, 4, 5]
([0.9, 1.1, 1.3, 1.5, 1.7]) -> [0, 1, 1, 1, 1]
([9.0, 8.1, 7.2, 6.3, 5.4]) -> [9, 8, 7, 6, 5]
        }
    }
}

problem Generated/3498 {
code {
        func create_floor_list(elements: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.3, 2.5, 3.7, 4.1, 5.9]) -> [1, 2, 3, 4, 5]
([3.14159, 2.71828, 1.41421]) -> [3, 2, 1]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 2, 3, 4, 5]
([]) -> []
([5.5, 10.7, 2.3, 0.5]) -> [5, 10, 2, 0]
        }
    }
}

problem Generated/3499 {
code {
        func generate_floored_list(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.1, 2.7, 3.0, 4.9, 5.5]) -> [1, 2, 3, 4, 5]
([1.5, 2.2, 3.8, 4.0, 5.9]) -> [1, 2, 3, 4, 5]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 2, 3, 4, 5]
([1.9, 2.4, 3.7, 4.5, 5.1]) -> [1, 2, 3, 4, 5]
([0.1, 1.2, 2.3, 3.4, 4.5, 5.6, 6.7, 7.8, 8.9, 9.9]) -> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        }
    }
}

problem Generated/3500 {
code {
        func get_floored_numbers(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.2, 3.5, 4.9, 6.1]) -> [1.0, 3.0, 4.0, 6.0]
([7.8, 9.1, 3.0, 2.1]) -> [7.0, 9.0, 3.0, 2.0]
([1.0, 1.1, 1.2, 1.3]) -> [1.0, 1.0, 1.0, 1.0]
([2.0, 3.0, 4.0, -5.0]) -> [2.0, 3.0, 4.0, -5.0]
([-1.5, -2.2, -3.7, -4.9]) -> [-2.0, -3.0, -4.0, -5.0]
        }
    }
}

problem Generated/3501 {
code {
        func create_list_of_floored_values(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 3.5, 2.9, 4.1]) -> [1, 3, 2, 4]
([-4.3, 2.7, -5.9, 8.4]) -> [-5, 2, -6, 8]
([0.1, 0.2, 0.3, 0.4, 0.5]) -> [0, 0, 0, 0, 0]
([3.7, 4.2, 9.1, 7.0]) -> [3, 4, 9, 7]
([]) -> []
        }
    }
}

problem Generated/3502 {
code {
        func insert_floor_values(elements: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 3.5, 2.8, 4.7, 9.9]) -> [1, 3, 2, 4, 9]
([9.8, 8.4, 7.2, 6.5, 5.7]) -> [9, 8, 7, 6, 5]
([4.9, 3.3, 2.1, 9.9, 8.5]) -> [4, 3, 2, 9, 8]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 2, 3, 4, 5]
([0.5, 1.5, 2.5, 3.5, 4.5]) -> [0, 1, 2, 3, 4]
        }
    }
}

problem Generated/3503 {
code {
        func floor_and_append(numbers: list<double>, append_values: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.5, 2.7, -3.8, 4.1, 5.9], [0.3, -0.6, 2.8, 7.1, -9.0]) -> [1, 2, -4, 4, 5, 0, -1, 2, 7, -9]
([-3.5, -2.7, -1.2, 0.5, 1.9], []) -> [-4, -3, -2, 0, 1]
([], [1.5, 2.7, -3.8, 4.1, 5.9]) -> [1, 2, -4, 4, 5]
([1.0, 2.0, 3.0], [4.0, 5.0, 6.0]) -> [1, 2, 3, 4, 5, 6]
([1.0, 2.5, 3.7, 4.2, 5.9], [-1.3, -2.5, -3.7]) -> [1, 2, 3, 4, 5, -2, -3, -4]
        }
    }
}

problem Generated/3504 {
code {
        func get_median(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 3
([5, 4, 3, 2, 1]) -> 3
([1, 2, 3, 4]) -> 2
([1, 3, 2, 4]) -> 2
([4, 2, 6, 8, 10, 1]) -> 5
        }
    }
}

problem Generated/3505 {
code {
        func get_top_k_floored_numbers(numbers: list<double>, k: int) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 2.4, 3.6, 4.8, 6.0], 3) -> [6, 4, 3]
([10.2, 9.3, 8.4, 7.5, 6.6, 5.5], 4) -> [10, 9, 8, 7]
([1.4, 2.5, 3.6, 4.7, 5.8, 6.9, 7.0], 5) -> [7, 6, 5, 4, 3]
([1.1, 2.2, 3.3, 4.4, 5.5], 0) -> []
([1.2, 3.4, 5.6, 7.8, 9.0], 7) -> [9, 7, 5, 3, 1]
        }
    }
}

problem Generated/3506 {
code {
        func sort_list_and_floor(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 3.6, 2.1, 4.9, 6.2]) -> [1, 2, 3, 4, 6]
([2.5, 3.7, 1.1, 8.9, 4.2, 7.8]) -> [1, 2, 3, 4, 7, 8]
([2.5, 3.7, 1.1, 8.9, 4.2, 7.8, -1.5]) -> [-2, 1, 2, 3, 4, 7, 8]
([1.2, 3.6, 2.1, 4.9, 6.2, -1.5]) -> [-2, 1, 2, 3, 4, 6]
([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
        }
    }
}

problem Generated/3507 {
code {
        func sort_and_floor(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.4, 2.7, 3.1, 4.8, 5.2]) -> [1, 2, 3, 4, 5]
([1.9, 3.2, 2.5, 5.6, 4.8]) -> [1, 2, 3, 4, 5]
([1.1, 1.8, 2.5, 2.2, 2.9]) -> [1, 1, 2, 2, 2]
([4.5, 3.2, 6.9, 2.1, 5.7]) -> [2, 3, 4, 5, 6]
([]) -> []
        }
    }
}

problem Generated/3508 {
code {
        func sort_and_floor(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 3.5, 2.8, 4.9, 6.1, 5.6]) -> [1, 2, 3, 4, 5, 6]
([8.2, 9.5, 2.8, 4.9, 6.1, 5.6]) -> [2, 4, 5, 6, 8, 9]
([1.2, 3.5, 2.8, 4.9]) -> [1, 2, 3, 4]
([1.2, 3.5, 2.8, 4.9]) -> [1, 2, 3, 4]
([1.2, 1.5, 2.8, 1.9, 3.1]) -> [1, 1, 1, 2, 3]
        }
    }
}

problem Generated/3509 {
code {
        func sort_odd_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([5, 3, 1, 8, 0]) -> [1, 3, 5, 8, 0]
([9, 2, 8, 4, 3, 1]) -> [1, 2, 8, 4, 3, 9]
([2, 4, 6, 8]) -> [2, 4, 6, 8]
([1, 3, 5, 7]) -> [1, 3, 5, 7]
([]) -> []
        }
    }
}

problem Generated/3510 {
code {
        func sort_and_floor(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.1, 2.2, 3.3, 4.4, 5.5]) -> [1, 2, 3, 4, 5]
([2.9, 1.2, 6.7, 4.1, 3.8]) -> [1, 2, 3, 4, 6]
([5.6, 2.5, 3.8, 1.1, 4.9]) -> [1, 2, 3, 4, 5]
([-1.1, -2.2, -3.3, -4.4, -5.5]) -> [-6, -5, -4, -3, -2]
([1.9, 2.2, 3.6, 4.1, 5.5]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/3511 {
code {
        func sort_list_and_cut_halves(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2]
([7, 3, 5, 9, 6]) -> [3, 5]
([1, 7, 4, 9, 5]) -> [1, 4]
([1, 7, 4, 9, 5, 2]) -> [1, 2, 4]
([-1, -2, 5, 3, 0]) -> [-2, -1]
        }
    }
}

problem Generated/3512 {
code {
        func find_median(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 3
([7, 3, 5, 9, 6, 2]) -> 5
([1, 7, 4, 9, 5]) -> 5
([1, 7, 4, 9, 5, 6]) -> 5
([1, 2, 3, 4, 5, 6, 7, 8]) -> 4
        }
    }
}

problem Generated/3513 {
code {
        func get_floor_index(numbers: list<int>, target: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 2
([7, 3, 5, 9, 6], 4) -> 1
([1, 7, 4, 9, 5], -2) -> -1
([], 10) -> -1
([1, 2, 3, 4, 5, 6, 7, 8], 6) -> 5
        }
    }
}

problem Generated/3514 {
code {
        func reverse_and_floor(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.0, 2.4, 3.6, 4.2, 5.8]) -> [5, 4, 3, 2, 1]
([1.8, 2.4, 3.6, 4.2, 5.1]) -> [5, 4, 3, 2, 1]
([1.2, 2.9, 3.3, 4.5, 5.3]) -> [5, 4, 3, 2, 1]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [5, 4, 3, 2, 1]
([1.1, 2.2, 3.3, 4.4, 5.5]) -> [5, 4, 3, 2, 1]
        }
    }
}

problem Generated/3515 {
code {
        func reverse_and_floor(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.5, 2.7, 3.9, 4.1, 5.8]) -> [5, 4, 3, 2, 1]
([1.9, 2.1, 3.0, 4.3, 5.7]) -> [5, 4, 3, 2, 1]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [5, 4, 3, 2, 1]
([0.0, -1.0, -2.0, -3.0, -4.0]) -> [-4, -3, -2, -1, 0]
([2.5, 3.7, 4.2, 5.3, 6.9, 7.1]) -> [7, 6, 5, 4, 3, 2]
        }
    }
}

problem Generated/3516 {
code {
        func reverse_and_floor(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.9, 2.5, 3.4, 4.1, 5.9]) -> [5, 4, 3, 2, 1]
([0.0, 0.1, 0.5, 0.9, 1.0]) -> [1, 0, 0, 0, 0]
([10.9, 9.5, 8.4, 7.1, 6.9]) -> [6, 7, 8, 9, 10]
([1.1, 2.7, 3.2, 4.9, 5.5]) -> [5, 4, 3, 2, 1]
([]) -> []
        }
    }
}

problem Generated/3517 {
code {
        func reverse_floor(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.4, 2.7, 3.5, 4.2, 5.9]) -> [5, 4, 3, 2, 1]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [5, 4, 3, 2, 1]
([1.9, 3.1, 4.3, 2.2, 5.5]) -> [5, 2, 4, 3, 1]
([1.4, 2.5, 3.6, 4.7, 5.8, 6.9]) -> [6, 5, 4, 3, 2, 1]
([1.98, 2.13, 3.24, 4.59, 5.88]) -> [5, 4, 3, 2, 1]
        }
    }
}

problem Generated/3518 {
code {
        func reverse_and_floor(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.1, 2.2, 3.3, 4.4, 5.5]) -> [5.0, 4.0, 3.0, 2.0, 1.0]
([1.9, 2.6, 3.2, 4.8, 5.3]) -> [5.0, 4.0, 3.0, 2.0, 1.0]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [5.0, 4.0, 3.0, 2.0, 1.0]
([0.5, 1.5, 2.5, 3.5, 4.5]) -> [4.0, 3.0, 2.0, 1.0, 0.0]
([1.23, 4.56, 7.89, 0.12]) -> [0.0, 7.0, 4.0, 1.0]
        }
    }
}

problem Generated/3519 {
code {
        func get_half_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2]
([7, 3, 5, 9, 6, 2]) -> [7, 3, 5]
([1, 7, 4, 9, 5]) -> [1, 7]
([1, 7]) -> [1]
([1]) -> []
        }
    }
}

problem Generated/3520 {
code {
        func truncate_list(elements: list<int>, length: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [1, 2, 3]
([7, 3, 5, 9, 6], 1) -> [7]
([1, 7, 4, 9, 5], 10) -> [1, 7, 4, 9, 5]
([1, 7, 4, 9, 5], 0) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [1, 2, 3, 4]
        }
    }
}

problem Generated/3521 {
code {
        func get_first_n_numbers(numbers: list<double>, n: int) -> list<double>
    }
    tests {
        template nse {
            ([1.6, 2.4, 3.5, 4.7, 5.2], 3) -> [1.0, 2.0, 3.0]
([1.6, 2.4, 3.5, 4.7, 5.2], 10) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([1.1, 2.3, 3.5, 4.7, 5.9], 2) -> [1.0, 2.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 0) -> []
([1.2, 3.4, 5.6, 7.8], 4) -> [1.0, 3.0, 5.0, 7.0]
        }
    }
}

problem Generated/3522 {
code {
        func truncate_list(elements: list<double>, limit: double) -> list<double>
    }
    tests {
        template nse {
            ([1.2, 2.5, 3.7, 4.9, 5.1], 3.0) -> [3.0, 4.0, 5.0]
([1.2, 2.5, 3.7, 4.9, 5.1], 6.0) -> []
([1.2, 2.5, 3.7, 4.9, 5.1], 0.0) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([1.2, 2.5, 3.7, 4.9, 5.1], 1.5) -> [2.0, 3.0, 4.0, 5.0]
([], 1.5) -> []
        }
    }
}

problem Generated/3523 {
code {
        func unique_elements_in_list(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.5, 2.7, 3.2, 4.1, 5.9]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([1.2, 1.8, 2.1, 2.7, 3.6]) -> [1.0, 2.0, 3.0]
([0.9, 1.1, 2.9, 3.1, 4.9, 5.1]) -> [0.0, 1.0, 2.0, 3.0, 4.0, 5.0]
([0.0, 0.1, 0.5, 0.9, 1.0]) -> [0.0, 1.0]
        }
    }
}

problem Generated/3524 {
code {
        func unique_integers_rounded_down(numbers: list<double>) -> int
    }
    tests {
        template nse {
            ([1.2, 2.5, 3.7, 3.9, 4.0, 4.5]) -> 4
([1.0, 2.0, 3.0, 4.0, 5.0]) -> 5
([1.8, 2.2, 3.8, 4.2, 5.8, 6.2]) -> 6
([1.1, 2.4, 3.7, 4.0, 5.9]) -> 5
([1.0, 1.2, 1.4, 1.6, 1.8]) -> 1
        }
    }
}

problem Generated/3525 {
code {
        func floor_sqrt_list(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.0, 4.0, 9.0, 16.0, 25.0]) -> [1, 2, 3, 4, 5]
([0.0, 0.25, 0.5, 0.75, 1.0]) -> [0, 0, 0, 0, 1]
([2.0, 3.0, 5.0, 7.0]) -> [1, 1, 2, 2]
([2.4, 3.7, 5.2, 7.8, 9.5]) -> [1, 1, 2, 2, 3]
([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]) -> [0, 0, 0, 0, 0, 0, 0]
        }
    }
}

problem Generated/3526 {
code {
        func get_square_roots(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([4, 9, 16, 25, 36]) -> [2, 3, 4, 5, 6]
([1, 2, 3, 4, 5]) -> [1, 1, 1, 2, 2]
([0, 1, 2, 3, 4]) -> [0, 1, 1, 1, 2]
([25, 30, 35, 40, 45]) -> [5, 5, 5, 6, 6]
([121, 144, 169, 196]) -> [11, 12, 13, 14]
        }
    }
}

problem Generated/3527 {
code {
        func get_sqrt_floor(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [1, 1, 1, 2, 2, 2, 2, 2, 3, 3]
([16, 25, 36, 49, 64, 81, 100]) -> [4, 5, 6, 7, 8, 9, 10]
([11, 12, 13, 14, 15]) -> [3, 3, 3, 3, 3]
([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> [0, 1, 1, 1, 2, 2, 2, 2, 2, 3]
([100, 10000, 1000000, 100000000]) -> [10, 100, 1000, 10000]
        }
    }
}

problem Generated/3528 {
code {
        func calculate_square_roots(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 1, 1, 2, 2]
([16, 25, 36, 49, 64]) -> [4, 5, 6, 7, 8]
([2, 3, 5, 7, 11]) -> [1, 1, 2, 2, 3]
([100, 121, 144, 169, 196]) -> [10, 11, 12, 13, 14]
([0, 1, 2, 3, 4]) -> [0, 1, 1, 1, 2]
        }
    }
}

problem Generated/3529 {
code {
        func get_sqrt_floor(nums: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 1, 1, 2, 2]
([25, 36, 49, 64, 81]) -> [5, 6, 7, 8, 9]
([100, 200, 300, 400, 500]) -> [10, 14, 17, 20, 22]
([18, 24, 60, 168, 1000]) -> [4, 4, 7, 12, 31]
([2, 3, 5, 7, 11]) -> [1, 1, 2, 2, 3]
        }
    }
}

problem Generated/3530 {
code {
        func get_root_nums(nums: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 4, 9, 16, 25, 36, 49, 64, 81, 100]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
([144, 36, 81, 1, 49, 64, 121]) -> [12, 6, 9, 1, 7, 8, 11]
([2, 3, 5, 7, 11, 13, 17, 19]) -> [1, 1, 2, 2, 3, 3, 4, 4]
([10, 25, 30, 36, 40, 50, 60]) -> [3, 5, 5, 6, 6, 7, 7]
([81, 64, 49, 36, 25, 16, 9, 4, 1]) -> [9, 8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/3531 {
code {
        func calculate_power_of_numbers(numbers: list<double>, power: int) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([-1.0, -2.0, -3.0, -4.0, -5.0], 3) -> [-1.0, -8.0, -27.0, -64.0, -125.0]
([0.0, 2.5, 3.7, 4.2, 5.9], 2) -> [0.0, 6.0, 13.0, 17.0, 34.0]
([0.0, -2.5, 3.7, -4.2, 5.9], 0) -> [1.0, 1.0, 1.0, 1.0, 1.0]
([1.0, 2.0, 3.0, 4.0, 5.0], -1) -> [1.0, 0.0, 0.0, 0.0, 0.0]
        }
    }
}

problem Generated/3532 {
code {
        func power_floor(num: int, power: int) -> int
    }
    tests {
        template nse {
            (2, 5) -> 32
(10, 2) -> 100
(3, 3) -> 27
(8, 0) -> 1
(100, 0) -> 1
        }
    }
}

problem Generated/3533 {
code {
        func calculate_power_of_numbers(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [1, 2, 4, 8, 16]
(0) -> []
(1) -> [1]
(2) -> [1, 2]
(10) -> [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]
        }
    }
}

problem Generated/3534 {
code {
        func power_of_two_list(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [1, 2, 4]
(12) -> [1, 2, 4, 8]
(20) -> [1, 2, 4, 8, 16]
(1) -> [1]
(2) -> [1, 2]
        }
    }
}

problem Generated/3535 {
code {
        func multiply_elements_before_index(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 6, 24, 120]
([7, 3, 5, 9, 6]) -> [7, 21, 105, 945, 5670]
([1, 7, 4, 9, 5]) -> [1, 7, 28, 252, 1260]
([1, 7, 4]) -> [1, 7, 28]
([1, 2, 3, 4, 5, 6, 7, 8]) -> [1, 2, 6, 24, 120, 720, 5040, 40320]
        }
    }
}

problem Generated/3536 {
code {
        func multiply_and_floor(numbers: list<double>, factor: double) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 2.3, 3.4, 4.5], 10.0) -> [12, 23, 34, 45]
([1.2, 2.3, 3.4, 4.5], 1.5) -> [1, 3, 5, 6]
([1.2, 2.3, 3.4, 4.5], 0.0) -> [0, 0, 0, 0]
([-1.2, -2.3, -3.4, -4.5], -2.0) -> [2, 4, 6, 9]
([3.2, 4.6, 5.7, 6.1], 2.3) -> [7, 10, 13, 14]
        }
    }
}

problem Generated/3537 {
code {
        func split_string_to_chunks(s: string, chunk_size: int) -> list<string>
    }
    tests {
        template nse {
            ("Hello world", 2) -> ["He", "ll", "o ", "wo", "rl", "d"]
("1234", 2) -> ["12", "34"]
("0123456789", 3) -> ["012", "345", "678", "9"]
("I like python", 4) -> ["I li", "ke p", "ytho", "n"]
("", 5) -> []
        }
    }
}

problem Generated/3538 {
code {
        func split_string_by_width(s: string, width: int) -> list<string>
    }
    tests {
        template nse {
            ("Hello, World!", 5) -> ["Hello", ", Wor", "ld!"]
("My name is John Doe", 4) -> ["My n", "ame ", "is J", "ohn ", "Doe"]
("Lorem ipsum dolor sit amet", 7) -> ["Lorem i", "psum do", "lor sit", " amet"]
("123456789", 3) -> ["123", "456", "789"]
("abcdefghijklmno", 2) -> ["ab", "cd", "ef", "gh", "ij", "kl", "mn", "o"]
        }
    }
}

problem Generated/3539 {
code {
        func split_string_into_chunks(s: string, chunk_size: int) -> list<string>
    }
    tests {
        template nse {
            ("abcdefghij", 3) -> ["abc", "def", "ghi", "j"]
("1234567890", 4) -> ["1234", "5678", "90"]
("abcde", 2) -> ["ab", "cd", "e"]
("abcdefg", 3) -> ["abc", "def", "g"]
("Hello world!", 1) -> ["H", "e", "l", "l", "o", " ", "w", "o", "r", "l", "d", "!"]
        }
    }
}

problem Generated/3540 {
code {
        func split_string_in_parts(txt: string, part_length: int) -> list<string>
    }
    tests {
        template nse {
            ("hello, world!", 3) -> ["hel", "lo,", " wo", "rld", "!  "]
("hello, world!", 4) -> ["hell", "o, w", "orld", "!   "]
("hello, world!", 5) -> ["hello", ", wor", "ld!  "]
("hello, world!", 6) -> ["hello,", " world", "!     "]
("hello, world!", 7) -> ["hello, ", "world! "]
        }
    }
}

problem Generated/3541 {
code {
        func split_string_to_chunks(s: string, chunk_size: int) -> list<string>
    }
    tests {
        template nse {
            ("hello world", 2) -> ["he", "ll", "o ", "wo", "rl", "d"]
("this is a long string", 4) -> ["this", " is ", "a lo", "ng s", "trin", "g"]
("split", 10) -> ["split"]
("123456789", 3) -> ["123", "456", "789"]
("", 5) -> []
        }
    }
}

problem Generated/3542 {
code {
        func split_list_into_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8]]
([1, 2, 3, 4, 5, 6, 7, 8], 2) -> [[1, 2], [3, 4], [5, 6], [7, 8]]
([1, 2, 3, 4, 5, 6], 4) -> [[1, 2, 3, 4], [5, 6]]
([1, 2, 3, 4, 5, 6], 1) -> [[1], [2], [3], [4], [5], [6]]
([1, 2, 3, 4, 5, 6], 6) -> [[1, 2, 3, 4, 5, 6]]
        }
    }
}

problem Generated/3543 {
code {
        func generate_n_groups(elements: list<int>, n: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 5) -> [[1], [2], [3], [4], [5]]
([1, 2, 3, 4, 5, 6], 2) -> [[1, 2, 3], [4, 5, 6]]
([1, 2, 3, 4, 5, 6], 4) -> [[1, 2], [3, 4], [5, 6], []]
        }
    }
}

problem Generated/3544 {
code {
        func group_into_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5, 6, 7, 8], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8]]
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> [[1, 2, 3, 4, 5], [6, 7, 8]]
([1, 2, 3, 4, 5], 1) -> [[1], [2], [3], [4], [5]]
        }
    }
}

problem Generated/3545 {
code {
        func split_list_into_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5], 1) -> [[1], [2], [3], [4], [5]]
([1, 2, 3, 4, 5], 6) -> [[1, 2, 3, 4, 5]]
([], 5) -> []
        }
    }
}

problem Generated/3546 {
code {
        func group_elements_into_batches(elements: list<int>, batch_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5, 6, 7, 8], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8]]
([1, 2, 3, 4, 5], 5) -> [[1, 2, 3, 4, 5]]
([1, 2, 3, 4, 5], 6) -> [[1, 2, 3, 4, 5]]
([1, 2, 3, 4, 5], 1) -> [[1], [2], [3], [4], [5]]
        }
    }
}

problem Generated/3547 {
code {
        func get_list_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7], 2) -> [[1, 2], [3, 4], [5, 6], [7]]
([1, 2, 3, 4, 5, 6, 7], 3) -> [[1, 2, 3], [4, 5, 6], [7]]
([1, 2, 3, 4, 5], 1) -> [[1], [2], [3], [4], [5]]
([1, 2, 3, 4, 5], 5) -> [[1, 2, 3, 4, 5]]
([1, 2, 3, 4, 5], 10) -> [[1, 2, 3, 4, 5]]
        }
    }
}

problem Generated/3548 {
code {
        func group_elements(elements: list<int>, group_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5, 6], 2) -> [[1, 2], [3, 4], [5, 6]]
([1, 2, 3, 4, 5, 6], 4) -> [[1, 2, 3, 4], [5, 6]]
([1, 2, 3, 4, 5], 1) -> [[1], [2], [3], [4], [5]]
        }
    }
}

problem Generated/3549 {
code {
        func calculate_abs_ceil(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.4, 2.7, -3.3, -4.6, 5.0]) -> [2, 3, 4, 5, 5]
([0.0, -2.3, 3.9, 4.1, -5.6]) -> [0, 3, 4, 5, 6]
([-6.8, 7.2, -8.6, 9.9]) -> [7, 8, 9, 10]
([1.1, -2.2, 3.3, -4.4, 5.5]) -> [2, 3, 4, 5, 6]
([11.6, -12.9, 13.7, -14.1]) -> [12, 13, 14, 15]
        }
    }
}

problem Generated/3550 {
code {
        func compute_num_of_rows(num_of_items: int, num_of_cols: int) -> int
    }
    tests {
        template nse {
            (10, 2) -> 5
(10, 3) -> 4
(10, 5) -> 2
(6, 3) -> 2
(100, 10) -> 10
        }
    }
}

problem Generated/3551 {
code {
        func get_num_of_pages(num_of_items: int, items_per_page: int) -> int
    }
    tests {
        template nse {
            (10, 2) -> 5
(8, 3) -> 3
(0, 10) -> 0
(-10, 2) -> 5
(10, -2) -> 5
        }
    }
}

problem Generated/3552 {
code {
        func get_rounded_up_abs_diff(num1: int, num2: int) -> int
    }
    tests {
        template nse {
            (3, 5) -> 2
(8, 2) -> 6
(-4, 2) -> 6
(-4, -6) -> 2
(0, 0) -> 0
        }
    }
}

problem Generated/3553 {
code {
        func ceil_abs_list(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.4, -2.7, 3.5, -4.2, 5.9]) -> [2, 3, 4, 5, 6]
([-1.8, 2.2, -3.3, 4.7, -5.1]) -> [2, 3, 4, 5, 6]
([0.1, 0.2, 0.3, 0.4, 0.5]) -> [1, 1, 1, 1, 1]
([-0.9, -0.8, -0.7, -0.6, -0.5]) -> [1, 1, 1, 1, 1]
([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/3554 {
code {
        func max_sum_of_k_elements(numbers: list<int>, k: int) -> int
    }
    tests {
        template nse {
            ([1, 5, 3, 8, 6, 9, 7], 3) -> 23
([1, 5, 3, 8, 6, 9, 7], 0) -> -1
([1, 5, 3, 8, 6, 9, 7], 7) -> 39
([1, 5, 3, 8, 6, 9, 7], 10) -> -1
([1, 5, 3, 8, 6, 9, 7], 1) -> 9
        }
    }
}

problem Generated/3555 {
code {
        func divide_and_round_up(dividlast: int, divisor: int) -> int
    }
    tests {
        template nse {
            (10, 3) -> 4
(11, 3) -> 4
(9, 3) -> 3
(0, 3) -> 0
(10, 0) -> 10
        }
    }
}

problem Generated/3556 {
code {
        func get_min_elements_in_each_chunk(elements: list<int>, chunk_size: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [1, 4, 7]
([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) -> [1, 3, 5, 7, 9]
([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [1, 5, 9]
([1, 2, 3, 4, 5], 1) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5], 5) -> [1]
        }
    }
}

problem Generated/3557 {
code {
        func find_min_length(words: list<string>) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "kiwi", "grape"]) -> 2
(["cat", "dog", "elephant", "giraffe", "lion"]) -> 2
(["bird", "fish", "hamster", "shark"]) -> 2
(["car", "truck", "motorcycle"]) -> 2
(["a", "be", "see", "deed", "eerie", "fee", "goo", "hie"]) -> 1
        }
    }
}

problem Generated/3558 {
code {
        func get_min_groups(num_people: int, group_size: int) -> int
    }
    tests {
        template nse {
            (100, 10) -> 10
(150, 20) -> 8
(10, 3) -> 4
(30, 7) -> 5
(100, 100) -> 1
        }
    }
}

problem Generated/3559 {
code {
        func group_list_into_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5, 6, 7], 3) -> [[1, 2, 3], [4, 5, 6], [7]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5, 6], 4) -> [[1, 2, 3, 4], [5, 6]]
([1, 2, 3, 4, 5], 5) -> [[1, 2, 3, 4, 5]]
        }
    }
}

problem Generated/3560 {
code {
        func group_list_by_n_elements(elements: list<int>, n: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) -> [[1, 2], [3, 4], [5, 6], [7, 8], [9]]
([1, 2, 3, 4, 5, 6, 7], 4) -> [[1, 2, 3, 4], [5, 6, 7]]
([1, 2, 3, 4, 5, 6, 7], 3) -> [[1, 2, 3], [4, 5, 6], [7]]
([1, 2, 3, 4, 5, 6, 7], 1) -> [[1], [2], [3], [4], [5], [6], [7]]
        }
    }
}

problem Generated/3561 {
code {
        func split_list_into_chunks(lst: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5, 6], 2) -> [[1, 2], [3, 4], [5, 6]]
([1, 2, 3, 4, 5, 6], 4) -> [[1, 2, 3, 4], [5, 6]]
([1, 2, 3, 4, 5, 6, 7], 3) -> [[1, 2, 3], [4, 5, 6], [7]]
        }
    }
}

problem Generated/3562 {
code {
        func group_elements(elements: list<int>, group_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8]]
([1, 2, 3, 4, 5, 6, 7, 8], 2) -> [[1, 2], [3, 4], [5, 6], [7, 8]]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8]]
([1, 2, 3, 4, 5, 6, 7, 8], 1) -> [[1], [2], [3], [4], [5], [6], [7], [8]]
([1, 2, 3, 4, 5, 6, 7], 3) -> [[1, 2, 3], [4, 5, 6], [7]]
        }
    }
}

problem Generated/3563 {
code {
        func divide_and_ceil(nums: list<int>, divisor: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [1, 1, 2, 2, 3]
([7, 3, 5, 9, 6], 2) -> [4, 2, 3, 5, 3]
([1, 7, 4, 9, 5], 3) -> [1, 3, 2, 3, 2]
([1, 7, 4, 9, 5], 1) -> [1, 7, 4, 9, 5]
([1, 2, 3, 4, 5, 6, 7, 8], 5) -> [1, 1, 1, 1, 1, 2, 2, 2]
        }
    }
}

problem Generated/3564 {
code {
        func split_list_to_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8]]
([1, 2, 3, 4, 5, 6, 7], 2) -> [[1, 2], [3, 4], [5, 6], [7]]
([1, 2, 3, 4, 5, 6, 7], 5) -> [[1, 2, 3, 4, 5], [6, 7]]
([1, 2, 3, 4, 5], 1) -> [[1], [2], [3], [4], [5]]
([1, 2, 3, 4, 5], 7) -> [[1, 2, 3, 4, 5]]
        }
    }
}

problem Generated/3565 {
code {
        func group_elements(elements: list<int>, group_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([7, 3, 5, 9, 6], 3) -> [[7, 3, 5], [9, 6]]
([1, 7, 4, 9, 5], 5) -> [[1, 7, 4, 9, 5]]
([1, 7, 4, 9, 5], 2) -> [[1, 7], [4, 9], [5]]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8]]
        }
    }
}

problem Generated/3566 {
code {
        func group_elements_by_size(elements: list<int>, size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1,2], [3,4], [5]]
([7, 3, 5, 9, 6], 3) -> [[7,3,5], [9,6]]
([1, 7, 4, 9, 5], 1) -> [[1], [7], [4], [9], [5]]
([1, 7, 4, 9, 5], 5) -> [[1, 7, 4, 9, 5]]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [[1,2,3,4], [5,6,7,8]]
        }
    }
}

problem Generated/3567 {
code {
        func divide_list_into_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1,2,3,4,5,6,7,8], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
([1,2,3,4,5,6,7,8], 2) -> [[1, 2], [3, 4], [5, 6], [7, 8]]
([1,2,3,4,5,6,7,8,9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
([1,2,3,4,5,6,7], 4) -> [[1, 2, 3, 4], [5, 6, 7, 0]]
([10,20,30,40], 2) -> [[10, 20], [30, 40]]
        }
    }
}

problem Generated/3568 {
code {
        func get_ceil_values(elements: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.2, 2.5, 3.7, 4.0, 5.1]) -> [2, 3, 4, 4, 6]
([0.5, 0.6, 0.7, 0.8, 0.9]) -> [1, 1, 1, 1, 1]
([1.2, 2.8, 3.4, 4.6, 5.9]) -> [2, 3, 4, 5, 6]
([0.0, 0.1, 0.2, 0.3, 0.4]) -> [0, 1, 1, 1, 1]
([1.2, -2.5, 3.7, -4.0, 5.1]) -> [2, -2, 4, -4, 6]
        }
    }
}

problem Generated/3569 {
code {
        func get_num_of_pages(items: int, items_per_page: int) -> int
    }
    tests {
        template nse {
            (15, 3) -> 5
(10, 2) -> 5
(20, 4) -> 5
(9, 3) -> 3
(14, 5) -> 3
        }
    }
}

problem Generated/3570 {
code {
        func filter_odd_numbers_in_list(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [1, 3, 5, 7, 9]
([2, 4, 6, 8, 10]) -> []
([1, 3, 5, 7, 9]) -> [1, 3, 5, 7, 9]
([0, 2, 4, 6, 8]) -> []
([11, 21, 30, 41, 55, 60, 77]) -> [11, 21, 41, 55, 77]
        }
    }
}

problem Generated/3571 {
code {
        func encode_message(message: string, num_rows: int) -> string
    }
    tests {
        template nse {
            ("PAYPALISHIRING", 3) -> "PAHNAPLSIIGYIR"
("PAYPALISHIRING", 4) -> "PINALSIGYAHRPI"
("AB", 1) -> "AB"
("AB", 2) -> "AB"
("ABCD", 2) -> "ACBD"
        }
    }
}

problem Generated/3572 {
code {
        func split_string_into_groups(txt: string, group_size: int) -> list<string>
    }
    tests {
        template nse {
            ("hello world", 2) -> ["he", "ll", "o ", "wo", "rl", "d"]
("hello world", 3) -> ["hel", "lo ", "wor", "ld"]
("hello world", 5) -> ["hello", " worl", "d"]
("hello world", 11) -> ["hello world"]
("hello world", 1) -> ["h", "e", "l", "l", "o", " ", "w", "o", "r", "l", "d"]
        }
    }
}

problem Generated/3573 {
code {
        func split_string_into_chunks(input_s: string, chunk_size: int) -> list<string>
    }
    tests {
        template nse {
            ("Hello, World!", 5) -> ["Hello", ", Wor", "ld!"]
("Lorem ipsum dolor sit amet, consectetur adipiscing elit.", 10) -> ["Lorem ipsu", "m dolor si", "t amet, co", "nsectetur ", "adipiscing", " elit."]
("0123456789", 2) -> ["01", "23", "45", "67", "89"]
("The quick brown fox jumps over the lazy dog.", 7) -> ["The qui", "ck brow", "n fox j", "umps ov", "er the ", "lazy do", "g."]
("a", 5) -> ["a"]
        }
    }
}

problem Generated/3574 {
code {
        func split_string_into_parts(s: string, k: int) -> list<string>
    }
    tests {
        template nse {
            ("abcdefghij", 3) -> ["abc", "def", "ghi", "j"]
("a", 2) -> ["a"]
("abcdefghijklmnopqrstuvwxyz", 5) -> ["abcde", "fghij", "klmno", "pqrst", "uvwxy", "z"]
("abcdefghijklmnopqrstuvwxyz", 7) -> ["abcdefg", "hijklmn", "opqrstu", "vwxyz"]
("123456789", 1) -> ["1", "2", "3", "4", "5", "6", "7", "8", "9"]
        }
    }
}

problem Generated/3575 {
code {
        func split_string_into_chunks(s: string, chunk_size: int) -> list<string>
    }
    tests {
        template nse {
            ("hello", 2) -> ["he", "ll", "o"]
("abcdefg", 3) -> ["abc", "def", "g"]
("This is a test", 4) -> ["This", " is ", "a te", "st"]
("Programming", 5) -> ["Progr", "ammin", "g"]
("Python", 6) -> ["Python"]
        }
    }
}

problem Generated/3576 {
code {
        func join_strings_with_separator(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], ",") -> "hello,world"
(["join", "strings", "with", "separator"], " ") -> "join strings with separator"
(["a", "b", "c", "d"], "") -> "abcd"
(["this", "is", "a", "test"], "-") -> "this-is-a-test"
([], ",") -> ""
        }
    }
}

problem Generated/3577 {
code {
        func split_string_into_chunks(s: string, chunk_size: int) -> string
    }
    tests {
        template nse {
            ("123456789", 3) -> "123\n456\n789"
("abcdefgh", 4) -> "abcd\nefgh"
("hello world", 5) -> "hello\n worl\nd"
("hello world", 20) -> "hello world"
("", 1) -> ""
        }
    }
}

problem Generated/3578 {
code {
        func group_list_into_chunks(elements: list<int>, chunk_size: int, join_str: string) -> string
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6], 2, ",") -> "12,34,56"
([1, 2, 3, 4, 5, 6], 3, "-") -> "123-456"
([1, 2, 3, 4, 5, 6], 1, "") -> "123456"
([1, 2, 3, 4, 5, 6], 4, ".") -> "1234.56"
([], 4, ".") -> ""
([1, 2, 3, 4, 5, 6], 10, ",") -> "123456"
        }
    }
}

problem Generated/3579 {
code {
        func chunk_list(lst: list<int>, size: int) -> string
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> "1|2\n3|4\n5|0"
([1, 2, 3, 4, 5], 3) -> "1|2|3\n4|5|0"
([1, 2, 3, 4, 5], 5) -> "1|2|3|4|5"
([1, 2, 3, 4, 5], 6) -> "1|2|3|4|5|0"
([1, 2, 3, 4, 5, 6], 4) -> "1|2|3|4\n5|6|0|0"
        }
    }
}

problem Generated/3580 {
code {
        func group_list_items(items: list<string>, group_size: int) -> string
    }
    tests {
        template nse {
            (["a", "b", "c", "d", "e", "f"], 2) -> "ab,cd,ef"
(["a", "b", "c", "d", "e", "f", "g"], 3) -> "abc,def,g"
(["a", "b", "c", "d", "e", "f", "g"], 4) -> "abcd,efg"
(["a", "b", "c", "d", "e", "f"], 4) -> "abcd,ef"
(["a", "b", "c", "d", "e", "f"], 6) -> "abcdef"
        }
    }
}

problem Generated/3581 {
code {
        func group_elements_into_chunks(elements: list<int>, chunk_size: int) -> string
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> "[1,2],[3,4],[5]"
([1, 2, 3, 4, 5], 1) -> "[1],[2],[3],[4],[5]"
([1, 2, 3, 4, 5], 3) -> "[1,2,3],[4,5]"
([1, 2, 3, 4, 5, 6, 7], 3) -> "[1,2,3],[4,5,6],[7]"
([1, 2, 3, 4, 5, 6], 4) -> "[1,2,3,4],[5,6]"
        }
    }
}

problem Generated/3582 {
code {
        func split_string_into_groups(s: string, group_size: int) -> string
    }
    tests {
        template nse {
            ("123456789", 1) -> "1-2-3-4-5-6-7-8-9"
("abcdefghijk", 3) -> "abc-def-ghi-jk"
("Hello World", 2) -> "He-ll-o -Wo-rl-d"
("Python", 6) -> "Python"
("", 4) -> ""
        }
    }
}

problem Generated/3583 {
code {
        func get_lower_case_strings(strs: list<string>, count: int) -> list<string>
    }
    tests {
        template nse {
            (["Hello", "WORLD", "Python", "is", "great"], 3) -> ["hello", "world"]
(["This", "is", "a", "test"], 2) -> ["this"]
(["A", "B", "C"], 1) -> ["a"]
([], 0) -> []
([], 5) -> []
        }
    }
}

problem Generated/3584 {
code {
        func ceil_all_and_upper_all(elements: list<double>) -> list<string>
    }
    tests {
        template nse {
            ([1.2, 3.4, 5.6, 7.8, 9.1]) -> ["2", "4", "6", "8", "10"]
([5.3, 6.7, 8.1, 3.2, 2.4]) -> ["6", "7", "9", "4", "3"]
([2.0, 4.0, 6.0, 8.0, 10.0]) -> ["2", "4", "6", "8", "10"]
([1.0, 2.5, 3.7, 4.9, 5.3]) -> ["1", "3", "4", "5", "6"]
([0.1, 0.2, 0.3, 0.4, 0.5]) -> ["1", "1", "1", "1", "1"]
        }
    }
}

problem Generated/3585 {
code {
        func count_uppercase_words(txt: string) -> int
    }
    tests {
        template nse {
            ("HELLO WORLD") -> 1
("Hello WORLD") -> 1
("Hello World") -> 0
("We love Python Programming") -> 0
("WE love PYTHON PROGRAMMING") -> 2
        }
    }
}

problem Generated/3586 {
code {
        func get_max_alpha_string(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "123"]) -> "hello"
(["hello", "Python", "world", "123", "abc"]) -> "Python"
(["hello", "Python", "world", "123", "abc", "Test"]) -> "Python"
(["hello", "Python", "world", "123", "Test"]) -> "Python"
(["HELLO", "python", "WORLD", "123", "Test"]) -> "python"
        }
    }
}

problem Generated/3587 {
code {
        func get_first_letters(words: list<string>, limit: int) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "cat", "dog", "elephant"], 3) -> ["A", "B", "C"]
(["apple", "banana", "cat", "dog", "elephant"], 0) -> []
(["!@#", "123", "cat", "dog", "elephant"], 5) -> ["C", "D", "E"]
(["apple", "banana", "cat", "dog", "elephant"], 10) -> ["A", "B", "C", "D", "E"]
([], 3) -> []
        }
    }
}

problem Generated/3588 {
code {
        func get_number_of_digits(strs: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["hello", "world", "1234"]) -> [0, 0, 4]
(["123", "", "456"]) -> [3, 0, 3]
([]) -> []
(["1", "2", "3", "4", "5"]) -> [1, 1, 1, 1, 1]
(["a", "b", "c", "d", "e"]) -> [0, 0, 0, 0, 0]
        }
    }
}

problem Generated/3589 {
code {
        func calculate_avg_score(scores: list<string>) -> int
    }
    tests {
        template nse {
            (["70", "80", "90"]) -> 80
(["70", "abc", "90"]) -> 80
([]) -> 0
(["10", "20", "30", "40"]) -> 25
(["50", "55", "60", "65"]) -> 58
        }
    }
}

problem Generated/3590 {
code {
        func count_strings_starting_with_prefix(strs: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "orange"], "a") -> 2
(["apple", "banana", "apricot", "orange"], "b") -> 1
(["apple", "banana", "apricot", "orange"], "ap") -> 2
([], "a") -> 0
(["apple", "banana", "apricot", "orange"], "") -> 0
        }
    }
}

problem Generated/3591 {
code {
        func get_words_starting_with_prefix(words: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "apricot", "orange", "andy"], "a") -> ["apple", "apricot", "andy"]
(["apple", "banana", "apricot", "orange", "andy"], "an") -> ["andy"]
(["apple", "banana", "apricot", "orange", "andy"], "c") -> []
(["", "apple", "apricot", "orange", "andy"], "") -> ["", "apple", "apricot", "orange", "andy"]
(["apple", "banana", "apricot", "orange", "andy"], "b") -> ["banana"]
        }
    }
}

problem Generated/3592 {
code {
        func get_ceiling_strings(strs: list<string>, pre: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange", "grape"], "a") -> ["APPLE", "banana", "orange", "grape"]
(["apple", "banana", "orange", "grape"], "o") -> ["apple", "banana", "ORANGE", "grape"]
(["apple", "banana", "orange", "grape"], "r") -> ["apple", "banana", "orange", "grape"]
([], "a") -> []
(["apple", "aardvark", "ape", "abacus", "abound"], "a") -> ["APPLE", "AARDVARK", "APE", "ABACUS", "ABOUND"]
        }
    }
}

problem Generated/3593 {
code {
        func count_strings_starting_with_prefix(strs: list<string>, pre: string) -> int
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "date", "elderberry"], "a") -> 1
(["apple", "banana", "cherry", "date", "elderberry"], "b") -> 1
(["apple", "banana", "cherry", "date", "elderberry"], "c") -> 1
(["apple", "banana", "cherry", "date", "elderberry"], "") -> 1
(["apple", "banana", "cherry", "date", "elderberry"], "e") -> 1
        }
    }
}

problem Generated/3594 {
code {
        func replace_element_in_list(elements: list<int>, old_value: int, new_value: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 7) -> [1, 2, 7, 4, 5]
([1, 2, 3, 4, 5], 7, 8) -> [1, 2, 3, 4, 5]
([1, 1, 1, 1, 1], 1, 5) -> [5, 5, 5, 5, 5]
([5, 2, 5, 4, 5], 5, 7) -> [7, 2, 7, 4, 7]
([-3, 7, 2, -4], -4, -1) -> [-3, 7, 2, -1]
        }
    }
}

problem Generated/3595 {
code {
        func replace_elements_on_index(elements: list<string>, replacement: string, idx: list<int>) -> list<string>
    }
    tests {
        template nse {
            (["a", "b", "c", "d", "e"], "z", [0, 2, 4]) -> ["z", "b", "z", "d", "z"]
(["one", "two", "three", "four"], "zero", [1, 3]) -> ["one", "zero", "three", "zero"]
(["one", "two", "three", "four"], "-", [1, 3]) -> ["one", "-", "three", "-"]
(["hello", "world", "python"], "test", [1]) -> ["hello", "test", "python"]
(["hello"], "test", [0]) -> ["test"]
        }
    }
}

problem Generated/3596 {
code {
        func replace_element_in_list(elements: list<int>, old_elem: int, new_elem: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3, 9) -> [1, 2, 9, 4, 5]
([7, 3, 5, 9, 6], 7, 0) -> [0, 3, 5, 9, 6]
([1, 7, 4, 9, 5], 6, 8) -> [1, 7, 4, 9, 5]
([1, 7, 4, 9, 5], 5, 5) -> [1, 7, 4, 9, 5]
([1, 2, 3, 4, 5, 6, 7, 8], 2, 2) -> [1, 2, 3, 4, 5, 6, 7, 8]
        }
    }
}

problem Generated/3597 {
code {
        func split_list_into_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([7, 3, 5, 9, 6], 3) -> [[7, 3, 5], [9, 6]]
([1, 7, 4, 9, 5], 1) -> [[1], [7], [4], [9], [5]]
([1, 7, 4, 9, 5], 2) -> [[1, 7], [4, 9], [5]]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8]]
        }
    }
}

problem Generated/3598 {
code {
        func split_list_into_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5, 6], 2) -> [[1, 2], [3, 4], [5, 6]]
([1, 2, 3, 4, 5], 1) -> [[1], [2], [3], [4], [5]]
([1, 2, 3, 4, 5], 6) -> [[1, 2, 3, 4, 5]]
        }
    }
}

problem Generated/3599 {
code {
        func split_list_by_size(elements: list<int>, size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5, 6], 2) -> [[1, 2], [3, 4], [5, 6]]
([1, 2, 3, 4, 5], 1) -> [[1], [2], [3], [4], [5]]
([1, 2, 3, 4, 5], 6) -> [[1, 2, 3, 4, 5]]
        }
    }
}

problem Generated/3600 {
code {
        func split_list_to_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5, 6], 2) -> [[1, 2], [3, 4], [5, 6]]
([1, 2, 3, 4, 5], 1) -> [[1], [2], [3], [4], [5]]
([1, 2, 3, 4, 5], 5) -> [[1, 2, 3, 4, 5]]
        }
    }
}

problem Generated/3601 {
code {
        func chunk_list(lst: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([7, 3, 5, 9, 6], 3) -> [[7, 3, 5], [9, 6]]
([1, 7, 4, 9, 5], 1) -> [[1], [7], [4], [9], [5]]
([1, 7, 4, 9, 5], 5) -> [[1, 7, 4, 9, 5]]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8]]
        }
    }
}

problem Generated/3602 {
code {
        func split_list_into_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1,2], [3,4], [5]]
([1, 2, 3, 4, 5], 1) -> [[1], [2], [3], [4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1,2,3], [4,5]]
([1, 2, 3, 4, 5], 7) -> [[1,2,3,4,5]]
([], 3) -> []
([1,2], 3) -> [[1,2]]
        }
    }
}

problem Generated/3603 {
code {
        func group_elements(elements: list<int>, group_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
([1, 2, 3, 4, 5, 6], 2) -> [[1, 2], [3, 4], [5, 6]]
([1, 2, 3, 4, 5], 1) -> [[1], [2], [3], [4], [5]]
([1, 2, 3, 4, 5], 6) -> [[1, 2, 3, 4, 5]]
        }
    }
}

problem Generated/3604 {
code {
        func create_sub_lists(elements: list<int>, size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7], 3) -> [[1, 2, 3], [4, 5, 6], [7]]
([1, 2, 3, 4, 5, 6, 7], 1) -> [[1], [2], [3], [4], [5], [6], [7]]
([1, 2, 3, 4, 5, 6, 7], 2) -> [[1, 2], [3, 4], [5, 6], [7]]
([1, 2, 3, 4, 5, 6, 7], 4) -> [[1, 2, 3, 4], [5, 6, 7]]
([1, 2, 3, 4, 5, 6, 7], 5) -> [[1, 2, 3, 4, 5], [6, 7]]
        }
    }
}

problem Generated/3605 {
code {
        func split_list_into_chunks(elements: list<int>, size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) -> [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) -> [[1, 2], [3, 4], [5, 6], [7, 8], [9]]
([1, 2, 3], 1) -> [[1], [2], [3]]
([1, 2, 3, 4], 5) -> [[1, 2, 3, 4]]
([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]
        }
    }
}

problem Generated/3606 {
code {
        func sort_and_group(numbers: list<int>, group_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([3, 1, 4, 2, 5], 2) -> [[1, 2], [3, 4], [5]]
([10, 7, 8, 9, 6, 5, 4, 3], 3) -> [[3, 4, 5], [6, 7, 8], [9, 10]]
([1, 2, 3, 4, 5], 1) -> [[1], [2], [3], [4], [5]]
([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [4, 5]]
        }
    }
}

problem Generated/3607 {
code {
        func find_ceiled_index(elements: list<double>, target: double) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 3.0) -> 2
([1.0, 2.0, 3.0, 4.0, 5.0], 0.0) -> 0
([1.0, 2.0, 3.0, 4.0, 5.0], 6.0) -> 5
([1.0, 2.0, 3.0, 4.0, 5.0], 1.5) -> 1
([1.0, 1.5, 2.0, 2.5, 3.0], 2.0) -> 2
        }
    }
}

problem Generated/3608 {
code {
        func reverse_list_in_chunks(elements: list<int>, chunk_size: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [2, 1, 4, 3, 5]
([1, 2, 3, 4, 5], 3) -> [3, 2, 1, 5, 4]
([1, 2, 3, 4, 5, 6], 2) -> [2, 1, 4, 3, 6, 5]
([1, 2, 3, 4, 5, 6], 4) -> [4, 3, 2, 1, 6, 5]
([1, 2, 3, 4, 5, 6, 7], 3) -> [3, 2, 1, 6, 5, 4, 7]
        }
    }
}

problem Generated/3609 {
code {
        func split_list_into_chunks(numbers: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6], 2) -> [[1, 2], [3, 4], [5, 6]]
([1, 2, 3, 4, 5, 6], 3) -> [[1, 2, 3], [4, 5, 6]]
([1, 2, 3, 4, 5, 6], 1) -> [[1], [2], [3], [4], [5], [6]]
([1, 2, 3, 4, 5, 6], 10) -> [[1, 2, 3, 4, 5, 6]]
([], 5) -> []
        }
    }
}

problem Generated/3610 {
code {
        func divide_list_into_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([7, 3, 5, 9, 6], 1) -> [[7], [3], [5], [9], [6]]
([1, 7, 4, 9, 5], 5) -> [[1, 7, 4, 9, 5]]
([1, 7, 4, 9, 5], 3) -> [[1, 7, 4], [9, 5]]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8]]
        }
    }
}

problem Generated/3611 {
code {
        func split_list_into_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([7, 3, 5, 9, 6], 3) -> [[7, 3, 5], [9, 6]]
([1, 7, 4, 9, 5], 1) -> [[1], [7], [4], [9], [5]]
([1, 7, 4, 9, 5], 5) -> [[1, 7, 4, 9, 5]]
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8]]
        }
    }
}

problem Generated/3612 {
code {
        func split_list_into_chunks(elements: list<int>, chunk_size: int) -> list<list<int>>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]
([7, 3, 5, 9, 6], 3) -> [[7, 3, 5], [9, 6]]
([1, 7, 4, 9, 5], 1) -> [[1], [7], [4], [9], [5]]
([], 2) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 4) -> [[1, 2, 3, 4], [5, 6, 7, 8]]
        }
    }
}

problem Generated/3613 {
code {
        func round_list(numbers: list<double>, direction: string) -> list<int>
    }
    tests {
        template nse {
            ([1.3, 2.7, 3.1, 4.9, 5.0], "up") -> [2, 3, 4, 5, 5]
([1.3, 2.7, 3.1, 4.9, 5.0], "down") -> [1, 2, 3, 4, 5]
([1.0, 2.0, 3.0, 4.0, 5.0], "up") -> [1, 2, 3, 4, 5]
([1.0, 2.0, 3.0, 4.0, 5.0], "down") -> [1, 2, 3, 4, 5]
([-1.3, -2.7, -3.1, -4.9, -5.0], "up") -> [-1, -2, -3, -4, -5]
        }
    }
}

problem Generated/3614 {
code {
        func round_elements(elements: list<double>, direction: string) -> list<int>
    }
    tests {
        template nse {
            ([1.1, 2.5, 3.9, 4.7, 5.0], "up") -> [2, 3, 4, 5, 5]
([1.1, 2.5, 3.9, 4.7, 5.0], "down") -> [1, 2, 3, 4, 5]
([1.1, 2.5, 3.9, 4.7, 5.0], "round") -> [1, 2, 4, 5, 5]
([1.1, -2.5, 3.9, -4.7, 0.0], "up") -> [2, -2, 4, -4, 0]
([-1.1, -2.5, -3.9, -4.7, -5.0], "down") -> [-2, -3, -4, -5, -5]
        }
    }
}

problem Generated/3615 {
code {
        func round_list_elements(elements: list<double>, d: string) -> list<int>
    }
    tests {
        template nse {
            ([1.3, 2.5, 3.7, 4.2, 5.9], "ceil") -> [2, 3, 4, 5, 6]
([1.3, 2.5, 3.7, 4.2, 5.9], "floor") -> [1, 2, 3, 4, 5]
([1.0, 2.0, 3.0, 4.0, 5.0], "ceil") -> [1, 2, 3, 4, 5]
([1.0, 2.0, 3.0, 4.0, 5.0], "floor") -> [1, 2, 3, 4, 5]
([-1.3, -2.5, -3.7, -4.2, -5.9], "ceil") -> [-1, -2, -3, -4, -5]
([-1.3, -2.5, -3.7, -4.2, -5.9], "floor") -> [-2, -3, -4, -5, -6]
        }
    }
}

problem Generated/3616 {
code {
        func get_sqrt_and_ceil_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 4, 9, 16, 25]) -> [1, 2, 3, 4, 5]
([7, 3, 5, 9, 6]) -> [3, 2, 3, 3, 3]
([2, 3, 5, 7, 11]) -> [2, 2, 3, 3, 4]
([8, 13, 21, 34, 55]) -> [3, 4, 5, 6, 8]
([10, 20, 30, 40, 50]) -> [4, 5, 6, 7, 8]
        }
    }
}

problem Generated/3617 {
code {
        func find_num_of_columns(num_of_items: int) -> int
    }
    tests {
        template nse {
            (5) -> 3
(8) -> 3
(10) -> 4
(20) -> 5
(25) -> 5
        }
    }
}

problem Generated/3618 {
code {
        func calculate_power_of_numbers_and_round_up(numbers: list<double>, power: int) -> list<int>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2) -> [1, 4, 9, 16, 25]
([1.0, 2.0, 3.0, 4.0, 5.0], 3) -> [1, 8, 27, 64, 125]
([1.5, 2.5, 3.5, 4.5], 2) -> [3, 7, 13, 21]
([0.5, 2.2, 3.9, 4.3, 5.0], 1) -> [1, 3, 4, 5, 5]
([-1.0, 2.0, -3.0, 4.0, -5.0], 2) -> [1, 4, 9, 16, 25]
        }
    }
}

problem Generated/3619 {
code {
        func compute_average(scores: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 3
([7.0, 3.0, 5.0, 9.0, 6.0]) -> 6
([]) -> 0
([1.0, 1.0, 1.0, 1.0]) -> 1
([1.0, 1.0, 2.0, 2.0]) -> 2
        }
    }
}

problem Generated/3620 {
code {
        func split_string_to_chunks(s: string, chunk_size: int) -> list<string>
    }
    tests {
        template nse {
            ("Hello, World!", 2) -> ["He", "ll", "o,", " W", "or", "ld", "!"]
("Goodbye, World!", 4) -> ["Good", "bye,", " Wor", "ld!"]
("123456789", 3) -> ["123", "456", "789"]
("abcde", 1) -> ["a", "b", "c", "d", "e"]
("12345", 10) -> ["12345"]
        }
    }
}

problem Generated/3621 {
code {
        func split_string_by_length(string_to_split: string, split_length: int) -> list<string>
    }
    tests {
        template nse {
            ("hello", 2) -> ["he", "ll", "o"]
("world", 3) -> ["wor", "ld"]
("Python is awesome", 5) -> ["Pytho", "n is ", "aweso", "me"]
("", 4) -> []
("Python is fun", 10) -> ["Python is ", "fun"]
        }
    }
}

problem Generated/3622 {
code {
        func split_string_into_chunks(s: string, chunk_size: int) -> list<string>
    }
    tests {
        template nse {
            ("Hello, World!", 3) -> ["Hel", "lo,", " Wo", "rld", "!"]
("Hello, World!", 5) -> ["Hello", ", Wor", "ld!"]
("123456789", 2) -> ["12", "34", "56", "78", "9"]
("123456789", 3) -> ["123", "456", "789"]
("Hello World", 11) -> ["Hello World"]
        }
    }
}

problem Generated/3623 {
code {
        func get_square_roots(n: int) -> list<double>
    }
    tests {
        template nse {
            (5) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772, 2.0]
(10) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979, 2.449489742783178, 2.6457513110645907, 2.8284271247461903, 3.0]
(0) -> []
(-1) -> []
(1) -> [0.0]
(2) -> [0.0, 1.0]
        }
    }
}

problem Generated/3624 {
code {
        func get_sqrt_range(n: int) -> list<double>
    }
    tests {
        template nse {
            (5) -> [1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979]
(10) -> [1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979, 2.449489742783178, 2.6457513110645907, 2.8284271247461903, 3.0, 3.1622776601683795]
(1) -> [1.0]
(3) -> [1.0, 1.4142135623730951, 1.7320508075688772]
(0) -> []
        }
    }
}

problem Generated/3625 {
code {
        func get_primes(n: int) -> list<int>
    }
    tests {
        template nse {
            (10) -> [2, 3, 5, 7]
(20) -> [2, 3, 5, 7, 11, 13, 17, 19]
(30) -> [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
(50) -> [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]
(100) -> [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
        }
    }
}

problem Generated/3626 {
code {
        func euclidean_distance(point1: list<double>, point2: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0], [4.0, 5.0, 6.0]) -> 5.196152422706632
([0.0, 0.0], [3.0, 4.0]) -> 5.0
([0.0, 0.0, 0.0, 0.0], [1.0, 1.0, 1.0, 1.0]) -> 2.0
([1.5, 2.0, 3.5], [1.5, 2.0, 3.5]) -> 0.0
([0.0, 0.0, 0.0], [-1.0, -2.0, -3.0]) -> 3.7416573867739413
        }
    }
}

problem Generated/3627 {
code {
        func get_norm_of_vectors(vectors: list<list<double>>) -> list<double>
    }
    tests {
        template nse {
            ([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]) -> [3.7416573867739413, 8.774964387392123, 13.92838827718412]
([[1.0, 0.0], [0.0, 1.0], [1.0, 1.0]]) -> [1.0, 1.0, 1.4142135623730951]
([[1.0, -2.0, 3.0], [-4.0, 5.0, -6.0], [7.0, 8.0, -9.0]]) -> [3.7416573867739413, 8.774964387392123, 13.92838827718412]
([[1.0, 1.0], [2.0, 2.0], [3.0, 3.0], [4.0, 4.0]]) -> [1.4142135623730951, 2.8284271247461903, 4.242640687119285, 5.656854249492381]
([[0.0, 0.0], [0.0, 0.0]]) -> [0.0, 0.0]
        }
    }
}

problem Generated/3628 {
code {
        func calculate_norm(elements: list<double>) -> double
    }
    tests {
        template nse {
            ([3.0, 4.0]) -> 5.0
([0.0, 0.0, 0.0]) -> 0.0
([1.0, 2.0, 2.0]) -> 3.0
([2.0, 2.0, 2.0, 2.0]) -> 4.0
([1.0, 3.0, 5.0]) -> 5.916079783099616
        }
    }
}

problem Generated/3629 {
code {
        func max_sqrt(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 4, 9, 16, 25]) -> 5
([2, 3, 5, 7, 11, 13]) -> 3
([100, 200, 300, 400, 500]) -> 22
([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> 3
([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) -> 10
        }
    }
}

problem Generated/3630 {
code {
        func get_max_sqrt(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 4.0, 9.0, 16.0]) -> 4.0
([25.0, 36.0, 49.0]) -> 7.0
([0.0, 1.0, 2.0]) -> 1.4142135623730951
([100.0, 121.0, 144.0]) -> 12.0
([2.0, 3.0, 5.0]) -> 2.23606797749979
        }
    }
}

problem Generated/3631 {
code {
        func find_min_value_after_sqrt(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 4.0, 9.0, 16.0, 25.0]) -> 1.0
([0.0, 1.0, 2.0, 3.0, 4.0, 5.0]) -> 0.0
([2.0, 4.0, 6.0, 8.0, 10.0]) -> 1.4142135623730951
([0.5, 1.5, 2.5, 3.5, 4.5]) -> 0.7071067811865476
([0.01, 0.04, 0.09, 0.16, 0.25]) -> 0.1
        }
    }
}

problem Generated/3632 {
code {
        func find_closest_square_number(n: int) -> int
    }
    tests {
        template nse {
            (10) -> 9
(24) -> 25
(17) -> 16
(0) -> 0
(1) -> 1
        }
    }
}

problem Generated/3633 {
code {
        func euclidean_distance(vec1: list<double>, vec2: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0], [4.0, 5.0, 6.0]) -> 5.196152422706632
([0.0, 0.0, 0.0], [0.0, 0.0, 0.0]) -> 0.0
([1.0, 1.0], [1.0, 1.0]) -> 0.0
([1.0, 2.0, 3.0, 4.0], [4.0, 3.0, 2.0, 1.0]) -> 4.472136
([0.0, 0.0], [3.0, 4.0]) -> 5.0
        }
    }
}

problem Generated/3634 {
code {
        func euclidean_distance(point1: list<double>, point2: list<double>) -> double
    }
    tests {
        template nse {
            ([0.0, 0.0], [1.0, 0.0]) -> 1.0
([0.0, 0.0], [0.0, 1.0]) -> 1.0
([0.0, 0.0, 0.0], [1.0, 1.0, 1.0]) -> 1.7320508075688772
([0.0, 0.0, 0.0, 0.0], [1.0, 1.0, 1.0, 1.0]) -> 2.0
([3.0, 4.0], [0.0, 0.0]) -> 5.0
        }
    }
}

problem Generated/3635 {
code {
        func filter_odd_positions(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [2.0, 4.0]
([10.0, 20.0, 30.0, 40.0, 50.0]) -> [20.0, 40.0]
([1.0, 3.0, 5.0, 7.0, 9.0, 11.0]) -> [3.0, 7.0, 11.0]
([2.0, 4.0, 6.0, 8.0]) -> [4.0, 8.0]
([1.0, 4.0, 9.0, 16.0, 25.0]) -> [4.0, 16.0]
        }
    }
}

problem Generated/3636 {
code {
        func get_sqrt_of_index(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772, 2.0]
([2.0, 4.0, 6.0, 8.0, 10.0]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772, 2.0]
([0.0, 1.0, 4.0, 9.0, 16.0]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772, 2.0]
([3.14, 7.77, 10.01, 15.49]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772]
([]) -> []
([1.0]) -> [0.0]
        }
    }
}

problem Generated/3637 {
code {
        func filter_perfect_squares(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [2, 3, 5, 6, 7, 8, 10]
([25, 36, 49, 64, 81, 100]) -> []
([121, 144, 169]) -> []
([2, 3, 4, 5, 6, 7, 8, 9]) -> [2, 3, 5, 6, 7, 8]
([16]) -> []
        }
    }
}

problem Generated/3638 {
code {
        func filter_squares(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 4, 9, 16, 25, 36, 49, 64, 81, 100]) -> [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> [0, 1, 4, 9]
([10, 20, 30, 40, 50]) -> []
([121, 144, 169, 196, 225]) -> [121, 144, 169, 196, 225]
([11, 22, 33, 44, 55, 66, 77, 88, 99]) -> []
        }
    }
}

problem Generated/3639 {
code {
        func get_square_roots(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 4.0, 9.0, 16.0, 25.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([1.0, -4.0, 9.0, -16.0, 25.0]) -> [1.0, 3.0, 5.0]
([0.0, 1.0, 2.0, 3.0, 4.0, 5.0]) -> [0.0, 1.0, 1.41, 1.73, 2.0, 2.24]
([]) -> []
([16.0]) -> [4.0]
        }
    }
}

problem Generated/3640 {
code {
        func filter_sqrt(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 4.0]
([1.0, 4.0, 9.0, 16.0, 25.0]) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([0.0, 2.0, 3.0, 4.0, 5.0]) -> [0.0, 4.0]
([16.0, 25.0, 36.0, 49.0, 64.0]) -> [16.0, 25.0, 36.0, 49.0, 64.0]
([0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]) -> [0.0, 1.0, 4.0, 9.0]
        }
    }
}

problem Generated/3641 {
code {
        func filter_primes(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [2, 3, 5, 7]
([11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) -> [11, 13, 17, 19]
([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) -> [2, 3, 5, 7, 11]
([15, 21, 27, 33, 39]) -> []
([7, 11, 13, 17, 19, 23, 29, 31, 37, 41]) -> [7, 11, 13, 17, 19, 23, 29, 31, 37, 41]
        }
    }
}

problem Generated/3642 {
code {
        func sort_squares(nums: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([-4, -1, 0, 3, 10]) -> [0, 1, 9, 16, 100]
([-7, -3, 2, 3, 11]) -> [4, 9, 9, 49, 121]
([-1, 0, 1]) -> [0, 1, 1]
([1, 2, 3, 4, 5]) -> [1, 4, 9, 16, 25]
([-5, -4, -3, -2, -1]) -> [1, 4, 9, 16, 25]
        }
    }
}

problem Generated/3643 {
code {
        func sort_squares(nums: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([-4, -2, 0, 2, 4]) -> [0, 4, 4, 16, 16]
([-10, -4, -2, 1, 2, 3, 6]) -> [1, 4, 4, 9, 16, 36, 100]
([1, 2, 3, 4, 5]) -> [1, 4, 9, 16, 25]
([0, 1, 2, 4, 8]) -> [0, 1, 4, 16, 64]
([-3, -2, -1, 0, 1, 2, 3]) -> [0, 1, 1, 4, 4, 9, 9]
        }
    }
}

problem Generated/3644 {
code {
        func sort_sqrt_of_numbers(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 4.0, 9.0, 16.0, 25.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([16.0, 4.0, 9.0, 1.0, 25.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([2.0, 4.0, 6.0, 8.0, 10.0]) -> [1.4142135623730951, 2.0, 2.449489742783178, 2.8284271247461903, 3.1622776601683795]
([0.0, 1.0, 2.0, 3.0]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772]
([1.0]) -> [1.0]
        }
    }
}

problem Generated/3645 {
code {
        func is_perfect_square(n: int) -> bool
    }
    tests {
        template nse {
            (16) -> true
(25) -> true
(10) -> false
(0) -> true
(-1) -> false
        }
    }
}

problem Generated/3646 {
code {
        func are_all_elements_squares(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 4, 9, 16, 25, 36]) -> true
([1, 4, 9, 16, 25, 35]) -> false
([100, 144, 225, 289, 400]) -> true
([100, 144, 225, 290, 400]) -> false
([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> false
        }
    }
}

problem Generated/3647 {
code {
        func is_perfect_square(numbers: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 4, 9, 16, 25]) -> true
([4, 16, 25]) -> true
([2, 4, 6, 8]) -> false
([1, 2, 3, 4, 5, 7, 9]) -> false
([]) -> true
        }
    }
}

problem Generated/3648 {
code {
        func is_list_elements_square(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 4, 9, 16, 25]) -> true
([4, 16, 64, 256]) -> true
([1, 3, 9, 27]) -> false
([10, 25, 36, 81]) -> false
([]) -> true
        }
    }
}

problem Generated/3649 {
code {
        func are_all_numbers_square(numbers: list<double>) -> bool
    }
    tests {
        template nse {
            ([1.0, 4.0, 9.0, 16.0]) -> true
([2.0, 4.0, 8.0, 16.0]) -> false
([1.0, 2.0, 3.0, 4.0, 5.0]) -> false
([0.0, 1.0, 4.0, 9.0]) -> true
([]) -> true
        }
    }
}

problem Generated/3650 {
code {
        func square_root_of_list(numbers: string) -> list<double>
    }
    tests {
        template nse {
            ("4 9 16 25") -> [2.0, 3.0, 4.0, 5.0]
("1.44 2.25 3.24 4.41 5.76") -> [1.2, 1.5, 1.8, 2.1, 2.4]
("1 2 3 4 5") -> [1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979]
("2.25 3.24 1.44 4.41 5.76") -> [1.5, 1.8, 1.2, 2.1, 2.4]
("25 16 9 4") -> [5.0, 4.0, 3.0, 2.0]
        }
    }
}

problem Generated/3651 {
code {
        func square_root_to_string(numbers: list<double>) -> string
    }
    tests {
        template nse {
            ([4.0, 9.0, 16.0, 25.0, 36.0]) -> "2.0, 3.0, 4.0, 5.0, 6.0"
([1.0, 2.0, 3.0, 4.0, 5.0]) -> "1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979"
([0.0, 1.0, 2.0]) -> "0.0, 1.0, 1.4142135623730951"
([25.0, 36.0, 49.0]) -> "5.0, 6.0, 7.0"
([121.0, 144.0, 169.0, 196.0]) -> "11.0, 12.0, 13.0, 14.0"
        }
    }
}

problem Generated/3652 {
code {
        func sqrt_join(numbers: list<int>) -> string
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> "1.0-1.4142135623730951-1.7320508075688772-2.0-2.23606797749979"
([7, 16, 25, 36, 49]) -> "2.6457513110645907-4.0-5.0-6.0-7.0"
([100, 121, 144, 169]) -> "10.0-11.0-12.0-13.0"
([2, 3, 5, 7, 11, 13, 17, 19]) -> "1.4142135623730951-1.7320508075688772-2.23606797749979-2.6457513110645907-3.3166247903554-3.605551275463989-4.123105625617661-4.358898943540674"
([1]) -> "1.0"
        }
    }
}

problem Generated/3653 {
code {
        func sqrt_and_upper(elements: list<double>) -> list<string>
    }
    tests {
        template nse {
            ([9.0, 16.0, 25.0, 36.0, 49.0]) -> ["3.0", "4.0", "5.0", "6.0", "7.0"]
([0.0, 1.0, 4.0, 9.0, 16.0]) -> ["0.0", "1.0", "2.0", "3.0", "4.0"]
([0.5, 2.25, 4.0, 7.84, 10.0]) -> ["0.7071067811865476", "1.5", "2.0", "2.8", "3.1622776601683795"]
([100.0, 200.0, 300.0, 400.0, 500.0]) -> ["10.0", "14.142135623730951", "17.320508075688775", "20.0", "22.360679774997898"]
([]) -> []
        }
    }
}

problem Generated/3654 {
code {
        func sqrt_and_upper(numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 4, 9, 16]) -> ["1.0", "1.4142135623730951", "2.0", "3.0", "4.0"]
([7, 14, 21, 28, 35]) -> ["2.6457513110645907", "3.7416573867739413", "4.58257569495584", "5.291502622129181", "5.916079783099616"]
([5, 10, 15, 20, 25]) -> ["2.23606797749979", "3.1622776601683795", "3.872983346207417", "4.47213595499958", "5.0"]
([13, 26, 39, 52, 65]) -> ["3.605551275463989", "5.0990195135927845", "6.244997998398398", "7.211102550927978", "8.06225774829855"]
([2, 4, 6, 8, 10]) -> ["1.4142135623730951", "2.0", "2.449489742783178", "2.8284271247461903", "3.1622776601683795"]
        }
    }
}

problem Generated/3655 {
code {
        func square_root_of_positive_numbers(numbers: list<double>, strs: list<string>) -> list<string>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], ["one", "two", "three", "four", "five"]) -> ["ONE", "TWO", "THREE", "FOUR", "FIVE"]
([-1.0, -2.0, -3.0, -4.0, -5.0], ["one", "two", "three", "four", "five"]) -> ["one", "two", "three", "four", "five"]
([0.0, 4.0, 9.0, 16.0, 25.0], ["zero", "four", "nine", "sixteen", "twenty five"]) -> ["zero", "FOUR", "NINE", "SIXTEEN", "TWENTY FIVE"]
([], []) -> []
([2.0, -3.0, 4.0, -5.0], ["hello", "world", "python", "programming"]) -> ["HELLO", "world", "PYTHON", "programming"]
        }
    }
}

problem Generated/3656 {
code {
        func get_square_roots(elements: list<string>) -> list<double>
    }
    tests {
        template nse {
            (["1", "4", "9", "16", "25"]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
(["1", "2", "3", "4", "5"]) -> [1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979]
(["-1", "4", "9", "-16", "25"]) -> [2.0, 3.0, 5.0]
(["15", "25", "100", "abc", "1024"]) -> [3.872983346207417, 5.0, 10.0, 32.0]
([]) -> []
        }
    }
}

problem Generated/3657 {
code {
        func get_sqrt_words(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["sqrt4", "nope", "sqrt9", "sqrt16", "notsqrt25", "sqrt36"]) -> ["sqrt4", "sqrt9", "sqrt16", "sqrt36"]
(["sqrt7", "sqrt81", "notsqrt35"]) -> ["sqrt81"]
([]) -> []
(["sqrt0", "sqrt1", "sqrt2", "sqrt3"]) -> ["sqrt0", "sqrt1"]
(["sqrt4"]) -> ["sqrt4"]
        }
    }
}

problem Generated/3658 {
code {
        func find_square_numbers(words: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["hello", "16", "world", "25"]) -> ["16", "25"]
(["1", "4", "9", "16", "25"]) -> ["1", "4", "9", "16", "25"]
(["hi", "1024", "there", "1296"]) -> ["1024", "1296"]
(["no", "perfect", "squares", "here"]) -> []
(["0", "1", "2", "3"]) -> ["0", "1"]
        }
    }
}

problem Generated/3659 {
code {
        func calculate_sqrt_count(string_lst: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["sqrt(9)", "sqrt(16)", "sqrt(25)"]) -> [1, 1, 1]
(["sqrt(16)", "sqrt(16)", "sqrt(16)"]) -> [1, 1, 1]
(["sqrt(81)", "sqrt(1)", "sqrt(121)", "sqrt(100)"]) -> [1, 1, 1, 1]
(["sqrt(100)", "sqrt(20)", "sqrt(36)", "sqrt(81)"]) -> [1, 1, 1, 1]
(["hello", "world", "sqrt(4)", "sqrt(9)"]) -> [0, 0, 1, 1]
        }
    }
}

problem Generated/3660 {
code {
        func replace_sqrt(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([16, 9, 25, 36, 49]) -> [4, 3, 5, 6, 7]
([1, 4, 9, 16, 25, 36, 49]) -> [1, 2, 3, 4, 5, 6, 7]
([0, 1, 2, 3, 4, 5, 6]) -> [0, 1, 1, 1, 2, 2, 2]
([12, 3, 7, 0, -5, 10]) -> [3, 1, 2, 0, 0, 3]
([]) -> []
        }
    }
}

problem Generated/3661 {
code {
        func sqrt_replace(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 4, 9, 16, 25]) -> [1, 2, 3, 4, 5]
([0, -2, 3, -4, 5]) -> [0, 0, 1, 0, 2]
([100, 225, 400, 16, 81]) -> [10, 15, 20, 4, 9]
([0, 0, 0, 0, 0]) -> [0, 0, 0, 0, 0]
([-1, -2, -3, -4, -5]) -> [0, 0, 0, 0, 0]
        }
    }
}

problem Generated/3662 {
code {
        func square_root_replacement(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([4.0, 9.0, 16.0, 25.0, -9.0, 0.0]) -> [2.0, 3.0, 4.0, 5.0, -9.0, 0.0]
([121.0, 169.0, 100.0, 36.0]) -> [11.0, 13.0, 10.0, 6.0]
([0.0, 1.0, 2.0, 3.0, 4.0]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772, 2.0]
([-4.0, -3.0, -2.0, -1.0]) -> [-4.0, -3.0, -2.0, -1.0]
([0.0]) -> [0.0]
        }
    }
}

problem Generated/3663 {
code {
        func replace_sqrt_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 4, 9, 16, 25]) -> [1, 2, 3, 4, 5]
([-4, 9, -16, 25, 0]) -> [-4, 3, -16, 5, 0]
([0, -4, -9, 16, 25]) -> [0, -4, -9, 4, 5]
([4, 4, 4, 4, 4]) -> [2, 2, 2, 2, 2]
([]) -> []
        }
    }
}

problem Generated/3664 {
code {
        func square_root_replace(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979]
([0.0, -2.0, 3.0, -4.0, 5.0]) -> [0.0, -2.0, 1.7320508075688772, -4.0, 2.23606797749979]
([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, -2.0, 1.7320508075688772, -4.0, 2.23606797749979]
([]) -> []
([0.0, 0.0, 0.0]) -> [0.0, 0.0, 0.0]
        }
    }
}

problem Generated/3665 {
code {
        func append_sqrt_of_numbers(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 4.0, 9.0, 16.0, 25.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.0, 1.0, 2.0, 3.0, 4.0]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772, 2.0]
([9.0, 16.0, 25.0, 36.0, 49.0]) -> [3.0, 4.0, 5.0, 6.0, 7.0]
([1.0, 2.0, 3.0, -4.0, 5.0]) -> [1.0, 1.4142135623730951, 1.7320508075688772, 2.23606797749979]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> []
        }
    }
}

problem Generated/3666 {
code {
        func get_square_roots(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([4.0, 9.0, 16.0, 25.0, 36.0]) -> [2.0, 3.0, 4.0, 5.0, 6.0]
([2.0, 3.0, 5.0, 7.0, 11.0]) -> [1.4142135623730951, 1.7320508075688772, 2.23606797749979, 2.6457513110645907, 3.3166247903554]
([16.0, 25.0, 36.0, 49.0, 64.0]) -> [4.0, 5.0, 6.0, 7.0, 8.0]
([]) -> []
([1.0, 4.0, 9.0, 16.0]) -> [1.0, 2.0, 3.0, 4.0]
        }
    }
}

problem Generated/3667 {
code {
        func sqrt_of_each_element(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 4.0, 9.0, 16.0, 25.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.0, 1.0, 2.0, 3.0, 4.0]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772, 2.0]
([16.0, 25.0, 36.0]) -> [4.0, 5.0, 6.0]
([2.0, 3.0, 5.0, 7.0, 11.0]) -> [1.4142135623730951, 1.7320508075688772, 2.23606797749979, 2.6457513110645907, 3.3166247903554]
([]) -> []
        }
    }
}

problem Generated/3668 {
code {
        func get_square_roots(numbers: list<int>) -> list<double>
    }
    tests {
        template nse {
            ([1, 4, 9, 16, 25]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([2, 3, 5, 7, 11]) -> [1.4142135623730951, 1.7320508075688772, 2.23606797749979, 2.6457513110645907, 3.3166247903554]
([0, 100, 1, 9, 16]) -> [0.0, 10.0, 1.0, 3.0, 4.0]
([144, 256, 400, 576]) -> [12.0, 16.0, 20.0, 24.0]
([2, 5, 8, 11, 14]) -> [1.4142135623730951, 2.23606797749979, 2.8284271247461903, 3.3166247903554, 3.7416573867739413]
        }
    }
}

problem Generated/3669 {
code {
        func get_sqrt_list(numbers: list<int>) -> list<double>
    }
    tests {
        template nse {
            ([1, 4, 9, 16, 25]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([2, 3, 5, 7, 11]) -> [1.4142135623730951, 1.7320508075688772, 2.23606797749979, 2.6457513110645907, 3.3166247903554]
([0, 1, 2, 3]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772]
([25, 36, 49, 64]) -> [5.0, 6.0, 7.0, 8.0]
([144, 169, 196, 225, 256]) -> [12.0, 13.0, 14.0, 15.0, 16.0]
        }
    }
}

problem Generated/3670 {
code {
        func sort_list_of_squares(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 4, 9, 16, 25]
([10, 3, 8, 2, 6]) -> [4, 9, 36, 64, 100]
([-3, -1, 0, 2, 4]) -> [0, 1, 4, 9, 16]
([11, -2, 3, 0, 5]) -> [0, 4, 9, 25, 121]
([0, 0, 0, 0, 0]) -> [0, 0, 0, 0, 0]
        }
    }
}

problem Generated/3671 {
code {
        func sort_list_of_squares(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 4, 9, 16, 25]
([0, -2, 5, -4, 1]) -> [0, 1, 4, 16, 25]
([-1, -2, -3, -4, -5]) -> [1, 4, 9, 16, 25]
([3, 2, 1]) -> [1, 4, 9]
([10, -3, 4, -6, 7]) -> [9, 16, 36, 49, 100]
        }
    }
}

problem Generated/3672 {
code {
        func sort_list_of_squares(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 4, 5, 2, 3]) -> [1, 4, 9, 16, 25]
([2, 3, 1]) -> [1, 4, 9]
([0]) -> [0]
([4, 3, 8, 1]) -> [1, 9, 16, 64]
([-1, -2, 3, 0]) -> [0, 1, 4, 9]
        }
    }
}

problem Generated/3673 {
code {
        func reverse_sqrt_list(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [2.23606797749979, 2.0, 1.7320508075688772, 1.4142135623730951, 1.0]
([0.5, 2.25, 4.0, 9.0]) -> [3.0, 2.0, 1.5, 0.7071067811865476]
([16.0, 25.0, 36.0, 49.0, 64.0]) -> [8.0, 7.0, 6.0, 5.0, 4.0]
([0.0, 1.0, 4.0, 9.0, 16.0]) -> [4.0, 3.0, 2.0, 1.0, 0.0]
([1.0, 10.0, 100.0]) -> [10.0, 3.1622776601683795, 1.0]
        }
    }
}

problem Generated/3674 {
code {
        func square_root_of_positive_numbers(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [-1.0, -2.0, -3.0, -4.0, -5.0]
([0.0, -2.0, 3.0, -4.0, 5.0]) -> [0.0, -2.0, 1.7320508075688772, -4.0, 2.23606797749979]
([2.25, 3.24, 4.0, 5.29, 6.25]) -> [1.5, 1.8, 2.0, 2.3, 2.5]
([0.0, 0.0, 0.0, 0.0, 0.0]) -> [0.0, 0.0, 0.0, 0.0, 0.0]
        }
    }
}

problem Generated/3675 {
code {
        func square_and_copy_list(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 4.0, 9.0, 16.0, 25.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([2.25, 4.0, 6.25, 9.0, 12.25]) -> [1.5, 2.0, 2.5, 3.0, 3.5]
([0.0, 2.25, 4.0, 9.0]) -> [0.0, 1.5, 2.0, 3.0]
([1.0, 2.0, 3.0, 4.0]) -> [1.0, 1.4142135623730951, 1.7320508075688772, 2.0]
([0.25, 0.5, 0.75, 1.0]) -> [0.5, 0.7071067811865476, 0.8660254037844386, 1.0]
        }
    }
}

problem Generated/3676 {
code {
        func get_square_roots(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 4.0, 9.0, 16.0, 25.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([2.25, 16.0, 0.25, 4.0]) -> [1.5, 4.0, 0.5, 2.0]
([]) -> []
([100.0]) -> [10.0]
([9.0, 16.0, 25.0, 36.0, 49.0]) -> [3.0, 4.0, 5.0, 6.0, 7.0]
        }
    }
}

problem Generated/3677 {
code {
        func get_sqrt_list(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([4.0, 9.0, 16.0, 25.0]) -> [2.0, 3.0, 4.0, 5.0]
([1.0, 2.25, 4.0, 6.25, 9.0]) -> [1.0, 1.5, 2.0, 2.5, 3.0]
([0.0, 1.0, 2.0, 3.0, 4.0]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772, 2.0]
([16.0, 25.0, 36.0]) -> [4.0, 5.0, 6.0]
([]) -> []
([100.0]) -> [10.0]
        }
    }
}

problem Generated/3678 {
code {
        func get_sqrt_list(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 4.0, 9.0, 16.0, 25.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([0.0, 1.0, 2.0, 3.0, 4.0]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772, 2.0]
([1.2, 3.4, 5.6, 7.8, 9.0]) -> [1.0954451150103321, 1.8439088914585775, 2.3664319132398464, 2.7928480087537883, 3.0]
([25.0, 16.0, 9.0, 4.0, 1.0, 0.0]) -> [5.0, 4.0, 3.0, 2.0, 1.0, 0.0]
([2.0, 2.5, 3.0, 3.5, 4.0]) -> [1.4142135623730951, 1.5811388300841898, 1.7320508075688772, 1.8708286933869707, 2.0]
        }
    }
}

problem Generated/3679 {
code {
        func get_sqrt_of_elements(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 4.0, 9.0, 16.0, 25.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([2.0, 4.0, 6.0, 8.0, 10.0]) -> [1.4142135623730951, 2.0, 2.449489742783178, 2.8284271247461903, 3.1622776601683795]
([0.0, 1.0, 2.0, 3.0]) -> [0.0, 1.0, 1.4142135623730951, 1.7320508075688772]
([100.0, 121.0, 144.0]) -> [10.0, 11.0, 12.0]
([2.0, 3.0, 5.0, 7.0, 11.0]) -> [1.4142135623730951, 1.7320508075688772, 2.23606797749979, 2.6457513110645907, 3.3166247903554]
        }
    }
}

problem Generated/3680 {
code {
        func get_root_elements(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 4, 9, 16, 25]) -> [1, 2, 3, 4, 5]
([2, 5, 10, 25, 9]) -> [1, 2, 3, 5, 3]
([100, 121, 25, 169]) -> [10, 11, 5, 13]
([5, 23, 77, 32, 18]) -> [2, 4, 8, 5, 4]
([16, 64, 144, 256]) -> [4, 8, 12, 16]
        }
    }
}

problem Generated/3681 {
code {
        func get_square_root_floor(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 1, 1, 2, 2]
([25.0, 16.0, 9.0, 4.0, 1.0]) -> [5, 4, 3, 2, 1]
([0.0, 0.5, 1.0, 1.5, 2.0]) -> [0, 0, 1, 1, 1]
([10.0, 20.0, 30.0, 40.0, 50.0]) -> [3, 4, 5, 6, 7]
([1.0, 8.0, 27.0, 64.0, 125.0]) -> [1, 2, 5, 8, 11]
        }
    }
}

problem Generated/3682 {
code {
        func find_sqrt_floor(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 1, 1, 2, 2]
([9, 16, 25, 36, 49]) -> [3, 4, 5, 6, 7]
([0, 1, 10, 100, 1000]) -> [0, 1, 3, 10, 31]
([37, 63, 92, 101, 128]) -> [6, 7, 9, 10, 11]
([12, 50, 87, 91, 120]) -> [3, 7, 9, 9, 10]
        }
    }
}

problem Generated/3683 {
code {
        func get_sqrt_floor_elements(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([2.0, 6.0, 9.0, 16.0, 25.0, 36.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]
([2.5, 6.8, 9.3, 16.2, 25.9, 36.7]) -> [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]
([0.9, 3.7, 5.2, 7.8, 10.2, 15.6]) -> [0.0, 1.0, 2.0, 2.0, 3.0, 3.0]
([19.4, 20.1, 20.5, 20.9, 22.3, 24.5]) -> [4.0, 4.0, 4.0, 4.0, 4.0, 4.0]
([1.0, 4.0, 9.0, 16.0, 25.0, 36.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]
        }
    }
}

problem Generated/3684 {
code {
        func get_square_roots(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.0, 4.0, 9.0, 16.0, 25.0]) -> [1, 2, 3, 4, 5]
([2.2, 3.3, 4.4, 5.5, 6.6]) -> [1, 1, 2, 2, 2]
([0.0, 1.0, 2.0, 3.0, 4.0]) -> [0, 1, 1, 1, 2]
([9.0, 16.0, 25.0, 36.0, 49.0]) -> [3, 4, 5, 6, 7]
([0.1, 0.2, 0.3, 0.4, 0.5]) -> [0, 0, 0, 0, 0]
        }
    }
}

problem Generated/3685 {
code {
        func get_floored_squares(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([4.0, 9.0, 16.0, 25.0, 36.0]) -> [2, 3, 4, 5, 6]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 1, 1, 2, 2]
([121.0, 144.0, 169.0, 196.0, 225.0]) -> [11, 12, 13, 14, 15]
([0.0, 0.25, 0.5, 1.0, 2.0]) -> [0, 0, 0, 1, 1]
([1.0, 2.5, 3.3, 4.7, 5.1]) -> [1, 1, 1, 2, 2]
        }
    }
}

problem Generated/3686 {
code {
        func floor_sqrt(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 1, 1, 2, 2]
([25.0, 36.0, 49.0, 64.0, 81.0]) -> [5, 6, 7, 8, 9]
([0.0, 4.0, 9.0, 16.0, 25.0]) -> [0, 2, 3, 4, 5]
([10.0, 15.0, 20.0, 25.0, 30.0]) -> [3, 3, 4, 5, 5]
([2.0, 4.0, 6.0, 8.0, 10.0]) -> [1, 2, 2, 2, 3]
        }
    }
}

problem Generated/3687 {
code {
        func get_square_roots(nums: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 2, 2, 3]
([16, 25, 36, 49, 64]) -> [4, 5, 6, 7, 8]
([100, 200, 300, 400, 500]) -> [10, 15, 18, 20, 23]
([9, 16, 25, 36, 49, 81]) -> [3, 4, 5, 6, 7, 9]
([2, 3, 5, 7, 11]) -> [2, 2, 3, 3, 4]
        }
    }
}

problem Generated/3688 {
code {
        func square_root_upper_bound(n: int) -> int
    }
    tests {
        template nse {
            (0) -> 0
(1) -> 1
(2) -> 2
(15) -> 4
(100) -> 10
        }
    }
}

problem Generated/3689 {
code {
        func square_root_ceiling(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 2, 2, 2, 3]
([7, 8, 9, 10, 11]) -> [3, 3, 3, 4, 4]
([12, 13, 14, 15, 16]) -> [4, 4, 4, 4, 4]
([17, 18, 19, 20, 21]) -> [5, 5, 5, 5, 5]
([22, 23, 24, 25, 26]) -> [5, 5, 5, 5, 6]
        }
    }
}

problem Generated/3690 {
code {
        func calculate_hypotenuse(sides: list<int>) -> double
    }
    tests {
        template nse {
            ([3, 4]) -> 5.0
([5, 12]) -> 13.0
([7, 24]) -> 25.0
([8, 15]) -> 17.0
([9, 40]) -> 41.0
        }
    }
}

problem Generated/3691 {
code {
        func calculate_distance(points: list<list<int>>) -> list<double>
    }
    tests {
        template nse {
            ([[0,0],[3,4],[1,1]]) -> [0.0, 5.0, 1.4142135623730951]
([[0,0],[1,1],[2,2],[3,3]]) -> [0.0, 1.4142135623730951, 2.8284271247461903, 4.242640687119285]
([[-1,-1],[0,0],[1,1]]) -> [1.4142135623730951, 0.0, 1.4142135623730951]
([[0,0],[0,0],[0,0]]) -> [0.0, 0.0, 0.0]
([]) -> []
        }
    }
}

problem Generated/3692 {
code {
        func split_string_into_chunks(s: string, chunk_size: int) -> list<string>
    }
    tests {
        template nse {
            ("abcdefg", 2) -> ["ab", "cd", "ef", "g"]
("Hello World", 3) -> ["Hel", "lo ", "Wor", "ld"]
("Python is awesome", 5) -> ["Pytho", "n is ", "aweso", "me"]
("This is a test", 1) -> ["T", "h", "i", "s", " ", "i", "s", " ", "a", " ", "t", "e", "s", "t"]
("Chunking", 10) -> ["Chunking"]
        }
    }
}

problem Generated/3693 {
code {
        func get_list_of_square_roots(input_s: string) -> list<double>
    }
    tests {
        template nse {
            ("4 9 16 25 36 49") -> [2.0, 3.0, 4.0, 5.0, 6.0, 7.0]
("1.0 2.0 3.0 4.0") -> [1.0, 1.4142135623730951, 1.7320508075688772, 2.0]
("1 4 9 16") -> [1.0, 2.0, 3.0, 4.0]
("36 64 100 144 196") -> [6.0, 8.0, 10.0, 12.0, 14.0]
("1.21 1.44 1.69") -> [1.1, 1.2, 1.3]
        }
    }
}

problem Generated/3694 {
code {
        func power_of_two(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [1, 2, 4, 8, 16]
(8) -> [1, 2, 4, 8, 16, 32, 64, 128]
(0) -> []
(1) -> [1]
(10) -> [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]
        }
    }
}

problem Generated/3695 {
code {
        func power_of_2(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [1, 2, 4, 8, 16]
(0) -> []
(10) -> [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]
(1) -> [1]
(3) -> [1, 2, 4]
        }
    }
}

problem Generated/3696 {
code {
        func power_of_two(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [1, 2, 4, 8, 16]
(0) -> []
(1) -> [1]
(3) -> [1, 2, 4]
(10) -> [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]
        }
    }
}

problem Generated/3697 {
code {
        func calculate_powers(b: int, start: int, last: int) -> list<double>
    }
    tests {
        template nse {
            (2, 0, 5) -> [1.0, 2.0, 4.0, 8.0, 16.0, 32.0]
(3, 2, 4) -> [9.0, 27.0, 81.0]
(0, 2, 5) -> [0.0, 0.0, 0.0, 0.0]
(4, 3, 3) -> [64.0]
(5, 0, 0) -> [1.0]
        }
    }
}

problem Generated/3698 {
code {
        func power_of_two_list(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [1, 2, 4, 8, 16]
(10) -> [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]
(1) -> [1]
(0) -> []
(15) -> [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]
        }
    }
}

problem Generated/3699 {
code {
        func get_powers_of_two(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [1, 2, 4, 8, 16]
(0) -> []
(1) -> [1]
(8) -> [1, 2, 4, 8, 16, 32, 64, 128]
(3) -> [1, 2, 4]
        }
    }
}

problem Generated/3700 {
code {
        func generate_power_list(b: int, limit: int) -> list<int>
    }
    tests {
        template nse {
            (2, 5) -> [1, 2, 4, 8, 16]
(3, 3) -> [1, 3, 9]
(10, 4) -> [1, 10, 100, 1000]
(5, 0) -> []
(0, 5) -> [1, 0, 0, 0, 0]
        }
    }
}

problem Generated/3701 {
code {
        func list_to_the_power_of_n(elements: list<double>, n: int) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([2.0, 3.0, 4.0, 5.0], 3) -> [8.0, 27.0, 64.0, 125.0]
([-1.0, -2.0, -3.0, -4.0, -5.0], 2) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([], 1) -> []
([1.0], 0) -> [1.0]
        }
    }
}

problem Generated/3702 {
code {
        func power_list(numbers: list<int>, power: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [1, 4, 9, 16, 25]
([1, -2, 3, -4, 5], 3) -> [1, 8, 27, 64, 125]
([1, 0, 3, 0, 5], 4) -> [1, 0, 81, 0, 625]
([-1, -2, -3, -4, -5], 5) -> [1, 32, 243, 1024, 3125]
([], 5) -> []
        }
    }
}

problem Generated/3703 {
code {
        func calculate_power_of_elements(numbers: list<double>, power: double) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0], 2.0) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([1.0, -2.0, 3.0, -4.0, 5.0], 3.0) -> [1.0, 8.0, 27.0, 64.0, 125.0]
([1.0, -2.0, 3.0, -4.0, 5.0], -2.0) -> [1.0, 0.25, 0.1111111111111111, 0.0625, 0.04]
([1.0, -2.0, 3.0, -4.0, 5.0], 1.0) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([-1.0, -2.0, -3.0, -4.0, -5.0], 2.0) -> [1.0, 4.0, 9.0, 16.0, 25.0]
        }
    }
}

problem Generated/3704 {
code {
        func calculate_power(numbers: list<double>, power: int) -> list<double>
    }
    tests {
        template nse {
            ([2.0, -3.0, 4.0, -5.0], 2) -> [4.0, 9.0, 16.0, 25.0]
([2.0, -3.0, 4.0, -5.0], 3) -> [8.0, 27.0, 64.0, 125.0]
([2.0, -3.0, 4.0, -5.0], 0) -> [1.0, 1.0, 1.0, 1.0]
([2.0, -3.0, 4.0, -5.0], -1) -> [0.5, 0.3333333333333333, 0.25, 0.2]
([], 2) -> []
        }
    }
}

problem Generated/3705 {
code {
        func sum_of_powered_numbers(numbers: list<int>, power: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> 55
([-1, -2, -3, -4, -5], 3) -> 225
([1, 2, 3, 4, 5], 1) -> 15
([0, 0, 0, 0, 0], 5) -> 0
([2, 3, 5, 7, 11], 0) -> 5
        }
    }
}

problem Generated/3706 {
code {
        func get_absolute_powers(numbers: list<int>, power: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [1, 4, 9, 16, 25]
([1, 2, 3, 4, 5], 3) -> [1, 8, 27, 64, 125]
([-1, 2, -3, 4, -5], 2) -> [1, 4, 9, 16, 25]
([0, 1, 2, 3, 4, 5, 6], 4) -> [0, 1, 16, 81, 256, 625, 1296]
([10, 20, 30, 40, 50], 1) -> [10, 20, 30, 40, 50]
        }
    }
}

problem Generated/3707 {
code {
        func get_powered_abs_list(numbers: list<double>, power: int) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0], 2) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([1.0, -2.0, 3.0, -4.0, 5.0], 3) -> [1.0, 8.0, 27.0, 64.0, 125.0]
([1.0, -2.0, 3.0, -4.0, 5.0], 0) -> [1.0, 1.0, 1.0, 1.0, 1.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 1) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([-1.0, -2.0, -3.0, -4.0, -5.0], 2) -> [1.0, 4.0, 9.0, 16.0, 25.0]
        }
    }
}

problem Generated/3708 {
code {
        func calculate_power_of_numbers(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 8, 27, 64, 125]
([-1, -2, -3, -4, -5]) -> [1, 8, 27, 64, 125]
([0, 1, -1, 2, -2]) -> [0, 1, 1, 8, 8]
([10, 20, 30, 40, 50]) -> [1000, 8000, 27000, 64000, 125000]
([-10, -20, -30, -40, -50]) -> [1000, 8000, 27000, 64000, 125000]
        }
    }
}

problem Generated/3709 {
code {
        func calc_power_sum(numbers: list<double>, power: int) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2) -> 55.0
([1.0, 2.0, 3.0, 4.0, 5.0], 3) -> 225.0
([1.0, 2.0, 3.0, 4.0, 5.0], 0) -> 5.0
([-1.0, 2.0, -3.0, 4.0, -5.0], 2) -> 55.0
([0.0, 0.0, 0.0, 0.0, 0.0], 5) -> 0.0
        }
    }
}

problem Generated/3710 {
code {
        func calculate_power_values(numbers: list<int>, powers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([2, 3, 4, 5], [1, 2, 3, 4]) -> [2, 9, 64, 625]
([2, 3, 4], [4, 3, 2]) -> [16, 27, 16]
([5, 6, 7], [3, 2, 1]) -> [125, 36, 7]
([1, 2, 3], [0, 1, 2]) -> [1, 2, 9]
([2, 3, 4], [0, 0, 0]) -> [1, 1, 1]
        }
    }
}

problem Generated/3711 {
code {
        func get_power_list(base_lst: list<double>, power_lst: list<int>) -> list<double>
    }
    tests {
        template nse {
            ([2.0, 3.0, 4.0], [1, 2, 3]) -> [2.0, 9.0, 64.0]
([3.0, 4.0, 5.0], [0, 1, 2]) -> [1.0, 4.0, 25.0]
([3.0, 4.0, 5.0], [-1, 2, -3]) -> [0.3333333333333333, 16.0, 0.008]
([1.0, 2.0], [1, 2]) -> [1.0, 4.0]
([0.0], [1]) -> [0.0]
        }
    }
}

problem Generated/3712 {
code {
        func calculate_exponents(b: list<double>, exponent: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([2.0, 3.0, 5.0], [3.0, 2.0, 1.0]) -> [8.0, 9.0, 5.0]
([1.0, 2.0, 3.0], [0.0, 1.0, 2.0]) -> [1.0, 2.0, 9.0]
([0.0, 2.0, 4.0], [3.0, 0.0, 2.0]) -> [0.0, 1.0, 16.0]
([2.0, 3.0, 4.0], [1.0, -1.0, 0.5]) -> [2.0, 0.3333333333333333, 2.0]
([1.0, 2.0, 3.0], []) -> []
        }
    }
}

problem Generated/3713 {
code {
        func compute_powers(b: list<int>, exponent: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [0, 2, 3, 1, 4]) -> [1, 4, 27, 4, 625]
([7, 3, 5, 9, 6], [0, 2, 3, 1, 4]) -> [1, 9, 125, 9, 1296]
([2, 3, 4, 5], [1, 2, 3, 4]) -> [2, 9, 64, 625]
([4, 2, 6, 3], [2, 4, 3, 1]) -> [16, 16, 216, 3]
([1, 1, 1], [1, 2, 3]) -> [1, 1, 1]
        }
    }
}

problem Generated/3714 {
code {
        func get_power_list(numbers: list<int>, powers: list<int>) -> list<double>
    }
    tests {
        template nse {
            ([2, 3, 4], [1, 2, 3]) -> [2.0, 9.0, 64.0]
([7, 5, 2], [2, 3, 4]) -> [49.0, 125.0, 16.0]
([1, 2, 3], [0, 0, 0]) -> [1.0, 1.0, 1.0]
([-1, 2, -3], [1, 2, 3]) -> [-1.0, 4.0, -27.0]
([0, 1, 2], [2, 1, 0]) -> [0.0, 1.0, 1.0]
        }
    }
}

problem Generated/3715 {
code {
        func calculate_power_of_pairs(a: list<double>, b: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([2.0, 3.0, 4.0, 5.0], [2.0, 3.0, 4.0, 5.0]) -> [4.0, 27.0, 256.0, 3125.0]
([10.0, 2.0, 3.0, 4.0], [0.5, -2.0, 3.0, 0.25]) -> [3.1622776601683795, 0.25, 27.0, 1.4142135623730951]
([1.0, 1.0, 1.0], [2.0, 3.0, 4.0]) -> [1.0, 1.0, 1.0]
([5.0, 4.0, 3.0], [0.0, 0.0, 0.0]) -> [1.0, 1.0, 1.0]
([2.0, 4.0, 6.0], [-1.0, -2.0, -3.0]) -> [0.5, 0.0625, 0.004629629629629629]
        }
    }
}

problem Generated/3716 {
code {
        func square_elements_with_given_power(elements: list<double>, power: int) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([1.0, -2.0, 3.0, -4.0, 5.0], 3) -> [1.0, -8.0, 27.0, -64.0, 125.0]
([-1.0, -2.0, -3.0, -4.0, -5.0], 2) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 0) -> [1.0, 1.0, 1.0, 1.0, 1.0]
([], 2) -> []
        }
    }
}

problem Generated/3717 {
code {
        func raise_to_power(numbers: list<int>, power: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [1, 4, 9, 16, 25]
([1, 2, 3, 4, 5], 3) -> [1, 8, 27, 64, 125]
([-1, -2, -3, -4, -5], 2) -> [1, 4, 9, 16, 25]
([0, 1, 2, 3], 0) -> [1, 1, 1, 1]
([7, 3, 5, 9, 2], 1) -> [7, 3, 5, 9, 2]
        }
    }
}

problem Generated/3718 {
code {
        func square_elements(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([1.5, 2.5, 3.5, 4.5, 5.5]) -> [2.25, 6.25, 12.25, 20.25, 30.25]
([0.0, 0.5, 1.0, 1.5, 2.0]) -> [0.0, 0.25, 1.0, 2.25, 4.0]
([0.0, -0.5, 1.0, -1.5, 2.0]) -> [0.0, 0.25, 1.0, 2.25, 4.0]
        }
    }
}

problem Generated/3719 {
code {
        func square_elements(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 4, 9, 16, 25]
([7, 3, 5, 9, 6]) -> [49, 9, 25, 81, 36]
([-1, 2, -3]) -> [1, 4, 9]
([5]) -> [25]
([]) -> []
([0, 1, -1, 2, -2]) -> [0, 1, 1, 4, 4]
        }
    }
}

problem Generated/3720 {
code {
        func filter_pow_of_two(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [1, 2, 4, 8]
([2, 4, 8, 16, 32, 64]) -> [2, 4, 8, 16, 32, 64]
([3, 6, 9, 12, 15, 18, 21]) -> []
([1, 3, 5, 7, 9, 11, 13, 15]) -> [1]
([80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95]) -> []
        }
    }
}

problem Generated/3721 {
code {
        func sort_numbers_by_power(numbers: list<int>, power: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [1, 2, 3, 4, 5]
([1, 2, 3, 4, 5], 3) -> [1, 2, 3, 4, 5]
([-5, -4, -3, -2, -1], 2) -> [-1, -2, -3, -4, -5]
([5, 4, 3, 2, 1], 2) -> [1, 2, 3, 4, 5]
([5, 4, 3, 2, 1], 3) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/3722 {
code {
        func are_powers_of_three(numbers: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 3, 9, 27, 81]) -> true
([1, 3, 5, 7, 9]) -> false
([1, 9, 81, 6561, 19683]) -> true
([1, 2, 4, 8, 16, 32]) -> false
([3, 3, 3, 3, 3]) -> true
        }
    }
}

problem Generated/3723 {
code {
        func binary_powers_of_two(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["0b1", "0b10", "0b100", "0b1000", "0b10000"]
(3) -> ["0b1", "0b10", "0b100"]
(7) -> ["0b1", "0b10", "0b100", "0b1000", "0b10000", "0b100000", "0b1000000"]
(0) -> []
(1) -> ["0b1"]
        }
    }
}

problem Generated/3724 {
code {
        func power_of_two_as_binary(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["1", "10", "100", "1000", "10000"]
(8) -> ["1", "10", "100", "1000", "10000", "100000", "1000000", "10000000"]
(1) -> ["1"]
(0) -> []
(12) -> ["1", "10", "100", "1000", "10000", "100000", "1000000", "10000000", "100000000", "1000000000", "10000000000", "100000000000"]
        }
    }
}

problem Generated/3725 {
code {
        func binary_powers(n: int) -> list<string>
    }
    tests {
        template nse {
            (1) -> ["0b1"]
(2) -> ["0b1", "0b10"]
(3) -> ["0b1", "0b10", "0b100"]
(4) -> ["0b1", "0b10", "0b100", "0b1000"]
(5) -> ["0b1", "0b10", "0b100", "0b1000", "0b10000"]
        }
    }
}

problem Generated/3726 {
code {
        func get_binary_powers(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["0b1", "0b10", "0b100", "0b1000", "0b10000"]
(2) -> ["0b1", "0b10"]
(0) -> []
(1) -> ["0b1"]
(4) -> ["0b1", "0b10", "0b100", "0b1000"]
        }
    }
}

problem Generated/3727 {
code {
        func get_binary_powers(n: int) -> list<string>
    }
    tests {
        template nse {
            (5) -> ["0b1", "0b10", "0b100", "0b1000", "0b10000"]
(0) -> []
(1) -> ["0b1"]
(8) -> ["0b1", "0b10", "0b100", "0b1000", "0b10000", "0b100000", "0b1000000", "0b10000000"]
(3) -> ["0b1", "0b10", "0b100"]
        }
    }
}

problem Generated/3728 {
code {
        func calculate_total_marks(marks_s: string) -> int
    }
    tests {
        template nse {
            ("1,2,3,4,5") -> 55
("3,4,5,6") -> 86
("1,2,3") -> 14
("10,20,30") -> 1400
("0,0,0,10") -> 100
        }
    }
}

problem Generated/3729 {
code {
        func split_and_power(input_s: string, n: int) -> list<int>
    }
    tests {
        template nse {
            ("2 3 4 5", 2) -> [4, 9, 16, 25]
("1 2 3 4 5", 3) -> [1, 8, 27, 64, 125]
("13 27 4 8", 1) -> [13, 27, 4, 8]
("123 456 789", 0) -> [1, 1, 1]
("10 20 30 40 50", 4) -> [10000, 160000, 810000, 2560000, 6250000]
        }
    }
}

problem Generated/3730 {
code {
        func join_powered_elements(elements: list<int>, power: int, delimiter: string) -> string
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2, ",") -> "1,4,9,16,25"
([1, 2, 3, 4, 5], 3, "-") -> "1-8-27-64-125"
([1, 2, 3, 4, 5], 1, "") -> "12345"
([1, 2, 3, 4, 5], 0, ",") -> "1,1,1,1,1"
([], 2, ",") -> ""
        }
    }
}

problem Generated/3731 {
code {
        func square_and_uppercase(nums: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["1", "4", "9", "16", "25"]
([-1, -2, -3, -4, -5]) -> ["1", "4", "9", "16", "25"]
([0, 1, 2, 3, 4]) -> ["0", "1", "4", "9", "16"]
([9, 8, 7, 6, 5]) -> ["81", "64", "49", "36", "25"]
([11, 12, 13, 14, 15]) -> ["121", "144", "169", "196", "225"]
        }
    }
}

problem Generated/3732 {
code {
        func square_and_uppercase(numbers: list<int>) -> list<string>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> ["1", "4", "9", "16", "25"]
([-2, -4, 3, 5, 8]) -> ["4", "16", "9", "25", "64"]
([0, 0, 0, 0, 0]) -> ["0", "0", "0", "0", "0"]
([1, -2, 3, -4, 5]) -> ["1", "4", "9", "16", "25"]
([]) -> []
        }
    }
}

problem Generated/3733 {
code {
        func power_upper_strings(elements: list<string>, power: int) -> list<string>
    }
    tests {
        template nse {
            (["1", "2", "3"], 2) -> ["1", "4", "9"]
(["8", "9", "10"], 3) -> ["512", "729", "1000"]
(["5", "6", "7"], 1) -> ["5", "6", "7"]
([], 2) -> []
(["11", "12", "13"], 0) -> ["1", "1", "1"]
        }
    }
}

problem Generated/3734 {
code {
        func get_power_of_numbers_starting_with_prefix(numbers: list<double>, pre: string) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0], "1") -> [1.0]
([1.0, 2.0, 3.0, 4.0, 5.0], "12345") -> []
([1.0, 2.0, 3.0, 4.0, 5.0], "") -> [1.0, 4.0, 9.0, 16.0, 25.0]
([-1.0, -2.0, -3.0, -4.0, -5.0], "a") -> []
([0.0, -2.0, 3.0, -4.0, 5.0], "") -> [0.0, 4.0, 9.0, 16.0, 25.0]
        }
    }
}

problem Generated/3735 {
code {
        func get_powered_numbers(numbers: list<double>, starts_with: string) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], "1") -> [1.0]
([1.0, 2.2, 3.3, 4.0, 5.55], "2") -> [4.84]
([1.0, 2.0, 3.0, 4.0, 5.0], "0") -> []
([2.5, 3.2, 4.8, 7.1, 9.0], "7") -> [50.41]
([1.0, 2.0, 3.0, 4.0, 5.0], "") -> [1.0, 4.0, 9.0, 16.0, 25.0]
        }
    }
}

problem Generated/3736 {
code {
        func replace_list_elements_with_power(elements: list<double>, power: double) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2.0) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 0.5) -> [1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979]
([-1.0, -2.0, -3.0, -4.0, -5.0], 3.0) -> [-1.0, -8.0, -27.0, -64.0, -125.0]
([], 2.0) -> []
([0.0, 1.0, -1.0, 2.0, -2.0], 4.0) -> [0.0, 1.0, 1.0, 16.0, 16.0]
        }
    }
}

problem Generated/3737 {
code {
        func replace_list_elements_powered(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0]) -> [1.0, -2.0, 9.0, -4.0, 25.0]
([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([1.0, -2.0, -3.0, -4.0, 5.0]) -> [1.0, -2.0, -3.0, -4.0, 25.0]
([]) -> []
([0.0, -2.0, 3.0, -4.0, 5.0]) -> [0.0, -2.0, 9.0, -4.0, 25.0]
        }
    }
}

problem Generated/3738 {
code {
        func power_list(numbers: list<int>, power: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [1, 4, 9, 16, 25]
([1, 2, 3, 4, 5], 3) -> [1, 8, 27, 64, 125]
([1, 2, 3, 4, 5], 4) -> [1, 16, 81, 256, 625]
([1, 2, 3, 4, 5], 0) -> [1, 1, 1, 1, 1]
([1, -2, 3, -4, 5], 2) -> [1, 4, 9, 16, 25]
        }
    }
}

problem Generated/3739 {
code {
        func generate_power_list(b: int, length: int) -> list<int>
    }
    tests {
        template nse {
            (2, 5) -> [1, 2, 4, 8, 16]
(3, 4) -> [1, 3, 9, 27]
(4, 3) -> [1, 4, 16]
(5, 2) -> [1, 5]
(6, 1) -> [1]
        }
    }
}

problem Generated/3740 {
code {
        func power_list(numbers: list<int>, power: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [1, 4, 9, 16, 25]
([-2, 3, 4, -5], 3) -> [-8, 27, 64, -125]
([0, 1, 2, 3], 5) -> [0, 1, 32, 243]
([5, 10, 20, 30], 1) -> [5, 10, 20, 30]
([-3, 5, -7, 9], 0) -> [1, 1, 1, 1]
        }
    }
}

problem Generated/3741 {
code {
        func square_and_append(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 4.0, 9.0, 16.0, 25.0, 1.0, 2.0, 3.0, 4.0, 5.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1.0, 4.0, 9.0, 16.0, 25.0, -1.0, -2.0, -3.0, -4.0, -5.0]
([0.0, 1.0, -1.0, 2.5]) -> [0.0, 1.0, 1.0, 6.25, 0.0, 1.0, -1.0, 2.5]
([]) -> []
([1.0]) -> [1.0, 1.0]
        }
    }
}

problem Generated/3742 {
code {
        func power_list(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [1, 2, 4, 8, 16]
(0) -> []
(1) -> [1]
(3) -> [1, 2, 4]
(6) -> [1, 2, 4, 8, 16, 32]
        }
    }
}

problem Generated/3743 {
code {
        func create_powers_list(b: int, exps: list<int>) -> list<double>
    }
    tests {
        template nse {
            (2, [0, 1, 2, 3, 4]) -> [1.0, 2.0, 4.0, 8.0, 16.0]
(3, [0, 2, 4, 6, 8]) -> [1.0, 9.0, 81.0, 729.0, 6561.0]
(5, [-1, 0, 1, 2, 3]) -> [0.2, 1.0, 5.0, 25.0, 125.0]
(10, [1, 2, 3, 4, 5]) -> [10.0, 100.0, 1000.0, 10000.0, 100000.0]
(2, []) -> []
        }
    }
}

problem Generated/3744 {
code {
        func calculate_powers(b: int, num_powers: int) -> list<int>
    }
    tests {
        template nse {
            (2, 5) -> [1, 2, 4, 8, 16]
(3, 3) -> [1, 3, 9]
(5, 2) -> [1, 5]
(4, 4) -> [1, 4, 16, 64]
(10, 1) -> [1]
        }
    }
}

problem Generated/3745 {
code {
        func power_list_elements(numbers: list<double>, power: double) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2.0) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([-1.0, 2.0, -3.0, 4.0, -5.0], 3.0) -> [-1.0, 8.0, -27.0, 64.0, -125.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 0.5) -> [1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979]
([], 2.0) -> []
([10.0, 20.0, 30.0, 40.0], 1.0) -> [10.0, 20.0, 30.0, 40.0]
        }
    }
}

problem Generated/3746 {
code {
        func calculate_power_list(n: int) -> list<int>
    }
    tests {
        template nse {
            (5) -> [1, 2, 4, 8, 16]
(10) -> [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]
(3) -> [1, 2, 4]
(1) -> [1]
(0) -> []
        }
    }
}

problem Generated/3747 {
code {
        func sort_numbers_power(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [-1.0, -2.0, -3.0, -4.0, -5.0]
([2.0, -3.0, 4.0, -5.0, 6.0]) -> [2.0, -3.0, 4.0, -5.0, 6.0]
([0.0, 0.0, 0.0, 0.0, 0.0]) -> [0.0, 0.0, 0.0, 0.0, 0.0]
([1.0, -1.0, 2.0, -2.0, 3.0, -3.0]) -> [1.0, -1.0, 2.0, -2.0, 3.0, -3.0]
        }
    }
}

problem Generated/3748 {
code {
        func sort_list_of_numbers_powered(numbers: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 8.0, 27.0, 64.0, 125.0]
([0.0, 1.0, -1.0, 2.0, -2.0]) -> [-8.0, -1.0, 0.0, 1.0, 8.0]
([10.0, 20.0, 30.0]) -> [1000.0, 8000.0, 27000.0]
([2.0, 2.5, 3.0, 3.5]) -> [8.0, 15.625, 27.0, 42.875]
([1.0, 1.0, 1.0, 1.0]) -> [1.0, 1.0, 1.0, 1.0]
        }
    }
}

problem Generated/3749 {
code {
        func reverse_and_pow(numbers: list<int>, power: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [25, 16, 9, 4, 1]
([2, 4, 6, 8, 10], 3) -> [1000, 512, 216, 64, 8]
([2, 4, 6, 8], 0) -> [1, 1, 1, 1]
([5, 4, 3, 2, 1], 1) -> [1, 2, 3, 4, 5]
([2, 3, 4, 5, 6], 4) -> [1296, 625, 256, 81, 16]
        }
    }
}

problem Generated/3750 {
code {
        func power_list_elements(elements: list<double>, power: double) -> list<double>
    }
    tests {
        template nse {
            ([2.0, 3.0, 4.0, 5.0], 2.0) -> [4.0, 9.0, 16.0, 25.0]
([2.0, 3.0, 4.0, 5.0], 0.5) -> [1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979]
([2.0, 3.0, 4.0, 5.0], 3.0) -> [8.0, 27.0, 64.0, 125.0]
([], 2.0) -> []
([0.0, 1.0, -1.0], 4.0) -> [0.0, 1.0, 1.0]
        }
    }
}

problem Generated/3751 {
code {
        func power_list_elements(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([0.0, 1.0, -1.0, 2.0, -2.0]) -> [0.0, 1.0, 1.0, 4.0, 4.0]
([1.5, 2.5, 3.5]) -> [2.25, 6.25, 12.25]
([5.0, 4.0, 3.0, 2.0, 1.0]) -> [25.0, 16.0, 9.0, 4.0, 1.0]
([]) -> []
        }
    }
}

problem Generated/3752 {
code {
        func square_and_copy_list(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 4, 9, 16, 25]
([7, 3, 5, 9, 6]) -> [49, 9, 25, 81, 36]
([1, 7, 4, 9, 5]) -> [1, 49, 16, 81, 25]
([]) -> []
([-1, -2, -3, -4, -5]) -> [1, 4, 9, 16, 25]
        }
    }
}

problem Generated/3753 {
code {
        func square_list_and_create_copy(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 4, 9, 16, 25]
([0, 0, 0, 0, 0]) -> [0, 0, 0, 0, 0]
([2, 4, 6, 8, 10]) -> [4, 16, 36, 64, 100]
([]) -> []
([1]) -> [1]
        }
    }
}

problem Generated/3754 {
code {
        func raise_to_power(numbers: list<int>, power: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> [1, 4, 9, 16, 25]
([1, 2, 3, 4, 5], 3) -> [1, 8, 27, 64, 125]
([1, 2, 3, 4, 5], 0) -> [1, 1, 1, 1, 1]
([7, 3, 5, 9, 2], 1) -> [7, 3, 5, 9, 2]
([1, 2, 3, 4, 5], -2) -> [1, 0, 0, 0, 0]
        }
    }
}

problem Generated/3755 {
code {
        func raise_to_power(numbers: list<double>, power: int) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 3) -> [1.0, 8.0, 27.0, 64.0, 125.0]
([1.0, -2.0, 3.0, -4.0, 5.0], 2) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 1) -> [1.0, 2.0, 3.0, 4.0, 5.0]
([], 2) -> []
([1.2, 3.4, 5.6], 2) -> [1.44, 11.56, 31.36]
        }
    }
}

problem Generated/3756 {
code {
        func sum_first_n_integers(n: int) -> int
    }
    tests {
        template nse {
            (5) -> 55
(10) -> 385
(3) -> 14
(1) -> 1
(0) -> 0
        }
    }
}

problem Generated/3757 {
code {
        func calculate_power_of_elements(elements: list<double>, power: int) -> list<int>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2) -> [1, 4, 9, 16, 25]
([1.0, 2.0, 3.0, 4.0, 5.0], 3) -> [1, 8, 27, 64, 125]
([0.0, 2.0, -3.0, 4.0, 5.0], 4) -> [0, 16, 81, 256, 625]
([1.0, -2.0, 3.0, -4.0, 5.0], 0) -> [1, 1, 1, 1, 1]
([1.0, 2.5, 3.6, 4.9, 5.1], 2) -> [1, 6, 12, 24, 26]
        }
    }
}

problem Generated/3758 {
code {
        func power_and_floor(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.1, 2.2, 3.3, 4.4, 5.5]) -> [1, 4, 10, 19, 30]
([0.5, 1.5, 2.5, 3.5, 4.5]) -> [0, 2, 6, 12, 20]
([2.0, 4.0, 6.0, 8.0, 10.0]) -> [4, 16, 36, 64, 100]
([1.0, 1.1, 1.2, 1.3, 1.4]) -> [1, 1, 1, 1, 1]
([1.0, 1.000001, 1.000002, 1.000003, 1.000004]) -> [1, 1, 1, 1, 1]
        }
    }
}

problem Generated/3759 {
code {
        func sum_of_powers(numbers: list<double>, power: int) -> int
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0], 2) -> 14
([2.0, 3.0, 4.0], 3) -> 99
([1.0, 2.0, 3.0], 1) -> 6
([2.0, 3.0, 4.0], 1) -> 9
([-1.0, -2.0, -3.0], 2) -> 14
        }
    }
}

problem Generated/3760 {
code {
        func calculate_power_of_numbers(numbers: list<double>) -> list<int>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [1, 4, 9, 16, 25]
([3.14, 0.01, 2.0, 5.0, 10.0]) -> [10, 1, 4, 25, 100]
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> [1, 4, 9, 16, 25]
([0.0, 1.23, 2.345, 3.4567, 4.56789]) -> [0, 2, 6, 12, 21]
([0.5, 0.25, 0.125, 0.0625, 0.03125]) -> [1, 1, 1, 1, 1]
        }
    }
}

problem Generated/3761 {
code {
        func power_list_elements(elements: list<double>, power: double) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2.0) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([1.0, 2.0, 3.0, 4.0, 5.0], 0.5) -> [1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979]
([5.0, 10.0, 15.0, 20.0], 1.0) -> [5.0, 10.0, 15.0, 20.0]
([2.0, 3.0, 4.0], 3.0) -> [8.0, 27.0, 64.0]
([], 2.0) -> []
        }
    }
}

problem Generated/3762 {
code {
        func get_powered_numbers(b: int, exp: int, nums_str: string) -> list<double>
    }
    tests {
        template nse {
            (2, 3, "1, 2, 3, 4, 5") -> [8.0, 16.0, 24.0, 32.0, 40.0]
(3, 2, "3 6 9 12 15") -> [27.0, 54.0, 81.0, 108.0, 135.0]
(1, 0, "1, 2, 3, 4, 5") -> [1.0, 2.0, 3.0, 4.0, 5.0]
(2, 5, "1, 2, 3") -> [32.0, 64.0, 96.0]
(0, 4, "1 2 3 4 5") -> [0.0, 0.0, 0.0, 0.0, 0.0]
        }
    }
}

problem Generated/3763 {
code {
        func split_and_calculate_power(s: string) -> list<double>
    }
    tests {
        template nse {
            ("2, 3, 4, 5") -> [4.0, 9.0, 16.0, 25.0]
("3.2 4.5 5 7.0") -> [10.240000000000002, 20.25, 25.0, 49.0]
("4.5") -> [20.25]
("") -> []
("1  2 3 4  5") -> [1.0, 4.0, 9.0, 16.0, 25.0]
        }
    }
}

problem Generated/3764 {
code {
        func multiply_range_elements(start: int, last: int) -> int
    }
    tests {
        template nse {
            (1, 5) -> 120
(2, 7) -> 5040
(0, 5) -> 0
(3, 3) -> 3
(-5, 3) -> 0
        }
    }
}

problem Generated/3765 {
code {
        func multiply_numbers_in_range(start: int, last: int) -> int
    }
    tests {
        template nse {
            (1, 5) -> 120
(3, 7) -> 2520
(-2, 2) -> 0
(1, 1) -> 1
(1, 10) -> 3628800
        }
    }
}

problem Generated/3766 {
code {
        func multiply_range_elements(start: int, last: int) -> int
    }
    tests {
        template nse {
            (1, 5) -> 120
(5, 5) -> 5
(1, 1) -> 1
(0, 0) -> 0
(3, 7) -> 2520
        }
    }
}

problem Generated/3767 {
code {
        func product_of_numbers_in_range(start: int, last: int) -> int
    }
    tests {
        template nse {
            (1, 5) -> 120
(10, 15) -> 3603600
(0, 0) -> 0
(1, 1) -> 1
(1, 10) -> 3628800
        }
    }
}

problem Generated/3768 {
code {
        func multiply_even_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 3, 5, 7, 9]) -> 0
([2, 4, 6, 8, 10]) -> 3840
([3, 7, 9, 13, 15]) -> 0
([2, 4, 3, 7, 10, 11]) -> 80
([11, 13, 15]) -> 0
        }
    }
}

problem Generated/3769 {
code {
        func multiply_even_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7]) -> 48
([2, 4, 6, 8]) -> 384
([1, 3, 5, 7]) -> 0
([]) -> 0
([2, 3, 4, 5, 6, 7, 8]) -> 384
        }
    }
}

problem Generated/3770 {
code {
        func product_of_abs_of_elements(elements: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 120
([-1, 2, -3, 4, -5]) -> 120
([0, 1, 2, 3]) -> 0
([7, 4, 9, 5, 1]) -> 1260
([1, -2, 3, -4, 5]) -> 120
        }
    }
}

problem Generated/3771 {
code {
        func product_of_abs_values(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 120
([-2, 3, -4, 5, -6]) -> 720
([-2, -3, -4, -5]) -> 120
([2]) -> 2
([]) -> 1
        }
    }
}

problem Generated/3772 {
code {
        func get_product_of_abs(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 120
([1, -2, 3, -4, 5]) -> 120
([10, 5, 3, 2, -1]) -> 300
([10, 5, 3, 2, 0]) -> 0
([-1, -2, -3, -4, -5]) -> 120
        }
    }
}

problem Generated/3773 {
code {
        func multiply_list(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 120.0
([0.0, 2.0, 3.0, 4.0, 5.0]) -> 0.0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> -120.0
([1.0, 2.0, 3.0, 4.0, 0.0]) -> 0.0
([1.0, 7.0, 4.0, 9.0, 5.0]) -> 1260.0
        }
    }
}

problem Generated/3774 {
code {
        func multiply_then_sum(numbers: list<double>, factor: double) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2.0) -> 30.0
([1.0, 2.0, 3.0, 4.0, 5.0], 0.5) -> 7.5
([0.0, 0.0, 0.0, 0.0, 0.0], 3.5) -> 0.0
([0.0, -2.0, 3.0, -4.0, 5.0], -1.0) -> -2.0
([1.0, 2.0], 2.5) -> 7.5
        }
    }
}

problem Generated/3775 {
code {
        func get_max_multiple(numbers: list<int>, factor: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> 4
([3, 5, 7, 9, 11], 2) -> -1
([3, 9, 15, 21, 25], 3) -> 21
([2, 4, 6, 8, 10, 12], 3) -> 12
([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) -> 5
        }
    }
}

problem Generated/3776 {
code {
        func find_max_product_in_sublist(numbers: list<int>, sublist_size: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 2) -> 20
([1, 2, 3, 4, 5], 3) -> 60
([5, 4, 3, 2, 1], 2) -> 20
([5, 4, 3, 2, 1], 3) -> 60
([1, 2, 3, 0, 4, 5], 2) -> 20
        }
    }
}

problem Generated/3777 {
code {
        func get_minimal_sum(numbers: list<int>, length: int) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> 14
([1, 2, 3, 4, 5], 5) -> 55
([5, 4, 3, 2, 1], 4) -> 30
([1, 1, 1, 1, 1], 5) -> 5
([1, 2, 3, 4, 5], 1) -> 1
        }
    }
}

problem Generated/3778 {
code {
        func multiply_corresponding_elements(nums1: list<int>, nums2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [4, 10, 18]
([0, 1, 2, 3], [4, 0, 6, 0]) -> [0, 0, 12, 0]
([5, 10, 20], [-1, -2, -4]) -> [-5, -20, -80]
([], []) -> []
([1, 2, 3], [4, 5]) -> [4, 10]
        }
    }
}

problem Generated/3779 {
code {
        func multiply_lists(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3], [4, 5, 6]) -> [4, 10, 18]
([0, 10, 20], [1, 2, 3]) -> [0, 20, 60]
([2, 4, 6], [-1, -2, -3]) -> [-2, -8, -18]
([1, 2, 3], [0, 0, 0]) -> [0, 0, 0]
([], []) -> []
        }
    }
}

problem Generated/3780 {
code {
        func multiply_lists(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) -> [6, 14, 24, 36, 50]
([0, 0, 0], [1, 2, 3]) -> [0, 0, 0]
([1, 2, 3, 4], [1, 2]) -> [1, 4]
([4], [3]) -> [12]
([], []) -> []
        }
    }
}

problem Generated/3781 {
code {
        func multiply_each_pairwise(list1: list<int>, list2: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) -> [5, 8, 9, 8, 5]
([0, 1, 2, 3, 4], [2, 2, 2, 2, 2]) -> [0, 2, 4, 6, 8]
([6, -4, 1], [3, 2, -1]) -> [18, -8, -1]
([5, 4, 3], [1, 2]) -> [5, 8]
([], [1, 2, 3]) -> []
        }
    }
}

problem Generated/3782 {
code {
        func product_of_indices(elements: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 0.0
([0.0, 2.0, 3.0, 4.0, 5.0]) -> 0.0
([1.0, 1.0, 1.0, 1.0, 1.0]) -> 0.0
([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]) -> 0.0
([2.0, 3.0, 1.0, 5.0, 4.0]) -> 0.0
        }
    }
}

problem Generated/3783 {
code {
        func find_min_index(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 0
([7, 3, 5, 9, 6]) -> 1
([1, 7, 4, 9, 5]) -> 0
([1, -7, 4, 9, 5]) -> 1
([-1, -2, -3, -4, -5]) -> 4
        }
    }
}

problem Generated/3784 {
code {
        func multiply_all_unique_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 120
([1, 1, 2, 3, 3]) -> 2
([1, 2, 3, 4, 4, 5, 5]) -> 6
([2, 2, 4, 6, 6, 7, 7, 8]) -> 32
([1, 1, 2, 2, 3, 3, 4, 4]) -> 0
        }
    }
}

problem Generated/3785 {
code {
        func product_of_even_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9]) -> 384
([2, 4, 6, 8]) -> 384
([1, 3, 5]) -> 1
([]) -> 1
([0, 2, 4, 6, 8]) -> 0
        }
    }
}

problem Generated/3786 {
code {
        func multiply_even_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 3840
([2, 4, 6, 8, 10]) -> 3840
([1, 3, 5, 7, 9]) -> 1
([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) -> 46080
([]) -> 1
        }
    }
}

problem Generated/3787 {
code {
        func multiply_positive_numbers(numbers: list<double>) -> double
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> 120.0
([1.0, -2.0, 3.0, -4.0, 5.0]) -> 15.0
([-1.0, -2.0, -3.0, -4.0, -5.0]) -> 0.0
([]) -> 0.0
([0.0, -2.0, 3.0, -4.0, 5.0]) -> 15.0
        }
    }
}

problem Generated/3788 {
code {
        func get_product_of_filtered_elements(elements: list<int>, c: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], [0, 2, -3, 4, 0]) -> 8
([7, 3, 5, 9, 6], [0, 2, -3, 4, 0]) -> 27
([1, 7, 4, 9, 5], [1, 2, 3, 4, 5]) -> 1260
([1, 7, 4, 9, 5], [-1, -2, -3, -4, -5]) -> 1
([1, 2, 3, 4, 5, 6, 7, 8], [1, -1, -1, 1, 0, 0, 1, 1]) -> 224
        }
    }
}

problem Generated/3789 {
code {
        func multiply_even_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 8
([7, 3, 5, 9, 6]) -> 6
([1, 7, 4, 9, 5]) -> 4
([2, 4, 6, 8, 10]) -> 3840
([]) -> 1
        }
    }
}

problem Generated/3790 {
code {
        func multiply_even_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 3, 5, 7, 9]) -> 0
([2, 4, 6, 8]) -> 384
([2, 4, 6, 8, 9]) -> 384
([]) -> 0
([1, 1, 1, 1, 1]) -> 0
        }
    }
}

problem Generated/3791 {
code {
        func multiply_and_sort(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [2, 4, 6, 8, 10]
([2, 5, 6, 7, 8]) -> [4, 10, 12, 14, 16]
([0, 0, 0, 0, 1]) -> [0, 0, 0, 0, 2]
([2]) -> [4]
([]) -> []
([-2, 5, 10, -1, 3]) -> [-4, -2, 6, 10, 20]
        }
    }
}

problem Generated/3792 {
code {
        func concatenate_ascii(strs: list<int>) -> string
    }
    tests {
        template nse {
            ([65, 66, 67, 68, 69, 70]) -> "ABCDEF"
([97, 98, 99, 100, 101, 102]) -> "abcdef"
([72, 69, 76, 76, 79]) -> "HELLO"
([119, 111, 114, 108, 100]) -> "world"
([83, 99, 114, 105, 112, 116]) -> "Script"
        }
    }
}

problem Generated/3793 {
code {
        func string_from_ascii_codes(codes: list<int>) -> string
    }
    tests {
        template nse {
            ([72, 101, 108, 108, 111]) -> "Hello"
([115, 107, 105, 112, 99, 111, 100, 101]) -> "skipcode"
([108, 105, 102, 101]) -> "life"
([82, 101, 100, 100, 105, 116]) -> "Reddit"
([83, 65, 83, 83]) -> "SASS"
        }
    }
}

problem Generated/3794 {
code {
        func concatenate_ascii(strs: list<int>) -> string
    }
    tests {
        template nse {
            ([65, 66, 67, 68, 69]) -> "ABCDE"
([97, 98, 99, 100, 101]) -> "abcde"
([104, 105, 106, 107, 108]) -> "hijkl"
([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]) -> "Hello World"
([83, 101, 110, 116, 101, 110, 99, 101, 115]) -> "Sentences"
        }
    }
}

problem Generated/3795 {
code {
        func is_list_all_multiples_of_x(numbers: list<int>, x: int) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 1) -> true
([1, 2, 3, 4, 5], 2) -> false
([2, 4, 6, 8, 10], 2) -> true
([12, 18, 24, 30], 6) -> true
([1, 3, 5, 7, 9], 2) -> false
        }
    }
}

problem Generated/3796 {
code {
        func are_elements_positive(elements: list<int>) -> bool
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> true
([-1, 2, 3, 4, 5]) -> false
([0, 2, 3, 4, 5]) -> false
([1, 2, 3, 4, -5]) -> false
([]) -> true
        }
    }
}

problem Generated/3797 {
code {
        func concatenate_list_elements(elements: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["Hello", "world", "!"], " ") -> "Hello world !"
(["a", "b", "c"], " | ") -> "a | b | c"
(["1", "2", "3", "4", "5"], "") -> "12345"
(["1", "2", "3", "4", "5"], ",") -> "1,2,3,4,5"
(["apple", "banana", "mango"], "-") -> "apple-banana-mango"
        }
    }
}

problem Generated/3798 {
code {
        func join_odd_numbers(numbers: list<int>, joiner: string) -> string
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], ",") -> "1,3,5"
([1, 3, 5, 7, 9], "-") -> "1-3-5-7-9"
([0, 2, 4, 6, 8], ",") -> ""
([-1, 0, 1, 2, 3], ";") -> "-1;1;3"
([], ";") -> ""
        }
    }
}

problem Generated/3799 {
code {
        func concatenate_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world"], " ") -> "hello world"
(["hello", "world"], "") -> "helloworld"
(["hello", "world", "my", "name", "is", "John"], " ") -> "hello world my name is John"
([], " ") -> ""
(["hello"], "") -> "hello"
        }
    }
}

problem Generated/3800 {
code {
        func concatenate_strings(str_lst: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "python"], " ") -> "hello world python"
(["apple", "orange", "banana"], ", ") -> "apple, orange, banana"
([], ", ") -> ""
(["one"], " ") -> "one"
(["first", "second", "third"], "") -> "firstsecondthird"
        }
    }
}

problem Generated/3801 {
code {
        func concatenate_strings(strs: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "how", "are", "you"], " ") -> "hello world how are you"
(["apple", "banana", "cherry", "dates"], ",") -> "apple,banana,cherry,dates"
(["apple", "banana", "cherry", "dates"], "") -> "applebananacherrydates"
([], ",") -> ""
(["hello"], " ") -> "hello"
        }
    }
}

problem Generated/3802 {
code {
        func join_list_of_strings_by_separator(elements: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["Hello", "World"], " ") -> "Hello World"
(["Hello", "World"], ", ") -> "Hello, World"
(["Mary", "had", "a", "little", "lamb"], " ") -> "Mary had a little lamb"
(["1", "2", "3", "4"], "") -> "1234"
(["a", "b", "c", "d"], "123") -> "a123b123c123d"
        }
    }
}

problem Generated/3803 {
code {
        func concatenate_words(words: list<string>) -> string
    }
    tests {
        template nse {
            (["Hello", "World", "how", "Are", "you"]) -> "hello world how are you"
([]) -> ""
(["Apple", "Ball"]) -> "apple ball"
(["Python", "JAVA"]) -> "python java"
(["HELLO", "WORLD"]) -> "hello world"
        }
    }
}

problem Generated/3804 {
code {
        func concatenate_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["Hello", "WORLD", "how", "aRe", "you"]) -> "helloworldhowareyou"
(["This", "is", "a", "Test"]) -> "thisisatest"
(["LIST", "of", "STrIngs"]) -> "listofstrings"
([]) -> ""
(["Single"]) -> "single"
        }
    }
}

problem Generated/3805 {
code {
        func concatenate_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["Hello", "World", "!"]) -> "helloworld!"
(["PYTHON", "iS", "aMAzing"]) -> "pythonisamazing"
(["", "", ""]) -> ""
(["1", "2", "3"]) -> "123"
(["I", "love", "python"]) -> "ilovepython"
        }
    }
}

problem Generated/3806 {
code {
        func concatenate_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "this", "is", "python"]) -> "HELLOWORLDTHISISPYTHON"
(["This", "is", "a", "test"]) -> "THISISATEST"
([]) -> ""
(["This", "is", "a", "test"]) -> "THISISATEST"
(["h", "e", "l", "l", "o"]) -> "HELLO"
        }
    }
}

problem Generated/3807 {
code {
        func concatenate_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "how", "are", "you"]) -> "HELLOWORLDHOWAREYOU"
(["a", "b", "c", "d", "e"]) -> "ABCDE"
(["One", "Two", "Three"]) -> "ONETWOTHREE"
([]) -> ""
(["hElLo", "wOrLd", "PYthon"]) -> "HELLOWORLDPYTHON"
        }
    }
}

problem Generated/3808 {
code {
        func concatenate_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world"]) -> "HELLOWORLD"
(["This", "is", "a", "test"]) -> "THISISATEST"
(["the", "quick", "brown", "fox"]) -> "THEQUICKBROWNFOX"
([]) -> ""
(["One"]) -> "ONE"
        }
    }
}

problem Generated/3809 {
code {
        func concatenate_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world"]) -> "HELLOWORLD"
(["Python", "is", "awesome"]) -> "PYTHONISAWESOME"
([]) -> ""
(["1", "2", "3", "5", "9"]) -> "12359"
(["the", "quick", "brown", "fox"]) -> "THEQUICKBROWNFOX"
        }
    }
}

problem Generated/3810 {
code {
        func concatenate_all_lowercase_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "PYTHON"]) -> "helloworld"
(["Hello", "WORLD", "python"]) -> "python"
(["a", "b", "c", "d"]) -> "abcd"
(["def", "GHI", "jkl"]) -> "defjkl"
([]) -> ""
        }
    }
}

problem Generated/3811 {
code {
        func concat_uppercase_str(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["HELLO", "WORLD"]) -> "HELLOWORLD"
(["Hello", "WORLD"]) -> "WORLD"
(["python", "is", "GREAT"]) -> "GREAT"
([]) -> ""
([""]) -> ""
        }
    }
}

problem Generated/3812 {
code {
        func concat_uppercase_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["HELLO", "world", "PYTHON", "HELLO"]) -> "HELLOPYTHONHELLO"
(["HELLO", "WORLD", "PYTHON"]) -> "HELLOWORLDPYTHON"
(["world", "HELLO", "PYTHON"]) -> "HELLOPYTHON"
(["hello", "world", "python"]) -> ""
([]) -> ""
        }
    }
}

problem Generated/3813 {
code {
        func concatenate_alpha_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["abc", "def", "ghi"]) -> "abcdefghi"
(["a", "1", "b", "2", "c", "3"]) -> "abc"
(["", "1", "2", "3"]) -> ""
([]) -> ""
(["abc", "123", "def"]) -> "abcdef"
        }
    }
}

problem Generated/3814 {
code {
        func concatenate_alpha_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["Hello", "World", "123", "Python", "is", "fun"]) -> "HelloWorldPythonisfun"
(["abc", "def", "123", "456"]) -> "abcdef"
(["1", "2", "3", "4"]) -> ""
([]) -> ""
(["Abc", "dEf", "Ghi"]) -> "AbcdEfGhi"
(["This", "is", "a", "test", "for", "123", "strings"]) -> "Thisisatestforstrings"
        }
    }
}

problem Generated/3815 {
code {
        func concatenate_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "123", "456"]) -> "helloworld"
(["abc", "123", "def", "456"]) -> "abcdef"
(["123", "456", "789"]) -> ""
(["abc", "def", "ghi"]) -> "abcdefghi"
([]) -> ""
        }
    }
}

problem Generated/3816 {
code {
        func concatenate_alpha_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "123", "abc", "def"]) -> "helloworldabcdef"
(["alpha", "beta", "gamma", "delta"]) -> "alphabetagammadelta"
(["1", "2", "3", "4", "5"]) -> ""
([]) -> ""
(["this", "is", "a", "test", "string"]) -> "thisisateststring"
        }
    }
}

problem Generated/3817 {
code {
        func concatenate_alpha_strings(strs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world", "123", "test", "case"]) -> "helloworldtestcase"
(["ab", "cd", "ef", "gh"]) -> "abcdefgh"
(["", "test", "case"]) -> "testcase"
([]) -> ""
(["12", "34", "56"]) -> ""
        }
    }
}

problem Generated/3818 {
code {
        func multiply_numbers_in_string(sentence: string) -> int
    }
    tests {
        template nse {
            ("There are 3 cats and 2 dogs in the house") -> 6
("My age is 25") -> 25
("Python is a high-level programming language") -> 0
("") -> 0
("I have 2 apples and 3 oranges") -> 6
        }
    }
}

problem Generated/3819 {
code {
        func multiply_digits_in_string(txt: string) -> int
    }
    tests {
        template nse {
            ("hello world") -> 0
("12345") -> 120
("1a2b3c4d5e") -> 120
("testing") -> 0
("") -> 0
        }
    }
}

problem Generated/3820 {
code {
        func sum_of_numeric_string_elements(elements: list<string>) -> int
    }
    tests {
        template nse {
            (["10", "20", "30", "40", "50"]) -> 150
(["1", "3", "5", "7", "9"]) -> 25
(["1", "", "3", "4", "abc", "def"]) -> 8
([]) -> 0
(["12", "34", "5"]) -> 51
        }
    }
}

problem Generated/3821 {
code {
        func multiply_digit_numbers(elements: list<string>) -> int
    }
    tests {
        template nse {
            (["1", "2", "3", "4", "5"]) -> 120
(["1", "2", "a", "4", "5"]) -> 40
(["0", "0", "0", "0"]) -> 0
([]) -> 0
(["1", "2", "3", "4", "-5"]) -> 24
        }
    }
}

problem Generated/3822 {
code {
        func concatenate_strings(strs: list<string>, pre: string) -> string
    }
    tests {
        template nse {
            (["apple", "banana", "cherry", "durian", "eggplant"], "a") -> "apple"
(["apple", "banana", "cherry", "durian", "eggplant"], "b") -> "banana"
(["apple", "banana", "cherry", "durian", "eggplant"], "c") -> "cherry"
(["apple", "banana", "cherry", "durian", "eggplant"], "d") -> "durian"
(["apple", "banana", "cherry", "durian", "eggplant"], "e") -> "eggplant"
        }
    }
}

problem Generated/3823 {
code {
        func concatenate_strings_starting_with_prefix(strs: list<string>, pre: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "hi", "world", "hey"], "w") -> "worldworld"
(["hello", "world", "hi", "world", "hey"], "h") -> "hellohihey"
(["hello", "world", "hi", "world", "hey"], "hey") -> "hey"
(["hello", "world", "hi", "world", "hey"], "x") -> ""
([], "w") -> ""
        }
    }
}

problem Generated/3824 {
code {
        func replace_substring_in_list(elements: list<string>, old: string, new_dat: string) -> list<string>
    }
    tests {
        template nse {
            (["hello", "world", "python"], "o", "0") -> ["hell0", "w0rld", "pyth0n"]
(["hello", "world", "python"], "l", "L") -> ["heLLo", "worLd", "python"]
(["hello", "world", "python"], "py", "PY") -> ["hello", "world", "PYthon"]
(["hello", "world", "python"], "xyz", "123") -> ["hello", "world", "python"]
([], "", "0") -> []
        }
    }
}

problem Generated/3825 {
code {
        func replace_element_in_list(items: list<string>, old_element: string, new_element: string) -> list<string>
    }
    tests {
        template nse {
            (["cat", "dog", "cat", "rat"], "cat", "bat") -> ["bat", "dog", "bat", "rat"]
(["cat", "dog", "cat", "rat"], "monkey", "bat") -> ["cat", "dog", "cat", "rat"]
(["apple", "banana", "cherry"], "orange", "mango") -> ["apple", "banana", "cherry"]
(["apple", "banana", "banana", "cherry"], "banana", "mango") -> ["apple", "mango", "mango", "cherry"]
(["apple", "banana", "cherry"], "cherry", "peach") -> ["apple", "banana", "peach"]
        }
    }
}

problem Generated/3826 {
code {
        func get_sequence(n: int) -> list<int>
    }
    tests {
        template nse {
            (1) -> [1]
(2) -> [1, 2]
(3) -> [1, 2, 3]
(4) -> [1, 2, 3, 4]
(5) -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/3827 {
code {
        func append_numbers_to_list(elements: list<int>, n: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 10) -> [11, 12, 13, 14, 15]
([7, 3, 5, 9, 6], -5) -> [2, -2, 0, 4, 1]
([], 5) -> []
([1], 5) -> [6]
([0, 0, 0, 0], 1) -> [1, 1, 1, 1]
        }
    }
}

problem Generated/3828 {
code {
        func get_concatenated_list(lists: list<list<int>>) -> list<int>
    }
    tests {
        template nse {
            ([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) -> [1, 2, 3, 4, 5, 6, 7, 8, 9]
([[], [1, 2], [], [3], []]) -> [1, 2, 3]
([[1], [2], [3], [4], [5]]) -> [1, 2, 3, 4, 5]
([[1, 2, 3, 4, 5]]) -> [1, 2, 3, 4, 5]
([[], [], []]) -> []
        }
    }
}

problem Generated/3829 {
code {
        func multiply_lists(lists: list<list<int>>) -> list<int>
    }
    tests {
        template nse {
            ([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> [28, 80, 162]
([[1, 2], [3, 4], [5, 6], [7, 8]]) -> [105, 384]
([[1, 1], [1, 1], [1, 1], [1, 1]]) -> [1, 1]
([[2, 3, 4], [3, 5, 7], [1, 1, 1]]) -> [6, 15, 28]
([[1, 4], [2, 5], [3, 6]]) -> [6, 120]
        }
    }
}

problem Generated/3830 {
code {
        func get_top_k_largest_numbers(numbers: list<int>, k: int) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5], 3) -> [5, 4, 3]
([7, 3, 5, 9, 6], 2) -> [9, 7]
([1, 7, 4, 9, 5], 5) -> [9, 7, 5, 4, 1]
([1, 7, 4, 9, 5], 0) -> []
([1, 2, 3, 4, 5, 6, 7, 8], 8) -> [8, 7, 6, 5, 4, 3, 2, 1]
        }
    }
}

problem Generated/3831 {
code {
        func product_of_largest_k_positive_numbers(numbers: list<double>, k: int) -> double
    }
    tests {
        template nse {
            ([1.0, -2.0, 3.0, -4.0, 5.0], 3) -> 15.0
([1.0, 2.0, 3.0, 4.0, 5.0], 2) -> 20.0
([1.0, 2.0, 3.0, 4.0, 5.0], 10) -> 120.0
([-1.0, -2.0, -3.0, -4.0, -5.0], 3) -> 0.0
([0.0, -2.0, 3.0, -4.0, 5.0], 2) -> 15.0
        }
    }
}

problem Generated/3832 {
code {
        func multiply_list_by_index(elements: list<double>) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0]) -> [0.0, 2.0, 6.0, 12.0, 20.0]
([0.0, 0.0, 0.0, 0.0, 0.0]) -> [0.0, 0.0, 0.0, 0.0, 0.0]
([6.0, 5.0, 4.0, 3.0, 2.0, 1.0]) -> [0.0, 5.0, 8.0, 9.0, 8.0, 5.0]
([-1.0, -4.0, 2.0, 3.0, -7.0]) -> [0.0, -4.0, 4.0, 9.0, -28.0]
([3.14]) -> [0.0]
        }
    }
}

problem Generated/3833 {
code {
        func reverse_multiply(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 120
([2, 3, 4, 5, 6]) -> 720
([7, 8, 9, 10]) -> 5040
([1, 1, 1, 1, 1]) -> 1
([2, 3, 0, 4, 5]) -> 0
        }
    }
}

problem Generated/3834 {
code {
        func reverse_and_multiply(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 120
([5, 4, 3, 2, 1]) -> 120
([1, 2, 3, 0, 5]) -> 0
([2, 3, 5]) -> 30
([1]) -> 1
        }
    }
}

problem Generated/3835 {
code {
        func multiply_elements_except_i(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [120, 60, 40, 30, 24]
([2, 4, 6, 8]) -> [192, 96, 64, 48]
([9, 8, 7, 6, 5]) -> [1680, 1890, 2160, 2520, 3024]
([5, 4, 3, 2, 1]) -> [24, 30, 40, 60, 120]
([11, 12, 13, 14, 15]) -> [32760, 30030, 27720, 25740, 24024]
        }
    }
}

problem Generated/3836 {
code {
        func product_of_elements_except_current(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [120, 60, 40, 30, 24]
([2, 4, 6, 8]) -> [192, 96, 64, 48]
([3, 1, 4, 2, 5]) -> [40, 120, 30, 60, 24]
([9, 5, 2, 1]) -> [10, 18, 45, 90]
([]) -> []
        }
    }
}

problem Generated/3837 {
code {
        func product_of_list_except_one(numbers: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [120, 60, 40, 30, 24]
([0, 2, 3, 4, 5]) -> [120, 0, 0, 0, 0]
([1, 1, 1]) -> [1, 1, 1]
([1, 0, 4, 5, 7]) -> [0, 140, 0, 0, 0]
([5, -2, 3, 4, -1]) -> [24, -60, 40, 30, -120]
        }
    }
}

problem Generated/3838 {
code {
        func get_cumulative_list(elements: list<int>) -> list<int>
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> [1, 3, 6, 10, 15]
([7, 3, 5, 9, 6]) -> [7, 10, 15, 24, 30]
([1, 7, 4, 9, 5]) -> [1, 8, 12, 21, 26]
([1, 7, 4, 9, 5, 0, -3]) -> [1, 8, 12, 21, 26, 26, 23]
([]) -> []
        }
    }
}

problem Generated/3839 {
code {
        func sum_odd_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 9
([1, 3, 5, 7, 9]) -> 25
([2, 4, 6, 8]) -> 0
([12, 34, 56, 78, 90]) -> 0
([1, 1, 1, 1, 1, 1]) -> 6
        }
    }
}

problem Generated/3840 {
code {
        func get_sum_of_unique_numbers(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 3, 2, 1, 4, 5]) -> 15
([7, 7, 7, 7, 7]) -> 7
([]) -> 0
([1, 2, 3, 4, 5]) -> 15
([1, 1, 2, 2, 3, 3, 4, 4]) -> 10
        }
    }
}

problem Generated/3841 {
code {
        func get_integer_average(numbers: list<int>) -> int
    }
    tests {
        template nse {
            ([1, 2, 3, 4, 5]) -> 3
([7, 3, 5, 9, 6]) -> 6
([1, 7, 4, 9, 5]) -> 5
([-1, -2, -3, -4, -5]) -> -3
([1, 2, 3, 4, 5, 6, 7, 8]) -> 4
        }
    }
}

problem Generated/3842 {
code {
        func multiply_and_ceiling(numbers: list<double>) -> int
    }
    tests {
        template nse {
            ([2.5, 3.5, 5.0]) -> 44
([1.0, 2.0, 3.0, 4.0]) -> 24
([3.14, 2.71]) -> 9
([0.5, 1.5]) -> 1
([2.0, 3.0, 4.0, 5.0]) -> 120
        }
    }
}

problem Generated/3843 {
code {
        func reduce_sum_ceiling(numbers: list<double>) -> int
    }
    tests {
        template nse {
            ([1.0, 2.5, 3.8, 4.2, 5.0]) -> 17
([3.0, 2.5, 1.8, 1.2]) -> 9
([1.0, 2.0, 3.0, 4.0, 5.0]) -> 15
([0.0, 0.0, 0.0, 0.0]) -> 0
([1.2, 2.3, 3.4, 4.5, 5.6]) -> 17
        }
    }
}

problem Generated/3844 {
code {
        func calculate_power_of_numbers(numbers: list<double>, power: int) -> list<double>
    }
    tests {
        template nse {
            ([1.0, 2.0, 3.0, 4.0, 5.0], 2) -> [1.0, 4.0, 9.0, 16.0, 25.0]
([-1.0, -2.0, -3.0, -4.0, -5.0], 3) -> [-1.0, -8.0, -27.0, -64.0, -125.0]
([0.0, 1.0, 2.0, 3.0, 4.0, 5.0], 0) -> [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
([0.5, 1.5, 2.5, 3.5, 4.5], 2) -> [0.25, 2.25, 6.25, 12.25, 20.25]
([2.0], 10) -> [1024.0]
        }
    }
}

problem Generated/3845 {
code {
        func concatenate_words(words: list<string>) -> string
    }
    tests {
        template nse {
            (["this", "is", "a", "sentence"]) -> "thisisasentence"
(["do", "or", "do", "not", "there", "is", "no", "try"]) -> "doordonotthereisnotry"
(["May", "the", "Force", "be", "with", "you"]) -> "MaytheForcebewithyou"
(["I", "am", "Iron", "Man"]) -> "IamIronMan"
(["Python", "is", "fun"]) -> "Pythonisfun"
        }
    }
}

problem Generated/3846 {
code {
        func count_words(sentence: string) -> int
    }
    tests {
        template nse {
            ("Hello World") -> 2
("Hello, World.") -> 2
("This is a sentence with 7 words.") -> 7
("     ") -> 0
("") -> 0
        }
    }
}

problem Generated/3847 {
code {
        func split_string_into_ranges(s: string, range_size: int) -> list<string>
    }
    tests {
        template nse {
            ("abcdefghijk", 2) -> ["ab", "cd", "ef", "gh", "ij", "k"]
("hello", 1) -> ["h", "e", "l", "l", "o"]
("123456789", 3) -> ["123", "456", "789"]
("python_is_awesome", 5) -> ["pytho", "n_is_", "aweso", "me"]
("abc", 5) -> ["abc"]
        }
    }
}

problem Generated/3848 {
code {
        func split_string_by_length(s: string, length: int) -> list<string>
    }
    tests {
        template nse {
            ("hello world", 3) -> ["hel", "lo ", "wor", "ld"]
("abcdefg", 2) -> ["ab", "cd", "ef", "g"]
("python", 1) -> ["p", "y", "t", "h", "o", "n"]
("hello", 6) -> ["hello"]
("", 3) -> []
        }
    }
}

problem Generated/3849 {
code {
        func split_text_into_words(txt: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello, World!") -> ["Hello", "World"]
("The quick brown fox jumps over the lazy dog") -> ["The", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]
("") -> []
("One   Two   Three") -> ["One", "Two", "Three"]
("   ") -> []
        }
    }
}

problem Generated/3850 {
code {
        func split_string_by_length(s: string, length: int) -> list<string>
    }
    tests {
        template nse {
            ("hello", 2) -> ["he", "ll", "o"]
("python", 3) -> ["pyt", "hon"]
("python", 5) -> ["pytho", "n"]
("thisisalongstring", 4) -> ["this", "isal", "ongs", "trin", "g"]
("short", 10) -> ["short"]
        }
    }
}

problem Generated/3851 {
code {
        func split_string_by_length(s: string, length: int) -> list<string>
    }
    tests {
        template nse {
            ("abcdefghij", 3) -> ["abc", "def", "ghi", "j"]
("hello world", 5) -> ["hello", " worl", "d"]
("testing", 2) -> ["te", "st", "in", "g"]
("", 1) -> []
("a", 1) -> ["a"]
        }
    }
}

problem Generated/3852 {
code {
        func split_string_with_length(s: string, length: int) -> list<string>
    }
    tests {
        template nse {
            ("hello",2) -> ["he", "ll", "o"]
("world",3) -> ["wor", "ld"]
("python",4) -> ["pyth", "on"]
("programming",5) -> ["progr", "ammin", "g"]
("",3) -> []
        }
    }
}

problem Generated/3853 {
code {
        func split_and_sort(sentence: string) -> list<int>
    }
    tests {
        template nse {
            ("hello 123 bye 456") -> [123, 456]
("1 2 3 4 -5 6 7") -> [1, 2, 3, 4, 5, 6, 7]
("") -> []
("hello world!") -> []
("1 2 3 -4 -5 6 7") -> [1, 2, 3, 4, 5, 6, 7]
        }
    }
}

problem Generated/3854 {
code {
        func split_and_abs(s: string) -> list<int>
    }
    tests {
        template nse {
            ("1a2b3c-4d5e") -> [1, 2, 3, 4, 5]
("a1b2c3d4e5") -> [1, 2, 3, 4, 5]
("123456") -> [123456]
("") -> []
("a-1b-2c-3d-4e-5") -> [1, 2, 3, 4, 5]
        }
    }
}

problem Generated/3855 {
code {
        func split_string_and_abs_numbers(input_str: string) -> list<double>
    }
    tests {
        template nse {
            ("hello 123 -45.6 -78 -90.0world") -> [123.0, 45.6, 78.0, 90.0]
("1 2 3 4 5") -> [1.0, 2.0, 3.0, 4.0, 5.0]
("hello world") -> []
("1a 2b 3c 4d 5e") -> [1.0, 2.0, 3.0, 4.0, 5.0]
("1.1 2.4 -3.5 4 -5.9") -> [1.1, 2.4, 3.5, 4.0, 5.9]
        }
    }
}

problem Generated/3856 {
code {
        func sum_of_numbers_in_text(txt: string) -> int
    }
    tests {
        template nse {
            ("Hello123World456") -> 579
("abc123xyz") -> 123
("1a2b3c4d5e6f7g8h9") -> 45
("") -> 0
("12 3..4&56") -> 75
        }
    }
}

problem Generated/3857 {
code {
        func sum_of_numbers_in_strings(txt: string) -> int
    }
    tests {
        template nse {
            ("I have 2 apples and 3 oranges") -> 5
("The movie is 120 minutes long") -> 120
("You scored 85 out of 100 in the exam") -> 185
("There are no numbers in this string") -> 0
("The temperature is -5 degree Celsius") -> 5
        }
    }
}

problem Generated/3858 {
code {
        func sum_numbers_in_string(txt: string) -> int
    }
    tests {
        template nse {
            ("abc123def456ghi789") -> 1368
("this is a string") -> 0
("1abc23def456ghi789") -> 1269
("100 dollars and 30 cents") -> 130
("The quick brown fox jumps over the lazy dog 123 times!") -> 123
        }
    }
}

problem Generated/3859 {
code {
        func sum_numbers_in_string(s: string) -> int
    }
    tests {
        template nse {
            ("hello123world456") -> 579
("abc") -> 0
("123456") -> 123456
("a1b2c3") -> 6
("1a2b3c4") -> 10
        }
    }
}

problem Generated/3860 {
code {
        func get_longest_word(sentence: string) -> string
    }
    tests {
        template nse {
            ("The quick brown fox jumps over the lazy dog") -> "quick"
("The cow jumped over the moon") -> "jumped"
("This is a test") -> "This"
("And another one") -> "another"
("The longest word in this sentence is antidisestablishmentarianism") -> "antidisestablishmentarianism"
        }
    }
}

problem Generated/3861 {
code {
        func find_shortest_word(s: string) -> int
    }
    tests {
        template nse {
            ("The quick brown fox jumped over the lazy dog") -> 3
("hello world") -> 5
("This is a test sentence") -> 1
("a b c d e f g h i j k l m n o p q r s t u v w x y z") -> 1
("") -> 0
        }
    }
}

problem Generated/3862 {
code {
        func reverse_string_by_word(s: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "olleh dlrow"
("good morning") -> "doog gninrom"
("python is awesome") -> "nohtyp si emosewa"
("hello") -> "olleh"
(" ") -> " "
        }
    }
}

problem Generated/3863 {
code {
        func split_string_based_on_cond(input_s: string, c: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World! How are you?", "[aeiou]") -> ["H", "ll", " W", "rld! H", "w ", "r", " y", "?"]
("1,2,3,4,5,6", "[,]") -> ["1", "2", "3", "4", "5", "6"]
("1,2,3 / 4,5 ,6", "[,/ ]") -> ["1", "2", "3", "4", "5", "6"]
("The quick brown fox", "[ ]") -> ["The", "quick", "brown", "fox"]
("", "[,/ ]") -> []
        }
    }
}

problem Generated/3864 {
code {
        func filter_email_addresses(emails: list<string>) -> list<string>
    }
    tests {
        template nse {
            (["test@example.com", "user@domain.org", "test@123.com", "noemail"]) -> ["test@example.com", "user@domain.org", "test@123.com"]
(["invalid.email.com", "user@domain.org", "test@123.com", "noemail"]) -> ["user@domain.org", "test@123.com"]
(["invalid.email.com", "user.domain.org", "test@123.com", "noemail"]) -> ["test@123.com"]
(["example@gmail.com", "example@outlook.com", "example@yahoo.com", "example@hotmail.com"]) -> ["example@gmail.com", "example@outlook.com", "example@yahoo.com", "example@hotmail.com"]
([]) -> []
        }
    }
}

problem Generated/3865 {
code {
        func filter_words_by_length(sentence: string, length: int) -> list<string>
    }
    tests {
        template nse {
            ("Hello, my name is John", 4) -> ["Hello", "name", "John"]
("The quick brown fox jumps over the lazy dog", 3) -> ["The", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]
("I am the walrus", 2) -> ["am", "the", "walrus"]
("To be or not to be, that is the question", 5) -> ["question"]
("", 1) -> []
        }
    }
}

problem Generated/3866 {
code {
        func split_string_to_ints(s: string) -> list<int>
    }
    tests {
        template nse {
            ("1, 2, 3, 4, 5") -> [1, 2, 3, 4, 5]
("3, 5, 7, 9, 11") -> [3, 5, 7, 9, 11]
("1,2,a,4,5") -> [1, 2, 4, 5]
("12 5  6 8 11") -> [12, 5, 6, 8, 11]
(" 8,  5,  2") -> [8, 5, 2]
        }
    }
}

problem Generated/3867 {
code {
        func is_valid_email(email: string) -> bool
    }
    tests {
        template nse {
            ("john.doe@gmail.com") -> true
("john.doe@gmail") -> false
("john.doe") -> false
("@gmail.com") -> false
("") -> false
        }
    }
}

problem Generated/3868 {
code {
        func split_string_by_delimiters(input_s: string, delimiters: list<string>) -> list<string>
    }
    tests {
        template nse {
            ("Hello, World!", [",", "!"]) -> ["Hello", " World"]
("This is a test string", [" "]) -> ["This", "is", "a", "test", "string"]
("1|2|3|4|5|6", ["|"]) -> ["1", "2", "3", "4", "5", "6"]
("The cow jumped over the moon", [" "]) -> ["The", "cow", "jumped", "over", "the", "moon"]
("test", ["|"]) -> ["test"]
        }
    }
}

problem Generated/3869 {
code {
        func split_string_by_delimiter(txt: string, delimiter: string) -> list<string>
    }
    tests {
        template nse {
            ("This is a test.", " ") -> ["This", "is", "a", "test."]
("This::is::a::test.", "::") -> ["This", "is", "a", "test."]
("This is a test.", "") -> ["This", "is", "a", "test."]
("", "::") -> []
("   This   is   a   test. ", " ") -> ["This", "is", "a", "test."]
        }
    }
}

problem Generated/3870 {
code {
        func split_string(txt: string, separator: string) -> list<string>
    }
    tests {
        template nse {
            ("hello,my,name,is,john", ",") -> ["hello", "my", "name", "is", "john"]
("hello my name is john", " ") -> ["hello", "my", "name", "is", "john"]
("I,love-python!", "") -> ["I,love-python!"]
("python is the best programming language", "") -> ["python", "is", "the", "best", "programming", "language"]
("hello,my,name,is,john", "-") -> ["hello,my,name,is,john"]
        }
    }
}

problem Generated/3871 {
code {
        func split_string(s: string, separator: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World", " ") -> ["Hello", "World"]
("Hello World", "") -> ["H", "e", "l", "l", "o", " ", "W", "o", "r", "l", "d"]
("Hello World", "Wo") -> ["Hello ", "rld"]
("Hello World", "XYZ") -> ["Hello World"]
("", " ") -> [""]
        }
    }
}

problem Generated/3872 {
code {
        func split_string_and_join(original_s: string, delimiter: string, joiner: string) -> string
    }
    tests {
        template nse {
            ("Hello-World", "-", " ") -> "Hello World"
("Hello,World,Python,is,awesome", ",", "-") -> "Hello-World-Python-is-awesome"
("123!456!789!0", "!", "") -> "1234567890"
("1.23;4.56;7.89", ";", ",") -> "1.23,4.56,7.89"
("a b c d e f", " ", "") -> "abcdef"
        }
    }
}

problem Generated/3873 {
code {
        func camel_case_to_snake_case(camel_s: string) -> string
    }
    tests {
        template nse {
            ("helloWorld") -> "hello_world"
("myNameIsPython") -> "my_name_is_python"
("camelCaseToSnakeCase") -> "camel_case_to_snake_case"
("") -> ""
("a") -> "a"
        }
    }
}

problem Generated/3874 {
code {
        func reverse_sentence(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "olleH dlroW"
("The quick brown fox jumps over the lazy dog") -> "ehT kciuq nworb xof spmuj revo eht yzal god"
(" a b c ") -> "a b c"
("1 23 4 56 7") -> "1 32 4 65 7"
("") -> ""
        }
    }
}

problem Generated/3875 {
code {
        func capitalize_and_join(elements: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["hello", "world", "how", "are", "you"], "-") -> "Hello-World-How-Are-You"
(["hello", "world", "how", "are", "you"], "") -> "HelloWorldHowAreYou"
(["the", "quick", "brown", "fox"], " ") -> "The Quick Brown Fox"
(["python", "is", "fun"], "_") -> "Python_Is_Fun"
([], "_") -> ""
(["123", "abc", "4.5"], " ") -> "123 Abc 4.5"
        }
    }
}

problem Generated/3876 {
code {
        func split_and_lower(s: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello, World!") -> ["hello", "world"]
("The quick brown fox jumps over the lazy dog.") -> ["the", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]
("123 Hello 123 World 123") -> ["123", "hello", "123", "world", "123"]
("") -> []
("A man a plan a canal Panama") -> ["a", "man", "a", "plan", "a", "canal", "panama"]
        }
    }
}

problem Generated/3877 {
code {
        func split_and_lower(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello, World!") -> ["hello", "world"]
("This is a Test Case.") -> ["this", "is", "a", "test", "case"]
("  Spaces are    included!  ") -> ["spaces", "are", "included"]
("AllCAPS") -> ["allcaps"]
("") -> []
("1, 2, 3, 4") -> ["1", "2", "3", "4"]
        }
    }
}

problem Generated/3878 {
code {
        func split_lower_string(s: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello, World!") -> ["hello", "world"]
("This is a Test sentence.") -> ["this", "is", "a", "test", "sentence"]
("To be or not to be, that is the question.") -> ["to", "be", "or", "not", "to", "be", "that", "is", "the", "question"]
("Python is a popular programming language.") -> ["python", "is", "a", "popular", "programming", "language"]
("This string has123numbers and456alphabets.") -> ["this", "string", "has123numbers", "and456alphabets"]
        }
    }
}

problem Generated/3879 {
code {
        func uppercase_words_in_string(s: string) -> string
    }
    tests {
        template nse {
            ("hello world") -> "HELLO WORLD"
("The quick brown fox jumps over the lazy dog") -> "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG"
("this is a test string") -> "THIS IS A TEST STRING"
("Python is A maGic") -> "PYTHON IS A MAGIC"
("") -> ""
        }
    }
}

problem Generated/3880 {
code {
        func split_uppercase_words(s: string) -> list<string>
    }
    tests {
        template nse {
            ("HelloWorld") -> ["Hello", "World"]
("HelloWorldToday") -> ["Hello", "World", "Today"]
("AlohaHiThere") -> ["Aloha", "Hi", "There"]
("Hello") -> ["Hello"]
("") -> []
        }
    }
}

problem Generated/3881 {
code {
        func split_string_on_uppercase(s: string) -> list<string>
    }
    tests {
        template nse {
            ("HelloWorld") -> ["Hello", "World"]
("PythonProgrammingLanguage") -> ["Python", "Programming", "Language"]
("") -> []
("A") -> []
("ABCD") -> []
        }
    }
}

problem Generated/3882 {
code {
        func split_alpha_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("This is a sample sentence with several words!") -> ["This", "is", "a", "sample", "sentence", "with", "several", "words"]
("10, 20, 30, 40, 50, 60") -> []
("") -> []
("I like Python 3.9.") -> ["I", "like", "Python"]
("My email address is john@example.com") -> ["My", "email", "address", "is", "john", "example", "com"]
("The quick brown fox jumps over the lazy dog.") -> ["The", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]
        }
    }
}

problem Generated/3883 {
code {
        func split_alpha(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello, World!") -> ["Hello", "World"]
("Good morning! How are you?") -> ["Good", "morning", "How", "are", "you"]
("123 456 789") -> []
("aBcDeFgHiJkLmNoPqRsTuVwXyZ") -> ["aBcDeFgHiJkLmNoPqRsTuVwXyZ"]
("") -> []
        }
    }
}

problem Generated/3884 {
code {
        func split_string_and_remove_nonalpha(s: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello, World!") -> ["Hello", "World"]
("This is a test. 12345") -> ["This", "is", "a", "test"]
("1234, 5678") -> []
("The quick brown fox jumps over the lazy dog.") -> ["The", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog"]
("") -> []
        }
    }
}

problem Generated/3885 {
code {
        func split_alpha_nonalpha(s: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World!") -> ["Hello", "World"]
("I love Python 3!") -> ["I", "love", "Python"]
("This is a sentence.") -> ["This", "is", "a", "sentence"]
("Python is great!!!") -> ["Python", "is", "great"]
("") -> []
        }
    }
}

problem Generated/3886 {
code {
        func split_string_on_digits(string_value: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello123World456") -> ["Hello", "World"]
("SplittingStringOnDigits789") -> ["SplittingStringOnDigits"]
("Test512String") -> ["Test", "String"]
("123MixedStringWith45Numbers") -> ["MixedStringWith", "Numbers"]
("") -> []
        }
    }
}

problem Generated/3887 {
code {
        func split_string_and_sum_numbers(s: string) -> int
    }
    tests {
        template nse {
            ("hello123world456") -> 579
("abc123def456ghi") -> 579
("a1b2c3d4e5f6g7") -> 28
("no_numbers_here") -> 0
("100+200+300") -> 600
        }
    }
}

problem Generated/3888 {
code {
        func split_string_and_filter_digits(s: string) -> list<int>
    }
    tests {
        template nse {
            ("hello123world456") -> [123, 456]
("He1llo2W3or4ld5") -> [1, 2, 3, 4, 5]
("ABCD") -> []
("1,2,3,4") -> [1, 2, 3, 4]
("a1b2c3d4") -> [1, 2, 3, 4]
        }
    }
}

problem Generated/3889 {
code {
        func split_string_to_numbers(input_str: string) -> list<int>
    }
    tests {
        template nse {
            ("There are 4 numbers in this sentence 1234 and 5678") -> [4, 1234, 5678]
("The number 5 does not appear in this string") -> [5]
("1234 5678 999") -> [1234, 5678, 999]
("foo bar baz") -> []
("") -> []
        }
    }
}

problem Generated/3890 {
code {
        func split_string_and_filter_numbers(s: string) -> list<int>
    }
    tests {
        template nse {
            ("My age is 25 years.") -> [25]
("I have 2 apples and 3 bananas") -> [2, 3]
("The answer is 42!") -> [42]
("No numbers in this string!") -> []
("1234567890") -> [1234567890]
        }
    }
}

problem Generated/3891 {
code {
        func split_and_filter(elements: string, pre: string) -> list<string>
    }
    tests {
        template nse {
            ("The quick brown fox jumps over the lazy dog", "the") -> ["the"]
("The quick brown fox jumps over the lazy dog", "fox") -> ["fox"]
("The quick brown fox jumps over the lazy dog", "o") -> ["over"]
("This is a sample sentence", "a") -> ["a"]
("This is a sample sentence", "t") -> []
        }
    }
}

problem Generated/3892 {
code {
        func split_string_based_on_count(s: string, count: int) -> list<string>
    }
    tests {
        template nse {
            ("Hello World", 1) -> ["H", "e", "l", "l", "o", " ", "W", "o", "r", "l", "d"]
("Hello World", 2) -> ["He", "ll", "o ", "Wo", "rl", "d"]
("Hello World", 3) -> ["Hel", "lo ", "Wor", "ld"]
("This is a test", 4) -> ["This", " is ", "a te", "st"]
("Another test case", 5) -> ["Anoth", "er te", "st ca", "se"]
        }
    }
}

problem Generated/3893 {
code {
        func split_string_based_on_count(s: string, count: int) -> list<string>
    }
    tests {
        template nse {
            ("123456789", 3) -> ["123", "456", "789"]
("qwertyuioasdfghjkl", 5) -> ["qwert", "yuioa", "sdfgh", "jkl"]
("aaaaaabbbbbb", 6) -> ["aaaaaa", "bbbbbb"]
("test", 2) -> ["te", "st"]
("1234", 5) -> ["1234"]
        }
    }
}

problem Generated/3894 {
code {
        func replace_words_in_list(input_lst: list<string>, words_to_replace: list<string>, replacement: string) -> list<string>
    }
    tests {
        template nse {
            (["apple", "banana", "orange"], ["apple", "orange"], "fruit") -> ["fruit", "banana", "fruit"]
(["apple", "banana", "orange"], ["cherry", "grape"], "fruit") -> ["apple", "banana", "orange"]
(["apple is red", "banana is yellow", "orange is orange"], ["red", "yellow", "orange"], "color") -> ["apple is color", "banana is color", "color is color"]
(["apple is red", "banana is yellow", "orange is orange"], ["is"], "was") -> ["apple was red", "banana was yellow", "orange was orange"]
([], ["is"], "was") -> []
        }
    }
}

problem Generated/3895 {
code {
        func replace_text_in_list(elements: list<string>, old_txt: string, new_txt: string) -> list<string>
    }
    tests {
        template nse {
            (["Hello World", "Python is Fun"], "o", "a") -> ["Hella Warld", "Pythan is Fun"]
(["Hello World", "Python is Fun"], " ", "_") -> ["Hello_World", "Python_is_Fun"]
(["Hello World", "Python is Fun"], "e", "x") -> ["Hxllo World", "Python is Fun"]
([], "o", "a") -> []
([""], "o", "a") -> [""]
        }
    }
}

problem Generated/3896 {
code {
        func split_string_by_delimiters(s: string, delimiters: list<string>) -> list<string>
    }
    tests {
        template nse {
            ("Hi there! How are you?", [" ", "!"]) -> ["Hi", "there", "How", "are", "you?"]
("a,b;c-d", [",", ";", "-"]) -> ["a", "b", "c", "d"]
("", [" ", "!", "."]) -> []
("Hello", [" "]) -> ["Hello"]
("A,B:C", [":"]) -> ["A,B", "C"]
        }
    }
}

problem Generated/3897 {
code {
        func split_string_and_append_to_list(input_s: string, separator: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello, World!", ",") -> ["Hello", " World!"]
("This is a test", " ") -> ["This", "is", "a", "test"]
("This-is-another-test", "-") -> ["This", "is", "another", "test"]
("TestWithNoSeparator", " ") -> ["TestWithNoSeparator"]
("Another,test:case", ",|:") -> ["Another", "test", "case"]
        }
    }
}

problem Generated/3898 {
code {
        func split_string_into_list(s: string, delim: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World, how are you?", " ") -> ["Hello", "World,", "how", "are", "you?"]
("1,2,3,4,5,6", ",") -> ["1", "2", "3", "4", "5", "6"]
("Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday", ",") -> ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
("Hello World", "o") -> ["Hell", " W", "rld"]
("What is the answer?", "") -> ["W", "h", "a", "t", " ", "i", "s", " ", "t", "h", "e", " ", "a", "n", "s", "w", "e", "r", "?"]
        }
    }
}

problem Generated/3899 {
code {
        func split_string_based_on_delimiters(input_str: string, delimiters: list<string>) -> list<string>
    }
    tests {
        template nse {
            ("Hello,world", [","]) -> ["Hello", "world"]
("This is a sample string", [" "]) -> ["This", "is", "a", "sample", "string"]
("1+2-3*4/5", ["+", "-", "*", "/"]) -> ["1", "2", "3", "4", "5"]
("Hello,world", [";"]) -> ["Hello,world"]
("", [";"]) -> []
        }
    }
}

problem Generated/3900 {
code {
        func sort_words(sentence: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello, world!") -> ["hello", "world"]
("The quick brown fox jumps over the lazy dog") -> ["brown", "dog", "fox", "jumps", "lazy", "over", "quick", "the", "the"]
(".") -> []
("") -> []
("   ") -> []
        }
    }
}

problem Generated/3901 {
code {
        func find_sublist(main_lst: list<string>, sub_lst: list<string>) -> list<int>
    }
    tests {
        template nse {
            (["a", "b", "c", "d", "e"], ["d", "e"]) -> [3]
(["a", "b", "c", "d", "e"], ["b", "c"]) -> [1]
(["a", "b", "c", "d", "e"], ["a", "b", "c", "d", "e"]) -> [0]
(["a", "b", "c", "d", "e"], ["e", "d"]) -> []
(["a", "b", "c", "d", "e"], ["c"]) -> [2]
        }
    }
}

problem Generated/3902 {
code {
        func split_and_get_indices(s: string, delimiter: string) -> list<int>
    }
    tests {
        template nse {
            ("1, 2, 4, 5, 6, 7", ", ") -> [0, 1, 2, 3, 4, 5]
("1 2 4 5 6 7", ", ") -> [0]
("", ", ") -> []
("Python;Java;C++;C", ";") -> [0, 1, 2, 3]
("HelloWorld", ", ") -> [0]
        }
    }
}

problem Generated/3903 {
code {
        func reverse_word_order(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "World Hello"
("The quick brown fox jumps over the lazy dog") -> "dog lazy the over jumps fox brown quick The"
("1 2 3 4 5") -> "5 4 3 2 1"
("") -> ""
("a") -> "a"
        }
    }
}

problem Generated/3904 {
code {
        func reverse_string_in_sentence(sentence: string) -> string
    }
    tests {
        template nse {
            ("Hello World") -> "dlroW olleH"
("Hello   World") -> "dlroW   olleH"
("Hello World!") -> "!dlroW olleH"
("") -> ""
("a b c d e f g h i j k l m n o p q r s t u v w x y z") -> "z y x w v u t s r q p o n m l k j i h g f e d c b a"
        }
    }
}

problem Generated/3905 {
code {
        func split_and_remove_duplicates(s: string, delimiter: string) -> list<string>
    }
    tests {
        template nse {
            ("apple,orange,banana,orange,kiwi", ",") -> ["apple", "orange", "banana", "kiwi"]
("red green blue yellow green blue black", " ") -> ["red", "green", "blue", "yellow", "black"]
("hello,world", " ") -> ["hello,world"]
("", " ") -> [""]
("a,b,c,d,e", ",") -> ["a", "b", "c", "d", "e"]
        }
    }
}

problem Generated/3906 {
code {
        func count_words(s: string, words: list<string>) -> list<int>
    }
    tests {
        template nse {
            ("bar foo bar", ["foo", "bar"]) -> [1, 2]
("the quick brown fox jumps over the lazy dog", ["the", "fox"]) -> [2, 1]
("the quick brown fox jumps over the lazy dog", ["cat", "dog"]) -> [0, 1]
("hello world", ["hello", "world", "world"]) -> [1, 1, 1]
("aaabbbccc", ["a", "b", "c"]) -> [3, 3, 3]
        }
    }
}

problem Generated/3907 {
code {
        func split_and_get_first_half(input_s: string) -> list<string>
    }
    tests {
        template nse {
            ("Hello World") -> ["Hello"]
("We-are-Learning-Python") -> ["We", "are"]
("Python-is-fun") -> ["Python"]
("Python is fun") -> ["Python"]
("A-B-C-D-E-F-G") -> ["A", "B", "C"]
        }
    }
}

problem Generated/3908 {
code {
        func split_string_and_return_chunks(original_s: string, chunk_size: int) -> list<string>
    }
    tests {
        template nse {
            ("abcdefghij", 3) -> ["abc", "def", "ghi", "j"]
("pythoncode", 2) -> ["py", "th", "on", "co", "de"]
("testing123", 4) -> ["test", "ing1", "23"]
("hello world", 5) -> ["hello", " worl", "d"]
("abcdefghijklmnopqrstuvwxyz", 6) -> ["abcdef", "ghijkl", "mnopqr", "stuvwx", "yz"]
        }
    }
}

problem Generated/3909 {
code {
        func split_string_and_get_sublists(input_str: string, sublist_size: int) -> list<list<string>>
    }
    tests {
        template nse {
            ("apple banana cherry dog elephant frog", 2) -> [["apple", "banana"], ["cherry", "dog"], ["elephant", "frog"]]
("apple banana cherry dog elephant", 3) -> [["apple", "banana", "cherry"], ["dog", "elephant"]]
("apple banana cherry dog elephant frog", 3) -> [["apple", "banana", "cherry"], ["dog", "elephant", "frog"]]
("apple banana cherry dog elephant frog", 6) -> [["apple", "banana", "cherry", "dog", "elephant", "frog"]]
("apple", 1) -> [["apple"]]
        }
    }
}

problem Generated/3910 {
code {
        func split_string_to_fixed_size(input_str: string, size: int) -> list<string>
    }
    tests {
        template nse {
            ("Hello World", 3) -> ["Hel", "lo ", "Wor", "ld"]
("Hello World", 5) -> ["Hello", " Worl", "d"]
("Hello World", 7) -> ["Hello W", "orld"]
("abcdef", 2) -> ["ab", "cd", "ef"]
("1234567890", 4) -> ["1234", "5678", "90"]
        }
    }
}

problem Generated/3911 {
code {
        func calculate_power(numbers: string, power: int) -> list<double>
    }
    tests {
        template nse {
            ("1, 2, 3, 4, 5", 2) -> [1.0, 4.0, 9.0, 16.0, 25.0]
("1, 2, 3, 4, 5", 3) -> [1.0, 8.0, 27.0, 64.0, 125.0]
("1,2,3,4,5", 0) -> [1.0, 1.0, 1.0, 1.0, 1.0]
("0.5, 1.25, 2.5", 2) -> [0.25, 1.5625, 6.25]
("10, 20, 30", 1) -> [10.0, 20.0, 30.0]
        }
    }
}

problem Generated/3912 {
code {
        func concatenate_strings(inputs: list<string>) -> string
    }
    tests {
        template nse {
            (["hello", "world"]) -> "helloworld"
(["hello", "world", "123"]) -> "helloworld123"
(["hello", "world", "123", "!!"]) -> "helloworld123"
(["", "world", "123"]) -> "world123"
(["hello", "", "123", "!!"]) -> "hello123"
        }
    }
}

problem Generated/3913 {
code {
        func concat_strings(strs: list<string>, delimiter: string) -> string
    }
    tests {
        template nse {
            (["Hello", "world", "!"], " ") -> "Hello world !"
(["Hello", "world", "!"], ",") -> "Hello,world,!"
(["Today", "is", "a", "good", "day"], "-") -> "Today-is-a-good-day"
(["The", "quick", "brown", "fox"], "") -> "Thequickbrownfox"
(["1", "2", "3", "4", "5"], " + ") -> "1 + 2 + 3 + 4 + 5"
        }
    }
}

problem Generated/3914 {
code {
        func concatenate_strings(string_lst: list<string>, separator: string) -> string
    }
    tests {
        template nse {
            (["a", "b", "c", "d"], "-") -> "a-b-c-d"
(["hey", "there", "how", "are", "you"], " ") -> "hey there how are you"
([], "-") -> ""
(["hello"], "-") -> "hello"
(["a", "b", "c"], "") -> "abc"
        }
    }
}