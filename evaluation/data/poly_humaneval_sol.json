{
    "cpp": {
        "HumanEval/0": "bool hasCloseElements(const vector<double>& numbers, double threshold) {\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "HumanEval/1": "vector<string> separateParenGroups(const string& paren_string) {\n    vector<string> groups;\n    vector<char> stk;\n    string current_group = \"\";\n    string parens = paren_string;\n    erase(parens, ' ');\n    for (char ch : parens) {\n        if (ch == '(') {\n            stk.push_back(ch);\n            current_group += ch;\n        } else if (ch == ')') {\n            stk.pop_back();\n            current_group += ch;\n            if (stk.empty()) {\n                groups.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return groups;\n}",
        "HumanEval/2": "double truncateNumber(double num) {\n    return num - floor(num);\n}",
        "HumanEval/3": "bool belowZero(const vector<int>& operations) {\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}",
        "HumanEval/4": "double meanAbsoluteDeviation(const vector<double>& numbers) {\n    double mean = accumulate(numbers.begin(), numbers.end(), 0.0) / numbers.size();\n    double deviation = accumulate(numbers.begin(), numbers.end(), 0.0, [&](double acc, double x) {\n        return acc + abs(x - mean);\n    });\n    return deviation / numbers.size();\n}",
        "HumanEval/5": "vector<int> intersperse(const vector<int>& numbers, int delimiter) {\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (i != 0) {\n            result.push_back(delimiter);\n        }\n        result.push_back(numbers[i]);\n    }\n    return result;\n}",
        "HumanEval/6": "vector<int> parseNestedParens(const string& paren_string) {\n    vector<int> result;\n    istringstream buf(paren_string);\n    vector<string> paren_groups = {istream_iterator<string>(buf), {}};\n    for (const string& group : paren_groups) {\n        int max_depth = 0;\n        int depth = 0;\n        for (char ch : group) {\n            if (ch == '(') {\n                depth += 1;\n                max_depth = max(max_depth, depth);\n            } else if (ch == ')') {\n                depth -= 1;\n            }\n        }\n        result.push_back(max_depth);\n    }\n    return result;\n}",
        "HumanEval/7": "vector<string> filterBySubstring(const vector<string>& strs, const string& substring) {\n    vector<string> result;\n    copy_if(strs.begin(), strs.end(), back_inserter(result), [&](const string& s) {\n        return s.find(substring) != string::npos;\n    });\n    return result;\n}",
        "HumanEval/8": "vector<int> sumProduct(const vector<int>& numbers) {\n    int n_sum = accumulate(numbers.begin(), numbers.end(), 0);\n    int n_product = accumulate(numbers.begin(), numbers.end(), 1, multiplies<int>());\n    return {n_sum, n_product};\n}",
        "HumanEval/9": "vector<int> rollingMax(const vector<int>& numbers) {\n    int max_so_far = numeric_limits<int>::min();\n    vector<int> result;\n    for (int num : numbers) {\n        max_so_far = max(max_so_far, num);\n        result.push_back(max_so_far);\n    }\n    return result;\n}",
        "HumanEval/10": "bool isPalindrome(const string& s) {\n    return s == string(s.rbegin(), s.rend());\n}\nstring makePalindrome(const string& s) {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (int i = 0; i < s.length(); i++) {\n        if (isPalindrome(s.substr(i))) {\n            return s + string(s.rbegin() + 1, s.rbegin() + i + 1);\n        }\n    }\n    return \"\";\n}",
        "HumanEval/11": "string stringXor(const string& a, const string& b) {\n    return accumulate(a.begin(), a.end(), string(), [&](string&& res, char c) {\n        return move(res += (c == b[res.size()] ? '0' : '1'));\n    });\n}",
        "HumanEval/12": "optional<string> longest(const vector<string>& strs) {\n    if (strs.empty()) {\n        return nullopt;\n    }\n    string longest_s = strs[0];\n    for (const string& s : strs) {\n        if (s.length() > longest_s.length()) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}",
        "HumanEval/13": "int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}",
        "HumanEval/14": "vector<string> allPrefixes(const string& s) {\n    vector<string> prefixes;\n    for (int i = 0; i < s.length(); i++) {\n        prefixes.push_back(s.substr(0, i + 1));\n    }\n    return prefixes;\n}",
        "HumanEval/15": "string stringSequence(int n) {\n    vector<int> a(n + 1);\n    iota(a.begin(), a.end(), 0);\n    return accumulate(a.begin(), a.end(), string(), [](string&& s, int i) {\n        return move(s += (s.length() ? \" \" : \"\") + to_string(i));\n    });\n}",
        "HumanEval/16": "int countDistinctCharacters(const string& s) {\n    unordered_set<char> dc;\n    transform(s.begin(), s.end(), inserter(dc, dc.begin()), ::tolower);\n    return dc.size();\n}",
        "HumanEval/17": "vector<int> parseMusic(const string& music_string) {\n    unordered_map<string, int> durations = {{\"o\", 4}, {\"o|\", 2}, {\".|\", 1}};\n    istringstream buf(music_string);\n    vector<string> notes = {istream_iterator<string>(buf), {}};\n    vector<int> result;\n    for (string& note : notes) {\n        result.push_back(durations[note]);\n    }\n    return result;\n}",
        "HumanEval/18": "int howManyTimes(const string& s, const string& substring) {\n    int times = 0;\n    for (int i = 0; i + substring.length() <= s.length(); i++) {\n        if (s.substr(i, substring.length()) == substring) {\n            times += 1;\n        }\n    }\n    return times;\n}",
        "HumanEval/19": "string sortNumbers(const string& numbers) {\n    unordered_map<string, int> num_dict = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9},\n    };\n    istringstream buf(numbers);\n    vector<string> num_list = {istream_iterator<string>(buf), {}};\n    erase_if(num_list, [&](const string& x) {\n        return num_dict.find(x) == num_dict.end();\n    });\n    sort(num_list.begin(), num_list.end(), [&](const string& a, const string& b) {\n        return num_dict[a] < num_dict[b];\n    });\n    return accumulate(num_list.begin(), num_list.end(), string(), [](string&& a, const string& b) {\n        return move(a += a.empty() ? b : \" \" + b);\n    });\n}",
        "HumanEval/20": "vector<double> findClosestElements(const vector<double>& numbers) {\n    vector<double> sorted_numbers(numbers);\n    sort(sorted_numbers.begin(), sorted_numbers.end());\n    double min_diff = numeric_limits<double>::infinity();\n    vector<double> closest_pair;\n    for (int i = 1; i < sorted_numbers.size(); ++i) {\n        double diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {sorted_numbers[i - 1], sorted_numbers[i]};\n        }\n    }\n    return closest_pair;\n}",
        "HumanEval/21": "vector<double> rescaleToUnit(const vector<double>& numbers) {\n    double min_num = *min_element(numbers.begin(), numbers.end());\n    double max_num = *max_element(numbers.begin(), numbers.end());\n    if (min_num == max_num) {\n        return vector<double>(numbers.size(), 0.0);\n    } else {\n        vector<double> res;\n        for (double num : numbers) {\n            res.push_back((num - min_num) / (max_num - min_num));\n        }\n        return res;\n    }\n}",
        "HumanEval/22": "vector<int> filterIntegers(const vector<any>& values) {\n    vector<int> filtered_values;\n    for (const auto& value : values) {\n        try {\n            auto intValue = any_cast<int>(value);\n            filtered_values.push_back(intValue);\n        } catch (const bad_any_cast&) {\n            continue;\n        }\n    }\n    return filtered_values;\n}",
        "HumanEval/23": "int strLength(const string& s) {\n    return s.length();\n}",
        "HumanEval/24": "int largestDivisor(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}",
        "HumanEval/25": "vector<int> factorize(int n) {\n    vector<int> factors;\n    int divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.push_back(divisor);\n            n /= divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}",
        "HumanEval/26": "vector<int> removeDuplicates(const vector<int>& numbers) {\n    unordered_map<int, int> counts;\n    for (int num : numbers) {\n        counts[num]++;\n    }\n    vector<int> res;\n    copy_if(numbers.begin(), numbers.end(), back_inserter(res), [&](int num) {\n        return counts[num] == 1;\n    });\n    return res;\n}",
        "HumanEval/27": "string flipCase(const string& s) {\n    string flipped = \"\";\n    for (char ch : s) {\n        if (!isalpha(ch)) {\n            flipped += ch;\n        } else if (islower(ch)) {\n            flipped += toupper(ch);\n        } else if (isupper(ch)) {\n            flipped += tolower(ch);\n        }\n    }\n    return flipped;\n}",
        "HumanEval/28": "string concatenate(const vector<string>& strs) {\n    return accumulate(strs.begin(), strs.end(), string());\n}",
        "HumanEval/29": "vector<string> filterByPrefix(const vector<string>& strs, const string& prefix_str) {\n    vector<string> filtered;\n    copy_if(strs.begin(), strs.end(), back_inserter(filtered), [&](const string& str) {\n        return str.starts_with(prefix_str);\n    });\n    return filtered;\n}",
        "HumanEval/30": "vector<int> getPositive(const vector<int>& l) {\n    vector<int> result;\n    copy_if(l.begin(), l.end(), back_inserter(result), [](int x) {\n        return x > 0;\n    });\n    return result;\n}",
        "HumanEval/31": "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "HumanEval/32": "double poly(const vector<int>& xs, double x) {\n    double res = 0;\n    for (int i = 0; i < xs.size(); i++) {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\ndouble findZero(const vector<int>& xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}",
        "HumanEval/33": "vector<int> sortThird(const vector<int>& l) {\n    vector<int> sorted_third;\n    for (int i = 0; i < l.size(); i += 3) {\n        sorted_third.push_back(l[i]);\n    }\n    sort(sorted_third.begin(), sorted_third.end());\n    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            result.push_back(sorted_third[i / 3]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}",
        "HumanEval/34": "vector<int> listUnique(const vector<int>& l) {\n    vector<int> result(l);\n    sort(result.begin(), result.end());\n    result.erase(unique(result.begin(), result.end()), result.end());\n    return result;\n}",
        "HumanEval/35": "int maxElement(const vector<int>& l) {\n    if (l.empty()) {\n        return 0;\n    }\n    return *max_element(l.begin(), l.end());\n}",
        "HumanEval/36": "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            string str_i = to_string(i);\n            cnt += count(str_i.begin(), str_i.end(), '7');\n        }\n    }\n    return cnt;\n}",
        "HumanEval/37": "vector<int> sortEven(const vector<int>& l) {\n    vector<int> sorted_even;\n    for (int i = 0; i < l.size(); i += 2) {\n        sorted_even.push_back(l[i]);\n    }\n    sort(sorted_even.begin(), sorted_even.end());\n    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            result.push_back(sorted_even[i / 2]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}",
        "HumanEval/38": "string encodeCyclic(const string& s) {\n    string result;\n    for (int i = 0; i < s.size(); i += 3) {\n        if (i + 3 > s.size()) {\n            result += s.substr(i);\n        } else {\n            result += s.substr(i + 1, 2);\n            result += s[i];\n        }\n    }\n    return result;\n}\nstring decodeCyclic(const string& s) {\n    return encodeCyclic(encodeCyclic(s));\n}",
        "HumanEval/39": "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint primeFib(int n) {\n    vector<int> f = {0, 1};\n    int cnt = 0;\n    while (cnt < n) {\n        f = {f[1], f[0] + f[1]};\n        if (isPrime(f[1])) {\n            cnt++;\n        }\n    }\n    return f[1];\n}",
        "HumanEval/40": "bool triplesSumToZero(const vector<int>& l) {\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "HumanEval/41": "int carRaceCollision(int n) {\n    return pow(n, 2);\n}",
        "HumanEval/42": "vector<int> incrList(const vector<int>& l) {\n    vector<int> result;\n    transform(l.begin(), l.end(), back_inserter(result), [](int i) { return i + 1; });\n    return result;\n}",
        "HumanEval/43": "bool pairsSumToZero(const vector<int>& l) {\n    unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.count(-num)) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}",
        "HumanEval/44": "string changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    vector<string> digits;\n    while (x > 0) {\n        digits.push_back(to_string(x % bas));\n        x /= bas;\n    }\n    return accumulate(digits.rbegin(), digits.rend(), string());\n}",
        "HumanEval/45": "double triangleArea(int a, int h) {\n    return static_cast<double>(a * h) / 2;\n}",
        "HumanEval/46": "int fib4(int n) {\n    vector<int> fib = {0, 0, 2, 0};\n    for (int i = 4; i <= n; i++) {\n        fib[i % 4] = accumulate(fib.begin(), fib.end(), 0);\n    }\n    return fib[n % 4];\n}",
        "HumanEval/47": "double median(const vector<double>& l) {\n    vector<double> sl = l;\n    sort(sl.begin(), sl.end());\n    if (l.size() % 2 != 0) {\n        return sl[l.size() / 2];\n    } else {\n        return (sl[l.size() / 2] + sl[l.size() / 2 - 1]) / 2;\n    }\n}",
        "HumanEval/48": "bool isPalindrome(const string& txt) {\n    return txt == string(txt.rbegin(), txt.rend());\n}",
        "HumanEval/49": "int modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}",
        "HumanEval/50": "string encodeShift(const string& s) {\n    string result;\n    transform(s.begin(), s.end(), back_inserter(result), [](char ch) {\n        return ((ch - 97 + 5) % 26) + 97;\n    });\n    return result;\n}\nstring decodeShift(const string& s) {\n    string result;\n    transform(s.begin(), s.end(), back_inserter(result), [](char ch) {\n        return ((ch - 97 + 21) % 26) + 97;\n    });\n    return result;\n}",
        "HumanEval/51": "string removeVowels(const string& txt) {\n    string vowels = \"aeiouAEIOU\";\n    string result;\n    copy_if(txt.begin(), txt.end(), back_inserter(result), [&vowels](char ch) {\n        return vowels.find(ch) == string::npos;\n    });\n    return result;\n}",
        "HumanEval/52": "bool belowThreshold(const vector<int>& l, int t) {\n    return all_of(l.begin(), l.end(), [t](int x) { return x < t; });\n}",
        "HumanEval/53": "int add(int x, int y) {\n    return x + y;\n}",
        "HumanEval/54": "bool sameChars(const string& s0, const string& s1) {\n    return unordered_set<char>(s0.begin(), s0.end()) == unordered_set<char>(s1.begin(), s1.end());\n}",
        "HumanEval/55": "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}",
        "HumanEval/56": "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '<') {\n            depth += 1;\n        } else if (b == '>') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}",
        "HumanEval/57": "bool monotonic(const vector<int>& l) {\n    vector<int> diff;\n    transform(l.begin(), l.end() - 1, l.begin() + 1, back_inserter(diff), [](int x, int y) { return y - x; });\n    return all_of(diff.begin(), diff.end(), [](int x) { return x <= 0; }) ||\n           all_of(diff.begin(), diff.end(), [](int x) { return x >= 0; });\n}",
        "HumanEval/58": "vector<int> common(const vector<int>& l1, const vector<int>& l2) {\n    set<int> s1(l1.begin(), l1.end()), s2(l2.begin(), l2.end());\n    vector<int> result;\n    set_intersection(s1.begin(), s1.end(), s2.begin(), s2.end(), back_inserter(result));\n    return result;\n}",
        "HumanEval/59": "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}",
        "HumanEval/60": "int sumToN(int n) {\n    int sum = 0;\n    for (int i = 0; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}",
        "HumanEval/61": "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '(') {\n            depth += 1;\n        } else if (b == ')') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}",
        "HumanEval/62": "vector<int> derivative(const vector<int>& xs) {\n    vector<int> result;\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}",
        "HumanEval/63": "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        tie(a, b, c) = tuple(b, c, a + b + c);\n        n -= 1;\n    }\n    return c;    \n}",
        "HumanEval/64": "int vowelsCount(const string& s) {\n    string vowels = \"aeiou\";\n    int cnt = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (vowels.find(tolower(s[i])) != string::npos || (i == s.size() - 1 && tolower(s[i]) == 'y')) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}",
        "HumanEval/65": "string circularShift(int x, int shift) {\n    string x_str = to_string(x);\n    if (shift > x_str.size()) {\n        reverse(x_str.begin(), x_str.end());\n        return x_str;\n    } else {\n        return x_str.substr(x_str.size() - shift) + x_str.substr(0, x_str.size() - shift);\n    }\n}",
        "HumanEval/66": "int digitSum(const string& s) {\n    return accumulate(s.begin(), s.end(), 0, [](int a, char c) {\n        return a + (isupper(c) ? c : 0);\n    });\n}",
        "HumanEval/67": "int fruitDistribution(const string& s, int n) {\n    istringstream buf(s);\n    vector<string> words = {istream_iterator<string>(buf), {}};\n    int apples = stoi(*(find(words.begin(), words.end(), \"apples\") - 1));\n    int oranges = stoi(*(find(words.begin(), words.end(), \"oranges\") - 1));\n    return n - apples - oranges;    \n}",
        "HumanEval/68": "vector<int> pluck(const vector<int>& arr) {\n    vector<int> evens;\n    copy_if(arr.begin(), arr.end(), back_inserter(evens), [](int n) {\n        return n % 2 == 0;\n    });\n    if (evens.size() == 0) {\n        return {};\n    }\n    int minEven = *min_element(evens.begin(), evens.end());\n    return {minEven, static_cast<int>(find(arr.begin(), arr.end(), minEven) - arr.begin())};\n}",
        "HumanEval/69": "int search(const vector<int>& lst) {\n    unordered_map<int, int> freqs;\n    for (int n : lst) {\n        freqs[n]++;\n    }\n    vector<int> good_vals;\n    for (auto& p : freqs) {\n        if (p.second >= p.first) {\n            good_vals.push_back(p.first);\n        }\n    }\n    return good_vals.empty() ? -1 : *max_element(good_vals.begin(), good_vals.end());\n}",
        "HumanEval/70": "vector<int> strangeSortList(const vector<int>& lst) {\n    vector<int> sl = lst;\n    sort(sl.begin(), sl.end());\n    vector<int> result;\n    int left = 0, right = sl.size() - 1;\n    while (left <= right) {\n        result.push_back(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push_back(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}",
        "HumanEval/71": "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        double s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}",
        "HumanEval/72": "bool willItFly(const vector<int>& q, int w) {\n    if (q.size() == 0) {\n        return false;\n    }\n    vector<int> idxs(q.size());\n    iota(idxs.begin(), idxs.end(), 0);\n    bool isPalin = all_of(idxs.begin(), idxs.end(), [&](int i) { return q[i] == q[q.size() - i - 1]; });\n    int total = accumulate(q.begin(), q.end(), 0);\n    return isPalin && total <= w;\n}",
        "HumanEval/73": "int smallestChange(const vector<int>& arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.size() / 2; i++) {\n        if (arr[i] != arr[arr.size() - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}",
        "HumanEval/74": "vector<string> totalMatch(const vector<string>& lst1, const vector<string>& lst2) {\n    int cnt1 = accumulate(lst1.begin(), lst1.end(), 0, [](int acc, const string& s) { return acc + s.length(); });\n    int cnt2 = accumulate(lst2.begin(), lst2.end(), 0, [](int acc, const string& s) { return acc + s.length(); });\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}",
        "HumanEval/75": "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nbool isMultiplyPrime(int a) {\n    int cnt = 0;\n    for (int i = 2; i <= a; i++) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt++;\n                a /= i;\n            }\n        }\n    }\n    return cnt == 3;\n}",
        "HumanEval/76": "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}",
        "HumanEval/77": "bool isCube(int a) {\n    a = abs(a);\n    int root = round(pow(a, 1.0 / 3));\n    return root * root * root == a;\n}",
        "HumanEval/78": "int hexKey(const string& num) {\n    return count_if(num.begin(), num.end(), [](char c) {\n        return string(\"2357BD\").find(c) != string::npos;\n    });\n}",
        "HumanEval/79": "string decimalToBinary(int dec) {\n    string binary = bitset<32>(dec).to_string();\n    binary.erase(0, min(binary.find_first_not_of('0'), binary.size()-1));\n    return format(\"db{}db\", binary);\n}",
        "HumanEval/80": "bool isHappy(const string& s) {\n    if (s.length() < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.length() - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}",
        "HumanEval/81": "vector<string> numericalLetterGrade(const vector<double>& grades) {\n    vector<string> result;\n    for (double grade : grades) {\n        if (grade == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n            result.push_back(\"A\");\n        } else if (grade > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n        } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}",
        "HumanEval/82": "bool primeLength(const string& s) {\n    int length = s.length();\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(length)); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "HumanEval/83": "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * pow(10, n - 2);\n}",
        "HumanEval/84": "string solve(int n) {\n    string n_str = to_string(n);\n    int digits_sum = accumulate(n_str.begin(), n_str.end(), 0, [](int acc, char d) {\n        return acc + stoi(string(1,d));\n    });\n    string binary = bitset<32>(digits_sum).to_string();\n    binary.erase(0, min(binary.find_first_not_of('0'), binary.size()-1));\n    return binary;\n}",
        "HumanEval/85": "int add(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}",
        "HumanEval/86": "string antiShuffle(const string& s) {\n    istringstream buf(s);\n    vector<string> words(istream_iterator<string>(buf), {});\n    for_each(words.begin(), words.end(), [](string& word) {\n        sort(word.begin(), word.end());\n    });\n    return accumulate(words.begin(), words.end(), string(), [](string&& a, const string& b) {\n        return move(a += a.empty() ? b : \" \" + b);\n    });\n}",
        "HumanEval/87": "vector<vector<int>> getRow(const vector<vector<int>>& lst, int x) {\n    vector<vector<int>> coords;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                coords.push_back({i, j});\n            }\n        }\n    }\n    sort(coords.begin(), coords.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a[0] == b[0] ? a[1] > b[1] : a[0] < b[0];\n    });\n    return coords;\n}",
        "HumanEval/88": "vector<int> sortArray(const vector<int>& arr) {\n    if (arr.size() == 0) {\n        return {};\n    }\n    vector<int> result(arr);\n    if ((arr[0] + arr[arr.size() - 1]) % 2 == 0) {\n        sort(result.begin(), result.end(), greater<int>());\n    } else {\n        sort(result.begin(), result.end());\n    }\n    return result;\n}",
        "HumanEval/89": "string encrypt(const string& s) {\n    string result;\n    for (char ch : s) {\n        char shifted = ch + 4;\n        if (shifted > 'z') {\n            shifted -= 26;\n        }\n        result += shifted;\n    }\n    return result;\n}",
        "HumanEval/90": "optional<int> nextSmallest(const vector<int>& lst) {\n    vector<int> sl(lst);\n    sort(sl.begin(), sl.end());\n    sl.erase(unique(sl.begin(), sl.end()), sl.end());\n    if (sl.size() < 2) {\n        return nullopt;\n    }\n    return sl[1];\n}",
        "HumanEval/91": "int isBored(const string& s) {\n    regex re(\"[.!?]\\\\s*\");\n    vector<string> sentences(sregex_token_iterator(s.begin(), s.end(), re, -1), sregex_token_iterator());\n    return count_if(sentences.begin(), sentences.end(), [](const string& sentence) {\n        return sentence.size() >= 2 && sentence.substr(0, 2) == \"I \";\n    });\n}",
        "HumanEval/92": "bool anyInt(any x, any y, any z) {\n    if (x.type() == typeid(int) && y.type() == typeid(int) && z.type() == typeid(int)) {\n        int int_x = any_cast<int>(x);\n        int int_y = any_cast<int>(y);\n        int int_z = any_cast<int>(z);\n        if ((int_x + int_y == int_z) || (int_x + int_z == int_y) || (int_y + int_z == int_x)) {\n            return true;\n        }\n    }\n    return false;\n}",
        "HumanEval/93": "string encode(const string& message) {\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    for (char ch : message) {\n        if (isalpha(ch)) {\n            char ch1 = islower(ch) ? toupper(ch) : tolower(ch);\n            if (vowels.find(ch1) != string::npos) {\n                ch1 = ch1 + 2;\n            }\n            result += ch1;\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}",
        "HumanEval/94": "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint skjkasdkd(const vector<int>& lst) {\n    vector<int> primes;\n    copy_if(lst.begin(), lst.end(), back_inserter(primes), isPrime);\n    if (primes.size() == 0) {\n        return 0;\n    }\n    string largest = to_string(*max_element(primes.begin(), primes.end()));\n    return accumulate(largest.begin(), largest.end(), 0, [](int acc, char d) { return acc + (d - '0'); });\n}",
        "HumanEval/95": "bool checkDictCase(const unordered_map<string, string>& d) {\n    if (d.empty()) {\n        return false;\n    }\n    return all_of(d.begin(), d.end(), [](const auto& p) { \n        return all_of(p.first.begin(), p.first.end(), [](char c) { return islower(c); });\n    }) || all_of(d.begin(), d.end(), [](const auto& p) { \n        return all_of(p.first.begin(), p.first.end(), [](char c) { return isupper(c); });\n    });\n}",
        "HumanEval/96": "vector<int> countUpTo(int n) {\n    vector<int> primes;\n    for (int num = 2; num < n; num++) {\n        if (all_of(primes.begin(), primes.end(), [num](int p) { return num % p != 0; })) {\n            primes.push_back(num);\n        }\n    }\n    return primes;\n}",
        "HumanEval/97": "int multiply(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}",
        "HumanEval/98": "int countUpper(const string& s) {\n    string vowels = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (i % 2 == 0 && vowels.find(s[i]) != string::npos) {\n            count++;\n        }\n    }\n    return count;\n}",
        "HumanEval/99": "int closestInteger(const string& value) {\n    double num = stod(value);\n    if (num >= 0) {\n        return static_cast<int>(num + 0.5);\n    } else {\n        return static_cast<int>(num - 0.5);\n    }\n}",
        "HumanEval/100": "vector<int> makeAPile(int n) {\n    vector<int> pile;\n    for (int i = 0; i < n; i++) {\n        pile.push_back(n + 2 * i);\n    }\n    return pile;\n}",
        "HumanEval/101": "vector<string> wordsString(const string& s) {\n    regex re(\"[, ]\");\n    vector<string> words(sregex_token_iterator(s.begin(), s.end(), re, -1), sregex_token_iterator());\n    erase_if(words, [](const string& word) {\n        return word.size() == 0;\n    });\n    return words;\n}",
        "HumanEval/102": "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return y != x ? y - 1 : -1;    \n}",
        "HumanEval/103": "optional<string> roundedAvg(int n, int m) {\n    if (n > m) {\n        return nullopt;\n    }\n    int r_avg = (n + m) / 2.0 + 0.5;\n    string result = bitset<32>(r_avg).to_string();\n    result.erase(0, min(result.find_first_not_of('0'), result.size()-1));\n    return result;\n}",
        "HumanEval/104": "bool allDigitsOdd(const string& s) {\n    return all_of(s.begin(), s.end(), [](char digit) {\n        return digit % 2 != 0;\n    });\n}\nvector<int> uniqueDigits(const vector<int>& x) {\n    vector<int> result;\n    copy_if(x.begin(), x.end(), back_inserter(result), [](int num) {\n        return allDigitsOdd(to_string(num));\n    });\n    sort(result.begin(), result.end());\n    return result;\n}",
        "HumanEval/105": "vector<string> byLength(const vector<int>& arr) {\n    vector<string> digit_names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    vector<int> sorted_arr;\n    copy_if(arr.begin(), arr.end(), back_inserter(sorted_arr), [](int x) {\n        return 1 <= x && x <= 9;\n    });\n    sort(sorted_arr.begin(), sorted_arr.end(), greater<int>());\n    vector<string> result;\n    transform(sorted_arr.begin(), sorted_arr.end(), back_inserter(result), [&digit_names](int x) {\n        return digit_names[x-1];\n    });\n    return result;\n}",
        "HumanEval/106": "vector<int> f(int n) {\n    vector<int> nums(n);\n    iota(nums.begin(), nums.end(), 1);\n    vector<int> result;\n    transform(nums.begin(), nums.end(), back_inserter(result), [&nums](int i) {\n        return i % 2 != 0 ? accumulate(nums.begin(), nums.begin() + i, 0) : accumulate(nums.begin(), nums.begin() + i, 1, multiplies<int>());\n    });\n    return result;\n}",
        "HumanEval/107": "bool isPalindrome(const string& txt) {\n    return txt == string(txt.rbegin(), txt.rend());\n}\nvector<int> evenOddPalindrome(int n) {\n    vector<int> cnt(2);\n    for (int i = 1; i <= n; ++i) {\n        if (isPalindrome(to_string(i))) {\n            cnt[i % 2]++;\n        }\n    }\n    return cnt;\n}",
        "HumanEval/108": "int digitsSum(int n) {\n    string n_str = to_string(n);\n    if (n >= 0) {\n        return accumulate(n_str.begin(), n_str.end(), 0, [](int acc, char d) {\n            return acc + stoi(string(1,d));\n        });\n    } else {\n        return stoi(n_str.substr(0, 2)) * 2 + digitsSum(abs(n));\n    }\n}\nint countNums(const vector<int>& arr) {\n    return count_if(arr.begin(), arr.end(), [](int n) {\n        return digitsSum(n) > 0;\n    });\n}",
        "HumanEval/109": "bool moveOneBall(const vector<int>& arr) {\n    if (arr.size() == 0) {\n        return true;\n    }\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (equal(arr.begin() + i, arr.end(), sorted_arr.begin(), sorted_arr.end() - i) &&\n            equal(arr.begin(), arr.begin() + i, sorted_arr.end() - i, sorted_arr.end())) {\n            return true;\n        }\n    }\n    return false;\n}",
        "HumanEval/110": "string canExchange(const vector<int>& lst1, const vector<int>& lst2) {\n    int odd_cnt = count_if(lst1.begin(), lst1.end(), [](int n) {\n        return n % 2 != 0;\n    });\n    int even_cnt = count_if(lst2.begin(), lst2.end(), [](int n) {\n        return n % 2 == 0;\n    });\n    return even_cnt >= odd_cnt ? \"YES\" : \"NO\";\n}",
        "HumanEval/111": "unordered_map<string, int> histogram(const string& test) {\n    unordered_map<string, int> freq;\n    istringstream buf(test);\n    vector<string> words(istream_iterator<string>(buf), {});\n    for (const string& w : words) {\n        freq[w]++;\n    }\n    unordered_map<string, int> result;\n    if (freq.size() > 0) {\n        int max_freq = max_element(freq.begin(), freq.end(), [](const auto& p1, const auto& p2) { return p1.second < p2.second; })->second;\n        for (const auto& [k, v] : freq) {\n            if (v == max_freq) {\n                result[k] = v;\n            }\n        }\n    }\n    return result;   \n}",
        "HumanEval/112": "bool isPalindrome(const string& s) {\n    return s == string(s.rbegin(), s.rend());\n}\nvector<string> reverseDelete(const string& s, const string& c) {\n    string s1 = s;\n    erase_if(s1, [&c](char ch) { return c.find(ch) != string::npos; });\n    return {s1, isPalindrome(s1) ? \"yes\" : \"no\"};\n}",
        "HumanEval/113": "vector<string> oddCount(const vector<string>& lst) {\n    vector<string> result;\n    for (const string& num : lst) {\n        int n = accumulate(num.begin(), num.end(), 0, [](int a, char b) { return a + (b % 2 == 1); });\n        string rs = \"the number of odd elements in the string i of the input.\";\n        replace(rs.begin(), rs.end(), 'i', to_string(n)[0]);\n        result.push_back(rs);\n    }\n    return result;\n}",
        "HumanEval/114": "int minSubArraySum(const vector<int>& nums) {\n    int min_sum = 0;\n    int cur_sum = 0;\n    for (int n : nums) {\n        cur_sum = min(cur_sum + n, 0);\n        min_sum = min(cur_sum, min_sum);\n    }\n    if (min_sum == 0) {\n        min_sum = *min_element(nums.begin(), nums.end());\n    }\n    return min_sum;\n}",
        "HumanEval/115": "int maxFill(const vector<vector<int>>& grid, int capacity) {\n    return accumulate(grid.begin(), grid.end(), 0, [&](int a, const vector<int>& b) {\n        return a + ceil(accumulate(b.begin(), b.end(), 0) / static_cast<double>(capacity));\n    });\n}",
        "HumanEval/116": "int countOnes(int num) {\n    return bitset<32>(num).count();\n}\nvector<int> sortArray(const vector<int>& arr) {\n    vector<int> result(arr);\n    sort(result.begin(), result.end(), [](int a, int b) {\n        return countOnes(a) == countOnes(b) ? a < b : countOnes(a) < countOnes(b);\n    });\n    return result;\n}",
        "HumanEval/117": "vector<string> selectWords(const string& s, int n) {\n    string consonants = \"bcdfghjklmnpqrstvwxyz\";\n    istringstream buf(s);\n    vector<string> words(istream_iterator<string>(buf), {});\n    vector<string> result;\n    copy_if(words.begin(), words.end(), back_inserter(result), [&](const string& w) {\n        return count_if(w.begin(), w.end(), [&](char c) {\n            return consonants.find(tolower(c)) != string::npos;\n        }) == n;\n    });\n    return result;\n}",
        "HumanEval/118": "string getClosestVowel(const string& word) {\n    string vowels = \"aeiouAEIOU\";\n    for (int i = word.size() - 2; i > 0; --i) {\n        if (vowels.find(word[i]) != string::npos && vowels.find(word[i - 1]) == string::npos && vowels.find(word[i + 1]) == string::npos) {\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}",
        "HumanEval/119": "bool check(const string& s) {\n    int depth = 0;\n    for (char ch : s) {\n        if (ch == '(') {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\nstring matchParens(const vector<string>& lst) {\n    string s1 = lst[0] + lst[1];\n    string s2 = lst[1] + lst[0];\n    return check(s1) || check(s2) ? \"Yes\" : \"No\";\n}",
        "HumanEval/120": "vector<int> maximum(const vector<int>& arr, int k) {\n    if (k == 0) {\n        return {};\n    }\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end());\n    vector<int> ans(sorted_arr.end() - k, sorted_arr.end());\n    return ans;\n}",
        "HumanEval/121": "int solution(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}",
        "HumanEval/122": "int addElements(const vector<int>& arr, int k) {\n    return accumulate(arr.begin(), arr.begin() + k, 0, [&](int a, int b) {\n        return a + (to_string(b).size() <= 2 ? b : 0);\n    });\n}",
        "HumanEval/123": "vector<int> getOddCollatz(int n) {\n    vector<int> collatz = {1};\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.push_back(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    sort(collatz.begin(), collatz.end());\n    return collatz;\n}",
        "HumanEval/124": "bool validDate(const string& date) {\n    if (date.size() != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n    int m = stoi(date.substr(0, 2));\n    int d = stoi(date.substr(3, 2));\n    if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 ||\n        m == 12) {\n        return d >= 1 && d <= 31;\n    }\n    if (m == 4 || m == 6 || m == 9 || m == 11) {\n        return d >= 1 && d <= 30;\n    }\n    if (m == 2) {\n        return d >= 1 && d <= 29;\n    }\n    return false;\n}",
        "HumanEval/125": "vector<string> splitWords(const string& txt) {\n    istringstream iss(txt);\n    if (txt.find(\" \") != string::npos) {\n        return vector<string>(istream_iterator<string>(iss), {});\n    }\n    else if (txt.find(\",\") != string::npos) {\n        vector<string> result;\n        for (auto [iss, token] = pair{istringstream(txt), string()}; getline(iss, token, ','); result.push_back(token));\n        return result;\n    }\n    else {\n        return {to_string(count_if(txt.begin(), txt.end(), [&](char c) {\n            return islower(c) && c % 2 == 0;\n        }))};\n    }\n}",
        "HumanEval/126": "bool isSorted(const vector<int>& lst) {\n    if (!is_sorted(lst.begin(), lst.end())) {\n        return false;\n    }\n    unordered_map<int, int> freq;\n    for (int i : lst) {\n        freq[i]++;\n    }\n    return lst.size() == 0 || max_element(freq.begin(), freq.end(), [](const auto& a, const auto& b) { return a.second < b.second; })->second <= 2;\n}",
        "HumanEval/127": "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nstring intersection(const vector<int>& interval1, const vector<int>& interval2) {\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n}",
        "HumanEval/128": "optional<int> prodSigns(const vector<int>& arr) {\n    if (arr.empty()) {\n        return nullopt;\n    }\n    if (find(arr.begin(), arr.end(), 0) != arr.end()) {\n        return 0;\n    }\n    int sign = count_if(arr.begin(), arr.end(), [](int n) { return n < 0; }) % 2 == 1 ? -1 : 1;\n    return sign * accumulate(arr.begin(), arr.end(), 0, [](int a, int b) { return a + abs(b); });\n}",
        "HumanEval/129": "vector<int> minPath(const vector<vector<int>>& grid, int k) {\n    int n = grid.size();\n    int min_val = n * n + 1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                vector<int> temp;\n                if (i != 0) {\n                    temp.push_back(grid[i - 1][j]);\n                }\n                if (j != 0) {\n                    temp.push_back(grid[i][j - 1]);\n                }\n                if (i != n - 1) {\n                    temp.push_back(grid[i + 1][j]);\n                }\n                if (j != n - 1) {\n                    temp.push_back(grid[i][j + 1]);\n                }\n                min_val = *min_element(temp.begin(), temp.end());\n            }\n        }\n    }\n    vector<int> result;\n    for (int i = 0; i < k; i++) {\n        result.push_back(i % 2 == 0 ? 1 : min_val);\n    }\n    return result;\n}",
        "HumanEval/130": "vector<int> tri(int n) {\n    if (n == 0) {\n        return {1};\n    }\n    vector<int> seq = {1, 3};\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq.push_back(i / 2 + 1);\n        } else {\n            seq.push_back(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}",
        "HumanEval/131": "int digits(int n) {\n    vector<int> odds;\n    for (char c : to_string(n)) {\n        int d = c - '0';\n        if (d % 2 == 1) {\n            odds.push_back(d);\n        }\n    }\n    return odds.empty() ? 0 : accumulate(odds.begin(), odds.end(), 1, multiplies<int>());\n}",
        "HumanEval/132": "bool isNested(const string& s) {\n    vector<int> open_idx;\n    vector<int> close_idx;\n    for (int i = 0; i < s.length(); i++) {\n        switch (s[i]) {\n            case '[':\n                open_idx.push_back(i); break;\n            case ']':\n                close_idx.push_back(i); break;\n        }\n    }\n    reverse(close_idx.begin(), close_idx.end());\n    int cnt = 0;\n    int i = 0;\n    int l = close_idx.size();\n    for (int idx : open_idx) {\n        if (i < l && idx < close_idx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}",
        "HumanEval/133": "int sumSquares(const vector<double>& lst) {\n    return accumulate(lst.begin(), lst.end(), 0, [](int acc, double n) { return acc + pow(ceil(n), 2); });\n}",
        "HumanEval/134": "bool checkIfLastCharIsALetter(const string& txt) {\n    if (txt.empty()) {\n        return false;\n    }\n    string last = txt.substr(txt.find_last_of(\" \") + 1);\n    return last.length() == 1 && isalpha(last[0]);\n}",
        "HumanEval/135": "int canArrange(const vector<int>& arr) {\n    if (arr.size() <= 1) {\n        return -1;\n    }\n    vector<int> idx;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            idx.push_back(i);\n        }\n    }\n    return idx.empty() ? -1 : *max_element(idx.begin(), idx.end());\n}",
        "HumanEval/136": "vector<optional<int>> largestSmallestIntegers(const vector<int>& lst) {\n    vector<int> neg;\n    vector<int> pos;\n    copy_if(lst.begin(), lst.end(), back_inserter(neg), [](int i) { return i < 0; });\n    copy_if(lst.begin(), lst.end(), back_inserter(pos), [](int i) { return i > 0; });\n    optional<int> max_neg = neg.size() > 0 ? make_optional(*max_element(neg.begin(), neg.end())) : nullopt;\n    optional<int> min_pos = pos.size() > 0 ? make_optional(*min_element(pos.begin(), pos.end())) : nullopt;\n    return {max_neg, min_pos};\n}",
        "HumanEval/137": "double anyToReal(any o) {\n    if (o.type() == typeid(string)) {\n        string o_str = any_cast<string>(o);\n        replace(o_str.begin(), o_str.end(), ',', '.');\n        return stod(o_str);\n    }\n    else if (o.type() == typeid(int)) {\n        return static_cast<double>(any_cast<int>(o));\n    }\n    else if (o.type() == typeid(double)) {\n        return any_cast<double>(o);\n    }\n    throw runtime_error(\"Type Error\");  \n}\noptional<double> compareOne(any a, any b) {\n    double a1 = anyToReal(a);\n    double b1 = anyToReal(b);\n    if (a1 == b1) {\n        return nullopt;\n    }\n    else if (a1 > b1) {\n        return a1;\n    }\n    else {\n        return b1;\n    }\n}",
        "HumanEval/138": "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}",
        "HumanEval/139": "int specialFactorial(int n) {\n    int fact = 1;\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}",
        "HumanEval/140": "string fixSpaces(const string& txt) {\n    string result = txt;\n    result = regex_replace(result, regex(\"\\\\s{3,}\"), \"-\");\n    replace(result.begin(), result.end(), ' ', '_');\n    return result;\n}",
        "HumanEval/141": "string fileNameCheck(const string& file_name) {\n    vector<string> suf = {\"txt\", \"exe\", \"dll\"};\n    vector<string> lst;\n    for (auto [iss, token] = pair{istringstream(file_name), string()}; getline(iss, token, '.'); lst.push_back(token));\n    if (lst.size() != 2 || !count(suf.begin(), suf.end(), lst[1]) || lst[0].size() == 0 || !isalpha(lst[0][0]) || count_if(lst[0].begin(), lst[0].end(), [](char c) { return isdigit(c); }) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}",
        "HumanEval/142": "int sumSquares(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            result += pow(lst[i], 2);\n        } else if (i % 4 == 0) {\n            result += pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}",
        "HumanEval/143": "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nstring wordsInSentence(const string& sentence) {\n    istringstream ss(sentence);\n    vector<string> words(istream_iterator<string>(ss), {});\n    erase_if(words, [](const string& w) { return !isPrime(w.length()); });\n    return accumulate(words.begin(), words.end(), string(), [](string&& a, const string& b) { return move(a += a.empty() ? b : \" \" + b); });\n}",
        "HumanEval/144": "bool simplify(const string& x, const string& n) {\n    vector<string> xs;\n    vector<string> ns;\n    for (auto [iss, token] = pair{istringstream(x), string()}; getline(iss, token, '/'); xs.push_back(token));\n    for (auto [iss, token] = pair{istringstream(n), string()}; getline(iss, token, '/'); ns.push_back(token));\n    int num = stoi(xs[0]) * stoi(ns[0]);\n    int den = stoi(xs[1]) * stoi(ns[1]);\n    return num % den == 0;\n}",
        "HumanEval/145": "int digitsSum(int n) {\n    string n_str = to_string(n);\n    if (n >= 0) {\n        return accumulate(n_str.begin(), n_str.end(), 0, [](int acc, char d) {\n            return acc + stoi(string(1,d));\n        });\n    } else {\n        return stoi(n_str.substr(0, 2)) * 2 + digitsSum(abs(n));\n    }\n}\nvector<int> orderByPoints(const vector<int>& nums) {\n    vector<int> result(nums);\n    stable_sort(result.begin(), result.end(), [](int a, int b) {\n        return digitsSum(a) < digitsSum(b);\n    });\n    return result;\n}",
        "HumanEval/146": "int specialFilter(const vector<int>& nums) {\n    string odds = \"13579\";\n    return count_if(nums.begin(), nums.end(), [&](int n) { return n > 10 && n % 2 == 1 && odds.find(to_string(n)[0]) != string::npos; });\n}",
        "HumanEval/147": "int getMaxTriples(int n) {\n    int c[3] = {0, 0, 0};\n    for (int i = 1; i <= n; i++) {\n        int a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}",
        "HumanEval/148": "vector<string> bf(const string& planet1, const string& planet2) {\n    vector<string> names = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    if (find(names.begin(), names.end(), planet1) == names.end() || find(names.begin(), names.end(), planet2) == names.end()) {\n        return {};\n    }\n    int l = find(names.begin(), names.end(), planet1) - names.begin();\n    int r = find(names.begin(), names.end(), planet2) - names.begin();\n    if (l > r) {\n        tie(l, r) = tuple(r, l);\n    }\n    if (l == r) {\n        return {};\n    }\n    return vector<string>(names.begin() + l + 1, names.begin() + r);  \n}",
        "HumanEval/149": "vector<string> sortedListSum(const vector<string>& lst) {\n    vector<string> result;\n    copy_if(lst.begin(), lst.end(), back_inserter(result), [](const string& s) { return s.length() % 2 == 0; });\n    sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    return result;\n}",
        "HumanEval/150": "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}",
        "HumanEval/151": "int doubleTheDifference(const vector<double>& lst) {\n    return accumulate(lst.begin(), lst.end(), 0, [](double acc, double n) { return acc + (n >= 0 && fmod(n, 2) == 1 ? static_cast<int>(n * n) : 0); });\n}",
        "HumanEval/152": "vector<int> compare(const vector<int>& game, const vector<int>& guess) {\n    vector<int> result;\n    transform(game.begin(), game.end(), guess.begin(), back_inserter(result), [](int x, int y) { return abs(x - y); });\n    return result;\n}",
        "HumanEval/153": "string strongestExtension(const string& class_name, const vector<string>& extensions) {\n    int max_s = numeric_limits<int>::min();\n    string max_ext;\n    for (const string& ext : extensions) {\n        int upper = count_if(ext.begin(), ext.end(), [](char c) { return isupper(c); });\n        int lower = count_if(ext.begin(), ext.end(), [](char c) { return islower(c); });\n        int s = upper - lower;\n        if (s > max_s) {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return format(\"{0}.{1}\", class_name, max_ext);\n}",
        "HumanEval/154": "bool cycpatternCheck(const string& a, const string& b) {\n    if (a.length() < b.length()) {\n        return false;\n    }\n    for (int i = 0; i < b.length(); i++) {\n        if (a.find(b.substr(i) + b.substr(0, i)) != string::npos) {\n            return true;\n        }\n    }\n    return false;\n}",
        "HumanEval/155": "vector<int> evenOddCount(int num) {\n    string ds = to_string(abs(num));\n    int even = count_if(ds.begin(), ds.end(), [](char d) { return d % 2 == 0; });\n    return {even, static_cast<int>(ds.size()) - even};\n}",
        "HumanEval/156": "string intToMiniRoman(int num) {\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 ,5, 4, 1};\n    vector<string> numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string res = \"\";\n    for (int i = 0; i < values.size(); i++) {\n        while (num >= values[i]) {\n            res += numerals[i];\n            num -= values[i];\n        }\n    }\n    return res;\n}",
        "HumanEval/157": "bool rightAngleTriangle(int a, int b, int c) {\n    vector<int> s = {a, b, c};\n    sort(s.begin(), s.end());\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}",
        "HumanEval/158": "string findMax(const vector<string>& words) {\n    int max_cnt = 0;\n    string max_w = \"\";\n    for (const string& w : words) {\n        int cnt = unordered_set<char>(w.begin(), w.end()).size();\n        if (cnt > max_cnt) {\n            max_cnt = cnt;\n            max_w = w;\n        } else if (cnt == max_cnt) {\n            max_w = min(max_w, w);\n        }\n    }\n    return max_w;\n}",
        "HumanEval/159": "vector<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return {num + need, remaining - need};\n    } else {\n        return {num + remaining, 0};\n    }\n}",
        "HumanEval/160": "int doAlgebra(const vector<string>& operators, const vector<int>& operands) {\n    vector<string> ops = operators;\n    vector<int> nums = operands;\n    int i = ops.size() - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]);\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n        }\n        i--;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i--;\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] / nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i--;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i--;\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i--;\n        }\n        i++;\n    }\n    return nums[0];\n}",
        "HumanEval/161": "string solve(const string& s) {\n    if (!any_of(s.begin(), s.end(), [](char ch) { return isalpha(ch); })) {\n        return string(s.rbegin(), s.rend());\n    }\n    string result;\n    for (char ch : s) {\n        if (!isalpha(ch)) {\n            result.push_back(ch);\n        } else if (isupper(ch)) {\n            result.push_back(tolower(ch));\n        } else if (islower(ch)) {\n            result.push_back(toupper(ch));\n        }\n    }\n    return result;\n}",
        "HumanEval/162": "optional<string> stringToMd5(const string& txt) {\n    if (txt.empty()) {\n        return nullopt;\n    }\n    MD5_CTX md5_context;\n    MD5_Init(&md5_context);\n    MD5_Update(&md5_context, txt.c_str(), txt.length());\n    unsigned char hash_bytes[MD5_DIGEST_LENGTH];\n    MD5_Final(hash_bytes, &md5_context);\n    string md5_encoded;\n    for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n        md5_encoded += format(\"{:02x}\", static_cast<int>(hash_bytes[i]));\n    }\n    return md5_encoded;\n}",
        "HumanEval/163": "vector<int> generateIntegers(int a, int b) {\n    int lower = max(2, min(a, b));\n    int upper = min(8, max(a, b));\n    vector<int> numbers;\n    for (int n = lower; n <= upper; n++) {\n        if (n % 2 == 0) {\n            numbers.push_back(n);\n        }\n    }\n    return numbers;\n}"
    },
    "csharp": {
        "HumanEval/0": "class Global {\n    public static bool HasCloseElements(IList<double> numbers, double threshold) {\n        for (int i = 0; i < numbers.Count; i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n                if (Math.Abs(numbers[i] - numbers[j]) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}",
        "HumanEval/1": "class Global {\n    public static IList<string> SeparateParenGroups(string parenString) {\n        List<string> groups = new List<string>();\n        List<char> stk = new List<char>();\n        string currentGroup = \"\";\n        string parens = parenString.Replace(\" \", \"\");\n        foreach (char ch in parens) {\n            if (ch == '(') {\n                stk.Add(ch);\n                currentGroup += ch;\n            }\n            else if (ch == ')') {\n                stk.RemoveAt(stk.Count - 1);\n                currentGroup += ch;\n                if (stk.Count == 0) {\n                    groups.Add(currentGroup);\n                    currentGroup = \"\";\n                }\n            }\n        }\n        return groups;\n    }\n}",
        "HumanEval/2": "class Global {\n    public static double TruncateNumber(double num) {\n        return num - Math.Floor(num);\n    }\n}",
        "HumanEval/3": "class Global {\n    public static bool BelowZero(IList<int> operations) {\n        int balance = 0;\n        foreach (int op in operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
        "HumanEval/4": "class Global {\n    public static double MeanAbsoluteDeviation(IList<double> numbers) {\n        double mean = numbers.Sum() / numbers.Count;\n        double deviation = numbers.Select(x => Math.Abs(x - mean)).Sum();\n        return deviation / numbers.Count;\n    }\n}",
        "HumanEval/5": "class Global {\n    public static IList<int> Intersperse(IList<int> numbers, int delimiter) {\n        List<int> result = new List<int>();\n        for (int i = 0; i < numbers.Count; i++) {\n            if (i != 0) {\n                result.Add(delimiter);\n            }\n            result.Add(numbers[i]);\n        }\n        return result;\n    }\n}",
        "HumanEval/6": "class Global {\n    public static IList<int> ParseNestedParens(string parenString) {\n        List<int> result = new List<int>();\n        List<string> parenGroups = parenString.Split(\" \").Where(s => s.Length > 0).ToList();\n        foreach (string group in parenGroups) {\n            int maxDepth = 0;\n            int depth = 0;\n            foreach (char ch in group) {\n                if (ch == '(') {\n                    depth += 1;\n                    maxDepth = Math.Max(maxDepth, depth);\n                } else if (ch == ')') {\n                    depth -= 1;\n                }\n            }\n            result.Add(maxDepth);\n        }\n        return result;\n    }\n}",
        "HumanEval/7": "class Global {\n    public static IList<string> FilterBySubstring(IList<string> strs, string substring) {\n        return strs.Where(s => s.Contains(substring)).ToList();\n    }\n}",
        "HumanEval/8": "class Global {\n    public static IList<int> SumProduct(IList<int> numbers) {\n        int nSum = numbers.Sum();\n        int nProduct = numbers.Aggregate(1, (a, b) => a * b);\n        return new List<int> { nSum, nProduct };\n    }\n}",
        "HumanEval/9": "class Global {\n    public static IList<int> RollingMax(IList<int> numbers) {\n        int maxSoFar = int.MinValue;\n        List<int> result = new List<int>();\n        foreach (int num in numbers) {\n            maxSoFar = Math.Max(maxSoFar, num);\n            result.Add(maxSoFar);\n        }\n        return result;\n    }\n}",
        "HumanEval/10": "class Global {\n    public static bool IsPalindrome(string s) {\n        return s == new string(s.Reverse().ToArray());\n    }\n    public static string MakePalindrome(string s) {\n        if (IsPalindrome(s)) {\n            return s;\n        }\n        for (int i = 0; i < s.Length; i++) {\n            if (IsPalindrome(s.Substring(i))) {\n                return s + new string(s.Substring(0, i).Reverse().ToArray());\n            }\n        }\n        return \"\";\n    }\n}",
        "HumanEval/11": "class Global {\n    public static string StringXor(string a, string b) {\n        return new string(a.Zip(b, (x, y) => x == y ? '0' : '1').ToArray());\n    }\n}",
        "HumanEval/12": "class Global {\n    public static string? Longest(IList<string> strs) {\n        if (strs.Count == 0) {\n            return null;\n        }\n        string longestS = strs[0];\n        foreach (string s in strs) {\n            if (s.Length > longestS.Length) {\n                longestS = s;\n            }\n        }\n        return longestS;\n    }\n}",
        "HumanEval/13": "class Global {\n    public static int GreatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        else {\n            return GreatestCommonDivisor(b, a % b);\n        }\n    }\n}",
        "HumanEval/14": "class Global {\n    public static IList<string> AllPrefixes(string s) {\n        List<string> prefixes = new List<string>();\n        for (int i = 0; i < s.Length; i++) {\n            prefixes.Add(s.Substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}",
        "HumanEval/15": "class Global {\n    public static string StringSequence(int n) {\n        return string.Join(\" \", Enumerable.Range(0, n + 1).Select(i => i.ToString()));\n    }\n}",
        "HumanEval/16": "class Global {\n    public static int CountDistinctCharacters(string s) {\n        return s.ToLower().Distinct().Count();\n    }\n}",
        "HumanEval/17": "class Global {\n    public static IList<int> ParseMusic(string musicString) {\n        Dictionary<string, int> durations = new Dictionary<string, int> {{\"o\", 4}, {\"o|\", 2}, {\".|\", 1}};\n        List<string> notes = musicString.Split(\" \").Where(s => s.Length > 0).ToList();\n        return notes.Select(note => durations[note]).ToList();\n    }\n}",
        "HumanEval/18": "class Global {\n    public static int HowManyTimes(string s, string substring) {\n        int times = 0;\n        for (int i = 0; i <= s.Length - substring.Length; i++) {\n            if (s.Substring(i, substring.Length) == substring) {\n                times += 1;\n            }\n        }\n        return times;\n    }\n}",
        "HumanEval/19": "class Global {\n    public static string SortNumbers(string numbers) {\n        Dictionary<string, int> numDict = new Dictionary<string, int>() {\n            {\"zero\", 0},\n            {\"one\", 1},\n            {\"two\", 2},\n            {\"three\", 3},\n            {\"four\", 4},\n            {\"five\", 5},\n            {\"six\", 6},\n            {\"seven\", 7},\n            {\"eight\", 8},\n            {\"nine\", 9}\n        };\n        List<string> numList = numbers.Split(\" \").Where(x => numDict.ContainsKey(x)).ToList();\n        numList.Sort((x, y) => numDict[x] - numDict[y]);\n        return string.Join(\" \", numList);\n    }\n}",
        "HumanEval/20": "class Global {\n    public static IList<double> FindClosestElements(IList<double> numbers) {\n        List<double> sortedNumbers = numbers.OrderBy(x => x).ToList();\n        double minDiff = double.MaxValue;\n        List<double> closestPair = new List<double>();\n        for (int i = 1; i < sortedNumbers.Count; i++) {\n            double diff = sortedNumbers[i] - sortedNumbers[i - 1];\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = new List<double>() {sortedNumbers[i - 1], sortedNumbers[i]};\n            }\n        }\n        return closestPair;\n    }\n}",
        "HumanEval/21": "class Global {\n    public static IList<double> RescaleToUnit(IList<double> numbers) {  \n        double minNum = numbers.Min();\n        double maxNum = numbers.Max();\n        if (minNum == maxNum) {\n            return new List<double>(new double[numbers.Count]);\n        } else {\n            return numbers.Select(num => (num - minNum) / (maxNum - minNum)).ToList();\n        }   \n    }\n}",
        "HumanEval/22": "class Global {\n    public static IList<int> FilterIntegers(IList<object> values) {\n        return values.OfType<int>().ToList();\n    }\n}",
        "HumanEval/23": "class Global {\n    public static int StrLength(string s) {\n        return s.Length;\n    }\n}",
        "HumanEval/24": "class Global {\n    public static int LargestDivisor(int n) {\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}",
        "HumanEval/25": "class Global {\n    public static IList<int> Factorize(int n) {\n        List<int> factors = new List<int>();\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.Add(divisor);\n                n /= divisor;\n            }\n            else {\n                divisor += 1;\n            }\n        }\n        return factors;\n    }\n}",
        "HumanEval/26": "class Global {\n    public static IList<int> RemoveDuplicates(IList<int> numbers) {\n        Dictionary<int, int> counts = new Dictionary<int, int>();\n        foreach (int num in numbers) {\n            counts[num] = counts.GetValueOrDefault(num, 0) + 1;\n        }\n        List<int> res = numbers.Where(num => counts[num] == 1).ToList();\n        return res;\n    }\n}",
        "HumanEval/27": "class Global {\n    public static string FlipCase(string s) {\n        StringBuilder flipped = new StringBuilder();\n        foreach (char ch in s) {\n            if (!char.IsLetter(ch)) {\n                flipped.Append(ch);\n            } else if (char.IsLower(ch)) {\n                flipped.Append(char.ToUpper(ch));\n            } else if (char.IsUpper(ch)) {\n                flipped.Append(char.ToLower(ch));\n            }\n        }\n        return flipped.ToString();\n    }\n}",
        "HumanEval/28": "class Global {\n    public static string Concatenate(IList<string> strs) {\n        return string.Join(\"\", strs);\n    }\n}",
        "HumanEval/29": "class Global {\n    public static IList<string> FilterByPrefix(IList<string> strs, string prefixStr) {\n        return strs.Where(s => s.StartsWith(prefixStr)).ToList();\n    }\n}",
        "HumanEval/30": "class Global {\n    public static IList<int> GetPositive(IList<int> l) {\n        return l.Where(num => num > 0).ToList();\n    }\n}",
        "HumanEval/31": "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
        "HumanEval/32": "class Global {\n    public static double Poly(IList<int> xs, double x) {\n        double res = 0;\n        for (int i = 0; i < xs.Count; i++) {\n            res += xs[i] * Math.Pow(x, i);\n        }\n        return res;\n    }\n    public static double FindZero(IList<int> xs) {\n        double x1 = 1.0, x2 = -1.0;\n        while (Poly(xs, x1) * Poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.Abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (Poly(xs, mid) == 0) {\n                return mid;\n            } else if (Poly(xs, mid) * Poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}",
        "HumanEval/33": "class Global {\n    public static IList<int> SortThird(IList<int> l) {\n        var sortedThird = l.Where((x, i) => i % 3 == 0).OrderBy(x => x).ToList();\n        return l.Select((x, i) => i % 3 == 0 ? sortedThird[i / 3] : x).ToList();\n    }\n}",
        "HumanEval/34": "class Global {\n    public static IList<int> ListUnique(IList<int> l) {\n        return l.Distinct().OrderBy(x => x).ToList();\n    }\n}",
        "HumanEval/35": "class Global {\n    public static int MaxElement(IList<int> l) {\n        if (l.Count == 0) {\n            return 0;\n        }\n        return l.Max();\n    }\n}",
        "HumanEval/36": "class Global {\n    public static int FizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += i.ToString().Count(x => x == '7');\n            }\n        }\n        return cnt;\n    }\n}",
        "HumanEval/37": "class Global {\n    public static IList<int> SortEven(IList<int> l) {\n        var sortedEven = l.Where((x, i) => i % 2 == 0).OrderBy(x => x).ToList();\n        return l.Select((x, i) => i % 2 == 0 ? sortedEven[i / 2] : x).ToList();\n    }\n}",
        "HumanEval/38": "class Global {\n    public static string EncodeCyclic(string s) {\n        var result = new StringBuilder();\n        for (int i = 0; i < s.Length; i += 3) {\n            if (i + 3 > s.Length) {\n                result.Append(s.Substring(i));\n            } else {\n                result.Append(s.Substring(i + 1, 2));\n                result.Append(s[i]);\n            }\n        }\n        return result.ToString();\n    }\n    public static string DecodeCyclic(string s) {\n        return EncodeCyclic(EncodeCyclic(s));\n    }\n}",
        "HumanEval/39": "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static int PrimeFib(int n) {\n        int[] f = new int[] {0, 1};\n        int cnt = 0;\n        while (cnt < n) {\n            f = new int[] {f[1], f[0] + f[1]};\n            if (IsPrime(f[1])) {\n                cnt++;\n            }\n        }\n        return f[1];\n    }\n}",
        "HumanEval/40": "class Global {\n    public static bool TriplesSumToZero(IList<int> l) {\n        for (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}",
        "HumanEval/41": "class Global {\n    public static int CarRaceCollision(int n) {\n        return (int)Math.Pow(n, 2);\n    }\n}",
        "HumanEval/42": "class Global {\n    public static IList<int> IncrList(IList<int> l) {\n        return l.Select(i => i + 1).ToList();\n    }\n}",
        "HumanEval/43": "class Global {\n    public static bool PairsSumToZero(IList<int> l) {\n        HashSet<int> seen = new HashSet<int>();\n        foreach (int num in l) {\n            if (seen.Contains(-num)) {\n                return true;\n            }\n            seen.Add(num);\n        }\n        return false;\n    }\n}",
        "HumanEval/44": "class Global {\n    public static string ChangeBase(int x, int bas) {\n        if (x == 0) {\n            return \"0\";\n        }\n        List<string> digits = new List<string>();\n        while (x > 0) {\n            digits.Add((x % bas).ToString());\n            x /= bas;\n        }\n        digits.Reverse();\n        return string.Join(\"\", digits);\n    }\n}",
        "HumanEval/45": "class Global {\n    public static double TriangleArea(int a, int h) {\n        return (double)(a * h) / 2;\n    }\n}",
        "HumanEval/46": "class Global {\n    public static int Fib4(int n) {\n        int[] fib = new int[] {0, 0, 2, 0};\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = fib.Sum();\n        }\n        return fib[n % 4];\n    }\n}",
        "HumanEval/47": "class Global {\n    public static double Median(IList<double> l) {\n        var sl = l.OrderBy(i => i).ToList();\n        if (l.Count % 2 != 0) {\n            return sl[l.Count / 2];\n        } else {\n            return (sl[l.Count / 2] + sl[l.Count / 2 - 1]) / 2;\n        }\n    }\n}",
        "HumanEval/48": "class Global {\n    public static bool IsPalindrome(string txt) {\n        return txt == new string(txt.Reverse().ToArray());\n    }\n}",
        "HumanEval/49": "class Global {\n    public static int Modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;        \n    }\n}",
        "HumanEval/50": "class Global {\n    public static string EncodeShift(string s) {\n        var result = s.Select(ch => (char)(((ch - 97 + 5) % 26) + 97));\n        return string.Join(\"\", result);\n    }\n    public static string DecodeShift(string s) {\n        var result = s.Select(ch => (char)(((ch - 97 + 21) % 26) + 97));\n        return string.Join(\"\", result);\n    }\n}",
        "HumanEval/51": "class Global {\n    public static string RemoveVowels(string txt) {\n        string vowels = \"aeiouAEIOU\";\n        return String.Join(\"\", txt.Where(c => !vowels.Contains(c)));\n    }\n}",
        "HumanEval/52": "class Global {\n    public static bool BelowThreshold(IList<int> l, int t) {\n        return l.All(x => x < t);\n    }\n}",
        "HumanEval/53": "class Global {\n    public static int Add(int x, int y) {\n        return x + y;\n    }\n}",
        "HumanEval/54": "class Global {\n    public static bool SameChars(string s0, string s1) {\n        return (new HashSet<char>(s0)).SetEquals(new HashSet<char>(s1));\n    }\n}",
        "HumanEval/55": "class Global {\n    public static int Fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        else {\n            return Fib(n - 1) + Fib(n - 2);\n        }\n    }\n}",
        "HumanEval/56": "class Global {\n    public static bool CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach (char b in brackets) {\n            if (b == '<') {\n                depth += 1;\n            } else if (b == '>') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}",
        "HumanEval/57": "class Global {\n    public static bool Monotonic(IList<int> l) {\n        var diff = l.Zip(l.Skip(1), (x, y) => y - x);\n        return diff.All(x => x <= 0) || diff.All(x => x >= 0);\n    }\n}",
        "HumanEval/58": "class Global {\n    public static IList<int> Common(IList<int> l1, IList<int> l2) {\n        return l1.Intersect(l2).Distinct().OrderBy(x => x).ToList();\n    }\n}",
        "HumanEval/59": "class Global {\n    public static int LargestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i != 0) {\n                i += 1;\n            }\n            else {\n                n /= i;\n            }\n        }\n        return n;\n    }\n}",
        "HumanEval/60": "class Global {\n    public static int SumToN(int n) {\n        return Enumerable.Range(0, n + 1).Sum();\n    }\n}",
        "HumanEval/61": "class Global {\n    public static bool CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach (char b in brackets) {\n            if (b == '(') {\n                depth += 1;\n            } else if (b == ')') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}",
        "HumanEval/62": "class Global {\n    public static IList<int> Derivative(IList<int> xs) {\n        return xs.Select((x, i) => x * i).Skip(1).ToList();\n    }\n}",
        "HumanEval/63": "class Global {\n    public static int Fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n        int a = 0, b = 0, c = 1;\n        while (n > 2) {\n            (a, b, c) = (b, c, a + b + c);\n            n -= 1;\n        }\n        return c;\n    }\n}",
        "HumanEval/64": "class Global {\n    public static int VowelsCount(string s) {\n        string vowels = \"aeiou\";\n        int cnt = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (vowels.Contains(char.ToLower(s[i])) || (i == s.Length - 1 && char.ToLower(s[i]) == 'y')) {\n                cnt += 1;\n            }\n        }\n        return cnt;\n    }\n}",
        "HumanEval/65": "class Global {\n    public static string CircularShift(int x, int shift) {\n        string xStr = x.ToString();\n        if (shift > xStr.Length) {\n            return new string(xStr.Reverse().ToArray());\n        } else {\n            return xStr.Substring(xStr.Length - shift) + xStr.Substring(0, xStr.Length - shift);\n        }\n    }\n}",
        "HumanEval/66": "class Global {\n    public static int DigitSum(string s) {\n        return s.Where(c => char.IsUpper(c)).Sum(c => (int)c);\n    }\n}",
        "HumanEval/67": "class Global {\n    public static int FruitDistribution(string s, int n) {\n        string[] words = s.Split(\" \");\n        int apples = int.Parse(words[words.ToList().IndexOf(\"apples\") - 1]);\n        int oranges = int.Parse(words[words.ToList().IndexOf(\"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n}",
        "HumanEval/68": "class Global {\n    public static IList<int> Pluck(IList<int> arr) {\n        var evens = arr.Where(n => n % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return new List<int>();\n        }\n        var minEven = evens.Min();\n        return new List<int> { minEven, arr.IndexOf(minEven) };\n    }\n}",
        "HumanEval/69": "class Global {\n    public static int Search(IList<int> lst) {\n        Dictionary<int, int> freqs = new Dictionary<int, int>();\n        foreach (int n in lst) {\n            freqs[n] = freqs.GetValueOrDefault(n, 0) + 1;\n        }\n        List<int> goodVals = freqs.Where(p => p.Value >= p.Key).Select(p => p.Key).ToList();\n        return goodVals.DefaultIfEmpty(-1).Max();\n    }\n}",
        "HumanEval/70": "class Global {\n    public static IList<int> StrangeSortList(IList<int> lst) {\n        List<int> sl = lst.OrderBy(x => x).ToList();\n        List<int> result = new List<int>();\n        int left = 0, right = sl.Count - 1;\n        while (left <= right) {\n            result.Add(sl[left]);\n            left += 1;\n            if (left <= right) {\n                result.Add(sl[right]);\n                right -= 1;\n            }\n        }\n        return result;\n    }\n}",
        "HumanEval/71": "class Global {\n    public static double TriangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            return Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}",
        "HumanEval/72": "class Global {\n    public static bool WillItFly(IList<int> q, int w) {\n        if (q.Count == 0) {\n            return false;\n        }\n        bool isPalin = Enumerable.Range(0, q.Count).All(i => q[i] == q[q.Count - i - 1]);\n        int total = q.Sum();\n        return isPalin && total <= w;\n    }\n}",
        "HumanEval/73": "class Global {\n    public static int SmallestChange(IList<int> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.Count / 2; i++) {\n            if (arr[i] != arr[arr.Count - i - 1]) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}",
        "HumanEval/74": "class Global {\n    public static IList<string> TotalMatch(IList<string> lst1, IList<string> lst2) {\n        int cnt1 = lst1.Sum(x => x.Length);\n        int cnt2 = lst2.Sum(x => x.Length);\n        return cnt1 <= cnt2 ? lst1 : lst2;\n    }\n}",
        "HumanEval/75": "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static bool IsMultiplyPrime(int a) {\n        int cnt = 0;\n        for (int i = 2; i <= a; i++) {\n            if (IsPrime(i)) {\n                while (a % i == 0) {\n                    cnt++;\n                    a /= i;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n}",
        "HumanEval/76": "class Global {\n    public static bool IsSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}",
        "HumanEval/77": "class Global {\n    public static bool IsCube(int a) {\n        a = Math.Abs(a);\n        int root = (int)Math.Round(Math.Pow(a, 1.0 / 3.0));\n        return root * root * root == a;\n    }\n}",
        "HumanEval/78": "class Global {\n    public static int HexKey(string num) {\n        return num.Count(x => \"2357BD\".Contains(x));\n    }\n}",
        "HumanEval/79": "class Global {\n    public static string DecimalToBinary(int dec) {\n        string binary = Convert.ToString(dec, 2);\n        return $\"db{binary}db\";\n    }\n}",
        "HumanEval/80": "class Global {\n    public static bool IsHappy(string s) {\n        if (s.Length < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
        "HumanEval/81": "class Global {\n    public static IList<string> NumericalLetterGrade(IList<double> grades) {\n        List<string> result = new List<string>();\n        foreach (double g in grades) {\n            switch (true) {\n                case true when g == 4.0:\n                    result.Add(\"A+\"); break;\n                case true when g > 3.7:\n                    result.Add(\"A\"); break;\n                case true when g > 3.3:\n                    result.Add(\"A-\"); break;\n                case true when g > 3.0:\n                    result.Add(\"B+\"); break;\n                case true when g > 2.7:\n                    result.Add(\"B\"); break;\n                case true when g > 2.3:\n                    result.Add(\"B-\"); break;\n                case true when g > 2.0:\n                    result.Add(\"C+\"); break;\n                case true when g > 1.7:\n                    result.Add(\"C\"); break;\n                case true when g > 1.3:\n                    result.Add(\"C-\"); break;\n                case true when g > 1.0:\n                    result.Add(\"D+\"); break;\n                case true when g > 0.7:\n                    result.Add(\"D\"); break;\n                case true when g > 0.0:\n                    result.Add(\"D-\"); break;\n                default:\n                    result.Add(\"E\"); break;\n            }\n        }\n        return result;\n    }\n}",
        "HumanEval/82": "class Global {\n    public static bool PrimeLength(string s) {\n        int length = s.Length;\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(length)); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
        "HumanEval/83": "class Global {\n    public static int StartsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 2 * 9 * (int)Math.Pow(10, n - 2);\n    }\n}",
        "HumanEval/84": "class Global {\n    public static string Solve(int n) {\n        int digitsSum = n.ToString().Select(d => int.Parse(d.ToString())).Sum();\n        return Convert.ToString(digitsSum, 2);\n    }\n}",
        "HumanEval/85": "class Global {\n    public static int Add(IList<int> lst) {\n        return lst.Where((x, i) => i % 2 == 1 && x % 2 == 0).Sum();\n    }\n}",
        "HumanEval/86": "class Global {\n    public static string AntiShuffle(string s) {\n        var words = s.Split(' ').Select(word => new string(word.OrderBy(c => c).ToArray())).ToList();\n        return string.Join(' ', words);\n    }\n}",
        "HumanEval/87": "class Global {\n    public static IList<IList<int>> GetRow(IList<IList<int>> lst, int x) {\n        List<IList<int>> coords = new List<IList<int>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    coords.Add(new List<int> { i, j });\n                }\n            }\n        }\n        return coords.OrderByDescending((a) => a[1]).OrderBy((a) => a[0]).ToList();\n    }\n}",
        "HumanEval/88": "class Global {\n    public static IList<int> SortArray(IList<int> arr) {\n        if (arr.Count == 0) {\n            return new List<int>();\n        }\n        if ((arr[0] + arr[arr.Count - 1]) % 2 == 0) {\n            return arr.OrderByDescending((a) => a).ToList();\n        } else {\n            return arr.OrderBy((a) => a).ToList();\n        }\n    }\n}",
        "HumanEval/89": "class Global {\n    public static string Encrypt(string s) {\n        StringBuilder result = new StringBuilder();\n        foreach (char ch in s) {\n            int shifted = ch + 4;\n            if (shifted > 'z') {\n                shifted -= 26;\n            }\n            result.Append((char)shifted);\n        }\n        return result.ToString();\n    }\n}",
        "HumanEval/90": "class Global {\n    public static int? NextSmallest(IList<int> lst) {\n        List<int> sl = lst.Distinct().OrderBy((a) => a).ToList();\n        if (sl.Count < 2) {\n            return null;\n        }\n        return sl[1];\n    }\n}",
        "HumanEval/91": "class Global {\n    public static int IsBored(string s) {\n        string[] sentences = Regex.Split(s, @\"[.!?]\\s*\");\n        return sentences.Where((sentence) => sentence.Length >= 2 && sentence.Substring(0, 2) == \"I \").Count();\n    }\n}",
        "HumanEval/92": "class Global {\n    public static bool AnyInt(object x, object y, object z) {\n        if (x is int && y is int && z is int) {\n            int intX = (int)x;\n            int intY = (int)y;\n            int intZ = (int)z;\n            if ((intX + intY == intZ) || (intX + intZ == intY) || (intY + intZ == intX)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
        "HumanEval/93": "class Global {\n    public static string Encode(string message) {\n        string vowels = \"aeiouAEIOU\";\n        StringBuilder result = new StringBuilder();\n        foreach (char ch in message) {\n            if (char.IsLetter(ch)) {\n                char ch1 = char.IsLower(ch) ? char.ToUpper(ch) : char.ToLower(ch);\n                if (vowels.Contains(ch1)) {\n                    ch1 = (char)(ch1 + 2);\n                }\n                result.Append(ch1);\n            } else {\n                result.Append(ch);\n            }\n        }\n        return result.ToString();\n    }\n}",
        "HumanEval/94": "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static int Skjkasdkd(IList<int> lst) {\n        var primes = lst.Where(n => IsPrime(n)).ToList();\n        if (primes.Count == 0) {\n            return 0;\n        }\n        string largest = primes.Max().ToString();\n        return largest.Select(d => (int)char.GetNumericValue(d)).Sum();\n    }\n}",
        "HumanEval/95": "class Global {\n    public static bool CheckDictCase(IDictionary<string, string> d) {\n        if (d.Count == 0) {\n            return false;\n        }\n        return d.Keys.All(k => k.All(c => char.IsLower(c))) || d.Keys.All(k => k.All(c => char.IsUpper(c)));\n    }\n}",
        "HumanEval/96": "class Global {\n    public static IList<int> CountUpTo(int n) {\n        List<int> primes = new List<int>();\n        for (int num = 2; num < n; num++) {\n            if (primes.All(p => num % p != 0)) {\n                primes.Add(num);\n            }\n        }\n        return primes;\n    }\n}",
        "HumanEval/97": "class Global {\n    public static int Multiply(int a, int b) {\n        return (Math.Abs(a) % 10) * (Math.Abs(b) % 10);\n    }\n}",
        "HumanEval/98": "class Global {\n    public static int CountUpper(string s) {\n        string vowels = \"AEIOU\";\n        return s.Where((c, i) => i % 2 == 0 && vowels.Contains(c)).Count();\n    }\n}",
        "HumanEval/99": "class Global {\n    public static int ClosestInteger(string value) {\n        double num = double.Parse(value);\n        if (num >= 0) {\n            return (int)(num + 0.5);\n        }\n        else {\n            return (int)(num - 0.5);\n        }\n    }\n}",
        "HumanEval/100": "class Global {\n    public static IList<int> MakeAPile(int n) {\n        return Enumerable.Range(0, n).Select(i => n + 2 * i).ToList();\n    }\n}",
        "HumanEval/101": "class Global {\n    public static IList<string> WordsString(string s) {\n        return Regex.Split(s, \"[, ]\").Where(w => w.Length > 0).ToList();\n    }\n}",
        "HumanEval/102": "class Global {\n    public static int ChooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        return y != x ? y - 1 : -1;\n    }\n}",
        "HumanEval/103": "class Global {\n    public static string? RoundedAvg(int n, int m) {\n        if (n > m) {\n            return null;\n        }\n        int rAvg = (int)((m + n) / 2.0 + 0.5);\n        return Convert.ToString(rAvg, 2);\n    }\n}",
        "HumanEval/104": "class Global {\n    public static bool AllDigitsOdd(string s) {\n        return s.All(digit => digit % 2 != 0);\n    }\n    public static IList<int> UniqueDigits(IList<int> x) {\n        return x.Where(num => AllDigitsOdd(Convert.ToString(num))).OrderBy(num => num).ToList();\n    }\n}",
        "HumanEval/105": "class Global {\n    public static IList<string> ByLength(IList<int> arr) {\n        string[] digitNames = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        List<int> sortedArr = arr.Where(x => 1 <= x && x <= 9).OrderByDescending(x => x).ToList();\n        return sortedArr.Select(x => digitNames[x - 1]).ToList();\n    }\n}",
        "HumanEval/106": "class Global {\n    public static IList<int> F(int n) {\n        List<int> nums = Enumerable.Range(1, n).ToList();\n        return nums.Select(i => i % 2 != 0 ? nums.Take(i).Sum() : nums.Take(i).Aggregate(1, (x, y) => x * y)).ToList();\n    }\n}",
        "HumanEval/107": "class Global {\n    public static bool IsPalindrome(string txt) {\n        return txt == new string(txt.Reverse().ToArray());\n    }\n    public static IList<int> EvenOddPalindrome(int n) {\n        var cnt = new List<int> { 0, 0 };\n        for (var i = 1; i <= n; i++) {\n            if (IsPalindrome(i.ToString())) {\n                cnt[i % 2]++;\n            }\n        }\n        return cnt;\n    }\n}",
        "HumanEval/108": "class Global {\n    public static int DigitsSum(int n) {\n        string nStr = n.ToString();\n        if (n >= 0) {\n            return nStr.Select(d => int.Parse(d.ToString())).Sum();\n        } else {\n            return int.Parse(nStr.Substring(0, 2)) * 2 + DigitsSum(Math.Abs(n));\n        }\n    }\n    public static int CountNums(IList<int> arr) {\n        return arr.Count(n => DigitsSum(n) > 0);\n    }\n}",
        "HumanEval/109": "class Global {\n    public static bool MoveOneBall(IList<int> arr) {\n        if (arr.Count == 0) {\n            return true;\n        }\n        List<int> sortedArr = arr.OrderBy(n => n).ToList();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr.Skip(i).SequenceEqual(sortedArr.Take(arr.Count - i)) && arr.Take(i).SequenceEqual(sortedArr.Skip(arr.Count - i))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
        "HumanEval/110": "class Global {\n    public static string CanExchange(IList<int> lst1, IList<int> lst2) {\n        int oddCnt = lst1.Count(n => n % 2 != 0);\n        int evenCnt = lst2.Count(n => n % 2 == 0);\n        return evenCnt >= oddCnt ? \"YES\" : \"NO\";\n    }\n}",
        "HumanEval/111": "class Global {\n    public static IDictionary<string, int> Histogram(string test) {\n        var freq = new Dictionary<string, int>();\n        var words = test.Split(\" \").Where(w => w.Length > 0).ToList();\n        foreach (var w in words) {\n            freq[w] = freq.ContainsKey(w) ? freq[w] + 1 : 1;\n        }\n        var result = new Dictionary<string, int>();\n        if (freq.Count > 0) {\n            var maxFreq = freq.Values.Max();\n            foreach (var kv in freq) {\n                if (kv.Value == maxFreq) {\n                    result[kv.Key] = kv.Value;\n                }\n            }\n        }\n        return result;\n    }\n}",
        "HumanEval/112": "class Global {\n    public static bool IsPalindrome(string s) {\n        return s == new string(s.Reverse().ToArray());\n    }\n    public static IList<string> ReverseDelete(string s, string c) {\n        var s1 = new string(s.Where(ch => !c.Contains(ch)).ToArray());\n        return new List<string> { s1, IsPalindrome(s1) ? \"yes\" : \"no\" };\n    }\n}",
        "HumanEval/113": "class Global {\n    public static IList<string> OddCount(IList<string> lst) {\n        var result = new List<string>();\n        foreach (var num in lst) {\n            var n = num.Count(d => d % 2 == 1);\n            var rs = \"the number of odd elements in the string i of the input.\";\n            result.Add(rs.Replace(\"i\", n.ToString()));\n        }\n        return result;\n    }\n}",
        "HumanEval/114": "class Global {\n    public static int MinSubArraySum(IList<int> nums) {\n        int minSum = 0;\n        int curSum = 0;\n        foreach (var n in nums) {\n            curSum = Math.Min(curSum + n, 0);\n            minSum = Math.Min(curSum, minSum);\n        }\n        if (minSum == 0) {\n            minSum = nums.Min();\n        }\n        return minSum;\n    }\n}",
        "HumanEval/115": "class Global {\n    public static int MaxFill(IList<IList<int>> grid, int capacity) {\n        return grid.Sum(arr => (int)Math.Ceiling(arr.Sum() / (double)capacity));\n    }\n}",
        "HumanEval/116": "class Global {\n    public static int CountOnes(int num) {\n        return Convert.ToString(num, 2).Count(ch => ch == '1');\n    }\n    public static IList<int> SortArray(IList<int> arr) {\n        return arr.OrderBy(x => CountOnes(x)).ThenBy(x => x).ToList();\n    }\n}",
        "HumanEval/117": "class Global {\n    public static IList<string> SelectWords(string s, int n) {\n        string consonants = \"bcdfghjklmnpqrstvwxyz\";\n        string[] words = s.Split(' ').Where(w => w.Length > 0).ToArray();\n        return words.Where(w => w.Count(c => consonants.Contains(char.ToLower(c))) == n).ToList();\n    }\n}",
        "HumanEval/118": "class Global {\n    public static string GetClosestVowel(string word) {\n        string vowels = \"aeiouAEIOU\";\n        for (int i = word.Length - 2; i > 0; i--) {\n            if (vowels.Contains(word[i]) && !vowels.Contains(word[i - 1]) && !vowels.Contains(word[i + 1])) {\n                return word[i].ToString();\n            }\n        }\n        return \"\";\n    }\n}",
        "HumanEval/119": "class Global {\n    public static bool Check(string s) {\n        int depth = 0;\n        foreach (char ch in s) {\n            if (ch == '(') {\n                depth++;\n            }\n            else {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n    public static string MatchParens(IList<string> lst) {\n        string s1 = lst[0] + lst[1];\n        string s2 = lst[1] + lst[0];\n        return Check(s1) || Check(s2) ? \"Yes\" : \"No\";\n    }\n}",
        "HumanEval/120": "class Global {\n    public static IList<int> Maximum(IList<int> arr, int k) {\n        if (k == 0) {\n            return new List<int>();\n        }\n        return arr.OrderBy(x => x).Skip(arr.Count - k).ToList();\n    }\n}",
        "HumanEval/121": "class Global {\n    public static int Solution(IList<int> lst) {\n        return lst.Where((x, i) => i % 2 == 0 && x % 2 != 0).Sum();\n    }\n}",
        "HumanEval/122": "class Global {\n    public static int AddElements(IList<int> arr, int k) {\n        return arr.Take(k).Where(n => n.ToString().Length <= 2).Sum();\n    }\n}",
        "HumanEval/123": "class Global {\n    public static IList<int> GetOddCollatz(int n) {\n        var collatz = new List<int>{1};\n        while (n != 1) {\n            if (n % 2 != 0) {\n                collatz.Add(n);\n                n = 3 * n + 1;\n            } else {\n                n = n / 2;\n            }\n        }\n        return collatz.OrderBy(x => x).ToList();\n    }\n}",
        "HumanEval/124": "class Global {\n    public static bool ValidDate(string date) {\n        if (date.Length != 10 || date[2] != '-' || date[5] != '-') {\n            return false;\n        }\n        int m = int.Parse(date.Substring(0, 2));\n        int d = int.Parse(date.Substring(3, 2));\n        if (new List<int>{1, 3, 5, 7, 8, 10, 12}.Contains(m) && d >= 1 && d <= 31) {\n            return true;\n        }\n        if (new List<int>{4, 6, 9, 11}.Contains(m) && d >= 1 && d <= 30) {\n            return true;\n        }\n        if (m == 2 && d >= 1 && d <= 29) {\n            return true;\n        }\n        return false;\n    }\n}",
        "HumanEval/125": "class Global {\n    public static IList<string> SplitWords(string txt) {\n        if (txt.Contains(\" \")) {\n            return txt.Split(\" \").ToList();\n        } else if (txt.Contains(\",\")) {\n            return txt.Split(\",\").ToList();\n        } else {\n            return new List<string>{txt.Where(c => char.IsLower(c) && (int)c % 2 == 0).Count().ToString()};\n        }\n    }\n}",
        "HumanEval/126": "class Global {\n    public static bool IsSorted(IList<int> lst) {\n        if (!lst.Skip(1).Select((n, i) => lst[i] <= n).All(a => a)) {\n            return false;\n        }\n        var freq = new Dictionary<int, int>();\n        foreach (var i in lst) {\n            freq[i] = freq.GetValueOrDefault(i, 0) + 1;\n        }\n        return freq.Values.DefaultIfEmpty(0).Max() <= 2;\n    }\n}",
        "HumanEval/127": "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static string Intersection(IList<int> interval1, IList<int> interval2) {\n        var l = Math.Max(interval1[0], interval2[0]);\n        var r = Math.Min(interval1[1], interval2[1]);\n        var length = r - l;\n        return length > 0 && IsPrime(length) ? \"YES\" : \"NO\";\n    }\n}",
        "HumanEval/128": "class Global {\n    public static int? ProdSigns(IList<int> arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n        if (arr.Contains(0)) {\n            return 0;\n        }\n        int sign = arr.Where(n => n < 0).Count() % 2 == 1 ? -1 : 1;\n        return sign * arr.Select(n => Math.Abs(n)).Sum();\n    }\n}",
        "HumanEval/129": "class Global {\n    public static IList<int> MinPath(IList<IList<int>> grid, int k) {\n        int n = grid.Count;\n        int minVal = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 1) {\n                    List<int> temp = new List<int>();\n                    if (i != 0) {\n                        temp.Add(grid[i - 1][j]);\n                    }\n                    if (j != 0) {\n                        temp.Add(grid[i][j - 1]);\n                    }\n                    if (i != n - 1) {\n                        temp.Add(grid[i + 1][j]);\n                    }\n                    if (j != n - 1) {\n                        temp.Add(grid[i][j + 1]);\n                    }\n                    minVal = temp.Min();\n                }\n            }\n        }\n        List<int> result = new List<int>();\n        for (int i = 0; i < k; i++) {\n            result.Add(i % 2 == 0 ? 1 : minVal);\n        }\n        return result;\n    }\n}",
        "HumanEval/130": "class Global {\n    public static IList<int> Tri(int n) {\n        if (n == 0) {\n            return new List<int> { 1 };\n        }\n        List<int> seq = new List<int> { 1, 3 };\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                seq.Add(i / 2 + 1);\n            }\n            else {\n                seq.Add(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n            }\n        }\n        return seq;\n    }\n}",
        "HumanEval/131": "class Global {\n    public static int Digits(int n) {\n        var odds = n.ToString().Where(d => char.GetNumericValue(d) % 2 == 1).Select(d => (int)char.GetNumericValue(d)).ToList();\n        return odds.Count > 0 ? odds.Aggregate((x, y) => x * y) : 0;\n    }\n}",
        "HumanEval/132": "class Global {\n    public static bool IsNested(string s) {\n        List<int> openIdx = new List<int>();\n        List<int> closeIdx = new List<int>();\n        for (int i = 0; i < s.Length; i++) {\n            switch (s[i]) {\n                case '[':\n                    openIdx.Add(i); break;\n                case ']':\n                    closeIdx.Add(i); break;\n            }\n        }\n        closeIdx.Reverse();\n        int cnt = 0;\n        int i0 = 0;\n        int l = closeIdx.Count;\n        foreach (int idx in openIdx) {\n            if (i0 < l && idx < closeIdx[i0]) {\n                cnt++;\n                i0++;\n            }\n        }\n        return cnt >= 2;\n    }\n}",
        "HumanEval/133": "class Global {\n    public static int SumSquares(IList<double> lst) {\n        return lst.Select(n => (int)Math.Pow(Math.Ceiling(n), 2)).Sum();\n    }\n}",
        "HumanEval/134": "class Global {\n    public static bool CheckIfLastCharIsALetter(string txt) {\n        if (string.IsNullOrEmpty(txt)) {\n            return false;\n        }\n        string last = txt.Substring(txt.LastIndexOf(' ') + 1);\n        return last.Length == 1 && char.IsLetter(last[0]);\n    }\n}",
        "HumanEval/135": "class Global {\n    public static int CanArrange(IList<int> arr) {\n        if (arr.Count <= 1) {\n            return -1;\n        }\n        var idx = Enumerable.Range(1, arr.Count - 1).Where(i => arr[i] < arr[i - 1]);\n        return idx.DefaultIfEmpty(-1).Max();\n    }\n}",
        "HumanEval/136": "class Global {\n    public static IList<int?> LargestSmallestIntegers(IList<int> lst) {\n        var neg = lst.Where(i => i < 0).ToList();\n        var pos = lst.Where(i => i > 0).ToList();\n        int? maxNeg =  neg.Count > 0 ? neg.Max() : null;\n        int? minPos = pos.Count > 0 ? pos.Min() : null;\n        return new List<int?> { maxNeg, minPos };\n    }\n}",
        "HumanEval/137": "class Global {\n    public static double AnyToReal(object o) {\n        if (o is string) {\n            return double.Parse(((string)o).Replace(\",\", \".\"));\n        }\n        else if (o is int) {\n            return (double)(int)o;\n        }\n        else if (o is double) {\n            return (double)o;\n        }\n        throw new Exception(\"Type Error\");\n    }\n    public static double? CompareOne(object a, object b) {\n        double a1 = AnyToReal(a);\n        double b1 = AnyToReal(b);\n        if (a1 == b1) {\n            return null;\n        }\n        else if (a1 > b1) {\n            return a1;\n        }\n        else {\n            return b1;\n        }\n    }\n}",
        "HumanEval/138": "class Global {\n    public static bool IsEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}",
        "HumanEval/139": "class Global {\n    public static int SpecialFactorial(int n) {\n        int fact = 1;\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}",
        "HumanEval/140": "class Global {\n    public static string FixSpaces(string txt) {\n        return Regex.Replace(txt, @\"\\s{3,}\", \"-\").Replace(\" \", \"_\");\n    }\n}",
        "HumanEval/141": "class Global {\n    public static string FileNameCheck(string fileName) {\n        var suf = new List<string> { \"txt\", \"exe\", \"dll\" };\n        var lst = fileName.Split('.');\n        if (lst.Length != 2 || !suf.Contains(lst[1]) || lst[0].Length == 0 || !char.IsLetter(lst[0][0]) || lst[0].Count(x => char.IsDigit(x)) > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}",
        "HumanEval/142": "class Global {\n    public static int SumSquares(IList<int> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 3 == 0) {\n                result += (int)Math.Pow(lst[i], 2);\n            } else if (i % 4 == 0) {\n                result += (int)Math.Pow(lst[i], 3);\n            } else {\n                result += lst[i];\n            }\n        }\n        return result;\n    }\n}",
        "HumanEval/143": "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static string WordsInSentence(string sentence) {\n        var words = sentence.Split(\" \");\n        return string.Join(\" \", words.Where(w => IsPrime(w.Length)));\n    }\n}",
        "HumanEval/144": "class Global {\n    public static bool Simplify(string x, string n) {\n        var xs = x.Split('/');\n        var ns = n.Split('/');\n        var num = int.Parse(xs[0]) * int.Parse(ns[0]);\n        var den = int.Parse(xs[1]) * int.Parse(ns[1]);\n        return num % den == 0;\n    }\n}",
        "HumanEval/145": "class Global {\n    public static int DigitsSum(int n) {\n        string nStr = n.ToString();\n        if (n >= 0) {\n            return nStr.Select(d => int.Parse(d.ToString())).Sum();\n        } else {\n            return int.Parse(nStr.Substring(0, 2)) * 2 + DigitsSum(Math.Abs(n));\n        }\n    }\n    public static IList<int> OrderByPoints(IList<int> nums) {\n        return nums.OrderBy(n => DigitsSum(n)).ToList();\n    }\n}",
        "HumanEval/146": "class Global {\n    public static int SpecialFilter(IList<int> nums) {\n        string odds = \"13579\";\n        return nums.Where(n => n > 10 && n % 2 == 1 && odds.Contains(n.ToString()[0])).Count();        \n    }\n}",
        "HumanEval/147": "class Global {\n    public static int GetMaxTriples(int n) {\n        int[] c = {0, 0, 0};\n        for (int i = 1; i <= n; i++) {\n            int a = i * i - i + 1;\n            c[a % 3] += 1;\n        }\n        return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n    }\n}",
        "HumanEval/148": "class Global {\n    public static IList<string> Bf(string planet1, string planet2) {\n        List<string> names = new List<string>() {\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        };\n        if (!names.Contains(planet1) || !names.Contains(planet2)) {\n            return new List<string>();\n        }\n        int l = names.IndexOf(planet1);\n        int r = names.IndexOf(planet2);\n        if (l > r) {\n            (l, r) = (r, l);\n        }\n        if (l == r) {\n            return new List<string>();\n        }\n        return names.GetRange(l + 1, r - l - 1);\n    }\n}",
        "HumanEval/149": "class Global {\n    public static IList<string> SortedListSum(IList<string> lst) {\n        var result = lst.Where(s => s.Length % 2 == 0).ToList();\n        return result.OrderBy(s => s.Length).ThenBy(s => s, StringComparer.Ordinal).ToList();\n    }\n}",
        "HumanEval/150": "class Global {\n    public static int XOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(n)); i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}",
        "HumanEval/151": "class Global {\n    public static int DoubleTheDifference(IList<double> lst) {\n        return lst.Where(n => n >= 0 && n % 2 == 1).Select(n => (int)(n * n)).Sum();\n    }\n}",
        "HumanEval/152": "class Global {\n    public static IList<int> Compare(IList<int> game, IList<int> guess) {\n        return game.Zip(guess, (x, y) => Math.Abs(x - y)).ToList();\n    }\n}",
        "HumanEval/153": "class Global {\n    public static string StrongestExtension(string className, IList<string> extensions) {\n        int maxS = int.MinValue;\n        string maxExt = \"\";\n        foreach (string ext in extensions) {\n            int upper = ext.Count(c => char.IsUpper(c));\n            int lower = ext.Count(c => char.IsLower(c));\n            int s = upper - lower;\n            if (s > maxS) {\n                maxS = s;\n                maxExt = ext;\n            }\n        }\n        return $\"{className}.{maxExt}\";\n    }\n}",
        "HumanEval/154": "class Global {\n    public static bool CycpatternCheck(string a, string b) {\n        if (a.Length < b.Length) {\n            return false;\n        }\n        for (int i = 0; i < b.Length; i++) {\n            if (a.Contains(b.Substring(i) + b.Substring(0, i))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
        "HumanEval/155": "class Global {\n    public static IList<int> EvenOddCount(int num) {\n        string ds = Math.Abs(num).ToString();\n        int even = ds.Count(d => d % 2 == 0);\n        return new List<int> { even, ds.Length - even };\n    }\n}",
        "HumanEval/156": "class Global {\n    public static string IntToMiniRoman(int num) {\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, \n                                  10, 9, 5, 4, 1};\n        string[] numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \n                                          \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        StringBuilder res = new StringBuilder();\n        for (int i = 0; i < values.Length; i++) {\n            while (num >= values[i]) {\n                res.Append(numerals[i]);\n                num -= values[i];\n            }\n        }\n        return res.ToString();\n    }\n}",
        "HumanEval/157": "class Global {\n    public static bool RightAngleTriangle(int a, int b, int c) {\n        int[] s = {a, b, c};\n        Array.Sort(s);\n        return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n    }\n}",
        "HumanEval/158": "class Global {\n    public static string FindMax(IList<string> words) {\n        int maxCnt = 0;\n        string maxW = \"\";\n        foreach (string w in words) {\n            int cnt = w.Distinct().Count();\n            if (cnt > maxCnt) {\n                maxCnt = cnt;\n                maxW = w;\n            }\n            else if (cnt == maxCnt) {\n                maxW = string.CompareOrdinal(maxW, w) < 0 ? maxW : w;\n            }\n        }\n        return maxW;\n    }\n}",
        "HumanEval/159": "class Global {\n    public static IList<int> Eat(int num, int need, int remaining) {\n        if (need <= remaining) {\n            return new List<int> { num + need, remaining - need };\n        }\n        else {\n            return new List<int> { num + remaining, 0 };\n        }\n    }\n}",
        "HumanEval/160": "class Global {\n    public static int DoAlgebra(IList<string> operators, IList<int> operands) {\n        List<string> ops = new List<string>(operators);\n        List<int> nums = new List<int>(operands);\n        int i = ops.Count - 1;\n        while (i >= 0) {\n            if (ops[i] == \"**\") {\n                nums[i] = (int) Math.Pow(nums[i], nums[i + 1]);\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n            }\n            i -= 1;\n        }\n        i = 0;\n        while (i < ops.Count) {\n            if (ops[i] == \"*\") {\n                nums[i] = nums[i] * nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i -= 1;\n            } else if (ops[i] == \"//\") {\n                nums[i] = nums[i] / nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        i = 0;\n        while (i < ops.Count) {\n            if (ops[i] == \"+\") {\n                nums[i] = nums[i] + nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i -= 1;\n            } else if (ops[i] == \"-\") {\n                nums[i] = nums[i] - nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        return nums[0];\n    }\n}",
        "HumanEval/161": "class Global {\n    public static string Solve(string s) {\n        if (!s.Any(char.IsLetter) ) {\n            return new string(s.Reverse().ToArray());\n        }\n        StringBuilder result = new StringBuilder();\n        foreach (char ch in s) {\n            if (!char.IsLetter(ch) ) {\n                result.Append(ch);\n            }\n            else if (char.IsUpper(ch) ) {\n                result.Append(char.ToLower(ch) );\n            }\n            else if (char.IsLower(ch) ) {\n                result.Append(char.ToUpper(ch) );\n            }\n        }\n        return result.ToString();\n    }\n}",
        "HumanEval/162": "class Global {\n    public static string? StringToMd5(string txt) {\n        if (string.IsNullOrEmpty(txt)) {\n            return null;\n        }\n        using (MD5 md5Hash = MD5.Create()) {\n            byte[] txtBytes = Encoding.UTF8.GetBytes(txt);\n            byte[] hashBytes = md5Hash.ComputeHash(txtBytes);\n            String md5Encoded = string.Join(\"\", hashBytes.Select(b => b.ToString(\"x2\")).ToList());\n            return md5Encoded;\n        }\n    }\n}",
        "HumanEval/163": "class Global {\n    public static IList<int> GenerateIntegers(int a, int b) {\n        int lower = Math.Max(2, Math.Min(a, b));\n        int upper = Math.Min(8, Math.Max(a, b));\n        if (lower > upper) {\n            return new List<int>();\n        }\n        return Enumerable.Range(lower, upper - lower + 1).Where(n => n % 2 == 0).ToList();\n    }\n}"
    },
    "dart": {
        "HumanEval/0": "bool hasCloseElements(List<double> numbers, double threshold) {\n    for (int i = 0; i < numbers.length; i++) {\n        for (int j = i + 1; j < numbers.length; j++) {\n            if ((numbers[i] - numbers[j]).abs() < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "HumanEval/1": "List<String> separateParenGroups(String parenString) {\n    List<String> groups = [];\n    List<String> stk = [];\n    String currentGroup = \"\";\n    String parens = parenString.replaceAll(\" \", \"\");\n    for (var ch in parens.split(\"\")) {\n        if (ch == \"(\") {\n            stk.add(ch);\n            currentGroup += ch;\n        } else if (ch == \")\") {\n            stk.removeLast();\n            currentGroup += ch;\n            if (stk.isEmpty) {\n                groups.add(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}",
        "HumanEval/2": "double truncateNumber(double num) {\n    return num - num.floor();\n}",
        "HumanEval/3": "bool belowZero(List<int> operations) {\n    int balance = 0;\n    for (int op in operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}",
        "HumanEval/4": "double meanAbsoluteDeviation(List<double> numbers) {\n    double mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    double deviation = numbers.map((x) => (x - mean).abs()).reduce((a, b) => a + b);\n    return deviation / numbers.length;\n}",
        "HumanEval/5": "List<int> intersperse(List<int> numbers, int delimiter) {\n    List<int> result = [];\n    for (int i = 0; i < numbers.length; i++) {\n        if (i != 0) {\n            result.add(delimiter);\n        }\n        result.add(numbers[i]);\n    }\n    return result;\n}",
        "HumanEval/6": "List<int> parseNestedParens(String parenString) {\n    List<int> result = [];\n    List<String> parenGroups = parenString.split(\" \").where((s) => s.isNotEmpty).toList();\n    for (String group in parenGroups) {\n        int maxDepth = 0;\n        int depth = 0;\n        for (var ch in group.split(\"\")) {\n            if (ch == \"(\") {\n                depth += 1;\n                maxDepth = max(maxDepth, depth);\n            } else if (ch == \")\") {\n                depth -= 1;\n            }\n        }\n        result.add(maxDepth);\n    }\n    return result;\n}",
        "HumanEval/7": "List<String> filterBySubstring(List<String> strs, String substring) {\n    return strs.where((s) => s.contains(substring)).toList();\n}",
        "HumanEval/8": "List<int> sumProduct(List<int> numbers) {\n    int nSum = numbers.fold(0, (a, b) => a + b);\n    int nProduct = numbers.fold(1, (a, b) => a * b);\n    return [nSum, nProduct];\n}",
        "HumanEval/9": "List<int> rollingMax(List<int> numbers) {\n    int maxSoFar = -double.maxFinite.toInt();\n    List<int> result = [];\n    for (int num in numbers) {\n        maxSoFar = max(maxSoFar, num);\n        result.add(maxSoFar);\n    }\n    return result;\n}",
        "HumanEval/10": "bool isPalindrome(String s) {\n    return s == s.split('').reversed.join('');\n}\nString makePalindrome(String s) {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (int i = 0; i < s.length; i++) {\n        if (isPalindrome(s.substring(i))) {\n            return s + s.substring(0, i).split('').reversed.join('');\n        }\n    }\n    return \"\";\n}",
        "HumanEval/11": "String stringXor(String a, String b) {\n    return IterableZip([a.split(\"\"), b.split(\"\")]).map((x) => x[0] == x[1] ? \"0\" : \"1\").join(\"\");\n}",
        "HumanEval/12": "String? longest(List<String> strs) {\n    if (strs.isEmpty) {\n        return null;\n    }\n    String longestS = strs[0];\n    for (String s in strs) {\n        if (s.length > longestS.length) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}",
        "HumanEval/13": "int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}",
        "HumanEval/14": "List<String> allPrefixes(String s) {\n    List<String> prefixes = [];\n    for (int i = 0; i < s.length; i++) {\n        prefixes.add(s.substring(0, i + 1));\n    }\n    return prefixes;\n}",
        "HumanEval/15": "String stringSequence(int n) {\n    return List.generate(n + 1, (i) => i.toString()).join(\" \");\n}",
        "HumanEval/16": "int countDistinctCharacters(String s) {\n    return s.toLowerCase().split('').toSet().length;\n}",
        "HumanEval/17": "List<int> parseMusic(String musicString) {\n    Map<String, int> durations = {\"o\": 4, \"o|\": 2, \".|\": 1};\n    List<String> notes = musicString.split(\" \").where((s) => s.isNotEmpty).toList();\n    return notes.map((note) => durations[note]!).toList();\n}",
        "HumanEval/18": "int howManyTimes(String s, String substring) {\n    int times = 0;\n    for (int i = 0; i <= s.length - substring.length; i++) {\n        if (s.substring(i, min(i + substring.length, s.length)) == substring) {\n            times += 1;\n        }\n    }\n    return times;\n}",
        "HumanEval/19": "String sortNumbers(String numbers) {\n    Map<String, int> numDict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    List<String> numList = numbers.split(\" \").where((x) => numDict.containsKey(x)).toList();\n    numList.sort((a, b) => numDict[a]! - numDict[b]!);\n    return numList.join(\" \");\n}",
        "HumanEval/20": "List<double> findClosestElements(List<double> numbers) {\n    List<double> sortedNumbers = numbers.toList()..sort();\n    double minDiff = double.infinity;\n    List<double> closestPair = [];\n    for (int i = 1; i < sortedNumbers.length; i++) {\n        double diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}",
        "HumanEval/21": "List<double> rescaleToUnit(List<double> numbers) {\n    double minNum = numbers.reduce(min);\n    double maxNum = numbers.reduce(max);\n    if (minNum == maxNum) {\n        return List<double>.filled(numbers.length, 0.0);\n    } else {\n        return numbers.map((num) => (num - minNum) / (maxNum - minNum)).toList();\n    }\n}",
        "HumanEval/22": "List<int> filterIntegers(List<Object> values) {\n    return values.whereType<int>().toList();\n}",
        "HumanEval/23": "int strLength(String s) {\n  return s.length;\n}",
        "HumanEval/24": "int largestDivisor(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return n ~/ i;\n        }\n    }\n    return 1;\n}",
        "HumanEval/25": "List<int> factorize(int n) {\n    List<int> factors = [];\n    int divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor);\n            n ~/= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}",
        "HumanEval/26": "List<int> removeDuplicates(List<int> numbers) {\n    Map<int, int> counts = {};\n    for (int num in numbers) {\n        counts[num] = (counts[num] ?? 0) + 1;\n    }\n    List<int> res = numbers.where((num) => counts[num] == 1).toList();\n    return res;\n}",
        "HumanEval/27": "String flipCase(String s) {\n    StringBuffer flipped = StringBuffer();\n    for (var ch in s.split(\"\")) {\n        if (!ch.contains(RegExp(r'[a-zA-Z]'))) {\n            flipped.write(ch);\n        } else if (ch.contains(RegExp(r'[a-z]'))) {\n            flipped.write(ch.toUpperCase());\n        } else if (ch.contains(RegExp(r'[A-Z]'))) {\n            flipped.write(ch.toLowerCase());\n        }\n    }\n    return flipped.toString();\n}",
        "HumanEval/28": "String concatenate(List<String> strs) {\n  return strs.join(\"\");\n}",
        "HumanEval/29": "List<String> filterByPrefix(List<String> strs, String prefixStr) {\n    return strs.where((s) => s.startsWith(prefixStr)).toList();\n}",
        "HumanEval/30": "List<int> getPositive(List<int> l) {\n    return l.where((num) => num > 0).toList();\n}",
        "HumanEval/31": "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).floor(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "HumanEval/32": "double poly(List<int> xs, double x) {\n    double res = 0;\n    for (int i = 0; i < xs.length; i++) {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\ndouble findZero(List<int> xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while ((x1 - x2).abs() > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}",
        "HumanEval/33": "List<int> sortThird(List<int> l) {\n    var sortedThird = l.whereIndexed((i, x) => i % 3 == 0).toList()..sort();\n    return l.mapIndexed((i, x) => (i % 3 == 0) ? sortedThird[i ~/ 3] : x).toList();\n}",
        "HumanEval/34": "List<int> listUnique(List<int> l) {\n    return l.toSet().toList()..sort();\n}",
        "HumanEval/35": "int maxElement(List<int> l) {\n    if (l.isEmpty) {\n        return 0;\n    }\n    return l.reduce(max);\n}",
        "HumanEval/36": "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += \"7\".allMatches(i.toString()).length;\n        }\n    }\n    return cnt;\n}",
        "HumanEval/37": "List<int> sortEven(List<int> l) {\n    var sortedEven = l.whereIndexed((i, x) => i % 2 == 0).toList()..sort();\n    return l.mapIndexed((i, x) => (i % 2 == 0) ? sortedEven[i ~/ 2] : x).toList();\n}",
        "HumanEval/38": "String encodeCyclic(String s) {\n    var result = StringBuffer();\n    for (int i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.write(s.substring(i));\n        } else {\n            result.write(s.substring(i + 1, i + 3));\n            result.write(s[i]);\n        }\n    }\n    return result.toString();\n}\nString decodeCyclic(String s) {\n  return encodeCyclic(encodeCyclic(s));\n}",
        "HumanEval/39": "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).floor(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint primeFib(int n) {\n    List<int> f = [0, 1];\n    int cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt++;\n        }\n    }\n    return f[1];\n}",
        "HumanEval/40": "bool triplesSumToZero(List<int> l) {\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "HumanEval/41": "int carRaceCollision(int n) {\n    return pow(n, 2).toInt();\n}",
        "HumanEval/42": "List<int> incrList(List<int> l) {\n    return l.map((i) => i + 1).toList();\n}",
        "HumanEval/43": "bool pairsSumToZero(List<int> l) {\n    Set<int> seen = {};\n    for (int num in l) {\n        if (seen.contains(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}",
        "HumanEval/44": "String changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    List<String> digits = [];\n    while (x > 0) {\n        digits.add((x % bas).toString());\n        x ~/= bas;\n    }\n    return digits.reversed.join();\n}",
        "HumanEval/45": "double triangleArea(int a, int h) {\n  return a * h / 2;\n}",
        "HumanEval/46": "int fib4(int n) {\n    List<int> fib = [0, 0, 2, 0];\n    for (int i = 4; i <= n; i++) {\n        fib[i % 4] = fib.reduce((a, b) => a + b);\n    }\n    return fib[n % 4];\n}",
        "HumanEval/47": "double median(List<double> l) {\n    List<double> sl = [...l]..sort();\n    if (l.length % 2 != 0) {\n        return sl[l.length ~/ 2];\n    } else {\n        return (sl[l.length ~/ 2] + sl[l.length ~/ 2 - 1]) / 2;\n    }\n}",
        "HumanEval/48": "bool isPalindrome(String txt) {\n    return txt == txt.split('').reversed.join('');\n}",
        "HumanEval/49": "int modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;  \n}",
        "HumanEval/50": "String encodeShift(String s) {\n    var result = s.runes.map((ch) => ((ch - 97 + 5) % 26) + 97);\n    return String.fromCharCodes(result);\n}\nString decodeShift(String s) {\n    var result = s.runes.map((ch) => ((ch - 97 - 5) % 26) + 97);\n    return String.fromCharCodes(result);\n}",
        "HumanEval/51": "String removeVowels(String txt) {\n    String vowels = \"aeiouAEIOU\";\n    return txt.split('').where((char) => !vowels.contains(char)).join('');\n}",
        "HumanEval/52": "bool belowThreshold(List<int> l, int t) {\n    return l.every((x) => x < t);\n}",
        "HumanEval/53": "int add(int x, int y) {\n    return x + y;\n}",
        "HumanEval/54": "bool sameChars(String s0, String s1) {\n    return SetEquality().equals(s0.split('').toSet(), s1.split('').toSet()); \n}",
        "HumanEval/55": "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}",
        "HumanEval/56": "bool correctBracketing(String brackets) {\n    int depth = 0;\n    for (String b in brackets.split(\"\")) {\n        if (b == \"<\") {\n            depth += 1;\n        } else if (b == \">\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}",
        "HumanEval/57": "bool monotonic(List<int> l) {\n    var diff = IterableZip([l, l.skip(1)]).map((x) => x[1] - x[0]);\n    return diff.every((x) => x <= 0) || diff.every((x) => x >= 0);\n}",
        "HumanEval/58": "List<int> common(List<int> l1, List<int> l2) {\n    return l1.toSet().intersection(l2.toSet()).toList()..sort();\n}",
        "HumanEval/59": "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i != 0) {\n            i += 1;\n        } else {\n            n ~/= i;\n        }\n    }\n    return n;\n}",
        "HumanEval/60": "int sumToN(int n) {\n    return List.generate(n + 1, (i) => i).reduce((a, b) => a + b);\n}",
        "HumanEval/61": "bool correctBracketing(String brackets) {\n    int depth = 0;\n    for (String b in brackets.split(\"\")) {\n        if (b == \"(\") {\n            depth += 1;\n        } else if (b == \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}",
        "HumanEval/62": "List<int> derivative(List<int> xs) {\n    return xs.mapIndexed((i, x) => x * i).skip(1).toList();\n}",
        "HumanEval/63": "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        (a, b, c) = (b, c, a + b + c);\n        n -= 1;\n    }\n    return c;\n}",
        "HumanEval/64": "int vowelsCount(String s) {\n    String vowels = \"aeiou\";\n    int cnt = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (vowels.contains(s[i].toLowerCase()) || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}",
        "HumanEval/65": "String circularShift(int x, int shift) {\n    String xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.split('').reversed.join('');\n    } else {\n        return xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift);\n    }\n}",
        "HumanEval/66": "int digitSum(String s) {\n    return s.split('').where((e) => e.contains(RegExp(r'[A-Z]'))).map((e) => e.codeUnitAt(0)).fold(0, (a, b) => a + b);\n}",
        "HumanEval/67": "int fruitDistribution(String s, int n) {\n    List<String> words = s.split(' ');\n    int apples = int.parse(words[words.indexOf(\"apples\") - 1]);\n    int oranges = int.parse(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples - oranges;\n}",
        "HumanEval/68": "List<int> pluck(List<int> arr) {\n    var evens = arr.where((n) => n % 2 == 0).toList();\n    if (evens.length == 0) {\n        return [];\n    }\n    var minEven = evens.reduce((a, b) => a < b ? a : b);\n    return [minEven, arr.indexOf(minEven)];\n}",
        "HumanEval/69": "int search(List<int> lst) {\n    Map<int, int> freqs = {};\n    for (int n in lst) {\n        freqs[n] = (freqs[n] ?? 0) + 1;\n    }\n    var goodVals = freqs.entries.where((p) => p.value >= p.key).map((p) => p.key).toList();\n    return goodVals.fold(-1, max);\n}",
        "HumanEval/70": "List<int> strangeSortList(List<int> lst) {\n    List<int> sl = List.from(lst)..sort();\n    List<int> result = [];\n    int left = 0, right = sl.length - 1;\n    while (left <= right) {\n        result.add(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.add(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}",
        "HumanEval/71": "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        double s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}",
        "HumanEval/72": "bool willItFly(List<int> q, int w) {\n    if (q.length == 0) {\n        return false;\n    }\n    bool isPalin = Iterable<int>.generate(q.length).every((i) => q[i] == q[q.length - i - 1]);\n    int total = q.reduce((a, b) => a + b);\n    return isPalin && total <= w;\n}",
        "HumanEval/73": "int smallestChange(List<int> arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.length ~/ 2; i++) {\n        if (arr[i] != arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}",
        "HumanEval/74": "List<String> totalMatch(List<String> lst1, List<String> lst2) {\n    int cnt1 = lst1.fold(0, (a, b) => a + b.length);\n    int cnt2 = lst2.fold(0, (a, b) => a + b.length);\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}",
        "HumanEval/75": "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).floor(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nbool isMultiplyPrime(int a) {\n    int cnt = 0;\n    for (int i = 2; i <= a; i++) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt += 1;\n                a ~/= i;\n            }\n        }\n    }\n    return cnt == 3;\n}",
        "HumanEval/76": "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}",
        "HumanEval/77": "bool isCube(int a) {\n    a = a.abs();\n    int root = pow(a, 1.0 / 3.0).round();\n    return root * root * root == a;\n}",
        "HumanEval/78": "int hexKey(String num) {\n    return num.split('').where((x) => \"2357BD\".contains(x)).length;\n}",
        "HumanEval/79": "String decimalToBinary(int dec) {\n    String binary = dec.toRadixString(2);\n    return \"db${binary}db\";\n}",
        "HumanEval/80": "bool isHappy(String s) {\n    if (s.length < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.length - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}",
        "HumanEval/81": "List<String> numericalLetterGrade(List<double> grades) {\n    List<String> result = [];\n    for (double g in grades) {\n        switch (g) {\n            case 4.0:\n                result.add(\"A+\");\n            case > 3.7:\n                result.add(\"A\");\n            case > 3.3:\n                result.add(\"A-\");\n            case > 3.0:\n                result.add(\"B+\");\n            case > 2.7:\n                result.add(\"B\");\n            case > 2.3:\n                result.add(\"B-\");\n            case > 2.0:\n                result.add(\"C+\");\n            case > 1.7:\n                result.add(\"C\");\n            case > 1.3:\n                result.add(\"C-\");\n            case > 1.0:\n                result.add(\"D+\");\n            case > 0.7:\n                result.add(\"D\");\n            case > 0.0:\n                result.add(\"D-\");\n            default:\n                result.add(\"E\");\n        }\n    }\n    return result;\n}",
        "HumanEval/82": "bool primeLength(String s) {\n    int length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(length).floor(); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "HumanEval/83": "int startsOneEnds(int n) {\n  if (n == 1) {\n    return 1;\n  }\n  return 2 * 9 * pow(10, n - 2).toInt();\n}",
        "HumanEval/84": "String solve(int n) {\n    int digitsSum = n.toString().split('').map((d) => int.parse(d)).reduce((a, b) => a + b);\n    return digitsSum.toRadixString(2);\n}",
        "HumanEval/85": "int add(List<int> lst) {\n    return lst.whereIndexed((i, x) => i % 2 == 1 && x % 2 == 0).fold(0, (a, b) => a + b);\n}",
        "HumanEval/86": "String antiShuffle(String s) {\n    var words = s.split(' ').map((word) => String.fromCharCodes(word.runes.toList()..sort())).toList();\n    return words.join(' ');\n}",
        "HumanEval/87": "List<List<int>> getRow(List<List<int>> lst, int x) {\n    List<List<int>> coords = [];\n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                coords.add([i, j]);\n            }\n        }\n    }\n    return coords..sort((a, b) => a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);\n}",
        "HumanEval/88": "List<int> sortArray(List<int> arr) {\n    if (arr.length == 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 == 0) {\n        return [...arr]..sort((a, b) => b - a);\n    } else {\n        return [...arr]..sort();\n    }\n}",
        "HumanEval/89": "String encrypt(String s) {\n    StringBuffer result = StringBuffer();\n    for (String ch in s.split(\"\")) {\n        int shifted = ch.codeUnitAt(0) + 4;\n        if (shifted > 'z'.codeUnitAt(0)) {\n            shifted -= 26;\n        }\n        result.writeCharCode(shifted);\n    }\n    return result.toString();\n}",
        "HumanEval/90": "int? nextSmallest(List<int> lst) {\n    List<int> sl = lst.toSet().toList()..sort();\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}",
        "HumanEval/91": "int isBored(String s) {\n    var sentences = s.split(RegExp(r\"[.!?]\\s*\"));\n    return sentences.where((sentence) => sentence.length >= 2 && sentence.substring(0, 2) == \"I \").length;\n}",
        "HumanEval/92": "bool anyInt(Object x, Object y, Object z) {\n    if (x is int && y is int && z is int) {\n        if ((x + y == z) || (x + z == y) || (y + z == x)) {\n            return true;\n        }\n    }\n    return false;\n}",
        "HumanEval/93": "String encode(String message) {\n    String vowels = \"aeiouAEIOU\";\n    StringBuffer result = new StringBuffer();\n    for (String ch in message.split(\"\")) {\n        if (ch.contains(RegExp(r'[a-zA-Z]'))) {\n            String ch1 = ch.toUpperCase() == ch ? ch.toLowerCase() : ch.toUpperCase();\n            if (vowels.contains(ch1)) {\n                ch1 = String.fromCharCode(ch1.codeUnitAt(0) + 2);\n            }\n            result.write(ch1);\n        } else {\n            result.write(ch);\n        }\n    }\n    return result.toString();\n}",
        "HumanEval/94": "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).floor(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint skjkasdkd(List<int> lst) {\n    List<int> primes = lst.where((n) => isPrime(n)).toList();\n    if (primes.length == 0) {\n        return 0;\n    }\n    String largest = primes.reduce((a, b) => a > b ? a : b).toString();\n    return largest.split('').map((d) => int.parse(d)).reduce((a, b) => a + b);\n}",
        "HumanEval/95": "bool checkDictCase(Map<String, String> d) {\n    if (d.isEmpty) {\n        return false;\n    }\n    return d.keys.every((k) => RegExp(r'^[A-Z]+$').hasMatch(k)) || d.keys.every((k) => RegExp(r'^[a-z]+$').hasMatch(k));\n}",
        "HumanEval/96": "List<int> countUpTo(int n) {\n    List<int> primes = [];\n    for (int num = 2; num < n; num++) {\n        if (primes.every((p) => num % p != 0)) {\n            primes.add(num);\n        }\n    }\n    return primes;\n}",
        "HumanEval/97": "int multiply(int a, int b) {\n    return (a.abs() % 10) * (b.abs() % 10);\n}",
        "HumanEval/98": "int countUpper(String s) {\n    String vowels = \"AEIOU\";\n    return s.split('').whereIndexed((i, c) => i % 2 == 0 && vowels.contains(c)).length;\n}",
        "HumanEval/99": "int closestInteger(String value) {\n    double num = double.parse(value);\n    if (num >= 0) {\n        return (num + 0.5).toInt();\n    } else {\n        return (num - 0.5).toInt();\n    }\n}",
        "HumanEval/100": "List<int> makeAPile(int n) {\n    return List.generate(n, (i) => n + 2 * i);\n}",
        "HumanEval/101": "List<String> wordsString(String s) {\n    return s.split(RegExp(r\"[, ]\")).where((w) => w.length > 0).toList();\n}",
        "HumanEval/102": "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return y != x ? y - 1 : -1;\n}",
        "HumanEval/103": "String? roundedAvg(int n, int m) {\n    if (n > m) {\n        return null;\n    }\n    int rAvg = ((m + n) / 2.0 + 0.5).toInt();\n    return rAvg.toRadixString(2);\n}",
        "HumanEval/104": "bool allDigitsOdd(String s) {\n    return s.split('').every((digit) => digit.codeUnitAt(0) % 2 != 0);\n}\nList<int> uniqueDigits(List<int> x) {\n    return x.where((num) => allDigitsOdd(num.toString())).toList()..sort();\n}",
        "HumanEval/105": "List<String> byLength(List<int> arr) {\n    List<String> digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    List<int> sortedArr = arr.where((x) => 1 <= x && x <= 9).toList()..sort((x, y) => y - x);\n    return sortedArr.map((x) => digitNames[x - 1]).toList();\n}",
        "HumanEval/106": "List<int> f(int n) {\n    List<int> nums = List.generate(n, (i) => i + 1);\n    return nums.map((i) => i % 2 != 0 ? nums.take(i).reduce((x, y) => x + y) : nums.take(i).reduce((x, y) => x * y)).toList();\n}",
        "HumanEval/107": "bool isPalindrome(String txt) {\n    return txt == txt.split('').reversed.join('');\n}\nList<int> evenOddPalindrome(int n) {\n    List<int> cnt = [0, 0];\n    for (int i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;    \n}",
        "HumanEval/108": "int digitsSum(int n) {\n    String nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split('').map((d) => int.parse(d)).reduce((a, b) => a + b);\n    } else {\n        return int.parse(nStr.substring(0, 2)) * 2 + digitsSum(n.abs());\n    }\n}\nint countNums(List<int> arr) {\n    return arr.where((n) => digitsSum(n) > 0).length;\n}",
        "HumanEval/109": "bool moveOneBall(List<int> arr) {\n    if (arr.length == 0) {\n        return true;\n    }\n    List<int> sortedArr = List.from(arr)..sort();\n    for (int i = 0; i < arr.length; i++) {\n        if (ListEquality().equals(arr.sublist(i), sortedArr.sublist(0, arr.length - i)) && ListEquality().equals(arr.sublist(0, i), sortedArr.sublist(arr.length - i))) {\n            return true;\n        }\n    }\n    return false;\n}",
        "HumanEval/110": "String canExchange(List<int> lst1, List<int> lst2) {\n    int oddCnt = lst1.where((num) => num % 2 != 0).length;\n    int evenCnt = lst2.where((num) => num % 2 == 0).length;\n    return evenCnt >= oddCnt ? \"YES\" : \"NO\";\n}",
        "HumanEval/111": "Map<String, int> histogram(String test) {\n    Map<String, int> freq = {};\n    var words = test.split(\" \").where((w) => w.length > 0).toList();\n    for (var w in words) {\n        freq[w] = (freq[w] ?? 0) + 1;\n    }\n    Map<String, int> result = {};\n    if (freq.length > 0) {\n        var maxFreq = freq.values.reduce((a, b) => a > b ? a : b);\n        for (var k in freq.keys) {\n            if (freq[k] == maxFreq) {\n                result[k] = freq[k]!;\n            }\n        }\n    }\n    return result;\n}",
        "HumanEval/112": "bool isPalindrome(String s) {\n    return s == s.split('').reversed.join('');\n}\nList<String> reverseDelete(String s, String c) {\n    String s1 = s.split('').where((ch) => !c.contains(ch)).join('');\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"];\n}",
        "HumanEval/113": "List<String> oddCount(List<String> lst) {\n    List<String> result = [];\n    for (String num in lst) {\n        int n = num.split('').where((d) => d.codeUnitAt(0) % 2 == 1).length;\n        String rs = \"the number of odd elements in the string i of the input.\";\n        result.add(rs.replaceAll(\"i\", n.toString()));\n    }\n    return result;\n}",
        "HumanEval/114": "int minSubArraySum(List<int> nums) {\n    int minSum = 0;\n    int curSum = 0;\n    for (int n in nums) {\n        curSum = min(curSum + n, 0);\n        minSum = min(curSum, minSum);\n    }\n    if (minSum == 0) {\n        minSum = nums.reduce(min);\n    }\n    return minSum;\n}",
        "HumanEval/115": "int maxFill(List<List<int>> grid, int capacity) {\n    return grid.map((arr) => (arr.reduce((a, b) => a + b) / capacity).ceil()).fold(0, (a, b) => a + b);\n}",
        "HumanEval/116": "int countOnes(int num) {\n    return \"1\".allMatches(num.toRadixString(2)).length;\n}\nList<int> sortArray(List<int> arr) {\n    return List.from(arr)..sort((a, b) {\n        return (countOnes(a) == countOnes(b)) ? a - b : countOnes(a) - countOnes(b);\n    });\n}",
        "HumanEval/117": "List<String> selectWords(String s, int n) {\n    String consonants = \"bcdfghjklmnpqrstvwxyz\";\n    List<String> words = s.split(\" \").where((w) => w.length > 0).toList();\n    return words.where((w) => w.split('').where((c) => consonants.toLowerCase().contains(c.toLowerCase())).length == n).toList();\n}",
        "HumanEval/118": "String getClosestVowel(String word) {\n    String vowels = \"aeiouAEIOU\";\n    for (int i = word.length - 2; i > 0; i--) {\n        if (vowels.contains(word[i]) && !vowels.contains(word[i - 1]) && !vowels.contains(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}",
        "HumanEval/119": "bool check(String s) {\n    int depth = 0;\n    for (String ch in s.split(\"\")) {\n        if (ch == \"(\") {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\nString matchParens(List<String> lst) {\n    String s1 = lst[0] + lst[1];\n    String s2 = lst[1] + lst[0];\n    return check(s1) || check(s2) ? \"Yes\" : \"No\";\n}",
        "HumanEval/120": "List<int> maximum(List<int> arr, int k) {\n    if (k == 0) {\n        return [];\n    }\n    List<int> result = List.from(arr)..sort();\n    return result.sublist(arr.length - k);\n}",
        "HumanEval/121": "int solution(List<int> lst) {\n    return lst.whereIndexed((i, x) => i % 2 == 0 && x % 2 != 0).fold(0, (a, b) => a + b);\n}",
        "HumanEval/122": "int addElements(List<int> arr, int k) {\n    return arr.take(k).where((n) => n.toString().length <= 2).fold(0, (a, b) => a + b);\n}",
        "HumanEval/123": "List<int> getOddCollatz(int n) {\n    List<int> collatz = [1];\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.add(n);\n            n = 3 * n + 1;\n        } else {\n            n = n ~/ 2;\n        }\n    }\n    return collatz..sort();\n}",
        "HumanEval/124": "bool validDate(String date) {\n    if (date.length != 10 || date[2] != \"-\" || date[5] != \"-\") {\n        return false;\n    }\n    int m = int.parse(date.substring(0, 2));\n    int d = int.parse(date.substring(3, 5));\n    if ([1, 3, 5, 7, 8, 10, 12].contains(m) && d >= 1 && d <= 31) {\n        return true;\n    }\n    if ([4, 6, 9, 11].contains(m) && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}",
        "HumanEval/125": "List<String> splitWords(String txt) {\n    if (txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [txt.split(\"\").where((c) => c.contains(RegExp(r\"[a-z]\")) && c.codeUnitAt(0) % 2 == 0).length.toString()];\n    }\n}",
        "HumanEval/126": "bool isSorted(List<int> lst) {\n    if (!(lst.isSorted((a, b) => a - b))) {\n        return false;\n    }\n    var freq = {};\n    for (var i in lst) {\n        freq[i] = (freq[i] ?? 0) + 1;\n    }\n    return freq.values.fold(0, (a, b) => a > b ? a : b) <= 2;\n}",
        "HumanEval/127": "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).floor(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nString intersection(List<int> interval1, List<int> interval2) {\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n}",
        "HumanEval/128": "int? prodSigns(List<int> arr) {\n    if (arr.length == 0) {\n        return null;\n    }\n    if (arr.contains(0)) {\n        return 0;\n    }\n    int sign = arr.where((n) => n < 0).length % 2 == 1 ? -1 : 1;\n    return sign * arr.map((n) => n.abs()).reduce((a, b) => a + b);\n}",
        "HumanEval/129": "List<int> minPath(List<List<int>> grid, int k) {\n    int n = grid.length;\n    int minVal = n * n + 1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                List<int> temp = [];\n                if (i != 0) {\n                    temp.add(grid[i - 1][j]);\n                }\n                if (j != 0) {\n                    temp.add(grid[i][j - 1]);\n                }\n                if (i != n - 1) {\n                    temp.add(grid[i + 1][j]);\n                }\n                if (j != n - 1) {\n                    temp.add(grid[i][j + 1]);\n                }\n                minVal = temp.reduce(min);\n            }\n        }\n    }\n    List<int> result = [];\n    for (int i = 0; i < k; i++) {\n        result.add(i % 2 == 0 ? 1 : minVal);\n    }\n    return result;\n}",
        "HumanEval/130": "List<int> tri(int n) {\n    if (n == 0) {\n        return [1];\n    }\n    List<int> seq = [1, 3];\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq.add((i / 2 + 1).toInt());\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + ((i + 3) / 2).toInt());\n        }\n    }\n    return seq;\n}",
        "HumanEval/131": "int digits(int n) {\n    var odds = n.toString().split('').where((d) => int.parse(d) % 2 == 1).map((d) => int.parse(d));\n    return odds.length > 0 ? odds.reduce((x, y) => x * y) : 0;\n}",
        "HumanEval/132": "bool isNested(String s) {\n    List<int> openIdx = [];\n    List<int> closeIdx = [];\n    for (final (i, ch) in s.split(\"\").indexed) {\n        switch (ch) {\n            case '[':\n                openIdx.add(i);\n            case ']':\n                closeIdx.add(i);\n        }\n    }\n    closeIdx = closeIdx.reversed.toList();\n    int cnt = 0;\n    int i = 0;\n    int l = closeIdx.length;\n    for (int idx in openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}",
        "HumanEval/133": "int sumSquares(List<double> lst) {\n    return lst.map((n) => pow(n.ceil(), 2).toInt()).fold(0, (a, b) => a + b);\n}",
        "HumanEval/134": "bool checkIfLastCharIsALetter(String txt) {\n    if (txt.isEmpty) {\n        return false;\n    }\n    String last = txt.substring(txt.lastIndexOf(' ') + 1);\n    return last.length == 1 && RegExp(r'[a-z]', caseSensitive: false).hasMatch(last[0]);\n}",
        "HumanEval/135": "int canArrange(List<int> arr) {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    var idx = List.generate(arr.length - 1, (i) => i + 1).where((i) => arr[i] < arr[i - 1]);\n    return idx.fold(-1, max);\n}",
        "HumanEval/136": "List<int?> largestSmallestIntegers(List<int> lst) {\n    var neg = lst.where((i) => i < 0);\n    var pos = lst.where((i) => i > 0);\n    int? maxNeg = neg.isNotEmpty ? neg.reduce(max) : null;\n    int? minPos = pos.isNotEmpty ? pos.reduce(min) : null;\n    return [maxNeg, minPos];\n}",
        "HumanEval/137": "double anyToReal(Object o) {\n    if (o is String) {\n        return double.parse((o as String).replaceAll(',', '.'));\n    } else if (o is int) {\n        return (o as int).toDouble();\n    } else if (o is double) {\n        return o as double;\n    }\n    throw new Exception(\"Type Error\");\n}\ndouble? compareOne(Object a, Object b) {\n    double a1 = anyToReal(a);\n    double b1 = anyToReal(b);\n    if (a1 == b1) {\n        return null;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n}",
        "HumanEval/138": "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}",
        "HumanEval/139": "int specialFactorial(int n) {\n    int fact = 1;\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}",
        "HumanEval/140": "String fixSpaces(String txt) {\n    return txt.replaceAll(RegExp(r\"\\s{3,}\"), \"-\").replaceAll(\" \", \"_\");\n}",
        "HumanEval/141": "String fileNameCheck(String fileName) {\n    var suf = [\"txt\", \"exe\", \"dll\"];\n    var lst = fileName.split(\".\");\n    if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].length == 0 || !lst[0][0].contains(RegExp(r'[a-z]', caseSensitive: false)) || lst[0].split(\"\").where((x) => x.contains(RegExp(r'\\d'))).length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}",
        "HumanEval/142": "int sumSquares(List<int> lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            result += pow(lst[i], 2).toInt();\n        } else if (i % 4 == 0) {\n            result += pow(lst[i], 3).toInt();\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}",
        "HumanEval/143": "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).floor(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nString wordsInSentence(String sentence) {\n    List<String> words = sentence.split(\" \");\n    return words.where((w) => isPrime(w.length)).join(\" \");\n}",
        "HumanEval/144": "bool simplify(String x, String n) {\n    var xs = x.split('/');\n    var ns = n.split('/');\n    var num = int.parse(xs[0]) * int.parse(ns[0]);\n    var den = int.parse(xs[1]) * int.parse(ns[1]);\n    return num % den == 0;\n}",
        "HumanEval/145": "int digitsSum(int n) {\n    String nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split('').map((d) => int.parse(d)).reduce((a, b) => a + b);\n    } else {\n        return int.parse(nStr.substring(0, 2)) * 2 + digitsSum(n.abs());\n    }\n}\nList<int> orderByPoints(List<int> nums) {\n    List<int> result = List.from(nums);\n    mergeSort(result, compare: (a, b) => digitsSum(a)- digitsSum(b));\n    return result;\n}",
        "HumanEval/146": "int specialFilter(List<int> nums) {\n    String odds = \"13579\";\n    return nums.where((n) => n > 10 && n % 2 == 1 && odds.contains(n.toString()[0])).length;\n}",
        "HumanEval/147": "int getMaxTriples(int n) {\n    List<int> c = [0, 0, 0];\n    for (int i = 1; i <= n; i++) {\n        int a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) ~/ 6;\n}",
        "HumanEval/148": "List<String> bf(String planet1, String planet2) {\n    List<String> names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.contains(planet1) || !names.contains(planet2)) {\n        return [];\n    }\n    int l = names.indexOf(planet1);\n    int r = names.indexOf(planet2);\n    if (l > r) {\n        [l, r] = [r, l];\n    }\n    if (l == r) {\n        return [];\n    }\n    return names.sublist(l + 1, r);\n}",
        "HumanEval/149": "List<String> sortedListSum(List<String> lst) {\n    var result = lst.where((it) => it.length % 2 == 0).toList();\n    return result..sort((a, b) {\n        if (a.length == b.length) {\n            return a.compareTo(b);\n        }\n        return a.length - b.length;\n    });\n}",
        "HumanEval/150": "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= sqrt(n).floor(); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}",
        "HumanEval/151": "int doubleTheDifference(List<double> lst) {\n    return lst.where((n) => n >= 0 && n % 2 == 1).map((n) => (n * n).toInt()).fold(0, (a, b) => a + b);\n}",
        "HumanEval/152": "List<int> compare(List<int> game, List<int> guess) {\n    return IterableZip([game, guess]).map((x) => (x[0] - x[1]).abs()).toList();\n}",
        "HumanEval/153": "String strongestExtension(String className, List<String> extensions) {\n    int maxS = -double.maxFinite.toInt();\n    String maxExt = \"\";\n    for (String ext in extensions) {\n        int upper = ext.split(\"\").where((c) => c == c.toUpperCase()).length;\n        int lower = ext.split(\"\").where((c) => c == c.toLowerCase()).length;\n        int s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return \"${className}.${maxExt}\";\n}",
        "HumanEval/154": "bool cycpatternCheck(String a, String b) {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (int i = 0; i < b.length; i++) {\n        if (a.contains(b.substring(i) + b.substring(0, i))) {\n            return true;\n        }\n    }\n    return false;\n}",
        "HumanEval/155": "List<int> evenOddCount(int num) {\n    String ds = num.abs().toString();\n    int even = ds.split(\"\").where((d) => d.codeUnitAt(0) % 2 == 0).length;\n    return [even, ds.length - even];\n}",
        "HumanEval/156": "String intToMiniRoman(int num) {\n    List<int> values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 , 5, 4, 1];\n    List<String> numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    StringBuffer res = StringBuffer();\n    for (int i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.write(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.toString();\n}",
        "HumanEval/157": "bool rightAngleTriangle(int a, int b, int c) {\n    List<int> s = [a, b, c]..sort();\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}",
        "HumanEval/158": "String findMax(List<String> words) {\n    int maxCnt = 0;\n    String maxW = \"\";\n    for (String w in words) {\n        int cnt = w.split(\"\").toSet().length;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt == maxCnt) {\n            maxW = maxW.compareTo(w) < 0 ? maxW : w;\n        }\n    }\n    return maxW;\n}",
        "HumanEval/159": "List<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}",
        "HumanEval/160": "int doAlgebra(List<String> operators, List<int> operands) {\n    List<String> ops = List.from(operators);\n    List<int> nums = List.from(operands);\n    int i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]).toInt();\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] ~/ nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}",
        "HumanEval/161": "String solve(String s) {\n    if (!s.split(\"\").any((ch) => ch.contains(RegExp(r'[A-Za-z]')))) {\n        return s.split('').reversed.join('');\n    }\n    StringBuffer result = StringBuffer();\n    for (var ch in s.split(\"\")) {\n        if (!ch.contains(RegExp(r'[A-Za-z]'))) {\n            result.write(ch);\n        }\n        else if (ch.contains(RegExp(r'[A-Z]'))) {\n            result.write(ch.toLowerCase());\n        }\n        else if (ch.contains(RegExp(r'[a-z]'))) {\n            result.write(ch.toUpperCase());\n        }\n    }\n    return result.toString();\n}",
        "HumanEval/162": "String? stringToMd5(String txt) {\n    if (txt.isEmpty) {\n        return null;\n    }\n    var txtBytes = utf8.encode(txt);\n    var md5Encoded = md5.convert(txtBytes).toString();\n    return md5Encoded;\n}",
        "HumanEval/163": "List<int> generateIntegers(int a, int b) {\n    int lower = max(2, min(a, b));\n    int upper = min(8, max(a, b));\n    return [for(int i = lower; i <= upper; i++) i].where((i) => i % 2 == 0).toList();\n}"
    },
    "go": {
        "HumanEval/0": "func HasCloseElements(numbers []float64, threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(numbers[i]-numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}",
        "HumanEval/1": "func SeparateParenGroups(parenString string) []string {\n    groups := []string{}\n    stk := []rune{}\n    currentGroup := \"\"\n    parens := strings.ReplaceAll(parenString, \" \", \"\")\n    for _, ch := range parens {\n        if ch == '(' {\n            stk = append(stk, ch)\n            currentGroup += string(ch)\n        } else if ch == ')' {\n            stk = stk[:len(stk)-1]\n            currentGroup += string(ch)\n            if len(stk) == 0 {\n                groups = append(groups, currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}",
        "HumanEval/2": "func TruncateNumber(num float64) float64 {\n    return num - math.Floor(num)\n}",
        "HumanEval/3": "func BelowZero(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}",
        "HumanEval/4": "func MeanAbsoluteDeviation(numbers []float64) float64 {\n    mean := 0.0\n    for _, num := range numbers {\n        mean += num\n    }\n    mean /= float64(len(numbers))\n    deviation := 0.0\n    for _, num := range numbers {\n        deviation += math.Abs(num - mean)\n    }\n    return deviation / float64(len(numbers))\n}",
        "HumanEval/5": "func Intersperse(numbers []int, delimiter int) []int {\n    result := []int{}\n    for i := 0; i < len(numbers); i++ {\n        if i != 0 {\n            result = append(result, delimiter)\n        }\n        result = append(result, numbers[i])\n    }\n    return result\n}",
        "HumanEval/6": "func ParseNestedParens(parenString string) []int {\n    result := []int{}\n    parenGroups := []string{}\n    for _, str := range strings.Split(parenString, \" \") {\n        if str != \"\" {\n            parenGroups = append(parenGroups, str)\n        }\n    }\n    for _, group := range parenGroups {\n        maxDepth := 0\n        depth := 0\n        for _, ch := range group {\n            if ch == '(' {\n                depth++\n                maxDepth = max(maxDepth, depth)\n            } else if ch == ')' {\n                depth--\n            }\n        }\n        result = append(result, maxDepth)\n    }\n    return result\n}",
        "HumanEval/7": "func FilterBySubstring(strs []string, substring string) []string {\n    result := []string{}\n    for _, s := range strs {\n        if strings.Contains(s, substring) {\n            result = append(result, s)\n        }\n    }\n    return result\n}",
        "HumanEval/8": "func SumProduct(numbers []int) []int {\n    nSum := 0\n    nProduct := 1\n    for _, n := range numbers {\n        nSum += n\n        nProduct *= n\n    }\n    return []int{nSum, nProduct}\n}",
        "HumanEval/9": "func RollingMax(numbers []int) []int {\n    maxSoFar := math.MinInt\n    result := []int{}\n    for _, num := range numbers {\n        maxSoFar = max(maxSoFar, num)\n        result = append(result, maxSoFar)\n    }\n    return result\n}",
        "HumanEval/10": "func IsPalindrome(s string) bool {\n    runes := []rune(s)\n    for i := 0; i < len(runes)/2; i++ {\n        if runes[i] != runes[len(runes)-1-i] {\n            return false\n        }\n    }\n    return true\n}\nfunc MakePalindrome(s string) string {\n    if IsPalindrome(s) {\n        return s\n    }\n    for i := 0; i < len(s); i++ {\n        if IsPalindrome(s[i:]) {\n            runes := []rune(s[:i])\n            for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n                runes[i], runes[j] = runes[j], runes[i]\n            }\n            return s + string(runes)\n        }\n    }\n    return \"\"\n}",
        "HumanEval/11": "func StringXor(a string, b string) string {\n    result := []string{}\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result = append(result, \"0\")\n        } else {\n            result = append(result, \"1\")\n        }\n    }\n    return strings.Join(result, \"\")\n}",
        "HumanEval/12": "func Longest(strs []string) *string {\n    if len(strs) == 0 {\n        return nil\n    }\n    longestS := strs[0]\n    for _, s := range strs {\n        if len(s) > len(longestS) {\n            longestS = s\n        }\n    }\n    return &longestS\n}",
        "HumanEval/13": "func GreatestCommonDivisor(a int, b int) int {\n    if b == 0 {\n        return a\n    } else {\n        return GreatestCommonDivisor(b, a%b)\n    }\n}",
        "HumanEval/14": "func AllPrefixes(s string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(s); i++ {\n        prefixes = append(prefixes, s[:i+1])\n    }\n    return prefixes\n}",
        "HumanEval/15": "func StringSequence(n int) string {\n    result := []string{}\n    for i := 0; i <= n; i++ {\n        result = append(result, strconv.Itoa(i))\n    }\n    return strings.Join(result, \" \")\n}",
        "HumanEval/16": "func CountDistinctCharacters(s string) int {\n    dc := make(map[rune]bool)\n    for _, ch := range strings.ToLower(s) {\n        dc[ch] = true\n    }\n    return len(dc)\n}",
        "HumanEval/17": "func ParseMusic(musicString string) []int {\n    durations := map[string]int{\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    }\n    notes := []string{}\n    for _, str := range strings.Split(musicString, \" \") {\n        if str != \"\" {\n            notes = append(notes, str)\n        }\n    }\n    result := []int{}\n    for _, note := range notes {\n        result = append(result, durations[note])\n    }\n    return result\n}",
        "HumanEval/18": "func HowManyTimes(s string, substring string) int {\n    times := 0\n    for i := 0; i <= len(s) - len(substring); i++ {\n        if s[i:i+len(substring)] == substring {\n            times += 1\n        }\n    }\n    return times\n}",
        "HumanEval/19": "func SortNumbers(numbers string) string {\n    numDict := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    strs := strings.Split(numbers, \" \")\n    numList := []string{}\n    for _, str := range strs {\n        numList = append(numList, str)\n    }\n    sort.Slice(numList, func(i, j int) bool {\n        return numDict[numList[i]] < numDict[numList[j]]\n    })\n    return strings.Join(numList, \" \")\n}",
        "HumanEval/20": "func FindClosestElements(numbers []float64) []float64 {\n    sortedNumbers := make([]float64, len(numbers))\n    copy(sortedNumbers, numbers)\n    sort.Float64s(sortedNumbers)\n    minDiff := math.Inf(1)\n    closestPair := []float64{}\n    for i := 1; i < len(sortedNumbers); i++ {\n        diff := sortedNumbers[i] - sortedNumbers[i - 1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = []float64{sortedNumbers[i - 1], sortedNumbers[i]}\n        }\n    }\n    return closestPair\n}",
        "HumanEval/21": "func RescaleToUnit(numbers []float64) []float64 {\n    minNum := math.Inf(1)\n    maxNum := math.Inf(-1)\n    for _, num := range numbers {\n        if num < minNum {\n            minNum = num\n        }\n        if num > maxNum {\n            maxNum = num\n        }\n    }\n    res := make([]float64, len(numbers))\n    if minNum == maxNum {\n        return res\n    } else {\n        for i, num := range numbers {\n            res[i] = (num - minNum) / (maxNum - minNum)\n        }\n        return res\n    }\n}",
        "HumanEval/22": "func FilterIntegers(values []interface{}) []int {\n    integers := []int{}\n    for _, value := range values {\n        if intValue, ok := value.(int); ok {\n            integers = append(integers, intValue)\n        }\n    }\n    return integers\n}",
        "HumanEval/23": "func StrLength(s string) int {\n    return len(s)\n}",
        "HumanEval/24": "func LargestDivisor(n int) int {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}",
        "HumanEval/25": "func Factorize(n int) []int {\n    factors := []int{}\n    divisor := 2\n    for divisor <= n {\n        if n%divisor == 0 {\n            factors = append(factors, divisor)\n            n /= divisor\n        } else {\n            divisor++\n        }\n    }\n    return factors\n}",
        "HumanEval/26": "func RemoveDuplicates(numbers []int) []int {\n    counts := make(map[int]int)\n    for _, num := range numbers {\n        counts[num]++\n    }\n    res := make([]int, 0)\n    for _, num := range numbers {\n        if counts[num] == 1 {\n            res = append(res, num)\n        }\n    }\n    return res\n}",
        "HumanEval/27": "func FlipCase(s string) string {\n    var flipped strings.Builder\n    for _, ch := range s {\n        if !unicode.IsLetter(ch) {\n            flipped.WriteRune(ch)\n        } else if unicode.IsLower(ch) {\n            flipped.WriteRune(unicode.ToUpper(ch))\n        } else if unicode.IsUpper(ch) {\n            flipped.WriteRune(unicode.ToLower(ch))\n        }\n    }\n    return flipped.String()\n}",
        "HumanEval/28": "func Concatenate(strs []string) string {\n    return strings.Join(strs, \"\")\n}",
        "HumanEval/29": "func FilterByPrefix(strs []string, prefixStr string) []string {\n    filtered := []string{}\n    for _, str := range strs {\n        if strings.HasPrefix(str, prefixStr) {\n            filtered = append(filtered, str)\n        }\n    }\n    return filtered\n}",
        "HumanEval/30": "func GetPositive(l []int) []int {\n    result := []int{}\n    for _, num := range l {\n        if num > 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}",
        "HumanEval/31": "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n)))); i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}",
        "HumanEval/32": "func Poly(xs []int, x float64) float64 {\n    res := 0.0\n    for i := 0; i < len(xs); i++ {\n        res += float64(xs[i]) * math.Pow(x, float64(i))\n    }\n    return res\n}\nfunc FindZero(xs []int) float64 {\n    x1, x2 := 1.0, -1.0\n    for Poly(xs, x1) * Poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    for math.Abs(x1 - x2) > 1e-10 {\n        mid := (x1 + x2) / 2\n        if Poly(xs, mid) == 0 {\n            return mid\n        } else if Poly(xs, mid) * Poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}",
        "HumanEval/33": "func SortThird(l []int) []int {\n    sortedThird := make([]int, 0)\n    for i, x := range l {\n        if i % 3 == 0 {\n            sortedThird = append(sortedThird, x)\n        }\n    }\n    result := make([]int, len(l))\n    sort.Ints(sortedThird)\n    for i, x := range l {\n        if i % 3 == 0 {\n            result[i] = sortedThird[i / 3]\n        } else {\n            result[i] = x\n        }\n    }\n    return result\n}",
        "HumanEval/34": "func ListUnique(l []int) []int {\n    keys := make(map[int]bool)\n    result := make([]int, 0)\n    for _, x := range l {\n        if _, value := keys[x]; !value {\n            keys[x] = true\n            result = append(result, x)\n        }\n    }\n    sort.Ints(result)\n    return result\n}",
        "HumanEval/35": "func MaxElement(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n    max := l[0]\n    for _, e := range l {\n        if e > max {\n            max = e\n        }\n    }\n    return max\n}",
        "HumanEval/36": "func FizzBuzz(n int) int {\n    cnt := 0\n    for i := 0; i < n; i++ {\n        if i%11 == 0 || i%13 == 0 {\n            cnt += strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n    return cnt\n}",
        "HumanEval/37": "func SortEven(l []int) []int {\n    sortedEven := make([]int, 0)\n    for i, x := range l {\n        if i % 2 == 0 {\n            sortedEven = append(sortedEven, x)\n        }\n    }\n    result := make([]int, len(l))\n    sort.Ints(sortedEven)\n    for i, x := range l {\n        if i % 2 == 0 {\n            result[i] = sortedEven[i / 2]\n        } else {\n            result[i] = x\n        }\n    }\n    return result\n}",
        "HumanEval/38": "func EncodeCyclic(s string) string {\n    var result strings.Builder\n    for i := 0; i < len(s); i += 3 {\n        if i + 3 > len(s) {\n            result.WriteString(s[i:])\n        } else {\n            result.WriteString(s[i+1:i+3])\n            result.WriteByte(s[i])\n        }\n    }\n    return result.String()\n}\nfunc DecodeCyclic(s string) string {\n    return EncodeCyclic(EncodeCyclic(s))\n}",
        "HumanEval/39": "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n)))); i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc PrimeFib(n int) int {\n    f := [2]int{0, 1}\n    cnt := 0\n    for cnt < n {\n        f = [2]int{f[1], f[0] + f[1]}\n        if IsPrime(f[1]) {\n            cnt++\n        }\n    }\n    return f[1]\n}",
        "HumanEval/40": "func TriplesSumToZero(l []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}",
        "HumanEval/41": "func CarRaceCollision(n int) int {\n    return int(math.Pow(float64(n), float64(2)))\n}",
        "HumanEval/42": "func IncrList(l []int) []int {\n    result := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        result[i] = l[i] + 1\n    }\n    return result\n}",
        "HumanEval/43": "func PairsSumToZero(l []int) bool {\n    seen := make(map[int]bool)\n    for _, num := range l {\n        if seen[-num] {\n            return true\n        }\n        seen[num] = true\n    }\n    return false\n}",
        "HumanEval/44": "func ChangeBase(x int, bas int) string {\n    if x == 0 {\n        return \"0\"\n    }\n    digits := []string{}\n    for x > 0 {\n        digits = append([]string{strconv.Itoa(x%bas)}, digits...)\n        x /= bas\n    }\n    return strings.Join(digits, \"\")\n}",
        "HumanEval/45": "func TriangleArea(a int, h int) float64 {\n    return float64(a * h) / 2\n}",
        "HumanEval/46": "func Fib4(n int) int {\n    fib := [4]int{0, 0, 2, 0}\n    for i := 4; i <= n; i++ {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3]\n    }\n    return fib[n % 4]\n}",
        "HumanEval/47": "func Median(l []float64) float64 {\n    sl := make([]float64, len(l))\n    copy(sl, l)\n    sort.Float64s(sl)\n    if len(l) % 2 != 0 {\n        return sl[len(l) / 2]\n    } else {\n        return (sl[len(l) / 2] + sl[len(l) / 2 - 1]) / 2\n    }\n}",
        "HumanEval/48": "func IsPalindrome(s string) bool {\n    runes := []rune(s)\n    for i := 0; i < len(runes)/2; i++ {\n        if runes[i] != runes[len(runes)-1-i] {\n            return false\n        }\n    }\n    return true\n}",
        "HumanEval/49": "func Modp(n int, p int) int {\n    ret := 1\n    for i := 0; i < n; i++ {\n        ret = (ret * 2) % p\n    }\n    return ret\n}",
        "HumanEval/50": "func EncodeShift(s string) string {\n    result := []rune{}\n    for _, ch := range s {\n        result = append(result, (ch - 97 + 5) % 26 + 97)\n    }\n    return string(result)\n}\nfunc DecodeShift(s string) string {\n    result := []rune{}\n    for _, ch := range s {\n        result = append(result, (ch - 97 + 21) % 26 + 97)\n    }\n    return string(result)\n}",
        "HumanEval/51": "func RemoveVowels(txt string) string {\n    vowels := \"aeiouAEIOU\"\n    var result strings.Builder\n    for _, char := range txt {\n        if !strings.ContainsRune(vowels, char) {\n            result.WriteRune(char)\n        }\n    }\n    return result.String()\n}",
        "HumanEval/52": "func BelowThreshold(l []int, t int) bool {\n    for _, x := range l {\n        if x >= t {\n            return false\n        }\n    }\n    return true\n}",
        "HumanEval/53": "func Add(x int, y int) int {\n    return x + y\n}",
        "HumanEval/54": "func SameChars(s0 string, s1 string) bool {\n    set0 := make(map[rune]bool)\n    set1 := make(map[rune]bool)\n    for _, char := range s0 {\n        set0[char] = true\n    }\n    for _, char := range s1 {\n        set1[char] = true\n    }\n    return reflect.DeepEqual(set0, set1)\n}",
        "HumanEval/55": "func Fib(n int) int {\n    if n <= 1 {\n        return n\n    } else {\n        return Fib(n-1) + Fib(n-2)\n    }\n}",
        "HumanEval/56": "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '<' {\n            depth += 1\n        } else if b == '>' {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}",
        "HumanEval/57": "func Monotonic(l []int) bool {\n    diff := make([]int, len(l) - 1)\n    for i := 0; i < len(l) - 1; i++ {\n        diff[i] = l[i + 1] - l[i]\n    }\n    allNeg := true\n    allPos := true\n    for _, x := range diff {\n        if x > 0 {\n            allNeg = false\n        }\n        if x < 0 {\n            allPos = false\n        }\n    }\n    return allNeg || allPos\n}",
        "HumanEval/58": "func Common(l1 []int, l2 []int) []int {\n    result := make([]int, 0)\n    s1 := make(map[int]bool)\n    for _, num := range l1 {\n        s1[num] = true\n    }\n    for _, num := range l2 {\n        if s1[num] {\n            result = append(result, num)\n            s1[num] = false\n        }\n    }\n    sort.Ints(result)\n    return result\n}",
        "HumanEval/59": "func LargestPrimeFactor(n int) int {\n    i := 2\n    for i*i <= n {\n        if n%i != 0 {\n            i++\n        } else {\n            n /= i\n        }\n    }\n    return n\n}",
        "HumanEval/60": "func SumToN(n int) int {\n    sum := 0\n    for i := 0; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}",
        "HumanEval/61": "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '(' {\n            depth += 1\n        } else if b == ')' {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}",
        "HumanEval/62": "func Derivative(xs []int) []int {\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}",
        "HumanEval/63": "func Fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    }\n    a, b, c := 0, 0, 1\n    for n > 2 {\n        a, b, c = b, c, a + b + c\n        n -= 1\n    }\n    return c\n}",
        "HumanEval/64": "func VowelsCount(s string) int {\n    vowels := \"aeiou\"\n    cnt := 0\n    for i := 0; i < len(s); i++ {\n        if strings.Contains(vowels, strings.ToLower(string(s[i]))) || (i == len(s) - 1 && strings.ToLower(string(s[i])) == \"y\") {\n            cnt += 1\n        }\n    }\n    return cnt\n}",
        "HumanEval/65": "func CircularShift(x int, shift int) string {\n    xStr := strconv.Itoa(x)\n    if shift > len(xStr) {\n        runes := []rune(xStr)\n        for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n            runes[i], runes[j] = runes[j], runes[i]\n        }\n        return string(runes)\n    } else {\n        return xStr[len(xStr) - shift:] + xStr[:len(xStr) - shift]\n    }\n}",
        "HumanEval/66": "func DigitSum(s string) int {\n    a := 0\n    for _, c := range s {\n        if unicode.IsUpper(c) {\n            a += int(c)\n        }\n    }\n    return a\n}",
        "HumanEval/67": "func FruitDistribution(s string, n int) int {\n    words := strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    for i, word := range words {\n        if word == \"apples\" {\n            apples, _ = strconv.Atoi(words[i - 1])\n        }\n        if word == \"oranges\" {\n            oranges, _ = strconv.Atoi(words[i - 1])\n        }\n    }\n    return n - apples - oranges\n}",
        "HumanEval/68": "func Pluck(arr []int) []int {\n    minEven := math.MaxInt\n    minIdx := -1\n    for i, n := range arr {\n        if n % 2 == 0 && n < minEven {\n            minEven = n\n            minIdx = i\n        }\n    }\n    if minIdx == -1 {\n        return []int{}\n    }\n    return []int{minEven, minIdx}\n}",
        "HumanEval/69": "func Search(lst []int) int {\n    freqs := make(map[int]int)\n    for _, n := range lst {\n        freqs[n] = freqs[n] + 1\n    }\n    maxVal := math.MinInt\n    for k, v := range freqs {\n        if v >= k && k > maxVal {\n            maxVal = k\n        }\n    }\n    if maxVal == math.MinInt {\n        return -1\n    }\n    return maxVal\n}",
        "HumanEval/70": "func StrangeSortList(lst []int) []int {\n    sl := make([]int, len(lst))\n    copy(sl, lst)\n    sort.Ints(sl)\n    result := make([]int, 0)\n    left, right := 0, len(sl) - 1\n    for left <= right {\n        result = append(result, sl[left])\n        left += 1\n        if left <= right {\n            result = append(result, sl[right])\n            right -= 1\n        }\n    }\n    return result\n}",
        "HumanEval/71": "func TriangleArea(a, b, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n        s := float64(a + b + c) / 2.0\n        return math.Sqrt(float64(s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))))\n    } else {\n        return -1.0\n    }\n}",
        "HumanEval/72": "func WillItFly(q []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n    isPalin := true\n    for i := 0; i < len(q); i++ {\n        if q[i] != q[len(q) - i - 1] {\n            isPalin = false\n            break\n        }\n    }\n    total := 0\n    for i := 0; i < len(q); i++ {\n        total += q[i]\n    }\n    return isPalin && total <= w\n}",
        "HumanEval/73": "func SmallestChange(arr []int) int {\n    ans := 0\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] != arr[len(arr) - i - 1] {\n            ans += 1\n        }\n    }\n    return ans\n}",
        "HumanEval/74": "func TotalMatch(lst1 []string, lst2 []string) []string {\n    cnt1 := 0\n    for _, b := range lst1 {\n        cnt1 += len(b)\n    }\n    cnt2 := 0\n    for _, b := range lst2 {\n        cnt2 += len(b)\n    }\n    if cnt1 <= cnt2 {\n        return lst1\n    } else {\n        return lst2\n    }\n}",
        "HumanEval/75": "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n)))); i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc IsMultiplyPrime(a int) bool {\n    cnt := 0\n    for i := 2; i <= a; i++ {\n        if IsPrime(i) {\n            for a % i == 0 {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}",
        "HumanEval/76": "func IsSimplePower(x int, n int) bool {\n    if n < 2 {\n        return x == n\n    }\n    tmp := 1\n    for tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}",
        "HumanEval/77": "func IsCube(a int) bool {\n    a = int(math.Abs(float64(a)))\n    root := int(math.Round(math.Pow(float64(a), 1.0 / 3.0)))\n    return root * root * root == a\n}",
        "HumanEval/78": "func HexKey(num string) int {\n    result := 0\n    for _, x := range num {\n        if strings.ContainsRune(\"2357BD\", x) {\n            result += 1\n        }\n    }\n    return result\n}",
        "HumanEval/79": "func DecimalToBinary(dec int) string {\n    binary := strconv.FormatInt(int64(dec), 2)\n    return fmt.Sprintf(\"db%sdb\", binary)\n}",
        "HumanEval/80": "func IsHappy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}",
        "HumanEval/81": "func NumericalLetterGrade(grades []float64) []string {\n    result := []string{}\n    for _, g := range grades {\n        switch {\n            case g == 4.0:\n                result = append(result, \"A+\")\n            case g > 3.7:\n                result = append(result, \"A\")\n            case g > 3.3:\n                result = append(result, \"A-\")\n            case g > 3.0:\n                result = append(result, \"B+\")\n            case g > 2.7:\n                result = append(result, \"B\")\n            case g > 2.3:\n                result = append(result, \"B-\")\n            case g > 2.0:\n                result = append(result, \"C+\")\n            case g > 1.7:\n                result = append(result, \"C\")\n            case g > 1.3:\n                result = append(result, \"C-\")\n            case g > 1.0:\n                result = append(result, \"D+\")\n            case g > 0.7:\n                result = append(result, \"D\")\n            case g > 0.0:\n                result = append(result, \"D-\")\n            default:\n                result = append(result, \"E\")\n        }\n    }\n    return result\n}",
        "HumanEval/82": "func PrimeLength(s string) bool {\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(length)))); i++ {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}",
        "HumanEval/83": "func StartsOneEnds(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * int(math.Pow10(n-2))\n}",
        "HumanEval/84": "func Solve(n int) string {\n    digitsSum := 0\n    for _, d := range strconv.Itoa(n) {\n        digit, _ := strconv.Atoi(string(d))\n        digitsSum += digit\n    }\n    return strconv.FormatInt(int64(digitsSum), 2)\n}",
        "HumanEval/85": "func Add(lst []int) int {\n    result := 0\n    for i, x := range lst {\n        if i % 2 == 1 && x % 2 == 0 {\n            result += x\n        }\n    }\n    return result\n}",
        "HumanEval/86": "func AntiShuffle(s string) string {\n    words := strings.Split(s, \" \")\n    for i, word := range words {\n        chars := []rune(word)\n        sort.Slice(chars, func(i, j int) bool {\n            return chars[i] < chars[j]\n        })\n        words[i] = string(chars)\n    }\n    return strings.Join(words, \" \")\n}",
        "HumanEval/87": "func GetRow(lst [][]int, x int) [][]int {\n    coords := [][]int{}\n    for i := 0; i < len(lst); i++ {\n        for j := 0; j < len(lst[i]); j++ {\n            if lst[i][j] == x {\n                coords = append(coords, []int{i, j})\n            }\n        }\n    }\n    sort.Slice(coords, func(i, j int) bool {\n        if coords[i][0] == coords[j][0] {\n            return coords[i][1] > coords[j][1]\n        }\n        return coords[i][0] < coords[j][0]\n    })\n    return coords\n}",
        "HumanEval/88": "func SortArray(arr []int) []int {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    result := make([]int, len(arr))\n    copy(result, arr)\n    if (arr[0] + arr[len(arr) - 1]) % 2 == 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    } else {\n        sort.Ints(result)\n    }\n    return result\n}",
        "HumanEval/89": "func Encrypt(s string) string {\n    var result strings.Builder\n    for _, ch := range s {\n        shifted := ch + 4\n        if shifted > 'z' {\n            shifted -= 26\n        }\n        result.WriteRune(shifted)\n    }\n    return result.String()\n}",
        "HumanEval/90": "func NextSmallest(lst []int) *int {\n    tmp := make([]int, len(lst))\n    copy(tmp, lst)\n    sort.Ints(tmp)\n    sl := []int{}\n    for i := 0; i < len(tmp); i++ {\n        if i == 0 || tmp[i] != tmp[i - 1] {\n            sl = append(sl, tmp[i])\n        }\n    }\n    if len(sl) < 2 {\n        return nil\n    }\n    return &sl[1]\n}",
        "HumanEval/91": "func IsBored(s string) int {\n    sentences := regexp.MustCompile(`[.!?]\\s*`).Split(s, -1)\n    cnt := 0\n    for _, sentence := range sentences {\n        if len(sentence) >= 2 && sentence[:2] == \"I \" {\n            cnt++\n        }\n    }\n    return cnt\n}",
        "HumanEval/92": "func AnyInt(x interface{}, y interface{}, z interface{}) bool {\n    if intX, ok := x.(int); ok {\n        if intY, ok := y.(int); ok {\n            if intZ, ok := z.(int); ok {\n                if (intX+intY == intZ) || (intX+intZ == intY) || (intY+intZ == intX) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}",
        "HumanEval/93": "func Encode(message string) string {\n    vowels := \"aeiouAEIOU\"\n    var result strings.Builder\n    for _, ch := range message {\n        if unicode.IsLetter(ch) {\n            var ch1 rune\n            if unicode.IsLower(ch) {\n                ch1 = unicode.ToUpper(ch)\n            } else {\n                ch1 = unicode.ToLower(ch)\n            }\n            if strings.ContainsRune(vowels, ch1) {\n                ch1 = rune(int(ch1) + 2)\n            }\n            result.WriteRune(ch1)\n        } else {\n            result.WriteRune(ch)\n        }\n    }\n    return result.String()\n}",
        "HumanEval/94": "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n)))); i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc Skjkasdkd(lst []int) int {\n    maxPrime := 0\n    for _, n := range lst {\n        if IsPrime(n) && n > maxPrime {\n            maxPrime = n\n        }\n    }\n    if maxPrime == 0 {\n        return 0\n    }\n    largest := strconv.Itoa(maxPrime)\n    result := 0\n    for _, d := range largest {\n        result += int(d - '0')\n    }\n    return result\n}",
        "HumanEval/95": "func CheckDictCase(d map[string]string) bool {\n    if len(d) == 0 {\n        return false\n    }\n    lower, upper := true, true\n    for k, _ := range d {\n        for _, r := range k {\n            if !unicode.IsLower(r) {\n                lower = false\n            }\n            if !unicode.IsUpper(r) {\n                upper = false\n            }\n        }\n    }\n    return lower || upper\n}",
        "HumanEval/96": "func CountUpTo(n int) []int {\n    primes := make([]int, 0)\n    for num := 2; num < n; num++ {\n        flag := true\n        for _, p := range primes {\n            if num % p == 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            primes = append(primes, num)\n        }\n    }\n    return primes\n}",
        "HumanEval/97": "func Multiply(a int, b int) int {\n    return (int(math.Abs(float64(a))) % 10) * (int(math.Abs(float64(b))) % 10)\n}",
        "HumanEval/98": "func CountUpper(s string) int {\n    vowels := \"AEIOU\"\n    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && strings.Contains(vowels, string(c)) {\n            count++\n        }\n    }\n    return count\n}",
        "HumanEval/99": "func ClosestInteger(value string) int {\n    num, _ := strconv.ParseFloat(value, 64)\n    if num >= 0 {\n        return int(num + 0.5)\n    } else {\n        return int(num - 0.5)\n    }\n}",
        "HumanEval/100": "func MakeAPile(n int) []int {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i] = n + 2 * i\n    }\n    return result\n}",
        "HumanEval/101": "func WordsString(s string) []string {\n    words := regexp.MustCompile(`[, ]`).Split(s, -1)\n    result := make([]string, 0)\n    for _, w := range words {\n        if len(w) > 0 {\n            result = append(result, w)\n        }\n    }\n    return result\n}",
        "HumanEval/102": "func ChooseNum(x int, y int) int {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    if (y != x) {\n        return y - 1;\n    }\n    return -1;\n}",
        "HumanEval/103": "func RoundedAvg(n int, m int) *string {\n    if n > m {\n        return nil\n    }\n    rAvg := int(float64((n + m)) / 2.0 + 0.5)\n    result := strconv.FormatInt(int64(rAvg), 2)\n    return &result\n}",
        "HumanEval/104": "func AllOddDigits(s string) bool {\n    for _, digit := range s {\n        if digit % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc UniqueDigits(x []int) []int {\n    var result []int\n    for _, num := range x {\n        if AllOddDigits(strconv.Itoa(num)) {\n            result = append(result, num)\n        }\n    }\n    sort.Ints(result)\n    return result\n}",
        "HumanEval/105": "func ByLength(arr []int) []string {\n    digitNames := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    var sortedArr []int\n    for _, x := range arr {\n        if 1 <= x && x <= 9 {\n            sortedArr = append(sortedArr, x)\n        }\n    }\n    sort.Slice(sortedArr, func(i, j int) bool {\n        return sortedArr[i] > sortedArr[j]\n    })\n    var result []string\n    for _, x := range sortedArr {\n        result = append(result, digitNames[x - 1])\n    }\n    return result\n}",
        "HumanEval/106": "func F(n int) []int {\n    nums := make([]int, n)\n    for i := 0; i < n; i++ {\n        nums[i] = i + 1\n    }\n    var result []int\n    for _, i := range nums {\n        if i % 2 != 0 {\n            sum := 0\n            for _, j := range nums[:i] {\n                sum += j\n            }\n            result = append(result, sum)\n        } else {\n            product := 1\n            for _, j := range nums[:i] {\n                product *= j\n            }\n            result = append(result, product)\n        }\n    }\n    return result\n}",
        "HumanEval/107": "func IsPalindrome(s string) bool {\n    runes := []rune(s)\n    for i := 0; i < len(runes)/2; i++ {\n        if runes[i] != runes[len(runes)-1-i] {\n            return false\n        }\n    }\n    return true\n}\nfunc EvenOddPalindrome(n int) []int {\n    cnt := []int{0, 0}\n    for i := 1; i <= n; i++ {\n        if IsPalindrome(strconv.Itoa(i)) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}",
        "HumanEval/108": "func DigitsSum(n int) int {\n    nStr := strconv.Itoa(n)\n    if n >= 0 {\n        acc := 0\n        for _, d := range nStr {\n            dInt, _ := strconv.Atoi(string(d))\n            acc += dInt\n        }\n        return acc\n    } else {\n        neg, _ := strconv.Atoi(nStr[0:2])\n        return neg * 2 + DigitsSum(int(math.Abs(float64(n))))\n    }\n}\nfunc CountNums(arr []int) int {\n    cnt := 0\n    for _, n := range arr {\n        if DigitsSum(n) > 0 {\n            cnt += 1\n        }\n    }\n    return cnt\n}",
        "HumanEval/109": "func MoveOneBall(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    sortedArr := make([]int, len(arr))\n    copy(sortedArr, arr)\n    sort.Ints(sortedArr)\n    for i := 0; i < len(arr); i++ {\n        if reflect.DeepEqual(arr[i:], sortedArr[:len(arr) - i]) && reflect.DeepEqual(arr[:i], sortedArr[len(arr) - i:]) {\n            return true\n        }\n    }\n    return false\n}",
        "HumanEval/110": "func CanExchange(lst1 []int, lst2 []int) string {\n    oddCnt := 0\n    evenCnt := 0\n    for _, num := range lst1 {\n        if num % 2 != 0 {\n            oddCnt += 1\n        }\n    }\n    for _, num := range lst2 {\n        if num % 2 == 0 {\n            evenCnt += 1\n        }\n    }\n    if evenCnt >= oddCnt {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}",
        "HumanEval/111": "func Histogram(test string) map[string]int {\n    freq := make(map[string]int)\n    words := strings.Split(test, \" \")\n    for _, w := range words {\n        if len(w) > 0 {\n            freq[w] += 1\n        }\n    }\n    result := make(map[string]int)\n    if len(freq) > 0 {\n        maxFreq := 0\n        for _, v := range freq {\n            if v > maxFreq {\n                maxFreq = v\n            }\n        }   \n        for k, v := range freq {\n            if v == maxFreq {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}",
        "HumanEval/112": "func IsPalindrome(s string) bool {\n    runes := []rune(s)\n    for i := 0; i < len(runes)/2; i++ {\n        if runes[i] != runes[len(runes)-1-i] {\n            return false\n        }\n    }\n    return true\n}\nfunc ReverseDelete(s string, c string) []string {\n    var s1 strings.Builder\n    for _, ch := range s {\n        if !strings.Contains(c, string(ch)) {\n            s1.WriteRune(ch)\n        }\n    }\n    check := \"no\"\n    if IsPalindrome(s1.String()) {\n        check = \"yes\"\n    }\n    return []string{s1.String(), check}\n}",
        "HumanEval/113": "func OddCount(lst []string) []string {\n    var result []string\n    for _, num := range lst {\n        n := 0\n        for _, d := range num {\n            if int(d) % 2 == 1 {\n                n++\n            }\n        }\n        rs := \"the number of odd elements in the string i of the input.\"\n        result = append(result, strings.ReplaceAll(rs, \"i\", strconv.Itoa(n)))\n    }\n    return result\n}",
        "HumanEval/114": "func MinSubArraySum(nums []int) int {\n    minSum := 0\n    curSum := 0\n    for _, n := range nums {\n        if curSum + n > 0 {\n            curSum = 0\n        } else {\n            curSum += n\n        }\n        if curSum < minSum {\n            minSum = curSum\n        }\n    }\n    if minSum == 0 {\n        minSum = math.MaxInt\n        for _, n := range nums {\n            if n < minSum {\n                minSum = n\n            }\n        }\n    }\n    return minSum\n}",
        "HumanEval/115": "func MaxFill(grid [][]int, capacity int) int {\n    result := 0\n    for _, arr := range grid {\n        sum := 0\n        for _, n := range arr {\n            sum += n\n        }\n        result += int(math.Ceil(float64(sum) / float64(capacity)))\n    }\n    return result\n}",
        "HumanEval/116": "func CountOnes(num int) int {\n    return strings.Count(strconv.FormatInt(int64(num), 2), \"1\")\n}\nfunc SortArray(arr []int) []int {\n    result := make([]int, len(arr))\n    copy(result, arr)\n    sort.Slice(result, func(i, j int) bool {\n        if CountOnes(result[i]) == CountOnes(result[j]) {\n            return result[i] < result[j]\n        }\n        return CountOnes(result[i]) < CountOnes(result[j])\n    })\n    return result\n}",
        "HumanEval/117": "func SelectWords(s string, n int) []string {\n    consonants := \"bcdfghjklmnpqrstvwxyz\"\n    strs := strings.Split(s, \" \")\n    words := []string{}\n    for _, w := range strs {\n        if len(w) > 0 {\n            words = append(words, w)\n        }\n    }\n    result := []string{}\n    for _, w := range words {\n        count := 0\n        for _, c := range w {\n            if strings.ContainsRune(consonants, unicode.ToLower(c)) {\n                count++\n            }\n        }\n        if count == n {\n            result = append(result, w)\n        }\n    }\n    return result\n}",
        "HumanEval/118": "func GetClosestVowel(word string) string {\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 2; i > 0; i-- {\n        if strings.ContainsRune(vowels, rune(word[i])) && !strings.ContainsRune(vowels, rune(word[i - 1])) && !strings.ContainsRune(vowels, rune(word[i + 1])) {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}",
        "HumanEval/119": "func Check(s string) bool {\n    depth := 0\n    for _, ch := range s {\n        if ch == '(' {\n            depth++\n        } else {\n            depth--\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\nfunc MatchParens(lst []string) string {\n    s1 := lst[0] + lst[1]\n    s2 := lst[1] + lst[0]\n    if Check(s1) || Check(s2) {\n        return \"Yes\"\n    }\n    return \"No\"\n}",
        "HumanEval/120": "func Maximum(arr []int, k int) []int {\n    if k == 0 {\n        return []int{}\n    }\n    result := make([]int, len(arr))\n    copy(result, arr)\n    sort.Ints(result)\n    return result[len(arr)-k:]\n}",
        "HumanEval/121": "func Solution(lst []int) int {\n    result := 0\n    for i, x := range lst {\n        if i % 2 == 0 && x % 2 != 0 {\n            result += x\n        }\n    }\n    return result\n}",
        "HumanEval/122": "func AddElements(arr []int, k int) int {\n    result := 0\n    for i := 0; i < k; i++ {\n        if len(strconv.Itoa(arr[i])) <= 2 {\n            result += arr[i]\n        }\n    }\n    return result\n}",
        "HumanEval/123": "func GetOddCollatz(n int) []int {\n    collatz := []int{1}\n    for n != 1 {\n        if n % 2 != 0 {\n            collatz = append(collatz, n)\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    sort.Ints(collatz)\n    return collatz\n}",
        "HumanEval/124": "func ValidDate(date string) bool {\n    if len(date) != 10 || date[2] != '-' || date[5] != '-' {\n        return false\n    }\n    m, _ := strconv.Atoi(date[:2])\n    d, _ := strconv.Atoi(date[3:5])\n    for _, i := range []int{1, 3, 5, 7, 8, 10, 12} {\n        if i == m && d >= 1 && d <= 31 {\n            return true\n        }\n    }\n    for _, i := range []int{4, 6, 9, 11} {\n        if i == m && d >= 1 && d <= 30 {\n            return true\n        }\n    }\n    if m == 2 && d >= 1 && d <= 29 {\n        return true\n    }\n    return false\n}",
        "HumanEval/125": "func SplitWords(txt string) []string {\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        cnt := 0\n        for _, c := range txt {\n            if unicode.IsLower(c) && int(c) % 2 == 0 {\n                cnt++\n            }\n        }\n        return []string{strconv.Itoa(cnt)}\n    }\n}",
        "HumanEval/126": "func IsSorted(lst []int) bool {\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[i - 1] {\n            return false\n        }\n    }\n    freq := make(map[int]int)\n    for _, i := range lst {\n        freq[i] += 1\n    }\n    maxFreq := 0\n    for _, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    return len(lst) == 0 || maxFreq <= 2\n}",
        "HumanEval/127": "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n)))); i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc Intersection(interval1 []int, interval2 []int) string {\n    l := max(interval1[0], interval2[0])\n    r := min(interval1[1], interval2[1])\n    length := r - l\n    if length > 0 && IsPrime(length) {\n        return \"YES\"\n    }\n    return \"NO\"\n}",
        "HumanEval/128": "func ProdSigns(arr []int) *int {\n    if len(arr) == 0 {\n        return nil\n    }\n    result := 0\n    for _, n := range arr {\n        if n == 0 {\n            return &result\n        }\n    }\n    sign := 1\n    for _, n := range arr {\n        if n < 0 {\n            sign *= -1\n        }\n        result += int(math.Abs(float64(n)))\n    }\n    result = sign * result\n    return &result\n}",
        "HumanEval/129": "func MinPath(grid [][]int, k int) []int {\n    n := len(grid)\n    minVal := n * n + 1\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if grid[i][j] == 1 {\n                temp := []int{}\n                if i != 0 {\n                    temp = append(temp, grid[i - 1][j])\n                }\n                if j != 0 {\n                    temp = append(temp, grid[i][j - 1])\n                }\n                if i != n - 1 {\n                    temp = append(temp, grid[i + 1][j])\n                }\n                if j != n - 1 {\n                    temp = append(temp, grid[i][j + 1])\n                }\n                minVal = temp[0]\n                for _, v := range temp {\n                    if v < minVal {\n                        minVal = v\n                    }\n                }\n            }\n        }\n    }\n    result := []int{}\n    for i := 0; i < k; i++ {\n        if i % 2 == 0 {\n            result = append(result, 1)\n        } else {\n            result = append(result, minVal)\n        }\n    }\n    return result\n}",
        "HumanEval/130": "func Tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n    }\n    seq := []int{1, 3}\n    for i := 2; i <= n; i++ {\n        if i % 2 == 0 {\n            seq = append(seq, i / 2 + 1)\n        } else {\n            seq = append(seq, seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}",
        "HumanEval/131": "func Digits(n int) int {\n    odds := []int{}\n    for _, d := range strconv.Itoa(n) {\n        if int(d - '0') % 2 == 1 {\n            odds = append(odds, int(d - '0'))\n        }\n    }\n    if len(odds) == 0 {\n        return 0\n    }\n    result := 1\n    for _, d := range odds {\n        result *= d\n    }\n    return result\n}",
        "HumanEval/132": "func IsNested(s string) bool {\n    openIdx := []int{}\n    closeIdx := []int{}\n    for i, ch := range s {\n        switch ch {\n            case '[':\n                openIdx = append(openIdx, i)\n            case ']':\n                closeIdx = append([]int{i}, closeIdx...)\n        }\n    }\n    cnt := 0\n    i := 0\n    l := len(closeIdx)\n    for _, idx := range openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt++\n            i++\n        }\n    }\n    return cnt >= 2\n}",
        "HumanEval/133": "func SumSquares(lst []float64) int {\n    result := 0\n    for _, n := range lst {\n        result += int(math.Pow(math.Ceil(n), 2))\n    }\n    return result\n}",
        "HumanEval/134": "func CheckIfLastCharIsALetter(txt string) bool {\n    if len(txt) == 0 {\n        return false\n    }\n    last := txt[strings.LastIndex(txt, \" \")+1:]\n    return len(last) == 1 && unicode.IsLetter(rune(last[0]))\n}",
        "HumanEval/135": "func CanArrange(arr []int) int {\n    if len(arr) <= 1 {\n        return -1\n    }\n    idx := []int{}\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i - 1] {\n            idx = append(idx, i)\n        }\n    }\n    if len(idx) == 0 {\n        return -1\n    }\n    maxIdx := idx[0]\n    for _, i := range idx {\n        if i > maxIdx {\n            maxIdx = i\n        }\n    }\n    return maxIdx\n}",
        "HumanEval/136": "func LargestSmallestIntegers(lst []int) []*int {\n    var maxNeg *int = nil\n    var minPos *int = nil\n    for _, n := range lst {\n        if n < 0 {\n            if maxNeg == nil {\n                maxNeg = new(int)\n                *maxNeg = n\n            } else if n > *maxNeg {\n                *maxNeg = n\n            }   \n        }\n        if n > 0 {\n            if minPos == nil {\n                minPos = new(int)\n                *minPos = n\n            } else if n < *minPos {\n                *minPos = n\n            }\n        }\n    }\n    return []*int{maxNeg, minPos}\n}",
        "HumanEval/137": "func AnyToReal(o interface{}) float64 {\n    if oStr, ok := o.(string); ok {\n        oFloat, _ := strconv.ParseFloat(strings.ReplaceAll(oStr, \",\", \".\"), 64);\n        return oFloat\n    } else if oInt, ok := o.(int); ok {\n        return float64(oInt)\n    } else if oFloat, ok := o.(float64); ok {\n        return oFloat\n    }\n    panic(\"Type Error\")\n}\nfunc CompareOne(a interface{}, b interface{}) *float64 {\n    a1 := AnyToReal(a)\n    b1 := AnyToReal(b)\n    ptr := new(float64)\n    if a1 == b1 {\n        return nil\n    } else if a1 > b1 {        \n        *ptr = a1\n        return ptr\n    } else {\n        *ptr = b1\n        return ptr\n    }\n}",
        "HumanEval/138": "func IsEqualToSumEven(n int) bool {\n    return n%2 == 0 && n >= 8\n}",
        "HumanEval/139": "func SpecialFactorial(n int) int {\n    fact := 1\n    result := 1\n    for i := 1; i <= n; i++ {\n        fact *= i\n        result *= fact\n    }\n    return result\n}",
        "HumanEval/140": "func FixSpaces(txt string) string {\n    return strings.ReplaceAll(regexp.MustCompile(`\\s{3,}`).ReplaceAllString(txt, \"-\"), \" \", \"_\")\n}",
        "HumanEval/141": "func FileNameCheck(fileName string) string {\n    suf := []string{\"txt\", \"exe\", \"dll\"}\n    lst := strings.Split(fileName, \".\")\n    if len(lst) != 2 || len(lst[0]) == 0 || !unicode.IsLetter(rune(lst[0][0])) {\n        return \"No\"\n    }\n    found := false\n    for _, s := range suf {\n        if s == lst[1] {\n            found = true\n            break\n        }\n    }\n    if !found {\n        return \"No\"\n    }\n    digitCnt := 0\n    for _, ch := range lst[0] {\n        if unicode.IsDigit(ch) {\n            digitCnt++\n        }\n    }\n    if digitCnt > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}",
        "HumanEval/142": "func SumSquares(lst []int) int {\n    result := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 3 == 0 {\n            result += int(math.Pow(float64(lst[i]), 2))\n        } else if i % 4 == 0 {\n            result += int(math.Pow(float64(lst[i]), 3))\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}",
        "HumanEval/143": "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n)))); i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc WordsInSentence(sentence string) string {\n    strs := strings.Split(sentence, \" \")\n    words := []string{}\n    for _, word := range strs {\n        if IsPrime(len(word)) {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words, \" \")\n}",
        "HumanEval/144": "func Simplify(x string, n string) bool {\n    xs := strings.Split(x, \"/\")\n    ns := strings.Split(n, \"/\")\n    num0, _ := strconv.Atoi(xs[0])\n    den0, _ := strconv.Atoi(xs[1])\n    num1, _ := strconv.Atoi(ns[0])\n    den1, _ := strconv.Atoi(ns[1])\n    return (num0 * num1) % (den0 * den1) == 0\n}",
        "HumanEval/145": "func DigitsSum(n int) int {\n    nStr := strconv.Itoa(n)\n    if n >= 0 {\n        acc := 0\n        for _, d := range nStr {\n            dInt, _ := strconv.Atoi(string(d))\n            acc += dInt\n        }\n        return acc\n    } else {\n        neg, _ := strconv.Atoi(nStr[0:2])\n        return neg * 2 + DigitsSum(int(math.Abs(float64(n))))\n    }\n}\nfunc OrderByPoints(nums []int) []int {\n    result := make([]int, len(nums))\n    copy(result, nums)\n    sort.SliceStable(result, func(i, j int) bool {\n        return DigitsSum(result[i]) < DigitsSum(result[j])\n    })\n    return result\n}",
        "HumanEval/146": "func SpecialFilter(nums []int) int {\n    odds := \"13579\"\n    cnt := 0\n    for _, n := range nums {\n        if n > 10 && n % 2 == 1 && strings.Contains(odds, string(strconv.Itoa(n)[0])) {\n            cnt += 1\n        }\n    }\n    return cnt\n}",
        "HumanEval/147": "func GetMaxTriples(n int) int {\n    c := [3]int{0, 0, 0}\n    for i := 1; i <= n; i++ {\n        a := i * i - i + 1\n        c[a % 3] += 1\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n}",
        "HumanEval/148": "func Bf(planet1 string, planet2 string) []string {\n    names := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    l, r := -1, -1\n    for i, name := range names {\n        if name == planet1 {\n            l = i\n        }\n        if name == planet2 {\n            r = i\n        }\n    }\n    if l == -1 || r == -1 {\n        return []string{}\n    }\n    if l > r {\n        l, r = r, l\n    }\n    if l == r {\n        return []string{}\n    }\n    return names[l + 1 : r]\n}",
        "HumanEval/149": "func SortedListSum(lst []string) []string {\n    result := []string{}\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        if len(result[i]) == len(result[j]) {\n            return result[i] < result[j]\n        }\n        return len(result[i]) < len(result[j])\n    })\n    return result\n}",
        "HumanEval/150": "func XOrY(n int, x int, y int) int {\n    if n < 2 {\n        return y\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n)))); i++ {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return x\n}",
        "HumanEval/151": "func DoubleTheDifference(lst []float64) int {\n    acc := 0\n    for _, n := range lst {\n        if n >= 0 && int(n) % 2 == 1 {\n            acc += int(n * n)\n        }\n    }\n    return acc\n}",
        "HumanEval/152": "func Compare(game []int, guess []int) []int {\n    result := make([]int, len(game))\n    for x, i := range game {\n        result[x] = int(math.Abs(float64(i - guess[x])))\n    }\n    return result\n}",
        "HumanEval/153": "func StrongestExtension(className string, extensions []string) string {\n    maxS := math.MinInt\n    maxExt := \"\"\n    for _, ext := range extensions {\n        upper := 0\n        lower := 0\n        for _, c := range ext {\n            if unicode.IsUpper(c) {\n                upper += 1\n            } else if unicode.IsLower(c) {\n                lower += 1\n            }\n        }\n        s := upper - lower\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", className, maxExt)\n}",
        "HumanEval/154": "func CycpatternCheck(a string, b string) bool {\n    if len(a) < len(b) {\n        return false\n    }\n    for i := 0; i < len(b); i++ {\n        if strings.Contains(a, b[i:]+b[:i]) {\n            return true\n        }\n    }\n    return false\n}",
        "HumanEval/155": "func EvenOddCount(num int) []int {\n    ds := strconv.Itoa(int(math.Abs(float64(num))))\n    even := 0\n    for _, d := range ds {\n        if int(d) % 2 == 0 {\n            even++\n        }\n    }\n    return []int{even, len(ds) - even}\n}",
        "HumanEval/156": "func IntToMiniRoman(num int) string {\n    values := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 ,5, 4, 1}\n    numerals := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    var res strings.Builder\n    for i := 0; i < len(values); i++ {\n        for num >= values[i] {\n            res.WriteString(numerals[i])\n            num -= values[i]\n        }\n    }\n    return res.String()\n}",
        "HumanEval/157": "func RightAngleTriangle(a, b, c int) bool {\n    s := []int{a, b, c}\n    sort.Ints(s)\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}",
        "HumanEval/158": "func FindMax(words []string) string {\n    maxCnt := 0\n    maxW := \"\"\n    for _, w := range words {\n        cnt := 0\n        freq := make(map[rune]bool)\n        for _, c := range w {\n            if !freq[c] {\n                freq[c] = true\n                cnt++\n            }\n        }\n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        } else if cnt == maxCnt {\n            maxW = min(maxW, w)\n        }\n    }\n    return maxW\n}",
        "HumanEval/159": "func Eat(num int, need int, remaining int) []int {\n    if need <= remaining {\n        return []int{num + need, remaining - need}\n    } else {\n        return []int{num + remaining, 0}\n    }\n}",
        "HumanEval/160": "func DoAlgebra(operators []string, operands []int) int {\n    ops := make([]string, len(operators))\n    nums := make([]int, len(operands))\n    copy(ops, operators)\n    copy(nums, operands)\n    i := len(ops) - 1\n    for i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = int(math.Pow(float64(nums[i]), float64(nums[i + 1])))\n            nums = append(nums[:i + 1], nums[i + 2:]...)\n            ops = append(ops[:i], ops[i + 1:]...)\n        }\n        i -= 1\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1]\n            nums = append(nums[:i + 1], nums[i + 2:]...)\n            ops = append(ops[:i], ops[i + 1:]...)\n            i -= 1\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i + 1]\n            nums = append(nums[:i + 1], nums[i + 2:]...)\n            ops = append(ops[:i], ops[i + 1:]...)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1]\n            nums = append(nums[:i + 1], nums[i + 2:]...)\n            ops = append(ops[:i], ops[i + 1:]...)\n            i -= 1\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1]\n            nums = append(nums[:i + 1], nums[i + 2:]...)\n            ops = append(ops[:i], ops[i + 1:]...)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}",
        "HumanEval/161": "func Solve(s string) string {\n    flag := false\n    for _, ch := range s {\n        if unicode.IsLetter(ch) {\n            flag = true\n            break\n        }\n    }\n    if !flag {\n        runes := []rune(s)\n        for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n            runes[i], runes[j] = runes[j], runes[i]\n        }\n        return string(runes)\n    }\n    var result strings.Builder\n    for _, ch := range s {\n        if !unicode.IsLetter(ch) {\n            result.WriteRune(ch)\n        } else if unicode.IsUpper(ch) {\n            result.WriteRune(unicode.ToLower(ch))\n        } else if unicode.IsLower(ch) {\n            result.WriteRune(unicode.ToUpper(ch))\n        }\n    }\n    return result.String()\n}",
        "HumanEval/162": "func StringToMd5(txt string) *string {\n    if txt == \"\" {\n        return nil\n    }\n    md5Hash := md5.New()\n    txtBytes := []byte(txt)\n    md5Hash.Write(txtBytes)\n    md5Encoded := hex.EncodeToString(md5Hash.Sum(nil))\n    return &md5Encoded\n}",
        "HumanEval/163": "func GenerateIntegers(a int, b int) []int {\n    lower := int(max(2.0, min(float64(a), float64(b))))\n    upper := int(min(8.0, max(float64(a), float64(b))))\n    numbers := []int{}\n    for i := lower; i <= upper; i++ {\n        if i % 2 == 0 {\n            numbers = append(numbers, i)\n        }\n    }\n    return numbers\n}"
    },
    "java": {
        "HumanEval/0": "class Global {\n    public static boolean hasCloseElements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}",
        "HumanEval/1": "class Global {\n    public static List<String> separateParenGroups(String parenString) {\n        List<String> groups = new ArrayList<>();\n        List<Character> stk = new ArrayList<>();\n        String currentGroup = \"\";\n        String parens = parenString.replace(\" \", \"\");\n        for (char ch : parens.toCharArray()) {\n            if (ch == '(') {\n                stk.add(ch);\n                currentGroup += ch;\n            } else if (ch == ')') {\n                stk.remove(stk.size() - 1);\n                currentGroup += ch;\n                if (stk.isEmpty()) {\n                    groups.add(currentGroup);\n                    currentGroup = \"\";\n                }\n            }\n        }\n        return groups;\n    }\n}",
        "HumanEval/2": "class Global {\n    public static double truncateNumber(double num) {\n        return num - Math.floor(num);\n    }\n}",
        "HumanEval/3": "class Global {\n    public static boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
        "HumanEval/4": "class Global {\n    public static double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = numbers.stream().mapToDouble(x -> x).sum() / numbers.size();\n        double deviation = numbers.stream().mapToDouble(x -> Math.abs(x - mean)).sum();\n        return deviation / numbers.size();\n    }\n}",
        "HumanEval/5": "class Global {\n    public static List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i != 0) {\n                result.add(delimiter);\n            }\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}",
        "HumanEval/6": "class Global {\n    public static List<Integer> parseNestedParens(String parenString) {\n        List<Integer> result = new ArrayList<>();\n        List<String> parenGroups = Stream.of(parenString.split(\" \")).filter(s -> s.length() > 0).toList();\n        for (String group : parenGroups) {\n            int maxDepth = 0;\n            int depth = 0;\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    depth++;\n                    maxDepth = Math.max(maxDepth, depth);\n                } else if (ch == ')') {\n                    depth--;\n                }\n            }\n            result.add(maxDepth);\n        }\n        return result;\n    }\n}",
        "HumanEval/7": "class Global {\n    public static List<String> filterBySubstring(List<String> strs, String substring) {\n        return strs.stream().filter(s -> s.contains(substring)).toList();\n    }\n}",
        "HumanEval/8": "class Global {\n    public static List<Integer> sumProduct(List<Integer> numbers) {\n        int nSum = numbers.stream().reduce(0, (a, b) -> a + b);\n        int nProduct = numbers.stream().reduce(1, (a, b) -> a * b);\n        return List.of(nSum, nProduct);\n    }\n}",
        "HumanEval/9": "class Global {\n    public static List<Integer> rollingMax(List<Integer> numbers) {\n        int maxSoFar = Integer.MIN_VALUE;\n        List<Integer> result = new ArrayList<>();\n        for (int num : numbers) {\n            maxSoFar = Math.max(maxSoFar, num);\n            result.add(maxSoFar);\n        }\n        return result;\n    }\n}",
        "HumanEval/10": "class Global {\n    public static boolean isPalindrome(String s) {\n        return s.equals(new StringBuilder(s).reverse().toString());\n    }\n    public static String makePalindrome(String s) {\n        if (isPalindrome(s)) {\n            return s;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (isPalindrome(s.substring(i))) {\n                return s + new StringBuilder(s.substring(0, i)).reverse().toString();\n            }\n        }\n        return \"\";\n    }\n}",
        "HumanEval/11": "class Global {\n    public static String stringXor(String a, String b) {\n        return IntStream.range(0, a.length()).mapToObj(i -> a.charAt(i) == b.charAt(i) ? '0' : '1').collect(StringBuilder::new, StringBuilder::append, StringBuilder::append).toString();\n        }\n}",
        "HumanEval/12": "class Global {\n    public static Optional<String> longest(List<String> strs) {\n        if (strs.isEmpty()) {\n            return Optional.empty();\n        }\n        String longestS = strs.get(0);\n        for (String s : strs) {\n            if (s.length() > longestS.length()) {\n                longestS = s;\n            }\n        }\n        return Optional.of(longestS);\n    }\n}",
        "HumanEval/13": "class Global {\n    public static int greatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}",
        "HumanEval/14": "class Global {\n    public static List<String> allPrefixes(String s) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            prefixes.add(s.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}",
        "HumanEval/15": "class Global {\n    public static String stringSequence(int n) {\n        return IntStream.range(0, n + 1).mapToObj(i -> Integer.toString(i)).collect(Collectors.joining(\" \"));\n    }\n}",
        "HumanEval/16": "class Global {\n    public static int countDistinctCharacters(String s) {\n        return (int)s.toLowerCase().chars().distinct().count();\n    }\n}",
        "HumanEval/17": "class Global {\n    public static List<Integer> parseMusic(String musicString) {\n        Map<String, Integer> durations = Map.of(\"o\", 4, \"o|\", 2, \".|\", 1);\n        List<String> notes = Stream.of(musicString.split(\" \")).filter(s -> s.length() > 0).toList();\n        return notes.stream().map(note -> durations.get(note)).toList();\n    }\n}",
        "HumanEval/18": "class Global {\n    public static int howManyTimes(String s, String substring) {\n        int times = 0;\n        for (int i = 0; i <= s.length() - substring.length(); i++) {\n            if (s.substring(i, i + substring.length()).equals(substring)) {\n                times += 1;\n            }\n        }\n        return times;\n    }\n}",
        "HumanEval/19": "class Global {\n    public static String sortNumbers(String numbers) {\n        Map<String, Integer> numDict = Map.of(\n            \"zero\", 0,\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3,\n            \"four\", 4,\n            \"five\", 5,\n            \"six\", 6,\n            \"seven\", 7,\n            \"eight\", 8,\n            \"nine\", 9\n        );\n        List<String> numList = Stream.of(numbers.split(\" \")).filter(x -> numDict.containsKey(x)).collect(Collectors.toList());\n        numList.sort((a, b) -> numDict.get(a) - numDict.get(b));\n        return String.join(\" \", numList);\n    }\n}",
        "HumanEval/20": "class Global {\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> sortedNumbers = numbers.stream().sorted().toList();\n        double minDiff = Double.POSITIVE_INFINITY;\n        List<Double> closestPair = List.of();\n        for (int i = 1; i < sortedNumbers.size(); i++) {\n            double diff = sortedNumbers.get(i) - sortedNumbers.get(i - 1);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = List.of(sortedNumbers.get(i - 1), sortedNumbers.get(i));\n            }\n        }\n        return closestPair;\n    }\n}",
        "HumanEval/21": "class Global {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        double minNum = Collections.min(numbers);\n        double maxNum = Collections.max(numbers);\n        if (minNum == maxNum) {\n            return Collections.nCopies(numbers.size(), 0.0);\n        } else {\n            return numbers.stream().map(num -> (num - minNum) / (maxNum - minNum)).toList();\n        }\n    }\n}",
        "HumanEval/22": "class Global {\n    public static List<Integer> filterIntegers(List<Object> values) {\n        return values.stream().filter(value -> value instanceof Integer).map(value -> (Integer) value).toList();\n    }\n}",
        "HumanEval/23": "class Global {\n    public static int strLength(String s) {\n        return s.length();\n    }\n}",
        "HumanEval/24": "class Global {\n    public static int largestDivisor(int n) {\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}",
        "HumanEval/25": "class Global {\n    public static List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.add(divisor);\n                n /= divisor;\n            } else {\n                divisor++;\n            }\n        }\n        return factors;\n    }\n}",
        "HumanEval/26": "class Global {\n    public static List<Integer> removeDuplicates(List<Integer> numbers) {\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (int num : numbers) {\n            counts.put(num, counts.getOrDefault(num, 0) + 1);\n        }\n        List<Integer> res = numbers.stream().filter(num -> counts.get(num) == 1).toList();\n        return res;\n    }\n}",
        "HumanEval/27": "class Global {\n    public static String flipCase(String s) {\n        StringBuilder flipped = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!Character.isLetter(ch)) {\n                flipped.append(ch);\n            } else if (Character.isLowerCase(ch)) {\n                flipped.append(Character.toUpperCase(ch));\n            } else if (Character.isUpperCase(ch)) {\n                flipped.append(Character.toLowerCase(ch));\n            }\n        }\n        return flipped.toString();\n    }\n}",
        "HumanEval/28": "class Global {\n    public static String concatenate(List<String> strs) {\n        return String.join(\"\", strs);\n    }\n}",
        "HumanEval/29": "class Global {\n    public static List<String> filterByPrefix(List<String> strs, String prefixStr) {\n        return strs.stream().filter(s -> s.startsWith(prefixStr)).toList();\n    }\n}",
        "HumanEval/30": "class Global {\n    public static List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(num -> num > 0).toList();\n    }\n}",
        "HumanEval/31": "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
        "HumanEval/32": "class Global {\n    public static double poly(List<Integer> xs, double x) {\n        double res = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            res += xs.get(i) * Math.pow(x, i);\n        }\n        return res;\n    }\n    public static double findZero(List<Integer> xs) {\n        double x1 = 1.0, x2 = -1.0;\n        while (poly(xs, x1) * poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (poly(xs, mid) == 0) {\n                return mid;\n            } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}",
        "HumanEval/33": "class Global {\n    public static List<Integer> sortThird(List<Integer> l) {\n        var sortedThird = IntStream.range(0, l.size()).filter(i -> i % 3 == 0).mapToObj(l::get).sorted().toList();\n        return IntStream.range(0, l.size()).mapToObj(i -> i % 3 == 0 ? sortedThird.get(i/3) : l.get(i)).toList();\n    }\n}",
        "HumanEval/34": "class Global {\n    public static List<Integer> listUnique(List<Integer> l) {\n        return l.stream().distinct().sorted().toList();\n    }\n}",
        "HumanEval/35": "class Global {\n    public static int maxElement(List<Integer> l) {\n        if (l.isEmpty()) {\n            return 0;\n        }\n        return Collections.max(l);\n    }\n}",
        "HumanEval/36": "class Global {\n    public static int fizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += String.valueOf(i).chars().filter(c -> c == '7').count();\n            }\n        }\n        return cnt;\n    }\n}",
        "HumanEval/37": "class Global {\n    public static List<Integer> sortEven(List<Integer> l) {\n        var sortedEven = IntStream.range(0, l.size()).filter(i -> i % 2 == 0).mapToObj(l::get).sorted().toList();\n        return IntStream.range(0, l.size()).mapToObj(i -> i % 2 == 0 ? sortedEven.get(i/2) : l.get(i)).toList();\n    }\n}",
        "HumanEval/38": "class Global {\n    public static String encodeCyclic(String s) {\n        var result = new StringBuilder();\n        for (int i = 0; i < s.length(); i += 3) {\n            if (i + 3 > s.length()) {\n                result.append(s.substring(i));\n            } else {\n                result.append(s.substring(i + 1, i + 3));\n                result.append(s.charAt(i));\n            }\n        }\n        return result.toString();\n    }\n    public static String decodeCyclic(String s) {\n        return encodeCyclic(encodeCyclic(s));\n    }\n}",
        "HumanEval/39": "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static int primeFib(int n) {\n        int[] f = {0, 1};\n        int cnt = 0;\n        while (cnt < n) {\n            f = new int[]{f[1], f[0] + f[1]};\n            if (isPrime(f[1])) {\n                cnt++;\n            }\n        }\n        return f[1];\n    }\n}",
        "HumanEval/40": "class Global {\n    public static boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}",
        "HumanEval/41": "class Global {\n    public static int carRaceCollision(int n) {\n        return (int)Math.pow(n, 2);\n    }\n}",
        "HumanEval/42": "class Global {\n    public static List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).toList();\n    }\n}",
        "HumanEval/43": "class Global {\n    public static boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}",
        "HumanEval/44": "class Global {\n    public static String changeBase(int x, int bas) {\n        if (x == 0) {\n            return \"0\";\n        }\n        List<String> digits = new ArrayList<>();\n        while (x > 0) {\n            digits.add(String.valueOf(x % bas));\n            x /= bas;\n        }\n        Collections.reverse(digits);\n        return String.join(\"\", digits);\n    }\n}",
        "HumanEval/45": "class Global {\n    public static double triangleArea(int a, int h) {\n        return (double) (a * h) / 2;\n    }\n}",
        "HumanEval/46": "class Global {\n    public static int fib4(int n) {\n        int[] fib = {0, 0, 2, 0};\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = IntStream.of(fib).sum();\n        }\n        return fib[n % 4];\n    }\n}",
        "HumanEval/47": "class Global {\n    public static double median(List<Double> l) {\n        List<Double> sl = l.stream().sorted().toList();\n        if (l.size() % 2 != 0) {\n            return sl.get(l.size() / 2);\n        } else {\n            return (sl.get(l.size() / 2) + sl.get(l.size() / 2 - 1)) / 2;\n        }\n    }\n}",
        "HumanEval/48": "class Global {\n    public static boolean isPalindrome(String txt) {\n        return txt.equals(new StringBuilder(txt).reverse().toString());\n    }\n}",
        "HumanEval/49": "class Global {\n    public static int modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;  \n    }\n}",
        "HumanEval/50": "class Global {\n    public static String encodeShift(String s) {\n        var result = s.chars().map(ch -> (char)(((ch - 97 + 5) % 26) + 97)).toArray();\n        return new String(result, 0, result.length);\n    }\n    public static String decodeShift(String s) {\n        var result = s.chars().map(ch -> (char)(((ch - 97 + 21) % 26) + 97)).toArray();\n        return new String(result, 0, result.length);\n    }\n}",
        "HumanEval/51": "class Global {\n    public static String removeVowels(String txt) {\n        String vowels = \"aeiouAEIOU\";\n        return txt.chars().filter(c -> vowels.indexOf(c) == -1).mapToObj(c -> String.valueOf((char)c)).collect(Collectors.joining(\"\"));\n    }\n}",
        "HumanEval/52": "class Global {\n    public static boolean belowThreshold(List<Integer> l, int t) {\n        return l.stream().allMatch(x -> x < t);\n    }\n}",
        "HumanEval/53": "class Global {\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}",
        "HumanEval/54": "class Global {\n    public static boolean sameChars(String s0, String s1) {\n        return s0.chars().boxed().collect(Collectors.toSet()).equals(s1.chars().boxed().collect(Collectors.toSet()));\n    }\n}",
        "HumanEval/55": "class Global {\n    public static int fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n}",
        "HumanEval/56": "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            char b = brackets.charAt(i);\n            if (b == '<') {\n                depth += 1;\n            } else if (b == '>') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}",
        "HumanEval/57": "class Global {\n    public static boolean monotonic(List<Integer> l) {\n        var diff = IntStream.range(0, l.size() - 1).map(i -> l.get(i + 1) - l.get(i)).toArray();\n        return IntStream.of(diff).allMatch(x -> x <= 0) || IntStream.of(diff).allMatch(x -> x >= 0);\n    }\n}",
        "HumanEval/58": "class Global {\n    public static List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        return l1.stream().filter(x -> l2.contains(x)).distinct().sorted().toList();\n    }\n}",
        "HumanEval/59": "class Global {\n    public static int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i != 0) {\n                i++;\n            } else {\n                n /= i;\n            }\n        }\n        return n;\n    }\n}",
        "HumanEval/60": "class Global {\n    public static int sumToN(int n) {\n        return IntStream.range(0, n + 1).sum();\n    }\n}",
        "HumanEval/61": "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            char b = brackets.charAt(i);\n            if (b == '(') {\n                depth += 1;\n            } else if (b == ')') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}",
        "HumanEval/62": "class Global {\n    public static List<Integer> derivative(List<Integer> xs) {\n        return IntStream.range(1, xs.size()).mapToObj(i -> i * xs.get(i)).toList();\n    }\n}",
        "HumanEval/63": "class Global {\n    public static int fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n        int a = 0, b = 0, c = 1;\n        while (n > 2) {\n            int tmp = a + b + c;\n            a = b; b = c; c = tmp;\n            n -= 1;\n        }\n        return c;\n    }\n}",
        "HumanEval/64": "class Global {\n    public static int vowelsCount(String s) {\n        String vowels = \"aeiou\";\n        int cnt = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (vowels.indexOf(Character.toLowerCase(s.charAt(i))) != -1 || (i == s.length() - 1 && Character.toLowerCase(s.charAt(i)) == 'y')) {\n                cnt += 1;\n            }\n        }\n        return cnt;\n    }\n}",
        "HumanEval/65": "class Global {\n    public static String circularShift(int x, int shift) {\n        String xStr = Integer.toString(x);\n        if (shift > xStr.length()) {\n            return new StringBuilder(xStr).reverse().toString();\n        } else {\n            return xStr.substring(xStr.length() - shift) + xStr.substring(0, xStr.length() - shift);\n        }\n    }\n}",
        "HumanEval/66": "class Global {\n    public static int digitSum(String s) {\n        return s.chars().filter(c -> Character.isUpperCase(c)).sum();\n    }\n}",
        "HumanEval/67": "class Global {\n    public static int fruitDistribution(String s, int n) {\n        String[] words = s.split(\" \");\n        int apples = Integer.parseInt(words[Arrays.asList(words).indexOf(\"apples\") - 1]);\n        int oranges = Integer.parseInt(words[Arrays.asList(words).indexOf(\"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n}",
        "HumanEval/68": "class Global {\n    public static List<Integer> pluck(List<Integer> arr) {\n        var evens = arr.stream().filter(n -> n % 2 == 0).toList();\n        if (evens.size() == 0) {\n            return List.of();\n        }\n        var minEven = evens.stream().mapToInt(n -> n).min().getAsInt();\n        return List.of(minEven, arr.indexOf(minEven));\n    }\n}",
        "HumanEval/69": "class Global {\n    public static int search(List<Integer> lst) {\n        Map<Integer, Integer> freqs = new HashMap<>();\n        for (int n : lst) {\n            freqs.put(n, freqs.getOrDefault(n, 0) + 1);\n        }\n        var goodVals = freqs.keySet().stream().filter(k -> freqs.get(k) >= k);\n        return goodVals.max(Comparator.naturalOrder()).orElse(-1);\n    }\n}",
        "HumanEval/70": "class Global {\n    public static List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> sl = lst.stream().sorted().toList();\n        List<Integer> result = new ArrayList<Integer>();\n        int left = 0, right = sl.size() - 1;\n        while (left <= right) {\n            result.add(sl.get(left));\n            left += 1;\n            if (left <= right) {\n                result.add(sl.get(right));\n                right -= 1;\n            }\n        }\n        return result;\n    }\n}",
        "HumanEval/71": "class Global {\n    public static double triangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}",
        "HumanEval/72": "class Global {\n    public static boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        boolean isPalin = IntStream.range(0, q.size()).allMatch(i -> q.get(i) == q.get(q.size() - i - 1));\n        int total = q.stream().mapToInt(x -> x).sum();\n        return isPalin && total <= w;\n    }\n}",
        "HumanEval/73": "class Global {\n    public static int smallestChange(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (arr.get(i) != arr.get(arr.size() - i - 1)) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}",
        "HumanEval/74": "class Global {\n    public static List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int cnt1 = lst1.stream().mapToInt(String::length).sum();\n        int cnt2 = lst2.stream().mapToInt(String::length).sum();\n        return cnt1 <= cnt2 ? lst1 : lst2;\n    }\n}",
        "HumanEval/75": "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static boolean isMultiplyPrime(int a) {\n        int cnt = 0;\n        for (int i = 2; i <= a; i++) {\n            if (isPrime(i)) {\n                while (a % i == 0) {\n                    cnt += 1;\n                    a /= i;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n}",
        "HumanEval/76": "class Global {\n    public static boolean isSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}",
        "HumanEval/77": "class Global {   \n    public static boolean isCube(int a) {\n        a = Math.abs(a);\n        int root = (int)Math.round(Math.pow(a, 1.0 / 3.0));\n        return root * root * root == a;\n    }\n}",
        "HumanEval/78": "class Global {\n    public static int hexKey(String num) {\n        return (int)num.chars().filter(x -> \"2357BD\".indexOf(x) != -1).count();\n    }\n}",
        "HumanEval/79": "class Global {\n    public static String decimalToBinary(int dec) {\n        String binary = Integer.toBinaryString(dec);\n        return String.format(\"db%sdb\", binary);\n    }\n}",
        "HumanEval/80": "class Global {\n    public static boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
        "HumanEval/81": "class Global {\n    public static List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (double grade : grades) {\n            if (grade == 4.0) {\n                result.add(\"A+\");\n            } else if (grade > 3.7) {\n                result.add(\"A\");\n            } else if (grade > 3.3) {\n                result.add(\"A-\");\n            } else if (grade > 3.0) {\n                result.add(\"B+\");\n            } else if (grade > 2.7) {\n                result.add(\"B\");\n            } else if (grade > 2.3) {\n                result.add(\"B-\");\n            } else if (grade > 2.0) {\n                result.add(\"C+\");\n            } else if (grade > 1.7) {\n                result.add(\"C\");\n            } else if (grade > 1.3) {\n                result.add(\"C-\");\n            } else if (grade > 1.0) {\n                result.add(\"D+\");\n            } else if (grade > 0.7) {\n                result.add(\"D\");\n            } else if (grade > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}",
        "HumanEval/82": "class Global {\n    public static boolean primeLength(String s) {\n        int length = s.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
        "HumanEval/83": "class Global {\n    public static int startsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 2 * 9 * (int) Math.pow(10, n - 2);\n    }\n}",
        "HumanEval/84": "class Global {\n    public static String solve(int n) {\n        int digitsSum = String.valueOf(n).chars().map(Character::getNumericValue).sum();\n        return Integer.toBinaryString(digitsSum);\n    }\n}",
        "HumanEval/85": "class Global {\n    public static int add(List<Integer> lst) {\n        return IntStream.range(0, lst.size()).filter(i -> i % 2 == 1 && lst.get(i) % 2 == 0).map(i -> lst.get(i)).sum();\n    }\n}",
        "HumanEval/86": "class Global {\n    public static String antiShuffle(String s) {\n        var words = Stream.of(s.split(\" \")).map(word -> word.chars().sorted().collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString()).toList();\n        return String.join(\" \", words);\n    }\n}",
        "HumanEval/87": "class Global {\n    public static List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    coords.add(List.of(i, j));\n                }\n            }\n        }      \n        return coords.stream().sorted((a,b) -> a.get(0) == b.get(0) ? b.get(1) - a.get(1) : a.get(0) - b.get(0)).toList();\n    }\n}",
        "HumanEval/88": "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return List.of();\n        }\n        if ((arr.get(0) + arr.get(arr.size() - 1)) % 2 == 0) {\n            return arr.stream().sorted((a,b) -> b - a).toList();\n        } else {\n            return arr.stream().sorted((a,b) -> a - b).toList();\n        }\n    }\n}",
        "HumanEval/89": "class Global {\n    public static String encrypt(String s) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            int shifted = s.charAt(i) + 4;\n            if (shifted > 'z') {\n                shifted -= 26;\n            }\n            result.append((char)shifted);\n        }\n        return result.toString();\n    }\n}",
        "HumanEval/90": "class Global {\n    public static Optional<Integer> nextSmallest(List<Integer> lst) {\n        List<Integer> sl = lst.stream().distinct().sorted().toList();\n        if (sl.size() < 2) {\n            return Optional.empty();\n        }\n        return Optional.of(sl.get(1));\n    }\n}",
        "HumanEval/91": "class Global {\n    public static int isBored(String s) {\n        String[] sentences = s.split(\"[.!?]\\\\s*\");\n        return (int)Stream.of(sentences).filter(sentence -> sentence.length() >= 2 && sentence.substring(0, 2).equals(\"I \")).count();\n    }\n}",
        "HumanEval/92": "class Global {\n    public static boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int intX = (int) x;\n            int intY = (int) y;\n            int intZ = (int) z;\n            if ((intX + intY == intZ) || (intX + intZ == intY) || (intY + intZ == intX)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
        "HumanEval/93": "class Global {\n    public static String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder result = new StringBuilder();\n        for (char ch : message.toCharArray()) {\n            if (Character.isAlphabetic(ch)) {\n                char ch1 = Character.isLowerCase(ch) ? Character.toUpperCase(ch) : Character.toLowerCase(ch);\n                if (vowels.indexOf(ch1) != -1) {\n                    ch1 = (char) (ch1 + 2);\n                }\n                result.append(ch1);\n            } else {\n                result.append(ch);\n            }\n        }\n        return result.toString();\n    }\n}",
        "HumanEval/94": "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static int skjkasdkd(List<Integer> lst) {\n        List<Integer> primes = lst.stream().filter(n -> isPrime(n)).toList();\n        if (primes.size() == 0) {\n            return 0;\n        }\n        String largest = String.valueOf(primes.stream().mapToInt(i -> i).max().getAsInt());\n        return largest.chars().map(c -> Character.getNumericValue(c)).sum();\n    }\n}",
        "HumanEval/95": "class Global {\n    public static boolean checkDictCase(Map<String, String> d) {\n        if (d.isEmpty()) {\n            return false;\n        }\n        return d.keySet().stream().allMatch(k -> k.chars().allMatch(c -> Character.isLowerCase(c))) || d.keySet().stream().allMatch(k -> k.chars().allMatch(c -> Character.isUpperCase(c)));\n    }\n}",
        "HumanEval/96": "class Global {\n    public static List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int num = 2; num < n; num++) {\n            int num0 = num;\n            if (primes.stream().allMatch(p -> num0 % p != 0)) {\n                primes.add(num);\n            }\n        }\n        return primes;\n    }\n}",
        "HumanEval/97": "class Global {\n    public static int multiply(int a, int b) {\n        return (Math.abs(a) % 10) * (Math.abs(b) % 10);\n    }\n}",
        "HumanEval/98": "class Global {\n    public static int countUpper(String s) {\n        String vowels = \"AEIOU\";\n        return (int)IntStream.range(0, s.length()).filter(i -> i % 2 == 0 && vowels.contains(String.valueOf(s.charAt(i)))).count();\n    }\n}",
        "HumanEval/99": "class Global {\n    public static int closestInteger(String value) {\n        double num = Double.parseDouble(value);\n        if (num >= 0) {\n            return (int) (num + 0.5);\n        } else {\n            return (int) (num - 0.5);\n        }\n    }\n}",
        "HumanEval/100": "class Global {\n    public static List<Integer> makeAPile(int n) {\n        return IntStream.range(0, n).map(i -> n + 2 * i).boxed().toList();\n    }\n}",
        "HumanEval/101": "class Global {\n    public static List<String> wordsString(String s) {\n        return Stream.of(s.split(\"[, ]\")).filter(w -> w.length() > 0).toList();\n    }\n}",
        "HumanEval/102": "class Global {\n    public static int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        return y != x ? y - 1 : -1;\n    }\n}",
        "HumanEval/103": "class Global {\n    public static Optional<String> roundedAvg(int n, int m) {\n        if (n > m) {\n            return Optional.empty();\n        }\n        int rAvg = (int)((m + n) / 2.0 + 0.5);\n        return Optional.of(Integer.toBinaryString(rAvg));\n    }\n}",
        "HumanEval/104": "class Global {\n    public static boolean allDigitsOdd(String s) {\n        return s.chars().allMatch(digit -> digit % 2 != 0);\n    }\n    public static List<Integer> uniqueDigits(List<Integer> x) {\n        return x.stream().filter(num -> allDigitsOdd(Integer.toString(num))).sorted().toList();\n    }\n}",
        "HumanEval/105": "class Global {\n    public static List<String> byLength(List<Integer> arr) {\n        String[] digitNames = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        List<Integer> sortedArr = arr.stream().filter(x -> 1 <= x && x <= 9).sorted(Comparator.reverseOrder()).toList();\n        return sortedArr.stream().map(x -> digitNames[x - 1]).toList();\n    }\n}",
        "HumanEval/106": "class Global {\n    public static List<Integer> f(int n) {\n        List<Integer> nums = IntStream.rangeClosed(1, n).boxed().collect(Collectors.toList());\n        return nums.stream().map(i -> i % 2 != 0 ? nums.stream().limit(i).reduce(0, Integer::sum) : nums.stream().limit(i).reduce(1, (x, y) -> x * y)).toList();\n    }\n}",
        "HumanEval/107": "class Global {\n    public static boolean isPalindrome(String s) {\n        return s.equals(new StringBuilder(s).reverse().toString());\n    }\n    public static List<Integer> evenOddPalindrome(int n) {\n        List<Integer> cnt = Arrays.asList(0, 0);\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(Integer.toString(i))) {\n                cnt.set(i % 2, cnt.get(i % 2) + 1);\n            }\n        }\n        return cnt;\n    }\n}",
        "HumanEval/108": "class Global {\n    public static int digitsSum(int n) {\n        String nStr = String.valueOf(n);\n        if (n >= 0) {\n            return String.valueOf(n).chars().map(Character::getNumericValue).sum();\n        } else {\n            return Integer.parseInt(nStr.substring(0, 2)) * 2 + digitsSum(Math.abs(n));\n        }\n    }\n    public static int countNums(List<Integer> arr) {\n        return (int) arr.stream().filter(n -> digitsSum(n) > 0).count();\n    }\n}",
        "HumanEval/109": "class Global {\n    public static boolean moveOneBall(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        List<Integer> sortedArr = arr.stream().sorted().toList();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.subList(i, arr.size()).equals(sortedArr.subList(0, arr.size() - i)) && arr.subList(0, i).equals(sortedArr.subList(arr.size() - i, arr.size()))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
        "HumanEval/110": "class Global {\n    public static String canExchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCnt = (int) lst1.stream().filter(n -> n % 2 != 0).count();\n        int evenCnt = (int) lst2.stream().filter(n -> n % 2 == 0).count();\n        return evenCnt >= oddCnt ? \"YES\" : \"NO\";\n    }\n}",
        "HumanEval/111": "class Global {\n    public static Map<String, Integer> histogram(String test) {\n        var freq = new HashMap<String, Integer>();\n        var words = Stream.of(test.split(\" \")).filter(w -> w.length() > 0).toList();\n        for (var w : words) {\n            freq.put(w, freq.getOrDefault(w, 0) + 1);\n        }\n        var result = new HashMap<String, Integer>();\n        if (freq.size() > 0) {\n            var maxFreq = Collections.max(freq.values());\n            for (var entry : freq.entrySet()) {\n                if (entry.getValue() == maxFreq) {\n                    result.put(entry.getKey(), entry.getValue());\n                }\n            }\n        }\n        return result;\n    }\n}",
        "HumanEval/112": "class Global {\n    public static boolean isPalindrome(String s) {\n        return s.equals(new StringBuilder(s).reverse().toString());\n    }\n    public static List<String> reverseDelete(String s, String c) {\n        String s1 = s.chars().filter(ch -> c.indexOf(ch) == -1).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();\n        return List.of(s1, isPalindrome(s1) ? \"yes\" : \"no\");\n    }\n}",
        "HumanEval/113": "class Global {\n    public static List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String num : lst) {\n            int n = (int)num.chars().filter(d -> d % 2 == 1).count();\n            String rs = \"the number of odd elements in the string i of the input.\";\n            result.add(rs.replace(\"i\", String.valueOf(n)));\n        }\n        return result;\n    }\n}",
        "HumanEval/114": "class Global {\n    public static int minSubArraySum(List<Integer> nums) {\n        int minSum = 0;\n        int curSum = 0;\n        for (int n : nums) {\n            curSum = Math.min(curSum + n, 0);\n            minSum = Math.min(curSum, minSum);\n        }\n        if (minSum == 0) {\n            minSum = Collections.min(nums);\n        }\n        return minSum;\n    }\n}",
        "HumanEval/115": "class Global {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        return grid.stream().mapToInt(arr -> (int)Math.ceil(arr.stream().mapToInt(i -> i).sum() / (double)capacity)).sum();\n    }\n}",
        "HumanEval/116": "class Global {\n    public static int countOnes(int num) {\n        return Integer.bitCount(num);\n    }\n    public static List<Integer> sortArray(List<Integer> arr) {\n        return arr.stream().sorted((a, b) -> countOnes(a) == countOnes(b) ? a - b : countOnes(a) - countOnes(b)).toList();\n    }\n}",
        "HumanEval/117": "class Global {\n    public static List<String> selectWords(String s, int n) {\n        String consonants = \"bcdfghjklmnpqrstvwxyz\";\n        List<String> words = Arrays.stream(s.split(\" \")).filter(w -> w.length() > 0).toList();\n        return words.stream().filter(w -> w.chars().filter(c -> consonants.indexOf(Character.toLowerCase(c)) != -1).count() == n).toList();\n    }\n}",
        "HumanEval/118": "class Global {\n    public static String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.contains(word.substring(i, i + 1)) && !vowels.contains(word.substring(i - 1, i)) && !vowels.contains(word.substring(i + 1, i + 2))) {\n                return word.substring(i, i + 1);\n            }\n        }\n        return \"\";\n    }\n}",
        "HumanEval/119": "class Global {\n    public static boolean check(String s) {\n        int depth = 0;\n        for (char ch : s.toCharArray()) {\n            if (ch == '(') {\n                depth++;\n            } else {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n    public static String matchParens(List<String> lst) {\n        String s1 = lst.get(0) + lst.get(1);\n        String s2 = lst.get(1) + lst.get(0);\n        return check(s1) || check(s2) ? \"Yes\" : \"No\";\n    }\n}",
        "HumanEval/120": "class Global {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return new ArrayList<>();\n        }\n        return arr.stream().sorted().skip(arr.size() - k).toList();\n    }\n}",
        "HumanEval/121": "class Global {\n    public static int solution(List<Integer> lst) {\n        return IntStream.range(0, lst.size()).filter(i -> i % 2 == 0 && lst.get(i) % 2 != 0).map(i -> lst.get(i)).sum();\n    }\n}",
        "HumanEval/122": "class Global {\n    public static int addElements(List<Integer> arr, int k) {\n        return (int)arr.stream().limit(k).filter(n -> String.valueOf(n).length() <= 2).mapToInt(n -> n).sum();\n    }\n}",
        "HumanEval/123": "class Global {\n    public static List<Integer> getOddCollatz(int n) {\n        List<Integer> collatz = new ArrayList<>(List.of(1));\n        while (n != 1) {\n            if (n % 2 != 0) {\n                collatz.add(n);\n                n = 3 * n + 1;\n            } else {\n                n = n / 2;\n            }\n        }\n        Collections.sort(collatz);\n        return collatz;\n    }\n}",
        "HumanEval/124": "class Global {\n    public static boolean validDate(String date) {\n        if (date.length() != 10 || date.charAt(2) != '-' || date.charAt(5) != '-') {\n            return false;\n        }\n        int m = Integer.parseInt(date.substring(0, 2));\n        int d = Integer.parseInt(date.substring(3, 5));\n        if (List.of(1, 3, 5, 7, 8, 10, 12).contains(m) && d >= 1 && d <= 31) {\n            return true;\n        }\n        if (List.of(4, 6, 9, 11).contains(m) && d >= 1 && d <= 30) {\n            return true;\n        }\n        if (m == 2 && d >= 1 && d <= 29) {\n            return true;\n        }\n        return false;\n    }\n}",
        "HumanEval/125": "class Global {\n    public static List<String> splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return List.of(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return List.of(txt.split(\",\"));\n        } else {\n            return List.of(String.valueOf(txt.chars().filter(c -> Character.isLowerCase(c) && c % 2 == 0).count()));\n        }\n    }\n}",
        "HumanEval/126": "class Global {\n    public static boolean isSorted(List<Integer> lst) {\n        if (!IntStream.range(1, lst.size()).allMatch(i -> lst.get(i-1) <= lst.get(i))) {\n            return false;\n        }\n        Map<Integer, Integer> freq = new HashMap<>();\n        for (int i : lst) {\n            freq.put(i, freq.getOrDefault(i, 0) + 1);\n        }\n        return freq.values().stream().mapToInt(i -> i).max().orElse(0) <= 2;\n    }\n}",
        "HumanEval/127": "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n    }\n}",
        "HumanEval/128": "class Global {\n    public static Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int sign = arr.stream().filter(n -> n < 0).count() % 2 == 1 ? -1 : 1;\n        return Optional.of(sign * arr.stream().mapToInt(n -> Math.abs(n)).sum());\n    }\n}",
        "HumanEval/129": "class Global {\n    public static List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int minVal = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    minVal = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            result.add(i % 2 == 0 ? 1 : minVal);\n        }\n        return result;\n    }\n}",
        "HumanEval/130": "class Global {\n    public static List<Integer> tri(int n) {\n        if (n == 0) {\n            return List.of(1);\n        }\n        List<Integer> seq = new ArrayList<>(List.of(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                seq.add(i / 2 + 1);\n            } else {\n                seq.add(seq.get(i - 1) + seq.get(i - 2) + (i + 3) / 2);\n            }\n        }\n        return seq;\n    }\n}",
        "HumanEval/131": "class Global {\n    public static int digits(int n) {\n        var odds = String.valueOf(n).chars().filter(d -> Character.getNumericValue(d) % 2 == 1).mapToObj(d -> Character.getNumericValue(d)).toList();\n        return odds.size() > 0 ? odds.stream().reduce((x, y) -> x * y).get() : 0;\n    }\n}",
        "HumanEval/132": "class Global {\n    public static boolean isNested(String s) {\n        List<Integer> openIdx = new ArrayList<>();\n        List<Integer> closeIdx = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            switch (s.charAt(i)) {\n                case '[':\n                    openIdx.add(i); break;\n                case ']':\n                    closeIdx.add(i); break;\n            }\n        }\n        Collections.reverse(closeIdx);\n        int cnt = 0;\n        int i = 0;\n        int l = closeIdx.size();\n        for (int idx : openIdx) {\n            if (i < l && idx < closeIdx.get(i)) {\n                cnt++;\n                i++;\n            }\n        }\n        return cnt >= 2;\n    }\n}",
        "HumanEval/133": "class Global {\n    public static int sumSquares(List<Double> lst) {\n        return lst.stream().mapToInt(n -> (int) Math.pow(Math.ceil(n), 2)).sum();\n    }\n}",
        "HumanEval/134": "class Global {\n    public static boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.isEmpty()) {\n            return false;\n        }\n        String last = txt.substring(txt.lastIndexOf(' ') + 1);\n        return last.length() == 1 && Character.isLetter(last.charAt(0));\n    }\n}",
        "HumanEval/135": "class Global {\n    public static int canArrange(List<Integer> arr) {\n        if (arr.size() <= 1) {\n            return -1;\n        }\n        var idx = IntStream.range(1, arr.size()).filter(i -> arr.get(i) < arr.get(i - 1));\n        return idx.max().orElse(-1);\n    }\n}",
        "HumanEval/136": "class Global {\n    public static List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst) {\n        var neg = lst.stream().filter(i -> i < 0).toList();\n        var pos = lst.stream().filter(i -> i > 0).toList();\n        Optional<Integer> maxNeg = neg.stream().max(Comparator.naturalOrder());\n        Optional<Integer> minPos = pos.stream().min(Comparator.naturalOrder());\n        return List.of(maxNeg, minPos);\n    }\n}",
        "HumanEval/137": "class Global {\n    public static double AnyToReal(Object o) {\n        if (o instanceof String) {\n            return Double.parseDouble(((String) o).replace(\",\", \".\"));\n        } else if (o instanceof Integer) {\n            return (double) (int) o;\n        } else if (o instanceof Double) {\n            return (double) o;\n        }\n        throw new RuntimeException(\"Type Error\");\n    }\n    public static Optional<Double> compareOne(Object a, Object b) {\n        double a1 = AnyToReal(a);\n        double b1 = AnyToReal(b);\n        if (a1 == b1) {\n            return Optional.empty();\n        } else if (a1 > b1) {\n            return Optional.of(a1);\n        } else {\n            return Optional.of(b1);\n        }\n    }\n}",
        "HumanEval/138": "class Global {\n    public static boolean isEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}",
        "HumanEval/139": "class Global {\n    public static int specialFactorial(int n) {\n        int fact = 1;\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}",
        "HumanEval/140": "class Global {\n    public static String fixSpaces(String txt) {\n        return txt.replaceAll(\"\\\\s{3,}\", \"-\").replace(\" \", \"_\");\n    }\n}",
        "HumanEval/141": "class Global {\n    public static String fileNameCheck(String fileName) {\n        var suf = List.of(\"txt\", \"exe\", \"dll\");\n        var lst = fileName.split(\"\\\\.\");\n        if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].length() == 0 || !Character.isLetter(lst[0].charAt(0)) || lst[0].chars().filter(x -> Character.isDigit(x)).count() > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}",
        "HumanEval/142": "class Global {\n    public static int sumSquares(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result += Math.pow(lst.get(i), 2);\n            } else if (i % 4 == 0) {\n                result += Math.pow(lst.get(i), 3);\n            } else {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}",
        "HumanEval/143": "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        return String.join(\" \", Stream.of(words).filter(w -> isPrime(w.length())).toList());\n    }\n}",
        "HumanEval/144": "class Global {\n    public static boolean simplify(String x, String n) {\n        var xs = x.split(\"/\");\n        var ns = n.split(\"/\");\n        int num = Integer.parseInt(xs[0]) * Integer.parseInt(ns[0]);\n        int den = Integer.parseInt(xs[1]) * Integer.parseInt(ns[1]);\n        return num % den == 0;\n    }\n}",
        "HumanEval/145": "class Global {\n    public static int digitsSum(int n) {\n        String nStr = String.valueOf(n);\n        if (n >= 0) {\n            return String.valueOf(n).chars().map(Character::getNumericValue).sum();\n        } else {\n            return Integer.parseInt(nStr.substring(0, 2)) * 2 + digitsSum(Math.abs(n));\n        }\n    }\n    public static List<Integer> orderByPoints(List<Integer> nums) {\n        return nums.stream().sorted(Comparator.comparingInt(Global::digitsSum)).toList();\n    }\n}",
        "HumanEval/146": "class Global {\n    public static int specialFilter(List<Integer> nums) {\n        String odds = \"13579\";\n        return (int)nums.stream().filter(n -> n > 10 && n % 2 == 1 && odds.contains(n.toString().substring(0, 1))).count();\n    }\n}",
        "HumanEval/147": "class Global {\n    public static int getMaxTriples(int n) {\n        int[] c = {0, 0, 0};\n        for (int i = 1; i <= n; i++) {\n            int a = i * i - i + 1;\n            c[a % 3]++;\n        }\n        return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n    }\n}",
        "HumanEval/148": "class Global {\n    public static List<String> bf(String planet1, String planet2) {\n        List<String> names = List.of(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!names.contains(planet1) || !names.contains(planet2)) {\n            return List.of();\n        }\n        int l = names.indexOf(planet1);\n        int r = names.indexOf(planet2);\n        if (l > r) {\n            int tmp = l;\n            l = r;\n            r = tmp;\n        }\n        if (l == r) {\n            return List.of();\n        }\n        return names.subList(l + 1, r);\n    }\n}",
        "HumanEval/149": "class Global {\n    public static List<String> sortedListSum(List<String> lst) {\n        var result = lst.stream().filter(s -> s.length() % 2 == 0).toList();\n        return result.stream().sorted(Comparator.comparingInt(String::length).thenComparing(Comparator.naturalOrder())).toList();\n    }\n}",
        "HumanEval/150": "class Global {\n    public static int xOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}",
        "HumanEval/151": "class Global {\n    public static int doubleTheDifference(List<Double> lst) {\n        return lst.stream().filter(n -> n >= 0 && n % 2 == 1).mapToInt(n -> (int)(n * n)).sum();\n    }\n}",
        "HumanEval/152": "class Global {\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        return IntStream.range(0, game.size()).map(i -> Math.abs(game.get(i) - guess.get(i))).boxed().toList();\n    }\n}",
        "HumanEval/153": "class Global {\n    public static String strongestExtension(String className, List<String> extensions) {\n        int maxS = Integer.MIN_VALUE;\n        String maxExt = \"\";\n        for (String ext : extensions) {\n            int upper = (int)ext.chars().filter(c -> Character.isUpperCase(c)).count();\n            int lower = (int)ext.chars().filter(c -> Character.isLowerCase(c)).count();\n            int s = upper - lower;\n            if (s > maxS) {\n                maxS = s;\n                maxExt = ext;\n            }\n        }\n        return String.format(\"%s.%s\", className, maxExt);\n    }\n}",
        "HumanEval/154": "class Global {\n    public static boolean cycpatternCheck(String a, String b) {\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if (a.contains(b.substring(i) + b.substring(0, i))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
        "HumanEval/155": "class Global {\n    public static List<Integer> evenOddCount(int num) {\n        String ds = String.valueOf(Math.abs(num));\n        int even = (int)ds.chars().filter(d -> d % 2 == 0).count();\n        return List.of(even, ds.length() - even);\n    }\n}",
        "HumanEval/156": "class Global {\n    public static String intToMiniRoman(int num) {\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, \n                        10, 9, 5, 4, 1};\n        String[] numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \n                             \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        StringBuilder res = new StringBuilder();\n        for (int i = 0; i < values.length; i++) {\n            while (num >= values[i]) {\n                res.append(numerals[i]);\n                num -= values[i];\n            }\n        }\n        return res.toString();\n    }\n}",
        "HumanEval/157": "class Global {\n    public static boolean rightAngleTriangle(int a, int b, int c) {\n        int[] s = new int[]{a, b, c};\n        Arrays.sort(s);\n        return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n    }\n}",
        "HumanEval/158": "class Global {\n    public static String findMax(List<String> words) {\n        int maxCnt = 0;\n        String maxW = \"\";\n        for (String w : words) {\n            int cnt = new HashSet<>(Arrays.asList(w.split(\"\"))).size();\n            if (cnt > maxCnt) {\n                maxCnt = cnt;\n                maxW = w;\n            } else if (cnt == maxCnt) {\n                maxW = maxW.compareTo(w) < 0 ? maxW : w;\n            }\n        }\n        return maxW;\n    }\n}",
        "HumanEval/159": "class Global {\n    public static List<Integer> eat(int num, int need, int remaining) {\n        if (need <= remaining) {\n            return List.of(num + need, remaining - need);\n        } else {\n            return List.of(num + remaining, 0);\n        }\n    }\n}",
        "HumanEval/160": "class Global {\n    public static int doAlgebra(List<String> operators, List<Integer> operands) {\n        List<String> ops = new ArrayList<>(operators);\n        List<Integer> nums = new ArrayList<>(operands);\n        int i = ops.size() - 1;\n        while (i >= 0) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.pow(nums.get(i), nums.get(i + 1)));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n            i -= 1;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            } else if (ops.get(i).equals(\"//\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        return nums.get(0);\n    }\n}",
        "HumanEval/161": "class Global {\n    public static String solve(String s) {\n        if (!s.chars().anyMatch(Character::isLetter) ) {\n            return new StringBuilder(s).reverse().toString();\n        }\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray() ) {\n            if (!Character.isLetter(ch) ) {\n                result.append(ch);\n            }\n            else if (Character.isUpperCase(ch) ) {\n                result.append(Character.toLowerCase(ch) );\n            }\n            else if (Character.isLowerCase(ch) ) {\n                result.append(Character.toUpperCase(ch) );\n            }\n        }\n        return result.toString();\n    }\n}",
        "HumanEval/162": "class Global {\n    public static Optional<String> stringToMd5(String txt) {\n        if (txt.isEmpty()) {\n            return Optional.empty();\n        }\n        try {\n            var md5Hash = MessageDigest.getInstance(\"MD5\");\n            byte[] txtBytes = txt.getBytes();\n            md5Hash.update(txtBytes);\n            byte[] hashBytes = md5Hash.digest();\n            StringBuilder md5Encoded = new StringBuilder();\n            for (byte b : hashBytes) {\n                md5Encoded.append(String.format(\"%02x\", b & 0xff));\n            }\n            return Optional.of(md5Encoded.toString());\n        }\n        catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n        }\n    }\n}",
        "HumanEval/163": "class Global {\n    public static List<Integer> generateIntegers(int a, int b) {\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n        return IntStream.rangeClosed(lower, upper).filter(n -> n % 2 == 0).boxed().toList();\n    }\n}"
    },
    "javascript": {
        "HumanEval/0": "export const hasCloseElements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "HumanEval/1": "export const separateParenGroups = (parenString) => {\n    const groups = [];\n    const stk = [];\n    let currentGroup = \"\";\n    const parens = parenString.replace(\" \", \"\");\n    for (const ch of parens) {\n        if (ch === \"(\") {\n            stk.push(ch);\n            currentGroup += ch;\n        } else if (ch === \")\") {\n            stk.pop();\n            currentGroup += ch;\n            if (stk.length === 0) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}",
        "HumanEval/2": "export const truncateNumber = (num) => {\n    return num - Math.floor(num);\n}",
        "HumanEval/3": "export const belowZero = (operations) => {\n    let balance = 0;\n    for (const op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}",
        "HumanEval/4": "export const meanAbsoluteDeviation = (numbers) => {\n    const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n    const deviation = numbers.map((num) => Math.abs(num - mean)).reduce((sum, num) => sum + num, 0);\n    return deviation / numbers.length;\n}",
        "HumanEval/5": "export const intersperse = (numbers, delimiter) => {\n    const result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i !== 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}",
        "HumanEval/6": "export const parseNestedParens = (parenString) => {\n    const result = [];\n    const parenGroups = parenString.split(\" \").filter((s) => s.length > 0);\n    for (let group of parenGroups) {\n        let maxDepth = 0;\n        let depth = 0;\n        for (let ch of group) {\n            if (ch === \"(\") {\n                depth += 1;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch === \")\") {\n                depth -= 1;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}",
        "HumanEval/7": "export const filterBySubstring = (strs, substring) => {\n    return strs.filter(s => s.includes(substring));\n}",
        "HumanEval/8": "export const sumProduct = (numbers) => {\n    const nSum = numbers.reduce((a, b) => a + b, 0);\n    const nProduct = numbers.reduce((a, b) => a * b, 1);\n    return [nSum, nProduct];\n}",
        "HumanEval/9": "export const rollingMax = (numbers) => {\n    let maxSoFar = Number.MIN_VALUE;\n    const result = [];\n    for (const num of numbers) {\n        maxSoFar = Math.max(maxSoFar, num);\n        result.push(maxSoFar);\n    }\n    return result;\n}",
        "HumanEval/10": "export const isPalindrome = (s) => {\n    return s === s.split('').reverse().join('');\n}\nexport const makePalindrome = (s) => {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (isPalindrome(s.slice(i))) {\n            return s + s.slice(0, i).split('').reverse().join('');\n        }\n    }\n    return \"\";\n}",
        "HumanEval/11": "export const stringXor = (a, b) => {\n    return a.split('').map((c, i) => c === b[i] ? '0' : '1').join('');\n}",
        "HumanEval/12": "export const longest = (strs) => {\n    if (!strs.length) {\n        return null;\n    }\n    let longestS = strs[0];\n    for (const s of strs) {\n        if (s.length > longestS.length) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}",
        "HumanEval/13": "export const greatestCommonDivisor = (a, b) => {\n    if (b === 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}",
        "HumanEval/14": "export const allPrefixes = (s) => {\n    const prefixes = [];\n    for (let i = 0; i < s.length; i++) {\n        prefixes.push(s.slice(0, i + 1));\n    }\n    return prefixes;\n}",
        "HumanEval/15": "export const stringSequence = (n) => {\n    return Array.from({ length: n + 1 }, (_, i) => i).join(\" \");\n}",
        "HumanEval/16": "export const countDistinctCharacters = (s) => {\n    return new Set(s.toLowerCase()).size;\n}",
        "HumanEval/17": "export const parseMusic = (musicString) => {\n    const durations = { \"o\": 4, \"o|\": 2, \".|\": 1 };\n    const notes = musicString.split(\" \").filter((s) => s.length > 0);\n    return notes.map(note => durations[note]);\n}",
        "HumanEval/18": "export const howManyTimes = (s, substring) => {\n    let times = 0;\n    for (let i = 0; i <= s.length - substring.length; i++) {\n        if (s.slice(i, i + substring.length) === substring) {\n            times += 1;\n        }\n    }\n    return times;\n}",
        "HumanEval/19": "export const sortNumbers = (numbers) => {\n    const numDict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    const numList = numbers.split(\" \").filter(x => x in numDict);\n    numList.sort((a, b) => numDict[a] - numDict[b]);\n    return numList.join(\" \");\n}",
        "HumanEval/20": "export const findClosestElements = (numbers) => {\n    const sortedNumbers = [...numbers].sort((a, b) => a - b);\n    let minDiff = Infinity;\n    let closestPair = [];\n    for (let i = 1; i < sortedNumbers.length; i++) {\n        const diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}",
        "HumanEval/21": "export const rescaleToUnit = (numbers) => {\n    const minNum = Math.min(...numbers);\n    const maxNum = Math.max(...numbers);\n    if (minNum === maxNum) {\n        return Array(numbers.length).fill(0.0);\n    } else {\n        return numbers.map(num => (num - minNum) / (maxNum - minNum));\n    }\n}",
        "HumanEval/22": "export const filterIntegers = (values) => {\n    return values.filter(x => typeof x === 'number' && Number.isInteger(x));\n}",
        "HumanEval/23": "export const strLength = (s) => {\n    return s.length;\n}",
        "HumanEval/24": "export const largestDivisor = (n) => {\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}",
        "HumanEval/25": "export const factorize = (n) => {\n    const factors = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}",
        "HumanEval/26": "export const removeDuplicates = (numbers) => {\n    const counts = new Map();\n    for (const num of numbers) {\n        counts.set(num, (counts.get(num) || 0) + 1);\n    }\n    const res = numbers.filter(num => counts.get(num) === 1);\n    return res;\n}",
        "HumanEval/27": "export const flipCase = (s) => {\n    const flipped = [];\n    for (const ch of s) {\n        if (ch.match(/[^a-zA-Z]/)) {\n            flipped.push(ch);\n        } else if (ch.match(/[a-z]/)) {\n            flipped.push(ch.toUpperCase());\n        } else if (ch.match(/[A-Z]/)) {\n            flipped.push(ch.toLowerCase());\n        }\n    }\n    return flipped.join('');\n}",
        "HumanEval/28": "export const concatenate = (strs) => {\n    return strs.join(\"\");\n}",
        "HumanEval/29": "export const filterByPrefix = (strs, prefixStr) => {\n    return strs.filter(s => s.startsWith(prefixStr));\n}",
        "HumanEval/30": "export const getPositive = (l) => {\n    return l.filter(num => num > 0);\n}",
        "HumanEval/31": "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "HumanEval/32": "export const poly = (xs, x) => {\n    let res = 0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n}\nexport const findZero = (xs) => {\n    let [x1, x2] = [1.0, -1.0];\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        const mid = (x1 + x2) / 2;\n        if (poly(xs, mid) === 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}",
        "HumanEval/33": "export const sortThird = (l) => {\n    const sortedThird = l.filter((_, i) => i % 3 === 0).sort((a, b) => a - b);\n    return l.map((x, i) => i % 3 === 0 ? sortedThird[i / 3] : x);\n}",
        "HumanEval/34": "export const listUnique = (l) => {\n    return [... new Set(l)].sort((a, b) => a - b);\n}",
        "HumanEval/35": "export const maxElement = (l) => {\n    if (l.length === 0) {\n        return 0;\n    }\n    return Math.max(...l);\n}",
        "HumanEval/36": "export const fizzBuzz = (n) => {\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += String(i).split(\"7\").length - 1;\n        }\n    }\n    return cnt;\n}",
        "HumanEval/37": "export const sortEven = (l) => {\n    const sortedEven = l.filter((_, i) => (i & 1) === 0).sort((a, b) => a - b);\n    return l.map((x, i) => (i & 1) === 0 ? sortedEven[i / 2] : x);\n}",
        "HumanEval/38": "export const encodeCyclic = (s) => {\n    const result = [];\n    for (let i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.push(s.slice(i));\n        } else {\n            result.push(s.slice(i+1, i+3));\n            result.push(s[i]);\n        }\n    }\n    return result.join(\"\");\n}\nexport const decodeCyclic = (s) => {\n    return encodeCyclic(encodeCyclic(s));\n}",
        "HumanEval/39": "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const primeFib = (n) => {\n    let f = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt++;\n        }\n    }\n    return f[1];\n}",
        "HumanEval/40": "export const triplesSumToZero = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "HumanEval/41": "export const carRaceCollision = (n) => {\n    return Math.pow(n, 2);\n}",
        "HumanEval/42": "export const incrList = (l) => {\n    return l.map(i => i + 1);\n}",
        "HumanEval/43": "export const pairsSumToZero = (l) => {\n    const seen = new Set();\n    for (const num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}",
        "HumanEval/44": "export const changeBase = (x, bas) => {\n    if (x === 0) {\n        return \"0\";\n    }\n    const digits = [];\n    while (x > 0) {\n        digits.push((x % bas).toString());\n        x = Math.trunc(x / bas);\n    }\n    return digits.reverse().join(\"\");\n}",
        "HumanEval/45": "export const triangleArea = (a, h) => {\n    return a * h / 2;\n}",
        "HumanEval/46": "export const fib4 = (n) => {\n    let fib = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        fib[i % 4] = fib.reduce((a, b) => a + b);\n    }\n    return fib[n % 4];\n}",
        "HumanEval/47": "export const median = (l) => {\n    const sl = [...l].sort((a, b) => a - b);\n    if (l.length % 2 !== 0) {\n        return sl[Math.trunc(l.length / 2)];\n    }\n    else {\n        return (sl[Math.trunc(l.length / 2)] + sl[Math.trunc(l.length / 2) - 1]) / 2;\n    }\n}",
        "HumanEval/48": "export const isPalindrome = (txt) => {\n    return txt === txt.split('').reverse().join('');\n}",
        "HumanEval/49": "export const modp = (n, p) => { \n    let ret = 1;\n    for (let i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}",
        "HumanEval/50": "export const encodeShift = (s) => {\n    const result = [...s].map(ch => String.fromCharCode((ch.charCodeAt(0) - 97 + 5) % 26 + 97));\n    return result.join('');\n}\nexport const decodeShift = (s) => {\n    const result = [...s].map(ch => String.fromCharCode((ch.charCodeAt(0) - 97 + 21) % 26 + 97));\n    return result.join('');\n}",
        "HumanEval/51": "export const removeVowels = (txt) => {\n    const vowels = \"aeiouAEIOU\";\n    return txt.split('').filter(char => !vowels.includes(char)).join('');\n}",
        "HumanEval/52": "export const belowThreshold = (l, t) => {\n    return l.every(x => x < t);\n}",
        "HumanEval/53": "export const add = (x, y) => {\n    return x + y;\n}",
        "HumanEval/54": "export const sameChars = (s0, s1) => {\n    return _.isEqual(new Set([...s0]), new Set([...s1]));\n}",
        "HumanEval/55": "export const fib = (n) => {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}",
        "HumanEval/56": "export const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b == '<') {\n            depth += 1;\n        } else if (b == '>') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}",
        "HumanEval/57": "export const monotonic = (l) => {\n    const diff = l.slice(1).map((x, i) => x - l[i]);\n    return diff.every(x => x <= 0) || diff.every(x => x >= 0);\n}",
        "HumanEval/58": "export const common = (l1, l2) => {\n    return [...new Set(l1)].filter(element => l2.includes(element)).sort();\n}",
        "HumanEval/59": "export const largestPrimeFactor = (n) => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}",
        "HumanEval/60": "export const sumToN = (n) => {\n    return [...Array(n + 1).keys()].reduce((a, b) => a + b, 0);\n}",
        "HumanEval/61": "export const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b == '(') {\n            depth += 1;\n        } else if (b == ')') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}",
        "HumanEval/62": "export const derivative = (xs) => {\n    return xs.map((x, i) => x * i).slice(1);\n}",
        "HumanEval/63": "export const fibfib = (n) => {\n    if (n <= 1) {\n        return 0;\n    }\n    let a = 0, b = 0, c = 1;\n    while (n > 2) {\n        [a, b, c] = [b, c, a + b + c];\n        n -= 1;\n    }\n    return c;\n}",
        "HumanEval/64": "export const vowelsCount = (s) => {\n    const vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase()) || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}",
        "HumanEval/65": "export const circularShift = (x, shift) => {\n    const xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.split('').reverse().join('');\n    } else {\n        return xStr.slice(-shift) + xStr.slice(0, -shift);\n    }\n}",
        "HumanEval/66": "export const digitSum = (s) => {\n    return s.split('').filter(c => c.match(/[A-Z]/)).map(c => c.charCodeAt(0)).reduce((a, b) => a + b, 0);\n}",
        "HumanEval/67": "export const fruitDistribution = (s, n) => {\n    const words = s.split(' ');\n    const apples = parseInt(words[words.indexOf('apples') - 1]);\n    const oranges = parseInt(words[words.indexOf('oranges') - 1]);\n    return n - apples - oranges;\n}",
        "HumanEval/68": "export const pluck = (arr) => {\n    const evens = arr.filter(n => n % 2 == 0);\n    if (evens.length == 0) {\n        return [];\n    }\n    const minEven = Math.min(...evens);\n    return [minEven, arr.indexOf(minEven)];\n}",
        "HumanEval/69": "export const search = (lst) => {\n    const freqs = new Map();\n    for (let n of lst) {\n        freqs.set(n, (freqs.get(n) || 0) + 1);\n    }\n    const goodVals = [...freqs.entries()].filter(p => p[1] >= p[0]).map(p => p[0]);\n    return Math.max(...goodVals, -1);\n}",
        "HumanEval/70": "export const strangeSortList = (lst) => {\n    const sl = [...lst].sort((a, b) => a - b);\n    const result = [];\n    let left = 0, right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}",
        "HumanEval/71": "export const triangleArea = (a, b, c) => {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    else {\n        return -1.0;\n    } \n}",
        "HumanEval/72": "export const willItFly = (q, w) => {\n    if (q.length == 0) {\n        return false;\n    }\n    const isPalin = Array.from(q.keys()).every(i => q[i] == q[q.length - i - 1]);\n    const total = q.reduce((a, b) => a + b);\n    return isPalin && total <= w;\n}",
        "HumanEval/73": "export const smallestChange = (arr) => {\n    let ans = 0;\n    for (let i = 0; i < Math.trunc(arr.length / 2); i++) {\n        if (arr[i] != arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}",
        "HumanEval/74": "export const totalMatch = (lst1, lst2) => {\n    const cnt1 = lst1.reduce((a, b) => a + b.length, 0);\n    const cnt2 = lst2.reduce((a, b) => a + b.length, 0);\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}",
        "HumanEval/75": "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const isMultiplyPrime = (a) => {\n    let cnt = 0;\n    for (let i = 2; i <= a; i++) {\n        if (isPrime(i)) {\n            while (a % i === 0) {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    return cnt === 3;\n}",
        "HumanEval/76": "export const isSimplePower = (x, n) => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}",
        "HumanEval/77": "export const isCube = (a) => {\n    a = Math.abs(a);\n    const root = Math.round(Math.pow(a, 1.0 / 3.0));\n    return root * root * root === a;\n}",
        "HumanEval/78": "export const hexKey = (num) => {\n    return num.split('').filter((x) => \"2357BD\".includes(x)).length;\n}",
        "HumanEval/79": "export const decimalToBinary = (dec) => {\n    const binary = dec.toString(2);\n    return `db${binary}db`;\n}",
        "HumanEval/80": "export const isHappy = (s) => {\n    if (s.length < 3) {\n        return false;\n    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}",
        "HumanEval/81": "export const numericalLetterGrade = (grades) => {true\n    const result = [];\n    for (const g of grades) {\n        switch (true) {\n            case g === 4.0:\n                result.push(\"A+\"); break;\n            case g > 3.7:\n                result.push(\"A\"); break;\n            case g > 3.3:\n                result.push(\"A-\"); break;\n            case g > 3.0:\n                result.push(\"B+\"); break;\n            case g > 2.7:\n                result.push(\"B\"); break;\n            case g > 2.3:\n                result.push(\"B-\"); break;\n            case g > 2.0:\n                result.push(\"C+\"); break;\n            case g > 1.7:\n                result.push(\"C\"); break;\n            case g > 1.3:\n                result.push(\"C-\"); break;\n            case g > 1.0:\n                result.push(\"D+\"); break;\n            case g > 0.7:\n                result.push(\"D\"); break;\n            case g > 0.0:\n                result.push(\"D-\"); break;\n            default:\n                result.push(\"E\"); break;\n        }\n    }\n    return result;\n}",
        "HumanEval/82": "export const primeLength = (s) => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(length)); i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "HumanEval/83": "export const startsOneEnds = (n) => {\n    if (n === 1) {\n        return 1;\n    }\n    return 2 * 9 * Math.pow(10, n - 2);\n}",
        "HumanEval/84": "export const solve = (n) => {\n    const digitsSum = Array.from(String(n), Number).reduce((a, b) => a + b);\n    return digitsSum.toString(2);\n}",
        "HumanEval/85": "export const add = (lst) => {\n    return lst.filter((x, i) => i % 2 === 1 && x % 2 === 0).reduce((a, b) => a + b, 0);\n}",
        "HumanEval/86": "export const antiShuffle = (s) => {\n    const words = s.split(' ').map(word => word.split('').sort().join(''));\n    return words.join(' ');\n}",
        "HumanEval/87": "export const getRow = (lst, x) => {\n    const coords = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    return coords.sort((a, b) => a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);\n}",
        "HumanEval/88": "export const sortArray = (arr) => {\n    if (arr.length == 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 == 0) {\n        return [...arr].sort((a, b) => b - a);\n    } else {\n        return [...arr].sort((a, b) => a - b);\n    }\n}",
        "HumanEval/89": "export const encrypt = (s) => {\n    const result = [];\n    for (const ch of s) {\n        let shifted = ch.charCodeAt(0) + 4;\n        if (shifted > 'z'.charCodeAt(0)) {\n            shifted -= 26;\n        }\n        result.push(String.fromCharCode(shifted));\n    }\n    return result.join('');\n}",
        "HumanEval/90": "export const nextSmallest = (lst) => {\n    const sl = [...new Set(lst)].sort((a, b) => a - b);\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}",
        "HumanEval/91": "export const isBored = (s) => {\n    const sentences = s.split(/[.!?]\\s*/);\n    return sentences.filter(sentence => sentence.length >= 2 && sentence.slice(0, 2) == \"I \").length;\n}",
        "HumanEval/92": "export const anyInt = (x, y, z) => {\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n        if (x + y === z || x + z === y || y + z === x) {\n            return true;\n        }\n    }\n    return false;\n}",
        "HumanEval/93": "export const encode = (message) => {\n    const vowels = \"aeiouAEIOU\";\n    const result = [];\n    for (const ch of message) {\n        if (ch.match(/[a-z]/i)) {\n            let ch1 = ch.toUpperCase() === ch ? ch.toLowerCase() : ch.toUpperCase();\n            if (vowels.includes(ch1)) {\n                ch1 = String.fromCharCode(ch1.charCodeAt(0) + 2);\n            }\n            result.push(ch1);\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n};",
        "HumanEval/94": "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const skjkasdkd = (lst) => {\n    const primes = lst.filter(n => isPrime(n));\n    if (primes.length === 0) {\n        return 0;\n    }\n    const largest = String(Math.max(...primes));\n    return [...largest].map(c => parseInt(c)).reduce((a, b) => a + b);\n}",
        "HumanEval/95": "export const checkDictCase = (d) => {\n    if (d.size === 0) {\n        return false;\n    }\n    return [...d.keys()].every((k) => RegExp('^[A-Z]+$').test(k)) || [...d.keys()].every((k) => RegExp('^[a-z]+$').test(k));\n}",
        "HumanEval/96": "export const countUpTo = (n) => {\n    const primes = [];\n    for (let num = 2; num < n; num++) {\n        if (primes.every(p => num % p !== 0)) {\n            primes.push(num);\n        }\n    }\n    return primes;\n}",
        "HumanEval/97": "export const multiply = (a, b) => {\n    return (Math.abs(a) % 10) * (Math.abs(b) % 10);\n}",
        "HumanEval/98": "export const countUpper = (s) => {\n    const vowels = \"AEIOU\";\n    return [...s].filter((c, i) => i % 2 === 0 && vowels.includes(c)).length;\n}",
        "HumanEval/99": "export const closestInteger = (value) => {\n    const num = parseFloat(value);\n    if (num >= 0) {\n        return Math.trunc(num + 0.5);\n    } else {\n        return Math.trunc(num - 0.5);\n    }\n}",
        "HumanEval/100": "export const makeAPile = (n) => {\n    return [...Array(n).keys()].map(i => n + 2 * i);\n}",
        "HumanEval/101": "export const wordsString = (s) => {\n    return s.split(/[ ,]/).filter(w => w.length > 0);\n}",
        "HumanEval/102": "export const chooseNum = (x, y) => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return y != x ? y - 1 : -1;\n}",
        "HumanEval/103": "export const roundedAvg = (n, m) => {\n    if (n > m) {\n        return null;\n    }\n    const rAvg = Math.trunc((n + m) / 2.0 + 0.5);\n    return rAvg.toString(2);\n}",
        "HumanEval/104": "export const allDigitsOdd = (s) => {\n    return [...s].every(digit => digit.codePointAt(0) % 2 !== 0);\n}\nexport const uniqueDigits = (x) => {\n    return x.filter(num => allDigitsOdd(String(num))).sort((a, b) => a - b);\n}",
        "HumanEval/105": "export const byLength = (arr) => {\n    const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const sortedArr = arr.filter(x => 1 <= x && x <= 9).sort((a, b) => b - a);\n    return sortedArr.map(x => digitNames[x - 1]);\n}",
        "HumanEval/106": "export const f = (n) => {\n    const nums = [...Array(n).keys()].map(x => x + 1);\n    return nums.map(i => i % 2 !== 0 ? nums.slice(0, i).reduce((x, y) => x + y) : nums.slice(0, i).reduce((x, y) => x * y));\n}",
        "HumanEval/107": "export const isPalindrome = (s) => {\n    return s === s.split('').reverse().join('');\n}\nexport const evenOddPalindrome = (n) => {\n    const cnt = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2]++;\n        }\n    }\n    return cnt\n}",
        "HumanEval/108": "export const digitsSum = (n) => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return Array.from(nStr, Number).reduce((a, b) => a + b);\n    } else {\n        return parseInt(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n    }\n}\nexport const countNums = (arr) => {\n    return arr.filter(n => digitsSum(n) > 0).length;\n}",
        "HumanEval/109": "export const moveOneBall = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    const sortedArr = [...arr].sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        if (_.isEqual(arr.slice(i), sortedArr.slice(0, arr.length - i)) && _.isEqual(arr.slice(0, i), sortedArr.slice(arr.length - i))) {\n            return true;\n        }\n    }\n    return false;\n}",
        "HumanEval/110": "export const canExchange = (lst1, lst2) => {\n    const oddCnt = lst1.filter(n => n % 2 !== 0).length;\n    const evenCnt = lst2.filter(n => n % 2 === 0).length;\n    return evenCnt >= oddCnt ? \"YES\" : \"NO\";\n}",
        "HumanEval/111": "export const histogram = (test) => {\n    const freq = new Map();\n    const words = test.split(\" \").filter(w => w.length > 0);\n    for (let w of words) {\n        freq.set(w, (freq.get(w) || 0) + 1);\n    }\n    const result = new Map();\n    if (freq.size > 0) {\n        const maxFreq = Math.max(...freq.values());\n        for (let [k, v] of freq) {\n            if (v === maxFreq) {\n                result.set(k, v);\n            }\n        }\n    }\n    return result;\n}",
        "HumanEval/112": "export const isPalindrome = (s) => {\n    return s === s.split('').reverse().join('');\n}\nexport const reverseDelete = (s, c) => {\n    const s1 = s.split('').filter(ch => !c.includes(ch)).join('');\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"];\n}",
        "HumanEval/113": "export const oddCount = (lst) => {\n    const result = [];\n    for (const num of lst) {\n        const n = [...num].filter(d => d.charCodeAt(0) % 2 == 1).length;\n        const rs = \"the number of odd elements in the string i of the input.\";\n        result.push(rs.replaceAll(\"i\", n.toString()));\n    }\n    return result;\n}",
        "HumanEval/114": "export const minSubArraySum = (nums) => {\n    let minSum = 0;\n    let curSum = 0;\n    for (const n of nums) {\n        curSum = Math.min(curSum + n, 0);\n        minSum = Math.min(curSum, minSum);\n    }\n    if (minSum == 0) {\n        minSum = Math.min(...nums);\n    }\n    return minSum;\n}",
        "HumanEval/115": "export const maxFill = (grid, capacity) => {\n    return grid.reduce((acc, arr) => acc + Math.ceil(arr.reduce((acc, n) => acc + n, 0) / capacity), 0);\n}",
        "HumanEval/116": "export const countOnes = (num) => {\n    return num.toString(2).split('1').length - 1;\n}\nexport const sortArray = (arr) => {\n    return [...arr].sort((a, b) => countOnes(a) == countOnes(b) ? a - b : countOnes(a) - countOnes(b));\n}",
        "HumanEval/117": "export const selectWords = (s, n) => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = s.split(\" \").filter(w => w.length > 0);\n    return words.filter(w => [...w].filter(c => consonants.includes(c.toLowerCase())).length == n);\n}",
        "HumanEval/118": "export const getClosestVowel = (word) => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}",
        "HumanEval/119": "export const check = (s) => {\n    let depth = 0;\n    for (let ch of s) {\n        if (ch === \"(\") {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\nexport const matchParens = (lst) => {\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    return check(s1) || check(s2) ? \"Yes\" : \"No\";\n}",
        "HumanEval/120": "export const maximum = (arr, k) => {\n    if (k === 0) {\n        return [];\n    }\n    return [...arr].sort((a, b) => a - b).slice(-k);\n}",
        "HumanEval/121": "export const solution = (lst) => {\n    return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) => a + b, 0);\n}",
        "HumanEval/122": "export const addElements = (arr, k) => {\n    return arr.slice(0, k).filter(n => n.toString().length <= 2).reduce((a, b) => a + b, 0);\n}",
        "HumanEval/123": "export const getOddCollatz = (n) => {\n    const collatz = [1];\n    while (n !== 1) {\n        if (n % 2 !== 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    return collatz.sort((a, b) => a - b);\n}",
        "HumanEval/124": "export const validDate = (date) => {\n    if (date.length !== 10 || date[2] !== \"-\" || date[5] !== \"-\") {\n        return false;\n    }\n    const m = parseInt(date.slice(0, 2));\n    const d = parseInt(date.slice(3, 5));\n    if ([1, 3, 5, 7, 8, 10, 12].includes(m) && d >= 1 && d <= 31) {\n        return true;\n    }\n    if ([4, 6, 9, 11].includes(m) && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m === 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}",
        "HumanEval/125": "export const splitWords = (txt) => {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [[...txt].filter(c => /[a-z]/.test(c) && c.charCodeAt(0) % 2 === 0).length.toString()];\n    }\n}",
        "HumanEval/126": "export const isSorted = (lst) => {\n    if (!lst.slice(1).map((n, i) => lst[i] <= n).every(a => a)) {\n        return false;\n    }\n    const freq = new Map();\n    for (const i of lst) {\n        freq.set(i, (freq.get(i) || 0) + 1);\n    }\n    return Math.max(...freq.values()) <= 2;\n}",
        "HumanEval/127": "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const intersection = (interval1, interval2) => {\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n}",
        "HumanEval/128": "export const prodSigns = (arr) => {\n    if (arr.length === 0) {\n        return null;\n    }\n    if (arr.includes(0)) {\n        return 0;\n    }\n    const sign = arr.filter(n => n < 0).length % 2 === 1 ? -1 : 1;\n    return sign * arr.map(n => Math.abs(n)).reduce((a, b) => a + b);\n}",
        "HumanEval/129": "export const minPath = (grid, k) => {\n    const n = grid.length;\n    let minVal = n * n + 1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                const temp = [];\n                if (i !== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j !== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i !== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j !== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                minVal = Math.min(...temp);\n            }\n        }\n    }\n    const result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(i % 2 === 0 ? 1 : minVal);\n    }\n    return result;\n}",
        "HumanEval/130": "export const tri = (n) => {\n    if (n === 0) {\n        return [1];\n    }\n    const seq = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}",
        "HumanEval/131": "export const digits = (n) => {\n    const odds = [...n.toString()].filter(d => parseInt(d) % 2 === 1).map(d => parseInt(d));\n    return odds.length > 0 ? odds.reduce((a, b) => a * b) : 0;\n}",
        "HumanEval/132": "export const isNested = (s) => {\n    const openIdx = [];\n    const closeIdx = [];\n    for (let [i, ch] of [...s].entries()) {\n        switch (ch) {\n            case '[':\n                openIdx.push(i); break;\n            case ']':\n                closeIdx.push(i); break;\n        }\n    }\n    closeIdx.reverse();\n    let cnt = 0;\n    let i = 0;\n    const l = closeIdx.length;\n    for (let idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}",
        "HumanEval/133": "export const sumSquares = (lst) => {\n    return lst.map(n => Math.pow(Math.ceil(n), 2)).reduce((a, b) => a + b, 0);\n}",
        "HumanEval/134": "export const checkIfLastCharIsALetter = (txt) => {\n    if (!txt) {\n        return false;\n    }\n    const last = txt.substring(txt.lastIndexOf(\" \") + 1);\n    return last.length === 1 && /[a-z]/i.test(last[0]);\n}",
        "HumanEval/135": "export const canArrange = (arr) => {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    const idx = [...Array(arr.length).keys()].slice(1).filter(i => arr[i] < arr[i - 1])\n    return Math.max(...idx, -1);\n}",
        "HumanEval/136": "export const largestSmallestIntegers = (lst) => {\n    const neg = lst.filter(i => i < 0);\n    const pos = lst.filter(i => i > 0);\n    const maxNeg = neg.length > 0 ? Math.max(...neg) : null;\n    const minPos = pos.length > 0 ? Math.min(...pos) : null;\n    return [maxNeg, minPos];\n}",
        "HumanEval/137": "export const anyToReal = (o) => {\n    if (typeof o === 'string') {\n        return parseFloat(o.replace(',', '.'));\n    } else if (typeof o === 'number') {\n        return o;\n    }\n    throw new Error('Type Error');\n}\nexport const compareOne = (a, b) => {\n    let a1 = anyToReal(a);\n    let b1 = anyToReal(b);\n    if (a1 === b1) {\n        return null;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n}",
        "HumanEval/138": "export const isEqualToSumEven = (n) => {\n    return n % 2 === 0 && n >= 8;\n}",
        "HumanEval/139": "export const specialFactorial = (n) => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}",
        "HumanEval/140": "export const fixSpaces = (txt) => {\n    return txt.replace(/\\s{3,}/g, \"-\").replace(/\\s/g, \"_\");\n}",
        "HumanEval/141": "export const fileNameCheck = (fileName) => {\n    const suf = [\"txt\", \"exe\", \"dll\"];\n    const lst = fileName.split('.');\n    if (lst.length !== 2 || !suf.includes(lst[1]) || lst[0].length === 0 || !lst[0][0].match(/[a-z]/i) || [...lst[0]].filter(ch => ch.match(/\\d/)).length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}",
        "HumanEval/142": "export const sumSquares = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0) {\n            result += Math.pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}",
        "HumanEval/143": "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    return words.filter(w => isPrime(w.length)).join(\" \");\n}",
        "HumanEval/144": "export const simplify = (x, n) => {\n    const xs = x.split('/');\n    const ns = n.split('/');\n    const num = parseInt(xs[0]) * parseInt(ns[0]);\n    const den = parseInt(xs[1]) * parseInt(ns[1]);\n    return num % den === 0;\n}",
        "HumanEval/145": "export const digitsSum = (n) => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return Array.from(nStr, Number).reduce((a, b) => a + b);\n    } else {\n        return parseInt(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n    }\n}\nexport const orderByPoints = (nums) => {\n    return [...nums].sort((a, b) => digitsSum(a) - digitsSum(b));\n}",
        "HumanEval/146": "export const specialFilter = (nums) => {\n    const odds = \"13579\";\n    return nums.filter(n => n > 10 && n % 2 === 1 && odds.includes(n.toString()[0])).length;\n}",
        "HumanEval/147": "export const getMaxTriples = (n) => {\n    const c = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        const a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}",
        "HumanEval/148": "export const bf = (planet1, planet2) => {\n    const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.includes(planet1) || !names.includes(planet2)) {\n        return [];\n    }\n    let l = names.indexOf(planet1);\n    let r = names.indexOf(planet2);\n    if (l > r) {\n        [l, r] = [r, l];\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n}",
        "HumanEval/149": "export const sortedListSum = (lst) => {\n    const result = lst.filter(s => s.length % 2 === 0);\n    return result.sort((a, b) => {\n        if (a.length === b.length) {\n            return a.localeCompare(b, undefined, { sensitivity: 'base' });\n        }\n        return a.length - b.length;\n    });\n}",
        "HumanEval/150": "export const xOrY = (n, x, y) => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}",
        "HumanEval/151": "export const doubleTheDifference = (lst) => {\n    return lst.filter(n => n >= 0 && n % 2 === 1).reduce((a, b) => a + b * b, 0);\n}",
        "HumanEval/152": "export const compare = (game, guess) => {\n    return game.map((x, i) => Math.abs(x - guess[i]));\n}",
        "HumanEval/153": "export const strongestExtension = (className, extensions) => {\n    let maxS = Number.MIN_SAFE_INTEGER;\n    let maxExt = \"\";\n    for (const ext of extensions) {\n        const upper = [...ext].filter(c => c.toUpperCase() === c).length;\n        const lower = [...ext].filter(c => c.toLowerCase() === c).length;\n        const s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return `${className}.${maxExt}`;\n}",
        "HumanEval/154": "export const cycpatternCheck = (a, b) => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; i++) {\n        if (a.includes(b.slice(i) + b.slice(0, i))) {\n            return true;\n        }\n    }\n    return false;\n}",
        "HumanEval/155": "export const evenOddCount = (num) => {\n    const ds = Math.abs(num).toString();\n    const even = [...ds].filter(d => d.codePointAt(0) % 2 === 0).length;\n    return [even, ds.length - even];\n}",
        "HumanEval/156": "export const intToMiniRoman = (num) => {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 , 5, 4, 1];\n    const numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\" , \"v\", \"iv\", \"i\"];\n    let res = [];\n    for (let i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.push(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join(\"\");\n}",
        "HumanEval/157": "export const rightAngleTriangle = (a, b, c) => {\n    const s = [a, b, c].sort((a, b) => a - b);\n    return s[0] * s[0] + s[1] * s[1] === s[2] * s[2];\n}",
        "HumanEval/158": "export const findMax = (words) => {\n    let maxCnt = 0;\n    let maxW = \"\";\n    for (let w of words) {\n        let cnt = new Set(w).size;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt === maxCnt) {\n            maxW = maxW < w ? maxW : w;\n        }\n    }\n    return maxW;\n}",
        "HumanEval/159": "export const eat = (num, need, remaining) => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}",
        "HumanEval/160": "export const doAlgebra = (operators, operands) => {\n    const ops = [...operators];\n    const nums = [...operands];\n    let i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] === \"**\") {\n            nums[i] = Math.pow(nums[i], nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        } else if (ops[i] === \"//\") {\n            nums[i] = Math.trunc(nums[i] / nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        } else if (ops[i] === \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}",
        "HumanEval/161": "export const solve = (s) => {\n    if (![...s].some(ch => ch.match(/[a-zA-Z]/))) {\n        return s.split('').reverse().join('');\n    }\n    let result = [];\n    for (const ch of s) {\n        if (!ch.match(/[a-zA-Z]/)) {\n            result.push(ch);\n        }\n        else if (ch.match(/[A-Z]/)) {\n            result.push(ch.toLowerCase());\n        }\n        else if (ch.match(/[a-z]/)) {\n            result.push(ch.toUpperCase());\n        }\n    }\n    return result.join('');\n}",
        "HumanEval/162": "export const stringToMd5 = (txt) => {\n    if (!txt) {\n        return null;\n    }\n    const md5Hash = crypto.createHash('md5');\n    const txtBytes = Buffer.from(txt);\n    md5Hash.update(txtBytes);\n    const md5Encoded = md5Hash.digest('hex');\n    return md5Encoded;\n}",
        "HumanEval/163": "export const generateIntegers = (a, b) => {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n    if (lower > upper) {\n        return [];\n    }\n    return Array.from({ length: upper - lower + 1}, (_, i) => i + lower).filter(n => n % 2 === 0);\n}"
    },
    "kotlin": {
        "HumanEval/0": "fun hasCloseElements(numbers: List<Double>, threshold: Double): Boolean {\n    for (i in 0 until numbers.size) {\n        for (j in i + 1 until numbers.size) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true\n            }\n        }\n    }\n    return false\n}",
        "HumanEval/1": "fun separateParenGroups(parenString: String): List<String> {\n    val groups = mutableListOf<String>()\n    val stk = mutableListOf<Char>()\n    var currentGroup = \"\"\n    val parens = parenString.replace(\" \", \"\")\n    for (ch in parens) {\n        if (ch == '(') {\n            stk.add(ch)\n            currentGroup += ch\n        } else if (ch == ')') {\n            stk.removeLast()\n            currentGroup += ch\n            if (stk.isEmpty()) {\n                groups.add(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}",
        "HumanEval/2": "fun truncateNumber(num: Double): Double {\n    return num - floor(num)\n}",
        "HumanEval/3": "fun belowZero(operations: List<Int>): Boolean {\n    var balance = 0\n    for (op in operations) {\n        balance += op\n        if (balance < 0) {\n            return true\n        }\n    }\n    return false\n}",
        "HumanEval/4": "fun meanAbsoluteDeviation(numbers: List<Double>): Double {\n    val mean = numbers.sum() / numbers.size\n    val deviation = numbers.map { abs(it - mean) }.sum()\n    return deviation / numbers.size\n}",
        "HumanEval/5": "fun intersperse(numbers: List<Int>, delimiter: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in numbers.indices) {\n        if (i != 0) {\n            result.add(delimiter)\n        }\n        result.add(numbers[i])\n    }\n    return result\n}",
        "HumanEval/6": "fun parseNestedParens(parenString: String): List<Int> {\n    val result = mutableListOf<Int>()\n    val parenGroups = parenString.split(\" \").filter { it.isNotEmpty() }\n    for (group in parenGroups) {\n        var maxDepth = 0\n        var depth = 0\n        for (ch in group) {\n            if (ch == '(') {\n                depth++\n                maxDepth = max(maxDepth, depth)\n            } else if (ch == ')') {\n                depth--\n            }\n        }\n        result.add(maxDepth)\n    }\n    return result\n}",
        "HumanEval/7": "fun filterBySubstring(strs: List<String>, substring: String): List<String> {\n    return strs.filter { it.contains(substring) }\n}",
        "HumanEval/8": "fun sumProduct(numbers: List<Int>): List<Int> {\n    val nSum = numbers.sum()\n    val nProduct = numbers.fold(1) { acc, i -> acc * i }\n    return listOf(nSum, nProduct)\n}",
        "HumanEval/9": "fun rollingMax(numbers: List<Int>): List<Int> {\n    var maxSoFar = Int.MIN_VALUE\n    val result = mutableListOf<Int>()\n    for (num in numbers) {\n        maxSoFar = max(maxSoFar, num)\n        result.add(maxSoFar)\n    }\n    return result\n}",
        "HumanEval/10": "fun isPalindrome(s: String): Boolean {\n    return s == s.reversed()\n}\nfun makePalindrome(s: String): String {\n    if (isPalindrome(s)) {\n        return s\n    }\n    for (i in s.indices) {\n        if (isPalindrome(s.substring(i))) {\n            return s + s.substring(0, i).reversed()\n        }\n    }\n    return \"\"\n}",
        "HumanEval/11": "fun stringXor(a: String, b: String): String {\n    return a.zip(b) { x, y -> if (x == y) '0' else '1' }.joinToString(\"\")\n}",
        "HumanEval/12": "fun longest(strs: List<String>): String? {\n    if (strs.isEmpty()) {\n        return null\n    }\n    var longestS = strs[0]\n    for (s in strs) {\n        if (s.length > longestS.length) {\n            longestS = s\n        }\n    }\n    return longestS\n}",
        "HumanEval/13": "fun greatestCommonDivisor(a: Int, b: Int): Int {\n    if (b == 0) {\n        return a\n    } else {\n        return greatestCommonDivisor(b, a % b)\n    }\n}",
        "HumanEval/14": "fun allPrefixes(s: String): List<String> {\n    val prefixes = mutableListOf<String>()\n    for (i in 0 until s.length) {\n        prefixes.add(s.substring(0, i + 1))\n    }\n    return prefixes\n}",
        "HumanEval/15": "fun stringSequence(n: Int): String {\n    return (0..n).joinToString(\" \")\n}",
        "HumanEval/16": "fun countDistinctCharacters(s: String): Int {\n    return s.toLowerCase().toCharArray().distinct().size\n}",
        "HumanEval/17": "fun parseMusic(musicString: String): List<Int> {\n    val durations = mapOf(\"o\" to 4, \"o|\" to 2, \".|\" to 1)\n    val notes = musicString.split(\" \").filter { it.isNotEmpty() }\n    return notes.map { durations[it]!! }\n}",
        "HumanEval/18": "fun howManyTimes(s: String, substring: String): Int {\n    var times = 0\n    for (i in 0..(s.length - substring.length)) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1\n        }\n    }\n    return times\n}",
        "HumanEval/19": "fun sortNumbers(numbers: String): String {\n    val numDict = mapOf(\n        \"zero\" to 0,\n        \"one\" to 1,\n        \"two\" to 2,\n        \"three\" to 3,\n        \"four\" to 4,\n        \"five\" to 5,\n        \"six\" to 6,\n        \"seven\" to 7,\n        \"eight\" to 8,\n        \"nine\" to 9\n    )\n    val numList = numbers.split(\" \").filter { it in numDict }.toMutableList()\n    numList.sortBy { numDict[it] }\n    return numList.joinToString(\" \")\n}",
        "HumanEval/20": "fun findClosestElements(numbers: List<Double>): List<Double> {\n    val sortedNumbers = numbers.sorted()\n    var minDiff = Double.POSITIVE_INFINITY\n    var closestPair = listOf<Double>()\n    for (i in 1 until sortedNumbers.size) {\n        val diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if (diff < minDiff) {\n            minDiff = diff\n            closestPair = listOf(sortedNumbers[i - 1], sortedNumbers[i])\n        }\n    }\n    return closestPair\n}",
        "HumanEval/21": "fun rescaleToUnit(numbers: List<Double>): List<Double> {\n    val minNum = numbers.minOrNull() ?: 0.0\n    val maxNum = numbers.maxOrNull() ?: 0.0\n    if (minNum == maxNum) {\n        return List(numbers.size) { 0.0 }\n    } else {\n        return numbers.map { (it - minNum) / (maxNum - minNum) }\n    }\n}",
        "HumanEval/22": "fun filterIntegers(values: List<Any>): List<Int> {\n    return values.filterIsInstance<Int>()\n}",
        "HumanEval/23": "fun strLength(s: String): Int {\n    return s.length\n}",
        "HumanEval/24": "fun largestDivisor(n: Int): Int {\n    for (i in 2 until n) {\n        if (n % i == 0) {\n            return n / i\n        }\n    }\n    return 1\n}",
        "HumanEval/25": "fun factorize(n: Int): List<Int> {\n    val factors = mutableListOf<Int>()\n    var divisor = 2\n    var num = n\n    while (divisor <= num) {\n        if (num % divisor == 0) {\n            factors.add(divisor)\n            num /= divisor\n        } else {\n            divisor++\n        }\n    }\n    return factors\n}",
        "HumanEval/26": "fun removeDuplicates(numbers: List<Int>): List<Int> {\n    val counts = mutableMapOf<Int, Int>()\n    for (num in numbers) {\n        counts[num] = counts.getOrDefault(num, 0) + 1\n    }\n    val res = numbers.filter { counts[it] == 1 }\n    return res    \n}",
        "HumanEval/27": "fun flipCase(s: String): String {\n    var flipped = StringBuilder();\n    for (ch in s) {\n        if (!ch.isLetter()) {\n            flipped.append(ch);\n        } else if (ch.isLowerCase()) {\n            flipped.append(ch.toUpperCase());\n        } else if (ch.isUpperCase()) {\n            flipped.append(ch.toLowerCase());\n        }\n    }\n    return flipped.toString();\n}",
        "HumanEval/28": "fun concatenate(strs: List<String>): String {\n    return strs.joinToString(\"\")\n}",
        "HumanEval/29": "fun filterByPrefix(strs: List<String>, prefixStr: String): List<String> {\n    return strs.filter { it.startsWith(prefixStr) }\n}",
        "HumanEval/30": "fun getPositive(l: List<Int>): List<Int> {\n    return l.filter { it > 0 }\n}",
        "HumanEval/31": "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false;\n    }\n    for (i in 2..floor(sqrt(n.toDouble())).toInt()) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "HumanEval/32": "fun poly(xs: List<Int>, x: Double): Double {\n    var res = 0.0\n    for (i in xs.indices) {\n        res += xs[i] * x.pow(i.toDouble())\n    }\n    return res\n}\nfun findZero(xs: List<Int>): Double {\n    var (x1, x2) = listOf(1.0, -1.0)\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2\n        x2 *= 2\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        val mid = (x1 + x2) / 2\n        if (poly(xs, mid) == 0.0) {\n            return mid\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}",
        "HumanEval/33": "fun sortThird(l: List<Int>): List<Int> {\n    val sortedThird = l.filterIndexed { i, _ -> i % 3 == 0 }.sorted()\n    return l.mapIndexed { i, x -> if (i % 3 == 0) sortedThird[i / 3] else x }\n}",
        "HumanEval/34": "fun listUnique(l: List<Int>): List<Int> {\n    return l.toSet().sorted()\n}",
        "HumanEval/35": "fun maxElement(l: List<Int>): Int {\n    if (l.isEmpty()) {\n        return 0\n    }\n    return l.maxOrNull()!!\n}",
        "HumanEval/36": "fun fizzBuzz(n: Int): Int {\n    var cnt = 0\n    for (i in 0 until n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString().count { it == '7' }\n        }\n    }\n    return cnt\n}",
        "HumanEval/37": "fun sortEven(l: List<Int>): List<Int> {\n    val sortedEven = l.filterIndexed { i, _ -> i % 2 == 0 }.sorted()\n    return l.mapIndexed { i, x -> if (i % 2 == 0) sortedEven[i / 2] else x }\n}",
        "HumanEval/38": "fun encodeCyclic(s: String): String {\n    val result = StringBuilder()\n    for (i in 0 until s.length step 3) {\n        if (i + 3 > s.length) {\n            result.append(s.substring(i))\n        } else {\n            result.append(s.substring(i + 1, i + 3))\n            result.append(s[i])\n        }\n    }\n    return result.toString()\n}\nfun decodeCyclic(s: String): String {\n    return encodeCyclic(encodeCyclic(s))\n}",
        "HumanEval/39": "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false;\n    }\n    for (i in 2..floor(sqrt(n.toDouble())).toInt()) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfun primeFib(n: Int): Int {\n    var f = listOf(0, 1)\n    var cnt = 0\n    while (cnt < n) {\n        f = listOf(f[1], f[0] + f[1])\n        if (isPrime(f[1])) {\n            cnt++\n        }\n    }\n    return f[1]\n}",
        "HumanEval/40": "fun triplesSumToZero(l: List<Int>): Boolean {\n    for (i in 0 until l.size) {\n        for (j in i + 1 until l.size) {\n            for (k in j + 1 until l.size) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "HumanEval/41": "fun carRaceCollision(n: Int): Int {\n    return n.toDouble().pow(2).toInt()\n}",
        "HumanEval/42": "fun incrList(l: List<Int>): List<Int> {\n    return l.map { it + 1 }\n}",
        "HumanEval/43": "fun pairsSumToZero(l: List<Int>): Boolean {\n    val seen = mutableSetOf<Int>()\n    for (num in l) {\n        if (-num in seen) {\n            return true\n        }\n        seen.add(num)\n    }\n    return false\n}",
        "HumanEval/44": "fun changeBase(x: Int, bas: Int): String {\n    var x = x\n    if (x == 0) {\n        return \"0\"\n    }\n    val digits = mutableListOf<String>()\n    while (x > 0) {\n        digits.add((x % bas).toString())\n        x /= bas\n    }\n    return digits.reversed().joinToString(\"\")\n}",
        "HumanEval/45": "fun triangleArea(a: Int, h: Int): Double {\n    return (a * h).toDouble() / 2\n}",
        "HumanEval/46": "fun fib4(n: Int): Int {\n    val fib = mutableListOf(0, 0, 2, 0)\n    for (i in 4..n) {\n        fib[i % 4] = fib.sum()\n    }\n    return fib[n % 4]\n}",
        "HumanEval/47": "fun median(l: List<Double>): Double {\n    val sl = l.sorted()\n    if (l.size % 2 != 0) {\n        return sl[l.size / 2]\n    } else {\n        return (sl[l.size / 2] + sl[l.size / 2 - 1]) / 2\n    }\n}",
        "HumanEval/48": "fun isPalindrome(txt: String): Boolean {\n    return txt == txt.reversed()\n}",
        "HumanEval/49": "fun modp(n: Int, p: Int): Int {\n    var ret = 1;\n    for (i in 0..n-1) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}",
        "HumanEval/50": "fun encodeShift(s: String): String {\n    val result = s.toList().map { ((it.toInt() - 97 + 5) % 26 + 97).toChar() }\n    return result.joinToString(\"\")\n}\nfun decodeShift(s: String): String {\n    val result = s.toList().map { ((it.toInt() - 97 + 21) % 26 + 97).toChar() }\n    return result.joinToString(\"\")\n}",
        "HumanEval/51": "fun removeVowels(txt: String): String {\n    val vowels = \"aeiouAEIOU\"\n    return txt.filter { char -> char !in vowels }\n}",
        "HumanEval/52": "fun belowThreshold(l: List<Int>, t: Int): Boolean {\n    return l.all { it < t }\n}",
        "HumanEval/53": "fun add(x: Int, y: Int): Int {\n    return x + y\n}",
        "HumanEval/54": "fun sameChars(s0: String, s1: String): Boolean {\n    return s0.toSet() == s1.toSet()\n}",
        "HumanEval/55": "fun fib(n: Int): Int {\n    if (n <= 1) {\n        return n\n    } else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}",
        "HumanEval/56": "fun correctBracketing(brackets: String): Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == '<') {\n            depth += 1\n        } else if (b == '>') {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}",
        "HumanEval/57": "fun monotonic(l: List<Int>): Boolean {\n    val diff = l.zip(l.drop(1)).map { it.second - it.first }\n    return diff.all { it <= 0 } || diff.all { it >= 0 }    \n}",
        "HumanEval/58": "fun common(l1: List<Int>, l2: List<Int>): List<Int> {\n    return l1.intersect(l2).toList().sorted()\n}",
        "HumanEval/59": "fun largestPrimeFactor(n: Int): Int {\n    var n = n\n    var i = 2    \n    while (i * i <= n) {\n        if (n % i != 0) {\n            i++\n        } else {\n            n /= i\n        }\n    }\n    return n\n}",
        "HumanEval/60": "fun sumToN(n: Int): Int {\n    return (0..n).sum()\n}",
        "HumanEval/61": "fun correctBracketing(brackets: String): Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == '(') {\n            depth += 1\n        } else if (b == ')') {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}",
        "HumanEval/62": "fun derivative(xs: List<Int>): List<Int> {\n    return xs.mapIndexed { i, x -> x * i }.drop(1)\n}",
        "HumanEval/63": "fun fibfib(n: Int): Int {\n    if (n <= 1) {\n        return 0;\n    }\n    var (a, b, c) = listOf(0, 0, 1);\n    var n = n;\n    while (n > 2) {\n        a = b.also { b = c.also { c = a + b + c } };\n        n -= 1;\n    }\n    return c;\n}",
        "HumanEval/64": "fun vowelsCount(s: String): Int {\n    val vowels = \"aeiou\";\n    var cnt = 0;\n    for (i in 0 until s.length) {\n        if (vowels.contains(s[i].toLowerCase()) || (i == s.length - 1 && s[i].toLowerCase() == 'y')) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}",
        "HumanEval/65": "fun circularShift(x: Int, shift: Int): String {\n    val xStr = x.toString()\n    if (shift > xStr.length) {\n        return xStr.reversed()\n    } else {\n        return xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift)\n    }\n}",
        "HumanEval/66": "fun digitSum(s: String): Int {\n    return s.filter { it.isUpperCase() }.sumBy { it.toInt() }\n}",
        "HumanEval/67": "fun fruitDistribution(s: String, n: Int): Int {\n    val words = s.split(' ')\n    val apples = words[words.indexOf(\"apples\") - 1].toInt()\n    val oranges = words[words.indexOf(\"oranges\") - 1].toInt()\n    return n - apples - oranges\n}",
        "HumanEval/68": "fun pluck(arr: List<Int>): List<Int> {\n    val evens = arr.filter { it % 2 == 0 }\n    if (evens.isEmpty()) {\n        return emptyList()\n    }\n    val minEven = evens.min()\n    return listOf(minEven, arr.indexOf(minEven))\n}",
        "HumanEval/69": "fun search(lst: List<Int>): Int {\n    val freqs = mutableMapOf<Int, Int>()\n    for (n in lst) {\n        freqs[n] = freqs.getOrDefault(n, 0) + 1\n    }\n    val goodVals = freqs.filter { it.value >= it.key }.map { it.key }\n    return goodVals.maxOrNull() ?: -1\n}",
        "HumanEval/70": "fun strangeSortList(lst: List<Int>): List<Int> {\n    val sl = lst.sorted()\n    val result = mutableListOf<Int>()\n    var (left, right) = listOf(0, sl.size - 1)\n    while (left <= right) {\n        result.add(sl[left])\n        left += 1\n        if (left <= right) {\n            result.add(sl[right])\n            right -= 1\n        }\n    }\n    return result\n}",
        "HumanEval/71": "fun triangleArea(a: Int, b: Int, c: Int): Double {\n    if (a + b > c && a + c > b && b + c > a) {\n        val s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        return -1.0\n    }\n}",
        "HumanEval/72": "fun willItFly(q: List<Int>, w: Int): Boolean {\n    if (q.size == 0) {\n        return false\n    }\n    val isPalin = q.indices.all { i -> q[i] == q[q.size - i - 1] }\n    val total = q.sum()\n    return isPalin && total <= w\n}",
        "HumanEval/73": "fun smallestChange(arr: List<Int>): Int {\n    var ans = 0\n    for (i in 0 until arr.size / 2) {\n        if (arr[i] != arr[arr.size - i - 1]) {\n            ans += 1\n        }\n    }\n    return ans\n}",
        "HumanEval/74": "fun totalMatch(lst1: List<String>, lst2: List<String>): List<String> {\n    val cnt1 = lst1.sumBy { x -> x.length }\n    val cnt2 = lst2.sumBy { x -> x.length }\n    return if (cnt1 <= cnt2) lst1 else lst2\n}",
        "HumanEval/75": "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false;\n    }\n    for (i in 2..floor(sqrt(n.toDouble())).toInt()) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfun isMultiplyPrime(a: Int): Boolean {\n    var cnt = 0;\n    var a = a;\n    for (i in 2..a) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt++;\n                a /= i;\n            }\n        }\n    }\n    return cnt == 3;\n}",
        "HumanEval/76": "fun isSimplePower(x: Int, n: Int): Boolean {\n    if (n < 2) {\n        return x == n;\n    }\n    var tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}",
        "HumanEval/77": "fun isCube(a: Int): Boolean {\n    val a = abs(a);\n    val root = round(a.toDouble().pow(1.0 / 3.0)).toInt();\n    return root * root * root == a;\n}",
        "HumanEval/78": "fun hexKey(num: String): Int {\n    return num.filter { \"2357BD\".contains(it) }.length;\n}",
        "HumanEval/79": "fun decimalToBinary(dec: Int): String {\n    val binary = dec.toString(2)\n    return \"db${binary}db\"\n}",
        "HumanEval/80": "fun isHappy(s: String): Boolean {\n    if (s.length < 3) {\n        return false\n    }\n    for (i in 0 until s.length - 2) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false\n        }\n    }\n    return true\n}",
        "HumanEval/81": "fun numericalLetterGrade(grades: List<Double>): List<String> {\n    val result = mutableListOf<String>()\n    for (g in grades) {\n        when {\n            g == 4.0 -> result.add(\"A+\")\n            g > 3.7 -> result.add(\"A\")\n            g > 3.3 -> result.add(\"A-\")\n            g > 3.0 -> result.add(\"B+\")\n            g > 2.7 -> result.add(\"B\")\n            g > 2.3 -> result.add(\"B-\")\n            g > 2.0 -> result.add(\"C+\")\n            g > 1.7 -> result.add(\"C\")\n            g > 1.3 -> result.add(\"C-\")\n            g > 1.0 -> result.add(\"D+\")\n            g > 0.7 -> result.add(\"D\")\n            g > 0.0 -> result.add(\"D-\")\n            else -> result.add(\"E\")\n        }\n    }\n    return result\n}",
        "HumanEval/82": "fun primeLength(s: String): Boolean {\n    val length = s.length\n    if (length < 2) {\n        return false;\n    }\n    for (i in 2..floor(sqrt(length.toDouble())).toInt()) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "HumanEval/83": "fun startsOneEnds(n: Int): Int {\n    if (n == 1) {\n        return 1\n    }\n    return 2 * 9 * (10.0.pow(n - 2)).toInt()\n}",
        "HumanEval/84": "fun solve(n: Int): String {\n    val digitsSum = n.toString().map { it.toString().toInt() }.sum()\n    return digitsSum.toString(2)\n}",
        "HumanEval/85": "fun add(lst: List<Int>): Int {\n    return lst.filterIndexed { i, x -> i % 2 == 1 && x % 2 == 0 }.sum()\n}",
        "HumanEval/86": "fun antiShuffle(s: String): String {\n    val words = s.split(\" \").map { it.toCharArray().sorted().joinToString(\"\") }\n    return words.joinToString(\" \")\n}",
        "HumanEval/87": "fun getRow(lst: List<List<Int>>, x: Int): List<List<Int>> {\n    val coords = mutableListOf<List<Int>>()\n    for (i in lst.indices) {\n        for (j in lst[i].indices) {\n            if (lst[i][j] == x) {\n                coords.add(listOf(i, j))\n            }\n        }\n    }\n    return coords.sortedByDescending { it[1] }. sortedBy { it[0] }\n}",
        "HumanEval/88": "fun sortArray(arr: List<Int>): List<Int> {\n    if (arr.isEmpty()) {\n        return emptyList()\n    }\n    if ((arr[0] + arr[arr.size - 1]) % 2 == 0) {\n        return arr.sortedDescending()\n    } else {\n        return arr.sorted()\n    }\n}",
        "HumanEval/89": "fun encrypt(s: String): String {\n    val result = StringBuilder()\n    for (ch in s) {\n        var shifted = ch.toInt() + 4\n        if (shifted > 'z'.toInt()) {\n            shifted -= 26\n        }\n        result.append(shifted.toChar())\n    }\n    return result.toString()\n}",
        "HumanEval/90": "fun nextSmallest(lst: List<Int>): Int? {\n    val sl = lst.toSet().sorted()\n    if (sl.size < 2) {\n        return null\n    }\n    return sl[1]\n}",
        "HumanEval/91": "fun isBored(s: String): Int {\n    val sentences = s.split(Regex(\"[.!?]\\\\s*\"))\n    return sentences.filter { it.length >= 2 && it.substring(0, 2) == \"I \" }.count()\n}",
        "HumanEval/92": "fun anyInt(x: Any, y: Any, z: Any): Boolean {\n    if (x is Int && y is Int && z is Int) {\n        if ((x + y == z) || (x + z == y) || (y + z == x)) {\n            return true\n        }\n    }\n    return false\n}",
        "HumanEval/93": "fun encode(message: String): String {\n    val vowels = \"aeiouAEIOU\"\n    val result = StringBuilder()\n    for (ch in message) {\n        if (ch.isLetter()) {\n            var ch1 = if (ch.isLowerCase()) ch.toUpperCase() else ch.toLowerCase()\n            if (ch1 in vowels) {\n                ch1 = (ch1.toInt() + 2).toChar()\n            }\n            result.append(ch1)\n        } else {\n            result.append(ch)\n        }\n    }\n    return result.toString()\n}",
        "HumanEval/94": "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false;\n    }\n    for (i in 2..floor(sqrt(n.toDouble())).toInt()) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfun skjkasdkd(lst: List<Int>): Int {\n    val primes = lst.filter { n -> isPrime(n) }\n    if (primes.size == 0) {\n        return 0;\n    }\n    val largest = primes.max().toString();\n    return largest.map { c -> c.digitToInt() }.sum();\n}",
        "HumanEval/95": "fun checkDictCase(d: Map<String, String>): Boolean {\n    if (d.size == 0) {\n        return false;\n    }\n    return d.keys.all { k -> k.all { c -> c.isLowerCase() } } || d.keys.all { k -> k.all { c -> c.isUpperCase() } };\n}",
        "HumanEval/96": "fun countUpTo(n: Int): List<Int> {\n    val primes = mutableListOf<Int>()\n    for (num in 2 until n) {\n        if (primes.all { p -> num % p != 0 }) {\n            primes.add(num)\n        }\n    }\n    return primes\n}",
        "HumanEval/97": "fun multiply(a: Int, b: Int): Int {\n    return (abs(a) % 10) * (abs(b) % 10)\n}",
        "HumanEval/98": "fun countUpper(s: String): Int {\n    val vowels = \"AEIOU\"\n    return s.filterIndexed { i, c -> i % 2 == 0 && vowels.contains(c) }.count()\n}",
        "HumanEval/99": "fun closestInteger(value: String): Int {\n    val num = value.toDouble()\n    return if (num >= 0) {\n        (num + 0.5).toInt()\n    } else {\n        (num - 0.5).toInt()\n    }\n}",
        "HumanEval/100": "fun makeAPile(n: Int): List<Int> {\n    return (0 until n).map { i -> n + 2 * i }\n}",
        "HumanEval/101": "fun wordsString(s: String): List<String> {\n    return s.split(\"[, ]\".toRegex()).filter { it.length > 0 }\n}",
        "HumanEval/102": "fun chooseNum(x: Int, y: Int): Int {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return if (y != x) y - 1 else -1 \n}",
        "HumanEval/103": "fun roundedAvg(n: Int, m: Int): String? {\n    if (n > m) {\n        return null\n    }\n    val rAvg = ((n + m).toDouble() / 2.0 + 0.5).toInt()\n    return rAvg.toString(2)\n}",
        "HumanEval/104": "fun allDigitsOdd(s: String): Boolean {\n    return s.all { it.code % 2 != 0 }\n}\nfun uniqueDigits(x: List<Int>): List<Int> {\n    return x.filter { allDigitsOdd(it.toString()) }.sorted()\n}",
        "HumanEval/105": "fun byLength(arr: List<Int>): List<String> {\n    val digitNames = listOf(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    val sortedArr = arr.filter { 1 <= it && it <= 9 }.sortedDescending()\n    return sortedArr.map { digitNames[it - 1] }\n}",
        "HumanEval/106": "fun f(n: Int): List<Int> {\n    val nums = (1..n).toList()\n    return nums.mapIndexed { i, it -> if (it % 2 != 0) nums.take(i + 1).sum() else nums.take(i + 1).reduce { x, y -> x * y } }\n}",
        "HumanEval/107": "fun isPalindrome(s: String): Boolean {\n    return s == s.reversed()\n}\nfun evenOddPalindrome(n: Int): List<Int> {\n    val cnt = mutableListOf(0, 0)\n    for (i in 1..n) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2]++\n        }\n    }\n    return cnt\n}",
        "HumanEval/108": "fun digitsSum(n: Int): Int {\n    val nStr = n.toString()\n    if (n >= 0) {\n        return nStr.map { it.toString().toInt() }.sum()\n    } else {\n        return nStr.substring(0, 2).toInt() * 2 + digitsSum(abs(n))\n    }\n}\nfun countNums(arr: List<Int>): Int {\n    return arr.count { digitsSum(it) > 0 }\n}",
        "HumanEval/109": "fun moveOneBall(arr: List<Int>): Boolean {\n    if (arr.isEmpty()) {\n        return true\n    }\n    val sortedArr = arr.sorted()\n    for (i in 0 until arr.size) {\n        if (arr.subList(i, arr.size) == sortedArr.subList(0, arr.size - i) && arr.subList(0, i) == sortedArr.subList(arr.size - i, sortedArr.size)) {\n            return true\n        }\n    }\n    return false\n}",
        "HumanEval/110": "fun canExchange(lst1: List<Int>, lst2: List<Int>): String {\n    val oddCnt = lst1.count { it % 2 != 0 }\n    val evenCnt = lst2.count { it % 2 == 0 }\n    return if (evenCnt >= oddCnt) \"YES\" else \"NO\"\n}",
        "HumanEval/111": "fun histogram(test: String): Map<String, Int> {\n    val freq = mutableMapOf<String, Int>()\n    val words = test.split(\" \").filter { it.length > 0 }\n    for (w in words) {\n        freq[w] = freq.getOrDefault(w, 0) + 1\n    }\n    val result = mutableMapOf<String, Int>()\n    if (freq.size > 0) {\n        val maxFreq = freq.values.max()\n        for (kv in freq) {\n            if (kv.value == maxFreq) {\n                result[kv.key] = kv.value\n            }\n        }\n    }\n    return result\n}",
        "HumanEval/112": "fun isPalindrome(s: String): Boolean {\n    return s == s.reversed()\n}\nfun reverseDelete(s: String, c: String): List<String> {\n    val s1 = s.filter { it !in c }\n    return listOf(s1, if (isPalindrome(s1)) \"yes\" else \"no\")\n}",
        "HumanEval/113": "fun oddCount(lst: List<String>): List<String> {\n    val result = mutableListOf<String>()\n    for (num in lst) {\n        val n = num.filter { it.toInt() % 2 == 1 }.length\n        val rs = \"the number of odd elements in the string i of the input.\"\n        result.add(rs.replace(\"i\", n.toString()))\n    }\n    return result\n}",
        "HumanEval/114": "fun minSubArraySum(nums: List<Int>): Int {\n    var minSum = 0\n    var curSum = 0\n    for (n in nums) {\n        curSum = minOf(curSum + n, 0)\n        minSum = minOf(curSum, minSum)\n    }\n    if (minSum == 0) {\n        minSum = nums.min()!!\n    }\n    return minSum\n}",
        "HumanEval/115": "fun maxFill(grid: List<List<Int>>, capacity: Int): Int {\n    return grid.sumBy { ceil(it.sum() / capacity.toDouble()).toInt() }\n}",
        "HumanEval/116": "fun countOnes(num: Int): Int {\n    return num.toString(2).count { it == '1' }\n}\nfun sortArray(arr: List<Int>): List<Int> {\n    return arr.sortedWith(compareBy({ countOnes(it) }, { it }))\n}",
        "HumanEval/117": "fun selectWords(s: String, n: Int): List<String> {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\"\n    val words = s.split(\" \").filter { it.length > 0 }\n    return words.filter { it.filter { c -> consonants.contains(c.toLowerCase()) }.length == n }\n}",
        "HumanEval/118": "fun getClosestVowel(word: String): String {\n    val vowels = \"aeiouAEIOU\"\n    for (i in word.length - 2 downTo 1) {\n        if (word[i] in vowels && word[i - 1] !in vowels && word[i + 1] !in vowels) {\n            return word[i].toString()\n        }\n    }\n    return \"\"\n}",
        "HumanEval/119": "fun check(s: String): Boolean {\n    var depth = 0\n    for (ch in s) {\n        if (ch == '(') {\n            depth++\n        } else {\n            depth--\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\nfun matchParens(lst: List<String>): String {\n    val s1 = lst[0] + lst[1]\n    val s2 = lst[1] + lst[0]\n    return if (check(s1) || check(s2)) \"Yes\" else \"No\"\n}",
        "HumanEval/120": "fun maximum(arr: List<Int>, k: Int): List<Int> {\n    if (k == 0) {\n        return emptyList()\n    }\n    return arr.sorted().takeLast(k)\n}",
        "HumanEval/121": "fun solution(lst: List<Int>): Int {\n    return lst.filterIndexed { i, x -> i % 2 == 0 && x % 2 != 0 }.sum()\n}",
        "HumanEval/122": "fun addElements(arr: List<Int>, k: Int): Int {\n    return arr.take(k).filter { it.toString().length <= 2 }.sum()\n}",
        "HumanEval/123": "fun getOddCollatz(n: Int): List<Int> {\n    val collatz = mutableListOf(1)\n    var n = n\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.add(n)\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    return collatz.sorted()\n}",
        "HumanEval/124": "fun validDate(date: String): Boolean {\n    if (date.length != 10 || date[2] != '-' || date[5] != '-') {\n        return false\n    }\n    val m = date.substring(0, 2).toInt()\n    val d = date.substring(3, 5).toInt()\n    if (m in listOf(1, 3, 5, 7, 8, 10, 12) && d >= 1 && d <= 31) {\n        return true\n    }\n    if (m in listOf(4, 6, 9, 11) && d >= 1 && d <= 30) {\n        return true\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true\n    }\n    return false\n}",
        "HumanEval/125": "fun splitWords(txt: String): List<String> {\n    if (\" \" in txt) {\n        return txt.split(\" \")\n    } else if (\",\" in txt) {\n        return txt.split(\",\")\n    } else {\n        return listOf(txt.filter { it.isLowerCase() && it.toInt() % 2 == 0 }.count().toString())\n    }\n}",
        "HumanEval/126": "fun isSorted(lst: List<Int>): Boolean {\n    if (!lst.drop(1).zip(lst).all { (a, b) -> b <= a }) {\n        return false\n    }\n    val freq = mutableMapOf<Int, Int>()\n    for (i in lst) {\n        freq[i] = freq.getOrDefault(i, 0) + 1\n    }\n    return freq.values.maxOrNull() ?: 0 <= 2\n}",
        "HumanEval/127": "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false;\n    }\n    for (i in 2..floor(sqrt(n.toDouble())).toInt()) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfun intersection(interval1: List<Int>, interval2: List<Int>): String {\n    val l = max(interval1[0], interval2[0])\n    val r = min(interval1[1], interval2[1])\n    val length = r - l\n    return if (length > 0 && isPrime(length)) \"YES\" else \"NO\"\n}",
        "HumanEval/128": "fun prodSigns(arr: List<Int>): Int? {\n    if (arr.isEmpty()) {\n        return null\n    }\n    if (0 in arr) {\n        return 0\n    }\n    val sign = if (arr.count { it < 0 } % 2 == 1) -1 else 1\n    return sign * arr.sumOf { it.absoluteValue }\n}",
        "HumanEval/129": "fun minPath(grid: List<List<Int>>, k: Int): List<Int> {\n    val n = grid.size\n    var minVal = n * n + 1\n    for (i in 0 until n) {\n        for (j in 0 until n) {\n            if (grid[i][j] == 1) {\n                val temp = mutableListOf<Int>()\n                if (i != 0) {\n                    temp.add(grid[i - 1][j])\n                }\n                if (j != 0) {\n                    temp.add(grid[i][j - 1])\n                }\n                if (i != n - 1) {\n                    temp.add(grid[i + 1][j])\n                }\n                if (j != n - 1) {\n                    temp.add(grid[i][j + 1])\n                }\n                minVal = temp.min()\n            }\n        }\n    }\n    val result = mutableListOf<Int>()\n    for (i in 0 until k) {\n        result.add(if (i % 2 == 0) 1 else minVal)\n    }\n    return result\n}",
        "HumanEval/130": "fun tri(n: Int): List<Int> {\n    if (n == 0) {\n        return listOf(1)\n    }\n    val seq = mutableListOf(1, 3)\n    for (i in 2..n) {\n        if (i % 2 == 0) {\n            seq.add(i / 2 + 1)\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}",
        "HumanEval/131": "fun digits(n: Int): Int {\n    val odds = n.toString().filter { it.digitToInt() % 2 == 1 }.map { it.digitToInt() }\n    return if (odds.size > 0) odds.reduce { x, y -> x * y } else 0\n}",
        "HumanEval/132": "fun isNested(s: String): Boolean {\n    val openIdx = mutableListOf<Int>()\n    val closeIdx = mutableListOf<Int>()\n    for ((i, ch) in s.withIndex()) {\n        when (ch) {\n            '[' -> openIdx.add(i)\n            ']' -> closeIdx.add(i)\n        }\n    }\n    closeIdx.reverse()\n    var cnt = 0\n    var i = 0\n    val l = closeIdx.size\n    for (idx in openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt++\n            i++\n        }\n    }\n    return cnt >= 2\n}",
        "HumanEval/133": "fun sumSquares(lst: List<Double>): Int {\n    return lst.map { ceil(it).pow(2).toInt() }.sum()\n}",
        "HumanEval/134": "fun checkIfLastCharIsALetter(txt: String): Boolean {\n    if (txt.isEmpty()) {\n        return false\n    }\n    val last = txt.substringAfterLast(\" \")\n    return last.length == 1 && last[0].isLetter()\n}",
        "HumanEval/135": "fun canArrange(arr: List<Int>): Int {\n    if (arr.size <= 1) {\n        return -1\n    }\n    val idx = (1 until arr.size).filter { i -> arr[i] < arr[i - 1] }\n    return idx.maxOrNull() ?: -1\n}",
        "HumanEval/136": "fun largestSmallestIntegers(lst: List<Int>): List<Int?> {\n    val neg = lst.filter { it < 0 }\n    val pos = lst.filter { it > 0 }\n    val maxNeg = neg.maxOrNull()\n    val minPos = pos.minOrNull()\n    return listOf(maxNeg, minPos)\n}",
        "HumanEval/137": "fun anyToReal(o: Any): Double {\n    if (o is String) {\n        return o.replace(\",\", \".\").toDouble()\n    } else if (o is Int) {\n        return o.toDouble()\n    } else if (o is Double) {\n        return o as Double\n    }\n    throw Exception(\"Unknown type\")\n}\nfun compareOne(a: Any, b: Any): Double? {\n    val a1 = anyToReal(a)\n    val b1 = anyToReal(b)\n    if (a1 == b1) {\n        return null\n    } else if (a1 > b1) {\n        return a1\n    } else {\n        return b1\n    }\n}",
        "HumanEval/138": "fun isEqualToSumEven(n: Int): Boolean {\n    return n % 2 == 0 && n >= 8\n}",
        "HumanEval/139": "fun specialFactorial(n: Int): Int {\n    var fact = 1\n    var result = 1\n    for (i in 1..n) {\n        fact *= i\n        result *= fact\n    }\n    return result\n}",
        "HumanEval/140": "fun fixSpaces(txt: String): String {\n    return txt.replace(Regex(\"\\\\s{3,}\"), \"-\").replace(\" \", \"_\")\n}",
        "HumanEval/141": "fun fileNameCheck(fileName: String): String {\n    val suf = listOf(\"txt\", \"exe\", \"dll\")\n    val lst = fileName.split(\".\")\n    if (lst.size != 2 || lst[1] !in suf || lst[0].length == 0 || !lst[0][0].isLetter() || lst[0].count { it.isDigit() } > 3) {\n        return \"No\"\n    }\n    return \"Yes\"\n}",
        "HumanEval/142": "fun sumSquares(lst: List<Int>): Int {\n    var result = 0\n    for (i in lst.indices) {\n        if (i % 3 == 0) {\n            result += lst[i].toDouble().pow(2).toInt()\n        } else if (i % 4 == 0) {\n            result += lst[i].toDouble().pow(3).toInt()\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}",
        "HumanEval/143": "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false;\n    }\n    for (i in 2..floor(sqrt(n.toDouble())).toInt()) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfun wordsInSentence(sentence: String): String {\n    val words = sentence.split(\" \")\n    return words.filter { isPrime(it.length) }.joinToString(\" \")\n}",
        "HumanEval/144": "fun simplify(x: String, n: String): Boolean {\n    val xs = x.split(\"/\")\n    val ns = n.split(\"/\")\n    val num = xs[0].toInt() * ns[0].toInt()\n    val den = xs[1].toInt() * ns[1].toInt()\n    return num % den == 0\n}",
        "HumanEval/145": "fun digitsSum(n: Int): Int {\n    val nStr = n.toString()\n    if (n >= 0) {\n        return nStr.map { it.toString().toInt() }.sum()\n    } else {\n        return nStr.substring(0, 2).toInt() * 2 + digitsSum(abs(n))\n    }\n}\nfun orderByPoints(nums: List<Int>): List<Int> {\n    return nums.sortedBy { digitsSum(it) }\n}",
        "HumanEval/146": "fun specialFilter(nums: List<Int>): Int {\n    val odds = \"13579\"\n    return  nums.filter { it > 10 && it % 2 == 1 && odds.contains(it.toString()[0]) }.size\n}",
        "HumanEval/147": "fun getMaxTriples(n: Int): Int {\n    val c = arrayOf(0, 0, 0)\n    for (i in 1..n) {\n        val a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n}",
        "HumanEval/148": "fun bf(planet1: String, planet2: String): List<String> {\n    val names = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (planet1 !in names || planet2 !in names) {\n        return emptyList()\n    }\n    var l = names.indexOf(planet1)\n    var r = names.indexOf(planet2)\n    if (l > r) {\n        l = r.also { r = l }\n    }\n    if (l == r) {\n        return emptyList()\n    }\n    return names.subList(l + 1, r)\n}",
        "HumanEval/149": "fun sortedListSum(lst: List<String>): List<String> {\n    val result = lst.filter { it.length % 2 == 0 }\n    return result.sortedWith(compareBy({ it.length }, { it }))\n}",
        "HumanEval/150": "fun xOrY(n: Int, x: Int, y: Int): Int {\n    if (n < 2) {\n        return y;\n    }\n    for (i in 2..floor(sqrt(n.toDouble())).toInt()) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}",
        "HumanEval/151": "fun doubleTheDifference(lst: List<Double>): Int {\n    return lst.filter { it >= 0 && it % 2 == 1.0 }.map { (it * it).toInt() }.sum()\n}",
        "HumanEval/152": "fun compare(game: List<Int>, guess: List<Int>): List<Int> {\n    return game.zip(guess).map { (x, y) -> abs(x - y) }\n}",
        "HumanEval/153": "fun strongestExtension(className: String, extensions: List<String>): String {\n    var maxS = Int.MIN_VALUE\n    var maxExt = \"\"\n    for (ext in extensions) {\n        val upper = ext.count { it.isUpperCase() }\n        val lower = ext.count { it.isLowerCase() }\n        val s = upper - lower\n        if (s > maxS) {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return \"$className.$maxExt\"\n}",
        "HumanEval/154": "fun cycpatternCheck(a: String, b: String): Boolean {\n    if (a.length < b.length) {\n        return false\n    }\n    for (i in b.indices) {\n        if (b.substring(i) + b.substring(0, i) in a) {\n            return true\n        }\n    }\n    return false\n}",
        "HumanEval/155": "fun evenOddCount(num: Int): List<Int> {\n    val ds = abs(num).toString()\n    val even = ds.count { it.toInt() % 2 == 0 }\n    return listOf(even, ds.length - even)\n}",
        "HumanEval/156": "fun intToMiniRoman(num: Int): String {\n    val values = listOf(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 ,5, 4, 1)\n    val numerals = listOf(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    var res = StringBuilder()\n    var num = num\n    for (i in values.indices) {\n        while (num >= values[i]) {\n            res.append(numerals[i])\n            num -= values[i]\n        }\n    }\n    return res.toString()\n}",
        "HumanEval/157": "fun rightAngleTriangle(a: Int, b: Int, c: Int): Boolean {\n    val s = listOf(a, b, c).sorted()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}",
        "HumanEval/158": "fun findMax(words: List<String>): String {\n    var maxCnt = 0\n    var maxW = \"\"\n    for (w in words) {\n        val cnt = w.toSet().size\n        if (cnt > maxCnt) {\n            maxCnt = cnt\n            maxW = w\n        } else if (cnt == maxCnt) {\n            maxW = minOf(maxW, w)\n        }\n    }\n    return maxW\n}",
        "HumanEval/159": "fun eat(num: Int, need: Int, remaining: Int): List<Int> {\n    if (need <= remaining) {\n        return listOf(num + need, remaining - need)\n    } else {\n        return listOf(num + remaining, 0)\n    }\n}",
        "HumanEval/160": "fun doAlgebra(operators: List<String>, operands: List<Int>): Int {\n    val ops = operators.toMutableList()\n    val nums = operands.toMutableList()\n    var i = ops.size - 1\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = nums[i].toDouble().pow(nums[i + 1]).toInt()\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n        }\n        i -= 1\n    }\n    i = 0\n    while (i < ops.size) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] / nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while (i < ops.size) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}",
        "HumanEval/161": "fun solve(s: String): String {\n    if (!s.any { it.isLetter() }) {\n        return s.reversed()\n    }\n    val result = StringBuilder()\n    for (ch in s) {\n        if (!ch.isLetter()) {\n            result.append(ch)\n        } else if (ch.isUpperCase()) {\n            result.append(ch.toLowerCase())\n        } else if (ch.isLowerCase()) {\n            result.append(ch.toUpperCase())\n        }\n    }\n    return result.toString()\n}",
        "HumanEval/162": "fun stringToMd5(txt: String): String? {\n    if (txt.isEmpty()) {\n        return null\n    }\n    val md5Hash = MessageDigest.getInstance(\"MD5\")\n    val txtBytes = txt.toByteArray()\n    val md5Encoded = md5Hash.digest(txtBytes).joinToString(\"\") { \"%02x\".format(it) }\n    return md5Encoded\n}",
        "HumanEval/163": "fun generateIntegers(a: Int, b: Int): List<Int> {\n    val lower = maxOf(2, minOf(a, b))\n    val upper = minOf(8, maxOf(a, b))\n    return (lower..upper).filter { it % 2 == 0 }\n}"
    },
    "php": {
        "HumanEval/0": "function hasCloseElements($numbers, $threshold) {\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "HumanEval/1": "function separateParenGroups($parenString) {\n    $groups = [];\n    $stk = [];\n    $currentGroup = \"\";\n    $parens = str_replace(\" \", \"\", $parenString);\n    foreach (str_split($parens) as $ch) {\n        if ($ch === \"(\") {\n            array_push($stk, $ch);\n            $currentGroup .= $ch;\n        } else if ($ch === \")\") {\n            array_pop($stk);\n            $currentGroup .= $ch;\n            if (count($stk) === 0) {\n                array_push($groups, $currentGroup);\n                $currentGroup = \"\";\n            }\n        }\n    }\n    return $groups;\n}",
        "HumanEval/2": "function truncateNumber($num) {\n    return $num - floor($num);\n}",
        "HumanEval/3": "function belowZero($operations) {\n    $balance = 0;\n    foreach ($operations as $op) {\n        $balance += $op;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}",
        "HumanEval/4": "function meanAbsoluteDeviation($numbers) {\n    $mean = array_sum($numbers) / count($numbers);\n    $deviation = array_sum(array_map(function($x) use ($mean) {\n        return abs($x - $mean); \n    }, $numbers));\n    return $deviation / count($numbers);\n}",
        "HumanEval/5": "function intersperse($numbers, $delimiter) {\n    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        if ($i != 0) {\n            $result[] = $delimiter;\n        }\n        $result[] = $numbers[$i];\n    }\n    return $result;\n}",
        "HumanEval/6": "function parseNestedParens($parenString) {\n    $result = [];\n    $parenGroups = array_filter(explode(\" \", $parenString), function($s) {\n        return strlen($s) > 0;\n    });\n    foreach ($parenGroups as $group) {\n        $maxDepth = 0;\n        $depth = 0;\n        foreach (str_split($group) as $ch) {\n            if ($ch == \"(\") {\n                $depth += 1;\n                $maxDepth = max($maxDepth, $depth);\n            } elseif ($ch == \")\") {\n                $depth -= 1;\n            }\n        }\n        $result[] = $maxDepth;\n    }\n    return $result;\n}",
        "HumanEval/7": "function filterBySubstring($strs, $substring) {\n    return array_filter($strs, function($s) use ($substring) {\n        return strpos($s, $substring) !== false;\n    });\n}",
        "HumanEval/8": "function sumProduct($numbers) {\n    $nSum = array_sum($numbers);\n    $nProduct = array_product($numbers);\n    return [$nSum, $nProduct];\n}",
        "HumanEval/9": "function rollingMax($numbers) {\n    $max_so_far = PHP_INT_MIN;\n    $result = [];\n    foreach ($numbers as $num) {\n        $max_so_far = max($max_so_far, $num);\n        $result[] = $max_so_far;\n    }\n    return $result;\n}",
        "HumanEval/10": "function isPalindrome($s) {\n    return $s === strrev($s);\n}\nfunction makePalindrome($s) {\n    if (isPalindrome($s)) {\n        return $s;\n    }\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (isPalindrome(substr($s, $i))) {\n            return $s . strrev(substr($s, 0, $i));\n        }\n    }\n    return \"\";\n}",
        "HumanEval/11": "function stringXor($a, $b) {\n    return implode('', array_map(function ($x, $y) { return $x === $y ? '0' : '1'; }, str_split($a), str_split($b)));\n}",
        "HumanEval/12": "function longest($strs) {\n    if (empty($strs)) {\n        return null;\n    }\n    $longest_s = $strs[0];\n    foreach ($strs as $s) {\n        if (strlen($s) > strlen($longest_s)) {\n            $longest_s = $s;\n        }\n    }\n    return $longest_s;\n}",
        "HumanEval/13": "function greatestCommonDivisor($a, $b) {\n    if ($b == 0) {\n        return $a;\n    } else {\n        return greatestCommonDivisor($b, $a % $b);\n    }\n}",
        "HumanEval/14": "function allPrefixes($s) {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $prefixes[] = substr($s, 0, $i + 1);\n    }\n    return $prefixes;\n}",
        "HumanEval/15": "function stringSequence($n) {\n    return implode(\" \", range(0, $n));\n}",
        "HumanEval/16": "function countDistinctCharacters($s) {\n    return count(array_unique(str_split(strtolower($s))));\n}",
        "HumanEval/17": "function parseMusic($musicString) {\n    $durations = [\"o\" => 4, \"o|\" => 2, \".|\" => 1];\n    $notes = array_filter(explode(\" \", $musicString), function($s) {\n        return strlen($s) > 0;\n    });\n    return array_map(function($note) use ($durations) {\n        return $durations[$note];\n    }, $notes);\n}",
        "HumanEval/18": "function howManyTimes($s, $substring) {\n    $times = 0;\n    for ($i = 0; $i <= strlen($s) - strlen($substring); $i++) {\n        if (substr($s, $i, strlen($substring)) === $substring) {\n            $times += 1;\n        }\n    }\n    return $times;\n}",
        "HumanEval/19": "function sortNumbers($numbers) {\n    $num_dict = [\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n    ];\n    $num_list = array_filter(explode(\" \", $numbers), function($x) use ($num_dict) {\n        return array_key_exists($x, $num_dict);\n    });\n    usort($num_list, function($a, $b) use ($num_dict) {\n        return $num_dict[$a] - $num_dict[$b];\n    });\n    return implode(\" \", $num_list);\n}",
        "HumanEval/20": "function findClosestElements($numbers) {\n    $sorted_numbers = $numbers;\n    sort($sorted_numbers);\n    $min_diff = INF;\n    $closest_pair = [];\n    for ($i = 1; $i < count($sorted_numbers); $i++) {\n        $diff = $sorted_numbers[$i] - $sorted_numbers[$i - 1];\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $closest_pair = [$sorted_numbers[$i - 1], $sorted_numbers[$i]];\n        }\n    }\n    return $closest_pair;\n}",
        "HumanEval/21": "function rescaleToUnit($numbers) {\n    $min_num = min($numbers);\n    $max_num = max($numbers);\n    if ($min_num == $max_num) {\n        return array_fill(0, count($numbers), 0.0);\n    } else {\n        return array_map(function($num) use ($min_num, $max_num) {\n            return ($num - $min_num) / ($max_num - $min_num);\n        }, $numbers);\n    }\n}",
        "HumanEval/22": "function filterIntegers($values) {\n    return array_filter($values, function($x) {\n        return is_int($x);\n    });\n}",
        "HumanEval/23": "function strLength($s) {\n    return strlen($s);\n}",
        "HumanEval/24": "function largestDivisor($n) {\n    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            return $n / $i;\n        }\n    }\n    return 1;\n}",
        "HumanEval/25": "function factorize($n) {\n    $factors = [];\n    $divisor = 2;\n    while ($divisor <= $n) {\n        if ($n % $divisor == 0) {\n            $factors[] = $divisor;\n            $n /= $divisor;\n        } else {\n            $divisor++;\n        }\n    }\n    return $factors;\n}",
        "HumanEval/26": "function removeDuplicates($numbers) {\n    $counts = array();\n    foreach ($numbers as $num) {\n        $counts[$num] = ($counts[$num] ?? 0) + 1;\n    }\n    $res = array_filter($numbers, function($num) use ($counts) {\n        return $counts[$num] == 1;\n    });\n    return $res;\n}",
        "HumanEval/27": "function flipCase($s) {\n    $flipped = \"\";\n    foreach (str_split($s) as $ch) {\n        if (!ctype_alpha($ch)) {\n            $flipped .= $ch;\n        } else if (ctype_lower($ch)) {\n            $flipped .= strtoupper($ch);\n        } else if (ctype_upper($ch)) {\n            $flipped .= strtolower($ch);\n        }\n    }\n    return $flipped;\n}",
        "HumanEval/28": "function concatenate($strs) {\n    return implode(\"\", $strs);\n}",
        "HumanEval/29": "function filterByPrefix($strs, $prefixStr) {\n    return array_filter($strs, function($str) use ($prefixStr) {\n        return strpos($str, $prefixStr) === 0;\n    });\n}",
        "HumanEval/30": "function getPositive($l) {\n    return array_filter($l, function($num) {\n        return $num > 0;\n    });\n}",
        "HumanEval/31": "function isPrime($n) {\n    if ($n < 2) {\n        return False;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return False;\n        }\n    }\n    return True;\n}",
        "HumanEval/32": "function poly($xs, $x) {\n    $res = 0;\n    for ($i = 0; $i < count($xs); $i++) {\n        $res += $xs[$i] * pow($x, $i);\n    }\n    return $res;\n}\nfunction findZero($xs) {\n    [$x1, $x2] = [1.0, -1.0];\n    while (poly($xs, $x1) * poly($xs, $x2) > 0) {\n        $x1 *= 2;\n        $x2 *= 2;\n    }\n    while (abs($x1 - $x2) > 1e-10) {\n        $mid = ($x1 + $x2) / 2;\n        if (poly($xs, $mid) == 0) {\n            return $mid;\n        } elseif (poly($xs, $mid) * poly($xs, $x1) < 0) {\n            $x2 = $mid;\n        } else {\n            $x1 = $mid;\n        }\n    }\n    return ($x1 + $x2) / 2;\n}",
        "HumanEval/33": "function sortThird($l) {\n    $sortedThird = array_values(array_filter($l, function($i) { return $i % 3 == 0; }, ARRAY_FILTER_USE_KEY));\n    sort($sortedThird);\n    return array_map(function($i, $x) use ($sortedThird) { return ($i % 3 == 0) ? $sortedThird[$i / 3] : $x; }, array_keys($l), $l);\n}",
        "HumanEval/34": "function listUnique($l) {\n    $result = array_unique($l);\n    sort($result);\n    return $result;\n}",
        "HumanEval/35": "function maxElement($l) {\n    if (empty($l)) {\n        return 0;\n    }\n    return max($l);\n}",
        "HumanEval/36": "function fizzBuzz($n) {\n    $cnt = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            $cnt += substr_count((string)$i, \"7\");\n        }\n    }\n    return $cnt;\n}",
        "HumanEval/37": "function sortEven($l) {\n    $sortedEven = array_values(array_filter($l, function($i) { return $i % 2 == 0; }, ARRAY_FILTER_USE_KEY));\n    sort($sortedEven);\n    return array_map(function($i, $x) use ($sortedEven) { return ($i % 2 == 0) ? $sortedEven[$i / 2] : $x; }, array_keys($l), $l);\n}",
        "HumanEval/38": "function encodeCyclic($s) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($s); $i += 3) {\n        if ($i + 3 > strlen($s)) {\n            $result .= substr($s, $i);\n        } else {\n            $result .= substr($s, $i + 1, 2);\n            $result .= $s[$i];\n        }\n    }\n    return $result;\n}\nfunction decodeCyclic($s) {\n    return encodeCyclic(encodeCyclic($s));\n}",
        "HumanEval/39": "function isPrime($n) {\n    if ($n < 2) {\n        return False;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return False;\n        }\n    }\n    return True;\n}\nfunction primeFib($n) {\n    $f = [0, 1];\n    $cnt = 0;\n    while ($cnt < $n) {\n        $f = [$f[1], $f[0] + $f[1]];\n        if (isPrime($f[1])) {\n            $cnt++;\n        }\n    }\n    return $f[1];\n}",
        "HumanEval/40": "function triplesSumToZero($l) {\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            for ($k = $j + 1; $k < count($l); $k++) {\n                if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                    return True;\n                }\n            }\n        }\n    }\n    return False;\n}",
        "HumanEval/41": "function carRaceCollision($n) {\n    return pow($n, 2);\n}",
        "HumanEval/42": "function incrList($l) {\n    return array_map(function($i) {\n        return $i + 1;\n    }, $l);\n}",
        "HumanEval/43": "function pairsSumToZero($l) {\n    $seen = [];\n    foreach ($l as $num) {\n        if (array_key_exists(-$num, $seen)) {\n            return true;\n        }\n        $seen[$num] = true;\n    }\n    return False;\n}",
        "HumanEval/44": "function changeBase($x, $bas) {\n    if ($x === 0) {\n        return \"0\";\n    }\n    $digits = [];\n    while ($x > 0) {\n        $digits[] = strval($x % $bas);\n        $x = intval($x / $bas);\n    }\n    return implode(\"\", array_reverse($digits));\n}",
        "HumanEval/45": "function triangleArea($a, $h) {\n    return $a * $h / 2;\n}",
        "HumanEval/46": "function fib4($n) {\n    $fib = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib[$i % 4] = array_sum($fib);\n    }\n    return $fib[$n % 4];\n}",
        "HumanEval/47": "function median($l) {\n    $sl = $l;\n    sort($sl);\n    if (count($l) % 2 !== 0) {\n        return $sl[count($l) / 2];\n    } else {\n        return ($sl[count($l) / 2] + $sl[count($l) / 2 - 1]) / 2;\n    }\n}",
        "HumanEval/48": "function isPalindrome($txt) {\n    return $txt === strrev($txt);\n}",
        "HumanEval/49": "function modp($n, $p) { \n    $ret = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $ret = ($ret * 2) % $p;\n    }\n    return $ret;\n}",
        "HumanEval/50": "function encodeShift($s) {\n    $result = array_map(function ($ch) {\n        return chr(((ord($ch) - 97 + 5) % 26) + 97);\n    }, str_split($s));\n    return implode(\"\", $result);\n}\nfunction decodeShift($s) {\n    $result = array_map(function ($ch) {\n        return chr(((ord($ch) - 97 + 21) % 26) + 97);\n    }, str_split($s));\n    return implode(\"\", $result);\n}",
        "HumanEval/51": "function removeVowels($txt) {\n    $vowels = \"aeiouAEIOU\";\n    return implode(\"\", array_filter(str_split($txt), function($char) use ($vowels) {\n        return strpos($vowels, $char) === false;\n    }));\n}",
        "HumanEval/52": "function belowThreshold($l, $t) {\n    return count(array_filter($l, function($x) use ($t) { return $x < $t; })) == count($l);\n}",
        "HumanEval/53": "function add($x, $y) {\n    return $x + $y;\n}",
        "HumanEval/54": "function sameChars($s0, $s1) {\n    $set0 = array_unique(str_split($s0));\n    $set1 = array_unique(str_split($s1));\n    sort($set0);\n    sort($set1);\n    return $set0 == $set1;\n}",
        "HumanEval/55": "function fib($n) {\n    if ($n <= 1) {\n        return $n;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}",
        "HumanEval/56": "function correctBracketing($brackets) {\n    $depth = 0;\n    foreach (str_split($brackets) as $b) {\n        if ($b == '<') {\n            $depth += 1;\n        } else if ($b == '>') {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}",
        "HumanEval/57": "function monotonic($l) {\n    $diff = array_map(function ($a, $b) { return $b - $a; }, array_slice($l, 0, -1), array_slice($l, 1));\n    return count(array_filter($diff, function($x) { return $x <= 0; })) == count($diff) || count(array_filter($diff, function($x) { return $x >= 0; })) == count($diff);\n}",
        "HumanEval/58": "function common($l1, $l2) {\n    $result = array_intersect($l1, $l2);\n    sort($result);\n    return $result;\n}",
        "HumanEval/59": "function largestPrimeFactor($n) {\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i) {\n            $i += 1;\n        } else {\n            $n /= $i;\n        }\n    }\n    return $n;\n}",
        "HumanEval/60": "function sumToN($n) {\n    return array_sum(range(0, $n));\n}",
        "HumanEval/61": "function correctBracketing($brackets) {\n    $depth = 0;\n    foreach (str_split($brackets) as $b) {\n        if ($b == '(') {\n            $depth += 1;\n        } else if ($b == ')') {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}",
        "HumanEval/62": "function derivative($xs) {\n    return array_slice(array_map(function($x, $i) { return $x * $i; }, $xs, range(0, count($xs) - 1)), 1);\n}",
        "HumanEval/63": "function fibfib($n) {\n    if ($n <= 1) {\n        return 0;\n    }\n    [$a, $b, $c] = [0, 0, 1];\n    while ($n > 2) {\n        [$a, $b, $c] = [$b, $c, $a + $b + $c];\n        $n -= 1;\n    }\n    return $c;\n}",
        "HumanEval/64": "function vowelsCount($s) {\n    $vowels = \"aeiou\";\n    $cnt = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($vowels, strtolower($s[$i])) !== false || ($i == strlen($s) - 1 && strtolower($s[$i]) == \"y\")) {\n            $cnt += 1;\n        }\n    }\n    return $cnt;\n}",
        "HumanEval/65": "function circularShift($x, $shift) {\n    $xStr = strval($x);\n    if ($shift > strlen($xStr)) {\n        return strrev($xStr);\n    } else {\n        return substr($xStr, -$shift) . substr($xStr, 0, -$shift);\n    }\n}",
        "HumanEval/66": "function digitSum($s) {\n    return array_sum(array_map('ord', array_filter(str_split($s), 'ctype_upper')));\n}",
        "HumanEval/67": "function fruitDistribution($s, $n) {\n    $words = explode(' ', $s);\n    $apples = $words[array_search('apples', $words) - 1];\n    $oranges = $words[array_search('oranges', $words) - 1];\n    return $n - $apples - $oranges;\n}",
        "HumanEval/68": "function pluck($arr) {\n    $evens = array_filter($arr, function($x) { return $x % 2 == 0; });\n    if (empty($evens)) {\n        return [];\n    }\n    $minEven = min($evens);\n    return [$minEven, array_search($minEven, $arr)];\n}",
        "HumanEval/69": "function search($lst) {\n    $freqs = array();\n    foreach ($lst as $n) {\n        $freqs[$n] = ($freqs[$n] ?? 0) + 1;\n    }\n    $goodVals = array_filter($freqs, function($v, $k) { return $v >= $k; }, ARRAY_FILTER_USE_BOTH);\n    return max([...array_keys($goodVals), -1]);\n}",
        "HumanEval/70": "function strangeSortList($lst) {\n    $sl = $lst;\n    sort($sl);\n    $result = array();\n    [$left, $right] = [0, count($sl) - 1];\n    while ($left <= $right) {\n        $result[] = $sl[$left];\n        $left += 1;\n        if ($left <= $right) {\n            $result[] = $sl[$right];\n            $right -= 1;\n        }\n    }\n    return $result;\n}",
        "HumanEval/71": "function triangleArea($a, $b, $c) {\n    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $s = ($a + $b + $c) / 2;\n        return sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    } else {\n        return -1.0;\n    }\n}",
        "HumanEval/72": "function willItFly($q, $w) {\n    if (count($q) == 0) {\n        return false;\n    }\n    $isPalin = count(array_filter($q, function($i) use ($q) { return $q[$i] == $q[count($q) - $i - 1]; })) == count($q);\n    $total = array_sum($q);\n    return $isPalin && $total <= $w;\n}",
        "HumanEval/73": "function smallestChange($arr) {\n    $ans = 0;\n    for ($i = 0; $i < intval(count($arr) / 2); $i++) {\n        if ($arr[$i] != $arr[count($arr) - $i - 1]) {\n            $ans += 1;\n        }\n    }\n    return $ans;\n}",
        "HumanEval/74": "function totalMatch($lst1, $lst2) {\n    $cnt1 = array_sum(array_map('strlen', $lst1));\n    $cnt2 = array_sum(array_map('strlen', $lst2));\n    return $cnt1 <= $cnt2 ? $lst1 : $lst2;\n}",
        "HumanEval/75": "function isPrime($n) {\n    if ($n < 2) {\n        return False;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return False;\n        }\n    }\n    return True;\n}\nfunction isMultiplyPrime($a) {\n    $cnt = 0;\n    for ($i = 2; $i <= $a; $i++) {\n        if (isPrime($i)) {\n            while ($a % $i == 0) {\n                $cnt += 1;\n                $a /= $i;\n            }\n        }\n    }\n    return $cnt == 3;\n}",
        "HumanEval/76": "function isSimplePower($x, $n) {\n    if ($n < 2) {\n        return $x == $n;\n    }\n    $tmp = 1;\n    while ($tmp < $x) {\n        $tmp *= $n;\n    }\n    return $tmp == $x;\n}",
        "HumanEval/77": "function isCube($a) {\n    $a = abs($a);\n    $root = intval(round(pow($a, 1.0 / 3.0)));\n    return $root * $root * $root == $a;\n}",
        "HumanEval/78": "function hexKey($num) {\n    return count(array_intersect(str_split($num), str_split(\"2357BD\")));\n}",
        "HumanEval/79": "function decimalToBinary($dec) {\n    $binary = decbin($dec);\n    return \"db{$binary}db\";\n}",
        "HumanEval/80": "function isHappy($s) {\n    if (strlen($s) < 3) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($s) - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}",
        "HumanEval/81": "function numericalLetterGrade($grades) {\n    $result = [];\n    foreach ($grades as $g) {\n        switch (true) {\n            case $g == 4.0:\n                $result[] = \"A+\"; break;\n            case $g > 3.7:\n                $result[] = \"A\"; break;\n            case $g > 3.3:\n                $result[] = \"A-\"; break;\n            case $g > 3.0:\n                $result[] = \"B+\"; break;\n            case $g > 2.7:\n                $result[] = \"B\"; break;\n            case $g > 2.3:\n                $result[] = \"B-\"; break;\n            case $g > 2.0:\n                $result[] = \"C+\"; break;\n            case $g > 1.7:\n                $result[] = \"C\"; break;\n            case $g > 1.3:\n                $result[] = \"C-\"; break;\n            case $g > 1.0:\n                $result[] = \"D+\"; break;\n            case $g > 0.7:\n                $result[] = \"D\"; break;\n            case $g > 0.0:\n                $result[] = \"D-\"; break;\n            default:\n                $result[] = \"E\"; break;\n        }\n    }\n    return $result;\n}",
        "HumanEval/82": "function primeLength($s) {\n    $length = strlen($s);\n    if ($length < 2) {\n        return False;\n    }\n    for ($i = 2; $i <= floor(sqrt($length)); $i++) {\n        if ($length % $i == 0) {\n            return False;\n        }\n    }\n    return True;\n}",
        "HumanEval/83": "function startsOneEnds($n) {\n    if ($n == 1) {\n        return 1;\n    }\n    return 2 * 9 * pow(10, $n - 2);\n}",
        "HumanEval/84": "function solve($n) {\n    $digitsSum = array_sum(str_split($n));\n    return decbin($digitsSum);\n}",
        "HumanEval/85": "function add($lst) {\n    return array_sum(array_filter($lst, function($v, $k) {\n        return $k % 2 == 1 && $v % 2 == 0;\n    }, ARRAY_FILTER_USE_BOTH));\n}",
        "HumanEval/86": "function antiShuffle($s) {\n    $words = array_map(function($word) {\n        $chars = str_split($word);\n        sort($chars);\n        return implode('', $chars);\n    }, explode(' ', $s));\n    return implode(' ', $words);\n}",
        "HumanEval/87": "function getRow($lst, $x) {\n    $coords = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $value) {\n            if ($value == $x) {\n                $coords[] = [$i, $j];\n            }\n        }\n    }\n    usort($coords, function($a, $b) {\n        return $a[0] === $b[0] ? $b[1] - $a[1] : $a[0] - $b[0]; \n    });\n    return $coords;\n}",
        "HumanEval/88": "function sortArray($arr) {\n    if (count($arr) == 0) {\n        return [];\n    }\n    $result = $arr;\n    if (($arr[0] + $arr[count($arr) - 1]) % 2 == 0) {\n        rsort($result);\n        return $result;\n    } else {\n        sort($result);\n        return $result;\n    }\n}",
        "HumanEval/89": "function encrypt($s) {\n    $result = \"\";\n    foreach (str_split($s) as $ch) {\n        $shifted = ord($ch) + 4;\n        if ($shifted > ord('z')) {\n            $shifted -= 26;\n        }\n        $result .= chr($shifted);\n    }\n    return $result;\n}",
        "HumanEval/90": "function nextSmallest($lst) {\n    $sl = array_values(array_unique($lst));\n    sort($sl);\n    if (count($sl) < 2) {\n        return null;\n    }\n    return $sl[1];\n}",
        "HumanEval/91": "function isBored($s) {\n    $sentences = preg_split(\"/[.!?]\\s*/\", $s);\n    return count(array_filter($sentences, function($sentence) {\n        return strlen($sentence) >= 2 && substr($sentence, 0, 2) == \"I \";\n    }));\n}",
        "HumanEval/92": "function anyInt($x, $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n            return true;\n        }\n    }\n    return false;\n}",
        "HumanEval/93": "function encode($message) {\n    $vowels = \"aeiouAEIOU\";\n    $result = \"\";\n    foreach (str_split($message) as $ch) {\n        if (ctype_alpha($ch)) {\n            $ch1 = ctype_lower($ch) ? strtoupper($ch) : strtolower($ch);\n            if (strpos($vowels, $ch1) !== false) {\n                $ch1 = chr(ord($ch1) + 2);\n            }\n            $result .= $ch1;\n        } else {\n            $result .= $ch;\n        }\n    }\n    return $result;\n}",
        "HumanEval/94": "function isPrime($n) {\n    if ($n < 2) {\n        return False;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return False;\n        }\n    }\n    return True;\n}\nfunction skjkasdkd($lst) {\n    $primes = array_filter($lst, \"isPrime\");\n    if (count($primes) == 0) {\n        return 0;\n    }\n    $largest = max($primes);\n    return array_sum(str_split($largest));\n}",
        "HumanEval/95": "function checkDictCase($d) {\n    if (count($d) == 0) {\n        return False;\n    }\n    return count(array_filter(array_keys($d), function($k) {\n        return ctype_lower(strval($k));\n    })) === count($d) || count(array_filter(array_keys($d), function($k) {\n        return ctype_upper(strval($k));\n    })) === count($d);\n}",
        "HumanEval/96": "function countUpTo($n) {\n    $primes = [];\n    for ($num = 2; $num < $n; $num++) {\n        if (count(array_filter($primes, function($p) use ($num) {\n            return $num % $p != 0;\n        })) == count($primes)) {\n            $primes[] = $num;\n        }\n    }\n    return $primes;\n}",
        "HumanEval/97": "function multiply($a, $b) {\n    return (abs($a) % 10) * (abs($b) % 10);\n}",
        "HumanEval/98": "function countUpper($s) {\n    $vowels = \"AEIOU\";\n    return count(array_filter(str_split($s), function($c, $i) use ($vowels) {\n        return $i % 2 == 0 && strpos($vowels, $c) !== False;\n    }, ARRAY_FILTER_USE_BOTH));\n}",
        "HumanEval/99": "function closestInteger($value) {\n    $num = floatval($value);\n    if ($num >= 0) {\n        return intval($num + 0.5);\n    } else {\n        return intval($num - 0.5);\n    }\n}",
        "HumanEval/100": "function makeAPile($n) {\n    return array_map(function($i) use ($n) {\n        return $n + 2 * $i;\n    }, range(0, $n - 1));\n}",
        "HumanEval/101": "function wordsString($s) {\n    return preg_split(\"/[ ,]/\", $s, -1, PREG_SPLIT_NO_EMPTY);\n}",
        "HumanEval/102": "function chooseNum($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    if ($y % 2 == 0) {\n        return $y;\n    }\n    return $y != $x ? $y - 1 : -1;    \n}",
        "HumanEval/103": "function roundedAvg($n, $m) {\n    if ($n > $m) {\n        return null;\n    }\n    $rAvg = intVal(($n + $m) / 2 + 0.5);\n    return decbin($rAvg);\n}",
        "HumanEval/104": "function allDigitsOdd($s) {\n    return count(array_filter(str_split($s), function($digit) { return ord($digit) % 2 != 0; })) == strlen($s);\n}\nfunction uniqueDigits($x) {\n    $result = array_filter($x, function($x) { return allDigitsOdd(strval($x)); });\n    sort($result);\n    return $result;\n}",
        "HumanEval/105": "function byLength($arr) {\n    $digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    $sorted_arr = array_filter($arr, function($x) { return 1 <= $x && $x <= 9; });\n    rsort($sorted_arr);\n    return array_map(function($x) use ($digit_names) { return $digit_names[$x - 1]; }, $sorted_arr);\n}",
        "HumanEval/106": "function f($n) {\n    $nums = range(1, $n);\n    return array_map(function($i) use ($nums) {\n        if ($i % 2 != 0) {\n            return array_sum(array_slice($nums, 0, $i));\n        } else {\n            return array_reduce(array_slice($nums, 0, $i), function($x, $y) { return $x * $y; }, 1);\n        }\n    }, $nums);\n}",
        "HumanEval/107": "function isPalindrome($s) {\n    return $s === strrev($s);\n}\nfunction evenOddPalindrome($n) {\n    $cnt = [0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        if (isPalindrome((string)$i)) {\n            $cnt[$i % 2]++;\n        }\n    }\n    return $cnt;\n}",
        "HumanEval/108": "function digitsSum($n) {\n    $nStr = (string)$n;\n    if ($n >= 0) {\n        return array_sum(str_split($nStr));\n    } else {\n        return 2 * intVal(substr($nStr, 0, 2)) + digitsSum(abs($n));\n    }\n}\nfunction countNums($arr) {\n    return count(array_filter($arr, function($n) {\n        return digitsSum($n) > 0;\n    }));\n}",
        "HumanEval/109": "function moveOneBall($arr) {\n    if (count($arr) === 0) {\n        return true;\n    }\n    $sortedArr = $arr;\n    sort($sortedArr);\n    for ($i = 0; $i < count($arr); $i++) {\n        if (array_slice($arr, $i) === array_slice($sortedArr, 0, count($arr) - $i) && array_slice($arr, 0, $i) === array_slice($sortedArr, count($arr) - $i)) {\n            return true;\n        }\n    }\n    return false;\n}",
        "HumanEval/110": "function canExchange($lst1, $lst2) {\n    $oddCnt = count(array_filter($lst1, function($n) {\n        return $n % 2 != 0;\n    }));\n    $evenCnt = count(array_filter($lst2, function($n) {\n        return $n % 2 == 0;\n    }));\n    return $evenCnt >= $oddCnt ? \"YES\" : \"NO\";\n}",
        "HumanEval/111": "function histogram($test) {\n    $freq = [];\n    $words = array_filter(explode(\" \", $test), function($w) {\n        return strlen($w) > 0;\n    });\n    foreach ($words as $w) {\n        $freq[$w] = ($freq[$w] ?? 0) + 1;\n    }\n    $result = [];\n    if (count($freq) > 0) {\n        $maxFreq = max($freq);\n        foreach ($freq as $k => $v) {\n            if ($v == $maxFreq) {\n                $result[$k] = $v;\n            }\n        }\n    }\n    return $result;\n}",
        "HumanEval/112": "function isPalindrome($s) {\n    return $s === strrev($s);\n}\nfunction reverseDelete($s, $c) {\n    $s1 = implode('', array_filter(str_split($s), function($ch) use ($c) { return !in_array($ch, str_split($c)); }));\n    return [$s1, isPalindrome($s1) ? \"yes\" : \"no\"];\n}",
        "HumanEval/113": "function oddCount($lst) {\n    $result = [];\n    foreach ($lst as $num) {\n        $n = count(array_filter(str_split($num), function($d) { return ord($d) % 2 == 1; }));\n        $rs = \"the number of odd elements in the string i of the input.\";\n        $result[] = str_replace(\"i\", $n, $rs);\n    }\n    return $result;\n}",
        "HumanEval/114": "function minSubArraySum($nums) {\n    $minSum = 0;\n    $curSum = 0;\n    foreach ($nums as $n) {\n        $curSum = min($curSum + $n, 0);\n        $minSum = min($curSum, $minSum);\n    }\n    if ($minSum == 0) {\n        $minSum = min($nums);\n    }\n    return $minSum;\n}",
        "HumanEval/115": "function maxFill($grid, $capacity) {\n    return array_sum(array_map(function($arr) use ($capacity) {\n        return ceil(array_sum($arr) / $capacity);\n    }, $grid));\n}",
        "HumanEval/116": "function countOnes($num) {\n    return substr_count(decbin($num), '1');\n}\nfunction sortArray($arr) {\n    $result = $arr;\n    usort($result, function($a, $b) {\n        return countOnes($a) == countOnes($b) ? $a - $b : countOnes($a) - countOnes($b);\n    });\n    return $result;\n}",
        "HumanEval/117": "function selectWords($s, $n) {\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $words = array_filter(explode(\" \", $s), function($w) { return strlen($w) > 0; });\n    return array_filter($words, function($w) use ($n, $consonants) {\n        return count(array_filter(str_split($w), function($c) use ($consonants) {\n            return in_array(strtolower($c), str_split($consonants));\n        })) == $n;\n    });\n}",
        "HumanEval/118": "function getClosestVowel($word) {\n    $vowels = \"aeiouAEIOU\";\n    for ($i = strlen($word) - 2; $i > 0; $i--) {\n        if (strpos($vowels, $word[$i]) !== false && strpos($vowels, $word[$i - 1]) === false && strpos($vowels, $word[$i + 1]) === false) {\n            return $word[$i];\n        }\n    }\n    return \"\";\n}",
        "HumanEval/119": "function check($s) {\n    $depth = 0;\n    foreach(str_split($s) as $ch) {\n        if ($ch == \"(\") {\n            $depth++;\n        } else {\n            $depth--;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\nfunction matchParens($lst) {\n    $s1 = $lst[0] . $lst[1];\n    $s2 = $lst[1] . $lst[0];\n    return check($s1) || check($s2) ? \"Yes\" : \"No\";\n}",
        "HumanEval/120": "function maximum($arr, $k) {\n    if ($k == 0) {\n        return [];\n    }\n    $result = $arr;\n    sort($result);\n    return array_slice($result, -$k);\n}",
        "HumanEval/121": "function solution($lst) {\n    return array_sum(array_filter($lst, function($v, $k) {\n        return $k % 2 == 0 && $v % 2 != 0;\n    }, ARRAY_FILTER_USE_BOTH));\n}",
        "HumanEval/122": "function addElements($arr, $k) {\n    return array_sum(array_filter(array_slice($arr, 0, $k), function($n) {\n        return strlen(strval($n)) <= 2;\n    }));\n}",
        "HumanEval/123": "function getOddCollatz($n) {\n    $collatz = [1];\n    while ($n != 1) {\n        if ($n % 2 != 0) {\n            $collatz[] = $n;\n            $n = 3 * $n + 1;\n        } else {\n            $n = $n / 2;\n        }\n    }\n    sort($collatz);\n    return $collatz;\n}",
        "HumanEval/124": "function validDate($date) {\n    if (strlen($date) != 10 || $date[2] != \"-\" || $date[5] != \"-\") {\n        return false;\n    }\n    $m = intval(substr($date, 0, 2));\n    $d = intval(substr($date, 3, 2));\n    if (in_array($m, [1, 3, 5, 7, 8, 10, 12]) && $d >= 1 && $d <= 31) {\n        return true;\n    }\n    if (in_array($m, [4, 6, 9, 11]) && $d >= 1 && $d <= 30) {\n        return true;\n    }\n    if ($m == 2 && $d >= 1 && $d <= 29) {\n        return true;\n    }\n    return false;\n}",
        "HumanEval/125": "function splitWords($txt) {\n    if (strpos($txt, \" \") !== false) {\n        return explode(\" \", $txt);\n    } elseif (strpos($txt, \",\") !== false) {\n        return explode(\",\", $txt);\n    } else {\n        return [strval(count(array_filter(str_split($txt), function($c) {\n            return ctype_lower($c) && ord($c) % 2 == 0;\n        })))];\n    }\n}",
        "HumanEval/126": "function isSorted($lst) {\n    if (!array_reduce(array_map(function ($i, $j) { return $i <= $j; }, array_slice($lst, 0, -1), array_slice($lst, 1)), function ($a, $b) { return $a && $b; }, true)) {\n        return false;\n    }\n    $freq = array();\n    foreach ($lst as $i) {\n        $freq[$i] = ($freq[$i] ?? 0) + 1;\n    }\n    return count($lst) == 0 || max(array_values($freq)) <= 2;\n}",
        "HumanEval/127": "function isPrime($n) {\n    if ($n < 2) {\n        return False;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return False;\n        }\n    }\n    return True;\n}\nfunction intersection($interval1, $interval2) {\n    $l = max($interval1[0], $interval2[0]);\n    $r = min($interval1[1], $interval2[1]);\n    $length = $r - $l;\n    return $length > 0 && isPrime($length) ? \"YES\" : \"NO\";\n}",
        "HumanEval/128": "function prodSigns($arr) {\n    if (count($arr) == 0) {\n        return null;\n    }\n    if (in_array(0, $arr)) {\n        return 0;\n    }\n    $sign = count(array_filter($arr, function ($n) { return $n < 0; })) % 2 == 1 ? -1 : 1;\n    return $sign * array_sum(array_map(function ($n) { return abs($n); }, $arr));\n}",
        "HumanEval/129": "function minPath($grid, $k) {\n    $n = count($grid);\n    $minVal = $n * $n + 1;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $temp = [];\n                if ($i != 0) {\n                    $temp[] = $grid[$i - 1][$j];\n                }\n                if ($j != 0) {\n                    $temp[] = $grid[$i][$j - 1];\n                }\n                if ($i != $n - 1) {\n                    $temp[] = $grid[$i + 1][$j];\n                }\n                if ($j != $n - 1) {\n                    $temp[] = $grid[$i][$j + 1];\n                }\n                $minVal = min($temp);\n            }\n        }\n    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $i % 2 == 0 ? 1 : $minVal;\n    }\n    return $result;\n}",
        "HumanEval/130": "function tri($n) {\n    if ($n == 0) {\n        return [1];\n    }\n    $seq = [1, 3];\n    for ($i = 2; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $seq[] = $i / 2 + 1;\n        } else {\n            $seq[] = $seq[$i - 1] + $seq[$i - 2] + ($i + 3) / 2;\n        }\n    }\n    return $seq;\n}",
        "HumanEval/131": "function digits($n) {\n    $odds = array_map(function ($x) { return intval($x); }, array_filter(str_split($n), function ($x) { return intval($x) % 2 == 1; }));\n    return count($odds) > 0 ? array_product($odds) : 0;\n}",
        "HumanEval/132": "function isNested($s) {\n    $openIdx = [];\n    $closeIdx = [];\n    foreach (str_split($s) as $i => $ch) {\n        switch ($ch) {\n            case '[':\n                $openIdx[] = $i; break;\n            case ']':\n                $closeIdx[] = $i; break;\n        }\n    }\n    $closeIdx = array_reverse($closeIdx);\n    $cnt = 0;\n    $i = 0;\n    $l = count($closeIdx);\n    foreach ($openIdx as $idx) {\n        if ($i < $l && $idx < $closeIdx[$i]) {\n            $cnt += 1;\n            $i += 1;\n        }\n    }\n    return $cnt >= 2;\n}",
        "HumanEval/133": "function sumSquares($lst) {\n    return array_sum(array_map(function ($n) { return pow(ceil($n), 2); }, $lst));\n}",
        "HumanEval/134": "function checkIfLastCharIsALetter($txt) {\n    if (empty($txt)) {\n        return false;\n    }\n    $last = substr($txt, (strrpos($txt, \" \")?:-1) + 1);\n    return strlen($last) == 1 && ctype_alpha($last);\n}",
        "HumanEval/135": "function canArrange($arr) {\n    if (count($arr) <= 1) {\n        return -1;\n    }\n    $idx = array_filter(range(1, count($arr) - 1), function ($i) use ($arr) { return $arr[$i] < $arr[$i - 1]; });\n    return max([...$idx, -1]);\n}",
        "HumanEval/136": "function largestSmallestIntegers($lst) {\n    $neg = array_filter($lst, function($i) { return $i < 0; });\n    $pos = array_filter($lst, function($i) { return $i > 0; });\n    $maxNeg = count($neg) > 0 ? max($neg) : null;\n    $minPos = count($pos) > 0 ? min($pos) : null;\n    return [$maxNeg, $minPos];\n}",
        "HumanEval/137": "function anyToReal($o) {\n    if (is_string($o)) {\n        return floatval(str_replace(',', '.', $o));\n    } elseif (is_int($o)) {\n        return floatval($o);\n    } elseif (is_float($o)) {\n        return $o;\n    }\n    throw new RuntimeException(\"Unknown type\");\n}        \nfunction compareOne($a, $b) {\n    $a1 = anyToReal($a);\n    $b1 = anyToReal($b);\n    if ($a1 == $b1) {\n        return null;\n    } elseif ($a1 > $b1) {\n        return $a1;\n    } else {\n        return $b1;\n    }\n}",
        "HumanEval/138": "function isEqualToSumEven($n) {\n    return $n % 2 == 0 && $n >= 8;\n}",
        "HumanEval/139": "function specialFactorial($n) {\n    $fact = 1;\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $fact *= $i;\n        $result *= $fact;\n    }\n    return $result;\n}",
        "HumanEval/140": "function fixSpaces($txt) {\n    return str_replace(\" \", \"_\", preg_replace(\"/\\s{3,}/\", \"-\", $txt));\n}",
        "HumanEval/141": "function fileNameCheck($fileName) {\n    $suf = [\"txt\", \"exe\", \"dll\"];\n    $lst = explode(\".\", $fileName);\n    if (count($lst) != 2 || !in_array($lst[1], $suf) || strlen($lst[0]) == 0 || !ctype_alpha($lst[0][0]) || count(array_filter(str_split($lst[0]), function ($ch) { return ctype_digit($ch); })) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}",
        "HumanEval/142": "function sumSquares($lst) {\n    $result = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n            $result += pow($lst[$i], 2);\n        } elseif ($i % 4 == 0) {\n            $result += pow($lst[$i], 3);\n        } else {\n            $result += $lst[$i];\n        }\n    }\n    return $result;\n}",
        "HumanEval/143": "function isPrime($n) {\n    if ($n < 2) {\n        return False;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return False;\n        }\n    }\n    return True;\n}\nfunction wordsInSentence($sentence) {\n    $words = explode(\" \", $sentence);\n    return implode(\" \", array_filter($words, function ($w) { return isPrime(strlen($w)); }));\n}",
        "HumanEval/144": "function simplify($x, $n) {\n    $xs = explode('/', $x);\n    $ns = explode('/', $n);\n    $num = intval($xs[0]) * intval($ns[0]);\n    $den = intval($xs[1]) * intval($ns[1]);\n    return $num % $den == 0;\n}",
        "HumanEval/145": "function digitsSum($n) {\n    $nStr = (string)$n;\n    if ($n >= 0) {\n        return array_sum(str_split($nStr));\n    } else {\n        return 2 * intVal(substr($nStr, 0, 2)) + digitsSum(abs($n));\n    }\n}\nfunction orderByPoints($nums) {\n    $result = $nums;\n    usort($result, function ($a, $b) {\n        return digitsSum($a) - digitsSum($b);\n    });\n    return $result;\n}",
        "HumanEval/146": "function specialFilter($nums) {\n    $odds = \"13579\";\n    return count(array_filter($nums, function ($n) use ($odds) { return $n > 10 && $n % 2 == 1 && strpos($odds, strval($n)[0]) !== false; }));\n}",
        "HumanEval/147": "function getMaxTriples($n) {\n    $c = [0, 0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        $a = $i * $i - $i + 1;\n        $c[$a % 3] += 1;\n    }\n    return $c[0] * $c[1] * $c[2] + ($c[0] * ($c[0] - 1) * ($c[0] - 2) + $c[1] * ($c[1] - 1) * ($c[1] - 2) + $c[2] * ($c[2] - 1) * ($c[2] - 2)) / 6;\n}",
        "HumanEval/148": "function bf($planet1, $planet2) {\n    $names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!in_array($planet1, $names) || !in_array($planet2, $names)) {\n        return [];\n    }\n    $l = array_search($planet1, $names);\n    $r = array_search($planet2, $names);\n    if ($l > $r) {\n        [$l, $r] = [$r, $l];\n    }\n    if ($l == $r) {\n        return [];\n    }\n    return array_slice($names, $l + 1, $r - $l - 1);\n}",
        "HumanEval/149": "function sortedListSum($lst) {\n    $result = array_filter($lst, function ($x) { return strlen($x) % 2 == 0; });\n    usort($result, function ($a, $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n        } else {\n            return strlen($a) - strlen($b);\n        }\n    });\n    return $result;\n}",
        "HumanEval/150": "function xOrY($n, $x, $y) {\n    if ($n < 2) {\n        return $y;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return $y;\n        }\n    }\n    return $x;\n}",
        "HumanEval/151": "function doubleTheDifference($lst) {\n    return array_sum(array_map(function ($n) { return $n * $n; }, array_filter($lst, function ($n) { return $n >= 0 && $n % 2 == 1; })));\n}",
        "HumanEval/152": "function compare($game, $guess) {\n    return array_map(function($x, $y) {\n        return abs($x - $y);\n    }, $game, $guess);\n}",
        "HumanEval/153": "function strongestExtension($className, $extensions) {\n    $maxS = -PHP_INT_MAX;\n    $maxExt = \"\";\n    foreach ($extensions as $ext) {\n        $upper = strlen(preg_replace('/[^A-Z]/', '', $ext));\n        $lower = strlen(preg_replace('/[^a-z]/', '', $ext));\n        $s = $upper - $lower;\n        if ($s > $maxS) {\n            $maxS = $s;\n            $maxExt = $ext;\n        }\n    }\n    return \"$className.$maxExt\";\n}",
        "HumanEval/154": "function cycpatternCheck($a, $b) {\n    if (strlen($a) < strlen($b)) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($b); $i++) {\n        if (strpos($a, substr($b, $i) . substr($b, 0, $i)) !== false) {\n            return true;\n        }\n    }\n    return false;\n}",
        "HumanEval/155": "function evenOddCount($num) {\n    $ds = strval(abs($num));\n    $even = count(array_filter(str_split($ds), function($d) { return ord($d) % 2 == 0; }));\n    return [$even, strlen($ds) - $even];\n}",
        "HumanEval/156": "function intToMiniRoman($num) {\n    $values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 , 5, 4, 1];\n    $numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    $res = \"\";\n    for ($i = 0; $i < count($values); $i++) {\n        while ($num >= $values[$i]) {\n            $res .= $numerals[$i];\n            $num -= $values[$i];\n        }\n    }\n    return $res;   \n}",
        "HumanEval/157": "function rightAngleTriangle($a, $b, $c) {\n    $s = [$a, $b, $c];\n    sort($s);\n    return $s[0] * $s[0] + $s[1] * $s[1] == $s[2] * $s[2];\n}",
        "HumanEval/158": "function findMax($words) {\n    $max_cnt = 0;\n    $max_w = \"\";\n    foreach ($words as $w) {\n        $cnt = count(array_unique(str_split($w)));\n        if ($cnt > $max_cnt) {\n            $max_cnt = $cnt;\n            $max_w = $w;\n        } elseif ($cnt == $max_cnt) {\n            $max_w = min($max_w, $w);\n        }\n    }\n    return $max_w;\n}",
        "HumanEval/159": "function eat($num, $need, $remaining) {\n    if ($need <= $remaining) {\n        return [$num + $need, $remaining - $need];\n    } else {\n        return [$num + $remaining, 0];\n    }\n}",
        "HumanEval/160": "function doAlgebra($operators, $operands) {\n    $ops = $operators;\n    $nums = $operands;\n    $i = count($ops) - 1;\n    while ($i >= 0) {\n        if ($ops[$i] == \"**\") {\n            $nums[$i] = pow($nums[$i], $nums[$i + 1]);\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n        }\n        $i -= 1;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"*\") {\n            $nums[$i] = $nums[$i] * $nums[$i + 1];\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i -= 1;\n        } elseif ($ops[$i] == \"//\") {\n            $nums[$i] = intdiv($nums[$i], $nums[$i + 1]);\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i -= 1;\n        }\n        $i += 1;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"+\") {\n            $nums[$i] = $nums[$i] + $nums[$i + 1];\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i -= 1;\n        } elseif ($ops[$i] == \"-\") {\n            $nums[$i] = $nums[$i] - $nums[$i + 1];\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i -= 1;\n        }\n        $i += 1;\n    }\n    return $nums[0];\n}",
        "HumanEval/161": "function solve($s) {\n    if (empty(array_filter(str_split($s), function ($ch) {\n        return ctype_alpha($ch);\n    }))) {\n        return strrev($s);\n    }\n    $result = \"\";\n    foreach (str_split($s) as $ch) {\n        if (!ctype_alpha($ch)) {\n            $result .= $ch;\n        } elseif (ctype_upper($ch)) {\n            $result .= strtolower($ch);\n        } elseif (ctype_lower($ch)) {\n            $result .= strtoupper($ch);\n        }\n    }\n    return $result;\n}",
        "HumanEval/162": "function stringToMd5($txt) {\n    if(empty($txt)){\n        return null;\n    }\n    $txt_bytes = utf8_encode($txt);\n    $md5_encoded = md5($txt_bytes);\n    return $md5_encoded;\n}",
        "HumanEval/163": "function generateIntegers($a, $b) {\n    $lower = max(2, min($a, $b));\n    $upper = min(8, max($a, $b));\n    if ($lower > $upper) {\n        return [];\n    }\n    return array_filter(range($lower, $upper), function($i) { return $i % 2 === 0; });\n}"
    },
    "python": {
        "HumanEval/0": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "HumanEval/1": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups",
        "HumanEval/2": "def truncate_number(num: float) -> float:\n    return num - floor(num)",
        "HumanEval/3": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False",
        "HumanEval/4": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)",
        "HumanEval/5": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result",
        "HumanEval/6": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split()\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result",
        "HumanEval/7": "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]",
        "HumanEval/8": "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = reduce(lambda x, y: x * y, numbers, 1)\n    return [n_sum, n_product]",
        "HumanEval/9": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float(\"-inf\")\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result",
        "HumanEval/10": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"",
        "HumanEval/11": "def string_xor(a: str, b: str) -> str:\n    return \"\".join([\"0\" if x == y else \"1\" for x, y in zip(a, b)])",
        "HumanEval/12": "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s",
        "HumanEval/13": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)",
        "HumanEval/14": "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[: i + 1])\n    return prefixes",
        "HumanEval/15": "def string_sequence(n: int) -> str:\n    return \" \".join([str(i) for i in range(n + 1)])",
        "HumanEval/16": "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))",
        "HumanEval/17": "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split()\n    return [durations[note] for note in notes]",
        "HumanEval/18": "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i : i + len(substring)] == substring:\n            times += 1\n    return times",
        "HumanEval/19": "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = list(filter(lambda x: x in num_dict, numbers.split(\" \")))\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)",
        "HumanEval/20": "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float(\"inf\")\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair",
        "HumanEval/21": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]",
        "HumanEval/22": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]",
        "HumanEval/23": "def str_length(s: str) -> int:\n    return len(s)",
        "HumanEval/24": "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1",
        "HumanEval/25": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors",
        "HumanEval/26": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = [num for num in numbers if counts[num] == 1]\n    return res",
        "HumanEval/27": "def flip_case(s: str) -> str:\n    flipped = []\n    for ch in s:\n        if not ch.isalpha():\n            flipped.append(ch)\n        elif ch.islower():\n            flipped.append(ch.upper())\n        elif ch.isupper():\n            flipped.append(ch.lower())\n    return ''.join(flipped)",
        "HumanEval/28": "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)",
        "HumanEval/29": "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]",
        "HumanEval/30": "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]",
        "HumanEval/31": "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "HumanEval/32": "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * x**i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2",
        "HumanEval/33": "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l[::3])\n    return [sorted_third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]",
        "HumanEval/34": "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))",
        "HumanEval/35": "def max_element(l: List[int]) -> int:\n    if not l:\n        return 0\n    return max(l)",
        "HumanEval/36": "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt",
        "HumanEval/37": "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(l[::2])\n    return [sorted_even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
        "HumanEval/38": "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.append(s[i:])\n        else:\n            result.append(s[i+1:i+3])\n            result.append(s[i])\n    return \"\".join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))",
        "HumanEval/39": "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]",
        "HumanEval/40": "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "HumanEval/41": "def car_race_collision(n: int) -> int:\n    return n ** 2",
        "HumanEval/42": "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]",
        "HumanEval/43": "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "HumanEval/44": "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])",
        "HumanEval/45": "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2",
        "HumanEval/46": "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]",
        "HumanEval/47": "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2",
        "HumanEval/48": "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]",
        "HumanEval/49": "def modp(n: int, p: int) -> int:\n    ret = 1\n    for _ in range(n):\n        ret = (ret * 2) % p\n    return ret",
        "HumanEval/50": "def encode_shift(s: str) -> str:\n    result = [chr(((ord(ch) - 97 + 5) % 26) + 97) for ch in s]\n    return \"\".join(result)\ndef decode_shift(s: str) -> str:\n    result = [chr(((ord(ch) - 97 + 21) % 26) + 97) for ch in s]\n    return \"\".join(result)",
        "HumanEval/51": "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in txt if char not in vowels])",
        "HumanEval/52": "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)",
        "HumanEval/53": "def add(x: int, y: int) -> int:\n    return x + y",
        "HumanEval/54": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)",
        "HumanEval/55": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)",
        "HumanEval/56": "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0",
        "HumanEval/57": "def monotonic(l: List[int]) -> bool:\n    diff = [y - x for x, y in zip(l, l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)",
        "HumanEval/58": "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1) & set(l2)))",
        "HumanEval/59": "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n",
        "HumanEval/60": "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))",
        "HumanEval/61": "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0",
        "HumanEval/62": "def derivative(xs: List[int]) -> List[int]:\n    return [xs[i] * i for i in range(1, len(xs))]",
        "HumanEval/63": "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0 \n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c",
        "HumanEval/64": "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt",
        "HumanEval/65": "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]",
        "HumanEval/66": "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())",
        "HumanEval/67": "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges",
        "HumanEval/68": "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]",
        "HumanEval/69": "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals, default=-1)",
        "HumanEval/70": "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result",
        "HumanEval/71": "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0",
        "HumanEval/72": "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w",
        "HumanEval/73": "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans",
        "HumanEval/74": "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2",
        "HumanEval/75": "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a /= i\n    return cnt == 3",
        "HumanEval/76": "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x",
        "HumanEval/77": "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = int(round(pow(a, 1.0 / 3.0)))\n    return root * root * root == a  ",
        "HumanEval/78": "def hex_key(num: str) -> int:\n    return len([x for x in num if x in \"2357BD\"])",
        "HumanEval/79": "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)[2:]\n    return f\"db{binary}db\"",
        "HumanEval/80": "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True",
        "HumanEval/81": "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result",
        "HumanEval/82": "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, floor(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True",
        "HumanEval/83": "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * (10 ** (n - 2))",
        "HumanEval/84": "def solve(n: int) -> str:\n    digits_sum = sum(int(d) for d in str(n))\n    return bin(digits_sum)[2:]",
        "HumanEval/85": "def add(lst: List[int]) -> int:\n    return sum([x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0])",
        "HumanEval/86": "def anti_shuffle(s: str) -> str:\n    words = [\"\".join(sorted(list(word))) for word in s.split(\" \")]\n    return \" \".join(words)",
        "HumanEval/87": "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda a: (a[0], -a[1]))",
        "HumanEval/88": "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)",
        "HumanEval/89": "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result.append(chr(shifted))\n    return \"\".join(result)",
        "HumanEval/90": "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]",
        "HumanEval/91": "def is_bored(s: str) -> int:\n    sentences = re.split(r\"[.!?]\\s*\", s)\n    return sum(sentence[:2] == \"I \" for sentence in sentences if len(sentence) >= 2)",
        "HumanEval/92": "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False",
        "HumanEval/93": "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result.append(ch1)\n        else:\n            result.append(ch)\n    return \"\".join(result)",
        "HumanEval/94": "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = str(max(primes))\n    return sum(int(digit) for digit in largest)",
        "HumanEval/95": "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return all(c.islower() for c in d.keys()) or all(c.isupper() for c in d.keys())",
        "HumanEval/96": "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes",
        "HumanEval/97": "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)",
        "HumanEval/98": "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return len([c for i, c in enumerate(s) if i % 2 == 0 and c in vowels])",
        "HumanEval/99": "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)",
        "HumanEval/100": "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]",
        "HumanEval/101": "def words_string(s: str) -> List[str]:\n    return [w for w in re.split(r\"[, ]\", s) if len(w) > 0]",
        "HumanEval/102": "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y - 1 if x != y else -1",
        "HumanEval/103": "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = int((m + n) / 2.0 + 0.5)\n    return bin(r_avg)[2:]",
        "HumanEval/104": "def all_digits_odd(s: str) -> bool:\n    return all(ord(digit) % 2 != 0 for digit in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted([num for num in x if all_digits_odd(str(num))])",
        "HumanEval/105": "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    return [digit_names[x-1] for x in sorted_arr]",
        "HumanEval/106": "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [sum(nums[:i]) if i % 2 != 0 else reduce(lambda x, y: x * y, nums[:i], 1) for i in nums]",
        "HumanEval/107": "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt",
        "HumanEval/108": "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if digits_sum(n) > 0])",
        "HumanEval/109": "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(0, len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False",
        "HumanEval/110": "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = len([num for num in lst1 if num % 2 != 0])\n    even_cnt = len([num for num in lst2 if num % 2 == 0])\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"",
        "HumanEval/111": "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = [w for w in test.split(\" \") if len(w) > 0]\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result",
        "HumanEval/112": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef reverse_delete(s: str, c: str) -> List[str]:\n    s1 = \"\".join([ch for ch in s if ch not in c])\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"]",
        "HumanEval/113": "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(ord(d) % 2 == 1 for d in num)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result",
        "HumanEval/114": "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum",
        "HumanEval/115": "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum([ceil(sum(arr) / capacity) for arr in grid])",
        "HumanEval/116": "def count_ones(num: int) -> int:\n    return bin(num).count(\"1\")\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))",
        "HumanEval/117": "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = [w for w in s.split(\" \") if len(w) > 0]\n    return [w for w in words if len([c for c in w if c.lower() in consonants]) == n]",
        "HumanEval/118": "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"",
        "HumanEval/119": "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return True if depth == 0 else False\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"",
        "HumanEval/120": "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    return sorted(arr)[-k:]",
        "HumanEval/121": "def solution(lst: List[int]) -> int:\n    return sum([x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0])",
        "HumanEval/122": "def add_elements(arr: List[int], k: int) -> int:\n    return sum([n for n in arr[:k] if len(str(n)) <= 2])",
        "HumanEval/123": "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)",
        "HumanEval/124": "def valid_date(date: str) -> bool:\n    if not len(date) == 10 or not date[2] == \"-\" or not date[5] == \"-\":\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False",
        "HumanEval/125": "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len([c for c in txt if c.islower() and ord(c) % 2 == 0]))]",
        "HumanEval/126": "def is_sorted(lst: List[int]) -> bool:\n    if not all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    return max(freq.values(), default=0) <= 2",
        "HumanEval/127": "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"",
        "HumanEval/128": "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if len([n for n in arr if n < 0]) % 2 == 1 else 1\n    return sign * sum([abs(n) for n in arr])",
        "HumanEval/129": "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result",
        "HumanEval/130": "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i / 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n    return seq",
        "HumanEval/131": "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return reduce(lambda x, y: x * y, odds, 1) if len(odds) > 0 else 0",
        "HumanEval/132": "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2",
        "HumanEval/133": "def sum_squares(lst: List[float]) -> int:\n    return sum([pow(ceil(n), 2) for n in lst])",
        "HumanEval/134": "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rfind(' ') + 1:]\n    return len(last) == 1 and last[0].isalpha()",
        "HumanEval/135": "def can_arrange(arr: List[int]) -> int:\n    if len (arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx, default=-1)",
        "HumanEval/136": "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if len(neg) > 0 else None\n    min_pos = min(pos) if len(pos) > 0 else None\n    return [max_neg, min_pos]",
        "HumanEval/137": "def any_to_real(o: Any) -> float:\n    if isinstance(o, str): \n        return float(o.replace(',','.'))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    raise RuntimeError(\"Type Error\");\ndef compare_one(a: Any, b: Any) -> Any:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1",
        "HumanEval/138": "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8",
        "HumanEval/139": "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result",
        "HumanEval/140": "def fix_spaces(txt: str) -> str:\n    return re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")",
        "HumanEval/141": "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or not lst[1] in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or len([x for x in lst[0] if x.isdigit()]) > 3:\n        return \"No\"\n    return \"Yes\"",
        "HumanEval/142": "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result",
        "HumanEval/143": "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join([w for w in words if is_prime(len(w))])",
        "HumanEval/144": "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0",
        "HumanEval/145": "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)",
        "HumanEval/146": "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and str(n)[0] in odds])",
        "HumanEval/147": "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6",
        "HumanEval/148": "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1 : r]",
        "HumanEval/149": "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda x: (len(x), x))",
        "HumanEval/150": "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x",
        "HumanEval/151": "def double_the_difference(lst: List[float]) -> int:\n    return sum([n * n for n in lst if n >= 0 and n % 2 == 1])",
        "HumanEval/152": "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]",
        "HumanEval/153": "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = float(\"-inf\")\n    max_ext = \"\"\n    for ext in extensions:\n        upper = len([c for c in ext if c.isupper()])\n        lower = len([c for c in ext if c.islower()])\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"",
        "HumanEval/154": "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False",
        "HumanEval/155": "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = len([d for d in ds if ord(d) % 2 == 0])\n    return [even, len(ds) - even]",
        "HumanEval/156": "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i in range(len(values)):\n        while num >= values[i]:\n            res.append(numerals[i])\n            num -= values[i]\n    return \"\".join(res)",
        "HumanEval/157": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return  s[0] * s[0] + s[1] * s[1] == s[2] * s[2]",
        "HumanEval/158": "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w",
        "HumanEval/159": "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]",
        "HumanEval/160": "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]",
        "HumanEval/161": "def solve(s: str) -> str:\n    if not any(ch.isalpha() for ch in s):\n        return s[::-1]\n    result = []\n    for ch in s:\n        if not ch.isalpha():\n            result.append(ch)\n        elif ch.isupper():\n            result.append(ch.lower())\n        elif ch.islower():\n            result.append(ch.upper())\n    return \"\".join(result)",
        "HumanEval/162": "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = hashlib.md5()\n    txt_bytes = txt.encode()\n    md5_hash.update(txt_bytes)\n    md5_encoded = md5_hash.hexdigest()\n    return md5_encoded",
        "HumanEval/163": "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]"
    },
    "ruby": {
        "HumanEval/0": "def has_close_elements(numbers, threshold)\n    for i in 0...numbers.length\n        for j in i+1...numbers.length\n            if (numbers[i] - numbers[j]).abs < threshold\n                return true\n            end\n        end\n    end\n    false\nend",
        "HumanEval/1": "def separate_paren_groups(paren_string)\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.gsub(\" \", \"\")\n    parens.each_char do |ch|\n        if ch == \"(\"\n            stk.push(ch)\n            current_group += ch\n        elsif ch == \")\"\n            stk.pop\n            current_group += ch\n            if stk.empty?\n                groups << current_group\n                current_group = \"\"\n            end\n        end\n    end\n    groups\nend",
        "HumanEval/2": "def truncate_number(num)\n    num - num.floor\nend",
        "HumanEval/3": "def below_zero(operations)\n    balance = 0\n    operations.each do |op|\n        balance += op\n        if balance < 0\n            return true\n        end\n    end\n    false\nend",
        "HumanEval/4": "def mean_absolute_deviation(numbers)\n    mean = numbers.sum / numbers.length\n    deviation = numbers.map { |x| (x - mean).abs }.sum \n    deviation / numbers.length\nend",
        "HumanEval/5": "def intersperse(numbers, delimiter)\n    result = []\n    for i in 0..numbers.length - 1\n        if i != 0\n            result << delimiter\n        end\n        result << numbers[i]\n    end\n    result\nend",
        "HumanEval/6": "def parse_nested_parens(paren_string)\n    result = []\n    paren_groups = paren_string.split\n    paren_groups.each do |group|\n        max_depth = 0\n        depth = 0\n        group.each_char do |ch|\n            if ch == \"(\"\n                depth += 1\n                max_depth = [max_depth, depth].max\n            elsif ch == \")\"\n                depth -= 1\n            end\n        end\n        result << max_depth\n    end\n    result\nend",
        "HumanEval/7": "def filter_by_substring(strs, substring)\n    strs.select { |s| s.include?(substring) }\nend",
        "HumanEval/8": "def sum_product(numbers)\n    n_sum = numbers.sum\n    n_product = numbers.reduce(1, :*)\n    [n_sum, n_product]\nend",
        "HumanEval/9": "def rolling_max(numbers)\n    max_so_far = Float::MIN\n    result = []\n    numbers.each do |num|\n        max_so_far = [max_so_far, num].max\n        result << max_so_far\n    end\n    result\nend",
        "HumanEval/10": "def is_palindrome(s)\n    s == s.reverse\nend\ndef make_palindrome(s)\n    if is_palindrome(s)\n        return s\n    end\n    for i in 0...s.length\n        if is_palindrome(s[i..])\n            return s + s[0...i].reverse\n        end\n    end\n    return \"\"\nend",
        "HumanEval/11": "def string_xor(a, b)\n    a.chars.zip(b.chars).map { |x, y| x == y ? \"0\" : \"1\" }.join\nend",
        "HumanEval/12": "def longest(strs)\n    if strs.empty?\n        return nil \n    end\n    longest_s = strs[0]\n    strs.each do |s|\n        if s.length > longest_s.length\n            longest_s = s\n        end\n    end\n    longest_s\nend",
        "HumanEval/13": "def greatest_common_divisor(a, b)\n    if b == 0\n        return a\n    else\n        return greatest_common_divisor(b, a % b)\n    end\nend",
        "HumanEval/14": "def all_prefixes(s)\n    prefixes = []\n    s.length.times do |i|\n        prefixes << s[0..i]\n    end\n    prefixes\nend",
        "HumanEval/15": "def string_sequence(n)\n    (0..n).to_a.join(\" \")\nend",
        "HumanEval/16": "def count_distinct_characters(s)\n    s.downcase.chars.uniq.length\nend",
        "HumanEval/17": "def parse_music(music_string)\n    durations = {\"o\" => 4, \"o|\" => 2, \".|\" => 1}\n    notes = music_string.split\n    notes.map { |note| durations[note] }\nend",
        "HumanEval/18": "def how_many_times(s, substring)\n    times = 0\n    for i in 0..(s.length - substring.length)\n        if s[i...(i + substring.length)] == substring\n            times += 1\n        end\n    end\n    times\nend",
        "HumanEval/19": "def sort_numbers(numbers)\n    num_dict = {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n    }\n    num_list = numbers.split(\" \").select { |x| num_dict.key?(x) }\n    num_list.sort_by! { |x| num_dict[x] }\n    num_list.join(\" \")\nend",
        "HumanEval/20": "def find_closest_elements(numbers)\n    sorted_numbers = numbers.sort\n    min_diff = Float::INFINITY\n    closest_pair = []\n    (1...sorted_numbers.length).each do |i|\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n        end\n    end\n    closest_pair\nend",
        "HumanEval/21": "def rescale_to_unit(numbers)\n    min_num = numbers.min\n    max_num = numbers.max\n    if min_num == max_num\n        return [0.0] * numbers.length\n    else\n        return numbers.map { |num| (num - min_num) / (max_num - min_num) }\n    end\nend",
        "HumanEval/22": "def filter_integers(values)\n    values.select { |x| x.is_a?(Integer) }\nend",
        "HumanEval/23": "def str_length(s)\n    s.length\nend",
        "HumanEval/24": "def largest_divisor(n)\n    (2...n).each do |i|\n        if n % i == 0\n            return n / i\n        end\n    end\n    1\nend",
        "HumanEval/25": "def factorize(n)\n    factors = []\n    divisor = 2\n    while divisor <= n\n        if n % divisor == 0\n            factors << divisor\n            n /= divisor\n        else\n            divisor += 1\n        end\n    end\n    factors\nend",
        "HumanEval/26": "def remove_duplicates(numbers)\n    counts = {}\n    numbers.each do |num|\n        counts[num] = counts.fetch(num, 0) + 1\n    end\n    res = numbers.select do |num|\n        counts[num] == 1\n    end\n    res\nend",
        "HumanEval/27": "def flip_case(s)\n    flipped = \"\"\n    s.chars.each do |ch|\n        if not ch.match(/[a-zA-Z]/)\n            flipped += ch\n        elsif ch.match(/[a-z]/)\n            flipped += ch.upcase\n        elsif ch.match(/[A-Z]/)\n            flipped += ch.downcase\n        end\n    end\n    flipped\nend",
        "HumanEval/28": "def concatenate(strs)\n    strs.join(\"\")\nend",
        "HumanEval/29": "def filter_by_prefix(strs, prefix_str)\n    strs.select { |s| s.start_with?(prefix_str) }\nend",
        "HumanEval/30": "def get_positive(l)\n    l.select { |num| num > 0 }\nend",
        "HumanEval/31": "def is_prime(n)\n    if n < 2\n        return false\n    end\n    (2..Math.sqrt(n).floor).each do |i|\n        if n % i == 0\n            return false\n        end\n    end\n    true\nend",
        "HumanEval/32": "def poly(xs, x)\n    res = 0\n    (0...xs.size).each do |i|\n        res += xs[i] * x**i\n    end\n    res\nend\ndef find_zero(xs)\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0\n        x1 *= 2\n        x2 *= 2\n    end\n    while (x1 - x2).abs > 1e-10\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0\n            return mid\n        elsif poly(xs, mid) * poly(xs, x1) < 0\n            x2 = mid\n        else\n            x1 = mid\n        end\n    end\n    (x1 + x2) / 2\nend",
        "HumanEval/33": "def sort_third(l)\n    sorted_third = l.select.with_index { |x, i| i % 3 == 0 }.sort\n    l.map.with_index { |x, i| i % 3 == 0 ? sorted_third[i / 3] : x }    \nend",
        "HumanEval/34": "def list_unique(l)\n    l.uniq.sort\nend",
        "HumanEval/35": "def max_element(l)\n    if l.empty?\n        return 0\n    end\n    l.max\nend",
        "HumanEval/36": "def fizz_buzz(n)\n    cnt = 0\n    (0...n).each do |i|\n        if i % 11 == 0 || i % 13 == 0\n            cnt += i.to_s.count(\"7\")\n        end\n    end\n    cnt\nend",
        "HumanEval/37": "def sort_even(l)\n    sorted_even = l.select.with_index { |x, i| i % 2 == 0 }.sort\n    l.map.with_index { |x, i| i % 2 == 0 ? sorted_even[i / 2] : x }  \nend",
        "HumanEval/38": "def encode_cyclic(s)\n    result = \"\"\n    (0...s.length).step(3) do |i|\n        if i + 3 > s.length\n            result += s[i..]\n        else\n            result += s[i+1..i+2]\n            result += s[i]\n        end\n    end\n    result\nend\ndef decode_cyclic(s)\n    encode_cyclic(encode_cyclic(s))\nend",
        "HumanEval/39": "def is_prime(n)\n    if n < 2\n        return false\n    end\n    (2..Math.sqrt(n).floor).each do |i|\n        if n % i == 0\n            return false\n        end\n    end\n    true\nend\ndef prime_fib(n)\n    f = [0, 1]\n    cnt = 0\n    while cnt < n\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1])\n            cnt += 1\n        end\n    end\n    f[1]\nend",
        "HumanEval/40": "def triples_sum_to_zero(l)\n    (0...l.length).each do |i|\n        (i + 1...l.length).each do |j|\n            (j + 1...l.length).each do |k|\n                if l[i] + l[j] + l[k] == 0\n                    return true\n                end\n            end\n        end\n    end\n    false\nend",
        "HumanEval/41": "def car_race_collision(n)\n    n ** 2\nend",
        "HumanEval/42": "def incr_list(l)\n    l.map { |i| i + 1 }\nend",
        "HumanEval/43": "def pairs_sum_to_zero(l)\n    seen = Set.new\n    l.each do |num|\n        if seen.include?(-num)\n            return true\n        end\n        seen.add(num)\n    end\n    false\nend",
        "HumanEval/44": "def change_base(x, bas)\n    if x == 0\n        return \"0\"\n    end\n    digits = []\n    while x > 0\n        digits << (x % bas).to_s\n        x /= bas\n    end\n    digits.reverse.join(\"\")\nend",
        "HumanEval/45": "def triangle_area(a, h)\n    (a * h).to_f / 2\nend",
        "HumanEval/46": "def fib4(n)\n    fib = [0, 0, 2, 0]\n    (4..n).each do |i|\n        fib[i % 4] = fib.sum\n    end\n    fib[n % 4]\nend",
        "HumanEval/47": "def median(l)\n    sl = l.sort\n    if l.length % 2 != 0\n        return sl[l.length / 2]\n    else\n        return (sl[l.length / 2] + sl[l.length / 2 - 1]) / 2\n    end\nend",
        "HumanEval/48": "def is_palindrome(txt)\n    txt == txt.reverse\nend",
        "HumanEval/49": "def modp(n, p)\n    ret = 1\n    (0...n).each do |i|\n        ret = (ret * 2) % p\n    end\n    ret\nend",
        "HumanEval/50": "def encode_shift(s)\n    result = s.chars.map { |ch| ((ch.ord - 97 + 5) % 26 + 97).chr }\n    result.join\nend\ndef decode_shift(s)\n    result = s.chars.map { |ch| ((ch.ord - 97 + 21) % 26 + 97).chr }\n    result.join\nend",
        "HumanEval/51": "def remove_vowels(txt)\n    vowels = \"aeiouAEIOU\"\n    txt.chars.select { |char| !vowels.include?(char) }.join\nend",
        "HumanEval/52": "def below_threshold(l, t)\n    l.all? { |x| x < t }\nend",
        "HumanEval/53": "def add(x, y)\n    x + y\nend",
        "HumanEval/54": "def same_chars(s0, s1)\n    s0.chars.to_set == s1.chars.to_set\nend",
        "HumanEval/55": "def fib(n)\n    if n <= 1\n        n\n    else\n        fib(n - 1) + fib(n - 2)\n    end\nend",
        "HumanEval/56": "def correct_bracketing(brackets)\n    depth = 0\n    brackets.each_char do |b|\n        if b == '<'\n            depth += 1\n        elsif b == '>'\n            depth -= 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    depth == 0\nend",
        "HumanEval/57": "def monotonic(l)\n    diff = l.each_cons(2).map { |a, b| b - a }\n    diff.all? { |x| x <= 0 } || diff.all? { |x| x >= 0 }\nend",
        "HumanEval/58": "def common(l1, l2)\n    (l1 & l2).sort\nend",
        "HumanEval/59": "def largest_prime_factor(n)\n    i = 2\n    while i * i <= n\n        if n % i != 0\n            i += 1\n        else\n            n /= i\n        end\n    end\n    n\nend",
        "HumanEval/60": "def sum_to_n(n)\n    (0..n).sum\nend",
        "HumanEval/61": "def correct_bracketing(brackets)\n    depth = 0\n    brackets.each_char do |b|\n        if b == '('\n            depth += 1\n        elsif b == ')'\n            depth -= 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    depth == 0\nend",
        "HumanEval/62": "def derivative(xs)\n    xs.each_with_index.map { |x, i| x * i }.drop(1)\nend",
        "HumanEval/63": "def fibfib(n)\n    if n <= 1\n        return 0\n    end\n    a, b, c = 0, 0, 1\n    while n > 2\n        a, b, c = b, c, a + b + c\n        n -= 1\n    end\n    c\nend",
        "HumanEval/64": "def vowels_count(s)\n    vowels = \"aeiou\"\n    cnt = 0\n    s.length.times do |i|\n        if vowels.include?(s[i].downcase) || (i == s.length - 1 && s[i].downcase == \"y\")\n            cnt += 1\n        end\n    end\n    cnt\nend",
        "HumanEval/65": "def circular_shift(x, shift)\n    x_str = x.to_s\n    if shift > x_str.length\n        x_str.reverse\n    else\n        x_str[-shift..] + x_str[...-shift]\n    end\nend",
        "HumanEval/66": "def digit_sum(s)\n    s.chars.select { |c| c =~/[A-Z]/ }.reduce(0) { |a, c| a + c.ord }\nend",
        "HumanEval/67": "def fruit_distribution(s, n)\n    words = s.split(' ')\n    apples = words[words.index(\"apples\") - 1].to_i\n    oranges = words[words.index(\"oranges\") - 1].to_i\n    n - apples - oranges\nend",
        "HumanEval/68": "def pluck(arr)\n    evens = arr.select { |n| n % 2 == 0 }\n    if evens.length == 0\n        return []\n    end\n    min_even = evens.min\n    [min_even, arr.index(min_even)]\nend",
        "HumanEval/69": "def search(lst)\n    freqs = {}\n    lst.each do |n|\n        freqs[n] = freqs.fetch(n, 0) + 1\n    end\n    good_vals = freqs.select { |k, v| v >= k }.keys\n    good_vals.max || -1\nend",
        "HumanEval/70": "def strange_sort_list(lst)\n    sl = lst.sort\n    result = []\n    left, right = 0, sl.length - 1\n    while left <= right\n        result << sl[left]\n        left += 1\n        if left <= right\n            result << sl[right]\n            right -= 1\n        end\n    end\n    result    \nend",
        "HumanEval/71": "def triangle_area(a, b, c)\n    if a + b > c && a + c > b && b + c > a\n        s = (a + b + c) / 2.0\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else\n        return -1.0\n    end\nend",
        "HumanEval/72": "def will_it_fly(q, w)\n    if q.length == 0\n        return false\n    end\n    is_palin = (0...q.length).all? do |i|\n        q[i] == q[q.length - i - 1]\n    end\n    total = q.sum\n    is_palin && total <= w\nend",
        "HumanEval/73": "def smallest_change(arr)\n    ans = 0\n    (0...arr.length / 2).each do |i|\n        if arr[i] != arr[arr.length - i - 1]\n            ans += 1\n        end\n    end\n    ans\nend",
        "HumanEval/74": "def total_match(lst1, lst2)\n    cnt1 = lst1.map(&:length).sum\n    cnt2 = lst2.map(&:length).sum\n    cnt1 <= cnt2 ? lst1 : lst2\nend",
        "HumanEval/75": "def is_prime(n)\n    if n < 2\n        return false\n    end\n    (2..Math.sqrt(n).floor).each do |i|\n        if n % i == 0\n            return false\n        end\n    end\n    true\nend\ndef is_multiply_prime(a)\n    cnt = 0\n    (2..a).each do |i|\n        if is_prime(i)\n            while a % i == 0\n                cnt += 1\n                a /= i\n            end\n        end\n    end\n    cnt == 3\nend",
        "HumanEval/76": "def is_simple_power(x, n)\n    if n < 2\n        return x == n\n    end\n    tmp = 1\n    while tmp < x\n        tmp *= n\n    end\n    tmp == x\nend",
        "HumanEval/77": "def is_cube(a)\n    a = a.abs\n    root = (a ** (1.0 / 3.0)).round.to_i\n    root * root * root == a\nend",
        "HumanEval/78": "def hex_key(num)\n    num.count(\"2357BD\")\nend",
        "HumanEval/79": "def decimal_to_binary(dec)\n    binary = dec.to_s(2)\n    \"db#{binary}db\"\nend",
        "HumanEval/80": "def is_happy(s)\n    if s.length < 3\n        return false\n    end\n    for i in 0..(s.length - 3)\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n            return false\n        end\n    end\n    true\nend",
        "HumanEval/81": "def numerical_letter_grade(grades)\n    result = []\n    grades.each do |g|\n        case\n        when g == 4.0\n            result << \"A+\"\n        when g > 3.7\n            result << \"A\"\n        when g > 3.3\n            result << \"A-\"\n        when g > 3.0\n            result << \"B+\"\n        when g > 2.7\n            result << \"B\"\n        when g > 2.3\n            result << \"B-\"\n        when g > 2.0\n            result << \"C+\"\n        when g > 1.7\n            result << \"C\"\n        when g > 1.3\n            result << \"C-\"\n        when g > 1.0\n            result << \"D+\"\n        when g > 0.7\n            result << \"D\"\n        when g > 0.0\n            result << \"D-\"\n        else\n            result << \"E\"\n        end\n    end\n    result\nend",
        "HumanEval/82": "def prime_length(s)\n    length = s.length\n    if length < 2\n        return false\n    end\n    (2..Math.sqrt(length).floor).each do |i|\n        if length % i == 0\n            return false\n        end\n    end\n    true\nend",
        "HumanEval/83": "def starts_one_ends(n)\n    if n == 1\n        return 1\n    end\n    2 * 9 * (10 ** (n - 2))\nend",
        "HumanEval/84": "def solve(n)\n    digits_sum = n.to_s.split('').map(&:to_i).sum\n    digits_sum.to_s(2)\nend",
        "HumanEval/85": "def add(lst)\n    lst.each_with_index.select { |x, i| i.odd? && x.even? }.map(&:first).sum\nend",
        "HumanEval/86": "def anti_shuffle(s)\n    words = s.split(\" \").map { |word| word.chars.sort.join }\n    words.join(\" \")\nend",
        "HumanEval/87": "def get_row(lst, x)\n    coords = []\n    lst.each_with_index do |row, i|\n        row.each_with_index do |num, j|\n            if num == x\n                coords << [i, j]\n            end\n        end\n    end\n    coords.sort_by { |a| [a[0], -a[1]] }\nend",
        "HumanEval/88": "def sort_array(arr)\n    if arr.length == 0\n        return []\n    end\n    if (arr[0] + arr[-1]) % 2 == 0\n        return arr.sort.reverse\n    else\n        return arr.sort\n    end\nend",
        "HumanEval/89": "def encrypt(s)\n    result = \"\"\n    s.each_char do |ch|\n        shifted = ch.ord + 4\n        if shifted > 'z'.ord\n            shifted -= 26\n        end\n        result += shifted.chr\n    end\n    result\nend",
        "HumanEval/90": "def next_smallest(lst)\n    sl = lst.uniq.sort\n    if sl.length < 2\n        return nil\n    end\n    sl[1]\nend",
        "HumanEval/91": "def is_bored(s)\n    sentences = s.split(/[.!?]\\s*/)\n    sentences.count { |sentence| sentence.length >= 2 && sentence[0..1] == \"I \" }\nend",
        "HumanEval/92": "def any_int(x, y, z)\n    if x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer)\n        if (x + y == z) || (x + z == y) || (y + z == x)\n            return true\n        end\n    end\n    false\nend",
        "HumanEval/93": "def encode(message)\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    message.each_char do |ch|\n        if ch.match(/[a-zA-Z]/)\n            ch1 = ch.upcase == ch ? ch.downcase : ch.upcase\n            if vowels.include?(ch1)\n                ch1 = (ch1.ord + 2).chr\n            end\n            result += ch1\n        else\n            result += ch\n        end\n    end\n    result\nend",
        "HumanEval/94": "def is_prime(n)\n    if n < 2\n        return false\n    end\n    (2..Math.sqrt(n).floor).each do |i|\n        if n % i == 0\n            return false\n        end\n    end\n    true\nend\ndef skjkasdkd(lst)\n    primes = lst.select { |n| is_prime(n) }\n    if primes.length == 0\n        return 0\n    end\n    largest = primes.max.to_s\n    largest.chars.map(&:to_i).sum\nend",
        "HumanEval/95": "def check_dict_case(d)\n    if d.empty?\n        return false\n    end\n    d.keys.all? { |k| k.match(/^[A-Z]+$/) } || d.keys.all? { |k| k.match(/^[a-z]+$/) }\nend",
        "HumanEval/96": "def count_up_to(n)\n    primes = []\n    (2...n).each do |num|\n        if primes.all? { |p| num % p != 0 }\n            primes << num\n        end\n    end\n    primes\nend",
        "HumanEval/97": "def multiply(a, b)\n    (a.abs % 10) * (b.abs % 10)\nend",
        "HumanEval/98": "def count_upper(s)\n    vowels = \"AEIOU\"\n    s.chars.select.with_index { |c, i| i % 2 == 0 && vowels.include?(c) }.length\nend",
        "HumanEval/99": "def closest_integer(value)\n    num = value.to_f\n    if num >= 0\n        return (num + 0.5).to_i\n    else\n        return (num - 0.5).to_i\n    end\nend",
        "HumanEval/100": "def make_a_pile(n)\n    (0...n).map { |i| n + 2 * i }\nend",
        "HumanEval/101": "def words_string(s)\n    s.split(/[ ,]/).select { |w| w.length > 0 }\nend",
        "HumanEval/102": "def choose_num(x, y)\n    if x > y\n        return -1\n    end\n    if y % 2 == 0\n        return y\n    end\n    y != x ? y - 1 : -1\nend",
        "HumanEval/103": "def rounded_avg(n, m)\n    if n > m\n        return nil\n    end\n    r_avg = ((n + m) / 2.0 + 0.5).to_i\n    r_avg.to_s(2)\nend",
        "HumanEval/104": "def all_digits_odd(s)\n    s.chars.all? { |digit| digit.ord % 2 != 0 }\nend\ndef unique_digits(x)\n    x.select { |n| all_digits_odd(n.to_s) }.sort\nend",
        "HumanEval/105": "def by_length(arr)\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = arr.select { |x| 1 <= x && x <= 9 }.sort.reverse\n    sorted_arr.map { |x| digit_names[x - 1] }\nend",
        "HumanEval/106": "def f(n)\n    nums = (1..n).to_a\n    nums.map { |i| i % 2 != 0 ? nums.take(i).sum : nums.take(i).reduce(:*) }\nend",
        "HumanEval/107": "def is_palindrome(s)\n    s == s.reverse\nend\ndef even_odd_palindrome(n)\n    cnt = [0, 0]\n    for i in 1..n\n        if is_palindrome(i.to_s)\n            cnt[i % 2] += 1\n        end\n    end\n    cnt\nend",
        "HumanEval/108": "def digits_sum(n)\n    n_str = n.to_s\n    if n >= 0\n        n_str.split('').map(&:to_i).sum\n    else\n        n_str[0..1].to_i * 2 + digits_sum(n.abs)\n    end\nend\ndef count_nums(arr)\n    arr.count { |n| digits_sum(n) > 0 }\nend",
        "HumanEval/109": "def move_one_ball(arr)\n    if arr.empty?\n        return true\n    end\n    sorted_arr = arr.sort\n    for i in 0..arr.length-1\n        if arr[i..] == sorted_arr[0...arr.length-i] and arr[0...i] == sorted_arr[arr.length-i..]\n            return true\n        end\n    end\n    false\nend",
        "HumanEval/110": "def can_exchange(lst1, lst2)\n    odd_cnt = lst1.count { |n| n % 2 != 0 }\n    even_cnt = lst2.count { |n| n % 2 == 0 }\n    return even_cnt >= odd_cnt ? \"YES\" : \"NO\"\nend",
        "HumanEval/111": "def histogram(test)\n    freq = {}\n    words = test.split(\" \").select { |w| w.length > 0 }\n    words.each do |w|\n        freq[w] = freq.fetch(w, 0) + 1\n    end\n    result = {}\n    if freq.length > 0\n        max_freq = freq.values.max\n        freq.each do |k, v|\n            if v == max_freq\n                result[k] = v\n            end\n        end\n    end\n    return result\nend",
        "HumanEval/112": "def is_palindrome(s)\n    s == s.reverse\nend\ndef reverse_delete(s, c)\n    s1 = s.chars.select { |ch| !c.include?(ch) }.join\n    return [s1, is_palindrome(s1) ? \"yes\" : \"no\"]\nend",
        "HumanEval/113": "def odd_count(lst)\n    result = []\n    lst.each do |num|\n        n = num.chars.count { |d| d.ord % 2 == 1 }\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.push(rs.gsub(\"i\", n.to_s))\n    end\n    result\nend",
        "HumanEval/114": "def min_sub_array_sum(nums)\n    min_sum = 0\n    cur_sum = 0\n    nums.each do |n|\n        cur_sum = [cur_sum + n, 0].min\n        min_sum = [cur_sum, min_sum].min\n    end\n    if min_sum == 0\n        min_sum = nums.min\n    end\n    min_sum\nend",
        "HumanEval/115": "def max_fill(grid, capacity)\n    grid.map { |arr| (arr.sum / capacity.to_f).ceil }.sum\nend",
        "HumanEval/116": "def count_ones(num)\n    num.to_s(2).count(\"1\")\nend\ndef sort_array(arr)\n    arr.sort_by { |n| [count_ones(n), n] }\nend",
        "HumanEval/117": "def select_words(s, n)\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").select { |w| w.length > 0 }\n    words.select { |w| w.chars.count { |c| consonants.include?(c.downcase) } == n }\nend",
        "HumanEval/118": "def get_closest_vowel(word)\n    vowels = \"aeiouAEIOU\"\n    (word.length - 2).downto(1) do |i|\n        if vowels.include?(word[i]) && !vowels.include?(word[i - 1]) && !vowels.include?(word[i + 1])\n            return word[i]\n        end\n    end\n    return \"\"\nend",
        "HumanEval/119": "def check(s)\n    depth = 0\n    s.each_char do |ch|\n        if ch == \"(\"\n            depth += 1\n        else\n            depth -= 1\n        end\n        if depth < 0\n            return false \n        end\n    end\n    depth == 0 ? true : false\nend\ndef match_parens(lst)\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    check(s1) || check(s2) ? \"Yes\" : \"No\"\nend",
        "HumanEval/120": "def maximum(arr, k)\n    if k == 0\n        return []\n    end\n    arr.sort[-k..]\nend",
        "HumanEval/121": "def solution(lst)\n    lst.each_with_index.select { |x, i| i.even? && x.odd? }.map(&:first).sum\nend",
        "HumanEval/122": "def add_elements(arr, k)\n    arr.take(k).select { |n| n.to_s.length <= 2 }.sum\nend",
        "HumanEval/123": "def get_odd_collatz(n)\n    collatz = [1]\n    while n != 1\n        if n % 2 != 0\n            collatz.append(n)\n            n = 3 * n + 1\n        else\n            n = n / 2\n        end\n    end\n    collatz.sort\nend",
        "HumanEval/124": "def valid_date(date)\n    if date.length != 10 || date[2] != \"-\" || date[5] != \"-\"\n        return false\n    end\n    m = date[0..1].to_i\n    d = date[3..4].to_i\n    if [1, 3, 5, 7, 8, 10, 12].include?(m) && d >= 1 && d <= 31\n        return true\n    end\n    if [4, 6, 9, 11].include?(m) && d >= 1 && d <= 30\n        return true\n    end\n    if m == 2 && d >= 1 && d <= 29\n        return true\n    end\n    false\nend",
        "HumanEval/125": "def split_words(txt)\n    if txt.include?(\" \")\n        txt.split\n    elsif txt.include?(\",\")\n        txt.split(\",\")\n    else\n        [txt.chars.count { |c| c == c.downcase && c.ord % 2 == 0 }.to_s]\n    end\nend",
        "HumanEval/126": "def is_sorted(lst)\n    if !lst.each_cons(2).all? { |a, b| a <= b }\n        return false\n    end\n    freq = {}\n    lst.each do |i|\n        freq[i] = freq.fetch(i, 0) + 1\n    end\n    (freq.values.max || 0) <= 2\nend",
        "HumanEval/127": "def is_prime(n)\n    if n < 2\n        return false\n    end\n    (2..Math.sqrt(n).floor).each do |i|\n        if n % i == 0\n            return false\n        end\n    end\n    true\nend\ndef intersection(interval1, interval2)\n    l = [interval1[0], interval2[0]].max\n    r = [interval1[1], interval2[1]].min\n    length = r - l\n    length > 0 && is_prime(length) ? \"YES\" : \"NO\"\nend",
        "HumanEval/128": "def prod_signs(arr)\n    if arr.empty?\n        return nil\n    end\n    if arr.include?(0)\n        return 0\n    end\n    sign = arr.count { |n| n < 0 } % 2 == 1 ? -1 : 1\n    sign * arr.map(&:abs).sum\nend",
        "HumanEval/129": "def min_path(grid, k)\n    n = grid.length\n    min_val = n * n + 1\n    (0...n).each do |i|\n        (0...n).each do |j|\n            if grid[i][j] == 1\n                temp = []\n                if i != 0\n                    temp << grid[i - 1][j]\n                end\n                if j != 0\n                    temp << grid[i][j - 1]\n                end\n                if i != n - 1\n                    temp << grid[i + 1][j]\n                end\n                if j != n - 1\n                    temp << grid[i][j + 1]\n                end\n                min_val = temp.min\n            end\n        end\n    end\n    result = []\n    (0...k).each do |i|\n        result << (i % 2 == 0 ? 1 : min_val)\n    end\n    result\nend",
        "HumanEval/130": "def tri(n)\n    if n == 0\n        return [1]\n    end\n    seq = [1, 3]\n    for i in 2..n\n        if i % 2 == 0\n            seq << i / 2 + 1\n        else\n            seq << seq[i - 1] + seq[i - 2] + (i + 3) / 2\n        end\n    end\n    seq\nend",
        "HumanEval/131": "def digits(n)\n    odds = n.to_s.chars.select { |d| d.to_i % 2 == 1 }.map(&:to_i)\n    odds.empty? ? 0 : odds.reduce(:*)\nend",
        "HumanEval/132": "def is_nested(s)\n    open_idx = []\n    close_idx = []\n    s.chars.each_with_index do |ch, i|\n        case ch\n        when '['\n            open_idx << i\n        when ']'\n            close_idx << i\n        end\n    end\n    close_idx.reverse!\n    cnt = 0\n    i = 0\n    l = close_idx.length\n    open_idx.each do |idx|\n        if i < l && idx < close_idx[i]\n            cnt += 1\n            i += 1\n        end\n    end\n    cnt >= 2\nend",
        "HumanEval/133": "def sum_squares(lst)\n    lst.map { |n| n.ceil.pow(2) }.sum\nend",
        "HumanEval/134": "def check_if_last_char_is_a_letter(txt)\n    if txt.empty?\n        return false\n    end\n    last = txt[(txt.rindex(\" \") || -1) + 1..]\n    last.length == 1 && last[0].match?(/[[:alpha:]]/)\nend",
        "HumanEval/135": "def can_arrange(arr)\n    if arr.length <= 1\n        return -1\n    end\n    idx = (1...arr.length).select { |i| arr[i] < arr[i - 1] }\n    idx.max || -1\nend",
        "HumanEval/136": "def largest_smallest_integers(lst)\n    neg = lst.select { |i| i < 0 }\n    pos = lst.select { |i| i > 0 }\n    max_neg = neg.max || nil\n    min_pos = pos.min || nil\n    [max_neg, min_pos]\nend",
        "HumanEval/137": "def any_to_real(o)\n    if o.is_a?(String)\n        return o.gsub(',', '.').to_f\n    elsif o.is_a?(Integer)\n        return o.to_f\n    elsif o.is_a?(Float)\n        return o\n    end\n    raise Exception.new \"Type Error\"\nend\ndef compare_one(a, b)\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1\n        return nil\n    elsif a1 > b1\n        return a1\n    else\n        return b1\n    end\nend",
        "HumanEval/138": "def is_equal_to_sum_even(n)\n    n % 2 == 0 && n >= 8\nend",
        "HumanEval/139": "def special_factorial(n)\n    fact = 1\n    result = 1\n    (1..n).each do |i|\n        fact *= i\n        result *= fact\n    end\n    result\nend",
        "HumanEval/140": "def fix_spaces(txt)\n    txt.gsub(/\\s{3,}/, \"-\").gsub(\" \", \"_\")\nend",
        "HumanEval/141": "def file_name_check(file_name)\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if lst.length != 2 || !suf.include?(lst[1]) || lst[0].length == 0 || !lst[0][0].match?(/[[:alpha:]]/) || lst[0].chars.count { |x| x.match?(/[[:digit:]]/) } > 3\n        return \"No\"\n    end\n    \"Yes\"\nend",
        "HumanEval/142": "def sum_squares(lst)\n    result = 0\n    lst.length.times do |i|\n        if i % 3 == 0\n            result += lst[i].pow(2)\n        elsif i % 4 == 0\n            result += lst[i].pow(3)\n        else\n            result += lst[i]\n        end\n    end\n    result\nend",
        "HumanEval/143": "def is_prime(n)\n    if n < 2\n        return false\n    end\n    (2..Math.sqrt(n).floor).each do |i|\n        if n % i == 0\n            return false\n        end\n    end\n    true\nend\ndef words_in_sentence(sentence)\n    words = sentence.split(\" \")\n    words.select { |w| is_prime(w.length) }.join(\" \")\nend",
        "HumanEval/144": "def simplify(x, n)\n    xs = x.split('/')\n    ns = n.split('/')\n    num = xs[0].to_i * ns[0].to_i\n    den = xs[1].to_i * ns[1].to_i\n    num % den == 0\nend",
        "HumanEval/145": "def digits_sum(n)\n    n_str = n.to_s\n    if n >= 0\n        n_str.split('').map(&:to_i).sum\n    else\n        n_str[0..1].to_i * 2 + digits_sum(n.abs)\n    end\nend\ndef order_by_points(nums)\n    nums.sort_by {|n| digits_sum(n)}\nend",
        "HumanEval/146": "def special_filter(nums)\n    odds = \"13579\"\n    nums.count { |n| n > 10 && n % 2 == 1 && odds.include?(n.to_s[0]) }\nend",
        "HumanEval/147": "def get_max_triples(n)\n    c = [0, 0, 0]\n    (1..n).each do |i|\n        a = i * i - i + 1\n        c[a % 3] += 1\n    end\n    c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\nend",
        "HumanEval/148": "def bf(planet1, planet2)\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if !names.include?(planet1) || !names.include?(planet2)\n        return []\n    end\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r\n        l, r = r, l\n    end\n    if l == r\n        return []\n    end\n    names[l + 1...r]\nend",
        "HumanEval/149": "def sorted_list_sum(lst)\n    result = lst.select { |s| s.length.even? }\n    result.sort_by { |s| [s.length, s] }\nend",
        "HumanEval/150": "def x_or_y(n, x, y)\n    if n < 2\n        return y\n    end\n    (2..Math.sqrt(n).floor).each do |i|\n        if n % i == 0\n            return y\n        end\n    end\n    x\nend",
        "HumanEval/151": "def double_the_difference(lst)\n    lst.select { |n| n >= 0 && n % 2 == 1 }.map { |n| (n * n).to_i }.sum\nend",
        "HumanEval/152": "def compare(game, guess)\n    game.zip(guess).map { |x, y| (x - y).abs }\nend",
        "HumanEval/153": "def strongest_extension(class_name, extensions)\n    max_s = -Float::INFINITY\n    max_ext = \"\"\n    extensions.each do |ext|\n        upper = ext.chars.count { |c| c == c.upcase }\n        lower = ext.chars.count { |c| c == c.downcase }\n        s = upper - lower\n        if s > max_s\n            max_s = s\n            max_ext = ext\n        end\n    end\n    \"#{class_name}.#{max_ext}\"\nend",
        "HumanEval/154": "def cycpattern_check(a, b)\n    return false if a.length < b.length\n    b.length.times do |i|\n        if a.include?(b[i..] + b[0...i])\n            return true\n        end\n    end\n    false\nend",
        "HumanEval/155": "def even_odd_count(num)\n    ds = num.abs.to_s\n    even = ds.chars.count { |d| d.to_i % 2  == 0 }\n    [even, ds.length - even]\nend",
        "HumanEval/156": "def int_to_mini_roman(num)\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    values.length.times do |i|\n        while num >= values[i]\n            res += numerals[i]\n            num -= values[i]\n        end\n    end\n    res\nend",
        "HumanEval/157": "def right_angle_triangle(a, b, c)\n    s = [a, b, c].sort\n    s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\nend",
        "HumanEval/158": "def find_max(words)\n    max_cnt = 0\n    max_w = \"\"\n    words.each do |w|\n        cnt = w.chars.uniq.size\n        if cnt > max_cnt\n            max_cnt = cnt\n            max_w = w\n        elsif cnt == max_cnt\n            max_w = [max_w, w].min\n        end\n    end\n    max_w\nend",
        "HumanEval/159": "def eat(num, need, remaining)\n    if need <= remaining\n        [num + need, remaining - need]\n    else\n        [num + remaining, 0]\n    end\nend",
        "HumanEval/160": "def do_algebra(operators, operands)\n    ops = operators.dup\n    nums = operands.dup\n    i = ops.length - 1\n    while i >= 0\n        if ops[i] == \"**\"\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n        end\n        i -= 1\n    end\n    i = 0\n    while i < ops.length\n        if ops[i] == \"*\"\n            nums[i] = nums[i] * nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        elsif ops[i] == \"//\"\n            nums[i] = nums[i] / nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        end\n        i += 1\n    end\n    i = 0\n    while i < ops.length\n        if ops[i] == \"+\"\n            nums[i] = nums[i] + nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        elsif ops[i] == \"-\"\n            nums[i] = nums[i] - nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        end\n        i += 1\n    end\n    nums[0]\nend",
        "HumanEval/161": "def solve(s)\n    if !s.chars.any? { |ch| ch =~ /[a-zA-Z]/ }\n        return s.reverse\n    end\n    result = \"\"\n    s.each_char do |ch|\n        if !(ch =~ /[a-zA-Z]/)\n            result += ch\n        elsif ch =~ /[A-Z]/\n            result += ch.downcase\n        elsif ch =~ /[a-z]/\n            result += ch.upcase\n        end\n    end\n    result \nend",
        "HumanEval/162": "def string_to_md5(txt)\n    if txt.empty?\n        return nil\n    end\n    md5_hash = Digest::MD5.new\n    txt_bytes = txt.encode()\n    md5_hash.update(txt_bytes)\n    md5_encoded = md5_hash.hexdigest()\n    md5_encoded\nend",
        "HumanEval/163": "def generate_integers(a, b)\n    lower = [2, [a, b].min].max\n    upper = [8, [a, b].max].min\n    (lower..upper).select { |i| i.even? }\nend"
    },
    "rust": {
        "HumanEval/0": "pub fn has_close_elements(numbers: &Vec<f64>, threshold: f64) -> bool {\n    for i in 0..numbers.len() {\n        for j in (i + 1)..numbers.len() {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n                return true;\n            }\n        }\n    }\n    false\n}",
        "HumanEval/1": "pub fn separate_paren_groups(paren_string: &String) -> Vec<String> {\n    let mut groups: Vec<String> = Vec::new();\n    let mut stk: Vec<char> = Vec::new();\n    let mut current_group: String = String::new();\n    let parens = paren_string.replace(\" \", \"\");\n    for ch in parens.chars() {\n        if ch == '(' {\n            stk.push(ch);\n            current_group.push(ch);\n        } else if ch == ')' {\n            stk.pop();\n            current_group.push(ch);\n            if stk.is_empty() {\n                groups.push(current_group.clone());\n                current_group.clear();\n            }\n        }\n    }\n    groups\n}",
        "HumanEval/2": "pub fn truncate_number(num: f64) -> f64 {\n    num - num.floor()\n}",
        "HumanEval/3": "pub fn below_zero(operations: &Vec<i32>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n        balance += op;\n        if balance < 0 {\n            return true;\n        }\n    }\n    false\n}",
        "HumanEval/4": "pub fn mean_absolute_deviation(numbers: &Vec<f64>) -> f64 {\n    let mean = numbers.iter().sum::<f64>() / numbers.len() as f64;\n    let deviation = numbers.iter().map(|x| (x - mean).abs()).sum::<f64>();\n    deviation / numbers.len() as f64\n}",
        "HumanEval/5": "pub fn intersperse(numbers: &Vec<i32>, delimiter: i32) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len() {\n        if i != 0 {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    result\n}",
        "HumanEval/6": "pub fn parse_nested_parens(paren_string: &String) -> Vec<i32> {\n    let mut result = Vec::new();\n    let paren_group = paren_string.split_whitespace();\n    for group in paren_group {\n        let mut max_depth = 0;\n        let mut depth = 0;\n        for ch in group.chars() {\n            if ch == '(' {\n                depth += 1;\n                max_depth = max(max_depth, depth);\n            } else if ch == ')' {\n                depth -= 1;\n            }\n        }\n        result.push(max_depth);\n    }\n    result\n}",
        "HumanEval/7": "pub fn filter_by_substring(strs: &Vec<String>, substring: &String) -> Vec<String> {\n    strs.iter().filter(|s| s.contains(substring)).cloned().collect()\n}",
        "HumanEval/8": "pub fn sum_product(numbers: &Vec<i32>) -> Vec<i32> {\n    let n_sum = numbers.iter().sum();\n    let n_product = numbers.iter().product();\n    vec![n_sum, n_product]\n}",
        "HumanEval/9": "pub fn rolling_max(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut max_so_far = i32::MIN;\n    let mut result = Vec::new();\n    for num in numbers {\n        max_so_far = max(max_so_far, *num);\n        result.push(max_so_far);\n    }\n    result\n}",
        "HumanEval/10": "pub fn is_palindrome(s: &String) -> bool {\n    s == &s.chars().rev().collect::<String>()\n}\npub fn make_palindrome(s: &String) -> String {\n    if is_palindrome(s) {\n        return s.clone();\n    }\n    for i in 0..s.len() {\n        if is_palindrome(&s[i..].to_string()) {\n            return s.clone() + &s[..i].chars().rev().collect::<String>();\n        }\n    }\n    String::new()\n}",
        "HumanEval/11": "pub fn string_xor(a: &String, b: &String) -> String {\n    a.chars().zip(b.chars()).map(|(x, y)| if x == y { '0' } else { '1' }).collect()   \n}",
        "HumanEval/12": "pub fn longest(strs: &Vec<String>) -> Option<String> {\n    if strs.is_empty() {\n        return None;\n    }\n    let mut longest_s = strs[0].clone();\n    for s in strs {\n        if s.len() > longest_s.len() {\n            longest_s = s.clone();\n        }\n    }\n    Some(longest_s)\n}",
        "HumanEval/13": "pub fn greatest_common_divisor(a: i32, b: i32) -> i32 {\n    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }\n}",
        "HumanEval/14": "pub fn all_prefixes(s: &String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..s.len() {\n        prefixes.push(s[..i + 1].to_string());\n    }\n    prefixes\n}",
        "HumanEval/15": "pub fn string_sequence(n: i32) -> String {\n    (0..=n).map(|i| i.to_string()).collect::<Vec<String>>().join(\" \")\n}",
        "HumanEval/16": "pub fn count_distinct_characters(s: &String) -> i32 {\n    s.to_lowercase().chars().collect::<HashSet<char>>().len() as i32\n}",
        "HumanEval/17": "pub fn parse_music(music_string: &String) -> Vec<i32> {\n    let durations: HashMap<&str, i32> = HashMap::from([(\"o\", 4), (\"o|\", 2), (\".|\", 1)]);\n    let notes: Vec<&str> = music_string.split_whitespace().collect();\n    let parsed_notes: Vec<i32> = notes.iter().map(|note| durations.get(note).unwrap_or(&0).clone()).collect();\n    parsed_notes\n}",
        "HumanEval/18": "pub fn how_many_times(s: &String, substring: &String) -> i32 {\n    let mut times = 0;\n    for i in 0..=(s.len() as i32 - substring.len() as i32) {\n        if &s[i as usize..i as usize + substring.len()] == substring {\n            times += 1;\n        }\n    }\n    times\n}",
        "HumanEval/19": "pub fn sort_numbers(numbers: &String) -> String {\n    let mut num_dict: HashMap<&str, i32> = HashMap::from([\n        (\"zero\", 0),\n        (\"one\", 1),\n        (\"two\", 2),\n        (\"three\", 3),\n        (\"four\", 4),\n        (\"five\", 5),\n        (\"six\", 6),\n        (\"seven\", 7),\n        (\"eight\", 8),\n        (\"nine\", 9)\n    ]);\n    let mut num_list: Vec<&str> = numbers.split(\" \").filter(|&x| num_dict.contains_key(x)).collect();\n    num_list.sort_by_key(|&x| num_dict[x]);\n    num_list.join(\" \")\n}",
        "HumanEval/20": "pub fn find_closest_elements(numbers: &Vec<f64>) -> Vec<f64> {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a, b| a.total_cmp(b));\n    let mut min_diff = f64::INFINITY;\n    let mut closest_pair = vec![];\n    for i in 1..sorted_numbers.len() {\n        let diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if diff < min_diff {\n            min_diff = diff;\n            closest_pair = vec![sorted_numbers[i - 1], sorted_numbers[i]];\n        }\n    }\n    closest_pair\n}",
        "HumanEval/21": "pub fn rescale_to_unit(numbers: &Vec<f64>) -> Vec<f64> {\n    let min_num = numbers.iter().min_by(|a, b| a.total_cmp(b)).unwrap();\n    let max_num = numbers.iter().max_by(|a, b| a.total_cmp(b)).unwrap();\n    if min_num == max_num {\n        vec![0.0; numbers.len()]\n    } else {\n        numbers.iter().map(|num| (num - min_num) / (max_num - min_num)).collect()\n    }\n}",
        "HumanEval/22": "pub fn filter_integers(values: &Vec<Box<dyn Any>>) -> Vec<i32> {\n    let mut integers = Vec::new();\n    for value in values {\n        if let Some(&integer) = value.downcast_ref::<i32>() {\n            integers.push(integer);\n        }\n    }\n    integers\n}",
        "HumanEval/23": "pub fn str_length(s: &String) -> i32 {\n    s.len() as i32\n}",
        "HumanEval/24": "pub fn largest_divisor(n: i32) -> i32 {\n    for i in (2..n) {\n        if n % i == 0 {\n            return n / i\n        }\n    }\n    1\n}",
        "HumanEval/25": "pub fn factorize(n: i32) -> Vec<i32> {\n    let mut factors = Vec::new();\n    let mut divisor = 2;\n    let mut num = n;\n    while divisor <= num {\n        if num % divisor == 0 {\n            factors.push(divisor);\n            num /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    factors\n}",
        "HumanEval/26": "pub fn remove_duplicates(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut counts: HashMap<i32, i32> = HashMap::new();\n    for &num in numbers {\n        counts.insert(num, counts.get(&num).unwrap_or(&0) + 1);\n    }\n    let mut res: Vec<i32> = numbers.iter().filter(|num| counts.get(num) == Some(&1)).cloned().collect();\n    res\n}",
        "HumanEval/27": "pub fn flip_case(s: &String) -> String {\n    let mut flipped = String::new();\n    for ch in s.chars() {\n        if !ch.is_alphabetic() {\n            flipped.push(ch);\n        } else if ch.is_lowercase() {\n            flipped.push(ch.to_ascii_uppercase());\n        } else if ch.is_uppercase() {\n            flipped.push(ch.to_ascii_lowercase());\n        }\n    }\n    flipped\n}",
        "HumanEval/28": "pub fn concatenate(strs: &Vec<String>) -> String {\n    strs.join(\"\")\n}",
        "HumanEval/29": "pub fn filter_by_prefix(strs: &Vec<String>, prefix_str: &String) -> Vec<String> {\n    strs.iter().filter(|s| s.starts_with(prefix_str)).cloned().collect::<Vec<String>>()\n}",
        "HumanEval/30": "pub fn get_positive(l: &Vec<i32>) -> Vec<i32> {\n    l.iter().filter(|&x| *x > 0).cloned().collect::<Vec<i32>>()\n}",
        "HumanEval/31": "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=(n as f64).sqrt().floor() as i32 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}",
        "HumanEval/32": "pub fn poly(xs: &Vec<i32>, x: f64) -> f64 {\n    let mut res = 0.0;\n    for i in 0..xs.len() {\n        res += xs[i] as f64 * x.powi(i as i32);\n    }\n    res\n}\npub fn find_zero(xs: &Vec<i32>) -> f64 {\n    let (mut x1, mut x2) = (1.0, -1.0);\n    while poly(xs, x1) * poly(xs, x2) > 0.0 {\n        x1 *= 2.0;\n        x2 *= 2.0;\n    }\n    while (x1 - x2).abs() > 1e-10 {\n        let mid = (x1 + x2) / 2.0;\n        if poly(xs, mid) == 0.0 {\n            return mid;\n        } else if poly(xs, mid) * poly(xs, x1) < 0.0 {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    (x1 + x2) / 2.0\n}",
        "HumanEval/33": "pub fn sort_third(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_third = l.iter().enumerate().filter(|(i, _)| i % 3 == 0).map(|(_, &x)| x).collect::<Vec<_>>();\n    sorted_third.sort();\n    l.iter().enumerate().map(|(i, &x)| if i % 3 == 0 { sorted_third[i / 3] } else { x }).collect()\n}",
        "HumanEval/34": "pub fn list_unique(l: &Vec<i32>) -> Vec<i32> {\n    let mut result: Vec<i32> = l.clone();\n    result.sort();\n    result.dedup();\n    result\n}",
        "HumanEval/35": "pub fn max_element(l: &Vec<i32>) -> i32 {\n    if l.is_empty() {\n        return 0;\n    }\n    *l.iter().max().unwrap()\n}",
        "HumanEval/36": "pub fn fizz_buzz(n: i32) -> i32 {\n    let mut cnt = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += i.to_string().matches(\"7\").count() as i32;\n        }\n    }\n    cnt\n}",
        "HumanEval/37": "pub fn sort_even(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_even = l.iter().enumerate().filter(|(i, _)| i % 2 == 0).map(|(_, &x)| x).collect::<Vec<_>>();\n    sorted_even.sort();\n    l.iter().enumerate().map(|(i, &x)| if i % 2 == 0 { sorted_even[i / 2] } else { x }).collect()\n}",
        "HumanEval/38": "pub fn encode_cyclic(s: &String) -> String {\n    let mut result = String::new();\n    for i in (0..s.len()).step_by(3) {\n        if i + 3 > s.len() {\n            result.push_str(&s[i..]);\n        } else {\n            result.push_str(&s[i + 1..i + 3]);\n            result.push(s.chars().nth(i).unwrap());\n        }\n    }\n    result\n}\npub fn decode_cyclic(s: &String) -> String {\n    encode_cyclic(&encode_cyclic(s))\n}",
        "HumanEval/39": "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=(n as f64).sqrt().floor() as i32 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn prime_fib(n: i32) -> i32 {\n    let mut f = vec![0, 1];\n    let mut cnt = 0;\n    while cnt < n {\n        f = vec![f[1], f[0] + f[1]];\n        if is_prime(f[1]) {\n            cnt += 1;\n        }\n    }\n    f[1]\n}",
        "HumanEval/40": "pub fn triples_sum_to_zero(l: &Vec<i32>) -> bool {\n    for i in 0..l.len() {\n        for j in (i + 1)..l.len() {\n            for k in (j + 1)..l.len() {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true;\n                }\n            }\n        }\n    }\n    false\n}",
        "HumanEval/41": "pub fn car_race_collision(n: i32) -> i32 {\n    n.pow(2)\n}",
        "HumanEval/42": "pub fn incr_list(l: &Vec<i32>) -> Vec<i32> {\n    l.iter().map(|x| x + 1).collect()\n}",
        "HumanEval/43": "pub fn pairs_sum_to_zero(l: &Vec<i32>) -> bool {\n    let mut seen = HashSet::new();\n    for num in l {\n        if seen.contains(&(-num)) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    false\n}",
        "HumanEval/44": "pub fn change_base(x: i32, bas: i32) -> String {\n    let mut x = x;\n    if x == 0 {\n        return \"0\".to_string();\n    }\n    let mut digits = Vec::new();\n    while x > 0 {\n        digits.push((x % bas).to_string());\n        x /= bas;\n    }\n    digits.reverse();\n    digits.join(\"\")\n}",
        "HumanEval/45": "pub fn triangle_area(a: i32, h: i32) -> f64 {\n    (a * h) as f64 / 2 as f64\n}",
        "HumanEval/46": "pub fn fib4(n: i32) -> i32 {\n    let mut fib = [0, 0, 2, 0];\n    for i in 4..=n {\n        fib[(i % 4) as usize] = fib.iter().sum();\n    }\n    fib[(n % 4) as usize]\n}",
        "HumanEval/47": "pub fn median(l: &Vec<f64>) -> f64 {\n    let mut sl = l.clone();\n    sl.sort_by(|a, b| a.total_cmp(b));\n    if l.len() % 2 != 0 {\n        sl[l.len() / 2]\n    } else {\n        (sl[l.len() / 2] + sl[l.len() / 2 - 1]) / 2.0\n    }\n}",
        "HumanEval/48": "pub fn is_palindrome(txt: &String) -> bool {\n    txt == &txt.chars().rev().collect::<String>()\n}",
        "HumanEval/49": "pub fn modp(n: i32, p: i32) -> i32 {\n    let mut ret = 1;\n    for _ in 0..n {\n        ret = (ret * 2) % p;\n    }\n    ret\n}",
        "HumanEval/50": "pub fn encode_shift(s: &String) -> String {\n    let result = s.chars().map(|ch| (((ch as u8 - 97 + 5) % 26) + 97) as char);\n    result.collect::<String>()\n}\npub fn decode_shift(s: &String) -> String {\n    let result = s.chars().map(|ch| (((ch as u8 - 97 + 21) % 26) + 97) as char);\n    result.collect::<String>()\n}",
        "HumanEval/51": "pub fn remove_vowels(txt: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    txt.chars().filter(|&c| !vowels.contains(c)).collect::<String>()\n}",
        "HumanEval/52": "pub fn below_threshold(l: &Vec<i32>, t: i32) -> bool {\n    l.iter().all(|&x| x < t)\n}",
        "HumanEval/53": "pub fn add(x: i32, y: i32) -> i32 {\n    x + y\n}",
        "HumanEval/54": "pub fn same_chars(s0: &String, s1: &String) -> bool {\n    s0.chars().collect::<HashSet<_>>() == s1.chars().collect::<HashSet<_>>()\n}",
        "HumanEval/55": "pub fn fib(n: i32) -> i32 {\n    if n <= 1 {\n        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n}",
        "HumanEval/56": "pub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '<' {\n            depth += 1;\n        } else if b == '>' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}",
        "HumanEval/57": "pub fn monotonic(l: &Vec<i32>) -> bool {\n    let diff = l.iter().zip(l[1..].iter()).map(|(x, y)| y - x).collect::<Vec<i32>>();\n    diff.iter().all(|&x| x <= 0) || diff.iter().all(|&x| x >= 0)\n}",
        "HumanEval/58": "pub fn common(l1: &Vec<i32>, l2: &Vec<i32>) -> Vec<i32> {\n    let mut result = l1.iter().filter(|&x| l2.contains(x)).map(|&x| x).collect::<Vec<i32>>();\n    result.dedup();\n    result.sort();\n    result    \n}",
        "HumanEval/59": "pub fn largest_prime_factor(n: i32) -> i32 {\n    let mut n = n;\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    n\n}",
        "HumanEval/60": "pub fn sum_to_n(n: i32) -> i32 {\n    (0..=n).sum()\n}",
        "HumanEval/61": "pub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '(' {\n            depth += 1;\n        } else if b == ')' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}",
        "HumanEval/62": "pub fn derivative(xs: &Vec<i32>) -> Vec<i32> {\n    xs.iter().enumerate().map(|(i, x)| x * i as i32).skip(1).collect()\n}",
        "HumanEval/63": "pub fn fibfib(n: i32) -> i32 {\n    if n <= 1 {\n        return 0;\n    }\n    let (mut a, mut b, mut c) = (0, 0, 1);\n    let mut n = n;\n    while n > 2 {\n        (a, b, c) = (b, c, a + b + c);\n        n -= 1;\n    }\n    c\n}",
        "HumanEval/64": "pub fn vowels_count(s: &String) -> i32 {\n    let vowels = \"aeiou\";\n    let mut cnt = 0;\n    for i in 0..s.len() {\n        if vowels.contains(s[i..i+1].to_lowercase().as_str()) || (i == s.len() - 1 && s[i..i+1].to_lowercase() == \"y\") {\n            cnt += 1;\n        }\n    }\n    cnt\n}",
        "HumanEval/65": "pub fn circular_shift(x: i32, shift: i32) -> String {\n    let x_str = x.to_string();\n    if shift as usize > x_str.len() {\n        return x_str.chars().rev().collect();\n    } else {\n        return x_str[x_str.len() - shift as usize..].to_string() + &x_str[..x_str.len() - shift as usize];\n    }\n}",
        "HumanEval/66": "pub fn digit_sum(s: &String) -> i32 {\n    s.chars().filter(|c| c.is_ascii_uppercase()).map(|c| c as i32 ).sum()\n}",
        "HumanEval/67": "pub fn fruit_distribution(s: &String, n: i32) -> i32 {\n    let words = s.split(\" \").collect::<Vec<&str>>();\n    let apples = words[words.iter().position(|&w| w == \"apples\").unwrap() - 1].parse::<i32>().unwrap();\n    let oranges = words[words.iter().position(|&w| w == \"oranges\").unwrap() - 1].parse::<i32>().unwrap();\n    n - apples - oranges\n}",
        "HumanEval/68": "pub fn pluck(arr: &Vec<i32>) -> Vec<i32> {\n    let evens = arr.iter().filter(|&n| n % 2 == 0).cloned().collect::<Vec<i32>>();\n    if evens.len() == 0 {\n        return vec![];\n    }\n    let min_even = *evens.iter().min().unwrap();\n    vec![min_even, arr.iter().position(|&n| n == min_even).unwrap() as i32]\n}",
        "HumanEval/69": "pub fn search(lst: &Vec<i32>) -> i32 {\n    let mut freqs: HashMap<i32, i32> = HashMap::new();\n    for &n in lst {\n        freqs.insert(n, freqs.get(&n).unwrap_or(&0) + 1);\n    }\n    let mut good_vals: Vec<i32> = freqs.iter().filter(|(&k, &v)| v >= k).map(|(&k, &v)| k).collect();\n    *good_vals.iter().max().unwrap_or(&-1)\n}",
        "HumanEval/70": "pub fn strange_sort_list(lst: &Vec<i32>) -> Vec<i32> {\n    let mut sl = lst.clone();\n    sl.sort();\n    let mut result = Vec::new();\n    let (mut left, mut right) = (0, sl.len() as i32 - 1);\n    while left <= right {\n        result.push(sl[left as usize]);\n        left += 1;\n        if left <= right {\n            result.push(sl[right as usize]);\n            right -= 1;\n        }\n    }\n    result\n}",
        "HumanEval/71": "pub fn triangle_area(a: i32, b: i32, c: i32) -> f64 {\n    if a + b > c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n        (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}",
        "HumanEval/72": "pub fn will_it_fly(q: &Vec<i32>, w: i32) -> bool {\n    if q.len() == 0 {\n        return false;\n    }\n    let is_palin = (0..q.len()).all(|i| q[i] == q[q.len() - i - 1]);\n    let total = q.iter().sum::<i32>();\n    is_palin && total <= w\n}",
        "HumanEval/73": "pub fn smallest_change(arr: &Vec<i32>) -> i32 {\n    let mut ans = 0;\n    for i in 0..arr.len() / 2 {\n        if arr[i] != arr[arr.len() - i - 1] {\n            ans += 1;\n        }\n    }\n    ans\n}",
        "HumanEval/74": "pub fn total_match(lst1: &Vec<String>, lst2: &Vec<String>) -> Vec<String> {\n    let cnt1 = lst1.iter().map(|s| s.len()).sum::<usize>();\n    let cnt2 = lst2.iter().map(|s| s.len()).sum::<usize>();\n    if cnt1 <= cnt2 { lst1.clone() } else { lst2.clone() }\n}",
        "HumanEval/75": "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=(n as f64).sqrt().floor() as i32 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn is_multiply_prime(a: i32) -> bool {\n    let mut cnt = 0;\n    let mut a = a;\n    for i in 2..=a {\n        if is_prime(i) {\n            while a % i == 0 {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    cnt == 3\n}",
        "HumanEval/76": "pub fn is_simple_power(x: i32, n: i32) -> bool {\n    if n < 2 {\n        return x == n;\n    }\n    let mut tmp = 1;\n    while tmp < x {\n        tmp *= n;\n    }\n    tmp == x\n}",
        "HumanEval/77": "pub fn is_cube(a: i32) -> bool {\n    let a = a.abs();\n    let root = (a as f64).powf(1.0 / 3.0).round() as i32;\n    root * root * root == a\n}",
        "HumanEval/78": "pub fn hex_key(num: &String) -> i32 {\n    num.chars().filter(|&x| \"2357BD\".contains(x)).count() as i32\n}",
        "HumanEval/79": "pub fn decimal_to_binary(dec: i32) -> String {\n    format!(\"db{:b}db\", dec)\n}",
        "HumanEval/80": "pub fn is_happy(s: &String) -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    for i in 0..s.len() - 2 {\n        if s.chars().nth(i) == s.chars().nth(i + 1) || s.chars().nth(i) == s.chars().nth(i + 2) || s.chars().nth(i + 1) == s.chars().nth(i + 2) {\n            return false;\n        }\n    }\n    true\n}",
        "HumanEval/81": "pub fn numerical_letter_grade(grades: &Vec<f64>) -> Vec<String> {\n    let mut result = Vec::new();\n    for &g in grades {\n        match () {\n            _ if g == 4.0 => result.push(\"A+\".to_string()),\n            _ if g > 3.7 => result.push(\"A\".to_string()),\n            _ if g > 3.3 => result.push(\"A-\".to_string()),\n            _ if g > 3.0 => result.push(\"B+\".to_string()),\n            _ if g > 2.7 => result.push(\"B\".to_string()),\n            _ if g > 2.3 => result.push(\"B-\".to_string()),\n            _ if g > 2.0 => result.push(\"C+\".to_string()),\n            _ if g > 1.7 => result.push(\"C\".to_string()),\n            _ if g > 1.3 => result.push(\"C-\".to_string()),\n            _ if g > 1.0 => result.push(\"D+\".to_string()),\n            _ if g > 0.7 => result.push(\"D\".to_string()),\n            _ if g > 0.0 => result.push(\"D-\".to_string()),\n            _ => result.push(\"E\".to_string()),        \n        }\n    }\n    result\n}",
        "HumanEval/82": "pub fn prime_length(s: &String) -> bool {\n    let length = s.len() as i32;\n    if length < 2 {\n        return false;\n    }\n    for i in 2..=(length as f64).sqrt().floor() as i32 {\n        if length % i == 0 {\n            return false;\n        }\n    }\n    true\n}",
        "HumanEval/83": "pub fn starts_one_ends(n: i32) -> i32 {\n    if n == 1 {\n        return 1;\n    }\n    2 * 9 * (10 as i32).pow(n as u32 - 2)\n}",
        "HumanEval/84": "pub fn solve(n: i32) -> String {\n    let digits_sum: u32 = n.to_string().chars().map(|d| d.to_digit(10).unwrap()).sum();\n    format!(\"{:b}\", digits_sum)\n}",
        "HumanEval/85": "pub fn add(lst: &Vec<i32>) -> i32 {\n    lst.iter().enumerate().filter(|&(i, x)| i % 2 == 1 && x % 2 == 0).map(|(_, x)| x).sum()\n}",
        "HumanEval/86": "pub fn anti_shuffle(s: &String) -> String {\n    let mut words: Vec<String> = s.split(\" \").map(|word| {\n        let mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n        chars.into_iter().collect()\n    }).collect();\n    words.join(\" \")\n}",
        "HumanEval/87": "pub fn get_row(lst: &Vec<Vec<i32>>, x: i32) -> Vec<Vec<i32>> {\n    let mut coords: Vec<Vec<i32>> = Vec::new();\n    for i in 0..lst.len() {\n        for j in 0..lst[i].len() {\n            if lst[i][j] == x {\n                coords.push(vec![i as i32, j as i32]);\n            }\n        }\n    }\n    coords.sort_by(|a, b| {\n        if a[0] == b[0] {\n            b[1].cmp(&a[1])\n        } else {\n            a[0].cmp(&b[0])\n        }\n    });\n    coords\n}",
        "HumanEval/88": "pub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    if arr.len() == 0 {\n        return vec![];\n    }\n    let mut result: Vec<i32> = arr.clone();\n    if (arr[0] + arr[arr.len() - 1]) % 2 == 0 {\n        result.sort_by(|a, b| b.cmp(a));\n    } else {\n        result.sort();\n    }\n    result\n}",
        "HumanEval/89": "pub fn encrypt(s: &String) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        let shifted = ch as u8 + 4;\n        if shifted > 'z' as u8 {\n            result.push((shifted - 26) as char);\n        } else {\n            result.push(shifted as char);\n        }\n    }\n    result\n}",
        "HumanEval/90": "pub fn next_smallest(lst: &Vec<i32>) -> Option<i32> {\n    let mut sl: Vec<i32> = lst.clone();\n    sl.sort();\n    sl.dedup();\n    if sl.len() < 2 {\n        return None;\n    }\n    Some(sl[1])\n}",
        "HumanEval/91": "pub fn is_bored(s: &String) -> i32 {\n    let sentences: Vec<&str> = Regex::new(r\"[.!?]\\s*\").unwrap().split(s).collect();\n    sentences.iter().filter(|sentence| sentence.len() >= 2 && sentence.chars().take(2).collect::<String>() == \"I \").count() as i32\n}",
        "HumanEval/92": "pub fn any_int(x: &Box<dyn Any>, y: &Box<dyn Any>, z: &Box<dyn Any>) -> bool {\n    if let (Some(int_x), Some(int_y), Some(int_z)) = (x.downcast_ref::<i32>(), y.downcast_ref::<i32>(), z.downcast_ref::<i32>()) {\n        if (int_x + int_y == *int_z) || (int_x + int_z == *int_y) || (int_y + int_z == *int_x) {\n            return true;\n        }\n    }\n    false\n}",
        "HumanEval/93": "pub fn encode(message: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    let mut result = String::new();\n    for ch in message.chars() {\n        if ch.is_alphabetic() {\n            let mut ch1 = if ( ch.is_lowercase() ) { ch.to_uppercase().next().unwrap() } else { ch.to_lowercase().next().unwrap() };\n            if vowels.contains(ch1) {\n                ch1 = (ch1 as u8 + 2) as char;\n            }\n            result.push(ch1);\n        } else {\n            result.push(ch);\n        }\n    }\n    result\n}",
        "HumanEval/94": "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=(n as f64).sqrt().floor() as i32 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn skjkasdkd(lst: &Vec<i32>) -> i32 {\n    let primes: Vec<i32> = lst.iter().filter(|&n| is_prime(*n)).map(|&n| n).collect();\n    if primes.len() == 0 {\n        return 0;\n    }\n    let largest = primes.iter().max().unwrap().to_string();\n    largest.chars().map(|c| c.to_digit(10).unwrap() as i32).sum()\n}",
        "HumanEval/95": "pub fn check_dict_case(d: &HashMap<String, String>) -> bool {\n    if d.len() == 0 {\n        return false;\n    }\n    d.keys().all(|k| k.chars().all(|c| c.is_lowercase())) || d.keys().all(|k| k.chars().all(|c| c.is_uppercase()))\n}",
        "HumanEval/96": "pub fn count_up_to(n: i32) -> Vec<i32> {\n    let mut primes = Vec::new();\n    for num in 2..n {\n        if primes.iter().all(|&p| num % p != 0) {\n            primes.push(num);\n        }\n    }\n    primes\n}",
        "HumanEval/97": "pub fn multiply(a: i32, b: i32) -> i32 {\n    (a.abs() % 10) as i32 * (b.abs() % 10) as i32\n}",
        "HumanEval/98": "pub fn count_upper(s: &String) -> i32 {\n    let vowels = \"AEIOU\";\n    s.char_indices().filter(|(i, c)| i % 2 == 0 && vowels.contains(*c)).count() as i32\n}",
        "HumanEval/99": "pub fn closest_integer(value: &String) -> i32 {\n    let num = value.parse::<f64>().unwrap();\n    if num >= 0.0 {\n        (num + 0.5) as i32\n    } else {\n        (num - 0.5) as i32\n    }\n}",
        "HumanEval/100": "pub fn make_a_pile(n: i32) -> Vec<i32> {\n    (0..n).map(|i| n + 2 * i).collect()\n}",
        "HumanEval/101": "pub fn words_string(s: &String) -> Vec<String> {\n    Regex::new(r\"[, ]\").unwrap().split(s).filter(|w| w.len() > 0).map(|w| w.to_string()).collect()\n}",
        "HumanEval/102": "pub fn choose_num(x: i32, y: i32) -> i32 {\n    if x > y {\n        return -1;\n    }\n    if y % 2 == 0 {\n        return y;\n    }\n    if y != x { y - 1 } else { -1 }\n}",
        "HumanEval/103": "pub fn rounded_avg(n: i32, m: i32) -> Option<String> {\n    if n > m {\n        return None;\n    }\n    let r_avg = ((n + m) as f64 / 2.0 + 0.5) as i32;\n    Some(format!(\"{:b}\", r_avg))\n}",
        "HumanEval/104": "pub fn all_digits_odd(s: &str) -> bool {\n    s.chars().all(|digit| digit as u8 % 2 != 0)\n}\npub fn unique_digits(x: &Vec<i32>) -> Vec<i32> {\n    let mut result: Vec<i32> = x.iter().filter(|&num| all_digits_odd(&num.to_string())).map(|&num| num).collect();\n    result.sort();\n    result\n}",
        "HumanEval/105": "pub fn by_length(arr: &Vec<i32>) -> Vec<String> {\n    let digit_names = vec![\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let mut sorted_arr: Vec<i32> = arr.iter().filter(|&x| 1 <= *x && *x <= 9).map(|&x| x).collect();\n    sorted_arr.sort();\n    sorted_arr.reverse();\n    sorted_arr.iter().map(|&x| digit_names[(x - 1) as usize].to_string()).collect()\n}",
        "HumanEval/106": "pub fn f(n: i32) -> Vec<i32> {\n    let mut nums: Vec<i32> = (1..=n).collect();\n    nums.iter().map(|&i| if i % 2 != 0 { nums.iter().take(i as usize).sum() } else { nums.iter().take(i as usize).product() }).collect()\n}",
        "HumanEval/107": "pub fn is_palindrome(s: &String) -> bool {\n    s == &s.chars().rev().collect::<String>()\n}\npub fn even_odd_palindrome(n: i32) -> Vec<i32> {\n    let mut cnt = vec![0, 0];\n    for i in 1..=n {\n        if is_palindrome(&i.to_string()) {\n            cnt[(i % 2) as usize] += 1;\n        }\n    }\n    cnt\n}",
        "HumanEval/108": "pub fn digits_sum(n: i32) -> i32 {\n    let n_str = n.to_string();\n    if n >= 0 {\n        n_str.chars().map(|d| d.to_digit(10).unwrap() as i32).sum()\n    } else {\n        n_str[0..2].parse::<i32>().unwrap() * 2 + digits_sum(n.abs())\n    }\n}\npub fn count_nums(arr: &Vec<i32>) -> i32 {\n    arr.iter().filter(|&n| digits_sum(*n) > 0).count() as i32\n}",
        "HumanEval/109": "pub fn move_one_ball(arr: &Vec<i32>) -> bool {\n    if arr.is_empty() {\n        return true;\n    }\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort();\n    for i in 0..arr.len() {\n        if arr[i..] == sorted_arr[..arr.len() - i] && arr[..i] == sorted_arr[arr.len() - i..] {\n            return true;\n        }\n    }\n    false\n}",
        "HumanEval/110": "pub fn can_exchange(lst1: &Vec<i32>, lst2: &Vec<i32>) -> String {\n    let odd_cnt = lst1.iter().filter(|&n| n % 2 != 0).count();\n    let even_cnt = lst2.iter().filter(|&n| n % 2 == 0).count();\n    if even_cnt >= odd_cnt {\n        \"YES\".to_string()\n    } else { \n        \"NO\".to_string()\n    }\n}",
        "HumanEval/111": "pub fn histogram(test: &String) -> HashMap<String, i32> {\n    let mut freq = HashMap::new();\n    let words = test.split(\" \").filter(|&w| w.len() > 0);\n    for w in words {\n        freq.insert(w.to_string(), freq.get(w).unwrap_or(&0) + 1);\n    }\n    let mut result = HashMap::new();\n    if freq.len() > 0 {\n        let max_freq = *freq.values().max().unwrap();\n        for (k, v) in freq {\n            if v == max_freq {\n                result.insert(k, v);\n            }\n        }\n    }\n    result\n}",
        "HumanEval/112": "pub fn is_palindrome(s: &String) -> bool {\n    s == &s.chars().rev().collect::<String>()\n}\npub fn reverse_delete(s: &String, c: &String) -> Vec<String> {\n    let s1: String = s.chars().filter(|ch| !c.contains(*ch)).collect();\n    vec![s1.clone(), if is_palindrome(&s1) { \"yes\" } else { \"no\" }.to_string()]\n}",
        "HumanEval/113": "pub fn odd_count(lst: &Vec<String>) -> Vec<String> {\n    let mut result = vec![];\n    for num in lst {\n        let n = num.chars().filter(|&d| d as u8 % 2 == 1).count();\n        let rs = \"the number of odd elements in the string i of the input.\";\n        result.push(rs.replace(\"i\", &n.to_string()));\n    }\n    result\n}",
        "HumanEval/114": "pub fn min_sub_array_sum(nums: &Vec<i32>) -> i32 {\n    let mut min_sum = 0;\n    let mut cur_sum = 0;\n    for n in nums {\n        cur_sum = min(cur_sum + n, 0);\n        min_sum = min(cur_sum, min_sum);\n    }\n    if min_sum == 0 {\n        min_sum = *nums.iter().min().unwrap();\n    }\n    min_sum\n}",
        "HumanEval/115": "pub fn max_fill(grid: &Vec<Vec<i32>>, capacity: i32) -> i32 {\n    grid.iter().map(|arr| (arr.iter().sum::<i32>() as f64 / capacity as f64).ceil() as i32).sum()\n}",
        "HumanEval/116": "pub fn count_ones(num: i32) -> u32 {\n    format!(\"{:b}\", num).chars().filter(|&c| c == '1').count() as u32\n}\npub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    let mut arr = arr.clone();\n    arr.sort_by_key(|&x| (count_ones(x), x));\n    arr\n}",
        "HumanEval/117": "pub fn select_words(s: &String, n: i32) -> Vec<String> {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let words: Vec<&str> = s.split(\" \").filter(|w| w.len() > 0).collect();\n    words.iter().filter(|w| w.chars().filter(|c| consonants.contains(c.to_lowercase().next().unwrap())).count() == n as usize).map(|w| w.to_string()).collect()\n}",
        "HumanEval/118": "pub fn get_closest_vowel(word: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    for i in (1..word.len() - 1).rev() {\n        if vowels.contains(word.chars().nth(i).unwrap().to_string().as_str()) && !vowels.contains(word.chars().nth(i - 1).unwrap().to_string().as_str()) && !vowels.contains(word.chars().nth(i + 1).unwrap().to_string().as_str()) {\n            return word.chars().nth(i).unwrap().to_string();\n        }\n    }\n    \"\".to_string()\n}",
        "HumanEval/119": "pub fn check(s: &str) -> bool {\n    let mut depth = 0;\n    for ch in s.chars() {\n        if ch == '(' {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\npub fn match_parens(lst: &Vec<String>) -> String {\n    let s1 = format!(\"{}{}\", lst[0], lst[1]);\n    let s2 = format!(\"{}{}\", lst[1], lst[0]);\n    if check(&s1) || check(&s2) { \"Yes\".to_string() } else { \"No\".to_string() }\n}",
        "HumanEval/120": "pub fn maximum(arr: &Vec<i32>, k: i32) -> Vec<i32> {\n    if k == 0 {\n        return Vec::new();\n    }\n    let mut result = arr.clone();\n    result.sort();\n    result.iter().skip(result.len() - k as usize).map(|x| *x).collect()\n}",
        "HumanEval/121": "pub fn solution(lst: &Vec<i32>) -> i32 {\n    lst.iter().enumerate().filter(|&(i, x)| i % 2 == 0 && x % 2 != 0).map(|(_, x)| x).sum()\n}",
        "HumanEval/122": "pub fn add_elements(arr: &Vec<i32>, k: i32) -> i32 {\n    arr.iter().take(k as usize).filter(|&n| n.to_string().len() <= 2).sum()\n}",
        "HumanEval/123": "pub fn get_odd_collatz(n: i32) -> Vec<i32> {\n    let mut collatz = vec![1];\n    let mut n = n;\n    while n != 1 {\n        if n % 2 != 0 {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    collatz.sort();\n    collatz\n}",
        "HumanEval/124": "pub fn valid_date(date: &String) -> bool {\n    if date.len() != 10 || date.chars().nth(2).unwrap() != '-' || date.chars().nth(5).unwrap() != '-' {\n        return false;\n    }\n    let m = date[0..2].parse::<i32>().unwrap();\n    let d = date[3..5].parse::<i32>().unwrap();\n    if [1, 3, 5, 7, 8, 10, 12].contains(&m) && d >= 1 && d <= 31 {\n        return true;\n    }\n    if [4, 6, 9, 11].contains(&m) && d >= 1 && d <= 30 {\n        return true;\n    }\n    if m == 2 && d >= 1 && d <= 29 {\n        return true;\n    }\n    false\n}",
        "HumanEval/125": "pub fn split_words(txt: &String) -> Vec<String> {\n    if txt.contains(\" \") {\n        txt.split_whitespace().map(|s| s.to_string()).collect()\n    } else if txt.contains(\",\") {\n        txt.split(\",\").map(|s| s.to_string()).collect()\n    } else {\n        vec![txt.chars().filter(|&c| c.is_ascii_lowercase() && c as u8 % 2 == 0).count().to_string()]\n    }\n}",
        "HumanEval/126": "pub fn is_sorted(lst: &Vec<i32>) -> bool {\n    if !lst.windows(2).all(|w| w[0] <= w[1]) {\n        return false;\n    }\n    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    *freq.values().max().unwrap_or(&0) <= 2\n}",
        "HumanEval/127": "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=(n as f64).sqrt().floor() as i32 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn intersection(interval1: &Vec<i32>, interval2: &Vec<i32>) -> String {\n    let l = interval1[0].max(interval2[0]);\n    let r = interval1[1].min(interval2[1]);\n    let length = r - l;\n    if length > 0 && is_prime(length) { \"YES\".to_string() } else { \"NO\".to_string() }\n}",
        "HumanEval/128": "pub fn prod_signs(arr: &Vec<i32>) -> Option<i32> {\n    if arr.is_empty() {\n        return None;\n    }\n    if arr.contains(&0) {\n        return Some(0);\n    }\n    let sign = if arr.iter().filter(|&n| *n < 0).count() % 2 == 1 { -1 } else { 1 };\n    Some(sign * arr.iter().map(|n| n.abs()).sum::<i32>())\n}",
        "HumanEval/129": "pub fn min_path(grid: &Vec<Vec<i32>>, k: i32) -> Vec<i32> {\n    let n = grid.len();\n    let mut min_val = (n * n + 1) as i32;\n    for i in 0..n {\n        for j in 0..n {\n            if grid[i][j] == 1 {\n                let mut temp = vec![];\n                if i != 0 {\n                    temp.push(grid[i - 1][j]);\n                }\n                if j != 0 {\n                    temp.push(grid[i][j - 1]);\n                }\n                if i != n - 1 {\n                    temp.push(grid[i + 1][j]);\n                }\n                if j != n - 1 {\n                    temp.push(grid[i][j + 1]);\n                }\n                min_val = *temp.iter().min().unwrap();\n            }\n        }\n    }\n    let mut result = vec![];\n    for i in 0..k {\n        result.push(if i % 2 == 0 { 1 } else { min_val });\n    }\n    result\n}",
        "HumanEval/130": "pub fn tri(n: i32) -> Vec<i32> {\n    if n == 0 {\n        return vec![1];\n    }\n    let mut seq = vec![1, 3];\n    for i in 2..=n {\n        if i % 2 == 0 {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i as usize - 1] + seq[i as usize - 2] + (i + 3) / 2);\n        }\n    }\n    seq\n}",
        "HumanEval/131": "pub fn digits(n: i32) -> i32 {\n    let odds: Vec<i32> = n.to_string().chars().filter(|&d| d.to_digit(10).unwrap() % 2 == 1).map(|d| d.to_digit(10).unwrap() as i32).collect();\n    if odds.is_empty() { 0 } else { odds.iter().product() }\n}",
        "HumanEval/132": "pub fn is_nested(s: &String) -> bool {\n    let mut open_idx: Vec<usize> = Vec::new();\n    let mut close_idx: Vec<usize> = Vec::new();\n    for (i, ch) in s.char_indices() {\n        match ch {\n            '[' => open_idx.push(i),\n            ']' => close_idx.push(i),\n            _ => (),\n        }\n    }\n    close_idx.reverse();\n    let mut cnt = 0;\n    let mut i = 0;\n    let l = close_idx.len();\n    for idx in open_idx {\n        if i < l && idx < close_idx[i] {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    cnt >= 2\n}",
        "HumanEval/133": "pub fn sum_squares(lst: &Vec<f64>) -> i32 {\n    lst.iter().map(|n| (n.ceil() as i32).pow(2)).sum()\n}",
        "HumanEval/134": "pub fn check_if_last_char_is_a_letter(txt: &String) -> bool {\n    if txt.is_empty() {\n        return false;\n    }\n    let last = &txt[txt.rfind(\" \").map_or(0, |i| i + 1)..];\n    last.len() == 1 && last.chars().next().unwrap().is_alphabetic()\n}",
        "HumanEval/135": "pub fn can_arrange(arr: &Vec<i32>) -> i32 {\n    if arr.len() <= 1 {\n        return -1;\n    }\n    let idx = (1..arr.len()).filter(|&i| arr[i] < arr[i - 1]).map(|i| i as i32);\n    idx.max().unwrap_or(-1)\n}",
        "HumanEval/136": "pub fn largest_smallest_integers(lst: &Vec<i32>) -> Vec<Option<i32>> {\n    let neg: Vec<i32> = lst.iter().filter(|&i| *i < 0).cloned().collect();\n    let pos: Vec<i32> = lst.iter().filter(|&i| *i > 0).cloned().collect();\n    let max_neg = neg.iter().max().cloned();\n    let min_pos = pos.iter().min().cloned();\n    vec![max_neg, min_pos]\n}",
        "HumanEval/137": "pub fn any_to_real(o: &Box<dyn Any>) -> f64 {\n    if let Some(a_str) = o.downcast_ref::<String>() {\n        a_str.replace(\",\", \".\").parse::<f64>().unwrap()\n    } else if let Some(a_int) = o.downcast_ref::<i32>() {\n        *a_int as f64\n    } else if let Some(a_float) = o.downcast_ref::<f64>() {\n        *a_float\n    } else {\n        panic!(\"Type Error\");\n    }\n}\npub fn compare_one(a: &Box<dyn Any>, b: &Box<dyn Any>) -> Option<f64> {\n    let a1 = any_to_real(a);\n    let b1 = any_to_real(b);\n    if a1 == b1 {\n        None\n    } else if a1 > b1 {\n        Some(a1)\n    } else {\n        Some(b1)\n    }\n}",
        "HumanEval/138": "pub fn is_equal_to_sum_even(n: i32) -> bool {\n    n % 2 == 0 && n >= 8\n}",
        "HumanEval/139": "pub fn special_factorial(n: i32) -> i32 {\n    let mut fact = 1;\n    let mut result = 1;\n    for i in 1..=n {\n        fact *= i;\n        result *= fact;\n    }\n    result\n}",
        "HumanEval/140": "pub fn fix_spaces(txt: &String) -> String {\n    Regex::new(r\"\\s{3,}\").unwrap().replace_all(txt, \"-\").replace(\" \", \"_\")\n}",
        "HumanEval/141": "pub fn file_name_check(file_name: &String) -> String {\n    let suf = vec![\"txt\", \"exe\", \"dll\"];\n    let lst: Vec<&str> = file_name.split('.').collect();\n    if lst.len() != 2 || !suf.contains(&lst[1]) || lst[0].len() == 0 || !lst[0].chars().next().unwrap().is_alphabetic() || lst[0].chars().filter(|&c| c.is_digit(10)).count() > 3 {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()\n}",
        "HumanEval/142": "pub fn sum_squares(lst: &Vec<i32>) -> i32 {\n    let mut result = 0;\n    for i in 0..lst.len() {\n        if i % 3 == 0 {\n            result += lst[i].pow(2);\n        } else if i % 4 == 0 {\n            result += lst[i].pow(3);\n        } else {\n            result += lst[i];\n        }\n    }\n    result\n}",
        "HumanEval/143": "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=(n as f64).sqrt().floor() as i32 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn words_in_sentence(sentence: &String) -> String {\n    let words: Vec<&str> = sentence.split_whitespace().collect();\n    words.into_iter().filter(|w| is_prime(w.len() as i32)).collect::<Vec<&str>>().join(\" \")\n}",
        "HumanEval/144": "pub fn simplify(x: &String, n: &String) -> bool {\n    let xs: Vec<&str> = x.split('/').collect();\n    let ns: Vec<&str> = n.split('/').collect();\n    let num = xs[0].parse::<i32>().unwrap() * ns[0].parse::<i32>().unwrap();\n    let den = xs[1].parse::<i32>().unwrap() * ns[1].parse::<i32>().unwrap();\n    num % den == 0\n}",
        "HumanEval/145": "pub fn digits_sum(n: i32) -> i32 {\n    let n_str = n.to_string();\n    if n >= 0 {\n        n_str.chars().map(|d| d.to_digit(10).unwrap() as i32).sum()\n    } else {\n        n_str[0..2].parse::<i32>().unwrap() * 2 + digits_sum(n.abs())\n    }\n}\npub fn order_by_points(nums: &Vec<i32>) -> Vec<i32> {\n    let mut result = nums.clone();\n    result.sort_by_key(|&num| digits_sum(num));\n    result\n}",
        "HumanEval/146": "pub fn special_filter(nums: &Vec<i32>) -> i32 {\n    let odds = \"13579\";\n    nums.iter().cloned().filter(|&n| n > 10 && n % 2 == 1 && odds.contains(format!(\"{}\", n).chars().nth(0).unwrap())).count() as i32\n}",
        "HumanEval/147": "pub fn get_max_triples(n: i32) -> i32 {\n    let mut c = vec![0, 0, 0];\n    for i in 1..=n {\n        let a = i * i - i + 1;\n        c[(a % 3) as usize] += 1;\n    }\n    c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n}",
        "HumanEval/148": "pub fn bf(planet1: &String, planet2: &String) -> Vec<String> {\n    let names: Vec<String> = vec![\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"].iter().map(|&x| x.to_string()).collect();\n    if !names.contains(planet1) || !names.contains(planet2) {\n        return vec![];\n    }\n    let mut l = names.iter().position(|x| x == planet1).unwrap();\n    let mut r = names.iter().position(|x| x == planet2).unwrap();\n    if l > r {\n        (l, r) = (r, l);\n    }\n    if l == r {\n        return vec![];\n    }\n    names[l+1..r].to_vec()\n}",
        "HumanEval/149": "pub fn sorted_list_sum(lst: &Vec<String>) -> Vec<String> {\n    let mut result: Vec<String> = lst.iter().filter(|s| s.len() % 2 == 0).cloned().collect();\n    result.sort_by(|a, b| a.len().cmp(&b.len()).then(a.cmp(b)));\n    result\n}",
        "HumanEval/150": "pub fn x_or_y(n: i32, x: i32, y: i32) -> i32 {\n    if n < 2 {\n        return y;\n    }\n    for i in 2..=(n as f64).sqrt().floor() as i32 {\n        if n % i == 0 {\n            return y;\n        }\n    }\n    x\n}",
        "HumanEval/151": "pub fn double_the_difference(lst: &Vec<f64>) -> i32 {\n    lst.iter().cloned().filter(|&n| n >= 0.0 && n % 2.0 == 1.0).map(|n| (n * n) as i32).sum()\n}",
        "HumanEval/152": "pub fn compare(game: &Vec<i32>, guess: &Vec<i32>) -> Vec<i32> {\n    game.iter().zip(guess.iter()).map(|(&x, &y)| (x - y).abs()).collect()\n}",
        "HumanEval/153": "pub fn strongest_extension(class_name: &String, extensions: &Vec<String>) -> String {\n    let mut max_s = i32::MIN;\n    let mut max_ext = String::new();\n    for ext in extensions {\n        let upper = ext.chars().filter(|c| c.is_uppercase()).count();\n        let lower = ext.chars().filter(|c| c.is_lowercase()).count();\n        let s = upper as i32 - lower as i32;\n        if s > max_s {\n            max_s = s;\n            max_ext = ext.clone();\n        }\n    }\n    format!(\"{}.{}\", class_name, max_ext)\n}",
        "HumanEval/154": "pub fn cycpattern_check(a: &String, b: &String) -> bool {\n    if a.len() < b.len() {\n        return false;\n    }\n    for i in 0..b.len() {\n        if a.contains(&format!(\"{}{}\", &b[i..], &b[..i])) {\n            return true;\n        }\n    }\n    false\n}",
        "HumanEval/155": "pub fn even_odd_count(num: i32) -> Vec<i32> {\n    let ds = num.abs().to_string();\n    let even = ds.chars().filter(|d| d.to_digit(10).unwrap() % 2 == 0).count() as i32;\n    vec![even, ds.len() as i32 - even]\n}",
        "HumanEval/156": "pub fn int_to_mini_roman(num: i32) -> String {\n    let values = vec![1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let numerals = vec![\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let mut res = String::new();\n    let mut num = num;\n    for i in 0..values.len() {\n        while num >= values[i] {\n            res.push_str(numerals[i]);\n            num -= values[i];\n        }\n    }\n    res\n}",
        "HumanEval/157": "pub fn right_angle_triangle(a: i32, b: i32, c: i32) -> bool {\n    let mut s = vec![a, b, c];\n    s.sort();\n    s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}",
        "HumanEval/158": "pub fn find_max(words: &Vec<String>) -> String {\n    let mut max_cnt = 0;\n    let mut max_w = \"\";\n    for w in words {\n        let cnt = w.chars().collect::<HashSet<char>>().len();\n        if cnt > max_cnt {\n            max_cnt = cnt;\n            max_w = w;\n        } else if cnt == max_cnt {\n            max_w = min(max_w, w);\n        }\n    }\n    max_w.to_string()\n}",
        "HumanEval/159": "pub fn eat(num: i32, need: i32, remaining: i32) -> Vec<i32> {\n    if need <= remaining {\n        vec![num + need, remaining - need]\n    } else {\n        vec![num + remaining, 0]\n    }\n}",
        "HumanEval/160": "pub fn do_algebra(operators: &Vec<String>, operands: &Vec<i32>) -> i32 {\n    let mut ops = operators.clone();\n    let mut nums = operands.clone();\n    let mut i = ops.len() as i32 - 1;\n    while i >= 0 {\n        if ops[i as usize] == \"**\" {\n            nums[i as usize] = nums[i as usize].pow(nums[i as usize + 1] as u32);\n            nums.remove(i as usize + 1);\n            ops.remove(i as usize);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while i < ops.len() as i32 {\n        if ops[i as usize] == \"*\" {\n            nums[i as usize] = nums[i as usize] * nums[i as usize + 1];\n            nums.remove(i as usize + 1);\n            ops.remove(i as usize);\n            i -= 1;\n        } else if ops[i as usize] == \"//\" {\n            nums[i as usize] = nums[i as usize] / nums[i as usize + 1];\n            nums.remove(i as usize + 1);\n            ops.remove(i as usize);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while i < ops.len() as i32 {\n        if ops[i as usize] == \"+\" {\n            nums[i as usize] = nums[i as usize] + nums[i as usize + 1];\n            nums.remove(i as usize + 1);\n            ops.remove(i as usize);\n            i -= 1;\n        } else if ops[i as usize] == \"-\" {\n            nums[i as usize] = nums[i as usize] - nums[i as usize + 1];\n            nums.remove(i as usize + 1);\n            ops.remove(i as usize);\n            i -= 1;\n        }\n        i += 1;\n    }\n    nums[0]\n}",
        "HumanEval/161": "pub fn solve(s: &String) -> String {\n    if !s.chars().any(|ch| ch.is_alphabetic()) {\n        return s.chars().rev().collect();\n    }\n    let mut result = String::new();\n    for ch in s.chars() {\n        if !ch.is_alphabetic() {\n            result.push(ch);\n        } else if ch.is_uppercase() {\n            result.push(ch.to_ascii_lowercase());\n        } else if ch.is_lowercase() {\n            result.push(ch.to_ascii_uppercase());\n        }\n    }\n    result\n}",
        "HumanEval/162": "pub fn string_to_md5(txt: &String) -> Option<String> {\n    if txt.is_empty() {\n        return None;\n    }\n    let mut md5_hash = Md5::new();\n    let txt_bytes = txt.as_bytes();\n    md5_hash.update(txt_bytes);\n    let md5_encoded = format!(\"{:x}\", md5_hash.finalize());\n    Some(md5_encoded)\n}",
        "HumanEval/163": "pub fn generate_integers(a: i32, b: i32) -> Vec<i32> {\n    let lower = max(2, min(a, b));\n    let upper = min(8, max(a, b));\n    (lower..=upper).filter(|&x| x % 2 == 0).collect::<Vec<i32>>()\n}"
    },
    "scala": {
        "HumanEval/0": "def hasCloseElements(numbers: Seq[Double], threshold: Double): Boolean = {\n    for (i <- 0 until numbers.length) {\n        for (j <- i + 1 until numbers.length) {\n            if ((numbers(i) - numbers(j)).abs < threshold) {\n                return true\n            }\n        }\n    }\n    false\n}",
        "HumanEval/1": "def separateParenGroups(parenString: String): Seq[String] = {\n    val groups = mutable.ListBuffer[String]()\n    val stk = mutable.ListBuffer[Char]()\n    var currentGroup: String = \"\"\n    val parens = parenString.replace(\" \", \"\")\n    for (ch <- parens) {\n        if (ch == '(') {\n            stk += ch\n            currentGroup += ch\n        } else if (ch == ')') {\n            stk.remove(stk.length - 1)\n            currentGroup += ch\n            if (stk.isEmpty) {\n                groups += currentGroup\n                currentGroup = \"\"\n            }\n        }\n    }\n    groups.toList\n}",
        "HumanEval/2": "def truncateNumber(num: Double): Double = {\n    num - num.floor\n}",
        "HumanEval/3": "def belowZero(operations: Seq[Int]): Boolean = {\n    var balance = 0\n    for (op <- operations) {\n        balance += op\n        if (balance < 0) {\n            return true\n        }\n    }\n    false\n}",
        "HumanEval/4": "def meanAbsoluteDeviation(numbers: Seq[Double]): Double = {\n    val mean = numbers.sum / numbers.length\n    val deviation = numbers.map(x => (x - mean).abs).sum\n    deviation / numbers.length\n}",
        "HumanEval/5": "def intersperse(numbers: Seq[Int], delimiter: Int): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    for (i <- 0 until numbers.length) {\n        if (i != 0) {\n            result += delimiter\n        }\n        result += numbers(i)\n    }\n    result.toList\n}",
        "HumanEval/6": "def parseNestedParens(parenString: String): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    val parenGroups = parenString.split(\" \").filter(_.length > 0)\n    for (parenGroup <- parenGroups) {\n        var maxDepth = 0\n        var depth = 0\n        for (ch <- parenGroup) {\n            if (ch == '(') {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if (ch == ')') {\n                depth -= 1\n            }\n        }\n        result += maxDepth\n    }\n    result.toList\n}",
        "HumanEval/7": "def filterBySubstring(strs: Seq[String], substring: String): Seq[String] = {\n    strs.filter(_.contains(substring))\n}",
        "HumanEval/8": "def sumProduct(numbers: Seq[Int]): Seq[Int] = {\n    val nSum = numbers.sum\n    val nProduct = numbers.product\n    List(nSum, nProduct)\n}",
        "HumanEval/9": "def rollingMax(numbers: Seq[Int]): Seq[Int] = {\n    var maxSoFar = Int.MinValue\n    val result = mutable.ListBuffer[Int]()\n    for (num <- numbers) {\n        maxSoFar = max(maxSoFar, num)\n        result += maxSoFar\n    }\n    result.toList\n}",
        "HumanEval/10": "def isPalindrome(s: String): Boolean = {\n    s == s.reverse\n}\ndef makePalindrome(s: String): String = {\n    if (isPalindrome(s)) {\n        s\n    } else {\n        for (i <- 0 until s.length) {\n            if (isPalindrome(s.substring(i))) {\n                return s + s.substring(0, i).reverse\n            }\n        }\n        \"\"\n    }\n}",
        "HumanEval/11": "def stringXor(a: String, b: String): String = {\n    a.zip(b).map({case (x, y) => if (x == y) \"0\" else \"1\"}).mkString(\"\")\n}",
        "HumanEval/12": "def longest(strs: Seq[String]): Option[String] = {\n    if (strs.isEmpty) {\n        None\n    } else {\n        var longestS = strs.head\n        for (s <- strs) {\n            if (s.length > longestS.length) {\n                longestS = s\n            }\n        }\n        Some(longestS)\n    }\n}",
        "HumanEval/13": "def greatestCommonDivisor(a: Int, b: Int): Int = {\n    if (b == 0) {\n        a\n    } else {\n        greatestCommonDivisor(b, a % b)\n    }\n}",
        "HumanEval/14": "def allPrefixes(s: String): Seq[String] = {\n    val result = mutable.ListBuffer[String]()\n    for (i <- 1 to s.length) {\n        result += s.substring(0, i)\n    }\n    result.toList\n}",
        "HumanEval/15": "def stringSequence(n: Int): String = {\n    (0 to n).mkString(\" \")\n}",
        "HumanEval/16": "def countDistinctCharacters(s: String): Int = {\n    s.toLowerCase.distinct.length\n}",
        "HumanEval/17": "def parseMusic(musicString: String): Seq[Int] = {\n    val durations = Map(\"o\" -> 4, \"o|\" -> 2, \".|\" -> 1)\n    val notes = musicString.split(\" \").filter(_.length > 0)\n    notes.map(note => durations(note)).toList\n}",
        "HumanEval/18": "def howManyTimes(s: String, substring: String): Int = {\n    var times = 0\n    for (i <- 0 to s.length - substring.length) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1\n        }\n    }\n    times\n}",
        "HumanEval/19": "def sortNumbers(numbers: String): String = {\n    val numDict = Map(\n        \"zero\" -> 0,\n        \"one\" -> 1,\n        \"two\" -> 2,\n        \"three\" -> 3,\n        \"four\" -> 4,\n        \"five\" -> 5,\n        \"six\" -> 6,\n        \"seven\" -> 7,\n        \"eight\" -> 8,\n        \"nine\" -> 9\n    )\n    val numList = numbers.split(\" \").filter(numDict.contains(_))\n    val sortedList = numList.sortBy(numDict)\n    sortedList.mkString(\" \")\n}",
        "HumanEval/20": "def findClosestElements(numbers: Seq[Double]): Seq[Double] = {\n    val sortedNumbers = numbers.sorted\n    var minDiff = Double.PositiveInfinity\n    var closestPair = List[Double]()\n    for (i <- 1 until sortedNumbers.length) {\n        val diff = sortedNumbers(i) - sortedNumbers(i - 1)\n        if (diff < minDiff) {\n            minDiff = diff\n            closestPair = List(sortedNumbers(i - 1), sortedNumbers(i))\n        }\n    }\n    closestPair\n}",
        "HumanEval/21": "def rescaleToUnit(numbers: Seq[Double]): Seq[Double] = {\n    val minNum = numbers.min\n    val maxNum = numbers.max\n    if (minNum == maxNum) {\n        List.fill(numbers.length)(0.0)\n    } else {\n        numbers.map(num => (num - minNum) / (maxNum - minNum))\n    }\n}",
        "HumanEval/22": "def filterIntegers(values: Seq[Any]): Seq[Int] = {\n    values.collect { case x: Int => x }\n}",
        "HumanEval/23": "def strLength(s: String): Int = {\n    s.length\n}",
        "HumanEval/24": "def largestDivisor(n: Int): Int = {\n    for (i <- 2 until n) {\n        if (n % i == 0) {\n            return n / i\n        }\n    }\n    1\n}",
        "HumanEval/25": "def factorize(n: Int): Seq[Int] = {\n    val factors = mutable.ListBuffer[Int]()\n    @tailrec\n    def factorizeAcc(n: Int, i: Int): Unit = {\n        if (i > n) ()\n         else if (n % i == 0) {\n            factors += i\n            factorizeAcc(n / i, i)\n        } else {\n            factorizeAcc(n, i + 1)\n        }\n    }\n    factorizeAcc(n, 2)\n    factors.toList\n}",
        "HumanEval/26": "def removeDuplicates(numbers: Seq[Int]): Seq[Int] = {\n    val counts = mutable.Map[Int, Int]()\n    for (num <- numbers) {\n        counts(num) = counts.getOrElse(num, 0) + 1\n    }\n    val res = numbers.filter(num => counts(num) == 1)\n    res\n}",
        "HumanEval/27": "def flipCase(s: String): String = {\n    val flipped = StringBuilder()\n    for (ch <- s) {\n        if (!ch.isLetter) {\n            flipped += ch\n        } else if (ch.isLower) {\n            flipped += ch.toUpper\n        } else if (ch.isUpper) {\n            flipped += ch.toLower\n        }\n    }\n    flipped.toString\n}",
        "HumanEval/28": "def concatenate(strs: Seq[String]): String = {\n    strs.mkString(\"\")\n}",
        "HumanEval/29": "def filterByPrefix(strs: Seq[String], prefixStr: String): Seq[String] = {\n    strs.filter(_.startsWith(prefixStr))\n}",
        "HumanEval/30": "def getPositive(l: Seq[Int]): Seq[Int] = {\n    l.filter(_ > 0)\n}",
        "HumanEval/31": "def isPrime(n: Int): Boolean = {\n    if (n < 2) {\n        return false\n    }\n    for (i <- 2 to sqrt(n).floor.toInt) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    true\n}",
        "HumanEval/32": "def poly(xs: Seq[Int], x: Double): Double = {\n    var res = 0.0\n    for (i <- 0 until xs.length) {\n        res += xs(i) * pow(x, i)\n    }\n    res\n}\ndef findZero(xs: Seq[Int]): Double = {\n    var (x1, x2) = (1.0, -1.0)\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2\n        x2 *= 2\n    }\n    while ((x1 - x2).abs > 1e-10) {\n        val mid = (x1 + x2) / 2\n        if (poly(xs, mid) == 0) {\n            return mid\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    (x1 + x2) / 2\n}",
        "HumanEval/33": "def sortThird(l: Seq[Int]): Seq[Int] = {\n    val sortedThird = l.zipWithIndex.filter((x, i) => i % 3 == 0).map(x => x._1).sorted\n    l.zipWithIndex.map((x, i) => if (i % 3 == 0) sortedThird(i / 3) else x)\n}",
        "HumanEval/34": "def listUnique(l: Seq[Int]): Seq[Int] = {\n    l.toSet.toList.sorted\n}",
        "HumanEval/35": "def maxElement(l: Seq[Int]): Int = {\n    if (l.isEmpty) {\n        0\n    } else {\n        l.max\n    }\n}",
        "HumanEval/36": "def fizzBuzz(n: Int): Int = {\n    var cnt = 0\n    for (i <- 0 until n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString.count(_ == '7')\n        }\n    }\n    cnt\n}",
        "HumanEval/37": "def sortEven(l: Seq[Int]): Seq[Int] = {\n    val sortedEven = l.zipWithIndex.filter((x, i) => i % 2 == 0).map(x => x._1).sorted\n    l.zipWithIndex.map((x, i) => if (i % 2 == 0) sortedEven(i / 2) else x)\n}",
        "HumanEval/38": "def encodeCyclic(s: String): String = {\n    val result = new StringBuilder()\n    for (i <- 0 until s.length by 3) {\n        if (i + 3 > s.length) {\n            result ++= s.substring(i)\n        } else {\n            result ++= s.substring(i + 1, i + 3)\n            result += s(i)\n        }\n    }\n    result.toString()\n}\ndef decodeCyclic(s: String): String = {\n    encodeCyclic(encodeCyclic(s))\n}",
        "HumanEval/39": "def isPrime(n: Int): Boolean = {\n    if (n < 2) {\n        return false\n    }\n    for (i <- 2 to sqrt(n).floor.toInt) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    true\n}\ndef primeFib(n: Int): Int = {\n    var f = List(0, 1)\n    var cnt = 0\n    while (cnt < n) {\n        f = List(f(1), f(0) + f(1))\n        if (isPrime(f(1))) {\n            cnt += 1\n        }\n    }\n    f(1)\n}",
        "HumanEval/40": "def triplesSumToZero(l: Seq[Int]): Boolean = {\n    for (i <- 0 until l.length) {\n        for (j <- i + 1 until l.length) {\n            for (k <- j + 1 until l.length) {\n                if (l(i) + l(j) + l(k) == 0) {\n                    return true\n                }\n            }\n        }\n    }\n    false\n}",
        "HumanEval/41": "def carRaceCollision(n: Int): Int = {\n    pow(n, 2).toInt\n}",
        "HumanEval/42": "def incrList(l: Seq[Int]): Seq[Int] = {\n    l.map(_ + 1)\n}",
        "HumanEval/43": "def pairsSumToZero(l: Seq[Int]): Boolean = {\n    val seen = mutable.Set[Int]()\n    for (num <- l) {\n        if (seen.contains(-num)) {\n            return true\n        }\n        seen.add(num)\n    }\n    false\n}",
        "HumanEval/44": "def changeBase(x: Int, bas: Int): String = {\n    if (x == 0) {\n        return \"0\"\n    } \n    val digits = mutable.ListBuffer[String]()\n    @tailrec\n    def acc(x0: Int): Unit = {\n        if (x0 > 0) {\n            digits.append((x0 % bas).toString)\n            acc(x0 / bas)\n        }\n    }\n    acc(x)\n    digits.reverse.mkString(\"\")\n}",
        "HumanEval/45": "def triangleArea(a: Int, h: Int): Double = {\n    (a * h).toDouble / 2\n}",
        "HumanEval/46": "def fib4(n: Int): Int = {\n    var fib = mutable.ListBuffer(0, 0, 2, 0)\n    for (i <- 4 to n) {\n        fib(i % 4) = fib.sum\n    }\n    fib(n % 4)\n}",
        "HumanEval/47": "def median(l: Seq[Double]): Double = {\n    val sl = l.sorted\n    if (l.length % 2 != 0) {\n        sl(l.length / 2)\n    } else {\n        (sl(l.length / 2) + sl(l.length / 2 - 1)) / 2\n    }\n}",
        "HumanEval/48": "def isPalindrome(txt: String): Boolean = {\n    txt == txt.reverse\n}",
        "HumanEval/49": "def modp(n: Int, p: Int): Int = {\n    var ret = 1\n    for (i <- 0 until n) {\n        ret = (ret * 2) % p\n    }\n    ret\n}",
        "HumanEval/50": "def encodeShift(s: String): String = {\n    val result = s.map(ch => (((ch - 97 + 5) % 26) + 97).toChar).mkString\n    result\n}\ndef decodeShift(s: String): String = {\n    val result = s.map(ch => (((ch - 97 + 21) % 26) + 97).toChar).mkString\n    result\n}",
        "HumanEval/51": "def removeVowels(txt: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    txt.filterNot(vowels.contains)\n}",
        "HumanEval/52": "def belowThreshold(l: Seq[Int], t: Int): Boolean = {\n    l.forall(_ < t)\n}",
        "HumanEval/53": "def add(x: Int, y: Int): Int = {\n    x + y\n}",
        "HumanEval/54": "def sameChars(s0: String, s1: String): Boolean = {\n    s0.toSet == s1.toSet\n}",
        "HumanEval/55": "def fib(n: Int): Int = {\n    if (n <= 1) {\n        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n}",
        "HumanEval/56": "def correctBracketing(brackets: String): Boolean = {\n    var depth = 0\n    for (b <- brackets) {\n        if (b == '<') {\n            depth += 1\n        } else if (b == '>') {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    depth == 0\n}",
        "HumanEval/57": "def monotonic(l: Seq[Int]): Boolean = {\n    val diff = l.zip(l.drop(1)).map { case (a, b) => b - a }\n    diff.forall(_ <= 0) || diff.forall(_ >= 0)\n}",
        "HumanEval/58": "def common(l1: Seq[Int], l2: Seq[Int]): Seq[Int] = {\n    (l1.toSet intersect l2.toSet).toList.sorted\n}",
        "HumanEval/59": "def largestPrimeFactor(n: Int): Int = {\n    var i = 2\n    @tailrec\n    def acc(n0: Int): Int = {\n        if (i * i > n0) {\n            n0\n        } else if (n0 % i != 0) {\n            i += 1\n            acc(n0)\n        } else {\n            acc(n0 / i)\n        }\n    }\n    acc(n)\n}",
        "HumanEval/60": "def sumToN(n: Int): Int = {\n    (0 to n).sum\n}",
        "HumanEval/61": "def correctBracketing(brackets: String): Boolean = {\n    var depth = 0\n    for (b <- brackets) {\n        if (b == '(') {\n            depth += 1\n        } else if (b == ')') {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    depth == 0\n}",
        "HumanEval/62": "def derivative(xs: Seq[Int]): Seq[Int] = {\n    xs.zipWithIndex.tail.map { case (x, i) => x * i }\n}",
        "HumanEval/63": "def fibfib(n: Int): Int = {\n    if (n <= 1) {\n        return 0\n    }\n    var (a, b, c) = (0, 0, 1)\n    @tailrec\n    def acc(n: Int): Int = {\n        if (n <= 2) {\n            return c\n        }\n        (b, c, a + b + c).match { case (_a, _b, _c) => a = _a; b = _b; c = _c } \n        acc(n - 1)\n    }\n    acc(n)\n}",
        "HumanEval/64": "def vowelsCount(s: String): Int = {\n    val vowels = \"aeiou\"\n    var cnt = 0\n    for (i <- 0 until s.length) {\n        if (vowels.contains(s(i).toLower) || (i == s.length - 1 && s(i).toLower == 'y')) {\n            cnt += 1\n        }\n    }\n    cnt\n}",
        "HumanEval/65": "def circularShift(x: Int, shift: Int): String = {\n    val xStr = x.toString\n    if (shift > xStr.length) {\n        return xStr.reverse\n    } else {\n        return xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift)\n    }\n}",
        "HumanEval/66": "def digitSum(s: String): Int = {\n    s.filter(_.isUpper).map(_.toInt).sum\n}",
        "HumanEval/67": "def fruitDistribution(s: String, n: Int): Int = {\n    val words = s.split(' ')\n    val apples = words(words.indexOf(\"apples\") - 1).toInt\n    val oranges = words(words.indexOf(\"oranges\") - 1).toInt\n    n - apples - oranges\n}",
        "HumanEval/68": "def pluck(arr: Seq[Int]): Seq[Int] = {\n    val evens = arr.filter(_ % 2 == 0)\n    if (evens.length == 0) {\n        return List()\n    }\n    val minEven = evens.min\n    List(minEven, arr.indexOf(minEven))\n}",
        "HumanEval/69": "def search(lst: Seq[Int]): Int = {\n    var freqs = mutable.Map[Int, Int]()\n    for (n <- lst) {\n        freqs(n) = freqs.getOrElse(n, 0) + 1\n    }\n    val good_vals = freqs.filter((k, v) => v >= k).keys\n    good_vals.maxOption.getOrElse(-1)\n}",
        "HumanEval/70": "def strangeSortList(lst: Seq[Int]): Seq[Int] = {\n    val sl = lst.sorted\n    val result = mutable.ListBuffer[Int]()\n    var (left, right) = (0, sl.length - 1)\n    while (left <= right) {\n        result += sl(left)\n        left += 1\n        if (left <= right) {\n            result += sl(right)\n            right -= 1\n        }\n    }\n    result.toList\n}",
        "HumanEval/71": "def triangleArea(a: Int, b: Int, c: Int): Double = {\n    if (a + b > c && a + c > b && b + c > a) {\n        val s = (a + b + c) / 2.0\n        sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        -1.0\n    }\n}",
        "HumanEval/72": "def willItFly(q: Seq[Int], w: Int): Boolean = {\n    if (q.length == 0) {\n        return false\n    }\n    val isPalin = (0 until q.length).forall(i => q(i) == q(q.length - i - 1))\n    val total = q.sum\n    isPalin && total <= w\n}",
        "HumanEval/73": "def smallestChange(arr: Seq[Int]): Int = {\n    var ans = 0\n    for (i <- 0 until arr.length / 2) {\n        if (arr(i) != arr(arr.length - i - 1)) {\n            ans += 1\n        }\n    }\n    ans\n}",
        "HumanEval/74": "def totalMatch(lst1: Seq[String], lst2: Seq[String]): Seq[String] = {\n    val cnt1 = lst1.map(_.length).sum\n    val cnt2 = lst2.map(_.length).sum\n    if (cnt1 <= cnt2) lst1 else lst2\n}",
        "HumanEval/75": "def isPrime(n: Int): Boolean = {\n    if (n < 2) {\n        return false\n    }\n    for (i <- 2 to sqrt(n).floor.toInt) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    true\n}\ndef isMultiplyPrime(a: Int): Boolean = {\n    var cnt = 0\n    for (i <- 2 to a) {\n        if (isPrime(i)) {\n            @tailrec\n            def loop(a: Int): Int = {\n                if (a % i == 0) {\n                    cnt += 1\n                    loop(a / i)\n                } else {\n                    a\n                }\n            }\n            loop(a)\n        }\n    }\n    cnt == 3\n}",
        "HumanEval/76": "def isSimplePower(x: Int, n: Int): Boolean = {\n    if (n < 2) {\n        return x == n\n    }\n    var tmp = 1\n    while (tmp < x) {\n        tmp *= n\n    }\n    tmp == x\n}",
        "HumanEval/77": "def isCube(a: Int): Boolean = {\n    val a0 = a.abs\n    val root = round(pow(a0, 1.0 / 3.0)).toInt\n    root * root * root == a0\n}",
        "HumanEval/78": "def hexKey(num: String): Int = {\n    num.count(\"2357BD\".contains(_))\n}",
        "HumanEval/79": "def decimalToBinary(dec: Int): String = {\n    val binary = dec.toBinaryString\n    s\"db${binary}db\"\n}",
        "HumanEval/80": "def isHappy(s: String): Boolean = {\n    if (s.length < 3) {\n        false\n    } else {\n        for (i <- 0 until s.length - 2) {\n            if (s(i) == s(i + 1) || s(i) == s(i + 2) || s(i + 1) == s(i + 2)) {\n                return false\n            }\n        }\n        true\n    }\n}",
        "HumanEval/81": "def numericalLetterGrade(grades: Seq[Double]): Seq[String] = {\n    val result = mutable.ListBuffer[String]()\n    for (g <- grades) {\n        () match {\n            case _ if g == 4.0 =>\n                result += \"A+\"\n            case _ if g > 3.7 =>\n                result += \"A\"\n            case _ if g > 3.3 =>\n                result += \"A-\"\n            case _ if g > 3.0 =>\n                result += \"B+\"\n            case _ if g > 2.7 =>\n                result += \"B\"\n            case _ if g > 2.3 =>\n                result += \"B-\"\n            case _ if g > 2.0 =>\n                result += \"C+\"\n            case _ if g > 1.7 =>\n                result += \"C\"\n            case _ if g > 1.3 =>\n                result += \"C-\"\n            case _ if g > 1.0 =>\n                result += \"D+\"\n            case _ if g > 0.7 =>\n                result += \"D\"\n            case _ if g > 0.0 =>\n                result += \"D-\"\n            case _ =>\n                result += \"E\"\n        }\n    }\n    result.toList\n}",
        "HumanEval/82": "def primeLength(s: String): Boolean = {\n    val length = s.length\n    if (length < 2) {\n        return false\n    }\n    for (i <- 2 to sqrt(length).floor.toInt) {\n        if (length % i == 0) {\n            return false\n        }\n    }\n    true\n}",
        "HumanEval/83": "def startsOneEnds(n: Int): Int = {\n    if (n == 1) {\n        return 1\n    }\n    2 * 9 * pow(10, n - 2).toInt\n}",
        "HumanEval/84": "def solve(n: Int): String = {\n    val digitsSum = n.toString.map(_.asDigit).sum\n    digitsSum.toBinaryString\n}",
        "HumanEval/85": "def add(lst: Seq[Int]): Int = {\n    lst.zipWithIndex.filter{(x, i) => i % 2 == 1 && x % 2 == 0}.map{(x, i) => x}.sum\n}",
        "HumanEval/86": "def antiShuffle(s: String): String = {\n    val words = s.split(\" \").map{word => word.sorted}\n    return words.mkString(\" \")\n}",
        "HumanEval/87": "def getRow(lst: Seq[Seq[Int]], x: Int): Seq[Seq[Int]] = {\n    val coords = mutable.ListBuffer[List[Int]]()\n    for (i <- lst.indices) {\n        for (j <- lst(i).indices) {\n            if (lst(i)(j) == x) {\n                coords += List(i, j)\n            }\n        }\n    }\n    coords.sortBy(a => (a(0), -a(1))).toList\n}",
        "HumanEval/88": "def sortArray(arr: Seq[Int]): Seq[Int] = {\n    if (arr.length == 0) {\n        return List()\n    }\n    if ((arr(0) + arr(arr.length - 1)) % 2 == 0) {\n        return arr.sorted.reverse\n    }\n    else {\n        return arr.sorted\n    }\n}",
        "HumanEval/89": "def encrypt(s: String): String = {\n    val result = StringBuilder()\n    for (ch <- s) {\n        var shifted = ch.toInt + 4\n        if (shifted > 'z'.toInt) {\n            shifted -= 26\n        }\n        result += shifted.toChar\n    }\n    result.toString\n}",
        "HumanEval/90": "def nextSmallest(lst: Seq[Int]): Option[Int] = {\n    val sl = lst.toSet.toList.sorted\n    if (sl.length < 2) {\n        return None\n    }\n    Some(sl(1))\n}",
        "HumanEval/91": "def isBored(s: String): Int = {\n    val sentences = s.split(\"[.!?]\\\\s*\")\n    return sentences.filter{sentence => sentence.length >= 2 && sentence.substring(0, 2) == \"I \"}.length\n}",
        "HumanEval/92": "def anyInt(x: Any, y: Any, z: Any): Boolean = {\n    if (x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int]) {\n        val a = x.asInstanceOf[Int]\n        val b = y.asInstanceOf[Int]\n        val c = z.asInstanceOf[Int]\n        if ((a + b == c) || (a + c == b) || (b + c == a)) {\n            return true\n        } \n    }\n    false\n}",
        "HumanEval/93": "def encode(message: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    val result = new StringBuilder()\n    for (ch <- message) {\n        if (ch.isLetter) {\n            var ch1 = if (ch.isLower) ch.toUpper else ch.toLower\n            if (vowels.contains(ch1)) {\n                ch1 = (ch1.toInt + 2).toChar\n            }\n            result += ch1\n        } else {\n            result += ch\n        }\n    }\n    result.toString\n}",
        "HumanEval/94": "def isPrime(n: Int): Boolean = {\n    if (n < 2) {\n        return false\n    }\n    for (i <- 2 to sqrt(n).floor.toInt) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    true\n}\ndef skjkasdkd(lst: Seq[Int]): Int = {\n    val primes = lst.filter(isPrime)\n    if (primes.length == 0) {\n        return 0\n    }\n    val largest = primes.max.toString\n    largest.map(_.asDigit).sum\n}",
        "HumanEval/95": "def checkDictCase(d: Map[String, String]): Boolean = {\n    if (d.isEmpty) {\n        return false\n    }\n    d.keys.forall(_.forall(_.isLower)) || d.keys.forall(_.forall(_.isUpper))\n}",
        "HumanEval/96": "def countUpTo(n: Int): Seq[Int] = {\n    val primes = mutable.ListBuffer[Int]()\n    for (num <- 2 until n) {\n        if (primes.forall(p => num % p != 0)) {\n            primes += num\n        }\n    }\n    primes.toList\n}",
        "HumanEval/97": "def multiply(a: Int, b: Int): Int = {\n    (a.abs % 10) * (b.abs % 10)\n}",
        "HumanEval/98": "def countUpper(s: String): Int = {\n    val vowels = \"AEIOU\"\n    s.zipWithIndex.filter { case (c, i) => i % 2 == 0 && vowels.contains(c) }.length\n}",
        "HumanEval/99": "def closestInteger(value: String): Int = {\n    val num = value.toFloat\n    if (num >= 0) {\n        (num + 0.5).toInt\n    } else {\n        (num - 0.5).toInt\n    }\n}",
        "HumanEval/100": "def makeAPile(n: Int): Seq[Int] = {\n    (0 until n).map(i => n + 2 * i)\n}",
        "HumanEval/101": "def wordsString(s: String): List[String] = {\n    s.split(\"[, ]\").filter(_.length > 0).toList\n}",
        "HumanEval/102": "def chooseNum(x: Int, y: Int): Int = {\n    if (x > y) {\n        return -1\n    }\n    if (y % 2 == 0) {\n        return y\n    }\n    if (y != x) y - 1 else -1\n}",
        "HumanEval/103": "def roundedAvg(n: Int, m: Int): Option[String] = {\n    if (n > m) {\n        return None\n    }\n    val rAvg = ((n + m).toDouble / 2 + 0.5).toInt\n    Some(rAvg.toBinaryString)\n}",
        "HumanEval/104": "def allDigitsOdd(s: String): Boolean = {\n    s.forall(_.toInt % 2 != 0)\n}\ndef uniqueDigits(x: Seq[Int]): Seq[Int] = {\n    x.filter(x => allDigitsOdd(x.toString)).sorted\n}",
        "HumanEval/105": "def byLength(arr: Seq[Int]): Seq[String] = {\n    val digitNames = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    val sortedArr = arr.filter(x => 1 <= x && x <= 9).sorted.reverse\n    sortedArr.map(x => digitNames(x - 1))\n}",
        "HumanEval/106": "def f(n: Int): List[Int] = {\n    val nums = (1 to n).toList\n    nums.map(i => if (i % 2 != 0) nums.take(i).sum else nums.take(i).product)\n}",
        "HumanEval/107": "def isPalindrome(s: String): Boolean = {\n    s == s.reverse\n}\ndef evenOddPalindrome(n: Int): List[Int] = {\n    var cnt = List(0, 0)\n    for (i <- 1 to n) {\n        if (isPalindrome(i.toString)) {\n            cnt = cnt.updated(i % 2, cnt(i % 2) + 1)\n        }\n    }\n    cnt\n}",
        "HumanEval/108": "def digitsSum(n: Int): Int = {\n    val nStr = n.toString\n    if (n >= 0) {\n        nStr.map(_.asDigit).sum\n    } else {\n        nStr.take(2).toInt * 2 + digitsSum(n.abs)\n    }\n}\ndef countNums(arr: Seq[Int]): Int = {\n    arr.count(digitsSum(_) > 0)\n}",
        "HumanEval/109": "def moveOneBall(arr: Seq[Int]): Boolean = {\n    if (arr.isEmpty) {\n        return true\n    }\n    val sortedArr = arr.sorted\n    for (i <- 0 until arr.length) {\n        if (arr.slice(i, arr.length) == sortedArr.slice(0, arr.length - i) && arr.slice(0, i) == sortedArr.slice(arr.length - i, arr.length)) {\n            return true\n        }\n    }\n    false\n}",
        "HumanEval/110": "def canExchange(lst1: Seq[Int], lst2: Seq[Int]): String = {\n    val oddCnt = lst1.count(_ % 2 != 0)\n    val evenCnt = lst2.count(_ % 2 == 0)\n    if (evenCnt >= oddCnt) {\n        \"YES\"\n    } else {\n        \"NO\"\n    }\n}",
        "HumanEval/111": "def histogram(test: String): Map[String, Int] = {\n    val freq = mutable.Map[String, Int]()\n    val words = test.split(\" \").filter(_.length > 0)\n    for (w <- words) {\n        freq(w) = freq.getOrElse(w, 0) + 1\n    }\n    val result = mutable.Map[String, Int]()\n    if (freq.size > 0) {\n        val maxFreq = freq.values.max\n        for ((k, v) <- freq) {\n            if (v == maxFreq) {\n                result(k) = v\n            }\n        }\n    }\n    result.toMap\n}",
        "HumanEval/112": "def isPalindrome(s: String): Boolean = {\n    s == s.reverse\n}\ndef reverseDelete(s: String, c: String): Seq[String] = {\n    val s1 = s.filterNot(c.contains(_))\n    List(s1, if (isPalindrome(s1)) \"yes\" else \"no\")\n}",
        "HumanEval/113": "def oddCount(lst: Seq[String]): Seq[String] = {\n    val result = mutable.ListBuffer[String]()\n    for (num <- lst) {\n        val n = num.filter(_.toInt % 2 == 1).length\n        val rs = \"the number of odd elements in the string i of the input.\"\n        result += rs.replaceAll(\"i\", n.toString())\n    }\n    result.toList\n}",
        "HumanEval/114": "def minSubArraySum(nums: Seq[Int]): Int = {\n    var minSum = 0\n    var curSum = 0\n    for (n <- nums) {\n        curSum = Math.min(curSum + n, 0)\n        minSum = Math.min(curSum, minSum)\n    }\n    if (minSum == 0) {\n        minSum = nums.min\n    }\n    minSum\n}",
        "HumanEval/115": "def maxFill(grid: Seq[Seq[Int]], capacity: Int): Int = {\n    grid.map(arr => ceil(arr.sum / capacity.toDouble).toInt).sum\n}",
        "HumanEval/116": "def countOnes(num: Int): Int = {\n    num.toBinaryString.count(_ == '1')\n}\ndef sortArray(arr: Seq[Int]): Seq[Int] = {\n    arr.sortBy(x => (countOnes(x), x))\n}",
        "HumanEval/117": "def selectWords(s: String, n: Int): Seq[String] = {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\";\n    val words = s.split(\" \").filter(_.length > 0);\n    words.filter(w => w.count(c => consonants.contains(c.toLower)) == n);\n}",
        "HumanEval/118": "def getClosestVowel(word: String): String = {\n    val vowels = \"aeiouAEIOU\";\n    for (i <- word.length - 2 to 1 by -1) {\n        if (vowels.contains(word(i)) && !vowels.contains(word(i - 1)) && !vowels.contains(word(i + 1))) {\n            return word(i).toString;\n        }\n    }\n    return \"\";\n}",
        "HumanEval/119": "def check(s: String): Boolean = {\n    var depth = 0\n    for (ch <- s) {\n        if (ch == '(') {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    depth == 0\n}\ndef matchParens(lst: Seq[String]): String = {\n    val s1 = lst(0) + lst(1)\n    val s2 = lst(1) + lst(0)\n    if (check(s1) || check(s2)) \"Yes\" else \"No\"\n}",
        "HumanEval/120": "def maximum(arr: Seq[Int], k: Int): Seq[Int] = {\n    if (k == 0) {\n        return List()\n    }\n    arr.sorted.takeRight(k)\n}",
        "HumanEval/121": "def solution(lst: Seq[Int]): Int = {\n    lst.zipWithIndex.filter{(x, i) => i % 2 == 0 && x % 2 != 0}.map{(x, i) => x}.sum\n}",
        "HumanEval/122": "def addElements(arr: Seq[Int], k: Int): Int = {\n    arr.take(k).filter(num => num.toString.length <= 2).sum\n}",
        "HumanEval/123": "def getOddCollatz(n: Int): Seq[Int] = {\n    var collatz = mutable.ListBuffer[Int](1)\n    var num = n\n    while (num != 1) {\n        if (num % 2 != 0) {\n            collatz += num\n            num = 3 * num + 1\n        } else {\n            num = num / 2\n        }\n    }\n    collatz.toList.sorted\n}",
        "HumanEval/124": "def validDate(date: String): Boolean = {\n    if (date.length != 10 || date(2) != '-' || date(5) != '-') {\n        return false\n    }\n    val m = date.substring(0, 2).toInt\n    val d = date.substring(3, 5).toInt\n    if (List(1, 3, 5, 7, 8, 10, 12).contains(m) && d >= 1 && d <= 31) {\n        return true\n    }\n    if (List(4, 6, 9, 11).contains(m) && d >= 1 && d <= 30) {\n        return true\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true\n    }\n    false\n}",
        "HumanEval/125": "def splitWords(txt: String): Seq[String] = {\n    if (txt.contains(\" \")) {\n        txt.split(\" \").toList\n    } else if (txt.contains(\",\")) {\n        txt.split(\",\").toList\n    } else {\n        List(txt.filter(c => c.isLower && c.toInt % 2 == 0).length.toString)\n    }\n}",
        "HumanEval/126": "def isSorted(lst: Seq[Int]): Boolean = {\n    if (!lst.sliding(2).filter(_.size == 2).forall(x => x(0) <= x(1))) {\n        return false\n    }\n    val freq = mutable.Map[Int, Int]()\n    for (i <- lst) {\n        freq(i) = freq.getOrElse(i, 0) + 1\n    }\n    freq.values.maxOption.getOrElse(0) <= 2\n}",
        "HumanEval/127": "def isPrime(n: Int): Boolean = {\n    if (n < 2) {\n        return false\n    }\n    for (i <- 2 to sqrt(n).floor.toInt) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    true\n}\ndef intersection(interval1: Seq[Int], interval2: Seq[Int]): String = {\n    val l = max(interval1(0), interval2(0))\n    val r = min(interval1(1), interval2(1))\n    val length = r - l\n    if (length > 0 && isPrime(length)) \"YES\" else \"NO\"\n}",
        "HumanEval/128": "def prodSigns(arr: Seq[Int]): Option[Int] = {\n    if (arr.isEmpty) {\n        return None\n    }\n    if (arr.contains(0)) {\n        return Some(0)\n    }\n    val sign = if (arr.count(_ < 0) % 2 == 1) -1 else 1\n    Some(sign * arr.map(_.abs).sum)\n}",
        "HumanEval/129": "def minPath(grid: Seq[Seq[Int]], k: Int): Seq[Int] = {\n    val n = grid.length\n    var minVal = n * n + 1\n    for (i <- 0 until n) {\n        for (j <- 0 until n) {\n            if (grid(i)(j) == 1) {\n                val temp = mutable.ListBuffer[Int]()\n                if (i != 0) {\n                    temp.append(grid(i - 1)(j))\n                }\n                if (j != 0) {\n                    temp.append(grid(i)(j - 1))\n                }\n                if (i != n - 1) {\n                    temp.append(grid(i + 1)(j))\n                }\n                if (j != n - 1) {\n                    temp.append(grid(i)(j + 1))\n                }\n                minVal = temp.min\n            }\n        }\n    }\n    val result = mutable.ListBuffer[Int]()\n    for (i <- 0 until k) {\n        result.append(if (i % 2 == 0) 1 else minVal)\n    }\n    result.toList\n}",
        "HumanEval/130": "def tri(n: Int): Seq[Int] = {\n    if (n == 0) {\n        List(1)\n    } else {\n        var seq = mutable.ListBuffer(1, 3)\n        for (i <- 2 to n) {\n            if (i % 2 == 0) {\n                seq += i / 2 + 1\n            } else {\n                seq += seq(i - 1) + seq(i - 2) + (i + 3) / 2\n            }\n        }\n        seq.toList\n    }\n}",
        "HumanEval/131": "def digits(n: Int): Int = {\n    val odds = n.toString.filter(_.asDigit % 2 == 1).map(_.asDigit)\n    if (odds.isEmpty) 0 else odds.product\n}",
        "HumanEval/132": "def isNested(s: String): Boolean = {\n    var openIdx = mutable.ListBuffer[Int]()\n    var closeIdx = mutable.ListBuffer[Int]()\n    for ((ch, i) <- s.zipWithIndex) {\n        ch match {\n            case '[' => openIdx += i\n            case ']' => closeIdx += i\n        }\n    }\n    closeIdx = closeIdx.reverse\n    var cnt = 0\n    var i = 0\n    val l = closeIdx.length\n    for (idx <- openIdx) {\n        if (i < l && idx < closeIdx(i)) {\n            cnt += 1\n            i += 1\n        }\n    }\n    cnt >= 2\n}",
        "HumanEval/133": "def sumSquares(lst: Seq[Double]): Int = {\n    lst.map(n => pow(ceil(n), 2).toInt).sum\n}",
        "HumanEval/134": "def checkIfLastCharIsALetter(txt: String): Boolean = {\n    if (txt.isEmpty) {\n        return false\n    }\n    val last = txt.substring(txt.lastIndexOf(' ') + 1)\n    last.length == 1 && last(0).isLetter\n}",
        "HumanEval/135": "def canArrange(arr: Seq[Int]): Int = {\n    if (arr.length <= 1) {\n        return -1\n    }\n    val idx = (1 until arr.length).filter(i => arr(i) < arr(i - 1))\n    idx.maxOption.getOrElse(-1)\n}",
        "HumanEval/136": "def largestSmallestIntegers(lst: Seq[Int]): Seq[Option[Int]] = {\n    val neg = lst.filter(_ < 0)\n    val pos = lst.filter(_ > 0)\n    val maxNeg = neg.maxOption\n    val minPos = pos.minOption\n    List(maxNeg, minPos)\n}",
        "HumanEval/137": "def anyToReal(o: Any): Double = {\n    if (o.isInstanceOf[String]) {\n        return o.asInstanceOf[String].replace(\",\", \".\").toDouble\n    } else if (o.isInstanceOf[Int]) {\n        return o.asInstanceOf[Int].toDouble\n    } else if (o.isInstanceOf[Double]) {\n        return o.asInstanceOf[Double]\n    }\n    throw new Exception(\"Type Error\")\n}\ndef compareOne(a: Any, b: Any): Option[Double] = {\n    val a1 = anyToReal(a)\n    val b1 = anyToReal(b)\n    if (a1 == b1) {\n        None\n    } else if (a1 > b1) {\n        Some(a1)\n    } else {\n        Some(b1)\n    }\n}",
        "HumanEval/138": "def isEqualToSumEven(n: Int): Boolean = {\n    n % 2 == 0 && n >= 8\n}",
        "HumanEval/139": "def specialFactorial(n: Int): Int = {\n    var fact = 1\n    var result = 1\n    for (i <- 1 to n) {\n        fact *= i\n        result *= fact\n    }\n    result\n}",
        "HumanEval/140": "def fixSpaces(txt: String): String = {\n    return txt.replaceAll(\"\\\\s{3,}\", \"-\").replaceAll(\" \", \"_\")\n}",
        "HumanEval/141": "def fileNameCheck(fileName: String): String = {\n    val suf = List(\"txt\", \"exe\", \"dll\")\n    val lst = fileName.split(\"\\\\.\")\n    if (lst.size != 2 || !suf.contains(lst(1)) || lst(0).isEmpty || !lst(0)(0).isLetter || lst(0).count(_.isDigit) > 3) {\n        return \"No\"\n    }\n    return \"Yes\"\n}",
        "HumanEval/142": "def sumSquares(lst: Seq[Int]): Int = {\n    var result = 0\n    for (i <- 0 until lst.length) {\n        if (i % 3 == 0) {\n            result += pow(lst(i), 2).toInt\n        } else if (i % 4 == 0) {\n            result += pow(lst(i), 3).toInt\n        } else {\n            result += lst(i)\n        }\n    }\n    result\n}",
        "HumanEval/143": "def isPrime(n: Int): Boolean = {\n    if (n < 2) {\n        return false\n    }\n    for (i <- 2 to sqrt(n).floor.toInt) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    true\n}\ndef wordsInSentence(sentence: String): String = {\n    val words = sentence.split(\" \")\n    words.filter(w => isPrime(w.length)).mkString(\" \")\n}",
        "HumanEval/144": "def simplify(x: String, n: String): Boolean = {\n    val xs = x.split('/')\n    val ns = n.split('/')\n    val num = xs(0).toInt * ns(0).toInt\n    val den = xs(1).toInt * ns(1).toInt\n    num % den == 0\n}",
        "HumanEval/145": "def digitsSum(n: Int): Int = {\n    val nStr = n.toString\n    if (n >= 0) {\n        nStr.map(_.asDigit).sum\n    } else {\n        nStr.take(2).toInt * 2 + digitsSum(n.abs)\n    }\n}\ndef orderByPoints(nums: Seq[Int]): Seq[Int] = {\n    nums.sortBy(digitsSum)\n}",
        "HumanEval/146": "def specialFilter(nums: Seq[Int]): Int = {\n    val odds = \"13579\"\n    nums.filter(n => n > 10 && n % 2 == 1 && odds.contains(n.toString()(0))).length\n}",
        "HumanEval/147": "def getMaxTriples(n: Int): Int = {\n    val c = Array(0, 0, 0)\n    for (i <- 1 to n) {\n        val a = i * i - i + 1\n        c(a % 3) += 1\n    }\n    c(0) * c(1) * c(2) + (c(0) * (c(0) - 1) * (c(0) - 2) + c(1) * (c(1) - 1) * (c(1) - 2) + c(2) * (c(2) - 1) * (c(2) - 2)) / 6\n}",
        "HumanEval/148": "def bf(planet1: String, planet2: String): Seq[String] = {\n    val names = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (!names.contains(planet1) || !names.contains(planet2)) {\n        return List()\n    }\n    var l = names.indexOf(planet1)\n    var r = names.indexOf(planet2)\n    if (l > r) {\n        (l, r).match { case (_l, _r) => r = _l; l = _r}\n    }\n    if (l == r) {\n        return List()\n    }\n    names.slice(l + 1, r)\n}",
        "HumanEval/149": "def sortedListSum(lst: Seq[String]): Seq[String] = {\n    val result = lst.filter(_.length % 2 == 0)\n    result.sortBy(s => (s.length, s))\n}",
        "HumanEval/150": "def xOrY(n: Int, x: Int, y: Int): Int = {\n    if (n < 2) {\n        return y\n    }\n    for (i <- 2 to sqrt(n).floor.toInt) {\n        if (n % i == 0) {\n            return y\n        }\n    }\n    x\n}",
        "HumanEval/151": "def doubleTheDifference(lst: Seq[Double]): Int = {\n    lst.filter(n => n >= 0 && n % 2 == 1).map(n => (n * n).toInt).sum\n}",
        "HumanEval/152": "def compare(game: Seq[Int], guess: Seq[Int]): Seq[Int] = {\n    game.zip(guess).map { case (x, y) => (x - y).abs }\n}",
        "HumanEval/153": "def strongestExtension(className: String, extensions: Seq[String]): String = {\n    var maxS = Int.MinValue\n    var maxExt = \"\"\n    for (ext <- extensions) {\n        val upper = ext.count(_.isUpper)\n        val lower = ext.count(_.isLower)\n        val s = upper - lower\n        if (s > maxS) {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    s\"$className.$maxExt\"\n}",
        "HumanEval/154": "def cycpatternCheck(a: String, b: String): Boolean = {\n    if (a.length < b.length) {\n        false\n    } else {\n        for (i <- 0 until b.length) {\n            if (a.contains(b.substring(i) + b.substring(0, i))) {\n                return true\n            }\n        }\n        false\n    }\n}",
        "HumanEval/155": "def evenOddCount(num: Int): List[Int] = {\n    val ds = num.abs.toString\n    val even = ds.count(d => d.toInt % 2 == 0)\n    List(even, ds.length - even)\n}",
        "HumanEval/156": "def intToMiniRoman(num: Int): String = {\n    val values = List(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 ,5, 4, 1)\n    val numerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    var res = StringBuilder()\n    @tailrec\n    def loop(num: Int, i: Int): Unit = {\n        if (num == 0) ()\n        else if (num >= values(i)) {\n            res ++= numerals(i)\n            loop(num - values(i), i)\n        }\n        else loop(num, i + 1)\n    }\n    loop(num, 0)\n    res.toString\n}",
        "HumanEval/157": "def rightAngleTriangle(a: Int, b: Int, c: Int): Boolean = {\n    val s = List(a, b, c).sorted\n    s(0) * s(0) + s(1) * s(1) == s(2) * s(2)        \n}",
        "HumanEval/158": "def findMax(words: Seq[String]): String = {\n    var maxCnt = 0\n    var maxW = \"\"\n    for (w <- words) {\n        val cnt = w.toSet.size\n        if (cnt > maxCnt) {\n            maxCnt = cnt\n            maxW = w\n        } else if (cnt == maxCnt) {\n            maxW = List(w, maxW).min\n        }\n    }\n    maxW\n}",
        "HumanEval/159": "def eat(num: Int, need: Int, remaining: Int): Seq[Int] = {\n    if (need <= remaining) {\n        List(num + need, remaining - need)\n    } else {\n        List(num + remaining, 0)\n    }\n}",
        "HumanEval/160": "def doAlgebra(operators: Seq[String], operands: Seq[Int]): Int = {\n    var ops = operators.toBuffer\n    var nums = operands.toBuffer\n    var i = ops.length - 1\n    while (i >= 0) {\n        if (ops(i) == \"**\") {\n            nums(i) = pow(nums(i), nums(i + 1)).toInt\n            nums.remove(i + 1)\n            ops.remove(i)\n        }\n        i -= 1\n    }\n    i = 0\n    while (i < ops.length) {\n        if (ops(i) == \"*\") {\n            nums(i) = nums(i) * nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        } else if (ops(i) == \"//\") {\n            nums(i) = nums(i) / nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while (i < ops.length) {\n        if (ops(i) == \"+\") {\n            nums(i) = nums(i) + nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        } else if (ops(i) == \"-\") {\n            nums(i) = nums(i) - nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        }\n        i += 1\n    }\n    nums(0)\n}",
        "HumanEval/161": "def solve(s: String): String = {\n    if (!s.exists(_.isLetter)) {\n        return s.reverse\n    }\n    val result = StringBuilder()\n    for (ch <- s) {\n        if (!ch.isLetter) {\n            result += ch\n        } else if (ch.isUpper) {\n            result += ch.toLower\n        } else if (ch.isLower) {\n            result += ch.toUpper\n        }\n    }\n    result.toString\n}",
        "HumanEval/162": "def stringToMd5(txt: String): Option[String] = {\n    if (txt.isEmpty) {\n        return None\n    }\n    val md5Hash = MessageDigest.getInstance(\"MD5\")\n    val txtBytes = txt.getBytes()\n    md5Hash.update(txtBytes)\n    val md5Encoded = md5Hash.digest().map(\"%02x\".format(_)).mkString\n    Some(md5Encoded)\n}",
        "HumanEval/163": "def generateIntegers(a: Int, b: Int): Seq[Int] = {\n    val lower = max(2, min(a, b))\n    val upper = min(8, max(a, b))\n    (lower to upper).filter(_ % 2 == 0)\n}"
    },
    "swift": {
        "HumanEval/0": "func hasCloseElements(_ numbers: [Double], _ threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in (i + 1)..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}",
        "HumanEval/1": "func separateParenGroups(_ parenString: String) -> [String] {\n    var groups = [String]()\n    var stk = [Character]()\n    var currentGroup = \"\"\n    let parens = parenString.replacingOccurrences(of: \" \", with: \"\")\n    for ch in parens {\n        if ch == \"(\" {\n            stk.append(ch)\n            currentGroup += String(ch)\n        } else if ch == \")\" {\n            stk.popLast()\n            currentGroup += String(ch)\n            if stk.isEmpty {\n                groups.append(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}",
        "HumanEval/2": "func truncateNumber(_ num: Double) -> Double {\n    return num - floor(num)\n}",
        "HumanEval/3": "func belowZero(_ operations: [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}",
        "HumanEval/4": "func meanAbsoluteDeviation(_ numbers: [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n    let deviation = numbers.reduce(0) { $0 + abs($1 - mean) }\n    return deviation / Double(numbers.count)\n}",
        "HumanEval/5": "func intersperse(_ numbers: [Int], _ delimiter: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<numbers.count {\n        if i != 0 {\n            result.append(delimiter)\n        }\n        result.append(numbers[i])\n    }\n    return result\n}",
        "HumanEval/6": "func parseNestedParens(_ parenString: String) -> [Int] {\n    var result = [Int]()\n    let parenGroups = parenString.split(separator: \" \")\n    for group in parenGroups {\n        var maxDepth = 0\n        var depth = 0\n        for ch in group {\n            if ch == \"(\" {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if ch == \")\" {\n                depth -= 1\n            }\n        }\n        result.append(maxDepth)\n    }\n    return result\n}",
        "HumanEval/7": "func filterBySubstring(_ strs: [String], _ substring: String) -> [String] {\n    return strs.filter { $0.contains(substring) }\n}",
        "HumanEval/8": "func sumProduct(_ numbers: [Int]) -> [Int] {\n    var nSum = numbers.reduce(0, +)\n    var nProduct = numbers.reduce(1, *)\n    return [nSum, nProduct]\n}",
        "HumanEval/9": "func rollingMax(_ numbers: [Int]) -> [Int] {\n    var maxSoFar = Int.min\n    var result = [Int]()\n    for num in numbers {\n        maxSoFar = max(maxSoFar, num)\n        result.append(maxSoFar)\n    }\n    return result\n}",
        "HumanEval/10": "func isPalindrome(_ s: String) -> Bool {\n    return s == String(s.reversed())\n}\nfunc makePalindrome(_ s: String) -> String {\n    if isPalindrome(s) {\n        return s\n    }\n    for i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        if isPalindrome(String(s[index...])) {\n            return s + String(s[..<index].reversed())\n        }\n    }\n    return \"\"\n}",
        "HumanEval/11": "func stringXor(_ a: String, _ b: String) -> String {\n    return String(zip(a, b).map { $0 == $1 ? \"0\" : \"1\" })\n}",
        "HumanEval/12": "func longest(_ strs: [String]) -> String? {\n    if strs.isEmpty {\n        return nil\n    }\n    var longestS = strs[0]\n    for s in strs {\n        if s.count > longestS.count {\n            longestS = s\n        }\n    }\n    return longestS\n}",
        "HumanEval/13": "func greatestCommonDivisor(_ a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    } else {\n        return greatestCommonDivisor(b, a % b)\n    }\n}",
        "HumanEval/14": "func allPrefixes(_ s: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy: i+1)\n        let prefix = String(s[..<index])\n        prefixes.append(prefix)\n    }\n    return prefixes\n}",
        "HumanEval/15": "func stringSequence(_ n: Int) -> String {\n    return (0...n).map { String($0) }.joined(separator: \" \")\n}",
        "HumanEval/16": "func countDistinctCharacters(_ s: String) -> Int {\n    return Set(s.lowercased()).count\n}",
        "HumanEval/17": "func parseMusic(_ musicString: String) -> [Int] {\n    let durations: [String: Int] = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    let notes = musicString.split(separator: \" \")\n    return notes.map { durations[String($0)]! }\n}",
        "HumanEval/18": "func howManyTimes(_ s: String, _ substring: String) -> Int {\n    var times = 0\n    if substring.count > s.count {\n        return 0\n    }\n    for i in 0...s.count - substring.count {\n        if s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: i + substring.count)] == substring {\n            times += 1\n        }\n    }\n    return times\n}",
        "HumanEval/19": "func sortNumbers(_ numbers: String) -> String {\n    let numDict: [String: Int] = [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    ]\n    var numList = numbers.split(separator: \" \").map { String($0) }.filter { numDict[$0] != nil }\n    numList.sort { numDict[$0]! < numDict[$1]! }\n    return numList.joined(separator: \" \")\n}",
        "HumanEval/20": "func findClosestElements(_ numbers: [Double]) -> [Double] {\n    var sortedNumbers = numbers.sorted()\n    var minDiff = Double.infinity\n    var closestPair: [Double] = []\n    for i in 1..<sortedNumbers.count {\n        let diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]]\n        }\n    }\n    return closestPair \n}",
        "HumanEval/21": "func rescaleToUnit(_ numbers: [Double]) -> [Double] {\n    let minNum = numbers.min() ?? 0.0\n    let maxNum = numbers.max() ?? 0.0\n    if minNum == maxNum {\n        return Array(repeating: 0.0, count: numbers.count)\n    } else {\n        return numbers.map { ($0 - minNum) / (maxNum - minNum) }\n    }\n}",
        "HumanEval/22": "func filterIntegers(_ values: [Any]) -> [Int] {\n    return values.compactMap { $0 as? Int }\n}",
        "HumanEval/23": "func strLength(_ s: String) -> Int {\n    return s.count\n}",
        "HumanEval/24": "func largestDivisor(_ n: Int) -> Int {\n    if n < 2 {\n        return 1\n    }\n    for i in 2..<n {\n        if n % i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}",
        "HumanEval/25": "func factorize(_ n: Int) -> [Int] {\n    var factors = [Int]()\n    var divisor = 2\n    var num = n\n    while divisor <= num {\n        if num % divisor == 0 {\n            factors.append(divisor)\n            num /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}",
        "HumanEval/26": "func removeDuplicates(_ numbers: [Int]) -> [Int] {\n    var counts: [Int: Int] = [:]\n    for num in numbers {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    var res = numbers.filter { counts[$0] == 1 }\n    return res\n}",
        "HumanEval/27": "func flipCase(_ s: String) -> String {\n    var flipped = \"\"\n    for ch in s {\n        if !ch.isLetter {\n            flipped.append(ch)\n        } else if ch.isLowercase {\n            flipped.append(ch.uppercased())\n        } else if ch.isUppercase {\n            flipped.append(ch.lowercased())\n        }\n    }\n    return flipped\n}",
        "HumanEval/28": "func concatenate(_ strs: [String]) -> String {\n    return strs.joined(separator: \"\")\n}",
        "HumanEval/29": "func filterByPrefix(_ strs: [String], _ prefixStr: String) -> [String] {\n    return strs.filter { $0.hasPrefix(prefixStr) }\n}",
        "HumanEval/30": "func getPositive(_ l: [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}",
        "HumanEval/31": "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if 2 <= Int(floor(sqrt(Double(n)))) {\n        for i in 2...Int(floor(sqrt(Double(n)))) {\n            if n % i == 0 {\n                return false\n            }\n        }\n    }\n    return true\n}",
        "HumanEval/32": "func poly(_ xs: [Int], _ x: Double) -> Double {\n    var res = 0.0\n    for i in 0..<xs.count {\n        res += Double(xs[i]) * pow(x, Double(i))\n    }\n    return res\n}\nfunc findZero(_ xs: [Int]) -> Double {\n    var x1 = 1.0, x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    while abs(x1 - x2) > 1e-10 {\n        let mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0 {\n            return mid\n        } else if poly(xs, mid) * poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}",
        "HumanEval/33": "func sortThird(_ l: [Int]) -> [Int] {\n    let sortedThird = l.enumerated().filter { $0.offset % 3 == 0 }.map { $0.element }.sorted()\n    return l.enumerated().map { $0.offset % 3 == 0 ? sortedThird[$0.offset / 3] : $0.element }\n}",
        "HumanEval/34": "func listUnique(_ l: [Int]) -> [Int] {\n    return Array(Set(l)).sorted()\n}",
        "HumanEval/35": "func maxElement(_ l: [Int]) -> Int {\n    if l.isEmpty {\n        return 0\n    }\n    return l.max()!\n}",
        "HumanEval/36": "func fizzBuzz(_ n: Int) -> Int {\n    var cnt = 0\n    for i in 0..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += String(i).filter { $0 == \"7\" }.count\n        }\n    }\n    return cnt\n}",
        "HumanEval/37": "func sortEven(_ l: [Int]) -> [Int] {\n    let sortedEven = l.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element }.sorted()\n    return l.enumerated().map { $0.offset % 2 == 0 ? sortedEven[$0.offset / 2] : $0.element }\n}",
        "HumanEval/38": "func encodeCyclic(_ s: String) -> String {\n    var result = \"\"\n    for i in stride(from: 0, to: s.count, by: 3) {\n        if i + 3 > s.count {\n            result += s[s.index(s.startIndex, offsetBy: i)...]\n        } else {\n            result += s[s.index(s.startIndex, offsetBy: i + 1)..<s.index(s.startIndex, offsetBy: i + 3)]\n            result += String(s[s.index(s.startIndex, offsetBy: i)])\n        }\n    }\n    return result\n}\nfunc decodeCyclic(_ s: String) -> String {\n    return encodeCyclic(encodeCyclic(s))\n}",
        "HumanEval/39": "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if 2 <= Int(floor(sqrt(Double(n)))) {\n        for i in 2...Int(floor(sqrt(Double(n)))) {\n            if n % i == 0 {\n                return false\n            }\n        }\n    }\n    return true\n}\nfunc primeFib(_ n: Int) -> Int {\n    var f = [0, 1]\n    var cnt = 0\n    while cnt < n {\n        f = [f[1], f[0] + f[1]]\n        if isPrime(f[1]) {\n            cnt += 1\n        }\n    }\n    return f[1]\n}",
        "HumanEval/40": "func triplesSumToZero(_ l: [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in (i + 1)..<l.count {\n            for k in (j + 1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}",
        "HumanEval/41": "func carRaceCollision(_ n: Int) -> Int {\n    return Int(pow(Double(n), 2))\n}",
        "HumanEval/42": "func incrList(_ l: [Int]) -> [Int] {\n    return l.map { $0 + 1 }\n}",
        "HumanEval/43": "func pairsSumToZero(_ l: [Int]) -> Bool {\n    var seen = Set<Int>()\n    for num in l {\n        if seen.contains(-num) {\n            return true\n        }\n        seen.insert(num)\n    }\n    return false\n}",
        "HumanEval/44": "func changeBase(_ x: Int, _ bas: Int) -> String {\n    var x = x\n    if x == 0 {\n        return \"0\"\n    }\n    var digits = [String]()\n    while x > 0 {\n        digits.append(String(x % bas))\n        x /= bas\n    }\n    return digits.reversed().joined()\n}",
        "HumanEval/45": "func triangleArea(_ a: Int, _ h: Int) -> Double {\n    return Double(a * h) / 2\n}",
        "HumanEval/46": "func fib4(_ n: Int) -> Int {\n    var fib = [0, 0, 2, 0]\n    for i in 4...n {\n        fib[i % 4] = fib.reduce(0, +)\n    }\n    return fib[n % 4]\n}",
        "HumanEval/47": "func median(_ l: [Double]) -> Double {\n    let sl = l.sorted()\n    if l.count % 2 != 0 {\n        return sl[l.count / 2]\n    } else {\n        return (sl[l.count / 2] + sl[l.count / 2 - 1]) / 2\n    }\n}",
        "HumanEval/48": "func isPalindrome(_ txt: String) -> Bool {\n    return txt == String(txt.reversed())\n}",
        "HumanEval/49": "func modp(_ n: Int, _ p: Int) -> Int {\n    var ret = 1\n    for _ in 0..<n {\n        ret = (ret * 2) % p\n    }\n    return ret\n}",
        "HumanEval/50": "func encodeShift(_ s: String) -> String {\n    let result = s.unicodeScalars.map { Character(UnicodeScalar(($0.value - 97 + 5) % 26 + 97)!) }\n    return String(result)\n}\nfunc decodeShift(_ s: String) -> String {\n    let result = s.unicodeScalars.map { Character(UnicodeScalar(($0.value - 97 + 21) % 26 + 97)!) }\n    return String(result)\n}",
        "HumanEval/51": "func removeVowels(_ txt: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    return String(txt.filter { !vowels.contains($0) })\n}",
        "HumanEval/52": "func belowThreshold(_ l: [Int], _ t: Int) -> Bool {\n    return l.allSatisfy { $0 < t }\n}",
        "HumanEval/53": "func add(_ x: Int, _ y: Int) -> Int {\n    return x + y\n}",
        "HumanEval/54": "func sameChars(_ s0: String, _ s1: String) -> Bool {\n    return Set(s0) == Set(s1)\n}",
        "HumanEval/55": "func fib(_ n: Int) -> Int {\n    if n <= 1 {\n        return n\n    } else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}",
        "HumanEval/56": "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"<\" {\n            depth += 1\n        } else if b == \">\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}",
        "HumanEval/57": "func monotonic(_ l: [Int]) -> Bool {\n    let diff = zip(l, l.dropFirst()).map { $1 - $0 }\n    return diff.allSatisfy { $0 <= 0 } || diff.allSatisfy { $0 >= 0 }\n}",
        "HumanEval/58": "func common(_ l1: [Int], _ l2: [Int]) -> [Int] {\n    return Array(Set(l1).intersection(Set(l2))).sorted()\n}",
        "HumanEval/59": "func largestPrimeFactor(_ n: Int) -> Int {\n    var n = n\n    var i = 2\n    while i * i <= n {\n        if n % i != 0 {\n            i += 1\n        } else {\n            n /= i\n        }\n    }\n    return n\n}",
        "HumanEval/60": "func sumToN(_ n: Int) -> Int {\n    return (0...n).reduce(0, +)\n}",
        "HumanEval/61": "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"(\" {\n            depth += 1\n        } else if b == \")\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}",
        "HumanEval/62": "func derivative(_ xs: [Int]) -> [Int] {\n    return xs.enumerated().dropFirst().map { $0 * $1 }\n}",
        "HumanEval/63": "func fibfib(_ n: Int) -> Int {\n    if (n <= 1) {\n        return 0;\n    }\n    var a = 0, b = 0, c = 1;\n    var n = n;\n    while (n > 2) {\n        (a, b, c) = (b, c, a + b + c);\n        n -= 1;\n    }\n    return c;\n}",
        "HumanEval/64": "func vowelsCount(_ s: String) -> Int {\n    var vowels = \"aeiou\"\n    var cnt = 0\n    for i in 0..<s.count {\n        let c = s[s.index(s.startIndex, offsetBy: i)]\n        if vowels.contains(c.lowercased()) || (i == s.count - 1 && c.lowercased() == \"y\") {\n            cnt += 1\n        }\n    }\n    return cnt\n}",
        "HumanEval/65": "func circularShift(_ x: Int, _ shift: Int) -> String {\n    let xStr = String(x)\n    if shift > xStr.count {\n        return String(xStr.reversed())\n    } else {\n        return String(xStr.suffix(shift)) + String(xStr.prefix(xStr.count - shift))\n    }\n}",
        "HumanEval/66": "func digitSum(_ s: String) -> Int {\n    return s.filter { $0.isUppercase }.map { Int($0.asciiValue!) }.reduce(0, +)\n}",
        "HumanEval/67": "func fruitDistribution(_ s: String, _ n: Int) -> Int {\n    let words = s.split(separator: \" \")\n    let apples = Int(words[words.firstIndex(of: \"apples\")! - 1])!\n    let oranges = Int(words[words.firstIndex(of: \"oranges\")! - 1])!\n    return n - apples - oranges\n}",
        "HumanEval/68": "func pluck(_ arr: [Int]) -> [Int] {\n    let evens = arr.filter { $0 % 2 == 0 }\n    if evens.count == 0 {\n        return []\n    }\n    let minEven = evens.min()!\n    return [minEven, arr.firstIndex(of: minEven)!]\n}",
        "HumanEval/69": "func search(_ lst: [Int]) -> Int {\n    var freqs = [Int: Int]()\n    for n in lst {\n        freqs[n] = (freqs[n] ?? 0) + 1\n    }\n    let good_vals = freqs.filter { $0.value >= $0.key }.map { $0.key }\n    return good_vals.max() ?? -1\n}",
        "HumanEval/70": "func strangeSortList(_ lst: [Int]) -> [Int] {\n    let sl = lst.sorted()\n    var result = [Int]()\n    var left = 0, right = sl.count - 1\n    while left <= right {\n        result.append(sl[left])\n        left += 1\n        if left <= right {\n            result.append(sl[right])\n            right -= 1\n        }\n    }\n    return result\n}",
        "HumanEval/71": "func triangleArea(_ a: Int, _ b: Int, _ c: Int) -> Double {\n    if a + b > c && a + c > b && b + c > a {\n        let s = Double(a + b + c) / 2\n        return sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n    } else {\n        return -1.0\n    }\n}",
        "HumanEval/72": "func willItFly(_ q: [Int], _ w: Int) -> Bool {\n    if q.count == 0 {\n        return false\n    }\n    let isPalin = (0..<q.count).allSatisfy { q[$0] == q[q.count - $0 - 1] }\n    let total = q.reduce(0, +)\n    return isPalin && total <= w\n}",
        "HumanEval/73": "func smallestChange(_ arr: [Int]) -> Int {\n    var ans = 0\n    for i in 0..<arr.count / 2 {\n        if arr[i] != arr[arr.count - i - 1] {\n            ans += 1\n        }\n    }\n    return ans\n}",
        "HumanEval/74": "func totalMatch(_ lst1: [String], _ lst2: [String]) -> [String] {\n    let cnt1 = lst1.map { $0.count }.reduce(0, +)\n    let cnt2 = lst2.map { $0.count }.reduce(0, +)\n    return cnt1 <= cnt2 ? lst1 : lst2\n}",
        "HumanEval/75": "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if 2 <= Int(floor(sqrt(Double(n)))) {\n        for i in 2...Int(floor(sqrt(Double(n)))) {\n            if n % i == 0 {\n                return false\n            }\n        }\n    }\n    return true\n}\nfunc isMultiplyPrime(_ a: Int) -> Bool {\n    var cnt = 0\n    var a = a\n    if a < 2 {\n        return false\n    }\n    for i in 2...a {\n        if isPrime(i) {\n            while a % i == 0 {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}",
        "HumanEval/76": "func isSimplePower(_ x: Int, _ n: Int) -> Bool {\n    if n < 2 {\n        return x == n\n    }\n    var tmp = 1\n    while tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}",
        "HumanEval/77": "func isCube(_ a: Int) -> Bool {\n    let a = abs(a)\n    let root = Int(round(pow(Double(a), 1.0 / 3.0)))\n    return root * root * root == a\n}",
        "HumanEval/78": "func hexKey(_ num: String) -> Int {\n    return num.filter { \"2357BD\".contains($0) }.count\n}",
        "HumanEval/79": "func decimalToBinary(_ dec: Int) -> String {\n    let binary = String(dec, radix: 2)\n    return \"db\\(binary)db\"\n}",
        "HumanEval/80": "func isHappy(_ s: String) -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<(s.count - 2) {\n        if s[s.index(s.startIndex, offsetBy: i)] == s[s.index(s.startIndex, offsetBy: i+1)] || s[s.index(s.startIndex, offsetBy: i)] == s[s.index(s.startIndex, offsetBy: i+2)] || s[s.index(s.startIndex, offsetBy: i+1)] == s[s.index(s.startIndex, offsetBy: i+2)] {\n            return false\n        }\n    }\n    return true\n}",
        "HumanEval/81": "func numericalLetterGrade(_ grades: [Double]) -> [String] {\n    var result = [String]()\n    for g in grades {\n        switch () {\n            case _ where g == 4.0:\n                result.append(\"A+\")\n            case _ where g > 3.7:\n                result.append(\"A\")\n            case _ where g > 3.3:\n                result.append(\"A-\")\n            case _ where g > 3.0:\n                result.append(\"B+\")\n            case _ where g > 2.7:\n                result.append(\"B\")\n            case _ where g > 2.3:\n                result.append(\"B-\")\n            case _ where g > 2.0:\n                result.append(\"C+\")\n            case _ where g > 1.7:\n                result.append(\"C\")\n            case _ where g > 1.3:\n                result.append(\"C-\")\n            case _ where g > 1.0:\n                result.append(\"D+\")\n            case _ where g > 0.7:\n                result.append(\"D\")\n            case _ where g > 0.0:\n                result.append(\"D-\")\n            default:\n                result.append(\"E\")\n        }\n    }\n    return result\n}",
        "HumanEval/82": "func primeLength(_ s: String) -> Bool {\n    let length = s.count\n    if length < 2 {\n        return false\n    }\n    if 2 <= Int(floor(sqrt(Double(length)))) {\n        for i in 2...Int(floor(sqrt(Double(length)))) {\n            if length % i == 0 {\n                return false\n            }\n        }\n    }\n    return true\n}",
        "HumanEval/83": "func startsOneEnds(_ n: Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * Int(pow(10, Double(n - 2)))\n}",
        "HumanEval/84": "func solve(_ n: Int) -> String {\n    let digitsSum = String(n).map { Int(String($0))! }.reduce(0, +)\n    return String(digitsSum, radix: 2)\n}",
        "HumanEval/85": "func add(_ lst: [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 == 1 && $0.element % 2 == 0 }.map { $0.element }.reduce(0, +)\n}",
        "HumanEval/86": "func antiShuffle(_ s: String) -> String {\n    let words = s.split(separator: \" \").map { String($0.sorted()) }\n    return words.joined(separator: \" \")\n}",
        "HumanEval/87": "func getRow(_ lst: [[Int]], _ x: Int) -> [[Int]] {\n    var coords = [[Int]]()\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            if lst[i][j] == x {\n                coords.append([i, j])\n            }\n        }\n    }\n    coords.sort { $0[0] == $1[0] ? $1[1] < $0[1] : $0[0] < $1[0] }\n    return coords\n}",
        "HumanEval/88": "func sortArray(_ arr: [Int]) -> [Int] {\n    if arr.count == 0 {\n        return []\n    }\n    if (arr[0] + arr[arr.count - 1]) % 2 == 0 {\n        return arr.sorted().reversed()\n    }\n    else {\n        return arr.sorted()\n    }\n}",
        "HumanEval/89": "func encrypt(_ s: String) -> String {\n    var result = \"\"\n    for ch in s {\n        var shifted = Int(ch.asciiValue!) + 4\n        if shifted > Int(Character(\"z\").asciiValue!) {\n            shifted -= 26\n        }\n        result += String(UnicodeScalar(shifted)!)\n    }\n    return result\n}",
        "HumanEval/90": "func nextSmallest(_ lst: [Int]) -> Int? {\n    let sl = Set(lst).sorted()\n    if sl.count < 2 {\n        return nil\n    }\n    return sl[1]\n}",
        "HumanEval/91": "func isBored(_ s: String) -> Int {\n    let sentences = s.split(separator: #/[.!?]\\s*/#)\n    return sentences.filter { $0.count >= 2 && $0.prefix(2) == \"I \" }.count\n}",
        "HumanEval/92": "func anyInt(_ x: Any, _ y: Any, _ z: Any) -> Bool {\n    if let xInt = x as? Int, let yInt = y as? Int, let zInt = z as? Int {\n        if (xInt + yInt == zInt) || (xInt + zInt == yInt) || (yInt + zInt == xInt) {\n            return true\n        }\n    }\n    return false\n}",
        "HumanEval/93": "func encode(_ message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for ch in message {\n        if ch.isLetter {\n            var ch1 = ch.isLowercase ? Character(ch.uppercased()) : Character(ch.lowercased())\n            if vowels.contains(ch1) {\n                ch1 = Character(UnicodeScalar(Int(ch1.asciiValue!) + 2)!)\n            }\n            result.append(ch1)\n        } else {\n            result.append(ch)\n        }\n    }\n    return result\n}",
        "HumanEval/94": "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if 2 <= Int(floor(sqrt(Double(n)))) {\n        for i in 2...Int(floor(sqrt(Double(n)))) {\n            if n % i == 0 {\n                return false\n            }\n        }\n    }\n    return true\n}\nfunc skjkasdkd(_ lst: [Int]) -> Int {\n    let primes = lst.filter { isPrime($0) }\n    if primes.count == 0 {\n        return 0\n    }\n    let largest = String(primes.max()!)\n    return largest.reduce(0) { $0 + $1.wholeNumberValue! }\n}",
        "HumanEval/95": "func checkDictCase(_ d: [String: String]) -> Bool {\n    if d.isEmpty {\n        return false\n    }\n    return d.keys.allSatisfy { $0.allSatisfy { $0.isUppercase } } || d.keys.allSatisfy { $0.allSatisfy { $0.isLowercase } }\n}",
        "HumanEval/96": "func countUpTo(_ n: Int) -> [Int] {\n    var primes = [Int]()\n    if 2 <= n {\n        for num in 2..<n {\n            if primes.allSatisfy({ num % $0 != 0 }) {\n                primes.append(num)\n            }\n        }\n    }\n    return primes\n}",
        "HumanEval/97": "func multiply(_ a: Int, _ b: Int) -> Int {\n    (abs(a) % 10) * (abs(b) % 10)\n}",
        "HumanEval/98": "func countUpper(_ s: String) -> Int {\n    let vowels = \"AEIOU\"\n    return s.enumerated().filter { $0.offset % 2 == 0 && vowels.contains($0.element) }.count\n}",
        "HumanEval/99": "func closestInteger(_ value: String) -> Int {\n    let num = Double(value)!\n    if num >= 0 {\n        return Int(num + 0.5)\n    } else {\n        return Int(num - 0.5)\n    }\n}",
        "HumanEval/100": "func makeAPile(_ n: Int) -> [Int] {\n    return (0..<n).map { i in n + 2 * i }\n}",
        "HumanEval/101": "func wordsString(_ s: String) -> [String] {\n    return s.split(separator: #/[, ]/#).filter { $0.count > 0 }.map { String($0) }\n}",
        "HumanEval/102": "func chooseNum(_ x: Int, _ y: Int) -> Int {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return y != x ? y - 1 : -1;\n}",
        "HumanEval/103": "func roundedAvg(_ n: Int, _ m: Int) -> String? {\n    if n > m {\n        return nil\n    }\n    let rAvg = Int(Double(n + m) / 2 + 0.5)\n    return String(rAvg, radix: 2)\n}",
        "HumanEval/104": "func allDigitsOdd(_ s: String) -> Bool {\n    return s.allSatisfy { $0.asciiValue! % 2 != 0 }\n}\nfunc uniqueDigits(_ x: [Int]) -> [Int] {\n    return x.filter { allDigitsOdd(String($0)) }.sorted()\n}",
        "HumanEval/105": "func byLength(_ arr: [Int]) -> [String] {\n    let digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    let sortedArr = arr.filter { 1 <= $0 && $0 <= 9 }.sorted(by: >)\n    return sortedArr.map { digitNames[$0 - 1] }\n}",
        "HumanEval/106": "func f(_ n: Int) -> [Int] {\n    let nums = Array(1...n)\n    return nums.map { $0 % 2 != 0 ? nums[0..<$0].reduce(0, +) : nums[0..<$0].reduce(1, *) }\n}",
        "HumanEval/107": "func isPalindrome(_ s: String) -> Bool {\n    return s == String(s.reversed())\n}\nfunc evenOddPalindrome(_ n: Int) -> [Int] {\n    var cnt = [0, 0]\n    for i in 1...n {\n        if isPalindrome(String(i)) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}",
        "HumanEval/108": "func digitsSum(_ n: Int) -> Int {\n    let nStr = String(n)\n    if n >= 0 {\n        return nStr.map { Int(String($0))! }.reduce(0, +)\n    } else {\n        return Int(nStr.prefix(2))! * 2 + digitsSum(abs(n))\n    }\n}\nfunc countNums(_ arr: [Int]) -> Int {\n    return arr.filter { digitsSum($0) > 0 }.count\n}",
        "HumanEval/109": "func moveOneBall(_ arr: [Int]) -> Bool {\n    if arr.isEmpty {\n        return true\n    }\n    let sortedArr = arr.sorted()\n    for i in 0..<arr.count {\n        if arr[i..<arr.count] == sortedArr[0..<arr.count - i] && arr[0..<i] == sortedArr[arr.count - i..<arr.count] {\n            return true\n        }\n    }\n    return false\n}",
        "HumanEval/110": "func canExchange(_ lst1: [Int], _ lst2: [Int]) -> String {\n    let oddCnt = lst1.filter { $0 % 2 != 0 }.count\n    let evenCnt = lst2.filter { $0 % 2 == 0 }.count\n    return evenCnt >= oddCnt ? \"YES\" : \"NO\"\n}",
        "HumanEval/111": "func histogram(_ test: String) -> [String: Int] {\n    var freq = [String: Int]()\n    let words = test.split(separator: \" \").map { String($0) }\n    for w in words {\n        freq[w] = (freq[w] ?? 0) + 1\n    }\n    var result = [String: Int]()\n    if !freq.isEmpty {\n        let maxFreq = freq.values.max()!\n        for (k, v) in freq {\n            if v == maxFreq {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}",
        "HumanEval/112": "func isPalindrome(_ s: String) -> Bool {\n    return s == String(s.reversed())\n}\nfunc reverseDelete(_ s: String, _ c: String) -> [String] {\n    let s1 = s.filter { !c.contains($0) }\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"]\n}",
        "HumanEval/113": "func oddCount(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for num in lst {\n        let n = num.filter { $0.asciiValue! % 2 == 1 }.count\n        let rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replacingOccurrences(of: \"i\", with: String(n)))\n    }\n    return result\n}",
        "HumanEval/114": "func minSubArraySum(_ nums: [Int]) -> Int {\n    var minSum = 0\n    var curSum = 0\n    for n in nums {\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if minSum == 0 {\n        minSum = nums.min()!\n    }\n    return minSum\n}",
        "HumanEval/115": "func maxFill(_ grid: [[Int]], _ capacity: Int) -> Int {\n    return grid.map { Int(ceil(Double($0.reduce(0, +)) / Double(capacity))) }.reduce(0, +)\n}",
        "HumanEval/116": "func countOnes(_ num: Int) -> Int {\n    return String(num, radix: 2).filter { $0 == \"1\" }.count\n}\nfunc sortArray(_ arr: [Int]) -> [Int] {\n    return arr.sorted { countOnes($0) == countOnes($1) ? $0 < $1 : countOnes($0) < countOnes($1) }\n}",
        "HumanEval/117": "func selectWords(_ s: String, _ n: Int) -> [String] {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let words = s.split(separator: \" \").map { String($0) }.filter { $0.count > 0 }\n    return words.filter { $0.filter { consonants.contains($0.lowercased()) }.count == n }\n}",
        "HumanEval/118": "func getClosestVowel(_ word: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    for i in stride(from: word.count - 2, through: 1, by: -1) {\n        let index = word.index(word.startIndex, offsetBy: i)\n        if vowels.contains(word[index]) && !vowels.contains(word[word.index(before: index)]) && !vowels.contains(word[word.index(after: index)]) {\n            return String(word[index])\n        }\n    }\n    return \"\"\n}",
        "HumanEval/119": "func check(_ s: String) -> Bool {\n    var depth = 0\n    for ch in s {\n        if ch == \"(\" {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0 ? true : false\n}\nfunc matchParens(_ lst: [String]) -> String {\n    let s1 = lst[0] + lst[1]\n    let s2 = lst[1] + lst[0]\n    return check(s1) || check(s2) ? \"Yes\" : \"No\"\n}",
        "HumanEval/120": "func maximum(_ arr: [Int], _ k: Int) -> [Int] {\n    if k == 0 {\n        return []\n    }\n    return arr.sorted().suffix(k)\n}",
        "HumanEval/121": "func solution(_ lst: [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 == 0 && $0.element % 2 != 0 }.map { $0.element }.reduce(0, +)\n}",
        "HumanEval/122": "func addElements(_ arr: [Int], _ k: Int) -> Int {\n    return arr.prefix(k).filter { String($0).count <= 2 }.reduce(0, +)\n}",
        "HumanEval/123": "func getOddCollatz(_ n: Int) -> [Int] {\n    var collatz = [1]\n    var n = n\n    while n != 1 {\n        if n % 2 != 0 {\n            collatz.append(n)\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    return collatz.sorted()\n}",
        "HumanEval/124": "func validDate(_ date: String) -> Bool {\n    if date.count != 10 || date[date.index(date.startIndex, offsetBy: 2)] != \"-\" || date[date.index(date.startIndex, offsetBy: 5)] != \"-\" {\n        return false\n    }\n    let m = Int(date.prefix(2))!\n    let d = Int(date[date.index(date.startIndex, offsetBy: 3)..<date.index(date.startIndex, offsetBy: 5)])!\n    if [1, 3, 5, 7, 8, 10, 12].contains(m) && d >= 1 && d <= 31 {\n        return true\n    }\n    if [4, 6, 9, 11].contains(m) && d >= 1 && d <= 30 {\n        return true\n    }\n    if m == 2 && d >= 1 && d <= 29 {\n        return true\n    }\n    return false\n}",
        "HumanEval/125": "func splitWords(_ txt: String) -> [String] {\n    if txt.contains(\" \") {\n        return txt.components(separatedBy: \" \")\n    } else if txt.contains(\",\") {\n        return txt.components(separatedBy: \",\")\n    } else {\n        return [String(txt.filter { $0.isLowercase && $0.asciiValue! % 2 == 0 }.count)]\n    }\n}",
        "HumanEval/126": "func isSorted(_ lst: [Int]) -> Bool {\n    if !zip(lst, lst.dropFirst()).allSatisfy({ $0 <= $1 }) {\n        return false\n    }\n    var freq = [Int: Int]()\n    for i in lst {\n        freq[i] = (freq[i] ?? 0) + 1\n    }\n    return freq.values.max() ?? 0 <= 2\n}",
        "HumanEval/127": "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if 2 <= Int(floor(sqrt(Double(n)))) {\n        for i in 2...Int(floor(sqrt(Double(n)))) {\n            if n % i == 0 {\n                return false\n            }\n        }\n    }\n    return true\n}\nfunc intersection(_ interval1: [Int], _ interval2: [Int]) -> String {\n    let l = max(interval1[0], interval2[0])\n    let r = min(interval1[1], interval2[1])\n    let length = r - l\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\"\n}",
        "HumanEval/128": "func prodSigns(_ arr: [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    if arr.contains(0) {\n        return 0\n    }\n    let sign = arr.filter { $0 < 0 }.count % 2 == 1 ? -1 : 1\n    return sign * arr.map(abs).reduce(0, +)\n}",
        "HumanEval/129": "func minPath(_ grid: [[Int]], _ k: Int) -> [Int] {\n    let n = grid.count\n    var minVal = n * n + 1\n    for i in 0..<n {\n        for j in 0..<n {\n            if grid[i][j] == 1 {\n                var temp = [Int]()\n                if i != 0 {\n                    temp.append(grid[i - 1][j])\n                }\n                if j != 0 {\n                    temp.append(grid[i][j - 1])\n                }\n                if i != n - 1 {\n                    temp.append(grid[i + 1][j])\n                }\n                if j != n - 1 {\n                    temp.append(grid[i][j + 1])\n                }\n                minVal = temp.min()!\n            }\n        }\n    }\n    var result = [Int]()\n    for i in 0..<k {\n        result.append(i % 2 == 0 ? 1 : minVal)\n    }\n    return result\n}",
        "HumanEval/130": "func tri(_ n: Int) -> [Int] {\n    if n == 0 {\n        return [1]\n    }\n    var seq = [1, 3]\n    if 2 <= n {\n        for i in 2...n {\n            if i % 2 == 0 {\n                seq.append(i / 2 + 1)\n            } else {\n                seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n            }\n        }\n    }\n    return seq\n}",
        "HumanEval/131": "func digits(_ n: Int) -> Int {\n    let odds = String(n).filter { Int(String($0))! % 2 == 1 }.map { Int(String($0))! }\n    return odds.isEmpty ? 0 : odds.reduce(1, *)\n}",
        "HumanEval/132": "func isNested(_ s: String) -> Bool {\n    var openIdx = [Int]()\n    var closeIdx = [Int]()\n    for (i, ch) in s.enumerated() {\n        switch (ch) {\n            case \"[\":\n                openIdx.append(i)\n            case \"]\":\n                closeIdx.append(i)\n            default:\n                break\n        }\n    }\n    closeIdx.reverse()\n    var cnt = 0\n    var i = 0\n    let l = closeIdx.count\n    for idx in openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}",
        "HumanEval/133": "func sumSquares(_ lst: [Double]) -> Int {\n    return lst.map { Int(ceil($0)) * Int(ceil($0)) }.reduce(0, +)\n}",
        "HumanEval/134": "func checkIfLastCharIsALetter(_ txt: String) -> Bool {\n    if txt.isEmpty {\n        return false\n    }\n    let last = txt[(txt.lastIndex(of: \" \").map { txt.index(after: $0) } ?? txt.startIndex)...]\n    return last.count == 1 && last.first!.isLetter\n}",
        "HumanEval/135": "func canArrange(_ arr: [Int]) -> Int {\n    if arr.count <= 1 {\n        return -1\n    }\n    let idx = (1..<arr.count).filter { arr[$0] < arr[$0 - 1] }\n    return idx.max() ?? -1\n}",
        "HumanEval/136": "func largestSmallestIntegers(_ lst: [Int]) -> [Int?] {\n    let neg = lst.filter { $0 < 0 }\n    let pos = lst.filter { $0 > 0 }\n    let maxNeg = neg.max()\n    let minPos = pos.min()\n    return [maxNeg, minPos]\n}",
        "HumanEval/137": "func anyToReal(_ o: Any) -> Double {\n    if let oStr = o as? String {\n        return Double(oStr.replacingOccurrences(of: \",\", with: \".\"))!\n    } else if let oInt = o as? Int {\n        return Double(oInt)\n    } else if let oFloat = o as? Double {\n        return oFloat\n    }\n    fatalError(\"Type Error\")\n}\nfunc compareOne(_ a: Any, _ b: Any) -> Double? {\n    let a1 = anyToReal(a)\n    let b1 = anyToReal(b)\n    if a1 == b1 {\n        return nil\n    } else if a1 > b1 {\n        return a1\n    } else {\n        return b1\n    }\n}",
        "HumanEval/138": "func isEqualToSumEven(_ n: Int) -> Bool {\n    return n % 2 == 0 && n >= 8\n}",
        "HumanEval/139": "func specialFactorial(_ n: Int) -> Int {\n    var fact = 1\n    var result = 1\n    for i in 1...n {\n        fact *= i\n        result *= fact\n    }\n    return result\n}",
        "HumanEval/140": "func fixSpaces(_ txt: String) -> String {\n    return txt.replacing(#/\\s{3,}/#, with: \"-\").replacingOccurrences(of: \" \", with: \"_\")\n}",
        "HumanEval/141": "func fileNameCheck(_ fileName: String) -> String {\n    let suf = [\"txt\", \"exe\", \"dll\"]\n    let lst = fileName.split(separator: \".\", omittingEmptySubsequences: false)\n    if lst.count != 2 || !suf.contains(String(lst[1])) || lst[0].count == 0 || !lst[0].first!.isLetter || lst[0].filter({ $0.isNumber }).count > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}",
        "HumanEval/142": "func sumSquares(_ lst: [Int]) -> Int {\n    var result = 0\n    for i in 0..<lst.count {\n        if i % 3 == 0 {\n            result += Int(pow(Double(lst[i]), 2))\n        } else if i % 4 == 0 {\n            result += Int(pow(Double(lst[i]), 3))\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}",
        "HumanEval/143": "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if 2 <= Int(floor(sqrt(Double(n)))) {\n        for i in 2...Int(floor(sqrt(Double(n)))) {\n            if n % i == 0 {\n                return false\n            }\n        }\n    }\n    return true\n}\nfunc wordsInSentence(_ sentence: String) -> String {\n    let words = sentence.split(separator: \" \")\n    return words.filter { isPrime($0.count) }.joined(separator: \" \")\n}",
        "HumanEval/144": "func simplify(_ x: String, _ n: String) -> Bool {\n    let xs = x.split(separator: \"/\")\n    let ns = n.split(separator: \"/\")\n    let num = Int(xs[0])! * Int(ns[0])!\n    let den = Int(xs[1])! * Int(ns[1])!\n    return num % den == 0    \n}",
        "HumanEval/145": "func digitsSum(_ n: Int) -> Int {\n    let nStr = String(n)\n    if n >= 0 {\n        return nStr.map { Int(String($0))! }.reduce(0, +)\n    } else {\n        return Int(nStr.prefix(2))! * 2 + digitsSum(abs(n))\n    }\n}\nfunc orderByPoints(_ nums: [Int]) -> [Int] {\n    return nums.sorted { digitsSum($0) < digitsSum($1) }\n}",
        "HumanEval/146": "func specialFilter(_ nums: [Int]) -> Int {\n    let odds = \"13579\"\n    return nums.filter { $0 > 10 && $0 % 2 == 1 }.filter { odds.contains(String(String($0).first!)) }.count\n}",
        "HumanEval/147": "func getMaxTriples(_ n: Int) -> Int {\n    var c = [0, 0, 0]\n    for i in 1...n {\n        let a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n}",
        "HumanEval/148": "func bf(_ planet1: String, _ planet2: String) -> [String] {\n    let names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if !names.contains(planet1) || !names.contains(planet2) {\n        return []\n    }\n    var l = names.firstIndex(of: planet1)!\n    var r = names.firstIndex(of: planet2)!\n    if l > r {\n        (l, r) = (r, l)\n    }\n    if l == r {\n        return []\n    }\n    return Array(names[l + 1 ..< r])\n}",
        "HumanEval/149": "func sortedListSum(_ lst: [String]) -> [String] {\n    let result = lst.filter { $0.count % 2 == 0 }\n    return result.sorted { $0.count < $1.count || $0 < $1 }\n}",
        "HumanEval/150": "func xOrY(_ n: Int, _ x: Int, _ y: Int) -> Int {\n    if n < 2 {\n        return y\n    }\n    if 2 <= Int(floor(sqrt(Double(n)))) {\n        for i in 2...Int(floor(sqrt(Double(n)))) {\n            if n % i == 0 {\n                return y\n            }\n        }\n    }\n    return x\n}",
        "HumanEval/151": "func doubleTheDifference(_ lst: [Double]) -> Int {\n    return lst.filter { $0 >= 0 && $0.truncatingRemainder(dividingBy: 2) == 1 }.map { Int($0 * $0) }.reduce(0, +)\n}",
        "HumanEval/152": "func compare(_ game: [Int], _ guess: [Int]) -> [Int] {\n    return zip(game, guess).map { abs($0 - $1) }\n}",
        "HumanEval/153": "func strongestExtension(_ className: String, _ extensions: [String]) -> String {\n    var maxS = Int.min\n    var maxExt = \"\"\n    for ext in extensions {\n        let upper = ext.filter { $0.isUppercase }.count\n        let lower = ext.filter { $0.isLowercase }.count\n        let s = upper - lower\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return \"\\(className).\\(maxExt)\"\n}",
        "HumanEval/154": "func cycpatternCheck(_ a: String, _ b: String) -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    for i in 0..<b.count {\n        if a.contains(b.suffix(b.count - i) + b.prefix(i)) {\n            return true\n        }\n    }\n    return false\n}",
        "HumanEval/155": "func evenOddCount(_ num: Int) -> [Int] {\n    let ds = String(abs(num))\n    let even = ds.filter { Int(String($0))! % 2 == 0 }.count\n    return [even, ds.count - even]\n}",
        "HumanEval/156": "func intToMiniRoman(_ num: Int) -> String {\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 , 5, 4, 1]\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    var res = \"\"\n    var num = num\n    for i in 0..<values.count {\n        while num >= values[i] {\n            res += numerals[i]\n            num -= values[i]\n        }\n    }\n    return res\n}",
        "HumanEval/157": "func rightAngleTriangle(_ a: Int, _ b: Int, _ c: Int) -> Bool {\n    var s = [a, b, c].sorted()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]    \n}",
        "HumanEval/158": "func findMax(_ words: [String]) -> String {\n    var maxCnt = 0\n    var maxW = \"\"\n    for w in words {\n        let cnt = Set(w).count\n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        } else if cnt == maxCnt {\n            maxW = min(maxW, w)\n        }\n    }\n    return maxW\n}",
        "HumanEval/159": "func eat(_ num: Int, _ need: Int, _ remaining: Int) -> [Int] {\n    if need <= remaining {\n        return [num + need, remaining - need]\n    } else {\n        return [num + remaining, 0]\n    }\n}",
        "HumanEval/160": "func doAlgebra(_ operators: [String], _ operands: [Int]) -> Int {\n    var ops = operators\n    var nums = operands\n    var i = ops.count - 1\n    while i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = Int(pow(Double(nums[i]), Double(nums[i + 1])))\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n        }\n        i -= 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}",
        "HumanEval/161": "func solve(_ s: String) -> String {\n    if !s.contains(where: { $0.isLetter }) {\n        return String(s.reversed())\n    }\n    var result = \"\"\n    for ch in s {\n        if !ch.isLetter {\n            result.append(ch)\n        } else if ch.isUppercase {\n            result.append(ch.lowercased())\n        } else if ch.isLowercase {\n            result.append(ch.uppercased())\n        }\n    }\n    return result\n}",
        "HumanEval/162": "func stringToMd5(_ txt: String) -> String? {\n    if txt.isEmpty {\n        return nil\n    }\n    let txtBytes = Data(txt.utf8)\n    let md5Encoded = txtBytes.md5().map { String(format: \"%02hhx\", $0) }.joined()\n    return md5Encoded\n}",
        "HumanEval/163": "func generateIntegers(_ a: Int, _ b: Int) -> [Int] {\n    let lower = max(2, min(a, b))\n    let upper = min(8, max(a, b))\n    if lower > upper {\n        return []\n    }\n    return  Array(lower...upper).filter { $0 % 2 == 0 }\n}"
    },
    "typescript": {
        "HumanEval/0": "export const hasCloseElements = (numbers: Array<number>, threshold: number): boolean => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "HumanEval/1": "export const separateParenGroups = (parenString: string): Array<string> => {\n    const groups: Array<string> = [];\n    const stk: Array<string> = [];\n    let currentGroup: string = \"\";\n    const parens : string = parenString.replace(\" \", \"\");\n    for (const ch of parens) {\n        if (ch === \"(\") {\n            stk.push(ch);\n            currentGroup += ch;\n        } else if (ch === \")\") {\n            stk.pop();\n            currentGroup += ch;\n            if (stk.length === 0) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}",
        "HumanEval/2": "export const truncateNumber = (num: number): number => {\n    return num - Math.floor(num);\n}",
        "HumanEval/3": "export const belowZero = (operations: Array<number>): boolean => {\n    let balance = 0;\n    for (const op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}",
        "HumanEval/4": "export const meanAbsoluteDeviation = (numbers: Array<number>): number => {\n    const mean: number = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n    const deviation: number = numbers.map(num => Math.abs(num - mean)).reduce((sum, num) => sum + num, 0);\n    return deviation / numbers.length;\n}",
        "HumanEval/5": "export const intersperse = (numbers: Array<number>, delimiter: number): Array<number> => {\n    const result: Array<number> = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i !== 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}",
        "HumanEval/6": "export const parseNestedParens = (parenString: string): Array<number> => {\n    const result: Array<number> = [];\n    const groups: Array<string> = parenString.split(\" \").filter((s) => s.length > 0);\n    for (const group of groups) {\n        let maxDepth = 0;\n        let depth = 0;\n        for (const ch of group) {\n            if (ch === \"(\") {\n                depth += 1;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch === \")\") {\n                depth -= 1;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}",
        "HumanEval/7": "export const filterBySubstring = (strs: Array<string>, substring: string): Array<string> => {\n    return strs.filter(s => s.includes(substring));\n}",
        "HumanEval/8": "export const sumProduct = (numbers: Array<number>): Array<number> => {\n    let nSum = numbers.reduce((a, b) => a + b, 0);\n    let nProduct = numbers.reduce((a, b) => a * b, 1);\n    return [nSum, nProduct];\n}",
        "HumanEval/9": "export const rollingMax = (numbers: Array<number>): Array<number> => {\n    let maxSoFar: number = Number.NEGATIVE_INFINITY;\n    const result: Array<number> = [];\n    for (const num of numbers) {\n        maxSoFar = Math.max(maxSoFar, num);\n        result.push(maxSoFar);\n    }\n    return result;\n}",
        "HumanEval/10": "export const isPalindrome = (s: string): boolean => {\n    return s === s.split('').reverse().join('');\n}\nexport const makePalindrome = (s: string): string => {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (isPalindrome(s.slice(i))) {\n            return s + s.slice(0, i).split('').reverse().join('');\n        }\n    }\n    return \"\";\n}",
        "HumanEval/11": "export const stringXor = (a: string, b: string): string => {\n    return a.split('').map((c, i) => c === b[i] ? '0' : '1').join('');\n}",
        "HumanEval/12": "export const longest = (strs: Array<string>): string | null => {\n    if (!strs.length) {\n        return null;\n    }\n    let longestS: string = strs[0];\n    for (const s of strs) {\n        if (s.length > longestS.length) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}",
        "HumanEval/13": "export const greatestCommonDivisor = (a: number, b: number): number => {\n    if (b === 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}",
        "HumanEval/14": "export const allPrefixes = (s: string): Array<string> => {\n    const prefixes: Array<string> = [];\n    for (let i = 0; i < s.length; i++) {\n        prefixes.push(s.slice(0, i + 1));\n    }\n    return prefixes;\n}",
        "HumanEval/15": "export const stringSequence = (n: number): string => {\n    return Array.from({ length: n + 1 }, (_, i) => i).join(\" \");\n}",
        "HumanEval/16": "export const countDistinctCharacters = (s: string): number => {\n    return new Set(s.toLowerCase()).size;\n}",
        "HumanEval/17": "export const parseMusic = (musicString: string): Array<number> => {\n    const durations: { [key: string]: number } = { \"o\": 4, \"o|\": 2, \".|\": 1 };\n    const notes: Array<string> = musicString.split(\" \").filter((s) => s.length > 0);\n    return notes.map(note => durations[note]);\n}",
        "HumanEval/18": "export const howManyTimes = (s: string, substring: string): number => {\n    let times = 0;\n    for (let i = 0; i <= s.length - substring.length; i++) {\n        if (s.slice(i, i + substring.length) === substring) {\n            times += 1;\n        }\n    }\n    return times;\n}",
        "HumanEval/19": "export const sortNumbers = (numbers: string): string => {\n    const numDict: { [key: string]: number } = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    const numList: Array<string> = numbers.split(\" \").filter(x => x in numDict);\n    numList.sort((a, b) => numDict[a] - numDict[b]);\n    return numList.join(\" \");\n}",
        "HumanEval/20": "export const findClosestElements = (numbers: Array<number>): Array<number> => {\n    const sortedNumbers: Array<number> = [...numbers].sort((a, b) => a - b);\n    let minDiff: number = Infinity;\n    let closestPair: Array<number> = [];\n    for (let i = 1; i < sortedNumbers.length; i++) {\n        const diff: number = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}",
        "HumanEval/21": "export const rescaleToUnit = (numbers: Array<number>): Array<number> => {\n    const minNum: number = Math.min(...numbers);\n    const maxNum: number = Math.max(...numbers);\n    if (minNum === maxNum) {\n        return Array(numbers.length).fill(0.0);\n    } else {\n        return numbers.map(num => (num - minNum) / (maxNum - minNum));\n    }\n}",
        "HumanEval/22": "export const filterIntegers = (values: Array<any>): Array<number> => {\n    return values.filter((x) => typeof x === 'number' && Number.isInteger(x));\n}",
        "HumanEval/23": "export const strLength = (s: string): number => {\n    return s.length;\n}",
        "HumanEval/24": "export const largestDivisor = (n: number): number => {\n    for (let i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}",
        "HumanEval/25": "export const factorize = (n: number): Array<number> => {\n    const factors: Array<number> = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}",
        "HumanEval/26": "export const removeDuplicates = (numbers: Array<number>): Array<number> => {\n    const counts: Map<number, number> = new Map();\n    for (const num of numbers) {\n        counts.set(num, (counts.get(num) || 0) + 1);\n    }\n    const res = numbers.filter(num => counts.get(num) === 1);\n    return res;\n}",
        "HumanEval/27": "export const flipCase = (s: string): string => {\n    const flipped: string[] = [];\n    for (const ch of s) {\n        if (ch.match(/[^a-zA-Z]/)) {\n            flipped.push(ch);\n        } else if (ch.match(/[a-z]/)) {\n            flipped.push(ch.toUpperCase());\n        } else if (ch.match(/[A-Z]/)) {\n            flipped.push(ch.toLowerCase());\n        }\n    }\n    return flipped.join('');\n}",
        "HumanEval/28": "export const concatenate = (strs: Array<string>): string => {\n    return strs.join(\"\");\n}",
        "HumanEval/29": "export const filterByPrefix = (strs: Array<string>, prefixStr: string): Array<string> => {\n    return strs.filter(s => s.startsWith(prefixStr));\n}",
        "HumanEval/30": "export const getPositive = (l: Array<number>): Array<number> => {\n    return l.filter(num => num > 0);\n}",
        "HumanEval/31": "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "HumanEval/32": "export const poly = (xs: Array<number>, x: number): number => {\n    let res = 0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n}\nexport const findZero = (xs: Array<number>): number => {\n    let [x1, x2] = [1.0, -1.0];\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        const mid = (x1 + x2) / 2;\n        if (poly(xs, mid) === 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}",
        "HumanEval/33": "export const sortThird = (l: Array<number>): Array<number> => {\n    const sortedThird: Array<number> = l.filter((_, i) => i % 3 === 0).sort((a, b) => a - b);\n    return l.map((x, i) => i % 3 === 0 ? sortedThird[i / 3] : x);\n}",
        "HumanEval/34": "export const listUnique = (l: Array<number>): Array<number> => {\n    return [... new Set(l)].sort((a, b) => a - b);\n}",
        "HumanEval/35": "export const maxElement = (l: Array<number>): number => {\n    if (l.length === 0) {\n        return 0;\n    }\n    return Math.max(...l);\n}",
        "HumanEval/36": "export const fizzBuzz = (n: number): number => {\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += String(i).split(\"7\").length - 1;\n        }\n    }\n    return cnt;\n}",
        "HumanEval/37": "export const sortEven = (l: Array<number>): Array<number> => {\n    const sortedEven = l.filter((_, i) => (i & 1) === 0).sort((a, b) => a - b);\n    return l.map((x, i) => (i & 1) === 0 ? sortedEven[i / 2] : x);\n}",
        "HumanEval/38": "export const encodeCyclic = (s: string): string => {\n    const result: string[] = [];\n    for (let i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.push(s.slice(i));\n        } else {\n            result.push(s.slice(i+1, i+3));\n            result.push(s[i]);\n        }\n    }\n    return result.join(\"\");\n}\nexport const decodeCyclic = (s: string): string => {\n    return encodeCyclic(encodeCyclic(s));\n}",
        "HumanEval/39": "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const primeFib = (n: number): number => {\n    let f = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt++;\n        }\n    }\n    return f[1];\n}",
        "HumanEval/40": "export const triplesSumToZero = (l: Array<number>): boolean => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "HumanEval/41": "export const carRaceCollision = (n: number): number => {\n    return Math.pow(n, 2);\n}",
        "HumanEval/42": "export const incrList = (l: Array<number>): Array<number> => {\n    return l.map(i => i + 1);\n}",
        "HumanEval/43": "export const pairsSumToZero = (l: Array<number>): boolean => {\n    const seen: Set<number> = new Set();\n    for (const num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}",
        "HumanEval/44": "export const changeBase = (x: number, bas: number): string => {\n    if (x === 0) {\n        return \"0\";\n    }\n    const digits: Array<string> = [];\n    while (x > 0) {\n        digits.push((x % bas).toString());\n        x = Math.trunc(x / bas);\n    }\n    return digits.reverse().join(\"\");\n}",
        "HumanEval/45": "export const triangleArea = (a: number, h: number): number => {\n    return a * h / 2;\n}",
        "HumanEval/46": "export const fib4 = (n: number): number => {\n    let fib = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        fib[i % 4] = fib.reduce((a, b) => a + b);\n    }\n    return fib[n % 4];\n}",
        "HumanEval/47": "export const median = (l: Array<number>): number => {\n    const sl: Array<number> = [...l].sort((a, b) => a - b);\n    if (l.length % 2 !== 0) {\n        return sl[Math.trunc(l.length / 2)];\n    }\n    else {\n        return (sl[Math.trunc(l.length / 2)] + sl[Math.trunc(l.length / 2) - 1]) / 2;\n    }\n}",
        "HumanEval/48": "export const isPalindrome = (txt: string): boolean => {\n    return txt === txt.split('').reverse().join('');\n}",
        "HumanEval/49": "export const modp = (n: number, p: number): number => {\n    let ret = 1;\n    for (let i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}",
        "HumanEval/50": "export const encodeShift = (s: string): string => {\n    const result: Array<string> = [...s].map(ch => String.fromCharCode((ch.charCodeAt(0) - 97 + 5) % 26 + 97));\n    return result.join('');\n}\nexport const decodeShift = (s: string): string => {\n    const result: Array<string> = [...s].map(ch => String.fromCharCode((ch.charCodeAt(0) - 97 + 21) % 26 + 97));\n    return result.join('');\n}",
        "HumanEval/51": "export const removeVowels = (txt: string): string => {\n    const vowels: string = \"aeiouAEIOU\";\n    return txt.split('').filter(char => !vowels.includes(char)).join('');\n}",
        "HumanEval/52": "export const belowThreshold = (l: Array<number>, t: number): boolean => {\n    return l.every(x => x < t);\n}",
        "HumanEval/53": "export const add = (x: number, y: number): number => {\n    return x + y;\n}",
        "HumanEval/54": "export const sameChars = (s0: string, s1: string): boolean => {\n    return _.isEqual(new Set([...s0]), new Set([...s1]));\n}",
        "HumanEval/55": "export const fib = (n: number): number => {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}",
        "HumanEval/56": "export const correctBracketing = (brackets: string): boolean => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b == '<') {\n            depth += 1;\n        } else if (b == '>') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}",
        "HumanEval/57": "export const monotonic = (l: Array<number>): boolean => {\n    const diff: Array<number> = l.slice(1).map((x, i) => x - l[i]);\n    return diff.every(x => x <= 0) || diff.every(x => x >= 0);\n}",
        "HumanEval/58": "export const common = (l1: Array<number>, l2: Array<number>): Array<number> => {\n    return [...new Set(l1)].filter(element => l2.includes(element)).sort();\n}",
        "HumanEval/59": "export const largestPrimeFactor = (n: number): number => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}",
        "HumanEval/60": "export const sumToN = (n: number): number => {\n    return [...Array(n + 1).keys()].reduce((a, b) => a + b, 0);\n}",
        "HumanEval/61": "export const correctBracketing = (brackets: string): boolean => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b == '(') {\n            depth += 1;\n        } else if (b == ')') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}",
        "HumanEval/62": "export const derivative = (xs: Array<number>): Array<number> => {\n    return xs.map((x, i) => x * i).slice(1);\n}",
        "HumanEval/63": "export const fibfib = (n: number): number => {\n    if (n <= 1) {\n        return 0;\n    }\n    let a = 0, b = 0, c = 1;\n    while (n > 2) {\n        [a, b, c] = [b, c, a + b + c];\n        n -= 1;\n    }\n    return c;\n}",
        "HumanEval/64": "export const vowelsCount = (s: string): number => {\n    const vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase()) || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}",
        "HumanEval/65": "export const circularShift = (x: number, shift: number): string => {\n    const xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.split(\"\").reverse().join(\"\");\n    } else {\n        return xStr.slice(-shift) + xStr.slice(0, -shift);\n    }\n}",
        "HumanEval/66": "export const digitSum = (s: string): number => {\n    return s.split('').filter(c => c.match(/[A-Z]/)).map(c => c.charCodeAt(0)).reduce((a, b) => a + b, 0);\n}",
        "HumanEval/67": "export const fruitDistribution = (s: string, n: number): number => {\n    const words = s.split(' ');\n    const apples = parseInt(words[words.indexOf(\"apples\") - 1]);\n    const oranges = parseInt(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples - oranges;\n}",
        "HumanEval/68": "export const pluck = (arr: Array<number>): Array<number> => {\n    const evens: Array<number> = arr.filter(n => n % 2 == 0);\n    if (evens.length == 0) {\n        return [];\n    }\n    const minEven = Math.min(...evens);\n    return [minEven, arr.indexOf(minEven)];\n}",
        "HumanEval/69": "export const search = (lst) => {\n    const freqs: Map<number, number> = new Map();\n    for (let n of lst) {\n        freqs.set(n, (freqs.get(n) || 0) + 1);\n    }\n    const goodVals: Array<number> = [...freqs.entries()].filter(p => p[1] >= p[0]).map(p => p[0]);\n    return Math.max(...goodVals, -1);\n}",
        "HumanEval/70": "export const strangeSortList = (lst: Array<number>): Array<number> => {\n    const sl: Array<number> = [...lst].sort((a, b) => a - b);\n    const result: Array<number> = [];\n    let start = 0, right = sl.length - 1;\n    while (start <= right) {\n        result.push(sl[start]);\n        start += 1;\n        if (start <= right) {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}",
        "HumanEval/71": "export const triangleArea = (a: number, b: number, c: number): number => {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    else {\n        return -1.0;\n    }\n}",
        "HumanEval/72": "export const willItFly = (q: Array<number>, w: number): boolean => {\n    if (q.length == 0) {\n        return false;\n    }\n    const isPalin = Array.from(q.keys()).every(i => q[i] == q[q.length - i - 1]);\n    const total = q.reduce((a, b) => a + b);\n    return isPalin && total <= w;\n}",
        "HumanEval/73": "export const smallestChange = (arr: Array<number>): number => {\n    let ans = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n         if (arr[i] != arr[arr.length - i - 1]) {\n              ans += 1;\n         }\n    }\n    return ans; \n}",
        "HumanEval/74": "export const totalMatch = (lst1: Array<string>, lst2: Array<string>): Array<string> => {\n    const cnt1 = lst1.reduce((a, b) => a + b.length, 0);\n    const cnt2 = lst2.reduce((a, b) => a + b.length, 0);\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}",
        "HumanEval/75": "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const isMultiplyPrime = (a: number): boolean => {\n    let cnt = 0;\n    for (let i = 2; i <= a; i++) {\n        if (isPrime(i)) {\n            while (a % i === 0) {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    return cnt === 3;\n}",
        "HumanEval/76": "export const isSimplePower = (x: number, n: number): boolean => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}",
        "HumanEval/77": "export const isCube = (a: number): boolean => {\n    a = Math.abs(a);\n    const root = Math.round(Math.pow(a, 1.0 / 3.0));\n    return root * root * root === a;\n}",
        "HumanEval/78": "export const hexKey = (num: string): number => {\n    return num.split('').filter((x) => \"2357BD\".includes(x)).length;\n}",
        "HumanEval/79": "export const decimalToBinary = (dec: number): string => {\n    const binary: string = dec.toString(2);\n    return `db${binary}db`;\n}",
        "HumanEval/80": "export const isHappy = (s: string): boolean => {\n    if (s.length < 3) {\n        return false;\n    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}",
        "HumanEval/81": "export const numericalLetterGrade = (grades: Array<number>): Array<string> => {\n    const result: Array<string> = [];\n    for (const g of grades) {\n        switch (true) {\n            case g === 4.0:\n                result.push(\"A+\"); break;\n            case g > 3.7:\n                result.push(\"A\"); break;\n            case g > 3.3:\n                result.push(\"A-\"); break;\n            case g > 3.0:\n                result.push(\"B+\"); break;\n            case g > 2.7:\n                result.push(\"B\"); break;\n            case g > 2.3:\n                result.push(\"B-\"); break;\n            case g > 2.0:\n                result.push(\"C+\"); break;\n            case g > 1.7:\n                result.push(\"C\"); break;\n            case g > 1.3:\n                result.push(\"C-\"); break;\n            case g > 1.0:\n                result.push(\"D+\"); break;\n            case g > 0.7:\n                result.push(\"D\"); break;\n            case g > 0.0:\n                result.push(\"D-\"); break;\n            default:\n                result.push(\"E\"); break;\n        }\n    }\n    return result;\n}",
        "HumanEval/82": "export const primeLength = (s: string): boolean => {\n    const length: number = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(length)); i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "HumanEval/83": "export const startsOneEnds = (n: number): number => {\n    if (n === 1) {\n        return 1;\n    }\n    return 2 * 9 * (10 ** (n - 2));\n}",
        "HumanEval/84": "export const solve = (n: number): string => {\n    const digitsSum = Array.from(String(n), Number).reduce((a, b) => a + b);\n    return digitsSum.toString(2);\n}",
        "HumanEval/85": "export const add = (lst: Array<number>): number => {\n    return lst.filter((x, i) => i % 2 === 1 && x % 2 === 0).reduce((a, b) => a + b, 0);\n}",
        "HumanEval/86": "export const antiShuffle = (s: string): string => {\n    const words: Array<string> = s.split(' ').map(word => word.split('').sort().join(''));\n    return words.join(' ');\n}",
        "HumanEval/87": "export const getRow = (lst: Array<Array<number>>, x: number): Array<Array<number>> => {\n    const coords: Array<Array<number>> = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    return coords.sort((a, b) => a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);\n}",
        "HumanEval/88": "export const sortArray = (arr: Array<number>): Array<number> => {\n    const sortedArr: Array<number> = [...arr];\n    if (sortedArr.length <= 1) {\n        return sortedArr;\n    }\n    if ((sortedArr[0] + sortedArr[sortedArr.length - 1]) % 2 === 0) {\n        sortedArr.sort((a, b) => b - a);\n    } else {\n        sortedArr.sort((a, b) => a - b);\n    }\n    return sortedArr;\n}",
        "HumanEval/89": "export const encrypt = (s) => {\n    const result: Array<string> = [];\n    for (const ch of s) {\n        let shifted = ch.charCodeAt(0) + 4;\n        if (shifted > 'z'.charCodeAt(0)) {\n            shifted -= 26;\n        }\n        result.push(String.fromCharCode(shifted));\n    }\n    return result.join('');\n}",
        "HumanEval/90": "export const nextSmallest = (lst: Array<number>): number | null => {\n    const sl: Array<number> = [...new Set(lst)].sort((a, b) => a - b);\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}",
        "HumanEval/91": "export const isBored = (s: string): number => {\n    const sentences: Array<string> = s.split(/[.!?]\\s*/);\n    return sentences.filter(sentence => sentence.length >= 2 && sentence.slice(0, 2) == \"I \").length;\n}",
        "HumanEval/92": "export const anyInt = (x: any, y: any, z: any): boolean => {\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n        if (x + y === z || x + z === y || y + z === x) {\n            return true;\n        }\n    }\n    return false;\n}",
        "HumanEval/93": "export const encode = (message: string): string => {\n    const vowels: string = \"aeiouAEIOU\";\n    const result: Array<string> = [];\n    for (const ch of message) {\n        if (ch.match(/[a-z]/i)) {\n            let ch1: string = ch.toUpperCase() === ch ? ch.toLowerCase() : ch.toUpperCase();\n            if (vowels.includes(ch1)) {\n                ch1 = String.fromCharCode(ch1.charCodeAt(0) + 2);\n            }\n            result.push(ch1);\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n}",
        "HumanEval/94": "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const skjkasdkd = (lst: Array<number>): number => {\n    const primes: Array<number> = lst.filter(n => isPrime(n));\n    if (primes.length === 0) {\n        return 0;\n    }\n    const largest: string = String(Math.max(...primes));\n    return [...largest].map(c => parseInt(c)).reduce((a, b) => a + b);\n}",
        "HumanEval/95": "export const checkDictCase = (d: Map<string, string>): boolean => {\n    if (d.size === 0) {\n        return false;\n    }\n    return [...d.keys()].every((k) => RegExp('^[A-Z]+$').test(k)) || [...d.keys()].every((k) => RegExp('^[a-z]+$').test(k));\n}",
        "HumanEval/96": "export const countUpTo = (n: number): Array<number> => {\n    const primes: Array<number> = [];\n    for (let num = 2; num < n; num++) {\n        if (primes.every(p => num % p !== 0)) {\n            primes.push(num);\n        }\n    }\n    return primes;\n}",
        "HumanEval/97": "export const multiply = (a: number, b: number): number => {\n    return (Math.abs(a) % 10) * (Math.abs(b) % 10);\n}",
        "HumanEval/98": "export const countUpper = (s: string): number => {\n    const vowels = \"AEIOU\";\n    return [...s].filter((c, i) => i % 2 === 0 && vowels.includes(c)).length;\n}",
        "HumanEval/99": "export const closestInteger = (value: string): number => {\n    const num: number = parseFloat(value);\n    if (num >= 0) {\n        return Math.trunc(num + 0.5);\n    } else {\n        return Math.trunc(num - 0.5);\n    }\n}",
        "HumanEval/100": "export const makeAPile = (n: number): Array<number> => {\n    return [...Array(n).keys()].map(i => n + 2 * i);\n}",
        "HumanEval/101": "export const wordsString = (s: string): Array<string> => {\n    return s.split(/[ ,]/).filter(w => w.length > 0);\n}",
        "HumanEval/102": "export const chooseNum = (x: number, y: number): number => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return y != x ? y - 1 : -1;\n}",
        "HumanEval/103": "export const roundedAvg = (n: number, m: number): string | null => {\n    if (n > m) {\n        return null;\n    }\n    const rAvg = Math.trunc((n + m) / 2 + 0.5);\n    return rAvg.toString(2);\n}",
        "HumanEval/104": "export const allDigitsOdd = (s: string): boolean => {\n    return [...s].every(digit => digit.codePointAt(0) % 2 !== 0);\n}\nexport const uniqueDigits = (x: Array<number>): Array<number> => {\n    return x.filter(num => allDigitsOdd(String(num))).sort((a, b) => a - b);\n}",
        "HumanEval/105": "export const byLength = (arr: Array<number>): Array<string> => {\n    const digitNames: Array<string> = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const sortedArr = arr.filter(x => 1 <= x && x <= 9).sort((a, b) => b - a);\n    return sortedArr.map(x => digitNames[x - 1]);\n}",
        "HumanEval/106": "export const f = (n: number): Array<number> => {\n    const nums: Array<number> = [...Array(n).keys()].map(x => x + 1);\n    return nums.map(i => i % 2 !== 0 ? nums.slice(0, i).reduce((x, y) => x + y) : nums.slice(0, i).reduce((x, y) => x * y));\n}",
        "HumanEval/107": "export const isPalindrome = (s) => {\n    return s === s.split('').reverse().join('');\n}\nexport const evenOddPalindrome = (n: number): Array<number> => {\n    const cnt = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2]++;\n        }\n    }\n    return cnt\n}",
        "HumanEval/108": "export const digitsSum = (n: number): number => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return Array.from(nStr, Number).reduce((a, b) => a + b);\n    } else {\n        return parseInt(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n    }\n}\nexport const countNums = (arr: Array<number>): number => {\n    return arr.filter(n => digitsSum(n) > 0).length;\n}",
        "HumanEval/109": "export const moveOneBall = (arr: Array<number>): boolean => {\n    if (arr.length === 0) {\n        return true;\n    }\n    const sortedArr: Array<number> = [...arr].sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        if (_.isEqual(arr.slice(i), sortedArr.slice(0, arr.length - i)) && _.isEqual(arr.slice(0, i), sortedArr.slice(arr.length - i))) {\n            return true;\n        }\n    }\n    return false;\n}",
        "HumanEval/110": "export const canExchange = (lst1: Array<number>, lst2: Array<number>): string => {\n    const oddCnt = lst1.filter(n => n % 2 !== 0).length;\n    const evenCnt = lst2.filter(n => n % 2 === 0).length;\n    return evenCnt >= oddCnt ? \"YES\" : \"NO\";\n}",
        "HumanEval/111": "export const histogram = (test: string): Map<string, number> => {\n    const freq: Map<string, number> = new Map();\n    const words: Array<string> = test.split(\" \").filter(w => w.length > 0);\n    for (let w of words) {\n        freq.set(w, (freq.get(w) || 0) + 1);\n    }\n    const result: Map<string, number> = new Map();\n    if (freq.size > 0) {\n        const maxFreq: number = Math.max(...freq.values());\n        for (let [k, v] of freq) {\n            if (v === maxFreq) {\n                result.set(k, v);\n            }\n        }\n    }\n    return result;\n}",
        "HumanEval/112": "export const isPalindrome = (s) => {\n    return s === s.split('').reverse().join('');\n}\nexport const reverseDelete = (s: string, c: string): Array<string> => {\n    const s1 = s.split('').filter(ch => !c.includes(ch)).join('');\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"];\n}",
        "HumanEval/113": "export const oddCount = (lst: Array<string>): Array<string> => {\n    const result: Array<string> = [];\n    for (const num of lst) {\n        const n = [...num].filter(d => d.charCodeAt(0) % 2 == 1).length;\n        const rs = \"the number of odd elements in the string i of the input.\";\n        result.push(rs.replaceAll(\"i\", n.toString()));\n    }\n    return result;\n}",
        "HumanEval/114": "export const minSubArraySum = (nums: Array<number>): number => {\n    let minSum = 0;\n    let curSum = 0;\n    for (const n of nums) {\n        curSum = Math.min(curSum + n, 0);\n        minSum = Math.min(curSum, minSum);\n    }\n    if (minSum == 0) {\n        minSum = Math.min(...nums);\n    }\n    return minSum;\n}",
        "HumanEval/115": "export const maxFill = (grid: Array<Array<number>>, capacity: number): number => {\n    return grid.reduce((acc, arr) => acc + Math.ceil(arr.reduce((acc, n) => acc + n, 0) / capacity), 0);\n}",
        "HumanEval/116": "export const countOnes = (num: number): number => {\n    return num.toString(2).split('1').length - 1;\n}\nexport const sortArray = (arr: Array<number>): Array<number> => {\n    return [...arr].sort((a, b) => countOnes(a) == countOnes(b) ? a - b : countOnes(a) - countOnes(b));\n}",
        "HumanEval/117": "export const selectWords = (s: string, n: number): Array<string> => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = s.split(\" \").filter(w => w.length > 0);\n    return words.filter(w => [...w].filter(c => consonants.includes(c.toLowerCase())).length == n);\n}",
        "HumanEval/118": "export const getClosestVowel = (word: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}",
        "HumanEval/119": "export const check = (s: string): boolean => {\n    let depth = 0;\n    for (let ch of s) {\n        if (ch === \"(\") {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\nexport const matchParens = (lst: Array<string>): string => {\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    return check(s1) || check(s2) ? \"Yes\" : \"No\";\n}",
        "HumanEval/120": "export const maximum = (arr: Array<number>, k: number): Array<number> => {\n    if (k === 0) {\n        return [];\n    }\n    return [...arr].sort((a, b) => a - b).slice(-k);\n}",
        "HumanEval/121": "export const solution = (lst: Array<number>): number => {\n    return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) => a + b, 0);\n}",
        "HumanEval/122": "export const addElements = (arr: Array<number>, k: number): number => {\n    return arr.slice(0, k).filter(n => n.toString().length <= 2).reduce((a, b) => a + b, 0);\n}",
        "HumanEval/123": "export const getOddCollatz = (n: number): Array<number> => {\n    const collatz: Array<number> = [1];\n    while (n !== 1) {\n        if (n % 2 !== 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    return collatz.sort((a, b) => a - b);\n}",
        "HumanEval/124": "export const validDate = (date: string): boolean => {\n    if (date.length !== 10 || date[2] !== \"-\" || date[5] !== \"-\") {\n        return false;\n    }\n    const m = parseInt(date.slice(0, 2));\n    const d = parseInt(date.slice(3, 5));\n    if ([1, 3, 5, 7, 8, 10, 12].includes(m) && d >= 1 && d <= 31) {\n        return true;\n    }\n    if ([4, 6, 9, 11].includes(m) && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m === 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}",
        "HumanEval/125": "export const splitWords = (txt: string): Array<string> => {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [[...txt].filter(c => /[a-z]/.test(c) && c.charCodeAt(0) % 2 === 0).length.toString()];\n    }\n}",
        "HumanEval/126": "export const isSorted = (lst: Array<number>): boolean => {\n    if (!lst.slice(1).map((n, i) => lst[i] <= n).every(a => a)) {\n        return false;\n    }\n    const freq: Map<number, number> = new Map();\n    for (const i of lst) {\n        freq.set(i, (freq.get(i) || 0) + 1);\n    }\n    return Math.max(...freq.values()) <= 2;\n}",
        "HumanEval/127": "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const intersection = (interval1: Array<number>, interval2: Array<number>): string => {\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n}",
        "HumanEval/128": "export const prodSigns = (arr: Array<number>): number | null => {\n    if (arr.length === 0) {\n        return null;\n    }\n    if (arr.includes(0)) {\n        return 0;\n    }\n    const sign = arr.filter(n => n < 0).length % 2 === 1 ? -1 : 1;\n    return sign * arr.map(n => Math.abs(n)).reduce((a, b) => a + b);\n}",
        "HumanEval/129": "export const minPath = (grid: Array<Array<number>>, k: number): Array<number> => {\n    const n = grid.length;\n    let minVal = n * n + 1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                const temp: Array<number> = [];\n                if (i !== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j !== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i !== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j !== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                minVal = Math.min(...temp);\n            }\n        }\n    }\n    const result: Array<number> = [];\n    for (let i = 0; i < k; i++) {\n        result.push(i % 2 === 0 ? 1 : minVal);\n    }\n    return result;\n}",
        "HumanEval/130": "export const tri = (n: number): Array<number> => {\n    if (n === 0) {\n        return [1];\n    }\n    const seq: Array<number> = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}",
        "HumanEval/131": "export const digits = (n: number): number => {\n    const odds: Array<number> = [...n.toString()].filter(d => parseInt(d) % 2 === 1).map(d => parseInt(d));\n    return odds.length > 0 ? odds.reduce((a, b) => a * b) : 0;\n}",
        "HumanEval/132": "export const isNested = (s: string): boolean => {\n    const openIdx: Array<number> = [];\n    const closeIdx: Array<number> = [];\n    for (let [i, ch] of [...s].entries()) {\n        switch (ch) {\n            case '[':\n                openIdx.push(i); break;\n            case ']':\n                closeIdx.push(i); break;\n        }\n    }\n    closeIdx.reverse();\n    let cnt = 0;\n    let i = 0;\n    const l = closeIdx.length;\n    for (let idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}",
        "HumanEval/133": "export const sumSquares = (lst: Array<number>): number => {\n    return lst.map(n => Math.pow(Math.ceil(n), 2)).reduce((a, b) => a + b, 0);\n}",
        "HumanEval/134": "export const checkIfLastCharIsALetter = (txt: string): boolean => {\n    if (!txt) {\n        return false;\n    }\n    const last = txt.substring(txt.lastIndexOf(\" \") + 1);\n    return last.length === 1 && /[a-z]/i.test(last[0]);\n}",
        "HumanEval/135": "export const canArrange = (arr: Array<number>): number => {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    const idx: Array<number> = [...Array(arr.length).keys()].slice(1).filter(i => arr[i] < arr[i - 1])\n    return Math.max(...idx, -1);\n}",
        "HumanEval/136": "export const largestSmallestIntegers = (lst: Array<number>): Array<number | null> => {\n    const neg: Array<number>  = lst.filter(i => i < 0);\n    const pos: Array<number>  = lst.filter(i => i > 0);\n    const maxNeg = neg.length > 0 ? Math.max(...neg) : null;\n    const minPos = pos.length > 0 ? Math.min(...pos) : null;\n    return [maxNeg, minPos];\n}",
        "HumanEval/137": "export const anyToReal = (o: any): number => {\n    if (typeof o === 'string') {\n        return parseFloat(o.replace(',', '.'));\n    } else if (typeof o === 'number') {\n        return o;\n    }\n    throw new Error('Type Error');\n}\nexport const compareOne = (a: any, b: any): number | null => {\n    let a1 = anyToReal(a);\n    let b1 = anyToReal(b);\n    if (a1 === b1) {\n        return null;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n}",
        "HumanEval/138": "export const isEqualToSumEven = (n: number): boolean => {\n    return n % 2 === 0 && n >= 8;\n}",
        "HumanEval/139": "export const specialFactorial = (n: number): number => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}",
        "HumanEval/140": "export const fixSpaces = (txt: string): string => {\n    return txt.replace(/\\s{3,}/g, \"-\").replace(/\\s/g, \"_\");\n}",
        "HumanEval/141": "export const fileNameCheck = (fileName: string): string => {\n    const suf: Array<string> = [\"txt\", \"exe\", \"dll\"];\n    const lst: Array<string> = fileName.split('.');\n    if (lst.length !== 2 || !suf.includes(lst[1]) || lst[0].length === 0 || !lst[0][0].match(/[a-z]/i) || [...lst[0]].filter(ch => ch.match(/\\d/)).length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}",
        "HumanEval/142": "export const sumSquares = (lst: Array<number>): number => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0) {\n            result += Math.pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}",
        "HumanEval/143": "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const wordsInSentence = (sentence: string): string => {\n    const words = sentence.split(\" \");\n    return words.filter(w => isPrime(w.length)).join(\" \");\n}",
        "HumanEval/144": "export const simplify = (x: string, n: string): boolean => {\n    const xs = x.split('/');\n    const ns = n.split('/');\n    const num = parseInt(xs[0]) * parseInt(ns[0]);\n    const den = parseInt(xs[1]) * parseInt(ns[1]);\n    return num % den === 0;\n}",
        "HumanEval/145": "export const digitsSum = (n: number): number => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return Array.from(nStr, Number).reduce((a, b) => a + b);\n    } else {\n        return parseInt(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n    }\n}\nexport const orderByPoints = (nums: Array<number>): Array<number> => {\n    return [...nums].sort((a, b) => digitsSum(a) - digitsSum(b));\n}",
        "HumanEval/146": "export const specialFilter = (nums: Array<number>): number => {\n    const odds = \"13579\";\n    return nums.filter(n => n > 10 && n % 2 === 1 && odds.includes(n.toString()[0])).length;\n}",
        "HumanEval/147": "export const getMaxTriples = (n: number): number => {\n    const c: Array<number> = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        const a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}",
        "HumanEval/148": "export const bf = (planet1: string, planet2: string): Array<string> => {\n    const names: Array<string> = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.includes(planet1) || !names.includes(planet2)) {\n        return [];\n    }\n    let l = names.indexOf(planet1);\n    let r = names.indexOf(planet2);\n    if (l > r) {\n        [l, r] = [r, l];\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n}",
        "HumanEval/149": "export const sortedListSum = (lst: Array<string>): Array<string> => {\n    const result = lst.filter(s => s.length % 2 === 0);\n    return result.sort((a, b) => {\n        if (a.length === b.length) {\n            return a.localeCompare(b, undefined, { sensitivity: 'base' });\n        }\n        return a.length - b.length;\n    });\n}",
        "HumanEval/150": "export const xOrY = (n: number, x: number, y: number): number => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}",
        "HumanEval/151": "export const doubleTheDifference = (lst: Array<number>): number => {\n    return lst.filter(n => n >= 0 && n % 2 === 1).reduce((a, b) => a + b * b, 0);\n}",
        "HumanEval/152": "export const compare = (game: Array<number>, guess: Array<number>): Array<number> => {\n    return game.map((x, i) => Math.abs(x - guess[i]));\n}",
        "HumanEval/153": "export const strongestExtension = (className: string, extensions: Array<string>): string => {\n    let maxS = Number.MIN_SAFE_INTEGER;\n    let maxExt = \"\";\n    for (const ext of extensions) {\n        const upper = [...ext].filter(c => c.toUpperCase() === c).length;\n        const lower = [...ext].filter(c => c.toLowerCase() === c).length;\n        const s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return `${className}.${maxExt}`;\n}",
        "HumanEval/154": "export const cycpatternCheck = (a: string, b: string): boolean => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; i++) {\n        if (a.includes(b.slice(i) + b.slice(0, i))) {\n            return true;\n        }\n    }\n    return false;\n}",
        "HumanEval/155": "export const evenOddCount = (num: number): Array<number> => {\n    const ds = Math.abs(num).toString();\n    const even = [...ds].filter(d => d.codePointAt(0) % 2 === 0).length;\n    return [even, ds.length - even];\n}",
        "HumanEval/156": "export const intToMiniRoman = (num: number): string => {\n    const values: Array<number> = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 , 5, 4, 1];\n    const numerals: Array<string> = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\" , \"v\", \"iv\", \"i\"];\n    let res: Array<string> = [];\n    for (let i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.push(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join(\"\");\n}",
        "HumanEval/157": "export const rightAngleTriangle = (a: number, b: number, c: number): boolean => {\n    const s = [a, b, c].sort((a, b) => a - b);\n    return s[0] * s[0] + s[1] * s[1] === s[2] * s[2];\n}",
        "HumanEval/158": "export const findMax = (words: Array<string>): string => {\n    let maxCnt = 0;\n    let maxW = \"\";\n    for (let w of words) {\n        let cnt = new Set(w).size;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt === maxCnt) {\n            maxW = maxW < w ? maxW : w;\n        }\n    }\n    return maxW;\n}",
        "HumanEval/159": "export const eat = (num: number, need: number, remaining: number): Array<number> => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}",
        "HumanEval/160": "export const doAlgebra = (operators: Array<string>, operands: Array<number>): number => {\n    const ops: Array<string> = [...operators];\n    const nums: Array<number> = [...operands];\n    let i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] === \"**\") {\n            nums[i] = Math.pow(nums[i], nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        } else if (ops[i] === \"//\") {\n            nums[i] = Math.trunc(nums[i] / nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        } else if (ops[i] === \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}",
        "HumanEval/161": "export const solve = (s: string): string => {\n    if (![...s].some(ch => ch.match(/[a-zA-Z]/))) {\n        return s.split('').reverse().join('');\n    }\n    let result: string[] = [];\n    for (const ch of s) {\n        if (!ch.match(/[a-zA-Z]/)) {\n            result.push(ch);\n        }\n        else if (ch.match(/[A-Z]/)) {\n            result.push(ch.toLowerCase());\n        }\n        else if (ch.match(/[a-z]/)) {\n            result.push(ch.toUpperCase());\n        }\n    }\n    return result.join('');\n}",
        "HumanEval/162": "export const stringToMd5 = (txt: string): string | null => {\n    if (!txt) {\n        return null;\n    }\n    const md5Hash = crypto.createHash('md5');\n    const txtBytes = Buffer.from(txt);\n    md5Hash.update(txtBytes);\n    const md5Encoded = md5Hash.digest('hex');\n    return md5Encoded;\n}",
        "HumanEval/163": "export const generateIntegers = (a: number, b: number): Array<number> => {\n    const lower: number = Math.max(2, Math.min(a, b));\n    const upper: number = Math.min(8, Math.max(a, b));\n    if (lower > upper) {\n        return [];\n    }\n    return Array.from({ length: upper - lower + 1}, (_, i) => i + lower).filter(n => n % 2 === 0);\n}"
    }
}