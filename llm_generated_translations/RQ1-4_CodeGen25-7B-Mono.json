{
    "cpp": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string\n    parens = parens.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = reduce(lambda acc, x: acc + x, numbers) / len(numbers)\n    return reduce(lambda acc, x: acc + abs(x - mean), numbers, 0) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    buf = istringstream(paren_string)\n    paren_groups = [istream_iterator<string>(buf), []]\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    result = []\n    for s in strs:\n        if s.find(substring) != -1:\n            result.append(s)\n    return result\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = reduce(lambda x, y: x + y, numbers)\n    n_product = reduce(lambda x, y: x * y, numbers)\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -inf\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return reduce(lambda x, y: x + ('0' if y == b[x.count('1')] else '1'), a, '')\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return reduce(lambda s, i: s + \" \" + str(i), range(n + 1), \"\")\n",
            "def count_distinct_characters(s: str) -> int:\n    dc = set()\n    for c in s:\n        dc.add(c.lower())\n    return len(dc)\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = defaultdict(int)\n    durations[\"o\"] = 4\n    durations[\"o|\"] = 2\n    durations[\".|\"] = 1\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        result.append(durations[note])\n    return result\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "from\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nk\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    pq = PriorityQueue()\n    for e in numbers:\n        pq.put(e)\n    result = []\n    while pq.qsize() > 1:\n        result.append(pq.get())\n        pq.get()\n    return result\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    filtered_values = []\n    for value in values:\n        try:\n            int_value = int(value)\n            filtered_values.append(int_value)\n        except:\n            continue\n    return filtered_values\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return reduce(lambda x, y: x + y, strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    filtered = []\n    for s in strs:\n        if s.startswith(prefix_str):\n            filtered.append(s)\n    return filtered\n",
            "def get_positive(l: List[int]) -> List[int]:\n    result = []\n    for e in l:\n        if e > 0:\n            result.append(e)\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = []\n    for i in range(0, len(l), 3):\n        sorted_third.append(l[i])\n    sorted_third.sort()\n    result = []\n    for i in range(0, len(l)):\n        if i % 3 == 0:\n            result.append(sorted_third[i // 3])\n        else:\n            result.append(l[i])\n    return result\n",
            "def list_unique(l: List[int]) -> List[int]:\n    result = l[:]\n    result.sort()\n    result = list(set(result))\n    return result\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count('7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    def even_cmp(a, b):\n        if a % 2 == 0 and b % 2 == 0:\n            return a - b\n        if a % 2 == 0:\n            return -1\n        if b % 2 == 0:\n            return 1\n        return a - b\n    return sorted(l, key=cmp_to_key(even_cmp))\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return pow(n, 2)\n",
            "def incr_list(l: List[int]) -> List[int]:\n    result = []\n    for e in l:\n        result.append(e + 1)\n    return result\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    c = Counter(l)\n    for k, v in c.items():\n        if -k in c:\n            return True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return reduce(lambda x, y: x + y, digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(reduce(lambda x, y: x + y, fib[-4:]))\n    return fib[n % 4]\n",
            "fromList\nfromList\nfromList\nfromList\nfromList\nfromList\nfromList\nfromList\nfromList\nfromList\nfromList\nfromList\nfromList\nfromList\nfromList\nfromList\nfromList\nfromList\nfromList\nfromList\nfromList\nfromList\nfromList\nfromList\nfromList\nfromList\nfromList\nfrom\nfromList\nfromList\nfromList\nfromList\nfrom\nfromList\nfromList\nfrom\nfromList\nfromList\nfrom\nfromList\nfromList\nfrom\nfromList\nfromList\nfromList\nfromList\nfromList\nList\nfrom\nList\nfromList\nfromList\nfromList\nList\nList\nfromList\nfromList\nfrom\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList\nList<List\nList\nList[List\nList\nList\nList\nList\nList\nList\nList",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = \"\"\n    for c in s:\n        if c in ascii_lowercase:\n            result += chr((ord(c) - 97 + 5) % 26 + 97)\n        else:\n            result += chr((ord(c) - 65 + 5) % 26 + 65)\n    return result\ndef decode_shift(s: str) -> str:\n    result = \"\"\n    for c in s:\n        if c in ascii_lowercase:\n            result += chr((ord(c) - 97 + 21) % 26 + 97)\n        else:\n            result += chr((ord(c) - 65 + 21) % 26 + 65)\n    return result\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for c in txt:\n        if c not in vowels:\n            result += c\n    return result\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = []\n    for i in range(1, len(l)):\n        diff.append(l[i] - l[i - 1])\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    s1 = set(l1)\n    s2 = set(l2)\n    result = []\n    s1.intersection_update(s2)\n    result = list(s1)\n    return result\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    result = 0\n    for i in range(n + 1):\n        result += i\n    return result\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result\n",
            "def fibfib(n: int) -> int:\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] in vowels or (i == len(s) - 1 and s[i] == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return reduce(lambda a, c: a + (ord(c) - ord('A') if c.isupper() else 0), s, 0)\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split()\n    apples = int(words[words.index(\"apples\") + 1])\n    oranges = int(words[words.index(\"oranges\") + 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = []\n    for n in freqs:\n        if freqs[n] >= n:\n            good_vals.append(n)\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst\n    sl.sort()\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    idxs = [i for i in range(len(q))]\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in idxs)\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = reduce(lambda acc, s: acc + len(s), lst1, 0)\n    cnt2 = reduce(lambda acc, s: acc + len(s), lst2, 0)\n    return cnt1 <= cnt2 and lst1 or lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, floor(sqrt(a)) + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = round(pow(a, 1.0 / 3))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in ascii_uppercase)\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)[2:]\n    binary = binary.replace('0', '')\n    return f\"db{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    # Implementation here\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append(\"A+\")\n        elif grade > 3.7:\n            result.append(\"A\")\n        elif grade > 3.3:\n            result.append(\"A-\")\n        elif grade > 3.0:\n            result.append(\"B+\")\n        elif grade > 2.7:\n            result.append(\"B\")\n        elif grade > 2.3:\n            result.append(\"B-\")\n        elif grade > 2.0:\n            result.append(\"C+\")\n        elif grade > 1.7:\n            result.append(\"C\")\n        elif grade > 1.3:\n            result.append(\"C-\")\n        elif grade > 1.0:\n            result.append(\"D+\")\n        elif grade > 0.7:\n            result.append(\"D\")\n        elif grade > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, floor(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 2 * 9 * pow(10, n - 2)\n",
            "def solve(n: int) -> str:\n    n_str = str(n)\n    digits_sum = reduce(add, map(int, n_str))\n    binary = bin(digits_sum)[2:]\n    binary = binary.replace('0', '')\n    return binary\n",
            "def add(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split()\n    for word in words:\n        word.sort()\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda a: (a[0], a[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        arr.sort(key=cmp_to_key(lambda x, y: y - x))\n    else:\n        arr.sort()\n    return arr\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ch + 4\n        if shifted > 'z':\n            shifted -= 26\n        result += shifted\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = lst.copy()\n    sl.sort()\n    sl = list(set(sl))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    re = regex(\"[.!?]\\\\s*\")\n    sentences = re.findall(s)\n    return sum(1 for sentence in sentences if sentence.startswith(\"I \"))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if x.__class__.__name__ == 'int' and y.__class__.__name__ == 'int' and z.__class__.__name__ == 'int':\n        int_x = x\n        int_y = y\n        int_z = z\n        if (int_x + int_y == int_z) or (int_x + int_z == int_y) or (int_y + int_z == int_x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower() if ch.islower() else ch.upper()\n            if ch1 in vowels:\n                ch1 = ch1 + 2\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = reduce(lambda acc, d: acc + (ord(d) - ord('0')), max(primes), 0)\n    return int(largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(all(c.islower() for c in k) for k, v in d.items()) or all(all(c.isupper() for c in k) for k, v in d.items())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and vowels.find(s[i]) != -1:\n            count += 1\n    return count\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    pile = []\n    for i in range(n):\n        pile.append(n + 2 * i)\n    return pile\n",
            "def words_string(s: str) -> List[str]:\n    words = re.split(r\"[, ]\", s)\n    return [w for w in words if len(w) > 0]\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y != x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    r_avg = (n + m) / 2.0 + 0.5\n    result = str(int(ceil(r_avg)))\n    result = result.replace('0', '')\n    return result if result else None\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    result = []\n    for p in permutations(ascii_lowercase, len(x)):\n        s = ''.join(p)\n        if all(int(s[i]) % 2 != 0 for i in range(len(s))):\n            result.append(int(s))\n    result.sort()\n    return result\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = []\n    for e in arr:\n        if 1 <= e and e <= 9:\n            sorted_arr.append(e)\n    sorted_arr.sort(key=cmp_to_key(lambda x, y: y - x))\n    result = []\n    for e in sorted_arr:\n        result.append(digit_names[e - 1])\n    return result\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    result = []\n    for i in range(n):\n        if i % 2 != 0:\n            result.append(sum(nums[:i + 1]))\n        else:\n            result.append(sum(nums[:i + 1]) * i)\n    return result\n",
            "def even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    return reduce(lambda acc, n: acc + 1 if digits_sum(n) > 0 else acc, arr, 0)\ndef digits_sum(n: int) -> int:\n    return reduce(lambda acc, d: acc + int(d), str(n), 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = arr\n    sorted_arr.sort()\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[i:] and arr[:i] == sorted_arr[:i]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    cnt1 = Counter(lst1)\n    cnt2 = Counter(lst2)\n    return \"YES\" if cnt1[\"YES\"] == cnt2[\"YES\"] else \"NO\"\n",
            "fromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfrom\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfrom\nfrom\nfromAny\nfrom\nfromAny\nfrom\ng\ng\ng\ng\ni\ni\n g\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = s\n    s1 = s1.replace(c, \"\")\n    return [s1, \"yes\" if s1 == s1[::-1] else \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(int(c) % 2 == 1 for c in num)\n        rs = \"the number of odd elements in the string \" + str(n) + \" of the input.\"\n        result.append(rs)\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(sum(ceil(sum(row) / capacity) for row in grid))\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=cmp_to_key(lambda a, b: count_ones(a) == count_ones(b) and a < b or count_ones(a) < count_ones(b)))\ndef count_ones(num: int) -> int:\n    return bin(num).count('1')\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    result = []\n    for w in words:\n        if sum(1 for c in w if c in consonants) == n:\n            result.append(w)\n    return result\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if (check(s1) or check(s2)) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    sorted_arr = arr\n    sorted_arr.sort()\n    return sorted_arr[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            result += lst[i]\n    return result\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return reduce(lambda a, b: a + (len(str(b)) <= 2 and b or 0), arr[:k], 0)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    collatz.sort()\n    return collatz\n",
            "",
            "def split_words(txt: str) -> List[str]:\n    iss = txt.split()\n    if iss:\n        return iss\n    iss = txt.split(',')\n    if iss:\n        return iss\n    return [str(sum(1 for c in txt if c in ascii_lowercase and c % 2 == 0))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    freq = Counter(lst)\n    return len(lst) == 0 or max(freq.items(), key=lambda x: x[1])[1] <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    return reduce(lambda x, y: x + abs(y), arr, 0) if sum(map(lambda x: x < 0, arr)) % 2 == 1 else reduce(lambda x, y: x + y, arr, 0)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 and 1 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i / 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(c) for c in str(n) if int(c) % 2 == 1]\n    return reduce(lambda x, y: x * y, odds, 1) if odds else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i in range(len(s)):\n        if s[i] == '[':\n            open_idx.append(i)\n        elif s[i] == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return reduce(lambda acc, n: acc + pow(int(n), 2), lst, 0)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    last = txt[txt.rfind(\" \") + 1:]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = []\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            idx.append(i)\n    return idx[0] if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = None if len(neg) == 0 else reduce(max, neg)\n    min_pos = None if len(pos) == 0 else reduce(min, pos)\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return sub(\"\\\\s{3,}\", \"-\", txt)\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = []\n    for token in file_name.split(\".\"):\n        lst.append(token)\n    if len(lst) != 2 or not lst[1] in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or sum(1 for c in lst[0] if c.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    words = [w for w in words if is_prime(len(w))]\n    return \" \".join(words)\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = []\n    ns = []\n    for token in x.split('/'):\n        xs.append(token)\n    for token in n.split('/'):\n        ns.append(token)\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=cmp_to_key(lambda a, b: digits_sum(a) < digits_sum(b)))\ndef digits_sum(n: int) -> int:\n    return sum(map(int, str(n)))\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(1 for n in nums if n > 10 and n % 2 == 1 and odds.find(str(n)[0]) != -1)\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r + 1]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        if len(s) % 2 == 0:\n            result.append(s)\n    result.sort()\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return reduce(lambda acc, n: acc + (n >= 0 and n % 2 == 1 and n * n or 0), lst, 0)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    result = []\n    for i in range(len(game)):\n        result.append(abs(game[i] - guess[i]))\n    return result\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = reduce(lambda x, y: x - y, map(lambda x: x.count(e) for e in ascii_uppercase), -1)\n    max_ext = \"\"\n    for ext in extensions:\n        s = reduce(lambda x, y: x - y, map(lambda x: x.count(e) for e in ascii_lowercase), -1)\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i]) != -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 ,5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators\n    nums = operands\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "fromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nfromstring\nstring\nstring\nfromstring\nfromstring\nfromstring\nstring\nfromstring\nstring\nstring\nfromstring\nfromstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstringstring\nstringstring\nstring\nstring\nstring\nstring\nstring\nstringstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring\nstring",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    md5_context = md5()\n    md5_context.update(txt.encode())\n    hash_bytes = md5_context.digest()\n    md5_encoded = \"\"\n    for i in range(len(hash_bytes)):\n        md5_encoded += format(\"{:02x}\".format(hash_bytes[i]))\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    numbers = []\n    for n in range(lower, upper + 1):\n        if n % 2 == 0:\n            numbers.append(n)\n    return numbers\n"
        ]
    },
    "csharp": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = reduce(lambda x, y: x + y, numbers) / len(numbers)\n    return reduce(lambda x, y: x + abs(y - mean), numbers, 0) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \")\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    for i in range(len(s)):\n        if is_palindrome(s[:i]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(x if x == y else '1' for x, y in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if len(strs) == 0:\n        return None\n    longestS = strs[0]\n    for s in strs:\n        if len(s) > len(longestS):\n            longestS = s\n    return longestS\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = defaultdict(int)\n    durations[\"o\"] = 4\n    durations[\"o|\"] = 2\n    durations[\".|\"] = 1\n    notes = music_string.split(\" \")\n    return [durations[note] for note in notes if note]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = defaultdict(int)\n    num_dict[\"zero\"] = 0\n    num_dict[\"one\"] = 1\n    num_dict[\"two\"] = 2\n    num_dict[\"three\"] = 3\n    num_dict[\"four\"] = 4\n    num_dict[\"five\"] = 5\n    num_dict[\"six\"] = 6\n    num_dict[\"seven\"] = 7\n    num_dict[\"eight\"] = 8\n    num_dict[\"nine\"] = 9\n    num_list = numbers.split(\" \")\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0] * len(numbers)\n    return [((num - min_num) / (max_num - min_num)) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if type(v) == int]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = defaultdict(int)\n    for num in numbers:\n        counts[num] += 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.islower():\n            result += ch.upper()\n        elif ch.isupper():\n            result += ch.lower()\n    return result\n",
            "def concatenate(strs: List[str]) -> str:\n    return ''.join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [e for e in l if e > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * math.pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while math.fabs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = [x for x in l if x % 3 == 0]\n    sorted_third.sort()\n    return [x if x % 3 == 0 else sorted_third[x // 3] for x in l]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return list(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count('7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(l, key=lambda x: x if x % 2 == 0 else float('inf'))\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return pow(n, 2)\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    digits.reverse()\n    return \"\".join(digits)\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    pq = PriorityQueue()\n    for e in l:\n        pq.put(e)\n    if pq.qsize() % 2 != 0:\n        return pq.get()\n    else:\n        return (pq.get() + pq.get()) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr(((ord(ch) - 97 + 5) % 26) + 97))\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr(((ord(ch) - 97 + 21) % 26) + 97))\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([c for c in txt if c not in vowels])\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = zip(l, l[1:])\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return list(set(l1).intersection(set(l2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs, 1)]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a = 0\n    b = 0\n    c = 1\n    while n > 2:\n        (a, b, c) = (b, c, a + b + c)\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] in vowels or (i == len(s) - 1 and s[i] == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = defaultdict(int)\n    for n in lst:\n        freqs[n] += 1\n    good_vals = [n for n, freq in freqs.items() if freq >= n]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[-i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = math.fabs(a)\n    root = math.pow(a, 1.0 / 3.0)\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)[2:]\n    return f\"db{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * pow(10, n - 2)\n",
            "def solve(n: int) -> str:\n    digits_sum = 0\n    for d in str(n):\n        digits_sum += int(d)\n    return str(bin(digits_sum))[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for x, i in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(' ')\n    words = [''.join(sorted(word)) for word in words]\n    return ' '.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda x: x[1], reverse=True)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if ((arr[0] + arr[-1]) % 2 == 0):\n        return sorted(arr, reverse=True)\n    return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ch + 4\n        if shifted > 'z':\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = list(set(lst))\n    sl.sort()\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r'[.!?]\\s*', s)\n    return sum(1 for sentence in sentences if len(sentence) >= 2 and sentence[:2] == 'I ')\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if type(x) is int and type(y) is int and type(z) is int:\n        int_x = x\n        int_y = y\n        int_z = z\n        if (int_x + int_y == int_z) or (int_x + int_z == int_y) or (int_y + int_z == int_x):\n            return True\n    return False\n",
            "def top_k_elements(all_elements: List[int], k_count: int) -> List[int]:\n    pq = PriorityQueue()\n    for e in all_elements:\n        pq.put(e)\n        if pq.qsize() > k_count:\n            pq.get()\n    result = []\n    while not pq.empty():\n        result.append(pq.get())\n    return result\n",
            "def skjkasdkd(lst: List[int]) -> int:\n    primes = list(filter(lambda n: is_prime(n), lst))\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return reduce(lambda x, y: x + y, map(lambda d: int(d), str(largest)))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return len(d) > 0 and all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return math.abs(a) % 10 * math.abs(b) % 10\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for c, i in enumerate(s) if i % 2 == 0 and vowels.find(c) != -1)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return split(r\"[, ]\", s)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y != x else y - 1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (m + n) // 2\n    return str(bin(r_avg))[2:]\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(arr, key=lambda x: x, reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [nums[i] if i % 2 != 0 else sum(nums[:i]) for i in range(n)]\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    if n >= 0:\n        return sum(int(d) for d in str(n))\n    else:\n        return int(str(n)[0:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return sum(1 for n in arr if digits_sum(n) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if Counter(arr[i:]) == Counter(sorted_arr[i:]):\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2 != 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = defaultdict(int)\n    words = test.split(\" \")\n    for w in words:\n        freq[w] += 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = \"\".join(filter(lambda ch: ch not in c, s))\n    return [s1, \"yes\" if s1 == s1[::-1] else \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for c in num if c % 2 == 1)\n        rs = \"the number of odd elements in the string {} of the input.\"\n        result.append(rs.format(n))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(sum(arr) // capacity for arr in grid)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=cmp_to_key(lambda x, y: (bin(x).count('1') - bin(y).count('1')) if bin(x).count('1') > bin(y).count('1') else (bin(x).count('1') - bin(y).count('1')) if bin(x).count('1') < bin(y).count('1') else 0))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if w and w.count(c for c in w if c in consonants) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if vowels.find(word[i]) != -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return check(s1) or check(s2) and \"Yes\" or \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    result = []\n    for i in range(k):\n        result.append(arr[i])\n    arr = deque(arr[k:])\n    while arr:\n        result.append(max(arr))\n        arr.popleft()\n    return result\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for x, i in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    m, d = int(date[:2]), int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(sum(1 for c in txt if c.islower() and (int(c) % 2 == 0)))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not lst:\n        return True\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    return max(freq.values()) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    return -1 if arr.count(n) % 2 == 1 else 1 * sum(n for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 and 1 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return 0 if len(odds) == 0 else int(''.join(map(str, odds)))\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i in range(len(s)):\n        if s[i] == '[':\n            open_idx.append(i)\n        elif s[i] == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i0 = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i0 < l and idx < close_idx[i0]:\n            cnt += 1\n            i0 += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(int(ceil(n)) ** 2 for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rfind(' ') + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if len(neg) > 0 else None\n    min_pos = min(pos) if len(pos) > 0 else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = float(a) if type(a) is str else a\n    b1 = float(b) if type(b) is str else b\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or lst[0].count(x for x in lst[0] if x.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(w for w in words if is_prime(len(w)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    if n >= 0:\n        return sum(int(d) for d in str(n))\n    else:\n        return int(str(n)[0:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=lambda n: digits_sum(n))\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(1 for n in nums if n > 10 and n % 2 == 1 and odds.startswith(str(n)[0]))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        (l, r) = (r, l)\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [e for e in lst if len(e) % 2 == 0]\n    return sorted(result, key=lambda e: len(e), reverse=True)\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, floor(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = ext.count(c for c in ext if c.isupper())\n        lower = ext.count(c for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = ds.count('2')\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = w if w < max_w else max_w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    return md5(txt.encode()).hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return list(range(lower, upper - lower + 1))\n"
        ]
    },
    "dart": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \")\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -float('inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join(\n        [\n            \"0\" if a[i] == b[i] else \"1\"\n            for i in range(min(len(a), len(b)))\n        ]\n    )\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longestS = strs[0]\n    for s in strs:\n        if len(s) > len(longestS):\n            longestS = s\n    return longestS\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \").where(lambda s: s).to_list()\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(0, len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [num for num in numbers.split(\" \") if num_dict.get(num) is not None]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [numbers[i - 1], numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [((num - min_num) / (max_num - min_num)) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if type(v) == int]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def top_k_elements(all_elements: List[int], k_count: int) -> List[int]:\n    pq = PriorityQueue()\n    for e in all_elements:\n        pq.put(e)\n        if pq.qsize() > k_count:\n            pq.get()\n    result = []\n    while not pq.empty():\n        result.append(pq.get())\n    return result\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l[i] for i in range(len(l)) if i % 3 == 0)\n    return [l[i] if i % 3 != 0 else sorted_third[i // 3] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    return reduce(lambda x, y: max(x, y), l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += 7\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(l[i] for i in range(len(l)) if i % 2 == 0)\n    return [l[i] if i % 2 == 0 else sorted_even[i // 2] for i in range(len(l))]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return pow(n, 2)\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == ''.join(reversed(txt))\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append((ord(ch) - 97 + 5) % 26 + 97)\n    return chr(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append((ord(ch) - 97 - 5) % 26 + 97)\n    return chr(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([c for c in txt if c not in vowels])\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i] - l[i - 1] for i in range(1, len(l))]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(set(l2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(List.generate(n + 1, (i) => i))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs, 1)]\n",
            "def fibfib(n: int) -> int:\n    a = 0\n    b = 0\n    c = 1\n    while n > 2:\n        (a, b, c) = (b, c, a + b + c)\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or i == len(s) - 1 and s[i].lower() == \"y\":\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1].join('')\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(e) for e in findall(r'[A-Z]', s))\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst.copy()\n    sl.sort()\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[-i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = pow(a, 1.0 / 3.0)\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return len([x for x in num if x in \"2357BD\"])\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{bin(dec)[2:]}db\"\n",
            "def is_happy(s: str) -> bool:\n    # Implementation here\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 2 * 9 * pow(10, n - 2)\n",
            "def solve(n: int) -> str:\n    return str(sum(int(d) for d in str(n)))\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(' ')\n    words = [''.join(sorted(word)) for word in words]\n    return ' '.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda x: x[0] if x[0] == x[1] else x[0] - x[1])\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if ((arr[0] + arr[-1]) % 2 == 0):\n        return sorted(arr)\n    else:\n        return sorted(arr, reverse=True)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = list(set(lst))\n    sl.sort()\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = findall(r\"[.!?]\\s*\", s)\n    return len(list(filter(lambda x: len(x) >= 2 and x[:2] == \"I \", sentences)))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = ascii_lowercase + ascii_uppercase\n    result = \"\"\n    for ch in message.split():\n        if re_compile(r'[a-zA-Z]').search(ch):\n            ch1 = ch.upper() == ch and ch.lower() or ch.upper()\n            if ch1 in vowels:\n                ch1 = ch1.translate(str.maketrans(ch1, ch1[0] + ch1[0]))\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = max(primes)\n    return sum(int(d) for d in str(largest))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return d.keys().__contains__(re_compile(r'^[A-Z]+$').search(list(d.keys())[0])) or d.keys().__contains__(re_compile(r'^[a-z]+$').search(list(d.keys())[0]))\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(\",\")\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y != x else y - 1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (m + n) // 2\n    return str(r_avg)\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = arr.copy()\n    sorted_arr.sort()\n    return [digit_names[i - 1] for i in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = [i + 1 for i in range(n)]\n    return [nums[i] if nums[i] % 2 != 0 else sum(nums[:i]) for i in range(n)]\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return (int(n_str[0:2]) * 2 + digits_sum(n.abs()))\ndef count_nums(arr: List[int]) -> int:\n    return sum(1 for n in arr if digits_sum(n) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = arr.copy()\n    sorted_arr.sort()\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for num in lst1 if num % 2 != 0)\n    even_cnt = sum(1 for num in lst2 if num % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k in freq.keys():\n            if freq[k] == max_freq:\n                result[k] = freq[k]\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(list(filter(lambda x: x != c, s)))\n    return [s1, 'yes' if is_palindrome(s1) else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len(list(filter(lambda d: d.code_point() % 2 == 1, num)))\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(sum(arr) / capacity for arr in grid)\n",
            "def count_ones(num: int) -> int:\n    return len(str(num).replace(\"1\", \"\"))\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if len(w) > 0 and sum([1 for c in w if c.lower() in consonants]) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if vowels.find(word[i]) != -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    result = arr.copy()\n    result.sort()\n    return result[len(result) - k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != \"-\" or date[5] != \"-\":\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if [1, 3, 5, 7, 8, 10, 12].__contains__(m) and d >= 1 and d <= 31:\n        return True\n    if [4, 6, 9, 11].__contains__(m) and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [txt.replace(c, \"\") for c in txt if c.isalpha() and ord(c) % 2 == 0]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not lst:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] = (freq[i] if i in freq else 0) + 1\n    return max(freq.values()) <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = arr.count(-1) % 2 == 1 and -1 or 1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 and 1 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(int(i / 2 + 1))\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + int((i + 3) / 2))\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return 0 if len(odds) == 0 else reduce(lambda x, y: x * y, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx = close_idx[::-1]\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda x: pow(x, 2), lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    last = txt[-1]\n    return last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(len(arr) - 1) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = float(a) if isinstance(a, str) else a\n    b1 = float(b) if isinstance(b, str) else b\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or not suf.__contains__(lst[1]) or len(lst[0]) == 0 or not lst[0][0].__contains__(re.compile(r'[a-z]', re.IGNORECASE)):\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(w for w in words if is_prime(len(w)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    return int(str(n)[0]) if n >= 0 else int(str(n)[0:2]) * 2 + digits_sum(n.abs())\ndef merge_sort(nums: List[int], compare: callable) -> List[int]:\n    if len(nums) <= 1:\n        return nums\n    mid = len(nums) // 2\n    left = merge_sort(nums[:mid], compare)\n    right = merge_sort(nums[mid:], compare)\n    return merge(left, right, compare)\ndef merge(left: List[int], right: List[int], compare: callable) -> List[int]:\n    result = []\n    while left and right:\n        if compare(left[0], right[0]):\n            result.append(left.pop(0))\n        else:\n            result.append(right.pop(0))\n    result.extend(left if left else right)\n    return result\ndef order_by_points(nums: List[int]) -> List[int]:\n    return merge_sort(nums, compare=lambda a, b: digits_sum(a) - digits_sum(b))\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len(list(filter(lambda n: n > 10 and n % 2 == 1 and odds.startswith(str(n)[0]), nums)))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        [l, r] = [r, l]\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [e for e in lst if len(e) % 2 == 0]\n    return sorted(result, key=lambda x: len(x))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x[0] - x[1]) for x in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -float(\"inf\")\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 , 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w if len(max_w) > len(w) else w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators\n    nums = operands\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s.split(\"\"):\n        if not any(c.isalpha() for c in ch):\n            result += ch\n        elif any(c.isupper() for c in ch):\n            result += ch.lower()\n        else:\n            result += ch.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    txt_bytes = txt.encode()\n    md5_encoded = md5(txt_bytes).hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "go": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(n - mean) for n in numbers) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = []\n    for str in paren_string.split(\" \"):\n        if str != \"\":\n            paren_groups.append(str)\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    result = []\n    for s in strs:\n        if substring in s:\n            result.append(s)\n    return result\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = 0\n    n_product = 1\n    for n in numbers:\n        n_sum += n\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    runes = list(s)\n    for i in range(len(runes)//2):\n        if runes[i] != runes[len(runes)-1-i]:\n            return False\n    return True\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            runes = list(s[:i])\n            for i, j in enumerate(runes):\n                runes[i], runes[j] = runes[j], runes[i]\n            return s + ''.join(runes)\n    return ''\n",
            "def string_xor(a: str, b: str) -> str:\n    result = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result.append(\"0\")\n        else:\n            result.append(\"1\")\n    return \"\".join(result)\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if len(strs) == 0:\n        return None\n    longestS = strs[0]\n    for s in strs:\n        if len(s) > len(longestS):\n            longestS = s\n    return longestS\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    result = []\n    for i in range(len(s)):\n        result.append(s[:i+1])\n    return result\n",
            "def string_sequence(n: int) -> str:\n    result = []\n    for i in range(n):\n        result.append(str(i))\n    return \" \".join(result)\n",
            "def count_distinct_characters(s: str) -> int:\n    dc = {}\n    for ch in s.lower():\n        dc[ch] = True\n    return len(dc)\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    }\n    notes = []\n    for str in music_string.split(\" \"):\n        if str != \"\":\n            notes.append(str)\n    result = []\n    for note in notes:\n        result.append(durations[note])\n    return result\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "from\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\ng\ng\ng\nfrom\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\nr\nr\nr\nr\nr\nr\nr\nr\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = copy.deepcopy(numbers)\n    sorted_numbers.sort()\n    min_diff = math.inf\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = float('inf')\n    max_num = float('-inf')\n    for num in numbers:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n    if min_num == max_num:\n        return []\n    result = []\n    for num in numbers:\n        result.append((num - min_num) / (max_num - min_num))\n    return result\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    result = []\n    for v in values:\n        if isinstance(v, int):\n            result.append(v)\n    return result\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    result = []\n    for num in numbers:\n        if num not in counts:\n            counts[num] = 1\n            result.append(num)\n    return result\n",
            "def flip_case(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                result += ch.upper()\n            else:\n                result += ch.lower()\n        else:\n            result += ch\n    return result\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    filtered = []\n    for str in strs:\n        if str.startswith(prefix_str):\n            filtered.append(str)\n    return filtered\n",
            "def get_positive(l: List[int]) -> List[int]:\n    result = []\n    for num in l:\n        if num > 0:\n            result.append(num)\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.floor(math.sqrt(n))) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * math.pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while math.fabs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "from\nfrom\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfrom\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfrom\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\nfromAny\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng",
            "def list_unique(l: List[int]) -> List[int]:\n    keys = {}\n    result = []\n    for x in l:\n        if x not in keys:\n            keys[x] = True\n            result.append(x)\n    result.sort()\n    return result\n",
            "def max_element(l: List[int]) -> int:\n    max = l[0]\n    for e in l:\n        if e > max:\n            max = e\n    return max\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = SortedList()\n    result = []\n    for i, x in enumerate(l):\n        if i % 2 == 0:\n            sorted_even.add(x)\n    for i, x in enumerate(l):\n        if i % 2 == 0:\n            result.append(sorted_even[i // 2])\n        else:\n            result.append(x)\n    return result\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i+1:i+3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return int(pow(n, 2))\n",
            "def incr_list(l: List[int]) -> List[int]:\n    result = []\n    for e in l:\n        result.append(e + 1)\n    return result\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = {}\n    for num in l:\n        if -num in seen:\n            return True\n        seen[num] = True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits)\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(fib[0] + fib[1] + fib[2] + fib[3])\n        fib.pop(0)\n    return fib[n % 4]\n",
            "from\nfrom\nfrom\nfrom\ncopy\nfrom\nfrom\nfrom\ncopy\nfrom\nfrom\nfrom\nfrom\nfrom\ncopy\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\n",
            "def is_palindrome(txt: str) -> bool:\n    runes = list(txt)\n    for i in range(len(runes)//2):\n        if runes[i] != runes[len(runes)-1-i]:\n            return False\n    return True\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append((ch - 97 + 5) % 26 + 97)\n    return ''.join(map(chr, result))\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append((ch - 97 + 21) % 26 + 97)\n    return ''.join(map(chr, result))\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in txt:\n        if char not in vowels:\n            result += char\n    return result\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    for x in l:\n        if x >= t:\n            return False\n    return True\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    set0 = {}\n    set1 = {}\n    for c in s0:\n        set0[c] = True\n    for c in s1:\n        set1[c] = True\n    return set0 == set1\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i + 1] - l[i] for i in range(len(l) - 1)]\n    return all(x > 0 for x in diff) or all(x < 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    s1 = defaultdict(bool)\n    for num in l1:\n        s1[num] = True\n    result = []\n    for num in l2:\n        if s1[num]:\n            result.append(num)\n            s1[num] = False\n    result.sort()\n    return result\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    result = 0\n    for i in range(n + 1):\n        result += i\n    return result\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result\n",
            "def fibfib(n: int) -> int:\n    a, b, c = 0, 0, 1\n    for _ in range(n - 1):\n        a, b, c = b, c, a + b + c\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] in vowels or (i == len(s) - 1 and s[i] == \"y\"):\n            cnt += 1\n    return cnt\n",
            "from\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\ng\nfrom\ng\ng\ng\nfrom\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\nr\n",
            "def digit_sum(s: str) -> int:\n    a = 0\n    for c in s:\n        if c.isupper():\n            a += int(c)\n    return a\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = 0\n    oranges = 0\n    for i, word in enumerate(words):\n        if word == \"apples\":\n            apples, _ = int(words[i - 1])\n        if word == \"oranges\":\n            oranges, _ = int(words[i - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    min_even = float('inf')\n    min_idx = -1\n    for i, n in enumerate(arr):\n        if n % 2 == 0 and n < min_even:\n            min_even = n\n            min_idx = i\n    if min_idx == -1:\n        return []\n    return [min_even, min_idx]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    max_val = -1\n    for k, v in freqs.items():\n        if v >= k and k > max_val:\n            max_val = k\n    if max_val == -1:\n        return -1\n    return max_val\n",
            "from\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\ng\nfrom\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = True\n    for i in range(len(q)):\n        if q[i] != q[len(q) - i - 1]:\n            is_palin = False\n            break\n    total = 0\n    for i in range(len(q)):\n        total += q[i]\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = 0\n    for b in lst1:\n        cnt1 += len(b)\n    cnt2 = 0\n    for b in lst2:\n        cnt2 += len(b)\n    if cnt1 <= cnt2:\n        return lst1\n    else:\n        return lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = int(math.fabs(a))\n    root = int(math.floor(math.pow(a, 1.0 / 3.0)))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    result = 0\n    for x in num:\n        if x in \"2357BD\":\n            result += 1\n    return result\n",
            "fromTypeVar\nfromTypeVar\nfromTypeVar\nfromTypeVar\nfromTypeVar\nfromTypeVar\nfromTypeVar\nfromTypeVar\nfromType\nfromTypeVar\nfromType\nfromType\nfromType\nfromType\nfromType\nfromType\nfromType\nfromType\nfromType\nfromType\nType\nfromType\nfromType\nfromType\nfromType\nfromType\nType\nType\nfromType\nType\nType\nType\nType\nType\nType\nTypeVar\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\nType\n",
            "def is_happy(s: str) -> bool:\n    # Implementation here\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        switch = {\n            4.0: \"A+\",\n            3.7: \"A\",\n            3.3: \"A-\",\n            3.0: \"B+\",\n            2.7: \"B\",\n            2.3: \"B-\",\n            2.0: \"C+\",\n            1.7: \"C\",\n            1.3: \"C-\",\n            1.0: \"D+\",\n            0.7: \"D\",\n            0.0: \"D-\",\n        }\n        result.append(switch.get(g, \"E\"))\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5)+1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * 10**(n-2)\n",
            "def solve(n: int) -> str:\n    digits_sum = 0\n    for d in str(n):\n        digits_sum += int(d)\n    return str(digits_sum)\n",
            "def add(lst: List[int]) -> int:\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 2 == 1 and x % 2 == 0:\n            result += x\n    return result\n",
            "from\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\ng\nfrom\ng\ng\ng\nfrom\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\n",
            "from\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\ng\nfrom\ng\ng\ng\nfrom\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\nr\nr\nr\nr\nr\nr\nr\nr\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    result = copy(arr)\n    if (arr[0] + arr[-1]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        result.sort()\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ch + 4\n        if shifted > 'z':\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    tmp = copy(lst)\n    sl = SortedList(tmp)\n    sl.sort()\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r'[.!?]\\s*', s)\n    cnt = 0\n    for sentence in sentences:\n        if len(sentence) >= 2 and sentence[:2] == \"I \":\n            cnt += 1\n    return cnt\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = ch1.encode(\"utf-8\") + 2\n            else:\n                ch1 = ch1.encode(\"utf-8\")\n            result += ch1.decode(\"utf-8\")\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    max_prime = 0\n    for n in lst:\n        if is_prime(n) and n > max_prime:\n            max_prime = n\n    if max_prime == 0:\n        return 0\n    largest = str(max_prime)\n    result = 0\n    for d in largest:\n        result += int(d)\n    return result\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    lower, upper = True, True\n    for k, v in d.items():\n        for r in k:\n            if not r.islower():\n                lower = False\n            if not r.isupper():\n                upper = False\n    return lower or upper\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        flag = True\n        for p in primes:\n            if num % p == 0:\n                flag = False\n                break\n        if flag:\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    count = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c in vowels:\n            count += 1\n    return count\n",
            "def closest_integer(value: str) -> int:\n    num, _ = float(value)\n    return int(num + 0.5) if num >= 0 else int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    result = []\n    for i in range(n):\n        result.append(n + 2 * i)\n    return result\n",
            "def words_string(s: str) -> List[str]:\n    return re.split(r'[, ]', s)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if y != x:\n        return y - 1\n    return -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = int((n + m) / 2.0 + 0.5)\n    return str(r_avg)\n",
            "def all_odd_digits(s: str) -> bool:\n    for digit in s:\n        if int(digit) % 2 == 0:\n            return False\n    return True\ndef unique_digits(x: List[int]) -> List[int]:\n    result = []\n    for num in x:\n        if all_odd_digits(str(num)):\n            result.append(num)\n    result.sort()\n    return result\n",
            "from_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nargs\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nfrom_args\nargs\nfrom_args\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\nargs\n",
            "def f(n: int) -> List[int]:\n    nums = [i + 1 for i in range(n)]\n    result = []\n    for i in range(n):\n        if i % 2 != 0:\n            sum = 0\n            for j in range(i):\n                sum += nums[j]\n            result.append(sum)\n        else:\n            product = 1\n            for j in range(i):\n                product *= nums[j]\n            result.append(product)\n    return result\n",
            "def even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        acc = 0\n        for d in n_str:\n            d_int = int(d)\n            acc += d_int\n        return acc\n    else:\n        neg = int(n_str[0:2])\n        return neg * 2 + digits_sum(abs(float(n)))\ndef count_nums(arr: List[int]) -> int:\n    cnt = 0\n    for n in arr:\n        if digits_sum(n) > 0:\n            cnt += 1\n    return cnt\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = SortedList(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = 0\n    even_cnt = 0\n    for num in lst1:\n        if num % 2 != 0:\n            odd_cnt += 1\n    for num in lst2:\n        if num % 2 == 0:\n            even_cnt += 1\n    if even_cnt >= odd_cnt:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        if len(w) > 0:\n            freq[w] = freq.get(w, 0) + 1\n    max_freq = 0\n    for k, v in freq.items():\n        if v > max_freq:\n            max_freq = v\n    result = {}\n    for k, v in freq.items():\n        if v == max_freq:\n            result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = \"\"\n    check = \"no\"\n    for ch in s:\n        if ch not in c:\n            s1 += ch\n    if is_palindrome(s1):\n        check = \"yes\"\n    return [s1, check]\ndef is_palindrome(s: str) -> bool:\n    for i in range(len(s)//2):\n        if s[i] != s[len(s)-1-i]:\n            return False\n    return True\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = 0\n        for d in num:\n            if int(d) % 2 == 1:\n                n += 1\n        result.append(f\"the number of odd elements in the string {n} of the input.\")\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        if cur_sum + n > 0:\n            cur_sum = 0\n        else:\n            cur_sum += n\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n    if min_sum == 0:\n        min_sum = float('inf')\n        for n in nums:\n            if n < min_sum:\n                min_sum = n\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    result = 0\n    for arr in grid:\n        sum = 0\n        for n in arr:\n            sum += n\n        result += int(sum / capacity)\n    return result\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    result = copy(arr)\n    result.sort(key=cmp_to_key(lambda x, y: 1 if CountOnes(x) == CountOnes(y) else -1 if CountOnes(x) < CountOnes(y) else 1))\n    return result\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    strs = s.split(\" \")\n    words = []\n    for w in strs:\n        if len(w) > 0:\n            words.append(w)\n    result = []\n    for w in words:\n        count = 0\n        for c in w:\n            if c in consonants:\n                count += 1\n        if count == n:\n            result.append(w)\n    return result\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    if check(s1) or check(s2):\n        return \"Yes\"\n    return \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    result = copy(arr)\n    result.sort(key=itemgetter(0))\n    return result[len(arr)-k:]\n",
            "def solution(lst: List[int]) -> int:\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 2 == 0 and x % 2 != 0:\n            result += x\n    return result\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    result = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            result += arr[i]\n    return result\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    try:\n        datetime.datetime.strptime(date, '%Y-%m-%d')\n        return True\n    except ValueError:\n        return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        cnt = 0\n        for c in txt:\n            if c.islower() and int(c) % 2 == 0:\n                cnt += 1\n        return [str(cnt)]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    max_freq = 0\n    for i in freq:\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n    return len(lst) == 0 or max_freq <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    result = 0\n    sign = 1\n    for n in arr:\n        if n == 0:\n            return None\n    for n in arr:\n        if n < 0:\n            sign *= -1\n        result += abs(n)\n    result = sign * result\n    return result\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = temp[0]\n                for v in temp:\n                    if v < min_val:\n                        min_val = v\n    result = []\n    for i in range(k):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    seq = [1, 3]\n    for i in range(2, n):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = []\n    for d in str(n):\n        if int(d) % 2 == 1:\n            odds.append(int(d))\n    if len(odds) == 0:\n        return 0\n    result = 1\n    for d in odds:\n        result *= d\n    return result\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for _, idx in enumerate(open_idx):\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    result = 0\n    for n in lst:\n        result += int(n**2)\n    return result\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    last = txt[txt.rfind(\" \") + 1:]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    idx = []\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            idx.append(i)\n    if len(idx) == 0:\n        return -1\n    max_idx = idx[0]\n    for i in idx:\n        if i > max_idx:\n            max_idx = i\n    return max_idx\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    max_neg = None\n    min_pos = None\n    for n in lst:\n        if n < 0:\n            if max_neg is None:\n                max_neg = n\n            elif n > max_neg:\n                max_neg = n\n        if n > 0:\n            if min_pos is None:\n                min_pos = n\n            elif n < min_pos:\n                min_pos = n\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = AnyToReal(a)\n    b1 = AnyToReal(b)\n    ptr = float()\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        ptr = a1\n        return ptr\n    else:\n        ptr = b1\n        return ptr\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r'\\s{3,}', '_', txt)\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or len(lst[0]) == 0 or not lst[0][0].isalpha():\n        return \"No\"\n    found = False\n    for s in suf:\n        if s == lst[1]:\n            found = True\n            break\n    if not found:\n        return \"No\"\n    digit_cnt = 0\n    for ch in lst[0]:\n        if ch.isdigit():\n            digit_cnt += 1\n    if digit_cnt > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "from\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\ng\nfrom\nfrom\ng\nfrom\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\nr\nr\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num0 = int(xs[0])\n    den0 = int(xs[1])\n    num1 = int(ns[0])\n    den1 = int(ns[1])\n    return (num0 * num1) % (den0 * den1) == 0\n",
            "from\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\nr\nr\nr\nr\nr\nr\nr\nr\nr\nr\nr",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    cnt = 0\n    for n in nums:\n        if n > 10 and n % 2 == 1 and str(n)[0] in odds:\n            cnt += 1\n    return cnt\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    l, r = -1, -1\n    for i, name in enumerate(names):\n        if name == planet1:\n            l = i\n        if name == planet2:\n            r = i\n    if l == -1 or r == -1:\n        return []\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1 : r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        if len(s) % 2 == 0:\n            result.append(s)\n    result.sort(key=cmp_to_key(lambda x, y: len(x) - len(y)))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    acc = 0\n    for n in lst:\n        if n >= 0 and int(n) % 2 == 1:\n            acc += int(n * n)\n    return acc\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    result = []\n    for x, i in enumerate(game):\n        result.append(abs(i - guess[x]))\n    return result\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = 0\n        lower = 0\n        for c in ext:\n            if c.isupper():\n                upper += 1\n            elif c.islower():\n                lower += 1\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = 0\n    for d in ds:\n        if int(d) % 2 == 0:\n            even += 1\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "from\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\ng\ng\nfrom\nfrom\nfrom\nfrom\ng\nfrom\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = 0\n        freq = {}\n        for c in w:\n            if c not in freq:\n                freq[c] = True\n                cnt += 1\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = int(math.pow(nums[i], nums[i + 1]))\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = []\n    for ch in s:\n        if ch.isalpha():\n            if ch.isupper():\n                result.append(ch.lower())\n            else:\n                result.append(ch.upper())\n        else:\n            result.append(ch)\n    return ''.join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    md5_hash = md5()\n    md5_hash.update(txt.encode())\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = int(max(2, min(a, b)))\n    upper = int(min(8, max(a, b)))\n    result = []\n    for i in range(lower, upper + 1):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n"
        ]
    },
    "java": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            current_group += ch\n        elif ch == \")\":\n            current_group += ch\n            if not current_group:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \")\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -1\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return reduce(lambda x, y: x ^ y, map(ord, a), 0) ^ reduce(lambda x, y: x ^ y, map(ord, b), 0)\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if len(strs) == 0:\n        return None\n    longestS = strs[0]\n    for s in strs:\n        if len(s) > len(longestS):\n            longestS = s\n    return longestS\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "TypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\nTypeVar\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = defaultdict(lambda: 4)\n    durations[\"o|\"] = 2\n    durations[\".|\"] = 1\n    notes = [note for note in music_string.split(\" \") if note]\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "from\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\ntyping\nfrom\nfrom\nfrom\nfrom\nfrom\ntyping\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\ntyping\nfrom\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntygty\ntyping\ntyping\ntyping\ntygty\ntyg\ntygty\ntyg\nty\ntygty\ntygtyg\ntyg\ntygty\nty\ntyg\ntygty\ntyg\ntygtygtygty\ntygty\ntygty\ntygtygty\ntygty\nty\ntygty\ntygty\ntygty\nty\ntygty\ntygtygty\nty\ntygty\nty\ntygty\ntygty\ntygty\ntygtygty\nty\nty\nty\nty\nty\nty\nty\nty\ntygty\nty\nty\nty\nty\nty\nty\nty\nty\nty\nty\nty\nty\nty\nty\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [((num - min_num) / (max_num - min_num)) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = defaultdict(int)\n    for num in numbers:\n        counts[num] += 1\n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    return result\n",
            "def flip_case(s: str) -> str:\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    return result\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [e for e in l if e > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * math.pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while math.fabs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = IntStream.range(0, len(l)).filter(lambda i: i % 3 == 0).map_to_obj(lambda i: l[i]).sorted().to_list()\n    return IntStream.range(0, len(l)).map_to_obj(lambda i: i % 3 == 0 and i / 3 < len(sorted_third) and sorted_third[i / 3] or l[i]).to_list()\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count('7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = IntStream.range(0, len(l)).filter(lambda i: i % 2 == 0).map_to_obj(lambda i: l[i]).sorted().to_list()\n    return IntStream.range(0, len(l)).map_to_obj(lambda i: i % 2 == 0 and sorted_even[i//2] or l[i]).to_list()\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return pow(n, 2)\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(sum(fib[i - 4:i]))\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    l.sort()\n    if len(l) % 2 != 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for c in s:\n        result.append(chr(((ord(c) - 97 + 5) % 26) + 97))\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for c in s:\n        result.append(chr(((ord(c) - 97 + 21) % 26) + 97))\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(c for c in txt if c not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return Counter(s0) == Counter(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for i in range(len(brackets)):\n        b = brackets[i]\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = IntStream.range(0, len(l) - 1).map(lambda i: l[i + 1] - l[i]).to_array()\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return list(set(l1).intersection(set(l2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for i in range(len(brackets)):\n        b = brackets[i]\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [i * x for i, x in enumerate(xs, 1)]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a = 0\n    b = 0\n    c = 1\n    while n > 2:\n        tmp = a + b + c\n        a = b\n        b = c\n        c = tmp\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower()) != -1 or (i == len(s) - 1 and s[i].lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "from\nfrom\nfrom\nfrom\nfrom\ntyping\nfrom\nfrom\nfrom\ntyping\nfrom\ntyping\nfrom\nfrom\ntyping\nfrom\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\nty\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntygty\ntyping\nty\ntyping\ntyping\ntygty\ntygty\ntygty\nty\ntygty\nty\ntyg\nty\ntygty\ntygty\ntygty\ntygty\ntygty\ntygty\ntygty\ntygty\ntygty\nty\ntygty\ntygty\ntygty\nty\nty\ntygty\ntygty\ntygty\ntygty\ntygty\ntygty\ntygty\ntygty\nty\nty\ntygty\ntygty\ntygty\ntygtygty\ntygty\ntygty\ntygty\nty\nty\ntygty\ntygty\ntygty\nty\nty\nty\ntygty\nty\nty\nty\ntygty",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[-i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(map(len, lst1))\n    cnt2 = sum(map(len, lst2))\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = int(a ** (1 / 3))\n    return root ** 3 == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{bin(dec)[2:]}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append(\"A+\")\n        elif grade > 3.7:\n            result.append(\"A\")\n        elif grade > 3.3:\n            result.append(\"A-\")\n        elif grade > 3.0:\n            result.append(\"B+\")\n        elif grade > 2.7:\n            result.append(\"B\")\n        elif grade > 2.3:\n            result.append(\"B-\")\n        elif grade > 2.0:\n            result.append(\"C+\")\n        elif grade > 1.7:\n            result.append(\"C\")\n        elif grade > 1.3:\n            result.append(\"C-\")\n        elif grade > 1.0:\n            result.append(\"D+\")\n        elif grade > 0.7:\n            result.append(\"D\")\n        elif grade > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 2 * 9 * pow(10, n - 2)\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(c) for c in str(n))\n    return bin(digits_sum)[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(filterfalse(lambda x: x % 2 == 0, range(len(lst))))\n",
            "def anti_shuffle(s: str) -> str:\n    words = deque(s.split(\" \"))\n    result = []\n    while words:\n        result.append(words.popleft())\n        if words:\n            result.append(words.pop())\n    return \" \".join(result)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda x: x[0] if x[0] == x[1] else x[0] - x[1])\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if ((arr[0] + arr[-1]) % 2 == 0):\n        return sorted(arr)\n    else:\n        return sorted(arr, reverse=True)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for c in s:\n        shifted = ord(c) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = list(set(lst))\n    sl.sort()\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\"[.!?]\\\\s*\")\n    return sum(1 for sentence in sentences if len(sentence) >= 2 and sentence.startswith(\"I \"))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n",
            "def top_k_elements(all_elements: List[int], k_count: int) -> List[int]:\n    pq = PriorityQueue()\n    for e in all_elements:\n        pq.put(e)\n        if pq.qsize() > k_count:\n            pq.get()\n    result = []\n    while not pq.empty():\n        result.append(pq.get())\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = str(max(primes))\n    return sum(int(c) for c in largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return not d or all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return math.abs(a) % 10 * math.abs(b) % 10\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i in range(len(s)) if i % 2 == 0 and vowels.find(s[i]) != -1)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return list(range(n, 2 * n))\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(', ')\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y != x else y - 1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (m + n) // 2\n    return bin(r_avg)\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(arr, reverse=True)\n    return [digit_names[i - 1] for i in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [sum(Counter(nums[:i]).values()) if i % 2 != 0 else nums[i - 1] for i in range(1, n + 1)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    if n >= 0:\n        return sum(map(ord, str(n)))\n    else:\n        return (ord(str(n)[0]) - ord('0')) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return sum(1 for n in arr if digits_sum(n) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2 != 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = Counter(test.split(\" \"))\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = \"\".join(ch for ch in s if c.find(ch) == -1)\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for c in num if c % 2 == 1)\n        result.append(f\"the number of odd elements in the string {n} of the input.\")\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = math.inf\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: int(sum(arr) / capacity), grid))\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count('1')\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: count_ones(x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if len(w) > 0 and sum(1 for c in w if c in consonants) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if vowels.find(word[i]) != -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return check(s1) or check(s2) and \"Yes\" or \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return arr[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(i for i in filterfalse(lambda x: x % 2 == 0, lst) if i % 2 != 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(sum(1 for c in txt if c.islower() and c % 2 == 0))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    freq = defaultdict(int)\n    for i in lst:\n        freq[i] += 1\n    return max(freq.values()) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = arr.count(-1) % 2 == 1 and -1 or 1\n    return sign * sum(arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 and 1 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(c) for c in str(n) if int(c) % 2 == 1]\n    return odds[0] if odds else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i in range(len(s)):\n        if s[i] == '[':\n            open_idx.append(i)\n        elif s[i] == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda x: int(x ** 2), lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if txt.isempty():\n        return False\n    last = txt.substring(txt.lastindexof(' ') + 1)\n    return last.length() == 1 and Character.isletter(last.charat(0))\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg, key=lambda x: x)\n    min_pos = min(pos, key=lambda x: x)\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = float(a) if isinstance(a, str) else a\n    b1 = float(b) if isinstance(b, str) else b\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\" \", \"_\").replace(\"___\", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or len(list(filter(lambda x: x.isalpha(), lst[0]))) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += math.pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += math.pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(w for w in words if is_prime(len(w)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    return sum(map(int, str(n))) if n >= 0 else int(str(n)[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(1 for n in nums if n > 10 and n % 2 == 1 and odds.startswith(str(n)[0]))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        tmp = l\n        l = r\n        r = tmp\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=len)\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(g - gg) for g, gg in zip_longest(game, guess, fillvalue=0)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w.split(\"\")))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w if max_w < w else w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    try:\n        md5_hash = md5(txt.encode())\n        return md5_hash.hexdigest()\n    except:\n        return None\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [n for n in range(lower, upper + 1) if n % 2 == 0]\n"
        ]
    },
    "javascript": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    stk = []\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(n - mean) for n in numbers) / len(numbers)\n    return deviation\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \")\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = 0\n    n_product = 1\n    for n in numbers:\n        n_sum += n\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(['0' if a[i] == b[i] else '1' for i in range(len(a))])\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = [note for note in music_string.split(\" \") if note]\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [num for num in numbers.split(\" \") if num in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [numbers[i - 1], numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [((num - min_num) / (max_num - min_num)) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if type(v) is int and v.is_integer()]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [k for k, v in counts.items() if v == 1]\n",
            "def flip_case(s: str) -> str:\n    result = []\n    for ch in s:\n        if ch.isalpha():\n            if ch.isupper():\n                result.append(ch.lower())\n            else:\n                result.append(ch.upper())\n        else:\n            result.append(ch)\n    return ''.join(result)\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [e for e in l if e > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * math.pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while math.fabs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l[i] for i in range(len(l)) if i % 3 == 0)\n    return [l[i] if i % 3 != 0 else sorted_third[i // 3] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\") - 1\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    return [l[i] for i in range(len(l)) if (i & 1) == 0][::-1]\n",
            "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.append(s[i:])\n        else:\n            result.append(s[i+1:i+3])\n            result.append(s[i])\n    return \"\".join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x = x // bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    l.sort()\n    if len(l) % 2 != 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr((ord(ch) - 97 + 5) % 26 + 97))\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr((ord(ch) - 97 + 21) % 26 + 97))\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([c for c in txt if c not in vowels])\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i] - l[i - 1] for i in range(1, len(l))]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1).intersection(set(l2))))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs[1:], 1)]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a = 0\n    b = 0\n    c = 1\n    while n > 2:\n        [a, b, c] = [b, c, a + b + c]\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or i == len(s) - 1 and s[i].lower() == \"y\":\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isalpha())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = [v for v, c in freqs.items() if c >= v]\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[-i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    return lst1 if len(lst1) <= len(lst2) else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return a ** (1 / 3) ** 3 == a\n",
            "def hex_key(num: str) -> int:\n    return len([x for x in num if x in \"2357BD\"])\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)\n    return f\"db{binary[2:]}db\"\n",
            "def is_happy(s: str) -> bool:\n    # Implementation here\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * pow(10, n - 2)\n",
            "def solve(n: int) -> str:\n    digits_sum = 0\n    for d in str(n):\n        digits_sum += int(d)\n    return str(bin(digits_sum))[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for x in lst if x % 2 == 0 and x % 2 == 1)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(' ')\n    for i in range(len(words)):\n        words[i] = ''.join(sorted(words[i]))\n    return ' '.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda a: a[0] == b[0] and b[1] - a[1] or a[0] - b[0])\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if ((arr[0] + arr[-1]) % 2 == 0):\n        return sorted(arr)\n    else:\n        return sorted(arr, reverse=True)\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ch.encode('utf-8').decode('utf-8') + 4\n        if shifted > 'z'.encode('utf-8').decode('utf-8'):\n            shifted -= 26\n        result.append(shifted)\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = list(set(lst))\n    sl.sort()\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\".\")\n    return len([s for s in sentences if len(s) >= 2 and s[:2] == \"I \"])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = ch1.upper()\n            else:\n                ch1 = ch1.upper()\n            result.append(ch1)\n        else:\n            result.append(ch)\n    return \"\".join(result)\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = str(max(primes))\n    return sum(int(c) for c in largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(k.islower() or k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return math.trunc(num + 0.5)\n    else:\n        return math.trunc(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(',')\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y != x else y - 1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) // 2\n    return bin(r_avg)[2:]\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(int(c) % 2 != 0 for c in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted([n for n in x if all_digits_odd(str(n))])\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [x for x in arr if 1 <= x and x <= 9]\n    sorted_arr.sort(key=lambda x: x - 1)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = [i + 1 for i in range(n)]\n    return [nums[i] if nums[i] % 2 != 0 else sum(nums[:i]) for i in range(n)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return (int(n_str[0:2]) * 2) + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len(list(filter(lambda n: digits_sum(n) > 0, arr)))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[:i] == sorted_arr[:i] and arr[i:] == sorted_arr[i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2 != 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        if w in freq:\n            freq[w] += 1\n        else:\n            freq[w] = 1\n    max_freq = max(freq.values())\n    result = {}\n    for k, v in freq.items():\n        if v == max_freq:\n            result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(list(filter(lambda ch: ch not in c, s)))\n    return [s1, is_palindrome(s1)]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = [c for c in num if int(c) % 2 == 1]\n        rs = \"the number of odd elements in the string {} of the input.\"\n        result.append(rs.format(len(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(sum(n // capacity for n in row) for row in grid)\n",
            "def count_ones(num: int) -> int:\n    return len(str(num)) - str(num).count('1')\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=count_ones)\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if [c for c in w if c.lower() in consonants][:n] == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if vowels.find(word[i]) != -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return arr.sort()[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for x in lst if x % 2 != 0 and x % 2 == 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != \"-\" or date[5] != \"-\":\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if [1, 3, 5, 7, 8, 10, 12].count(m) and d >= 1 and d <= 31:\n        return True\n    if [4, 6, 9, 11].count(m) and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [c for c in txt if c.isalpha() and ord(c) % 2 == 0]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    freq = Counter(lst)\n    return max(freq.values()) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = arr.count(-1) % 2 == 1 and -1 or 1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 and 1 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i / 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return 0 if len(odds) == 0 else reduce(lambda a, b: a * b, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: int(n) ** 2, lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    last = txt[txt.rfind(\" \") + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx, default=-1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = neg[0] if neg else None\n    min_pos = pos[0] if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = float(a.replace(',', '.')) if type(a) is str else a\n    b1 = float(b.replace(',', '.')) if type(b) is str else b\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"   \", \"-\").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split('.')\n    if len(lst) != 2 or not suf.__contains__(lst[1]) or len(lst[0]) == 0 or not lst[0][0].isalpha() or [...lst[0]].__contains__(str.isdigit):\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(w for w in words if is_prime(len(w)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and odds.startswith(str(n)[0])])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        [l, r] = [r, l]\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = []\n    for e in lst:\n        if len(e) % 2 == 0:\n            result.append(e)\n    return sorted(result, key=lambda x: len(x))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n ** 2 for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 , 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\" , \"v\", \"iv\", \"i\"]\n    res = []\n    for i in range(len(values)):\n        while num >= values[i]:\n            res.append(numerals[i])\n            num -= values[i]\n    return \"\".join(res)\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w if max_w < w else w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = [...operators]\n    nums = [...operands]\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = []\n    for ch in s:\n        if ch.isalpha():\n            result.append(ch)\n        else:\n            result.append(ch.lower() if ch.isupper() else ch.upper())\n    return ''.join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(txt.encode())\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [i + lower for i in range(upper - lower + 1) if i % 2 == 0]\n"
        ]
    },
    "kotlin": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                yield current_group\n                current_group = \"\"\n    if current_group:\n        yield current_group\n",
            "def truncate_number(num: float) -> float:\n    return num - floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    depth = 0\n    max_depth = 0\n    for ch in paren_string:\n        if ch == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif ch == ')':\n            depth -= 1\n    result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -1\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(['0' if x == y else '1' for x, y in zip(a, b)])\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if len(strs) == 0:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    result = []\n    for i in range(len(s)):\n        result.append(s[:i + 1])\n    return result\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \")\n    notes = [durations[note] for note in notes if note]\n    return notes\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = [num_dict[n] for n in numbers.split(\" \") if n in num_dict]\n    num_list.sort()\n    return \" \".join([str(n) for n in num_list])\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [numbers[i - 1], numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers) if numbers else 0.0\n    max_num = max(numbers) if numbers else 0.0\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [((num - min_num) / (max_num - min_num)) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    num = n\n    while divisor <= num:\n        if num % divisor == 0:\n            factors.append(divisor)\n            num /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                result += ch.upper()\n            else:\n                result += ch.lower()\n        else:\n            result += ch\n    return result\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [e for e in l if e > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0.0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l[i] for i in range(len(l)) if i % 3 == 0)\n    return [l[i] if i % 3 != 0 else sorted_third[i // 3] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l) if l else 0\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count('7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = [x for i, x in enumerate(l) if i % 2 == 0]\n    sorted_even.sort()\n    return [x if i % 2 == 0 else l[i] for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return int(pow(n, 2))\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [e + 1 for e in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    x = x\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(sum(fib[-4:]))\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    l.sort()\n    if len(l) % 2 != 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for c in s:\n        result.append(chr((ord(c) - 97 + 5) % 26 + 97))\n    return \"\".join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for c in s:\n        result.append(chr((ord(c) - 97 + 21) % 26 + 97))\n    return \"\".join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in txt if char not in vowels])\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(e < t for e in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i] - l[i - 1] for i in range(1, len(l))]\n    return all(diff) <= 0 or all(diff) >= 0\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return list(set(l1).intersection(set(l2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n /= i\n        else:\n            i += 1\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs, 1)]\n",
            "def fibfib(n: int) -> int:\n    a, b, c = 0, 0, 1\n    for _ in range(n - 1):\n        a, b, c = b, c, a + b + c\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or i == len(s) - 1 and s[i].lower() == 'y':\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    (left, right) = (0, len(sl) - 1)\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[-i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum([len(x) for x in lst1])\n    cnt2 = sum([len(x) for x in lst2])\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    a = a\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = round(pow(a, 1.0 / 3.0))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return len([c for c in num if c in \"2357BD\"])\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)\n    return \"db\" + binary[2:] + \"db\"\n",
            "def is_happy(s: str) -> bool:\n    # Implementation here\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, floor(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 2 * 9 * int(pow(10, n - 2))\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(map(int, str(n)))\n    return str(digits_sum)\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    return \" \".join([''.join(sorted(w)) for w in words])\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda x: x[1], reverse=True)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, reverse=True) if (arr[0] + arr[-1]) % 2 == 0 else sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = set(lst)\n    sl = sorted(sl)\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(re.compile(\"[.!?]\\\\s*\"))\n    return sum(1 for s in sentences if len(s) >= 2 and s[:2] == \"I \")\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if type(x) is int and type(y) is int and type(z) is int:\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = ch1.upper() if ch1.islower() else ch1.lower()\n                ch1 = ch1.replace(ch1, ch1.upper())\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum(int(c) for c in str(largest))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n + 1):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    return int(num + 0.5) if num >= 0 else int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(\", \").filter(lambda x: len(x) > 0)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y - 1 if y != x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = ((n + m) / 2 + 0.5).to_integral_value()\n    return str(r_avg)\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return [i for i in x if all(int(d) % 2 != 0 for d in str(i))]\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [digit_names[i - 1] for i in arr if 1 <= i and i <= 9]\n    return sorted_arr\n",
            "def f(n: int) -> List[int]:\n    nums = [i for i in range(1, n + 1)]\n    return [nums[i] if nums[i] % 2 != 0 else sum(nums[:i + 1]) for i in range(n)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum([int(i) for i in n_str])\n    else:\n        return int(n_str[0:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return sum([1 for i in arr if digits_sum(i) > 0])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for e in lst1 if e % 2 != 0)\n    even_cnt = sum(1 for e in lst2 if e % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        if w in freq:\n            freq[w] += 1\n        else:\n            freq[w] = 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = [c for c in s if c not in c]\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len(list(filter(lambda x: int(x) % 2 == 1, num)))\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum([ceil(sum(row) / capacity) for row in grid])\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count('1')\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=count_ones)\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if len(w) > 0 and sum([c in consonants for c in w.lower()]) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return arr.sort()[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(i for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(e for e in arr[:k] if len(str(e)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    n = n\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [txt.count(\"a\")]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not lst[1:]:\n        return True\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(x for x in arr if x < 0) % 2 == 1 else 1\n    return sign * sum(abs(x) for x in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n):\n        if i % 2 == 0:\n            seq.append(i / 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(x) for x in str(n) if int(x) % 2 == 1]\n    return 0 if len(odds) == 0 else reduce(lambda x, y: x * y, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(ceil(e) ** 2 for e in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if txt == \"\":\n        return False\n    last = txt.split(\" \")[-1]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return idx[-1] if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [e for e in lst if e < 0]\n    pos = [e for e in lst if e > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = a if type(a) == float else float(a)\n    b1 = b if type(b) == float else float(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\" \", \"_\").replace(\"___\", \" \")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or lst[0].count(\"0\") > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join([word for word in words if is_prime(len(word))])\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum([int(i) for i in n_str])\n    else:\n        return int(n_str[0:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([x for x in nums if x > 10 and x % 2 == 1 and odds.startswith(str(x)[0])])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [e for e in lst if len(e) % 2 == 0]\n    return sorted(result, key=lambda x: len(x))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, floor(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(e * e for e in lst if e >= 0 and e % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = ext.count(\"A\")\n        lower = ext.count(\"a\")\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = abs(num)\n    even = ds.count('0')\n    return [even, ds.count('1')]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 ,5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    num = num\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch in ascii_letters:\n            if ch.isupper():\n                result += ch.lower()\n            else:\n                result += ch.upper()\n        else:\n            result += ch\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    md5_hash = md5()\n    md5_hash.update(txt.encode(\"utf-8\"))\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "php": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = [s for s in paren_string.split() if len(s) > 0]\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strs))\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -1 << 31\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    for i in range(len(s)):\n        if is_palindrome(s[:i]):\n            return s[:i] + s[i:][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(['0' if a[i] == b[i] else '1' for i in range(len(a))])\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = list(filter(lambda s: len(s) > 0, music_string.split(\" \")))\n    return list(map(lambda note: durations[note], notes))\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "from\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\n",
            "INF = float('inf')\ndef find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = numbers\n    sorted_numbers.sort()\n    min_diff = INF\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [((num - min_num) / (max_num - min_num)) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return list(filter(lambda s: s.startswith(prefix_str), strs))\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda x: x > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = [l[i] for i in range(len(l)) if l[i] % 3 == 0]\n    sorted_third.sort()\n    return [sorted_third[i // 3] if l[i] % 3 == 0 else l[i] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    result = []\n    for e in l:\n        if e not in result:\n            result.append(e)\n    result.sort()\n    return result\n",
            "def max_element(l: List[int]) -> int:\n    return max(l) if l else 0\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = [l[i] for i in range(len(l)) if l[i] % 2 == 0]\n    sorted_even.sort()\n    return [sorted_even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return pow(n, 2)\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = {}\n    for num in l:\n        if -num in seen:\n            return True\n        seen[num] = True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x = x // bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(sum(fib[-4:]))\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    l.sort()\n    if len(l) % 2 != 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr(((ord(ch) - 97 + 5) % 26) + 97))\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr(((ord(ch) - 97 + 21) % 26) + 97))\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(filter(lambda char: char not in vowels, txt))\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return sum(1 for x in l if x < t) == len(l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    set0 = list(set(s0))\n    set1 = list(set(s1))\n    set0.sort()\n    set1.sort()\n    return set0 == set1\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i] - l[i - 1] for i in range(1, len(l))]\n    return diff.count(0) == len(diff) or diff.count(0) == len(diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    result = []\n    for e in l1:\n        if e in l2:\n            result.append(e)\n    result.sort()\n    return result\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs[1:])]\n",
            "def fibfib(n: int) -> int:\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] in vowels or i == len(s) - 1 and s[i] == \"y\":\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(map(ord, list(filter(str.isupper, s))))\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = list(filter(lambda x: x % 2 == 0, arr))\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst\n    sl.sort()\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = sum(q) == w\n    return is_palin and len(q) == len(list(filter(lambda i: q[i] == q[len(q) - i - 1], range(len(q)))))\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(map(len, lst1))\n    cnt2 = sum(map(len, lst2))\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, floor(a ** 0.5) + 1):\n        while a % i == 0:\n            cnt += 1\n            a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    root = int(round(pow(a, 1.0 / 3.0)))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return len(list(set(num) & set(\"2357BD\")))\n",
            "def decimal_to_binary(dec: int) -> str:\n    return \"db{0}db\".format(bin(dec)[2:])\n",
            "def is_happy(s: str) -> bool:\n    # Implementation here\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, floor(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * pow(10, n - 2)\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(c) for c in str(n))\n    return decbin(digits_sum)\n",
            "def add(lst: List[int]) -> int:\n    return sum(filter(lambda x: x % 2 == 1 and x % 2 == 0, lst))\n",
            "def anti_shuffle(s: str) -> str:\n    words = [''.join(sorted(word)) for word in s.split()]\n    return ' '.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coords.append([i, j])\n    coords.sort(key=lambda x: x[0] if x[0] == x[1] else x[0] - x[1])\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    result = arr\n    if (arr[0] + arr[-1]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        result.sort()\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = list(set(lst))\n    sl.sort()\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\".!? \")\n    return sum(1 for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \")\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower() if ch.isupper() else ch.upper()\n            if ch1 in vowels:\n                ch1 = ch1.upper() if ch.isupper() else ch1.lower()\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum(map(int, str(largest)))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return len(d) == 0 or len(list(filter(lambda k: k.islower(), d.keys()))) == len(d) or len(list(filter(lambda k: k.isupper(), d.keys()))) == len(d)\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if len(list(filter(lambda p: num % p != 0, primes))) == len(primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(0, n - 1)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split()\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y - 1 if y != x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = int((n + m) / 2 + 0.5)\n    return decbin(r_avg)\n",
            "def all_digits_odd(s: str) -> bool:\n    return sum(1 for c in s if int(c) % 2 != 0) == len(s)\ndef unique_digits(x: List[int]) -> List[int]:\n    result = []\n    for i in x:\n        if all_digits_odd(str(i)):\n            result.append(i)\n    result.sort()\n    return result\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = list(filter(lambda x: 1 <= x and x <= 9, arr))\n    sorted_arr.sort(reverse=True)\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [sum(nums[:i]) if i % 2 == 0 else nums[i - 1] * nums[i - 1] for i in range(1, n + 1)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(i) for i in n_str)\n    else:\n        return 2 * int(n_str[:2]) + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return sum(1 for n in arr if digits_sum(n) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = arr\n    sorted_arr.sort()\n    for i in range(len(arr)):\n        if arr[:i] == sorted_arr[:i] and arr[i:] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2 != 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = list(filter(lambda w: len(w) > 0, test.split(\" \")))\n    for w in words:\n        freq[w] = (freq[w] if w in freq else 0) + 1\n    max_freq = max(freq.values()) if len(freq) > 0 else 0\n    result = {}\n    for k, v in freq.items():\n        if v == max_freq:\n            result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(filter(lambda ch: ch not in c, s))\n    return [s1, 'yes' if is_palindrome(s1) else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for d in num if int(d) % 2 == 1)\n        rs = \"the number of odd elements in the string \" + str(n) + \" of the input.\"\n        result.append(rs)\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    result = 0\n    for row in grid:\n        for col in row:\n            result += col // capacity\n    return result\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    result = arr\n    result.sort(key=lambda x: bin(x).count('1'))\n    return result\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = [w for w in s.split(\" \") if len(w) > 0]\n    return [w for w in words if sum([1 for c in w if c in consonants]) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    result = arr\n    result.sort()\n    return result[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(filter(lambda x: x % 2 == 0 and x % 2 != 0, lst))\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda n: len(str(n)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len(list(filter(lambda c: c.islower() and ord(c) % 2 == 0, txt))))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)):\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    return len(lst) == 0 or max(freq.values()) <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    return -1 if sum(filter(lambda x: x < 0, arr)) % 2 == 1 else 1 * sum(arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 and 1 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i / 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(x) for x in str(n) if int(x) % 2 == 1]\n    return 0 if len(odds) == 0 else 1\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx = list(reversed(close_idx))\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda x: x ** 2, lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    last = txt[-1]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    idx = [i for i in range(1, len(arr) - 1) if arr[i] < arr[i - 1]]\n    return max(idx, default=-1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = None if len(neg) == 0 else max(neg)\n    min_pos = None if len(pos) == 0 else min(pos)\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = a if isinstance(a, float) else float(a.replace(',', '.'))\n    b1 = b if isinstance(b, float) else float(b.replace(',', '.'))\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\" \", \"_\").replace(\"-\", \" \")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or len(list(filter(lambda x: x.isdigit(), lst[0]))) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(filter(is_prime, words))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(i) for i in n_str)\n    else:\n        return 2 * int(n_str[:2]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    nums.sort(key=digits_sum)\n    return nums\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(1 for n in nums if n > 10 and n % 2 == 1 and odds.index(str(n)[0]) != -1)\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        [l, r] = [r, l]\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = list(filter(lambda x: len(x) % 2 == 0, lst))\n    result.sort(key=lambda x: len(x))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, floor(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(filter(lambda x: x >= 0 and x % 2 == 1, lst))\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -2**31\n    max_ext = \"\"\n    for ext in extensions:\n        upper = len(re.sub(\"[^A-Z]\", \"\", ext))\n        lower = len(re.sub(\"[^a-z]\", \"\", ext))\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i]) != -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = len(list(filter(lambda d: int(d) % 2 == 0, ds)))\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 , 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w.split()))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators\n    nums = operands\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = int(nums[i] / nums[i + 1])\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not list(filter(str.isalpha, s)):\n        return s[::-1]\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.isupper():\n                result += ch.lower()\n            else:\n                result += ch.upper()\n        else:\n            result += ch\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    txt_bytes = txt.encode('utf-8')\n    md5_encoded = md5(txt_bytes).hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [i for i in range(lower, upper) if i % 2 == 0]\n"
        ]
    },
    "python": {
        "cpp": [
            "bool hasCloseElements(const vector<double>& numbers, double threshold) {\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "vector<string> separateParenGroups(const string& paren_string) {\n    vector<string> groups;\n    string current_group = \"\";\n    stack<char> stk;\n    for (char ch : paren_string) {\n        if (ch == '(') {\n            stk.push(ch);\n            current_group += ch;\n        } else if (ch == ')') {\n            stk.pop();\n            current_group += ch;\n            if (stk.empty()) {\n                groups.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - floor(num);\n}\n",
            "bool belowZero(const vector<int>& operations) {\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(const vector<double>& numbers) {\n    double mean = 0;\n    for (auto x : numbers) {\n        mean += x;\n    }\n    mean /= numbers.size();\n    double deviation = 0;\n    for (auto x : numbers) {\n        deviation += abs(x - mean);\n    }\n    return deviation / numbers.size();\n}\n",
            "vector<int> intersperse(const vector<int>& numbers, int delimiter) {\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (i != 0) {\n            result.push_back(delimiter);\n        }\n        result.push_back(numbers[i]);\n    }\n    return result;\n}\n",
            "vector<int> parseNestedParens(const string& paren_string) {\n    vector<int> result;\n    for (auto group : paren_string.split()) {\n        int max_depth = 0;\n        int depth = 0;\n        for (auto ch : group) {\n            if (ch == '(') {\n                depth += 1;\n                max_depth = max(max_depth, depth);\n            } else if (ch == ')') {\n                depth -= 1;\n            }\n        }\n        result.push_back(max_depth);\n    }\n    return result;\n}\n",
            "vector<string> filterBySubstring(const vector<string>& strs, const string& substring) {\n    vector<string> result;\n    for (string s : strs) {\n        if (s.find(substring) != -1) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n",
            "vector<int> sumProduct(const vector<int>& numbers) {\n    int n_sum = 0;\n    int n_product = 1;\n    for (int n : numbers) {\n        n_sum += n;\n        n_product *= n;\n    }\n    vector<int> result;\n    result.push_back(n_sum);\n    result.push_back(n_product);\n    return result;\n}\n",
            "vector<int> rollingMax(const vector<int>& numbers) {\n    vector<int> result;\n    int max_so_far = -INT_MAX;\n    for (int num : numbers) {\n        max_so_far = max(max_so_far, num);\n        result.push_back(max_so_far);\n    }\n    return result;\n}\n",
            "string makePalindrome(const string& s) {\n    if (s == s.reverse()) {\n        return s;\n    }\n    for (int i = 0; i < s.size(); i++) {\n        if (s.substr(i, s.size() - i) == s.substr(i, s.size() - i).reverse()) {\n            return s + s.substr(i, s.size() - i).reverse();\n        }\n    }\n    return \"\";\n}\n",
            "string stringXor(const string& a, const string& b) {\n    string result = \"\";\n    for (int i = 0; i < a.size(); i++) {\n        result += (a[i] == b[i] ? \"0\" : \"1\");\n    }\n    return result;\n}\n",
            "optional<string> longest(const vector<string>& strs) {\n    if (strs.empty()) {\n        return optional<string>();\n    }\n    optional<string> longest_s = strs[0];\n    for (auto s : strs) {\n        if (s.size() > longest_s.get().size()) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "vector<string> allPrefixes(const string& s) {\n    vector<string> prefixes;\n    for (int i = 0; i < s.size(); i++) {\n        prefixes.push_back(s.substr(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "string stringSequence(int n) {\n    return \" \".join([str(i) for i in range(n + 1)]);\n}\n",
            "int countDistinctCharacters(const string& s) {\n    int result = 0;\n    for (auto c : s) {\n        if (find(s.begin(), s.end(), c) == s.end()) {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "vector<int> parseMusic(const string& music_string) {\n    vector<int> result;\n    for (auto note : music_string.split()) {\n        switch (note) {\n            case \"o\":\n                result.push_back(4);\n                break;\n            case \"o|\":\n                result.push_back(2);\n                break;\n            case \".|\":\n                result.push_back(1);\n                break;\n        }\n    }\n    return result;\n}\n",
            "int howManyTimes(const string& s, const string& substring) {\n    int times = 0;\n    for (int i = 0; i < s.size() - substring.size() + 1; i++) {\n        if (s.substr(i, substring.size()) == substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "string sortNumbers(const string& numbers) {\n    string result = \"\";\n    vector<string> num_list = vector<string>(numbers.split(\" \"));\n    num_list.sort(less<string>(\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"));\n    for (auto& num : num_list) {\n        result += num + \" \";\n    }\n    return result.substr(0, result.size() - 1);\n}\n",
            "vector<double> findClosestElements(const vector<double>& numbers) {\n    vector<double> sorted_numbers = sort(numbers.begin(), numbers.end());\n    double min_diff = numeric_limits<double>::max();\n    vector<double> closest_pair = {};\n    for (int i = 1; i < sorted_numbers.size(); i++) {\n        double diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {sorted_numbers[i - 1], sorted_numbers[i]};\n        }\n    }\n    return closest_pair;\n}\n",
            "vector<double> rescaleToUnit(const vector<double>& numbers) {\n    double min_num = min(numbers);\n    double max_num = max(numbers);\n    if (min_num == max_num) {\n        return vector<double>(numbers.size(), 0.0);\n    }\n    vector<double> result;\n    for (auto num : numbers) {\n        result.push_back((num - min_num) / (max_num - min_num));\n    }\n    return result;\n}\n",
            "vector<int> filterIntegers(const vector<any>& values) {\n    vector<int> result;\n    for (auto x : values) {\n        if (isinstance(x, int)) {\n            result.push_back(x);\n        }\n    }\n    return result;\n}\n",
            "int strLength(const string& s) {\n    return s.length();\n}\n",
            "int largestDivisor(int n) {\n    int largest = 1;\n    for (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest = i;\n        }\n    }\n    return largest;\n}\n",
            "vector<int> factorize(int n) {\n    vector<int> factors;\n    int divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.push_back(divisor);\n            n /= divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n",
            "vector<int> removeDuplicates(const vector<int>& numbers) {\n    unordered_map<int, int> counts;\n    for (int num : numbers) {\n        counts[num] = counts.get(num, 0) + 1;\n    }\n    vector<int> res;\n    for (auto& pair : counts) {\n        if (pair.second == 1) {\n            res.push_back(pair.first);\n        }\n    }\n    return res;\n}\n",
            "string flipCase(const string& s) {\n    string result = \"\";\n    for (char c : s) {\n        if (!c.isalpha()) {\n            result += c;\n        } else if (c.islower()) {\n            result += c.upper();\n        } else if (c.isupper()) {\n            result += c.lower();\n        }\n    }\n    return result;\n}\n",
            "string concatenate(const vector<string>& strs) {\n    return join(strs, \"\");\n}\n",
            "vector<string> filterByPrefix(const vector<string>& strs, const string& prefix_str) {\n    vector<string> result;\n    for (string s : strs) {\n        if (s.startswith(prefix_str)) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n",
            "vector<int> getPositive(const vector<int>& l) {\n    vector<int> result;\n    for (int num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "double poly(const vector<int>& xs, double x) {\n    double res = 0.0;\n    for (int i = 0; i < xs.size(); i++) {\n        res += xs[i] * x**i;\n    }\n    return res;\n}\ndouble findZero(const vector<int>& xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        }\n        else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        }\n        else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "vector<int> sortThird(const vector<int>& l) {\n    vector<int> sorted_third = sort(l.begin(), l.end(), greater<int>());\n    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            result.push_back(sorted_third[i / 3]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n",
            "vector<int> listUnique(const vector<int>& l) {\n    set<int> s;\n    vector<int> result;\n    for (int e : l) {\n        if (s.find(e) == s.end()) {\n            s.insert(e);\n            result.push_back(e);\n        }\n    }\n    return result;\n}\n",
            "int maxElement(const vector<int>& l) {\n    if (l.size() == 0) {\n        return 0;\n    }\n    return max(l);\n}\n",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += str(i).count(\"7\");\n        }\n    }\n    return cnt;\n}\n",
            "vector<int> sortEven(const vector<int>& l) {\n    vector<int> sorted_even = sort(l.begin(), l.end(), less<int>());\n    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            result.push_back(sorted_even[i / 2]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n",
            "string encodeCyclic(const string& s) {\n    string result = \"\";\n    for (int i = 0; i < s.size(); i++) {\n        if (i + 2 < s.size()) {\n            result += s[i+1];\n            result += s[i];\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nstring decodeCyclic(const string& s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "int primeFib(int n) {\n    int f[2] = {0, 1};\n    int cnt = 0;\n    while (cnt < n) {\n        f = {f[1], f[0] + f[1]};\n        if (is_prime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\n",
            "bool triplesSumToZero(const vector<int>& l) {\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return n * n;\n}\n",
            "vector<int> incrList(const vector<int>& l) {\n    vector<int> result;\n    for (int i : l) {\n        result.push_back(i + 1);\n    }\n    return result;\n}\n",
            "bool pairsSumToZero(const vector<int>& l) {\n    set<int> seen;\n    for (int num : l) {\n        if (-num in seen) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "string changeBase(int x, int bas) {\n    string result = \"\";\n    while (x > 0) {\n        result = to_string(x % bas) + result;\n        x /= bas;\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int h) {\n    return a * h / 2;\n}\n",
            "int fib4(int n) {\n    int fib = [0, 0, 2, 0];\n    for (int i = 4; i <= n; i++) {\n        fib[i % 4] = sum(fib);\n    }\n    return fib[n % 4];\n}\n",
            "double median(const vector<double>& l) {\n    sort(l.begin(), l.end());\n    if (l.size() % 2 != 0) {\n        return l[l.size() / 2];\n    } else {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2;\n    }\n}\n",
            "bool isPalindrome(const string& txt) {\n    return txt == txt.reverse();\n}\n",
            "int modp(int n, int p) {\n    int ret = 1;\n    for (int _ = 0; _ < n; _++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "string encodeShift(const string& s) {\n    string result = \"\";\n    for (auto ch : s) {\n        result += chr(((ord(ch) - 97 + 5) % 26) + 97);\n    }\n    return result;\n}\nstring decodeShift(const string& s) {\n    string result = \"\";\n    for (auto ch : s) {\n        result += chr(((ord(ch) - 97 + 21) % 26) + 97);\n    }\n    return result;\n}\n",
            "string removeVowels(const string& txt) {\n    string result = \"\";\n    for (char c : txt) {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n    return result;\n}\n",
            "bool belowThreshold(const vector<int>& l, int t) {\n    return all(x < t for x in l);\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\nint main() {\n    int x, y;\n    cin >> x >> y;\n    cout << add(x, y) << endl;\n    return 0;\n}\n",
            "bool sameChars(const string& s0, const string& s1) {\n    return set(s0) == set(s1);\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\nint main() {\n    int n = 5;\n    cout << fib(n);\n    return 0;\n}\n",
            "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '<') {\n            depth++;\n        } else if (b == '>') {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(const vector<int>& l) {\n    for (int i = 1, n = l.size(); i < n; i++) {\n        if (l[i] < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "vector<int> common(const vector<int>& l1, const vector<int>& l2) {\n    vector<int> result;\n    set<int> s1 = set<int>(l1);\n    set<int> s2 = set<int>(l2);\n    for (int e : s1) {\n        if (s2.count(e) > 0) {\n            result.push_back(e);\n        }\n    }\n    return result;\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i++;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    int result = 0;\n    for (int i = 1; i <= n; i++) {\n        result += i;\n    }\n    return result;\n}\n",
            "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '(') {\n            depth++;\n        } else if (b == ')') {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "vector<int> derivative(const vector<int>& xs) {\n    vector<int> result;\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a, b, c = 0, d = 0;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + d;\n        d = a;\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(const string& s) {\n    int cnt = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || (i == s.size() - 1 && s[i] == 'y')) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n",
            "string circularShift(int x, int shift) {\n    string x_str = to_string(x);\n    if (shift > x_str.length()) {\n        return x_str.reversed();\n    }\n    else {\n        return x_str.substr(x_str.length() - shift) + x_str.substr(0, x_str.length() - shift);\n    }\n}\n",
            "int digitSum(const string& s) {\n    int result = 0;\n    for (auto c : s) {\n        if (c.isupper()) {\n            result += ord(c) - ord('A');\n        }\n    }\n    return result;\n}\n",
            "int fruitDistribution(const string& s, int n) {\n    int apples = 0, oranges = 0;\n    string words = s;\n    for (auto& c : words) {\n        if (c == 'a') {\n            apples++;\n        } else if (c == 'o') {\n            oranges++;\n        }\n    }\n    return n - apples - oranges;\n}\n",
            "vector<int> pluck(const vector<int>& arr) {\n    vector<int> evens = vector<int>(0, arr.size());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            evens[i] = arr[i];\n        }\n    }\n    if (evens.size() == 0) {\n        return vector<int>();\n    }\n    int min_even = min_element(evens.begin(), evens.end());\n    return vector<int>(2, min_even);\n}\n",
            "int search(const vector<int>& lst) {\n    map<int, int> freqs;\n    for (int n : lst) {\n        freqs[n] = freqs.get(n, 0) + 1;\n    }\n    int good_vals = 0;\n    for (auto& kv : freqs) {\n        if (kv.second >= kv.first) {\n            good_vals = max(good_vals, kv.first);\n        }\n    }\n    return good_vals;\n}\n",
            "vector<int> strangeSortList(const vector<int>& lst) {\n    vector<int> sl;\n    sort(lst.begin(), lst.end());\n    vector<int> result;\n    int left = 0, right = lst.size() - 1;\n    while (left <= right) {\n        result.push_back(sl[left]);\n        left++;\n        if (left <= right) {\n            result.push_back(sl[right]);\n            right--;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        double s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(const vector<int>& q, int w) {\n    if (q.size() == 0) {\n        return false;\n    }\n    bool is_palin = all(q[i] == q[q.size() - i - 1] for i in range(q.size()));\n    int total = sum(q);\n    return is_palin and total <= w;\n}\n",
            "int smallestChange(const vector<int>& arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.size() / 2; ++i) {\n        if (arr[i] != arr[arr.size() - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "vector<string> totalMatch(const vector<string>& lst1, const vector<string>& lst2) {\n    int cnt1 = 0;\n    int cnt2 = 0;\n    for (string s : lst1) {\n        cnt1 += s.size();\n    }\n    for (string s : lst2) {\n        cnt2 += s.size();\n    }\n    return lst1 if cnt1 <= cnt2 else lst2;\n}\n",
            "bool isMultiplyPrime(int a) {\n    int cnt = 0;\n    for (int i = 2; i <= a; i++) {\n        if (is_prime(i)) {\n            while (a % i == 0) {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    return cnt == 3;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    a = abs(a);\n    int root = int(round(pow(a, 1.0 / 3.0)));\n    return root * root * root == a;\n}\n",
            "int hexKey(const string& num) {\n    int result = 0;\n    for (auto c : num) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "string decimalToBinary(int dec) {\n    string binary = bin(dec)[2:];\n    return \"db\" + binary + \"db\";\n}\n",
            "bool isHappy(const string& s) {\n    if (s.size() < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "vector<string> numericalLetterGrade(const vector<double>& grades) {\n    vector<string> result;\n    for (auto g : grades) {\n        if (g == 4.0) {\n            result.push_back(\"A+\");\n        } else if (g > 3.7) {\n            result.push_back(\"A\");\n        } else if (g > 3.3) {\n            result.push_back(\"A-\");\n        } else if (g > 3.0) {\n            result.push_back(\"B+\");\n        } else if (g > 2.7) {\n            result.push_back(\"B\");\n        } else if (g > 2.3) {\n            result.push_back(\"B-\");\n        } else if (g > 2.0) {\n            result.push_back(\"C+\");\n        } else if (g > 1.7) {\n            result.push_back(\"C\");\n        } else if (g > 1.3) {\n            result.push_back(\"C-\");\n        } else if (g > 1.0) {\n            result.push_back(\"D+\");\n        } else if (g > 0.7) {\n            result.push_back(\"D\");\n        } else if (g > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(const string& s) {\n    int length = s.length();\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(length)) + 1; i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * (10 ^ (n - 2));\n}\n",
            "string solve(int n) {\n    string result = \"\";\n    int digits_sum = 0;\n    for (auto d : to_string(n)) {\n        digits_sum += int(d);\n    }\n    result = to_string(digits_sum);\n    return result;\n}\n",
            "int add(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "string antiShuffle(const string& s) {\n    string result = \"\";\n    for (auto word : s.split(\" \")) {\n        result += \"\".join(sorted(word));\n        result += \" \";\n    }\n    return result.substr(0, result.size() - 1);\n}\n",
            "vector<vector<int>> getRow(const vector<vector<int>>& lst, int x) {\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    return result;\n}\n",
            "vector<int> sortArray(const vector<int>& arr) {\n    if (arr.size() == 0) {\n        return vector<int>();\n    }\n    if ((arr[0] + arr[-1]) % 2 == 0) {\n        return sort(arr, greater<int>());\n    } else {\n        return sort(arr);\n    }\n}\n",
            "string encrypt(const string& s) {\n    string result = \"\";\n    for (auto ch : s) {\n        int shifted = ord(ch) + 4;\n        if (shifted > ord('z')) {\n            shifted -= 26;\n        }\n        result += chr(shifted);\n    }\n    return result;\n}\n",
            "optional<int> nextSmallest(const vector<int>& lst) {\n    sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return optional<int>();\n    }\n    return optional<int>(lst[1]);\n}\n",
            "int isBored(const string& s) {\n    regex r(r\"I \\w+\");\n    int count = 0;\n    for (auto sentence : s.split(\".!?\")) {\n        if (r.match(sentence)) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "bool anyInt(any x, any y, any z) {\n    if (x.type() == typeid(int) && y.type() == typeid(int) && z.type() == typeid(int)) {\n        if (x.cast<int>() + y.cast<int>() == z.cast<int>()) {\n            return true;\n        }\n        if (x.cast<int>() + z.cast<int>() == y.cast<int>()) {\n            return true;\n        }\n        if (y.cast<int>() + z.cast<int>() == x.cast<int>()) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "string encode(const string& message) {\n    string result = \"\";\n    for (auto ch : message) {\n        if (ch.isalpha()) {\n            ch1 = ch.upper() ? ch.upper() + 2 : ch.lower() + 2;\n            result += ch1;\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}\n",
            "int skjkasdkd(const vector<int>& lst) {\n    int largest = 0;\n    for (int n : lst) {\n        if (is_prime(n)) {\n            largest = max(largest, n);\n        }\n    }\n    if (largest == 0) {\n        return 0;\n    }\n    string largest_str = to_string(largest);\n    int sum = 0;\n    for (char c : largest_str) {\n        sum += to_int(c);\n    }\n    return sum;\n}\n",
            "bool checkDictCase(const unordered_map<string, string>& d) {\n    return all(c.islower() for c in d.keys()) || all(c.isupper() for c in d.keys());\n}\n",
            "vector<int> countUpTo(int n) {\n    vector<int> primes;\n    for (int num = 2; num < n; num++) {\n        if (all(num % p != 0 for p in primes)) {\n            primes.push_back(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    int result = 0;\n    while (a != 0) {\n        int digit = a % 10;\n        a /= 10;\n        while (b != 0) {\n            int digit_b = b % 10;\n            b /= 10;\n            result += digit * digit_b;\n        }\n    }\n    return result;\n}\n",
            "int countUpper(const string& s) {\n    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "int closestInteger(const string& value) {\n    double num = atof(value);\n    if (num >= 0) {\n        return (int)num + 0.5;\n    } else {\n        return (int)num - 0.5;\n    }\n}\n",
            "vector<int> makeAPile(int n) {\n    vector<int> result;\n    for (int i = 0; i < n; i++) {\n        result.push_back(n + 2 * i);\n    }\n    return result;\n}\n",
            "vector<string> wordsString(const string& s) {\n    vector<string> result;\n    for (auto w : s.split(\", \")) {\n        if (w.size() > 0) {\n            result.push_back(w);\n        }\n    }\n    return result;\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    if (x != y) {\n        return y - 1;\n    }\n    return -1;\n}\n",
            "optional<string> roundedAvg(int n, int m) {\n    if (n > m) {\n        return {};\n    }\n    int r_avg = (m + n) / 2 + 0.5;\n    return to_string(r_avg, hex);\n}\n",
            "vector<int> uniqueDigits(const vector<int>& x) {\n    vector<int> result;\n    for (int num : x) {\n        string s = to_string(num);\n        if (all_digits_odd(s)) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n",
            "vector<string> byLength(const vector<int>& arr) {\n    vector<string> result;\n    for (int e : arr) {\n        if (e == 1) {\n            result.push_back(\"One\");\n        } else if (e == 2) {\n            result.push_back(\"Two\");\n        } else if (e == 3) {\n            result.push_back(\"Three\");\n        } else if (e == 4) {\n            result.push_back(\"Four\");\n        } else if (e == 5) {\n            result.push_back(\"Five\");\n        } else if (e == 6) {\n            result.push_back(\"Six\");\n        } else if (e == 7) {\n            result.push_back(\"Seven\");\n        } else if (e == 8) {\n            result.push_back(\"Eight\");\n        } else if (e == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return result;\n}\n",
            "vector<int> f(int n) {\n    vector<int> result;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 != 0) {\n            result.push_back(i);\n        } else {\n            result.push_back(i + sum(result.begin(), result.end(), i - 1));\n        }\n    }\n    return result;\n}\n",
            "bool isPalindrome(string txt) {\n    return txt == txt.reverse();\n}\nvector<int> evenOddPalindrome(int n) {\n    vector<int> cnt;\n    cnt.push_back(0);\n    cnt.push_back(0);\n    for (int i = 1; i <= n; i++) {\n        if (isPalindrome(to_string(i))) {\n            cnt[i % 2]++;\n        }\n    }\n    return cnt;\n}\n",
            "int countNums(const vector<int>& arr) {\n    int result = 0;\n    for (int n : arr) {\n        int sum = 0;\n        string n_str = to_string(n);\n        if (n >= 0) {\n            for (auto d : n_str) {\n                sum += to_int(d);\n            }\n        } else {\n            sum = to_int(n_str[:2]) * 2 + countNums(abs(n));\n        }\n        if (sum > 0) {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "bool moveOneBall(const vector<int>& arr) {\n    if (arr.size() == 0) {\n        return true;\n    }\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i:] == sorted_arr[:arr.size() - i] && arr[:i] == sorted_arr[arr.size() - i:]) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "string canExchange(const vector<int>& lst1, const vector<int>& lst2) {\n    int odd_cnt = 0;\n    int even_cnt = 0;\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            odd_cnt++;\n        }\n    }\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            even_cnt++;\n        }\n    }\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\";\n}\n",
            "unordered_map<string, int> histogram(const string& test) {\n    unordered_map<string, int> freq;\n    vector<string> words = split(test, \" \");\n    for (auto w : words) {\n        freq[w] = freq.get(w, 0) + 1;\n    }\n    unordered_map<string, int> result;\n    if (freq.size() > 0) {\n        int max_freq = max(freq.values());\n        for (auto kv : freq.items()) {\n            if (kv.second == max_freq) {\n                result[kv.first] = kv.second;\n            }\n        }\n    }\n    return result;\n}\n",
            "vector<string> reverseDelete(const string& s, const string& c) {\n    string s1 = \"\";\n    for (char ch : s) {\n        if (ch not in c) {\n            s1 += ch;\n        }\n    }\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"];\n}\n",
            "vector<string> oddCount(const vector<string>& lst) {\n    vector<string> result;\n    for (auto s : lst) {\n        int n = 0;\n        for (auto c : s) {\n            if (c % 2 == 1) {\n                n++;\n            }\n        }\n        string rs = \"the number of odd elements in the string \" + to_string(n) + \" of the input.\";\n        result.push_back(rs);\n    }\n    return result;\n}\n",
            "int minSubArraySum(const vector<int>& nums) {\n    int min_sum = 0;\n    int cur_sum = 0;\n    for (int n : nums) {\n        cur_sum = min(cur_sum + n, 0);\n        min_sum = min(cur_sum, min_sum);\n    }\n    if (min_sum == 0) {\n        min_sum = min(nums);\n    }\n    return min_sum;\n}\n",
            "int maxFill(const vector<vector<int>>& grid, int capacity) {\n    int result = 0;\n    for (auto& arr : grid) {\n        result += ceil(sum(arr) / capacity);\n    }\n    return result;\n}\n",
            "vector<int> sortArray(const vector<int>& arr) {\n    return sort(arr.begin(), arr.end(),\n        [](const int& a, const int& b) {\n            return count_ones(a) > count_ones(b);\n        });\n}\n",
            "vector<string> selectWords(const string& s, int n) {\n    vector<string> words;\n    vector<string> result;\n    string consonants = \"bcdfghjklmnpqrstvwxyz\";\n    for (string w : s.split(\" \")) {\n        if (w.size() > 0) {\n            words.push_back(w);\n        }\n    }\n    for (string w : words) {\n        if (w.size() > 0 && w.size() == n && w.count(consonants) == n) {\n            result.push_back(w);\n        }\n    }\n    return result;\n}\n",
            "string getClosestVowel(const string& word) {\n    string vowels = \"aeiouAEIOU\";\n    for (int i = word.size() - 2; i >= 0; i--) {\n        if (word[i] in vowels && word[i - 1] not in vowels && word[i + 1] not in vowels) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "string matchParens(const vector<string>& lst) {\n    string s1 = lst[0] + lst[1];\n    string s2 = lst[1] + lst[0];\n    if (check(s1) || check(s2)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\nbool check(string s) {\n    int depth = 0;\n    for (char ch : s) {\n        if (ch == \"(\") {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "vector<int> maximum(const vector<int>& arr, int k) {\n    sort(arr.begin(), arr.end());\n    return arr.subarray(arr.size() - k, arr.size());\n}\n",
            "int solution(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "int addElements(const vector<int>& arr, int k) {\n    int result = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            result += arr[i];\n        }\n    }\n    return result;\n}\n",
            "vector<int> getOddCollatz(int n) {\n    vector<int> collatz;\n    collatz.push_back(1);\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.push_back(n);\n            n = 3 * n + 1;\n        } else {\n            n = n // 2;\n        }\n    }\n    return collatz;\n}\n",
            "bool validDate(const string& date) {\n    if (date.length() != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n    int m = atoi(date.substr(0, 2));\n    int d = atoi(date.substr(3, 2));\n    if (m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31) {\n        return true;\n    }\n    if (m in [4, 6, 9, 11] && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "vector<string> splitWords(const string& txt) {\n    if (\" \" in txt) {\n        return txt.split(\" \");\n    }\n    else if (\",\" in txt) {\n        return txt.split(\",\");\n    }\n    else {\n        return {str(len([c for c in txt if c.islower() and ord(c) % 2 == 0]))};\n    }\n}\n",
            "bool isSorted(const vector<int>& lst) {\n    map<int, int> freq;\n    for (int i : lst) {\n        freq[i] = freq.get(i, 0) + 1;\n    }\n    int max_freq = 0;\n    for (auto& p : freq) {\n        max_freq = max(max_freq, p.second);\n    }\n    return max_freq <= 2;\n}\n",
            "string intersection(const vector<int>& interval1, const vector<int>& interval2) {\n    if (interval1[0] > interval2[1] || interval2[0] > interval1[1]) {\n        return \"NO\";\n    }\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    return length > 0 && is_prime(length) ? \"YES\" : \"NO\";\n}\nint is_prime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)) + 1; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "optional<int> prodSigns(const vector<int>& arr) {\n    if (arr.empty()) {\n        return nullptr;\n    }\n    if (0 in arr) {\n        return 0;\n    }\n    int sign = arr.count(-1) % 2 == 1 ? -1 : 1;\n    return sign * sum([abs(n) for n in arr]);\n}\n",
            "vector<int> minPath(const vector<vector<int>>& grid, int k) {\n    int n = grid.size();\n    int min_val = n * n + 1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                int temp = INT_MAX;\n                if (i != 0) {\n                    temp = min(temp, grid[i - 1][j]);\n                }\n                if (j != 0) {\n                    temp = min(temp, grid[i][j - 1]);\n                }\n                if (i != n - 1) {\n                    temp = min(temp, grid[i + 1][j]);\n                }\n                if (j != n - 1) {\n                    temp = min(temp, grid[i][j + 1]);\n                }\n                min_val = min(min_val, temp);\n            }\n        }\n    }\n    vector<int> result;\n    for (int i = 0; i < k; i++) {\n        result.push_back(1 if i % 2 == 0 else min_val);\n    }\n    return result;\n}\n",
            "vector<int> tri(int n) {\n    vector<int> seq;\n    seq.push_back(1);\n    seq.push_back(3);\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq.push_back(i / 2 + 1);\n        } else {\n            seq.push_back(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    vector<int> odds;\n    string s = to_string(n);\n    for (char c : s) {\n        if (c != '-') {\n            int d = c - '0';\n            if (d % 2 == 1) {\n                odds.push_back(d);\n            }\n        }\n    }\n    int result = 1;\n    for (auto d : odds) {\n        result *= d;\n    }\n    return result;\n}\n",
            "bool isNested(const string& s) {\n    int open_idx = 0;\n    int close_idx = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == '[') {\n            open_idx = i;\n        }\n        if (s[i] == ']') {\n            close_idx = i;\n        }\n    }\n    int cnt = 0;\n    int i = 0;\n    int l = close_idx - open_idx;\n    for (int idx = open_idx; idx < close_idx; idx++) {\n        if (i < l && idx < close_idx) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "int sumSquares(const vector<double>& lst) {\n    int result = 0;\n    for (auto n : lst) {\n        result += pow(ceil(n), 2);\n    }\n    return result;\n}\n",
            "bool checkIfLastCharIsALetter(const string& txt) {\n    if (txt.size() == 0) {\n        return false;\n    }\n    int last = txt.rfind(' ') + 1;\n    if (last == txt.size()) {\n        return false;\n    }\n    return txt[last].isalpha();\n}\n",
            "int canArrange(const vector<int>& arr) {\n    int idx = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            idx = i;\n            break;\n        }\n    }\n    return idx;\n}\n",
            "vector<optional<int>> largestSmallestIntegers(const vector<int>& lst) {\n    vector<optional<int>> result;\n    vector<int> neg = vector<int>(lst);\n    vector<int> pos = vector<int>(lst);\n    for (auto i : lst) {\n        if (i < 0) {\n            neg.push_back(i);\n        } else {\n            pos.push_back(i);\n        }\n    }\n    if (neg.size() > 0) {\n        result.push_back(max_element(neg));\n    } else {\n        result.push_back(optional<int>());\n    }\n    if (pos.size() > 0) {\n        result.push_back(min_element(pos));\n    } else {\n        result.push_back(optional<int>());\n    }\n    return result;\n}\n",
            "optional<double> compareOne(any a, any b) {\n    double a1 = 0;\n    double b1 = 0;\n    if (a.type() == typeid(int)) {\n        a1 = (double)a.cast<int>();\n    }\n    else if (a.type() == typeid(float)) {\n        a1 = (double)a.cast<float>();\n    }\n    else if (a.type() == typeid(double)) {\n        a1 = (double)a.cast<double>();\n    }\n    else if (a.type() == typeid(string)) {\n        a1 = (double)a.cast<string>().replace(',','.').toDouble();\n    }\n    if (b.type() == typeid(int)) {\n        b1 = (double)b.cast<int>();\n    }\n    else if (b.type() == typeid(float)) {\n        b1 = (double)b.cast<float>();\n    }\n    else if (b.type() == typeid(double)) {\n        b1 = (double)b.cast<double>();\n    }\n    else if (b.type() == typeid(string)) {\n        b1 = (double)b.cast<string>().replace(',','.').toDouble();\n    }\n    if (a1 == b1) {\n        return nullptr;\n    }\n    else if (a1 > b1) {\n        return a1;\n    }\n    else {\n        return b1;\n    }\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    int fact = 1;\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "string fixSpaces(const string& txt) {\n    return regex_replace(txt, \"\\\\s{3,}\", \"-\");\n}\n",
            "string fileNameCheck(const string& file_name) {\n    string lst[2];\n    string suf = \"txt,exe,dll\";\n    string res = \"No\";\n    lst = file_name.split(\".\");\n    if (lst.size() != 2 || !lst[1] in suf || lst[0].size() == 0 || !lst[0][0].isalpha() || lst[0].count(\"0\") > 3) {\n        return res;\n    }\n    return \"Yes\";\n}\n",
            "int sumSquares(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            result += pow(lst[i], 2);\n        }\n        elif (i % 4 == 0) {\n            result += pow(lst[i], 3);\n        }\n        else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "string wordsInSentence(const string& sentence) {\n    vector<string> words;\n    string result = \"\";\n    for (auto c : sentence) {\n        if (c == ' ') {\n            if (isPrime(words.size())) {\n                result += words[0] + \" \";\n            }\n            words.clear();\n        } else {\n            words.push_back(c);\n        }\n    }\n    if (isPrime(words.size())) {\n        result += words[0];\n    }\n    return result;\n}\n",
            "bool simplify(const string& x, const string& n) {\n    string xs = x.split(\"/\");\n    string ns = n.split(\"/\");\n    int num = atoi(xs[0].c_str());\n    int den = atoi(ns[0].c_str());\n    int num = num * den;\n    int den = atoi(xs[1].c_str());\n    int den = den * atoi(ns[1].c_str());\n    return num % den == 0;\n}\n",
            "int digitsSum(int n) {\n    string n_str = to_string(n);\n    if (n >= 0) {\n        return sum(int(d) for d in n_str);\n    } else {\n        return int(n_str[:2]) * 2 + digitsSum(abs(n));\n    }\n}\nvector<int> orderByPoints(const vector<int>& nums) {\n    return sort(nums, digitsSum);\n}\n",
            "int specialFilter(const vector<int>& nums) {\n    int result = 0;\n    for (int n : nums) {\n        if (n > 10 && n % 2 == 1 && n % 10 == 3 || n % 10 == 5 || n % 10 == 7 || n % 10 == 9) {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "int getMaxTriples(int n) {\n    vector<int> c(3, 0);\n    for (int i = 1; i <= n; i++) {\n        int a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    int result = c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6;\n    return result;\n}\n",
            "vector<string> bf(const string& planet1, const string& planet2) {\n    vector<string> names = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    if (planet1 not in names or planet2 not in names) {\n        return {};\n    }\n    int l = names.index(planet1);\n    int r = names.index(planet2);\n    if (l > r) {\n        l, r = r, l;\n    }\n    if (l == r) {\n        return {};\n    }\n    return names[l + 1 : r];\n}\n",
            "vector<string> sortedListSum(const vector<string>& lst) {\n    vector<string> result;\n    for (string s : lst) {\n        if (s.size() % 2 == 0) {\n            result.push_back(s);\n        }\n    }\n    return sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        return a.size() < b.size();\n    });\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(const vector<double>& lst) {\n    int result = 0;\n    for (auto n : lst) {\n        if (n >= 0 && n % 2 == 1) {\n            result += n * n;\n        }\n    }\n    return result;\n}\n",
            "vector<int> compare(const vector<int>& game, const vector<int>& guess) {\n    vector<int> result;\n    for (int i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n",
            "string strongestExtension(const string& class_name, const vector<string>& extensions) {\n    string max_ext = \"\";\n    int max_s = -1;\n    for (auto ext : extensions) {\n        int upper = 0;\n        int lower = 0;\n        for (auto c : ext) {\n            if (c.isupper())\n                upper++;\n            else if (c.islower())\n                lower++;\n        }\n        int s = upper - lower;\n        if (s > max_s) {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return class_name + \".\" + max_ext;\n}\n",
            "bool cycpatternCheck(const string& a, const string& b) {\n    for (int i = 0; i < b.size(); ++i) {\n        if (b.substr(i, b.size() - i) + b.substr(0, i) in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "vector<int> evenOddCount(int num) {\n    string ds = to_string(abs(num));\n    int even = 0;\n    for (char d : ds) {\n        if (ord(d) % 2 == 0) {\n            even++;\n        }\n    }\n    return {even, ds.size() - even};\n}\n",
            "string intToMiniRoman(int num) {\n    string res = \"\";\n    vector<string> values = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    vector<int> nums = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < nums.size(); i++) {\n        while (num >= nums[i]) {\n            res += values[i];\n            num -= nums[i];\n        }\n    }\n    return res;\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    return sqrt(pow(a, 2) + pow(b, 2)) == c;\n}\n",
            "string findMax(const vector<string>& words) {\n    string max_w = \"\";\n    int max_cnt = 0;\n    for (auto w : words) {\n        int cnt = w.length();\n        if (cnt > max_cnt) {\n            max_cnt = cnt;\n            max_w = w;\n        }\n        else if (cnt == max_cnt) {\n            max_w = min(max_w, w);\n        }\n    }\n    return max_w;\n}\n",
            "vector<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return {num + need, remaining - need};\n    } else {\n        return {num + remaining, 0};\n    }\n}\n",
            "int doAlgebra(const vector<string>& operators, const vector<int>& operands) {\n    int i = operators.size() - 1;\n    while (i >= 0) {\n        if (operators[i] == \"**\") {\n            operands[i] = pow(operands[i], operands[i + 1]);\n            operands.erase(operands.begin() + i + 1);\n            operators.erase(operators.begin() + i);\n            i -= 1;\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < operators.size()) {\n        if (operators[i] == \"*\") {\n            operands[i] = operands[i] * operands[i + 1];\n            operands.erase(operands.begin() + i + 1);\n            operators.erase(operators.begin() + i);\n            i -= 1;\n        }\n        elif (operators[i] == \"//\") {\n            operands[i] = operands[i] / operands[i + 1];\n            operands.erase(operands.begin() + i + 1);\n            operators.erase(operators.begin() + i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < operators.size()) {\n        if (operators[i] == \"+\") {\n            operands[i] = operands[i] + operands[i + 1];\n            operands.erase(operands.begin() + i + 1);\n            operators.erase(operators.begin() + i);\n            i -= 1;\n        }\n        elif (operators[i] == \"-\") {\n            operands[i] = operands[i] - operands[i + 1];\n            operands.erase(operands.begin() + i + 1);\n            operators.erase(operators.begin() + i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return operands[0];\n}\n",
            "string solve(const string& s) {\n    string result = \"\";\n    for (auto ch : s) {\n        if (!ch.isalpha()) {\n            result += ch;\n        } else if (ch.isupper()) {\n            result += ch.lower();\n        } else if (ch.islower()) {\n            result += ch.upper();\n        }\n    }\n    return result;\n}\n",
            "optional<string> stringToMd5(const string& txt) {\n    if (txt.empty()) {\n        return optional<string>();\n    }\n    hash_map<string, string> md5_hash;\n    hash_set<string> md5_set;\n    vector<string> md5_encoded;\n    md5_hash[\"md5\"] = \"\";\n    md5_set.insert(\"\");\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"]] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[md5_hash[\"md5\"] = \"\";\n    md5_set.insert(md5_hash[\"md5\"]);\n    md5_hash[\"md5\"];\n    md5_hash[\"md5\"];\n    md5_hash[\"md5_hash[\"md5_hash[\"md5\"];\n    md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5\"];\n    md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash5_md5_hash[\"md5_hash[\"md5_hash[\"md5_hash[\"md5_hash5_md5_hash5_md5\nmd5_md5\nmd5_md5\nmd5_md5\nmd5_md5_md5_md5\n5\nmd5_md5\nmd5_md5\nmd5_md5\nmd5\nmd5\nmd5\nmd5_md5\nmd5_md5\nmd5\nmd5_md5\nmd5\nmd5\nmd5\nmd5\nmd5\nmd5\nmd5\nmd5\nmd5\nmd5\nmd5\nmd5\nmd5\nmd5\nmd5\nmd5\nmd5\nmd5\nmd5\nmd5\nmd5\nmd5\nmd5\nmd\nmd5\nmd5\nmd5",
            "vector<int> generateIntegers(int a, int b) {\n    vector<int> result;\n    for (int i = max(2, min(a, b)); i <= min(8, max(a, b)); i += 2) {\n        result.push_back(i);\n    }\n    return result;\n}\n"
        ],
        "csharp": [
            "class Global {\n    public static bool HasCloseElements(IList<double> numbers, double threshold) {\n        for (int i = 0; i < numbers.Count; i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n                if (Math.Abs(numbers[i] - numbers[j]) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<string> SeparateParenGroups(string parenString) {\n        var groups = new List<string>();\n        var stk = new Stack<char>();\n        var parens = parenString.Replace(\" \", \"\");\n        for (var ch : parens) {\n            if (ch == \"(\") {\n                stk.Push(ch);\n                groups.Add(ch);\n            } else if (ch == \")\") {\n                stk.Pop();\n                groups.Add(ch);\n                if (stk.Count == 0) {\n                    groups.Add(parens.Substring(stk.PeekIndex + 1, ch - stk.PeekIndex - 1));\n                    stk.Clear();\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double TruncateNumber(double num) {\n        return num - Math.Floor(num);\n    }\n}\n",
            "class Global {\n    public static bool BelowZero(IList<int> operations) {\n        int balance = 0;\n        foreach (var op in operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double MeanAbsoluteDeviation(IList<double> numbers) {\n        var mean = numbers.Sum() / numbers.Count;\n        var deviation = numbers.Select(x => Math.Abs(x - mean)).Sum();\n        return deviation / numbers.Count;\n    }\n}\n",
            "class Global {\n    public static IList<int> Intersperse(IList<int> numbers, int delimiter) {\n        var result = new List<int>();\n        for (int i = 0; i < numbers.Count; i++) {\n            if (i != 0) {\n                result.Add(delimiter);\n            }\n            result.Add(numbers[i]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> ParseNestedParens(string parenString) {\n        var result = new List<int>();\n        var parenGroups = parenString.Split();\n        foreach (var group in parenGroups) {\n            var maxDepth = 0;\n            int depth = 0;\n            foreach (char ch in group) {\n                if (ch == '(') {\n                    depth++;\n                    maxDepth = Math.Max(maxDepth, depth);\n                }\n                elif (ch == ')') {\n                    depth--;\n                }\n            }\n            result.Add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> FilterBySubstring(IList<string> strs, string substring) {\n        var result = new List<string>();\n        foreach (var s in strs) {\n            if (s.Contains(substring)) {\n                result.Add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> SumProduct(IList<int> numbers) {\n        var nSum = numbers.Sum();\n        var nProduct = numbers.Select(x => x).Aggregate(1, (x, y) => x * y);\n        return new List<int> { nSum, nProduct };\n    }\n}\n",
            "class Global {\n    public static IList<int> RollingMax(IList<int> numbers) {\n        var maxSoFar = float.MinValue;\n        var result = new List<int>();\n        foreach (var num in numbers) {\n            maxSoFar = Math.Max(maxSoFar, num);\n            result.Add(maxSoFar);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool IsPalindrome(string s) {\n        return s == s.Reverse();\n    }\n    public static string MakePalindrome(string s) {\n        if (IsPalindrome(s)) {\n            return s;\n        }\n        for (int i = 0; i < s.Length; i++) {\n            if (IsPalindrome(s[i:])) {\n                return s + s[:i].Reverse();\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static string StringXor(string a, string b) {\n        return String.Join(\"\", new List<string>(new string[] {\n            x == y ? \"0\" : \"1\"\n            for (int i = 0; i < a.Length; i++) {\n                var x = a[i];\n                var y = b[i];\n            }\n        }));\n    }\n}\n",
            "class Global {\n    public static string? Longest(IList<string> strs) {\n        var longest_s = strs[0];\n        for (var s in strs) {\n            if (s.Length > longest_s.Length) {\n                longest_s = s;\n            }\n        }\n        return longest_s;\n    }\n}\n",
            "class Global {\n    public static int GreatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return GreatestCommonDivisor(b, a % b);\n        }\n    }\n}\n",
            "class Global {\n    public static IList<string> AllPrefixes(string s) {\n        var prefixes = new List<string>();\n        for (int i = 0; i < s.Length; i++) {\n            prefixes.Add(s.Substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static string StringSequence(int n) {\n        return string.Join(\" \", new int[] { i for i in range(n + 1) });\n    }\n}\n",
            "class Global {\n    public static int CountDistinctCharacters(string s) {\n        var s = s.ToLower();\n        var result = new HashSet<char>();\n        foreach (var c in s) {\n            result.Add(c);\n        }\n        return result.Count;\n    }\n}\n",
            "class Global {\n    public static IList<int> ParseMusic(string musicString) {\n        var durations = new Dictionary<string, int>();\n        durations[\"o\"] = 4;\n        durations[\"o|\"] = 2;\n        durations[\".|\"] = 1;\n        var notes = musicString.Split();\n        var result = new List<int>();\n        for (var note in notes) {\n            result.Add(durations[note]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int HowManyTimes(string s, string substring) {\n        int times = 0;\n        for (int i = 0; i < s.Length - substring.Length + 1; i++) {\n            if (s.Substring(i, substring.Length) == substring) {\n                times += 1;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static string SortNumbers(string numbers) {\n        var num_dict = new Dictionary<string, int>();\n        num_dict.Add(\"zero\", 0);\n        num_dict.Add(\"one\", 1);\n        num_dict.Add(\"two\", 2);\n        num_dict.Add(\"three\", 3);\n        num_dict.Add(\"four\", 4);\n        num_dict.Add(\"five\", 5);\n        num_dict.Add(\"six\", 6);\n        num_dict.Add(\"seven\", 7);\n        num_dict.Add(\"eight\", 8);\n        num_dict.Add(\"nine\", 9);\n        var num_list = new List<string>();\n        foreach (var num in numbers.Split(\" \")) {\n            if (num_dict.ContainsKey(num)) {\n                num_list.Add(num);\n            }\n        }\n        num_list.Sort(x => num_dict[x]);\n        return \" \".Join(num_list);\n    }\n}\n",
            "class Global {\n    public static IList<double> FindClosestElements(IList<double> numbers) {\n        var sorted_numbers = new List<double>(numbers);\n        sorted_numbers.Sort();\n        var min_diff = float.MaxValue;\n        var closest_pair = new List<double>();\n        for (int i = 1; i < sorted_numbers.Count; i++) {\n            var diff = sorted_numbers[i] - sorted_numbers[i - 1];\n            if (diff < min_diff) {\n                min_diff = diff;\n                closest_pair = new List<double>();\n                closest_pair.Add(sorted_numbers[i - 1]);\n                closest_pair.Add(sorted_numbers[i]);\n            }\n        }\n        return closest_pair;\n    }\n}\n",
            "class Global {\n    public static IList<double> RescaleToUnit(IList<double> numbers) {\n        var minNum = Math.Min(numbers);\n        var maxNum = Math.Max(numbers);\n        if (minNum == maxNum) {\n            return new List<double>();\n        }\n        var result = new List<double>();\n        foreach (var num in numbers) {\n            result.Add((num - minNum) / (maxNum - minNum));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> FilterIntegers(IList<object> values) {\n        var result = new List<int>();\n        foreach (var x in values) {\n            if (x is int) {\n                result.Add(x);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int StrLength(string s) {\n        return s.Length;\n    }\n}\n",
            "class Global {\n    public static int LargestDivisor(int n) {\n        int i = 2;\n        while (n % i != 0) {\n            i++;\n        }\n        return n // i;\n    }\n}\n",
            "class Global {\n    public static IList<int> Factorize(int n) {\n        var factors = new List<int>();\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.Add(divisor);\n                n /= divisor;\n            } else {\n                divisor++;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static IList<int> RemoveDuplicates(IList<int> numbers) {\n        var counts = new Dictionary<int, int>();\n        for (var num : numbers) {\n            counts[num] = counts.getOrDefault(num, 0) + 1;\n        }\n        var res = new List<int>();\n        for (var num : numbers) {\n            if (counts[num] == 1) {\n                res.Add(num);\n            }\n        }\n        return res;\n    }\n}\n",
            "class Global {\n    public static string FlipCase(string s) {\n        var flipped = new string();\n        for (var ch : s) {\n            if (!ch.IsLetter) {\n                flipped += ch;\n            } else if (ch.IsLower) {\n                flipped += ch.ToUpper();\n            } else if (ch.IsUpper) {\n                flipped += ch.ToLower();\n            }\n        }\n        return flipped;\n    }\n}\n",
            "class Global {\n    public static string Concatenate(IList<string> strs) {\n        return string.Join(\"\", strs);\n    }\n}\n",
            "class Global {\n    public static IList<string> FilterByPrefix(IList<string> strs, string prefixStr) {\n        var result = new List<string>();\n        foreach (var s in strs) {\n            if (s.StartsWith(prefixStr)) {\n                result.Add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> GetPositive(IList<int> l) {\n        var result = new List<int>();\n        foreach (var num in l) {\n            if (num > 0) {\n                result.Add(num);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static double Poly(IList<int> xs, double x) {\n        var res = 0.0;\n        for (int i = 0; i < xs.Count; i++) {\n            res += xs[i] * x**i;\n        }\n        return res;\n    }\n    public static double FindZero(IList<int> xs) {\n        double x1 = 1.0, x2 = -1.0;\n        while (Poly(xs, x1) * Poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.Abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (Poly(xs, mid) == 0) {\n                return mid;\n            }\n            if (Poly(xs, mid) * Poly(xs, x1) < 0) {\n                x2 = mid;\n            }\n            else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortThird(IList<int> l) {\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sortedThird = new List<int>();\n        var sorted = new<int>();\n        var<int>();\n        var<int>();\n        var<int>();\n        var<int>();\n        var<int>();\n        var<int>;\n        var<int>;\n        var<int>;\n        var<int>;\n        var<int>;\n        var<int>;\n        var<int>;\n        var<int>;\n        var<int<int>\n        var<int>;\n        var<int<int;\n        var<int;\n        var<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int<int",
            "class Global {\n    public static IList<int> ListUnique(IList<int> l) {\n        var result = new List<int>();\n        foreach (var e in l) {\n            if (result.Contains(e)) {\n                continue;\n            }\n            result.Add(e);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int MaxElement(IList<int> l) {\n        if (l.Count == 0) {\n            return 0;\n        }\n        return l.Max();\n    }\n}\n",
            "class Global {\n    public static int FizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += str(i).Count(\"7\");\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortEven(IList<int> l) {\n        var sortedEven = new List<int>();\n        var odd = new List<int>();\n        for (int i = 0; i < l.Count; i++) {\n            if (i % 2 == 0) {\n                sortedEven.Add(l[i]);\n            } else {\n                odd.Add(l[i]);\n            }\n        }\n        sortedEven.Sort();\n        var result = new List<int>();\n        for (int i = 0; i < l.Count; i++) {\n            if (i % 2 == 0) {\n                result.Add(sortedEven[i / 2]);\n            } else {\n                result.Add(odd[i - 1]);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string EncodeCyclic(string s) {\n        var result = new List<char>();\n        for (int i = 0; i < s.Length; i++) {\n            if (i + 3 > s.Length) {\n                result.Add(s[i:]);\n            } else {\n                result.Add(s[i+1:i+3]);\n                result.Add(s[i]);\n            }\n        }\n        return \"\".Join(result);\n    }\n    public static string DecodeCyclic(string s) {\n        return EncodeCyclic(EncodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static int PrimeFib(int n) {\n        var f = new List<int>();\n        f.Add(0);\n        f.Add(1);\n        int cnt = 0;\n        while (cnt < n) {\n            f.Add(f[1]);\n            if (IsPrime(f[1])) {\n                cnt++;\n            }\n        }\n        return f[1];\n    }\n}\n",
            "class Global {\n    public static bool TriplesSumToZero(IList<int> l) {\n        for (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static int CarRaceCollision(int n) {\n        return n * n;\n    }\n}\n",
            "class Global {\n    public static IList<int> IncrList(IList<int> l) {\n        var result = new List<int>();\n        foreach (var i in l) {\n            result.Add(i + 1);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool PairsSumToZero(IList<int> l) {\n        var seen = new HashSet<int>();\n        for (var num in l) {\n            if (-num in seen) {\n                return true;\n            }\n            seen.Add(num);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string ChangeBase(int x, int bas) {\n        var digits = new List<string>();\n        while (x > 0) {\n            digits.Add(x % bas);\n            x /= bas;\n        }\n        return string.Join(\"\", digits.Reverse());\n    }\n}\n",
            "class Global {\n    public static double TriangleArea(int a, int h) {\n        return a * h / 2;\n    }\n}\n",
            "class Global {\n    public static int Fib4(int n) {\n        var fib = new List<int>();\n        fib.Add(0);\n        fib.Add(0);\n        fib.Add(2);\n        fib.Add(0);\n        for (int i = 4; i <= n; i++) {\n            fib.Add(fib[i - 1] + fib[i - 2]);\n        }\n        return fib[n % 4];\n    }\n}\n",
            "class Global {\n    public static double Median(IList<double> l) {\n        var sl = new List<double>();\n        foreach (var e in l) {\n            sl.Add(e);\n        }\n        sl.Sort();\n        if (sl.Count % 2 != 0) {\n            return sl[sl.Count / 2];\n        } else {\n            return (sl[sl.Count / 2] + sl[sl.Count / 2 - 1]) / 2;\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsPalindrome(string txt) {\n        return txt == txt.Reverse();\n    }\n}\n",
            "class Global {\n    public static int Modp(int n, int p) {\n        var ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "class Global {\n    public static string EncodeShift(string s) {\n        var result = new List<char>();\n        for (var ch in s) {\n            result.Add(((ch - 97 + 5) % 26) + 97);\n        }\n        return new string(result.ToArray());\n    }\n    public static string DecodeShift(string s) {\n        var result = new List<char>();\n        for (var ch in s) {\n            result.Add(((ch - 97 + 21) % 26) + 97);\n        }\n        return new string(result.ToArray());\n    }\n}\n",
            "class Global {\n    public static string RemoveVowels(string txt) {\n        var vowels = \"aeiouAEIOU\";\n        return \"\".Join(char for char in txt if char not in vowels);\n    }\n}\n",
            "class Global {\n    public static bool BelowThreshold(IList<int> l, int t) {\n        return all(x < t for x in l);\n    }\n}\n",
            "class Global {\n    public static int Add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static bool SameChars(string s0, string s1) {\n        return new HashSet<char>(s0) == new HashSet<char>(s1);\n    }\n}\n",
            "class Global {\n    public static int Fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        else {\n            return Fib(n - 1) + Fib(n - 2);\n        }\n    }\n}\n",
            "class Global {\n    public static bool CorrectBracketing(string brackets) {\n        int depth = 0;\n        for (var b : brackets) {\n            if (b == \"<\") {\n                depth += 1;\n            } else if (b == \">\") {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static bool Monotonic(IList<int> l) {\n        var diff = new List<int>();\n        foreach (var x, y in zip(l, l.Skip(1))) {\n            diff.Add(y - x);\n        }\n        return all(x <= 0 for x in diff) || all(x >= 0 for x in diff);\n    }\n}\n",
            "class Global {\n    public static IList<int> Common(IList<int> l1, IList<int> l2) {\n        var result = new List<int>();\n        var l1Set = new HashSet<int>();\n        foreach (var e in l1) {\n            l1Set.Add(e);\n        }\n        foreach (var e in l2) {\n            if (l1Set.Contains(e)) {\n                result.Add(e);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int LargestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int SumToN(int n) {\n        return n * (n + 1) / 2;\n    }\n}\n",
            "class Global {\n    public static bool CorrectBracketing(string brackets) {\n        int depth = 0;\n        for (var b : brackets) {\n            if (b == \"(\") {\n                depth++;\n            } else if (b == \")\") {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static IList<int> Derivative(IList<int> xs) {\n        var result = new List<int>();\n        for (int i = 1; i < xs.Count; i++) {\n            result.Add(xs[i] * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int Fibfib(int n) {\n        var a = 0, b = 0, c = 1;\n        while (n > 2) {\n            a = b;\n            b = c;\n            c = a + b + c;\n            n -= 1;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int VowelsCount(string s) {\n        var vowels = new string[] {\"aeiou\", \"AEIOU\"};\n        var cnt = 0;\n        for (var i = 0; i < s.Length; i++) {\n            if (s[i].ToLower() in vowels || (i == s.Length - 1 && s[i].ToLower() == \"y\")) {\n                cnt += 1;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static string CircularShift(int x, int shift) {\n        string xStr = x.ToString();\n        if (shift > xStr.Length) {\n            return xStr.Reverse();\n        }\n        else {\n            return xStr.Substring(xStr.Length - shift) + xStr.Substring(0, xStr.Length - shift);\n        }\n    }\n}\n",
            "class Global {\n    public static int DigitSum(string s) {\n        return sum(c => c >= 'A' && c <= 'Z', s);\n    }\n}\n",
            "class Global {\n    public static int FruitDistribution(string s, int n) {\n        var words = s.Split(\" \");\n        var apples = int(words[words.IndexOf(\"apples\") - 1]);\n        var oranges = int(words[words.IndexOf(\"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n}\n",
            "class Global {\n    public static IList<int> Pluck(IList<int> arr) {\n        var evens = new List<int>();\n        foreach (var n in arr) {\n            if (n % 2 == 0) {\n                evens.Add(n);\n            }\n        }\n        if (evens.Count == 0) {\n            return new List<int>();\n        }\n        var min_even = evens.Min();\n        return new List<int> { min_even, arr.IndexOf(min_even) };\n    }\n}\n",
            "class Global {\n    public static int Search(IList<int> lst) {\n        var freqs = new Dictionary<int, int>();\n        foreach (var n in lst) {\n            freqs[n] = freqs.getOrDefault(n, 0) + 1;\n        }\n        var good_vals = new List<int>();\n        foreach (var kvp in freqs.items()) {\n            if (kvp.Value >= kvp.Key) {\n                good_vals.Add(kvp.Key);\n            }\n        }\n        return good_vals.Max(x => x);\n    }\n}\n",
            "class Global {\n    public static IList<int> StrangeSortList(IList<int> lst) {\n        var sl = new List<int>();\n        var result = new List<int>();\n        for (int i = 0; i < lst.Count; i++) {\n            sl.Add(lst[i]);\n        }\n        int left = 0, right = sl.Count - 1;\n        while (left <= right) {\n            result.Add(sl[left]);\n            left++;\n            if (left <= right) {\n                result.Add(sl[right]);\n                right--;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double TriangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            var s = (a + b + c) / 2.0;\n            return Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        }\n        else {\n            return -1.0;\n        }\n    }\n}\n",
            "class Global {\n    public static bool WillItFly(IList<int> q, int w) {\n        if (q.Count == 0) {\n            return false;\n        }\n        var isPalin = all(q[i] == q[q.Count - i - 1] for i in range(q.Count));\n        var total = sum(q);\n        return isPalin and total <= w;\n    }\n}\n",
            "class Global {\n    public static int SmallestChange(IList<int> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.Count / 2; i++) {\n            if (arr[i] != arr[arr.Count - i - 1]) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static IList<string> TotalMatch(IList<string> lst1, IList<string> lst2) {\n        var cnt1 = lst1.Select(s => s.Length).Sum();\n        var cnt2 = lst2.Select(s => s.Length).Sum();\n        return lst1 if cnt1 <= cnt2 else lst2;\n    }\n}\n",
            "class Global {\n    public static bool IsMultiplyPrime(int a) {\n        int cnt = 0;\n        for (int i = 2; i <= a; i++) {\n            if (IsPrime(i)) {\n                while (a % i == 0) {\n                    cnt += 1;\n                    a /= i;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static bool IsSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "class Global {\n    public static bool IsCube(int a) {\n        a = Math.Abs(a);\n        int root = (int)Math.Round(Math.Pow(a, 1.0 / 3.0));\n        return root * root * root == a;\n    }\n}\n",
            "class Global {\n    public static int HexKey(string num) {\n        var result = 0;\n        foreach (var c in num) {\n            if (c == \"2\" || c == \"3\" || c == \"5\" || c == \"7\" || c == \"B\" || c == \"D\") {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string DecimalToBinary(int dec) {\n        var binary = (dec >= 0) ? (bin(dec)[2:]) : (bin(-dec)[3:]);\n        return f\"db{binary}db\";\n    }\n}\n",
            "class Global {\n    public static bool IsHappy(string s) {\n        if (s.Length < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static IList<string> NumericalLetterGrade(IList<double> grades) {\n        var result = new List<string>();\n        foreach (var g in grades) {\n            if (g == 4.0) {\n                result.Add(\"A+\");\n            }\n            else if (g > 3.7) {\n                result.Add(\"A\");\n            }\n            else if (g > 3.3) {\n                result.Add(\"A-\");\n            }\n            else if (g > 3.0) {\n                result.Add(\"B+\");\n            }\n            else if (g > 2.7) {\n                result.Add(\"B\");\n            }\n            else if (g > 2.3) {\n                result.Add(\"B-\");\n            }\n            else if (g > 2.0) {\n                result.Add(\"C+\");\n            }\n            else if (g > 1.7) {\n                result.Add(\"C\");\n            }\n            else if (g > 1.3) {\n                result.Add(\"C-\");\n            }\n            else if (g > 1.0) {\n                result.Add(\"D+\");\n            }\n            else if (g > 0.7) {\n                result.Add(\"D\");\n            }\n            else if (g > 0.0) {\n                result.Add(\"D-\");\n            }\n            else {\n                result.Add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool PrimeLength(string s) {\n        int length = s.Length;\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(length)); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int StartsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 2 * 9 * (10 ^ (n - 2));\n    }\n}\n",
            "class Global {\n    public static string Solve(int n) {\n        var digitsSum = 0;\n        foreach (var d in new string(n)) {\n            digitsSum += int.Parse(d);\n        }\n        return Convert.ToString(Convert.ToInt32(digitsSum, 2));\n    }\n}\n",
            "class Global {\n    public static int Add(IList<int> lst) {\n        var result = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                result += lst[i];\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string AntiShuffle(string s) {\n        var words = s.Split(\" \");\n        var result = \"\";\n        foreach (var word in words) {\n            result += \"\".Join(sorted(word));\n            result += \" \";\n        }\n        return result.Trim();\n    }\n}\n",
            "class Global {\n    public static IList<IList<int>> GetRow(IList<IList<int>> lst, int x) {\n        var coords = new List<List<int>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    coords.Add(new List<int> { i, j });\n                }\n            }\n        }\n        return coords.OrderBy(a => (a[0], -a[1]));\n    }\n}\n",
            "class Global {\n    public static IList<int> SortArray(IList<int> arr) {\n        if (arr.Count == 0) {\n            return new List<int>();\n        }\n        if ((arr[0] + arr[arr.Count - 1]) % 2 == 0) {\n            return arr.OrderByDescending(x => x).ToList();\n        }\n        return arr.OrderBy(x => x).ToList();\n    }\n}\n",
            "class Global {\n    public static string Encrypt(string s) {\n        var result = new string();\n        for (var ch in s) {\n            var shifted = (char)((char)ch + 4);\n            if (shifted > (char)System.Char.MaxValue) {\n                shifted -= (char)System.Char.MaxValue + 1;\n            }\n            result += (char)shifted;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int? NextSmallest(IList<int> lst) {\n        var sl = new List<int>();\n        foreach (var e in lst) {\n            if (!sl.Contains(e)) {\n                sl.Add(e);\n            }\n        }\n        if (sl.Count < 2) {\n            return null;\n        }\n        return sl[1];\n    }\n}\n",
            "class Global {\n    public static int IsBored(string s) {\n        var sentences = s.Split(\".!? \");\n        return sentences.Where(s => s.Length >= 2).Select(s => s[0] == \"I\").Count;\n    }\n}\n",
            "class Global {\n    public static bool AnyInt(object x, object y, object z) {\n        if (x is int && y is int && z is int) {\n            if (x + y == z || x + z == y || y + z == x) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string Encode(string message) {\n        var vowels = \"aeiouAEIOU\";\n        var result = new string();\n        for (var ch in message) {\n            if (ch.IsLetter) {\n                var ch1 = ch.ToUpper() if ch.ToLower() else ch.ToLower();\n                if (ch1 in vowels) {\n                    ch1 = ch1 + 2;\n                }\n                result += ch1;\n            } else {\n                result += ch;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int Skjkasdkd(IList<int> lst) {\n        var primes = new List<int>();\n        foreach (var n in lst) {\n            if (is_prime(n)) {\n                primes.Add(n);\n            }\n        }\n        if (primes.Count == 0) {\n            return 0;\n        }\n        var largest = primes.Max();\n        return sum(int(digit) for digit in largest);\n    }\n}\n",
            "class Global {\n    public static bool CheckDictCase(IDictionary<string, string> d) {\n        if (d == null || d.Count == 0) {\n            return false;\n        }\n        return all(c.IsLower() for c in d.Keys) || all(c.IsUpper() for c in d.Keys);\n    }\n}\n",
            "class Global {\n    public static IList<int> CountUpTo(int n) {\n        var primes = new List<int>();\n        for (var num = 2; num < n; num++) {\n            if (all(num % p != 0 for p in primes)) {\n                primes.Add(num);\n            }\n        }\n        return primes;\n    }\n}\n",
            "class Global {\n    public static int Multiply(int a, int b) {\n        return (a % 10) * (b % 10);\n    }\n}\n",
            "class Global {\n    public static int CountUpper(string s) {\n        var vowels = new string[] {\"AEIOU\"};\n        return s.Where(c => i % 2 == 0 && c in vowels).Count();\n    }\n}\n",
            "class Global {\n    public static int ClosestInteger(string value) {\n        var num = float.Parse(value);\n        if (num >= 0) {\n            return (int) (num + 0.5);\n        } else {\n            return (int) (num - 0.5);\n        }\n    }\n}\n",
            "class Global {\n    public static IList<int> MakeAPile(int n) {\n        var result = new List<int>();\n        for (int i = 0; i < n; i++) {\n            result.Add(n + 2 * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> WordsString(string s) {\n        var result = new List<string>();\n        foreach (var w in s.Split(\", \")) {\n            if (w.Length > 0) {\n                result.Add(w);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int ChooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        return y - 1 if (x != y) else -1;\n    }\n}\n",
            "class Global {\n    public static string? RoundedAvg(int n, int m) {\n        if (n > m) {\n            return null;\n        }\n        int rAvg = (m + n) / 2;\n        return String.Format(\"{0:b}\", rAvg);\n    }\n}\n",
            "class Global {\n    public static bool AllDigitsOdd(string s) {\n        return all(ord(digit) % 2 != 0 for digit in s);\n    }\n    public static IList<int> UniqueDigits(IList<int> x) {\n        var result = new List<int>();\n        foreach (var num in x) {\n            if (AllDigitsOdd(num.ToString())) {\n                result.Add(num);\n            }\n        }\n        return result.OrderBy(x => x).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<string> ByLength(IList<int> arr) {\n        var digitNames = new List<string>();\n        digitNames.Add(\"One\");\n        digitNames.Add(\"Two\");\n        digitNames.Add(\"Three\");\n        digitNames.Add(\"Four\");\n        digitNames.Add(\"Five\");\n        digitNames.Add(\"Six\");\n        digitNames.Add(\"Seven\");\n        digitNames.Add(\"Eight\");\n        digitNames.Add(\"Nine\");\n        var sortedArr = new List<int>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (1 <= arr[i] && arr[i] <= 9) {\n                sortedArr.Add(arr[i]);\n            }\n        }\n        sortedArr.Sort(x => x, true);\n        var result = new List<string>();\n        for (int i = 0; i < sortedArr.Count; i++) {\n            result.Add(digitNames[sortedArr[i] - 1]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> F(int n) {\n        var nums = new List<int>(n);\n        for (int i = 0; i < n; i++) {\n            nums[i] = i + 1;\n        }\n        var result = new List<int>();\n        for (int i = 0; i < n; i++) {\n            if (i % 2 != 0) {\n                result.Add(nums[:i].Sum());\n            } else {\n                result.Add(nums[:i].Product());\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> EvenOddPalindrome(int n) {\n        var cnt = new List<int>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                cnt.Add(0);\n            } else {\n                cnt.Add(0);\n            }\n        }\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                cnt[i % 2] += 1;\n            }\n        }\n        return cnt;\n    }\n    public static bool isPalindrome(int n) {\n        var s = String.Format(\"{0}\", n);\n        return s == s.ReversedString;\n    }\n}\n",
            "class Global {\n    public static int DigitsSum(int n) {\n        string n_str = n.ToString();\n        if (n >= 0) {\n            return n_str.Sum(d => int.Parse(d));\n        } else {\n            return int.Parse(n_str[:2]) * 2 + DigitsSum(abs(n));\n        }\n    }\n    public static int CountNums(IList<int> arr) {\n        return arr.Where(n => DigitsSum(n) > 0).Count();\n    }\n}\n",
            "class Global {\n    public static bool MoveOneBall(IList<int> arr) {\n        if (arr.Count == 0) {\n            return true;\n        }\n        var sortedArr = arr.OrderBy(x => x).ToList();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr.OrderBy(x => x).Skip(i).SequenceEqual(sortedArr.Skip(arr.Count - i).Take(arr.Count - i)) && arr.OrderBy(x => x).Take(i).SequenceEqual(sortedArr.Skip(arr.Count - i).Take(i))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string CanExchange(IList<int> lst1, IList<int> lst2) {\n        var odd_cnt = lst1.Count(num => num % 2 != 0);\n        var even_cnt = lst2.Count(num => num % 2 == 0);\n        return \"YES\" if even_cnt >= odd_cnt else \"NO\";\n    }\n}\n",
            "class Global {\n    public static IDictionary<string, int> Histogram(string test) {\n        var freq = new Dictionary<string, int>();\n        var words = new List<string>();\n        foreach (var w in test.Split(\" \")) {\n            if (w.Length > 0) {\n                words.Add(w);\n            }\n        }\n        foreach (var w in words) {\n            freq[w] = freq.GetValueOrDefault(w, 0) + 1;\n        }\n        var result = new Dictionary<string, int>();\n        if (freq.Count > 0) {\n            var maxFreq = freq.Max(x => x.Value);\n            foreach (var kvp in freq) {\n                if (kvp.Value == maxFreq) {\n                    result[kvp.Key] = kvp.Value;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> ReverseDelete(string s, string c) {\n        var s1 = \"\";\n        foreach (var ch in s) {\n            if (ch != c) {\n                s1 += ch;\n            }\n        }\n        return new List<string>() { s1, \"yes\" if is_palindrome(s1) else \"no\" };\n    }\n}\n",
            "class Global {\n    public static IList<string> OddCount(IList<string> lst) {\n        var result = new List<string>();\n        for (var i = 0; i < lst.Count; i++) {\n            var n = 0;\n            foreach (var d in lst[i]) {\n                if (d % 2 == 1) {\n                    n++;\n                }\n            }\n            var rs = \"the number of odd elements in the string i of the input.\";\n            result.Add(rs.Replace(\"i\", str(n)));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int MinSubArraySum(IList<int> nums) {\n        var min_sum = 0;\n        var cur_sum = 0;\n        for (var n : nums) {\n            cur_sum = Math.Min(cur_sum + n, 0);\n            min_sum = Math.Min(cur_sum, min_sum);\n        }\n        if (min_sum == 0) {\n            min_sum = Math.Min(nums);\n        }\n        return min_sum;\n    }\n}\n",
            "class Global {\n    public static int MaxFill(IList<IList<int>> grid, int capacity) {\n        var result = 0;\n        foreach (var arr in grid) {\n            var sum = 0;\n            foreach (var e in arr) {\n                sum += e;\n            }\n            result += Math.Ceiling(sum / capacity);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int CountOnes(int num) {\n        return (int)bin(num).Count(\"1\");\n    }\n    public static IList<int> SortArray(IList<int> arr) {\n        return arr.OrderBy(x => (CountOnes(x), x)).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<string> SelectWords(string s, int n) {\n        var consonants = \"bcdfghjklmnpqrstvwxyz\";\n        var words = new List<string>();\n        foreach (var w in s.Split(\" \")) {\n            if (w.Length > 0) {\n                words.Add(w);\n            }\n        }\n        var result = new List<string>();\n        foreach (var w in words) {\n            if (w.Length == 0) {\n                continue;\n            }\n            if (w.Length == 1) {\n                result.Add(w);\n                continue;\n            }\n            if (w.Length > 1 && w.Length % 2 == 0) {\n                result.Add(w);\n                continue;\n            }\n            if (w.Length > 1 && w.Length % 2 == 1) {\n                var cnt = 0;\n                foreach (var c in w) {\n                    if (c.ToLower() in consonants) {\n                        cnt++;\n                    }\n                }\n                if (cnt == n) {\n                    result.Add(w);\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string GetClosestVowel(string word) {\n        var vowels = \"aeiouAEIOU\";\n        for (int i = word.Length - 2; i > 0; i--) {\n            if (word[i] in vowels && word[i - 1] not in vowels && word[i + 1] not in vowels) {\n                return word[i];\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static string MatchParens(IList<string> lst) {\n        var s1 = lst[0] + lst[1];\n        var s2 = lst[1] + lst[0];\n        return \"Yes\" if check(s1) || check(s2) else \"No\";\n    }\n    public static bool check(string s) {\n        var depth = 0;\n        for (var ch : s) {\n            if (ch == \"(\") {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static IList<int> Maximum(IList<int> arr, int k) {\n        var result = new List<int>();\n        arr.Sort();\n        for (int i = arr.Count - 1; i >= k - 1; i--) {\n            result.Add(arr[i]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int Solution(IList<int> lst) {\n        var result = 0;\n        foreach (var x in lst) {\n            if (x % 2 == 0 && x % 2 != 0) {\n                result += x;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int AddElements(IList<int> arr, int k) {\n        var result = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr[i] < 100) {\n                result += arr[i];\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> GetOddCollatz(int n) {\n        var collatz = new List<int>();\n        while (n != 1) {\n            if (n % 2 != 0) {\n                collatz.Add(n);\n                n = 3 * n + 1;\n            } else {\n                n = n // 2;\n            }\n        }\n        return collatz.OrderBy(x => x).ToList();\n    }\n}\n",
            "class Global {\n    public static bool ValidDate(string date) {\n        if (date.Length != 10 || date[2] != \"-\" || date[5] != \"-\") {\n            return false;\n        }\n        int m = int.Parse(date.Substring(0, 2));\n        int d = int.Parse(date.Substring(3, 2));\n        if (m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31) {\n            return true;\n        }\n        if (m in [4, 6, 9, 11] && d >= 1 && d <= 30) {\n            return true;\n        }\n        if (m == 2 && d >= 1 && d <= 29) {\n            return true;\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<string> SplitWords(string txt) {\n        if (\" \" in txt) {\n            return txt.Split(\" \");\n        }\n        elif (\",\" in txt) {\n            return txt.Split(\",\");\n        }\n        else {\n            return new List<string> { str(txt.Count([c for c in txt if c.IsLowerCase and (ord(c) % 2 == 0)])) };\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsSorted(IList<int> lst) {\n        var freq = new Dictionary<int, int>();\n        for (var i = 0; i < lst.Count; i++) {\n            freq[lst[i]] = freq.get(lst[i], 0) + 1;\n        }\n        return freq.Values.Max(x => x) <= 2;\n    }\n}\n",
            "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static string Intersection(IList<int> interval1, IList<int> interval2) {\n        int l = Math.Max(interval1[0], interval2[0]);\n        int r = Math.Min(interval1[1], interval2[1]);\n        int length = r - l;\n        return length > 0 && IsPrime(length) ? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static int? ProdSigns(IList<int> arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        int sign = arr.Count % 2 == 1 ? -1 : 1;\n        return sign * arr.Sum(n => n.Abs());\n    }\n}\n",
            "class Global {\n    public static IList<int> MinPath(IList<IList<int>> grid, int k) {\n        var n = grid.Count;\n        var min_val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 1) {\n                    var temp = new List<int>();\n                    if (i != 0) {\n                        temp.Add(grid[i - 1][j]);\n                    }\n                    if (j != 0) {\n                        temp.Add(grid[i][j - 1]);\n                    }\n                    if (i != n - 1) {\n                        temp.Add(grid[i + 1][j]);\n                    }\n                    if (j != n - 1) {\n                        temp.Add(grid[i][j + 1]);\n                    }\n                    min_val = Math.Min(temp);\n                }\n            }\n        }\n        var result = new List<int>();\n        for (int i = 0; i < k; i++) {\n            result.Add(1 if i % 2 == 0 else min_val);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> Tri(int n) {\n        var seq = new List<int>();\n        if (n == 0) {\n            seq.Add(1);\n            return seq;\n        }\n        seq.Add(1);\n        seq.Add(3);\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                seq.Add(i / 2 + 1);\n            } else {\n                seq.Add(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int Digits(int n) {\n        var odds = new List<int>();\n        foreach (var d in str(n)) {\n            if (int(d) % 2 == 1) {\n                odds.Add(int(d));\n            }\n        }\n        return odds.Count > 0 ? int.Parse(string.Join(\"\", odds)) : 0;\n    }\n}\n",
            "class Global {\n    public static bool IsNested(string s) {\n        var open_idx = new List<int>();\n        var close_idx = new List<int>();\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i] == '[' || s[i] == '{') {\n                open_idx.Add(i);\n            }\n            if (s[i] == ']' || s[i] == '}') {\n                close_idx.Add(i);\n            }\n        }\n        var close_idx = close_idx.Reverse();\n        int cnt = 0;\n        int i = 0;\n        int l = open_idx.Count;\n        for (int idx = open_idx[0]; idx < close_idx[0]; idx++) {\n            if (i < l && idx < close_idx[i]) {\n                cnt += 1;\n                i += 1;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int SumSquares(IList<double> lst) {\n        var result = 0;\n        foreach (var n in lst) {\n            result += Math.Pow(Math.Ceiling(n), 2);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool CheckIfLastCharIsALetter(string txt) {\n        if (txt == null || txt.Length == 0) {\n            return false;\n        }\n        var last = txt[txt.LastIndexOf(' ') + 1:];\n        return last.Length == 1 && last[0].IsLetter;\n    }\n}\n",
            "class Global {\n    public static int CanArrange(IList<int> arr) {\n        var idx = new List<int>();\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < arr[i - 1]) {\n                idx.Add(i);\n            }\n        }\n        return idx.MaxValue == -1 ? -1 : idx.MaxValue;\n    }\n}\n",
            "class Global {\n    public static IList<int?> LargestSmallestIntegers(IList<int> lst) {\n        var neg = new List<int>();\n        var pos = new List<int>();\n        for (var i = 0; i < lst.Count; i++) {\n            var e = lst[i];\n            if (e < 0) {\n                neg.Add(e);\n            } else {\n                pos.Add(e);\n            }\n        }\n        var max_neg = neg.Max() if neg.Count > 0 else null;\n        var min_pos = pos.Min() if pos.Count > 0 else null;\n        return new List<int?> { max_neg, min_pos };\n    }\n}\n",
            "class Global {\n    public static double? CompareOne(object a, object b) {\n        var a1 = (double)a;\n        var b1 = (double)b;\n        if (a1 == b1) {\n            return null;\n        }\n        if (a1 > b1) {\n            return a1;\n        }\n        return b1;\n    }\n}\n",
            "class Global {\n    public static bool IsEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int SpecialFactorial(int n) {\n        var fact = 1;\n        var result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string FixSpaces(string txt) {\n        return Regex.Replace(txt, \"\\\\s{3,}\", \"-\").Replace(\" \", \"_\");\n    }\n}\n",
            "class Global {\n    public static string FileNameCheck(string fileName) {\n        var lst = fileName.Split(\".\");\n        if (lst.Length != 2 || !lst[1].ToLower().Contains(\"txt\") || lst[0].Length == 0 || !lst[0][0].IsLetter || lst[0].Contains(\"123\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
            "class Global {\n    public static int SumSquares(IList<int> lst) {\n        var result = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 3 == 0) {\n                result += Math.Pow(lst[i], 2);\n            }\n            elif (i % 4 == 0) {\n                result += Math.Pow(lst[i], 3);\n            }\n            else {\n                result += lst[i];\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string WordsInSentence(string sentence) {\n        var words = sentence.Split(\" \");\n        return \" \".Join(words.Where(w => is_prime(w.Length)).Select(w => w).ToList());\n    }\n}\n",
            "class Global {\n    public static bool Simplify(string x, string n) {\n        var xs = x.Split(\"/\");\n        var ns = n.Split(\"/\");\n        int num = int.Parse(xs[0]) * int.Parse(ns[0]);\n        int den = int.Parse(xs[1]) * int.Parse(ns[1]);\n        return num % den == 0;\n    }\n}\n",
            "class Global {\n    public static int DigitsSum(int n) {\n        string n_str = n.ToString();\n        if (n >= 0) {\n            return n_str.Sum(d => int.Parse(d));\n        } else {\n            return int.Parse(n_str[:2]) * 2 + DigitsSum(abs(n));\n        }\n    }\n    public static IList<int> OrderByPoints(IList<int> nums) {\n        return nums.OrderBy(d => DigitsSum(d)).ToList();\n    }\n}\n",
            "class Global {\n    public static int SpecialFilter(IList<int> nums) {\n        var odds = \"13579\";\n        return nums.Where(n => n > 10 && n % 2 == 1 && odds.Contains(n.ToString().Substring(0, 1))).Count();\n    }\n}\n",
            "class Global {\n    public static int GetMaxTriples(int n) {\n        var c = new int[3];\n        for (int i = 1; i <= n; i++) {\n            int a = i * i - i + 1;\n            c[a % 3]++;\n        }\n        return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6;\n    }\n}\n",
            "class Global {\n    public static IList<string> Bf(string planet1, string planet2) {\n        var names = new List<string>();\n        names.Add(\"Mercury\");\n        names.Add(\"Venus\");\n        names.Add(\"Earth\");\n        names.Add(\"Mars\");\n        names.Add(\"Jupiter\");\n        names.Add(\"Saturn\");\n        names.Add(\"Uranus\");\n        names.Add(\"Neptune\");\n        var l = names.IndexOf(planet1);\n        var r = names.IndexOf(planet2);\n        if (l < 0 || r < 0) {\n            return new List<string>();\n        }\n        if (l > r) {\n            l, r = r, l;\n        }\n        if (l == r) {\n            return new List<string>();\n        }\n        return names.Skip(l + 1).Take(r - l - 1).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<string> SortedListSum(IList<string> lst) {\n        var result = new List<string>();\n        foreach (var s in lst) {\n            if (s.Length % 2 == 0) {\n                result.Add(s);\n            }\n        }\n        return result.OrderBy(s => (s.Length, s)).ToList();\n    }\n}\n",
            "class Global {\n    public static int XOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int DoubleTheDifference(IList<double> lst) {\n        var result = 0;\n        foreach (var n in lst) {\n            if (n >= 0 && n % 2 == 1) {\n                result += n * n;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> Compare(IList<int> game, IList<int> guess) {\n        var result = new List<int>();\n        for (int i = 0; i < game.Count; i++) {\n            result.Add(Math.Abs(game[i] - guess[i]));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string StrongestExtension(string className, IList<string> extensions) {\n        var maxS = float.MinValue;\n        var maxExt = \"\";\n        foreach (var ext in extensions) {\n            var upper = 0;\n            var lower = 0;\n            foreach (char c in ext) {\n                if (c.IsUpper()) {\n                    upper++;\n                } else if (c.IsLower()) {\n                    lower++;\n                }\n            }\n            var s = upper - lower;\n            if (s > maxS) {\n                maxS = s;\n                maxExt = ext;\n            }\n        }\n        return $\"{className}.{maxExt}\";\n    }\n}\n",
            "class Global {\n    public static bool CycpatternCheck(string a, string b) {\n        if (a.Length < b.Length) {\n            return false;\n        }\n        for (int i = 0; i < b.Length; i++) {\n            if (b.Substring(i, b.Length - i) + b.Substring(0, i) in a) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<int> EvenOddCount(int num) {\n        var ds = new string(abs(num));\n        var even = ds.Where(d => int.Parse(d) % 2 == 0).Count();\n        return new List<int> { even, ds.Where(d => int.Parse(d) % 2 != 0).Count() };\n    }\n}\n",
            "class Global {\n    public static string IntToMiniRoman(int num) {\n        var values = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        var numerals = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        var res = new string[num.Length];\n        for (int i = 0; i < num.Length; i++) {\n            while (num[i] >= values[i]) {\n                res[i] = numerals[i];\n                num[i] -= values[i];\n            }\n        }\n        return \"\".join(res);\n    }\n}\n",
            "class Global {\n    public static bool RightAngleTriangle(int a, int b, int c) {\n        var s = new List<int>();\n        s.Add(a);\n        s.Add(b);\n        s.Add(c);\n        s.Sort();\n        return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n    }\n}\n",
            "class Global {\n    public static string FindMax(IList<string> words) {\n        var max_cnt = 0;\n        var max_w = \"\";\n        foreach (var w in words) {\n            var cnt = w.Length;\n            if (cnt > max_cnt) {\n                max_cnt = cnt;\n                max_w = w;\n            }\n            elif (cnt == max_cnt) {\n                max_w = Math.Min(max_w, w);\n            }\n        }\n        return max_w;\n    }\n}\n",
            "class Global {\n    public static IList<int> Eat(int num, int need, int remaining) {\n        if (need <= remaining) {\n            return new List<int> { num + need, remaining - need };\n        }\n        else {\n            return new List<int> { num + remaining, 0 };\n        }\n    }\n}\n",
            "class Global {\n    public static int DoAlgebra(IList<string> operators, IList<int> operands) {\n        var ops = operators.CopyToArray();\n        var nums = operands.CopyToArray();\n        int i = ops.Length - 1;\n        while (i >= 0) {\n            if (ops[i] == \"**\") {\n                nums[i] = Math.Pow(nums[i], nums[i + 1]);\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n            }\n            i--;\n        }\n        i = 0;\n        while (i < ops.Length) {\n            if (ops[i] == \"*\") {\n                nums[i] = nums[i] * nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i--;\n            }\n            else if (ops[i] == \"//\") {\n                nums[i] = nums[i] / nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i--;\n            }\n            i++;\n        }\n        i = 0;\n        while (i < ops.Length) {\n            if (ops[i] == \"+\") {\n                nums[i] = nums[i] + nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i--;\n            }\n            else if (ops[i] == \"-\") {\n                nums[i] = nums[i] - nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i--;\n            }\n            i++;\n        }\n        return nums[0];\n    }\n}\n",
            "class Global {\n    public static string Solve(string s) {\n        var result = new string();\n        for (var ch in s) {\n            if (!ch.IsLetter) {\n                result += ch;\n            }\n            else if (ch.IsUpper) {\n                result += ch.ToLower();\n            }\n            else if (ch.IsLower) {\n                result += ch.ToUpper();\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string? StringToMd5(string txt) {\n        var md5_hash = new MD5();\n        var txt_bytes = txt.GetBytes();\n        md5_hash.Update(txt_bytes);\n        var md5_encoded = md5_hash.ToString(\"Hex\");\n        return md5_encoded;\n    }\n}\n",
            "class Global {\n    public static IList<int> GenerateIntegers(int a, int b) {\n        var lower = Math.Max(2, Math.Min(a, b));\n        var upper = Math.Min(8, Math.Max(a, b));\n        return new List<int>(new int[] { i for i in range(lower, upper + 1) if i % 2 == 0 });\n    }\n}\n"
        ],
        "dart": [
            "bool hasCloseElements(List<double> numbers, double threshold) {\n    for (int i = 0; i < numbers.length; i++) {\n        for (int j = i + 1; j < numbers.length; j++) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "List<String> separateParenGroups(String parenString) {\n    var groups = <String>[];\n    var stk = [];\n    var currentGroup = \"\";\n    var parens = parenString.replaceAll(\" \", \"\");\n    for (var ch in parens) {\n        if (ch == \"(\") {\n            stk.add(ch);\n            currentGroup += ch;\n        } else if (ch == \")\") {\n            stk.removeLast();\n            currentGroup += ch;\n            if (stk.isEmpty) {\n                groups.add(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - num.toInt();\n}\n",
            "bool belowZero(List<int> operations) {\n    var balance = 0;\n    for (int op in operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(List<double> numbers) {\n    var mean = numbers.length == 0 ? 0 : sum(numbers) / numbers.length;\n    var deviation = numbers.length == 0 ? 0 : sum(abs(x - mean) for x in numbers);\n    return deviation / numbers.length;\n}\n",
            "List<int> intersperse(List<int> numbers, int delimiter) {\n    var result = <int>[];\n    for (int i = 0; i < numbers.length; i++) {\n        if (i != 0) {\n            result.add(delimiter);\n        }\n        result.add(numbers[i]);\n    }\n    return result;\n}\n",
            "List<int> parseNestedParens(String parenString) {\n    var result = <int>[];\n    var parenGroups = parenString.split();\n    for (var group in parenGroups) {\n        var maxDepth = 0;\n        var depth = 0;\n        for (var ch in group) {\n            if (ch == \"(\") {\n                depth++;\n                maxDepth = max(maxDepth, depth);\n            } else if (ch == \")\") {\n                depth--;\n            }\n        }\n        result.add(maxDepth);\n    }\n    return result;\n}\n",
            "List<String> filterBySubstring(List<String> strs, String substring) {\n    return <String>[s for s in strs if substring in s];\n}\n",
            "List<int> sumProduct(List<int> numbers) {\n    var nSum = numbers.map(num: num).sum;\n    var nProduct = numbers.reduce(num: 1, acc: 1, element: (acc, num) => acc * num);\n    return [nSum, nProduct];\n}\n",
            "List<int> rollingMax(List<int> numbers) {\n    var maxSoFar = -1;\n    var result = <int>[];\n    for (int num in numbers) {\n        maxSoFar = max(maxSoFar, num);\n        result.add(maxSoFar);\n    }\n    return result;\n}\n",
            "String makePalindrome(String s) {\n    if (s == s.reversed) {\n        return s;\n    }\n    for (int i = 0; i < s.length; i++) {\n        if (s.substring(i).equals(s.substring(i).reversed)) {\n            return s + s.substring(i).reversed;\n        }\n    }\n    return \"\";\n}\n",
            "String stringXor(String a, String b) {\n    return a.length == b.length ? a.compareTo(b) == 0 ? \"0\" : \"1\" : \"\";\n}\n",
            "String longest(List<String> strs) {\n    var longest_s = strs[0];\n    for (var s in strs) {\n        if (s.length > longest_s.length) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "List<String> allPrefixes(String s) {\n    var prefixes = <String>[];\n    for (int i = 0; i < s.length; i++) {\n        prefixes.add(s.substring(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "String stringSequence(int n) {\n    return \" \".join([String(i) for i in range(n + 1)]);\n}\n",
            "int countDistinctCharacters(String s) {\n    return s.length;\n}\n",
            "List<int> parseMusic(String musicString) {\n    var durations = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    };\n    var notes = musicString.split();\n    return <int>[durations[note] for note in notes];\n}\n",
            "int howManyTimes(String s, String substring) {\n    int times = 0;\n    for (int i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "String sortNumbers(String numbers) {\n    var numDict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    var numList = numDict.keys.where((x) => numDict[x] in numbers.split(\" \")).toList();\n    numList.sort(key: (x) => numDict[x]);\n    return \" \".join(numList);\n}\n",
            "List<double> findClosestElements(List<double> numbers) {\n    var sortedNumbers = sorted(numbers);\n    var minDiff = double.infinity;\n    var closestPair = [];\n    for (int i = 1; i < sortedNumbers.length; i++) {\n        var diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "List<double> rescaleToUnit(List<double> numbers) {\n    var minNum = min(numbers);\n    var maxNum = max(numbers);\n    if (minNum == maxNum) {\n        return [0.0] * numbers.length;\n    } else {\n        return [((num - minNum) / (maxNum - minNum)) for num in numbers];\n    }\n}\n",
            "List<int> filterIntegers(List<Object> values) {\n    return values.map((x) => x as int);\n}\n",
            "int strLength(String s) {\n    return s.length;\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            return n // i;\n        }\n    }\n    return 1;\n}\n",
            "List<int> factorize(int n) {\n    var factors = <int>[];\n    var divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor);\n            n //= divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n",
            "List<int> removeDuplicates(List<int> numbers) {\n    var counts = new Map<int, int>();\n    for (int num in numbers) {\n        counts[num] = counts.get(num, 0) + 1;\n    }\n    var res = <int>[];\n    for (int num in numbers) {\n        if (counts[num] == 1) {\n            res.add(num);\n        }\n    }\n    return res;\n}\n",
            "String flipCase(String s) {\n    var flipped = <char>[];\n    for (var ch in s) {\n        if (!ch.isLetter) {\n            flipped.add(ch);\n        } else if (ch.isLowerCase) {\n            flipped.add(ch.toUpperCase);\n        } else if (ch.isUpperCase) {\n            flipped.add(ch.toLowerCase);\n        }\n    }\n    return ''.join(flipped);\n}\n",
            "String concatenate(List<String> strs) {\n    return strs.join(\"\");\n}\n",
            "List<String> filterByPrefix(List<String> strs, String prefixStr) {\n    return <String>[s for s in strs if s.startsWith(prefixStr)];\n}\n",
            "List<int> getPositive(List<int> l) {\n    return [num for (int num in l if num > 0);\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "double poly(List<int> xs, double x) {\n    var res = 0.0;\n    for (int i = 0; i < xs.length; i++) {\n        res += xs[i] * x**i;\n    }\n    return res;\n}\ndouble findZero(List<int> xs) {\n    var x1 = 1.0;\n    var x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        var mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        }\n        if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "List<int> sortThird(List<int> l) {\n    var sortedThird = l.sort();\n    return [sortedThird[i // 3] if i % 3 == 0 else l[i] for i in range(l.length)];\n}\n",
            "List<int> listUnique(List<int> l) {\n    return l.sort();\n}\n",
            "int maxElement(List<int> l) {\n    if (l.length == 0) {\n        return 0;\n    }\n    return l.first;\n}\n",
            "int fizzBuzz(int n) {\n    var cnt = 0;\n    for (int i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += str(i).count(\"7\");\n        }\n    }\n    return cnt;\n}\n",
            "List<int> sortEven(List<int> l) {\n    var sortedEven = l.sort();\n    return [sortedEven[i // 2] if i % 2 == 0 else l[i] for i in range(l.length)];\n}\n",
            "String encodeCyclic(String s) {\n    String result = \"\";\n    for (int i = 0; i < s.length; i++) {\n        if (i + 2 < s.length) {\n            result += s.substring(i + 1, i + 3);\n            result += s.substring(i);\n        } else {\n            result += s.substring(i);\n        }\n    }\n    return result;\n}\nString decodeCyclic(String s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "int primeFib(int n) {\n    var f = [0, 1];\n    var cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\n",
            "bool triplesSumToZero(List<int> l) {\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return n * n;\n}\n",
            "List<int> incrList(List<int> l) {\n    return l.map((int i) => i + 1);\n}\n",
            "bool pairsSumToZero(List<int> l) {\n    var seen = Set<int>();\n    for (int num in l) {\n        if (num in seen) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "String changeBase(int x, int bas) {\n    String result = \"\";\n    while (x > 0) {\n        result = x % bas + result;\n        x //= bas;\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int h) {\n    return a * h / 2;\n}\n",
            "int fib4(int n) {\n    var fib = [0, 0, 2, 0];\n    for (int i = 4; i <= n; i++) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2];\n        fib[0] = fib[1];\n        fib[1] = fib[2];\n        fib[2] = fib[3];\n        fib[3] = fib[0];\n    }\n    return fib[n % 4];\n}\n",
            "double median(List<double> l) {\n    var sl = l.sort();\n    if (l.length % 2 != 0) {\n        return sl[l.length / 2];\n    } else {\n        return (sl[l.length / 2] + sl[l.length / 2 - 1]) / 2;\n    }\n}\n",
            "bool isPalindrome(String txt) {\n    return txt == txt.reversed;\n}\n",
            "int modp(int n, int p) {\n    var ret = 1;\n    for (int _ in range(n)) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "String encodeShift(String s) {\n    var result = \"\";\n    for (var ch in s) {\n        result += chr(((ord(ch) - 97 + 5) % 26) + 97);\n    }\n    return result;\n}\nString decodeShift(String s) {\n    var result = \"\";\n    for (var ch in s) {\n        result += chr(((ord(ch) - 97 + 21) % 26) + 97);\n    }\n    return result;\n}\n",
            "String removeVowels(String txt) {\n    var vowels = \"aeiouAEIOU\";\n    return txt.where((char) => vowels.indexOf(char) == -1).join(\"\");\n}\n",
            "bool belowThreshold(List<int> l, int t) {\n    return l.every(x => x < t);\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(String s0, String s1) {\n    return s0.length == s1.length && s0.compareTo(s1) == 0;\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "bool correctBracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '<') {\n            depth++;\n        } else if (b == '>') {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(List<int> l) {\n    var diff = l.map((x, y) => y - x);\n    return diff.contains(0) || diff.contains(0);\n}\n",
            "List<int> common(List<int> l1, List<int> l2) {\n    return l1.map.distinct().intersection(l2.map.distinct());\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    return n * (n + 1) / 2;\n}\n",
            "bool correctBracketing(String brackets) {\n    var depth = 0;\n    for (var b in brackets) {\n        if (b == \"(\") {\n            depth++;\n        } else if (b == \")\") {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "List<int> derivative(List<int> xs) {\n    var result = <int>[];\n    for (int i = 1; i < xs.length; i++) {\n        result.add(xs[i] * i);\n    }\n    return result;\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    var a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(String s) {\n    var vowels = \"aeiou\";\n    var cnt = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() in vowels || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n",
            "String circularShift(int x, int shift) {\n    String xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.reversed.toString();\n    } else {\n        return xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift);\n    }\n}\n",
            "int digitSum(String s) {\n    return s.codePointAt(s.length - 1) - ord('A');\n}\n",
            "int fruitDistribution(String s, int n) {\n    var words = s.split(' ');\n    int apples = int(words[words.indexOf(\"apples\") - 1]);\n    int oranges = int(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "List<int> pluck(List<int> arr) {\n    var evens = arr.where((n) => n % 2 == 0);\n    if (evens.length == 0) {\n        return [];\n    }\n    var minEven = evens.first;\n    return [minEven, arr.indexOf(minEven)];\n}\n",
            "int search(List<int> lst) {\n    var freqs = new Map<int, int>();\n    for (int n in lst) {\n        freqs[n] = freqs.get(n, 0) + 1;\n    }\n    var goodVals = <int>[];\n    for (int k, v in freqs.items()) {\n        if (v >= k) {\n            goodVals.add(k);\n        }\n    }\n    return max(goodVals, default: -1);\n}\n",
            "List<int> strangeSortList(List<int> lst) {\n    var sl = lst.sort();\n    var result = <int>[];\n    var left = 0;\n    var right = sl.length - 1;\n    while (left <= right) {\n        result.add(sl[left]);\n        left++;\n        if (left <= right) {\n            result.add(sl[right]);\n            right--;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        var s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(List<int> q, int w) {\n    if (q.length == 0) {\n        return false;\n    }\n    var isPalin = q.length == q.length;\n    var total = 0;\n    for (int i in q) {\n        total += i;\n    }\n    return isPalin && total <= w;\n}\n",
            "int smallestChange(List<int> arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.length / 2; i++) {\n        if (arr[i] != arr[arr.length - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;\n}\n",
            "List<String> totalMatch(List<String> lst1, List<String> lst2) {\n    int cnt1 = lst1.length;\n    int cnt2 = lst2.length;\n    return lst1 if cnt1 <= cnt2 else lst2;\n}\n",
            "bool isMultiplyPrime(int a) {\n    int cnt = 0;\n    for (int i = 2; i <= a; i++) {\n        if (isPrime(i)) {\n            while a % i == 0 {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    return cnt == 3;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    var tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    return a == int(pow(a, 1.0 / 3.0));\n}\n",
            "int hexKey(String num) {\n    return num.length - num.contains(\"2357BD\") ? num.length : 0;\n}\n",
            "String decimalToBinary(int dec) {\n    var binary = dec.toString(2);\n    return f\"db{binary}db\";\n}\n",
            "bool isHappy(String s) {\n    if (s.length < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.length - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "List<String> numericalLetterGrade(List<double> grades) {\n    var result = <String>[];\n    for (var g in grades) {\n        if (g == 4.0) {\n            result.add(\"A+\");\n        } else if (g > 3.7) {\n            result.add(\"A\");\n        } else if (g > 3.3) {\n            result.add(\"A-\");\n        } else if (g > 3.0) {\n            result.add(\"B+\");\n        } else if (g > 2.7) {\n            result.add(\"B\");\n        } else if (g > 2.3) {\n            result.add(\"B-\");\n        } else if (g > 2.0) {\n            result.add(\"C+\");\n        } else if (g > 1.7) {\n            result.add(\"C\");\n        } else if (g > 1.3) {\n            result.add(\"C-\");\n        } else if (g > 1.0) {\n            result.add(\"D+\");\n        } else if (g > 0.7) {\n            result.add(\"D\");\n        } else if (g > 0.0) {\n            result.add(\"D-\");\n        } else {\n            result.add(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(String s) {\n    int length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(length)); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * (10 ** (n - 2));\n}\n",
            "String solve(int n) {\n    int digitsSum = 0;\n    for (int d in n.toString()) {\n        digitsSum += int(d);\n    }\n    return bin(digitsSum).substring(2);\n}\n",
            "int add(List<int> lst) {\n    return lst.length % 2 == 1 ? lst.filter((x) => x % 2 == 0).sum : 0;\n}\n",
            "String antiShuffle(String s) {\n    var words = s.split(\" \");\n    var result = \"\";\n    for (var word in words) {\n        result += \"\".join(word.sort());\n        result += \" \";\n    }\n    return result.trim();\n}\n",
            "List<List<int>> getRow(List<List<int>> lst, int x) {\n    var coords = <List<int>>[];\n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                coords.add([i, j]);\n            }\n        }\n    }\n    return coords.sort(compare: (a, b) {\n        return a[0] < b[0] ? -1 : a[0] > b[0] ? 1 : -1 if a[1] < b[1] else a[1] > b[1] ? 1 : 0;\n    });\n}\n",
            "List<int> sortArray(List<int> arr) {\n    if (arr.length == 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 == 0) {\n        return arr.sort(reverse: true);\n    } else {\n        return arr.sort();\n    }\n}\n",
            "String encrypt(String s) {\n    var result = \"\";\n    for (var ch in s) {\n        var shifted = ch.codePoint + 4;\n        if (shifted > 0x1F) {\n            shifted -= 0x1F;\n        }\n        result += chr(shifted);\n    }\n    return result;\n}\n",
            "int nextSmallest(List<int> lst) {\n    var sl = lst.sort();\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}\n",
            "int isBored(String s) {\n    var sentences = s.split(r\"\\s*[.!?]\\s*\");\n    return sentences.length >= 2 ? sentences.map((s) => s[0:2] == \"I \").count : 0;\n}\n",
            "bool anyInt(Object x, Object y, Object z) {\n    if (x is int && y is int && z is int) {\n        if (x + y == z || x + z == y || y + z == x) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "String encode(String message) {\n    var vowels = \"aeiouAEIOU\";\n    var result = \"\";\n    for (var ch in message) {\n        if (ch.isLetter) {\n            var ch1 = ch.toUpperCase() if ch.toLowerCase() else ch.toLowerCase();\n            if (ch1 in vowels) {\n                ch1 = ch1.toUpperCase() if ch1.toLowerCase() else ch1.toLowerCase();\n                ch1 = ch1 + 2;\n            }\n            result += ch1;\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}\n",
            "int skjkasdkd(List<int> lst) {\n    var primes = <int>[];\n    for (int n in lst) {\n        if (isPrime(n)) {\n            primes.add(n);\n        }\n    }\n    if (primes.length == 0) {\n        return 0;\n    }\n    var largest = primes.first;\n    return sum(int.parse(largest));\n}\n",
            "bool checkDictCase(Map<String,String> d) {\n    if (d.length == 0) {\n        return false;\n    }\n    return all(c.isLowerCase for c in d.keys) || all(c.isUpperCase for c in d.keys);\n}\n",
            "List<int> countUpTo(int n) {\n    var primes = [];\n    for (int num = 2; num < n; num++) {\n        if (all(num % p != 0 for p in primes)) {\n            primes.add(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    return (a % 10) * (b % 10);\n}\n",
            "int countUpper(String s) {\n    var vowels = \"AEIOU\";\n    return s.length - s.length / 2 - s.length / 4;\n}\n",
            "int closestInteger(String value) {\n    var num = double.parse(value);\n    if (num >= 0) {\n        return num.toInt();\n    } else {\n        return num.toInt();\n    }\n}\n",
            "List<int> makeAPile(int n) {\n    return [n + 2 * i for i in range(n)];\n}\n",
            "List<String> wordsString(String s) {\n    var result = <String>[];\n    for (var w in s.split(regexp: r\"[, ]\")) {\n        if (w.length > 0) {\n            result.add(w);\n        }\n    }\n    return result;\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return y - 1 if x != y else -1;\n}\n",
            "String? roundedAvg(int n, int m) {\n    var rAvg = (m + n) / 2.0 + 0.5;\n    return bin(rAvg);\n}\n",
            "List<int> uniqueDigits(List<int> x) {\n    var result = <int>[];\n    for (int num in x) {\n        if (allDigitsOdd(num.toString())) {\n            result.add(num);\n        }\n    }\n    return result;\n}\n",
            "List<String> byLength(List<int> arr) {\n    var digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    var sortedArr = arr.sort(compare: (a, b) {\n        return b - a;\n    });\n    return [digitNames[x-1] for x in sortedArr];\n}\n",
            "List<int> f(int n) {\n    var nums = List.from(range(1, n + 1));\n    return nums.map((int i) {\n        return i == 0 ? 0 : i % 2 == 0 ? i + nums.take(i).reduce((int x, int y) {\n            return x + y;\n        }) : nums.take(i).reduce((int x, int y) {\n            return x * y;\n        });\n    });\n}\n",
            "int isPalindrome(String txt) {\n    return txt == txt.reversed();\n}\nList<int> evenOddPalindrome(int n) {\n    var cnt = [0, 0];\n    for (int i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "int countNums(List<int> arr) {\n    return arr.length - arr.map.first.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.map.first.length.length.map.first.length.map.first.length.map.first.length.length.map.length.length.map.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.",
            "bool moveOneBall(List<int> arr) {\n    if (arr.length == 0) {\n        return true;\n    }\n    var sortedArr = arr.sort();\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i:] == sortedArr[:arr.length - i] && arr[:i] == sortedArr[arr.length - i:]) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "String canExchange(List<int> lst1, List<int> lst2) {\n    var oddCnt = lst1.length.toInt % 2 != 0 ? lst1.length : 0;\n    var evenCnt = lst2.length.toInt % 2 == 0 ? lst2.length : 0;\n    return \"YES\" if evenCnt >= oddCnt else \"NO\";\n}\n",
            "Map<String,int> histogram(String test) {\n    var freq = new Map<String, int>();\n    var words = [w for w in test.split(\" \") if w.length > 0];\n    for (var w in words) {\n        freq[w] = freq.get(w, 0) + 1;\n    }\n    var result = new Map<String, int>();\n    if (freq.length > 0) {\n        var maxFreq = freq.values.first;\n        for (var k, v in freq.items) {\n            if (v == maxFreq) {\n                result[k] = v;\n            }\n        }\n    }\n    return result;\n}\n",
            "String reverseDelete(String s, String c) {\n    String s1 = \"\";\n    for (var ch in s) {\n        if (ch != c) {\n            s1 += ch;\n        }\n    }\n    return s1 == s1.reversed ? \"yes\" : \"no\";\n}\n",
            "List<String> oddCount(List<String> lst) {\n    var result = <String>[];\n    for (var num in lst) {\n        var n = num.length;\n        var rs = \"the number of odd elements in the string \" + n + \" of the input.\";\n        result.add(rs);\n    }\n    return result;\n}\n",
            "int minSubArraySum(List<int> nums) {\n    var minSum = 0;\n    var curSum = 0;\n    for (int n in nums) {\n        curSum = min(curSum + n, 0);\n        minSum = min(curSum, minSum);\n    }\n    if (minSum == 0) {\n        minSum = min(nums);\n    }\n    return minSum;\n}\n",
            "int maxFill(List<List<int>> grid, int capacity) {\n    var result = 0;\n    for (var arr in grid) {\n        result += arr.length > 0 ? ceil(sum(arr) / capacity) : 0;\n    }\n    return result;\n}\n",
            "List<int> sortArray(List<int> arr) {\n    return arr.sort(compare: (a, b) {\n        countOnes(a) < countOnes(b) ? -1 : countOnes(a) > countOnes(b) ? 1 : a < b ? -1 : 1;\n    });\n}\nint countOnes(int num) {\n    return bin(num).count(\"1\");\n}\n",
            "String selectWords(String s, int n) {\n    String consonants = \"bcdfghjklmnpqrstvwxyz\";\n    List<String> words = s.split(\" \").filter((w) => w.length > 0);\n    return words.where((w) => w.length == w.length([c for c in w if c.lower() in consonants]) == n);\n}\n",
            "String getClosestVowel(String word) {\n    var vowels = \"aeiouAEIOU\";\n    for (int i = word.length - 2, 0; i >= 0; i--) {\n        if (word[i] in vowels && word[i - 1] not in vowels && word[i + 1] not in vowels) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "String matchParens(List<String> lst) {\n    String s1 = lst[0] + lst[1];\n    String s2 = lst[1] + lst[0];\n    return \"Yes\" if check(s1) || check(s2) else \"No\";\n}\n",
            "List<int> maximum(List<int> arr, int k) {\n    return arr.sublist(arr.length - k);\n}\n",
            "int solution(List<int> lst) {\n    var result = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "int addElements(List<int> arr, int k) {\n    int result = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            result += arr[i];\n        }\n    }\n    return result;\n}\n",
            "List<int> getOddCollatz(int n) {\n    var collatz = [1];\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.add(n);\n            n = 3 * n + 1;\n        } else {\n            n = n // 2;\n        }\n    }\n    return collatz.sort();\n}\n",
            "bool validDate(String date) {\n    if (date.length != 10 || date[2] != \"-\" || date[5] != \"-\") {\n        return false;\n    }\n    int m = int.parse(date.substring(0, 2));\n    int d = int.parse(date.substring(3, 5));\n    if (m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31) {\n        return true;\n    }\n    if (m in [4, 6, 9, 11] && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "List<String> splitWords(String txt) {\n    if (txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [txt.substring(txt.length - 1)];\n    }\n}\n",
            "bool isSorted(List<int> lst) {\n    var freq = new Map<int, int>();\n    for (int i in lst) {\n        freq[i] = freq.get(i, 0) + 1;\n    }\n    return freq.values.contains(2) ? false : true;\n}\n",
            "String intersection(List<int> interval1, List<int> interval2) {\n    var l = max(interval1[0], interval2[0]);\n    var r = min(interval1[1], interval2[1]);\n    var length = r - l;\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n}\n",
            "int? prodSigns(List<int> arr) {\n    if (arr.isEmpty) {\n        return null;\n    }\n    if (arr.contains(0)) {\n        return 0;\n    }\n    int sign = arr.length % 2 == 0 ? -1 : 1;\n    return sign * arr.map((n) => n.abs()).reduce((acc, e) => acc + e);\n}\n",
            "List<int> minPath(List<List<int>> grid, int k) {\n    var n = grid.length;\n    var minVal = n * n + 1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                var temp = <int>[];\n                if (i != 0) {\n                    temp.add(grid[i - 1][j]);\n                }\n                if (j != 0) {\n                    temp.add(grid[i][j - 1]);\n                }\n                if (i != n - 1) {\n                    temp.add(grid[i + 1][j]);\n                }\n                if (j != n - 1) {\n                    temp.add(grid[i][j + 1]);\n                }\n                minVal = temp.min();\n            }\n        }\n    }\n    var result = <int>[];\n    for (int i = 0; i < k; i++) {\n        result.add(i % 2 == 0 ? 1 : minVal);\n    }\n    return result;\n}\n",
            "int tri(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    var seq = [1, 3];\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq.add(i / 2 + 1);\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    List<int> odds = <int>[];\n    for (int d in n.toString()) {\n        if (int(d) % 2 == 1) {\n            odds.add(int(d));\n        }\n    }\n    return odds.length > 0 ? reduce(odds, (x, y) => x * y, 1) : 0;\n}\n",
            "bool isNested(String s) {\n    var openIdx = [];\n    var closeIdx = [];\n    for (int i, ch in enumerate(s)) {\n        if (ch == '[') {\n            openIdx.add(i);\n        }\n        elif (ch == ']') {\n            closeIdx.add(i);\n        }\n    }\n    closeIdx.reverse();\n    var cnt = 0;\n    var i = 0;\n    var l = closeIdx.length;\n    for (int idx in openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "int sumSquares(List<double> lst) {\n    return lst.map((double n) => pow(ceil(n), 2)).sum;\n}\n",
            "bool checkIfLastCharIsALetter(String txt) {\n    if (txt.length == 0) {\n        return false;\n    }\n    var last = txt.lastElement.charAt(txt.lastIndex);\n    return last.isAlpha();\n}\n",
            "int canArrange(List<int> arr) {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    var idx = arr.length - 1;\n    for (int i = arr.length - 2; i >= 0; i--) {\n        if (arr[i] < arr[i + 1]) {\n            idx = i;\n            break;\n        }\n    }\n    return idx;\n}\n",
            "List<int?> largestSmallestIntegers(List<int> lst) {\n    var neg = lst.filter((i) => i < 0);\n    var pos = lst.filter((i) => i > 0);\n    var maxNeg = neg.isEmpty ? null : neg.max;\n    var minPos = pos.isEmpty ? null : pos.min;\n    return [maxNeg, minPos];\n}\n",
            "double? compareOne(Object a, Object b) {\n    var a1 = a is String ? float(a.replaceAll(',', '.')) : a is int ? float(a) : a is double ? a : throw RuntimeError(\"Type Error\");\n    var b1 = b is String ? float(b.replaceAll(',', '.')) : b is int ? float(b) : b is double ? b : throw RuntimeError(\"Type Error\");\n    return a1 == b1 ? null : a1 > b1 ? a1 : b1;\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    var fact = 1;\n    var result = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "String fixSpaces(String txt) {\n    return txt.replaceAll(\"\\\\s{3,}\", \"-\");\n}\n",
            "String fileNameCheck(String fileName) {\n    var lst = fileName.split(\".\");\n    if (lst.length != 2 || !lst[1].contains(\"txt\") || lst[0].length == 0 || !lst[0][0].isalpha() || lst[0].contains(\"123\")) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "int sumSquares(List<int> lst) {\n    var result = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            result += pow(lst[i], 2);\n        } else if (i % 4 == 0) {\n            result += pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "String wordsInSentence(String sentence) {\n    var words = sentence.split(\" \");\n    return \" \".join([w for w in words if isPrime(w.length)]);\n}\n",
            "bool simplify(String x, String n) {\n    var xs = x.split(\"/\");\n    var ns = n.split(\"/\");\n    var num = int.parse(xs[0]) * int.parse(ns[0]);\n    var den = int.parse(xs[1]) * int.parse(ns[1]);\n    return num % den == 0;\n}\n",
            "int digitsSum(int n) {\n    var nStr = n.toString();\n    if (n >= 0) {\n        return nStr.length > 1 ? nStr.substring(1).sum() : nStr.sum();\n    } else {\n        return nStr.length > 1 ? nStr.substring(1).sum() * 2 + digitsSum(abs(n)) : nStr.sum();\n    }\n}\nList<int> orderByPoints(List<int> nums) {\n    return nums.sort(compare: (a, b) {\n        return digitsSum(a) - digitsSum(b);\n    });\n}\n",
            "int specialFilter(List<int> nums) {\n    var odds = \"13579\";\n    return nums.length > 10 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.first.modifier == 1 && nums.map.get(\n    nums.map.get(num.map.get(num.map.get(num.map.get(num.map.get(num.map.get(num.map.get(num.get.map(num.get.map(num.get.map(num.get\n    num.map.get.map(num.get.map(num.get.map(num.get.map(num.get.map(num.get.map(num.get.map(num.get.get.map(num.get.map(num.get.map(num.get.map(num.get.map(num.get.map(num.get.map(num.get.map(num.get.map(num.get.map.get.map(num.map(num.map.get.map(num.map.get\n.get.map(num.map(num.get.map(num.get.map.get.map(num.map(num.get.map.get.map.get.map(num.map.get\n.map.get.map.get.map.get.map.map.get.map.get.map.get.map.get.map.get.map.map(num.map.get.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map.map",
            "int getMaxTriples(int n) {\n    var c = [0, 0, 0];\n    for (int i = 1; i <= n; i++) {\n        var a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6;\n}\n",
            "List<String> bf(String planet1, String planet2) {\n    var names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (planet1 not in names or planet2 not in names) {\n        return [];\n    }\n    var l = names.indexOf(planet1);\n    var r = names.indexOf(planet2);\n    if (l > r) {\n        l, r = r, l;\n    }\n    if (l == r) {\n        return [];\n    }\n    return names.sublist(l + 1, r);\n}\n",
            "List<String> sortedListSum(List<String> lst) {\n    var result = <String>[];\n    for (String s in lst) {\n        if (s.length % 2 == 0) {\n            result.add(s);\n        }\n    }\n    return result.sort(compare: (a, b) {\n        a.length > b.length ? -1 : a.length < b.length ? 1 : a.compareTo(b);\n    });\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= n.toInt(); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(List<double> lst) {\n    var result = 0;\n    for (var n in lst) {\n        if (n >= 0 && n % 2 == 1) {\n            result += n * n;\n        }\n    }\n    return result;\n}\n",
            "List<int> compare(List<int> game, List<int> guess) {\n    var result = <int>[];\n    for (int i = 0; i < game.length; i++) {\n        result.add(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}\n",
            "String strongestExtension(String className, List<String> extensions) {\n    var maxS = -Infinity;\n    var maxExt = \"\";\n    for (var ext in extensions) {\n        var upper = ext.length - [c for c in ext if c.isUpper()].length;\n        var lower = ext.length - [c for c in ext if c.isLower()].length;\n        var s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return f\"{className}.{maxExt}\";\n}\n",
            "bool cycpatternCheck(String a, String b) {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (int i = 0; i < b.length; i++) {\n        if (b.substring(i) + b.substring(0, i) in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "int evenOddCount(int num) {\n    var ds = num < 0 ? String.fromAbsoluteValue(num) : String(num);\n    var even = ds.length - ds.length % 2;\n    return [even, ds.length - even];\n}\n",
            "String intToMiniRoman(int num) {\n    var values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    var numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var res = [];\n    for (int i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.add(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return \"\".join(res);\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    var s = [a, b, c].sort();\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}\n",
            "String findMax(List<String> words) {\n    var maxCnt = 0;\n    var maxW = \"\";\n    for (var w in words) {\n        var cnt = w.length;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        }\n        elif (cnt == maxCnt) {\n            maxW = min(maxW, w);\n        }\n    }\n    return maxW;\n}\n",
            "List<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "int doAlgebra(List<String> operators, List<int> operands) {\n    var ops = operators.copy();\n    var nums = operands.copy();\n    var i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]);\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n        }\n        i--;\n    }\n    var i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i--;\n        }\n        elif (ops[i] == \"//\") {\n            nums[i] = nums[i] // nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i--;\n        }\n        i++;\n    }\n    var i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i--;\n        }\n        elif (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i--;\n        }\n        i++;\n    }\n    return nums[0];\n}\n",
            "String solve(String s) {\n    var result = \"\";\n    for (var ch in s) {\n        if (!ch.isLetter()) {\n            result += ch;\n        } else {\n            if (ch.isUpper()) {\n                result += ch.lower();\n            } else {\n                result += ch.upper();\n            }\n        }\n    }\n    return result;\n}\n",
            "String? stringToMd5(String txt) {\n    var md5_hash = MD5.new(txt.encode());\n    var md5_encoded = md5_hash.digest.toString();\n    return md5_encoded;\n}\n",
            "int max(int a, int b) {\n    return a > b ? a : b;\n}\nint min(int a, int b) {\n    return a < b ? a : b;\n}\nList<int> generateIntegers(int a, int b) {\n    int lower = max(2, min(a, b));\n    int upper = min(8, max(a, b));\n    return [i for i in <int>[lower, upper + 1] if i % 2 == 0];\n}\n"
        ],
        "go": [
            "func HasCloseElements(numbers []float64, threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func SeparateParenGroups(parenString string) []string {\n    groups := []string{}\n    stk := []byte{}\n    currentGroup := \"\"\n    parens := parenString.Replace(\" \", \"\")\n    for ch := range parens {\n        if ch == '(' {\n            stk = append(stk, ch)\n            currentGroup += ch\n        } elif ch == ')' {\n            stk = append(stk, ch)\n            currentGroup += ch\n            if len(stk) == 0 {\n                groups = append(groups, currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "func TruncateNumber(num float64) float64 {\n    return num - math.Floor(num)\n}\n",
            "func BelowZero(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func MeanAbsoluteDeviation(numbers []float64) float64 {\n    mean := 0.0\n    for i, n := range numbers {\n        mean += n\n    }\n    mean /= float64(len(numbers))\n    sumDeviation := 0.0\n    for i, n := range numbers {\n        sumDeviation += abs(n - mean)\n    }\n    return sumDeviation / float64(len(numbers))\n}\n",
            "func Intersperse(numbers []int, delimiter int) []int {\n    result := make([]int, 0)\n    for i, n := range numbers {\n        if i != 0 {\n            result = append(result, delimiter)\n        }\n        result = append(result, n)\n    }\n    return result\n}\n",
            "func ParseNestedParens(parenString string) []int {\n    result := make([]int, 0)\n    parenGroups := strings.Split(parenString, \" \")\n    for _, group := range parenGroups {\n        maxDepth := 0\n        depth := 0\n        for _, ch := range group {\n            if ch == \"(\" {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } elif ch == \")\" {\n                depth -= 1\n            }\n        }\n        result = append(result, maxDepth)\n    }\n    return result\n}\n",
            "func FilterBySubstring(strs []string, substring string) []string {\n    result := make([]string, 0)\n    for _, s := range strs {\n        if substring in s {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
            "func SumProduct(numbers []int) []int {\n    nSum := 0\n    nProduct := 1\n    for _, n := range numbers {\n        nSum += n\n        nProduct *= n\n    }\n    return [nSum, nProduct]\n}\n",
            "func RollingMax(numbers []int) []int {\n    result := make([]int, len(numbers))\n    for i, num := range numbers {\n        maxSoFar := num\n        for j, _ := range result[:i] {\n            if num > result[j] {\n                maxSoFar = result[j]\n            }\n        }\n        result[i] = maxSoFar\n    }\n    return result\n}\n",
            "func IsPalindrome(s string) bool {\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[len(s)-1-i] {\n            return false\n        }\n    }\n    return true\n}\nfunc MakePalindrome(s string) string {\n    for i := 0; i < len(s); i++ {\n        if IsPalindrome(s[i:]) {\n            return s\n        }\n    }\n    return s + s[:i][::-1]\n}\n",
            "func StringXor(a string, b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n    return result\n}\n",
            "func Longest(strs []string) *string {\n    longest_s := strs[0]\n    for _, s := range strs {\n        if len(s) > len(longest_s) {\n            longest_s = s\n        }\n    }\n    return &longest_s\n}\n",
            "func GreatestCommonDivisor(a int, b int) int {\n    if b == 0 {\n        return a\n    }\n    return GreatestCommonDivisor(b, a % b)\n}\n",
            "func AllPrefixes(s string) []string {\n    prefixes := make([]string, 0)\n    for i := 0; i < len(s); i++ {\n        prefixes = append(prefixes, s[:i+1])\n    }\n    return prefixes\n}\n",
            "func StringSequence(n int) string {\n    return strings.Join(\" \", strings.FromInt(strconv.Itoa(n + 1)))\n}\n",
            "func CountDistinctCharacters(s string) int {\n    return len(map[string]bool{})\n}\n",
            "func ParseMusic(musicString string) []int {\n    durations := map[string]int{\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    }\n    notes := strings.Split(musicString, \" \")\n    result := make([]int, 0)\n    for note := range notes {\n        result = append(result, durations[note])\n    }\n    return result\n}\n",
            "func HowManyTimes(s string, substring string) int {\n    times := 0\n    for i := 0; i < len(s) - len(substring) + 1; i++ {\n        if s[i:i+len(substring)] == substring {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "func SortNumbers(numbers string) string {\n    numDict := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    numList := []string{}\n    for _, num := range strings.Split(numbers, \" \") {\n        if num in numDict {\n            numList = append(numList, num)\n        }\n    }\n    sort.Slice(numList, func(i, j int) bool {\n        return numDict[numList[i]] < numDict[numList[j]]\n    })\n    return strings.Join(numList, \" \")\n}\n",
            "func FindClosestElements(numbers []float64) []float64 {\n    sorted_numbers := sort.Float64Slice(numbers)\n    min_diff := float64(math.Inf)\n    closest_pair := []float64{}\n    for i := 1; i < len(sorted_numbers); i++ {\n        diff := sorted_numbers[i] - sorted_numbers[i-1]\n        if diff < min_diff {\n            min_diff = diff\n            closest_pair = []float64{sorted_numbers[i-1], sorted_numbers[i]}\n        }\n    }\n    return closest_pair\n}\n",
            "func RescaleToUnit(numbers []float64) []float64 {\n    minNum := min(numbers)\n    maxNum := max(numbers)\n    if minNum == maxNum {\n        return make([]float64, len(numbers))\n    }\n    result := make([]float64, len(numbers))\n    for i, num := range numbers {\n        result[i] = (num - minNum) / (maxNum - minNum)\n    }\n    return result\n}\n",
            "func FilterIntegers(values []interface{}) []int {\n    result := make([]int, 0)\n    for _, v := range values {\n        if v != nil && v != 0 && v != 0.0 && v != 0.00 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
            "func StrLength(s string) int {\n    return len(s)\n}\n",
            "func LargestDivisor(n int) int {\n    for i := 2; n % i != 0; i++ {\n        if n % i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "func Factorize(n int) []int {\n    factors := make([]int, 0)\n    divisor := 2\n    for divisor <= n {\n        if n % divisor == 0 {\n            factors = append(factors, divisor)\n            n = n / divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "func RemoveDuplicates(numbers []int) []int {\n    counts := make(map[int]int)\n    for num := range numbers {\n        counts[num] = counts.get(num, 0) + 1\n    }\n    res := make([]int, 0)\n    for num, count := range counts {\n        if count == 1 {\n            res = append(res, num)\n        }\n    }\n    return res\n}\n",
            "func FlipCase(s string) string {\n    result := make([]byte, 0)\n    for _, ch := range s {\n        if !ch.IsLower() && !ch.IsUpper() {\n            result = append(result, ch)\n        } else {\n            result = append(result, ch.ToLower())\n        }\n    }\n    return string(result)\n}\n",
            "func Concatenate(strs []string) string {\n    return strings.Join(\"\", strs)\n}\n",
            "func FilterByPrefix(strs []string, prefixStr string) []string {\n    result := make([]string, 0)\n    for _, s := range strs {\n        if strings.HasPrefix(s, prefixStr) {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
            "func GetPositive(l []int) []int {\n    result := make([]int, 0)\n    for _, e := range l {\n        if e > 0 {\n            result = append(result, e)\n        }\n    }\n    return result\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Poly(xs []int, x float64) float64 {\n    res := 0.0\n    for i, xi := range xs {\n        res += xi * x**i\n    }\n    return res\n}\nfunc FindZero(xs []int) float64 {\n    x1, x2 := 1.0, -1.0\n    for x1*x2 > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    for abs(x1 - x2) > 1e-10 {\n        mid := (x1 + x2) / 2\n        if Poly(xs, mid) == 0 {\n            return mid\n        }\n        if Poly(xs, mid) * Poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "func SortThird(l []int) []int {\n    sortedThird := sort.IntSlice(l[::3])\n    result := make([]int, len(l))\n    for i, e := range l {\n        if i % 3 == 0 {\n            result[i] = sortedThird[i // 3]\n        } else {\n            result[i] = e\n        }\n    }\n    return result\n}\n",
            "func ListUnique(l []int) []int {\n    result := make([]int, 0)\n    for _, e := range l {\n        if len(result) == 0 || e != result[len(result)-1] {\n            result = append(result, e)\n        }\n    }\n    return result\n}\n",
            "func MaxElement(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n    return max(l)\n}\n",
            "func FizzBuzz(n int) int {\n    cnt := 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += strconv.Count(str(i), \"7\")\n        }\n    }\n    return cnt\n}\n",
            "func SortEven(l []int) []int {\n    sortedEven := sort.IntSlice(l[::2])\n    result := make([]int, len(l))\n    for i, e := range l {\n        if i % 2 == 0 {\n            result[i] = sortedEven[i // 2]\n        } else {\n            result[i] = e\n        }\n    }\n    return result\n}\n",
            "func EncodeCyclic(s string) string {\n    result := make([]byte, 0)\n    for i := 0; i < len(s); i += 3 {\n        if i + 3 > len(s) {\n            result = append(result, s[i:])\n        } else {\n            result = append(result, s[i+1:i+3])\n            result = append(result, s[i])\n        }\n    }\n    return string(result)\n}\nfunc DecodeCyclic(s string) string {\n    return EncodeCyclic(EncodeCyclic(s))\n}\n",
            "func PrimeFib(n int) int {\n    f := [0, 1]\n    cnt := 0\n    for cnt < n {\n        f = [f[1], f[0] + f[1]]\n        if isPrime(f[1]) {\n            cnt += 1\n        }\n    }\n    return f[1]\n}\n",
            "func TriplesSumToZero(l []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func CarRaceCollision(n int) int {\n    return n*n\n}\n",
            "func IncrList(l []int) []int {\n    result := make([]int, len(l))\n    for i, e := range l {\n        result[i] = e + 1\n    }\n    return result\n}\n",
            "func PairsSumToZero(l []int) bool {\n    seen := make(map[int]bool)\n    for _, num := range l {\n        if -num in seen {\n            return true\n        }\n        seen[num] = true\n    }\n    return false\n}\n",
            "func ChangeBase(x int, bas int) string {\n    digits := make([]string, 0)\n    for x > 0 {\n        digits = append(digits, string(x % bas))\n        x /= bas\n    }\n    return string(reverse(digits))\n}\n",
            "func TriangleArea(a int, h int) float64 {\n    return float64(a * h) / float64(2)\n}\n",
            "func Fib4(n int) int {\n    fib := [4]int{0, 0, 2, 0}\n    for i := 4; i <= n; i++ {\n        fib[i % 4] = sum(fib)\n    }\n    return fib[n % 4]\n}\n",
            "func Median(l []float64) float64 {\n    l = sort.Slice(l)\n    if len(l) % 2 != 0 {\n        return l[len(l) / 2]\n    }\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n}\n",
            "func IsPalindrome(txt string) bool {\n    for i := 0; i < len(txt); i++ {\n        if txt[i] != txt[len(txt)-1-i] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Modp(n int, p int) int {\n    var ret int = 1\n    for i := 0; i < n; i++ {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func EncodeShift(s string) string {\n    result := make([]byte, len(s))\n    for i, ch := range s {\n        result[i] = (byte)((ch - 97 + 5) % 26 + 97)\n    }\n    return string(result)\n}\nfunc DecodeShift(s string) string {\n    result := make([]byte, len(s))\n    for i, ch := range s {\n        result[i] = (byte)((ch - 97 + 21) % 26 + 97)\n    }\n    return string(result)\n}\n",
            "func RemoveVowels(txt string) string {\n    vowels := \"aeiouAEIOU\"\n    result := \"\"\n    for _, char := range txt {\n        if char not in vowels {\n            result += char\n        }\n    }\n    return result\n}\n",
            "func BelowThreshold(l []int, t int) bool {\n    for _, e := range l {\n        if e < t {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Add(x int, y int) int {\n    return x + y\n}\n",
            "func SameChars(s0 string, s1 string) bool {\n    return len(s0) == len(s1) && len(s0) > 0 && len(s1) > 0 && s0 == s1\n}\n",
            "func Fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    a := 0\n    b := 1\n    for i := 0; i < n - 1; i++ {\n        a, b = b, a + b\n    }\n    return b\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == \"<\" {\n            depth += 1\n        } else if b == \">\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Monotonic(l []int) bool {\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Common(l1 []int, l2 []int) []int {\n    result := make([]int, 0)\n    for _, e := range l1 {\n        if e in l2 {\n            result = append(result, e)\n        }\n    }\n    return result\n}\n",
            "func LargestPrimeFactor(n int) int {\n    for i := 2; n % i != 0; i++ {\n        if isPrime(i) {\n            return i\n        }\n    }\n    return n\n}\nfunc isPrime(n int) bool {\n    for i := 2; i*i <= n; i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func SumToN(n int) int {\n    result := 0\n    for i := 0; i <= n; i++ {\n        result += i\n    }\n    return result\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == \"(\" {\n            depth += 1\n        } else if b == \")\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Derivative(xs []int) []int {\n    result := make([]int, len(xs))\n    for i := 1; i < len(xs); i++ {\n        result[i] = xs[i] * i\n    }\n    return result\n}\n",
            "func Fibfib(n int) int {\n    a, b, c := 0, 0, 1\n    for n > 2 {\n        a, b, c = b, c, a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "func VowelsCount(s string) int {\n    vowels := \"aeiou\"\n    cnt := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'y' && i == len(s)-1 {\n            cnt += 1\n        } else if s[i] == 'y' {\n            cnt += 1\n            i += 1\n        } else if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "func CircularShift(x int, shift int) string {\n    x_str := str(x)\n    if shift > len(x_str) {\n        return x_str[::-1]\n    }\n    return x_str[len(x_str)-shift:] + x_str[:len(x_str)-shift]\n}\n",
            "func DigitSum(s string) int {\n    sum := 0\n    for _, c := range s {\n        if c.IsUpper() {\n            sum += ord(c)\n        }\n    }\n    return sum\n}\n",
            "func FruitDistribution(s string, n int) int {\n    apples, oranges := 0, 0\n    for _, w := range strings.Split(s, \" \") {\n        if w == \"apples\" {\n            apples = n\n        } else if w == \"oranges\" {\n            oranges = n\n        }\n    }\n    return apples + oranges\n}\n",
            "func Pluck(arr []int) []int {\n    evens := []int{}\n    for e := range arr {\n        if e % 2 == 0 {\n            evens = append(evens, e)\n        }\n    }\n    if len(evens) == 0 {\n        return []int{}\n    }\n    minEven := min(evens)\n    return []int{minEven, arr.Index(minEven)}\n}\n",
            "func Search(lst []int) int {\n    freqs := make(map[int]int)\n    for _, n := range lst {\n        freqs[n] = freqs.get(n, 0) + 1\n    }\n    goodVals := []int{}\n    for k, v := range freqs {\n        if v >= k {\n            goodVals = append(goodVals, k)\n        }\n    }\n    return max(goodVals, default=-1)\n}\n",
            "func StrangeSortList(lst []int) []int {\n    sl := sort.IntSlice(lst)\n    result := make([]int, 0)\n    left, right := 0, len(sl) - 1\n    for left <= right {\n        result = append(result, sl[left])\n        left += 1\n        if left <= right {\n            result = append(result, sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "func TriangleArea(a int, b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n        s := float64(a + b + c) / 2.0\n        return math.Sqrt(s * (s - a) * (s - b) * (s - c))\n    }\n    return -1.0\n}\n",
            "func WillItFly(q []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n    isPalin := all(q[i] == q[len(q)-i-1] for i in range(len(q)))\n    total := sum(q)\n    return isPalin && total <= w\n}\n",
            "func SmallestChange(arr []int) int {\n    ans := 0\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] != arr[len(arr)-i-1] {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "func TotalMatch(lst1 []string, lst2 []string) []string {\n    cnt1 := 0\n    cnt2 := 0\n    for _, s := range lst1 {\n        cnt1 += len(s)\n    }\n    for _, s := range lst2 {\n        cnt2 += len(s)\n    }\n    return lst1 if cnt1 <= cnt2 else lst2\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc IsMultiplyPrime(a int) bool {\n    cnt := 0\n    for i := 2; i <= a; i++ {\n        if IsPrime(i) {\n            while a % i == 0 {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "func IsSimplePower(x int, n int) bool {\n    if n < 2 {\n        return x == n\n    }\n    tmp := 1\n    for tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "func IsCube(a int) bool {\n    return math.Pow(float64(a), float64(1.0/3.0)) == math.Pow(float64(a), float64(1.0/3.0))\n}\n",
            "func HexKey(num string) int {\n    count := 0\n    for _, c := range num {\n        if c == \"2\" || c == \"3\" || c == \"5\" || c == \"7\" || c == \"B\" || c == \"D\" {\n            count += 1\n        }\n    }\n    return count\n}\n",
            "func DecimalToBinary(dec int) string {\n    binary := fmt.Sprintf(\"%b\", dec)\n    return \"db\" + binary + \"db\"\n}\n",
            "func IsHappy(s string) bool {\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func NumericalLetterGrade(grades []float64) []string {\n    result := make([]string, 0)\n    for _, g := range grades {\n        if g == 4.0 {\n            result = append(result, \"A+\")\n        } else if g > 3.7 {\n            result = append(result, \"A\")\n        } else if g > 3.3 {\n            result = append(result, \"A-\")\n        } else if g > 3.0 {\n            result = append(result, \"B+\")\n        } else if g > 2.7 {\n            result = append(result, \"B\")\n        } else if g > 2.3 {\n            result = append(result, \"B-\")\n        } else if g > 2.0 {\n            result = append(result, \"C+\")\n        } else if g > 1.7 {\n            result = append(result, \"C\")\n        } else if g > 1.3 {\n            result = append(result, \"C-\")\n        } else if g > 1.0 {\n            result = append(result, \"D+\")\n        } else if g > 0.7 {\n            result = append(result, \"D\")\n        } else if g > 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n",
            "func PrimeLength(s string) bool {\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i*i <= length; i++ {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func StartsOneEnds(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * (10 ^ (n - 2))\n}\n",
            "func Solve(n int) string {\n    digitsSum := 0\n    for _, d := range strconv.Itoa(n) {\n        digitsSum += int(d)\n    }\n    return strconv.Itob(digitsSum)\n}\n",
            "func Add(lst []int) int {\n    result := 0\n    for i, x := range lst {\n        if i % 2 == 1 && x % 2 == 0 {\n            result += x\n        }\n    }\n    return result\n}\n",
            "func AntiShuffle(s string) string {\n    words := strings.Split(s, \" \")\n    result := make([]string, 0)\n    for _, word := range words {\n        result = append(result, strings.Join(strings.Sort(strings.ToLower(word)), \" \"))\n    }\n    return strings.TrimRight(strings.Join(result, \"\"), \" \")\n}\n",
            "func GetRow(lst [][]int, x int) [][]int {\n    coords := make([][]int, 0)\n    for i, row := range lst {\n        for j, elem := range row {\n            if elem == x {\n                coords = append(coords, [i, j])\n            }\n        }\n    }\n    return coords\n}\n",
            "func SortArray(arr []int) []int {\n    // Implementation here\n}\n",
            "func Encrypt(s string) string {\n    result := \"\"\n    for _, ch := range s {\n        shifted := (ord(ch) + 4) % 26\n        result += string(rune(shifted + 97))\n    }\n    return result\n}\n",
            "func NextSmallest(lst []int) *int {\n    sl := sort.Slice(lst, func(i, j int) bool { return lst[i] < lst[j] })\n    if len(sl) < 2 {\n        return nil\n    }\n    return &sl[1]\n}\n",
            "func IsBored(s string) int {\n    sentences := strings.Split(s, \".\")\n    count := 0\n    for _, sentence := range sentences {\n        if len(sentence) >= 2 && sentence[:2] == \"I \" {\n            count += 1\n        }\n    }\n    return count\n}\n",
            "func AnyInt(x interface{}, y interface{}, z interface{}) bool {\n    if type(x) == type(y) == type(z) == type(int) {\n        if x + y == z || x + z == y || y + z == x {\n            return true\n        }\n    }\n    return false\n}\n",
            "func Encode(message string) string {\n    result := \"\"\n    for _, ch := range message {\n        if ch.IsLower() {\n            ch1 = ch.ToUpper()\n            if ch1 == 'A' {\n                ch1 = '2'\n            } else if ch1 == 'E' {\n                ch1 = '3'\n            } else if ch1 == 'I' {\n                ch1 = '4'\n            } else if ch1 == 'O' {\n                ch1 = '5'\n            } else if ch1 == 'U' {\n                ch1 = '6'\n            }\n            result += ch1\n        } else {\n            result += ch\n        }\n    }\n    return result\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc Skjkasdkd(lst []int) int {\n    primes := make([]int, 0)\n    for n := range lst {\n        if IsPrime(n) {\n            primes = append(primes, n)\n        }\n    }\n    if len(primes) == 0 {\n        return 0\n    }\n    largest := str(max(primes))\n    result := 0\n    for _, digit := range largest {\n        result += int(digit)\n    }\n    return result\n}\n",
            "func CheckDictCase(d map[string]string) bool {\n    for k, v := range d {\n        if !(v.IsLower() || v.IsUpper()) {\n            return false\n        }\n    }\n    return true\n}\n",
            "func CountUpTo(n int) []int {\n    primes := make([]int, 0)\n    for num := 2; num < n; num++ {\n        if all(num % p != 0 for p in primes) {\n            primes = append(primes, num)\n        }\n    }\n    return primes\n}\n",
            "func Multiply(a int, b int) int {\n    return (abs(a) % 10) * (abs(b) % 10)\n}\n",
            "func CountUpper(s string) int {\n    vowels := \"AEIOU\"\n    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c in vowels {\n            count += 1\n        }\n    }\n    return count\n}\n",
            "func ClosestInteger(value string) int {\n    num := float(value)\n    if num >= 0 {\n        return int(num + 0.5)\n    }\n    return int(num - 0.5)\n}\n",
            "func MakeAPile(n int) []int {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i] = n + 2 * i\n    }\n    return result\n}\n",
            "func WordsString(s string) []string {\n    result := []string{}\n    for _, w := range re.Split(`[, ]`, s) {\n        if len(w) > 0 {\n            result = append(result, w)\n        }\n    }\n    return result\n}\n",
            "func ChooseNum(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if y%2 == 0 {\n        return y\n    }\n    if x != y {\n        return y - 1\n    }\n    return -1\n}\n",
            "func RoundedAvg(n int, m int) *string {\n    rAvg := (m + n) / 2.0 + 0.5\n    return fmt.Sprintf(\"%b\", int(rAvg))\n}\n",
            "func UniqueDigits(x []int) []int {\n    result := make([]int, 0)\n    for _, num := range x {\n        if allDigitsOdd(str(num)) {\n            result = append(result, num)\n        }\n    }\n    return sort(result)\n}\n",
            "func ByLength(arr []int) []string {\n    digitNames := []string{\n        \"One\",\n        \"Two\",\n        \"Three\",\n        \"Four\",\n        \"Five\",\n        \"Six\",\n        \"Seven\",\n        \"Eight\",\n        \"Nine\",\n    }\n    sortedArr := sort.IntSlice(arr)\n    sortedArr = sortedArr[:len(sortedArr)-1]\n    result := make([]string, 0)\n    for i, e := range sortedArr {\n        result = append(result, digitNames[e-1])\n    }\n    return result\n}\n",
            "func F(n int) []int {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i % 2 != 0 {\n            result[i] = i + 1\n        } else {\n            result[i] = 1\n            for j := 1; j < i + 1; j++ {\n                result[i] *= j\n            }\n        }\n    }\n    return result\n}\n",
            "func IsPalindrome(txt string) bool {\n    return txt == txt[::-1]\n}\nfunc EvenOddPalindrome(n int) []int {\n    cnt := [0]*2\n    for i := 1; i <= n; i++ {\n        if IsPalindrome(str(i)) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}\n",
            "func DigitsSum(n int) int {\n    if n >= 0 {\n        return sum(int(d) for d in str(n))\n    }\n    return int(str(n)[:2]) * 2 + DigitsSum(abs(n))\n}\nfunc CountNums(arr []int) int {\n    return len([n for n in arr if DigitsSum(n) > 0])\n}\n",
            "func MoveOneBall(arr []int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i:] == sort(arr[i:]) && arr[:i] == sort(arr[:i]) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func CanExchange(lst1 []int, lst2 []int) string {\n    oddCnt := 0\n    for _, num := range lst1 {\n        if num % 2 != 0 {\n            oddCnt += 1\n        }\n    }\n    evenCnt := 0\n    for _, num := range lst2 {\n        if num % 2 == 0 {\n            evenCnt += 1\n        }\n    }\n    return \"YES\" if evenCnt >= oddCnt else \"NO\"\n}\n",
            "func Histogram(test string) map[string]int {\n    freq := make(map[string]int)\n    words := [w for w in test.split(\" \") if len(w) > 0]\n    for w in words {\n        freq[w] = freq.get(w, 0) + 1\n    }\n    result := make(map[string]int)\n    if len(freq) > 0 {\n        maxFreq := 0\n        for k, v := freq.items() {\n            if v > maxFreq {\n                maxFreq = v\n            }\n        }\n        for k, v := freq.items() {\n            if v == maxFreq {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "func ReverseDelete(s string, c string) []string {\n    result := []string{}\n    for _, ch := range s {\n        if ch != c {\n            result = append(result, ch)\n        }\n    }\n    if isPalindrome(result) {\n        result = append(result, \"yes\")\n    } else {\n        result = append(result, \"no\")\n    }\n    return result\n}\n",
            "func OddCount(lst []string) []string {\n    result := make([]string, 0)\n    for _, s := range lst {\n        n := 0\n        for _, c := range s {\n            if ord(c) % 2 == 1 {\n                n += 1\n            }\n        }\n        rs := \"the number of odd elements in the string \" + str(n) + \" of the input.\"\n        result = append(result, rs)\n    }\n    return result\n}\n",
            "func MinSubArraySum(nums []int) int {\n    minSum := 0\n    curSum := 0\n    for _, n := range nums {\n        curSum = min(curSum+n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if minSum == 0 {\n        minSum = min(nums)\n    }\n    return minSum\n}\n",
            "func MaxFill(grid [][]int, capacity int) int {\n    result := 0\n    for i, arr := range grid {\n        for j, e := range arr {\n            result += (e / capacity)\n            if e % capacity != 0 {\n                result += 1\n            }\n        }\n    }\n    return result\n}\n",
            "func SortArray(arr []int) []int {\n    // Implementation here\n}\n",
            "func SelectWords(s string, n int) []string {\n    consonants := \"bcdfghjklmnpqrstvwxyz\"\n    words := strings.Split(s, \" \")\n    return [w for w in words if len([c for c in w if c.Lower() in consonants]) == n]\n}\n",
            "func GetClosestVowel(word string) string {\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 2; i > 0; i-- {\n        if word[i] in vowels && word[i-1] not in vowels && word[i+1] not in vowels {\n            return word[i]\n        }\n    }\n    return \"\"\n}\n",
            "func MatchParens(lst []string) string {\n    s1 := lst[0] + lst[1]\n    s2 := lst[1] + lst[0]\n    if check(s1) || check(s2) {\n        return \"Yes\"\n    }\n    return \"No\"\n}\n",
            "func Maximum(arr []int, k int) []int {\n    result := make([]int, 0)\n    for _, e := range arr {\n        result = append(result, e)\n        if len(result) > k {\n            result = result[:k]\n        }\n    }\n    return result\n}\n",
            "func Solution(lst []int) int {\n    result := 0\n    for i, x := range lst {\n        if i % 2 == 0 && x % 2 != 0 {\n            result += x\n        }\n    }\n    return result\n}\n",
            "func AddElements(arr []int, k int) int {\n    result := 0\n    for i, e := range arr[:k] {\n        if len(str(e)) <= 2 {\n            result += e\n        }\n    }\n    return result\n}\n",
            "func GetOddCollatz(n int) []int {\n    collatz := []int{1}\n    for n != 1 {\n        if n % 2 != 0 {\n            collatz = append(collatz, n)\n            n = 3 * n + 1\n        } else {\n            n = n // 2\n        }\n    }\n    return sort.IntSlice(collatz)\n}\n",
            "func ValidDate(date string) bool {\n    if len(date) != 10 || date[2] != \"-\" || date[5] != \"-\":\n        return false\n    m := int(date[:2])\n    d := int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31:\n        return true\n    if m in [4, 6, 9, 11] && d >= 1 && d <= 30:\n        return true\n    if m == 2 && d >= 1 && d <= 29:\n        return true\n    return false\n}\n",
            "func SplitWords(txt string) []string {\n    if \" \" in txt {\n        return strings.Split(txt, \" \")\n    }\n    if \",\" in txt {\n        return strings.Split(txt, \",\")\n    }\n    return []string{\n        strings.Split(txt, \"\")[0]\n    }\n}\n",
            "func IsSorted(lst []int) bool {\n    for i := 1; i < len(lst); i++ {\n        if lst[i-1] > lst[i] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Intersection(interval1 []int, interval2 []int) string {\n    l := max(interval1[0], interval2[0])\n    r := min(interval1[1], interval2[1])\n    length := r - l\n    if length > 0 && isPrime(length) {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
            "func ProdSigns(arr []int) *int {\n    sign := 1\n    for _, n := range arr {\n        if n < 0 {\n            sign = -sign\n        }\n    }\n    return sign * sum(arr)\n}\n",
            "func MinPath(grid [][]int, k int) []int {\n    n := len(grid)\n    minVal := n * n + 1\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if grid[i][j] == 1 {\n                temp := []int{}\n                if i != 0 {\n                    temp = append(temp, grid[i - 1][j])\n                }\n                if j != 0 {\n                    temp = append(temp, grid[i][j - 1])\n                }\n                if i != n - 1 {\n                    temp = append(temp, grid[i + 1][j])\n                }\n                if j != n - 1 {\n                    temp = append(temp, grid[i][j + 1])\n                }\n                minVal = min(temp)\n            }\n        }\n    }\n    result := make([]int, 0)\n    for i := 0; i < k; i++ {\n        result = append(result, 1 if i % 2 == 0 else minVal)\n    }\n    return result\n}\n",
            "func Tri(n int) []int {\n    seq := []int{1, 3}\n    for i := 2; i <= n; i++ {\n        if i % 2 == 0 {\n            seq = append(seq, i / 2 + 1)\n        } else {\n            seq = append(seq, seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "func Digits(n int) int {\n    result := 1\n    for _, d := range str(n) {\n        if int(d) % 2 == 1 {\n            result *= int(d)\n        }\n    }\n    return result\n}\n",
            "func IsNested(s string) bool {\n    openIdx := []int{}\n    closeIdx := []int{}\n    for i, ch := range s {\n        if ch == '[' {\n            openIdx = append(openIdx, i)\n        } elif ch == ']' {\n            closeIdx = append(closeIdx, i)\n        }\n    }\n    closeIdx = closeIdx[::-1]\n    cnt := 0\n    i := 0\n    l := len(closeIdx)\n    for idx := openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\n",
            "func SumSquares(lst []float64) int {\n    result := 0\n    for _, n := range lst {\n        result += math.Pow(math.Ceil(n), 2)\n    }\n    return result\n}\n",
            "func CheckIfLastCharIsALetter(txt string) bool {\n    if len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n    if len(last) != 1 {\n        return false\n    }\n    return last[0].IsAlpha()\n}\n",
            "func CanArrange(arr []int) int {\n    if len(arr) <= 1 {\n        return -1\n    }\n    idx := []int{}\n    for i, e := range arr {\n        if e < arr[i - 1] {\n            idx = append(idx, i)\n        }\n    }\n    return max(idx, default=-1)\n}\n",
            "func LargestSmallestIntegers(lst []int) []*int {\n    neg := make([]int, 0)\n    pos := make([]int, 0)\n    for _, e := range lst {\n        if e < 0 {\n            neg = append(neg, e)\n        } else {\n            pos = append(pos, e)\n        }\n    }\n    maxNeg, minPos := 0, 0\n    if len(neg) > 0 {\n        maxNeg = max(neg)\n    }\n    if len(pos) > 0 {\n        minPos = min(pos)\n    }\n    return [maxNeg, minPos]\n}\n",
            "func CompareOne(a interface{}, b interface{}) *float64 {\n    a1 := anyToReal(a)\n    b1 := anyToReal(b)\n    if a1 == b1 {\n        return nil\n    }\n    elif a1 > b1 {\n        return a1\n    }\n    else {\n        return b1\n    }\n}\n",
            "func IsEqualToSumEven(n int) bool {\n    return n%2 == 0 && n >= 8\n}\n",
            "func SpecialFactorial(n int) int {\n    fact := 1\n    result := 1\n    for i := 1; i <= n; i++ {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "func FixSpaces(txt string) string {\n    return re.Replace(r\"\\s{3,}\", \"-\", txt).Replace(\" \", \"_\")\n}\n",
            "func FileNameCheck(fileName string) string {\n    lst := strings.Split(fileName, \".\")\n    if len(lst) != 2 || lst[1] != \"txt\" && lst[1] != \"exe\" && lst[1] != \"dll\" || len(lst[0]) == 0 || !strings.IsIdentifier(lst[0]) || len([x for x in lst[0] if x.IsDigit()]) > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "func SumSquares(lst []int) int {\n    result := 0\n    for i, e := range lst {\n        if i % 3 == 0 {\n            result += pow(e, 2)\n        } else if i % 4 == 0 {\n            result += pow(e, 3)\n        } else {\n            result += e\n        }\n    }\n    return result\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc WordsInSentence(sentence string) string {\n    words := strings.Split(sentence, \" \")\n    result := \"\"\n    for _, w := range words {\n        if IsPrime(len(w)) {\n            result = result + \" \" + w\n        }\n    }\n    return result[1:]\n}\n",
            "func Simplify(x string, n string) bool {\n    xs := strings.Split(x, \"/\")\n    ns := strings.Split(n, \"/\")\n    num := int(xs[0]) * int(ns[0])\n    den := int(xs[1]) * int(ns[1])\n    return num % den == 0\n}\n",
            "func DigitsSum(n int) int {\n    nStr := str(n)\n    if n >= 0 {\n        return sum(int(d) for d in nStr)\n    }\n    return int(nStr[:2]) * 2 + DigitsSum(abs(n))\n}\nfunc OrderByPoints(nums []int) []int {\n    return sort.IntSlice(nums, func(i, j int) bool {\n        return DigitsSum(nums[i]) < DigitsSum(nums[j])\n    })\n}\n",
            "func SpecialFilter(nums []int) int {\n    odds := \"13579\"\n    result := 0\n    for n := 0; n < len(nums); n++ {\n        if nums[n] > 10 && nums[n] % 2 == 1 && string(nums[n])[0] in odds {\n            result += 1\n        }\n    }\n    return result\n}\n",
            "func GetMaxTriples(n int) int {\n    c := [0]*3\n    for i := 1; i <= n; i++ {\n        a := i * i - i + 1\n        c[a % 3] += 1\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n}\n",
            "func Bf(planet1 string, planet2 string) []string {\n    names := []string{\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    }\n    if planet1 not in names or planet2 not in names {\n        return []\n    }\n    l := names.Index(planet1)\n    r := names.Index(planet2)\n    if l > r {\n        l, r = r, l\n    }\n    if l == r {\n        return []\n    }\n    return names[l+1:r]\n}\n",
            "func SortedListSum(lst []string) []string {\n    result := []string{}\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    return sort.Slice(result, func(i, j int) bool {\n        if len(result[i]) != len(result[j]) {\n            return len(result[i]) < len(result[j])\n        }\n        return result[i] < result[j]\n    })\n}\n",
            "func XOrY(n int, x int, y int) int {\n    if n < 2 {\n        return y\n    }\n    for i := 2; i*i <= n; i++ {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func DoubleTheDifference(lst []float64) int {\n    result := 0\n    for _, n := range lst {\n        if n >= 0 && n % 2 == 1 {\n            result += n * n\n        }\n    }\n    return result\n}\n",
            "func Compare(game []int, guess []int) []int {\n    result := make([]int, 0)\n    for i, _ := range game {\n        result = append(result, abs(game[i] - guess[i]))\n    }\n    return result\n}\n",
            "func StrongestExtension(className string, extensions []string) string {\n    maxS := -999999999999\n    maxExt := \"\"\n    for _, ext := range extensions {\n        upper := 0\n        lower := 0\n        for c := ext {\n            if c.IsUpper() {\n                upper += 1\n            } else if c.IsLower() {\n                lower += 1\n            }\n        }\n        s := upper - lower\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return f\"{className}.{maxExt}\"\n}\n",
            "func CycpatternCheck(a string, b string) bool {\n    for i := 0; i < len(b); i++ {\n        if b[i:]+b[:i] in a {\n            return true\n        }\n    }\n    return false\n}\n",
            "func EvenOddCount(num int) []int {\n    ds := str(abs(num))\n    even := len([d for d in ds if ord(d) % 2 == 0])\n    return [even, len(ds) - even]\n}\n",
            "func IntToMiniRoman(num int) string {\n    values := [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals := [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res := []string{}\n    for i := range values {\n        for num >= values[i] {\n            res = append(res, numerals[i])\n            num -= values[i]\n        }\n    }\n    return string.Join(res, \"\")\n}\n",
            "func RightAngleTriangle(a int, b int, c int) bool {\n    return math.Pow(a, 2) + math.Pow(b, 2) == math.Pow(c, 2)\n}\n",
            "func FindMax(words []string) string {\n    maxCnt := 0\n    maxW := \"\"\n    for _, w := range words {\n        cnt := len(set(w))\n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        elif cnt == maxCnt {\n            maxW = min(maxW, w)\n        }\n    }\n    return maxW\n}\n",
            "func Eat(num int, need int, remaining int) []int {\n    if need <= remaining {\n        return [num + need, remaining - need]\n    }\n    return [num + remaining, 0]\n}\n",
            "func DoAlgebra(operators []string, operands []int) int {\n    ops := operators\n    nums := operands\n    i := len(ops) - 1\n    while i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = math.Pow(nums[i], nums[i + 1])\n            nums = append(nums, 0)\n            ops = append(ops, \"\")\n            i -= 1\n        }\n        i -= 1\n    }\n    i = 0\n    while i < len(ops) {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1]\n            nums = append(nums, 0)\n            ops = append(ops, \"\")\n            i -= 1\n        }\n        elif ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i + 1]\n            nums = append(nums, 0)\n            ops = append(ops, \"\")\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while i < len(ops) {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1]\n            nums = append(nums, 0)\n            ops = append(ops, \"\")\n            i -= 1\n        }\n        elif ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1]\n            nums = append(nums, 0)\n            ops = append(ops, \"\")\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "func Solve(s string) string {\n    result := \"\"\n    for _, ch := range s {\n        if ch.IsLower() {\n            result += ch.ToUpper()\n        } else if ch.IsUpper() {\n            result += ch.ToLower()\n        } else {\n            result += ch\n        }\n    }\n    return result[::-1]\n}\n",
            "func StringToMd5(txt string) *string {\n    md5_hash := hashlib.NewMD5()\n    txt_bytes := txt.Bytes()\n    md5_hash.Update(txt_bytes)\n    md5_encoded := md5_hash.HexDigest()\n    return &md5_encoded\n}\n",
            "func GenerateIntegers(a int, b int) []int {\n    lower := max(2, min(a, b))\n    upper := min(8, max(a, b))\n    result := make([]int, 0)\n    for i := lower; i <= upper; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n"
        ],
        "java": [
            "class Global {\n    public static boolean hasCloseElements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<String> separateParenGroups(String parenString) {\n        var groups = new ArrayList<String>();\n        var stk = new ArrayList<Character>();\n        var currentGroup = \"\";\n        var parens = parenString.replace(\" \", \"\");\n        for (char ch : parens) {\n            if (ch == '(') {\n                stk.add(ch);\n                currentGroup += ch;\n            } else if (ch == ')') {\n                stk.removeLast();\n                currentGroup += ch;\n                if (stk.isEmpty()) {\n                    groups.add(currentGroup);\n                    currentGroup = \"\";\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double truncateNumber(double num) {\n        return num - (int)num;\n    }\n}\n",
            "class Global {\n    public static boolean belowZero(List<Integer> operations) {\n        var balance = 0;\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double meanAbsoluteDeviation(List<Double> numbers) {\n        var mean = 0.0;\n        for (double n : numbers) {\n            mean += n;\n        }\n        mean /= numbers.size();\n        var deviation = 0.0;\n        for (double n : numbers) {\n            deviation += Math.abs(n - mean);\n        }\n        return deviation / numbers.size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i != 0) {\n                result.add(delimiter);\n            }\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseNestedParens(String parenString) {\n        var result = new ArrayList<Integer>();\n        var parenGroups = parenString.split(\" \");\n        for (String group : parenGroups) {\n            var maxDepth = 0;\n            var depth = 0;\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    depth++;\n                    maxDepth = Math.max(maxDepth, depth);\n                } else if (ch == ')') {\n                    depth--;\n                }\n            }\n            result.add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> filterBySubstring(List<String> strs, String substring) {\n        var result = new ArrayList<String>();\n        for (String s : strs) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sumProduct(List<Integer> numbers) {\n        var nSum = 0;\n        var nProduct = 1;\n        for (int n : numbers) {\n            nSum += n;\n            nProduct *= n;\n        }\n        return new ArrayList<Integer>() {\n            nSum,\n            nProduct\n        };\n    }\n}\n",
            "class Global {\n    public static List<Integer> rollingMax(List<Integer> numbers) {\n        var maxSoFar = Integer.MIN_VALUE;\n        var result = new ArrayList<Integer>();\n        for (Integer num : numbers) {\n            maxSoFar = Math.max(maxSoFar, num);\n            result.add(maxSoFar);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String makePalindrome(String s) {\n        if (s.equals(s.reverse())) {\n            return s;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (s.equals(s.substring(i) + s.substring(0, i).reverse())) {\n                return s.substring(i) + s.substring(0, i).reverse();\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i) ^ b.charAt(i) == '1' ? '0' : '1');\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static Optional<String> longest(List<String> strs) {\n        var longest_s = strs[0];\n        for (String s : strs) {\n            if (s.length() > longest_s.length()) {\n                longest_s = s;\n            }\n        }\n        return longest_s;\n    }\n}\n",
            "class Global {\n    public static int greatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}\n",
            "class Global {\n    public static List<String> allPrefixes(String s) {\n        var prefixes = new ArrayList<String>();\n        for (int i = 0; i < s.length(); i++) {\n            prefixes.add(s.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static String stringSequence(int n) {\n        return String.join(\" \", new int[]{0, 1, 2, ..., n});\n    }\n}\n",
            "class Global {\n    public static int countDistinctCharacters(String s) {\n        return new HashSet<Character>().size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseMusic(String musicString) {\n        var durations = new HashMap<String, Integer>();\n        durations.put(\"o\", 4);\n        durations.put(\"o|\", 2);\n        durations.put(\".|\", 1);\n        var notes = musicString.split();\n        var result = new ArrayList<Integer>();\n        for (String note : notes) {\n            result.add(durations.get(note));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int howManyTimes(String s, String substring) {\n        int times = 0;\n        for (int i = 0; i < s.length() - substring.length() + 1; i++) {\n            if (s.substring(i, i + substring.length()) == substring) {\n                times += 1;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static String sortNumbers(String numbers) {\n        var numDict = new HashMap<String, Integer>();\n        numDict.put(\"zero\", 0);\n        numDict.put(\"one\", 1);\n        numDict.put(\"two\", 2);\n        numDict.put(\"three\", 3);\n        numDict.put(\"four\", 4);\n        numDict.put(\"five\", 5);\n        numDict.put(\"six\", 6);\n        numDict.put(\"seven\", 7);\n        numDict.put(\"eight\", 8);\n        numDict.put(\"nine\", 9);\n        var numList = new ArrayList<String>();\n        for (String num : numbers.split(\" \")) {\n            if (numDict.containsKey(num)) {\n                numList.add(num);\n            }\n        }\n        numList.sort(Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return numDict.get(o1) - numDict.get(o2);\n            }\n        });\n        return \" \".join(numList);\n    }\n}\n",
            "class Global {\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        var sortedNumbers = new ArrayList<Double>();\n        for (double d : numbers) {\n            sortedNumbers.add(d);\n        }\n        sortedNumbers.sort();\n        var minDiff = Double.MAX_VALUE;\n        var closestPair = new ArrayList<Double>();\n        for (int i = 1; i < sortedNumbers.size(); i++) {\n            double diff = sortedNumbers.get(i) - sortedNumbers.get(i - 1);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = new ArrayList<Double>();\n                closestPair.add(sortedNumbers.get(i - 1));\n                closestPair.add(sortedNumbers.get(i));\n            }\n        }\n        return closestPair;\n    }\n}\n",
            "class Global {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        var minNum = Double.MAX_VALUE;\n        var maxNum = Double.MIN_VALUE;\n        for (double num : numbers) {\n            minNum = Math.min(minNum, num);\n            maxNum = Math.max(maxNum, num);\n        }\n        if (minNum == maxNum) {\n            return new ArrayList<Double>();\n        }\n        var result = new ArrayList<Double>();\n        for (double num : numbers) {\n            result.add((num - minNum) / (maxNum - minNum));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> filterIntegers(List<Object> values) {\n        var result = new ArrayList<Integer>();\n        for (Object x : values) {\n            if (x instanceof Integer) {\n                result.add(((Integer) x));\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int strLength(String s) {\n        return s.length();\n    }\n}\n",
            "class Global {\n    public static int largestDivisor(int n) {\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}\n",
            "class Global {\n    public static List<Integer> factorize(int n) {\n        var factors = new ArrayList<Integer>();\n        var divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.add(divisor);\n                n /= divisor;\n            } else {\n                divisor++;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static List<Integer> removeDuplicates(List<Integer> numbers) {\n        var counts = new HashMap<Integer, Integer>();\n        for (Integer num : numbers) {\n            counts.put(num, counts.getOrDefault(num, 0) + 1);\n        }\n        var res = new ArrayList<Integer>();\n        for (Integer num : numbers) {\n            if (counts.get(num) == 1) {\n                res.add(num);\n            }\n        }\n        return res;\n    }\n}\n",
            "class Global {\n    public static String flipCase(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!Character.isLetter(ch)) {\n                result.append(ch);\n            } else {\n                if (ch.isLowerCase()) {\n                    result.append(ch.toUpperCase());\n                } else {\n                    result.append(ch.toLowerCase());\n                }\n            }\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static String concatenate(List<String> strs) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strs) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}\n",
            "class Global {\n    public static List<String> filterByPrefix(List<String> strs, String prefixStr) {\n        var result = new ArrayList<String>();\n        for (String s : strs) {\n            if (s.startsWith(prefixStr)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> getPositive(List<Integer> l) {\n        var result = new ArrayList<Integer>();\n        for (Integer num : l) {\n            if (num > 0) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static double poly(List<Integer> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.size(); i++) {\n            res += xs.get(i) * x**i;\n        }\n        return res;\n    }\n    public static double findZero(List<Integer> xs) {\n        double x1 = 1.0;\n        double x2 = -1.0;\n        while (poly(xs, x1) * poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (poly(xs, mid) == 0) {\n                return mid;\n            }\n            if (poly(xs, mid) * poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortThird(List<Integer> l) {\n        var sortedThird = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                sortedThird.add(l.get(i));\n            }\n        }\n        sortedThird.sort();\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(sortedThird.get(i / 3));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> listUnique(List<Integer> l) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (result.contains(l.get(i))) {\n                continue;\n            }\n            result.add(l.get(i));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int maxElement(List<Integer> l) {\n        if (l == null || l.size() == 0) {\n            return 0;\n        }\n        return l.stream().max().getAsInt();\n    }\n}\n",
            "class Global {\n    public static int fizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += String.count(\"7\", String.valueOf(i));\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortEven(List<Integer> l) {\n        var sortedEven = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                sortedEven.add(l.get(i));\n            }\n        }\n        sortedEven.sort();\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(sortedEven.get(i / 2));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String encodeCyclic(String s) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (i + 2 < s.length()) {\n                result.append(s.charAt(i + 1) + s.charAt(i + 2));\n                result.append(s.charAt(i));\n            } else {\n                result.append(s.substring(i, s.length()));\n            }\n        }\n        return result.toString();\n    }\n    public static String decodeCyclic(String s) {\n        return encodeCyclic(encodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static int primeFib(int n) {\n        var f = new int[2];\n        var cnt = 0;\n        while (cnt < n) {\n            f = new int[f.length];\n            f[0] = f[1];\n            f[1] = f[0] + f[1];\n            if (isPrime(f[1])) {\n                cnt++;\n            }\n        }\n        return f[1];\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static int carRaceCollision(int n) {\n        return n * n;\n    }\n}\n",
            "class Global {\n    public static List<Integer> incrList(List<Integer> l) {\n        var result = new ArrayList<Integer>();\n        for (int i : l) {\n            result.add(i + 1);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean pairsSumToZero(List<Integer> l) {\n        var seen = new HashSet<Integer>();\n        for (int num : l) {\n            if (-num in seen) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String changeBase(int x, int bas) {\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            sb.append(x % bas);\n            x /= bas;\n        }\n        return sb.reverse().toString();\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int h) {\n        return (double) (a * h) / 2;\n    }\n}\n",
            "class Global {\n    public static int fib4(int n) {\n        var fib = new int[4];\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0; i < 4; i++) {\n            fib[i] = 0;\n        }\n        for (int i = 0;\n        }\n        for (int i = 0;\n        }\n        for (int i)\n        for (int i)\n        for (int i)\n        for i)\n        for (int i)\n        for i)\n        for i)\n        for i)\n        for i)\n        for i)\n        for i)\n        i)\n        for i)\n        for i)\n        for i)\n        for i)\n        for\n        for\n        for\n        for\n        for\n        for\n        for\n        for\n        for\n        for\n        for\n",
            "class Global {\n    public static double median(List<Double> l) {\n        var sl = new ArrayList<Double>();\n        for (Double d : l) {\n            sl.add(d);\n        }\n        if (sl.size() % 2 != 0) {\n            return sl.get(sl.size() / 2);\n        } else {\n            return (sl.get(sl.size() / 2) + sl.get(sl.size() / 2 - 1)) / 2;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isPalindrome(String txt) {\n        return txt.equals(txt.reversed());\n    }\n}\n",
            "class Global {\n    public static int modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "class Global {\n    public static String encodeShift(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            result.append((char)(((ch - 97 + 5) % 26) + 97));\n        }\n        return result.toString();\n    }\n    public static String decodeShift(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            result.append((char)(((ch - 97 + 21) % 26) + 97));\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static String removeVowels(String txt) {\n        String vowels = \"aeiouAEIOU\";\n        return new StringBuilder().append(txt).replaceAll(vowels, \"\").toString();\n    }\n}\n",
            "class Global {\n    public static boolean belowThreshold(List<Integer> l, int t) {\n        return all(x < t for x in l);\n    }\n}\n",
            "class Global {\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static boolean sameChars(String s0, String s1) {\n        return new HashSet(s0).equals(new HashSet(s1));\n    }\n}\n",
            "class Global {\n    public static int fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth++;\n            } else if (b == '>') {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static boolean monotonic(List<Integer> l) {\n        var diff = new ArrayList<Integer>();\n        for (int i = 0; i < l.size() - 1; i++) {\n            diff.add(l.get(i + 1) - l.get(i));\n        }\n        return all(x <= 0 for x in diff) || all(x >= 0 for x in diff);\n    }\n}\n",
            "class Global {\n    public static List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < l1.size(); i++) {\n            for (int j = 0; j < l2.size(); j++) {\n                if (l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int sumToN(int n) {\n        return n * (n + 1) / 2;\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth++;\n            } else if (b == ')') {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> derivative(List<Integer> xs) {\n        var result = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n        var a = 0, b = 0, c = 1;\n        while (n > 2) {\n            a = b;\n            b = c;\n            c = a + b + c;\n            n -= 1;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int vowelsCount(String s) {\n        var vowels = \"aeiou\";\n        var cnt = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n                if (vowels.indexOf(s.charAt(i)) != -1) {\n                    cnt += 1;\n                }\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static String circularShift(int x, int shift) {\n        String xStr = String.valueOf(x);\n        if (shift > xStr.length()) {\n            return xStr.substring(xStr.length() - 1, xStr.length()) + xStr.substring(0, xStr.length() - shift);\n        } else {\n            return xStr.substring(xStr.length() - shift) + xStr.substring(0, xStr.length() - shift);\n        }\n    }\n}\n",
            "class Global {\n    public static int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'A' && c <= 'Z') {\n                sum += (int)c;\n            }\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static int fruitDistribution(String s, int n) {\n        String[] words = s.split(\" \");\n        int apples = Integer.parseInt(words[words.length - 2]);\n        int oranges = Integer.parseInt(words[words.length - 1]);\n        return n - apples - oranges;\n    }\n}\n",
            "class Global {\n    public static List<Integer> pluck(List<Integer> arr) {\n        var evens = new ArrayList<Integer>();\n        for (int n : arr) {\n            if (n % 2 == 0) {\n                evens.add(n);\n            }\n        }\n        if (evens.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        var minEven = evens.get(0);\n        for (int e : evens) {\n            if (e < minEven) {\n                minEven = e;\n            }\n        }\n        var result = new ArrayList<Integer>();\n        result.add(minEven);\n        result.add(arr.indexOf(minEven));\n        return result;\n    }\n}\n",
            "class Global {\n    public static int search(List<Integer> lst) {\n        var freqs = new HashMap<Integer, Integer>();\n        for (Integer n : lst) {\n            freqs.put(n, freqs.getOrDefault(n, 0) + 1);\n        }\n        var goodVals = new ArrayList<Integer>();\n        for (int k : freqs.keySet()) {\n            if (freqs.get(k) >= k) {\n                goodVals.add(k);\n            }\n        }\n        return goodVals.isEmpty() ? -1 : goodVals.get(goodVals.size() - 1);\n    }\n}\n",
            "class Global {\n    public static List<Integer> strangeSortList(List<Integer> lst) {\n        var sl = new ArrayList<Integer>();\n        for (int e : lst) {\n            sl.add(e);\n        }\n        var result = new ArrayList<Integer>();\n        var left = 0;\n        var right = sl.size() - 1;\n        while (left <= right) {\n            result.add(sl.get(left));\n            left++;\n            if (left <= right) {\n                result.add(sl.get(right));\n                right--;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        var isPalin = true;\n        for (int i = 0; i < q.size(); i++) {\n            if (q.get(i) != q.get(q.size() - i - 1)) {\n                isPalin = false;\n            }\n        }\n        var total = 0;\n        for (int i = 0; i < q.size(); i++) {\n            total += q.get(i);\n        }\n        return isPalin && total <= w;\n    }\n}\n",
            "class Global {\n    public static int smallestChange(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (arr.get(i) != arr.get(arr.size() - i - 1)) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        var cnt1 = 0;\n        for (String s : lst1) {\n            cnt1 += s.length();\n        }\n        var cnt2 = 0;\n        for (String s : lst2) {\n            cnt2 += s.length();\n        }\n        return lst1 if cnt1 <= cnt2 else lst2;\n    }\n}\n",
            "class Global {\n    public static boolean isMultiplyPrime(int a) {\n        if (a < 2) {\n            return false;\n        }\n        int cnt = 0;\n        for (int i = 2; i <= a; i++) {\n            if (isPrime(i)) {\n                while (a % i == 0) {\n                    cnt += 1;\n                    a /= i;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= floor(sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean isSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "class Global {\n    public static boolean isCube(int a) {\n        int root = (int) Math.pow(a, 1.0 / 3.0);\n        return root * root * root == a;\n    }\n}\n",
            "class Global {\n    public static int hexKey(String num) {\n        int result = 0;\n        for (char c : num.toCharArray()) {\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String decimalToBinary(int dec) {\n        String binary = Integer.toBinaryString(dec);\n        return \"db\" + binary + \"db\";\n    }\n}\n",
            "class Global {\n    public static boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static List<String> numericalLetterGrade(List<Double> grades) {\n        var result = new ArrayList<String>();\n        for (Double g : grades) {\n            if (g == 4.0) {\n                result.add(\"A+\");\n            } else if (g > 3.7) {\n                result.add(\"A\");\n            } else if (g > 3.3) {\n                result.add(\"A-\");\n            } else if (g > 3.0) {\n                result.add(\"B+\");\n            } else if (g > 2.7) {\n                result.add(\"B\");\n            } else if (g > 2.3) {\n                result.add(\"B-\");\n            } else if (g > 2.0) {\n                result.add(\"C+\");\n            } else if (g > 1.7) {\n                result.add(\"C\");\n            } else if (g > 1.3) {\n                result.add(\"C-\");\n            } else if (g > 1.0) {\n                result.add(\"D+\");\n            } else if (g > 0.7) {\n                result.add(\"D\");\n            } else if (g > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean primeLength(String s) {\n        int length = s.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(length)); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int startsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 2 * 9 * (10 ^ (n - 2));\n    }\n}\n",
            "class Global {\n    public static String solve(int n) {\n        var digitsSum = 0;\n        for (char c : String.valueOf(n).toCharArray()) {\n            digitsSum += Integer.parseInt(c);\n        }\n        return Integer.toBinaryString(digitsSum);\n    }\n}\n",
            "class Global {\n    public static int add(List<Integer> lst) {\n        var result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String antiShuffle(String s) {\n        StringBuilder result = new StringBuilder();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            result.append(\"\".join(Arrays.sort(word)));\n            result.append(\" \");\n        }\n        return result.substring(0, result.length() - 1);\n    }\n}\n",
            "class Global {\n    public static List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        var coords = new ArrayList<List<Integer>>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    coords.add(new ArrayList<Integer>());\n                    coords.get(coords.size() - 1).add(i);\n                    coords.get(coords.size() - 1).add(j);\n                }\n            }\n        }\n        return sorted(coords, new Comparator<List<Integer>>() {\n            public int compare(List<Integer> a, List<Integer> b) {\n                return a.get(0) - b.get(0);\n            }\n        });\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        if ((arr.get(0) + arr.get(arr.size() - 1)) % 2 == 0) {\n            return Collections.reverse(Arrays.asList(arr));\n        }\n        return Collections.sort(arr);\n    }\n}\n",
            "class Global {\n    public static String encrypt(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            int shifted = (int)ch + 4;\n            if (shifted > (int)Character.MAX_VALUE) {\n                shifted -= 26;\n            }\n            result.append((char)shifted);\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> nextSmallest(List<Integer> lst) {\n        var sl = new ArrayList<Integer>(new HashSet<Integer>(lst));\n        if (sl.size() < 2) {\n            return null;\n        }\n        return sl.get(1);\n    }\n}\n",
            "class Global {\n    public static int isBored(String s) {\n        var sentences = s.split(\"[.!?]\\\\s*\");\n        var result = 0;\n        for (String sentence : sentences) {\n            if (sentence.length() >= 2 && sentence.startsWith(\"I \")) {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            if (x.intValue() + y.intValue() == z.intValue()) {\n                return true;\n            }\n            if (x.intValue() + z.intValue() == y.intValue()) {\n                return true;\n            }\n            if (y.intValue() + z.intValue() == x.intValue()) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String encode(String message) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : message.toCharArray()) {\n            if (ch >= 'a' && ch <= 'z') {\n                ch = (char)(((int)ch) + 2);\n            }\n            result.append(ch);\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static int skjkasdkd(List<Integer> lst) {\n        var primes = new ArrayList<Integer>();\n        for (int n : lst) {\n            if (isPrime(n)) {\n                primes.add(n);\n            }\n        }\n        if (primes.size() == 0) {\n            return 0;\n        }\n        var largest = String.valueOf(Integer.toString(primes.get(primes.size() - 1)));\n        var result = 0;\n        for (char digit : largest.toCharArray()) {\n            result += Integer.parseInt(digit);\n        }\n        return result;\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean checkDictCase(Map<String, String> d) {\n        if (d == null || d.size() == 0) {\n            return false;\n        }\n        return all(c.isLowerCase() for c in d.keySet()) || all(c.isUpperCase() for c in d.keySet());\n    }\n}\n",
            "class Global {\n    public static List<Integer> countUpTo(int n) {\n        var primes = new ArrayList<Integer>();\n        for (int num = 2; num < n; num++) {\n            if (all(num % p != 0 for p in primes)) {\n                primes.add(num);\n            }\n        }\n        return primes;\n    }\n}\n",
            "class Global {\n    public static int multiply(int a, int b) {\n        return (a % 10) * (b % 10);\n    }\n}\n",
            "class Global {\n    public static int countUpper(String s) {\n        var vowels = \"AEIOU\";\n        var result = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && vowels.contains(s.charAt(i))) {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int closestInteger(String value) {\n        var num = Float.parseFloat(value);\n        if (num >= 0) {\n            return (int) (num + 0.5);\n        } else {\n            return (int) (num - 0.5);\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> makeAPile(int n) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> wordsString(String s) {\n        var result = new ArrayList<String>();\n        for (String w : s.split(\",\")) {\n            if (w.length() > 0) {\n                result.add(w);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        return y - 1 if (x != y) else -1;\n    }\n}\n",
            "class Global {\n    public static Optional<String> roundedAvg(int n, int m) {\n        if (n > m) {\n            return null;\n        }\n        int rAvg = (m + n) / 2 + 0.5;\n        return new Optional<String>(Integer.toBinaryString(rAvg));\n    }\n}\n",
            "class Global {\n    public static List<Integer> uniqueDigits(List<Integer> x) {\n        var result = new ArrayList<Integer>();\n        for (int num : x) {\n            if (allDigitsOdd(num)) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n    public static boolean allDigitsOdd(int num) {\n        return all(num % 10 % 2 != 0);\n    }\n}\n",
            "class Global {\n    public static List<String> byLength(List<Integer> arr) {\n        var digitNames = new ArrayList<String>();\n        digitNames.add(\"One\");\n        digitNames.add(\"Two\");\n        digitNames.add(\"Three\");\n        digitNames.add(\"Four\");\n        digitNames.add(\"Five\");\n        digitNames.add(\"Six\");\n        digitNames.add(\"Seven\");\n        digitNames.add(\"Eight\");\n        digitNames.add(\"Nine\");\n        var sortedArr = new ArrayList<Integer>();\n        for (Integer x : arr) {\n            if (1 <= x && x <= 9) {\n                sortedArr.add(x);\n            }\n        }\n        sortedArr.sort(x -> x.compareTo(x));\n        var result = new ArrayList<String>();\n        for (Integer x : sortedArr) {\n            result.add(digitNames.get(x - 1));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> f(int n) {\n        var nums = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            nums.add(i);\n        }\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n            if (i % 2 != 0) {\n                result.add(i + 1);\n            } else {\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> evenOddPalindrome(int n) {\n        var cnt = new int[2];\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                cnt[i % 2]++;\n            }\n        }\n        return cnt;\n    }\n    public static boolean isPalindrome(int n) {\n        var s = String(n);\n        return s.equals(s.substring(0, s.length() - 1));\n    }\n}\n",
            "class Global {\n    public static int countNums(List<Integer> arr) {\n        var result = 0;\n        for (Integer n : arr) {\n            if (digitsSum(n) > 0) {\n                result++;\n            }\n        }\n        return result;\n    }\n    public static int digitsSum(int n) {\n        String nStr = String(n);\n        if (n >= 0) {\n            return sum(nStr);\n        } else {\n            return int(nStr.substring(0, 2)) * 2 + digitsSum(abs(n));\n        }\n    }\n    private static int sum(String nStr) {\n        int result = 0;\n        for (char c : nStr.toCharArray()) {\n            result += Integer.parseInt(c);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean moveOneBall(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        var sortedArr = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            sortedArr.add(arr.get(i));\n        }\n        sortedArr.sort();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.subList(i, arr.size()).equals(sortedArr.subList(0, arr.size() - i))) {\n                if (arr.subList(0, i).equals(sortedArr.subList(arr.size() - i, arr.size()))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String canExchange(List<Integer> lst1, List<Integer> lst2) {\n        var oddCnt = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCnt++;\n            }\n        }\n        var evenCnt = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCnt++;\n            }\n        }\n        return evenCnt >= oddCnt ? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static Map<String, Integer> histogram(String test) {\n        var freq = new HashMap<String, Integer>();\n        var words = new ArrayList<String>();\n        for (String w : test.split(\" \")) {\n            if (w.length() > 0) {\n                words.add(w);\n            }\n        }\n        for (String w : words) {\n            freq.put(w, freq.getOrDefault(w, 0) + 1);\n        }\n        var result = new HashMap<String, Integer>();\n        if (freq.size() > 0) {\n            var maxFreq = freq.values().stream().max().getAsInt();\n            for (String k : freq.keySet()) {\n                if (freq.get(k) == maxFreq) {\n                    result.put(k, freq.get(k));\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> reverseDelete(String s, String c) {\n        var s1 = \"\";\n        for (char ch : s.toCharArray()) {\n            if (ch != c.charAt(0)) {\n                s1 += ch;\n            }\n        }\n        return new ArrayList<String>() {\n            s1,\n            \"yes\" if isPalindrome(s1) else \"no\"\n        };\n    }\n    public static boolean isPalindrome(String s) {\n        var p1 = 0;\n        var p2 = s.length() - 1;\n        while (p1 < p2) {\n            if (s.charAt(p1) != s.charAt(p2)) {\n                return false;\n            }\n            p1++;\n            p2--;\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static List<String> oddCount(List<String> lst) {\n        var result = new ArrayList<String>();\n        for (String s : lst) {\n            var n = 0;\n            for (char c : s.toCharArray()) {\n                if (c % 2 == 1) {\n                    n++;\n                }\n            }\n            result.add(\"the number of odd elements in the string \" + n + \" of the input.\");\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int minSubArraySum(List<Integer> nums) {\n        var minSum = 0;\n        var curSum = 0;\n        for (int n : nums) {\n            curSum = Math.min(curSum + n, 0);\n            minSum = Math.min(curSum, minSum);\n        }\n        if (minSum == 0) {\n            minSum = Math.min(nums);\n        }\n        return minSum;\n    }\n}\n",
            "class Global {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        var result = 0;\n        for (List<Integer> arr : grid) {\n            var sum = 0;\n            for (int num : arr) {\n                sum += num;\n            }\n            result += Math.ceil(sum / capacity);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        return new ArrayList<Integer>(Arrays.sort(arr, (a, b) -> {\n            var aCount = count_ones(a);\n            var bCount = count_ones(b);\n            return aCount - bCount > 0 ? -1 : aCount - bCount < 0 ? 1 : a - b;\n        }));\n    }\n    public static int count_ones(int num) {\n        var count = 0;\n        while (num > 0) {\n            num = num & (num - 1);\n            count++;\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static List<String> selectWords(String s, int n) {\n        var consonants = \"bcdfghjklmnpqrstvwxyz\";\n        var words = new ArrayList<String>();\n        for (String w : s.split(\" \")) {\n            if (w.length() > 0) {\n                words.add(w);\n            }\n        }\n        var result = new ArrayList<String>();\n        for (String w : words) {\n            if (w.length() > 0) {\n                if (w.length() == n) {\n                    result.add(w);\n                } else {\n                    if (w.length() > n) {\n                        var w_sub = w.substring(0, n);\n                        if (w_sub.length() == n) {\n                            result.add(w_sub);\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length - 2; i > 0; i--) {\n            if (word.charAt(i) in vowels && word.charAt(i - 1) not in vowels && word.charAt(i + 1) not in vowels) {\n                return word.charAt(i);\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static String matchParens(List<String> lst) {\n        String s1 = lst.get(0) + lst.get(1);\n        String s2 = lst.get(1) + lst.get(0);\n        return \"Yes\" if check(s1) || check(s2) else \"No\";\n    }\n    public static boolean check(String s) {\n        int depth = 0;\n        for (char ch : s.toCharArray()) {\n            if (ch == '(') {\n                depth++;\n            } else {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        return Arrays.stream(arr).sorted().skip(k).limit(k).toArray(new Integer[k]);\n    }\n}\n",
            "class Global {\n    public static int solution(List<Integer> lst) {\n        var result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) < 100) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static List<Integer> getOddCollatz(int n) {\n        var collatz = new ArrayList<Integer>();\n        collatz.add(1);\n        while (n != 1) {\n            if (n % 2 != 0) {\n                collatz.add(n);\n                n = 3 * n + 1;\n            } else {\n                n = n // 2;\n            }\n        }\n        return Collections.sort(collatz);\n    }\n}\n",
            "class Global {\n    public static boolean validDate(String date) {\n        if (date.length() != 10 || date.charAt(2) != '-' || date.charAt(5) != '-') {\n            return false;\n        }\n        int m = Integer.parseInt(date.substring(0, 2));\n        int d = Integer.parseInt(date.substring(3, 5));\n        if (m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31) {\n            return true;\n        }\n        if (m in [4, 6, 9, 11] && d >= 1 && d <= 30) {\n            return true;\n        }\n        if (m == 2 && d >= 1 && d <= 29) {\n            return true;\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<String> splitWords(String txt) {\n        if (\" \" in txt) {\n            return txt.split(\" \");\n        } else if (\",\" in txt) {\n            return txt.split(\",\");\n        } else {\n            return new ArrayList<String>() {\n                add(String.valueOf(txt.length() % 2 == 0 ? txt.length() : 0));\n            };\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isSorted(List<Integer> lst) {\n        var freq = new HashMap<Integer, Integer>();\n        for (Integer i : lst) {\n            freq[i] = freq.getOrDefault(i, 0) + 1;\n        }\n        var max = 0;\n        for (int i : freq.values()) {\n            max = Math.max(max, i);\n        }\n        return max <= 2;\n    }\n}\n",
            "class Global {\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return null;\n        }\n        if (0 in arr) {\n            return 0;\n        }\n        var sign = arr.stream().filter(n -> n < 0).count() % 2 == 1 ? -1 : 1;\n        return sign * arr.stream().map(n -> n).sum();\n    }\n}\n",
            "class Global {\n    public static List<Integer> minPath(List<List<Integer>> grid, int k) {\n        var n = grid.size();\n        var minVal = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    var temp = new ArrayList<Integer>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    minVal = Math.min(temp);\n                }\n            }\n        }\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < k; i++) {\n            result.add(1 if i % 2 == 0 else minVal);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> tri(int n) {\n        var seq = new ArrayList<Integer>();\n        if (n == 0) {\n            seq.add(1);\n        } else {\n            seq.add(1);\n            seq.add(3);\n            for (int i = 2; i <= n; i++) {\n                if (i % 2 == 0) {\n                    seq.add(i / 2 + 1);\n                } else {\n                    seq.add(seq.get(i - 1) + seq.get(i - 2) + (i + 3) / 2);\n                }\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int digits(int n) {\n        var odds = new ArrayList<Integer>();\n        for (char c : String.valueOf(n).toCharArray()) {\n            if (Integer.parseInt(c) % 2 == 1) {\n                odds.add(Integer.parseInt(c));\n            }\n        }\n        var result = 1;\n        for (int i = 0; i < odds.size(); i++) {\n            result *= odds.get(i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isNested(String s) {\n        var openIdx = new ArrayList<Integer>();\n        var closeIdx = new ArrayList<Integer>();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '[') {\n                openIdx.add(i);\n            } else if (s.charAt(i) == ']') {\n                closeIdx.add(i);\n            }\n        }\n        var cnt = 0;\n        var i = 0;\n        var l = closeIdx.size();\n        for (int idx : openIdx) {\n            if (i < l && idx < closeIdx.get(i)) {\n                cnt += 1;\n                i += 1;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Double> lst) {\n        var result = 0;\n        for (Double n : lst) {\n            result += Math.pow(Math.ceil(n), 2);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean checkIfLastCharIsALetter(String txt) {\n        if (txt == null || txt.length() == 0) {\n            return false;\n        }\n        String last = txt.substring(txt.lastIndexOf(' ') + 1);\n        return last.length() == 1 && last[0].isalpha();\n    }\n}\n",
            "class Global {\n    public static int canArrange(List<Integer> arr) {\n        if (arr.size() <= 1) {\n            return -1;\n        }\n        var idx = new ArrayList<Integer>();\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                idx.add(i);\n            }\n        }\n        return idx.isEmpty() ? -1 : idx.get(idx.size() - 1);\n    }\n}\n",
            "class Global {\n    public static List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst) {\n        var neg = new ArrayList<Integer>();\n        var pos = new ArrayList<Integer>();\n        for (Integer i : lst) {\n            if (i < 0) {\n                neg.add(i);\n            } else {\n                pos.add(i);\n            }\n        }\n        var maxNeg = neg.isEmpty() ? null : Math.max(neg);\n        var minPos = pos.isEmpty() ? null : Math.min(pos);\n        return new ArrayList<Optional<Integer>>();\n    }\n}\n",
            "class Global {\n    public static Optional<Double> compareOne(Object a, Object b) {\n        var a1 = anyToReal(a);\n        var b1 = anyToReal(b);\n        if (a1 == b1) {\n            return null;\n        }\n        if (a1 > b1) {\n            return a1;\n        }\n        return b1;\n    }\n    private static double anyToReal(Object o) {\n        if (o instanceof String) {\n            return Double.parseDouble(o.replace(\",\", \".\"));\n        }\n        if (o instanceof Integer) {\n            return (double) o;\n        }\n        if (o instanceof Float) {\n            return o;\n        }\n        throw new RuntimeException(\"Type Error\");\n    }\n}\n",
            "class Global {\n    public static boolean isEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int specialFactorial(int n) {\n        var fact = 1;\n        var result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String fixSpaces(String txt) {\n        return re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\");\n    }\n}\n",
            "class Global {\n    public static String fileNameCheck(String fileName) {\n        var lst = fileName.split(\".\");\n        if (lst.length != 2 || !lst[1].equals(\"txt\") || lst[0].length == 0 || !lst[0].charAt(0).isalpha() || lst[0].contains(\"123\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Integer> lst) {\n        var result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result += Math.pow(lst.get(i), 2);\n            }\n            elif (i % 4 == 0) {\n                result += Math.pow(lst.get(i), 3);\n            }\n            else {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String wordsInSentence(String sentence) {\n        StringBuilder sb = new StringBuilder();\n        String[] words = sentence.split(\" \");\n        for (String w : words) {\n            if (isPrime(w.length())) {\n                sb.append(w + \" \");\n            }\n        }\n        return sb.toString().trim();\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean simplify(String x, String n) {\n        String[] xs = x.split(\"/\");\n        String[] ns = n.split(\"/\");\n        int num = Integer.parseInt(xs[0]) * Integer.parseInt(ns[0]);\n        int den = Integer.parseInt(xs[1]) * Integer.parseInt(ns[1]);\n        return num % den == 0;\n    }\n}\n",
            "class Global {\n    public static int digitsSum(int n) {\n        String nStr = String.valueOf(n);\n        if (n >= 0) {\n            return sum(Integer.parseInt(d) for d in nStr);\n        } else {\n            return int(nStr.substring(0, 2)) * 2 + digitsSum(abs(n));\n        }\n    }\n    public static List<Integer> orderByPoints(List<Integer> nums) {\n        return new ArrayList<Integer>(sorted(nums, (a, b) -> digitsSum(a) - digitsSum(b)));\n    }\n}\n",
            "class Global {\n    public static int specialFilter(List<Integer> nums) {\n        var odds = \"13579\";\n        return nums.stream()\n            .filter(n -> n > 10 && n % 2 == 1 && String.valueOf(n).charAt(0) in odds)\n            .size();\n    }\n}\n",
            "class Global {\n    public static int getMaxTriples(int n) {\n        var c = new int[3];\n        for (int i = 1; i <= n; i++) {\n            var a = i * i - i + 1;\n            c[a % 3]++;\n        }\n        return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6;\n    }\n}\n",
            "class Global {\n    public static List<String> bf(String planet1, String planet2) {\n        var names = new ArrayList<String>();\n        names.add(\"Mercury\");\n        names.add(\"Venus\");\n        names.add(\"Earth\");\n        names.add(\"Mars\");\n        names.add(\"Jupiter\");\n        names.add(\"Saturn\");\n        names.add(\"Uranus\");\n        names.add(\"Neptune\");\n        var l = names.indexOf(planet1);\n        var r = names.indexOf(planet2);\n        if (l > r) {\n            l, r = r, l;\n        }\n        if (l == r) {\n            return new ArrayList<String>();\n        }\n        return names.subList(l + 1, r);\n    }\n}\n",
            "class Global {\n    public static List<String> sortedListSum(List<String> lst) {\n        var result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        return Collections.sort(result, (s1, s2) -> (s1.length() - s2.length()));\n    }\n}\n",
            "class Global {\n    public static int xOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int doubleTheDifference(List<Double> lst) {\n        var result = 0;\n        for (Double n : lst) {\n            if (n >= 0 && n % 2 == 1) {\n                result += n * n;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String strongestExtension(String className, List<String> extensions) {\n        var maxS = Integer.MIN_VALUE;\n        var maxExt = \"\";\n        for (String ext : extensions) {\n            var upper = 0;\n            var lower = 0;\n            for (char c : ext.toCharArray()) {\n                if (c.isUpperCase()) {\n                    upper++;\n                } else if (c.isLowerCase()) {\n                    lower++;\n                }\n            }\n            var s = upper - lower;\n            if (s > maxS) {\n                maxS = s;\n                maxExt = ext;\n            }\n        }\n        return className + \".\" + maxExt;\n    }\n}\n",
            "class Global {\n    public static boolean cycpatternCheck(String a, String b) {\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if (b.substring(i, b.length()) + b.substring(0, i) in a) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<Integer> evenOddCount(int num) {\n        var ds = String.valueOf(Math.abs(num)).toCharArray();\n        var even = 0;\n        for (char d : ds) {\n            if (d % 2 == 0) {\n                even++;\n            }\n        }\n        return new ArrayList<Integer>() {\n            add(even);\n            add(ds.length - even);\n        };\n    }\n}\n",
            "class Global {\n    public static String intToMiniRoman(int num) {\n        var values = new int[]{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        var numerals = new String[]{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        var res = new String[];\n        for (int i = 0; i < values.length; i++) {\n            while (num >= values[i]) {\n                res.add(numerals[i]);\n                num -= values[i];\n            }\n        }\n        return String.join(\"\", res);\n    }\n}\n",
            "class Global {\n    public static boolean rightAngleTriangle(int a, int b, int c) {\n        var s = new int[]{a, b, c};\n        return Math.pow(s[0], 2) + Math.pow(s[1], 2) == Math.pow(s[2], 2);\n    }\n}\n",
            "class Global {\n    public static String findMax(List<String> words) {\n        var maxCnt = 0;\n        var maxW = \"\";\n        for (String w : words) {\n            var cnt = w.lengthOfDistinctCharacters();\n            if (cnt > maxCnt) {\n                maxCnt = cnt;\n                maxW = w;\n            }\n            elif (cnt == maxCnt) {\n                maxW = Math.min(maxW, w);\n            }\n        }\n        return maxW;\n    }\n}\n",
            "class Global {\n    public static List<Integer> eat(int num, int need, int remaining) {\n        if (need <= remaining) {\n            return new ArrayList<Integer>() {\n                add(num + need);\n                add(remaining - need);\n            };\n        } else {\n            return new ArrayList<Integer>() {\n                add(num + remaining);\n                add(0);\n            };\n        }\n    }\n}\n",
            "class Global {\n    public static int doAlgebra(List<String> operators, List<Integer> operands) {\n        var ops = operators.copyOf();\n        var nums = operands.copyOf();\n        var i = ops.size() - 1;\n        while (i >= 0) {\n            if (ops.get(i) == \"**\") {\n                nums.set(i, Math.pow(nums.get(i), nums.get(i + 1)));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n            i--;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i) == \"*\") {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n            else if (ops.get(i) == \"//\") {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n            i++;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i) == \"+\") {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n            else if (ops.get(i) == \"-\") {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n            i++;\n        }\n        return nums.get(0);\n    }\n}\n",
            "class Global {\n    public static String solve(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!Character.isLetter(ch)) {\n                result.append(ch);\n            } else {\n                if (ch.isUpperCase()) {\n                    result.append(ch.toLowerCase());\n                } else {\n                    result.append(ch.toUpperCase());\n                }\n            }\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static Optional<String> stringToMd5(String txt) {\n        var md5_hash = new java.util.HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String>();\n        var md5_hash = new HashMap<String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String,String,String, String, String, String,String, String, String, String, String, String, String, String, String, String,String, String, String, String, String, String, String, String, String, String, String,String, String, String, String, String, String, String, String, String, String, String",
            "class Global {\n    public static List<Integer> generateIntegers(int a, int b) {\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n        return new ArrayList<Integer>(new int[]{2, 4, 6, 8});\n    }\n}\n"
        ],
        "javascript": [
            "export const hasCloseElements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "export const separateParenGroups = (parenString) => {\n    const groups = [];\n    let stk = [];\n    let currentGroup = \"\";\n    let parens = parenString.replace(/ /g, \"\");\n    for (const ch of parens) {\n        if (ch === \"(\") {\n            stk.push(ch);\n            currentGroup += ch;\n        } else if (ch === \")\") {\n            stk.pop();\n            currentGroup += ch;\n            if (!stk) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "export const truncateNumber = (num) => {\n    return num - Math.floor(num);\n}\n",
            "export const belowZero = (operations) => {\n    let balance = 0;\n    for (const op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const meanAbsoluteDeviation = (numbers) => {\n    const mean = numbers.reduce((sum, x) => sum + x, 0) / numbers.length;\n    const deviation = numbers.reduce((sum, x) => sum + Math.abs(x - mean), 0);\n    return deviation / numbers.length;\n}\n",
            "export const intersperse = (numbers, delimiter) => {\n    const result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i != 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "export const parseNestedParens = (parenString) => {\n    const result = [];\n    const parenGroups = parenString.split(\" \");\n    for (const group of parenGroups) {\n        let maxDepth = 0;\n        let depth = 0;\n        for (const ch of group) {\n            if (ch === \"(\") {\n                depth++;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch === \")\") {\n                depth--;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}\n",
            "export const filterBySubstring = (strs, substring) => {\n    return [s for s in strs if substring in s];\n}\n",
            "export const sumProduct = (numbers) => {\n    const nSum = numbers.reduce((sum, num) => sum + num, 0);\n    const nProduct = numbers.reduce((product, num) => product * num, 1);\n    return [nSum, nProduct];\n}\n",
            "export const rollingMax = (numbers) => {\n    let maxSoFar = Number.MIN_SAFE_INTEGER;\n    let result = [];\n    for (const num of numbers) {\n        maxSoFar = Math.max(maxSoFar, num);\n        result.push(maxSoFar);\n    }\n    return result;\n}\n",
            "export const isPalindrome = (s) => s === s.reverse();\nexport const makePalindrome = (s) => {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (isPalindrome(s.substr(i))) {\n            return s + s.substr(0, i)[::-1];\n        }\n    }\n    return \"\";\n}\n",
            "export const stringXor = (a, b) => {\n    return a.replace(/0/g, \"1\").replace(/1/g, \"0\");\n}\n",
            "export const longest = (strs) => {\n    if (!strs) {\n        return null;\n    }\n    let longest_s = strs[0];\n    for (const s of strs) {\n        if (s.length > longest_s.length) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n",
            "export const greatestCommonDivisor = (a, b) => {\n    if (b === 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "export const allPrefixes = (s) => {\n    const prefixes = [];\n    for (let i = 0; i < s.length; i++) {\n        prefixes.push(s.substring(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "export const stringSequence = (n) => {\n    return \" \".join([String(i) for i in range(n + 1)]);\n}\n",
            "export const countDistinctCharacters = (s) => {\n    return s.length;\n}\n",
            "export const parseMusic = (musicString) => {\n    const durations = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    };\n    const notes = musicString.split(\" \");\n    return notes.map(note => durations[note]);\n}\n",
            "export const howManyTimes = (s, substring) => {\n    let times = 0;\n    for (let i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.slice(i, i + substring.length) === substring) {\n            times++;\n        }\n    }\n    return times;\n}\n",
            "export const sortNumbers = (numbers) => {\n    const numDict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    const numList = numbers.split(\" \").filter(x => x in numDict);\n    numList.sort((a, b) => numDict[b] - numDict[a]);\n    return \" \".join(numList);\n}\n",
            "export const findClosestElements = (numbers) => {\n    const sortedNumbers = numbers.sort((a, b) => b - a);\n    let minDiff = Infinity;\n    let closestPair = [];\n    for (let i = 1; i < sortedNumbers.length; i++) {\n        const diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "export const rescaleToUnit = (numbers) => {\n    const minNum = Math.min.apply(null, numbers);\n    const maxNum = Math.max.apply(null, numbers);\n    if (minNum === maxNum) {\n        return [0.0] * numbers.length;\n    } else {\n        return numbers.map(num => (num - minNum) / (maxNum - minNum));\n    }\n}\n",
            "export const filterIntegers = (values) => {\n    return Array.from(values).filter(x => typeof x === \"number\");\n}\n",
            "export const strLength = (s) => s.length;\n",
            "export const largestDivisor = (n) => {\n    let largest = 1;\n    for (let i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest = n // i;\n        }\n    }\n    return largest;\n}\n",
            "export const factorize = (n) => {\n    const factors = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n //= divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n",
            "export const removeDuplicates = (numbers) => {\n    const counts = {};\n    for (const num of numbers) {\n        counts[num] = counts.get(num, 0) + 1;\n    }\n    const res = [];\n    for (const num of numbers) {\n        if (counts[num] === 1) {\n            res.push(num);\n        }\n    }\n    return res;\n}\n",
            "export const flipCase = (s) => {\n    const flipped = [];\n    for (const ch of s) {\n        if (!ch.isAlpha()) {\n            flipped.push(ch);\n        } else if (ch.toLowerCase() === ch) {\n            flipped.push(ch.toUpperCase());\n        } else {\n            flipped.push(ch.toLowerCase());\n        }\n    }\n    return ''.join(flipped);\n}\n",
            "export const concatenate = (strs) => \"\".join(strs);\n",
            "export const filterByPrefix = (strs, prefixStr) => {\n    return strs.filter(s => s.startsWith(prefixStr));\n}\n",
            "export const getPositive = (l) => {\n    return l.filter(e => e > 0);\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const poly = (xs, x) => {\n    let res = 0.0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * x**i;\n    }\n    return res;\n}\nexport const findZero = (xs) => {\n    let x1 = 1.0;\n    let x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        let mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        }\n        if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "export const sortThird = (l) => {\n    const sortedThird = Array.from(l).slice(0, l.length, 3).sort();\n    return [sortedThird[i // 3] if i % 3 === 0 else l[i] for i in range(l.length)];\n}\n",
            "export const listUnique = (l) => {\n    return l.sort((a, b) => a - b);\n}\n",
            "export const maxElement = (l) => {\n    if (l.length === 0) {\n        return 0;\n    }\n    return Math.max.apply(null, l);\n}\n",
            "export const fizzBuzz = (n) => {\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += String(i).includes(\"7\");\n        }\n    }\n    return cnt;\n}\n",
            "export const sortEven = (l) => {\n    const sortedEven = l.slice(0, l.length, 2).sort();\n    return [sortedEven[i // 2] if i % 2 === 0 else l[i] for i in range(l.length)];\n}\n",
            "export const encodeCyclic = (s) => {\n    let result = [];\n    for (let i = 0; i < s.length; i++) {\n        if (i + 3 > s.length) {\n            result.push(s.substring(i));\n        } else {\n            result.push(s.substring(i+1, i+3));\n            result.push(s.substring(i));\n        }\n    }\n    return \"\".join(result);\n}\nexport const decodeCyclic = (s) => {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const primeFib = (n) => {\n    let f = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\n",
            "export const triplesSumToZero = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "export const carRaceCollision = (n) => n * n;\n",
            "export const incrList = (l) => {\n    return l.map(e => e + 1);\n}\n",
            "export const pairsSumToZero = (l) => {\n    const seen = new Set();\n    for (const num of l) {\n        if (-num in seen) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "export const changeBase = (x, bas) => {\n    const digits = [];\n    while (x > 0) {\n        digits.push(x % bas);\n        x = Math.floor(x / bas);\n    }\n    return digits.reverse().join(\"\");\n}\n",
            "export const triangleArea = (a, h) => {\n    return a * h / 2;\n}\n",
            "export const fib4 = (n) => {\n    const fib = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        fib[i % 4] = sum(fib);\n    }\n    return fib[n % 4];\n}\n",
            "export const median = (l) => {\n    const sl = l.sort((a, b) => b - a);\n    if (l.length % 2 != 0) {\n        return sl[l.length // 2];\n    } else {\n        return (sl[l.length // 2] + sl[l.length // 2 - 1]) / 2;\n    }\n}\n",
            "export const isPalindrome = (txt) => txt === txt.reverse();\n",
            "export const modp = (n, p) => {\n    let ret = 1;\n    for (let _ of range(n)) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "export const encodeShift = (s) => {\n    const result = [];\n    for (const ch of s) {\n        const encoded = chr(((ord(ch) - 97 + 5) % 26) + 97);\n        result.push(encoded);\n    }\n    return \"\".join(result);\n}\nexport const decodeShift = (s) => {\n    const result = [];\n    for (const ch of s) {\n        const decoded = chr(((ord(ch) - 97 + 21) % 26) + 97);\n        result.push(decoded);\n    }\n    return \"\".join(result);\n}\n",
            "export const removeVowels = (txt) => {\n    const vowels = \"aeiouAEIOU\";\n    return txt.replace(/[aeiouAEIOU]/g, \"\");\n}\n",
            "export const belowThreshold = (l, t) => {\n    return l.every(x => x < t);\n}\n",
            "export const add = (x, y) => {\n    return x + y;\n}\n",
            "export const sameChars = (s0, s1) => {\n    return new Set(s0).size === new Set(s1).size;\n}\n",
            "export const fib = (n) => {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "export const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (let b of brackets) {\n        if (b === \"<\") {\n            depth++;\n        } else if (b === \">\") {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const monotonic = (l) => {\n    const diff = l.map((x, y) => y - x);\n    return all(x <= 0 for x in diff) || all(x >= 0 for x in diff);\n}\n",
            "export const common = (l1, l2) => {\n    return Array.from(new Set(l1).intersection(new Set(l2)));\n}\n",
            "export const largestPrimeFactor = (n) => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i++;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}\n",
            "export const sumToN = (n) => {\n    let result = 0;\n    for (let i = 0; i <= n; i++) {\n        result += i;\n    }\n    return result;\n}\n",
            "export const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (let b of brackets) {\n        if (b === \"(\") {\n            depth++;\n        } else if (b === \")\") {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const derivative = (xs) => {\n    return [xs[i] * i for i in range(1, len(xs))]\n}\n",
            "export const fibfib = (n) => {\n    if (n <= 1) {\n        return 0;\n    }\n    let a = 0;\n    let b = 0;\n    let c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "export const vowelsCount = (s) => {\n    const vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() in vowels || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n",
            "export const circularShift = (x, shift) => {\n    const x_str = String(x);\n    if (shift > x_str.length) {\n        return x_str.slice(x_str.length - 1, -shift).concat(x_str.slice(0, -shift));\n    } else {\n        return x_str.slice(x_str.length - shift, x_str.length).concat(x_str.slice(0, x_str.length - shift));\n    }\n}\n",
            "export const digitSum = (s) => {\n    let result = 0;\n    for (const c of s) {\n        if (c.toUpperCase() === c) {\n            result += c.charCodeAt(0);\n        }\n    }\n    return result;\n}\n",
            "export const fruitDistribution = (s, n) => {\n    const words = s.split(' ');\n    const apples = parseInt(words[words.indexOf(\"apples\") - 1]);\n    const oranges = parseInt(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "export const pluck = (arr) => {\n    const evens = arr.filter(n => n % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n    const minEven = Math.min(...evens);\n    return [minEven, arr.indexOf(minEven)];\n}\n",
            "export const search = (lst) => {\n    const freqs = {};\n    for (const n of lst) {\n        freqs[n] = freqs.get(n, 0) + 1;\n    }\n    const goodVals = [k for k, v in freqs.items() if v >= k];\n    return max(goodVals, default=-1);\n}\n",
            "export const strangeSortList = (lst) => {\n    const sl = lst.sort((a, b) => b - a);\n    const result = [];\n    let left = 0;\n    let right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left++;\n        if (left <= right) {\n            result.push(sl[right]);\n            right--;\n        }\n    }\n    return result;\n}\n",
            "export const triangleArea = (a, b, c) => {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2.0;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "export const willItFly = (q, w) => {\n    if (q.length === 0) {\n        return false;\n    }\n    const isPalin = all(q[i] === q[q.length - i - 1] for i in range(q.length));\n    const total = sum(q);\n    return isPalin && total <= w;\n}\n",
            "export const smallestChange = (arr) => {\n    let ans = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i] !== arr[arr.length - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;\n}\n",
            "export const totalMatch = (lst1, lst2) => {\n    const cnt1 = lst1.reduce((acc, e) => acc + e.length, 0);\n    const cnt2 = lst2.reduce((acc, e) => acc + e.length, 0);\n    return lst1 if cnt1 <= cnt2 else lst2;\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const isMultiplyPrime = (a) => {\n    let cnt = 0;\n    for (let i = 2; i <= a; i++) {\n        if (isPrime(i)) {\n            while (a % i === 0) {\n                cnt++;\n                a /= i;\n            }\n        }\n    }\n    return cnt === 3;\n}\n",
            "export const isSimplePower = (x, n) => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}\n",
            "export const isCube = (a) => {\n    const root = Math.pow(a, 1 / 3);\n    return Math.pow(root, 3) === a;\n}\n",
            "export const hexKey = (num) => {\n    let result = 0;\n    for (const c of num) {\n        if (c === \"2\" || c === \"3\" || c === \"5\" || c === \"7\" || c === \"B\" || c === \"D\") {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "export const decimalToBinary = (dec) => {\n    const binary = dec.toString(2);\n    return `db${binary}db`;\n}\n",
            "export const isHappy = (s) => {\n    // Implementation here\n}\n",
            "export const numericalLetterGrade = (grades) => {\n    const result = [];\n    for (const g of grades) {\n        if (g === 4) {\n            result.push(\"A+\");\n        } else if (g > 3.7) {\n            result.push(\"A\");\n        } else if (g > 3.3) {\n            result.push(\"A-\");\n        } else if (g > 3) {\n            result.push(\"B+\");\n        } else if (g > 2.7) {\n            result.push(\"B\");\n        } else if (g > 2.3) {\n            result.push(\"B-\");\n        } else if (g > 2) {\n            result.push(\"C+\");\n        } else if (g > 1.7) {\n            result.push(\"C\");\n        } else if (g > 1.3) {\n            result.push(\"C-\");\n        } else if (g > 1) {\n            result.push(\"D+\");\n        } else if (g > 0.7) {\n            result.push(\"D\");\n        } else if (g > 0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n",
            "export const primeLength = (s) => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(length)); i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const startsOneEnds = (n) => {\n    if (n === 1) {\n        return 1;\n    }\n    return 2 * 9 * Math.pow(10, n - 2);\n}\n",
            "export const solve = (n) => {\n    const digitsSum = n.toString().split('').map(Number).reduce((a, b) => a + b, 0);\n    return Number(digitsSum).toString(2);\n}\n",
            "export const add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1 && lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const antiShuffle = (s) => {\n    const words = s.split(\" \");\n    const result = \"\";\n    for (const word of words) {\n        result += \"\".join(Array.from(word).sort());\n        result += \" \";\n    }\n    return result.trim();\n}\n",
            "export const getRow = (lst, x) => {\n    const coords = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    return sorted(coords, (a, b) => (a[0] - b[0], -a[1]))\n}\n",
            "export const sortArray = (arr) => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) {\n        return arr.sort((a, b) => b - a);\n    } else {\n        return arr.sort();\n    }\n}\n",
            "export const encrypt = (s) => {\n    let result = [];\n    for (const ch of s) {\n        let shifted = ch.charCode() + 4;\n        if (shifted > 122) {\n            shifted -= 26;\n        }\n        result.push(String.fromCharCode(shifted));\n    }\n    return result.join(\"\");\n}\n",
            "export const nextSmallest = (lst) => {\n    const sl = Array.from(new Set(lst)).sort();\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}\n",
            "export const isBored = (s) => {\n    const sentences = re.split(/[.!?]\\s*/g, s);\n    return sentences.filter(sentence => sentence.length >= 2).filter(sentence => sentence.substr(0, 2) === \"I \").length;\n}\n",
            "export const anyInt = (x, y, z) => {\n    if (typeof x === \"number\" && typeof y === \"number\" && typeof z === \"number\") {\n        if (x + y === z || x + z === y || y + z === x) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const encode = (message) => {\n    const vowels = \"aeiouAEIOU\";\n    let result = [];\n    for (const ch of message) {\n        if (ch.isalpha()) {\n            const ch1 = ch.toUpperCase() if ch.toLowerCase() else ch.toLowerCase();\n            if (ch1 in vowels) {\n                ch1 = ch1.charCodeAt(0) + 2;\n            }\n            result.push(ch1);\n        } else {\n            result.push(ch);\n        }\n    }\n    return String.fromCharCode(...result);\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const skjkasdkd = (lst) => {\n    const primes = lst.filter(isPrime);\n    if (primes.length === 0) {\n        return 0;\n    }\n    const largest = String(Math.max(...primes)).toString();\n    return sum(...largest.split('').map(Number));\n}\n",
            "export const checkDictCase = (d) => {\n    const keys = Object.keys(d);\n    return keys.length > 0 && (\n        all(c => c.islower(), keys) ||\n        all(c => c.isupper(), keys)\n    );\n}\n",
            "export const countUpTo = (n) => {\n    const primes = [];\n    for (let num = 2; num < n; num++) {\n        if (all(num % p != 0 for p in primes)) {\n            primes.push(num);\n        }\n    }\n    return primes;\n}\n",
            "export const multiply = (a, b) => {\n    return Math.abs(a) % 10 * Math.abs(b) % 10;\n}\n",
            "export const countUpper = (s) => {\n    const vowels = \"AEIOU\";\n    return s.split('').filter((c, i) => i % 2 === 0 && c in vowels).length;\n}\n",
            "export const closestInteger = (value) => {\n    const num = Number(value);\n    if (num >= 0) {\n        return Math.round(num + 0.5);\n    } else {\n        return Math.round(num - 0.5);\n    }\n}\n",
            "export const makeAPile = (n) => {\n    return [n + 2 * i for i in range(n)];\n}\n",
            "export const wordsString = (s) => {\n    const result = [];\n    const words = s.split(/[, ]/);\n    for (const w of words) {\n        if (w.length > 0) {\n            result.push(w);\n        }\n    }\n    return result;\n}\n",
            "export const chooseNum = (x, y) => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    return y - 1 if (x != y) else -1;\n}\n",
            "export const roundedAvg = (n, m) => {\n    const rAvg = (m + n) / 2.0 + 0.5;\n    return bin(rAvg)[2:];\n}\n",
            "export const allDigitsOdd = (s) => {\n    return s.toString().every(digit => parseInt(digit) % 2 != 0);\n}\nexport const uniqueDigits = (x) => {\n    const result = [];\n    for (const num of x) {\n        if (allDigitsOdd(num.toString())) {\n            result.push(num);\n        }\n    }\n    return result.sort();\n}\n",
            "export const byLength = (arr) => {\n    const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const sortedArr = arr.filter((x) => 1 <= x <= 9).sort((a, b) => b - a);\n    return sortedArr.map((x) => digitNames[x - 1]);\n}\n",
            "export const f = (n) => {\n    const nums = Array.from(Array(n + 1).keys());\n    return [\n        sum(nums.slice(0, i)),\n        reduce((x, y) => x * y, nums.slice(0, i), 1)\n    ].filter(e => e % 2 !== 0).map((e, i) => e if i % 2 === 0 else e * nums[i]);\n}\n",
            "export const isPalindrome = (txt) => txt === txt.reverse();\nexport const evenOddPalindrome = (n) => {\n    let even = 0;\n    let odd = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(String(i))) {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n    }\n    return [even, odd];\n}\n",
            "export const digitsSum = (n) => {\n    const nStr = String(n);\n    if (n >= 0) {\n        return nStr.length === 1 ? nStr[0] : nStr[0] + digitsSum(n);\n    } else {\n        return nStr.length === 1 ? nStr[0] * 2 : nStr[0] * 2 + digitsSum(n);\n    }\n}\nexport const countNums = (arr) => {\n    return arr.length - arr.filter(n => digitsSum(n) > 0).length;\n}\n",
            "export const moveOneBall = (arr) => {\n    const sortedArr = arr.sort((a, b) => b - a);\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.slice(i) === sortedArr.slice(0, arr.length - i) && arr.slice(0, i) === sortedArr.slice(arr.length - i, arr.length)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const canExchange = (lst1, lst2) => {\n    const oddCnt = lst1.filter(e => e % 2 != 0).length;\n    const evenCnt = lst2.filter(e => e % 2 == 0).length;\n    return evenCnt >= oddCnt ? \"YES\" : \"NO\";\n}\n",
            "export const histogram = (test) => {\n    const freq = {};\n    const words = [w for w in test.split(\" \") if len(w) > 0];\n    for (const w of words) {\n        freq[w] = freq.get(w, 0) + 1;\n    }\n    const result = {};\n    if (freq.length > 0) {\n        const maxFreq = Math.max(...freq.values());\n        for (const k, v of freq.items()) {\n            if (v == maxFreq) {\n                result[k] = v;\n            }\n        }\n    }\n    return result;\n}\n",
            "export const reverseDelete = (s, c) => {\n    const s1 = s.replace(c, \"\");\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"];\n}\n",
            "export const oddCount = (lst) => {\n    const result = [];\n    for (const num of lst) {\n        const n = sum(d => d % 2 === 1, num);\n        const rs = \"the number of odd elements in the string i of the input.\";\n        result.push(rs.replace(\"i\", n));\n    }\n    return result;\n}\n",
            "export const minSubArraySum = (nums) => {\n    let minSum = 0;\n    let curSum = 0;\n    for (const n of nums) {\n        curSum = Math.min(curSum + n, 0);\n        minSum = Math.min(curSum, minSum);\n    }\n    if (minSum == 0) {\n        minSum = Math.min(nums);\n    }\n    return minSum;\n}\n",
            "export const maxFill = (grid, capacity) => {\n    let result = 0;\n    for (const row of grid) {\n        for (const num of row) {\n            result += Math.ceil(num / capacity);\n        }\n    }\n    return result;\n}\n",
            "export const sortArray = (arr) => {\n    return arr.sort((a, b) => {\n        const aCount = countOnes(a);\n        const bCount = countOnes(b);\n        return aCount - bCount > 0 ? -1 : aCount - bCount < 0 ? 1 : a - b;\n    });\n}\n",
            "export const selectWords = (s, n) => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = s.split(\" \");\n    return [w for w in words if words.length > 0 && words.length === [c for c in w if c.lower() in consonants].length];\n}\n",
            "export const getClosestVowel = (word) => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i > 0; i--) {\n        if (word.charAt(i) in vowels && word.charAt(i - 1) not in vowels && word.charAt(i + 1) not in vowels) {\n            return word.charAt(i);\n        }\n    }\n    return \"\";\n}\n",
            "export const matchParens = (lst) => {\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    return \"Yes\" if check(s1) || check(s2) else \"No\";\n}\n",
            "export const maximum = (arr, k) => {\n    return arr.slice(arr.length - k);\n}\n",
            "export const solution = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const addElements = (arr, k) => {\n    let result = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            result += arr[i];\n        }\n    }\n    return result;\n}\n",
            "export const getOddCollatz = (n) => {\n    const collatz = [1];\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = n // 2;\n        }\n    }\n    return collatz.sort();\n}\n",
            "export const validDate = (date) => {\n    if (!date.length === 10 || date.charAt(2) !== \"-\" || date.charAt(5) !== \"-\") {\n        return false;\n    }\n    const m = parseInt(date.slice(0, 2));\n    const d = parseInt(date.slice(3, 5));\n    if (m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31) {\n        return true;\n    }\n    if (m in [4, 6, 9, 11] && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m === 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "export const splitWords = (txt) => {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [String(txt.length).length];\n    }\n}\n",
            "export const isSorted = (lst) => {\n    const freq = {};\n    for (const i of lst) {\n        freq[i] = freq.get(i, 0) + 1;\n    }\n    return max(freq.values(), default=0) <= 2;\n}\n",
            "export const intersection = (interval1, interval2) => {\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n    return \"YES\" if length > 0 && isPrime(length) else \"NO\";\n}\n",
            "export const prodSigns = (arr) => {\n    if (!arr) {\n        return null;\n    }\n    if (0 in arr) {\n        return 0;\n    }\n    const sign = arr.filter(n => n < 0).length % 2 === 1 ? -1 : 1;\n    return sign * arr.reduce((sum, n) => sum + abs(n), 0);\n}\n",
            "export const minPath = (grid, k) => {\n    const n = grid.length;\n    const minVal = n * n + 1;\n    const result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(i % 2 === 0 ? 1 : minVal);\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                const temp = [];\n                if (i != 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j != 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i != n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j != n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                minVal = Math.min(...temp);\n            }\n        }\n    }\n    return result;\n}\n",
            "export const tri = (n) => {\n    if (n === 0) {\n        return [1];\n    }\n    const seq = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "export const digits = (n) => {\n    const odds = [int(d) for d in str(n) if int(d) % 2 == 1];\n    return reduce((x, y) => x * y, odds, 1) if (odds.length > 0) else 0;\n}\n",
            "export const isNested = (s) => {\n    let openIdx = [];\n    let closeIdx = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === '[') {\n            openIdx.push(i);\n        } else if (s[i] === ']') {\n            closeIdx.push(i);\n        }\n    }\n    let closeIdx = closeIdx.reverse();\n    let cnt = 0;\n    let i = 0;\n    let l = closeIdx.length;\n    for (let idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "export const sumSquares = (lst) => {\n    let result = 0;\n    for (const n of lst) {\n        result += Math.ceil(n) ** 2;\n    }\n    return result;\n}\n",
            "export const checkIfLastCharIsALetter = (txt) => {\n    if (!txt) {\n        return false;\n    }\n    const last = txt.split(' ').pop();\n    return last.length === 1 && last[0].isalpha();\n}\n",
            "export const canArrange = (arr) => {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    let idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]];\n    return max(idx, default=-1);\n}\n",
            "export const largestSmallestIntegers = (lst) => {\n    const neg = lst.filter(i => i < 0);\n    const pos = lst.filter(i => i > 0);\n    const maxNeg = max(neg) if (neg.length > 0) else null;\n    const minPos = min(pos) if (pos.length > 0) else null;\n    return [maxNeg, minPos];\n}\n",
            "export const compareOne = (a, b) => {\n    const a1 = anyToReal(a);\n    const b1 = anyToReal(b);\n    if (a1 == b1) {\n        return null;\n    }\n    if (a1 > b1) {\n        return a1;\n    }\n    return b1;\n}\n",
            "export const isEqualToSumEven = (n) => {\n    return n % 2 === 0 && n >= 8;\n}\n",
            "export const specialFactorial = (n) => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "export const fixSpaces = (txt) => {\n    return re.sub(/\\s{3,}/g, \"-\", txt).replace(\" \", \"_\");\n}\n",
            "export const fileNameCheck = (fileName) => {\n    const suf = [\"txt\", \"exe\", \"dll\"];\n    const lst = fileName.split(\".\");\n    if (lst.length != 2 || !lst[1] in suf || lst[0].length == 0 || !lst[0][0].isalpha() || lst[0].includes(Number)) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "export const sumSquares = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0) {\n            result += Math.pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    return \" \".join([w for w in words if isPrime(w.length)]);\n}\n",
            "export const simplify = (x, n) => {\n    const xs = x.split(\"/\");\n    const ns = n.split(\"/\");\n    const num = parseInt(xs[0]) * parseInt(ns[0]);\n    const den = parseInt(xs[1]) * parseInt(ns[1]);\n    return num % den === 0;\n}\n",
            "export const orderByPoints = (nums) => {\n    return nums.sort((a, b) => digitsSum(a) - digitsSum(b));\n}\n",
            "export const specialFilter = (nums) => {\n    const odds = \"13579\";\n    return nums.filter(n => n > 10 && n % 2 === 1 && String(n)[0] in odds).length;\n}\n",
            "export const getMaxTriples = (n) => {\n    let c = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        let a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6;\n}\n",
            "export const bf = (planet1, planet2) => {\n    const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (planet1 not in names || planet2 not in names) {\n        return [];\n    }\n    let l = names.indexOf(planet1);\n    let r = names.indexOf(planet2);\n    if (l > r) {\n        l, r = r, l;\n    }\n    if (l == r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n}\n",
            "export const sortedListSum = (lst) => {\n    return lst.filter(s => s.length % 2 === 0).sort((a, b) => a.length - b.length);\n}\n",
            "export const xOrY = (n, x, y) => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "export const doubleTheDifference = (lst) => {\n    let result = 0;\n    for (const n of lst) {\n        if (n >= 0 && n % 2 === 1) {\n            result += n * n;\n        }\n    }\n    return result;\n}\n",
            "export const compare = (game, guess) => {\n    return [Math.abs(x - y) for x, y in zip(game, guess)];\n}\n",
            "export const strongestExtension = (className, extensions) => {\n    let maxS = -Infinity;\n    let maxExt = \"\";\n    for (const ext of extensions) {\n        let upper = 0;\n        let lower = 0;\n        for (const c of ext) {\n            if (c.isUpperCase()) {\n                upper++;\n            } else if (c.isLowerCase()) {\n                lower++;\n            }\n        }\n        let s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return `${className}.${maxExt}`;\n}\n",
            "export const cycpatternCheck = (a, b) => {\n    let a = a.toLowerCase();\n    let b = b.toLowerCase();\n    let lenB = b.length;\n    for (let i = 0; i < lenB; i++) {\n        if (b.substr(i) + b.substr(0, i) in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const evenOddCount = (num) => {\n    const ds = String(Math.abs(num)).split(\"\");\n    const even = ds.filter(d => parseInt(d) % 2 === 0).length;\n    return [even, ds.length - even];\n}\n",
            "export const intToMiniRoman = (num) => {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let res = [];\n    for (let i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.push(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return \"\".join(res);\n}\n",
            "export const rightAngleTriangle = (a, b, c) => {\n    const s = [a, b, c].sort((a, b) => a * a + b * b);\n    return s[0] * s[0] + s[1] * s[1] === s[2] * s[2];\n}\n",
            "export const findMax = (words) => {\n    let maxCnt = 0;\n    let maxW = \"\";\n    for (const w of words) {\n        let cnt = w.length;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        }\n        elif (cnt == maxCnt) {\n            maxW = min(maxW, w);\n        }\n    }\n    return maxW;\n}\n",
            "export const eat = (num, need, remaining) => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "export const doAlgebra = (operators, operands) => {\n    let ops = operators.copy();\n    let nums = operands.copy();\n    let i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] === \"**\") {\n            nums[i] = Math.pow(nums[i], nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i--;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        elif (ops[i] === \"//\") {\n            nums[i] = nums[i] / nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        elif (ops[i] === \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i++;\n    }\n    return nums[0];\n}\n",
            "export const solve = (s) => {\n    const result = [];\n    for (const ch of s) {\n        if (!ch.isalpha()) {\n            result.push(ch);\n        } else if (ch.isupper()) {\n            result.push(ch.toLowerCase());\n        } else if (ch.islower()) {\n            result.push(ch.toUpperCase());\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const stringToMd5 = (txt) => {\n    const md5_hash = new hashlib.md5();\n    const txt_bytes = txt.encode();\n    md5_hash.update(txt_bytes);\n    const md5_encoded = md5_hash.hexdigest();\n    return md5_encoded;\n}\n",
            "export const generateIntegers = (a, b) => [\n    i for i in range(max(2, min(a, b)), min(8, max(a, b)) + 1) if i % 2 == 0\n];\n"
        ],
        "kotlin": [
            "fun hasCloseElements(numbers: List<Double>, threshold: Double): Boolean {\n    for (i in numbers.indices) {\n        for (j in numbers.indices) {\n            if (i != j && abs(numbers[i] - numbers[j]) < threshold) {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "fun separateParenGroups(parenString: String): List<String> {\n    val groups = mutableListOf<String>()\n    var stk = mutableListOf<Char>()\n    var currentGroup = \"\"\n    var parens = parenString.replace(\" \", \"\")\n    for (ch in parens) {\n        if (ch == \"(\") {\n            stk.add(ch)\n            currentGroup += ch\n        } else if (ch == \")\") {\n            stk.removeLast()\n            currentGroup += ch\n            if (stk.isEmpty()) {\n                groups.add(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "fun truncateNumber(num: Double): Double {\n    return num - floor(num)\n}\n",
            "fun belowZero(operations: List<Int>): Boolean {\n    var balance = 0\n    for (op in operations) {\n        balance += op\n        if (balance < 0) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun meanAbsoluteDeviation(numbers: List<Double>): Double {\n    val mean = numbers.sum / numbers.size\n    val deviation = numbers.map { x -> abs(x - mean) }.sum\n    return deviation / numbers.size\n}\n",
            "fun intersperse(numbers: List<Int>, delimiter: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in numbers.indices) {\n        if (i != 0) result.add(delimiter)\n        result.add(numbers[i])\n    }\n    return result\n}\n",
            "fun parseNestedParens(parenString: String): List<Int> {\n    val result = mutableListOf<Int>()\n    var parenGroups = parenString.split()\n    for (group in parenGroups) {\n        var maxDepth = 0\n        var depth = 0\n        for (ch in group) {\n            if (ch == \"(\") {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if (ch == \")\") {\n                depth -= 1\n            }\n        }\n        result.add(maxDepth)\n    }\n    return result\n}\n",
            "fun filterBySubstring(strs: List<String>, substring: String): List<String> {\n    val result = mutableListOf<String>()\n    for (s in strs) {\n        if (s.contains(substring)) {\n            result.add(s)\n        }\n    }\n    return result\n}\n",
            "fun sumProduct(numbers: List<Int>): List<Int> {\n    val nSum = numbers.sumTo(numbers.size - 1)\n    val nProduct = numbers.reduce { x, y: x * y }\n    return [nSum, nProduct]\n}\n",
            "fun rollingMax(numbers: List<Int>): List<Int> {\n    var maxSoFar = Int.MIN_VALUE\n    var result = mutableListOf<Int>()\n    for (num in numbers) {\n        maxSoFar = max(maxSoFar, num)\n        result.add(maxSoFar)\n    }\n    return result\n}\n",
            "fun makePalindrome(s: String): String {\n    if (s == s.reversed()) {\n        return s\n    }\n    for (i in s.reversed()) {\n        if (s.reversed().contains(i)) {\n            return s + i.reversed()\n        }\n    }\n    return \"\"\n}\n",
            "fun stringXor(a: String, b: String): String {\n    val result = \"\"\n    for (i in 0..a.size - 1) {\n        val x = a[i]\n        val y = b[i]\n        result += if (x == y) \"0\" else \"1\"\n    }\n    return result\n}\n",
            "fun longest(strs: List<String>): String? {\n    if (strs.isEmpty) {\n        return null\n    }\n    var longest_s = strs[0]\n    for (s in strs) {\n        if (s.length > longest_s.length) {\n            longest_s = s\n        }\n    }\n    return longest_s\n}\n",
            "fun greatestCommonDivisor(a: Int, b: Int): Int {\n    val result = if (b == 0) a else greatestCommonDivisor(b, a % b)\n    return result\n}\n",
            "fun allPrefixes(s: String): List<String> {\n    val prefixes = mutableListOf<String>()\n    for (i in 0..s.length - 1) {\n        prefixes.add(s[0..i])\n    }\n    return prefixes\n}\n",
            "fun stringSequence(n: Int): String {\n    return \" \".join(n + 1)\n}\n",
            "fun countDistinctCharacters(s: String): Int {\n    val result = 0\n    for (c in s.lower()) {\n        if (result.contains(c)) {\n            continue\n        }\n        result += c\n    }\n    return result.size\n}\n",
            "fun parseMusic(musicString: String): List<Int> {\n    val durations = mapOf<Char, Int>()\n    durations[\"o\"] = 4\n    durations[\"o|\"] = 2\n    durations[\".|\"] = 1\n    val notes = musicString.split()\n    return listOf(durations[note] for note in notes)\n}\n",
            "fun howManyTimes(s: String, substring: String): Int {\n    var times = 0\n    for (i in 0..s.length - substring.length + 1) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "fun sortNumbers(numbers: String): String {\n    val numDict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    val numList = numDict.keys().filter { x in numDict.keys() && x in numbers }\n    val numList = numList.sorted(key = numDict[it])\n    return numList.join(\" \")\n}\n",
            "fun findClosestElements(numbers: List<Double>): List<Double> {\n    val sortedNumbers = numbers.sorted()\n    var minDiff = Double.infinity\n    var closestPair = mutableListOf<Double>()\n    for (i in 1..sortedNumbers.size - 1) {\n        val diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if (diff < minDiff) {\n            minDiff = diff\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]]\n        }\n    }\n    return closestPair\n}\n",
            "fun rescaleToUnit(numbers: List<Double>): List<Double> {\n    val minNum = numbers.min()\n    val maxNum = numbers.max()\n    if (minNum == maxNum) {\n        return numbers.map { 0.0 }\n    } else {\n        return numbers.map { (num - minNum) / (maxNum - minNum) }\n    }\n}\n",
            "fun filterIntegers(values: List<Any>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (x in values) {\n        if (x is Int) result.add(x)\n    }\n    return result\n}\n",
            "fun strLength(s: String): Int {\n    return s.length\n}\n",
            "fun largestDivisor(n: Int): Int {\n    var i = 2\n    while (n % i != 0) {\n        i++\n    }\n    return n / i\n}\n",
            "fun factorize(n: Int): List<Int> {\n    val factors = mutableListOf<Int>()\n    var divisor = 2\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor)\n            n //= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "fun removeDuplicates(numbers: List<Int>): List<Int> {\n    val counts = numbers.map { num -> num.toInt() }.groupBy(it).mapValues(it.count).toMap()\n    val res = numbers.filter { num -> counts[num] == 1 }\n    return res\n}\n",
            "fun flipCase(s: String): String {\n    val flipped = mutableListOf<Char>()\n    for (ch in s) {\n        if (!ch.isLetter()) {\n            flipped.add(ch)\n        } else if (ch.isLowerCase()) {\n            flipped.add(ch.toUpperCase())\n        } else {\n            flipped.add(ch.toLowerCase())\n        }\n    }\n    return flipped.toString()\n}\n",
            "fun concatenate(strs: List<String>): String {\n    return \"\".join(strs)\n}\n",
            "fun filterByPrefix(strs: List<String>, prefixStr: String): List<String> {\n    val result = mutableListOf<String>()\n    for (s in strs) {\n        if (s.startsWith(prefixStr)) {\n            result.add(s)\n        }\n    }\n    return result\n}\n",
            "fun getPositive(l: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (num in l) {\n        if (num > 0) {\n            result.add(num)\n        }\n    }\n    return result\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2..floor(sqrt(n))) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n",
            "fun poly(xs: List<Int>, x: Double): Double {\n    var res = 0.0\n    for (i in 0..xs.size - 1) {\n        res += xs[i] * x**i\n    }\n    return res\n}\nfun findZero(xs: List<Int>): Double {\n    var x1 = 1.0\n    var x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2\n        x2 *= 2\n    }\n    while abs(x1 - x2) > 1e-10) {\n        var mid = (x1 + x2) / 2\n        if (poly(xs, mid) == 0) {\n            return mid\n        }\n        elif (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid\n        }\n        else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "fun sortThird(l: List<Int>): List<Int> {\n    val sortedThird = l.sorted()\n    return l.map {\n        if (i % 3 == 0) sortedThird[i // 3] else l[i]\n    }\n}\n",
            "fun listUnique(l: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (e in l) {\n        if (!result.contains(e)) {\n            result.add(e)\n        }\n    }\n    return result\n}\n",
            "fun maxElement(l: List<Int>): Int {\n    if (l.isEmpty) {\n        return 0\n    }\n    return l.max()\n}\n",
            "fun fizzBuzz(n: Int): Int {\n    var cnt = 0\n    for (i in 0..n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString().count(\"7\")\n        }\n    }\n    return cnt\n}\n",
            "fun sortEven(l: List<Int>): List<Int> {\n    val sortedEven = l.sorted(l[::2].map { e -> e })\n    return l.map { i ->\n        if (i % 2 == 0) {\n            sortedEven[i // 2]\n        } else {\n            l[i]\n        }\n    }\n}\n",
            "fun encodeCyclic(s: String): String {\n    var result = \"\"\n    for (i in 0 until s.length step 3) {\n        if (i + 3 > s.length) {\n            result += s[i:]\n        } else {\n            result += s[i+1:i+3]\n            result += s[i]\n        }\n    }\n    return result\n}\nfun decodeCyclic(s: String): String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2 until floor(sqrt(n))) {\n        if (n % i == 0) return false\n    }\n    return true\n}\nfun primeFib(n: Int): Int {\n    var f = arrayOf(0, 1)\n    var cnt = 0\n    while (cnt < n) {\n        f = arrayOf(f[1], f[0] + f[1])\n        if (isPrime(f[1])) {\n            cnt += 1\n        }\n    }\n    return f[1]\n}\n",
            "fun triplesSumToZero(l: List<Int>): Boolean {\n    for (i in 0..l.size - 1) {\n        for (j in i + 1..l.size - 1) {\n            for (k in j + 1..l.size - 1) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "fun carRaceCollision(n: Int): Int {\n    return n * n\n}\n",
            "fun incrList(l: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in l) {\n        result.add(i + 1)\n    }\n    return result\n}\n",
            "fun pairsSumToZero(l: List<Int>): Boolean {\n    var seen = mutableSet<Int>()\n    for (num in l) {\n        if (-num in seen) return true\n        seen.add(num)\n    }\n    return false\n}\n",
            "fun changeBase(x: Int, bas: Int): String {\n    val digits = mutableListOf<String>()\n    while (x > 0) {\n        digits.add(x % bas)\n        x //= bas\n    }\n    return digits.joinToString()\n}\n",
            "fun triangleArea(a: Int, h: Int): Double {\n    return a.toDouble() * h.toDouble() / 2\n}\n",
            "fun fib4(n: Int): Int {\n    val fib = arrayOf(0, 0, 2, 0)\n    for (i in 4..n) {\n        fib[i % 4] = sum(fib)\n    }\n    return fib[n % 4]\n}\n",
            "fun median(l: List<Double>): Double {\n    val sl = l.sorted()\n    if (l.size % 2 != 0) {\n        return sl[l.size / 2]\n    } else {\n        return (sl[l.size / 2] + sl[l.size / 2 - 1]) / 2\n    }\n}\n",
            "fun isPalindrome(txt: String): Boolean {\n    val reversed = txt.reversed()\n    return txt == reversed\n}\n",
            "fun modp(n: Int, p: Int): Int {\n    var ret = 1\n    for (i in 1..n) {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "fun encodeShift(s: String): String {\n    val result = mutableListOf<Char>()\n    for (ch in s) {\n        result.add(chr(((ord(ch) - 97 + 5) % 26) + 97))\n    }\n    return result.toString()\n}\nfun decodeShift(s: String): String {\n    val result = mutableListOf<Char>()\n    for (ch in s) {\n        result.add(chr(((ord(ch) - 97 + 21) % 26) + 97))\n    }\n    return result.toString()\n}\n",
            "fun removeVowels(txt: String): String {\n    val vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in txt if char not in vowels])\n}\n",
            "fun belowThreshold(l: List<Int>, t: Int): Boolean {\n    val result = true\n    for (x in l) {\n        if (x >= t) {\n            result = false\n            break\n        }\n    }\n    return result\n}\n",
            "fun add(x: Int, y: Int): Int {\n    return x + y\n}\n",
            "fun sameChars(s0: String, s1: String): Boolean {\n    val set0 = s0.toSet()\n    val set1 = s1.toSet()\n    return set0 == set1\n}\n",
            "fun fib(n: Int): Int {\n    if (n <= 1) {\n        return n\n    } else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n",
            "fun correctBracketing(brackets: String): Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == \"<\") depth += 1\n        elif (b == \">\") depth -= 1\n        if (depth < 0) return false\n    }\n    return depth == 0\n}\n",
            "fun monotonic(l: List<Int>): Boolean {\n    val diff = l.map { x, y -> y - x }\n    return diff.all { x <= 0 } || diff.all { x >= 0 }\n}\n",
            "fun common(l1: List<Int>, l2: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (e in l1) {\n        if (l2.contains(e)) {\n            result.add(e)\n        }\n    }\n    return result\n}\n",
            "fun largestPrimeFactor(n: Int): Int {\n    var i = 2\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i\n        } else {\n            i += 1\n        }\n    }\n    return n\n}\n",
            "fun sumToN(n: Int): Int {\n    return (n + 1).toInt.toString()\n}\n",
            "fun correctBracketing(brackets: String): Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == \"(\") depth += 1\n        elif (b == \")\") depth -= 1\n        if (depth < 0) return false\n    }\n    return depth == 0\n}\n",
            "fun derivative(xs: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in 1..xs.size - 1) {\n        result.add(xs[i] * i)\n    }\n    return result\n}\n",
            "fun fibfib(n: Int): Int {\n    var a = 0\n    var b = 0\n    var c = 1\n    while (n > 2) {\n        a = b\n        b = c\n        c = a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "fun vowelsCount(s: String): Int {\n    var cnt = 0\n    for (i in 0..s.length - 1) {\n        if (s[i].lower() in \"aeiou\" || (i == s.length - 1 && s[i].lower() == \"y\")) {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "fun circularShift(x: Int, shift: Int): String {\n    val xStr = x.toString()\n    if (shift > xStr.length) {\n        return xStr.reversed()\n    } else {\n        return xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift)\n    }\n}\n",
            "fun digitSum(s: String): Int {\n    var result = 0\n    for (c in s) {\n        if (c.isUpperCase) {\n            result += ord(c)\n        }\n    }\n    return result\n}\n",
            "fun fruitDistribution(s: String, n: Int): Int {\n    val words = s.split(\" \")\n    val apples = int(words[words.index(\"apples\") - 1])\n    val oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n}\n",
            "fun pluck(arr: List<Int>): List<Int> {\n    val evens = arr.filter { n -> n % 2 == 0 }\n    if (evens.isEmpty) {\n        return []\n    }\n    val minEven = evens.min()\n    return [minEven, arr.indexOf(minEven)]\n}\n",
            "fun search(lst: List<Int>): Int {\n    val freqs = mutableMap<Int, Int>()\n    for (n in lst) {\n        freqs[n] = freqs.getOrDefault(n, 0) + 1\n    }\n    val goodVals = freqs.keys.filter { k -> freqs[k] >= k }\n    return goodVals.maxOrDefault(-1)\n}\n",
            "fun strangeSortList(lst: List<Int>): List<Int> {\n    val sl = lst.sorted()\n    val result = mutableListOf<Int>()\n    var left = 0\n    var right = sl.size - 1\n    while (left <= right) {\n        result.add(sl[left])\n        left += 1\n        if (left <= right) {\n            result.add(sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "fun triangleArea(a: Int, b: Int, c: Int): Double {\n    if (a + b > c && a + c > b && b + c > a) {\n        val s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        return -1.0\n    }\n}\n",
            "fun willItFly(q: List<Int>, w: Int): Boolean {\n    if (q.size == 0) {\n        return false\n    }\n    val isPalin = all(q[i] == q[q.size - i - 1] for i in 0..q.size - 1)\n    val total = q.sum\n    return isPalin and total <= w\n}\n",
            "fun smallestChange(arr: List<Int>): Int {\n    var ans = 0\n    for (i in 0..arr.size / 2) {\n        if (arr[i] != arr[arr.size - i - 1]) {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "fun totalMatch(lst1: List<String>, lst2: List<String>): List<String> {\n    val cnt1 = lst1.map { s -> s.length }.sum\n    val cnt2 = lst2.map { s -> s.length }.sum\n    return if (cnt1 <= cnt2) lst1 else lst2\n}\n",
            "fun isMultiplyPrime(a: Int): Boolean {\n    var cnt = 0\n    for (i in 2 until a) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "fun isSimplePower(x: Int, n: Int): Boolean {\n    if (n < 2) return x == n\n    var tmp = 1\n    while tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "fun isCube(a: Int): Boolean {\n    val root = a.toDouble().pow(1.0 / 3.0).toInt()\n    return root * root * root == a\n}\n",
            "fun hexKey(num: String): Int {\n    val result = 0\n    for (x in num) {\n        if (x in \"2357BD\") result++\n    }\n    return result\n}\n",
            "fun decimalToBinary(dec: Int): String {\n    val binary = bin(dec)[2:]\n    return f\"db{binary}db\"\n}\n",
            "fun isHappy(s: String): Boolean {\n    if (s.length < 3) {\n        return false\n    }\n    for (i in 0..s.length - 2) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun numericalLetterGrade(grades: List<Double>): List<String> {\n    val result = mutableListOf<String>()\n    for (g in grades) {\n        when (g == 4.0) {\n            result.add(\"A+\")\n        }\n        when (g > 3.7) {\n            result.add(\"A\")\n        }\n        when (g > 3.3) {\n            result.add(\"A-\")\n        }\n        when (g > 3.0) {\n            result.add(\"B+\")\n        }\n        when (g > 2.7) {\n            result.add(\"B\")\n        }\n        when (g > 2.3) {\n            result.add(\"B-\")\n        }\n        when (g > 2.0) {\n            result.add(\"C+\")\n        }\n        when (g > 1.7) {\n            result.add(\"C\")\n        }\n        when (g > 1.3) {\n            result.add(\"C-\")\n        }\n        when (g > 1.0) {\n            result.add(\"D+\")\n        }\n        when (g > 0.7) {\n            result.add(\"D\")\n        }\n        when (g > 0.0) {\n            result.add(\"D-\")\n        }\n        else {\n            result.add(\"E\")\n        }\n    }\n    return result\n}\n",
            "fun primeLength(s: String): Boolean {\n    val length = s.length\n    if (length < 2) {\n        return false\n    }\n    for (i in 2..floor(sqrt(length))) {\n        if (length % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun startsOneEnds(n: Int): Int {\n    if (n == 1) return 1\n    return 2 * 9 * (10 ** (n - 2))\n}\n",
            "fun solve(n: Int): String {\n    val digitsSum = n.toString.mapInt.sum\n    return bin(digitsSum)[2:]\n}\n",
            "fun add(lst: List<Int>): Int {\n    var result = 0\n    for (i in 0..lst.size - 1) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "fun antiShuffle(s: String): String {\n    val words = s.split(\" \").map { word -> \"\".join(sorted(word)) }\n    return \" \".join(words)\n}\n",
            "fun getRow(lst: List<List<Int>>, x: Int): List<List<Int>> {\n    val coords = mutableListOf<List<Int>>()\n    for (i in lst.size) {\n        for (j in lst[i].size) {\n            if (lst[i][j] == x) {\n                coords.add([i, j])\n            }\n        }\n    }\n    return sorted(coords, key=lambda a: (a[0], -a[1]))\n}\n",
            "fun sortArray(arr: List<Int>): List<Int> {\n    if (arr.size == 0) {\n        return arr\n    }\n    if ((arr[0] + arr[arr.size - 1]) % 2 == 0) {\n        return arr.sorted(reverse = true)\n    } else {\n        return arr.sorted()\n    }\n}\n",
            "fun encrypt(s: String): String {\n    val result = mutableListOf<Char>()\n    for (ch in s) {\n        val shifted = ch.toInt() + 4\n        if (shifted > ord('z')) {\n            shifted -= 26\n        }\n        result.add(chr(shifted))\n    }\n    return result.joinToString()\n}\n",
            "fun nextSmallest(lst: List<Int>): Int? {\n    val sl = lst.sorted()\n    if (sl.size < 2) {\n        return null\n    }\n    return sl[1]\n}\n",
            "fun isBored(s: String): Int {\n    val sentences = s.splitRegex(\"[.!?]\\\\s*\")\n    return sentences.filter {\n        sentence.length >= 2 && sentence[0] == \"I \"\n    }.size\n}\n",
            "fun anyInt(x: Any, y: Any, z: Any): Boolean {\n    if (x is Int && y is Int && z is Int) {\n        if (x + y == z || x + z == y || y + z == x) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun encode(message: String): String {\n    val vowels = \"aeiouAEIOU\"\n    val result = mutableListOf<Char>()\n    for (ch in message) {\n        if (ch.isLetter()) {\n            val ch1 = ch.upper() if ch.isLower() else ch.lower()\n            if (ch1 in vowels) {\n                ch1 = chr(ord(ch1) + 2)\n            }\n            result.add(ch1)\n        } else {\n            result.add(ch)\n        }\n    }\n    return result.toString()\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2 until floor(sqrt(n))) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\nfun skjkasdkd(lst: List<Int>): Int {\n    val primes = lst.filter { isPrime(it) }\n    if (primes.isEmpty) {\n        return 0\n    }\n    val largest = primes.max.toString()\n    return primes.map { it.toString.toInt }.sum\n}\n",
            "fun checkDictCase(d: Map<String, String>): Boolean {\n    if (d.isEmpty) {\n        return false\n    }\n    val keys = d.keys.toSet()\n    return keys.contains(keys.first.lower()) && keys.contains(keys.first.upper())\n}\n",
            "fun countUpTo(n: Int): List<Int> {\n    var primes = mutableListOf<Int>()\n    for (num in 2..n) {\n        if (all(num % p != 0 for p in primes)) {\n            primes.add(num)\n        }\n    }\n    return primes\n}\n",
            "fun multiply(a: Int, b: Int): Int {\n    return (abs(a) % 10) * (abs(b) % 10)\n}\n",
            "fun countUpper(s: String): Int {\n    val vowels = \"AEIOU\"\n    return s.filter { i, c -> i % 2 == 0 && c in vowels }.size\n}\n",
            "fun closestInteger(value: String): Int {\n    val num = value.toDouble()\n    if (num >= 0) {\n        return (num + 0.5).toInt()\n    } else {\n        return (num - 0.5).toInt()\n    }\n}\n",
            "fun makeAPile(n: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in 0..n - 1) {\n        result.add(n + 2 * i)\n    }\n    return result\n}\n",
            "fun wordsString(s: String): List<String> {\n    val result = mutableListOf<String>()\n    for (w in s.split(regexp=r\"[, ]\")) {\n        if (w.length > 0) {\n            result.add(w)\n        }\n    }\n    return result\n}\n",
            "fun chooseNum(x: Int, y: Int): Int {\n    if (x > y) {\n        return -1\n    }\n    if (y % 2 == 0) {\n        return y\n    }\n    return y - 1 if x != y else -1\n}\n",
            "fun roundedAvg(n: Int, m: Int): String? {\n    val rAvg = (m + n) / 2.0 + 0.5\n    return bin(rAvg)[2:]\n}\n",
            "fun allDigitsOdd(s: String): Boolean {\n    return all(ord(digit) % 2 != 0 for digit in s)\n}\nfun uniqueDigits(x: List<Int>): List<Int> {\n    return sorted(x.filter {\n        allDigitsOdd(it.toString())\n    })\n}\n",
            "fun byLength(arr: List<Int>): List<String> {\n    val digitNames = arrayOf(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    val sortedArr = arr.sorted(arr.compareTo)\n    return sortedArr.map {\n        digitNames[it - 1]\n    }\n}\n",
            "fun f(n: Int): List<Int> {\n    val nums = list(1..n)\n    val result = mutableListOf<Int>()\n    for (i in nums) {\n        if (i % 2 != 0) {\n            result.add(sum(nums[:i]))\n        } else {\n            result.add(reduce(i -> x * y, nums[:i], 1))\n        }\n    }\n    return result\n}\n",
            "fun evenOddPalindrome(n: Int): List<Int> {\n    val cnt = arrayOf(0, 0)\n    for (i in 1..n) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}\n",
            "fun countNums(arr: List<Int>): Int {\n    val result = 0\n    for (n in arr) {\n        if (digitsSum(n) > 0) {\n            result++\n        }\n    }\n    return result\n}\nfun digitsSum(n: Int): Int {\n    val nStr = n.toString()\n    if (n >= 0) {\n        return nStr.sum().toInt()\n    } else {\n        return (nStr[:2] * 2).toInt() + digitsSum(abs(n))\n    }\n}\n",
            "fun moveOneBall(arr: List<Int>): Boolean {\n    val sortedArr = arr.sorted()\n    for (i in 0..arr.size - 1) {\n        if (arr[i:] == sortedArr[:arr.size - i] && arr[:i] == sortedArr[arr.size - i:]) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun canExchange(lst1: List<Int>, lst2: List<Int>): String {\n    val oddCnt = lst1.count { num -> num % 2 != 0 }\n    val evenCnt = lst2.count { num -> num % 2 == 0 }\n    return \"YES\" if evenCnt >= oddCnt else \"NO\"\n}\n",
            "fun histogram(test: String): Map<String,Int> {\n    val freq = mutableMap<String,Int>()\n    val words = test.split(\" \").filter { w -> w.length > 0 }\n    for (w in words) {\n        freq[w] = freq.getOrDefault(w, 0) + 1\n    }\n    val maxFreq = freq.values.max()\n    val result = mutableMap<String,Int>()\n    if (freq.size > 0) {\n        for (k, v in freq.items) {\n            if (v == maxFreq) {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "fun reverseDelete(s: String, c: String): List<String> {\n    val s1 = s.filter { ch in s if ch != c }.toString()\n    val result = mutableListOf<String>()\n    result.add(s1)\n    result.add(\"yes\" if is_palindrome(s1) else \"no\")\n    return result\n}\n",
            "fun oddCount(lst: List<String>): List<String> {\n    val result = mutableListOf<String>()\n    for (s in lst) {\n        val n = s.count {\n            ord(d) % 2 == 1\n        }\n        result.add(\"the number of odd elements in the string \" + n + \" of the input.\")\n    }\n    return result\n}\n",
            "fun minSubArraySum(nums: List<Int>): Int {\n    var minSum = 0\n    var curSum = 0\n    for (n in nums) {\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if (minSum == 0) {\n        minSum = min(nums)\n    }\n    return minSum\n}\n",
            "fun maxFill(grid: List<List<Int>>, capacity: Int): Int {\n    val result = 0\n    for (row in grid) {\n        for (col in row) {\n            result += ceil(col / capacity)\n        }\n    }\n    return result\n}\n",
            "fun sortArray(arr: List<Int>): List<Int> {\n    val sorted = arr.sorted(key = { x -> (count_ones(x), x) })\n    return sorted\n}\n",
            "fun selectWords(s: String, n: Int): List<String> {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\"\n    val words = s.split(\" \").filter { w -> w.length > 0 }\n    return words.filter { w -> w.length == w.length - n }\n}\n",
            "fun getClosestVowel(word: String): String {\n    val vowels = \"aeiouAEIOU\"\n    for (i in word.length - 2 to 0 by -1) {\n        if (word[i] in vowels && word[i - 1] not in vowels && word[i + 1] not in vowels) {\n            return word[i]\n        }\n    }\n    return \"\"\n}\n",
            "fun check(s: String): Boolean {\n    var depth = 0\n    for (ch in s) {\n        if (ch == \"(\") depth += 1\n        else depth -= 1\n        if (depth < 0) return false\n    }\n    return depth == 0\n}\nfun matchParens(lst: List<String>): String {\n    var s1 = lst[0] + lst[1]\n    var s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) || check(s2) else \"No\"\n}\n",
            "fun maximum(arr: List<Int>, k: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in arr.sorted(arr.size - k, reverse = true)) {\n        result.add(i)\n    }\n    return result\n}\n",
            "fun solution(lst: List<Int>): Int {\n    var result = 0\n    for (i in 0..lst.size - 1) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) result += lst[i]\n    }\n    return result\n}\n",
            "fun addElements(arr: List<Int>, k: Int): Int {\n    val result = 0\n    for (i in 0..k - 1) {\n        if (arr[i] <= 99) {\n            result += arr[i]\n        }\n    }\n    return result\n}\n",
            "fun getOddCollatz(n: Int): List<Int> {\n    var collatz = mutableListOf<Int>()\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.add(n)\n            n = 3 * n + 1\n        } else {\n            n = n // 2\n        }\n    }\n    return collatz.sorted()\n}\n",
            "fun validDate(date: String): Boolean {\n    val m = date.substring(0, 2).toInt\n    val d = date.substring(3, 5).toInt\n    if (m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31) return true\n    if (m in [4, 6, 9, 11] && d >= 1 && d <= 30) return true\n    if (m == 2 && d >= 1 && d <= 29) return true\n    return false\n}\n",
            "fun splitWords(txt: String): List<String> {\n    if (\" \" in txt) {\n        return txt.split(\" \")\n    } else if (\",\" in txt) {\n        return txt.split(\",\")\n    } else {\n        return [str(len([c for c in txt if c.isLower() and ord(c) % 2 == 0]))]\n    }\n}\n",
            "fun isSorted(lst: List<Int>): Boolean {\n    val freq = mutableMap<Int, Int>()\n    for (i in lst) {\n        freq[i] = freq.getOrDefault(i, 0) + 1\n    }\n    return freq.values().maxOrDefault(0) <= 2\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2 until floor(sqrt(n))) {\n        if (n % i == 0) return false\n    }\n    return true\n}\nfun intersection(interval1: List<Int>, interval2: List<Int>): String {\n    val l = max(interval1[0], interval2[0])\n    val r = min(interval1[1], interval2[1])\n    val length = r - l\n    return if (length > 0 && isPrime(length)) \"YES\" else \"NO\"\n}\n",
            "fun prodSigns(arr: List<Int>): Int? {\n    if (arr.isEmpty) {\n        return null\n    }\n    if (arr.contains(0)) {\n        return 0\n    }\n    var sign = -1 if arr.count(n -> n < 0) % 2 == 1 else 1\n    return sign * arr.sum { n -> n.toInt() }\n}\n",
            "fun minPath(grid: List<List<Int>>, k: Int): List<Int> {\n    val n = grid.size\n    var minVal = n * n + 1\n    for (i in 0..n - 1) {\n        for (j in 0..n - 1) {\n            if (grid[i][j] == 1) {\n                var temp = mutableListOf<Int>()\n                if (i != 0) temp.add(grid[i - 1][j])\n                if (j != 0) temp.add(grid[i][j - 1])\n                if (i != n - 1) temp.add(grid[i + 1][j])\n                if (j != n - 1) temp.add(grid[i][j + 1])\n                minVal = temp.min()\n            }\n        }\n    }\n    var result = mutableListOf<Int>()\n    for (i in 0..k - 1) {\n        result.add(1 if i % 2 == 0 else minVal)\n    }\n    return result\n}\n",
            "fun tri(n: Int): List<Int> {\n    if (n == 0) {\n        return listOf(1)\n    }\n    var seq = listOf(1, 3)\n    for (i in 2..n) {\n        if (i % 2 == 0) {\n            seq.add(i / 2 + 1)\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "fun digits(n: Int): Int {\n    val odds = n.toString.filter { d -> d.toInt % 2 == 1 }.toIntArray()\n    return if (odds.size > 0) odds.reduce { x, y -> x * y } else 0\n}\n",
            "fun isNested(s: String): Boolean {\n    var openIdx = mutableListOf<Int>()\n    var closeIdx = mutableListOf<Int>()\n    for (i, ch in enumerate(s)) {\n        if (ch == '[') {\n            openIdx.add(i)\n        } else if (ch == ']') {\n            closeIdx.add(i)\n        }\n    }\n    var cnt = 0\n    var i = 0\n    var l = closeIdx.size\n    for (idx in openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\n",
            "fun sumSquares(lst: List<Double>): Int {\n    val result = 0\n    for (n in lst) {\n        result += pow(ceil(n), 2)\n    }\n    return result\n}\n",
            "fun checkIfLastCharIsALetter(txt: String): Boolean {\n    val last = txt.lastIndexOf(' ')\n    if (last == -1) {\n        return false\n    }\n    val last = txt.substring(last + 1)\n    return last.isAlpha()\n}\n",
            "fun canArrange(arr: List<Int>): Int {\n    val idx = arr.filter { i -> arr[i] < arr[i - 1]}\n    return idx.maxOrDefault(-1)\n}\n",
            "fun largestSmallestIntegers(lst: List<Int>): List<Int?> {\n    val neg = lst.filter { i -> i < 0 }\n    val pos = lst.filter { i -> i > 0 }\n    val maxNeg = neg.max() if neg.size > 0 else null\n    val minPos = pos.min() if pos.size > 0 else null\n    return [maxNeg, minPos]\n}\n",
            "fun compareOne(a: Any, b: Any): Double? {\n    val a1 = anyToReal(a)\n    val b1 = anyToReal(b)\n    if (a1 == b1) {\n        return null\n    }\n    else if (a1 > b1) {\n        return a1\n    }\n    else {\n        return b1\n    }\n}\n",
            "fun isEqualToSumEven(n: Int): Boolean {\n    return n % 2 == 0 and n >= 8\n}\n",
            "fun specialFactorial(n: Int): Int {\n    var fact = 1\n    var result = 1\n    for (i in 1..n) {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "fun fixSpaces(txt: String): String {\n    return txt.replace(\" \", \"_\").replace(\"___\", \"-\")\n}\n",
            "fun fileNameCheck(fileName: String): String {\n    val lst = fileName.split(\".\")\n    if (lst.size != 2 || lst[1] !in [\"txt\", \"exe\", \"dll\"] || lst[0].isEmpty || !lst[0][0].isAlpha() || lst[0].contains(\"123\")) {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "fun sumSquares(lst: List<Int>): Int {\n    var result = 0\n    for (i in 0..lst.size - 1) {\n        if (i % 3 == 0) {\n            result += pow(lst[i], 2)\n        } else if (i % 4 == 0) {\n            result += pow(lst[i], 3)\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2..floor(sqrt(n))) {\n        if (n % i == 0) return false\n    }\n    return true\n}\nfun wordsInSentence(sentence: String): String {\n    val words = sentence.split(\" \")\n    return \" \".join(words.filter { w in words if isPrime(w.length) })\n}\n",
            "fun simplify(x: String, n: String): Boolean {\n    val xs = x.split(\"/\")\n    val ns = n.split(\"/\")\n    val num = xs[0].toInt * ns[0].toInt\n    val den = xs[1].toInt * ns[1].toInt\n    return num % den == 0\n}\n",
            "fun orderByPoints(nums: List<Int>): List<Int> {\n    val result = nums.sorted(digitsSum)\n    return result\n}\nfun digitsSum(n: Int): Int {\n    val nStr = n.toString()\n    if (n >= 0) {\n        return nStr.toInt.sum\n    } else {\n        return (nStr[:2].toInt * 2) + digitsSum(abs(n))\n    }\n}\n",
            "fun specialFilter(nums: List<Int>): Int {\n    val odds = \"13579\"\n    return nums.filter { n -> n > 10 && n % 2 == 1 && n.toString().startsWith(odds) }.size\n}\n",
            "fun getMaxTriples(n: Int): Int {\n    val c = arrayOf(0, 0, 0)\n    for (i in 1..n) {\n        val a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n}\n",
            "fun bf(planet1: String, planet2: String): List<String> {\n    val names = arrayListOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (planet1 not in names or planet2 not in names) {\n        return arrayList<String>()\n    }\n    val l = names.indexOf(planet1)\n    val r = names.indexOf(planet2)\n    if (l > r) {\n        l, r = r, l\n    }\n    if (l == r) {\n        return arrayList<String>()\n    }\n    return names.subList(l + 1, r)\n}\n",
            "fun sortedListSum(lst: List<String>): List<String> {\n    val result = mutableListOf<String>()\n    for (s in lst) {\n        if (s.length % 2 == 0) {\n            result.add(s)\n        }\n    }\n    return result.sorted(key = { s -> (s.length, s) })\n}\n",
            "fun xOrY(n: Int, x: Int, y: Int): Int {\n    val result = y\n    if (n < 2) {\n        return result\n    }\n    for (i in 2..floor(sqrt(n))) {\n        if (n % i == 0) {\n            return result\n        }\n    }\n    return x\n}\n",
            "fun doubleTheDifference(lst: List<Double>): Int {\n    var result = 0\n    for (n in lst) {\n        if (n >= 0 && n % 2 == 1) {\n            result += n * n\n        }\n    }\n    return result\n}\n",
            "fun compare(game: List<Int>, guess: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (x, y in zip(game, guess)) {\n        result.add(abs(x - y))\n    }\n    return result\n}\n",
            "fun strongestExtension(className: String, extensions: List<String>): String {\n    val maxS = Double.NEGATIVE_INFINITY\n    var maxExt = \"\"\n    for (ext in extensions) {\n        val upper = ext.count { c in c.isUpperCase() }\n        val lower = ext.count { c in c.isLowerCase() }\n        val s = upper - lower\n        if (s > maxS) {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return f\"{className}.{maxExt}\"\n}\n",
            "fun cycpatternCheck(a: String, b: String): Boolean {\n    val b = b.toCharArray()\n    val a = a.toCharArray()\n    val lenB = b.length\n    val lenA = a.length\n    if (lenB < lenA) {\n        return false\n    }\n    for (i in 0 until lenB) {\n        val temp = b[i:] + b[:i]\n        if (temp in a) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun evenOddCount(num: Int): List<Int> {\n    val ds = num.toString()\n    val even = ds.filter { d in ds if ord(d) % 2 == 0 }.size\n    return [even, ds.size - even]\n}\n",
            "fun intToMiniRoman(num: Int): String {\n    val values = arrayOf(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    val numerals = arrayOf(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    var res = arrayOf()\n    for (i in 0 until values.size) {\n        while (num >= values[i]) {\n            res.add(numerals[i])\n            num -= values[i]\n        }\n    }\n    return res.joinToString()\n}\n",
            "fun rightAngleTriangle(a: Int, b: Int, c: Int): Boolean {\n    val s = sortedArrayList([a, b, c])\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "fun findMax(words: List<String>): String {\n    var maxCnt = 0\n    var maxW = \"\"\n    for (w in words) {\n        var cnt = w.size\n        if (cnt > maxCnt) {\n            maxCnt = cnt\n            maxW = w\n        }\n        elif (cnt == maxCnt) {\n            maxW = min(maxW, w)\n        }\n    }\n    return maxW\n}\n",
            "fun eat(num: Int, need: Int, remaining: Int): List<Int> {\n    if (need <= remaining) {\n        return [num + need, remaining - need]\n    } else {\n        return [num + remaining, 0]\n    }\n}\n",
            "fun doAlgebra(operators: List<String>, operands: List<Int>): Int {\n    var ops = operators.copy()\n    var nums = operands.copy()\n    var i = ops.size - 1\n    while i >= 0 {\n        if (ops[i] == \"**\") {\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n        }\n        i -= 1\n    }\n    var i = 0\n    while i < ops.size {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        }\n        elif (ops[i] == \"//\") {\n            nums[i] = nums[i] // nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        }\n        i += 1\n    }\n    var i = 0\n    while i < ops.size {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        }\n        elif (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "fun solve(s: String): String {\n    val result = \"\"\n    for (ch in s) {\n        if (ch.isLower()) result += ch.upper()\n        elif (ch.isUpper()) result += ch.lower()\n        else result += ch\n    }\n    return result\n}\n",
            "fun stringToMd5(txt: String): String? {\n    val md5Hash = hashlib.md5()\n    val txtBytes = txt.encode()\n    md5Hash.update(txtBytes)\n    val md5Encoded = md5Hash.hexdigest()\n    return md5Encoded\n}\n",
            "fun generateIntegers(a: Int, b: Int): List<Int> {\n    val lower = max(2, min(a, b))\n    val upper = min(8, max(a, b))\n    return (lower..upper).filter { i -> i % 2 == 0 }\n}\n"
        ],
        "php": [
            "function hasCloseElements ($numbers, $threshold) {\n    foreach ($numbers as $i) {\n        foreach ($numbers as $j) {\n            if ($i != $j && abs($i - $j) < $threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "function separateParenGroups ($parenString) {\n    $groups = [];\n    $stk = [];\n    $currentGroup = \"\";\n    $parens = $parenString.replace(\" \", \"\");\n    foreach ($parens as $ch) {\n        if ($ch == \"(\") {\n            $stk[] = $ch;\n            $currentGroup .= $ch;\n        } else if ($ch == \")\") {\n            $stk.pop();\n            $currentGroup .= $ch;\n            if (!$stk) {\n                $groups[] = $currentGroup;\n                $currentGroup = \"\";\n            }\n        }\n    }\n    return $groups;\n}\n",
            "function truncateNumber ($num) {\n    return $num - floor($num);\n}\n",
            "function belowZero ($operations) {\n    $balance = 0;\n    foreach ($operations as $op) {\n        $balance += $op;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function meanAbsoluteDeviation ($numbers) {\n    $mean = 0;\n    $deviation = 0;\n    foreach ($numbers as $n) {\n        $mean += $n;\n    }\n    $mean /= len($numbers);\n    foreach ($numbers as $n) {\n        $deviation += abs($n - $mean);\n    }\n    return $deviation / len($numbers);\n}\n",
            "function intersperse ($numbers, $delimiter) {\n    $result = [];\n    foreach ($numbers as $n) {\n        if ($n != 0) {\n            $result[] = $delimiter;\n        }\n        $result[] = $n;\n    }\n    return $result;\n}\n",
            "function parseNestedParens ($parenString) {\n    $result = [];\n    foreach ($parenString.split() as $group) {\n        $maxDepth = 0;\n        $depth = 0;\n        foreach ($group as $ch) {\n            if ($ch == \"(\") {\n                $depth++;\n                $maxDepth = max($maxDepth, $depth);\n            } else if ($ch == \")\") {\n                $depth--;\n            }\n        }\n        $result[] = $maxDepth;\n    }\n    return $result;\n}\n",
            "function filterBySubstring ($strs, $substring) {\n    $result = [];\n    foreach ($strs as $s) {\n        if ($substring in $s) {\n            $result[] = $s;\n        }\n    }\n    return $result;\n}\n",
            "function sumProduct ($numbers) {\n    $nSum = 0;\n    $nProduct = 1;\n    foreach ($numbers as $n) {\n        $nSum += $n;\n        $nProduct *= $n;\n    }\n    return [$nSum, $nProduct];\n}\n",
            "function rollingMax ($numbers) {\n    $maxSoFar = float(\"-inf\");\n    $result = [];\n    foreach ($numbers as $num) {\n        $maxSoFar = max($maxSoFar, $num);\n        $result[] = $maxSoFar;\n    }\n    return $result;\n}\n",
            "function isPalindrome($s) {\n    return $s == strrev($s);\n}\nfunction makePalindrome($s) {\n    if (isPalindrome($s)) {\n        return $s;\n    }\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (isPalindrome($s[$i:])) {\n            return $s + strrev($s[:$i]);\n        }\n    }\n    return \"\";\n}\n",
            "function stringXor ($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i] == $b[$i] ? \"0\" : \"1\";\n    }\n    return $result;\n}\n",
            "function longest ($strs) {\n    $longest_s = $strs[0];\n    foreach ($strs as $s) {\n        if (strlen($s) > strlen($longest_s)) {\n            $longest_s = $s;\n        }\n    }\n    return $longest_s;\n}\n",
            "function greatestCommonDivisor ($a, $b) {\n    if ($b == 0) {\n        return $a;\n    } else {\n        return greatestCommonDivisor($b, $a % $b);\n    }\n}\n",
            "function allPrefixes ($s) {\n    $prefixes = [];\n    foreach ($s as $i) {\n        $prefixes[] = $s[: $i + 1];\n    }\n    return $prefixes;\n}\n",
            "function stringSequence($n) {\n    return implode(\" \", range(0, $n + 1));\n}\n",
            "function countDistinctCharacters ($s) {\n    $s = strtolower($s);\n    $result = 0;\n    foreach ($s as $c) {\n        if ($result == 0 || $result == $c) {\n            $result = $c;\n        }\n    }\n    return $result;\n}\n",
            "function parseMusic ($musicString) {\n    $durations = array('o' => 4, 'o|' => 2, '.|' => 1);\n    $notes = explode(' ', $musicString);\n    $result = array();\n    foreach ($notes as $note) {\n        $result[] = $durations[$note];\n    }\n    return $result;\n}\n",
            "function howManyTimes ($s, $substring) {\n    $times = 0;\n    for ($i = 0; $i < strlen($s) - strlen($substring) + 1; $i++) {\n        if ($s[$i : $i + strlen($substring)] == $substring) {\n            $times++;\n        }\n    }\n    return $times;\n}\n",
            "function sortNumbers ($numbers) {\n    $numDict = array(\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n    );\n    $numList = array_filter(array_map(function($x) use ($numDict) {\n        return $numDict[$x];\n    }, explode(\" \", $numbers)), function($x) use ($numDict) {\n        return $numDict[$x];\n    });\n    sort($numList);\n    return join(\" \", $numList);\n}\n",
            "function findClosestElements ($numbers) {\n    $heap = new Heap(numbers);\n    $result = [];\n    $result[] = $heap->pop();\n    $result[] = $heap->pop();\n    return $result;\n}\n",
            "function rescaleToUnit ($numbers) {\n    $minNum = min($numbers);\n    $maxNum = max($numbers);\n    if ($minNum == $maxNum) {\n        return [0.0] * count($numbers);\n    } else {\n        $result = [];\n        foreach ($numbers as $num) {\n            $result[] = ($num - $minNum) / ($maxNum - $minNum);\n        }\n        return $result;\n    }\n}\n",
            "function filterIntegers ($values) {\n    $result = [];\n    foreach ($values as $v) {\n        if (is_integer($v)) {\n            $result[] = $v;\n        }\n    }\n    return $result;\n}\n",
            "function strLength ($s) {\n    return strlen($s);\n}\n",
            "function largestDivisor ($n) {\n    $i = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            return $n // $i;\n        }\n        $i++;\n    }\n    return 1;\n}\n",
            "function factorize ($n) {\n    $factors = [];\n    $divisor = 2;\n    while ($divisor <= $n) {\n        if ($n % $divisor == 0) {\n            $factors[] = $divisor;\n            $n //= $divisor;\n        } else {\n            $divisor++;\n        }\n    }\n    return $factors;\n}\n",
            "function removeDuplicates ($numbers) {\n    $counts = array_fill(0, 1000000, 0);\n    foreach ($numbers as $num) {\n        $counts[$num]++;\n    }\n    $res = [];\n    foreach ($numbers as $num) {\n        if ($counts[$num] == 1) {\n            $res[] = $num;\n        }\n    }\n    return $res;\n}\n",
            "function flipCase ($s) {\n    $result = \"\";\n    foreach ($s as $ch) {\n        if (!$ch.isalpha()) {\n            $result .= $ch;\n        } elseif ($ch.islower()) {\n            $result .= $ch.upper();\n        } elseif ($ch.isupper()) {\n            $result .= $ch.lower();\n        }\n    }\n    return $result;\n}\n",
            "function concatenate($strs) {\n    return implode(\"\", $strs);\n}\n",
            "function filterByPrefix ($strs, $prefixStr) {\n    $result = [];\n    foreach ($strs as $s) {\n        if (strstr($s, $prefixStr)) {\n            $result[] = $s;\n        }\n    }\n    return $result;\n}\n",
            "function getPositive ($l) {\n    $result = [];\n    foreach ($l as $num) {\n        if ($num > 0) {\n            $result[] = $num;\n        }\n    }\n    return $result;\n}\n",
            "function isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function poly ($xs, $x) {\n    $p = new Polynomial($xs);\n    return $p->eval($x);\n}\nfunction findZero ($xs) {\n    $p = new Polynomial($xs);\n    return $p->solve();\n}\n",
            "function sortThird ($l) {\n    $sortedThird = sort($l[0..2]);\n    return [$sortedThird[i / 3] if i % 3 == 0 else $l[i] for i in range(0, len($l))];\n}\n",
            "function listUnique ($l) {\n    $result = [];\n    foreach ($l as $e) {\n        if ($result && $e == $result[-1]) {\n            continue;\n        }\n        $result[] = $e;\n    }\n    return $result;\n}\n",
            "function maxElement ($l) {\n    if (empty($l)) {\n        return 0;\n    }\n    return max(array_map(abs, $l));\n}\n",
            "function fizzBuzz ($n) {\n    $cnt = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            $cnt += strpos($i, \"7\");\n        }\n    }\n    return $cnt;\n}\n",
            "function sortEven ($l) {\n    $sortedEven = sort($l[::2]);\n    return [\n        $sortedEven[$i / 2] if $i % 2 == 0 else $l[$i]\n        for $i in range(count($l))\n    ];\n}\n",
            "function encodeCyclic ($s) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($i + 2 >= strlen($s)) {\n            $result .= $s[$i];\n        } else {\n            $result .= $s[$i+1];\n            $result .= $s[$i];\n        }\n    }\n    return $result;\n}\nfunction decodeCyclic ($s) {\n    return encodeCyclic(encodeCyclic($s));\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction primeFib($n) {\n    $f = [0, 1];\n    $cnt = 0;\n    while ($cnt < $n) {\n        $f = [$f[1], $f[0] + $f[1]];\n        if (isPrime($f[1])) {\n            $cnt++;\n        }\n    }\n    return $f[1];\n}\n",
            "function triplesSumToZero ($l) {\n    foreach ($l as $i) {\n        foreach ($l as $j) {\n            foreach ($l as $k) {\n                if ($i + $j + $k == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "function carRaceCollision ($n) {\n    return $n * $n;\n}\n",
            "function incrList ($l) {\n    $result = [];\n    foreach ($l as $i) {\n        $result[] = $i + 1;\n    }\n    return $result;\n}\n",
            "function pairsSumToZero ($l) {\n    $seen = array();\n    foreach ($l as $num) {\n        if ($num in $seen) {\n            return true;\n        }\n        $seen[$num] = true;\n    }\n    return false;\n}\n",
            "function changeBase ($x, $bas) {\n    $digits = [];\n    while ($x > 0) {\n        $digits[] = strval($x % $bas);\n        $x = floor($x / $bas);\n    }\n    return implode(\"\", $digits);\n}\n",
            "function triangleArea ($a, $h) {\n    return $a * $h / 2;\n}\n",
            "function fib4($n) {\n    $fib = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib[$i % 4] = sum($fib);\n    }\n    return $fib[$n % 4];\n}\n",
            "function median ($l) {\n    $l = sort($l);\n    if (count($l) % 2 != 0) {\n        return $l[count($l) / 2];\n    } else {\n        return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n    }\n}\n",
            "function isPalindrome ($txt) {\n    $txt = strrev($txt);\n    return $txt == $txt;\n}\n",
            "function modp($n, $p) {\n    $ret = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $ret = ($ret * 2) % $p;\n    }\n    return $ret;\n}\n",
            "function encodeShift ($s) {\n    $result = [];\n    foreach ($s as $ch) {\n        $result[] = chr(((ord($ch) - 97 + 5) % 26) + 97);\n    }\n    return \"\".join($result);\n}\nfunction decodeShift ($s) {\n    $result = [];\n    foreach ($s as $ch) {\n        $result[] = chr(((ord($ch) - 97 + 21) % 26) + 97);\n    }\n    return \"\".join($result);\n}\n",
            "function removeVowels ($txt) {\n    $vowels = \"aeiouAEIOU\";\n    return str_replace($vowels, \"\", $txt);\n}\n",
            "function belowThreshold ($l, $t) {\n    return all(x < $t for x in $l);\n}\n",
            "function add($x, $y) {\n    return $x + $y;\n}\n",
            "function sameChars ($s0, $s1) {\n    return count(array_unique(str_split($s0))) == count(array_unique(str_split($s1)));\n}\n",
            "function fib($n) {\n    if ($n <= 1) {\n        return $n;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n",
            "function correctBracketing ($brackets) {\n    $depth = 0;\n    foreach ($brackets as $b) {\n        if ($b == \"<\") {\n            $depth++;\n        } else if ($b == \">\") {\n            $depth--;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "function monotonic ($l) {\n    $diff = [];\n    foreach ($l as $x) {\n        $diff[] = $x - $l[$x - 1];\n    }\n    return all(x <= 0 for x in $diff) or all(x >= 0 for x in $diff);\n}\n",
            "function common ($l1, $l2) {\n    $result = [];\n    foreach ($l1 as $e) {\n        if ($e in $l2) {\n            $result[] = $e;\n        }\n    }\n    return $result;\n}\n",
            "function largestPrimeFactor ($n) {\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i) {\n            $i++;\n        } else {\n            $n /= $i;\n        }\n    }\n    return $n;\n}\n",
            "function sumToN ($n) {\n    $result = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $result += $i;\n    }\n    return $result;\n}\n",
            "function correctBracketing ($brackets) {\n    $depth = 0;\n    foreach ($brackets as $b) {\n        if ($b == \"(\") {\n            $depth++;\n        } else if ($b == \")\") {\n            $depth--;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "function derivative ($xs) {\n    $result = [];\n    foreach ($xs as $i => $x) {\n        $result[] = $x * $i;\n    }\n    return $result;\n}\n",
            "function fibfib ($n) {\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    while ($n > 2) {\n        $a = $b;\n        $b = $c;\n        $c = $a + $b + $c;\n        $n--;\n    }\n    return $c;\n}\n",
            "function vowelsCount ($s) {\n    $vowels = \"aeiou\";\n    $cnt = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] == \"y\" && $i == strlen($s) - 1) {\n            $cnt++;\n        } else if ($s[$i] in $vowels) {\n            $cnt++;\n        }\n    }\n    return $cnt;\n}\n",
            "function circularShift ($x, $shift) {\n    $x_str = strval($x);\n    if ($shift > strlen($x_str)) {\n        return strrev($x_str);\n    } else {\n        return substr($x_str, -$shift, $shift);\n    }\n}\n",
            "function digitSum ($s) {\n    $result = 0;\n    foreach ($s as $c) {\n        if ($c >= 'A' && $c <= 'Z') {\n            $result += ord($c);\n        }\n    }\n    return $result;\n}\n",
            "function fruitDistribution ($s, $n) {\n    $words = explode(' ', $s);\n    $apples = intval($words[$words->index('apples') - 1]);\n    $oranges = intval($words[$words->index('oranges') - 1]);\n    return $n - $apples - $oranges;\n}\n",
            "function pluck ($arr) {\n    $evens = array_filter(array_map(function($n) {\n        return $n % 2 == 0;\n    }, $arr), '==', true);\n    if (empty($evens)) {\n        return [];\n    }\n    $min_even = min($evens);\n    return [$min_even, array_search($min_even, $arr)];\n}\n",
            "function search($lst) {\n    $freqs = array_fill(0, 100, 0);\n    foreach ($lst as $n) {\n        $freqs[$n]++;\n    }\n    $good_vals = array_filter(array_keys($freqs), function($k) {\n        return $freqs[$k] >= $k;\n    });\n    return max($good_vals, default=-1);\n}\n",
            "function strangeSortList ($lst) {\n    $sl = sort($lst);\n    $result = [];\n    $left = 0;\n    $right = count($sl) - 1;\n    while ($left <= $right) {\n        $result[] = $sl[$left];\n        $left++;\n        if ($left <= $right) {\n            $result[] = $sl[$right];\n            $right--;\n    }\n    return $result;\n}\n",
            "function triangleArea ($a, $b, $c) {\n    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $s = ($a + $b + $c) / 2.0;\n        return sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "function willItFly ($q, $w) {\n    if (count($q) == 0) {\n        return false;\n    }\n    $isPalin = true;\n    $total = 0;\n    foreach ($q as $e) {\n        $total += $e;\n        if ($e != $q[count($q) - $e - 1]) {\n            $isPalin = false;\n        }\n    }\n    return $isPalin && $total <= $w;\n}\n",
            "function smallestChange ($arr) {\n    $ans = 0;\n    for ($i = 0; $i < (int)ceil(count($arr) / 2); $i++) {\n        if ($arr[$i] != $arr[count($arr) - $i - 1]) {\n            $ans++;\n        }\n    }\n    return $ans;\n}\n",
            "function totalMatch ($lst1, $lst2) {\n    $cnt1 = 0;\n    $cnt2 = 0;\n    foreach ($lst1 as $s) {\n        $cnt1 += strlen($s);\n    }\n    foreach ($lst2 as $s) {\n        $cnt2 += strlen($s);\n    }\n    return $lst1 if $cnt1 <= $cnt2 else $lst2;\n}\n",
            "function isMultiplyPrime ($a) {\n    $cnt = 0;\n    for ($i = 2; $i <= $a; $i++) {\n        if (isPrime($i)) {\n            while ($a % $i == 0) {\n                $cnt += 1;\n                $a /= $i;\n            }\n        }\n    }\n    return $cnt == 3;\n}\n",
            "function isSimplePower ($x, $n) {\n    $tmp = 1;\n    while ($tmp < $x) {\n        $tmp *= $n;\n    }\n    return $tmp == $x;\n}\n",
            "function isCube ($a) {\n    $a = abs($a);\n    $root = int(round(pow($a, 1.0 / 3.0)));\n    return $root * $root * $root == $a;\n}\n",
            "function hexKey ($num) {\n    $count = 0;\n    foreach ($num as $c) {\n        if ($c in \"2357BD\") {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "function decimalToBinary ($dec) {\n    $binary = bin($dec)[2:];\n    return \"db\" . $binary . \"db\";\n}\n",
            "function isHappy ($s) {\n    // Implementation here\n}\n",
            "function numericalLetterGrade ($grades) {\n    $result = [];\n    foreach ($grades as $g) {\n        if ($g == 4.0) {\n            $result[] = \"A+\";\n        } elseif ($g > 3.7) {\n            $result[] = \"A\";\n        } elseif ($g > 3.3) {\n            $result[] = \"A-\";\n        } elseif ($g > 3.0) {\n            $result[] = \"B+\";\n        } elseif ($g > 2.7) {\n            $result[] = \"B\";\n        } elseif ($g > 2.3) {\n            $result[] = \"B-\";\n        } elseif ($g > 2.0) {\n            $result[] = \"C+\";\n        } elseif ($g > 1.7) {\n            $result[] = \"C\";\n        } elseif ($g > 1.3) {\n            $result[] = \"C-\";\n        } elseif ($g > 1.0) {\n            $result[] = \"D+\";\n        } elseif ($g > 0.7) {\n            $result[] = \"D\";\n        } elseif ($g > 0.0) {\n            $result[] = \"D-\";\n        } else {\n            $result[] = \"E\";\n        }\n    }\n    return $result;\n}\n",
            "function primeLength ($s) {\n    $length = strlen($s);\n    if ($length < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($length)); $i++) {\n        if ($length % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function startsOneEnds ($n) {\n    if ($n == 1) {\n        return 1;\n    }\n    return 2 * 9 * (10 ** ($n - 2));\n}\n",
            "function solve($n) {\n    $digitsSum = 0;\n    foreach (str_split(\"0|1|2|3|4|5|6|7|8|9\", $n) as $d) {\n        $digitsSum += intval($d);\n    }\n    return bin2hex($digitsSum);\n}\n",
            "function add ($lst) {\n    $result = 0;\n    foreach ($lst as $e) {\n        if ($e % 2 == 1 && $e % 2 == 0) {\n            $result += $e;\n        }\n    }\n    return $result;\n}\n",
            "function antiShuffle ($s) {\n    $words = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n        $result .= implode(\"\", sort($word));\n        $result .= \" \";\n    }\n    return $result;\n}\n",
            "function getRow ($lst, $x) {\n    $coords = [];\n    foreach ($lst as $l) {\n        foreach ($l as $i) {\n            if ($i == $x) {\n                $coords[] = [$lst.indexOf($l), $l.indexOf($i)];\n            }\n        }\n    }\n    return sort($coords, key=lambda a: [a[0], -a[1]]);\n}\n",
            "function sortArray ($arr) {\n    if (count($arr) == 0) {\n        return [];\n    }\n    if (($arr[0] + $arr[-1]) % 2 == 0) {\n        return sort($arr, 'DESC');\n    } else {\n        return sort($arr);\n    }\n}\n",
            "function encrypt($s) {\n    $result = [];\n    foreach ($s as $ch) {\n        $shifted = ord($ch) + 4;\n        if ($shifted > ord('z')) {\n            $shifted -= 26;\n        }\n        $result[] = chr($shifted);\n    }\n    return \"\".join($result);\n}\n",
            "function nextSmallest ($lst) {\n    $sl = sort(array_unique($lst));\n    if (count($sl) < 2) {\n        return null;\n    }\n    return $sl[1];\n}\n",
            "function isBored ($s) {\n    $sentences = explode(\".!? \", $s);\n    $result = 0;\n    foreach ($sentences as $sentence) {\n        if (strlen($sentence) >= 2 && $sentence[:2] == \"I \") {\n            $result++;\n        }\n    }\n    return $result;\n}\n",
            "function anyInt ($x, $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function encode($message) {\n    $vowels = \"aeiouAEIOU\";\n    $result = [];\n    foreach ($message as $ch) {\n        if ($ch.isalpha()) {\n            $ch1 = $ch.upper() if $ch.islower() else $ch.lower();\n            if ($ch1 in $vowels) {\n                $ch1 = chr($ch1 + 2);\n            }\n            $result[] = $ch1;\n        } else {\n            $result[] = $ch;\n        }\n    }\n    return \"\".join($result);\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction skjkasdkd($lst) {\n    $primes = [n for n in $lst if isPrime($n)];\n    if (count($primes) == 0) {\n        return 0;\n    }\n    $largest = str(max($primes));\n    return sum(int(digit) for digit in $largest);\n}\n",
            "function checkDictCase ($d) {\n    foreach ($d as $k => $v) {\n        if ($k[0] != $k[0]->toLowerCase()) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function countUpTo ($n) {\n    $primes = [];\n    for ($num = 2; $num <= $n; $num++) {\n        if (all(array_filter(array_map(function($p) { return $num % $p != 0; }, $primes), '==', 0))) {\n            $primes[] = $num;\n        }\n    }\n    return $primes;\n}\n",
            "function multiply($a, $b) {\n    $a = abs($a);\n    $b = abs($b);\n    return ($a % 10) * ($b % 10);\n}\n",
            "function countUpper ($s) {\n    $vowels = \"AEIOU\";\n    $result = 0;\n    foreach ($s as $i => $c) {\n        if ($i % 2 == 0 && in_array($c, $vowels)) {\n            $result++;\n        }\n    }\n    return $result;\n}\n",
            "function closestInteger ($value) {\n    $num = floatval($value);\n    if ($num >= 0) {\n        return intval($num + 0.5);\n    } else {\n        return intval($num - 0.5);\n    }\n}\n",
            "function makeAPile ($n) {\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n + 2 * $i;\n    }\n    return $result;\n}\n",
            "function wordsString ($s) {\n    $result = [];\n    foreach (explode(', | ', $s) as $w) {\n        if (strlen($w) > 0) {\n            $result[] = $w;\n        }\n    }\n    return $result;\n}\n",
            "function chooseNum ($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    if ($y % 2 == 0) {\n        return $y;\n    }\n    return $y - 1 if ($x != $y) else -1;\n}\n",
            "function roundedAvg ($n, $m) {\n    $rAvg = (int)(($m + $n) / 2.0 + 0.5);\n    return bin2hex($rAvg);\n}\n",
            "function allDigitsOdd($s) {\n    return all(chr($digit) % 2 != 0 for $digit in $s);\n}\nfunction uniqueDigits($x) {\n    return sort($x, function($a, $b) {\n        return allDigitsOdd(str($a)) ? $a < $b : $a > $b;\n    });\n}\n",
            "function byLength ($arr) {\n    $digitNames = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    $sortedArr = sort($arr, function($a, $b) {\n        return $a < $b;\n    });\n    return array_map(function($x) {\n        return $digitNames[$x-1];\n    }, $sortedArr);\n}\n",
            "function f($n) {\n    $nums = range(1, $n + 1);\n    return [\n        sum($nums[:i]) if ($i % 2 != 0) else reduce(function($x, $y) { return $x * $y; }, $nums[:i], 1)\n        for i in $nums\n    ];\n}\n",
            "function isPalindrome($txt) {\n    return $txt == strrev($txt);\n}\nfunction evenOddPalindrome($n) {\n    $cnt = [0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        if (isPalindrome(strval($i))) {\n            $cnt[$i % 2]++;\n        }\n    }\n    return $cnt;\n}\n",
            "function digitsSum($n) {\n    $n_str = strval($n);\n    if ($n >= 0) {\n        return str_sum(array_map(int, $n_str));\n    } else {\n        return intval(str_slice(strval($n), 0, 2)) * 2 + digitsSum(abs($n));\n    }\n}\nfunction countNums($arr) {\n    return count(array_filter(array_map(digitsSum, $arr), function($n) {\n        return $n > 0;\n    });\n}\n",
            "function moveOneBall ($arr) {\n    $sortedArr = sort($arr);\n    for ($i = 0; $i < $arr->count(); $i++) {\n        if ($arr->substr($i, $arr->count() - $i) == $sortedArr && $arr->substr($arr->count() - $i, $i) == $sortedArr) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function canExchange ($lst1, $lst2) {\n    $odd_cnt = count(array_filter(array_map(function($num) { return $num % 2 != 0; }, $lst1), '==', true));\n    $even_cnt = count(array_filter(array_map(function($num) { return $num % 2 == 0; }, $lst2), '==', true));\n    return \"YES\" if $even_cnt >= $odd_cnt else \"NO\";\n}\n",
            "function histogram ($test) {\n    $freq = array_fill(0, $test->count(), 0);\n    $words = [w for w in $test->split(\" \") if len(w) > 0];\n    foreach ($words as $w) {\n        $freq[$w]++;\n    }\n    $result = [];\n    if ($freq->count() > 0) {\n        $max_freq = max($freq);\n        foreach ($freq as $k => $v) {\n            if ($v == $max_freq) {\n                $result[$k] = $v;\n            }\n        }\n    }\n    return $result;\n}\n",
            "function reverseDelete ($s, $c) {\n    $s1 = \"\";\n    foreach ($s as $ch) {\n        if ($ch !== $c) {\n            $s1 .= $ch;\n        }\n    }\n    return [$s1, $s1 === $s1[::-1] ? \"yes\" : \"no\"];\n}\n",
            "function oddCount ($lst) {\n    $result = [];\n    foreach ($lst as $s) {\n        $n = 0;\n        foreach ($s as $c) {\n            if (ord($c) % 2 == 1) {\n                $n++;\n            }\n        }\n        $result[] = \"the number of odd elements in the string \" . $n . \" of the input.\";\n    }\n    return $result;\n}\n",
            "function minSubArraySum ($nums) {\n    $min_sum = 0;\n    $cur_sum = 0;\n    foreach ($nums as $n) {\n        $cur_sum = min($cur_sum + $n, 0);\n        $min_sum = min($cur_sum, $min_sum);\n    }\n    if ($min_sum == 0) {\n        $min_sum = min($nums);\n    }\n    return $min_sum;\n}\n",
            "function maxFill ($grid, $capacity) {\n    $result = 0;\n    foreach ($grid as $arr) {\n        $result += ceil(sum($arr) / $capacity);\n    }\n    return $result;\n}\n",
            "function countOnes($num) {\n    return binstrpos($num, \"1\") - 1;\n}\nfunction sortArray($arr) {\n    return sort($arr, key=countOnes);\n}\n",
            "function selectWords ($s, $n) {\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $words = explode(\" \", $s);\n    return [w for w in $words if count([c for c in $w if c.lower() in $consonants]) == $n];\n}\n",
            "function getClosestVowel ($word) {\n    $vowels = \"aeiouAEIOU\";\n    for ($i = $len($word) - 2; $i >= 0; $i--) {\n        if ($word[$i] in $vowels && $word[$i - 1] not in $vowels && $word[$i + 1] not in $vowels) {\n            return $word[$i];\n        }\n    }\n    return \"\";\n}\n",
            "function check($s) {\n    $depth = 0;\n    foreach ($s as $ch) {\n        if ($ch == \"(\") {\n            $depth++;\n        } else {\n            $depth--;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\nfunction matchParens($lst) {\n    $s1 = $lst[0] . $lst[1];\n    $s2 = $lst[1] . $lst[0];\n    return \"Yes\" if check($s1) || check($s2) else \"No\";\n}\n",
            "function maximum ($arr, $k) {\n    // Implementation here\n}\n",
            "function solution($lst) {\n    $result = 0;\n    foreach ($lst as $i => $x) {\n        if ($i % 2 == 0 && $x % 2 != 0) {\n            $result += $x;\n        }\n    }\n    return $result;\n}\n",
            "function addElements ($arr, $k) {\n    $result = 0;\n    foreach ($arr as $n) {\n        if (strlen($n) <= 2) {\n            $result += $n;\n        }\n        if ($k-- > 0) {\n            break;\n        }\n    }\n    return $result;\n}\n",
            "function getOddCollatz ($n) {\n    $collatz = [1];\n    while ($n != 1) {\n        if ($n % 2 != 0) {\n            $collatz[] = $n;\n            $n = 3 * $n + 1;\n        } else {\n            $n = $n // 2;\n        }\n    }\n    return sort($collatz);\n}\n",
            "function validDate ($date) {\n    $m = intval($date[0:2]);\n    $d = intval($date[3:5]);\n    if ($m in [1, 3, 5, 7, 8, 10, 12] && $d >= 1 && $d <= 31) {\n        return true;\n    }\n    if ($m in [4, 6, 9, 11] && $d >= 1 && $d <= 30) {\n        return true;\n    }\n    if ($m == 2 && $d >= 1 && $d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "function splitWords ($txt) {\n    if (\" \" in $txt) {\n        return explode(\" \", $txt);\n    } elseif (\",\" in $txt) {\n        return explode(\",\", $txt);\n    } else {\n        return [str(count([c for c in $txt if c.islower() and ord($c) % 2 == 0]))];\n    }\n}\n",
            "function isSorted ($lst) {\n    $freq = array_fill(0, 100, 0);\n    foreach ($lst as $e) {\n        $freq[$e]++;\n    }\n    return max(array_values($freq), default=0) <= 2;\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction intersection ($interval1, $interval2) {\n    $l = max($interval1[0], $interval2[0]);\n    $r = min($interval1[1], $interval2[1]);\n    $length = $r - $l;\n    return \"YES\" if ($length > 0 && isPrime($length)) else \"NO\";\n}\n",
            "function prodSigns ($arr) {\n    if (empty($arr)) {\n        return null;\n    }\n    if (0 in $arr) {\n        return 0;\n    }\n    $sign = -1 if count(array_filter(array_map(abs, $arr), '%&gt;&gt;&gt; 0')) % 2 == 1 else 1;\n    return $sign * sum(array_map(abs, $arr));\n}\n",
            "function minPath ($grid, $k) {\n    $n = count($grid);\n    $min_val = $n * $n + 1;\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $min_val = min($grid[$i - 1][$j], $grid[$i][$j - 1], $grid[$i + 1][$j], $grid[$i][$j + 1]);\n            }\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        if ($i % 2 == 0) {\n            $result[] = 1;\n        } else {\n            $result[] = $min_val;\n        }\n    }\n    return $result;\n}\n",
            "function tri($n) {\n    $seq = [1, 3];\n    for ($i = 2; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $seq[] = $i / 2 + 1;\n        } else {\n            $seq[] = $seq[$i - 1] + $seq[$i - 2] + ($i + 3) / 2;\n        }\n    }\n    return $seq;\n}\n",
            "function digits ($n) {\n    $odds = [intval($d) for $d in strval($n) if intval($d) % 2 == 1];\n    return reduce(function($x, $y) {\n        return $x * $y;\n    }, $odds, 1) if count($odds) > 0 else 0;\n}\n",
            "function isNested ($s) {\n    $openIdx = [];\n    $closeIdx = [];\n    foreach ($s as $ch) {\n        if ($ch == '[') {\n            $openIdx[] = $ch;\n        } else if ($ch == ']') {\n            $closeIdx[] = $ch;\n        }\n    }\n    $closeIdx = array_reverse($closeIdx);\n    $cnt = 0;\n    $i = 0;\n    $l = count($closeIdx);\n    foreach ($openIdx as $idx) {\n        if ($i < $l && $idx < $closeIdx[$i]) {\n            $cnt += 1;\n            $i += 1;\n        }\n    }\n    return $cnt >= 2;\n}\n",
            "function sumSquares ($lst) {\n    $result = 0;\n    foreach ($lst as $n) {\n        $result += pow(ceil($n), 2);\n    }\n    return $result;\n}\n",
            "function checkIfLastCharIsALetter ($txt) {\n    $last = $txt[strrpos($txt, ' ') + 1];\n    return strlen($last) == 1 && $last[0].isalpha();\n}\n",
            "function canArrange ($arr) {\n    $idx = array_filter(array_map(function($i) {\n        return $i < $arr[$i - 1];\n    }, range(1, count($arr))), '== true');\n    return max($idx, default=-1);\n}\n",
            "function largestSmallestIntegers ($lst) {\n    $neg = array_filter(array_map(function($i) {\n        return $i < 0;\n    }, $lst), '==', true);\n    $pos = array_filter(array_map(function($i) {\n        return $i > 0;\n    }, $lst), '==', true);\n    $maxNeg = max($neg) if count($neg) > 0 else null;\n    $minPos = min($pos) if count($pos) > 0 else null;\n    return [$maxNeg, $minPos];\n}\n",
            "function compareOne ($a, $b) {\n    $a1 = anyToReal($a);\n    $b1 = anyToReal($b);\n    if ($a1 == $b1) {\n        return null;\n    }\n    if ($a1 > $b1) {\n        return $a1;\n    }\n    return $b1;\n}\n",
            "function isEqualToSumEven ($n) {\n    return $n % 2 == 0 && $n >= 8;\n}\n",
            "function specialFactorial ($n) {\n    $fact = 1;\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $fact *= $i;\n        $result *= $fact;\n    }\n    return $result;\n}\n",
            "function fixSpaces ($txt) {\n    $txt = str_replace(\"\\s{3,}\", \"-\", $txt);\n    return str_replace(\" \", \"_\", $txt);\n}\n",
            "function fileNameCheck ($fileName) {\n    $suf = [\"txt\", \"exe\", \"dll\"];\n    $lst = explode(\".\", $fileName);\n    if (count($lst) != 2 || !in_array($lst[1], $suf) || strlen($lst[0]) == 0 || !str_isalpha($lst[0][0]) || str_count_chars($lst[0], \"0\") > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "function sumSquares ($lst) {\n    $result = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n            $result += pow($lst[$i], 2);\n        } elseif ($i % 4 == 0) {\n            $result += pow($lst[$i], 3);\n        } else {\n            $result += $lst[$i];\n        }\n    }\n    return $result;\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction wordsInSentence($sentence) {\n    $words = explode(\" \", $sentence);\n    return implode(\" \", array_filter(array_map(isPrime, array_map(strlen, $words)), $words));\n}\n",
            "function simplify ($x, $n) {\n    $xs = explode(\"/\", $x);\n    $ns = explode(\"/\", $n);\n    $num = intval($xs[0]) * intval($ns[0]);\n    $den = intval($xs[1]) * intval($ns[1]);\n    return $num % $den == 0;\n}\n",
            "function digitsSum($n) {\n    $n_str = strval($n);\n    if ($n >= 0) {\n        return str_sum(array_map(int, $n_str));\n    } else {\n        return intval($n_str[:2]) * 2 + digitsSum(abs($n));\n    }\n}\nfunction orderByPoints($nums) {\n    return sort($nums, 'str_cmp', digitsSum);\n}\n",
            "function specialFilter ($nums) {\n    $odds = \"13579\";\n    $result = 0;\n    foreach ($nums as $n) {\n        if ($n > 10 && $n % 2 == 1 && strpos($odds, str_substr($odds, 0, 1)) > -1) {\n            $result++;\n        }\n    }\n    return $result;\n}\n",
            "function getMaxTriples ($n) {\n    $c = [0, 0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        $a = $i * $i - $i + 1;\n        $c[$a % 3]++;\n    }\n    return $c[0] * $c[1] * $c[2] + ($c[0] * ($c[0] - 1) * ($c[0] - 2) + $c[1] * ($c[1] - 1) * ($c[1] - 2) + $c[2] * ($c[2] - 1) * ($c[2] - 2)) // 6;\n}\n",
            "function bf($planet1, $planet2) {\n    $names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if ($planet1 not in $names || $planet2 not in $names) {\n        return [];\n    }\n    $l = $names->index($planet1);\n    $r = $names->index($planet2);\n    if ($l > $r) {\n        $l, $r = $r, $l;\n    }\n    if ($l == $r) {\n        return [];\n    }\n    return $names[$l + 1 : $r];\n}\n",
            "function sortedListSum ($lst) {\n    $result = [];\n    foreach ($lst as $s) {\n        if (strlen($s) % 2 == 0) {\n            $result[] = $s;\n        }\n    }\n    return sort($result, 'strlen($a) => strlen($b) => $a - $b');\n}\n",
            "function xOrY ($n, $x, $y) {\n    if ($n < 2) {\n        return $y;\n    }\n    $i = 2;\n    while ($i <= floor(sqrt($n))) {\n        if ($n % $i == 0) {\n            return $y;\n        }\n        $i++;\n    }\n    return $x;\n}\n",
            "function doubleTheDifference ($lst) {\n    $result = 0;\n    foreach ($lst as $n) {\n        if ($n >= 0 && $n % 2 == 1) {\n            $result += $n * $n;\n        }\n    }\n    return $result;\n}\n",
            "function compare ($game, $guess) {\n    $result = [];\n    foreach ($game as $x) {\n        $result[] = abs($x - $guess[$game.indexOf($x)]);\n    }\n    return $result;\n}\n",
            "function strongestExtension ($className, $extensions) {\n    $maxS = float(\"-inf\");\n    $maxExt = \"\";\n    foreach ($extensions as $ext) {\n        $upper = 0;\n        $lower = 0;\n        foreach ($ext as $c) {\n            if ($c.isupper()) {\n                $upper++;\n            } else if ($c.islower()) {\n                $lower++;\n            }\n        }\n        $s = $upper - $lower;\n        if ($s > $maxS) {\n            $maxS = $s;\n            $maxExt = $ext;\n        }\n    }\n    return $className . \".\" . $maxExt;\n}\n",
            "function cycpatternCheck ($a, $b) {\n    $b = strrev($b);\n    foreach ($b as $i) {\n        if ($a[$i:] . $a[:$i]) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function evenOddCount ($num) {\n    $ds = strval(abs($num));\n    $even = strlen(substr_replace(substr_replace($ds, '0', '', 0), '1', '', 0));\n    return [$even, strlen($ds) - $even];\n}\n",
            "function intToMiniRoman ($num) {\n    $values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    $res = [];\n    foreach ($values as $v) {\n        while ($num >= $v) {\n            $res[] = $numerals[$values.indexOf($v)];\n            $num -= $v;\n        }\n    }\n    return \"\".join($res);\n}\n",
            "function rightAngleTriangle ($a, $b, $c) {\n    $s = [$a, $b, $c];\n    return $s[0] * $s[0] + $s[1] * $s[1] == $s[2] * $s[2];\n}\n",
            "function findMax ($words) {\n    $max_cnt = 0;\n    $max_w = \"\";\n    foreach ($words as $w) {\n        $cnt = count(array_unique($w));\n        if ($cnt > $max_cnt) {\n            $max_cnt = $cnt;\n            $max_w = $w;\n        }\n        elseif ($cnt == $max_cnt) {\n            $max_w = min($max_w, $w);\n        }\n    }\n    return $max_w;\n}\n",
            "function eat ($num, $need, $remaining) {\n    if ($need <= $remaining) {\n        return [$num + $need, $remaining - $need];\n    } else {\n        return [$num + $remaining, 0];\n    }\n}\n",
            "function doAlgebra ($operators, $operands) {\n    $ops = $operators.copy();\n    $nums = $operands.copy();\n    $i = $ops.count() - 1;\n    while ($i >= 0) {\n        if ($ops[$i] == \"**\") {\n            $nums[$i] = pow($nums[$i], $nums[$i + 1]);\n            $nums.pop($i + 1);\n            $ops.pop($i);\n        }\n        $i--;\n    }\n    $i = 0;\n    while ($i < $ops.count()) {\n        if ($ops[$i] == \"*\") {\n            $nums[$i] = $nums[$i] * $nums[$i + 1];\n            $nums.pop($i + 1);\n            $ops.pop($i);\n            $i--;\n        }\n        elif ($ops[$i] == \"//\") {\n            $nums[$i] = $nums[$i] / $nums[$i + 1];\n            $nums.pop($i + 1);\n            $ops.pop($i);\n            $i--;\n        }\n        $i++;\n    }\n    $i = 0;\n    while ($i < $ops.count()) {\n        if ($ops[$i] == \"+\") {\n            $nums[$i] = $nums[$i] + $nums[$i + 1];\n            $nums.pop($i + 1);\n            $ops.pop($i);\n            $i--;\n        }\n        elif ($ops[$i] == \"-\") {\n            $nums[$i] = $nums[$i] - $nums[$i + 1];\n            $nums.pop($i + 1);\n            $ops.pop($i);\n            $i--;\n        }\n        $i++;\n    }\n    return $nums[0];\n}\n",
            "function solve($s) {\n    $result = \"\";\n    foreach ($s as $ch) {\n        if ($ch.isalpha()) {\n            $result .= $ch;\n        } else {\n            if ($ch.isupper()) {\n                $result .= $ch.lower();\n            } else {\n                $result .= $ch.upper();\n            }\n        }\n    }\n    return $result;\n}\n",
            "function stringToMd5 ($txt) {\n    $hash = new Hash('md5');\n    $txtBytes = $txt.encode();\n    $hash->update($txtBytes);\n    $md5Encoded = $hash->hexdigest();\n    return $md5Encoded;\n}\n",
            "function generateIntegers ($a, $b) {\n    $lower = max(2, min($a, $b));\n    $upper = min(8, max($a, $b));\n    return [i for i in range($lower, $upper + 1) if i % 2 == 0];\n}\n"
        ],
        "ruby": [
            "def has_close_elements(numbers, threshold)\n    pq = PQueue.new {|a, b| a < b}\n    for n in numbers\n        pq.push(n)\n        if pq.size > 1 and pq.peek < threshold\n            pq.pop\n        end\n    end\n    return pq.size > 0\nend\n",
            "def separate_paren_groups(paren_string)\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens\n        if ch == \"(\":\n            stk.push(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop\n            current_group += ch\n            if stk.empty?\n                groups.push(current_group)\n                current_group = \"\"\n        end\n    end\n    return groups\nend\n",
            "def truncate_number(num)\n    # Implementation here\nend\n",
            "def below_zero(operations)\n    pq = PQueue.new {|a, b| a < b}\n    balance = 0\n    for op in operations\n        balance += op\n        if balance < 0\n            return true\n        end\n        pq.push(balance)\n    end\n    return false\nend\n",
            "def mean_absolute_deviation(numbers)\n    pq = PQueue.new {|a, b| a < b}\n    for e in numbers\n        pq.push(e)\n    end\n    result = 0\n    while not pq.empty?\n        result += abs(pq.pop - pq.size / len(numbers))\n    end\n    return result / len(numbers)\nend\n",
            "def intersperse(numbers, delimiter)\n    result = []\n    for i in range(len(numbers))\n        if i != 0\n            result << delimiter\n        end\n        result << numbers[i]\n    end\n    result\nend\n",
            "def parse_nested_parens(paren_string)\n    result = []\n    paren_groups = paren_string.split(\" \")\n    for group in paren_groups\n        max_depth = 0\n        depth = 0\n        for ch in group\n            if ch == \"(\"\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elsif ch == \")\"\n                depth -= 1\n        result.append(max_depth)\n    end\n    return result\nend\n",
            "def filter_by_substring(strs, substring)\n    result = []\n    for s in strs\n        if s.include?(substring)\n            result.push(s)\n        end\n    end\n    result\nend\n",
            "def sum_product(numbers)\n    n_sum = numbers.sum\n    n_product = numbers.reduce {|x, y| x * y}\n    [n_sum, n_product]\nend\n",
            "def rolling_max(numbers)\n    pq = PQueue.new {|a, b| a < b}\n    result = []\n    for num in numbers\n        pq.push(num)\n        if pq.size > 1\n            pq.pop\n        end\n        result.push(pq.peek)\n    end\n    return result\nend\n",
            "def is_palindrome(s)\n    s == s.reverse\nend\ndef make_palindrome(s)\n    if is_palindrome(s)\n        return s\n    for i in range(len(s))\n        if is_palindrome(s[i:])\n            return s + s[:i][::-1]\n    end\nend\n",
            "def string_xor(a, b)\n    a.to_s.chars.zip(b.to_s.chars).map(&:to_s).reduce('')\nend\n",
            "def longest(strs)\n    longest_s = strs[0]\n    for s in strs\n        if s.length > longest_s.length\n            longest_s = s\n        end\n    end\n    longest_s\nend\n",
            "def greatest_common_divisor(a, b)\n    a > b ? a / b : b / a\nend\n",
            "def all_prefixes(s)\n    prefixes = []\n    for i in 0..s.length\n        prefixes.push(s[0..i])\n    end\n    prefixes\nend\n",
            "def string_sequence(n)\n    \" \".join([str(i) for i in range(n + 1)])\nend\n",
            "def count_distinct_characters(s)\n    s.downcase.chars.uniq.size\nend\n",
            "def parse_music(music_string)\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    pq = PQueue.new {|a, b| a < b}\n    result = []\n    for note in notes\n        pq.push(durations[note])\n    end\n    while not pq.empty?\n        result.append(pq.pop)\n    end\n    return result\nend\n",
            "def how_many_times(s, substring)\n    times = 0\n    for i in range(len(s) - len(substring) + 1)\n        if s[i : i + len(substring)] == substring\n            times += 1\n        end\n    end\n    times\nend\n",
            "def sort_numbers(numbers)\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = list(filter(lambda x: x in num_dict, numbers.split(\" \")))\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\nend\n",
            "def find_closest_elements(numbers)\n    sorted_numbers = numbers.sort\n    min_diff = float(\"inf\")\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n        end\n    end\n    return closest_pair\nend\n",
            "def rescale_to_unit(numbers)\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num\n        return [0.0] * len(numbers)\n    else\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n    end\nend\n",
            "def filter_integers(values)\n    result = []\n    for x in values\n        if isinstance(x, Integer)\n            result.append(x)\n        end\n    end\n    result\nend\n",
            "def str_length(s)\n    s.length\nend\n",
            "def largest_divisor(n)\n    i = 2\n    while n % i != 0\n        i += 1\n    end\n    return n / i\nend\n",
            "def factorize(n)\n    factors = []\n    divisor = 2\n    while divisor <= n\n        if n % divisor == 0\n            factors.push(divisor)\n            n /= divisor\n        else\n            divisor += 1\n        end\n    end\n    factors\nend\n",
            "def remove_duplicates(numbers)\n    counts = {}\n    for num in numbers\n        counts[num] = counts.get(num, 0) + 1\n    end\n    res = []\n    for num in numbers\n        if counts[num] == 1\n            res << num\n        end\n    end\n    return res\nend\n",
            "def flip_case(s)\n    result = []\n    for ch in s\n        if ch.isalpha()\n            result << ch.downcase if ch.isupper() else ch.upcase\n        else\n            result << ch\n        end\n    end\n    result.to_s\nend\n",
            "def concatenate(strs)\n    strs.join(\"\")\nend\n",
            "def filter_by_prefix(strs, prefix_str)\n    pq = PQueue.new {|a, b| a < b}\n    for s in strs\n        pq.push(s)\n    end\n    result = []\n    while not pq.empty?\n        result.push(pq.pop)\n    end\n    return result\nend\n",
            "def get_positive(l)\n    result = []\n    for num in l\n        if num > 0\n            result << num\n        end\n    end\n    result\nend\n",
            "def is_prime(n)\n    n < 2 ? false : (n == 2 || n == 3 ? true : (n > 3 && (n % 2 == 0 || n % 3 == 0))) ? false : true\nend\n",
            "def poly(xs, x)\n    res = 0.0\n    for i in range(len(xs))\n        res += xs[i] * x**i\n    end\n    return res\nend\ndef find_zero(xs)\n    pq = PQueue.new {|a, b| a < b}\n    for e in xs\n        pq.push(e)\n    end\n    result = 0.0\n    while not pq.empty?\n        result += pq.pop\n    end\n    return result\nend\n",
            "def sort_third(l)\n    pq = PQueue.new {|a, b| a < b}\n    for e in l\n        pq.push(e)\n        if pq.size > 2\n            pq.pop\n        end\n    end\n    result = []\n    while not pq.empty?\n        result.append(pq.pop)\n    end\n    return result\nend\n",
            "def list_unique(l)\n    pq = PQueue.new {|a, b| a < b}\n    for e in l\n        pq.push(e)\n        if pq.size > 1\n            pq.pop\n        end\n    end\n    result = []\n    while not pq.empty?\n        result.append(pq.pop)\n    end\n    return result\nend\n",
            "def max_element(l)\n    l.max\nend\n",
            "def fizz_buzz(n)\n    cnt = 0\n    for i in 1..n\n        if i % 11 == 0 or i % 13 == 0\n            cnt += str(i).to_s.count(\"7\")\n        end\n    end\n    cnt\nend\n",
            "def sort_even(l)\n    pq = PQueue.new {|a, b| a < b}\n    for e in l[::2]\n        pq.push(e)\n    end\n    result = []\n    while not pq.empty?\n        result.append(pq.pop)\n    end\n    return result\nend\n",
            "def encode_cyclic(s)\n    result = []\n    for i in 0..(s.length / 3 - 1)\n        if i * 3 + 2 > s.length - 1\n            result.append(s[i * 3:])\n        else\n            result.append(s[i * 3 + 1:i * 3 + 3])\n            result.append(s[i * 3])\n        end\n    end\n    return result.to_s\nend\ndef decode_cyclic(s)\n    return encode_cyclic(encode_cyclic(s))\nend\n",
            "def is_prime(n)\n    if n < 2\n        return false\n    end\n    for i in 2..floor(Math.sqrt(n))\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\ndef prime_fib(n)\n    f = [0, 1]\n    cnt = 0\n    while cnt < n\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1])\n            cnt += 1\n        end\n    end\n    return f[1]\nend\n",
            "def triples_sum_to_zero(l)\n    pq = PQueue.new {|a, b| a < b}\n    for e in l\n        pq.push(e)\n    end\n    while not pq.empty?\n        a = pq.pop\n        for e in l\n            if e != a\n                pq.push(e)\n            end\n        end\n    end\n    return pq.size > 0\nend\n",
            "def car_race_collision(n)\n    n ** 2\nend\n",
            "def incr_list(l)\n    result = []\n    for i in l\n        result << i + 1\n    end\n    result\nend\n",
            "def pairs_sum_to_zero(l)\n    seen = Set.new\n    for num in l\n        if -num in seen\n            return true\n        end\n        seen.add(num)\n    end\n    return false\nend\n",
            "def change_base(x, bas)\n    digits = []\n    while x > 0\n        digits.append(x % bas)\n        x /= bas\n    end\n    digits.reverse\n    digits.map(&:to_s).join\nend\n",
            "def triangle_area(a, h)\n    # Implementation here\nend\n",
            "def fib4(n)\n    fib = [0, 0, 2, 0]\n    for i in (4..n)\n        fib[i % 4] = fib[0] + fib[1] + fib[2]\n        fib[0], fib[1], fib[2] = fib[1], fib[2], fib[3]\n    end\n    fib[n % 4]\nend\n",
            "def median(l)\n    pq = PQueue.new {|a, b| a < b}\n    for e in l\n        pq.push(e)\n    end\n    if pq.size % 2 != 0\n        return pq.pop\n    else\n        return (pq.pop + pq.pop) / 2\n    end\nend\n",
            "def is_palindrome(txt)\n    txt.to_s.reverse.to_s == txt.to_s\nend\n",
            "def modp(n, p)\n    ret = 1\n    for _ in range(n)\n        ret = (ret * 2) % p\n    end\n    return ret\nend\n",
            "def encode_shift(s)\n    result = []\n    for ch in s.to_s\n        result << chr(((ord(ch) - 97 + 5) % 26) + 97)\n    end\n    return result.to_s\nend\ndef decode_shift(s)\n    result = []\n    for ch in s.to_s\n        result << chr(((ord(ch) - 97 + 21) % 26) + 97)\n    end\n    return result.to_s\nend\n",
            "def remove_vowels(txt)\n    vowels = \"aeiouAEIOU\"\n    txt.gsub(/[aeiouAEIOU]/,\"\")\nend\n",
            "def below_threshold(l, t)\n    pq = PQueue.new {|a, b| a < b}\n    for e in l\n        pq.push(e)\n        if pq.size > t\n            pq.pop\n        end\n    end\n    return pq.empty?\nend\n",
            "def add(x, y)\n    x + y\nend\n",
            "def same_chars(s0, s1)\n    s0.to_a.sort.to_s == s1.to_a.sort.to_s\nend\n",
            "def fib(n)\n    if n <= 1\n        return n\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\nend\n",
            "def correct_bracketing(brackets)\n    pq = PQueue.new {|a, b| a < b}\n    for b in brackets\n        pq.push(b)\n        if pq.size > 1\n            pq.pop\n        end\n    end\n    return pq.size == 0\nend\n",
            "def monotonic(l)\n    diff = [y - x for x, y in zip(l, l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\nend\n",
            "def common(l1, l2)\n    pq = PQueue.new {|a, b| a < b}\n    for e in l1\n        pq.push(e)\n    end\n    for e in l2\n        pq.push(e)\n    end\n    result = []\n    while not pq.empty?\n        result.append(pq.pop)\n    end\n    return result\nend\n",
            "def largest_prime_factor(n)\n    i = 2\n    while i * i <= n\n        if n % i\n            i += 1\n        else\n            n /= i\n        end\n    end\n    return n\nend\n",
            "def sum_to_n(n)\n    (n + 1).to_i.to_s.to_i\nend\n",
            "def correct_bracketing(brackets)\n    depth = 0\n    for b in brackets\n        if b == \"(\"\n            depth += 1\n        elsif b == \")\"\n            depth -= 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    return depth == 0\nend\n",
            "def derivative(xs)\n    result = []\n    for i in range(1, len(xs))\n        result << xs[i] * i\n    end\n    result\nend\n",
            "def fibfib(n)\n    a, b, c = 0, 0, 1\n    while n > 2\n        a, b, c = b, c, a + b + c\n        n -= 1\n    end\n    return c\nend\n",
            "def vowels_count(s)\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in 0..s.length - 1\n        if s[i].downcase == \"y\"\n            cnt += 1\n        end\n        if s[i].downcase in vowels\n            cnt += 1\n        end\n    end\n    cnt\nend\n",
            "def circular_shift(x, shift)\n    x_str = x.to_s\n    if shift > x_str.length\n        return x_str[::-1]\n    else\n        return x_str[-shift..] + x_str[0..-shift - 1]\n    end\nend\n",
            "def digit_sum(s)\n    s.to_s.to_i\nend\n",
            "def fruit_distribution(s, n)\n    words = s.split(' ')\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\nend\n",
            "def pluck(arr)\n    evens = arr.select {|n| n % 2 == 0}\n    if evens.empty?\n        return []\n    end\n    min_even = evens.min\n    return [min_even, arr.index(min_even)]\nend\n",
            "def search(lst)\n    freqs = {}\n    for n in lst\n        freqs[n] = freqs.get(n, 0) + 1\n    end\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals, default=-1)\nend\n",
            "def strange_sort_list(lst)\n    sl = lst.sort\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right\n        result.append(sl[left])\n        left += 1\n        if left <= right\n            result.append(sl[right])\n            right -= 1\n        end\n    end\n    return result\nend\n",
            "def triangle_area(a, b, c)\n    if a + b > c and a + c > b and b + c > a\n        s = (a + b + c) / 2.0\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else\n        return -1.0\n    end\nend\n",
            "def will_it_fly(q, w)\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\nend\n",
            "def smallest_change(arr)\n    ans = 0\n    for i in range(len(arr) // 2)\n        if arr[i] != arr[len(arr) - i - 1]\n            ans += 1\n        end\n    end\n    return ans\nend\n",
            "def total_match(lst1, lst2)\n    cnt1 = lst1.map(&:length).sum\n    cnt2 = lst2.map(&:length).sum\n    return lst1 if cnt1 <= cnt2 else lst2\nend\n",
            "def is_multiply_prime(a)\n    cnt = 0\n    for i in 2..a\n        if is_prime(i)\n            while a % i == 0\n                cnt += 1\n                a /= i\n            end\n        end\n    end\n    return cnt == 3\nend\n",
            "def is_simple_power(x, n)\n    if n < 2\n        return x == n\n    end\n    tmp = 1\n    while tmp < x\n        tmp *= n\n    end\n    return tmp == x\nend\n",
            "def is_cube(a)\n    a = abs(a)\n    root = (a.to_f ** (1.0 / 3.0)).to_i\n    root ** 3 == a\nend\n",
            "def hex_key(num)\n    num.to_s.length.to_i\nend\n",
            "def decimal_to_binary(dec)\n    binary = bin(dec)[2:]\n    return f\"db{binary}db\"\nend\n",
            "def is_happy(s)\n    # Implementation here\nend\n",
            "def numerical_letter_grade(grades)\n    result = []\n    pq = PQueue.new {|a, b| a < b}\n    for g in grades\n        pq.push(g)\n    end\n    while not pq.empty?\n        result.append(pq.pop)\n    end\n    return result\nend\n",
            "def prime_length(s)\n    length = s.length\n    if length < 2\n        return false\n    end\n    for i in 2..floor(Math.sqrt(length))\n        if length % i == 0\n            return false\n        end\n    end\n    return true\nend\n",
            "def starts_one_ends(n)\n    if n == 1\n        return 1\n    return 2 * 9 * (10 ** (n - 2))\nend\n",
            "def solve(n)\n    digits_sum = 0\n    while n > 0\n        digits_sum += n % 10\n        n /= 10\n    end\n    return bin(digits_sum)[2:]\nend\n",
            "def add(lst)\n    result = 0\n    for i, x in enumerate(lst)\n        if i % 2 == 1 and x % 2 == 0\n            result += x\n        end\n    end\n    result\nend\n",
            "def anti_shuffle(s)\n    words = s.split(\" \")\n    words.map(&:sort).join(\" \")\nend\n",
            "def get_row(lst, x)\n    coords = []\n    for i in range(len(lst))\n        for j in range(len(lst[i]))\n            if lst[i][j] == x\n                coords.push([i, j])\n            end\n        end\n    end\n    coords.sort {|a, b| (a[0] < b[0]) ? -a[1] : b[1]}\n    return coords\nend\n",
            "def sort_array(arr)\n    arr.sort.reverse if (arr[0] + arr[-1]) % 2 == 0 else arr.sort\nend\n",
            "def encrypt(s)\n    result = []\n    for ch in s\n        shifted = ord(ch) + 4\n        if shifted > ord('z')\n            shifted -= 26\n        end\n        result << chr(shifted)\n    end\n    result.to_s\nend\n",
            "def next_smallest(lst)\n    pq = PQueue.new {|a, b| a < b}\n    for e in lst\n        pq.push(e)\n    end\n    if pq.size < 2\n        return nil\n    end\n    return pq.pop\nend\n",
            "def is_bored(s)\n    sentences = Re.split(/[.!?]\\s*/, s)\n    sentences.map(&:first).select(&:start_with?(\"I \")).count\nend\n",
            "def any_int(x, y, z)\n    if x.kind_of?(Integer) && y.kind_of?(Integer) && z.kind_of?(Integer)\n        if (x + y == z) || (x + z == y) || (y + z == x)\n            return true\n        end\n    end\n    return false\nend\n",
            "def encode(message)\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message\n        if ch.isalpha?\n            ch1 = ch.upcase if ch.islower? else ch.downcase\n            if ch1 in vowels\n                ch1 = ch1.to_s.chr(ch1.to_s.ord + 2)\n            end\n            result << ch1\n        else\n            result << ch\n        end\n    end\n    result.to_s\nend\n",
            "def is_prime(n)\n    if n < 2\n        return false\n    end\n    for i in 2..floor(Math.sqrt(n))\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\ndef skjkasdkd(lst)\n    primes = lst.select(&:to_i).select(&:is_prime?)\n    if primes.empty?\n        return 0\n    end\n    largest = primes.max.to_s\n    return primes.map(&:to_i).sum\nend\n",
            "def check_dict_case(d)\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.values.all? do |v|\n        v.is_a?(String)\n    end\n    d.keys.all? do |k|\n        k.is_a?(String)\n    end\n    d.keys.all? do |k|\n    d.values.all? do |k|\n    d.values.all?\n    d.keys.values.all?\n    d.values.all?\n    d.values.all?\n    d.values.all?\n    d.values.all?\n    d.values.all?\n    d.values.all?\n    d.values.all\n    d.values.all\n    d.values.all\n    d.values.all\n    d.values.all.values.all\n    d.values\n    d.all\n    d.values.all\n    d.all.values.all\n    d.values.all\n   .values.all\n   .values.all\n   .values.all\n   .values.all\n   .all.values.all\n   .values.all\n   .values\n   .values\n   .all\n   .all\n   .values.all\n   .all\n   .all\n   .all\n   .all.all.values.all\n.all.all.all.all\n.all.all\n.all\n.all.all\n.all\n.all.all\n.all\n.all\n.all\n.all\n.all\n.all\n.all.all\n.all\n.all\n.all.all.all.all.all\n.all.all\n.all\n.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all\n.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.all.",
            "def count_up_to(n)\n    primes = []\n    (2..n).each do |num|\n        primes.append(num) if prime?(num)\n    end\n    primes\nend\n",
            "def multiply(a, b)\n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\n",
            "def count_upper(s)\n    vowels = \"AEIOU\"\n    return s.count(vowels)\nend\n",
            "def closest_integer(value)\n    num = Float(value)\n    if num >= 0\n        return num.to_i\n    else\n        return num.to_i - 1\n    end\nend\n",
            "def make_a_pile(n)\n    result = []\n    for i in range(n)\n        result.append(n + 2 * i)\n    end\n    result\nend\n",
            "def words_string(s)\n    re.split(/[, ]/, s)\nend\n",
            "def choose_num(x, y)\n    if x > y\n        return -1\n    if y % 2 == 0\n        return y\n    return y - 1 if x != y else -1\nend\n",
            "def rounded_avg(n, m)\n    r_avg = (m + n) / 2.0 + 0.5\n    bin(r_avg)[2:]\nend\n",
            "def unique_digits(x)\n    result = []\n    pq = PQueue.new {|a, b| a < b}\n    for num in x\n        pq.push(num)\n        if pq.size > 1\n            pq.pop\n        end\n    end\n    while not pq.empty?\n        result.append(pq.pop)\n    end\n    return result\nend\n",
            "def by_length(arr)\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    pq = PQueue.new {|a, b| a < b}\n    for e in arr\n        pq.push(e)\n        if pq.size > 9\n            pq.pop\n        end\n    end\n    result = []\n    while not pq.empty?\n        result.append(pq.pop)\n    end\n    return result\nend\n",
            "def f(n)\n    nums = (1..n).to_a\n    return [sum(nums[:i]) if i % 2 != 0 else reduce(lambda x, y: x * y, nums[:i], 1) for i in nums]\nend\n",
            "def even_odd_palindrome(n)\n    cnt = [0, 0]\n    pq = PQueue.new {|a, b| a < b}\n    for i in 1..n\n        pq.push(i)\n        if pq.size > 1\n            pq.pop\n        end\n    end\n    while not pq.empty?\n        cnt[pq.pop % 2] += 1\n    end\n    return cnt\nend\n",
            "def digits_sum(n)\n    n.to_s.to_i\nend\ndef count_nums(arr)\n    arr.map(&:to_i).select(&:positive?).size\nend\n",
            "def move_one_ball(arr)\n    sorted_arr = SortedArray.new(arr)\n    for i in 0..(arr.size - 1)\n        if arr[i:] == sorted_arr[:arr.size - i] and arr[:i] == sorted_arr[arr.size - i:]\n            return true\n        end\n    end\n    return false\nend\n",
            "def can_exchange(lst1, lst2)\n    pq1 = PQueue.new {|a, b| a < b}\n    pq2 = PQueue.new {|a, b| a < b}\n    for e in lst1\n        pq1.push(e)\n    end\n    for e in lst2\n        pq2.push(e)\n    end\n    return pq1.size == pq2.size\nend\n",
            "def histogram(test)\n    freq = Hash.new\n    words = [w for w in test.split(\" \") if len(w) > 0]\n    for w in words\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if len(freq) > 0\n        max_freq = max(freq.values)\n        for k, v in freq.items\n            if v == max_freq\n                result[k] = v\n        end\n    end\n    return result\nend\n",
            "def is_palindrome(s)\n    s == s.reverse?\nend\ndef reverse_delete(s, c)\n    s1 = s.gsub(c)\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"]\nend\n",
            "def odd_count(lst)\n    result = []\n    for num in lst\n        n = sum(ord(d) % 2 == 1 for d in num)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    end\n    result\nend\n",
            "def min_sub_array_sum(nums)\n    pq = PQueue.new {|a, b| a < b}\n    cur_sum = 0\n    for n in nums\n        cur_sum = min(cur_sum + n, 0)\n        pq.push(cur_sum)\n        if pq.size == 0\n            pq.push(n)\n        end\n    end\n    return pq.pop\nend\n",
            "def max_fill(grid, capacity)\n    result = 0\n    for arr in grid\n        result += (arr.map(&:to_f).map(&:ceil).sum / capacity).to_i\n    end\n    result\nend\n",
            "def count_ones(num)\n    bin(num).to_s.count(\"1\")\nend\ndef sort_array(arr)\n    arr.sort {|a, b| (count_ones(a) < count_ones(b)) ? -1 : 1}\nend\n",
            "def select_words(s, n)\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    pq = PQueue.new {|a, b| a.length < b.length}\n    for w in words\n        pq.push(w)\n        if pq.size > n\n            pq.pop\n        end\n    end\n    result = []\n    while not pq.empty?\n        result.append(pq.pop)\n    end\n    return result\nend\n",
            "def get_closest_vowel(word)\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1)\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels\n            return word[i]\n    end\nend\n",
            "def check(s)\n    return Regexp.match?(/\\(?\\)?/)[0] == s\nend\ndef match_parens(lst)\n    return \"Yes\" if check(lst[0] + lst[1]) or check(lst[1] + lst[0]) else \"No\"\nend\n",
            "def maximum(arr, k)\n    heap = Heap.new\n    for e in arr\n        heap.push(e)\n        if heap.size > k\n            heap.pop\n        end\n    end\n    result = []\n    while not heap.empty?\n        result.append(heap.pop)\n    end\n    return result\nend\n",
            "def solution(lst)\n    lst.select {|x| x % 2 == 0 and x % 2 != 0}.sum\nend\n",
            "def add_elements(arr, k)\n    result = 0\n    for i in 0..k-1\n        result += arr[i] if len(str(arr[i])) <= 2 else 0\n    end\n    result\nend\n",
            "def get_odd_collatz(n)\n    pq = PQueue.new {|a, b| a < b}\n    collatz = [1]\n    while n != 1\n        if n % 2 != 0\n            pq.push(n)\n            n = 3 * n + 1\n        else\n            n = n // 2\n        end\n    end\n    while not pq.empty?\n        collatz.append(pq.pop)\n    end\n    return collatz\nend\n",
            "def valid_date(date)\n    Date.strptime(date, \"%Y-%m-%d\")\nend\n",
            "def split_words(txt)\n    txt.split(\" \") if \" \" in txt else txt.split(\",\") if \",\" in txt else [str(len([c for c in txt if c.islower() and ord(c) % 2 == 0]))]\nend\n",
            "def is_sorted(lst)\n    pq = PQueue.new {|a, b| a < b}\n    for e in lst\n        pq.push(e)\n        if pq.size > 2\n            pq.pop\n        end\n    end\n    return pq.empty?\nend\n",
            "def intersection(interval1, interval2)\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\nend\n",
            "def prod_signs(arr)\n    pq = PQueue.new {|a, b| a < b}\n    for e in arr\n        pq.push(e)\n        if pq.size > 1\n            pq.pop\n        end\n    end\n    result = []\n    while not pq.empty?\n        result.append(pq.pop)\n    end\n    return result\nend\n",
            "def min_path(grid, k)\n    n = grid.length\n    min_val = n * n + 1\n    pq = PQueue.new {|a, b| a < b}\n    for i in 0..n-1\n        for j in 0..n-1\n            if grid[i][j] == 1\n                pq.push([i, j, 1])\n            end\n        end\n    end\n    result = []\n    for i in 0..k-1\n        if pq.empty?\n            result.append(1)\n        else\n            [i, j, val] = pq.pop\n            result.append(val)\n            if i != 0\n                pq.push([i - 1, j, val])\n            end\n            if j != 0\n                pq.push([i, j - 1, val])\n            end\n            if i != n - 1\n                pq.push([i + 1, j, val])\n            end\n            if j != n - 1\n                pq.push([i, j + 1, val])\n            end\n        end\n    end\n    return result\nend\n",
            "def tri(n)\n    seq = [1, 3]\n    for i in 1..n\n        if i % 2 == 0\n            seq.push(i / 2 + 1)\n        else\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        end\n    end\n    seq\nend\n",
            "def digits(n)\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return odds.reduce(lambda x, y: x * y, 1) if odds.size > 0 else 0\nend\n",
            "def is_nested(s)\n    pq = PQueue.new {|a, b| a < b}\n    for e in s\n        pq.push(e)\n        if pq.size > 2\n            pq.pop\n        end\n    end\n    return pq.empty?\nend\n",
            "def sum_squares(lst)\n    result = 0\n    for n in lst\n        result += pow(ceil(n), 2)\n    end\n    return result\nend\n",
            "def check_if_last_char_is_a_letter(txt)\n    last = txt.rfind(' ') + 1\n    last = txt[last]\n    return last.isalpha()\nend\n",
            "def can_arrange(arr)\n    pq = PQueue.new {|a, b| a < b}\n    for e in arr\n        pq.push(e)\n    end\n    result = -1\n    while not pq.empty?\n        result = pq.pop\n    end\n    return result\nend\n",
            "def largest_smallest_integers(lst)\n    neg = lst.select {|i| i < 0}\n    pos = lst.select {|i| i > 0}\n    max_neg = neg.max if neg.size > 0 else nil\n    min_pos = pos.min if pos.size > 0 else nil\n    [max_neg, min_pos]\nend\n",
            "def compare_one(a, b)\n    a1 = a.to_f\n    b1 = b.to_f\n    if a1 == b1\n        return nil\n    elif a1 > b1\n        return a1\n    else\n        return b1\n    end\nend\n",
            "def is_equal_to_sum_even(n)\n    n % 2 == 0 and n >= 8\nend\n",
            "def special_factorial(n)\n    fact = 1\n    result = 1\n    for i in 1..n\n        fact *= i\n        result *= fact\n    end\n    return result\nend\n",
            "def fix_spaces(txt)\n    txt.gsub(/\\s{3,}/, \"-\")\nend\n",
            "def file_name_check(file_name)\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or not lst[1] in [\"txt\", \"exe\", \"dll\"] or len(lst[0]) == 0 or not lst[0][0].isalpha() or len([x for x in lst[0] if x.isdigit()]) > 3:\n        return \"No\"\n    return \"Yes\"\nend\n",
            "def sum_squares(lst)\n    result = 0\n    for i in range(len(lst))\n        if i % 3 == 0\n            result += pow(lst[i], 2)\n        elsif i % 4 == 0\n            result += pow(lst[i], 3)\n        else\n            result += lst[i]\n        end\n    end\n    result\nend\n",
            "def is_prime(n)\n    n < 2 ? false : (n == 2 || n == 3 ? true : (n > 3 && (n % 2 == 0 || n % 3 == 0)))\nend\ndef words_in_sentence(sentence)\n    words = sentence.split(\" \")\n    return \" \".join([w for w in words if is_prime(w.length)])\nend\n",
            "def simplify(x, n)\n    Rational.new(x, n).simplify\nend\n",
            "def digits_sum(n)\n    n.to_s.to_i\nend\ndef order_by_points(nums)\n    nums.sort {|a, b| digits_sum(a) < digits_sum(b)}\nend\n",
            "def special_filter(nums)\n    odds = \"13579\"\n    pq = PQueue.new {|a, b| a < b}\n    for n in nums\n        pq.push(n)\n        if pq.size > 10 and pq.peek.to_s[0] in odds and pq.peek % 2 == 1\n            pq.pop\n        end\n    end\n    return pq.size\nend\n",
            "def get_max_triples(n)\n    c = [0, 0, 0]\n    for i in 1..n\n        a = i * i - i + 1\n        c[a % 3] += 1\n    end\n    result = 0\n    for i in 1..c[0]\n        for j in 1..c[1]\n            for k in 1..c[2]\n                result += i * j * k\n            end\n        end\n    end\n    return result\nend\n",
            "def bf(planet1, planet2)\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1 : r]\nend\n",
            "def sorted_list_sum(lst)\n    result = []\n    lst.each do |s|\n        if s.length % 2 == 0\n            result << s\n        end\n    end\n    result.sort {|a, b| a.length < b.length || a.length == b.length && a < b}\n    result\nend\n",
            "def x_or_y(n, x, y)\n    if n < 2\n        return y\n    for i in 2..floor(sqrt(n))\n        if n % i == 0\n            return y\n        end\n    end\n    return x\nend\n",
            "def double_the_difference(lst)\n    result = 0\n    for n in lst\n        if n >= 0 and n % 2 == 1\n            result += n * n\n        end\n    end\n    result\nend\n",
            "def compare(game, guess)\n    result = []\n    for i in range(len(game))\n        result.push(abs(game[i] - guess[i]))\n    end\n    result\nend\n",
            "def strongest_extension(class_name, extensions)\n    max_s = -Infinity\n    max_ext = \"\"\n    for ext in extensions\n        upper = ext.count(String.upper)\n        lower = ext.count(String.lower)\n        s = upper - lower\n        if s > max_s\n            max_s = s\n            max_ext = ext\n        end\n    end\n    return f\"{class_name}.{max_ext}\"\nend\n",
            "def cycpattern_check(a, b)\n    if a.length < b.length\n        return false\n    end\n    for i in b.length..a.length\n        if (b[i:] + b[:i]) in a\n            return true\n        end\n    end\n    return false\nend\n",
            "def even_odd_count(num)\n    ds = String.digits(abs(num))\n    even = ds.count(\"0\")\n    return [even, ds.length - even]\nend\n",
            "def int_to_mini_roman(num)\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    pq = PQueue.new {|a, b| a < b}\n    for i in values\n        pq.push(i)\n    end\n    for i in values\n        while num >= i\n            res.push(numerals[pq.pop])\n            num -= i\n        end\n    end\n    return \"\".join(res)\nend\n",
            "def right_angle_triangle(a, b, c)\n    s = [a, b, c].sort\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\nend\n",
            "def find_max(words)\n    max_cnt = 0\n    max_w = \"\"\n    for w in words\n        cnt = w.length\n        if cnt > max_cnt\n            max_cnt = cnt\n            max_w = w\n        elsif cnt == max_cnt\n            max_w = min(max_w, w)\n        end\n    end\n    return max_w\nend\n",
            "def eat(num, need, remaining)\n    if need <= remaining\n        return [num + need, remaining - need]\n    else\n        return [num + remaining, 0]\n    end\nend\n",
            "def do_algebra(operators, operands)\n    ops = operators.copy\n    nums = operands.copy\n    i = len(ops) - 1\n    while i >= 0\n        if ops[i] == \"**\"\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n        end\n        i -= 1\n    end\n    i = 0\n    while i < len(ops)\n        if ops[i] == \"*\"\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elsif ops[i] == \"//\"\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        end\n        i += 1\n    end\n    i = 0\n    while i < len(ops)\n        if ops[i] == \"+\"\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elsif ops[i] == \"-\"\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        end\n        i += 1\n    end\n    return nums[0]\nend\n",
            "def solve(s)\n    result = []\n    for ch in s\n        if ch.isalpha?\n            result.append(ch.downcase)\n        else\n            result.append(ch)\n        end\n    end\n    result.reverse\n    return result.to_s\nend\n",
            "def string_to_md5(txt)\n    md5_hash = Hashlib.md5\n    txt_bytes = txt.encode\n    md5_hash.update(txt_bytes)\n    md5_encoded = md5_hash.hexdigest\n    return md5_encoded\nend\n",
            "def generate_integers(a, b)\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in (lower..upper).step(2) if i % 2 == 0]\nend\n"
        ],
        "rust": [
            "pub fn has_close_elements(numbers: &Vec<f64>, threshold: f64) -> bool {\n    for i in 0..numbers.len() - 1 {\n        for j in i + 1..numbers.len() {\n            if abs(numbers[i] - numbers[j]) < threshold {\n                return true;\n            }\n        }\n    }\n    false\n}\n",
            "pub fn separate_paren_groups(paren_string: &str) -> Vec<String> {\n    let mut stk = vec![];\n    let mut current_group = \"\";\n    let parens = paren_string.replace(\" \", \"\").chars();\n    for ch in parens {\n        if ch == \"(\" {\n            stk.push(ch);\n            current_group += ch;\n        } elif ch == \")\" {\n            stk.pop();\n            current_group += ch;\n            if stk.len() == 0 {\n                vec![current_group]\n            }\n        }\n    }\n}\n",
            "pub fn truncate_number(num: f64) -> f64 {\n    num - (num as f64).floor()\n}\n",
            "pub fn below_zero(operations: &Vec<i32>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n        balance += op;\n        if balance < 0 {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn mean_absolute_deviation(numbers: &Vec<f64>) -> f64 {\n    let mut sum = 0.0;\n    let mut count = 0;\n    for n in numbers {\n        sum += n;\n        count += 1;\n    }\n    let mean = sum / count;\n    let mut deviation = 0.0;\n    for n in numbers {\n        deviation += abs(n - mean);\n    }\n    deviation / count\n}\n",
            "pub fn intersperse(numbers: &Vec<i32>, delimiter: i32) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in numbers {\n        if i != 0 {\n            result.push(delimiter);\n        }\n        result.push(i);\n    }\n    result\n}\n",
            "pub fn parse_nested_parens(paren_string: &str) -> Vec<i32> {\n    let mut result = vec![];\n    let mut depth = 0;\n    for ch in paren_string.chars() {\n        if ch == '(' {\n            depth += 1;\n        } else if ch == ')' {\n            depth -= 1;\n        }\n        result.push(depth);\n    }\n    result\n}\n",
            "pub fn filter_by_substring(strs: &Vec<String>, substring: &String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strs {\n        if substring in s {\n            result.push(s);\n        }\n    }\n    result\n}\n",
            "pub fn sum_product(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut n_sum = 0;\n    let mut n_product = 1;\n    for n in numbers {\n        n_sum += n;\n        n_product *= n;\n    }\n    vec![n_sum, n_product]\n}\n",
            "pub fn rolling_max(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut max_so_far = -1_000_000_000_000_000_000;\n    let mut result = Vec::new();\n    for num in numbers {\n        max_so_far = max(max_so_far, num);\n        result.push(max_so_far);\n    }\n    result\n}\n",
            "pub fn is_palindrome(s: &str) -> bool {\n    s == s.chars().reversed().collect::<Vec<char>>().join(\"\")\n}\npub fn make_palindrome(s: &str) -> String {\n    if is_palindrome(s) {\n        return s.chars().reversed().collect::<Vec<char>>().join(\"\")\n    }\n    let mut result = String::new();\n    for i in s.chars() {\n        result += i;\n        if is_palindrome(result.chars().reversed().collect::<Vec<char>>().join(\"\")) {\n            return result;\n        }\n    }\n    return \"\"\n}\n",
            "pub fn string_xor(a: &str, b: &str) -> str {\n    let a_chars = a.chars();\n    let b_chars = b.chars();\n    let mut result = \"\";\n    while let (a_char, b_char) = a_chars.next_multiple_or_none(), b_chars.next_multiple_or_none() {\n        if let (a_char, b_char) = (a_char, b_char) {\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    result\n}\n",
            "pub fn longest(strs: &Vec<String>) -> Option<String> {\n    let mut longest_s = strs[0];\n    for s in strs {\n        if s.len() > longest_s.len() {\n            longest_s = s;\n        }\n    }\n    longest_s\n}\n",
            "pub fn greatest_common_divisor(a: i32, b: i32) -> i32 {\n    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }\n}\n",
            "pub fn all_prefixes(s: &str) -> Vec<String> {\n    let mut prefixes = vec![];\n    for i in range(s.len()) {\n        prefixes.push(s[i..].to_string());\n    }\n    prefixes\n}\n",
            "pub fn string_sequence(n: i32) -> String {\n    let mut result = \"\";\n    for i in 0..n + 1 {\n        result += i.to_string();\n        if i < n {\n            result += \" \";\n        }\n    }\n    result\n}\n",
            "pub fn count_distinct_characters(s: &str) -> i32 {\n    let mut result = 0;\n    for c in s.chars() {\n        result += 1;\n    }\n    result\n}\n",
            "pub fn parse_music(music_string: &str) -> Vec<i32> {\n    let mut result = vec![];\n    for note in music_string.split() {\n        match note {\n            \"o\" => result.push(4),\n            \"o|\" => result.push(2),\n            \".|\" => result.push(1),\n        }\n    }\n    result\n}\n",
            "pub fn how_many_times(s: &str, substring: &str) -> i32 {\n    let mut times = 0;\n    for i in range(s.len() - substring.len() + 1) {\n        if s[i..i + substring.len()] == substring {\n            times += 1;\n        }\n    }\n    times\n}\n",
            "pub fn sort_numbers(numbers: &str) -> String {\n    let mut num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    let mut num_list = num_dict.iter().filter(|&(k, v)| k in num_dict.keys()).collect::<Vec<_>>();\n    let mut num_list = num_list.sort(|a, b| a.cmp(&b));\n    let mut result = String::new();\n    for e in num_list {\n        result += e;\n    }\n    result\n}\n",
            "pub fn find_closest_elements(numbers: &Vec<f64>) -> Vec<f64> {\n    let mut pq = BinaryHeap::new();\n    for e in numbers {\n        pq.push(Reverse(e));\n    }\n    let mut result = Vec::new();\n    while !pq.is_empty() {\n        result.push(pq.pop().unwrap().0);\n    }\n    result\n}\n",
            "pub fn rescale_to_unit(numbers: &Vec<f64>) -> Vec<f64> {\n    let mut min_num = numbers.iter().min().unwrap();\n    let mut max_num = numbers.iter().max().unwrap();\n    if min_num == max_num {\n        vec![0.0]\n    } else {\n        numbers.iter().map(|num| (num - min_num) / (max_num - min_num)).collect::<Vec<f64>>()\n    }\n}\n",
            "pub fn filter_integers(values: &Vec<Box<dyn Any>>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for x in values {\n        if x.as_ref().is_some() {\n            if x.as_ref().unwrap().is_integer() {\n                result.push(x.as_ref().unwrap().to_i32());\n            }\n        }\n    }\n    result\n}\n",
            "pub fn str_length(s: &str) -> i32 {\n    s.len()\n}\n",
            "pub fn largest_divisor(n: i32) -> i32 {\n    let mut i = 2;\n    while n % i != 0 {\n        i += 1;\n    }\n    n // i\n}\n",
            "pub fn factorize(n: i32) -> Vec<i32> {\n    let mut factors = vec![];\n    let mut divisor = 2;\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    factors\n}\n",
            "pub fn remove_duplicates(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut counts = HashMap::new();\n    let mut res = Vec::new();\n    for num in numbers {\n        counts.insert(num, 0);\n    }\n    for num in numbers {\n        if counts[num] == 1 {\n            res.push(num);\n        }\n        counts[num] += 1;\n    }\n    res\n}\n",
            "pub fn flip_case(s: &str) -> String {\n    let mut result = String::new();\n    for ch in s {\n        if ch.is_alpha() {\n            if ch.is_lower() {\n                result.push(ch.upper());\n            } else {\n                result.push(ch.lower());\n            }\n        } else {\n            result.push(ch);\n        }\n    }\n    result\n}\n",
            "pub fn concatenate(strs: &Vec<String>) -> String {\n    let mut result = \"\";\n    for s in strs {\n        result += s;\n    }\n    result\n}\n",
            "pub fn filter_by_prefix(strs: &Vec<String>, prefix_str: &String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strs {\n        if s.startswith(prefix_str) {\n            result.push(s);\n        }\n    }\n    result\n}\n",
            "pub fn get_positive(l: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for num in l {\n        if num > 0 {\n            result.push(num);\n        }\n    }\n    result\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        false\n    } else {\n        let mut i = 2;\n        let mut sqrt_n = n.sqrt();\n        while i <= sqrt_n {\n            if n % i == 0 {\n                return false;\n            }\n            i += 1;\n        }\n        true\n    }\n}\n",
            "pub fn poly(xs: &Vec<i32>, x: f64) -> f64 {\n    let mut res = 0.0;\n    for i in xs {\n        res += i * x**i;\n    }\n    res\n}\npub fn find_zero(xs: &Vec<i32>) -> f64 {\n    let mut x1 = 1.0;\n    let mut x2 = -1.0;\n    while poly(xs, x1) * poly(xs, x2) > 0 {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while abs(x1 - x2) > 1e-10 {\n        let mid = (x1 + x2) / 2;\n        if poly(xs, mid) == 0 {\n            return mid;\n        }\n        if poly(xs, mid) * poly(xs, x1) < 0 {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    (x1 + x2) / 2\n}\n",
            "pub fn sort_third(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_third = l.clone();\n    sorted_third.sort();\n    let mut result = l.clone();\n    for i in 0..l.len() as usize {\n        if i % 3 == 0 {\n            result[i] = sorted_third[i // 3];\n        }\n    }\n    result\n}\n",
            "pub fn list_unique(l: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for e in l {\n        if !result.contains(e) {\n            result.push(e);\n        }\n    }\n    result\n}\n",
            "pub fn max_element(l: &Vec<i32>) -> i32 {\n    let mut max = 0;\n    for e in l {\n        if e > max {\n            max = e;\n        }\n    }\n    max\n}\n",
            "pub fn fizz_buzz(n: i32) -> i32 {\n    let mut cnt = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += str(i).count(\"7\");\n        }\n    }\n    cnt\n}\n",
            "pub fn sort_even(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_even = l[::2].sort();\n    let mut result = Vec::new();\n    for i in range(l.len()) {\n        if i % 2 == 0 {\n            result.push(sorted_even[i // 2]);\n        } else {\n            result.push(l[i]);\n        }\n    }\n    result\n}\n",
            "pub fn encode_cyclic(s: &str) -> str {\n    let mut result = \"\";\n    for i in range(0, s.len() as usize, 3) {\n        if i + 3 > s.len() as usize {\n            result += s[i:];\n        } else {\n            result += s[i+1:i+3];\n            result += s[i];\n        }\n    }\n    result\n}\npub fn decode_cyclic(s: &str) -> str {\n    let mut result = \"\";\n    let mut s = encode_cyclic(s);\n    for i in range(0, s.len() as usize, 2) {\n        result += s[i+1];\n        result += s[i];\n    }\n    result\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        false\n    } else {\n        let mut i = 2;\n        let mut sqrt_n = n.sqrt();\n        while i <= sqrt_n {\n            if n % i == 0 {\n                false\n            }\n            i += 1\n        }\n        true\n    }\n}\npub fn prime_fib(n: i32) -> i32 {\n    let mut f = [0, 1];\n    let mut cnt = 0;\n    while cnt < n {\n        f = [f[1], f[0] + f[1]];\n        if is_prime(f[1]) {\n            cnt += 1\n        }\n    }\n    f[1]\n}\n",
            "pub fn triples_sum_to_zero(l: &Vec<i32>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut result = false;\n    while i < l.len() && j < l.len() && k < l.len() {\n        if l[i] + l[j] + l[k] == 0 {\n            result = true;\n            break;\n        }\n        if l[i] + l[j] + l[k] < 0 {\n            i += 1;\n        } else if l[i] + l[j] + l[k] > 0 {\n            k += 1;\n        } else {\n            j += 1;\n        }\n    }\n    result\n}\n",
            "pub fn car_race_collision(n: i32) -> i32 {\n    n * n\n}\n",
            "pub fn incr_list(l: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in l {\n        result.push(i + 1);\n    }\n    result\n}\n",
            "pub fn pairs_sum_to_zero(l: &Vec<i32>) -> bool {\n    let mut seen = HashSet::new();\n    for num in l {\n        if -num in seen {\n            return true;\n        }\n        seen.insert(num);\n    }\n    false\n}\n",
            "pub fn change_base(x: i32, bas: i32) -> String {\n    let mut digits = vec![];\n    while x > 0 {\n        digits.push(x % bas);\n        x /= bas;\n    }\n    digits.reverse();\n    digits.join(\"\")\n}\n",
            "pub fn triangle_area(a: i32, h: i32) -> f64 {\n    a * h / 2.0\n}\n",
            "pub fn fib4(n: i32) -> i32 {\n    let mut fib = [0, 0, 2, 0];\n    for i in range(4, n + 1) {\n        fib[i % 4] = sum(fib);\n    }\n    fib[n % 4]\n}\n",
            "pub fn median(l: &Vec<f64>) -> f64 {\n    let mut sl = l.clone();\n    sl.sort();\n    if sl.len() % 2 != 0 {\n        sl[sl.len() / 2]\n    } else {\n        (sl[sl.len() / 2] + sl[(sl.len() / 2) - 1]) / 2\n    }\n}\n",
            "pub fn is_palindrome(txt: &str) -> bool {\n    txt.eq(txt.chars().reversed().collect::<Vec<char>>())\n}\n",
            "pub fn modp(n: i32, p: i32) -> i32 {\n    let mut ret = 1;\n    for _ in range(n) {\n        ret = (ret * 2) % p;\n    }\n    ret\n}\n",
            "pub fn encode_shift(s: &str) -> str {\n    let mut result = \"\";\n    for ch in s {\n        result += chr(((ch.to_lower() - 97 + 5) % 26) + 97);\n    }\n    result\n}\npub fn decode_shift(s: &str) -> str {\n    let mut result = \"\";\n    for ch in s {\n        result += chr(((ch.to_lower() - 97 + 21) % 26) + 97);\n    }\n    result\n}\n",
            "pub fn remove_vowels(txt: &str) -> str {\n    let mut result = \"\";\n    for c in txt {\n        if !c.is_alpha() {\n            result += c;\n        }\n    }\n    result\n}\n",
            "pub fn below_threshold(l: &Vec<i32>, t: i32) -> bool {\n    let mut result = true;\n    for x in l {\n        if x < t {\n            result = false;\n        }\n    }\n    result\n}\n",
            "pub fn add(x: i32, y: i32) -> i32 {\n    x + y\n}\n",
            "pub fn same_chars(s0: &str, s1: &str) -> bool {\n    s0.chars().collect().iter().all(|c| s1.chars().collect().iter().contains(c))\n}\n",
            "pub fn fib(n: i32) -> i32 {\n    if n <= 1 {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "pub fn correct_bracketing(brackets: &str) -> bool {\n    let mut depth = 0;\n    for b in brackets {\n        if b == '<' {\n            depth += 1;\n        } else if b == '>' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn monotonic(l: &Vec<i32>) -> bool {\n    let mut diff = l.iter().map(|x| x - x.next().unwrap()).collect::<Vec<i32>>();\n    let mut result = diff.iter().all(|x| x <= 0) || diff.iter().all(|x| x >= 0);\n    result\n}\n",
            "pub fn common(l1: &Vec<i32>, l2: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for e in l1 {\n        if l2.contains(e) {\n            result.push(e);\n        }\n    }\n    result\n}\n",
            "pub fn largest_prime_factor(n: i32) -> i32 {\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    n\n}\n",
            "pub fn sum_to_n(n: i32) -> i32 {\n    let mut result = 0;\n    for i in 0..n + 1 {\n        result += i;\n    }\n    result\n}\n",
            "pub fn correct_bracketing(brackets: &str) -> bool {\n    let mut depth = 0;\n    for b in brackets {\n        if b == \"(\" {\n            depth += 1;\n        } elif b == \")\" {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn derivative(xs: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i] * i);\n    }\n    result\n}\n",
            "pub fn fibfib(n: i32) -> i32 {\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    while n > 2 {\n        let tmp = a;\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    c\n}\n",
            "pub fn vowels_count(s: &str) -> i32 {\n    let mut cnt = 0;\n    for i in s {\n        if i.lower() == \"a\" || i.lower() == \"e\" || i.lower() == \"i\" || i.lower() == \"o\" || i.lower() == \"u\" || i.lower() == \"y\" {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n",
            "pub fn circular_shift(x: i32, shift: i32) -> String {\n    let x_str = x.to_string();\n    if shift > x_str.len() {\n        x_str.chars().reversed().collect().into_string()\n    } else {\n        x_str.chars().skip(x_str.len() - shift).collect().into_string()\n    }\n}\n",
            "pub fn digit_sum(s: &str) -> i32 {\n    let mut result = 0;\n    for c in s.chars() {\n        if c.is_ascii() {\n            result += c.to_ascii().to_u8() - 'A' + 1;\n        }\n    }\n    result\n}\n",
            "pub fn fruit_distribution(s: &str, n: i32) -> i32 {\n    let words = s.split(\" \");\n    let apples = words[words.index(\"apples\") - 1].parse::<i32>();\n    let oranges = words[words.index(\"oranges\") - 1].parse::<i32>();\n    n - apples - oranges\n}\n",
            "pub fn pluck(arr: &Vec<i32>) -> Vec<i32> {\n    let mut evens = arr.iter().filter(|&n| n % 2 == 0).collect::<Vec<i32>>();\n    if evens.len() == 0 {\n        return vec![];\n    }\n    let min_even = evens.iter().min().unwrap();\n    let mut result = vec![min_even];\n    for e in arr {\n        if e == min_even {\n            result.push(arr.index(e));\n        }\n    }\n    result\n}\n",
            "pub fn search(lst: &Vec<i32>) -> i32 {\n    let mut freqs = HashMap::new();\n    for n in lst {\n        let mut count = freqs.get(n, 0);\n        freqs[n] = count + 1;\n    }\n    let mut good_vals = Vec::new();\n    for k, v in freqs.items() {\n        if v >= k {\n            good_vals.push(k);\n        }\n    }\n    if good_vals.len() == 0 {\n        -1\n    } else {\n        good_vals.max()\n    }\n}\n",
            "pub fn strange_sort_list(lst: &Vec<i32>) -> Vec<i32> {\n    let mut sl = lst.clone();\n    let mut result = Vec::new();\n    let mut left = 0;\n    let mut right = sl.len() - 1;\n    while left <= right {\n        result.push(sl[left]);\n        left += 1;\n        if left <= right {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    result\n}\n",
            "pub fn triangle_area(a: i32, b: i32, c: i32) -> f64 {\n    if a + b > c && a + c > b && b + c > a {\n        let s = (a + b + c) / 2.0;\n        let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n        area\n    } else {\n        -1.0\n    }\n}\n",
            "pub fn will_it_fly(q: &Vec<i32>, w: i32) -> bool {\n    let mut total = 0;\n    let mut is_palin = true;\n    for e in q {\n        total += e;\n        if total > w {\n            is_palin = false;\n            break;\n        }\n    }\n    for i in 0..q.len() - 1 {\n        if q[i] != q[q.len() - i - 1] {\n            is_palin = false;\n            break;\n        }\n    }\n    is_palin\n}\n",
            "pub fn smallest_change(arr: &Vec<i32>) -> i32 {\n    let mut ans = 0;\n    for i in 0..(arr.len() / 2) {\n        if arr[i] != arr[arr.len() - i - 1] {\n            ans += 1;\n        }\n    }\n    ans\n}\n",
            "pub fn total_match(lst1: &Vec<String>, lst2: &Vec<String>) -> Vec<String> {\n    let cnt1 = lst1.iter().map(|s| s.len()).sum();\n    let cnt2 = lst2.iter().map(|s| s.len()).sum();\n    if cnt1 <= cnt2 {\n        lst1\n    } else {\n        lst2\n    }\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        false\n    } else {\n        let mut cnt = 0;\n        for i in 2..(n as i32).into_f64().sqrt().into_f64() as i32 {\n            if is_prime(i) {\n                cnt += 1;\n            }\n        }\n        cnt == 3\n    }\n}\npub fn is_multiply_prime(a: i32) -> bool {\n    let mut cnt = 0;\n    for i in 2..a as i32 {\n        if is_prime(i) {\n            while a % i == 0 {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    cnt == 3\n}\n",
            "pub fn is_simple_power(x: i32, n: i32) -> bool {\n    if n < 2 {\n        x == n\n    } else {\n        let mut tmp = 1;\n        while tmp < x {\n            tmp *= n;\n        }\n        tmp == x\n    }\n}\n",
            "pub fn is_cube(a: i32) -> bool {\n    let a = abs(a);\n    let root = (a as f64).powf(1.0 / 3.0) as i32;\n    root * root * root == a\n}\n",
            "pub fn hex_key(num: &str) -> i32 {\n    let mut result = 0;\n    for c in num {\n        if c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' {\n            result += 1;\n        }\n    }\n    result\n}\n",
            "pub fn decimal_to_binary(dec: i32) -> String {\n    let binary = format!(\"{:b}\", dec);\n    let mut result = String::new();\n    for c in binary {\n        result.push(c);\n    }\n    result\n}\n",
            "pub fn is_happy(s: &str) -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    for i in range(s.len() - 2) {\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2] {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "pub fn numerical_letter_grade(grades: &Vec<f64>) -> Vec<String> {\n    let mut result = Vec::new();\n    for g in grades {\n        match g {\n            4.0 => result.push(\"A+\"),\n            3.7 => result.push(\"A\"),\n            3.3 => result.push(\"A-\"),\n            3.0 => result.push(\"B+\"),\n            2.7 => result.push(\"B\"),\n            2.3 => result.push(\"B-\"),\n            2.0 => result.push(\"C+\"),\n            1.7 => result.push(\"C\"),\n            1.3 => result.push(\"C-\"),\n            1.0 => result.push(\"D+\"),\n            0.7 => result.push(\"D\"),\n            0.0 => result.push(\"D-\"),\n            _ => result.push(\"E\"),\n        }\n    }\n    result\n}\n",
            "pub fn prime_length(s: &str) -> bool {\n    let length = s.len();\n    if length < 2 {\n        false\n    }\n    let mut i = 2;\n    while i <= length.sqrt().into_f32() {\n        if length % i == 0 {\n            return false;\n        }\n        i += 1;\n    }\n    true\n}\n",
            "pub fn starts_one_ends(n: i32) -> i32 {\n    if n == 1 {\n        return 1\n    } else {\n        return 2 * 9 * (10 ** (n - 2))\n    }\n}\n",
            "pub fn solve(n: i32) -> String {\n    let digits_sum = sum(n.to_str().chars().map(|c| c.to_digit()).unwrap());\n    let result = format!(\"{:b}\", digits_sum);\n    result\n}\n",
            "pub fn add(lst: &Vec<i32>) -> i32 {\n    let mut result = 0;\n    for i, x in enumerate(lst) {\n        if i % 2 == 1 && x % 2 == 0 {\n            result += x;\n        }\n    }\n    result\n}\n",
            "pub fn anti_shuffle(s: &str) -> str {\n    let words = s.split(\" \").map(|word| \"\".join(word.chars().collect().sort())).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(|word| word.to_string()).collect().iter().map(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n    def(\n   (\n    def(\n   (\n   (\n   (\n   (\n   (\n   (\n   (\n   (\n   (\n   (\n   (\n   (\n   (\n   (\n   (\n   (\n   (\n(\n   (\n   (\n   (\n   (\n   (\n   (\n   (\n   (\n   (\n   (\n(\n   (\n(\n(\n   (\n(\n(\n(\n   (\n   (\n(\n(\n(\n   (\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(\n(i(\n(i(\n(\n(\n(i\n(i\n(i\n(i\n(i\n(i\n(i\n(i(i(i(i\n(i\n(i(i\n(i(i(i\n(i\n(i\n(i(i(i(i\n(i\n(i\n(i\ni\ni\n(",
            "pub fn get_row(lst: &Vec<Vec<i32>>, x: i32) -> Vec<Vec<i32>> {\n    let mut coords = vec![];\n    for i in range(lst.len()) {\n        for j in range(lst[i].len()) {\n            if lst[i][j] == x {\n                coords.push([i, j]);\n            }\n        }\n    }\n    coords.sort(|a, b| (a[0] - b[0], -a[1] - b[1]));\n    coords\n}\n",
            "pub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    let mut arr = arr.clone();\n    let mut result = arr.clone();\n    if arr.len() == 0 {\n        return result;\n    }\n    if (arr[0] + arr[arr.len() - 1]) % 2 == 0 {\n        result.sort();\n    } else {\n        result.sort_reverse();\n    }\n    result\n}\n",
            "pub fn encrypt(s: &str) -> str {\n    let mut result = \"\";\n    for ch in s {\n        let shifted = ch.to_u8() + 4;\n        if shifted > 122 {\n            shifted -= 26;\n        }\n        result += chr(shifted);\n    }\n    result\n}\n",
            "pub fn next_smallest(lst: &Vec<i32>) -> Option<i32> {\n    let mut sl = lst.into_iter().sort().collect::<Vec<i32>>();\n    if sl.len() < 2 {\n        return None;\n    }\n    let mut result = sl[1];\n    result\n}\n",
            "pub fn is_bored(s: &str) -> i32 {\n    let sentences = s.split(\"[.!?]\\s*\");\n    let mut result = 0;\n    for sentence in sentences {\n        if sentence.len() >= 2 {\n            if sentence[0..2] == \"I \" {\n                result += 1;\n            }\n        }\n    }\n    result\n}\n",
            "pub fn any_int(x: &Box<dyn Any>, y: &Box<dyn Any>, z: &Box<dyn Any>) -> bool {\n    let x = x.unwrap();\n    let y = y.unwrap();\n    let z = z.unwrap();\n    if x.is_integer() && y.is_integer() && z.is_integer() {\n        if (x + y == z) || (x + z == y) || (y + z == x) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "pub fn encode(message: &str) -> str {\n    let mut result = \"\";\n    for ch in message {\n        if ch.is_alpha() {\n            let ch1 = ch.upper() if ch.islower() else ch.lower();\n            if ch1 == \"A\" || ch1 == \"E\" || ch1 == \"I\" || ch1 == \"O\" || ch1 == \"U\" {\n                ch1 = chr(ord(ch1) + 2);\n            }\n            result += ch1;\n        } else {\n            result += ch;\n        }\n    }\n    result\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        false\n    } else {\n        let mut i = 2;\n        let mut sqrt_n = n.sqrt();\n        while i <= sqrt_n {\n            if n % i == 0 {\n                false\n            }\n            i += 1\n        }\n        true\n    }\n}\npub fn skjkasdkd(lst: &Vec<i32>) -> i32 {\n    let mut primes = lst.iter().filter(is_prime).collect::<Vec<i32>>();\n    if primes.len() == 0 {\n        0\n    } else {\n        let mut largest = str(primes.iter().max()).chars().collect::<Vec<char>>();\n        largest.iter().map(|c| c.to_i32()).sum()\n    }\n}\n",
            "pub fn check_dict_case(d: &HashMap<String,String>) -> bool {\n    let mut d = d.clone();\n    let mut result = true;\n    while d.len() > 0 {\n        let (key, value) = d.remove_item().unwrap();\n        if key.chars().iter().any(|c| c.is_upper()) {\n            result = false;\n        }\n    }\n    result\n}\n",
            "pub fn count_up_to(n: i32) -> Vec<i32> {\n    let mut primes = vec![2];\n    for num in range(2, n) {\n        if all(num % p != 0 for p in primes) {\n            primes.push(num);\n        }\n    }\n    primes\n}\n",
            "pub fn multiply(a: i32, b: i32) -> i32 {\n    let a_abs = abs(a);\n    let b_abs = abs(b);\n    let a_mod = a_abs % 10;\n    let b_mod = b_abs % 10;\n    a_mod * b_mod\n}\n",
            "pub fn count_upper(s: &str) -> i32 {\n    let mut count = 0;\n    for i, c in s.chars() {\n        if i % 2 == 0 && c.is_ascii() && c.is_ascii_uppercase() {\n            count += 1;\n        }\n    }\n    count\n}\n",
            "pub fn closest_integer(value: &str) -> i32 {\n    let mut num = float!(value);\n    if num >= 0.0 {\n        let mut result = num + 0.5;\n        result.fract().eq(0.0)\n            ? (result.trunc() as i32)\n            : (result.ceil() as i32)\n    } else {\n        let mut result = num - 0.5;\n        result.fract().eq(0.0)\n            ? (result.trunc() as i32)\n            : (result.floor() as i32)\n    }\n}\n",
            "pub fn make_a_pile(n: i32) -> Vec<i32> {\n    let mut result = vec![];\n    for i in 0..n {\n        result.push(n + 2 * i);\n    }\n    result\n}\n",
            "pub fn words_string(s: &str) -> Vec<String> {\n    let mut result = vec![];\n    for w in s.split(\", \") {\n        if w.len() > 0 {\n            result.push(w);\n        }\n    }\n    result\n}\n",
            "pub fn choose_num(x: i32, y: i32) -> i32 {\n    if x > y {\n        return -1\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    if x != y {\n        return y - 1\n    }\n    return -1\n}\n",
            "pub fn rounded_avg(n: i32, m: i32) -> Option<String> {\n    let r_avg = (m + n) / 2.0 + 0.5;\n    let bin_str = bin(r_avg);\n    let mut result = String::new();\n    for c in bin_str {\n        if c == '1' {\n            result.push('1');\n        } else {\n            result.push('0');\n        }\n    }\n    Some(result)\n}\n",
            "pub fn all_digits_odd(s: &str) -> bool {\n    s.chars().map(|c| c.to_char()).map(|c| c.to_u8()).map(|c| c % 2 != 0).all()\n}\npub fn unique_digits(x: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for num in x {\n        if all_digits_odd(num.to_string()) {\n            result.push(num);\n        }\n    }\n    result\n}\n",
            "pub fn by_length(arr: &Vec<i32>) -> Vec<String> {\n    let mut sorted_arr = arr.into_iter().sort_by(|a| a - 1).collect::<Vec<i32>>();\n    let mut digit_names = vec![\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let mut result = vec![];\n    for x in sorted_arr {\n        result.push(digit_names[x - 1]);\n    }\n    result\n}\n",
            "pub fn f(n: i32) -> Vec<i32> {\n    let mut nums = vec!(1, 2, 3, 4, 5);\n    let mut result = vec![];\n    for i in nums {\n        if i % 2 != 0 {\n            result.push(sum(nums[:i]));\n        } else {\n            result.push(reduce(x, y, 1, |x, y| x * y));\n        }\n    }\n    result\n}\n",
            "pub fn is_palindrome(txt: &str) -> bool {\n    txt == txt.chars().reversed().collect::<Vec<char>>().join(\"\")\n}\npub fn even_odd_palindrome(n: i32) -> Vec<i32> {\n    let mut cnt = [0, 0];\n    for i in 1..n + 1 {\n        if is_palindrome(i.to_string()) {\n            cnt[i % 2] += 1;\n        }\n    }\n    cnt\n}\n",
            "pub fn digits_sum(n: i32) -> i32 {\n    let n_str = n.to_string();\n    if n >= 0 {\n        n_str.chars().map(|c| c.to_i32()).sum()\n    } else {\n        (n_str[:2].chars().map(|c| c.to_i32()).sum() * 2) + digits_sum(n)\n    }\n}\npub fn count_nums(arr: &Vec<i32>) -> i32 {\n    arr.iter().filter(|n| digits_sum(n) > 0).count()\n}\n",
            "pub fn move_one_ball(arr: &Vec<i32>) -> bool {\n    let mut arr = arr.clone();\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort();\n    for i in 0..arr.len() {\n        if arr[i:] == sorted_arr[i..arr.len()] && arr[:i] == sorted_arr[0..i] {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "pub fn can_exchange(lst1: &Vec<i32>, lst2: &Vec<i32>) -> String {\n    let odd_cnt = lst1.iter().filter(|&num| num % 2 != 0).count();\n    let even_cnt = lst2.iter().filter(|&num| num % 2 == 0).count();\n    if even_cnt >= odd_cnt {\n        \"YES\"\n    } else {\n        \"NO\"\n    }\n}\n",
            "pub fn histogram(test: &str) -> HashMap<String, i32> {\n    let mut freq = HashMap::new();\n    let words = [w for w in test.split(\" \") if len(w) > 0];\n    for w in words {\n        freq.insert(w, freq.get(w).clamp(0, 1));\n    }\n    let mut result = HashMap::new();\n    if freq.len() > 0 {\n        let max_freq = freq.values().max();\n        for k, v in freq.items() {\n            if v == max_freq {\n                result[k] = v;\n            }\n        }\n    }\n    result\n}\n",
            "pub fn reverse_delete(s: &str, c: &str) -> Vec<str> {\n    let mut s1 = s.chars().collect::<Vec<_>();\n    for c in c.chars() {\n        s1.remove(&c);\n    }\n    let mut result = Vec::new();\n    if s1.len() == 0 {\n        result.push(\"yes\");\n    } else {\n        result.push(\"no\");\n    }\n    result\n}\n",
            "pub fn odd_count(lst: &Vec<String>) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in lst {\n        let n = i.chars().map(|c| c.to_ascii().map(|d| d % 2 == 1).unwrap()).sum();\n        let rs = \"the number of odd elements in the string i of the input.\"\n        result.push(rs.replace(\"i\", str(n)));\n    }\n    result\n}\n",
            "pub fn min_sub_array_sum(nums: &Vec<i32>) -> i32 {\n    let mut cur_sum = 0;\n    let mut min_sum = 0;\n    for n in nums {\n        cur_sum = min(cur_sum + n, 0);\n        min_sum = min(cur_sum, min_sum);\n    }\n    if min_sum == 0 {\n        min_sum = min(nums);\n    }\n    min_sum\n}\n",
            "pub fn max_fill(grid: &Vec<Vec<i32>>, capacity: i32) -> i32 {\n    let mut pq = BinaryHeap::new();\n    for arr in grid {\n        for e in arr {\n            pq.push(Reverse(e));\n            if pq.len() > capacity as usize {\n                pq.pop();\n            }\n        }\n    }\n    let mut result = 0;\n    while !pq.is_empty() {\n        result += pq.pop().unwrap().0;\n    }\n    result\n}\n",
            "pub fn count_ones(num: i32) -> i32 {\n    let mut count = 0;\n    while num > 0 {\n        count += 1;\n        num = num >> 1;\n    }\n    count\n}\npub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    let mut arr = arr.clone();\n    arr.sort(|a, b| {\n        count_ones(a) < count_ones(b)\n    });\n    arr\n}\n",
            "pub fn select_words(s: &str, n: i32) -> Vec<String> {\n    let mut words = vec![];\n    let mut consonants = \"bcdfghjklmnpqrstvwxyz\";\n    for w in s.split(\" \") {\n        if w.len() > 0 {\n            if w.chars().iter().filter(|c| c.to_lowercase() in consonants).count() == n {\n                words.push(w);\n            }\n        }\n    }\n    words\n}\n",
            "pub fn get_closest_vowel(word: &str) -> String {\n    let mut vowels = \"aeiouAEIOU\".chars();\n    let mut result = \"\";\n    for i in word.chars() {\n        if i in vowels {\n            result = i.to_string();\n            break;\n        }\n    }\n    for i in word.chars() {\n        if i in vowels {\n            return result;\n        }\n    }\n    return \"\";\n}\n",
            "pub fn match_parens(lst: &Vec<String>) -> String {\n    let s1 = lst[0].chars().concat(lst[1].chars());\n    let s2 = lst[1].chars().concat(lst[0].chars());\n    let result = \"Yes\" if check(s1) || check(s2) else \"No\";\n    result\n}\n",
            "pub fn maximum(arr: &Vec<i32>, k: i32) -> Vec<i32> {\n    let mut arr = arr.sort();\n    arr.iter().skip(k).map(|x| x).collect::<Vec<i32>>()\n}\n",
            "pub fn solution(lst: &Vec<i32>) -> i32 {\n    let mut result = 0;\n    for i, x in enumerate(lst) {\n        if i % 2 == 0 && x % 2 != 0 {\n            result += x;\n        }\n    }\n    result\n}\n",
            "pub fn add_elements(arr: &Vec<i32>, k: i32) -> i32 {\n    let mut result = 0;\n    for n in arr[:k] {\n        if len(str(n)) <= 2 {\n            result += n;\n        }\n    }\n    result\n}\n",
            "pub fn get_odd_collatz(n: i32) -> Vec<i32> {\n    let mut collatz = vec![1];\n    while n != 1 {\n        if n % 2 != 0 {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = n // 2;\n        }\n    }\n    collatz.sort();\n    collatz\n}\n",
            "pub fn valid_date(date: &str) -> bool {\n    let mut m = date.chars().skip(1).take(1).unwrap();\n    let mut d = date.chars().skip(4).take(1).unwrap();\n    if m == \"-\" && d == \"-\" {\n        let mut m = date.chars().skip(1).take(2).unwrap();\n        let mut d = date.chars().skip(4).take(2).unwrap();\n        if m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31 {\n            return true;\n        }\n        if m in [4, 6, 9, 11] && d >= 1 && d <= 30 {\n            return true;\n        }\n        if m == 2 && d >= 1 && d <= 29 {\n            return true;\n        }\n        return false;\n    }\n    return false;\n}\n",
            "pub fn split_words(txt: &str) -> Vec<String> {\n    let mut result = vec![];\n    if \" \" in txt {\n        result = txt.split(\" \");\n    } else if \",\" in txt {\n        result = txt.split(\",\");\n    } else {\n        result = vec![str(txt.chars().filter(|c| c.is_lower() && (c.to_char() % 2) == 0).len())];\n    }\n    result\n}\n",
            "pub fn is_sorted(lst: &Vec<i32>) -> bool {\n    let mut freq = HashMap::new();\n    for i in lst {\n        let mut count = freq.get(i, 0);\n        freq.insert(i, count + 1);\n    }\n    let mut max_count = 0;\n    for (key, count) in freq.iter() {\n        max_count = max(max_count, count);\n    }\n    max_count <= 2\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in range(2, floor(sqrt(n)) + 1) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    return true;\n}\npub fn intersection(interval1: &Vec<i32>, interval2: &Vec<i32>) -> String {\n    let mut l = interval1[0];\n    let mut r = interval2[0];\n    let mut length = r - l;\n    if length > 0 && is_prime(length) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n",
            "pub fn prod_signs(arr: &Vec<i32>) -> Option<i32> {\n    let mut sign = -1 if arr.iter().filter(|&n| n < 0).count() % 2 == 1 else 1;\n    let mut result = 0;\n    for n in arr {\n        result += n.abs();\n    }\n    Some(sign * result)\n}\n",
            "pub fn min_path(grid: &Vec<Vec<i32>>, k: i32) -> Vec<i32> {\n    let mut visited = HashMap::new();\n    let mut result = Vec::new();\n    for i in 0..grid.len() {\n        for j in 0..grid[i].len() {\n            visited.insert(i, HashSet::new());\n        }\n    }\n    for i in 0..grid.len() {\n        for j in 0..grid[i].len() {\n            if grid[i][j] == 1 {\n                visited.get(i).push(j);\n            }\n        }\n    }\n    for i in 0..grid.len() {\n        for j in 0..grid[i].len() {\n            if i == 0 and j == 0 {\n                result.push(grid[i][j]);\n            }\n            if i == 0 {\n                let temp = visited.get(i).get(j);\n                if temp.is_some() {\n                    result.push(grid[i][j] + temp.unwrap());\n                }\n            }\n            if j == 0 {\n                let temp = visited.get(i).get(j);\n                if temp.is_some() {\n                    result.push(grid[i][j] + temp.unwrap());\n                }\n            }\n        }\n    }\n    result\n}\n",
            "pub fn tri(n: i32) -> Vec<i32> {\n    let mut seq = vec![1, 3];\n    for i in range(2, n + 1) {\n        if i % 2 == 0 {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    seq\n}\n",
            "pub fn digits(n: i32) -> i32 {\n    let mut odds = [int(d) for d in str(n) if int(d) % 2 == 1];\n    let mut result = 1;\n    for odd in odds {\n        result *= odd;\n    }\n    result\n}\n",
            "pub fn is_nested(s: &str) -> bool {\n    let mut open_idx = vec![];\n    let mut close_idx = vec![];\n    for i, ch in s.chars() {\n        if ch == '[' {\n            open_idx.push(i);\n        } elif ch == ']' {\n            close_idx.push(i);\n        }\n    }\n    let mut cnt = 0;\n    let mut i = 0;\n    let mut l = close_idx.len();\n    for idx in open_idx {\n        if i < l && idx < close_idx[i] {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    cnt >= 2\n}\n",
            "pub fn sum_squares(lst: &Vec<f64>) -> i32 {\n    let mut result = 0;\n    for n in lst {\n        result += powf64(n, 2);\n    }\n    result\n}\n",
            "pub fn check_if_last_char_is_a_letter(txt: &str) -> bool {\n    let mut last = txt.chars().skip_while(|c| !c.is_alpha()).take_while(|c| c.is_alpha()).collect::<Vec<u8>>().iter().last();\n    if let None = last {\n        false\n    } else {\n        last.len() == 1\n    }\n}\n",
            "pub fn can_arrange(arr: &Vec<i32>) -> i32 {\n    let mut idx = [i for i in range(1, arr.len()) if arr[i] < arr[i - 1]];\n    let mut result = -1;\n    if idx.len() > 0 {\n        result = idx.max();\n    }\n    result\n}\n",
            "pub fn largest_smallest_integers(lst: &Vec<i32>) -> Vec<Option<i32>> {\n    let mut neg = lst.iter().filter(|&i| i < 0).collect::<Vec<i32>>();\n    let mut pos = lst.iter().filter(|&i| i > 0).collect::<Vec<i32>>();\n    let mut max_neg = neg.iter().max().unwrap();\n    let mut min_pos = pos.iter().min().unwrap();\n    let mut result = vec![max_neg, min_pos];\n    result\n}\n",
            "pub fn compare_one(a: &Box<dyn Any>, b: &Box<dyn Any>) -> Option<f64> {\n    let a1 = a.unwrap().as_ref().map(|o| any_to_real(o)).unwrap();\n    let b1 = b.unwrap().as_ref().map(|o| any_to_real(o)).unwrap();\n    if a1 == b1 {\n        None\n    } else if a1 > b1 {\n        a1\n    } else {\n        b1\n    }\n}\n",
            "pub fn is_equal_to_sum_even(n: i32) -> bool {\n    n % 2 == 0 && n >= 8\n}\n",
            "pub fn special_factorial(n: i32) -> i32 {\n    let mut fact = 1;\n    let mut result = 1;\n    for i in 1..n + 1 {\n        fact *= i;\n        result *= fact;\n    }\n    result\n}\n",
            "pub fn fix_spaces(txt: &str) -> str {\n    let mut result = \"\";\n    for c in txt {\n        if c == ' ' && result.len() > 2 {\n            result += '-';\n        } else {\n            result += c;\n        }\n    }\n    result\n}\n",
            "pub fn file_name_check(file_name: &str) -> str {\n    let mut lst = file_name.split(\".\");\n    if lst.len() != 2 || !lst[1].eq(\"txt\") || lst[0].len() == 0 || !lst[0][0].isalpha() || lst[0].contains(\"123\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "pub fn sum_squares(lst: &Vec<i32>) -> i32 {\n    let mut result = 0;\n    for i in range(lst.len()) {\n        if i % 3 == 0 {\n            result += pow(lst[i], 2);\n        } else if i % 4 == 0 {\n            result += pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    result\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        false\n    } else {\n        let mut i = 2;\n        let mut sqrt_n = n.sqrt();\n        while i <= sqrt_n {\n            if n % i == 0 {\n                false\n            }\n            i += 1\n        }\n        true\n    }\n}\npub fn words_in_sentence(sentence: &str) -> str {\n    let mut words = sentence.split(\" \");\n    let mut result = \"\";\n    for w in words {\n        if is_prime(w.len()) {\n            result += w + \" \"\n        }\n    }\n    result.strip()\n}\n",
            "pub fn simplify(x: &str, n: &str) -> bool {\n    let xs = x.split(\"/\").collect().iter().map(|s| s.parse::<i32>().unwrap()).collect::<Vec<i32>>();\n    let ns = n.split(\"/\").collect().iter().map(|s| s.parse::<i32>().unwrap()).collect::<Vec<i32>>();\n    let num = xs[0] * ns[0];\n    let den = xs[1] * ns[1];\n    num % den == 0\n}\n",
            "pub fn digits_sum(n: i32) -> i32 {\n    let n_str = n.to_string();\n    if n >= 0 {\n        n_str.chars().map(|c| c.to_i32()).sum()\n    } else {\n        (n_str[:2].chars().map(|c| c.to_i32()).sum() * 2) + digits_sum(n)\n    }\n}\npub fn order_by_points(nums: &Vec<i32>) -> Vec<i32> {\n    nums.sort_by(|a, b| digits_sum(a) - digits_sum(b))\n}\n",
            "pub fn special_filter(nums: &Vec<i32>) -> i32 {\n    let odds = \"13579\";\n    let mut result = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1 && str(n)[0] in odds {\n            result += 1;\n        }\n    }\n    result\n}\n",
            "pub fn get_max_triples(n: i32) -> i32 {\n    let mut c = [0, 0, 0];\n    for i in 1..n + 1 {\n        let a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    let mut result = c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6;\n    result\n}\n",
            "pub fn bf(planet1: &str, planet2: &str) -> Vec<str> {\n    let mut names = vec![\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let mut l = names.index(planet1);\n    let mut r = names.index(planet2);\n    if l > r {\n        l, r = r, l\n    }\n    if l == r {\n        return vec![];\n    }\n    return names[l + 1..r]\n}\n",
            "pub fn sorted_list_sum(lst: &Vec<String>) -> Vec<String> {\n    let mut result = lst.iter().filter(|s| s.len() % 2 == 0).collect::<Vec<String>>();\n    result.sort_by(|a, b| (a.len(), a.as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref().as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as_ref.as.as_ref.as_ref.as.as_ref.as.as_ref.as_ref.as.as.as.as.as.as.as.as.as.as.as.as.as.as.as.as.as.as.as.as.as.as.",
            "pub fn x_or_y(n: i32, x: i32, y: i32) -> i32 {\n    if n < 2 { y } else {\n        let mut i = 2;\n        while i * i <= n {\n            if n % i == 0 {\n                return y;\n            }\n            i += 1;\n        }\n        x\n    }\n}\n",
            "pub fn double_the_difference(lst: &Vec<f64>) -> i32 {\n    let mut result = 0;\n    for n in lst {\n        if n >= 0.0 && n % 2.0 == 1.0 {\n            result += n * n;\n        }\n    }\n    result\n}\n",
            "pub fn compare(game: &Vec<i32>, guess: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for (x, y) in game.iter().zip(guess.iter()) {\n        result.push(x - y);\n    }\n    result\n}\n",
            "pub fn strongest_extension(class_name: &str, extensions: &Vec<&str>) -> String {\n    let mut max_s = -std::f32_t::infinity();\n    let mut max_ext = \"\";\n    for ext in extensions {\n        let upper = ext.chars().filter(|c| c.isupper()).count();\n        let lower = ext.chars().filter(|c| c.islower()).count();\n        let s = upper - lower;\n        if s > max_s {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    format!(\"{}.{}\", class_name, max_ext)\n}\n",
            "pub fn cycpattern_check(a: &str, b: &str) -> bool {\n    let a_len = a.len();\n    let b_len = b.len();\n    if a_len < b_len {\n        return false;\n    }\n    for i in range(b_len) {\n        if b[i..].to_string() + b[..i].to_string() in a {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "pub fn even_odd_count(num: i32) -> Vec<i32> {\n    let ds = abs(num).to_string();\n    let even = ds.chars().filter(|c| c.is_digit() && c.to_char().is_ascii()).map(|c| c.to_char().to_i32()).filter(|c| c % 2 == 0).count();\n    let odd = ds.chars().filter(|c| c.is_digit() && c.to_char().is_ascii()).map(|c| c.to_char().to_i32()).filter(|c| c % 2 != 0).count();\n    vec![even, ds.chars().filter(|c| c.is_digit() && c.to_char().is_ascii()).map(|c| c.to_char().to_i32()).count() - even]\n}\n",
            "pub fn int_to_mini_roman(num: i32) -> String {\n    let mut res = \"\";\n    let mut num = num as i32;\n    let mut values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let mut numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    for i in 0..values.len() - 1 {\n        while num >= values[i] {\n            res += numerals[i];\n            num -= values[i];\n        }\n    }\n    res\n}\n",
            "pub fn right_angle_triangle(a: i32, b: i32, c: i32) -> bool {\n    let s = [a, b, c].sort();\n    s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "pub fn find_max(words: &Vec<String>) -> String {\n    let mut max_cnt = 0;\n    let mut max_w = \"\";\n    for w in words {\n        let cnt = w.chars().collect().iter().count();\n        if cnt > max_cnt {\n            max_cnt = cnt;\n            max_w = w;\n        }\n        elif cnt == max_cnt {\n            max_w = min(max_w, w);\n        }\n    }\n    max_w\n}\n",
            "pub fn eat(num: i32, need: i32, remaining: i32) -> Vec<i32> {\n    if need <= remaining {\n        return [num + need, remaining - need]\n    } else {\n        return [num + remaining, 0]\n    }\n}\n",
            "pub fn do_algebra(operators: &Vec<String>, operands: &Vec<i32>) -> i32 {\n    let mut ops = operators.clone();\n    let mut nums = operands.clone();\n    let mut i = ops.len() - 1;\n    while i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n        }\n        i -= 1;\n    }\n    let mut i = 0;\n    while i < ops.len() {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        }\n        elif ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    let mut i = 0;\n    while i < ops.len() {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        }\n        elif ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "pub fn solve(s: &str) -> str {\n    let mut result = \"\";\n    for ch in s {\n        if ch.is_alpha() {\n            if ch.is_upper() {\n                result += ch.lower();\n            } else {\n                result += ch.upper();\n            }\n        } else {\n            result += ch;\n        }\n    }\n    result\n}\n",
            "pub fn string_to_md5(txt: &str) -> Option<String> {\n    let md5_hash = md5::new();\n    let txt_bytes = txt.encode();\n    md5_hash.update(txt_bytes);\n    let md5_encoded = md5_hash.hexdigest();\n    Some(md5_encoded)\n}\n",
            "pub fn generate_integers(a: i32, b: i32) -> Vec<i32> {\n    let mut lower = max(2, min(a, b));\n    let mut upper = min(8, max(a, b));\n    let mut result = vec![];\n    for i in lower..upper {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n"
        ],
        "scala": [
            "def hasCloseElements(numbers: Seq[Double], threshold: Double): Boolean = {\n    val pq = mutable.PriorityQueue.empty[Double].reverse\n    for (e <- numbers) {\n        pq.addOne(e)\n        if (pq.size > 1 && pq.head - pq.last < threshold) {\n            return true\n        }\n    }\n    false\n}\n",
            "def separateParenGroups(parenString: String): Seq[String] = {\n    val groups = mutable.ListBuffer[String]()\n    var stk = mutable.ListBuffer[String]()\n    var currentGroup = \"\"\n    var parens = parenString.replace(\" \", \"\")\n    for (ch <- parens) {\n        if (ch == \"(\") {\n            stk.addOne(ch)\n            currentGroup += ch\n        } else if (ch == \")\") {\n            stk.removeOne()\n            currentGroup += ch\n            if (stk.isEmpty) {\n                groups.addOne(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    groups.toList\n}\n",
            "def truncateNumber(num: Double): Double = {\n    val result = num - math.floor(num)\n    result\n}\n",
            "def belowZero(operations: Seq[Int]): Boolean = {\n    var balance = 0\n    for (op <- operations) {\n        balance += op\n        if (balance < 0) return true\n    }\n    false\n}\n",
            "def meanAbsoluteDeviation(numbers: Seq[Double]): Double = {\n    val mean = numbers.sum / numbers.size\n    val deviation = numbers.map(x => abs(x - mean)).sum\n    deviation / numbers.size\n}\n",
            "def intersperse(numbers: Seq[Int], delimiter: Int): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    for (i <- 0 until numbers.size) {\n        if (i != 0) {\n            result.addOne(delimiter)\n        }\n        result.addOne(numbers(i))\n    }\n    result.toList\n}\n",
            "def parseNestedParens(parenString: String): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    var parenGroups = parenString.split(\" \")\n    for (group <- parenGroups) {\n        var maxDepth = 0\n        var depth = 0\n        for (ch <- group) {\n            if (ch == \"(\") depth += 1\n            if (ch == \")\") depth -= 1\n            maxDepth = max(maxDepth, depth)\n        }\n        result += maxDepth\n    }\n    result.toList\n}\n",
            "def filterBySubstring(strs: Seq[String], substring: String): Seq[String] = {\n    val result = mutable.ListBuffer[String]()\n    for (s <- strs) {\n        if (s.contains(substring)) result += s\n    }\n    result.toList\n}\n",
            "def sumProduct(numbers: Seq[Int]): Seq[Int] = {\n    val nSum = numbers.sum\n    val nProduct = numbers.foldLeft(1)((acc, x) => acc * x)\n    Seq(nSum, nProduct)\n}\n",
            "def rollingMax(numbers: Seq[Int]): Seq[Int] = {\n    var maxSoFar = -math.inf\n    var result = mutable.ListBuffer[Int]()\n    for (num <- numbers) {\n        maxSoFar = Math.max(maxSoFar, num)\n        result += maxSoFar\n    }\n    result.toList\n}\n",
            "def makePalindrome(s: String): String = {\n    val pq = mutable.PriorityQueue.empty[String].reverse\n    for (e <- s) {\n        pq.addOne(e)\n        if (pq.size > s.length) {\n            pq.dequeue()\n        }\n    }\n    val result = mutable.ListBuffer[String]()\n    while (!pq.isEmpty) {\n        result.addOne(pq.dequeue())\n    }\n    result.toList.mkString\n}\n",
            "def stringXor(a: String, b: String): String = {\n    val result = \"\"\n    for (i <- 0 until a.length) {\n        val x = a.charAt(i)\n        val y = b.charAt(i)\n        result += (x ^ y).toString\n    }\n    result\n}\n",
            "def longest(strs: Seq[String]): Option[String] = {\n    val longest_s = strs(0)\n    for (s <- strs) {\n        if (s.length > longest_s.length) {\n            longest_s = s\n        }\n    }\n    Some(longest_s)\n}\n",
            "def greatestCommonDivisor(a: Int, b: Int): Int = {\n    if (b == 0) a else greatestCommonDivisor(b, a % b)\n}\n",
            "def allPrefixes(s: String): Seq[String] = {\n    val prefixes = mutable.ListBuffer[String]()\n    for (i <- 0 until s.length) {\n        prefixes.addOne(s.substring(0, i + 1))\n    }\n    prefixes.toList\n}\n",
            "def stringSequence(n: Int): String = {\n    val result = \"\"\n    for (i <- 1 to n + 1) {\n        result += i.toString\n        if (i < n) result += \" \"\n    }\n    result\n}\n",
            "def countDistinctCharacters(s: String): Int = {\n    val result = 0\n    for (c <- s.lower()) {\n        if (result.contains(c)) continue\n        result += 1\n    }\n    result\n}\n",
            "def parseMusic(musicString: String): Seq[Int] = {\n    val durations = mutable.HashMap[String, Int]()\n    durations += \"o\" -> 4\n    durations += \"o|\" -> 2\n    durations += \".\" | \"|\" -> 1\n    val notes = musicString.split()\n    notes.map(durations.getOrElse(_, 0))\n}\n",
            "def howManyTimes(s: String, substring: String): Int = {\n    var times = 0\n    for (i <- 0 until s.length - substring.length + 1) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1\n        }\n    }\n    times\n}\n",
            "def sortNumbers(numbers: String): String = {\n    val numDict = mutable.HashMap[String, Int]()\n    val numList = numbers.split(\" \").filter(x => x in numDict)\n    numList.sort(x => numDict(x))\n    numList.mkString(\" \")\n}\n",
            "def findClosestElements(numbers: Seq[Double]): Seq[Double] = {\n    val sortedNumbers = numbers.sortBy(x => x)\n    var minDiff = Double.Infinity\n    var closestPair = mutable.ListBuffer[Double]()\n    for (i <- 1 until sortedNumbers.size) {\n        val diff = sortedNumbers(i) - sortedNumbers(i - 1)\n        if (diff < minDiff) {\n            minDiff = diff\n            closestPair = mutable.ListBuffer(sortedNumbers(i - 1), sortedNumbers(i))\n        }\n    }\n    closestPair.toList\n}\n",
            "def rescaleToUnit(numbers: Seq[Double]): Seq[Double] = {\n    val minNum = numbers.min\n    val maxNum = numbers.max\n    if (minNum == maxNum) {\n        numbers.map(x => 0.0)\n    } else {\n        numbers.map(x => (x - minNum) / (maxNum - minNum))\n    }\n}\n",
            "def filterIntegers(values: Seq[Any]): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    for (e <- values) {\n        if (e.isInstanceOf[Int]) result.addOne(e.asInstanceOf[Int])\n    }\n    result.toList\n}\n",
            "def strLength(s: String): Int = {\n    s.length\n}\n",
            "def largestDivisor(n: Int): Int = {\n    var result = 1\n    var i = 2\n    while (i <= n) {\n        if (n % i == 0) {\n            result = n // i\n        }\n        i += 1\n    }\n    result\n}\n",
            "def factorize(n: Int): Seq[Int] = {\n    var factors = mutable.ListBuffer[Int]()\n    var divisor = 2\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors += divisor\n            n //= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    factors.toList\n}\n",
            "def removeDuplicates(numbers: Seq[Int]): Seq[Int] = {\n    val counts = mutable.HashMap[Int, Int]()\n    for (num <- numbers) {\n        counts(num) = counts.getOrElse(num, 0) + 1\n    }\n    val res = mutable.ListBuffer[Int]()\n    for (num <- numbers) {\n        if (counts(num) == 1) {\n            res.addOne(num)\n        }\n    }\n    res.toList\n}\n",
            "def flipCase(s: String): String = {\n    val flipped = s.map(c => if (c.isLower) c.toUpper else if (c.isUpper) c.toLower else c)\n    flipped.mkString\n}\n",
            "def concatenate(strs: Seq[String]): String = {\n    val result = \"\"\n    for (s <- strs) {\n        result += s\n    }\n    result\n}\n",
            "def filterByPrefix(strs: Seq[String], prefixStr: String): Seq[String] = {\n    val result = mutable.ListBuffer[String]()\n    for (s <- strs) {\n        if (s.startsWith(prefixStr)) {\n            result.addOne(s)\n        }\n    }\n    result.toList\n}\n",
            "def getPositive(l: Seq[Int]): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    for (e <- l) {\n        if (e > 0) {\n            result += e\n        }\n    }\n    result.toList\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) false\n    else {\n        val sqrtN = scala.math.sqrt(n)\n        for (i <- 2 until sqrtN + 1) {\n            if (n % i == 0) return false\n        }\n        return true\n    }\n}\n",
            "def poly(xs: Seq[Int], x: Double): Double = {\n    val res = 0.0\n    for (i <- xs.indices) {\n        res += xs(i) * x**i\n    }\n    res\n}\ndef findZero(xs: Seq[Int]): Double = {\n    var x1 = 1.0\n    var x2 = -1.0\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2\n        x2 *= 2\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        val mid = (x1 + x2) / 2\n        if (poly(xs, mid) == 0) {\n            return mid\n        }\n        else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid\n        }\n        else {\n            x1 = mid\n        }\n    }\n    (x1 + x2) / 2\n}\n",
            "def sortThird(l: Seq[Int]): Seq[Int] = {\n    val sortedThird = l(::3).sort\n    val result = mutable.ListBuffer[Int]()\n    for (i <- 0 until l.size) {\n        if (i % 3 == 0) {\n            result.addOne(sortedThird(i // 3))\n        } else {\n            result.addOne(l(i))\n        }\n    }\n    result.toList\n}\n",
            "def listUnique(l: Seq[Int]): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    for (e <- l) {\n        if (!result.contains(e)) {\n            result += e\n        }\n    }\n    result.toList\n}\n",
            "def maxElement(l: Seq[Int]): Int = {\n    val result = l.max\n    result\n}\n",
            "def fizzBuzz(n: Int): Int = {\n    var cnt = 0\n    for (i <- 0 until n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString.count(\"7\")\n        }\n    }\n    cnt\n}\n",
            "def sortEven(l: Seq[Int]): Seq[Int] = {\n    val sortedEven = mutable.ListBuffer[Int]()\n    for (e <- l[::2]) {\n        sortedEven.addOne(e)\n    }\n    val result = mutable.ListBuffer[Int]()\n    for (i <- 0 until l.size) {\n        if (i % 2 == 0) {\n            result.addOne(sortedEven.head)\n            sortedEven.removeOne()\n        } else {\n            result.addOne(l[i])\n        }\n    }\n    result.toList\n}\n",
            "def encodeCyclic(s: String): String = {\n    val result = mutable.ListBuffer[String]()\n    for (i <- 0 until s.length by 3) {\n        if (i + 3 > s.length) {\n            result += s[i:]\n        } else {\n            result += s[i+1:i+3]\n            result += s[i]\n        }\n    }\n    result.mkString\n}\ndef decodeCyclic(s: String): String = {\n    encodeCyclic(encodeCyclic(s))\n}\n",
            "def primeFib(n: Int): Int = {\n    var f = Array(0, 1)\n    var cnt = 0\n    while (cnt < n) {\n        f = Array(f(1), f(0) + f(1))\n        if (isPrime(f(1))) cnt += 1\n    }\n    f(1)\n}\n",
            "def triplesSumToZero(l: Seq[Int]): Boolean = {\n    val pq = mutable.PriorityQueue.empty[Int].reverse\n    for (e <- l) {\n        pq.addOne(e)\n        if (pq.size > 2) {\n            pq.dequeue()\n        }\n    }\n    val result = mutable.ListBuffer[Int]()\n    while (!pq.isEmpty) {\n        result.addOne(pq.dequeue())\n    }\n    result.toList\n}\n",
            "def carRaceCollision(n: Int): Int = {\n    n * n\n}\n",
            "def incrList(l: Seq[Int]): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    for (i <- l) {\n        result += i + 1\n    }\n    result.toList\n}\n",
            "def pairsSumToZero(l: Seq[Int]): Boolean = {\n    val seen = mutable.HashSet[Int]()\n    for (num <- l) {\n        if (-num in seen) return true\n        seen.add(num)\n    }\n    false\n}\n",
            "def changeBase(x: Int, bas: Int): String = {\n    val digits = mutable.ListBuffer[String]()\n    while (x > 0) {\n        digits.addOne(x % bas.toString)\n        x //= bas\n    }\n    digits.reverse.mkString\n}\n",
            "def triangleArea(a: Int, h: Int): Double = {\n    val result = a * h / 2.0\n    result\n}\n",
            "def fib4(n: Int): Int = {\n    val fib = Array(0, 0, 2, 0)\n    for (i <- 4 to n + 1 by 1) {\n        fib(i % 4) = fib.sum\n    }\n    fib(n % 4)\n}\n",
            "def median(l: Seq[Double]): Double = {\n    val sl = l.sorted\n    if (l.size % 2 != 0) {\n        sl(l.size / 2)\n    } else {\n        (sl(l.size / 2) + sl(l.size / 2 - 1)) / 2\n    }\n}\n",
            "def isPalindrome(txt: String): Boolean = {\n    val rev = txt.reverse\n    txt == rev\n}\n",
            "def modp(n: Int, p: Int): Int = {\n    val ret = 1\n    for (i <- 1 to n) {\n        ret = (ret * 2) % p\n    }\n    ret\n}\n",
            "def encodeShift(s: String): String = {\n    val result = mutable.ListBuffer[Char]()\n    for (ch <- s) {\n        result += chr(((ord(ch) - 97 + 5) % 26) + 97)\n    }\n    result.toString\n}\ndef decodeShift(s: String): String = {\n    val result = mutable.ListBuffer[Char]()\n    for (ch <- s) {\n        result += chr(((ord(ch) - 97 + 21) % 26) + 97)\n    }\n    result.toString\n}\n",
            "def removeVowels(txt: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    val result = \"\"\n    for (char in txt) {\n        if (char in vowels) {\n            result += char\n        }\n    }\n    result\n}\n",
            "def belowThreshold(l: Seq[Int], t: Int): Boolean = {\n    val result = mutable.ListBuffer[Boolean]()\n    for (e <- l) {\n        result += e < t\n    }\n    result.toList.reduce(_ && _)\n}\n",
            "def add(x: Int, y: Int): Int = {\n    x + y\n}\n",
            "def sameChars(s0: String, s1: String): Boolean = {\n    val s0Set = s0.toSet\n    val s1Set = s1.toSet\n    s0Set == s1Set\n}\n",
            "def fib(n: Int): Int = {\n    if (n <= 1) n else fib(n - 1) + fib(n - 2)\n}\n",
            "def correctBracketing(brackets: String): Boolean = {\n    val depth = 0\n    for (b <- brackets) {\n        if (b == '<') depth += 1\n        else if (b == '>') depth -= 1\n        if (depth < 0) return false\n    }\n    depth == 0\n}\n",
            "def monotonic(l: Seq[Int]): Boolean = {\n    val diff = mutable.ListBuffer[Int]()\n    for (x, y <- l.zip(l.tail)) {\n        diff += y - x\n    }\n    diff.toList.forAll(_ <= 0) || diff.toList.forAll(_ >= 0)\n}\n",
            "def common(l1: Seq[Int], l2: Seq[Int]): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    for (e1 <- l1) {\n        for (e2 <- l2) {\n            if (e1 == e2) {\n                result.addOne(e1)\n            }\n        }\n    }\n    result.toList\n}\n",
            "def largestPrimeFactor(n: Int): Int = {\n    var i = 2\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n //= i\n        } else {\n            i += 1\n        }\n    }\n    n\n}\n",
            "def sumToN(n: Int): Int = {\n    var result = 0\n    for (i <- 1 to n) {\n        result += i\n    }\n    result\n}\n",
            "def correctBracketing(brackets: String): Boolean = {\n    val depth = 0\n    for (b <- brackets) {\n        if (b == '(') depth += 1\n        else if (b == ')') depth -= 1\n        if (depth < 0) return false\n    }\n    depth == 0\n}\n",
            "def derivative(xs: Seq[Int]): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    for (i <- 1 to xs.size) {\n        result.addOne(xs(i) * i)\n    }\n    result.toList\n}\n",
            "def fibfib(n: Int): Int = {\n    val a = 0\n    val b = 0\n    val c = 1\n    while (n > 2) {\n        a = b\n        b = c\n        c = a + b + c\n        n -= 1\n    }\n    c\n}\n",
            "def vowelsCount(s: String): Int = {\n    val vowels = \"aeiou\"\n    var cnt = 0\n    for (i <- 0 until s.length) {\n        if (s(i).toLowerCase in vowels || (i == s.length - 1 && s(i).toLowerCase == \"y\")) {\n            cnt += 1\n        }\n    }\n    cnt\n}\n",
            "def circularShift(x: Int, shift: Int): String = {\n    val x_str = x.toString\n    if (shift > x_str.length) {\n        x_str.reverse\n    } else {\n        x_str.substring(x_str.length - shift, x_str.length) + x_str.substring(0, x_str.length - shift)\n    }\n}\n",
            "def digitSum(s: String): Int = {\n    val result = 0\n    for (c <- s) {\n        if (c.isUpper) result += ord(c)\n    }\n    result\n}\n",
            "def fruitDistribution(s: String, n: Int): Int = {\n    val words = s.split(\" \")\n    val apples = words(words.indexOf(\"apples\") - 1).toInt\n    val oranges = words(words.indexOf(\"oranges\") - 1).toInt\n    n - apples - oranges\n}\n",
            "def pluck(arr: Seq[Int]): Seq[Int] = {\n    val evens = arr.filter(n => n % 2 == 0)\n    if (evens.isEmpty) {\n        Seq[Int]()\n    }\n    val minEven = evens.min\n    val index = arr.indexOf(minEven)\n    Seq(minEven, index)\n}\n",
            "def search(lst: Seq[Int]): Int = {\n    val freqs = mutable.HashMap[Int, Int]()\n    for (n <- lst) {\n        freqs.putOrElse(n, 0)\n        freqs(n) += 1\n    }\n    val good_vals = freqs.filter(_._2 >= _.key).keys\n    good_vals.headOrElse(-1)\n}\n",
            "def strangeSortList(lst: Seq[Int]): Seq[Int] = {\n    val sl = lst.sorted\n    val result = mutable.ListBuffer[Int]()\n    var left = 0\n    var right = sl.size - 1\n    while (left <= right) {\n        result += sl(left)\n        left += 1\n        if (left <= right) {\n            result += sl(right)\n            right -= 1\n        }\n    }\n    result.toList\n}\n",
            "def triangleArea(a: Int, b: Int, c: Int): Double = {\n    if (a + b > c && a + c > b && b + c > a) {\n        val s = (a + b + c) / 2.0\n        sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        -1.0\n    }\n}\n",
            "def willItFly(q: Seq[Int], w: Int): Boolean = {\n    val isPalin = q.map(e => e == q.lastIndexOf(e)).reduce(_ && _)\n    val total = q.sum\n    isPalin && total <= w\n}\n",
            "def smallestChange(arr: Seq[Int]): Int = {\n    var ans = 0\n    for (i <- 0 until arr.size / 2) {\n        if (arr(i) != arr(arr.size - i - 1)) ans += 1\n    }\n    ans\n}\n",
            "def totalMatch(lst1: Seq[String], lst2: Seq[String]): Seq[String] = {\n    val cnt1 = lst1.map(s => s.length).sum\n    val cnt2 = lst2.map(s => s.length).sum\n    if (cnt1 <= cnt2) lst1 else lst2\n}\n",
            "def isMultiplyPrime(a: Int): Boolean = {\n    if (a < 2) false\n    var cnt = 0\n    for (i <- 2 until sqrt(a)) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "def isSimplePower(x: Int, n: Int): Boolean = {\n    val tmp = 1\n    while (tmp < x) {\n        tmp *= n\n    }\n    tmp == x\n}\n",
            "def isCube(a: Int): Boolean = {\n    val root = math.pow(a, 1.0 / 3.0)\n    root * root * root == a\n}\n",
            "def hexKey(num: String): Int = {\n    val result = 0\n    for (x <- num) {\n        if (x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D') result += 1\n    }\n    result\n}\n",
            "def decimalToBinary(dec: Int): String = {\n    val binary = bin(dec).dropFirst(2)\n    f\"db{binary}db\"\n}\n",
            "def isHappy(s: String): Boolean = {\n    val pq = mutable.PriorityQueue.empty[Int].reverse\n    for (i <- 0 until s.length - 2) {\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n            return false\n        }\n    }\n    for (i <- 0 until s.length - 2) {\n        pq.addOne(s.charAt(i) * 10 + s.charAt(i + 1))\n        if (pq.size > 2) {\n            pq.dequeue()\n        }\n    }\n    val result = mutable.ListBuffer[Int]()\n    while (!pq.isEmpty) {\n        result.addOne(pq.dequeue())\n    }\n    result.toList.contains(1)\n}\n",
            "def numericalLetterGrade(grades: Seq[Double]): Seq[String] = {\n    val result = mutable.ListBuffer[String]()\n    for (g <- grades) {\n        if (g == 4.0) result += \"A+\"\n        else if (g > 3.7) result += \"A\"\n        else if (g > 3.3) result += \"A-\"\n        else if (g > 3.0) result += \"B+\"\n        else if (g > 2.7) result += \"B\"\n        else if (g > 2.3) result += \"B-\"\n        else if (g > 2.0) result += \"C+\"\n        else if (g > 1.7) result += \"C\"\n        else if (g > 1.3) result += \"C-\"\n        else if (g > 1.0) result += \"D+\"\n        else if (g > 0.7) result += \"D\"\n        else if (g > 0.0) result += \"D-\"\n        else result += \"E\"\n    }\n    result.toList\n}\n",
            "def primeLength(s: String): Boolean = {\n    val length = s.length\n    if (length < 2) return false\n    for (i <- 2 until math.floor(math.sqrt(length)) + 1) {\n        if (length % i == 0) return false\n    }\n    return true\n}\n",
            "def startsOneEnds(n: Int): Int = {\n    if (n == 1) 1 else 2 * 9 * (10 ^ (n - 2))\n}\n",
            "def solve(n: Int): String = {\n    val digitsSum = (n.toString.map(c => c.toInt).sum)\n    val result = bin(digitsSum)\n    result.substring(2)\n}\n",
            "def add(lst: Seq[Int]): Int = {\n    val result = 0\n    for (i <- 0 until lst.size) {\n        if (i % 2 == 1 && lst(i) % 2 == 0) result += lst(i)\n    }\n    result\n}\n",
            "def antiShuffle(s: String): String = {\n    val words = s.split(\" \")\n    val result = mutable.ListBuffer[String]()\n    for (word <- words) {\n        result.addOne(\"\".join(sorted(word)))\n    }\n    result.toString\n}\n",
            "def getRow(lst: Seq[Seq[Int]], x: Int): Seq[Seq[Int]] = {\n    val coords = mutable.ListBuffer[(Int, Int)]()\n    for (i <- 0 until lst.length) {\n        for (j <- 0 until lst(i).length) {\n            if (lst(i)(j) == x) {\n                coords += (i, j)\n            }\n        }\n    }\n    coords.sortBy(a => (a._1, -a._2))\n    coords.toList\n}\n",
            "def sortArray(arr: Seq[Int]): Seq[Int] = {\n    if (arr.size == 0) {\n        arr\n    } else {\n        val sorted = mutable.ListBuffer[Int]()\n        val odd = mutable.ListBuffer[Int]()\n        val even = mutable.ListBuffer[Int]()\n        for (e <- arr) {\n            if (e % 2 == 0) {\n                even.addOne(e)\n            } else {\n                odd.addOne(e)\n            }\n        }\n        sorted = odd.sortBy(_: Int)().toList\n        sorted.reverse\n        sorted ++ even.toList\n    }\n}\n",
            "def encrypt(s: String): String = {\n    val result = Array(s.length)\n    for (i <- 0 until s.length) {\n        val shifted = ord(s(i)) + 4\n        if (shifted > ord('z')) shifted -= 26\n        result(i) = chr(shifted)\n    }\n    result.mkString\n}\n",
            "def nextSmallest(lst: Seq[Int]): Option[Int] = {\n    val sl = lst.toList.sortBy(_).toSeq\n    if (sl.size < 2) {\n        None\n    }\n    val result = sl(1)\n    @tailrec\n    def loop(): Option[Int] = {\n        if (sl.size < 2) {\n            None\n        }\n        val result = sl(1)\n        loop()\n    }\n    loop()\n}\n",
            "def isBored(s: String): Int = {\n    val sentences = s.split(\"[.!?]\\s*\")\n    val result = mutable.ListBuffer[Int]()\n    @tailrec\n    def loop(): Unit = {\n        val sentence = sentences.head\n        sentences.tail.map(s => sentence.head.startsWith(\"I \"))\n        if (sentence.head.startsWith(\"I \")) result += 1\n        sentences.tail.map(s => sentence.head.startsWith(\"I \"))\n        loop()\n    }\n    loop()\n    result.toList\n}\n",
            "def anyInt(x: Any, y: Any, z: Any): Boolean = {\n    if (x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int]) {\n        val xInt = x.asInstanceOf[Int]\n        val yInt = y.asInstanceOf[Int]\n        val zInt = z.asInstanceOf[Int]\n        if (xInt + yInt == zInt) || (xInt + zInt == yInt) || (yInt + zInt == xInt) {\n            return true\n        }\n    }\n    false\n}\n",
            "def encode(message: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    val result = mutable.ListBuffer[String]()\n    for (ch <- message) {\n        if (ch.isLetter) {\n            val ch1 = ch.toUpperCase if ch.toLowerCase else ch.toLowerCase\n            if (ch1 in vowels) {\n                ch1 = ch1.toCharArray.map(c => c.toInt + 2).map(c => c.toChar).toString\n            }\n            result += ch1\n        } else {\n            result += ch\n        }\n    }\n    result.mkString\n}\n",
            "def isPrime(n: Int) = {\n    if (n < 2) false\n    for (i <- 2 until sqrt(n).toInt) {\n        if (n % i == 0) return false\n    }\n    return true\n}\ndef skjkasdkd(lst: Seq[Int]): Int = {\n    var primes = mutable.ListBuffer[Int]()\n    for (n <- lst) {\n        if (isPrime(n)) primes += n\n    }\n    if (primes.size == 0) 0\n    var largest = primes.sorted.last.toString\n    primes.foreach(n => largest += n.toString)\n    largest.toInt\n}\n",
            "def checkDictCase(d: Map[String, String]): Boolean = {\n    val keys = d.keys\n    if (keys.isEmpty) {\n        false\n    }\n    val isLower = keys.map(c => c.isLower)\n    val isUpper = keys.map(c => c.isUpper)\n    val isLowerOrUpper = isLower.union(isUpper)\n    isLowerOrUpper.forAll(_ == true)\n}\n",
            "def countUpTo(n: Int): Seq[Int] = {\n    var primes = mutable.ListBuffer[Int]()\n    for (num <- 2 until n) {\n        if (all(num % p != 0 for p in primes)) {\n            primes += num\n        }\n    }\n    primes.toList\n}\n",
            "def multiply(a: Int, b: Int): Int = {\n    val a = a * (a < 0)\n    val b = b * (b < 0)\n    (a % 10) * (b % 10)\n}\n",
            "def countUpper(s: String): Int = {\n    val vowels = \"AEIOU\"\n    val result = 0\n    for (i <- 0 until s.length) {\n        if (i % 2 == 0 && s(i) in vowels) result += 1\n    }\n    result\n}\n",
            "def closestInteger(value: String): Int = {\n    val num = value.toDouble\n    if (num >= 0) {\n        num + 0.5\n    } else {\n        num - 0.5\n    }\n}\n",
            "def makeAPile(n: Int): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    for (i <- 0 until n) {\n        result += n + 2 * i\n    }\n    result.toList\n}\n",
            "def wordsString(s: String): Seq[String] = {\n    val result = mutable.ListBuffer[String]()\n    val regex = s.replaceAll(\"[, ]\", \"\")\n    for (w <- regex.split(\"\")) {\n        if (w.length > 0) result.addOne(w)\n    }\n    result.toList\n}\n",
            "def chooseNum(x: Int, y: Int): Int = {\n    if (x > y) -1\n    if (y % 2 == 0) y\n    if (x != y) y - 1\n    else -1\n}\n",
            "def roundedAvg(n: Int, m: Int): Option[String] = {\n    val rAvg = (m + n) / 2.0 + 0.5\n    val result = mutable.ListBuffer[Int]()\n    @tailrec\n    def loop(): Option[String] = {\n        if (n > m) {\n            None\n        } else {\n            val rAvg = (m + n) / 2.0 + 0.5\n            result += rAvg\n            n = rAvg\n            m = rAvg\n            loop()\n        }\n    }\n    loop()\n    result.toList.head.toString\n}\n",
            "def uniqueDigits(x: Seq[Int]): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    for (num <- x) {\n        if (allDigitsOdd(num.toString)) {\n            result += num\n        }\n    }\n    result.toList\n}\n",
            "def byLength(arr: Seq[Int]): Seq[String] = {\n    val digitNames = Array(\n        \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    )\n    val sortedArr = arr.filter(x => 1 <= x <= 9).sortBy(x => x, false)\n    sortedArr.map(x => digitNames(x - 1))\n}\n",
            "def f(n: Int): Seq[Int] = {\n    val nums = (1 to n).toList\n    val result = mutable.ListBuffer[Int]()\n    for (i <- 1 to n) {\n        if (i % 2 != 0) {\n            result += sum(nums[0..i - 1])\n        } else {\n            result += reduce(nums[0..i - 1], (x, y) => x * y)\n        }\n    }\n    result.toList\n}\n",
            "def evenOddPalindrome(n: Int): Seq[Int] = {\n    var cnt = mutable.ListBuffer[Int](0, 0)\n    for (i <- 1 to n) {\n        if (isPalindrome(i)) {\n            cnt(i % 2) += 1\n        }\n    }\n    cnt.toList\n}\n",
            "def countNums(arr: Seq[Int]): Int = {\n    val result = mutable.ListBuffer[Int]()\n    for (n <- arr) {\n        if (digitsSum(n) > 0) {\n            result += n\n        }\n    }\n    result.size\n}\ndef digitsSum(n: Int): Int = {\n    val n_str = n.toString\n    if (n >= 0) {\n        n_str.toInt\n    } else {\n        n_str.substring(0, 2).toInt * 2 + digitsSum(n)\n    }\n}\n",
            "def moveOneBall(arr: Seq[Int]): Boolean = {\n    val sortedArr = arr.sort\n    for (i <- 0 until arr.size) {\n        if (arr.slice(i, arr.size - i) == sortedArr.slice(i, arr.size - i)) {\n            return true\n        }\n    }\n    return false\n}\n",
            "def canExchange(lst1: Seq[Int], lst2: Seq[Int]): String = {\n    val oddCnt = lst1.filter(num => num % 2 != 0).size\n    val evenCnt = lst2.filter(num => num % 2 == 0).size\n    \"YES\" if evenCnt >= oddCnt else \"NO\"\n}\n",
            "def histogram(test: String): Map[String,Int] = {\n    val freq = mutable.HashMap[String,Int]()\n    val words = test.split(\" \").filter(w => w.length > 0)\n    for (w <- words) {\n        freq.putOrElse(w, 0)\n        freq(w) += 1\n    }\n    val maxFreq = freq.values.max\n    val result = mutable.HashMap[String,Int]()\n    if (freq.size > 0) {\n        freq.foreach(pair => {\n            if (pair._2 == maxFreq) {\n                result.put(pair._1, pair._2)\n            }\n        })\n    }\n    result\n}\n",
            "def reverseDelete(s: String, c: String): Seq[String] = {\n    val s1 = s.filter(c.toLowerCase.contains(_))\n    val result = mutable.ListBuffer[String]()\n    if (s1.length == s.length) {\n        result += \"yes\"\n    } else {\n        result += s1\n        result += \"no\"\n    }\n    result.toList\n}\n",
            "def oddCount(lst: Seq[String]): Seq[String] = {\n    val result = mutable.ListBuffer[String]()\n    for (e <- lst) {\n        val n = e.toCharArray.map(c => (ord(c) % 2 == 1)).sum\n        val rs = \"the number of odd elements in the string i of the input.\"\n        result.addOne(rs.replace(\"i\", str(n)))\n    }\n    result.toList\n}\n",
            "def minSubArraySum(nums: Seq[Int]): Int = {\n    var minSum = 0\n    var curSum = 0\n    for (n <- nums) {\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if (minSum == 0) minSum = min(nums)\n    minSum\n}\n",
            "def maxFill(grid: Seq[Seq[Int]], capacity: Int): Int = {\n    val result = 0\n    for (row <- grid) {\n        for (elem <- row) {\n            result += math.ceil(elem / capacity)\n        }\n    }\n    result\n}\n",
            "def sortArray(arr: Seq[Int]): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    for (e <- arr) {\n        val count = bin(e).count(\"1\")\n        result.addOne(e)\n    }\n    result.sortBy(e => (count, e))\n    result.toList\n}\n",
            "def selectWords(s: String, n: Int): Seq[String] = {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\"\n    val words = s.split(\" \").filter(_ != \"\")\n    val result = mutable.ListBuffer[String]()\n    words.foreach(w => {\n        if (words.filter(w => w.length > 0).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w => w.length == n).filter(w.length == n).filter(w.length == n.length == n.length == n.length == n.length == n.length == n.length == n.length == n.length == n.length == n.length == n.length == n.length == n.length == n.length == n.length == n.length == n.length == n.length == n.length ==n.length ==n.length ==n.length ==n.length ==n.length ==n.length ==n.length ==n.length ==n.length ==n.length ==n.length ==n.length ==n.length ==n.length ==n.length ==n.length ==n.length ==.length ==n.length ==n.length ==n.length ==n.length ==n.length ==n.length ==n.length ==n.length ==n.length\n   .length ==.length ==.length ==n.length ==n.length ==.length ==n.length ==n.length ==n.length ==n.length ==.length\n.length ==.length ==.length ==n.length ==n.length ==.length ==.length ==.length\n.length ==.length ==.length ==.length.length ==.length\n.length ==.length.length.length.length.length.length.length.length\n.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length\n.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length\n.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.",
            "def getClosestVowel(word: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for (i <- word.length - 2 to 0 by -1) {\n        if (word.charAt(i) in vowels && word.charAt(i - 1) not in vowels && word.charAt(i + 1) not in vowels) {\n            result = word.charAt(i)\n            break\n        }\n    }\n    result\n}\n",
            "def matchParens(lst: Seq[String]): String = {\n    val s1 = lst(0) + lst(1)\n    val s2 = lst(1) + lst(0)\n    val result = mutable.ListBuffer[String]()\n    if (check(s1) || check(s2)) {\n        result += \"Yes\"\n    } else {\n        result += \"No\"\n    }\n    result.toString\n}\n",
            "def maximum(arr: Seq[Int], k: Int): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    for (e <- arr) {\n        result.addOne(e)\n        if (result.size > k) {\n            result.removeLast()\n        }\n    }\n    result.toList\n}\n",
            "def solution(lst: Seq[Int]): Int = {\n    val result = 0\n    for (i <- 0 until lst.size) {\n        if (i % 2 == 0 && lst(i) % 2 != 0) result += lst(i)\n    }\n    result\n}\n",
            "def addElements(arr: Seq[Int], k: Int): Int = {\n    val result = 0\n    for (n <- arr.take(k)) {\n        if (n.length <= 2) result += n\n    }\n    result\n}\n",
            "def getOddCollatz(n: Int): Seq[Int] = {\n    var collatz = mutable.ListBuffer[Int](1)\n    while n != 1 {\n        if (n % 2 != 0) {\n            collatz.addOne(n)\n            n = 3 * n + 1\n        } else {\n            n = n // 2\n        }\n    }\n    collatz.toList\n}\n",
            "def validDate(date: String): Boolean = {\n    val m = date.substring(0, 2).toInt\n    val d = date.substring(3, 5).toInt\n    val result = mutable.ListBuffer[Int]()\n    if (m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31) result += 1\n    if (m in [4, 6, 9, 11] && d >= 1 && d <= 30) result += 1\n    if (m == 2 && d >= 1 && d <= 29) result += 1\n    result.size == 1\n}\n",
            "def splitWords(txt: String): Seq[String] = {\n    if (\" \" in txt) {\n        txt.split(\" \")\n    } else if (\",\" in txt) {\n        txt.split(\",\")\n    } else {\n        mutable.ListBuffer[String](str(txt.length))\n    }\n}\n",
            "def isSorted(lst: Seq[Int]): Boolean = {\n    val freq = mutable.Map[Int, Int]()\n    for (i <- lst) {\n        freq += (i -> freq.getOrElse(i, 0) + 1)\n    }\n    freq.values.maxOrElse(0) <= 2\n}\n",
            "def intersection(interval1: Seq[Int], interval2: Seq[Int]): String = {\n    val l = max(interval1(0), interval2(0))\n    val r = min(interval1(1), interval2(1))\n    val length = r - l\n    if (length > 0 && isPrime(length)) \"YES\" else \"NO\"\n}\n",
            "def prodSigns(arr: Seq[Int]): Option[Int] = {\n    if (arr.isEmpty) None\n    if (arr.contains(0)) 0\n    val sign = if (arr.map(n => n < 0).count % 2 == 1) -1 else 1\n    sign * arr.map(n => n.abs).sum\n}\n",
            "def minPath(grid: Seq[Seq[Int]], k: Int): Seq[Int] = {\n    val n = grid.size\n    val minVal = n * n + 1\n    val result = mutable.ListBuffer[Int]()\n    for (i <- 0 until n) {\n        for (j <- 0 until n) {\n            if (grid(i)(j) == 1) {\n                val temp = mutable.ListBuffer[Int]()\n                if (i != 0) temp += grid(i - 1)(j)\n                if (j != 0) temp += grid(i)(j - 1)\n                if (i != n - 1) temp += grid(i + 1)(j)\n                if (j != n - 1) temp += grid(i)(j + 1)\n                minVal = temp.min\n            }\n        }\n        for (i <- 0 until k) {\n            result += 1 if i % 2 == 0 else minVal\n        }\n    }\n    result.toList\n}\n",
            "def tri(n: Int): Seq[Int] = {\n    var seq = mutable.ListBuffer[Int](1, 3)\n    for (i <- 2 to n) {\n        if (i % 2 == 0) {\n            seq += i / 2 + 1\n        } else {\n            seq += seq.last + seq.last + (i + 3) / 2\n        }\n    }\n    seq.toList\n}\n",
            "import.math.BigDecimal\nimport.math.BigDecimal.math.BigDecimal.math.BigDecimal\nimport.math.BigDecimal\nimport.math.BigDecimal.math.math.math.BigDecimal.math.BigDecimal.math\nimport.math.math.math.math.math\nimport.math.math.math.math.math.math.math.math\nimport.math.math\nimport.math\nimport.math\nimport.math.math.math.math.math.math\nimport.math.math\nimport.math.math.math.math\nimport.math.math\nimport.math.math.math.math.math.math\nimport.math\n.math.math.math.math.math.math.math.math\nimport\n.math.math\n.math.math\n   .math\n.math.math\n.math.math.math\n.math\n.math\n.math\n.math\n.math.math\n.math\n.math\n.math\n.math\n.math.math.math.math\n.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math\n.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math\n.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.math.",
            "def isNested(s: String): Boolean = {\n    val openIdx = mutable.ListBuffer[Int]()\n    val closeIdx = mutable.ListBuffer[Int]()\n    for (i, ch <- s.toList) {\n        if (ch == '[') openIdx.addOne(i)\n        else if (ch == ']') closeIdx.addOne(i)\n    }\n    var cnt = 0\n    var i = 0\n    var l = closeIdx.size\n    for (idx <- openIdx) {\n        if (i < l && idx < closeIdx(i)) {\n            cnt += 1\n            i += 1\n        }\n    }\n    cnt >= 2\n}\n",
            "def sumSquares(lst: Seq[Double]): Int = {\n    val result = 0\n    for (e <- lst) {\n        result += pow(scala.math.ceil(e), 2)\n    }\n    result\n}\n",
            "def checkIfLastCharIsALetter(txt: String): Boolean = {\n    val last = txt.split(' ').last\n    last.length == 1 && last.head.isLetter\n}\n",
            "def canArrange(arr: Seq[Int]): Int = {\n    val idx = mutable.ArrayBuffer[Int]()\n    for (i <- 1 until arr.size) {\n        if (arr(i) < arr(i - 1)) {\n            idx += i\n        }\n    }\n    idx.toList.maxOrElse(-1)\n}\n",
            "def largestSmallestIntegers(lst: Seq[Int]): Seq[Option[Int]] = {\n    val neg = mutable.ListBuffer[Int]()\n    val pos = mutable.ListBuffer[Int]()\n    for (e <- lst) {\n        if (e < 0) neg += e\n        else pos += e\n    }\n    val maxNeg = if (neg.size > 0) neg.last else None\n    val minPos = if (pos.size > 0) pos.first else None\n    mutable.ListBuffer(maxNeg, minPos).toList\n}\n",
            "def compareOne(a: Any, b: Any): Option[Double] = {\n    val a1 = anyToReal(a)\n    val b1 = anyToReal(b)\n    if (a1 == b1) {\n        None\n    } else if (a1 > b1) {\n        a1\n    } else {\n        b1\n    }\n}\n",
            "def isEqualToSumEven(n: Int): Boolean = {\n    n % 2 == 0 && n >= 8\n}\n",
            "def specialFactorial(n: Int): Int = {\n    var fact = 1\n    var result = 1\n    for (i <- 1 to n + 1) {\n        fact *= i\n        result *= fact\n    }\n    result\n}\n",
            "def fixSpaces(txt: String): String = {\n    val result = mutable.ListBuffer[String]()\n    @tailrec\n    def loop(txt: String): Unit = {\n        if (txt.length > 0) {\n            val c = txt.head\n            if (c == ' ' && txt.length > 1) {\n                result += '-'\n                loop(txt.tail)\n            } else {\n                result += c\n                loop(txt.tail)\n            }\n        }\n    }\n    loop(txt)\n    result.mkString(\"\")\n}\n",
            "def fileNameCheck(fileName: String): String = {\n    val lst = fileName.split(\".\")\n    if (lst.length != 2 || !lst(1).toLowerCase in [\"txt\", \"exe\", \"dll\"] || lst(0).length == 0 || !lst(0).head.isLetter || lst(0).contains(\"123\")) {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "def sumSquares(lst: Seq[Int]): Int = {\n    var result = 0\n    for (i <- 0 until lst.size) {\n        if (i % 3 == 0) result += pow(lst(i), 2)\n        elif (i % 4 == 0) result += pow(lst(i), 3)\n        else result += lst(i)\n    }\n    result\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) false\n    for (i <- 2 until math.floor(math.sqrt(n))) {\n        if (n % i == 0) return false\n    }\n    return true\n}\ndef wordsInSentence(sentence: String): String = {\n    val words = sentence.split(\" \")\n    words.filter(isPrime(_.length)).mkString(\" \")\n}\n",
            "def simplify(x: String, n: String): Boolean = {\n    val xs = x.split(\"/\")\n    val ns = n.split(\"/\")\n    val num = xs(0).toInt * ns(0).toInt\n    val den = xs(1).toInt * ns(1).toInt\n    num % den == 0\n}\n",
            "def orderByPoints(nums: Seq[Int]): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    for (n <- nums) {\n        result.addOne(n)\n    }\n    result.sortBy(x => digitsSum(x))\n    result.toList\n}\ndef digitsSum(n: Int): Int = {\n    val n_str = n.toString\n    if (n >= 0) {\n        n_str.length\n    } else {\n        n_str.substring(1, 2).toInt * 2 + digitsSum(n)\n    }\n}\n",
            "def specialFilter(nums: Seq[Int]): Int = {\n    val odds = \"13579\"\n    val result = mutable.ListBuffer[Int]()\n    for (n <- nums) {\n        if (n > 10 && n % 2 == 1 && str(n)[0] in odds) {\n            result.addOne(n)\n        }\n    }\n    result.size\n}\n",
            "def getMaxTriples(n: Int): Int = {\n    val c = mutable.Array(3, 0)\n    for (i <- 1 to n) {\n        val a = i * i - i + 1\n        c(a % 3) += 1\n    }\n    val result = c(0) * c(1) * c(2) + (c(0) * (c(0) - 1) * (c(0) - 2) + c(1) * (c(1) - 1) * (c(1) - 2) + c(2) * (c(2) - 1) * (c(2) - 2)) // 6\n    result\n}\n",
            "def bf(planet1: String, planet2: String): Seq[String] = {\n    val names = mutable.ListBuffer(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (planet1 not in names || planet2 not in names) {\n        return mutable.ListBuffer()\n    }\n    val l = names.index(planet1)\n    val r = names.index(planet2)\n    if (l > r) {\n        l, r = r, l\n    }\n    if (l == r) {\n        return mutable.ListBuffer()\n    }\n    return names.slice(l + 1, r).toList\n}\n",
            "def sortedListSum(lst: Seq[String]): Seq[String] = {\n    val result = mutable.ListBuffer[String]()\n    for (s <- lst) {\n        if (s.length % 2 == 0) {\n            result.addOne(s)\n        }\n    }\n    result.sortBy(s => s.length)().toList\n}\n",
            "def xOrY(n: Int, x: Int, y: Int): Int = {\n    if (n < 2) y\n    else {\n        val i = 2\n        while (i <= math.sqrt(n)) {\n            if (n % i == 0) return y\n            i += 1\n        }\n        x\n    }\n}\n",
            "def doubleTheDifference(lst: Seq[Double]): Int = {\n    val result = 0\n    for (n <- lst) {\n        if (n >= 0 && n % 2 == 1) result += n * n\n    }\n    result\n}\n",
            "def compare(game: Seq[Int], guess: Seq[Int]): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    for (x, y <- game.zip(guess)) {\n        result += abs(x - y)\n    }\n    result.toList\n}\n",
            "def strongestExtension(className: String, extensions: Seq[String]): String = {\n    val maxS = -1.0\n    var maxExt = \"\"\n    for (ext <- extensions) {\n        val upper = ext.filter(c => c.isUpperCase).size\n        val lower = ext.filter(c => c.isLowerCase).size\n        val s = upper - lower\n        if (s > maxS) {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    f\"{className}.{maxExt}\"\n}\n",
            "def cycpatternCheck(a: String, b: String): Boolean = {\n    val b_rev = b.reverse\n    for (i <- 0 until b.length) {\n        if (b_rev + b(i) in a) return true\n    }\n    false\n}\n",
            "def evenOddCount(num: Int): Seq[Int] = {\n    val ds = num.toString\n    val even = ds.filter(d => ord(d) % 2 == 0).size\n    val odd = ds.filter(d => ord(d) % 2 != 0).size\n    Seq(even, odd)\n}\n",
            "def intToMiniRoman(num: Int): String = {\n    val values = Array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    val numerals = Array(\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\")\n    val res = mutable.ListBuffer[String]()\n    for (i <- 0 until values.length) {\n        while (num >= values[i]) {\n            res.addOne(numerals[i])\n            num -= values[i]\n        }\n    }\n    res.toString\n}\n",
            "def rightAngleTriangle(a: Int, b: Int, c: Int): Boolean = {\n    val s = mutable.ArrayBuffer(a, b, c)\n    s.sort\n    s(0) * s(0) + s(1) * s(1) == s(2) * s(2)\n}\n",
            "def findMax(words: Seq[String]): String = {\n    var maxCnt = 0\n    var maxW = \"\"\n    for (w <- words) {\n        val cnt = w.length\n        if (cnt > maxCnt) {\n            maxCnt = cnt\n            maxW = w\n        }\n        elif (cnt == maxCnt) {\n            maxW = min(maxW, w)\n        }\n    }\n    maxW\n}\n",
            "def eat(num: Int, need: Int, remaining: Int): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    if (need <= remaining) {\n        result += (num + need, remaining - need)\n    } else {\n        result += (num + remaining, 0)\n    }\n    result.toList\n}\n",
            "def doAlgebra(operators: Seq[String], operands: Seq[Int]): Int = {\n    val ops = operators.copy\n    val nums = operands.copy\n    var i = ops.length - 1\n    while (i >= 0) {\n        if (ops(i) == \"**\") {\n            nums(i) = pow(nums(i), nums(i + 1))\n            nums.remove(i + 1)\n            ops.remove(i)\n        }\n        i -= 1\n    }\n    var i = 0\n    while (i < ops.length) {\n        if (ops(i) == \"*\") {\n            nums(i) = nums(i) * nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        }\n        elif (ops(i) == \"//\") {\n            nums(i) = nums(i) // nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        }\n        i += 1\n    }\n    var i = 0\n    while (i < ops.length) {\n        if (ops(i) == \"+\") {\n            nums(i) = nums(i) + nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        }\n        elif (ops(i) == \"-\") {\n            nums(i) = nums(i) - nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums(0)\n}\n",
            "def solve(s: String): String = {\n    val result = s.toCharArray.map(c => {\n        if (c.isLower()) c.toUpperCase\n        else if (c.isUpper()) c.toLowerCase\n        else c\n    })\n    result.mkString\n}\n",
            ".Parser.Parser.\n.Parser.\n.Parser.\n.\n.Parser.Parser.Parser.Parser.Parser.Parser.Parser.Parser.Parser.Parser.\n.Parser.Parser.\n.Parser.\n.Parser.Parser.Parser.Parser\n.Parser.\n.Parser\n.\n.\n.\n.Parser.\n.\n.\n.Parser.\n.Parser.\n.\n.\n.\n.Parser.\n.\n.\n.",
            "def generateIntegers(a: Int, b: Int): Seq[Int] = {\n    val lower = max(2, min(a, b))\n    val upper = min(8, max(a, b))\n    val result = mutable.ListBuffer[Int]()\n    for (i <- lower to upper by 2) {\n        result.addOne(i)\n    }\n    result.toList\n}\n"
        ],
        "swift": [
            "func hasCloseElements(_ numbers: [Double], _ threshold: Double) -> Bool {\n    for i in 0..<numbers.count - 1 {\n        for j in i + 1..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func separateParenGroups(_ parenString: String) -> [String] {\n    var groups = []\n    var stk = []\n    var currentGroup = \"\"\n    var parens = parenString.replace(\" \", \"\")\n    for ch in parens {\n        if ch == \"(\":\n            stk.append(ch)\n            currentGroup += ch\n        elif ch == \")\":\n            stk.pop()\n            currentGroup += ch\n            if !stk {\n                groups.append(currentGroup)\n                currentGroup = \"\"\n            }\n    }\n    return groups\n}\n",
            "func truncateNumber(_ num: Double) -> Double {\n    return num - floor(num)\n}\n",
            "func belowZero(_ operations: [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func meanAbsoluteDeviation(_ numbers: [Double]) -> Double {\n    var mean = sum(numbers) / len(numbers)\n    var deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n}\n",
            "func intersperse(_ numbers: [Int], _ delimiter: Int) -> [Int] {\n    var result = [Int]()\n    for i in range(numbers.count) {\n        if i != 0 {\n            result.append(delimiter)\n        }\n        result.append(numbers[i])\n    }\n    return result\n}\n",
            "func parseNestedParens(_ parenString: String) -> [Int] {\n    var result = [Int]()\n    var parenGroups = parenString.split()\n    for group in parenGroups {\n        var maxDepth = 0\n        var depth = 0\n        for ch in group {\n            if ch == \"(\" {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } elif ch == \")\" {\n                depth -= 1\n            }\n        }\n        result.append(maxDepth)\n    }\n    return result\n}\n",
            "func filterBySubstring(_ strs: [String], _ substring: String) -> [String] {\n    var result = [String]()\n    for s in strs {\n        if substring in s {\n            result.append(s)\n        }\n    }\n    return result\n}\n",
            "func sumProduct(_ numbers: [Int]) -> [Int] {\n    var nSum = 0\n    var nProduct = 1\n    for n in numbers {\n        nSum += n\n        nProduct *= n\n    }\n    return [nSum, nProduct]\n}\n",
            "func rollingMax(_ numbers: [Int]) -> [Int] {\n    var maxSoFar = -Infinity\n    var result = [Int]()\n    for num in numbers {\n        maxSoFar = max(maxSoFar, num)\n        result.append(maxSoFar)\n    }\n    return result\n}\n",
            "func makePalindrome(_ s: String) -> String {\n    var result = \"\"\n    if isPalindrome(s) {\n        return s\n    }\n    for i in 0..s.count - 1 {\n        if isPalindrome(s[i:]):\n            return s + s[:i][::-1]\n    }\n    return \"\"\n}\n",
            "func stringXor(_ a: String, _ b: String) -> String {\n    var result = \"\"\n    for i in 0..min(a.count, b.count) {\n        var x = a[i]\n        var y = b[i]\n        result += (x == y) ? \"0\" : \"1\"\n    }\n    return result\n}\n",
            "func longest(_ strs: [String]) -> String? {\n    var longest_s = strs[0]\n    for s in strs {\n        if len(s) > len(longest_s) {\n            longest_s = s\n        }\n    }\n    return longest_s\n}\n",
            "func greatestCommonDivisor(_ a: Int, _ b: Int) -> Int {\n    var a = a, b = b\n    while b != 0 {\n        a, b = b, a % b\n    }\n    return a\n}\n",
            "func allPrefixes(_ s: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..s.count - 1 {\n        prefixes.append(s[: i + 1])\n    }\n    return prefixes\n}\n",
            "func stringSequence(_ n: Int) -> String {\n    var result = \"\"\n    for i in 0..n {\n        result += String(i)\n        if i < n {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
            "func countDistinctCharacters(_ s: String) -> Int {\n    var result = 0\n    for c in s.lower() {\n        if !result.contains(c) {\n            result += 1\n        }\n    }\n    return result\n}\n",
            "func parseMusic(_ musicString: String) -> [Int] {\n    var durations = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    var notes = musicString.split()\n    var result = [Int]()\n    for note in notes {\n        result.append(durations[note]!)\n    }\n    return result\n}\n",
            "func howManyTimes(_ s: String, _ substring: String) -> Int {\n    var times = 0\n    for i in 0..s.count - substring.count {\n        if s[i..i + substring.count - 1] == substring {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "func sortNumbers(_ numbers: String) -> String {\n    var numDict = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    var numList = filter(lambda x: x in numDict, numbers.split(\" \"))\n    var numList = numList.sorted(key: numDict[x])\n    return \" \".join(numList)\n}\n",
            "func findClosestElements(_ numbers: [Double]) -> [Double] {\n    var sortedNumbers = sorted(numbers)\n    var minDiff = Double(infinity)\n    var closestPair = [Double(), Double()]\n    for i in 1...sortedNumbers.count {\n        var diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]]\n        }\n    }\n    return closestPair\n}\n",
            "func rescaleToUnit(_ numbers: [Double]) -> [Double] {\n    var minNum = min(numbers)\n    var maxNum = max(numbers)\n    if minNum == maxNum {\n        return [0.0] * numbers.count\n    } else {\n        var result = [Double]()\n        for num in numbers {\n            result.append((num - minNum) / (maxNum - minNum))\n        }\n        return result\n    }\n}\n",
            "func filterIntegers(_ values: [Any]) -> [Int] {\n    var result = [Int]()\n    for x in values {\n        if isinstance(x, Int) {\n            result.append(x)\n        }\n    }\n    return result\n}\n",
            "func strLength(_ s: String) -> Int {\n    return s.length\n}\n",
            "func largestDivisor(_ n: Int) -> Int {\n    var result = 1\n    for i in 2...n {\n        if n % i == 0 {\n            result = n / i\n        }\n    }\n    return result\n}\n",
            "func factorize(_ n: Int) -> [Int] {\n    var factors = []\n    var divisor = 2\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.append(divisor)\n            n //= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "func removeDuplicates(_ numbers: [Int]) -> [Int] {\n    var counts = [Int]()\n    for num in numbers {\n        if !counts.contains(num) {\n            counts.append(num)\n        }\n    }\n    var res = [Int]()\n    for num in numbers {\n        if counts.contains(num) {\n            res.append(num)\n        }\n    }\n    return res\n}\n",
            "func flipCase(_ s: String) -> String {\n    var flipped = []\n    for ch in s {\n        if !ch.isLetter {\n            flipped.append(ch)\n        } else {\n            if ch.isUpper {\n                flipped.append(ch.lower)\n            } else {\n                flipped.append(ch.upper)\n            }\n        }\n    }\n    return \"\".join(flipped)\n}\n",
            "func concatenate(_ strs: [String]) -> String {\n    var result = \"\"\n    for s in strs {\n        result += s\n    }\n    return result\n}\n",
            "func filterByPrefix(_ strs: [String], _ prefixStr: String) -> [String] {\n    var result = [String]()\n    for s in strs {\n        if s.startsWith(prefixStr) {\n            result.append(s)\n        }\n    }\n    return result\n}\n",
            "func getPositive(_ l: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in l {\n        if num > 0 {\n            result.append(num)\n        }\n    }\n    return result\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...floor(sqrt(n)) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func poly(_ xs: [Int], _ x: Double) -> Double {\n    var res = 0.0\n    for i in 0..xs.count - 1 {\n        res += xs[i] * x**i\n    }\n    return res\n}\nfunc findZero(_ xs: [Int]) -> Double {\n    var x1 = 1.0\n    var x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    var mid = (x1 + x2) / 2\n    while abs(x1 - x2) > 1e-10 {\n        if poly(xs, mid) == 0 {\n            return mid\n        }\n        if poly(xs, mid) * poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n        mid = (x1 + x2) / 2\n    }\n    return (x1 + x2) / 2\n}\n",
            "func sortThird(_ l: [Int]) -> [Int] {\n    var sortedThird = sorted(l[::3])\n    var result = [Int]()\n    for i in 0..l.count - 1 {\n        if i % 3 == 0 {\n            result.append(sortedThird[i // 3]!)\n        } else {\n            result.append(l[i]!)\n        }\n    }\n    return result\n}\n",
            "func listUnique(_ l: [Int]) -> [Int] {\n    var result = [Int]()\n    for e in l {\n        if !result.contains(e) {\n            result.append(e)\n        }\n    }\n    return result\n}\n",
            "func maxElement(_ l: [Int]) -> Int {\n    if l.count == 0 {\n        return 0\n    }\n    return l.max()\n}\n",
            "func fizzBuzz(_ n: Int) -> Int {\n    var cnt = 0\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += str(i).count(\"7\")\n        }\n    }\n    return cnt\n}\n",
            "func sortEven(_ l: [Int]) -> [Int] {\n    var sortedEven = sorted(l[::2])\n    var result = [Int]()\n    for i in 0..l.count - 1 {\n        if i % 2 == 0 {\n            result.append(sortedEven[i // 2]!)\n        } else {\n            result.append(l[i]!)\n        }\n    }\n    return result\n}\n",
            "func encodeCyclic(_ s: String) -> String {\n    var result = [String]()\n    for i in 0..s.count - 1 step 3 {\n        if i + 3 > s.count {\n            result.append(s[i:])\n        } else {\n            result.append(s[i+1:i+3])\n            result.append(s[i])\n        }\n    }\n    return \"\".join(result)\n}\nfunc decodeCyclic(_ s: String) -> String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "func primeFib(_ n: Int) -> Int {\n    var f = [0, 1]\n    var cnt = 0\n    while cnt < n {\n        f = [f[1], f[0] + f[1]]\n        if isPrime(f[1]) {\n            cnt += 1\n        }\n    }\n    return f[1]\n}\n",
            "func triplesSumToZero(_ l: [Int]) -> Bool {\n    for i in 0..l.count - 1 {\n        for j in i + 1..l.count - 1 {\n            for k in j + 1..l.count - 1 {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func carRaceCollision(_ n: Int) -> Int {\n    return n * n\n}\n",
            "func incrList(_ l: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l {\n        result.append(i + 1)\n    }\n    return result\n}\n",
            "func pairsSumToZero(_ l: [Int]) -> Bool {\n    var seen = Set<Int>()\n    for num in l {\n        if -num in seen {\n            return true\n        }\n        seen.add(num)\n    }\n    return false\n}\n",
            "func changeBase(_ x: Int, _ bas: Int) -> String {\n    var digits = [String]()\n    while x > 0 {\n        digits.append(String(x % bas))\n        x //= bas\n    }\n    return \"\".join(digits[::-1])\n}\n",
            "func triangleArea(_ a: Int, _ h: Int) -> Double {\n    return a * h / 2\n}\n",
            "func fib4(_ n: Int) -> Int {\n    var fib = [0, 0, 2, 0]\n    for i in 0..n {\n        fib[i % 4] = sum(fib)\n    }\n    return fib[n % 4]\n}\n",
            "func median(_ l: [Double]) -> Double {\n    var sl = l.sorted()\n    if l.count % 2 != 0 {\n        return sl[l.count / 2]\n    } else {\n        return (sl[l.count / 2] + sl[l.count / 2 - 1]) / 2\n    }\n}\n",
            "func isPalindrome(_ txt: String) -> Bool {\n    var txt = txt.reversed()\n    return txt == txt\n}\n",
            "func modp(_ n: Int, _ p: Int) -> Int {\n    var ret = 1\n    for _ in range(n) {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func encodeShift(_ s: String) -> String {\n    var result = [String]()\n    for ch in s {\n        result.append(chr(((ch.asUInt - 97 + 5) % 26) + 97))\n    }\n    return \"\".join(result)\n}\nfunc decodeShift(_ s: String) -> String {\n    var result = [String]()\n    for ch in s {\n        result.append(chr(((ch.asUInt - 97 + 21) % 26) + 97))\n    }\n    return \"\".join(result)\n}\n",
            "func removeVowels(_ txt: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for char in txt {\n        if char not in vowels {\n            result += char\n        }\n    }\n    return result\n}\n",
            "func belowThreshold(_ l: [Int], _ t: Int) -> Bool {\n    return all(x < t for x in l)\n}\n",
            "func add(_ x: Int, _ y: Int) -> Int {\n    return x + y\n}\n",
            "func sameChars(_ s0: String, _ s1: String) -> Bool {\n    var s0Set = Set(s0)\n    var s1Set = Set(s1)\n    return s0Set == s1Set\n}\n",
            "func fib(_ n: Int) -> Int {\n    var fib = [Int](capacity: n + 1)\n    fib[0] = 0\n    fib[1] = 1\n    for i in 2..n {\n        fib[i] = fib[i - 1] + fib[i - 2]\n    }\n    return fib[n]\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"<\" {\n            depth += 1\n        } else if b == \">\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func monotonic(_ l: [Int]) -> Bool {\n    var diff = [Int]()\n    for i in 0..l.count - 1 {\n        diff.append(l[i] - l[i + 1])\n    }\n    return diff.all(x <= 0) || diff.all(x >= 0)\n}\n",
            "func common(_ l1: [Int], _ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for e in l1 {\n        if l2.contains(e) {\n            result.append(e)\n        }\n    }\n    return result\n}\n",
            "func largestPrimeFactor(_ n: Int) -> Int {\n    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i\n        } else {\n            i += 1\n        }\n    }\n    return n\n}\n",
            "func sumToN(_ n: Int) -> Int {\n    var result = 0\n    for i in 0..n {\n        result += i\n    }\n    return result\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return false\n    }\n    return depth == 0\n}\n",
            "func derivative(_ xs: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 1...xs.count {\n        result.append(xs[i] * i)\n    }\n    return result\n}\n",
            "func fibfib(_ n: Int) -> Int {\n    var a = 0\n    var b = 0\n    var c = 1\n    while n > 2 {\n        a, b, c = b, c, a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "func vowelsCount(_ s: String) -> Int {\n    var vowels = \"aeiou\"\n    var cnt = 0\n    for i in 0..s.count - 1 {\n        if s[i].lower() in vowels || (i == s.count - 1 && s[i].lower() == \"y\") {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "func circularShift(_ x: Int, _ shift: Int) -> String {\n    var xStr = String(x)\n    if shift > xStr.count {\n        return xStr[::-1]\n    } else {\n        return xStr[xStr.count - shift:] + xStr[:xStr.count - shift]\n    }\n}\n",
            "func digitSum(_ s: String) -> Int {\n    var result = 0\n    for c in s {\n        if c.isUpper {\n            result += ord(c)\n        }\n    }\n    return result\n}\n",
            "func fruitDistribution(_ s: String, _ n: Int) -> Int {\n    let words = s.split(\" \")\n    let apples = Int(words[words.index(\"apples\") - 1])\n    let oranges = Int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n}\n",
            "func pluck(_ arr: [Int]) -> [Int] {\n    var evens = [Int]()\n    for n in arr {\n        if n % 2 == 0 {\n            evens.append(n)\n        }\n    }\n    if evens.count == 0 {\n        return []\n    }\n    var minEven = evens.min()\n    return [minEven, arr.index(minEven)]\n}\n",
            "func search(_ lst: [Int]) -> Int {\n    var freqs = [Int]()\n    for n in lst {\n        let freq = freqs.count(n)\n        if freq == 0 {\n            freqs.append(n)\n        } else {\n            freqs[freq] = n\n        }\n    }\n    var good_vals = [Int]()\n    for k in freqs {\n        if k >= freqs[k] {\n            good_vals.append(k)\n        }\n    }\n    return good_vals.max(default: -1)\n}\n",
            "func strangeSortList(_ lst: [Int]) -> [Int] {\n    var sl = lst.sorted()\n    var result = [Int]()\n    var left = 0\n    var right = lst.count - 1\n    while left <= right {\n        result.append(sl[left])\n        left += 1\n        if left <= right {\n            result.append(sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "func triangleArea(_ a: Int, _ b: Int, _ c: Int) -> Double {\n    if a + b > c && a + c > b && b + c > a {\n        var s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        return -1.0\n    }\n}\n",
            "func willItFly(_ q: [Int], _ w: Int) -> Bool {\n    if q.count == 0 {\n        return false\n    }\n    var isPalin = true\n    var total = 0\n    for i in 0..q.count - 1 {\n        total += q[i]\n        isPalin = isPalin && q[i] == q[q.count - i - 1]\n    }\n    return isPalin && total <= w\n}\n",
            "func smallestChange(_ arr: [Int]) -> Int {\n    var ans = 0\n    for i in 0..arr.count // 2 {\n        if arr[i] != arr[arr.count - i - 1] {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "func totalMatch(_ lst1: [String], _ lst2: [String]) -> [String] {\n    var cnt1 = 0\n    var cnt2 = 0\n    for s in lst1 {\n        cnt1 += len(s)\n    }\n    for s in lst2 {\n        cnt2 += len(s)\n    }\n    return lst1 if cnt1 <= cnt2 else lst2\n}\n",
            "func isMultiplyPrime(_ a: Int) -> Bool {\n    var cnt = 0\n    for i in 2..a {\n        if isPrime(i) {\n            while a % i == 0 {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "func isSimplePower(_ x: Int, _ n: Int) -> Bool {\n    var tmp = 1\n    while tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "func isCube(_ a: Int) -> Bool {\n    var root = Int(round(pow(a, 1.0 / 3.0)))\n    return root * root * root == a\n}\n",
            "func hexKey(_ num: String) -> Int {\n    var result = 0\n    for x in num {\n        if x in \"2357BD\" {\n            result += 1\n        }\n    }\n    return result\n}\n",
            "func decimalToBinary(_ dec: Int) -> String {\n    var binary = bin(dec)[2:]\n    return \"db\" + binary + \"db\"\n}\n",
            "func isHappy(_ s: String) -> Bool {\n    if s.length < 3 {\n        return false\n    }\n    for i in 0..s.length - 2 {\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func numericalLetterGrade(_ grades: [Double]) -> [String] {\n    var result = [\"E\"] * grades.count\n    for i in 0..grades.count - 1 {\n        var g = grades[i]\n        if g == 4.0 {\n            result[i] = \"A+\"\n        } else if g > 3.7 {\n            result[i] = \"A\"\n        } else if g > 3.3 {\n            result[i] = \"A-\"\n        } else if g > 3.0 {\n            result[i] = \"B+\"\n        } else if g > 2.7 {\n            result[i] = \"B\"\n        } else if g > 2.3 {\n            result[i] = \"B-\"\n        } else if g > 2.0 {\n            result[i] = \"C+\"\n        } else if g > 1.7 {\n            result[i] = \"C\"\n        } else if g > 1.3 {\n            result[i] = \"C-\"\n        } else if g > 1.0 {\n            result[i] = \"D+\"\n        } else if g > 0.7 {\n            result[i] = \"D\"\n        } else if g > 0.0 {\n            result[i] = \"D-\"\n        }\n    }\n    return result\n}\n",
            "func primeLength(_ s: String) -> Bool {\n    let length = s.length\n    if length < 2 {\n        return false\n    }\n    for i in 2...floor(sqrt(length)) {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func startsOneEnds(_ n: Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * (10 ** (n - 2))\n}\n",
            "func solve(_ n: Int) -> String {\n    var digitsSum = 0\n    for d in String(n) {\n        digitsSum += Int(d)\n    }\n    return bin(digitsSum)[2:]\n}\n",
            "func add(_ lst: [Int]) -> Int {\n    var result = 0\n    for i, x in enumerate(lst) {\n        if i % 2 == 1 && x % 2 == 0 {\n            result += x\n        }\n    }\n    return result\n}\n",
            "func antiShuffle(_ s: String) -> String {\n    var words = [\"\".join(sorted(list(word))) for word in s.split(\" \")]\n    return \" \".join(words)\n}\n",
            "func getRow(_ lst: [[Int]], _ x: Int) -> [[Int]] {\n    var coords = []\n    for i in 0..lst.count {\n        for j in 0..lst[i].count {\n            if lst[i][j] == x {\n                coords.append([i, j])\n            }\n        }\n    }\n    return coords.sorted(by: { (a, b) in (a[0], -a[1]) })\n}\n",
            "func sortArray(_ arr: [Int]) -> [Int] {\n    if arr.count == 0 {\n        return []\n    }\n    if (arr[0] + arr[-1]) % 2 == 0 {\n        return arr.descending { $0 }\n    } else {\n        return arr.ascending { $0 }\n    }\n}\n",
            "func encrypt(_ s: String) -> String {\n    var result = [String]()\n    for ch in s {\n        var shifted = ch.asUInt + 4\n        if shifted > UInt8(ord('z')) {\n            shifted -= UInt8(ord('z') - ord('a') + 1)\n        }\n        result.append(String(chr(shifted)))\n    }\n    return \"\".join(result)\n}\n",
            "func nextSmallest(_ lst: [Int]) -> Int? {\n    var sl = lst.sorted(ascending: true)\n    if sl.count < 2 {\n        return nil\n    }\n    return sl[1]\n}\n",
            "func isBored(_ s: String) -> Int {\n    let sentences = s.split(separator: \"!?. \")\n    let result = 0\n    for sentence in sentences {\n        if sentence.length >= 2 && sentence[0..1] == \"I \" {\n            result += 1\n        }\n    }\n    return result\n}\n",
            "func anyInt(_ x: Any, _ y: Any, _ z: Any) -> Bool {\n    if let x = x as? Int, let y = y as? Int, let z = z as? Int {\n        if x + y == z || x + z == y || y + z == x {\n            return true\n        }\n    }\n    return false\n}\n",
            "func encode(_ message: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for ch in message {\n        if ch.isLetter {\n            var ch1 = ch.uppercase ?? ch.lowercase\n            if ch1 in vowels {\n                ch1 = ch1.uppercase ?? ch1.lowercase\n            }\n            result += ch1\n        } else {\n            result += ch\n        }\n    }\n    return result\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...floor(sqrt(n)) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc skjkasdkd(_ lst: [Int]) -> Int {\n    var primes = [Int]()\n    for n in lst {\n        if isPrime(n) {\n            primes.append(n)\n        }\n    }\n    if primes.count == 0 {\n        return 0\n    }\n    var largest = String(primes.max)\n    return sum(Int(digit) for digit in largest)\n}\n",
            "func checkDictCase(_ d: [String:String]) -> Bool {\n    if d.count == 0 {\n        return false\n    }\n    var isLower = true\n    var isUpper = true\n    for k, v in d {\n        if k.isLower {\n            isLower = false\n        }\n        if k.isUpper {\n            isUpper = false\n        }\n    }\n    return isLower || isUpper\n}\n",
            "func countUpTo(_ n: Int) -> [Int] {\n    var primes = [Int]()\n    for num in 2..n {\n        if all(num % p != 0 for p in primes) {\n            primes.append(num)\n        }\n    }\n    return primes\n}\n",
            "func multiply(_ a: Int, _ b: Int) -> Int {\n    var a = abs(a)\n    var b = abs(b)\n    var result = 0\n    for i in 0..a.count - 1 {\n        result += b * a[i]\n    }\n    return result\n}\n",
            "func countUpper(_ s: String) -> Int {\n    var vowels = \"AEIOU\"\n    var result = 0\n    for i, c in enumerate(s) {\n        if i % 2 == 0 && c in vowels {\n            result += 1\n        }\n    }\n    return result\n}\n",
            "func closestInteger(_ value: String) -> Int {\n    let num = Float(value)\n    if num >= 0 {\n        return Int(num + 0.5)\n    } else {\n        return Int(num - 0.5)\n    }\n}\n",
            "func makeAPile(_ n: Int) -> [Int] {\n    var result = [Int](n)\n    for i in 0..n-1 {\n        result[i] = n + 2 * i\n    }\n    return result\n}\n",
            "func wordsString(_ s: String) -> [String] {\n    var result = [String]()\n    for w in s.split(separator: \", \") {\n        if w.length > 0 {\n            result.append(w)\n        }\n    }\n    return result\n}\n",
            "func chooseNum(_ x: Int, _ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return y - 1 if x != y else -1\n}\n",
            "func roundedAvg(_ n: Int, _ m: Int) -> String? {\n    var rAvg = (m + n) / 2.0 + 0.5\n    return bin(rAvg)[2:]\n}\n",
            "func uniqueDigits(_ x: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if allDigitsOdd(String(num)) {\n            result.append(num)\n        }\n    }\n    return result\n}\n",
            "func byLength(_ arr: [Int]) -> [String] {\n    var digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    var sortedArr = arr.sorted(descending: true)\n    return [digitNames[x-1] for x in sortedArr]\n}\n",
            "func f(_ n: Int) -> [Int] {\n    var nums = [Int](1...n)\n    return [sum(nums[:i]) if i % 2 != 0 else reduce(x, y: x * y, nums[:i], 1) for i in nums]\n}\n",
            "func evenOddPalindrome(_ n: Int) -> [Int] {\n    var cnt = [0, 0]\n    for i in 1...n {\n        if isPalindrome(String(i)) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}\n",
            "func countNums(_ arr: [Int]) -> Int {\n    var result = 0\n    for n in arr {\n        if digitsSum(n) > 0 {\n            result += 1\n        }\n    }\n    return result\n}\n",
            "func moveOneBall(_ arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return true\n    }\n    var sortedArr = arr.sorted()\n    for i in 0..arr.count - 1 {\n        if arr[i:] == sortedArr[:arr.count - i] && arr[:i] == sortedArr[arr.count - i:] {\n            return true\n        }\n    }\n    return false\n}\n",
            "func canExchange(_ lst1: [Int], _ lst2: [Int]) -> String {\n    var oddCnt = 0\n    var evenCnt = 0\n    for num in lst1 {\n        if num % 2 != 0 {\n            oddCnt += 1\n        }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n            evenCnt += 1\n        }\n    }\n    return \"YES\" if evenCnt >= oddCnt else \"NO\"\n}\n",
            "func histogram(_ test: String) -> [String:Int] {\n    var freq = [String:Int]()\n    var words = [w for w in test.split(\" \") if len(w) > 0]\n    for w in words {\n        freq[w] = freq.get(w, 0) + 1\n    }\n    var maxFreq = 0\n    var result = [String:Int]()\n    if len(freq) > 0 {\n        maxFreq = max(freq.values)\n        for k, v in freq.items {\n            if v == maxFreq {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "func reverseDelete(_ s: String, _ c: String) -> [String] {\n    var s1 = \"\"\n    for ch in s {\n        if ch not in c {\n            s1 += ch\n        }\n    }\n    var result = [\"\", \"yes\" if isPalindrome(s1) else \"no\"]\n    return result\n}\n",
            "func oddCount(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for num in lst {\n        var n = sum(ord(d) % 2 == 1 for d in num)\n        var rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    }\n    return result\n}\n",
            "func minSubArraySum(_ nums: [Int]) -> Int {\n    var minSum = 0\n    var curSum = 0\n    for n in nums {\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if minSum == 0 {\n        minSum = min(nums)\n    }\n    return minSum\n}\n",
            "func maxFill(_ grid: [[Int]], _ capacity: Int) -> Int {\n    var result = 0\n    for arr in grid {\n        var sum = 0\n        for e in arr {\n            sum += e\n            if sum > capacity {\n                result += ceil(sum / capacity)\n                sum = 0\n            }\n        }\n        if sum > 0 {\n            result += ceil(sum / capacity)\n        }\n    }\n    return result\n}\n",
            "func sortArray(_ arr: [Int]) -> [Int] {\n    var result = [Int]()\n    for e in arr {\n        result.append(e)\n    }\n    result.sort(key: { (count_ones(x), x) })\n    return result\n}\n",
            "func selectWords(_ s: String, _ n: Int) -> [String] {\n    var consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var words = [w for w in s.split(\" \") if len(w) > 0]\n    return [w for w in words if len([c for c in w if c.lower() in consonants]) == n]\n}\n",
            "func getClosestVowel(_ word: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    for i in range(word.count - 2, 0, -1) {\n        if word[i] in vowels && word[i - 1] not in vowels && word[i + 1] not in vowels {\n            return word[i]\n        }\n    }\n    return \"\"\n}\n",
            "func check(_ s: String) -> Bool {\n    var depth = 0\n    for ch in s {\n        if ch == \"(\" {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\nfunc matchParens(_ lst: [String]) -> String {\n    var s1 = lst[0] + lst[1]\n    var s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) || check(s2) else \"No\"\n}\n",
            "func maximum(_ arr: [Int], _ k: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..k-1 {\n        result.append(arr[i])\n    }\n    for i in k..arr.count-1 {\n        if arr[i] > arr[i-k] {\n            result[i-k] = arr[i]\n        }\n    }\n    return result\n}\n",
            "func solution(_ lst: [Int]) -> Int {\n    var result = 0\n    for i, x in enumerate(lst) {\n        if i % 2 == 0 && x % 2 != 0 {\n            result += x\n        }\n    }\n    return result\n}\n",
            "func addElements(_ arr: [Int], _ k: Int) -> Int {\n    var result = 0\n    for i in 0..k {\n        if len(str(arr[i])) <= 2 {\n            result += arr[i]\n        }\n    }\n    return result\n}\n",
            "func getOddCollatz(_ n: Int) -> [Int] {\n    var collatz = [1]\n    while n != 1 {\n        if n % 2 != 0 {\n            collatz.append(n)\n            n = 3 * n + 1\n        } else {\n            n = n // 2\n        }\n    }\n    return sorted(collatz)\n}\n",
            "func validDate(_ date: String) -> Bool {\n    var m = Int(date[:2])\n    var d = Int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31 {\n        return true\n    }\n    if m in [4, 6, 9, 11] && d >= 1 && d <= 30 {\n        return true\n    }\n    if m == 2 && d >= 1 && d <= 29 {\n        return true\n    }\n    return false\n}\n",
            "func splitWords(_ txt: String) -> [String] {\n    var result = [String]()\n    if \" \" in txt {\n        result = txt.split(\" \")\n    } else if \",\" in txt {\n        result = txt.split(\",\")\n    } else {\n        result.append(String(txt.count(c: c.islower() && ord(c) % 2 == 0)))\n    }\n    return result\n}\n",
            "func isSorted(_ lst: [Int]) -> Bool {\n    var freq = [Int]()\n    for i in lst {\n        freq.append(freq.count(i) + 1)\n    }\n    return max(freq, default: 0) <= 2\n}\n",
            "func intersection(_ interval1: [Int], _ interval2: [Int]) -> String {\n    var l = max(interval1[0], interval2[0])\n    var r = min(interval1[1], interval2[1])\n    var length = r - l\n    if length > 0 && isPrime(length) {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n",
            "func prodSigns(_ arr: [Int]) -> Int? {\n    if arr.count == 0 {\n        return nil\n    }\n    if arr.contains(0) {\n        return 0\n    }\n    var sign = -1 if arr.count % 2 == 1 else 1\n    return sign * arr.map { |n| n.abs }.reduce(0, { (lhs, rhs) in lhs + rhs })\n}\n",
            "func minPath(_ grid: [[Int]], _ k: Int) -> [Int] {\n    var n = grid.count\n    var minVal = n * n + 1\n    for i in 0..n - 1 {\n        for j in 0..n - 1 {\n            if grid[i][j] == 1 {\n                var temp = [Int]()\n                if i != 0 {\n                    temp.append(grid[i - 1][j])\n                }\n                if j != 0 {\n                    temp.append(grid[i][j - 1])\n                }\n                if i != n - 1 {\n                    temp.append(grid[i + 1][j])\n                }\n                if j != n - 1 {\n                    temp.append(grid[i][j + 1])\n                }\n                minVal = min(temp)\n            }\n        }\n    }\n    var result = [Int](k)\n    for i in 0..k - 1 {\n        result[i] = 1 if i % 2 == 0 else minVal\n    }\n    return result\n}\n",
            "func tri(_ n: Int) -> [Int] {\n    var seq = [Int]()\n    if n == 0 {\n        seq.append(1)\n        return seq\n    }\n    seq.append(1)\n    seq.append(3)\n    for i in 0..n - 1 {\n        if i % 2 == 0 {\n            seq.append(i / 2 + 1)\n        } else {\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "func digits(_ n: Int) -> Int {\n    var odds = [Int]()\n    for d in String(n) {\n        if Int(d) % 2 == 1 {\n            odds.append(Int(d))\n        }\n    }\n    var result = 1\n    for o in odds {\n        result *= o\n    }\n    return result\n}\n",
            "func isNested(_ s: String) -> Bool {\n    var openIdx = [Int]()\n    var closeIdx = [Int]()\n    for i, ch in enumerate(s) {\n        if ch == \"[\" {\n            openIdx.append(i)\n        } elif ch == \"]\" {\n            closeIdx.append(i)\n        }\n    }\n    closeIdx.reverse()\n    var cnt = 0\n    var i = 0\n    var l = closeIdx.count\n    for idx in openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\n",
            "func sumSquares(_ lst: [Double]) -> Int {\n    var result = 0\n    for n in lst {\n        result += pow(ceil(n), 2)\n    }\n    return result\n}\n",
            "func checkIfLastCharIsALetter(_ txt: String) -> Bool {\n    var last = txt[txt.rfind(' ') + 1:]\n    return last.length == 1 && last[0].isAlpha()\n}\n",
            "func canArrange(_ arr: [Int]) -> Int {\n    var idx = [Int]()\n    for i in 1...arr.count {\n        if arr[i] < arr[i - 1] {\n            idx.append(i)\n        }\n    }\n    return idx.max(default: -1)\n}\n",
            "func largestSmallestIntegers(_ lst: [Int]) -> [Int?, Int?] {\n    var neg = [i for i in lst if i < 0]\n    var pos = [i for i in lst if i > 0]\n    var maxNeg = max(neg) if neg.count > 0 else nil\n    var minPos = min(pos) if pos.count > 0 else nil\n    return [maxNeg, minPos]\n}\n",
            "func compareOne(_ a: Any, _ b: Any) -> Double? {\n    let a1 = anyToReal(a)\n    let b1 = anyToReal(b)\n    if a1 == b1 {\n        return nil\n    }\n    if a1 > b1 {\n        return a1\n    } else {\n        return b1\n    }\n}\n",
            "func isEqualToSumEven(_ n: Int) -> Bool {\n    return n % 2 == 0 && n >= 8\n}\n",
            "func specialFactorial(_ n: Int) -> Int {\n    var fact = 1\n    var result = 1\n    for i in 1...n {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "func fixSpaces(_ txt: String) -> String {\n    let regex = Regex(r\"\\s{3,}\")\n    let result = txt.replace(regex, \"-\")\n    return result.replace(\" \", \"_\")\n}\n",
            "func fileNameCheck(_ fileName: String) -> String {\n    var lst = fileName.split(\".\")\n    if lst.count != 2 || lst[1] not in [\"txt\", \"exe\", \"dll\"] || lst[0].count == 0 || !lst[0][0].isAlpha || lst[0].count > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "func sumSquares(_ lst: [Int]) -> Int {\n    var result = 0\n    for i in 0..lst.count {\n        if i % 3 == 0 {\n            result += pow(lst[i], 2)\n        } elif i % 4 == 0 {\n            result += pow(lst[i], 3)\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...floor(sqrt(n)) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc wordsInSentence(_ sentence: String) -> String {\n    var words = sentence.split(\" \")\n    var result = \"\"\n    for w in words {\n        if isPrime(w.count) {\n            result += w + \" \"\n        }\n    }\n    return result.trim()\n}\n",
            "func simplify(_ x: String, _ n: String) -> Bool {\n    let xs = x.split(\"/\")\n    let ns = n.split(\"/\")\n    let num = xs[0].toInt * ns[0].toInt\n    let den = xs[1].toInt * ns[1].toInt\n    return num % den == 0\n}\n",
            "func orderByPoints(_ nums: [Int]) -> [Int] {\n    var nums = nums.sorted(key: {($0).sum})\n    return nums\n}\n",
            "func specialFilter(_ nums: [Int]) -> Int {\n    var odds = \"13579\"\n    var result = 0\n    for n in nums {\n        if n > 10 && n % 2 == 1 && str(n)[0] in odds {\n            result += 1\n        }\n    }\n    return result\n}\n",
            "func getMaxTriples(_ n: Int) -> Int {\n    var c = [0, 0, 0]\n    for i in 1...n {\n        a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n}\n",
            "func bf(_ planet1: String, _ planet2: String) -> [String] {\n    let names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    let l = names.index(planet1)\n    let r = names.index(planet2)\n    if l > r {\n        let l, r = r, l\n    }\n    if l == r {\n        return []\n    }\n    return names[l + 1..r]\n}\n",
            "func sortedListSum(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for s in lst {\n        if len(s) % 2 == 0 {\n            result.append(s)\n        }\n    }\n    return sorted(result, key: {($0.length, $0)}!)\n}\n",
            "func xOrY(_ n: Int, _ x: Int, _ y: Int) -> Int {\n    if n < 2 {\n        return y\n    }\n    for i in 2...floor(sqrt(n)) {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func doubleTheDifference(_ lst: [Double]) -> Int {\n    var result = 0\n    for n in lst {\n        if n >= 0 && n % 2 == 1 {\n            result += n * n\n        }\n    }\n    return result\n}\n",
            "func compare(_ game: [Int], _ guess: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<game.count {\n        result.append(abs(game[i] - guess[i]))\n    }\n    return result\n}\n",
            "func strongestExtension(_ className: String, _ extensions: [String]) -> String {\n    var maxS = -Infinity\n    var maxExt = \"\"\n    for ext in extensions {\n        let upper = count { c in c.isUpper() }\n        let lower = count { c in c.isLower() }\n        let s = upper - lower\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return f\"{className}.{maxExt}\"\n}\n",
            "func cycpatternCheck(_ a: String, _ b: String) -> Bool {\n    var b = b.reversed()\n    for i in 0..b.count - 1 {\n        if b[i:] + b[:i] in a {\n            return true\n        }\n    }\n    return false\n}\n",
            "func evenOddCount(_ num: Int) -> [Int] {\n    var ds = abs(num).toString()\n    var even = ds.count(\"0\")\n    return [even, ds.count(\"1\")]\n}\n",
            "func intToMiniRoman(_ num: Int) -> String {\n    var values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    var numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    var res = []\n    for i in range(len(values)) {\n        while num >= values[i] {\n            res.append(numerals[i])\n            num -= values[i]\n        }\n    }\n    return \"\".join(res)\n}\n",
            "func rightAngleTriangle(_ a: Int, _ b: Int, _ c: Int) -> Bool {\n    var s = [Int](a, b, c)\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "func findMax(_ words: [String]) -> String {\n    var maxCnt = 0\n    var maxW = \"\"\n    for w in words {\n        var cnt = w.count\n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        } elif cnt == maxCnt {\n            maxW = min(maxW, w)\n        }\n    }\n    return maxW\n}\n",
            "func eat(_ num: Int, _ need: Int, _ remaining: Int) -> [Int] {\n    if need <= remaining {\n        return [num + need, remaining - need]\n    } else {\n        return [num + remaining, 0]\n    }\n}\n",
            "func doAlgebra(_ operators: [String], _ operands: [Int]) -> Int {\n    var ops = operators.copy()\n    var nums = operands.copy()\n    var i = ops.count - 1\n    while i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.remove(i + 1)\n            ops.remove(i)\n        }\n        i -= 1\n    }\n    var i = 0\n    while i < ops.count {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        } elif ops[i] == \"//\" {\n            nums[i] = nums[i] // nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        }\n        i += 1\n    }\n    var i = 0\n    while i < ops.count {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        } elif ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "func solve(_ s: String) -> String {\n    var result = \"\"\n    for ch in s {\n        if ch.isalpha() {\n            if ch.isUpper() {\n                result += ch.lower()\n            } else {\n                result += ch.upper()\n            }\n        } else {\n            result += ch\n        }\n    }\n    return result\n}\n",
            "import.Set\nimport.Set\nimport.Set\nimport.Set\nimport.Set\nimport.Set\nimport.Set\nimport.Set\nimport.Set\nimport.Set\nimport.Set\nimport.Set\nimport.Set\nimport.Set\nimport.Set\nimport.Set\nimport.Set\nimport.Set\nimport\nimport.Set\nimport\nimport\nimport.Set\nimport.Set\nimport.Set\nimport.Set\nimport.Set\nimport.Set\nimport.Set\nimport.Set\nimport\nimport.Set\nimport.Set\nimport.Set\nimport.Set\nSet\nimport.Set\nimport\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\nSet\n",
            "func generateIntegers(_ a: Int, _ b: Int) -> [Int] {\n    let lower = max(2, min(a, b))\n    let upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n}\n"
        ],
        "typescript": [
            "export const hasCloseElements = (numbers: Array<number>, threshold: number): boolean => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "export const separateParenGroups = (parenString: string): Array<string> => {\n    const groups: Array<string> = [];\n    let currentGroup = \"\";\n    let parens = parenString.replace(/ /g, \"\");\n    for (const ch of parens) {\n        if (ch === \"(\") {\n            currentGroup += ch;\n        } else if (ch === \")\") {\n            currentGroup += ch;\n            if (!parens.length) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "export const truncateNumber = (num: number): number => {\n    return num - Math.floor(num);\n}\n",
            "export const belowZero = (operations: Array<number>): boolean => {\n    let balance = 0;\n    for (const op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const meanAbsoluteDeviation = (numbers: Array<number>): number => {\n    const mean = numbers.reduce((sum, x) => sum + x, 0) / numbers.length;\n    const deviation = numbers.reduce((sum, x) => sum + Math.abs(x - mean), 0);\n    return deviation / numbers.length;\n}\n",
            "export const intersperse = (numbers: Array<number>, delimiter: number): Array<number> => {\n    const result: Array<number> = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i != 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "export const parseNestedParens = (parenString: string): Array<number> => {\n    const result: Array<number> = []\n    const parenGroups = parenString.split(\" \")\n    for (const group of parenGroups) {\n        let maxDepth = 0\n        let depth = 0\n        for (const ch of group) {\n            if (ch === \"(\") {\n                depth += 1\n                maxDepth = Math.max(maxDepth, depth)\n            } else if (ch === \")\") {\n                depth -= 1\n            }\n        }\n        result.push(maxDepth)\n    }\n    return result\n}\n",
            "export const filterBySubstring = (strs: Array<string>, substring: string): Array<string> => {\n    return strs.filter(s => substring in s);\n}\n",
            "export const sumProduct = (numbers: Array<number>): Array<number> => {\n    const nSum = numbers.reduce((sum, x) => sum + x, 0);\n    const nProduct = numbers.reduce((product, x) => product * x, 1);\n    return [nSum, nProduct];\n}\n",
            "export const rollingMax = (numbers: Array<number>): Array<number> => {\n    let maxSoFar = Number.MIN_SAFE_INTEGER;\n    let result = [];\n    for (const num of numbers) {\n        maxSoFar = Math.max(maxSoFar, num);\n        result.push(maxSoFar);\n    }\n    return result;\n}\n",
            "export const makePalindrome = (s: string): string => {\n    if (s === s.slice(0, s.length - 1)) {\n        return s;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (s.slice(i) === s.slice(i)[::-1]) {\n            return s + s.slice(0, i)[::-1];\n        }\n    }\n    return \"\";\n}\n",
            "export const stringXor = (a: string, b: string): string => {\n    return a.replace(/0/g, \"1\").replace(/1/g, \"0\").replace(/^0/g, \"1\");\n}\n",
            "export const longest = (strs: Array<string>): string | null => {\n    if (strs.length === 0) {\n        return null;\n    }\n    let longest_s = strs[0];\n    for (const s of strs) {\n        if (s.length > longest_s.length) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n",
            "export const greatestCommonDivisor = (a: number, b: number): number => {\n    return b === 0 ? a : greatestCommonDivisor(b, a % b);\n}\n",
            "export const allPrefixes = (s: string): Array<string> => {\n    const prefixes: Array<string> = [];\n    for (let i = 0; i < s.length; i++) {\n        prefixes.push(s.slice(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "export const stringSequence = (n: number): string => {\n    return `${[...Array(n + 1).map(i => i.toString())]}.join(\" \")`;\n}\n",
            "export const countDistinctCharacters = (s: string): number => {\n    return s.length;\n}\n",
            "export const parseMusic = (musicString: string): Array<number> => {\n    const durations = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    };\n    const notes = musicString.split(\" \");\n    return [durations[note] for note in notes];\n}\n",
            "export const howManyTimes = (s: string, substring: string): number => {\n    let times = 0;\n    for (let i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.slice(i, i + substring.length) === substring) {\n            times++;\n        }\n    }\n    return times;\n}\n",
            "export const sortNumbers = (numbers: string): string => {\n    const numDict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    const numList = numbers.split(\" \").filter(x => x in numDict);\n    numList.sort((a, b) => numDict[b] - numDict[a]);\n    return \" \".join(numList);\n}\n",
            "export const findClosestElements = (numbers: Array<number>): Array<number> => {\n    const sortedNumbers = numbers.sort((a, b) => b - a);\n    const minDiff = Number.MAX_SAFE_INTEGER;\n    const closestPair = [sortedNumbers[0], sortedNumbers[1]];\n    for (let i = 1; i < sortedNumbers.length; i++) {\n        const diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "export const rescaleToUnit = (numbers: Array<number>): Array<number> => {\n    const minNum = Math.min(...numbers);\n    const maxNum = Math.max(...numbers);\n    if (minNum === maxNum) {\n        return [0.0] * numbers.length;\n    } else {\n        return [(num - minNum) / (maxNum - minNum) for num in numbers];\n    }\n}\n",
            "export const filterIntegers = (values: Array<any>): Array<number> => {\n    return Array.from(values).filter(x => typeof x === \"number\");\n}\n",
            "export const strLength = (s: string): number => s.length;\n",
            "export const largestDivisor = (n: number): number => {\n    let largestDivisor = 1;\n    for (let i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largestDivisor = n / i;\n        }\n    }\n    return largestDivisor;\n}\n",
            "export const factorize = (n: number): Array<number> => {\n    const factors: Array<number> = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n = Math.floor(n / divisor);\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n",
            "export const removeDuplicates = (numbers: Array<number>): Array<number> => {\n    const counts = new Map<number, number>();\n    for (const num of numbers) {\n        counts.set(num, counts.get(num) || 0) + 1;\n    }\n    const res = [];\n    for (const num of numbers) {\n        if (counts.get(num) === 1) {\n            res.push(num);\n        }\n    }\n    return res;\n}\n",
            "export const flipCase = (s: string): string => {\n    const result = '';\n    for (const ch of s) {\n        if (!ch.isAlpha()) {\n            result += ch;\n        } else {\n            if (ch.toLowerCase() === ch) {\n                result += ch.toUpperCase();\n            } else {\n                result += ch.toLowerCase();\n            }\n        }\n    }\n    return result;\n}\n",
            "export const concatenate = (strs: Array<string>): string => {\n    return strs.join(\"\");\n}\n",
            "export const filterByPrefix = (strs: Array<string>, prefixStr: string): Array<string> => {\n    return strs.filter(s => s.startsWith(prefixStr));\n}\n",
            "export const getPositive = (l: Array<number>): Array<number> => {\n    return l.filter(e => e > 0);\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const poly = (xs: Array<number>, x: number): number => {\n    let res = 0.0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * x**i;\n    }\n    return res;\n}\nexport const findZero = (xs: Array<number>): number => {\n    let x1 = 1.0;\n    let x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        let mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        }\n        if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "export const sortThird = (l: Array<number>): Array<number> => {\n    const sortedThird = l.slice(0, l.length, 3).sort();\n    return [sortedThird[i // 3] if i % 3 === 0 else l[i] for i in range(l.length)];\n}\n",
            "export const listUnique = (l: Array<number>): Array<number> => {\n    return Array.from(new Set(l)).sort();\n}\n",
            "export const maxElement = (l: Array<number>): number => {\n    return l.length ? l[0] : 0;\n}\n",
            "export const fizzBuzz = (n: number): number => {\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += String(i).includes(\"7\");\n        }\n    }\n    return cnt;\n}\n",
            "export const sortEven = (l: Array<number>): Array<number> => {\n    const sortedEven = sorted(l[::2]);\n    return [sortedEven[i // 2] if i % 2 === 0 else l[i] for i in range(len(l))];\n}\n",
            "export const encodeCyclic = (s: string): string => {\n    const result: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (i + 3 > s.length) {\n            result += s.substring(i);\n        } else {\n            result += s.substring(i + 1, i + 3);\n            result += s.substring(i);\n        }\n    }\n    return result;\n}\nexport const decodeCyclic = (s: string): string => {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "export const primeFib = (n: number): number => {\n    const f = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\n",
            "export const triplesSumToZero = (l: Array<number>): boolean => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "export const carRaceCollision = (n: number): number => n * n;\n",
            "export const incrList = (l: Array<number>): Array<number> => {\n    return l.map(e => e + 1);\n}\n",
            "export const pairsSumToZero = (l: Array<number>): boolean => {\n    const seen = new Set<number>();\n    for (const num of l) {\n        if (-num in seen) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "export const changeBase = (x: number, bas: number): string => {\n    const digits = [];\n    while (x > 0) {\n        digits.push(String(x % bas));\n        x = Math.floor(x / bas);\n    }\n    return digits.reverse().join(\"\");\n}\n",
            "export const triangleArea = (a: number, h: number): number => {\n    return a * h / 2;\n}\n",
            "export const fib4 = (n: number): number => {\n    const fib = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        fib[i % 4] = sum(fib);\n    }\n    return fib[n % 4];\n}\n",
            "export const median = (l: Array<number>): number => {\n    const sl = l.sort();\n    if (l.length % 2 != 0) {\n        return sl[l.length / 2];\n    } else {\n        return (sl[l.length / 2] + sl[l.length / 2 - 1]) / 2;\n    }\n}\n",
            "export const isPalindrome = (txt: string): boolean => {\n    return txt === txt.slice(0, txt.length - 1).reverse();\n}\n",
            "export const modp = (n: number, p: number): number => {\n    let ret = 1;\n    for (let _ of range(n)) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "export const encodeShift = (s: string): string => {\n    const result = \"\";\n    for (const ch of s) {\n        const newCh = chr(((ord(ch) - 97 + 5) % 26) + 97);\n        result += newCh;\n    }\n    return result;\n}\nexport const decodeShift = (s: string): string => {\n    const result = \"\";\n    for (const ch of s) {\n        const newCh = chr(((ord(ch) - 97 + 21) % 26) + 97);\n        result += newCh;\n    }\n    return result;\n}\n",
            "export const removeVowels = (txt: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    return txt.replace(/[aeiouAEIOU]/g, \"\");\n}\n",
            "export const belowThreshold = (l: Array<number>, t: number): boolean => {\n    return l.every(x => x < t);\n}\n",
            "export const add = (x: number, y: number): number => {\n    return x + y;\n}\n",
            "export const sameChars = (s0: string, s1: string): boolean => {\n    return Array.from(new Set(s0)).length === Array.from(new Set(s1)).length;\n}\n",
            "export const fib = (n: number): number => {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "export const correctBracketing = (brackets: string): boolean => {\n    let depth = 0;\n    for (let b of brackets) {\n        if (b === \"<\") {\n            depth++;\n        } else if (b === \">\") {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const monotonic = (l: Array<number>): boolean => {\n    const diff = l.map((x, y) => y - x);\n    return all(x <= 0 for x in diff) || all(x >= 0 for x in diff);\n}\n",
            "export const common = (l1: Array<number>, l2: Array<number>): Array<number> => {\n    return Array.from(new Set(l1).intersection(new Set(l2)));\n}\n",
            "export const largestPrimeFactor = (n: number): number => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i++;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}\n",
            "export const sumToN = (n: number): number => {\n    return n * (n + 1) / 2;\n}\n",
            "export const correctBracketing = (brackets: string): boolean => {\n    let depth = 0;\n    for (let b of brackets) {\n        if (b === \"(\") {\n            depth++;\n        } else if (b === \")\") {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const derivative = (xs: Array<number>): Array<number> => {\n    return xs.map((x, i) => x * i);\n}\n",
            "export const fibfib = (n: number): number => {\n    const a = 0;\n    const b = 0;\n    const c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "export const vowelsCount = (s: string): number => {\n    const vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() in vowels || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n",
            "export const circularShift = (x: number, shift: number): string => {\n    const x_str = String(x);\n    if (shift > x_str.length) {\n        return x_str.slice(x_str.length - shift);\n    } else {\n        return x_str.slice(x_str.length - shift) + x_str.slice(0, -shift);\n    }\n}\n",
            "export const digitSum = (s: string): number => {\n    return Math.sum(s.match(/[A-Z]/g).map(c => parseInt(c, 16)));\n}\n",
            "export const fruitDistribution = (s: string, n: number): number => {\n    const words = s.split(' ');\n    const apples = Number(words[words.indexOf(\"apples\") - 1]);\n    const oranges = Number(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "export const pluck = (arr: Array<number>): Array<number> => {\n    const evens = arr.filter((n) => n % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n    const minEven = Math.min(...evens);\n    return [minEven, arr.indexOf(minEven)];\n}\n",
            "export const search = (lst: Array<number>): number => {\n    const freqs = new Map<number, number>();\n    for (const n of lst) {\n        freqs.set(n, freqs.get(n, 0) + 1);\n    }\n    const goodVals = [k for k, v in freqs.items() if v >= k];\n    return max(goodVals, default: -1);\n}\n",
            "export const strangeSortList = (lst: Array<number>): Array<number> => {\n    const sl = lst.sort((a, b) => b - a);\n    const result: Array<number> = [];\n    let left = 0;\n    let right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left++;\n        if (left <= right) {\n            result.push(sl[right]);\n            right--;\n        }\n    }\n    return result;\n}\n",
            "export const triangleArea = (a: number, b: number, c: number): number => {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2.0;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "export const willItFly = (q: Array<number>, w: number): boolean => {\n    if (q.length === 0) {\n        return false;\n    }\n    const isPalin = all(q[i] === q[q.length - i - 1] for i in range(q.length));\n    const total = sum(q);\n    return isPalin && total <= w;\n}\n",
            "export const smallestChange = (arr: Array<number>): number => {\n    let ans = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i] !== arr[arr.length - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;\n}\n",
            "export const totalMatch = (lst1: Array<string>, lst2: Array<string>): Array<string> => {\n    const cnt1 = lst1.reduce((acc, e) => acc + e.length, 0);\n    const cnt2 = lst2.reduce((acc, e) => acc + e.length, 0);\n    return lst1 if cnt1 <= cnt2 else lst2;\n}\n",
            "export const isMultiplyPrime = (a: number): boolean => {\n    let cnt = 0;\n    for (let i = 2; i <= Math.floor(Math.sqrt(a)); i++) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    return cnt === 3;\n}\n",
            "export const isSimplePower = (x: number, n: number): boolean => {\n    const tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}\n",
            "export const isCube = (a: number): boolean => {\n    const root = Math.pow(a, 1 / 3);\n    return Math.pow(root, 3) === a;\n}\n",
            "export const hexKey = (num: string): number => {\n    return num.length - num.replace(/[2357BD]/g, '').length;\n}\n",
            "export const decimalToBinary = (dec: number): string => {\n    const binary = bin(dec)[2:];\n    return `db${binary}db`;\n}\n",
            "export const isHappy = (s: string): boolean => {\n    if (s.length < 3) {\n        return false;\n    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const numericalLetterGrade = (grades: Array<number>): Array<string> => {\n    const result: Array<string> = [];\n    for (const g of grades) {\n        if (g === 4) {\n            result.push(\"A+\");\n        } else if (g > 3.7) {\n            result.push(\"A\");\n        } else if (g > 3.3) {\n            result.push(\"A-\");\n        } else if (g > 3) {\n            result.push(\"B+\");\n        } else if (g > 2.7) {\n            result.push(\"B\");\n        } else if (g > 2.3) {\n            result.push(\"B-\");\n        } else if (g > 2) {\n            result.push(\"C+\");\n        } else if (g > 1.7) {\n            result.push(\"C\");\n        } else if (g > 1.3) {\n            result.push(\"C-\");\n        } else if (g > 1) {\n            result.push(\"D+\");\n        } else if (g > 0.7) {\n            result.push(\"D\");\n        } else if (g > 0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n",
            "export const primeLength = (s: string): boolean => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(length)); i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const startsOneEnds = (n: number): number => {\n    if (n === 1) {\n        return 1;\n    }\n    return 2 * 9 * Math.pow(10, n - 2);\n}\n",
            "export const solve = (n: number): string => {\n    const digitsSum = (n + '').reduce((sum, d) => sum + Number(d), 0);\n    return Number(digitsSum).toString(2);\n}\n",
            "export const add = (lst: Array<number>): number => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1 && lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const antiShuffle = (s: string): string => {\n    const words = s.split(\" \");\n    return words.map((word) => \"\".join(Array.from(word).sort())).join(\" \");\n}\n",
            "export const getRow = (lst: Array<Array<number>>, x: number): Array<Array<number>> => {\n    const coords: Array<Array<number>> = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    return coords.sort((a, b) => (a[0] === b[0] ? -a[1] : a[0]));\n}\n",
            "export const sortArray = (arr: Array<number>): Array<number> => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) {\n        return arr.sort((a, b) => b - a);\n    } else {\n        return arr.sort();\n    }\n}\n",
            "export const encrypt = (s: string): string => {\n    const result: string = \"\";\n    for (const ch of s) {\n        const shifted = ch.charCode() + 4;\n        if (shifted > 122) {\n            shifted -= 26;\n        }\n        result += String.fromCharCode(shifted);\n    }\n    return result;\n}\n",
            "export const nextSmallest = (lst: Array<number>): number | null => {\n    const sl = lst.sort();\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}\n",
            "export const isBored = (s: string): number => {\n    const sentences = re.split(/[.!?]\\s*/g, s);\n    return sentences.filter(sentence => sentence.length >= 2).filter(sentence => sentence.substr(0, 2) === \"I \").length;\n}\n",
            "export const anyInt = (x: any, y: any, z: any): boolean => {\n    if (typeof x === \"number\" && typeof y === \"number\" && typeof z === \"number\") {\n        if (x + y === z || x + z === y || y + z === x) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const encode = (message: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    const result: string = \"\";\n    for (const ch of message) {\n        if (ch.isalpha()) {\n            const ch1 = ch.toUpperCase() if ch.toLowerCase() else ch.toLowerCase();\n            if (ch1 in vowels) {\n                ch1 = ch1.charCodeAt(0) + 2;\n            }\n            result += ch1;\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const skjkasdkd = (lst: Array<number>): number => {\n    const primes = lst.filter(isPrime);\n    if (primes.length === 0) {\n        return 0;\n    }\n    const largest = String(Math.max(primes)).toString();\n    return sum(largest.charCodeAt(i) for i in range(largest.length));\n}\n",
            "export const checkDictCase = (d: Map<string, string>): boolean => {\n    const keys = Object.keys(d);\n    return keys.length > 0 && (\n        all(c => c.islower(), keys) ||\n        all(c => c.isupper(), keys)\n    );\n}\n",
            "export const countUpTo = (n: number): Array<number> => {\n    const primes: Array<number> = [];\n    for (let num = 2; num < n; num++) {\n        if (all(num % p != 0 for p in primes)) {\n            primes.push(num);\n        }\n    }\n    return primes;\n}\n",
            "export const multiply = (a: number, b: number): number => {\n    return Math.abs(a) % 10 * Math.abs(b) % 10;\n}\n",
            "export const countUpper = (s: string): number => {\n    const vowels = \"AEIOU\";\n    return s.split('').filter((c, i) => i % 2 === 0 && c in vowels).length;\n}\n",
            "export const closestInteger = (value: string): number => {\n    const num = Number(value);\n    if (num >= 0) {\n        return Math.round(num + 0.5);\n    } else {\n        return Math.round(num - 0.5);\n    }\n}\n",
            "export const makeAPile = (n: number): Array<number> => {\n    return [n + 2 * i for i in range(n)];\n}\n",
            "export const wordsString = (s: string): Array<string> => {\n    return [w for w in s.split(/[, ]/g) if w.length > 0];\n}\n",
            "export const chooseNum = (x: number, y: number): number => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return y - 1 if x != y else -1;\n}\n",
            "export const roundedAvg = (n: number, m: number): string | null => {\n    const rAvg = Math.floor((m + n) / 2.0 + 0.5);\n    return new BigInt(rAvg).toString(2);\n}\n",
            "export const uniqueDigits = (x: Array<number>): Array<number> => {\n    const result: Array<number> = [];\n    for (const num of x) {\n        if (allDigitsOdd(String(num))) {\n            result.push(num);\n        }\n    }\n    return result.sort((a, b) => b - a);\n}\n",
            "export const byLength = (arr: Array<number>): Array<string> => {\n    const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const sortedArr = arr.filter((x) => 1 <= x <= 9).sort((a, b) => b - a);\n    return [digitNames[x - 1] for x in sortedArr];\n}\n",
            "export const f = (n: number): Array<number> => {\n    const nums = Array.from(Array(n).keys());\n    return [\n        sum(nums.slice(0, i)) if i % 2 != 0 else reduce((x, y) => x * y, nums.slice(0, i), 1)\n        for i in nums\n    ];\n}\n",
            "export const evenOddPalindrome = (n: number): Array<number> => {\n    const cnt = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(String(i))) {\n            cnt[i % 2]++;\n        }\n    }\n    return cnt;\n}\n",
            "export const countNums = (arr: Array<number>): number => {\n    return arr.filter(n => digitsSum(n) > 0).length;\n}\n",
            "export const moveOneBall = (arr: Array<number>): boolean => {\n    const sortedArr = arr.sort();\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.slice(i) === sortedArr.slice(arr.length - i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const canExchange = (lst1: Array<number>, lst2: Array<number>): string => {\n    const oddCnt = lst1.filter(e => e % 2 != 0).length;\n    const evenCnt = lst2.filter(e => e % 2 == 0).length;\n    return \"YES\" if evenCnt >= oddCnt else \"NO\";\n}\n",
            "export const histogram = (test: string): Map<string, number> => {\n    const freq: Map<string, number> = new Map();\n    const words = [w for w in test.split(\" \") if len(w) > 0];\n    for (const w of words) {\n        freq.set(w, freq.get(w, 0) + 1);\n    }\n    const result: Map<string, number> = new Map();\n    if (freq.size() > 0) {\n        const maxFreq = Math.max(...freq.values());\n        for (const [k, v] of freq.entries()) {\n            if (v == maxFreq) {\n                result.set(k, v);\n            }\n        }\n    }\n    return result;\n}\n",
            "export const reverseDelete = (s: string, c: string): Array<string> => {\n    const s1 = s.replace(c, \"\");\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"];\n}\n",
            "export const oddCount = (lst: Array<string>): Array<string> => {\n    const result: Array<string> = [];\n    for (const num of lst) {\n        const n = sum(d => d % 2 == 1, num);\n        const rs = \"the number of odd elements in the string i of the input.\";\n        result.push(rs.replace(\"i\", n));\n    }\n    return result;\n}\n",
            "export const minSubArraySum = (nums: Array<number>): number => {\n    let minSum = 0;\n    let curSum = 0;\n    for (let n of nums) {\n        curSum = Math.min(curSum + n, 0);\n        minSum = Math.min(curSum, minSum);\n    }\n    if (minSum == 0) {\n        minSum = Math.min(nums);\n    }\n    return minSum;\n}\n",
            "export const maxFill = (grid: Array<Array<number>>, capacity: number): number => {\n    let result = 0;\n    for (const row of grid) {\n        for (const num of row) {\n            result += Math.ceil(num / capacity);\n        }\n    }\n    return result;\n}\n",
            "export const sortArray = (arr: Array<number>): Array<number> => {\n    return arr.sort((a, b) => {\n        const aCount = countOnes(a);\n        const bCount = countOnes(b);\n        return aCount - bCount || a - b;\n    });\n}\n",
            "export const selectWords = (s: string, n: number): Array<string> => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = s.split(\" \");\n    return [w for w in words if words.length > 0 && words[0].length === n && [c for c in w if c.lower() in consonants].length === n];\n}\n",
            "export const getClosestVowel = (word: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i >= 0; i--) {\n        if (word.charAt(i) in vowels && word.charAt(i - 1) not in vowels && word.charAt(i + 1) not in vowels) {\n            return word.charAt(i);\n        }\n    }\n    return \"\";\n}\n",
            "export const matchParens = (lst: Array<string>): string => {\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    return \"Yes\" if check(s1) || check(s2) else \"No\";\n}\n",
            "export const maximum = (arr: Array<number>, k: number): Array<number> => {\n    return arr.slice(arr.length - k);\n}\n",
            "export const solution = (lst: Array<number>): number => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const addElements = (arr: Array<number>, k: number): number => {\n    let result = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            result += arr[i];\n        }\n    }\n    return result;\n}\n",
            "export const getOddCollatz = (n: number): Array<number> => {\n    const collatz = [1];\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = n // 2;\n        }\n    }\n    return collatz.sort();\n}\n",
            "export const validDate = (date: string): boolean => {\n    const m = parseInt(date.slice(0, 2));\n    const d = parseInt(date.slice(3, 5));\n    if (m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31) {\n        return true;\n    }\n    if (m in [4, 6, 9, 11] && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m === 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "export const splitWords = (txt: string): Array<string> => {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [`${[c for c in txt if c.islower() and ord(c) % 2 == 0].length}`];\n    }\n}\n",
            "export const isSorted = (lst: Array<number>): boolean => {\n    const freq = new Map<number, number>();\n    for (const i of lst) {\n        freq.set(i, freq.get(i, 0) + 1);\n    }\n    const max = Math.max(...freq.values(), default: 0);\n    return max <= 2;\n}\n",
            "export const intersection = (interval1: Array<number>, interval2: Array<number>): string => {\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n    return \"YES\" if length > 0 && isPrime(length) else \"NO\";\n}\n",
            "export const prodSigns = (arr: Array<number>): number | null => {\n    if (!arr) {\n        return null;\n    }\n    if (0 in arr) {\n        return 0;\n    }\n    const sign = arr.filter(n => n < 0).length % 2 === 1 ? -1 : 1;\n    return sign * arr.reduce((acc, n) => acc + Math.abs(n), 0);\n}\n",
            "export const minPath = (grid: Array<Array<number>>, k: number): Array<number> => {\n    const n = grid.length;\n    const minVal = n * n + 1;\n    const result: Array<number> = new Array(k);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                const temp = new Array(4);\n                if (i != 0) {\n                    temp[0] = grid[i - 1][j];\n                }\n                if (j != 0) {\n                    temp[1] = grid[i][j - 1];\n                }\n                if (i != n - 1) {\n                    temp[2] = grid[i + 1][j];\n                }\n                if (j != n - 1) {\n                    temp[3] = grid[i][j + 1];\n                }\n                minVal = Math.min(...temp);\n            }\n        }\n    }\n    for (let i = 0; i < k; i++) {\n        result[i] = i % 2 === 0 ? 1 : minVal;\n    }\n    return result;\n}\n",
            "export const tri = (n: number): Array<number> => {\n    if (n === 0) {\n        return [1];\n    }\n    const seq = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "export const digits = (n: number): number => {\n    const odds = [Number(d) for d in String(n) if Number(d) % 2 == 1];\n    return reduce((x, y) => x * y, odds, 1) if odds.length > 0 else 0;\n}\n",
            "export const isNested = (s: string): boolean => {\n    let openIdx: Array<number> = [];\n    let closeIdx: Array<number> = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === '[') {\n            openIdx.push(i);\n        } else if (s[i] === ']') {\n            closeIdx.push(i);\n        }\n    }\n    let closeIdx: Array<number> = closeIdx.reverse();\n    let cnt = 0;\n    let i = 0;\n    let l = closeIdx.length;\n    for (let idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "export const sumSquares = (lst: Array<number>): number => {\n    let result = 0;\n    for (const n of lst) {\n        result += Math.ceil(n) ** 2;\n    }\n    return result;\n}\n",
            "export const checkIfLastCharIsALetter = (txt: string): boolean => {\n    const last = txt.split(' ').pop();\n    return last.length === 1 && last[0].isalpha();\n}\n",
            "export const canArrange = (arr: Array<number>): number => {\n    const idx = [i for i in range(1, arr.length) if arr[i] < arr[i - 1]]\n    return max(idx, default=-1)\n}\n",
            "export const largestSmallestIntegers = (lst: Array<number>): Array<number | null> => {\n    const neg = lst.filter(i => i < 0);\n    const pos = lst.filter(i => i > 0);\n    const maxNeg = max(neg) if neg.length > 0 else null;\n    const minPos = min(pos) if pos.length > 0 else null;\n    return [maxNeg, minPos];\n}\n",
            "export const compareOne = (a: any, b: any): number | null => {\n    const a1 = anyToReal(a);\n    const b1 = anyToReal(b);\n    if (a1 == b1) {\n        return null;\n    }\n    if (a1 > b1) {\n        return a1;\n    }\n    return b1;\n}\n",
            "export const isEqualToSumEven = (n: number): boolean => n % 2 === 0 && n >= 8;\n",
            "export const specialFactorial = (n: number): number => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "export const fixSpaces = (txt: string): string => {\n    return re.sub(/\\s{3,}/g, \"-\", txt).replace(\" \", \"_\");\n}\n",
            "export const fileNameCheck = (fileName: string): string => {\n    const suf = [\"txt\", \"exe\", \"dll\"];\n    const lst = fileName.split(\".\");\n    if (lst.length != 2 || !lst[1] in suf || lst[0].length == 0 || !lst[0][0].isalpha() || lst[0].includes(Number)) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "export const sumSquares = (lst: Array<number>): number => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0) {\n            result += Math.pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const wordsInSentence = (sentence: string): string => {\n    const words = sentence.split(\" \");\n    return \" \".join([w for w in words if isPrime(w.length)]);\n}\n",
            "export const simplify = (x: string, n: string): boolean => {\n    const xs = x.split(\"/\");\n    const ns = n.split(\"/\");\n    const num = Number(xs[0]) * Number(ns[0]);\n    const den = Number(xs[1]) * Number(ns[1]);\n    return num % den === 0;\n}\n",
            "export const orderByPoints = (nums: Array<number>): Array<number> => {\n    return nums.sort((a, b) => digitsSum(a) - digitsSum(b));\n}\n",
            "export const specialFilter = (nums: Array<number>): number => {\n    const odds = \"13579\";\n    return nums.filter(n => n > 10 && n % 2 === 1 && String(n).charAt(0) in odds).length;\n}\n",
            "export const getMaxTriples = (n: number): number => {\n    const c = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        const a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6;\n}\n",
            "export const bf = (planet1: string, planet2: string): Array<string> => {\n    const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (planet1 not in names || planet2 not in names) {\n        return [];\n    }\n    let l = names.indexOf(planet1);\n    let r = names.indexOf(planet2);\n    if (l > r) {\n        l, r = r, l;\n    }\n    if (l == r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n}\n",
            "export const sortedListSum = (lst: Array<string>): Array<string> => {\n    const result: Array<string> = [];\n    for (const s of lst) {\n        if (s.length % 2 === 0) {\n            result.push(s);\n        }\n    }\n    return result.sort((a, b) => (a.length === b.length ? a.localeCompare(b) : a.length - b.length));\n}\n",
            "export const xOrY = (n: number, x: number, y: number): number => {\n    if (n < 2) {\n        return y;\n    }\n    let i: number = 2;\n    let sqrtN: number = Math.floor(Math.sqrt(n));\n    while (i <= sqrtN) {\n        if (n % i === 0) {\n            return y;\n        }\n        i++;\n    }\n    return x;\n}\n",
            "export const doubleTheDifference = (lst: Array<number>): number => {\n    let result = 0;\n    for (const n of lst) {\n        if (n >= 0 && n % 2 === 1) {\n            result += n * n;\n        }\n    }\n    return result;\n}\n",
            "export const compare = (game: Array<number>, guess: Array<number>): Array<number> => {\n    return game.map((x, i) => Math.abs(x - guess[i]))\n}\n",
            "export const strongestExtension = (className: string, extensions: Array<string>): string => {\n    let maxS = Number.MIN_SAFE_INTEGER;\n    let maxExt = \"\";\n    for (const ext of extensions) {\n        let upper = 0;\n        let lower = 0;\n        for (const c of ext) {\n            if (c.isUpperCase()) {\n                upper++;\n            } else if (c.isLowerCase()) {\n                lower++;\n            }\n        }\n        let s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return `${className}.${maxExt}`;\n}\n",
            "export const cycpatternCheck = (a: string, b: string): boolean => {\n    const b_length = b.length;\n    for (let i = 0; i < b_length; i++) {\n        if (b.substring(i) + b.substring(0, i) in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const evenOddCount = (num: number): Array<number> => {\n    const ds = String(Math.abs(num)).split('');\n    const even = ds.filter(d => parseInt(d) % 2 === 0).length;\n    return [even, ds.length - even];\n}\n",
            "export const intToMiniRoman = (num: number): string => {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let res: string = \"\";\n    for (let i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res += numerals[i];\n            num -= values[i];\n        }\n    }\n    return res;\n}\n",
            "export const rightAngleTriangle = (a: number, b: number, c: number): boolean => {\n    const s = [a, b, c].sort();\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}\n",
            "export const findMax = (words: Array<string>): string => {\n    let maxCnt = 0;\n    let maxW = \"\";\n    for (const w of words) {\n        let cnt = w.length;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        }\n        elif (cnt == maxCnt) {\n            maxW = min(maxW, w);\n        }\n    }\n    return maxW;\n}\n",
            "export const eat = (num: number, need: number, remaining: number): Array<number> => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "export const doAlgebra = (operators: Array<string>, operands: Array<number>): number => {\n    const ops = operators.copy();\n    const nums = operands.copy();\n    let i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] === \"**\") {\n            nums[i] = Math.pow(nums[i], nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i--;\n    }\n    let i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        elif (ops[i] === \"//\") {\n            nums[i] = nums[i] / nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i++;\n    }\n    let i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        elif (ops[i] === \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i++;\n    }\n    return nums[0];\n}\n",
            "export const solve = (s: string): string => {\n    const result: string = \"\";\n    for (const ch of s) {\n        if (!ch.isalpha()) {\n            result += ch;\n        } else {\n            if (ch.isupper()) {\n                result += ch.toLowerCase();\n            } else {\n                result += ch.toUpperCase();\n            }\n        }\n    }\n    return result;\n}\n",
            "export const stringToMd5 = (txt: string): string | null => {\n    if (!txt) {\n        return null;\n    }\n    const md5Hash = new hashlib.MD5();\n    const txtBytes = txt.encode();\n    md5Hash.update(txtBytes);\n    const md5Encoded = md5Hash.hexdigest();\n    return md5Encoded;\n}\n",
            "export const generateIntegers = (a: number, b: number): Array<number> => {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n    return [i for i in range(lower, upper + 1) if i % 2 == 0];\n}\n"
        ]
    },
    "ruby": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\"(\")\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = [max_depth, depth].max\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join([\"0\" if a[i] == b[i] else \"1\" for i in range(len(a))])\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    result = []\n    for i in range(len(s)):\n        result.append(s[0:i+1])\n    return result\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \")\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [num_dict[x] for x in numbers.split(\" \") if x in num_dict]\n    num_list.sort()\n    return \" \".join([str(x) for x in num_list])\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [numbers[i - 1], numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [((num - min_num) / (max_num - min_num)) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    return result\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.isupper():\n                flipped += ch.lower()\n            else:\n                flipped += ch.upper()\n        else:\n            flipped += ch\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * x**i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l[i] for i in range(len(l)) if i % 3 == 0)\n    return [sorted_third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l) if l else 0\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(x for i, x in enumerate(l) if i % 2 == 0)\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i+1:i+2]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    l.sort()\n    if len(l) % 2 != 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr((ord(ch) - 97 + 5) % 26 + 97))\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr((ord(ch) - 97 + 21) % 26 + 97))\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([c for c in txt if c not in vowels])\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i+1] - l[i] for i in range(len(l)-1)]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1) & set(l2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    result = []\n    for i, x in enumerate(xs):\n        result.append(x * i)\n    return result[1:]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        x_str = x_str[::-1]\n    else:\n        x_str = x_str[-shift:] + x_str[:-shift]\n    return x_str\n",
            "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isalpha())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if len(evens) == 0:\n        return []\n    return [min(evens), arr.index(min(evens))]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    lst.sort()\n    result = []\n    left, right = 0, len(lst) - 1\n    while left <= right:\n        result.append(lst[left])\n        left += 1\n        if left <= right:\n            result.append(lst[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> Union[float, int]:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = True\n    total = 0\n    for i in range(len(q)):\n        total += q[i]\n        if q[i] != q[len(q) - i - 1]:\n            is_palin = False\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(map(len, lst1))\n    cnt2 = sum(map(len, lst2))\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return abs(a) ** (1.0 / 3.0) % 1 == 0\n",
            "def hex_key(num: str) -> int:\n    return num.count(\"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{bin(dec)[2:]}db\"\n",
            "def is_happy(s: str) -> bool:\n    # Implementation here\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 2 * 9 * (10 ** (n - 2)) if n == 1 else 1\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(map(int, str(n)))\n    return str(digits_sum)\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    for i in range(len(words)):\n        words[i] = \"\".join(sorted(words[i]))\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                coords.append([i, j])\n    coords.sort(key=lambda a: [a[0], -a[1]])\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, reverse=True) if (arr[0] + arr[-1]) % 2 == 0 else sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = list(set(lst))\n    sl.sort()\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\".!? \")\n    return sum(1 for sentence in sentences if len(sentence) >= 2 and sentence[0:2] == \"I \")\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() == ch and ch.lower() or ch.upper()\n            if vowels.find(ch1) >= 0:\n                ch1 = ch1.lower()\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    return sum(map(int, str(max(primes))))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(k.isupper() or k.islower() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n + 1):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (a % 10) * (b % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(',')\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y - 1 if y != x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    return str(round((n + m) / 2.0 + 0.5))\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return sorted([n for n in x if all_digits_odd(str(n))])\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(arr, reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [nums[i] if i % 2 != 0 else sum(nums[:i]) for i in range(n)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(i) for i in n_str)\n    else:\n        return (int(n_str[0]) + int(n_str[1])) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return sum(1 for n in arr if digits_sum(n) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr)-i] and arr[:i] == sorted_arr[len(arr)-i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = lst1.count(lambda n: n % 2 != 0)\n    even_cnt = lst2.count(lambda n: n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    words = [w for w in words if len(w) > 0]\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    max_freq = max(freq.values())\n    result = {}\n    for k, v in freq.items():\n        if v == max_freq:\n            result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, s1 == s1[::-1]]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for d in num if int(d) % 2 == 1)\n        rs = \"the number of odd elements in the string {} of the input.\"\n        result.append(rs.format(n))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = max(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    result = 0\n    for row in grid:\n        result += sum(row) / capacity\n    return result\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count(\"1\")\ndef sort_array(arr: List[int]) -> List[int]:\n    arr.sort(key=lambda x: (count_ones(x), x))\n    return arr\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if w and w.count(c for c in w if c.lower() in consonants) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if vowels.find(word[i]) != -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    arr.sort(reverse=True)\n    return arr[:k]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 1)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != \"-\" or date[5] != \"-\":\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if [1, 3, 5, 7, 8, 10, 12].count(m) and d >= 1 and d <= 31:\n        return True\n    if [4, 6, 9, 11].count(m) and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(txt.count(c) for c in txt if c.lower() == c and ord(c) % 2 == 0)]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)):\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    return max(freq.values()) <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = sum(1 for n in arr if n < 0) % 2 == 1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    result = []\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    for i in range(k):\n        result.append(i % 2 == 0 and 1 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i / 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return 0 if len(odds) == 0 else reduce(lambda x, y: x * y, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(n ** 2 for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if len(txt) == 0:\n        return False\n    last = txt[(txt.rfind(\" \") or -1) + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return idx[-1] if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = neg and max(neg) or None\n    min_pos = pos and min(pos) or None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> Optional[float]:\n    if isinstance(o, str):\n        return float(o.replace(',', '.'))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    raise Exception(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\" \", \"_\").replace(\"___\", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or lst[0].count(\".\") > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    return n < 2 or all(n % i != 0 for i in range(2, int(n**0.5) + 1))\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(word for word in words if is_prime(len(word)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    return sum(int(c) for c in str(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(1 for n in nums if n > 10 and n % 2 == 1 and odds.find(str(n)[0]) >= 0)\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda s: (len(s), s))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -float(\"inf\")\n    max_ext = \"\"\n    for ext in extensions:\n        upper = ext.count(\"A\")\n        lower = ext.count(\"a\")\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[0:i]) != -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = ds.count('0') + ds.count('2') + ds.count('4') + ds.count('6') + ds.count('8')\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    values.length.times do |i|\n        while num >= values[i]\n            res += numerals[i]\n            num -= values[i]\n        end\n    end\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(ch.isalpha() for ch in s):\n        return s[::-1]\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.isupper():\n                result += ch.lower()\n            else:\n                result += ch.upper()\n        else:\n            result += ch\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = md5()\n    md5_hash.update(txt.encode())\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max([2, a])\n    upper = min([8, b])\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "rust": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num.floor()\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_group = paren_string.split()\n    for group in paren_group:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -1\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    for i in range(len(s)):\n        if is_palindrome(s[:i]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    result = []\n    for x, y in zip(a, b):\n        if x == y:\n            result.append('0')\n        else:\n            result.append('1')\n    return ''.join(result)\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join([str(i) for i in range(n)])\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(Counter(s.lower()))\n",
            "from\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "from\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = numbers.copy()\n    sorted_numbers.sort()\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [((num - min_num) / (max_num - min_num)) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    num = n\n    while divisor <= num:\n        if num % divisor == 0:\n            factors.append(divisor)\n            num /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = defaultdict(int)\n    for num in numbers:\n        counts[num] += 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                flipped += ch.upper()\n            else:\n                flipped += ch.lower()\n        else:\n            flipped += ch\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0.0:\n        x1 *= 2.0\n        x2 *= 2.0\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2.0\n        if poly(xs, mid) == 0.0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0.0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2.0\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = [x for i, x in enumerate(l) if i % 3 == 0]\n    sorted_third.sort()\n    return [x if i % 3 == 0 else l[i] for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    result = l.copy()\n    result.sort()\n    result = list(set(result))\n    return result\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += 1\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = [x for i, x in enumerate(l) if i % 2 == 0]\n    sorted_even.sort()\n    return [x if i % 2 == 0 else sorted_even[i // 2] for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return pow(n, 2)\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(sum(fib[-4:]))\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = l.copy()\n    sl.sort()\n    if len(sl) % 2 != 0:\n        return sl[len(sl) // 2]\n    else:\n        return (sl[len(sl) // 2] + sl[len(sl) // 2 - 1]) / 2.0\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for _ in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join(ascii_lowercase[(ascii_lowercase.index(c) + 5) % 26] for c in s)\ndef decode_shift(s: str) -> str:\n    return ''.join(ascii_lowercase[(ascii_lowercase.index(c) - 21) % 26] for c in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(c for c in txt if c not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i] - l[i + 1] for i in range(len(l) - 1)]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    result = []\n    for e in l1:\n        if e in l2:\n            result.append(e)\n    result.sort()\n    return result\n",
            "def largest_prime_factor(n: int) -> int:\n    n = n\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n /= i\n        else:\n            i += 1\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    result = []\n    for i, x in enumerate(xs):\n        result.append(x * i)\n    return result\n",
            "def fibfib(n: int) -> int:\n    a, b, c = 0, 0, 1\n    n = n\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i]) != -1 or (i == len(s) - 1 and vowels.find(s[i:i+2]) != -1):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = defaultdict(int)\n    for n in lst:\n        freqs[n] += 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst.copy()\n    sl.sort()\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = True\n    total = 0\n    for i in range(len(q)):\n        total += q[i]\n        if q[i] != q[len(q) - i - 1]:\n            is_palin = False\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    a = a\n    for i in range(2, a+1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    root = int(pow(a, 1/3))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return format(\"db{:b}db\", dec)\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5)+1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * pow(10, n - 2)\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(c) for c in str(n))\n    return format(digits_sum, 'b')\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    words = [''.join(sorted(word)) for word in words]\n    return ' '.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda x: (x[0], x[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    result = arr.copy()\n    if len(result) == 0:\n        return []\n    if (result[0] + result[-1]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        result.sort()\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            result += chr(shifted - 26)\n        else:\n            result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    lst = sorted(list(set(lst)))\n    if len(lst) < 2:\n        return None\n    return lst[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = findall(r\"[.!?]\\s*\", s)\n    return sum(1 for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \")\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower()\n            if vowels.find(ch1) != -1:\n                ch1 = ch1.upper()\n            if ch1.isalpha():\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    return sum(map(lambda c: int(c), str(max(primes))))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n + 1):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (a % 10) * (b % 10)\n",
            "def count_upper(s: str) -> int:\n    return sum(1 for c in s if c in ascii_uppercase)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return regex(r\"[, ]\").split(s).filter(lambda w: len(w) > 0).map(lambda w: w).collect()\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if y != x:\n        return y - 1\n    return -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    r_avg = (n + m) // 2\n    return \"{:b}\".format(r_avg)\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(int(c) % 2 != 0 for c in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted([num for num in x if all_digits_odd(str(num))])\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [x for x in arr if 1 <= x and x <= 9]\n    sorted_arr.sort()\n    sorted_arr.reverse()\n    return [digit_names[(x - 1) // 10] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = [i for i in range(1, n + 1)]\n    return [nums[i] if i % 2 != 0 else sum(nums[:i]) for i in range(n)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[(i % 2) as int] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return digits_sum(int(n_str[0:2])) * 2 + digits_sum(n * -1)\ndef count_nums(arr: List[int]) -> int:\n    return sum(1 for n in arr if digits_sum(n) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = arr.copy()\n    sorted_arr.sort()\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[i:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:i]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2 != 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = defaultdict(int)\n    words = test.split(\" \")\n    for w in words:\n        freq[w] += 1\n    max_freq = max(freq.values())\n    result = {}\n    for k, v in freq.items():\n        if v == max_freq:\n            result[k] = v\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef reverse_delete(s: str, c: str) -> List[str]:\n    s1 = \"\".join(filter(lambda ch: ch != c, s))\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for c in num if int(c) % 2 == 1)\n        rs = \"the number of odd elements in the string {} of the input.\".format(n)\n        result.append(rs)\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    result = 0\n    for row in grid:\n        for e in row:\n            result += e // capacity\n    return result\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count('1')\ndef sort_array(arr: List[int]) -> List[int]:\n    arr = arr.copy()\n    arr.sort(key=lambda x: (count_ones(x), x))\n    return arr\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    words = [w for w in words if w != \"\"]\n    return [w for w in words if sum([1 for c in w if c.lower() in consonants]) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1, 0, -1):\n        if vowels.find(word[i]) != -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = '{}{}'.format(lst[0], lst[1])\n    s2 = '{}{}'.format(lst[1], lst[0])\n    if check(s1) or check(s2):\n        return 'Yes'\n    return 'No'\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    result = arr.copy()\n    result.sort()\n    return result[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    n = n\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if [1, 3, 5, 7, 8, 10, 12].contains(m) and d >= 1 and d <= 31:\n        return True\n    if [4, 6, 9, 11].contains(m) and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [txt.count(\"a\")]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    freq = defaultdict(int)\n    for i in lst:\n        freq[i] += 1\n    return max(freq.values()) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(-1) % 2 == 1 else 1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = (n * n + 1)\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return 0 if len(odds) == 0 else 1 if len(odds) == 1 else reduce(lambda x, y: x * y, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda x: int(x) ** 2, lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    last = txt[len(txt) - 1]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [e for e in lst if e < 0]\n    pos = [e for e in lst if e > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    else:\n        raise TypeError(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\" \", \"_\").replace(\"-\", \" \")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0].isalpha() or lst[0].isdigit():\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    return ' '.join([word for word in words if is_prime(len(word))])\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return int(n_str[0:2]) * 2 + digits_sum(n * -1)\ndef order_by_points(nums: List[int]) -> List[int]:\n    nums.sort(key=digits_sum)\n    return nums\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(1 for n in nums if n > 10 and n % 2 == 1 and odds.find(str(n)[0]) != -1)\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[(a % 3) % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        (l, r) = (r, l)\n    if l == r:\n        return []\n    return names[l+1:r+1]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = lst.copy()\n    result.sort(key=lambda x: len(x))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0.0 and n % 2.0 == 1.0)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return \"{}.{}\".format(class_name, max_ext)\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for c in ds if int(c) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    num = num\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    return [num + need, remaining - need] if need <= remaining else [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.isupper():\n                result += ch.lower()\n            else:\n                result += ch.upper()\n        else:\n            result += ch\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    md5_hash = md5(txt.encode())\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [x for x in range(lower, upper + 1) if x % 2 == 0]\n"
        ]
    },
    "scala": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    stk = []\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    depth = 0\n    max_depth = 0\n    for ch in paren_string:\n        if ch == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif ch == ')':\n            depth -= 1\n    result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -1000000000\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[:i]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join([\"0\" if x == y else \"1\" for (x, y) in zip(a, b)])\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if len(strs) == 0:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    result = []\n    for i in range(1, len(s) + 1):\n        result.append(s[:i])\n    return result\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \")\n    notes = [note for note in notes if len(note) > 0]\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = [num_dict[n] for n in numbers.split(\" \") if n in num_dict]\n    num_list.sort()\n    return \" \".join([str(n) for n in num_list])\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [numbers[i - 1], numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [((num - min_num) / (max_num - min_num)) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if type(x) == int]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n = n / i\n        else:\n            i += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l[i] for i in range(len(l)) if i % 3 == 0)\n    return [sorted_third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l) if l else 0\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count('7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(l[i] for i in range(len(l)) if i % 2 == 0)\n    return [sorted_even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return pow(n, 2)\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x = x // bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    l.sort()\n    if len(l) % 2 != 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        result += chr(((ord(ch) - 97 + 5) % 26) + 97)\n    return result\ndef decode_shift(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        result += chr(((ord(ch) - 97 + 21) % 26) + 97)\n    return result\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(c for c in txt if c not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(e < t for e in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i] - l[i - 1] for i in range(1, len(l))]\n    return all(d <= 0 for d in diff) or all(d >= 0 for d in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1).intersection(set(l2))))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs[::-1])]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or i == len(s) - 1 and s[i].lower() == 'y':\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if len(evens) == 0:\n        return []\n    return [min(evens), arr.index(min(evens))]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = True\n    total = 0\n    for i in range(len(q)):\n        total += q[i]\n        if q[i] != q[len(q) - i - 1]:\n            is_palin = False\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            @tailrec\n            def loop(a: int) -> int:\n                if a % i == 0:\n                    cnt += 1\n                    loop(a / i)\n                else:\n                    a\n            loop(a)\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a0 = abs(a)\n    root = round(pow(a0, 1.0 / 3.0))\n    return root * root * root == a0\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)\n    return f\"db{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        result.append(\n            \"A+\" if g == 4.0 else\n            \"A\" if g > 3.7 else\n            \"A-\" if g > 3.3 else\n            \"B+\" if g > 3.0 else\n            \"B\" if g > 2.7 else\n            \"B-\" if g > 2.3 else\n            \"C+\" if g > 2.0 else\n            \"C\" if g > 1.7 else\n            \"C-\" if g > 1.3 else\n            \"D+\" if g > 1.0 else\n            \"D\" if g > 0.7 else\n            \"D-\" if g > 0.0 else\n            \"E\"\n        )\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 2 * 9 * pow(10, n - 2)\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(digit) for digit in str(n))\n    return bin(digits_sum)[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for x, i in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    return \" \".join(sorted(words))\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda x: (x[0], -x[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return arr.sort() if (arr[0] + arr[-1]) % 2 == 0 else arr.sort(reverse=True)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(lst)\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\"[.!?]\\\\s*\")\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \"])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        a = x\n        b = y\n        c = z\n        if a + b == c or a + c == b or b + c == a:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = ascii_uppercase + ascii_lowercase\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.isupper() else ch.lower()\n            if ch1 in vowels:\n                ch1 = ch1.translate(str.maketrans(vowels, vowels[2:] + vowels[:2]))\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    return sum(map(int, str(max(primes))))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return not d or all(k.islower() for k in d) or all(k.isupper() for k in d)\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (a % 10) * (b % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(\", \").filter(lambda x: len(x) > 0)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if y != x:\n        return y - 1\n    return -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    return None if n > m else str(bin(int((n + m) / 2 + 0.5)))[2:]\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return sorted([i for i in x if all([int(j) % 2 != 0 for j in str(i)])])\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [digit_names[i - 1] for i in arr if 1 <= i and i <= 9]\n",
            "def f(n: int) -> List[int]:\n    nums = [i for i in range(1, n + 1)]\n    return [nums[i] if i % 2 != 0 else nums[:i].sum() for i in range(n)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return (int(n_str[0]) * 2 + digits_sum(n.abs))\ndef count_nums(arr: List[int]) -> int:\n    return sum(digits_sum(n) > 0 for n in arr)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[:i] == sorted_arr[:i] and arr[i:] == sorted_arr[i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for x in lst1 if x % 2 != 0)\n    even_cnt = sum(1 for x in lst2 if x % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        if w in freq:\n            freq[w] += 1\n        else:\n            freq[w] = 1\n    max_freq = max(freq.values())\n    result = {}\n    for k, v in freq.items():\n        if v == max_freq:\n            result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = [c for c in s if c not in c]\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([i for i in num if int(i) % 2 == 1])\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(ceil(sum(row) / capacity) for row in grid)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if w.count(c for c in w if c.lower() in consonants) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    if check(s1) or check(s2):\n        return \"Yes\"\n    return \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return arr[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(num for num in arr[:k] if len(str(num)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    num = n\n    while num != 1:\n        if num % 2 != 0:\n            collatz.append(num)\n            num = 3 * num + 1\n        else:\n            num = num // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len(list(filter(lambda c: c.islower() and int(c) % 2 == 0, txt))))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not lst[1:] == sorted(lst[1:]):\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    return max(freq.values()) <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if arr.count(0) % 2 == 1:\n        return -1 * sum(abs(e) for e in arr)\n    return sum(abs(e) for e in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n):\n        if i % 2 == 0:\n            seq.append(i / 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(c) for c in str(n) if int(c) % 2 == 1]\n    return 0 if len(odds) == 0 else int(odds[0]) * int(odds[1])\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx = close_idx[::-1]\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(int(ceil(n)) ** 2 for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    last = txt[-1]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [e for e in lst if e < 0]\n    pos = [e for e in lst if e > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\" \", \"_\").replace(\"___\", \" \")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\"\\\\.\")\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or lst[0].count(\".\") > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join([w for w in words if is_prime(len(w))])\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return digits_sum(n * -1) * 2 + digits_sum(n * -1)\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and odds.startswith(str(n)[0])])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [e for e in lst if len(e) % 2 == 0]\n    result.sort(key=lambda x: (len(x), x))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = ds.count('2')\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 ,5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    i = 0\n    while num > 0:\n        if num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n        else:\n            i += 1\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    return [num + need, remaining - need] if need <= remaining else [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.isupper():\n                result += ch.lower()\n            else:\n                result += ch.upper()\n        else:\n            result += ch\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    md5_hash = md5(txt.encode())\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper) if i % 2 == 0]\n"
        ]
    },
    "swift": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(n - mean) for n in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \")\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -1\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        index = s.index(s[i:])\n        if is_palindrome(s[i:]):\n            return s + s[:index][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join([\"0\" if a[i] == b[i] else \"1\" for i in range(len(a))])\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longestS = strs[0]\n    for s in strs:\n        if len(s) > len(longestS):\n            longestS = s\n    return longestS\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i+1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join([str(i) for i in range(n)])\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \")\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    if substring.count > s.count:\n        return 0\n    for i in range(s.count - substring.count + 1):\n        if s[i:i + substring.count] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = [num for num in numbers.split(\" \") if num_dict[num] != None]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [numbers[i - 1], numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [((num - min_num) / (max_num - min_num)) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if type(v) is int]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    if n < 2:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    num = n\n    while divisor <= num:\n        if num % divisor == 0:\n            factors.append(divisor)\n            num /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        else:\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [e for e in l if e > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= floor(sqrt(n)):\n        for i in range(2, floor(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = [e for i, e in enumerate(l) if i % 3 == 0]\n    sorted_third.sort()\n    return [e if i % 3 == 0 else sorted_third[i / 3] for i, e in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted([e for e in l if e % 2 == 0])\n    return [e if e % 2 == 0 else sorted_even[e // 2] for e in l]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 4]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= floor(sqrt(n)):\n        for i in range(2, floor(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return int(pow(n, 2))\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [e + 1 for e in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    x = x\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    l.sort()\n    if len(l) % 2 != 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for _ in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for c in s:\n        result.append(ascii_lowercase[(ord(c) - 97 + 5) % 26])\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for c in s:\n        result.append(ascii_lowercase[(ord(c) - 97 + 21) % 26])\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(c for c in txt if c not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(e < t for e in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i] - l[i - 1] for i in range(1, len(l))]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1).intersection(set(l2))))\n",
            "def largest_prime_factor(n: int) -> int:\n    n = n\n    i = 2\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    result = []\n    for i, x in enumerate(xs):\n        result.append(i * x)\n    return result\n",
            "def fibfib(n: int) -> int:\n    a = 0\n    b = 0\n    c = 1\n    n = n\n    while n > 2:\n        (a, b, c) = (b, c, a + b + c)\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        c = s[i]\n        if c.lower() in vowels or (i == len(s) - 1 and c.lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[shift:] + x_str[:shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum([int(c) for c in s if c.isupper()])\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if len(evens) == 0:\n        return []\n    return [min(evens), arr.index(min(evens))]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0, right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[-i - 1] for i in range(len(q) // 2))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(map(lambda x: len(x), lst1))\n    cnt2 = sum(map(lambda x: len(x), lst2))\n    return cnt1 <= cnt2 and lst1 or lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= floor(sqrt(n)):\n        for i in range(2, floor(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    a = a\n    if a < 2:\n        return False\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    root = round(pow(a, 1.0 / 3.0))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)\n    return \"db\" + binary + \"db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    if 2 <= floor(sqrt(length)):\n        for i in range(2, floor(sqrt(length)) + 1):\n            if length % i == 0:\n                return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * int(pow(10, n - 2))\n",
            "def solve(n: int) -> str:\n    digits_sum = 0\n    while n > 0:\n        digits_sum += n % 2\n        n //= 2\n    return str(digits_sum)\n",
            "def add(lst: List[int]) -> int:\n    return sum(e for i, e in enumerate(lst) if i % 2 == 1 and e % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    return \" \".join([word.sorted() for word in words])\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda x: (x[0], x[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord(\"z\"):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\".\")\n    return sum(1 for sentence in sentences if sentence.startswith(\"I \") and sentence.count(\" \") >= 2)\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    x_int = x if isinstance(x, int) else None\n    y_int = y if isinstance(y, int) else None\n    z_int = z if isinstance(z, int) else None\n    if x_int is not None and y_int is not None and z_int is not None:\n        if x_int + y_int == z_int or x_int + z_int == y_int or y_int + z_int == x_int:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower() if ch.islower() else ch.upper()\n            if ch1 in vowels:\n                ch1 = ch1.upper()\n            else:\n                ch1 = ch1.lower()\n            ch1 = ch1.translate(str.maketrans(ascii_lowercase, ascii_uppercase))\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= floor(sqrt(n)):\n        for i in range(2, floor(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [e for e in lst if is_prime(e)]\n    if len(primes) == 0:\n        return 0\n    largest = str(max(primes))\n    return sum(int(e) for e in largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    return all(k.isupper() for k in d.keys()) or all(k.islower() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    if 2 <= n:\n        for num in range(2, n + 1):\n            if all(num % i != 0 for i in range(2, num)):\n                primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(',')\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y != x else y - 1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = int(n + m / 2 + 0.5)\n    return str(r_avg)\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(int(c) % 2 != 0 for c in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted([n for n in x if all_digits_odd(str(n))])\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [x for x in arr if 1 <= x and x <= 9]\n    sorted_arr.sort(reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [nums[0] + sum(nums[:i]) for i in range(1, n + 1) if nums[i - 1] % 2 != 0] + [nums[0] * sum(nums[:i]) for i in range(1, n + 1) if nums[i - 1] % 2 == 0]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum([int(i) for i in n_str])\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len(list(filter(lambda x: digits_sum(x) > 0, arr)))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for e in lst1 if e % 2 != 0)\n    even_cnt = sum(1 for e in lst2 if e % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    max_freq = max(freq.values())\n    result = {}\n    for k, v in freq.items():\n        if v == max_freq:\n            result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = [c for c in s if c not in c]\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([c for c in num if int(c) % 2 == 1])\n        rs = \"the number of odd elements in the string {} of the input.\"\n        result.append(rs.format(n))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda x: ceil(sum(x) / capacity), grid))\n",
            "def count_ones(num: int) -> int:\n    return str(num).count(\"1\")\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=count_ones)\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [word for word in words if word.count(word.lower()) == n and word.lower().count(c) for c in consonants]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        index = word.index(word[i])\n        if vowels.find(word[index]) != -1 and vowels.find(word[word.index(word[index - 1])]) == -1 and vowels.find(word[word.index(word[index + 1])]) == -1:\n            return word[index]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return check(s1) or check(s2) ? \"Yes\" : \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return arr.sort()[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(e for i, e in enumerate(lst) if i % 2 == 0 and e % 2 != 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(e <= 2 for e in arr[:k])\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    n = n\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if date.count != 10 or date[date.index(date.startIndex, offsetBy=2)] != \"-\" or date[date.index(date.startIndex, offsetBy=5)] != \"-\":\n        return False\n    m = int(date[date.index(date.startIndex, offsetBy=2)])\n    d = int(date[date.index(date.startIndex, offsetBy=3) : date.index(date.startIndex, offsetBy=5)])\n    if [1, 3, 5, 7, 8, 10, 12].contains(m) and d >= 1 and d <= 31:\n        return True\n    if [4, 6, 9, 11].contains(m) and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [txt.lower()[::2]]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)):\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    return max(freq.values()) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= floor(sqrt(n)):\n        for i in range(2, floor(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = arr.count(-1) % 2 == 1 and -1 or 1\n    return sign * sum(abs(e) for e in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 and 1 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    if 2 <= n:\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                seq.append(i / 2 + 1)\n            else:\n                seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(c) for c in str(n) if int(c) % 2 == 1]\n    return 0 if len(odds) == 0 else reduce(lambda x, y: x * y, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for (i, ch) in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(int(ceil(e)) ** 2 for e in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if len(txt) == 0:\n        return False\n    last = txt[txt.rfind(\" \"):]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return idx[-1] if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [e for e in lst if e < 0]\n    pos = [e for e in lst if e > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\" \", \"_\").replace(\"   \", \"-\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or not suf.__contains__(lst[1]) or len(lst[0]) == 0 or not lst[0][0].isalpha() or lst[0].__contains__(\"0\") or lst[0].__contains__(\"1\") or lst[0].__contains__(\"2\") or lst[0].__contains__(\"3\") or lst[0].__contains__(\"4\") or lst[0].__contains__(\"5\") or lst[0].__contains__(\"6\") or lst[0].__contains__(\"7\") or lst[0].__contains__(\"8\") or lst[0].__contains__(\"9\"):\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= floor(sqrt(n)):\n        for i in range(2, floor(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join([word for word in words if is_prime(len(word))])\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum([int(i) for i in n_str])\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(1 for n in nums if n > 10 and n % 2 == 1 and odds.find(str(n)) != -1)\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        (l, r) = (r, l)\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [e for e in lst if e.count % 2 == 0]\n    return result.sort(key=lambda x: x.count)\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    if 2 <= floor(sqrt(n)):\n        for i in range(2, floor(sqrt(n)) + 1):\n            if n % i == 0:\n                return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum([x * x for x in lst if x >= 0 and x.__mod__(2) == 1])\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.endswith(b[-i:] + b[:i]):\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for c in ds if int(c) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 , 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    num = num\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = set(w)\n        if len(cnt) > max_cnt:\n            max_cnt = len(cnt)\n            max_w = w\n        elif len(cnt) == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators\n    nums = operands\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.remove(nums[i + 1])\n            ops.remove(ops[i])\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(nums[i + 1])\n            ops.remove(ops[i])\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.remove(nums[i + 1])\n            ops.remove(ops[i])\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(nums[i + 1])\n            ops.remove(ops[i])\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(nums[i + 1])\n            ops.remove(ops[i])\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.isupper():\n                result += ch.lower()\n            else:\n                result += ch.upper()\n        else:\n            result += ch\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    txt_bytes = txt.encode()\n    md5_encoded = md5(txt_bytes).hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [x for x in range(lower, upper + 1) if x % 2 == 0]\n"
        ]
    },
    "typescript": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    stk = []\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(n - mean) for n in numbers) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    groups = paren_string.split(\" \")\n    for group in groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -float('inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(['0' if a[i] == b[i] else '1' for i in range(len(a))])\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = { \"o\": 4, \"o|\": 2, \".|\": 1 }\n    notes = [n for n in music_string.split(\" \") if len(n) > 0]\n    return [durations[n] for n in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict: Dict[str, int] = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list: List[str] = [x for x in numbers.split(\" \") if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [numbers[i - 1], numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [((num - min_num) / (max_num - min_num)) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if type(v) is int and v.is_integer()]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = defaultdict(int)\n    for num in numbers:\n        counts[num] += 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    result = []\n    for ch in s:\n        if ch.isalpha():\n            result.append(ch.upper() if ch.islower() else ch.lower())\n        else:\n            result.append(ch)\n    return ''.join(result)\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [e for e in l if e > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * math.pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while math.fabs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l[i] for i in range(len(l)) if i % 3 == 0)\n    return [l[i] if i % 3 != 0 else sorted_third[i // 3] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).split(\"7\").count(\"7\") - 1\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = [x for x in l if x % 2 == 0]\n    sorted_even.sort()\n    return [x if x % 2 == 1 else sorted_even[x // 2] for x in l]\n",
            "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.append(s[i:])\n        else:\n            result.append(s[i+1:i+3])\n            result.append(s[i])\n    return \"\".join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return pow(n, 2)\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x = x // bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    l.sort()\n    if len(l) % 2 != 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr(ord(ch) + 5))\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr(ord(ch) - 21))\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([c for c in txt if c not in vowels])\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i] - l[i - 1] for i in range(1, len(l))]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1).intersection(set(l2))))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(list(range(n + 1)))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs, 1)]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a = 0\n    b = 0\n    c = 1\n    while n > 2:\n        [a, b, c] = [b, c, a + b + c]\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or i == len(s) - 1 and s[i].lower() == \"y\":\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1].join(\"\")\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isalpha())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = [v for v, c in freqs.items() if c >= v]\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    start = 0\n    right = len(sl) - 1\n    while start <= right:\n        result.append(sl[start])\n        start += 1\n        if start <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[-i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = round(a ** (1.0 / 3.0))\n    return root ** 3 == a\n",
            "def hex_key(num: str) -> int:\n    return len([x for x in num if \"2357BD\".__contains__(x)])\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)\n    return f\"db{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    # Implementation here\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * (10 ** (n - 2))\n",
            "def solve(n: int) -> str:\n    digits_sum = 0\n    for d in str(n):\n        digits_sum += int(d)\n    return str(bin(digits_sum))[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for x in lst if x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(' ')\n    for i in range(len(words)):\n        words[i] = ''.join(sorted(words[i]))\n    return ' '.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda x: x[0] == x[1])\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    sorted_arr = arr.copy()\n    if len(sorted_arr) <= 1:\n        return sorted_arr\n    if ((sorted_arr[0] + sorted_arr[-1]) % 2 == 0):\n        sorted_arr.sort()\n    else:\n        sorted_arr.sort(reverse=True)\n    return sorted_arr\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ch.encode('utf-8').decode('utf-8') + 4\n        if shifted > 'z'.encode('utf-8').decode('utf-8'):\n            shifted -= 26\n        result.append(shifted)\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = list(set(lst))\n    sl.sort()\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\".!? \")\n    return sum(1 for s in sentences if len(s) >= 2 and s[:2] == \"I \")\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.lower() == ch else ch.upper()\n            if ch1 in vowels:\n                ch1 = ch1.lower()\n            result.append(ch1)\n        else:\n            result.append(ch)\n    return \"\".join(result)\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = str(max(primes))\n    return sum(int(c) for c in largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return len(d) == 0 or all(k.isupper() for k in d.keys()) or all(k.islower() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(',')\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y != x else y - 1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) // 2\n    return bin(r_avg)[2:]\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(int(c) % 2 != 0 for c in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted([n for n in x if all_digits_odd(str(n))])\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [x for x in arr if 1 <= x and x <= 9]\n    sorted_arr.sort(key=lambda x: x - 1)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = [i + 1 for i in range(n)]\n    return [nums[i] if nums[i] % 2 != 0 else sum(nums[:i]) for i in range(n)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(i) for i in n_str)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len([i for i in arr if digits_sum(i) > 0])\n",
            "from\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\ng\ng\nfrom\nfrom\nfrom\nfrom\nfrom\ng\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\ng\nfrom\nfrom\nfrom\ng\nfrom\ng\nfrom\nfrom\nfrom\nfrom\ng\nfrom\nfrom\nfrom\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\ng\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2 != 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq: Dict[str, int] = {}\n    words = test.split(\" \")\n    for w in words:\n        if w in freq:\n            freq[w] += 1\n        else:\n            freq[w] = 1\n    max_freq = max(freq.values())\n    result = {}\n    for k, v in freq.items():\n        if v == max_freq:\n            result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(list(filter(lambda ch: c not in ch, s.split(''))))\n    return [s1, 'yes' if is_palindrome(s1) else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = [c for c in num if ord(c) % 2 == 1]\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(len(n))))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(sum(n // capacity for n in row) for row in grid)\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count('1')\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=count_ones)\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if [c for c in w if c.lower() in consonants].count(c) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if vowels.find(word[i]) > -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return arr[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for x in lst if x % 2 != 0 and x % 2 == 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != \"-\" or date[5] != \"-\":\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if [1, 3, 5, 7, 8, 10, 12].count(m) and d >= 1 and d <= 31:\n        return True\n    if [4, 6, 9, 11].count(m) and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [c for c in txt if c.isalpha() and ord(c) % 2 == 0]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    freq = Counter(lst)\n    return max(freq.values()) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = arr.count(-1) % 2 == 1 and -1 or 1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 and 1 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i / 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return 0 if len(odds) == 0 else reduce(lambda a, b: a * b, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda x: x ** 2, lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    last = txt[txt.rfind(\" \") + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx, default=-1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = neg[0] if neg else None\n    min_pos = pos[0] if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = float(a) if type(a) == str else a\n    b1 = float(b) if type(b) == str else b\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"   \", \"-\").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or [c for c in lst[0] if c.isdigit()] and len([c for c in lst[0] if c.isdigit()]) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join([w for w in words if is_prime(len(w))])\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(i) for i in n_str)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and odds.startswith(str(n)[0])])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        [l, r] = [r, l]\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [e for e in lst if len(e) % 2 == 0]\n    return sorted(result, key=lambda x: len(x))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n ** 2 for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 , 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\" , \"v\", \"iv\", \"i\"]\n    res = []\n    for i in range(len(values)):\n        while num >= values[i]:\n            res.append(numerals[i])\n            num -= values[i]\n    return \"\".join(res)\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w if max_w < w else w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = [...operators]\n    nums = [...operands]\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = []\n    for ch in s:\n        if ch.isalpha():\n            result.append(ch)\n        else:\n            result.append(ch.lower())\n    return ''.join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(txt.encode())\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [i + lower for i in range(upper - lower + 1) if i % 2 == 0]\n"
        ]
    }
}