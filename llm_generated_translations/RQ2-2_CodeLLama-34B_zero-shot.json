{
    "cpp": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string\n    parens = parens.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    buf = istringstream(paren_string)\n    paren_groups = [istream_iterator<string>(buf), {}]\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    result = []\n    for s in strs:\n        if s.find(substring) != -1:\n            result.append(s)\n    return result\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = reduce(lambda x, y: x * y, numbers)\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -sys.maxsize - 1\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[i:] == s[i:][::-1]:\n            return s + s[i:][::-1][1:]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(map(lambda c: '0' if c == b[i] else '1', a))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if len(strs) == 0:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[0:i+1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    a = [i for i in range(n + 1)]\n    return ' '.join(str(i) for i in a)\n",
            "def count_distinct_characters(s: str) -> int:\n    dc = set()\n    for c in s:\n        dc.add(c.lower())\n    return len(dc)\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    buf = istringstream(music_string)\n    notes = [istream_iterator<string>(buf), {}]\n    result = []\n    for note in notes:\n        result.append(durations[note])\n    return result\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [x for x in numbers.split() if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        res = []\n        for num in numbers:\n            res.append((num - min_num) / (max_num - min_num))\n        return res\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    filtered_values = []\n    for value in values:\n        try:\n            int_value = any_cast(value)\n            filtered_values.append(int_value)\n        except bad_any_cast:\n            continue\n    return filtered_values\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = []\n    for num in numbers:\n        if counts[num] == 1:\n            res.append(num)\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return reduce(lambda x, y: x + y, strs, \"\")\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    filtered = []\n    for str in strs:\n        if str.startswith(prefix_str):\n            filtered.append(str)\n    return filtered\n",
            "def get_positive(l: List[int]) -> List[int]:\n    result = []\n    for x in l:\n        if x > 0:\n            result.append(x)\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = []\n    for i in range(0, len(l), 3):\n        sorted_third.append(l[i])\n    sorted_third.sort()\n    result = []\n    for i in range(0, len(l)):\n        if i % 3 == 0:\n            result.append(sorted_third[i // 3])\n        else:\n            result.append(l[i])\n    return result\n",
            "def list_unique(l: List[int]) -> List[int]:\n    result = l\n    result.sort()\n    result = list(dict.fromkeys(result))\n    return result\n",
            "def max_element(l: List[int]) -> int:\n    if len(l) == 0:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            str_i = str(i)\n            cnt += str_i.count('7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = []\n    for i in range(0, len(l), 2):\n        sorted_even.append(l[i])\n    sorted_even.sort()\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(sorted_even[i // 2])\n        else:\n            result.append(l[i])\n    return result\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return pow(n, 2)\n",
            "def incr_list(l: List[int]) -> List[int]:\n    result = []\n    for i in l:\n        result.append(i + 1)\n    return result\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(-num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = l\n    sl.sort()\n    if len(l) % 2 != 0:\n        return sl[len(l) / 2]\n    else:\n        return (sl[len(l) / 2] + sl[len(l) / 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(((ord(ch) - 97 + 5) % 26) + 97)\n    return result\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(((ord(ch) - 97 + 21) % 26) + 97)\n    return result\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in txt:\n        if vowels.find(ch) == -1:\n            result += ch\n    return result\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = []\n    for i in range(len(l) - 1):\n        diff.append(l[i + 1] - l[i])\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    s1 = set(l1)\n    s2 = set(l2)\n    result = []\n    for i in s1:\n        if i in s2:\n            result.append(i)\n    return result\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    sum = 0\n    for i in range(n + 1):\n        sum += i\n    return sum\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a = 0\n    b = 0\n    c = 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower()) != -1 or (i == len(s) - 1 and s[i].lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        x_str = x_str[::-1]\n        return x_str\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(map(lambda c: ord(c) if c.isupper() else 0, s))\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    buf = istringstream(s)\n    words = [istream_iterator<string>(buf), {}]\n    apples = stoi(*(find(words.begin(), words.end(), \"apples\") - 1))\n    oranges = stoi(*(find(words.begin(), words.end(), \"oranges\") - 1))\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = []\n    for n in arr:\n        if n % 2 == 0:\n            evens.append(n)\n    if len(evens) == 0:\n        return []\n    minEven = min(evens)\n    return [minEven, arr.index(minEven)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = []\n    for p in freqs.items():\n        if p[1] >= p[0]:\n            good_vals.append(p[0])\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst\n    sl.sort()\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    idxs = list(range(len(q)))\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in idxs)\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(map(lambda s: len(s), lst1))\n    cnt2 = sum(map(lambda s: len(s), lst2))\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    if a < 2:\n        return False\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = round(pow(a, 1.0 / 3))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)[2:]\n    binary = binary.rstrip('0')\n    return f'db{binary}db'\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append(\"A+\")\n        elif grade > 3.7:\n            result.append(\"A\")\n        elif grade > 3.3:\n            result.append(\"A-\")\n        elif grade > 3.0:\n            result.append(\"B+\")\n        elif grade > 2.7:\n            result.append(\"B\")\n        elif grade > 2.3:\n            result.append(\"B-\")\n        elif grade > 2.0:\n            result.append(\"C+\")\n        elif grade > 1.7:\n            result.append(\"C\")\n        elif grade > 1.3:\n            result.append(\"C-\")\n        elif grade > 1.0:\n            result.append(\"D+\")\n        elif grade > 0.7:\n            result.append(\"D\")\n        elif grade > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, floor(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * pow(10, n - 2)\n",
            "def solve(n: int) -> str:\n    n_str = str(n)\n    digits_sum = sum(int(d) for d in n_str)\n    binary = bin(digits_sum)[2:]\n    binary = binary.lstrip('0')\n    return binary\n",
            "def add(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result\n",
            "def anti_shuffle(s: str) -> str:\n    buf = istringstream(s)\n    words = vector(istream_iterator(buf), {})\n    for_each(words.begin(), words.end(), lambda word: sort(word.begin(), word.end()))\n    return accumulate(words.begin(), words.end(), string(), lambda a, b: move(a += a.empty() ? b : \" \" + b))\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda a: (a[0], -a[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    result = arr.copy()\n    if (arr[0] + arr[len(arr) - 1]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        result.sort()\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ch + 4\n        if shifted > 'z':\n            shifted -= 26\n        result += shifted\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = lst[:]\n    sl.sort()\n    sl = list(set(sl))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r\"[.!?]\\s*\", s)\n    return len([sentence for sentence in sentences if sentence.startswith(\"I \") and len(sentence) >= 2])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if type(x) == int and type(y) == int and type(z) == int:\n        int_x = x\n        int_y = y\n        int_z = z\n        if (int_x + int_y == int_z) or (int_x + int_z == int_y) or (int_y + int_z == int_x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower() if ch.islower() else ch.upper()\n            if vowels.find(ch1) != -1:\n                ch1 = ch1 + 2\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def skjkasdkd(lst: List[int]) -> int:\n    primes = list(filter(isPrime, lst))\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum(map(lambda d: int(d), str(largest)))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return all(map(lambda p: all(map(lambda c: c.islower(), p[0])), d.items()) or all(map(lambda p: all(map(lambda c: c.isupper(), p[0])), d.items())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and vowels.find(s[i]) != -1:\n            count += 1\n    return count\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    pile = []\n    for i in range(n):\n        pile.append(n + 2 * i)\n    return pile\n",
            "def words_string(s: str) -> List[str]:\n    re = re.compile(\"[, ]\")\n    words = re.split(s)\n    words = list(filter(lambda word: len(word) != 0, words))\n    return words\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y != x ? y - 1 : -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) / 2.0 + 0.5\n    result = bin(r_avg)[2:]\n    result = result.rstrip('0')\n    return result\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    result = []\n    for num in x:\n        if all_digits_odd(str(num)):\n            result.append(num)\n    result.sort()\n    return result\ndef all_digits_odd(s: str) -> bool:\n    for digit in s:\n        if digit % 2 == 0:\n            return False\n    return True\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    result = list(map(lambda x: digit_names[x-1], sorted_arr))\n    return result\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    result = []\n    for i in nums:\n        if i % 2 != 0:\n            result.append(sum(nums[:i]))\n        else:\n            result.append(reduce(lambda x, y: x * y, nums[:i]))\n    return result\n",
            "def even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    return len(list(filter(lambda n: sum(map(int, str(n))) > 0, arr))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = arr\n    sorted_arr.sort()\n    for i in range(len(arr)):\n        if arr[i:].__eq__(sorted_arr[i:]) and arr[:i].__eq__(sorted_arr[len(arr) - i:]):\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2 != 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    buf = istringstream(test)\n    words = vector(istream_iterator(buf), {})\n    for w in words:\n        freq[w]++\n    result = {}\n    if freq.size() > 0:\n        max_freq = max_element(freq.begin(), freq.end(), [](const auto& p1, const auto& p2) { return p1.second < p2.second; })->second\n        for [k, v] in freq:\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = s\n    s1 = ''.join(ch for ch in s1 if ch not in c)\n    return [s1, 'yes' if s1 == s1[::-1] else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for c in num if c % 2 == 1)\n        rs = \"the number of odd elements in the string i of the input.\"\n        rs = rs.replace('i', str(n)[0])\n        result.append(rs)\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(ceil(sum(row) / capacity) for row in grid)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    result = arr.copy()\n    result.sort(key=lambda x: (bin(x).count('1'), x))\n    return result\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    result = []\n    for w in words:\n        if sum(1 for c in w if c.lower() in consonants) == n:\n            result.append(w)\n    return result\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = arr\n    sorted_arr.sort()\n    ans = sorted_arr[len(sorted_arr) - k:]\n    return ans\n",
            "def solution(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            result += lst[i]\n    return result\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(map(lambda x: x if len(str(x)) <= 2 else 0, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12:\n        return d >= 1 and d <= 31\n    if m == 4 or m == 6 or m == 9 or m == 11:\n        return d >= 1 and d <= 30\n    if m == 2:\n        return d >= 1 and d <= 29\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    iss = istringstream(txt)\n    if txt.find(\" \") != string::npos:\n        return vector<string>(istream_iterator<string>(iss), {})\n    else if txt.find(\",\") != string::npos:\n        result = []\n        for iss, token in pair{istringstream(txt), string()}:\n            getline(iss, token, ',')\n            result.push_back(token)\n        return result\n    else:\n        return [to_string(count_if(txt.begin(), txt.end(), [&](char c) {\n            return islower(c) && c % 2 == 0;\n        }))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not is_sorted(lst.begin(), lst.end()):\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] += 1\n    return lst.size() == 0 or max(freq.begin(), freq.end(), lambda a, b: a.second < b.second).second <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    if interval1[0] < interval2[0]:\n        l = interval2[0]\n    else:\n        l = interval1[0]\n    if interval1[1] < interval2[1]:\n        r = interval1[1]\n    else:\n        r = interval2[1]\n    length = r - l\n    return \"YES\" if length > 0 and isPrime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = sum(1 for n in arr if n < 0) % 2 == 1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = []\n    for c in str(n):\n        d = ord(c) - ord('0')\n        if d % 2 == 1:\n            odds.append(d)\n    return 0 if len(odds) == 0 else reduce(lambda x, y: x * y, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i in range(len(s)):\n        if s[i] == '[':\n            open_idx.append(i)\n        elif s[i] == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: pow(ceil(n), 2), lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if len(txt) == 0:\n        return False\n    last = txt[txt.rfind(\" \") + 1:]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = []\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            idx.append(i)\n    return -1 if len(idx) == 0 else max(idx)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = []\n    pos = []\n    for i in lst:\n        if i < 0:\n            neg.append(i)\n        elif i > 0:\n            pos.append(i)\n    max_neg = max(neg) if len(neg) > 0 else None\n    min_pos = min(pos) if len(pos) > 0 else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if type(a) == str:\n        a_str = a\n        a_str = a_str.replace(',', '.')\n        a1 = float(a_str)\n    elif type(a) == int:\n        a1 = float(a)\n    elif type(a) == float:\n        a1 = a\n    else:\n        raise RuntimeError(\"Type Error\")\n    if type(b) == str:\n        b_str = b\n        b_str = b_str.replace(',', '.')\n        b1 = float(b_str)\n    elif type(b) == int:\n        b1 = float(b)\n    elif type(b) == float:\n        b1 = b\n    else:\n        raise RuntimeError(\"Type Error\")\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    result = txt\n    result = re.sub(r\"\\s{3,}\", \"-\", result)\n    result = result.replace(\" \", \"_\")\n    return result\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = []\n    for token in file_name.split(\".\"):\n        lst.append(token)\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or sum(1 for c in lst[0] if c.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    words = list(filter(lambda w: is_prime(len(w)), words)\n    return ' '.join(words)\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def order_by_points(nums: List[int]) -> List[int]:\n    result = nums\n    result.sort(key=lambda x: sum(int(d) for d in str(x)))\n    return result\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(1 for n in nums if n > 10 and n % 2 == 1 and odds.find(str(n)[0]) != -1)\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1: r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        if len(s) % 2 == 0:\n            result.append(s)\n    result.sort(key=lambda a: (len(a), a))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n if n >= 0 and n % 2 == 1 else 0 for n in lst)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    result = []\n    for x, y in zip(game, guess):\n        result.append(abs(x - y))\n    return result\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -sys.maxsize\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return \"{0}.{1}\".format(class_name, max_ext)\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i]) != -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators\n    nums = operands\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(map(str.isalpha, s)):\n        return s[::-1]\n    result = \"\"\n    for ch in s:\n        if not str.isalpha(ch):\n            result += ch\n        elif str.isupper(ch):\n            result += str.lower(ch)\n        elif str.islower(ch):\n            result += str.upper(ch)\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt.empty():\n        return None\n    md5_context = MD5_CTX()\n    MD5_Init(md5_context)\n    MD5_Update(md5_context, txt.c_str(), txt.length())\n    hash_bytes = [0] * MD5_DIGEST_LENGTH\n    MD5_Final(hash_bytes, md5_context)\n    md5_encoded = \"\"\n    for i in range(MD5_DIGEST_LENGTH):\n        md5_encoded += format(\"{:02x}\", static_cast<int>(hash_bytes[i]))\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    numbers = []\n    for n in range(lower, upper + 1):\n        if n % 2 == 0:\n            numbers.append(n)\n    return numbers\n"
        ]
    },
    "csharp": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.remove(stk[-1])\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(map(lambda x: abs(x - mean), numbers))\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(0, len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = [s for s in paren_string.split(\" \") if len(s) > 0]\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strs))\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    nSum = sum(numbers)\n    nProduct = reduce(lambda a, b: a * b, numbers, 1)\n    return [nSum, nProduct]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = int.MinValue\n    result = List[int]()\n    for num in numbers:\n        max_so_far = Math.Max(max_so_far, num)\n        result.Add(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[i:] == s[i:][::-1]:\n            return s + s[::-1][:i]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(map(lambda x, y: '0' if x == y else '1', a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if len(strs) == 0:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[0:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = [note for note in music_string.split(\" \") if len(note) > 0]\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(0, s.length - substring.length + 1):\n        if s.substring(i, substring.length) == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = list(filter(lambda x: x in num_dict, numbers.split(\" \")))\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: isinstance(x, int), values))\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = [num for num in numbers if counts[num] == 1]\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return list(filter(lambda s: s.startswith(prefix_str), strs))\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda num: num > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, math.floor(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * math.pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = l.Where((x, i) => i % 3 == 0).OrderBy(x => x).ToList()\n    return l.Select((x, i) => i % 3 == 0 ? sorted_third[i / 3] : x).ToList()\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return l.distinct().order_by(x => x).to_list()\n",
            "def max_element(l: List[int]) -> int:\n    if len(l) == 0:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len([x for x in str(i) if x == '7'])\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = l.Where((x, i) => i % 2 == 0).OrderBy(x => x).ToList()\n    return l.Select((x, i) => i % 2 == 0 ? sorted_even[i / 2] : x).ToList()\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, math.floor(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return list(map(lambda i: i + 1, l))\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x /= bas\n    digits.reverse()\n    return \"\".join(digits)\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (float)(a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) / 2]\n    else:\n        return (sl[len(l) / 2] + sl[len(l) / 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == new string(txt.Reverse().ToArray())\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = s.Select(ch => (char)(((ch - 97 + 5) % 26) + 97))\n    return string.Join(\"\", result)\ndef decode_shift(s: str) -> str:\n    result = s.Select(ch => (char)(((ch - 97 + 21) % 26) + 97))\n    return string.Join(\"\", result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(c for c in txt if c not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = l.zip(l.skip(1), (x, y) => y - x)\n    return diff.all(x => x <= 0) || diff.all(x => x >= 0)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return l1.intersect(l2).distinct().order_by(x => x).to_list()\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(0, n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return xs.Select((x, i) => x * i).Skip(1).ToList()\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a = 0\n    b = 0\n    c = 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower()) != -1 or (i == len(s) - 1 and s[i].lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = arr.Where(n => n % 2 == 0).ToList()\n    if evens.Count == 0:\n        return new List<int>()\n    minEven = evens.Min()\n    return new List<int> { minEven, arr.IndexOf(minEven) }\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    goodVals = [p[0] for p in filter(lambda p: p[1] >= p[0], freqs.items())]\n    return max(goodVals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(0, len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(map(lambda x: len(x), lst1))\n    cnt2 = sum(map(lambda x: len(x), lst2))\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    if a < 2:\n        return False\n    for i in range(2, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            while a % i == 0:\n                a /= i\n            return False\n    return True\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = int(round(pow(a, 1.0 / 3.0)))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return len([x for x in num if x in \"2357BD\"])\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = str(dec, 2)\n    return f\"db{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, math.floor(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * (int)(math.pow(10, n - 2))\n",
            "def solve(n: int) -> str:\n    digitsSum = sum(int(d) for d in str(n))\n    return str(digitsSum, 2)\n",
            "def add(lst: List[int]) -> int:\n    return sum(filter(lambda x, i: i % 2 == 1 and x % 2 == 0, lst))\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(' ').select(word => new string(word.order_by(c => c).to_array())).to_list()\n    return string.join(' ', words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda a: (a[1], a[0]), reverse=True)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[len(arr) - 1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = lst.distinct().order_by((a) => a).to_list()\n    if sl.count < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r'[.!?]\\s*', s)\n    return len(list(filter(lambda sentence: len(sentence) >= 2 and sentence[0:2] == 'I ', sentences)))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        int_x = int(x)\n        int_y = int(y)\n        int_z = int(z)\n        if (int_x + int_y == int_z) or (int_x + int_z == int_y) or (int_y + int_z == int_x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def skjkasdkd(lst: List[int]) -> int:\n    primes = list(filter(lambda n: is_prime(n), lst))\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum(map(lambda d: int(d), str(largest)))\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, math.floor(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    return all(k.all(c.islower()) for k in d.keys()) or all(k.all(c.isupper()) for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return len(list(filter(lambda c: c in vowels, s[::2])))\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return list(map(lambda i: n + 2 * i, range(0, n)))\n",
            "def words_string(s: str) -> List[str]:\n    return list(filter(lambda w: len(w) > 0, re.split(r\"[, ]\", s)))\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y != x ? y - 1 : -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = int((m + n) / 2.0 + 0.5)\n    return str(r_avg, 2)\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return list(filter(lambda num: all_digits_odd(str(num)), sorted(filter(lambda num: all_digits_odd(str(num)), x)))\ndef all_digits_odd(s: str) -> bool:\n    return all(map(lambda digit: digit % 2 != 0, s))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = arr.where(x => 1 <= x && x <= 9).order_by_descending(x => x).to_list()\n    return sorted_arr.select(x => digit_names[x - 1]).to_list()\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return list(map(lambda i: i % 2 != 0 ? sum(nums.take(i)) : nums.take(i).aggregate(1, (x, y) => x * y), nums))\n",
            "def even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\ndef is_palindrome(txt: str) -> bool:\n    return txt == ''.join(reversed(txt))\n",
            "def count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if sum(int(d) for d in str(n)) > 0])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = len([n for n in lst1 if n % 2 != 0])\n    even_cnt = len([n for n in lst2 if n % 2 == 0])\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \").where(w => w.length > 0).toList()\n    foreach (var w in words) {\n        freq[w] = freq.containsKey(w) ? freq[w] + 1 : 1\n    }\n    result = {}\n    if (freq.count > 0) {\n        var maxFreq = freq.values.max()\n        foreach (var kv in freq) {\n            if (kv.value == maxFreq) {\n                result[kv.key] = kv.value\n            }\n        }\n    }\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, 'yes' if s1 == ''.join(reversed(s1)) else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for d in num if d % 2 == 1)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    minSum = 0\n    curSum = 0\n    for n in nums:\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    if minSum == 0:\n        minSum = min(nums)\n    return minSum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(grid) / capacity\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return arr.sort(key=lambda x: (Global.CountOnes(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(' ').where(w => w.length > 0).to_array()\n    return words.where(w => w.count(c => consonants.contains(char.to_lower(c))) == n).to_list()\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if vowels.contains(word[i]) and not vowels.contains(word[i - 1]) and not vowels.contains(word[i + 1]):\n            return word[i].to_string()\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    return arr.OrderBy(x => x).Skip(arr.Count - k).ToList()\n",
            "def solution(lst: List[int]) -> int:\n    return sum(filter(lambda x: x % 2 != 0, filter(lambda x: x % 2 == 0, lst)))\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda n: len(str(n)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if txt.contains(\" \"):\n        return txt.split(\" \").to_list()\n    elif txt.contains(\",\"):\n        return txt.split(\",\").to_list()\n    else:\n        return [txt.where(c => char.is_lower(c) && (int)c % 2 == 0).count().to_string()]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not lst[1:].Select((n, i) => lst[i] <= n).All(a => a):\n        return false\n    freq = new Dictionary[int, int]()\n    foreach (var i in lst):\n        freq[i] = freq.GetValueOrDefault(i, 0) + 1\n    return freq.Values.DefaultIfEmpty(0).Max() <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = len(list(filter(lambda n: n < 0, arr))) % 2 == 1 ? -1 : 1\n    return sign * sum(list(map(lambda n: abs(n), arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 ? 1 : min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = list(filter(lambda d: int(d) % 2 == 1, str(n)))\n    if len(odds) > 0:\n        return reduce(lambda x, y: x * y, odds)\n    return 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i in range(len(s)):\n        if s[i] == '[':\n            open_idx.append(i)\n        elif s[i] == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i0 = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i0 < l and idx < close_idx[i0]:\n            cnt += 1\n            i0 += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: int(math.pow(math.ceil(n), 2)), lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rfind(' ') + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = filter(lambda i: arr[i] < arr[i - 1], range(1, len(arr)))\n    return max(idx, default=-1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = list(filter(lambda i: i < 0, lst))\n    pos = list(filter(lambda i: i > 0, lst))\n    maxNeg = neg.Count > 0 ? neg.Max() : None\n    minPos = pos.Count > 0 ? pos.Min() : None\n    return [maxNeg, minPos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str):\n        a1 = float(a.replace(\",\", \".\"))\n    elif isinstance(a, int):\n        a1 = float(a)\n    elif isinstance(a, float):\n        a1 = a\n    else:\n        raise Exception(\"Type Error\")\n    if isinstance(b, str):\n        b1 = float(b.replace(\",\", \".\"))\n    elif isinstance(b, int):\n        b1 = float(b)\n    elif isinstance(b, float):\n        b1 = b\n    else:\n        raise Exception(\"Type Error\")\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or len([x for x in lst[0] if x.isdigit()]) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += math.pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += math.pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    if n < 2:\n        return False\n    for i in range(2, math.floor(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(filter(lambda w: is_prime(len(w)), words))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def order_by_points(nums: List[int]) -> List[int]:\n    def digits_sum(n: int) -> int:\n        n_str = str(n)\n        if n >= 0:\n            return sum(int(d) for d in n_str)\n        else:\n            return 2 * int(n_str[0:2]) + digits_sum(abs(n))\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len(list(filter(lambda n: n > 10 and n % 2 == 1 and odds.contains(n.to_string()[0]), nums))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if not planet1 in names or not planet2 in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = lst.Where(s => s.Length % 2 == 0).ToList()\n    return result.OrderBy(s => s.Length).ThenBy(s => s, StringComparer.Ordinal).ToList()\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, math.floor(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(map(lambda n: int(n * n), filter(lambda n: n >= 0 and n % 2 == 1, lst)))\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return list(map(lambda x, y: abs(x - y), game, guess))\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = int.MinValue\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:i+1] + b[0:i]) != -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if d % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w if max_w < w else w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = list(operators)\n    nums = list(operands)\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = int(math.pow(nums[i], nums[i + 1]))\n            nums.remove(i + 1)\n            ops.remove(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(char.isalpha(ch) for ch in s):\n        return ''.join(reversed(s))\n    result = ''\n    for ch in s:\n        if not char.isalpha(ch):\n            result += ch\n        elif char.isupper(ch):\n            result += char.lower(ch)\n        elif char.islower(ch):\n            result += char.upper(ch)\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = hashlib.md5()\n    txt_bytes = txt.encode('utf-8')\n    md5_hash.update(txt_bytes)\n    md5_encoded = ''.join(map(lambda b: b.hex(), md5_hash.digest()))\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return list(filter(lambda n: n % 2 == 0, range(lower, upper + 1)))\n"
        ]
    },
    "dart": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens.split(\"\"):\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.remove(ch)\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num.floor()\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(map(lambda x: (x - mean).abs(), numbers))\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = [group for group in paren_string.split(\" \") if group != \"\"]\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strs))\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = reduce(lambda a, b: a * b, numbers)\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -float('inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\ndef is_palindrome(s: str) -> bool:\n    return s == s[::-1]\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join(map(lambda x: \"0\" if x[0] == x[1] else \"1\", zip(a.split(\"\"), b.split(\"\"))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if len(strs) == 0:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[0:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \").where((s) => s.isNotEmpty).toList()\n    return notes.map((note) => durations[note]!).toList()\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(0, s.length - substring.length + 1):\n        if s.substring(i, min(i + substring.length, s.length)) == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = list(filter(lambda x: x in num_dict, numbers.split(\" \")))\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = numbers.toList()..sort()\n    min_diff = float.infinity\n    closest_pair = []\n    for i in range(1, sorted_numbers.length):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: isinstance(x, int), values))\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = (counts[num] if counts[num] else 0) + 1\n    res = [num for num in numbers if counts[num] == 1]\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = StringBuffer()\n    for ch in s.split(\"\"):\n        if not ch.contains(RegExp(r'[a-zA-Z]')):\n            flipped.write(ch)\n        elif ch.contains(RegExp(r'[a-z]')):\n            flipped.write(ch.toUpperCase())\n        elif ch.contains(RegExp(r'[A-Z]')):\n            flipped.write(ch.toLowerCase())\n    return flipped.toString()\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return list(filter(lambda s: s.startswith(prefix_str), strs))\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda num: num > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = l.where_indexed((i, x) => i % 3 == 0).to_list()..sort()\n    return l.map_indexed((i, x) => (i % 3 == 0) ? sorted_third[i ~/ 3] : x).to_list()\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    if len(l) == 0:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(re.findall(\"7\", str(i)))\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = list(filter(lambda x: x[0] % 2 == 0, enumerate(l))\n    sorted_even.sort()\n    return list(map(lambda x: sorted_even[x[0] // 2] if x[0] % 2 == 0 else x[1], enumerate(l)))\n",
            "def encode_cyclic(s: str) -> str:\n    result = StringBuffer()\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.write(s.substring(i))\n        else:\n            result.write(s.substring(i + 1, i + 3))\n            result.write(s[i])\n    return result.toString()\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return pow(n, 2).toInt();\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return list(map(lambda i: i + 1, l))\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = [...l]..sort()\n    if l.length % 2 != 0:\n        return sl[l.length ~/ 2]\n    else:\n        return (sl[l.length ~/ 2] + sl[l.length ~/ 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt.split('').reversed.join('')\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = map(lambda ch: ((ch - 97 + 5) % 26) + 97, s.runes)\n    return str.from_char_codes(result)\ndef decode_shift(s: str) -> str:\n    result = map(lambda ch: ((ch - 97 - 5) % 26) + 97, s.runes)\n    return str.from_char_codes(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in txt.split('') if not vowels.contains(char))\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0.split('')).equals(set(s1.split('')))\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets.split(\"\"):\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = zip(l, l[1:])\n    diff = map(lambda x: x[1] - x[0], diff)\n    diff = every(lambda x: x <= 0, diff) or every(lambda x: x >= 0, diff)\n    return diff\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1).intersection(set(l2))))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets.split(\"\"):\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return list(map(lambda x, i: x * i, xs))[1:]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a = 0\n    b = 0\n    c = 1\n    while n > 2:\n        (a, b, c) = (b, c, a + b + c)\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(map(lambda e: ord(e), filter(lambda e: e.isalpha(), s)))\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = list(filter(lambda n: n % 2 == 0, arr))\n    if len(evens) == 0:\n        return []\n    minEven = min(evens)\n    return [minEven, arr.index(minEven)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = (freqs[n] if n in freqs else 0) + 1\n    goodVals = list(map(lambda p: p.key, filter(lambda p: p.value >= p.key, freqs.items())))\n    return reduce(lambda a, b: max(a, b), goodVals, -1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(map(lambda x: len(x), lst1))\n    cnt2 = sum(map(lambda x: len(x), lst2))\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = pow(a, 1.0 / 3.0)\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return len(list(filter(lambda x: x in \"2357BD\", num)))\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = dec.to_radix_string(2)\n    return \"db\" + binary + \"db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * pow(10, n - 2)\n",
            "def solve(n: int) -> str:\n    digitsSum = sum(int(d) for d in str(n))\n    return bin(digitsSum)\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(' ').map((word) => String.fromCharCodes(word.runes.toList()..sort())).toList();\n    return words.join(' ');\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda x: x[0] == x[1] ? x[1] - x[0] : x[0] - x[1])\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[len(arr) - 1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = StringBuffer()\n    for ch in s.split(\"\"):\n        shifted = ch.codeUnitAt(0) + 4\n        if shifted > 'z'.codeUnitAt(0):\n            shifted -= 26\n        result.writeCharCode(shifted)\n    return result.toString()\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(r\"[.!?]\\s*\")\n    return len(list(filter(lambda sentence: len(sentence) >= 2 and sentence[0:2] == \"I \", sentences)))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message.split(\"\"):\n        if ch.contains(RegExp(r'[a-zA-Z]')):\n            ch1 = ch.toUpperCase() == ch ? ch.toLowerCase() : ch.toUpperCase()\n            if vowels.contains(ch1):\n                ch1 = String.fromCharCode(ch1.codeUnitAt(0) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def skjkasdkd(lst: List[int]) -> int:\n    primes = list(filter(lambda n: isPrime(n), lst))\n    if len(primes) == 0:\n        return 0\n    largest = reduce(lambda a, b: a if a > b else b, primes)\n    return reduce(lambda a, b: a + b, map(lambda d: int(d), largest.split('')))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    return all(map(lambda k: re.match(r'^[A-Z]+$', k), d.keys())) or all(map(lambda k: re.match(r'^[a-z]+$', k), d.keys()))\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (a.abs() % 10) * (b.abs() % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return len(list(filter(lambda c: s.split('')[c] % 2 == 0 and vowels.contains(c), range(len(s.split('')))))\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return list(map(lambda i: n + 2 * i, range(n)))\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(r\"[, ]\").where((w) => w.length > 0).toList()\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y != x ? y - 1 : -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = ((m + n) / 2.0 + 0.5).to_int()\n    return r_avg.to_radix_string(2)\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return list(filter(lambda num: all_digits_odd(str(num)), x)).sort()\ndef all_digits_odd(s: str) -> bool:\n    return all(map(lambda digit: ord(digit) % 2 != 0, s))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(arr, key=lambda x: -x)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return list(map(lambda i: nums.take(i).reduce(lambda x, y: x + y) if i % 2 != 0 else nums.take(i).reduce(lambda x, y: x * y), nums)\n",
            "def even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    return len(list(filter(lambda n: digits_sum(n) > 0, arr)))\ndef digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(lambda d: int(d), n_str.split('')))\n    else:\n        return 2 * int(n_str[0:2]) + digits_sum(n.abs())\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = len(list(filter(lambda num: num % 2 != 0, lst1)))\n    even_cnt = len(list(filter(lambda num: num % 2 == 0, lst2)))\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \").where((w) => w.length > 0).toList()\n    for w in words:\n        freq[w] = (freq[w] ?? 0) + 1\n    result = {}\n    if freq.length > 0:\n        maxFreq = freq.values.reduce((a, b) => a > b ? a : b)\n        for k in freq.keys:\n            if freq[k] == maxFreq:\n                result[k] = freq[k]!\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"]\ndef is_palindrome(s: str) -> bool:\n    return s == ''.join(reversed(s))\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len(list(filter(lambda d: ord(d) % 2 == 1, num)))\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = nums.reduce(min)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: math.ceil(sum(arr) / capacity), grid))\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").where((w) => w.length > 0).toList()\n    return words.where((w) => w.split('').where((c) => consonants.toLowerCase().contains(c.toLowerCase())).length == n).toList()\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(word.length - 2, 0, -1):\n        if vowels.contains(word[i]) and not vowels.contains(word[i - 1]) and not vowels.contains(word[i + 1]):\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s.split(\"\"):\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    result = arr.copy()\n    result.sort()\n    return result[len(arr) - k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda n: len(str(n)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != \"-\" or date[5] != \"-\":\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if [1, 3, 5, 7, 8, 10, 12].contains(m) and d >= 1 and d <= 31:\n        return True\n    if [4, 6, 9, 11].contains(m) and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if txt.contains(\" \"):\n        return txt.split(\" \")\n    elif txt.contains(\",\"):\n        return txt.split(\",\")\n    else:\n        return [txt.split(\"\").where((c) => c.contains(RegExp(r\"[a-z]\")) && c.codeUnitAt(0) % 2 == 0).length.toString()]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not lst.is_sorted((a, b) => a - b)):\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] = (freq[i] ?? 0) + 1\n    return freq.values.fold(0, (a, b) => a > b ? a : b) <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and isPrime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = len(list(filter(lambda n: n < 0, arr))) % 2 == 1 ? -1 : 1\n    return sign * sum(map(lambda n: n.abs(), arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append((i / 2 + 1).toInt())\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + ((i + 3) / 2).toInt())\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = list(filter(lambda d: int(d) % 2 == 1, str(n).split('')))\n    return len(odds) > 0 ? reduce(lambda x, y: x * y, odds) : 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx = close_idx[::-1]\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: pow(n.ceil(), 2).toInt(), lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if len(txt) == 0:\n        return False\n    last = txt[txt.rfind(' ') + 1:]\n    return len(last) == 1 and re.match(r'[a-z]', last[0], re.IGNORECASE)\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = list(range(1, len(arr))).where((i) => arr[i] < arr[i - 1])\n    return idx.fold(-1, max)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = filter(lambda i: i < 0, lst)\n    pos = filter(lambda i: i > 0, lst)\n    maxNeg = reduce(max, neg) if neg else None\n    minPos = reduce(min, pos) if pos else None\n    return [maxNeg, minPos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str):\n        a1 = float(a.replace(',', '.'))\n    elif isinstance(a, int):\n        a1 = float(a)\n    elif isinstance(a, float):\n        a1 = a\n    else:\n        raise Exception('Type Error')\n    if isinstance(b, str):\n        b1 = float(b.replace(',', '.'))\n    elif isinstance(b, int):\n        b1 = float(b)\n    elif isinstance(b, float):\n        b1 = b\n    else:\n        raise Exception('Type Error')\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replaceAll(RegExp(r\"\\s{3,}\"), \"-\").replaceAll(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or not suf.contains(lst[1]) or len(lst[0]) == 0 or not lst[0][0].contains(RegExp(r'[a-z]', caseSensitive: false)) or lst[0].split(\"\").where((x) => x.contains(RegExp(r'\\d'))).length > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(filter(lambda w: is_prime(len(w)), words)\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def order_by_points(nums: List[int]) -> List[int]:\n    def digits_sum(n: int) -> int:\n        n_str = str(n)\n        if n >= 0:\n            return sum(map(int, n_str.split('')))\n        else:\n            return 2 * int(n_str[0:2]) + digits_sum(n.abs())\n    result = nums.copy()\n    merge_sort(result, key=lambda a: digits_sum(a))\n    return result\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len(list(filter(lambda n: n > 10 and n % 2 == 1 and odds.contains(n.toString()[0]), nums))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return (c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if not planet1 in names or not planet2 in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = list(filter(lambda it: len(it) % 2 == 0, lst))\n    result.sort(lambda a, b: a.compareTo(b) if a.length == b.length else a.length - b.length)\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(map(lambda n: int(n * n), filter(lambda n: n >= 0 and n % 2 == 1, lst)))\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return list(map(lambda x: abs(x[0] - x[1]), zip(game, guess)))\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -float('inf')\n    max_ext = ''\n    for ext in extensions:\n        upper = len([c for c in ext if c.isupper()])\n        lower = len([c for c in ext if c.islower()])\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f'{class_name}.{max_ext}'\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:i+1] + b[0:i]) != -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = len(list(filter(lambda d: ord(d) % 2 == 0, ds)))\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w if max_w < w else w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = list(operators)\n    nums = list(operands)\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1]).to_int()\n            nums.remove_at(i + 1)\n            ops.remove_at(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove_at(i + 1)\n            ops.remove_at(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] ~/ nums[i + 1]\n            nums.remove_at(i + 1)\n            ops.remove_at(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove_at(i + 1)\n            ops.remove_at(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove_at(i + 1)\n            ops.remove_at(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(ch.isalpha() for ch in s):\n        return ''.join(reversed(s))\n    result = ''\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    txt_bytes = txt.encode(\"utf-8\")\n    md5_encoded = hashlib.md5(txt_bytes).hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "go": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk = stk[:len(stk) - 1]\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = 0.0\n    for num in numbers:\n        mean += num\n    mean /= float(len(numbers))\n    deviation = 0.0\n    for num in numbers:\n        deviation += abs(num - mean)\n    return deviation / float(len(numbers))\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = []\n    for str in strings.split(paren_string, \" \"):\n        if str != \"\":\n            paren_groups.append(str)\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    result = []\n    for s in strs:\n        if substring in s:\n            result.append(s)\n    return result\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    nSum = 0\n    nProduct = 1\n    for _, n in numbers:\n        nSum += n\n        nProduct *= n\n    return [nSum, nProduct]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = math.MinInt\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            runes = list(s[:i])\n            for i, j in zip(range(len(runes)), range(len(runes)-1, -1, -1):\n                runes[i], runes[j] = runes[j], runes[i]\n            return s + \"\".join(runes)\n    return \"\"\ndef is_palindrome(s: str) -> bool:\n    runes = list(s)\n    for i in range(len(runes) // 2):\n        if runes[i] != runes[len(runes) - 1 - i]:\n            return False\n    return True\n",
            "def string_xor(a: str, b: str) -> str:\n    result = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result.append(\"0\")\n        else:\n            result.append(\"1\")\n    return \"\".join(result)\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if len(strs) == 0:\n        return None\n    longestS = strs[0]\n    for s in strs:\n        if len(s) > len(longestS):\n            longestS = s\n    return longestS\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i+1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    result = []\n    for i in range(n + 1):\n        result.append(str(i))\n    return \" \".join(result)\n",
            "def count_distinct_characters(s: str) -> int:\n    dc = {}\n    for ch in s.lower():\n        dc[ch] = True\n    return len(dc)\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    }\n    notes = []\n    for str in music_string.split(\" \"):\n        if str != \"\":\n            notes.append(str)\n    result = []\n    for note in notes:\n        result.append(durations[note])\n    return result\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    strs = numbers.split(\" \")\n    num_list = []\n    for str in strs:\n        num_list.append(str)\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = math.inf\n    max_num = -math.inf\n    for num in numbers:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n    res = [0] * len(numbers)\n    if min_num == max_num:\n        return res\n    else:\n        for i, num in enumerate(numbers):\n            res[i] = (num - min_num) / (max_num - min_num)\n        return res\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = []\n    for num in numbers:\n        if counts[num] == 1:\n            res.append(num)\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return ''.join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    filtered = []\n    for str in strs:\n        if str.startswith(prefix_str):\n            filtered.append(str)\n    return filtered\n",
            "def get_positive(l: List[int]) -> List[int]:\n    result = []\n    for num in l:\n        if num > 0:\n            result.append(num)\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.floor(math.sqrt(n))) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += float(xs[i]) * math.pow(x, float(i))\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = []\n    for i, x in enumerate(l):\n        if i % 3 == 0:\n            sorted_third.append(x)\n    result = [0] * len(l)\n    sorted_third.sort()\n    for i, x in enumerate(l):\n        if i % 3 == 0:\n            result[i] = sorted_third[i // 3]\n        else:\n            result[i] = x\n    return result\n",
            "def list_unique(l: List[int]) -> List[int]:\n    keys = {}\n    result = []\n    for x in l:\n        if x not in keys:\n            keys[x] = True\n            result.append(x)\n    result.sort()\n    return result\n",
            "def max_element(l: List[int]) -> int:\n    if len(l) == 0:\n        return 0\n    max = l[0]\n    for e in l:\n        if e > max:\n            max = e\n    return max\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = []\n    for i, x in enumerate(l):\n        if i % 2 == 0:\n            sorted_even.append(x)\n    result = [0] * len(l)\n    sorted_even.sort()\n    for i, x in enumerate(l):\n        if i % 2 == 0:\n            result[i] = sorted_even[i // 2]\n        else:\n            result[i] = x\n    return result\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s)):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i+1:i+3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.floor(math.sqrt(n))) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return int(math.pow(float(n), float(2)))\n",
            "def incr_list(l: List[int]) -> List[int]:\n    result = [0] * len(l)\n    for i in range(len(l)):\n        result[i] = l[i] + 1\n    return result\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = {}\n    for num in l:\n        if num in seen:\n            return True\n        seen[-num] = True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x /= bas\n    return \"\".join(digits)\n",
            "def triangle_area(a: int, h: int) -> float:\n    return float(a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3]\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = l.copy()\n    sl.sort()\n    if len(l) % 2 != 0:\n        return sl[len(l) / 2]\n    else:\n        return (sl[len(l) / 2] + sl[len(l) / 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    runes = list(txt)\n    for i in range(len(runes) // 2):\n        if runes[i] != runes[len(runes) - 1 - i]:\n            return False\n    return True\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append((ord(ch) - 97 + 5) % 26 + 97)\n    return ''.join(chr(ch) for ch in result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append((ord(ch) - 97 + 21) % 26 + 97)\n    return ''.join(chr(ch) for ch in result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in txt:\n        if not char in vowels:\n            result += char\n    return result\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    for x in l:\n        if x >= t:\n            return False\n    return True\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    set0 = {}\n    set1 = {}\n    for char in s0:\n        set0[char] = True\n    for char in s1:\n        set1[char] = True\n    return set0 == set1\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i + 1] - l[i] for i in range(len(l) - 1)]\n    allNeg = True\n    allPos = True\n    for x in diff:\n        if x > 0:\n            allNeg = False\n        if x < 0:\n            allPos = False\n    return allNeg or allPos\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    result = []\n    s1 = {}\n    for num in l1:\n        s1[num] = True\n    for num in l2:\n        if num in s1:\n            result.append(num)\n            s1[num] = False\n    result.sort()\n    return result\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    sum = 0\n    for i in range(n + 1):\n        sum += i\n    return sum\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    result = [0] * (len(xs) - 1)\n    for i in range(1, len(xs)):\n        result[i - 1] = xs[i] * i\n    return result\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        runes = list(x_str)\n        for i, j in zip(range(0, len(runes) - 1), range(len(runes) - 1, 0, -1):\n            runes[i], runes[j] = runes[j], runes[i]\n        return ''.join(runes)\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    a = 0\n    for c in s:\n        if c.isupper():\n            a += ord(c)\n    return a\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = 0\n    oranges = 0\n    for i, word in enumerate(words):\n        if word == \"apples\":\n            apples, _ = strconv.Atoi(words[i - 1])\n        if word == \"oranges\":\n            oranges, _ = strconv.Atoi(words[i - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    minEven = math.MaxInt\n    minIdx = -1\n    for i, n in range(arr):\n        if n % 2 == 0 and n < minEven:\n            minEven = n\n            minIdx = i\n    if minIdx == -1:\n        return []\n    return [minEven, minIdx]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        if n in freqs:\n            freqs[n] += 1\n        else:\n            freqs[n] = 1\n    max_val = -math.inf\n    for k, v in freqs.items():\n        if v >= k and k > max_val:\n            max_val = k\n    if max_val == -math.inf:\n        return -1\n    return max_val\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = list(lst)\n    sl.sort()\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    isPalin = True\n    for i in range(len(q)):\n        if q[i] != q[len(q) - i - 1]:\n            isPalin = False\n            break\n    total = 0\n    for i in range(len(q)):\n        total += q[i]\n    return isPalin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = 0\n    for b in lst1:\n        cnt1 += len(b)\n    cnt2 = 0\n    for b in lst2:\n        cnt2 += len(b)\n    if cnt1 <= cnt2:\n        return lst1\n    else:\n        return lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    if a < 2:\n        return False\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.floor(math.sqrt(n))) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = round(pow(a, 1.0 / 3.0))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    result = 0\n    for x in num:\n        if \"2357BD\".contains(x):\n            result += 1\n    return result\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = strconv.FormatInt(int64(dec), 2)\n    return fmt.Sprintf(\"db%sdb\", binary)\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(math.floor(math.sqrt(length))) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * int(math.pow(10, n - 2))\n",
            "def solve(n: int) -> str:\n    digits_sum = 0\n    for d in str(n):\n        digit = int(d)\n        digits_sum += digit\n    return str(digits_sum)\n",
            "def add(lst: List[int]) -> int:\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 2 == 1 and x % 2 == 0:\n            result += x\n    return result\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    for i, word in enumerate(words):\n        chars = list(word)\n        chars.sort()\n        words[i] = \"\".join(chars)\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda x: (x[0], -x[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    result = make([]int, len(arr))\n    copy(result, arr)\n    if (arr[0] + arr[len(arr) - 1]) % 2 == 0:\n        sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    else:\n        sort.Ints(result)\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ch + 4\n        if shifted > 'z':\n            shifted -= 26\n        result += shifted\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    tmp = list(lst)\n    tmp.sort()\n    sl = []\n    for i in range(len(tmp)):\n        if i == 0 or tmp[i] != tmp[i - 1]:\n            sl.append(tmp[i])\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r'[.!?]\\s*', s)\n    cnt = 0\n    for sentence in sentences:\n        if len(sentence) >= 2 and sentence[:2] == 'I ':\n            cnt += 1\n    return cnt\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int):\n        if isinstance(y, int):\n            if isinstance(z, int):\n                if (x + y == z) or (x + z == y) or (y + z == x):\n                    return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def skjkasdkd(lst: List[int]) -> int:\n    maxPrime = 0\n    for n in lst:\n        if isPrime(n) and n > maxPrime:\n            maxPrime = n\n    if maxPrime == 0:\n        return 0\n    largest = str(maxPrime)\n    result = 0\n    for d in largest:\n        result += int(d)\n    return result\ndef isPrime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.floor(math.sqrt(n))) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    lower, upper = True, True\n    for k, _ in d.items():\n        for r in k:\n            if not unicode.islower(r):\n                lower = False\n            if not unicode.isupper(r):\n                upper = False\n    return lower or upper\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        flag = True\n        for p in primes:\n            if num % p == 0:\n                flag = False\n                break\n        if flag:\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (int(math.Abs(float64(a))) % 10) * (int(math.Abs(float64(b))) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    count = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c in vowels:\n            count += 1\n    return count\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    result = [0] * n\n    for i in range(n):\n        result[i] = n + 2 * i\n    return result\n",
            "def words_string(s: str) -> List[str]:\n    words = re.split(r'[, ]', s)\n    result = []\n    for w in words:\n        if len(w) > 0:\n            result.append(w)\n    return result\n",
            "def choose_num(x: int, y: int) -> int:\n    if (x > y):\n        return -1\n    if (y % 2 == 0):\n        return y\n    if (y != x):\n        return y - 1\n    return -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = int(float((n + m)) / 2.0 + 0.5)\n    result = str(r_avg)\n    return result\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    result = []\n    for num in x:\n        if all_odd_digits(str(num)):\n            result.append(num)\n    result.sort()\n    return result\ndef all_odd_digits(s: str) -> bool:\n    for digit in s:\n        if int(digit) % 2 == 0:\n            return False\n    return True\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = []\n    for x in arr:\n        if 1 <= x <= 9:\n            sorted_arr.append(x)\n    sorted_arr.sort(reverse=True)\n    result = []\n    for x in sorted_arr:\n        result.append(digit_names[x - 1])\n    return result\n",
            "def f(n: int) -> List[int]:\n    nums = [i + 1 for i in range(n)]\n    result = []\n    for i in nums:\n        if i % 2 != 0:\n            sum = 0\n            for j in nums[:i]:\n                sum += j\n            result.append(sum)\n        else:\n            product = 1\n            for j in nums[:i]:\n                product *= j\n            result.append(product)\n    return result\n",
            "def even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\ndef is_palindrome(s: str) -> bool:\n    runes = list(s)\n    for i in range(len(runes) // 2):\n        if runes[i] != runes[len(runes) - 1 - i]:\n            return False\n    return True\n",
            "def count_nums(arr: List[int]) -> int:\n    cnt = 0\n    for n in arr:\n        if digits_sum(n) > 0:\n            cnt += 1\n    return cnt\ndef digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        acc = 0\n        for d in n_str:\n            d_int = int(d)\n            acc += d_int\n        return acc\n    else:\n        neg = int(n_str[0:2])\n        return neg * 2 + digits_sum(int(abs(float(n))))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = 0\n    even_cnt = 0\n    for num in lst1:\n        if num % 2 != 0:\n            odd_cnt += 1\n    for num in lst2:\n        if num % 2 == 0:\n            even_cnt += 1\n    if even_cnt >= odd_cnt:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        if len(w) > 0:\n            freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if len(freq) > 0:\n        maxFreq = 0\n        for v in freq.values():\n            if v > maxFreq:\n                maxFreq = v\n        for k, v in freq.items():\n            if v == maxFreq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    runes = []\n    for ch in s:\n        if not c.contains(ch):\n            runes.append(ch)\n    check = \"no\"\n    if is_palindrome(runes):\n        check = \"yes\"\n    return [runes, check]\ndef is_palindrome(s: str) -> bool:\n    for i in range(len(s) // 2):\n        if s[i] != s[len(s) - 1 - i]:\n            return False\n    return True\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = 0\n        for d in num:\n            if int(d) % 2 == 1:\n                n += 1\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        if cur_sum + n > 0:\n            cur_sum = 0\n        else:\n            cur_sum += n\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n    if min_sum == 0:\n        min_sum = math.MaxInt\n        for n in nums:\n            if n < min_sum:\n                min_sum = n\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    result = 0\n    for arr in grid:\n        sum = 0\n        for n in arr:\n            sum += n\n        result += math.ceil(sum / capacity)\n    return result\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    result = arr.copy()\n    result.sort(key=lambda x: (bin(x).count('1'), x))\n    return result\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    strs = s.split(\" \")\n    words = []\n    for w in strs:\n        if len(w) > 0:\n            words.append(w)\n    result = []\n    for w in words:\n        count = 0\n        for c in w:\n            if c.lower() in consonants:\n                count += 1\n        if count == n:\n            result.append(w)\n    return result\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    depth = 0\n    for ch in lst[0] + lst[1]:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return \"No\"\n    return \"Yes\" if depth == 0 else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    result = arr.copy()\n    result.sort()\n    return result[len(arr) - k:]\n",
            "def solution(lst: List[int]) -> int:\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 2 == 0 and x % 2 != 0:\n            result += x\n    return result\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    result = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            result += arr[i]\n    return result\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m, _ = int(date[:2])\n    d, _ = int(date[3:5])\n    for i in [1, 3, 5, 7, 8, 10, 12]:\n        if i == m and d >= 1 and d <= 31:\n            return True\n    for i in [4, 6, 9, 11]:\n        if i == m and d >= 1 and d <= 30:\n            return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        cnt = 0\n        for c in txt:\n            if c.islower() and ord(c) % 2 == 0:\n                cnt += 1\n        return [str(cnt)]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    max_freq = 0\n    for v in freq.values():\n        if v > max_freq:\n            max_freq = v\n    return len(lst) == 0 or max_freq <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(math.floor(math.sqrt(n))) + 1):\n            if n % i == 0:\n                return False\n        return True\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    result = 0\n    for n in arr:\n        if n == 0:\n            return result\n    sign = 1\n    for n in arr:\n        if n < 0:\n            sign *= -1\n        result += abs(n)\n    result = sign * result\n    return result\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = temp[0]\n                for v in temp:\n                    if v < min_val:\n                        min_val = v\n    result = []\n    for i in range(k):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i / 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = []\n    for d in str(n):\n        if int(d) % 2 == 1:\n            odds.append(int(d))\n    if len(odds) == 0:\n        return 0\n    result = 1\n    for d in odds:\n        result *= d\n    return result\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    result = 0\n    for n in lst:\n        result += int(math.pow(math.ceil(n), 2))\n    return result\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if len(txt) == 0:\n        return False\n    last = txt[strings.LastIndex(txt, \" \")+1:]\n    return len(last) == 1 and unicode.IsLetter(rune(last[0]))\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = []\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            idx.append(i)\n    if len(idx) == 0:\n        return -1\n    max_idx = idx[0]\n    for i in idx:\n        if i > max_idx:\n            max_idx = i\n    return max_idx\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    maxNeg = None\n    minPos = None\n    for n in lst:\n        if n < 0:\n            if maxNeg is None:\n                maxNeg = n\n            elif n > maxNeg:\n                maxNeg = n\n        if n > 0:\n            if minPos is None:\n                minPos = n\n            elif n < minPos:\n                minPos = n\n    return [maxNeg, minPos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str):\n        a1 = float(a.replace(\",\", \".\"))\n    elif isinstance(a, int):\n        a1 = float(a)\n    elif isinstance(a, float):\n        a1 = a\n    else:\n        raise TypeError(\"Type Error\")\n    if isinstance(b, str):\n        b1 = float(b.replace(\",\", \".\"))\n    elif isinstance(b, int):\n        b1 = float(b)\n    elif isinstance(b, float):\n        b1 = b\n    else:\n        raise TypeError(\"Type Error\")\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or len(lst[0]) == 0 or not unicode.isletter(lst[0][0]):\n        return \"No\"\n    found = False\n    for s in suf:\n        if s == lst[1]:\n            found = True\n            break\n    if not found:\n        return \"No\"\n    digit_cnt = 0\n    for ch in lst[0]:\n        if unicode.isdigit(ch):\n            digit_cnt += 1\n    if digit_cnt > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += int(math.pow(float64(lst[i]), 2))\n        elif i % 4 == 0:\n            result += int(math.pow(float64(lst[i]), 3))\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.floor(math.sqrt(n))) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    strs = sentence.split(\" \")\n    words = []\n    for word in strs:\n        if is_prime(len(word)):\n            words.append(word)\n    return \" \".join(words)\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num0 = int(xs[0])\n    den0 = int(xs[1])\n    num1 = int(ns[0])\n    den1 = int(ns[1])\n    return (num0 * num1) % (den0 * den1) == 0\n",
            "def order_by_points(nums: List[int]) -> List[int]:\n    result = nums.copy()\n    result.sort(key=lambda x: sum(int(d) for d in str(x)))\n    return result\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    cnt = 0\n    for n in nums:\n        if n > 10 and n % 2 == 1 and str(n)[0] in odds:\n            cnt += 1\n    return cnt\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    l, r = -1, -1\n    for i, name in enumerate(names):\n        if name == planet1:\n            l = i\n        if name == planet2:\n            r = i\n    if l == -1 or r == -1:\n        return []\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1 : r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        if len(s) % 2 == 0:\n            result.append(s)\n    result.sort(key=lambda x: (len(x), x))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(math.floor(math.sqrt(n))) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    acc = 0\n    for n in lst:\n        if n >= 0 and int(n) % 2 == 1:\n            acc += int(n * n)\n    return acc\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    result = make(List[int], len(game))\n    for x, i in range game:\n        result[x] = int(math.Abs(float64(i - guess[x])))\n    return result\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = math.min_int\n    max_ext = \"\"\n    for ext in extensions:\n        upper = 0\n        lower = 0\n        for c in ext:\n            if unicode.is_upper(c):\n                upper += 1\n            else if unicode.is_lower(c):\n                lower += 1\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = 0\n    for d in ds:\n        if int(d) % 2 == 0:\n            even += 1\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = 0\n        freq = {}\n        for c in w:\n            if c not in freq:\n                freq[c] = True\n                cnt += 1\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = []\n    nums = []\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = int(math.pow(float(nums[i]), float(nums[i + 1])))\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    flag = False\n    for ch in s:\n        if ch.isalpha():\n            flag = True\n            break\n    if not flag:\n        runes = list(s)\n        for i, j in zip(range(0, len(runes)), range(len(runes) - 1, 0, -1):\n            runes[i], runes[j] = runes[j], runes[i]\n        return ''.join(runes)\n    result = ''\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        elif ch.islower():\n            result += ch.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    md5_hash = hashlib.md5()\n    txt_bytes = txt.encode()\n    md5_hash.update(txt_bytes)\n    md5_encoded = md5_hash.hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2.0, min(float(a), float(b)))\n    upper = min(8.0, max(float(a), float(b)))\n    numbers = []\n    for i in range(lower, upper + 1):\n        if i % 2 == 0:\n            numbers.append(i)\n    return numbers\n"
        ]
    },
    "java": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == '(':\n            stk.append(ch)\n            current_group += ch\n        elif ch == ')':\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(map(lambda x: abs(x - mean), numbers))\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = list(filter(lambda s: len(s) > 0, paren_string.split(\" \")))\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strs))\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    nSum = sum(numbers)\n    nProduct = reduce(lambda a, b: a * b, numbers)\n    return [nSum, nProduct]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = int.MIN_VALUE\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + ''.join(reversed(s[:i]))\n    return ''\ndef is_palindrome(s: str) -> bool:\n    return s == s[::-1]\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(map(lambda i: '0' if a[i] == b[i] else '1', range(len(a))))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if len(strs) == 0:\n        return Optional.empty()\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return Optional.of(longest_s)\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[0:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(map(str, range(0, n + 1)))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = list(filter(lambda s: len(s) > 0, music_string.split(\" \")))\n    return list(map(lambda note: durations.get(note), notes))\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(0, len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = list(filter(lambda x: x in num_dict, numbers.split(\" \")))\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float(\"inf\")\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda value: isinstance(value, int), values))\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = [num for num in numbers if counts[num] == 1]\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return list(filter(lambda s: s.startswith(prefix_str), strs))\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda num: num > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, math.floor(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * math.pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = list(map(l.get, filter(lambda i: i % 3 == 0, range(len(l))).sorted())\n    return list(map(lambda i: sorted_third[i/3] if i % 3 == 0 else l[i], range(len(l))))\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    if len(l) == 0:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += sum(1 for c in str(i) if c == '7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = list(map(l.__getitem__, filter(lambda i: i % 2 == 0, range(0, len(l))).sorted().toList())\n    return list(map(lambda i: sorted_even[i/2] if i % 2 == 0 else l[i], range(0, len(l))))\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, math.floor(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return l.stream().map(i -> i + 1).toList()\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    digits.reverse()\n    return \"\".join(digits)\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) / 2]\n    else:\n        return (sl[len(l) / 2] + sl[len(l) / 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = [chr(((ord(ch) - 97 + 5) % 26) + 97) for ch in s]\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = [chr(((ord(ch) - 97 + 21) % 26) + 97) for ch in s]\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(map(lambda c: chr(c), filter(lambda c: vowels.find(c) == -1, map(lambda c: ord(c), txt)))\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for i in range(len(brackets)):\n        b = brackets[i]\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i + 1] - l[i] for i in range(len(l) - 1)]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(filter(lambda x: x in l2, l1)))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(0, n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for i in range(len(brackets)):\n        b = brackets[i]\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return list(map(lambda i: i * xs[i], range(1, len(xs))))\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a = 0\n    b = 0\n    c = 1\n    while n > 2:\n        tmp = a + b + c\n        a = b\n        b = c\n        c = tmp\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower()) != -1 or (i == len(s) - 1 and s[i].lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return str(x)[::-1]\n    else:\n        return str(x)[len(x_str) - shift:] + str(x)[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(filter(lambda c: c.isupper(), s))\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[list(words).index(\"apples\") - 1])\n    oranges = int(words[list(words).index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = list(filter(lambda n: n % 2 == 0, arr))\n    if len(evens) == 0:\n        return []\n    min_even = min(map(lambda n: n, evens))\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    goodVals = filter(lambda k: freqs[k] >= k, freqs.keys())\n    return max(goodVals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(map(len, lst1))\n    cnt2 = sum(map(len, lst2))\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    if a < 2:\n        return False\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = int(round(pow(a, 1.0 / 3.0)))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return len([x for x in num if x in \"2357BD\"])\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)\n    return f\"db{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append(\"A+\")\n        elif grade > 3.7:\n            result.append(\"A\")\n        elif grade > 3.3:\n            result.append(\"A-\")\n        elif grade > 3.0:\n            result.append(\"B+\")\n        elif grade > 2.7:\n            result.append(\"B\")\n        elif grade > 2.3:\n            result.append(\"B-\")\n        elif grade > 2.0:\n            result.append(\"C+\")\n        elif grade > 1.7:\n            result.append(\"C\")\n        elif grade > 1.3:\n            result.append(\"C-\")\n        elif grade > 1.0:\n            result.append(\"D+\")\n        elif grade > 0.7:\n            result.append(\"D\")\n        elif grade > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * (10 ** (n - 2))\n",
            "def solve(n: int) -> str:\n    digitsSum = sum(int(c) for c in str(n))\n    return bin(digitsSum)\n",
            "def add(lst: List[int]) -> int:\n    return sum(filter(lambda i: i % 2 == 1 and lst[i] % 2 == 0, range(0, len(lst))))\n",
            "def anti_shuffle(s: str) -> str:\n    words = list(map(lambda word: \"\".join(sorted(word)), s.split(\" \"))\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda a: a[0] == a[1] ? b[1] - a[1] : a[0] - b[0])\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for i in range(len(s)):\n        shifted = ord(s[i]) + 4\n        if shifted > ord(\"z\"):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = lst.stream().distinct().sorted().toList()\n    if sl.size() < 2:\n        return Optional.empty()\n    return Optional.of(sl.get(1))\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\"[.!?]\\\\s*\")\n    return len(list(filter(lambda sentence: len(sentence) >= 2 and sentence[0:2] == \"I \", sentences)))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        int_x = int(x)\n        int_y = int(y)\n        int_z = int(z)\n        if (int_x + int_y == int_z) or (int_x + int_z == int_y) or (int_y + int_z == int_x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if vowels.find(ch1) != -1:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def skjkasdkd(lst: List[int]) -> int:\n    primes = list(filter(lambda n: isPrime(n), lst))\n    if len(primes) == 0:\n        return 0\n    largest = str(max(primes))\n    return sum(map(lambda c: int(c), largest))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    return all(map(lambda k: all(map(lambda c: c.islower(), k)), d.keys())) or all(map(lambda k: all(map(lambda c: c.isupper(), k)), d.keys()))\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        num0 = num\n        if all(num0 % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i in range(len(s)) if i % 2 == 0 and vowels.contains(s[i]))\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return list(map(lambda i: n + 2 * i, range(0, n)))\n",
            "def words_string(s: str) -> List[str]:\n    return list(filter(lambda w: len(w) > 0, s.split(\"[, ]\")))\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y != x ? y - 1 : -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return Optional.empty()\n    r_avg = int((m + n) / 2.0 + 0.5)\n    return Optional.of(Integer.toBinaryString(r_avg))\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return list(filter(lambda num: all_digits_odd(str(num)), sorted(x))\ndef all_digits_odd(s: str) -> bool:\n    return all(map(lambda digit: digit % 2 != 0, s))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return list(map(lambda i: i % 2 != 0 and nums.stream().limit(i).reduce(0, Integer::sum) or nums.stream().limit(i).reduce(1, (x, y) -> x * y), nums))\n",
            "def even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    return len(list(filter(lambda n: sum(map(int, str(n))) > 0, arr))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:len(arr)] == sorted_arr[0:len(arr) - i] and arr[0:i] == sorted_arr[len(arr) - i:len(arr)]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = len(list(filter(lambda n: n % 2 != 0, lst1)))\n    even_cnt = len(list(filter(lambda n: n % 2 == 0, lst2)))\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = [w for w in test.split(\" \") if len(w) > 0]\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        for entry in freq.items():\n            if entry[1] == max_freq:\n                result[entry[0]] = entry[1]\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(filter(lambda ch: c.find(ch) == -1, s))\n    return [s1, 'yes' if s1 == ''.join(reversed(s1)) else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for d in num if d % 2 == 1)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: math.ceil(sum(map(lambda i: i, arr)) / capacity), grid)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return arr.stream().sorted((a, b) -> countOnes(a) == countOnes(b) ? a - b : countOnes(a) - countOnes(b)).toList()\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = [w for w in s.split(\" \") if len(w) > 0]\n    return [w for w in words if len([c for c in w if consonants.find(c.lower()) != -1]) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    return sorted(arr)[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(filter(lambda i: i % 2 == 0 and lst[i] % 2 != 0, range(len(lst))))\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda n: len(str(n)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and 1 <= d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and 1 <= d <= 30:\n        return True\n    if m == 2 and 1 <= d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if txt.contains(\" \"):\n        return List.of(txt.split(\" \"))\n    elif txt.contains(\",\"):\n        return List.of(txt.split(\",\"))\n    else:\n        return List.of(String.valueOf(txt.chars().filter(c -> Character.isLowerCase(c) && c % 2 == 0).count()))\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    return max(freq.values()) <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and isPrime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return Optional.empty()\n    if 0 in arr:\n        return Optional.of(0)\n    sign = len(list(filter(lambda n: n < 0, arr))) % 2 == 1 ? -1 : 1\n    return Optional.of(sign * list(map(lambda n: abs(n), arr)).sum())\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 ? 1 : min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = list(filter(lambda d: d % 2 == 1, map(lambda d: int(chr(d)), str(n)))\n    return reduce(lambda x, y: x * y, odds) if len(odds) > 0 else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i in range(len(s)):\n        if s[i] == '[':\n            open_idx.append(i)\n        elif s[i] == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: int(math.pow(math.ceil(n), 2)), lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if txt == \"\":\n        return False\n    last = txt[txt.rfind(\" \") + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = list(filter(lambda i: arr[i] < arr[i - 1], range(1, len(arr))))\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = list(filter(lambda i: i < 0, lst))\n    pos = list(filter(lambda i: i > 0, lst))\n    maxNeg = max(neg, key=lambda x: x) if neg else None\n    minPos = min(pos, key=lambda x: x) if pos else None\n    return [maxNeg, minPos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str):\n        a1 = float(a.replace(\",\", \".\"))\n    elif isinstance(a, int):\n        a1 = float(a)\n    elif isinstance(a, float):\n        a1 = a\n    else:\n        raise RuntimeError(\"Type Error\")\n    if isinstance(b, str):\n        b1 = float(b.replace(\",\", \".\"))\n    elif isinstance(b, int):\n        b1 = float(b)\n    elif isinstance(b, float):\n        b1 = b\n    else:\n        raise RuntimeError(\"Type Error\")\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replaceAll(\"\\\\s{3,}\", \"-\").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or len(list(filter(lambda x: x.isdigit(), lst[0]))) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, math.floor(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    words = sentence.split(\" \")\n    return \" \".join(filter(lambda w: is_prime(len(w)), words))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=lambda n: sum(int(c) for c in str(n) if c.isdigit())\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len(list(filter(lambda n: n > 10 and n % 2 == 1 and odds.contains(n.toString().substring(0, 1)), nums))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if not planet1 in names or not planet2 in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        tmp = l\n        l = r\n        r = tmp\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = list(filter(lambda s: len(s) % 2 == 0, lst))\n    return sorted(result, key=lambda s: (len(s), s))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, math.floor(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(map(lambda n: int(n * n), filter(lambda n: n >= 0 and n % 2 == 1, lst)))\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return list(map(lambda i: abs(game[i] - guess[i]), range(len(game)))\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -sys.maxsize\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:i+1] + b[0:i]) != -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if d % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w if max_w < w else w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = list(operators)\n    nums = list(operands)\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = int(math.pow(nums[i], nums[i + 1]))\n            nums.remove(i + 1)\n            ops.remove(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(map(str.isalpha, s)):\n        return s[::-1]\n    result = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        elif ch.islower():\n            result += ch.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt.isEmpty():\n        return Optional.empty()\n    try:\n        md5Hash = MessageDigest.getInstance(\"MD5\")\n        txtBytes = txt.getBytes()\n        md5Hash.update(txtBytes)\n        hashBytes = md5Hash.digest()\n        md5Encoded = StringBuilder()\n        for b in hashBytes:\n            md5Encoded.append(String.format(\"%02x\", b & 0xff))\n        return Optional.of(md5Encoded.toString())\n    except NoSuchAlgorithmException as e:\n        return Optional.empty()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return list(filter(lambda n: n % 2 == 0, range(lower, upper + 1)))\n"
        ]
    },
    "javascript": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(map(lambda num: abs(num - mean), numbers))\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(0, len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \").filter((s) => s.length > 0)\n    for group of paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch of group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strs))\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    nSum = numbers.reduce((a, b) => a + b, 0);\n    nProduct = numbers.reduce((a, b) => a * b, 1);\n    return [nSum, nProduct];\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(map(lambda c, i: '0' if c == b[i] else '1', a.split(''), range(len(a))))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = { \"o\": 4, \"o|\": 2, \".|\": 1 }\n    notes = music_string.split(\" \").filter((s) => s.length > 0)\n    return notes.map(note => durations[note])\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(0, len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = numbers.split(\" \").filter(x => x in num_dict)\n    num_list.sort((a, b) => num_dict[a] - num_dict[b])\n    return num_list.join(\" \")\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: isinstance(x, int) and x.is_integer(), values))\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = [num for num in numbers if counts[num] == 1]\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = []\n    for ch in s:\n        if ch.match(/[^a-zA-Z]/):\n            flipped.push(ch)\n        elif ch.match(/[a-z]/):\n            flipped.push(ch.toUpperCase())\n        elif ch.match(/[A-Z]/):\n            flipped.push(ch.toLowerCase())\n    return flipped.join('')\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return list(filter(lambda s: s.startswith(prefix_str), strs))\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda num: num > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * math.pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = list(filter(lambda _, i: i % 3 == 0, l)).sort(lambda a, b: a - b)\n    return list(map(lambda x, i: sorted_third[i / 3] if i % 3 == 0 else x, l))\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    if len(l) == 0:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(str(i).split(\"7\")) - 1\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = list(filter(lambda x: x[1] % 2 == 0, enumerate(l)))\n    sorted_even.sort(key=lambda x: x[1])\n    return list(map(lambda x: sorted_even[x[0] / 2] if x[0] % 2 == 0 else x[1], enumerate(l)))\n",
            "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.append(s[i:])\n        else:\n            result.append(s[i+1:i+3])\n            result.append(s[i])\n    return \"\".join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return list(map(lambda i: i + 1, l))\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x = x // bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[int(len(l) / 2)]\n    else:\n        return (sl[int(len(l) / 2)] + sl[int(len(l) / 2) - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt.split('').reverse().join('')\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = [chr((ord(ch) - 97 + 5) % 26 + 97) for ch in s]\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = [chr((ord(ch) - 97 + 21) % 26 + 97) for ch in s]\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(filter(lambda char: not vowels.includes(char), txt.split('')))\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return _.isEqual(new Set([...s0]), new Set([...s1]))\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i + 1] - l[i] for i in range(len(l) - 1)]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1).intersection(l2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return xs.map((x, i) => x * i).slice(1);\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a = 0\n    b = 0\n    c = 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = list(filter(lambda n: n % 2 == 0, arr))\n    if len(evens) == 0:\n        return []\n    minEven = min(evens)\n    return [minEven, arr.index(minEven)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    goodVals = [p[0] for p in freqs.items() if p[1] >= p[0]]\n    return max(goodVals, -1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(0, int(len(arr) / 2)):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(map(lambda x: len(x), lst1))\n    cnt2 = sum(map(lambda x: len(x), lst2))\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a /= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = round(pow(a, 1.0 / 3.0))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return len(list(filter(lambda x: x in \"2357BD\", num)))\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = str(dec)\n    return f\"db{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(digit) for digit in str(n))\n    return bin(digits_sum)\n",
            "def add(lst: List[int]) -> int:\n    return sum(filter(lambda x: x % 2 == 0, lst[1::2]))\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(' ').map(word => word.split('').sort().join(''));\n    return words.join(' ');\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda x: (x[0], -x[1]))\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[len(arr) - 1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result.append(chr(shifted))\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(/[.!?]\\s*/)\n    return len(list(filter(lambda sentence: len(sentence) >= 2 and sentence[:2] == \"I \", sentences)))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message:\n        if ch.match(/[a-z]/i):\n            ch1 = ch.toUpperCase() === ch ? ch.toLowerCase() : ch.toUpperCase()\n            if vowels.includes(ch1):\n                ch1 = String.fromCharCode(ch1.charCodeAt(0) + 2)\n            result.push(ch1)\n        else:\n            result.push(ch)\n    return result.join(\"\")\n",
            "def skjkasdkd(lst: List[int]) -> int:\n    primes = list(filter(isPrime, lst))\n    if len(primes) == 0:\n        return 0\n    largest = str(max(primes))\n    return sum(map(int, list(largest)))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    return all(RegExp('^[A-Z]+$').test(k) for k in d.keys()) or all(RegExp('^[a-z]+$').test(k) for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return len(list(filter(lambda c: s[c] % 2 == 0 and vowels.includes(c), range(len(s))))\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [*range(n)].map(i => n + 2 * i)\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(/[ ,]/).filter(w => w.length > 0)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y != x ? y - 1 : -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = math.trunc((n + m) / 2.0 + 0.5)\n    return str(r_avg)\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(ord(digit) % 2 != 0 for digit in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(filter(lambda num: all_digits_odd(str(num)), x)\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), key=lambda x: -x)\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = [*range(1, n + 1)]\n    return [nums[:i].reduce(lambda x, y: x + y) if i % 2 != 0 else nums[:i].reduce(lambda x, y: x * y) for i in nums]\n",
            "def even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len(list(filter(lambda n: digits_sum(n) > 0, arr)))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = len(list(filter(lambda n: n % 2 != 0, lst1)))\n    even_cnt = len(list(filter(lambda n: n % 2 == 0, lst2)))\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \").filter(w => w.length > 0)\n    for w in words:\n        freq.set(w, (freq.get(w) || 0) + 1)\n    result = {}\n    if freq.size > 0:\n        maxFreq = Math.max(...freq.values())\n        for [k, v] in freq:\n            if v === maxFreq:\n                result.set(k, v)\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(filter(lambda ch: ch not in c, s))\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"]\ndef is_palindrome(s: str) -> bool:\n    return s == ''.join(reversed(s))\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([d for d in num if ord(d) % 2 == 1])\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    minSum = 0\n    curSum = 0\n    for n in nums:\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    if minSum == 0:\n        minSum = min(nums)\n    return minSum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(math.ceil(sum(arr) / capacity) for arr in grid)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: bin(x).count('1'))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").filter(w => w.length > 0)\n    return words.filter(w => [...w].filter(c => consonants.includes(c.toLowerCase())).length == n)\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(word.length - 2, 0, -1):\n        if vowels.includes(word[i]) and not vowels.includes(word[i - 1]) and not vowels.includes(word[i + 1]):\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    depth = 0\n    for ch in lst:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return \"No\"\n    return \"Yes\" if depth == 0 else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    return sorted(arr, reverse=True)[:k]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(filter(lambda x: x % 2 != 0, lst[::2]))\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda n: len(str(n)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != \"-\" or date[5] != \"-\":\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if txt.includes(\" \"):\n        return txt.split(\" \")\n    elif txt.includes(\",\"):\n        return txt.split(\",\")\n    else:\n        return [[...txt].filter(c => /[a-z]/.test(c) && c.charCodeAt(0) % 2 === 0).length.toString()]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not lst[1:].map(lambda n, i: lst[i] <= n).every(lambda a: a):\n        return False\n    freq = Map()\n    for i in lst:\n        freq.set(i, (freq.get(i) or 0) + 1)\n    return max(freq.values()) <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    if interval1[0] < interval2[0]:\n        interval1, interval2 = interval2, interval1\n    if interval1[0] > interval2[1]:\n        return \"NO\"\n    if interval1[1] < interval2[1]:\n        return \"NO\"\n    if isPrime(interval1[1] - interval1[0]):\n        return \"YES\"\n    return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = len(list(filter(lambda n: n < 0, arr))) % 2 == 1\n    return sign * sum(list(map(lambda n: abs(n), arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i / 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = list(map(int, filter(lambda d: int(d) % 2 == 1, str(n))))\n    return odds.length > 0 ? odds.reduce((a, b) => a * b) : 0;\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: pow(ceil(n), 2), lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rindex(\" \") + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [*range(len(arr))].slice(1).filter(i => arr[i] < arr[i - 1])\n    return max(idx, -1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = list(filter(lambda i: i < 0, lst))\n    pos = list(filter(lambda i: i > 0, lst))\n    maxNeg = neg.length > 0 ? Math.max(...neg) : null\n    minPos = pos.length > 0 ? Math.min(...pos) : null\n    return [maxNeg, minPos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if type(a) == str:\n        a1 = float(a.replace(',', '.'))\n    elif type(a) == int:\n        a1 = a\n    else:\n        raise TypeError('Type Error')\n    if type(b) == str:\n        b1 = float(b.replace(',', '.'))\n    elif type(b) == int:\n        b1 = b\n    else:\n        raise TypeError('Type Error')\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(r\"\\s{3,}\", \"-\").replace(r\"\\s\", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split('.')\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].match(/[a-z]/i) or [...lst[0]].filter(ch => ch.match(/\\d/)).length > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    words = list(filter(lambda w: is_prime(len(w)), words)\n    return \" \".join(words)\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len(list(filter(lambda n: n > 10 and n % 2 == 1 and odds.find(str(n)[0]) != -1, nums))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return (c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if not names.includes(planet1) or not names.includes(planet2):\n        return []\n    l = names.indexOf(planet1)\n    r = names.indexOf(planet2)\n    if l > r:\n        [l, r] = [r, l]\n    if l == r:\n        return []\n    return names.slice(l + 1, r)\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = list(filter(lambda s: len(s) % 2 == 0, lst))\n    return sorted(result, key=lambda s: (len(s), s))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(map(lambda x: x ** 2, filter(lambda x: x >= 0 and x % 2 == 1, lst)))\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return game.map((x, i) => Math.abs(x - guess[i]));\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = float('-inf')\n    max_ext = ''\n    for ext in extensions:\n        upper = len([c for c in ext if c.upper() == c])\n        lower = len([c for c in ext if c.lower() == c])\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f'{class_name}.{max_ext}'\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = len([d for d in ds if ord(d) % 2 == 0])\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i in range(len(values)):\n        while num >= values[i]:\n            res.append(numerals[i])\n            num -= values[i]\n    return \"\".join(res)\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c].sort((a, b) => a - b)\n    return s[0] * s[0] + s[1] * s[1] === s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w < w and max_w or w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = [...operators]\n    nums = [...operands]\n    i = ops.length - 1\n    while i >= 0:\n        if ops[i] === \"**\":\n            nums[i] = Math.pow(nums[i], nums[i + 1])\n            nums.splice(i + 1, 1)\n            ops.splice(i, 1)\n        i -= 1\n    i = 0\n    while i < ops.length:\n        if ops[i] === \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.splice(i + 1, 1)\n            ops.splice(i, 1)\n            i -= 1\n        else if ops[i] === \"//\":\n            nums[i] = Math.trunc(nums[i] / nums[i + 1])\n            nums.splice(i + 1, 1)\n            ops.splice(i, 1)\n            i -= 1\n        i += 1\n    i = 0\n    while i < ops.length:\n        if ops[i] === \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.splice(i + 1, 1)\n            ops.splice(i, 1)\n            i -= 1\n        else if ops[i] === \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.splice(i + 1, 1)\n            ops.splice(i, 1)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(ch.match(/[a-zA-Z]/) for ch in s):\n        return s.split('').reverse().join('')\n    result = []\n    for ch in s:\n        if not ch.match(/[a-zA-Z]/):\n            result.push(ch)\n        elif ch.match(/[A-Z]/):\n            result.push(ch.toLowerCase())\n        elif ch.match(/[a-z]/):\n            result.push(ch.toUpperCase())\n    return result.join('')\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = hashlib.md5()\n    txt_bytes = txt.encode()\n    md5_hash.update(txt_bytes)\n    md5_encoded = md5_hash.hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return list(range(lower, upper + 1, 2))\n"
        ]
    },
    "kotlin": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(0, len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == '(':\n            stk.append(ch)\n            current_group += ch\n        elif ch == ')':\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(map(lambda x: abs(x - mean), numbers))\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \").filter(lambda x: x.isNotEmpty())\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return list(filter(lambda x: substring in x, strs))\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    nSum = sum(numbers)\n    nProduct = reduce(lambda acc, i: acc * i, numbers, 1)\n    return [nSum, nProduct]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = Int.MIN_VALUE\n    result = mutableListOf<Int>()\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.add(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[i:] == s[i:][::-1]:\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(map(lambda x, y: '0' if x == y else '1', a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if len(strs) == 0:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[0:i+1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \").filter(lambda x: x.isNotEmpty())\n    return notes.map(lambda x: durations[x]!!)\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(0, s.length - substring.length):\n        if s.substring(i, i + substring.length) == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = list(filter(lambda x: x in num_dict, numbers.split(\" \")))\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers) if len(numbers) > 0 else 0.0\n    max_num = max(numbers) if len(numbers) > 0 else 0.0\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(it - min_num) / (max_num - min_num) for it in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: isinstance(x, int), values))\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    num = n\n    while divisor <= num:\n        if num % divisor == 0:\n            factors.append(divisor)\n            num /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = [num for num in numbers if counts[num] == 1]\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = StringBuilder()\n    for ch in s:\n        if not ch.isLetter():\n            flipped.append(ch)\n        elif ch.isLowerCase():\n            flipped.append(ch.toUpperCase())\n        elif ch.isUpperCase():\n            flipped.append(ch.toLowerCase())\n    return flipped.toString()\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return list(filter(lambda x: x.startswith(prefix_str), strs))\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda x: x > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n))):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0.0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = list(filter(lambda i: i[0] % 3 == 0, enumerate(l)))\n    sorted_third.sort()\n    return list(map(lambda i: sorted_third[i[0] / 3] if i[0] % 3 == 0 else i[1], enumerate(l)))\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    if len(l) == 0:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += i.toString().count { it == '7' }\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = list(filter(lambda i: i[0] % 2 == 0, enumerate(l)))\n    sorted_even.sort()\n    return list(map(lambda i: sorted_even[i[0] / 2] if i[0] % 2 == 0 else i[1], enumerate(l)))\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(0, len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return l.map { it + 1 }\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x /= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) / 2]\n    else:\n        return (sl[len(l) / 2] + sl[len(l) / 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(0, n-1):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = [((ord(c) - 97 + 5) % 26 + 97) for c in s]\n    return ''.join(chr(c) for c in result)\ndef decode_shift(s: str) -> str:\n    result = [((ord(c) - 97 + 21) % 26 + 97) for c in s]\n    return ''.join(chr(c) for c in result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(filter(lambda char: char not in vowels, txt))\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = l.zip(l.drop(1)).map { it.second - it.first }\n    return diff.all { it <= 0 } || diff.all { it >= 0 }\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return l1.intersect(l2).toList().sorted()\n",
            "def largest_prime_factor(n: int) -> int:\n    n = n\n    i = 2\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(0, n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return list(map(lambda x, i: x * i, xs))[1:]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    n = n\n    while n > 2:\n        a = b\n        b = c\n        c = a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(0, len(s)):\n        if vowels.contains(s[i].toLowerCase()) or (i == len(s) - 1 and s[i].toLowerCase() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = list(filter(lambda x: x % 2 == 0, arr))\n    if len(evens) == 0:\n        return []\n    minEven = min(evens)\n    return [minEven, arr.index(minEven)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    goodVals = list(filter(lambda x: x[1] >= x[0], freqs.items()))\n    return max(goodVals) if goodVals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(i for i in range(len(q))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(0, len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(map(lambda x: len(x), lst1))\n    cnt2 = sum(map(lambda x: len(x), lst2))\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n))):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    a = a\n    for i in range(2, a):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a /= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = round(a ** (1.0 / 3.0))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return len(list(filter(lambda x: x in \"2357BD\", num)))\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = dec.toString(2)\n    return \"db\" + binary + \"db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, floor(sqrt(length))):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * (10 ** (n - 2))\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(digit) for digit in str(n))\n    return str(digits_sum)\n",
            "def add(lst: List[int]) -> int:\n    return sum(filter(lambda x: x % 2 == 0, filter(lambda x: x % 2 == 1, lst)))\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \").map(lambda word: \"\".join(sorted(word)))\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda x: (x[1], x[0]), reverse=True)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if arr.isEmpty():\n        return emptyList()\n    if (arr[0] + arr[arr.size - 1]) % 2 == 0:\n        return arr.sortedDescending()\n    else:\n        return arr.sorted()\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(re.compile(r\"[.!?]\\s*\"))\n    return len(list(filter(lambda sentence: len(sentence) >= 2 and sentence[:2] == \"I \", sentences)))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def skjkasdkd(lst: List[int]) -> int:\n    primes = list(filter(lambda n: isPrime(n), lst)\n    if len(primes) == 0:\n        return 0\n    largest = max(primes).toString()\n    return sum(map(lambda c: c.digitToInt(), largest))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    return all(k.all(lambda c: c.islower()) for k in d.keys()) or all(k.all(lambda c: c.isupper()) for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return len(list(filter(lambda x: x[0] % 2 == 0 and x[1] in vowels, enumerate(s))))\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return list(map(lambda i: n + 2 * i, range(n)))\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(\"[, ]\".toRegex()).filter { it.length > 0 }\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if y != x:\n        return y - 1\n    return -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = ((n + m).to_double() / 2.0 + 0.5).to_int()\n    return r_avg.to_string(2)\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return sorted(filter(lambda x: all_digits_odd(str(x)), x)\ndef all_digits_odd(s: str) -> bool:\n    return all(lambda x: x % 2 != 0, s)\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return list(map(lambda i, it: nums[:i + 1].sum() if it % 2 != 0 else reduce(lambda x, y: x * y, nums[:i + 1]), range(len(nums)), nums)\n",
            "def even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[0:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len(list(filter(lambda x: digits_sum(x) > 0, arr)))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if arr.isEmpty():\n        return true\n    sorted_arr = arr.sorted()\n    for i in range(0, arr.size):\n        if arr.subList(i, arr.size) == sorted_arr.subList(0, arr.size - i) and arr.subList(0, i) == sorted_arr.subList(arr.size - i, sorted_arr.size):\n            return true\n    return false\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = 0\n    even_cnt = 0\n    for i in lst1:\n        if i % 2 != 0:\n            odd_cnt += 1\n    for i in lst2:\n        if i % 2 == 0:\n            even_cnt += 1\n    if even_cnt >= odd_cnt:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \").filter(lambda w: len(w) > 0)\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if len(freq) > 0:\n        maxFreq = max(freq.values())\n        for kv in freq:\n            if kv.value == maxFreq:\n                result[kv.key] = kv.value\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(filter(lambda x: x not in c, s))\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len(list(filter(lambda x: int(x) % 2 == 1, num)))\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(ceil(sum(row) / capacity) for row in grid)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").filter(lambda word: len(word) > 0)\n    return words.filter(lambda word: len(word.filter(lambda c: consonants.contains(c.toLowerCase()))) == n\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 1, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    depth = 0\n    for ch in lst[0] + lst[1]:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return \"No\"\n    return \"Yes\" if depth == 0 else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    return arr.sorted().takeLast(k)\n",
            "def solution(lst: List[int]) -> int:\n    return sum(filter(lambda x: x % 2 != 0, map(lambda x: lst[x], filter(lambda x: x % 2 == 0, range(len(lst)))))\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda x: len(str(x)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    n = n\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    return collatz.sort()\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(txt.filter(lambda x: x.islower() and x.toInt() % 2 == 0).count())]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not lst.drop(1).zip(lst).all(lambda a, b: b <= a):\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    return freq.values().max() <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n))):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and isPrime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if len([x for x in arr if x < 0]) % 2 == 1 else 1\n    return sign * sum([abs(x) for x in arr])\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = list(filter(lambda x: int(x) % 2 == 1, str(n)))\n    if len(odds) > 0:\n        return reduce(lambda x, y: x * y, odds)\n    else:\n        return 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda x: ceil(x) ** 2, lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if len(txt) == 0:\n        return False\n    last = txt.split(\" \")[-1]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = list(filter(lambda x: x < 0, lst))\n    pos = list(filter(lambda x: x > 0, lst))\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str):\n        a1 = a.replace(\",\", \".\").toDouble()\n    elif isinstance(a, int):\n        a1 = a.toDouble()\n    elif isinstance(a, double):\n        a1 = a as Double\n    else:\n        raise Exception(\"Unknown type\")\n    if isinstance(b, str):\n        b1 = b.replace(\",\", \".\").toDouble()\n    elif isinstance(b, int):\n        b1 = b.toDouble()\n    elif isinstance(b, double):\n        b1 = b as Double\n    else:\n        raise Exception(\"Unknown type\")\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(Regex(\"\\\\s{3,}\"), \"-\").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or lst[0].count(lambda x: x.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in lst.indices:\n        if i % 3 == 0:\n            result += lst[i].toDouble().pow(2).toInt()\n        elif i % 4 == 0:\n            result += lst[i].toDouble().pow(3).toInt()\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    if len(sentence) < 2:\n        return False\n    for i in range(2, floor(sqrt(len(sentence))) + 1):\n        if len(sentence) % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(filter(lambda word: is_prime(len(word)), words))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def order_by_points(nums: List[int]) -> List[int]:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[0:2]) * 2 + order_by_points(abs(n))\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len(list(filter(lambda x: x > 10 and x % 2 == 1 and odds.contains(str(x)[0]), nums))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = filter(lambda x: x.length % 2 == 0, lst)\n    return sorted(result, key=lambda x: (x.length, x))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, floor(sqrt(n))):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(map(lambda x: int(x * x), filter(lambda x: x >= 0 and x % 2 == 1.0, lst)))\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return list(map(lambda x, y: abs(x - y), game, guess))\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -2147483648\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = ds.count(lambda x: int(x) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    num = num\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.toMutableList()\n    nums = operands.toMutableList()\n    i = ops.size - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i].toDouble().pow(nums[i + 1]).toInt()\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n        i -= 1\n    i = 0\n    while i < ops.size:\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        else if ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < ops.size:\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        else if ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(ch.isalpha() for ch in s):\n        return s[::-1]\n    result = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        elif ch.islower():\n            result += ch.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    md5_hash = MessageDigest.getInstance(\"MD5\")\n    txt_bytes = txt.toByteArray()\n    md5_encoded = md5_hash.digest(txt_bytes).joinToString(\"\") { \"%02x\".format(it) }\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "php": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(map(lambda x: abs(x - mean), numbers))\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = list(filter(lambda s: len(s) > 0, paren_string.split(\" \")))\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strs))\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    nSum = sum(numbers)\n    nProduct = product(numbers)\n    return [nSum, nProduct]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -sys.maxsize - 1\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[i:] == s[i:][::-1]:\n            return s + s[::-1][:i]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(map(lambda x, y: '0' if x == y else '1', a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[0:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(range(0, n))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = list(filter(lambda s: len(s) > 0, music_string.split(\" \")))\n    return list(map(lambda note: durations[note], notes))\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(0, len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = list(filter(lambda x: x in num_dict, numbers.split(\" \")))\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = numbers\n    sorted_numbers.sort()\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return list(map(lambda num: (num - min_num) / (max_num - min_num), numbers))\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: isinstance(x, int), values))\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = list(filter(lambda num: counts[num] == 1, numbers))\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in str_split(s):\n        if not ctype_alpha(ch):\n            flipped += ch\n        elif ctype_lower(ch):\n            flipped += strtoupper(ch)\n        elif ctype_upper(ch):\n            flipped += strtolower(ch)\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return list(filter(lambda str: str.startswith(prefix_str), strs))\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda num: num > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = list(filter(lambda i: i % 3 == 0, l))\n    sorted_third.sort()\n    return list(map(lambda i, x: sorted_third[i / 3] if i % 3 == 0 else x, range(len(l)), l)\n",
            "def list_unique(l: List[int]) -> List[int]:\n    result = list(set(l))\n    result.sort()\n    return result\n",
            "def max_element(l: List[int]) -> int:\n    if len(l) == 0:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = list(filter(lambda i: i % 2 == 0, l))\n    sorted_even.sort()\n    return list(map(lambda i, x: sorted_even[i // 2] if i % 2 == 0 else x, range(len(l)), l)\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s)):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return pow(n, 2)\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return list(map(lambda i: i + 1, l))\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = {}\n    for num in l:\n        if num in seen:\n            return True\n        seen[num] = True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x = int(x / bas)\n    return \"\".join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = l\n    sl.sort()\n    if len(l) % 2 != 0:\n        return sl[len(l) / 2]\n    else:\n        return (sl[len(l) / 2] + sl[len(l) / 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = list(map(lambda ch: chr(((ord(ch) - 97 + 5) % 26) + 97), s)\n    return \"\".join(result)\ndef decode_shift(s: str) -> str:\n    result = list(map(lambda ch: chr(((ord(ch) - 97 + 21) % 26) + 97), s)\n    return \"\".join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(filter(lambda char: str.find(vowels, char) == -1, list(txt)))\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return len(list(filter(lambda x: x < t, l))) == len(l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    set0 = list(set(s0))\n    set1 = list(set(s1))\n    set0.sort()\n    set1.sort()\n    return set0 == set1\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = list(map(lambda a, b: b - a, l[:-1], l[1:]))\n    return len(list(filter(lambda x: x <= 0, diff))) == len(diff) or len(list(filter(lambda x: x >= 0, diff))) == len(diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    result = list(set(l1).intersection(set(l2)))\n    result.sort()\n    return result\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(0, n))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return list(map(lambda x, i: x * i, xs, range(0, len(xs) - 1)))[1:]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if str.find(vowels, str.lower(s[i])) != -1 or (i == len(s) - 1 and str.lower(s[i]) == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    xStr = str(x)\n    if shift > len(xStr):\n        return xStr[::-1]\n    else:\n        return xStr[-shift:] + xStr[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(map(ord, filter(str.isupper, s)))\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = list(filter(lambda x: x % 2 == 0, arr))\n    if not evens:\n        return []\n    minEven = min(evens)\n    return [minEven, arr.index(minEven)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    goodVals = filter(lambda v, k: v >= k, freqs.items())\n    return max([*goodVals.keys(), -1])\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst\n    sl.sort()\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = len(list(filter(lambda i: q[i] == q[len(q) - i - 1], range(len(q)))) == len(q)\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(int(len(arr) / 2)):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(map(len, lst1))\n    cnt2 = sum(map(len, lst2))\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a /= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = int(round(pow(a, 1.0 / 3.0)))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return len(set(num).intersection(set(\"2357BD\")))\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)\n    return \"db\" + binary + \"db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * pow(10, n - 2)\n",
            "def solve(n: int) -> str:\n    digitsSum = sum(int(i) for i in str(n))\n    return bin(digitsSum)\n",
            "def add(lst: List[int]) -> int:\n    return sum(filter(lambda v, k: k % 2 == 1 and v % 2 == 0, lst))\n",
            "def anti_shuffle(s: str) -> str:\n    words = map(lambda word: ''.join(sorted(word)), s.split(' '))\n    return ' '.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coords.append([i, j])\n    coords.sort(key=lambda a: (a[0], -a[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    result = arr\n    if (arr[0] + arr[len(arr) - 1]) % 2 == 0:\n        result.sort(reverse=True)\n        return result\n    else:\n        result.sort()\n        return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = list(set(lst))\n    sl.sort()\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r\"[.!?]\\s*\", s)\n    return len(list(filter(lambda sentence: len(sentence) >= 2 and sentence[:2] == \"I \", sentences)))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def skjkasdkd(lst: List[int]) -> int:\n    def isPrime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes = list(filter(isPrime, lst))\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum(map(int, str(largest)))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    return len(list(filter(lambda k: ctype_lower(str(k)), d.keys())) == len(d) or len(list(filter(lambda k: ctype_upper(str(k)), d.keys())) == len(d)\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if len(list(filter(lambda p: num % p != 0, primes))) == len(primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return len(list(filter(lambda c, i: i % 2 == 0 and vowels.find(c) != -1, s, range(len(s)))))\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return list(map(lambda i: n + 2 * i, range(0, n - 1)))\n",
            "def words_string(s: str) -> List[str]:\n    return re.split(r\"[ ,]\", s)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y != x ? y - 1 : -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = int((n + m) / 2 + 0.5)\n    return bin(r_avg)\n",
            "def all_digits_odd(s: str) -> bool:\n    return len(list(filter(lambda digit: ord(digit) % 2 != 0, s))) == len(s)\ndef unique_digits(x: List[int]) -> List[int]:\n    result = list(filter(lambda x: all_digits_odd(str(x)), x)\n    result.sort()\n    return result\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = list(filter(lambda x: 1 <= x <= 9, arr))\n    sorted_arr.sort(reverse=True)\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return list(map(lambda i: sum(nums[:i]) if i % 2 != 0 else reduce(lambda x, y: x * y, nums[:i], 1), nums))\n",
            "def even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    def digits_sum(n: int) -> int:\n        n_str = str(n)\n        if n >= 0:\n            return sum(list(map(int, n_str)))\n        else:\n            return 2 * int(n_str[:2]) + digits_sum(abs(n))\n    return len(list(filter(lambda n: digits_sum(n) > 0, arr)))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = arr\n    sorted_arr.sort()\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = len(list(filter(lambda n: n % 2 != 0, lst1)))\n    even_cnt = len(list(filter(lambda n: n % 2 == 0, lst2)))\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = list(filter(lambda w: len(w) > 0, test.split(\" \")))\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if len(freq) > 0:\n        maxFreq = max(freq.values())\n        for k, v in freq.items():\n            if v == maxFreq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n    s1 = ''.join(filter(lambda ch: ch not in c, s))\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len(list(filter(lambda d: ord(d) % 2 == 1, str_split(num))))\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", n))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: ceil(sum(arr) / capacity), grid))\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    result = arr\n    result.sort(key=lambda x: bin(x).count('1'))\n    return result\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = list(filter(lambda w: len(w) > 0, s.split(\" \")))\n    return list(filter(lambda w: len(list(filter(lambda c: c in consonants, w))) == n, words)\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    depth = 0\n    for ch in lst:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return \"No\"\n    return \"Yes\" if depth == 0 else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    result = arr\n    result.sort()\n    return result[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(filter(lambda v, k: k % 2 == 0 and v % 2 != 0, enumerate(lst)))\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda n: len(str(n)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != \"-\" or date[5] != \"-\":\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if txt.find(\" \") != -1:\n        return txt.split(\" \")\n    elif txt.find(\",\") != -1:\n        return txt.split(\",\")\n    else:\n        return [str(len(list(filter(lambda c: c.islower() and ord(c) % 2 == 0, txt))))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not reduce(lambda a, b: a and b, map(lambda i, j: i <= j, lst[:-1], lst[1:]), True):\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] = (freq[i] if i in freq else 0) + 1\n    return len(lst) == 0 or max(freq.values()) <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    if interval1[0] < interval2[0]:\n        l = interval2[0]\n    else:\n        l = interval1[0]\n    if interval1[1] < interval2[1]:\n        r = interval1[1]\n    else:\n        r = interval2[1]\n    length = r - l\n    if length > 0 and isPrime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = len(list(filter(lambda n: n < 0, arr))) % 2 == 1 ? -1 : 1\n    return sign * sum(map(lambda n: abs(n), arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i / 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = list(map(lambda x: int(x), filter(lambda x: int(x) % 2 == 1, str(n))))\n    return len(odds) > 0 ? reduce(lambda x, y: x * y, odds) : 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx = close_idx[::-1]\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: pow(ceil(n), 2), lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[strrpos(txt, \" \"):] if strrpos(txt, \" \") else txt\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = list(filter(lambda i: arr[i] < arr[i - 1], range(1, len(arr) - 1)))\n    return max([...idx, -1])\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = list(filter(lambda i: i < 0, lst))\n    pos = list(filter(lambda i: i > 0, lst))\n    maxNeg = max(neg) if len(neg) > 0 else None\n    minPos = min(pos) if len(pos) > 0 else None\n    return [maxNeg, minPos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str):\n        a1 = float(a.replace(',', '.'))\n    elif isinstance(a, int):\n        a1 = float(a)\n    elif isinstance(a, float):\n        a1 = a\n    else:\n        raise RuntimeError(\"Unknown type\")\n    if isinstance(b, str):\n        b1 = float(b.replace(',', '.'))\n    elif isinstance(b, int):\n        b1 = float(b)\n    elif isinstance(b, float):\n        b1 = b\n    else:\n        raise RuntimeError(\"Unknown type\")\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return str.replace(\" \", \"_\", re.sub(r\"\\s{3,}\", \"-\", txt))\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or len(list(filter(lambda ch: ch.isdigit(), lst[0]))) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    if len(sentence) < 2:\n        return False\n    for i in range(2, floor(sqrt(len(sentence)) + 1):\n        if len(sentence) % i == 0:\n            return False\n    return True\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def order_by_points(nums: List[int]) -> List[int]:\n    def digits_sum(n: int) -> int:\n        n_str = str(n)\n        if n >= 0:\n            return sum(map(int, n_str))\n        else:\n            return 2 * int(n_str[:2]) + digits_sum(abs(n))\n    result = nums\n    result.sort(key=digits_sum)\n    return result\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len(list(filter(lambda n: n > 10 and n % 2 == 1 and str(n)[0] in odds, nums)))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if not planet1 in names or not planet2 in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = list(filter(lambda x: len(x) % 2 == 0, lst))\n    result.sort(key=lambda x: (len(x), x))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(map(lambda n: n * n, filter(lambda n: n >= 0 and n % 2 == 1, lst)))\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return list(map(lambda x, y: abs(x - y), game, guess))\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -sys.maxsize\n    max_ext = \"\"\n    for ext in extensions:\n        upper = len(re.sub(r'[^A-Z]', '', ext))\n        lower = len(re.sub(r'[^a-z]', '', ext))\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:i+1] + b[0:i]) != -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = len(list(filter(lambda d: ord(d) % 2 == 0, ds)))\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators\n    nums = operands\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1])\n            del nums[i + 1]\n            del ops[i]\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = int(nums[i] / nums[i + 1])\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not list(filter(str.isalpha, s)):\n        return s[::-1]\n    result = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        elif ch.islower():\n            result += ch.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    txt_bytes = txt.encode('utf-8')\n    md5_encoded = hashlib.md5(txt_bytes).hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return list(filter(lambda i: i % 2 == 0, range(lower, upper + 1)))\n"
        ]
    },
    "python": {
        "cpp": [
            "bool hasCloseElements(const vector<double>& numbers, double threshold) {\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "vector<string> separateParenGroups(const string& paren_string) {\n    vector<string> groups;\n    stack<char> stk;\n    string current_group = \"\";\n    string parens = paren_string.replace(\" \", \"\");\n    for (char ch : parens) {\n        if (ch == \"(\") {\n            stk.push(ch);\n            current_group += ch;\n        } else if (ch == \")\") {\n            stk.pop();\n            current_group += ch;\n            if (stk.empty()) {\n                groups.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - floor(num);\n}\n",
            "bool belowZero(const vector<int>& operations) {\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(const vector<double>& numbers) {\n    double mean = accumulate(numbers.begin(), numbers.end(), 0.0) / numbers.size();\n    double deviation = accumulate(numbers.begin(), numbers.end(), 0.0, [mean](double x, double y) {\n        return x + abs(y - mean);\n    });\n    return deviation / numbers.size();\n}\n",
            "vector<int> intersperse(const vector<int>& numbers, int delimiter) {\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (i != 0) {\n            result.push_back(delimiter);\n        }\n        result.push_back(numbers[i]);\n    }\n    return result;\n}\n",
            "vector<int> parseNestedParens(const string& paren_string) {\n    vector<int> result;\n    vector<string> paren_groups = split(paren_string, \" \");\n    for (string group : paren_groups) {\n        int max_depth = 0;\n        int depth = 0;\n        for (char ch : group) {\n            if (ch == \"(\") {\n                depth += 1;\n                max_depth = max(max_depth, depth);\n            } else if (ch == \")\") {\n                depth -= 1;\n            }\n        }\n        result.push_back(max_depth);\n    }\n    return result;\n}\n",
            "vector<string> filterBySubstring(const vector<string>& strs, const string& substring) {\n    vector<string> result;\n    for (const string& s : strs) {\n        if (s.find(substring) != string::npos) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n",
            "vector<int> sumProduct(const vector<int>& numbers) {\n    int n_sum = accumulate(numbers.begin(), numbers.end(), 0);\n    int n_product = accumulate(numbers.begin(), numbers.end(), 1, multiplies<int>());\n    return {n_sum, n_product};\n}\n",
            "vector<int> rollingMax(const vector<int>& numbers) {\n    int max_so_far = numeric_limits<int>::min();\n    vector<int> result;\n    for (int num : numbers) {\n        max_so_far = max(max_so_far, num);\n        result.push_back(max_so_far);\n    }\n    return result;\n}\n",
            "string makePalindrome(const string& s) {\n    if (is_palindrome(s)) {\n        return s;\n    }\n    for (int i = 0; i < s.length(); i++) {\n        if (is_palindrome(s.substr(i))) {\n            return s + string(s.rbegin(), s.rbegin() + i);\n        }\n    }\n    return \"\";\n}\n",
            "string stringXor(const string& a, const string& b) {\n    string result;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n",
            "optional<string> longest(const vector<string>& strs) {\n    if (strs.empty()) {\n        return nullopt;\n    }\n    string longest_s = strs[0];\n    for (const string& s : strs) {\n        if (s.size() > longest_s.size()) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "vector<string> allPrefixes(const string& s) {\n    vector<string> prefixes;\n    for (int i = 0; i < s.length(); i++) {\n        prefixes.push_back(s.substr(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "string stringSequence(int n) {\n    return \" \".join([str(i) for i in range(n + 1)])\n}\n",
            "int countDistinctCharacters(const string& s) {\n    return s.length();\n}\n",
            "vector<int> parseMusic(const string& music_string) {\n    map<string, int> durations = {{\"o\", 4}, {\"o|\", 2}, {\".|\", 1}};\n    vector<string> notes = split(music_string, ' ');\n    vector<int> result;\n    for (const string& note : notes) {\n        result.push_back(durations[note]);\n    }\n    return result;\n}\n",
            "int howManyTimes(const string& s, const string& substring) {\n    int times = 0;\n    for (int i = 0; i < s.length() - substring.length() + 1; i++) {\n        if (s.substr(i, substring.length()) == substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "string sortNumbers(const string& numbers) {\n    map<string, int> num_dict = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9},\n    };\n    vector<string> num_list;\n    for (auto& num : split(numbers, \" \")) {\n        if (num_dict.find(num) != num_dict.end()) {\n            num_list.push_back(num);\n        }\n    }\n    sort(num_list.begin(), num_list.end(), [&](const string& a, const string& b) {\n        return num_dict[a] < num_dict[b];\n    });\n    return join(num_list, \" \");\n}\n",
            "vector<double> findClosestElements(const vector<double>& numbers) {\n    vector<double> sorted_numbers = numbers;\n    sort(sorted_numbers.begin(), sorted_numbers.end());\n    double min_diff = numeric_limits<double>::infinity();\n    vector<double> closest_pair;\n    for (int i = 1; i < sorted_numbers.size(); i++) {\n        double diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {sorted_numbers[i - 1], sorted_numbers[i]};\n        }\n    }\n    return closest_pair;\n}\n",
            "vector<double> rescaleToUnit(const vector<double>& numbers) {\n    double min_num = *min_element(numbers.begin(), numbers.end());\n    double max_num = *max_element(numbers.begin(), numbers.end());\n    if (min_num == max_num) {\n        return vector<double>(numbers.size(), 0.0);\n    } else {\n        vector<double> rescaled_numbers;\n        for (double num : numbers) {\n            rescaled_numbers.push_back((num - min_num) / (max_num - min_num));\n        }\n        return rescaled_numbers;\n    }\n}\n",
            "vector<int> filterIntegers(const vector<any>& values) {\n    vector<int> result;\n    for (const auto& x : values) {\n        if (x.type() == typeid(int)) {\n            result.push_back(any_cast<int>(x));\n        }\n    }\n    return result;\n}\n",
            "int strLength(const string& s) {\n    return s.length();\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "vector<int> factorize(int n) {\n    vector<int> factors;\n    int divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.push_back(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "vector<int> removeDuplicates(const vector<int>& numbers) {\n    unordered_map<int, int> counts;\n    for (int num : numbers) {\n        counts[num] = counts.count(num) + 1;\n    }\n    vector<int> res;\n    for (int num : numbers) {\n        if (counts[num] == 1) {\n            res.push_back(num);\n        }\n    }\n    return res;\n}\n",
            "string flipCase(const string& s) {\n    string flipped;\n    for (char ch : s) {\n        if (!isalpha(ch)) {\n            flipped += ch;\n        } else if (islower(ch)) {\n            flipped += toupper(ch);\n        } else if (isupper(ch)) {\n            flipped += tolower(ch);\n        }\n    }\n    return flipped;\n}\n",
            "string concatenate(const vector<string>& strs) {\n    return accumulate(strs.begin(), strs.end(), string());\n}\n",
            "vector<string> filterByPrefix(const vector<string>& strs, const string& prefix_str) {\n    vector<string> result;\n    for (const string& s : strs) {\n        if (s.startswith(prefix_str)) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n",
            "vector<int> getPositive(const vector<int>& l) {\n    vector<int> result;\n    for (int num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n) + 1; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "double poly(const vector<int>& xs, double x) {\n    double res = 0.0;\n    for (int i = 0; i < xs.size(); i++) {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\ndouble findZero(const vector<int>& xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "vector<int> sortThird(const vector<int>& l) {\n    vector<int> sorted_third = sorted(l[::3]);\n    return [sorted_third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n}\n",
            "vector<int> listUnique(const vector<int>& l) {\n    return sorted(list(set(l)));\n}\n",
            "int maxElement(const vector<int>& l) {\n    if (l.empty()) {\n        return 0;\n    }\n    return *max_element(l.begin(), l.end());\n}\n",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += to_string(i).count(\"7\");\n        }\n    }\n    return cnt;\n}\n",
            "vector<int> sortEven(const vector<int>& l) {\n    vector<int> sorted_even = sorted(l[::2]);\n    return [sorted_even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n}\n",
            "string encodeCyclic(const string& s) {\n    string result;\n    for (int i = 0; i < s.length(); i += 3) {\n        if (i + 3 > s.length()) {\n            result += s.substr(i);\n        } else {\n            result += s.substr(i + 1, 2);\n            result += s[i];\n        }\n    }\n    return result;\n}\nstring decodeCyclic(const string& s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "int primeFib(int n) {\n    vector<int> f = {0, 1};\n    int cnt = 0;\n    while (cnt < n) {\n        f = {f[1], f[0] + f[1]};\n        if (is_prime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\n",
            "bool triplesSumToZero(const vector<int>& l) {\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return n * n;\n}\n",
            "vector<int> incrList(const vector<int>& l) {\n    vector<int> result;\n    for (int i : l) {\n        result.push_back(i + 1);\n    }\n    return result;\n}\n",
            "bool pairsSumToZero(const vector<int>& l) {\n    unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n",
            "string changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    vector<string> digits;\n    while (x > 0) {\n        digits.push_back(to_string(x % bas));\n        x /= bas;\n    }\n    string result = \"\";\n    for (int i = digits.size() - 1; i >= 0; i--) {\n        result += digits[i];\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int h) {\n    return a * h / 2;\n}\n",
            "int fib4(int n) {\n    int fib[4] = {0, 0, 2, 0};\n    for (int i = 4; i < n + 1; i++) {\n        fib[i % 4] = sum(fib);\n    }\n    return fib[n % 4];\n}\n",
            "double median(const vector<double>& l) {\n    vector<double> sl = l;\n    sort(sl.begin(), sl.end());\n    if (l.size() % 2 != 0) {\n        return sl[l.size() / 2];\n    } else {\n        return (sl[l.size() / 2] + sl[l.size() / 2 - 1]) / 2;\n    }\n}\n",
            "bool isPalindrome(const string& txt) {\n    return txt == txt[::-1];\n}\n",
            "int modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "string encodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        result += (((ch - 97 + 5) % 26) + 97);\n    }\n    return result;\n}\nstring decodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        result += (((ch - 97 + 21) % 26) + 97);\n    }\n    return result;\n}\n",
            "string removeVowels(const string& txt) {\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    for (int i = 0; i < txt.length(); i++) {\n        if (vowels.find(txt[i]) == -1) {\n            result += txt[i];\n        }\n    }\n    return result;\n}\n",
            "bool belowThreshold(const vector<int>& l, int t) {\n    return all_of(l.begin(), l.end(), [t](int x) { return x < t; });\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(const string& s0, const string& s1) {\n    return set(s0) == set(s1);\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '<') {\n            depth += 1;\n        } else if (b == '>') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(const vector<int>& l) {\n    vector<int> diff;\n    for (int i = 0; i < l.size() - 1; i++) {\n        diff.push_back(l[i + 1] - l[i]);\n    }\n    bool all_positive = true;\n    bool all_negative = true;\n    for (int i = 0; i < diff.size(); i++) {\n        if (diff[i] > 0) {\n            all_negative = false;\n        } else if (diff[i] < 0) {\n            all_positive = false;\n        }\n    }\n    return all_positive || all_negative;\n}\n",
            "vector<int> common(const vector<int>& l1, const vector<int>& l2) {\n    return sorted(list(set(l1) & set(l2)));\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    return sum(range(n + 1));\n}\n",
            "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '(') {\n            depth += 1;\n        } else if (b == ')') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "vector<int> derivative(const vector<int>& xs) {\n    vector<int> result;\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(const string& s) {\n    string vowels = \"aeiou\";\n    int cnt = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == 'y' && i == s.length() - 1) {\n            cnt++;\n        } else if (s[i] == 'Y' && i == s.length() - 1) {\n            cnt++;\n        } else if (s[i] == 'y' && i != s.length() - 1) {\n            cnt++;\n        } else if (s[i] == 'Y' && i != s.length() - 1) {\n            cnt++;\n        } else if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            cnt++;\n        } else if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n",
            "string circularShift(int x, int shift) {\n    string x_str = to_string(x);\n    if (shift > x_str.length()) {\n        return string(x_str.rbegin(), x_str.rend());\n    } else {\n        return x_str.substr(x_str.length() - shift) + x_str.substr(0, x_str.length() - shift);\n    }\n}\n",
            "int digitSum(const string& s) {\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += c;\n        }\n    }\n    return sum;\n}\n",
            "int fruitDistribution(const string& s, int n) {\n    vector<string> words = split(s, ' ');\n    int apples = stoi(words[words.find(\"apples\") - 1]);\n    int oranges = stoi(words[words.find(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "vector<int> pluck(const vector<int>& arr) {\n    vector<int> evens;\n    for (int n : arr) {\n        if (n % 2 == 0) {\n            evens.push_back(n);\n        }\n    }\n    if (evens.size() == 0) {\n        return {};\n    }\n    int min_even = *min_element(evens.begin(), evens.end());\n    return {min_even, distance(arr.begin(), find(arr.begin(), arr.end(), min_even))};\n}\n",
            "int search(const vector<int>& lst) {\n    unordered_map<int, int> freqs;\n    for (int n : lst) {\n        freqs[n] = freqs.count(n) + 1;\n    }\n    vector<int> good_vals;\n    for (auto [n, v] : freqs) {\n        if (v >= n) {\n            good_vals.push_back(n);\n        }\n    }\n    return *max_element(good_vals.begin(), good_vals.end(), [](int a, int b) {\n        return a < b;\n    });\n}\n",
            "vector<int> strangeSortList(const vector<int>& lst) {\n    vector<int> sl = sorted(lst);\n    vector<int> result;\n    int left = 0, right = sl.size() - 1;\n    while (left <= right) {\n        result.push_back(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push_back(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        double s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(const vector<int>& q, int w) {\n    if (q.size() == 0) {\n        return false;\n    }\n    bool is_palin = true;\n    for (int i = 0; i < q.size(); i++) {\n        if (q[i] != q[q.size() - i - 1]) {\n            is_palin = false;\n            break;\n        }\n    }\n    int total = 0;\n    for (int i = 0; i < q.size(); i++) {\n        total += q[i];\n    }\n    return is_palin && total <= w;\n}\n",
            "int smallestChange(const vector<int>& arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.size() / 2; i++) {\n        if (arr[i] != arr[arr.size() - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "vector<string> totalMatch(const vector<string>& lst1, const vector<string>& lst2) {\n    int cnt1 = 0;\n    for (const string& s : lst1) {\n        cnt1 += s.size();\n    }\n    int cnt2 = 0;\n    for (const string& s : lst2) {\n        cnt2 += s.size();\n    }\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n",
            "bool isMultiplyPrime(int a) {\n    if (a < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(a)) + 1; i++) {\n        if (a % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    a = abs(a);\n    int root = int(round(pow(a, 1.0 / 3.0)));\n    return root * root * root == a;\n}\n",
            "int hexKey(const string& num) {\n    int count = 0;\n    for (char x : num) {\n        if (x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D') {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "string decimalToBinary(int dec) {\n    string binary = to_string(dec);\n    return \"db\" + binary + \"db\";\n}\n",
            "bool isHappy(const string& s) {\n    if (s.length() < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.length() - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "vector<string> numericalLetterGrade(const vector<double>& grades) {\n    vector<string> result;\n    for (double g : grades) {\n        if (g == 4.0) {\n            result.push_back(\"A+\");\n        } else if (g > 3.7) {\n            result.push_back(\"A\");\n        } else if (g > 3.3) {\n            result.push_back(\"A-\");\n        } else if (g > 3.0) {\n            result.push_back(\"B+\");\n        } else if (g > 2.7) {\n            result.push_back(\"B\");\n        } else if (g > 2.3) {\n            result.push_back(\"B-\");\n        } else if (g > 2.0) {\n            result.push_back(\"C+\");\n        } else if (g > 1.7) {\n            result.push_back(\"C\");\n        } else if (g > 1.3) {\n            result.push_back(\"C-\");\n        } else if (g > 1.0) {\n            result.push_back(\"D+\");\n        } else if (g > 0.7) {\n            result.push_back(\"D\");\n        } else if (g > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(const string& s) {\n    int length = s.length();\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(length)) + 1; i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * pow(10, n - 2);\n}\n",
            "string solve(int n) {\n    string digits_sum = 0;\n    for (int d : str(n)) {\n        digits_sum += int(d);\n    }\n    return bin(digits_sum)[2:];\n}\n",
            "int add(const vector<int>& lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n",
            "string antiShuffle(const string& s) {\n    vector<string> words;\n    for (auto word : split(s, \" \")) {\n        string sortedWord = word;\n        sort(sortedWord.begin(), sortedWord.end());\n        words.push_back(sortedWord);\n    }\n    return join(words, \" \");\n}\n",
            "vector<vector<int>> getRow(const vector<vector<int>>& lst, int x) {\n    vector<vector<int>> coords;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                coords.push_back({i, j});\n            }\n        }\n    }\n    sort(coords.begin(), coords.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]);\n    });\n    return coords;\n}\n",
            "vector<int> sortArray(const vector<int>& arr) {\n    if (arr.size() == 0) {\n        return {};\n    }\n    if ((arr[0] + arr[arr.size() - 1]) % 2 == 0) {\n        vector<int> sorted_arr = arr;\n        sort(sorted_arr.begin(), sorted_arr.end(), greater<int>());\n        return sorted_arr;\n    } else {\n        vector<int> sorted_arr = arr;\n        sort(sorted_arr.begin(), sorted_arr.end());\n        return sorted_arr;\n    }\n}\n",
            "string encrypt(const string& s) {\n    string result;\n    for (char ch : s) {\n        int shifted = ch + 4;\n        if (shifted > 'z') {\n            shifted -= 26;\n        }\n        result += shifted;\n    }\n    return result;\n}\n",
            "optional<int> nextSmallest(const vector<int>& lst) {\n    vector<int> sl = sorted(set(lst));\n    if (sl.size() < 2) {\n        return nullopt;\n    }\n    return sl[1];\n}\n",
            "int isBored(const string& s) {\n    vector<string> sentences = regex_split(s, regex(\"[.!?]\\\\s*\"));\n    return accumulate(sentences.begin(), sentences.end(), 0, [](int acc, const string& sentence) {\n        return acc + (sentence.size() >= 2 && sentence.substr(0, 2) == \"I \");\n    });\n}\n",
            "bool anyInt(any x, any y, any z) {\n    if (x.type() == typeid(int) && y.type() == typeid(int) && z.type() == typeid(int)) {\n        if ((any_cast<int>(x) + any_cast<int>(y) == any_cast<int>(z)) || (any_cast<int>(x) + any_cast<int>(z) == any_cast<int>(y)) || (any_cast<int>(y) + any_cast<int>(z) == any_cast<int>(x))) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "string encode(const string& message) {\n    string vowels = \"aeiouAEIOU\";\n    string result;\n    for (char ch : message) {\n        if (isalpha(ch)) {\n            char ch1 = tolower(ch) if islower(ch) else toupper(ch);\n            if (vowels.find(ch1) != string::npos) {\n                ch1 = ch1 + 2;\n            }\n            result += ch1;\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}\n",
            "int skjkasdkd(const vector<int>& lst) {\n    vector<int> primes;\n    for (int n : lst) {\n        if (n < 2) {\n            continue;\n        }\n        bool is_prime = true;\n        for (int i = 2; i <= sqrt(n); i++) {\n            if (n % i == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(n);\n        }\n    }\n    if (primes.empty()) {\n        return 0;\n    }\n    int largest = *max_element(primes.begin(), primes.end());\n    int sum = 0;\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n    return sum;\n}\n",
            "bool checkDictCase(const unordered_map<string, string>& d) {\n    if (d.empty()) {\n        return false;\n    }\n    return all_of(d.begin(), d.end(), [](const pair<string, string>& p) {\n        return all_of(p.first.begin(), p.first.end(), [](const char& c) {\n            return islower(c);\n        });\n    }) || all_of(d.begin(), d.end(), [](const pair<string, string>& p) {\n        return all_of(p.first.begin(), p.first.end(), [](const char& c) {\n            return isupper(c);\n        });\n    });\n}\n",
            "vector<int> countUpTo(int n) {\n    vector<int> primes;\n    for (int num = 2; num < n; num++) {\n        bool is_prime = true;\n        for (int p : primes) {\n            if (num % p == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}\n",
            "int countUpper(const string& s) {\n    string vowels = \"AEIOU\";\n    return count_if(s.begin(), s.end(), [&](char c) {\n        return (&c - &s[0]) % 2 == 0 && find(vowels.begin(), vowels.end(), c) != vowels.end();\n    });\n}\n",
            "int closestInteger(const string& value) {\n    double num = stod(value);\n    if (num >= 0) {\n        return (int)(num + 0.5);\n    } else {\n        return (int)(num - 0.5);\n    }\n}\n",
            "vector<int> makeAPile(int n) {\n    vector<int> result;\n    for (int i = 0; i < n; i++) {\n        result.push_back(n + 2 * i);\n    }\n    return result;\n}\n",
            "vector<string> wordsString(const string& s) {\n    vector<string> result;\n    for (auto w : re.split(r\"[, ]\", s)) {\n        if (w.length() > 0) {\n            result.push_back(w);\n        }\n    }\n    return result;\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return y - 1 if x != y else -1;\n}\n",
            "optional<string> roundedAvg(int n, int m) {\n    if (n > m) {\n        return {};\n    }\n    int r_avg = (m + n) / 2.0 + 0.5;\n    return to_string(r_avg);\n}\n",
            "vector<int> uniqueDigits(const vector<int>& x) {\n    vector<int> result;\n    for (int num : x) {\n        bool all_digits_odd = true;\n        for (char digit : to_string(num)) {\n            if (digit % 2 == 0) {\n                all_digits_odd = false;\n                break;\n            }\n        }\n        if (all_digits_odd) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n",
            "vector<string> byLength(const vector<int>& arr) {\n    vector<string> digit_names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    vector<int> sorted_arr = sorted(arr, [](int a, int b) { return a > b; });\n    vector<string> result;\n    for (int x : sorted_arr) {\n        if (1 <= x && x <= 9) {\n            result.push_back(digit_names[x-1]);\n        }\n    }\n    return result;\n}\n",
            "vector<int> f(int n) {\n    vector<int> nums(n);\n    iota(nums.begin(), nums.end(), 1);\n    vector<int> result(n);\n    for (int i = 0; i < n; i++) {\n        if (i % 2 != 0) {\n            result[i] = accumulate(nums.begin(), nums.begin() + i, 0);\n        } else {\n            result[i] = accumulate(nums.begin(), nums.begin() + i, 1, multiplies<int>());\n        }\n    }\n    return result;\n}\n",
            "vector<int> evenOddPalindrome(int n) {\n    vector<int> cnt = {0, 0};\n    for (int i = 1; i <= n; i++) {\n        if (is_palindrome(to_string(i))) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "int countNums(const vector<int>& arr) {\n    int count = 0;\n    for (int n : arr) {\n        if (digitsSum(n) > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "bool moveOneBall(const vector<int>& arr) {\n    if (arr.size() == 0) {\n        return true;\n    }\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (equal(arr.begin() + i, arr.end(), sorted_arr.begin() + arr.size() - i) && equal(arr.begin(), arr.begin() + i, sorted_arr.begin() + arr.size() - i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "string canExchange(const vector<int>& lst1, const vector<int>& lst2) {\n    int odd_cnt = 0;\n    int even_cnt = 0;\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            odd_cnt++;\n        }\n    }\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            even_cnt++;\n        }\n    }\n    return even_cnt >= odd_cnt ? \"YES\" : \"NO\";\n}\n",
            "unordered_map<string, int> histogram(const string& test) {\n    unordered_map<string, int> freq;\n    vector<string> words = split(test, \" \");\n    for (string w : words) {\n        if (w.length() > 0) {\n            freq[w] = freq.count(w) + 1;\n        }\n    }\n    unordered_map<string, int> result;\n    if (freq.size() > 0) {\n        int max_freq = 0;\n        for (auto kv : freq) {\n            if (kv.second > max_freq) {\n                max_freq = kv.second;\n            }\n        }\n        for (auto kv : freq) {\n            if (kv.second == max_freq) {\n                result[kv.first] = kv.second;\n            }\n        }\n    }\n    return result;\n}\n",
            "vector<string> reverseDelete(const string& s, const string& c) {\n    string s1 = \"\";\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            s1 += ch;\n        }\n    }\n    return {s1, is_palindrome(s1) ? \"yes\" : \"no\"};\n}\n",
            "vector<string> oddCount(const vector<string>& lst) {\n    vector<string> result;\n    for (const string& num : lst) {\n        int n = 0;\n        for (char d : num) {\n            n += (d % 2 == 1);\n        }\n        string rs = \"the number of odd elements in the string i of the input.\";\n        result.push_back(rs.replace(\"i\", to_string(n)));\n    }\n    return result;\n}\n",
            "int minSubArraySum(const vector<int>& nums) {\n    int min_sum = 0;\n    int cur_sum = 0;\n    for (int n : nums) {\n        cur_sum = min(cur_sum + n, 0);\n        min_sum = min(cur_sum, min_sum);\n    }\n    if (min_sum == 0) {\n        min_sum = *min_element(nums.begin(), nums.end());\n    }\n    return min_sum;\n}\n",
            "int maxFill(const vector<vector<int>>& grid, int capacity) {\n    return accumulate(grid.begin(), grid.end(), 0, [capacity](int acc, const vector<int>& arr) {\n        return acc + ceil(accumulate(arr.begin(), arr.end(), 0) / capacity);\n    });\n}\n",
            "vector<int> sortArray(const vector<int>& arr) {\n    return sorted(arr, [](int x) {\n        return make_pair(count_ones(x), x);\n    });\n}\n",
            "vector<string> selectWords(const string& s, int n) {\n    string consonants = \"bcdfghjklmnpqrstvwxyz\";\n    vector<string> words = [w for w in s.split(\" \") if len(w) > 0];\n    return [w for w in words if len([c for c in w if c.lower() in consonants]) == n];\n}\n",
            "string getClosestVowel(const string& word) {\n    string vowels = \"aeiouAEIOU\";\n    for (int i = word.length() - 2; i > 0; i--) {\n        if (vowels.find(word[i]) != string::npos && vowels.find(word[i - 1]) == string::npos && vowels.find(word[i + 1]) == string::npos) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "string matchParens(const vector<string>& lst) {\n    string s1 = lst[0] + lst[1];\n    string s2 = lst[1] + lst[0];\n    return check(s1) || check(s2) ? \"Yes\" : \"No\";\n}\n",
            "vector<int> maximum(const vector<int>& arr, int k) {\n    if (k == 0) {\n        return {};\n    }\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end());\n    return vector<int>(sorted_arr.end() - k, sorted_arr.end());\n}\n",
            "int solution(const vector<int>& lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n",
            "int addElements(const vector<int>& arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (to_string(arr[i]).length() <= 2) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n",
            "vector<int> getOddCollatz(int n) {\n    vector<int> collatz = {1};\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.push_back(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    sort(collatz.begin(), collatz.end());\n    return collatz;\n}\n",
            "bool validDate(const string& date) {\n    if (!(date.length() == 10) || !(date[2] == '-') || !(date[5] == '-')) {\n        return false;\n    }\n    int m = stoi(date.substr(0, 2));\n    int d = stoi(date.substr(3, 5));\n    if (m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31) {\n        return true;\n    }\n    if (m in [4, 6, 9, 11] && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "vector<string> splitWords(const string& txt) {\n    if (txt.find(\" \") != string::npos) {\n        return split(txt, \" \");\n    } else if (txt.find(\",\") != string::npos) {\n        return split(txt, \",\");\n    } else {\n        return {to_string(count_if(txt.begin(), txt.end(), [](char c) {\n            return islower(c) && c % 2 == 0;\n        }))};\n    }\n}\n",
            "bool isSorted(const vector<int>& lst) {\n    if (!all_of(lst.begin(), lst.end()-1, [&](int i) { return lst[i-1] <= lst[i]; })) {\n        return false;\n    }\n    unordered_map<int, int> freq;\n    for (int i : lst) {\n        freq[i] = freq.count(i) + 1;\n    }\n    return max_element(freq.begin(), freq.end(), [](pair<int, int> a, pair<int, int> b) { return a.second < b.second; })->second <= 2;\n}\n",
            "string intersection(const vector<int>& interval1, const vector<int>& interval2) {\n    if (interval1[0] < interval2[0]) {\n        int l = interval2[0];\n        int r = interval1[1];\n        if (r < l) {\n            return \"NO\";\n        }\n        int length = r - l;\n        for (int i = 2; i <= sqrt(length); i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    } else {\n        int l = interval1[0];\n        int r = interval2[1];\n        if (r < l) {\n            return \"NO\";\n        }\n        int length = r - l;\n        for (int i = 2; i <= sqrt(length); i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}\n",
            "optional<int> prodSigns(const vector<int>& arr) {\n    if (arr.empty()) {\n        return nullopt;\n    }\n    if (find(arr.begin(), arr.end(), 0) != arr.end()) {\n        return 0;\n    }\n    int sign = count_if(arr.begin(), arr.end(), [](int n) { return n < 0; }) % 2 == 1 ? -1 : 1;\n    return sign * accumulate(arr.begin(), arr.end(), 0, [](int a, int b) { return a + abs(b); });\n}\n",
            "vector<int> minPath(const vector<vector<int>>& grid, int k) {\n    int n = grid.size();\n    int min_val = n * n + 1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                vector<int> temp;\n                if (i != 0) {\n                    temp.push_back(grid[i - 1][j]);\n                }\n                if (j != 0) {\n                    temp.push_back(grid[i][j - 1]);\n                }\n                if (i != n - 1) {\n                    temp.push_back(grid[i + 1][j]);\n                }\n                if (j != n - 1) {\n                    temp.push_back(grid[i][j + 1]);\n                }\n                min_val = min(temp);\n            }\n        }\n    }\n    vector<int> result;\n    for (int i = 0; i < k; i++) {\n        result.push_back(1 if i % 2 == 0 else min_val);\n    }\n    return result;\n}\n",
            "vector<int> tri(int n) {\n    if (n == 0) {\n        return {1};\n    }\n    vector<int> seq = {1, 3};\n    for (int i = 2; i <= n + 1; i++) {\n        if (i % 2 == 0) {\n            seq.push_back(i / 2 + 1);\n        } else {\n            seq.push_back(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    vector<int> odds;\n    for (int d : to_string(n)) {\n        if (stoi(string(1, d)) % 2 == 1) {\n            odds.push_back(stoi(string(1, d)));\n        }\n    }\n    if (odds.size() > 0) {\n        return accumulate(odds.begin(), odds.end(), 1, multiplies<int>());\n    } else {\n        return 0;\n    }\n}\n",
            "bool isNested(const string& s) {\n    vector<int> open_idx;\n    vector<int> close_idx;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == '[') {\n            open_idx.push_back(i);\n        } else if (s[i] == ']') {\n            close_idx.push_back(i);\n        }\n    }\n    reverse(close_idx.begin(), close_idx.end());\n    int cnt = 0;\n    int i = 0;\n    int l = close_idx.size();\n    for (int idx : open_idx) {\n        if (i < l && idx < close_idx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "int sumSquares(const vector<double>& lst) {\n    return accumulate(lst.begin(), lst.end(), 0, [](double a, double b) {\n        return a + pow(ceil(b), 2);\n    });\n}\n",
            "bool checkIfLastCharIsALetter(const string& txt) {\n    if (txt.empty()) {\n        return false;\n    }\n    string last = txt.substr(txt.rfind(' ') + 1);\n    return last.length() == 1 && isalpha(last[0]);\n}\n",
            "int canArrange(const vector<int>& arr) {\n    if (arr.size() <= 1) {\n        return -1;\n    }\n    vector<int> idx;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            idx.push_back(i);\n        }\n    }\n    return *max_element(idx.begin(), idx.end());\n}\n",
            "vector<optional<int>> largestSmallestIntegers(const vector<int>& lst) {\n    vector<int> neg;\n    vector<int> pos;\n    for (int i : lst) {\n        if (i < 0) {\n            neg.push_back(i);\n        } else if (i > 0) {\n            pos.push_back(i);\n        }\n    }\n    int max_neg = *max_element(neg.begin(), neg.end());\n    int min_pos = *min_element(pos.begin(), pos.end());\n    return {max_neg, min_pos};\n}\n",
            "optional<double> compareOne(any a, any b) {\n    if (a.type() == typeid(string)) {\n        return stod(any_cast<string>(a).replace(',', '.'));\n    } else if (a.type() == typeid(int)) {\n        return static_cast<double>(any_cast<int>(a));\n    } else if (a.type() == typeid(float)) {\n        return any_cast<float>(a);\n    } else {\n        throw runtime_error(\"Type Error\");\n    }\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    int fact = 1;\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "string fixSpaces(const string& txt) {\n    return regex_replace(txt, regex(\"\\\\s{3,}\"), \"-\").replace(\" \", \"_\");\n}\n",
            "string fileNameCheck(const string& file_name) {\n    vector<string> suf = {\"txt\", \"exe\", \"dll\"};\n    vector<string> lst = split(file_name, \".\");\n    if (lst.size() != 2 || !contains(suf, lst[1]) || lst[0].size() == 0 || !isalpha(lst[0][0]) || count_if(lst[0].begin(), lst[0].end(), isdigit) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "int sumSquares(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            result += pow(lst[i], 2);\n        } else if (i % 4 == 0) {\n            result += pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "string wordsInSentence(const string& sentence) {\n    string words = sentence.split(\" \");\n    string result = \"\";\n    for (int i = 0; i < words.size(); i++) {\n        if (is_prime(words[i].size())) {\n            result += words[i] + \" \";\n        }\n    }\n    return result;\n}\n",
            "bool simplify(const string& x, const string& n) {\n    vector<string> xs = split(x, \"/\");\n    vector<string> ns = split(n, \"/\");\n    int num = stoi(xs[0]) * stoi(ns[0]);\n    int den = stoi(xs[1]) * stoi(ns[1]);\n    return num % den == 0;\n}\n",
            "vector<int> orderByPoints(const vector<int>& nums) {\n    auto digits_sum = [](int n) {\n        string n_str = to_string(n);\n        if (n >= 0) {\n            return accumulate(n_str.begin(), n_str.end(), 0, [](int acc, char d) {\n                return acc + d - '0';\n            });\n        } else {\n            return 2 * stoi(n_str.substr(0, 2)) + digits_sum(abs(n));\n        }\n    };\n    return sorted(nums.begin(), nums.end(), [&](int a, int b) {\n        return digits_sum(a) < digits_sum(b);\n    });\n}\n",
            "int specialFilter(const vector<int>& nums) {\n    string odds = \"13579\";\n    int count = 0;\n    for (int n : nums) {\n        if (n > 10 && n % 2 == 1 && odds.find(to_string(n)[0]) != string::npos) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "int getMaxTriples(int n) {\n    vector<int> c(3, 0);\n    for (int i = 1; i <= n; i++) {\n        int a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}\n",
            "vector<string> bf(const string& planet1, const string& planet2) {\n    vector<string> names = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    if (find(names.begin(), names.end(), planet1) == names.end() || find(names.begin(), names.end(), planet2) == names.end()) {\n        return {};\n    }\n    int l = distance(names.begin(), find(names.begin(), names.end(), planet1));\n    int r = distance(names.begin(), find(names.begin(), names.end(), planet2));\n    if (l > r) {\n        swap(l, r);\n    }\n    if (l == r) {\n        return {};\n    }\n    return vector<string>(names.begin() + l + 1, names.begin() + r);\n}\n",
            "vector<string> sortedListSum(const vector<string>& lst) {\n    vector<string> result;\n    for (const string& s : lst) {\n        if (s.length() % 2 == 0) {\n            result.push_back(s);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        if (a.length() != b.length()) {\n            return a.length() < b.length();\n        }\n        return a < b;\n    });\n    return result;\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= floor(sqrt(n)) + 1; i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(const vector<double>& lst) {\n    return accumulate(lst.begin(), lst.end(), 0, [](double a, double b) {\n        return a + (b * b);\n    });\n}\n",
            "vector<int> compare(const vector<int>& game, const vector<int>& guess) {\n    return {abs(x - y) for x, y in zip(game, guess)};\n}\n",
            "string strongestExtension(const string& class_name, const vector<string>& extensions) {\n    int max_s = -INFINITY;\n    string max_ext = \"\";\n    for (const string& ext : extensions) {\n        int upper = count_if(ext.begin(), ext.end(), isupper);\n        int lower = count_if(ext.begin(), ext.end(), islower);\n        int s = upper - lower;\n        if (s > max_s) {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return class_name + \".\" + max_ext;\n}\n",
            "bool cycpatternCheck(const string& a, const string& b) {\n    if (a.length() < b.length()) {\n        return false;\n    }\n    for (int i = 0; i < b.length(); i++) {\n        if (b.substr(i) + b.substr(0, i) == a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "vector<int> evenOddCount(int num) {\n    string ds = to_string(abs(num));\n    int even = count_if(ds.begin(), ds.end(), [](char d) { return (int)d % 2 == 0; });\n    return {even, (int)ds.size() - even};\n}\n",
            "string intToMiniRoman(int num) {\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string res = \"\";\n    for (int i = 0; i < values.size(); i++) {\n        while (num >= values[i]) {\n            res += numerals[i];\n            num -= values[i];\n        }\n    }\n    return res;\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    vector<int> s = {a, b, c};\n    sort(s.begin(), s.end());\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}\n",
            "string findMax(const vector<string>& words) {\n    int max_cnt = 0;\n    string max_w = \"\";\n    for (const string& w : words) {\n        int cnt = set<char>(w.begin(), w.end()).size();\n        if (cnt > max_cnt) {\n            max_cnt = cnt;\n            max_w = w;\n        } else if (cnt == max_cnt) {\n            max_w = min(max_w, w);\n        }\n    }\n    return max_w;\n}\n",
            "vector<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return {num + need, remaining - need};\n    } else {\n        return {num + remaining, 0};\n    }\n}\n",
            "int doAlgebra(const vector<string>& operators, const vector<int>& operands) {\n    vector<string> ops = operators;\n    vector<int> nums = operands;\n    int i = ops.size() - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]);\n            nums.pop_back();\n            ops.pop_back();\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.pop_back();\n            ops.pop_back();\n            i -= 1;\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] / nums[i + 1];\n            nums.pop_back();\n            ops.pop_back();\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.pop_back();\n            ops.pop_back();\n            i -= 1;\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.pop_back();\n            ops.pop_back();\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "string solve(const string& s) {\n    if (!any_of(s.begin(), s.end(), [](char ch) { return isalpha(ch); })) {\n        return string(s.rbegin(), s.rend());\n    }\n    string result;\n    for (char ch : s) {\n        if (!isalpha(ch)) {\n            result.push_back(ch);\n        } else if (isupper(ch)) {\n            result.push_back(tolower(ch));\n        } else if (islower(ch)) {\n            result.push_back(toupper(ch));\n        }\n    }\n    return result;\n}\n",
            "optional<string> stringToMd5(const string& txt) {\n    if (!txt) {\n        return nullopt;\n    }\n    md5_hash = hashlib.md5();\n    txt_bytes = txt.encode();\n    md5_hash.update(txt_bytes);\n    md5_encoded = md5_hash.hexdigest();\n    return md5_encoded;\n}\n",
            "vector<int> generateIntegers(int a, int b) {\n    int lower = max(2, min(a, b));\n    int upper = min(8, max(a, b));\n    vector<int> result;\n    for (int i = lower; i <= upper; i++) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"
        ],
        "csharp": [
            "class Global {\n    public static bool HasCloseElements(IList<double> numbers, double threshold) {\n        for (int i = 0; i < numbers.Count; i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n                if (Math.Abs(numbers[i] - numbers[j]) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<string> SeparateParenGroups(string parenString) {\n        var groups = new List<string>();\n        var stk = new Stack<char>();\n        var currentGroup = \"\";\n        var parens = parenString.Replace(\" \", \"\");\n        foreach (var ch in parens) {\n            if (ch == \"(\") {\n                stk.Push(ch);\n                currentGroup += ch;\n            } else if (ch == \")\") {\n                stk.Pop();\n                currentGroup += ch;\n                if (!stk.Any()) {\n                    groups.Add(currentGroup);\n                    currentGroup = \"\";\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double TruncateNumber(double num) {\n        return num - Math.Floor(num);\n    }\n}\n",
            "class Global {\n    public static bool BelowZero(IList<int> operations) {\n        int balance = 0;\n        foreach (int op in operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double MeanAbsoluteDeviation(IList<double> numbers) {\n        double mean = numbers.Sum() / numbers.Count;\n        double deviation = numbers.Sum(x => Math.Abs(x - mean));\n        return deviation / numbers.Count;\n    }\n}\n",
            "class Global {\n    public static IList<int> Intersperse(IList<int> numbers, int delimiter) {\n        var result = new List<int>();\n        for (var i = 0; i < numbers.Count; i++) {\n            if (i != 0) {\n                result.Add(delimiter);\n            }\n            result.Add(numbers[i]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> ParseNestedParens(string parenString) {\n        var result = new List<int>();\n        var parenGroups = parenString.Split();\n        foreach (var group in parenGroups) {\n            var maxDepth = 0;\n            var depth = 0;\n            foreach (var ch in group) {\n                if (ch == \"(\") {\n                    depth += 1;\n                    maxDepth = Math.Max(maxDepth, depth);\n                } else if (ch == \")\") {\n                    depth -= 1;\n                }\n            }\n            result.Add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> FilterBySubstring(IList<string> strs, string substring) {\n        return strs.Where(s => s.Contains(substring)).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<int> SumProduct(IList<int> numbers) {\n        int n_sum = numbers.Sum();\n        int n_product = numbers.Aggregate((x, y) => x * y);\n        return new List<int> { n_sum, n_product };\n    }\n}\n",
            "class Global {\n    public static IList<int> RollingMax(IList<int> numbers) {\n        var max_so_far = float.NegativeInfinity;\n        var result = new List<int>();\n        foreach (var num in numbers) {\n            max_so_far = Math.Max(max_so_far, num);\n            result.Add(max_so_far);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string MakePalindrome(string s) {\n        if (is_palindrome(s)) {\n            return s;\n        }\n        for (int i = 0; i < s.Length; i++) {\n            if (is_palindrome(s.Substring(i))) {\n                return s + s.Substring(0, i).Reverse().ToString();\n            }\n        }\n        return \"\";\n    }\n    public static bool is_palindrome(string s) {\n        return s == s.Reverse().ToString();\n    }\n}\n",
            "class Global {\n    public static string StringXor(string a, string b) {\n        return string.Join(\"\", a.Zip(b, (x, y) => x == y ? \"0\" : \"1\"));\n    }\n}\n",
            "class Global {\n    public static string? Longest(IList<string> strs) {\n        if (strs.Count == 0) {\n            return null;\n        }\n        string longest_s = strs[0];\n        foreach (string s in strs) {\n            if (s.Length > longest_s.Length) {\n                longest_s = s;\n            }\n        }\n        return longest_s;\n    }\n}\n",
            "class Global {\n    public static int GreatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return GreatestCommonDivisor(b, a % b);\n        }\n    }\n}\n",
            "class Global {\n    public static IList<string> AllPrefixes(string s) {\n        IList<string> prefixes = new List<string>();\n        for (int i = 0; i < s.Length; i++) {\n            prefixes.Add(s.Substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static string StringSequence(int n) {\n        return string.Join(\" \", Enumerable.Range(0, n + 1).Select(i => i.ToString()));\n    }\n}\n",
            "class Global {\n    public static int CountDistinctCharacters(string s) {\n        return s.ToLower().Distinct().Count();\n    }\n}\n",
            "class Global {\n    public static IList<int> ParseMusic(string musicString) {\n        Dictionary<string, int> durations = new Dictionary<string, int> {\n            {\"o\", 4},\n            {\"o|\", 2},\n            {\".|\", 1}\n        };\n        string[] notes = musicString.Split();\n        return notes.Select(note => durations[note]).ToList();\n    }\n}\n",
            "class Global {\n    public static int HowManyTimes(string s, string substring) {\n        int times = 0;\n        for (int i = 0; i < len(s) - len(substring) + 1; i++) {\n            if (s[i : i + len(substring)] == substring) {\n                times += 1;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static string SortNumbers(string numbers) {\n        Dictionary<string, int> num_dict = new Dictionary<string, int>() {\n            { \"zero\", 0 },\n            { \"one\", 1 },\n            { \"two\", 2 },\n            { \"three\", 3 },\n            { \"four\", 4 },\n            { \"five\", 5 },\n            { \"six\", 6 },\n            { \"seven\", 7 },\n            { \"eight\", 8 },\n            { \"nine\", 9 },\n        };\n        List<string> num_list = numbers.Split(\" \").Where(x => num_dict.ContainsKey(x)).ToList();\n        num_list.Sort((x, y) => num_dict[x] - num_dict[y]);\n        return string.Join(\" \", num_list);\n    }\n}\n",
            "class Global {\n    public static IList<double> FindClosestElements(IList<double> numbers) {\n        var sortedNumbers = numbers.OrderBy(x => x).ToList();\n        var minDiff = double.MaxValue;\n        var closestPair = new List<double>();\n        for (var i = 1; i < sortedNumbers.Count; i++) {\n            var diff = sortedNumbers[i] - sortedNumbers[i - 1];\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = new List<double> { sortedNumbers[i - 1], sortedNumbers[i] };\n            }\n        }\n        return closestPair;\n    }\n}\n",
            "class Global {\n    public static IList<double> RescaleToUnit(IList<double> numbers) {\n        double min_num = numbers.Min();\n        double max_num = numbers.Max();\n        if (min_num == max_num) {\n            return Enumerable.Repeat(0.0, numbers.Count).ToList();\n        } else {\n            return numbers.Select(num => (num - min_num) / (max_num - min_num)).ToList();\n        }\n    }\n}\n",
            "class Global {\n    public static IList<int> FilterIntegers(IList<object> values) {\n        return values.Where(x => x is int).ToList();\n    }\n}\n",
            "class Global {\n    public static int StrLength(string s) {\n        return s.Length;\n    }\n}\n",
            "class Global {\n    public static int LargestDivisor(int n) {\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}\n",
            "class Global {\n    public static IList<int> Factorize(int n) {\n        var factors = new List<int>();\n        var divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.Add(divisor);\n                n /= divisor;\n            } else {\n                divisor += 1;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static IList<int> RemoveDuplicates(IList<int> numbers) {\n        Dictionary<int, int> counts = new Dictionary<int, int>();\n        foreach (int num in numbers) {\n            if (counts.ContainsKey(num)) {\n                counts[num] = counts[num] + 1;\n            } else {\n                counts[num] = 1;\n            }\n        }\n        List<int> res = new List<int>();\n        foreach (int num in numbers) {\n            if (counts[num] == 1) {\n                res.Add(num);\n            }\n        }\n        return res;\n    }\n}\n",
            "class Global {\n    public static string FlipCase(string s) {\n        var flipped = new List<char>();\n        foreach (var ch in s) {\n            if (!char.IsLetter(ch)) {\n                flipped.Add(ch);\n            } else if (char.IsLower(ch)) {\n                flipped.Add(char.ToUpper(ch));\n            } else if (char.IsUpper(ch)) {\n                flipped.Add(char.ToLower(ch));\n            }\n        }\n        return string.Join(\"\", flipped);\n    }\n}\n",
            "class Global {\n    public static string Concatenate(IList<string> strs) {\n        return string.Join(\"\", strs);\n    }\n}\n",
            "class Global {\n    public static IList<string> FilterByPrefix(IList<string> strs, string prefixStr) {\n        return strs.Where(s => s.StartsWith(prefixStr)).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<int> GetPositive(IList<int> l) {\n        return l.Where(num => num > 0).ToList();\n    }\n}\n",
            "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(n)) + 1; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static double Poly(IList<int> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.Count; i++) {\n            res += xs[i] * Math.Pow(x, i);\n        }\n        return res;\n    }\n    public static double FindZero(IList<int> xs) {\n        double x1 = 1.0, x2 = -1.0;\n        while (Poly(xs, x1) * Poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.Abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (Poly(xs, mid) == 0) {\n                return mid;\n            } else if (Poly(xs, mid) * Poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortThird(IList<int> l) {\n        var sorted_third = l.Where((x, i) => i % 3 == 0).OrderBy(x => x).ToList();\n        return l.Select((x, i) => i % 3 == 0 ? sorted_third[i / 3] : x).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<int> ListUnique(IList<int> l) {\n        return l.Distinct().OrderBy(x => x).ToList();\n    }\n}\n",
            "class Global {\n    public static int MaxElement(IList<int> l) {\n        if (l.Count == 0) {\n            return 0;\n        }\n        return l.Max();\n    }\n}\n",
            "class Global {\n    public static int FizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += i.ToString().Count(c => c == '7');\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortEven(IList<int> l) {\n        var sorted_even = l.Where((x, i) => i % 2 == 0).OrderBy(x => x).ToList();\n        return l.Select((x, i) => i % 2 == 0 ? sorted_even[i / 2] : x).ToList();\n    }\n}\n",
            "class Global {\n    public static string EncodeCyclic(string s) {\n        var result = new List<string>();\n        for (var i = 0; i < s.Length; i += 3) {\n            if (i + 3 > s.Length) {\n                result.Add(s.Substring(i));\n            } else {\n                result.Add(s.Substring(i + 1, 2));\n                result.Add(s.Substring(i, 1));\n            }\n        }\n        return string.Join(\"\", result);\n    }\n    public static string DecodeCyclic(string s) {\n        return EncodeCyclic(EncodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static int PrimeFib(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(n)) + 1; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static bool TriplesSumToZero(IList<int> l) {\n        for (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static int CarRaceCollision(int n) {\n        return n * n;\n    }\n}\n",
            "class Global {\n    public static IList<int> IncrList(IList<int> l) {\n        return l.Select(i => i + 1).ToList();\n    }\n}\n",
            "class Global {\n    public static bool PairsSumToZero(IList<int> l) {\n        var seen = new HashSet<int>();\n        foreach (var num in l) {\n            if (seen.Contains(-num)) {\n                return true;\n            }\n            seen.Add(num);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string ChangeBase(int x, int bas) {\n        if (x == 0) {\n            return \"0\";\n        }\n        List<string> digits = new List<string>();\n        while (x > 0) {\n            digits.Add(x % bas);\n            x /= bas;\n        }\n        return string.Join(\"\", digits.Reverse());\n    }\n}\n",
            "class Global {\n    public static double TriangleArea(int a, int h) {\n        return a * h / 2;\n    }\n}\n",
            "class Global {\n    public static int Fib4(int n) {\n        int[] fib = new int[4];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n        }\n        return fib[n % 4];\n    }\n}\n",
            "class Global {\n    public static double Median(IList<double> l) {\n        var sl = l.OrderBy(x => x).ToList();\n        if (l.Count % 2 != 0) {\n            return sl[l.Count / 2];\n        } else {\n            return (sl[l.Count / 2] + sl[l.Count / 2 - 1]) / 2;\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsPalindrome(string txt) {\n        return txt == txt.Reverse();\n    }\n}\n",
            "class Global {\n    public static int Modp(int n, int p) {\n        int ret = 1;\n        for (int _ = 0; _ < n; _++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "class Global {\n    public static string EncodeShift(string s) {\n        List<char> result = new List<char>();\n        foreach (char ch in s) {\n            result.Add((char)(((ch - 97 + 5) % 26) + 97));\n        }\n        return string.Join(\"\", result);\n    }\n    public static string DecodeShift(string s) {\n        List<char> result = new List<char>();\n        foreach (char ch in s) {\n            result.Add((char)(((ch - 97 + 21) % 26) + 97));\n        }\n        return string.Join(\"\", result);\n    }\n}\n",
            "class Global {\n    public static string RemoveVowels(string txt) {\n        string vowels = \"aeiouAEIOU\";\n        return string.Join(\"\", txt.Where(char => !vowels.Contains(char)));\n    }\n}\n",
            "class Global {\n    public static bool BelowThreshold(IList<int> l, int t) {\n        return l.All(x => x < t);\n    }\n}\n",
            "class Global {\n    public static int Add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static bool SameChars(string s0, string s1) {\n        return new HashSet<char>(s0).SetEquals(new HashSet<char>(s1));\n    }\n}\n",
            "class Global {\n    public static int Fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return Fib(n - 1) + Fib(n - 2);\n        }\n    }\n}\n",
            "class Global {\n    public static bool CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach (char b in brackets) {\n            if (b == '<') {\n                depth += 1;\n            } else if (b == '>') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static bool Monotonic(IList<int> l) {\n        var diff = new List<int>();\n        for (int i = 0; i < l.Count - 1; i++) {\n            diff.Add(l[i + 1] - l[i]);\n        }\n        return diff.All(x => x <= 0) || diff.All(x => x >= 0);\n    }\n}\n",
            "class Global {\n    public static IList<int> Common(IList<int> l1, IList<int> l2) {\n        return l1.Intersect(l2).OrderBy(x => x).ToList();\n    }\n}\n",
            "class Global {\n    public static int LargestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i != 0) {\n                i += 1;\n            } else {\n                n /= i;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int SumToN(int n) {\n        return Enumerable.Range(0, n + 1).Sum();\n    }\n}\n",
            "class Global {\n    public static bool CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach (char b in brackets) {\n            if (b == \"(\") {\n                depth += 1;\n            } else if (b == \")\") {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static IList<int> Derivative(IList<int> xs) {\n        return Enumerable.Range(1, xs.Count).Select(i => xs[i] * i).ToList();\n    }\n}\n",
            "class Global {\n    public static int Fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n        int a = 0;\n        int b = 0;\n        int c = 1;\n        while (n > 2) {\n            a = b;\n            b = c;\n            c = a + b + c;\n            n -= 1;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int VowelsCount(string s) {\n        string vowels = \"aeiou\";\n        int cnt = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i].ToLower() == 'y' && i == s.Length - 1 || vowels.Contains(s[i].ToLower())) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static string CircularShift(int x, int shift) {\n        string x_str = x.ToString();\n        if (shift > x_str.Length) {\n            return x_str.Reverse();\n        } else {\n            return x_str.Substring(x_str.Length - shift) + x_str.Substring(0, x_str.Length - shift);\n        }\n    }\n}\n",
            "class Global {\n    public static int DigitSum(string s) {\n        return s.Where(c => char.IsUpper(c)).Sum(c => (int)c);\n    }\n}\n",
            "class Global {\n    public static int FruitDistribution(string s, int n) {\n        string[] words = s.Split(' ');\n        int apples = int.Parse(words[words.ToList().IndexOf(\"apples\") - 1]);\n        int oranges = int.Parse(words[words.ToList().IndexOf(\"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n}\n",
            "class Global {\n    public static IList<int> Pluck(IList<int> arr) {\n        var evens = arr.Where(n => n % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return new List<int>();\n        }\n        var minEven = evens.Min();\n        return new List<int> { minEven, arr.IndexOf(minEven) };\n    }\n}\n",
            "class Global {\n    public static int Search(IList<int> lst) {\n        var freqs = new Dictionary<int, int>();\n        foreach (var n in lst) {\n            if (freqs.ContainsKey(n)) {\n                freqs[n] += 1;\n            } else {\n                freqs[n] = 1;\n            }\n        }\n        var good_vals = new List<int>();\n        foreach (var (k, v) in freqs) {\n            if (v >= k) {\n                good_vals.Add(k);\n            }\n        }\n        return good_vals.Count > 0 ? good_vals.Max() : -1;\n    }\n}\n",
            "class Global {\n    public static IList<int> StrangeSortList(IList<int> lst) {\n        var sl = lst.OrderBy(x => x).ToList();\n        var result = new List<int>();\n        var left = 0;\n        var right = sl.Count - 1;\n        while (left <= right) {\n            result.Add(sl[left]);\n            left += 1;\n            if (left <= right) {\n                result.Add(sl[right]);\n                right -= 1;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double TriangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            return Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}\n",
            "class Global {\n    public static bool WillItFly(IList<int> q, int w) {\n        if (q.Count == 0) {\n            return false;\n        }\n        bool is_palin = true;\n        for (int i = 0; i < q.Count; i++) {\n            if (q[i] != q[q.Count - i - 1]) {\n                is_palin = false;\n                break;\n            }\n        }\n        int total = 0;\n        for (int i = 0; i < q.Count; i++) {\n            total += q[i];\n        }\n        return is_palin && total <= w;\n    }\n}\n",
            "class Global {\n    public static int SmallestChange(IList<int> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.Count / 2; i++) {\n            if (arr[i] != arr[arr.Count - i - 1]) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static IList<string> TotalMatch(IList<string> lst1, IList<string> lst2) {\n        int cnt1 = lst1.Sum(s => s.Length);\n        int cnt2 = lst2.Sum(s => s.Length);\n        return cnt1 <= cnt2 ? lst1 : lst2;\n    }\n}\n",
            "class Global {\n    public static bool IsMultiplyPrime(int a) {\n        if (a < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(a)) + 1; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static bool IsSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "class Global {\n    public static bool IsCube(int a) {\n        a = Math.Abs(a);\n        int root = (int)Math.Round(Math.Pow(a, 1.0 / 3.0));\n        return root * root * root == a;\n    }\n}\n",
            "class Global {\n    public static int HexKey(string num) {\n        return num.Count(x => \"2357BD\".Contains(x));\n    }\n}\n",
            "class Global {\n    public static string DecimalToBinary(int dec) {\n        string binary = Convert.ToString(dec, 2);\n        return $\"db{binary}db\";\n    }\n}\n",
            "class Global {\n    public static bool IsHappy(string s) {\n        if (s.Length < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static IList<string> NumericalLetterGrade(IList<double> grades) {\n        var result = new List<string>();\n        foreach (var g in grades) {\n            if (g == 4.0) {\n                result.Add(\"A+\");\n            } else if (g > 3.7) {\n                result.Add(\"A\");\n            } else if (g > 3.3) {\n                result.Add(\"A-\");\n            } else if (g > 3.0) {\n                result.Add(\"B+\");\n            } else if (g > 2.7) {\n                result.Add(\"B\");\n            } else if (g > 2.3) {\n                result.Add(\"B-\");\n            } else if (g > 2.0) {\n                result.Add(\"C+\");\n            } else if (g > 1.7) {\n                result.Add(\"C\");\n            } else if (g > 1.3) {\n                result.Add(\"C-\");\n            } else if (g > 1.0) {\n                result.Add(\"D+\");\n            } else if (g > 0.7) {\n                result.Add(\"D\");\n            } else if (g > 0.0) {\n                result.Add(\"D-\");\n            } else {\n                result.Add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool PrimeLength(string s) {\n        int length = s.Length;\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(length)) + 1; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int StartsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 2 * 9 * (10 ** (n - 2));\n    }\n}\n",
            "class Global {\n    public static string Solve(int n) {\n        var digitsSum = 0;\n        foreach (var d in n.ToString()) {\n            digitsSum += int.Parse(d.ToString());\n        }\n        return Convert.ToString(digitsSum, 2);\n    }\n}\n",
            "class Global {\n    public static int Add(IList<int> lst) {\n        return lst.Where((x, i) => i % 2 == 1 && x % 2 == 0).Sum();\n    }\n}\n",
            "class Global {\n    public static string AntiShuffle(string s) {\n        var words = s.Split(\" \").Select(word => string.Concat(word.OrderBy(c => c)));\n        return string.Join(\" \", words);\n    }\n}\n",
            "class Global {\n    public static IList<IList<int>> GetRow(IList<IList<int>> lst, int x) {\n        var coords = new List<List<int>>();\n        for (var i = 0; i < lst.Count; i++) {\n            for (var j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    coords.Add(new List<int> { i, j });\n                }\n            }\n        }\n        coords.Sort((a, b) => {\n            if (a[0] == b[0]) {\n                return b[1] - a[1];\n            }\n            return a[0] - b[0];\n        });\n        return coords;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortArray(IList<int> arr) {\n        if (arr.Count == 0) {\n            return new List<int>();\n        }\n        if ((arr[0] + arr[arr.Count - 1]) % 2 == 0) {\n            return arr.OrderByDescending(x => x).ToList();\n        } else {\n            return arr.OrderBy(x => x).ToList();\n        }\n    }\n}\n",
            "class Global {\n    public static string Encrypt(string s) {\n        var result = new List<char>();\n        foreach (var ch in s) {\n            var shifted = (int)ch + 4;\n            if (shifted > (int)'z') {\n                shifted -= 26;\n            }\n            result.Add((char)shifted);\n        }\n        return string.Join(\"\", result);\n    }\n}\n",
            "class Global {\n    public static int? NextSmallest(IList<int> lst) {\n        var sl = new List<int>(new HashSet<int>(lst));\n        sl.Sort();\n        if (sl.Count < 2) {\n            return null;\n        }\n        return sl[1];\n    }\n}\n",
            "class Global {\n    public static int IsBored(string s) {\n        var sentences = Regex.Split(s, @\"[.!?]\\s*\");\n        return sentences.Where(sentence => sentence.Length >= 2).Sum(sentence => sentence.Substring(0, 2) == \"I \");\n    }\n}\n",
            "class Global {\n    public static bool AnyInt(object x, object y, object z) {\n        if (x is int && y is int && z is int) {\n            if ((int)x + (int)y == (int)z || (int)x + (int)z == (int)y || (int)y + (int)z == (int)x) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string Encode(string message) {\n        string vowels = \"aeiouAEIOU\";\n        List<string> result = new List<string>();\n        foreach (char ch in message) {\n            if (char.IsLetter(ch)) {\n                char ch1 = char.ToUpper(ch) if char.IsLower(ch) else char.ToLower(ch);\n                if (vowels.Contains(ch1)) {\n                    ch1 = (char)(ch1 + 2);\n                }\n                result.Add(ch1);\n            } else {\n                result.Add(ch);\n            }\n        }\n        return string.Join(\"\", result);\n    }\n}\n",
            "class Global {\n    public static int Skjkasdkd(IList<int> lst) {\n        var primes = new List<int>();\n        foreach (var n in lst) {\n            if (n < 2) {\n                return false;\n            }\n            for (var i = 2; i <= Math.Floor(Math.Sqrt(n)) + 1; i++) {\n                if (n % i == 0) {\n                    return false;\n                }\n            }\n            primes.Add(n);\n        }\n        if (primes.Count == 0) {\n            return 0;\n        }\n        var largest = primes.Max().ToString();\n        var sum = 0;\n        foreach (var digit in largest) {\n            sum += int.Parse(digit.ToString());\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static bool CheckDictCase(IDictionary<string, string> d) {\n        if (!d) {\n            return false;\n        }\n        return all(c.islower() for c in d.keys()) || all(c.isupper() for c in d.keys());\n    }\n}\n",
            "class Global {\n    public static IList<int> CountUpTo(int n) {\n        var primes = new List<int>();\n        for (var num = 2; num < n; num++) {\n            if (primes.All(p => num % p != 0)) {\n                primes.Add(num);\n            }\n        }\n        return primes;\n    }\n}\n",
            "class Global {\n    public static int Multiply(int a, int b) {\n        return (Math.Abs(a) % 10) * (Math.Abs(b) % 10);\n    }\n}\n",
            "class Global {\n    public static int CountUpper(string s) {\n        string vowels = \"AEIOU\";\n        return s.Where((c, i) => i % 2 == 0 && vowels.Contains(c)).Count();\n    }\n}\n",
            "class Global {\n    public static int ClosestInteger(string value) {\n        double num = double.Parse(value);\n        if (num >= 0) {\n            return (int)(num + 0.5);\n        } else {\n            return (int)(num - 0.5);\n        }\n    }\n}\n",
            "class Global {\n    public static IList<int> MakeAPile(int n) {\n        return Enumerable.Range(0, n).Select(i => n + 2 * i).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<string> WordsString(string s) {\n        return s.Split(new string[] { \", \", \" \" }, StringSplitOptions.RemoveEmptyEntries).ToList();\n    }\n}\n",
            "class Global {\n    public static int ChooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        return y - 1;\n    }\n}\n",
            "class Global {\n    public static string? RoundedAvg(int n, int m) {\n        if (n > m) {\n            return null;\n        }\n        int r_avg = (m + n) / 2 + 1;\n        return Convert.ToString(r_avg, 2);\n    }\n}\n",
            "class Global {\n    public static IList<int> UniqueDigits(IList<int> x) {\n        return x.Where(num => num.ToString().All(digit => digit % 2 != 0)).OrderBy(num => num).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<string> ByLength(IList<int> arr) {\n        var digit_names = new List<string> { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" };\n        var sorted_arr = arr.Where(x => 1 <= x && x <= 9).OrderByDescending(x => x);\n        return sorted_arr.Select(x => digit_names[x - 1]).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<int> F(int n) {\n        var nums = Enumerable.Range(1, n + 1).ToList();\n        return nums.Select((x, i) => i % 2 != 0 ? nums.Take(i).Sum() : nums.Take(i).Aggregate(1, (x, y) => x * y)).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<int> EvenOddPalindrome(int n) {\n        var cnt = new List<int> { 0, 0 };\n        for (var i = 1; i <= n; i++) {\n            if (IsPalindrome(i.ToString())) {\n                cnt[i % 2] += 1;\n            }\n        }\n        return cnt;\n    }\n    private static bool IsPalindrome(string txt) {\n        return txt == new string(txt.Reverse().ToArray());\n    }\n}\n",
            "class Global {\n    public static int CountNums(IList<int> arr) {\n        return arr.Count(n => digits_sum(n) > 0);\n    }\n    public static int DigitsSum(int n) {\n        string n_str = n.ToString();\n        if (n >= 0) {\n            return n_str.Sum(d => int.Parse(d.ToString()));\n        } else {\n            return int.Parse(n_str.Substring(0, 2)) * 2 + digits_sum(Math.Abs(n));\n        }\n    }\n}\n",
            "class Global {\n    public static bool MoveOneBall(IList<int> arr) {\n        if (arr.Count == 0) {\n            return true;\n        }\n        var sortedArr = arr.OrderBy(x => x).ToList();\n        for (var i = 0; i < arr.Count; i++) {\n            if (arr.Skip(i).SequenceEqual(sortedArr.Take(arr.Count - i)) && arr.Take(i).SequenceEqual(sortedArr.Skip(arr.Count - i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string CanExchange(IList<int> lst1, IList<int> lst2) {\n        int odd_cnt = lst1.Count(num => num % 2 != 0);\n        int even_cnt = lst2.Count(num => num % 2 == 0);\n        return even_cnt >= odd_cnt ? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static IDictionary<string, int> Histogram(string test) {\n        IDictionary<string, int> freq = new Dictionary<string, int>();\n        string[] words = test.Split(\" \").Where(w => w.Length > 0).ToArray();\n        foreach (string w in words) {\n            freq[w] = freq.GetValueOrDefault(w, 0) + 1;\n        }\n        IDictionary<string, int> result = new Dictionary<string, int>();\n        if (freq.Count > 0) {\n            int max_freq = freq.Values.Max();\n            foreach (KeyValuePair<string, int> kvp in freq) {\n                if (kvp.Value == max_freq) {\n                    result[kvp.Key] = kvp.Value;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> ReverseDelete(string s, string c) {\n        string s1 = string.Join(\"\", s.Where(ch => !c.Contains(ch)));\n        return new List<string> { s1, is_palindrome(s1) ? \"yes\" : \"no\" };\n    }\n    public static bool is_palindrome(string s) {\n        return s == string.Join(\"\", s.Reverse());\n    }\n}\n",
            "class Global {\n    public static IList<string> OddCount(IList<string> lst) {\n        var result = new List<string>();\n        foreach (var num in lst) {\n            var n = num.Sum(d => (d - '0') % 2 == 1);\n            var rs = \"the number of odd elements in the string i of the input.\";\n            result.Add(rs.Replace(\"i\", n.ToString()));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int MinSubArraySum(IList<int> nums) {\n        int min_sum = 0;\n        int cur_sum = 0;\n        foreach (int n in nums) {\n            cur_sum = Math.Min(cur_sum + n, 0);\n            min_sum = Math.Min(cur_sum, min_sum);\n        }\n        if (min_sum == 0) {\n            min_sum = nums.Min();\n        }\n        return min_sum;\n    }\n}\n",
            "class Global {\n    public static int MaxFill(IList<IList<int>> grid, int capacity) {\n        return grid.Sum(arr => (int)Math.Ceiling(arr.Sum() / capacity));\n    }\n}\n",
            "class Global {\n    public static IList<int> SortArray(IList<int> arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c == '1')).ThenBy(x => x).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<string> SelectWords(string s, int n) {\n        string consonants = \"bcdfghjklmnpqrstvwxyz\";\n        string[] words = s.Split(\" \");\n        List<string> result = new List<string>();\n        foreach (string w in words) {\n            if (w.Length > 0) {\n                List<char> consonantsInWord = new List<char>();\n                foreach (char c in w) {\n                    if (consonants.Contains(c.ToString().ToLower())) {\n                        consonantsInWord.Add(c);\n                    }\n                }\n                if (consonantsInWord.Count == n) {\n                    result.Add(w);\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string GetClosestVowel(string word) {\n        string vowels = \"aeiouAEIOU\";\n        for (int i = len(word) - 2; i > 0; i--) {\n            if (word[i] in vowels && !(word[i - 1] in vowels) && !(word[i + 1] in vowels)) {\n                return word[i];\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static string MatchParens(IList<string> lst) {\n        string s1 = lst[0] + lst[1];\n        string s2 = lst[1] + lst[0];\n        return \"Yes\" if check(s1) or check(s2) else \"No\";\n    }\n}\n",
            "class Global {\n    public static IList<int> Maximum(IList<int> arr, int k) {\n        if (k == 0) {\n            return new List<int>();\n        }\n        return arr.OrderByDescending(x => x).Take(k).ToList();\n    }\n}\n",
            "class Global {\n    public static int Solution(IList<int> lst) {\n        return lst.Where((x, i) => i % 2 == 0 && x % 2 != 0).Sum();\n    }\n}\n",
            "class Global {\n    public static int AddElements(IList<int> arr, int k) {\n        return arr.Take(k).Where(n => n.ToString().Length <= 2).Sum();\n    }\n}\n",
            "class Global {\n    public static IList<int> GetOddCollatz(int n) {\n        var collatz = new List<int> { 1 };\n        while (n != 1) {\n            if (n % 2 != 0) {\n                collatz.Add(n);\n                n = 3 * n + 1;\n            } else {\n                n = n / 2;\n            }\n        }\n        return collatz.OrderBy(x => x).ToList();\n    }\n}\n",
            "class Global {\n    public static bool ValidDate(string date) {\n        if (!date.Length == 10 || !date[2] == \"-\" || !date[5] == \"-\") {\n            return false;\n        }\n        int m = int.Parse(date.Substring(0, 2));\n        int d = int.Parse(date.Substring(3, 2));\n        if (m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31) {\n            return true;\n        }\n        if (m in [4, 6, 9, 11] && d >= 1 && d <= 30) {\n            return true;\n        }\n        if (m == 2 && d >= 1 && d <= 29) {\n            return true;\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<string> SplitWords(string txt) {\n        if (txt.Contains(\" \")) {\n            return txt.Split(\" \");\n        } else if (txt.Contains(\",\")) {\n            return txt.Split(\",\");\n        } else {\n            return new List<string> {\n                Convert.ToString(txt.Count(c => c.IsLower() && c % 2 == 0))\n            };\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsSorted(IList<int> lst) {\n        if (!lst.Skip(1).Zip(lst, (a, b) => a >= b).All(x => x)) {\n            return false;\n        }\n        var freq = new Dictionary<int, int>();\n        foreach (var i in lst) {\n            if (freq.ContainsKey(i)) {\n                freq[i] += 1;\n            } else {\n                freq[i] = 1;\n            }\n        }\n        return freq.Values.Max() <= 2;\n    }\n}\n",
            "class Global {\n    public static string Intersection(IList<int> interval1, IList<int> interval2) {\n        if (interval1[0] < 2) {\n            return \"NO\";\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(interval1[0])) + 1; i++) {\n            if (interval1[0] % i == 0) {\n                return \"NO\";\n            }\n        }\n        int l = Math.Max(interval1[0], interval2[0]);\n        int r = Math.Min(interval1[1], interval2[1]);\n        int length = r - l;\n        return length > 0 && is_prime(length) ? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static int? ProdSigns(IList<int> arr) {\n        if (!arr.Any()) {\n            return null;\n        }\n        if (arr.Any(n => n == 0)) {\n            return 0;\n        }\n        int sign = arr.Count(n => n < 0) % 2 == 1 ? -1 : 1;\n        return sign * arr.Sum(n => Math.Abs(n));\n    }\n}\n",
            "class Global {\n    public static IList<int> MinPath(IList<IList<int>> grid, int k) {\n        int n = grid.Count;\n        int min_val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 1) {\n                    List<int> temp = new List<int>();\n                    if (i != 0) {\n                        temp.Add(grid[i - 1][j]);\n                    }\n                    if (j != 0) {\n                        temp.Add(grid[i][j - 1]);\n                    }\n                    if (i != n - 1) {\n                        temp.Add(grid[i + 1][j]);\n                    }\n                    if (j != n - 1) {\n                        temp.Add(grid[i][j + 1]);\n                    }\n                    min_val = Math.Min(temp.ToArray());\n                }\n            }\n        }\n        List<int> result = new List<int>();\n        for (int i = 0; i < k; i++) {\n            result.Add(i % 2 == 0 ? 1 : min_val);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> Tri(int n) {\n        if (n == 0) {\n            return new List<int> { 1 };\n        }\n        List<int> seq = new List<int> { 1, 3 };\n        for (int i = 2; i <= n + 1; i++) {\n            if (i % 2 == 0) {\n                seq.Add(i / 2 + 1);\n            } else {\n                seq.Add(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int Digits(int n) {\n        var odds = new List<int>();\n        foreach (var d in n.ToString()) {\n            if (int.Parse(d.ToString()) % 2 == 1) {\n                odds.Add(int.Parse(d.ToString()));\n            }\n        }\n        if (odds.Count > 0) {\n            return odds.Aggregate((x, y) => x * y);\n        } else {\n            return 0;\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsNested(string s) {\n        var openIdx = new List<int>();\n        var closeIdx = new List<int>();\n        for (var i = 0; i < s.Length; i++) {\n            var ch = s[i];\n            if (ch == '[') {\n                openIdx.Add(i);\n            } else if (ch == ']') {\n                closeIdx.Add(i);\n            }\n        }\n        closeIdx.Reverse();\n        var cnt = 0;\n        var i = 0;\n        var l = closeIdx.Count;\n        foreach (var idx in openIdx) {\n            if (i < l && idx < closeIdx[i]) {\n                cnt += 1;\n                i += 1;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int SumSquares(IList<double> lst) {\n        return lst.Select(n => Math.Pow(Math.Ceiling(n), 2)).Sum();\n    }\n}\n",
            "class Global {\n    public static bool CheckIfLastCharIsALetter(string txt) {\n        if (!txt) {\n            return false;\n        }\n        string last = txt[txt.LastIndexOf(' ') + 1];\n        return last.Length == 1 && last[0].IsLetter();\n    }\n}\n",
            "class Global {\n    public static int CanArrange(IList<int> arr) {\n        if (arr.Count <= 1) {\n            return -1;\n        }\n        var idx = Enumerable.Range(1, arr.Count).Where(i => arr[i] < arr[i - 1]).ToList();\n        return idx.Count > 0 ? idx.Max() : -1;\n    }\n}\n",
            "class Global {\n    public static IList<int?> LargestSmallestIntegers(IList<int> lst) {\n        var neg = lst.Where(i => i < 0).ToList();\n        var pos = lst.Where(i => i > 0).ToList();\n        var max_neg = neg.Count > 0 ? neg.Max() : (int?)null;\n        var min_pos = pos.Count > 0 ? pos.Min() : (int?)null;\n        return new List<int?> { max_neg, min_pos };\n    }\n}\n",
            "class Global {\n    public static double? CompareOne(object a, object b) {\n        double a1;\n        double b1;\n        if (a is string) {\n            a1 = double.Parse(a.ToString().Replace(',', '.'));\n        } else if (a is int) {\n            a1 = (double)a;\n        } else if (a is float) {\n            a1 = (double)a;\n        } else {\n            throw new RuntimeException(\"Type Error\");\n        }\n        if (b is string) {\n            b1 = double.Parse(b.ToString().Replace(',', '.'));\n        } else if (b is int) {\n            b1 = (double)b;\n        } else if (b is float) {\n            b1 = (double)b;\n        } else {\n            throw new RuntimeException(\"Type Error\");\n        }\n        if (a1 == b1) {\n            return null;\n        } else if (a1 > b1) {\n            return a1;\n        } else {\n            return b1;\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int SpecialFactorial(int n) {\n        int fact = 1;\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string FixSpaces(string txt) {\n        return Regex.Replace(txt, @\"\\s{3,}\", \"-\").Replace(\" \", \"_\");\n    }\n}\n",
            "class Global {\n    public static string FileNameCheck(string fileName) {\n        string[] suf = {\"txt\", \"exe\", \"dll\"};\n        string[] lst = fileName.Split(\".\");\n        if (lst.Length != 2 || !lst[1] in suf || lst[0].Length == 0 || !lst[0][0].isalpha() || len([x for x in lst[0] if x.isdigit()]) > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
            "class Global {\n    public static int SumSquares(IList<int> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 3 == 0) {\n                result += Math.Pow(lst[i], 2);\n            } else if (i % 4 == 0) {\n                result += Math.Pow(lst[i], 3);\n            } else {\n                result += lst[i];\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string WordsInSentence(string sentence) {\n        if (sentence.Length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(sentence.Length)) + 1; i++) {\n            if (sentence.Length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static bool Simplify(string x, string n) {\n        string[] xs = x.Split(\"/\");\n        string[] ns = n.Split(\"/\");\n        int num = int.Parse(xs[0]) * int.Parse(ns[0]);\n        int den = int.Parse(xs[1]) * int.Parse(ns[1]);\n        return num % den == 0;\n    }\n}\n",
            "class Global {\n    public static IList<int> OrderByPoints(IList<int> nums) {\n        Func<int, int> digits_sum = (int n) => {\n            string n_str = n.ToString();\n            if (n >= 0) {\n                return n_str.Select(d => int.Parse(d.ToString())).Sum();\n            } else {\n                return int.Parse(n_str.Substring(0, 2)) * 2 + digits_sum(Math.Abs(n));\n            }\n        };\n        return nums.OrderBy(n => digits_sum(n)).ToList();\n    }\n}\n",
            "class Global {\n    public static int SpecialFilter(IList<int> nums) {\n        string odds = \"13579\";\n        return nums.Where(n => n > 10 && n % 2 == 1 && odds.Contains(n.ToString()[0])).Count();\n    }\n}\n",
            "class Global {\n    public static int GetMaxTriples(int n) {\n        int[] c = new int[3];\n        for (int i = 1; i <= n; i++) {\n            int a = i * i - i + 1;\n            c[a % 3] += 1;\n        }\n        return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n    }\n}\n",
            "class Global {\n    public static IList<string> Bf(string planet1, string planet2) {\n        var names = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        if (!names.Contains(planet1) || !names.Contains(planet2)) {\n            return new List<string>();\n        }\n        var l = names.IndexOf(planet1);\n        var r = names.IndexOf(planet2);\n        if (l > r) {\n            var temp = l;\n            l = r;\n            r = temp;\n        }\n        if (l == r) {\n            return new List<string>();\n        }\n        return names.GetRange(l + 1, r - l - 1);\n    }\n}\n",
            "class Global {\n    public static IList<string> SortedListSum(IList<string> lst) {\n        var result = new List<string>();\n        foreach (var s in lst) {\n            if (s.Length % 2 == 0) {\n                result.Add(s);\n            }\n        }\n        return result.OrderBy(x => (x.Length, x)).ToList();\n    }\n}\n",
            "class Global {\n    public static int XOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(n)) + 1; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int DoubleTheDifference(IList<double> lst) {\n        return lst.Where(n => n >= 0 && n % 2 == 1).Select(n => n * n).Sum();\n    }\n}\n",
            "class Global {\n    public static IList<int> Compare(IList<int> game, IList<int> guess) {\n        return game.Zip(guess, (x, y) => Math.Abs(x - y)).ToList();\n    }\n}\n",
            "class Global {\n    public static string StrongestExtension(string className, IList<string> extensions) {\n        var max_s = float.NegativeInfinity;\n        var max_ext = \"\";\n        foreach (var ext in extensions) {\n            var upper = ext.Count(c => char.IsUpper(c));\n            var lower = ext.Count(c => char.IsLower(c));\n            var s = upper - lower;\n            if (s > max_s) {\n                max_s = s;\n                max_ext = ext;\n            }\n        }\n        return $\"{className}.{max_ext}\";\n    }\n}\n",
            "class Global {\n    public static bool CycpatternCheck(string a, string b) {\n        if (a.Length < b.Length) {\n            return false;\n        }\n        for (int i = 0; i < b.Length; i++) {\n            if (b.Substring(i) + b.Substring(0, i) in a) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<int> EvenOddCount(int num) {\n        string ds = Math.Abs(num).ToString();\n        int even = ds.Count(d => (int)d % 2 == 0);\n        return new List<int> { even, ds.Length - even };\n    }\n}\n",
            "class Global {\n    public static string IntToMiniRoman(int num) {\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        string[] numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        List<string> res = new List<string>();\n        for (int i = 0; i < values.Length; i++) {\n            while (num >= values[i]) {\n                res.Add(numerals[i]);\n                num -= values[i];\n            }\n        }\n        return string.Join(\"\", res);\n    }\n}\n",
            "class Global {\n    public static bool RightAngleTriangle(int a, int b, int c) {\n        var s = new List<int> { a, b, c };\n        s.Sort();\n        return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n    }\n}\n",
            "class Global {\n    public static string FindMax(IList<string> words) {\n        var max_cnt = 0;\n        var max_w = \"\";\n        foreach (var w in words) {\n            var cnt = w.Distinct().Count();\n            if (cnt > max_cnt) {\n                max_cnt = cnt;\n                max_w = w;\n            } else if (cnt == max_cnt) {\n                max_w = max_w.CompareTo(w) < 0 ? w : max_w;\n            }\n        }\n        return max_w;\n    }\n}\n",
            "class Global {\n    public static IList<int> Eat(int num, int need, int remaining) {\n        if (need <= remaining) {\n            return new List<int> { num + need, remaining - need };\n        } else {\n            return new List<int> { num + remaining, 0 };\n        }\n    }\n}\n",
            "class Global {\n    public static int DoAlgebra(IList<string> operators, IList<int> operands) {\n        var ops = operators.ToList();\n        var nums = operands.ToList();\n        var i = ops.Count - 1;\n        while (i >= 0) {\n            if (ops[i] == \"**\") {\n                nums[i] = Math.Pow(nums[i], nums[i + 1]);\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n            }\n            i -= 1;\n        }\n        i = 0;\n        while (i < ops.Count) {\n            if (ops[i] == \"*\") {\n                nums[i] = nums[i] * nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i -= 1;\n            } else if (ops[i] == \"//\") {\n                nums[i] = nums[i] / nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        i = 0;\n        while (i < ops.Count) {\n            if (ops[i] == \"+\") {\n                nums[i] = nums[i] + nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i -= 1;\n            } else if (ops[i] == \"-\") {\n                nums[i] = nums[i] - nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        return nums[0];\n    }\n}\n",
            "class Global {\n    public static string Solve(string s) {\n        if (!s.Any(ch => char.IsLetter(ch))) {\n            return new string(s.Reverse().ToArray());\n        }\n        var result = new List<char>();\n        foreach (var ch in s) {\n            if (!char.IsLetter(ch)) {\n                result.Add(ch);\n            } else if (char.IsUpper(ch)) {\n                result.Add(char.ToLower(ch));\n            } else if (char.IsLower(ch)) {\n                result.Add(char.ToUpper(ch));\n            }\n        }\n        return new string(result.ToArray());\n    }\n}\n",
            "class Global {\n    public static string? StringToMd5(string txt) {\n        if (txt == null) {\n            return null;\n        }\n        MD5 md5_hash = MD5.Create();\n        byte[] txt_bytes = Encoding.UTF8.GetBytes(txt);\n        md5_hash.ComputeHash(txt_bytes);\n        string md5_encoded = BitConverter.ToString(md5_hash.Hash).Replace(\"-\", \"\").ToLower();\n        return md5_encoded;\n    }\n}\n",
            "class Global {\n    public static IList<int> GenerateIntegers(int a, int b) {\n        int lower = Math.Max(2, Math.Min(a, b));\n        int upper = Math.Min(8, Math.Max(a, b));\n        List<int> result = new List<int>();\n        for (int i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                result.Add(i);\n            }\n        }\n        return result;\n    }\n}\n"
        ],
        "dart": [
            "bool hasCloseElements(List<double> numbers, double threshold) {\n    for (int i = 0; i < numbers.length; i++) {\n        for (int j = i + 1; j < numbers.length; j++) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "List<String> separateParenGroups(String parenString) {\n    List<String> groups = [];\n    List<String> stk = [];\n    String currentGroup = \"\";\n    String parens = parenString.replaceAll(\" \", \"\");\n    for (String ch in parens) {\n        if (ch == \"(\") {\n            stk.add(ch);\n            currentGroup += ch;\n        } else if (ch == \")\") {\n            stk.removeLast();\n            currentGroup += ch;\n            if (stk.isEmpty) {\n                groups.add(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - floor(num);\n}\n",
            "bool belowZero(List<int> operations) {\n    var balance = 0;\n    for (var op in operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(List<double> numbers) {\n    double mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    double deviation = numbers.map((x) => (x - mean).abs()).reduce((a, b) => a + b);\n    return deviation / numbers.length;\n}\n",
            "List<int> intersperse(List<int> numbers, int delimiter) {\n    List<int> result = [];\n    for (int i = 0; i < numbers.length; i++) {\n        if (i != 0) {\n            result.add(delimiter);\n        }\n        result.add(numbers[i]);\n    }\n    return result;\n}\n",
            "List<int> parseNestedParens(String parenString) {\n    List<int> result = [];\n    List<String> parenGroups = parenString.split();\n    for (String group in parenGroups) {\n        int maxDepth = 0;\n        int depth = 0;\n        for (String ch in group) {\n            if (ch == \"(\") {\n                depth += 1;\n                maxDepth = max(maxDepth, depth);\n            } else if (ch == \")\") {\n                depth -= 1;\n            }\n        }\n        result.add(maxDepth);\n    }\n    return result;\n}\n",
            "List<String> filterBySubstring(List<String> strs, String substring) {\n    return strs.where((s) => s.contains(substring)).toList();\n}\n",
            "List<int> sumProduct(List<int> numbers) {\n    var nSum = numbers.reduce((a, b) => a + b);\n    var nProduct = numbers.reduce((a, b) => a * b);\n    return [nSum, nProduct];\n}\n",
            "List<int> rollingMax(List<int> numbers) {\n    var maxSoFar = double.negativeInfinity;\n    var result = <int>[];\n    for (var num in numbers) {\n        maxSoFar = max(maxSoFar, num);\n        result.add(maxSoFar);\n    }\n    return result;\n}\n",
            "String makePalindrome(String s) {\n    if (s == s.split('').reversed.join('')) {\n        return s;\n    }\n    for (int i = 0; i < s.length; i++) {\n        if (s[i:] == s[i:].split('').reversed.join('')) {\n            return s + s.substring(0, i).split('').reversed.join('');\n        }\n    }\n    return '';\n}\n",
            "String stringXor(String a, String b) {\n    return a.split('').asMap().entries.map((e) => e.value == b[e.key] ? '0' : '1').join('');\n}\n",
            "String? longest(List<String> strs) {\n    if (strs.isEmpty) {\n        return null;\n    }\n    String longestS = strs[0];\n    for (String s in strs) {\n        if (s.length > longestS.length) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "List<String> allPrefixes(String s) {\n    List<String> prefixes = [];\n    for (int i = 0; i < s.length; i++) {\n        prefixes.add(s.substring(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "String stringSequence(int n) {\n    return List.generate(n + 1, (i) => i.toString()).join(\" \");\n}\n",
            "int countDistinctCharacters(String s) {\n    return s.toLowerCase().split('').toSet().length;\n}\n",
            "List<int> parseMusic(String musicString) {\n    var durations = {\"o\": 4, \"o|\": 2, \".|\": 1};\n    var notes = musicString.split();\n    return [durations[note] for note in notes];\n}\n",
            "int howManyTimes(String s, String substring) {\n    int times = 0;\n    for (int i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "String sortNumbers(String numbers) {\n    var numDict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    var numList = List.from(numbers.split(\" \")).where((x) => numDict.containsKey(x)).toList();\n    numList.sort((x, y) => numDict[x].compareTo(numDict[y]));\n    return numList.join(\" \");\n}\n",
            "List<double> findClosestElements(List<double> numbers) {\n    var sortedNumbers = numbers.sort();\n    var minDiff = double.infinity;\n    var closestPair = [];\n    for (var i = 1; i < sortedNumbers.length; i++) {\n        var diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "List<double> rescaleToUnit(List<double> numbers) {\n    double minNum = numbers.reduce(min);\n    double maxNum = numbers.reduce(max);\n    if (minNum == maxNum) {\n        return List.filled(numbers.length, 0.0);\n    } else {\n        return numbers.map((num) => (num - minNum) / (maxNum - minNum)).toList();\n    }\n}\n",
            "List<int> filterIntegers(List<Object> values) {\n    return values.where((x) => x is int).toList();\n}\n",
            "int strLength(String s) {\n    return s.length;\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return n ~/ i;\n        }\n    }\n    return 1;\n}\n",
            "List<int> factorize(int n) {\n    List<int> factors = [];\n    int divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor);\n            n ~/= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "List<int> removeDuplicates(List<int> numbers) {\n    Map<int, int> counts = {};\n    for (int num in numbers) {\n        counts[num] = counts.containsKey(num) ? counts[num] + 1 : 0;\n    }\n    List<int> res = [];\n    for (int num in numbers) {\n        if (counts[num] == 1) {\n            res.add(num);\n        }\n    }\n    return res;\n}\n",
            "String flipCase(String s) {\n    var flipped = [];\n    for (var ch in s.split('')) {\n        if (!ch.contains(RegExp(r'[a-zA-Z]'))) {\n            flipped.add(ch);\n        } else if (ch.contains(RegExp(r'[a-z]'))) {\n            flipped.add(ch.toUpperCase());\n        } else if (ch.contains(RegExp(r'[A-Z]'))) {\n            flipped.add(ch.toLowerCase());\n        }\n    }\n    return flipped.join('');\n}\n",
            "String concatenate(List<String> strs) {\n    return strs.join(\"\");\n}\n",
            "List<String> filterByPrefix(List<String> strs, String prefixStr) {\n    return strs.where((s) => s.startsWith(prefixStr)).toList();\n}\n",
            "List<int> getPositive(List<int> l) {\n    return l.where((num) => num > 0).toList();\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n) + 1; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "double poly(List<int> xs, double x) {\n    double res = 0.0;\n    for (int i = 0; i < xs.length; i++) {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\ndouble findZero(List<int> xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "List<int> sortThird(List<int> l) {\n    var sortedThird = sorted(l[::3]);\n    return [sortedThird[i ~/ 3] if i % 3 == 0 else l[i] for i in range(len(l))];\n}\n",
            "List<int> listUnique(List<int> l) {\n    return l.toSet().toList()..sort();\n}\n",
            "int maxElement(List<int> l) {\n    if (l.isEmpty) {\n        return 0;\n    }\n    return l.reduce(max);\n}\n",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString().split(\"7\").length - 1;\n        }\n    }\n    return cnt;\n}\n",
            "List<int> sortEven(List<int> l) {\n    var sortedEven = l.where((element) => element % 2 == 0).toList()..sort();\n    return [\n        sortedEven[i ~/ 2] if (i % 2 == 0) else l[i]\n        for (var i = 0; i < l.length; i++)\n    ];\n}\n",
            "String encodeCyclic(String s) {\n    List<String> result = [];\n    for (int i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.add(s.substring(i));\n        } else {\n            result.add(s.substring(i + 1, i + 3));\n            result.add(s.substring(i, i + 1));\n        }\n    }\n    return result.join(\"\");\n}\nString decodeCyclic(String s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "int primeFib(int n) {\n    List<int> f = [0, 1];\n    int cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\nbool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n) + 1; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "bool triplesSumToZero(List<int> l) {\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return n ** 2;\n}\n",
            "List<int> incrList(List<int> l) {\n    return l.map((i) => i + 1).toList();\n}\n",
            "bool pairsSumToZero(List<int> l) {\n    var seen = Set<int>();\n    for (var num in l) {\n        if (-num in seen) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "String changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    List<String> digits = [];\n    while (x > 0) {\n        digits.add(x % bas);\n        x ~/= bas;\n    }\n    return digits.reversed.join();\n}\n",
            "double triangleArea(int a, int h) {\n    return a * h / 2;\n}\n",
            "int fib4(int n) {\n    List<int> fib = [0, 0, 2, 0];\n    for (int i = 4; i < n + 1; i++) {\n        fib[i % 4] = fib.reduce((a, b) => a + b);\n    }\n    return fib[n % 4];\n}\n",
            "double median(List<double> l) {\n    var sl = l.sorted();\n    if (l.length % 2 != 0) {\n        return sl[l.length ~/ 2];\n    } else {\n        return (sl[l.length ~/ 2] + sl[l.length ~/ 2 - 1]) / 2;\n    }\n}\n",
            "bool isPalindrome(String txt) {\n    return txt == txt.split('').reversed.join('');\n}\n",
            "int modp(int n, int p) {\n    int ret = 1;\n    for (int _ = 0; _ < n; _++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "String encodeShift(String s) {\n    List<String> result = [];\n    for (var ch in s) {\n        result.add(String.fromCharCode(((ch.codeUnitAt(0) - 97 + 5) % 26) + 97));\n    }\n    return result.join(\"\");\n}\nString decodeShift(String s) {\n    List<String> result = [];\n    for (var ch in s) {\n        result.add(String.fromCharCode(((ch.codeUnitAt(0) - 97 + 21) % 26) + 97));\n    }\n    return result.join(\"\");\n}\n",
            "String removeVowels(String txt) {\n    var vowels = \"aeiouAEIOU\";\n    return txt.split('').where((char) => !vowels.contains(char)).join('');\n}\n",
            "bool belowThreshold(List<int> l, int t) {\n    return l.every((x) => x < t);\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(String s0, String s1) {\n    return s0.split('').toSet() == s1.split('').toSet();\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "bool correctBracketing(String brackets) {\n    int depth = 0;\n    for (int i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"<\") {\n            depth += 1;\n        } else if (brackets[i] == \">\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(List<int> l) {\n    var diff = [for (var i = 0; i < l.length - 1; i++) l[i + 1] - l[i]];\n    return diff.every((x) => x <= 0) || diff.every((x) => x >= 0);\n}\n",
            "List<int> common(List<int> l1, List<int> l2) {\n    return sorted(list(set(l1) & set(l2)));\n}\n",
            "int largestPrimeFactor(int n) {\n    var i = 2;\n    while (i * i <= n) {\n        if (n % i != 0) {\n            i += 1;\n        } else {\n            n ~/= i;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    return sum(range(n + 1));\n}\n",
            "bool correctBracketing(String brackets) {\n    int depth = 0;\n    for (int i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"(\") {\n            depth += 1;\n        } else if (brackets[i] == \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "List<int> derivative(List<int> xs) {\n    return [xs[i] * i for i in range(1, len(xs))];\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(String s) {\n    var vowels = \"aeiou\";\n    var cnt = 0;\n    for (var i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() in vowels || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n",
            "String circularShift(int x, int shift) {\n    String x_str = x.toString();\n    if (shift > x_str.length) {\n        return x_str.split('').reversed.join('');\n    } else {\n        return x_str.substring(x_str.length - shift) + x_str.substring(0, x_str.length - shift);\n    }\n}\n",
            "int digitSum(String s) {\n    return s.split('').where((c) => c.isUpperCase).map((c) => c.codeUnitAt(0)).reduce((a, b) => a + b);\n}\n",
            "int fruitDistribution(String s, int n) {\n    var words = s.split(' ');\n    var apples = int.parse(words[words.indexOf(\"apples\") - 1]);\n    var oranges = int.parse(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "List<int> pluck(List<int> arr) {\n    List<int> evens = [];\n    for (int n in arr) {\n        if (n % 2 == 0) {\n            evens.add(n);\n        }\n    }\n    if (evens.length == 0) {\n        return [];\n    }\n    int min_even = evens.reduce(min);\n    return [min_even, arr.indexOf(min_even)];\n}\n",
            "int search(List<int> lst) {\n    var freqs = {};\n    for (var n in lst) {\n        freqs[n] = freqs.get(n, 0) + 1;\n    }\n    var good_vals = [k for k, v in freqs.items() if v >= k];\n    return max(good_vals, default: -1);\n}\n",
            "List<int> strangeSortList(List<int> lst) {\n    var sl = lst.sort();\n    var result = [];\n    var left = 0;\n    var right = sl.length - 1;\n    while (left <= right) {\n        result.add(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.add(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        var s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(List<int> q, int w) {\n    if (q.length == 0) {\n        return false;\n    }\n    bool isPalin = q.asMap().entries.every((entry) {\n        return entry.value == q[q.length - entry.key - 1];\n    });\n    int total = q.reduce((value, element) => value + element);\n    return isPalin && total <= w;\n}\n",
            "int smallestChange(List<int> arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.length ~/ 2; i++) {\n        if (arr[i] != arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "List<String> totalMatch(List<String> lst1, List<String> lst2) {\n    var cnt1 = lst1.map((s) => s.length).reduce((a, b) => a + b);\n    var cnt2 = lst2.map((s) => s.length).reduce((a, b) => a + b);\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n",
            "bool isMultiplyPrime(int a) {\n    if (a < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(a) + 1; i++) {\n        if (a % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    var tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    a = a.abs();\n    var root = (a ^ (1.0 / 3.0)).round();\n    return root * root * root == a;\n}\n",
            "int hexKey(String num) {\n    return num.split('').where((x) => x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D').length;\n}\n",
            "String decimalToBinary(int dec) {\n    String binary = dec.toRadixString(2);\n    return \"db\" + binary + \"db\";\n}\n",
            "bool isHappy(String s) {\n    if (s.length < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.length - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "List<String> numericalLetterGrade(List<double> grades) {\n    List<String> result = [];\n    for (double g in grades) {\n        if (g == 4.0) {\n            result.add(\"A+\");\n        } else if (g > 3.7) {\n            result.add(\"A\");\n        } else if (g > 3.3) {\n            result.add(\"A-\");\n        } else if (g > 3.0) {\n            result.add(\"B+\");\n        } else if (g > 2.7) {\n            result.add(\"B\");\n        } else if (g > 2.3) {\n            result.add(\"B-\");\n        } else if (g > 2.0) {\n            result.add(\"C+\");\n        } else if (g > 1.7) {\n            result.add(\"C\");\n        } else if (g > 1.3) {\n            result.add(\"C-\");\n        } else if (g > 1.0) {\n            result.add(\"D+\");\n        } else if (g > 0.7) {\n            result.add(\"D\");\n        } else if (g > 0.0) {\n            result.add(\"D-\");\n        } else {\n            result.add(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(String s) {\n    int length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(length).floor() + 1; i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * (10 ** (n - 2));\n}\n",
            "String solve(int n) {\n    var digitsSum = 0;\n    for (var d in n.toString().split('')) {\n        digitsSum += int.parse(d);\n    }\n    return digitsSum.toRadixString(2);\n}\n",
            "int add(List<int> lst) {\n    return lst.where((x) => x % 2 == 0).toList().asMap().entries.where((e) => e.key % 2 == 1).map((e) => e.value).reduce((a, b) => a + b);\n}\n",
            "String antiShuffle(String s) {\n    List<String> words = s.split(\" \").map((word) => \"\".join(sorted(list(word))).toList();\n    return \" \".join(words);\n}\n",
            "List<List<int>> getRow(List<List<int>> lst, int x) {\n    List<List<int>> coords = [];\n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                coords.add([i, j]);\n            }\n        }\n    }\n    coords.sort((a, b) => a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);\n    return coords;\n}\n",
            "List<int> sortArray(List<int> arr) {\n    if (arr.length == 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 == 0) {\n        return arr.reversed.toList();\n    } else {\n        return arr;\n    }\n}\n",
            "String encrypt(String s) {\n    var result = [];\n    for (var ch in s) {\n        var shifted = ch.codeUnitAt(0) + 4;\n        if (shifted > 'z'.codeUnitAt(0)) {\n            shifted -= 26;\n        }\n        result.add(String.fromCharCode(shifted));\n    }\n    return result.join('');\n}\n",
            "int? nextSmallest(List<int> lst) {\n    var sl = sorted(set(lst));\n    if (len(sl) < 2) {\n        return None;\n    }\n    return sl[1];\n}\n",
            "int isBored(String s) {\n    var sentences = re.split(r\"[.!?]\\s*\", s);\n    return sentences.where((sentence) => sentence.length >= 2).map((sentence) => sentence.substring(0, 2) == \"I \").reduce((a, b) => a + b);\n}\n",
            "bool anyInt(Object x, Object y, Object z) {\n    if (x is int && y is int && z is int) {\n        if ((x + y == z) || (x + z == y) || (y + z == x)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "String encode(String message) {\n    var vowels = \"aeiouAEIOU\";\n    var result = [];\n    for (var ch in message) {\n        if (ch.isalpha()) {\n            var ch1 = ch.toUpperCase() if ch.isLowerCase() else ch.toLowerCase();\n            if (ch1 in vowels) {\n                ch1 = ch1.codeUnitAt(0) + 2;\n            }\n            result.add(ch1);\n        } else {\n            result.add(ch);\n        }\n    }\n    return result.join(\"\");\n}\n",
            "int skjkasdkd(List<int> lst) {\n    var primes = [for (var n in lst) if (is_prime(n)) n];\n    if (primes.length == 0) {\n        return 0;\n    }\n    var largest = max(primes).toString();\n    return largest.split('').map((digit) => int.parse(digit)).reduce((a, b) => a + b);\n}\n",
            "bool checkDictCase(Map<String,String> d) {\n    if (d.isEmpty) {\n        return false;\n    }\n    return d.keys.every((c) => c.toLowerCase() == c) || d.keys.every((c) => c.toUpperCase() == c);\n}\n",
            "List<int> countUpTo(int n) {\n    List<int> primes = [];\n    for (int num = 2; num < n; num++) {\n        bool isPrime = true;\n        for (int p in primes) {\n            if (num % p == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.add(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    return (a.abs() % 10) * (b.abs() % 10);\n}\n",
            "int countUpper(String s) {\n    var vowels = \"AEIOU\";\n    return s.split(\"\").where((c) => c.isEven && vowels.contains(c)).length;\n}\n",
            "int closestInteger(String value) {\n    var num = double.parse(value);\n    if (num >= 0) {\n        return num.round();\n    } else {\n        return num.floor();\n    }\n}\n",
            "List<int> makeAPile(int n) {\n    return [n + 2 * i for i in range(n)];\n}\n",
            "List<String> wordsString(String s) {\n    return s.split(RegExp(r\"[, ]\")).where((w) => w.length > 0).toList();\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return y - 1;\n}\n",
            "String? roundedAvg(int n, int m) {\n    if (n > m) {\n        return null;\n    }\n    var r_avg = (m + n) ~/ 2 + 0.5;\n    return r_avg.toRadixString(2);\n}\n",
            "List<int> uniqueDigits(List<int> x) {\n    return x.where((num) => allDigitsOdd(num.toString())).toList()..sort();\n}\nbool allDigitsOdd(String s) {\n    return s.split('').every((digit) => digit.codeUnitAt(0) % 2 != 0);\n}\n",
            "List<String> byLength(List<int> arr) {\n    var digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    var sortedArr = sorted([x for x in arr if 1 <= x <= 9], reverse: true);\n    return [digitNames[x - 1] for x in sortedArr];\n}\n",
            "List<int> f(int n) {\n    List<int> nums = List.generate(n + 1, (i) => i + 1);\n    return List.generate(n, (i) => i % 2 != 0 ? nums.take(i).reduce((x, y) => x + y) : nums.take(i).reduce((x, y) => x * y));\n}\n",
            "List<int> evenOddPalindrome(int n) {\n    var cnt = [0, 0];\n    for (var i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\nbool isPalindrome(String txt) {\n    return txt == txt.split('').reversed.join('');\n}\n",
            "int countNums(List<int> arr) {\n    return arr.where((n) => digitsSum(n) > 0).length;\n}\nint digitsSum(int n) {\n    String nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split('').map((d) => int.parse(d)).reduce((a, b) => a + b);\n    } else {\n        return int.parse(nStr.substring(0, 2)) * 2 + digitsSum(n.abs());\n    }\n}\n",
            "bool moveOneBall(List<int> arr) {\n    if (arr.length == 0) {\n        return true;\n    }\n    var sortedArr = arr.toList();\n    sortedArr.sort();\n    for (var i = 0; i < arr.length; i++) {\n        if (arr.sublist(i) == sortedArr.sublist(0, arr.length - i) && arr.sublist(0, i) == sortedArr.sublist(arr.length - i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "String canExchange(List<int> lst1, List<int> lst2) {\n    int odd_cnt = lst1.where((num) => num % 2 != 0).length;\n    int even_cnt = lst2.where((num) => num % 2 == 0).length;\n    return even_cnt >= odd_cnt ? \"YES\" : \"NO\";\n}\n",
            "Map<String,int> histogram(String test) {\n    Map<String,int> freq = {};\n    List<String> words = [for (var w in test.split(\" \")) if (w.length > 0) w];\n    for (var w in words) {\n        freq[w] = freq.containsKey(w) ? freq[w] + 1 : 0;\n    }\n    Map<String,int> result = {};\n    if (freq.length > 0) {\n        int max_freq = freq.values.reduce(max);\n        for (var k in freq.keys) {\n            if (freq[k] == max_freq) {\n                result[k] = freq[k];\n            }\n        }\n    }\n    return result;\n}\n",
            "List<String> reverseDelete(String s, String c) {\n    String s1 = \"\";\n    for (var ch in s) {\n        if (!c.contains(ch)) {\n            s1 += ch;\n        }\n    }\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"];\n}\nbool isPalindrome(String s) {\n    return s == s.split(\"\").reversed.join(\"\");\n}\n",
            "List<String> oddCount(List<String> lst) {\n    List<String> result = [];\n    for (var num in lst) {\n        var n = num.runes.where((d) => d % 2 == 1).length;\n        var rs = \"the number of odd elements in the string i of the input.\";\n        result.add(rs.replaceAll(\"i\", n.toString()));\n    }\n    return result;\n}\n",
            "int minSubArraySum(List<int> nums) {\n    int minSum = 0;\n    int curSum = 0;\n    for (int n in nums) {\n        curSum = min(curSum + n, 0);\n        minSum = min(curSum, minSum);\n    }\n    if (minSum == 0) {\n        minSum = min(nums);\n    }\n    return minSum;\n}\n",
            "int maxFill(List<List<int>> grid, int capacity) {\n    return grid.map((arr) => ceil(arr.reduce((a, b) => a + b) / capacity)).reduce((a, b) => a + b);\n}\n",
            "List<int> sortArray(List<int> arr) {\n    return arr.sort((a, b) => (countOnes(a) - countOnes(b)).compareTo(0) == 0 ? a - b : countOnes(a) - countOnes(b));\n}\nint countOnes(int num) {\n    return num.toRadixString(2).split('').where((element) => element == '1').length;\n}\n",
            "List<String> selectWords(String s, int n) {\n    var consonants = \"bcdfghjklmnpqrstvwxyz\";\n    var words = [w for w in s.split(\" \") if len(w) > 0];\n    return [w for w in words if len([c for c in w if c.lower() in consonants]) == n];\n}\n",
            "String getClosestVowel(String word) {\n    var vowels = \"aeiouAEIOU\";\n    for (var i = len(word) - 2; i >= 1; i--) {\n        if (word[i] in vowels && !(word[i - 1] in vowels) && !(word[i + 1] in vowels)) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "String matchParens(List<String> lst) {\n    String s1 = lst[0] + lst[1];\n    String s2 = lst[1] + lst[0];\n    return check(s1) || check(s2) ? \"Yes\" : \"No\";\n}\nbool check(String s) {\n    int depth = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (s[i] == \"(\") {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "List<int> maximum(List<int> arr, int k) {\n    if (k == 0) {\n        return [];\n    }\n    return arr.sort((a, b) => a - b).sublist(arr.length - k);\n}\n",
            "int solution(List<int> lst) {\n    return lst.where((x) => lst.indexOf(x) % 2 == 0 && x % 2 != 0).reduce((a, b) => a + b);\n}\n",
            "int addElements(List<int> arr, int k) {\n    return arr.take(k).where((n) => n.toString().length <= 2).sum();\n}\n",
            "List<int> getOddCollatz(int n) {\n    List<int> collatz = [1];\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.add(n);\n            n = 3 * n + 1;\n        } else {\n            n = n ~/ 2;\n        }\n    }\n    return collatz..sort();\n}\n",
            "bool validDate(String date) {\n    if (!(date.length == 10) || !(date[2] == \"-\") || !(date[5] == \"-\")) {\n        return false;\n    }\n    int m = int.parse(date.substring(0, 2));\n    int d = int.parse(date.substring(3, 5));\n    if (m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31) {\n        return true;\n    }\n    if (m in [4, 6, 9, 11] && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "List<String> splitWords(String txt) {\n    if (txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [txt.length.toString()];\n    }\n}\n",
            "bool isSorted(List<int> lst) {\n    if (!lst.every((i) => lst[i - 1] <= lst[i])) {\n        return false;\n    }\n    var freq = {};\n    for (var i in lst) {\n        freq[i] = (freq[i] ?? 0) + 1;\n    }\n    return (freq.values.reduce((a, b) => a > b ? a : b) ?? 0) <= 2;\n}\n",
            "String intersection(List<int> interval1, List<int> interval2) {\n    if (interval1[0] < 2) {\n        return \"NO\";\n    }\n    for (int i = 2; i <= sqrt(interval1[1]) + 1; i++) {\n        if (interval1[0] % i == 0) {\n            return \"NO\";\n        }\n    }\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    return length > 0 && is_prime(length) ? \"YES\" : \"NO\";\n}\n",
            "int? prodSigns(List<int> arr) {\n    if (arr.isEmpty) {\n        return null;\n    }\n    if (arr.contains(0)) {\n        return 0;\n    }\n    var sign = -1;\n    if (arr.where((n) => n < 0).length % 2 == 1) {\n        sign = 1;\n    }\n    return sign * arr.map((n) => n.abs()).reduce((a, b) => a + b);\n}\n",
            "List<int> minPath(List<List<int>> grid, int k) {\n    var n = grid.length;\n    var minVal = n * n + 1;\n    for (var i = 0; i < n; i++) {\n        for (var j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                var temp = [];\n                if (i != 0) {\n                    temp.add(grid[i - 1][j]);\n                }\n                if (j != 0) {\n                    temp.add(grid[i][j - 1]);\n                }\n                if (i != n - 1) {\n                    temp.add(grid[i + 1][j]);\n                }\n                if (j != n - 1) {\n                    temp.add(grid[i][j + 1]);\n                }\n                minVal = temp.reduce(min);\n            }\n        }\n    }\n    var result = [];\n    for (var i = 0; i < k; i++) {\n        result.add(i % 2 == 0 ? 1 : minVal);\n    }\n    return result;\n}\n",
            "List<int> tri(int n) {\n    if (n == 0) {\n        return [1];\n    }\n    List<int> seq = [1, 3];\n    for (int i = 2; i <= n + 1; i++) {\n        if (i % 2 == 0) {\n            seq.add(i / 2 + 1);\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    var odds = [int(d) for d in str(n) if int(d) % 2 == 1];\n    return odds.reduce((x, y) => x * y) if odds.length > 0 else 0;\n}\n",
            "bool isNested(String s) {\n    List<int> openIdx = [];\n    List<int> closeIdx = [];\n    for (int i = 0; i < s.length; i++) {\n        if (s[i] == '[') {\n            openIdx.add(i);\n        } else if (s[i] == ']') {\n            closeIdx.add(i);\n        }\n    }\n    closeIdx.reverse();\n    int cnt = 0;\n    int i = 0;\n    int l = closeIdx.length;\n    for (int idx in openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "int sumSquares(List<double> lst) {\n    return lst.map((n) => pow(ceil(n), 2)).reduce((a, b) => a + b);\n}\n",
            "bool checkIfLastCharIsALetter(String txt) {\n    if (txt.isEmpty) {\n        return false;\n    }\n    String last = txt.substring(txt.lastIndexOf(' ') + 1);\n    return last.length == 1 && last.codeUnitAt(0).isLetter();\n}\n",
            "int canArrange(List<int> arr) {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    var idx = [for (var i = 1; i < arr.length; i++) if (arr[i] < arr[i - 1]) i];\n    return idx.isEmpty ? -1 : idx.reduce(max);\n}\n",
            "List<int?> largestSmallestIntegers(List<int> lst) {\n    List<int> neg = [];\n    List<int> pos = [];\n    for (int i in lst) {\n        if (i < 0) {\n            neg.add(i);\n        } else if (i > 0) {\n            pos.add(i);\n        }\n    }\n    int? max_neg = neg.length > 0 ? neg.reduce(max) : null;\n    int? min_pos = pos.length > 0 ? pos.reduce(min) : null;\n    return [max_neg, min_pos];\n}\n",
            "double? compareOne(Object a, Object b) {\n    if (a is String) {\n        return double.parse(a.replaceAll(',', '.'));\n    } else if (a is int) {\n        return a.toDouble();\n    } else if (a is double) {\n        return a;\n    } else {\n        throw RuntimeError(\"Type Error\");\n    }\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    int fact = 1;\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "String fixSpaces(String txt) {\n    return txt.replaceAll(RegExp(r\"\\s{3,}\"), \"-\").replaceAll(\" \", \"_\");\n}\n",
            "String fileNameCheck(String fileName) {\n    var suf = [\"txt\", \"exe\", \"dll\"];\n    var lst = fileName.split(\".\");\n    if (lst.length != 2 || !lst[1] in suf || lst[0].length == 0 || !lst[0][0].isalpha() || lst[0].where((x) => x.isdigit()).length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "int sumSquares(List<int> lst) {\n    var result = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            result += pow(lst[i], 2);\n        } else if (i % 4 == 0) {\n            result += pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n) + 1; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nString wordsInSentence(String sentence) {\n    List<String> words = sentence.split(\" \");\n    return \" \".join([w for w in words if isPrime(len(w))]);\n}\n",
            "bool simplify(String x, String n) {\n    var xs = x.split(\"/\");\n    var ns = n.split(\"/\");\n    var num = int.parse(xs[0]) * int.parse(ns[0]);\n    var den = int.parse(xs[1]) * int.parse(ns[1]);\n    return num % den == 0;\n}\n",
            "List<int> orderByPoints(List<int> nums) {\n    return nums.sort((a, b) => digitsSum(a) - digitsSum(b));\n}\nint digitsSum(int n) {\n    String nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split('').map((d) => int.parse(d)).reduce((a, b) => a + b);\n    } else {\n        return int.parse(nStr.substring(0, 2)) * 2 + digitsSum(n.abs());\n    }\n}\n",
            "int specialFilter(List<int> nums) {\n    String odds = \"13579\";\n    return nums.where((n) => n > 10 && n % 2 == 1 && odds.contains(n.toString()[0])).length;\n}\n",
            "int getMaxTriples(int n) {\n    var c = [0, 0, 0];\n    for (var i = 1; i <= n; i++) {\n        var a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) ~/ 6;\n}\n",
            "List<String> bf(String planet1, String planet2) {\n    var names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.contains(planet1) || !names.contains(planet2)) {\n        return [];\n    }\n    var l = names.indexOf(planet1);\n    var r = names.indexOf(planet2);\n    if (l > r) {\n        var temp = l;\n        l = r;\n        r = temp;\n    }\n    if (l == r) {\n        return [];\n    }\n    return names.sublist(l + 1, r);\n}\n",
            "List<String> sortedListSum(List<String> lst) {\n    List<String> result = [];\n    for (String s in lst) {\n        if (s.length % 2 == 0) {\n            result.add(s);\n        }\n    }\n    result.sort((a, b) => a.length.compareTo(b.length));\n    return result;\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= sqrt(n).floor(); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(List<double> lst) {\n    return lst.where((n) => n >= 0 && n % 2 == 1).map((n) => n * n).reduce((a, b) => a + b);\n}\n",
            "List<int> compare(List<int> game, List<int> guess) {\n    return [abs(x - y) for x, y in zip(game, guess)];\n}\n",
            "String strongestExtension(String className, List<String> extensions) {\n    var max_s = double.negativeInfinity;\n    var max_ext = \"\";\n    for (var ext in extensions) {\n        var upper = ext.split(\"\").where((c) => c.toUpperCase() == c).length;\n        var lower = ext.split(\"\").where((c) => c.toLowerCase() == c).length;\n        var s = upper - lower;\n        if (s > max_s) {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return \"$className.$max_ext\";\n}\n",
            "bool cycpatternCheck(String a, String b) {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (int i = 0; i < b.length; i++) {\n        if (b.substring(i) + b.substring(0, i) in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "List<int> evenOddCount(int num) {\n    String ds = num.abs().toString();\n    int even = ds.split('').where((d) => d.codeUnitAt(0) % 2 == 0).length;\n    return [even, ds.length - even];\n}\n",
            "String intToMiniRoman(int num) {\n    List<int> values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    List<String> numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    List<String> res = [];\n    for (int i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.add(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join(\"\");\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    var s = [a, b, c].sort();\n    return  s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}\n",
            "String findMax(List<String> words) {\n    var max_cnt = 0;\n    var max_w = \"\";\n    for (var w in words) {\n        var cnt = w.length;\n        if (cnt > max_cnt) {\n            max_cnt = cnt;\n            max_w = w;\n        } else if (cnt == max_cnt) {\n            max_w = max_w.compareTo(w) > 0 ? max_w : w;\n        }\n    }\n    return max_w;\n}\n",
            "List<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "int doAlgebra(List<String> operators, List<int> operands) {\n    List<String> ops = operators.toList();\n    List<int> nums = operands.toList();\n    int i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]);\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] ~/ nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "String solve(String s) {\n    if (!s.any((ch) => ch.isalpha())) {\n        return s.reversed;\n    }\n    var result = [];\n    for (var ch in s) {\n        if (!ch.isalpha()) {\n            result.add(ch);\n        } else if (ch.isupper()) {\n            result.add(ch.lower());\n        } else if (ch.islower()) {\n            result.add(ch.upper());\n        }\n    }\n    return result.join();\n}\n",
            "String? stringToMd5(String txt) {\n    if (txt.isEmpty) {\n        return null;\n    }\n    var md5_hash = md5.convert(txt.codeUnits);\n    var md5_encoded = md5_hash.toString();\n    return md5_encoded;\n}\n",
            "List<int> generateIntegers(int a, int b) {\n    int lower = max(2, min(a, b));\n    int upper = min(8, max(a, b));\n    return [i for i in range(lower, upper + 1) if i % 2 == 0];\n}\n"
        ],
        "go": [
            "func HasCloseElements(numbers []float64, threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func SeparateParenGroups(parenString string) []string {\n    groups := []string{}\n    stk := []string{}\n    currentGroup := \"\"\n    parens := strings.Replace(parenString, \" \", \"\")\n    for _, ch := range parens {\n        if ch == \"(\" {\n            stk = append(stk, string(ch))\n            currentGroup += string(ch)\n        } else if ch == \")\" {\n            stk = stk[:len(stk)-1]\n            currentGroup += string(ch)\n            if len(stk) == 0 {\n                groups = append(groups, currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "func TruncateNumber(num float64) float64 {\n    return num - math.Floor(num)\n}\n",
            "func BelowZero(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func MeanAbsoluteDeviation(numbers []float64) float64 {\n    mean := sum(numbers) / len(numbers)\n    deviation := sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n}\n",
            "func Intersperse(numbers []int, delimiter int) []int {\n    result := []int{}\n    for i := 0; i < len(numbers); i++ {\n        if i != 0 {\n            result = append(result, delimiter)\n        }\n        result = append(result, numbers[i])\n    }\n    return result\n}\n",
            "func ParseNestedParens(parenString string) []int {\n    result := []int{}\n    parenGroups := strings.Split(parenString, \" \")\n    for _, group := range parenGroups {\n        maxDepth := 0\n        depth := 0\n        for _, ch := range group {\n            if ch == \"(\" {\n                depth += 1\n                maxDepth = int(math.Max(float64(maxDepth), float64(depth)))\n            } else if ch == \")\" {\n                depth -= 1\n            }\n        }\n        result = append(result, maxDepth)\n    }\n    return result\n}\n",
            "func FilterBySubstring(strs []string, substring string) []string {\n    return [s for s in strs if substring in s]\n}\n",
            "func SumProduct(numbers []int) []int {\n    n_sum := 0\n    for _, n := range numbers {\n        n_sum += n\n    }\n    n_product := 1\n    for _, n := range numbers {\n        n_product *= n\n    }\n    return []int{n_sum, n_product}\n}\n",
            "func RollingMax(numbers []int) []int {\n    max_so_far := math.Inf(-1)\n    result := []int{}\n    for _, num := range numbers {\n        max_so_far = math.Max(max_so_far, num)\n        result = append(result, max_so_far)\n    }\n    return result\n}\n",
            "func MakePalindrome(s string) string {\n    if isPalindrome(s) {\n        return s\n    }\n    for i := 0; i < len(s); i++ {\n        if isPalindrome(s[i:]) {\n            return s + reverse(s[:i])\n        }\n    }\n    return \"\"\n}\nfunc isPalindrome(s string) bool {\n    return s == reverse(s)\n}\nfunc reverse(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n",
            "func StringXor(a string, b string) string {\n    return \"\".join([\"0\" if x == y else \"1\" for x, y in zip(a, b)])\n}\n",
            "func Longest(strs []string) *string {\n    if len(strs) == 0 {\n        return nil\n    }\n    longestS := strs[0]\n    for _, s := range strs {\n        if len(s) > len(longestS) {\n            longestS = s\n        }\n    }\n    return &longestS\n}\n",
            "func GreatestCommonDivisor(a int, b int) int {\n    if b == 0 {\n        return a\n    } else {\n        return GreatestCommonDivisor(b, a % b)\n    }\n}\n",
            "func AllPrefixes(s string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(s); i++ {\n        prefixes = append(prefixes, s[:i+1])\n    }\n    return prefixes\n}\n",
            "func StringSequence(n int) string {\n    return strings.Join([]string{strconv.Itoa(i) for i in range(n + 1)}, \" \")\n}\n",
            "func CountDistinctCharacters(s string) int {\n    return len(set(s.lower()))\n}\n",
            "func ParseMusic(musicString string) []int {\n    durations := map[string]int{\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes := strings.Split(musicString, \" \")\n    return []int{durations[note] for note in notes}\n}\n",
            "func HowManyTimes(s string, substring string) int {\n    times := 0\n    for i := 0; i < len(s) - len(substring) + 1; i++ {\n        if s[i : i + len(substring)] == substring {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "func SortNumbers(numbers string) string {\n    num_dict := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list := []string{}\n    for _, x := range strings.Split(numbers, \" \") {\n        if _, ok := num_dict[x]; ok {\n            num_list = append(num_list, x)\n        }\n    }\n    sort.Slice(num_list, func(i, j int) bool {\n        return num_dict[num_list[i]] < num_dict[num_list[j]]\n    })\n    return strings.Join(num_list, \" \")\n}\n",
            "func FindClosestElements(numbers []float64) []float64 {\n    sorted_numbers := make([]float64, len(numbers))\n    copy(sorted_numbers, numbers)\n    sort.Float64s(sorted_numbers)\n    min_diff := float64(math.Inf(1))\n    closest_pair := make([]float64, 2)\n    for i := 1; i < len(sorted_numbers); i++ {\n        diff := sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff {\n            min_diff = diff\n            closest_pair[0] = sorted_numbers[i - 1]\n            closest_pair[1] = sorted_numbers[i]\n        }\n    }\n    return closest_pair\n}\n",
            "func RescaleToUnit(numbers []float64) []float64 {\n    minNum := math.Min(numbers)\n    maxNum := math.Max(numbers)\n    if minNum == maxNum {\n        return make([]float64, len(numbers))\n    } else {\n        return []float64{\n            (num - minNum) / (maxNum - minNum)\n            for num in numbers\n        }\n    }\n}\n",
            "func FilterIntegers(values []interface{}) []int {\n    var result []int\n    for _, x := range values {\n        if _, ok := x.(int); ok {\n            result = append(result, x)\n        }\n    }\n    return result\n}\n",
            "func StrLength(s string) int {\n    return len(s)\n}\n",
            "func LargestDivisor(n int) int {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "func Factorize(n int) []int {\n    factors := []int{}\n    divisor := 2\n    for divisor <= n {\n        if n % divisor == 0 {\n            factors = append(factors, divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "func RemoveDuplicates(numbers []int) []int {\n    counts := make(map[int]int)\n    for _, num := range numbers {\n        counts[num] = counts[num] + 1\n    }\n    res := []int{}\n    for _, num := range numbers {\n        if counts[num] == 1 {\n            res = append(res, num)\n        }\n    }\n    return res\n}\n",
            "func FlipCase(s string) string {\n    flipped := []rune{}\n    for _, ch := range s {\n        if !unicode.IsLetter(ch) {\n            flipped = append(flipped, ch)\n        } else if unicode.IsLower(ch) {\n            flipped = append(flipped, unicode.ToUpper(ch))\n        } else if unicode.IsUpper(ch) {\n            flipped = append(flipped, unicode.ToLower(ch))\n        }\n    }\n    return string(flipped)\n}\n",
            "func Concatenate(strs []string) string {\n    return strings.Join(strs, \"\")\n}\n",
            "func FilterByPrefix(strs []string, prefixStr string) []string {\n    var result []string\n    for _, s := range strs {\n        if strings.HasPrefix(s, prefixStr) {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
            "func GetPositive(l []int) []int {\n    var positive []int\n    for _, num := range l {\n        if num > 0 {\n            positive = append(positive, num)\n        }\n    }\n    return positive\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))) + 1; i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Poly(xs []int, x float64) float64 {\n    res := 0.0\n    for i := 0; i < len(xs); i++ {\n        res += float64(xs[i]) * math.Pow(x, float64(i))\n    }\n    return res\n}\nfunc FindZero(xs []int) float64 {\n    x1, x2 := 1.0, -1.0\n    for Poly(xs, x1) * Poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    for math.Abs(x1 - x2) > 1e-10 {\n        mid := (x1 + x2) / 2\n        if Poly(xs, mid) == 0 {\n            return mid\n        } else if Poly(xs, mid) * Poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "func SortThird(l []int) []int {\n    sorted_third := make([]int, len(l))\n    for i := 0; i < len(l); i += 3 {\n        sorted_third[i] = l[i]\n    }\n    sort.Ints(sorted_third)\n    return [sorted_third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n}\n",
            "func ListUnique(l []int) []int {\n    return sort.Ints(l)\n}\n",
            "func MaxElement(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n    return max(l)\n}\n",
            "func FizzBuzz(n int) int {\n    cnt := 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n    return cnt\n}\n",
            "func SortEven(l []int) []int {\n    sorted_even := make([]int, len(l))\n    for i := 0; i < len(l); i += 2 {\n        sorted_even[i] = l[i]\n    }\n    sort.Ints(sorted_even)\n    return sorted_even\n}\n",
            "func EncodeCyclic(s string) string {\n    result := []string{}\n    for i := 0; i < len(s); i += 3 {\n        if i + 3 > len(s) {\n            result = append(result, s[i:])\n        } else {\n            result = append(result, s[i+1:i+3])\n            result = append(result, s[i:i+1])\n        }\n    }\n    return strings.Join(result, \"\")\n}\nfunc DecodeCyclic(s string) string {\n    return EncodeCyclic(EncodeCyclic(s))\n}\n",
            "func PrimeFib(n int) int {\n    f := []int{0, 1}\n    cnt := 0\n    for cnt < n {\n        f = []int{f[1], f[0] + f[1]}\n        if isPrime(f[1]) {\n            cnt += 1\n        }\n    }\n    return f[1]\n}\nfunc isPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))) + 1; i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func TriplesSumToZero(l []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func CarRaceCollision(n int) int {\n    return n * n\n}\n",
            "func IncrList(l []int) []int {\n    return []int{i + 1 for i in l}\n}\n",
            "func PairsSumToZero(l []int) bool {\n    seen := make(map[int]bool)\n    for _, num := range l {\n        if _, ok := seen[num]; ok {\n            return true\n        }\n        seen[num] = true\n    }\n    return false\n}\n",
            "func ChangeBase(x int, bas int) string {\n    if x == 0 {\n        return \"0\"\n    }\n    digits := []string{}\n    for x > 0 {\n        digits = append(digits, strconv.Itoa(x % bas))\n        x /= bas\n    }\n    return strings.Join(digits[::-1], \"\")\n}\n",
            "func TriangleArea(a int, h int) float64 {\n    return float64(a * h / 2)\n}\n",
            "func Fib4(n int) int {\n    fib := [4]int{0, 0, 2, 0}\n    for i := 4; i < n + 1; i++ {\n        fib[i % 4] = sum(fib)\n    }\n    return fib[n % 4]\n}\n",
            "func Median(l []float64) float64 {\n    sl := sort.Float64Slice(l)\n    sort.Sort(sl)\n    if len(l) % 2 != 0 {\n        return sl[len(l) / 2]\n    } else {\n        return (sl[len(l) / 2] + sl[len(l) / 2 - 1]) / 2\n    }\n}\n",
            "func IsPalindrome(txt string) bool {\n    return txt == txt[::-1]\n}\n",
            "func Modp(n int, p int) int {\n    ret := 1\n    for i := 0; i < n; i++ {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func EncodeShift(s string) string {\n    result := make([]byte, len(s))\n    for i, ch := range s {\n        result[i] = byte(((int(ch) - 97 + 5) % 26) + 97)\n    }\n    return string(result)\n}\nfunc DecodeShift(s string) string {\n    result := make([]byte, len(s))\n    for i, ch := range s {\n        result[i] = byte(((int(ch) - 97 + 21) % 26) + 97)\n    }\n    return string(result)\n}\n",
            "func RemoveVowels(txt string) string {\n    vowels := \"aeiouAEIOU\"\n    return strings.Join([]string{char for char in txt if char not in vowels}, \"\")\n}\n",
            "func BelowThreshold(l []int, t int) bool {\n    return all(x < t for x in l)\n}\n",
            "func Add(x int, y int) int {\n    return x + y\n}\n",
            "func SameChars(s0 string, s1 string) bool {\n    return set(s0) == set(s1)\n}\n",
            "func Fib(n int) int {\n    if n <= 1 {\n        return n\n    } else {\n        return Fib(n - 1) + Fib(n - 2)\n    }\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '<' {\n            depth += 1\n        } else if b == '>' {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Monotonic(l []int) bool {\n    diff := make([]int, len(l) - 1)\n    for i := 0; i < len(l) - 1; i++ {\n        diff[i] = l[i + 1] - l[i]\n    }\n    return all(diff, func(x int) bool { return x <= 0 }) || all(diff, func(x int) bool { return x >= 0 })\n}\nfunc all(l []int, f func(int) bool) bool {\n    for _, x := range l {\n        if !f(x) {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Common(l1 []int, l2 []int) []int {\n    return sort(list(set(l1) & set(l2)))\n}\n",
            "func LargestPrimeFactor(n int) int {\n    i := 2\n    for i * i <= n {\n        if n % i == 0 {\n            n /= i\n        } else {\n            i++\n        }\n    }\n    return n\n}\n",
            "func SumToN(n int) int {\n    return sum(range(n + 1))\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == \"(\" {\n            depth += 1\n        } else if b == \")\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Derivative(xs []int) []int {\n    return []int{xs[0] * 0, xs[1] * 1, xs[2] * 2, xs[3] * 3, xs[4] * 4}\n}\n",
            "func Fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    }\n    a, b, c := 0, 0, 1\n    for n > 2 {\n        a, b, c = b, c, a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "func VowelsCount(s string) int {\n    vowels := \"aeiou\"\n    cnt := 0\n    for i := 0; i < len(s); i++ {\n        if strings.Contains(vowels, strings.ToLower(string(s[i])) || (i == len(s) - 1 && strings.ToLower(string(s[i])) == \"y\") {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "func CircularShift(x int, shift int) string {\n    x_str := strconv.Itoa(x)\n    if shift > len(x_str) {\n        return reverse(x_str)\n    } else {\n        return x_str[len(x_str)-shift:] + x_str[:len(x_str)-shift]\n    }\n}\nfunc reverse(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n",
            "func DigitSum(s string) int {\n    var sum int\n    for _, c := range s {\n        if unicode.IsUpper(c) {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n",
            "func FruitDistribution(s string, n int) int {\n    words := strings.Split(s, \" \")\n    apples := strconv.Atoi(words[strings.Index(s, \"apples\") - 1])\n    oranges := strconv.Atoi(words[strings.Index(s, \"oranges\") - 1])\n    return n - apples - oranges\n}\n",
            "func Pluck(arr []int) []int {\n    evens := []int{}\n    for _, n := range arr {\n        if n % 2 == 0 {\n            evens = append(evens, n)\n        }\n    }\n    if len(evens) == 0 {\n        return []int{}\n    }\n    minEven := evens[0]\n    for _, n := range evens {\n        if n < minEven {\n            minEven = n\n        }\n    }\n    for i, n := range arr {\n        if n == minEven {\n            return []int{minEven, i}\n        }\n    }\n    return []int{}\n}\n",
            "func Search(lst []int) int {\n    freqs := make(map[int]int)\n    for _, n := range lst {\n        freqs[n] = freqs[n] + 1\n    }\n    goodVals := []int{}\n    for k, v := range freqs {\n        if v >= k {\n            goodVals = append(goodVals, k)\n        }\n    }\n    if len(goodVals) == 0 {\n        return -1\n    }\n    return goodVals[len(goodVals) - 1]\n}\n",
            "func StrangeSortList(lst []int) []int {\n    sl := make([]int, len(lst))\n    copy(sl, lst)\n    sort.Ints(sl)\n    result := make([]int, 0)\n    left, right := 0, len(sl) - 1\n    for left <= right {\n        result = append(result, sl[left])\n        left += 1\n        if left <= right {\n            result = append(result, sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "func TriangleArea(a int, b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n        s := (a + b + c) / 2.0\n        return math.Sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        return -1.0\n    }\n}\n",
            "func WillItFly(q []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n    is_palin := true\n    for i := 0; i < len(q); i++ {\n        if q[i] != q[len(q) - i - 1] {\n            is_palin = false\n            break\n        }\n    }\n    total := 0\n    for _, v := range q {\n        total += v\n    }\n    return is_palin && total <= w\n}\n",
            "func SmallestChange(arr []int) int {\n    ans := 0\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] != arr[len(arr) - i - 1] {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "func TotalMatch(lst1 []string, lst2 []string) []string {\n    cnt1 := 0\n    for _, s := range lst1 {\n        cnt1 += len(s)\n    }\n    cnt2 := 0\n    for _, s := range lst2 {\n        cnt2 += len(s)\n    }\n    if cnt1 <= cnt2 {\n        return lst1\n    }\n    return lst2\n}\n",
            "func IsMultiplyPrime(a int) bool {\n    cnt := 0\n    for i := 2; i <= a + 1; i++ {\n        if IsPrime(i) {\n            for a % i == 0 {\n                cnt++\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "func IsSimplePower(x int, n int) bool {\n    if n < 2 {\n        return x == n\n    }\n    tmp := 1\n    for tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "func IsCube(a int) bool {\n    a = int(math.Abs(float64(a)))\n    root := int(math.Round(math.Pow(float64(a), 1.0 / 3.0)))\n    return root * root * root == a\n}\n",
            "func HexKey(num string) int {\n    return len([x for x in num if x in \"2357BD\"])\n}\n",
            "func DecimalToBinary(dec int) string {\n    binary := strconv.FormatInt(int64(dec), 2)\n    return \"db\" + binary + \"db\"\n}\n",
            "func IsHappy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func NumericalLetterGrade(grades []float64) []string {\n    result := []string{}\n    for _, g := range grades {\n        if g == 4.0 {\n            result = append(result, \"A+\")\n        } else if g > 3.7 {\n            result = append(result, \"A\")\n        } else if g > 3.3 {\n            result = append(result, \"A-\")\n        } else if g > 3.0 {\n            result = append(result, \"B+\")\n        } else if g > 2.7 {\n            result = append(result, \"B\")\n        } else if g > 2.3 {\n            result = append(result, \"B-\")\n        } else if g > 2.0 {\n            result = append(result, \"C+\")\n        } else if g > 1.7 {\n            result = append(result, \"C\")\n        } else if g > 1.3 {\n            result = append(result, \"C-\")\n        } else if g > 1.0 {\n            result = append(result, \"D+\")\n        } else if g > 0.7 {\n            result = append(result, \"D\")\n        } else if g > 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n",
            "func PrimeLength(s string) bool {\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(length))) + 1; i++ {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func StartsOneEnds(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * int(math.Pow(10, float64(n-2)))\n}\n",
            "func Solve(n int) string {\n    digitsSum := 0\n    for _, d := range strconv.Itoa(n) {\n        digitsSum += int(d - '0')\n    }\n    return strconv.FormatInt(int64(digitsSum), 2)\n}\n",
            "func Add(lst []int) int {\n    var sum int\n    for i, x := range lst {\n        if i % 2 == 1 && x % 2 == 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n",
            "func AntiShuffle(s string) string {\n    words := []string{}\n    for _, word := range strings.Split(s, \" \") {\n        runes := []rune(word)\n        sort.Slice(runes, func(i, j int) bool {\n            return runes[i] < runes[j]\n        })\n        words = append(words, string(runes))\n    }\n    return strings.Join(words, \" \")\n}\n",
            "func GetRow(lst [][]int, x int) [][]int {\n    coords := [][]int{}\n    for i := 0; i < len(lst); i++ {\n        for j := 0; j < len(lst[i]); j++ {\n            if lst[i][j] == x {\n                coords = append(coords, []int{i, j})\n            }\n        }\n    }\n    sort.Slice(coords, func(i, j int) bool {\n        return coords[i][0] < coords[j][0] || (coords[i][0] == coords[j][0] && coords[i][1] > coords[j][1])\n    })\n    return coords\n}\n",
            "func SortArray(arr []int) []int {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    if (arr[0] + arr[len(arr)-1]) % 2 == 0 {\n        return sort.Reverse(arr)\n    } else {\n        return sort.Ints(arr)\n    }\n}\n",
            "func Encrypt(s string) string {\n    result := []string{}\n    for _, ch := range s {\n        shifted := int(ch) + 4\n        if shifted > int('z') {\n            shifted -= 26\n        }\n        result = append(result, string(shifted))\n    }\n    return strings.Join(result, \"\")\n}\n",
            "func NextSmallest(lst []int) *int {\n    sl := sort.Ints(lst)\n    if len(sl) < 2 {\n        return nil\n    }\n    return &sl[1]\n}\n",
            "func IsBored(s string) int {\n    sentences := regexp.MustCompile(`[.!?]\\s*`).Split(s, -1)\n    return len(sentences)\n}\n",
            "func AnyInt(x interface{}, y interface{}, z interface{}) bool {\n    if x, ok := x.(int); ok {\n        if y, ok := y.(int); ok {\n            if z, ok := z.(int); ok {\n                if x + y == z || x + z == y || y + z == x {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func Encode(message string) string {\n    vowels := \"aeiouAEIOU\"\n    result := []string{}\n    for _, ch := range message {\n        if unicode.IsLetter(ch) {\n            ch1 := unicode.ToUpper(ch)\n            if unicode.IsLower(ch) {\n                ch1 = unicode.ToLower(ch)\n            }\n            if strings.Contains(vowels, string(ch1)) {\n                ch1 = rune(int(ch1) + 2)\n            }\n            result = append(result, string(ch1))\n        } else {\n            result = append(result, string(ch))\n        }\n    }\n    return strings.Join(result, \"\")\n}\n",
            "func Skjkasdkd(lst []int) int {\n    primes := []int{}\n    for _, n := range lst {\n        if isPrime(n) {\n            primes = append(primes, n)\n        }\n    }\n    if len(primes) == 0 {\n        return 0\n    }\n    largest := strconv.Itoa(max(primes))\n    sum := 0\n    for _, digit := range largest {\n        sum += int(digit - '0')\n    }\n    return sum\n}\n",
            "func CheckDictCase(d map[string]string) bool {\n    if len(d) == 0 {\n        return false\n    }\n    for k := range d {\n        if !(unicode.IsLower(rune(k[0])) && !(unicode.IsUpper(rune(k[0]))) {\n            return false\n        }\n    }\n    return true\n}\n",
            "func CountUpTo(n int) []int {\n    primes := []int{}\n    for num := 2; num < n; num++ {\n        if all(num % p != 0 for p in primes) {\n            primes = append(primes, num)\n        }\n    }\n    return primes\n}\n",
            "func Multiply(a int, b int) int {\n    return (math.Abs(float64(a)) % 10) * (math.Abs(float64(b)) % 10)\n}\n",
            "func CountUpper(s string) int {\n    vowels := \"AEIOU\"\n    return len([c for i, c in enumerate(s) if i % 2 == 0 and c in vowels])\n}\n",
            "func ClosestInteger(value string) int {\n    num := float64(value)\n    if num >= 0 {\n        return int(num + 0.5)\n    } else {\n        return int(num - 0.5)\n    }\n}\n",
            "func MakeAPile(n int) []int {\n    return []int{n + 2 * i for i in range(n)}\n}\n",
            "func WordsString(s string) []string {\n    return []string{}\n}\n",
            "func ChooseNum(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    if x != y {\n        return y - 1\n    }\n    return -1\n}\n",
            "func RoundedAvg(n int, m int) *string {\n    if n > m {\n        return nil\n    }\n    r_avg := int((m + n) / 2.0 + 0.5)\n    return &strconv.FormatInt(int64(r_avg), 2)\n}\n",
            "func UniqueDigits(x []int) []int {\n    var result []int\n    for _, num := range x {\n        if all_digits_odd(strconv.Itoa(num)) {\n            result = append(result, num)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n",
            "func ByLength(arr []int) []string {\n    digitNames := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    sortedArr := make([]int, 0)\n    for _, x := range arr {\n        if 1 <= x && x <= 9 {\n            sortedArr = append(sortedArr, x)\n        }\n    }\n    sort.Ints(sortedArr)\n    reverse(sortedArr)\n    var result []string\n    for _, x := range sortedArr {\n        result = append(result, digitNames[x-1])\n    }\n    return result\n}\n",
            "func F(n int) []int {\n    nums := make([]int, n)\n    for i := 0; i < n; i++ {\n        nums[i] = i + 1\n    }\n    return nums\n}\n",
            "func EvenOddPalindrome(n int) []int {\n    cnt := make([]int, 2)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(strconv.Itoa(i)) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}\nfunc isPalindrome(txt string) bool {\n    return txt == reverse(txt)\n}\nfunc reverse(txt string) string {\n    return string([]rune(txt)[len(txt)-1:])\n}\n",
            "func CountNums(arr []int) int {\n    var n_str string\n    var d int\n    var sum int\n    var n int\n    var i int\n    var n_str_2 string\n    var n_str_3 string\n    var n_str_4 string\n    var n_str_5 string\n    var n_str_6 string\n    var n_str_7 string\n    var n_str_8 string\n    var n_str_9 string\n    var n_str_10 string\n    var n_str_11 string\n    var n_str_12 string\n    var n_str_13 string\n    var n_str_14 string\n    var n_str_15 string\n    var n_str_16 string\n    var n_str_17 string\n    var n_str_18 string\n    var n_str_19 string\n    var n_str_20 string\n    var n_str_21 string\n    var n_str_22 string\n    var n_str_23 string\n    var n_str_24 string\n    var n_str_25 string\n    var n_str_26 string\n    var n_str_27 string\n    var n_str_28 string\n    var n_str_29 string\n    var n_str_30 string\n    var n_str_31 string\n    var n_str_32 string\n    var n_str_33 string\n    var n_str_34 string\n    var n_str_35 string\n    var n_str_36 string\n    var n_str_37 string\n    var n_str_38 string\n    var n_str_39 string\n    var n_str_40 string\n    var n_str_41 string\n    var n_str_42 string\n    var n_str_43 string\n    var n_str_44 string\n    var n_str_45 string\n    var n_str_46 string\n    var n_str_47 string\n    var n_str_48 string\n    var n_str_49 string\n    var n_str_50 string\n    var n_str_51 string\n    var n_str_52 string\n    var n_str_53 string\n    var n_str_54 string\n    var n_str_55 string\n    var n_str_56 string\n    var n_str_57 string\n    var n_str_58 string\n    var n_str_59 string\n    var n_str_60 string\n    var n_str_61 string\n    var n_str_62 string\n    var n_str_63 string\n    var n_str_64 string\n    var n_str_65 string\n    var n_str_66 string\n    var n_str_67 string\n    var n_str_68 string\n    var n_str_69 string\n    var n_str_70 string\n    var n_str_71 string\n    var n_str_72 string\n    var n_str_73 string\n    var n_str_74 string\n    var n_str_75 string\n    var n_str_76 string\n    var n_str_77 string\n    var n_str_78 string\n    var n_str_79 string\n    var n_str_80 string\n    var n_str_81 string\n    var n_str_82 string\n    var n_str_83 string\n    var n_str_84 string\n    var n_str_85 string\n    var n_str_86 string\n    var n_str_87 string\n    var n_str_88 string\n    var n_str_89 string\n    var n_str_90 string\n    var n_str_91 string\n    var n_str_92 string\n    var n_str_93 string\n    var n_str_94 string\n    var n_str_95 string\n    var n_str_96 string\n    var n_str_97 string\n    var n_str_98 string\n    var n_str_99 string\n    var n_str_100 string\n    var n_str_101 string\n    var n_str_102 string\n    var n_str_103 string\n    var n_str_104 string\n    var n_str_105 string\n    var n_str_106 string\n    var n_str_107 string\n    var n_str_108 string\n    var n_str_109 string\n    var n_str_110 string\n    var n_str_111 string\n    var n_str_112 string\n    var n_str_113 string\n    var n_str_114 string\n    var n_str_115 string\n    var n_str_116 string\n    var n_str_117 string\n    var n_str_118 string\n    var n_str_119 string\n    var n_str_120 string\n    var n_str_121 string\n    var n_str_122 string\n    var n_str_123 string\n    var n_str_124 string\n    var n_str_125 string\n    var n_str_126 string\n    var n_str_127 string\n    var n_str_128 string\n    var n_str_129 string\n    var n_str_130 string\n    var n_str_131 string\n    var n_str_132 string\n    var n_str_133 string\n    var n_str_134 string\n    var n_str_135 string\n    var n_str_136 string\n    var n_str_137 string\n    var n_str_138 string\n    var n_str_139 string\n    var n_str_140 string\n    var n_str_141 string\n    var n_str_142 string\n    var n_str_143 string\n    var n_str_144 string\n    var n_str_145 string\n    var n_str_146 string\n    var n_str_147 string\n    var n_str_148 string\n    var n_str_149 string\n    var n_str_150 string\n    var n_str_151 string\n    var n_str_152 string\n    var n_str_153 string\n    var n_str_154 string\n    var n_str_155 string\n    var n_str_156 string\n    var n_str_157 string\n    var n_str_158 string\n    var n_str_159 string\n    var n_str_160 string\n    var n_str_161 string\n    var n_str_162 string\n    var n_str_163 string\n    var n_str_164 string\n    var n_str_165 string\n    var n_str_166 string\n    var n_str_167 string\n    var n_str_168 string\n    var n_str_169 string\n    var n_str_170 string\n    var n_str_171 string\n    var n_str_172 string\n    var n_str_173 string\n    var n_str_174 string\n    var n_str_175 string\n    var n_str_176 string\n    var n_str_177 string\n    var n_str_178 string\n    var n_str_179 string\n    var n_str_180 string\n    var n_str_181 string\n    var n_str_182 string\n    var n_str_183 string\n    var n_str_184 string\n    var n_str_185 string\n    var n_str_186 string\n    var n_str_187 string\n    var n_str_188 string\n    var n_str_189 string\n    var n_str_190 string\n    var n_str_191 string\n    var n_str_192 string\n    var n_str_193 string\n    var",
            "func MoveOneBall(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    sortedArr := sort.Ints(arr)\n    for i := 0; i < len(arr); i++ {\n        if arr[i:] == sortedArr[:len(arr)-i] && arr[:i] == sortedArr[len(arr)-i:] {\n            return true\n        }\n    }\n    return false\n}\n",
            "func CanExchange(lst1 []int, lst2 []int) string {\n    odd_cnt := len(func(num int) bool {\n        return num % 2 != 0\n    }(lst1))\n    even_cnt := len(func(num int) bool {\n        return num % 2 == 0\n    }(lst2))\n    if even_cnt >= odd_cnt {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
            "func Histogram(test string) map[string]int {\n    freq := make(map[string]int)\n    words := []string{}\n    for _, w := range strings.Split(test, \" \") {\n        if len(w) > 0 {\n            words = append(words, w)\n        }\n    }\n    for _, w := range words {\n        freq[w] = freq[w] + 1\n    }\n    result := make(map[string]int)\n    if len(freq) > 0 {\n        max_freq := 0\n        for _, v := range freq {\n            if v > max_freq {\n                max_freq = v\n            }\n        }\n        for k, v := range freq {\n            if v == max_freq {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "func ReverseDelete(s string, c string) []string {\n    s1 := \"\"\n    for _, ch := range s {\n        if !strings.Contains(c, string(ch)) {\n            s1 += string(ch)\n        }\n    }\n    return []string{s1, \"yes\" if is_palindrome(s1) else \"no\"}\n}\n",
            "func OddCount(lst []string) []string {\n    result := []string{}\n    for _, num := range lst {\n        n := 0\n        for _, d := range num {\n            if int(d) % 2 == 1 {\n                n++\n            }\n        }\n        rs := \"the number of odd elements in the string i of the input.\"\n        result = append(result, strings.Replace(rs, \"i\", strconv.Itoa(n), 1))\n    }\n    return result\n}\n",
            "func MinSubArraySum(nums []int) int {\n    minSum := 0\n    curSum := 0\n    for _, n := range nums {\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if minSum == 0 {\n        minSum = min(nums)\n    }\n    return minSum\n}\n",
            "func MaxFill(grid [][]int, capacity int) int {\n    return sum([]int{ceil(sum(arr) / capacity) for arr in grid})\n}\n",
            "func SortArray(arr []int) []int {\n    return sort_array(arr)\n}\n",
            "func SelectWords(s string, n int) []string {\n    consonants := \"bcdfghjklmnpqrstvwxyz\"\n    words := []string{}\n    for _, w := range strings.Split(s, \" \") {\n        if len(w) > 0 {\n            words = append(words, w)\n        }\n    }\n    result := []string{}\n    for _, w := range words {\n        if len([c for c in w if c.lower() in consonants]) == n {\n            result = append(result, w)\n        }\n    }\n    return result\n}\n",
            "func GetClosestVowel(word string) string {\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 2; i > 0; i-- {\n        if strings.Contains(vowels, string(word[i])) && !strings.Contains(vowels, string(word[i-1])) && !strings.Contains(vowels, string(word[i+1])) {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
            "func MatchParens(lst []string) string {\n    s1 := lst[0] + lst[1]\n    s2 := lst[1] + lst[0]\n    if check(s1) || check(s2) {\n        return \"Yes\"\n    }\n    return \"No\"\n}\nfunc check(s string) bool {\n    depth := 0\n    for _, ch := range s {\n        if ch == '(' {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Maximum(arr []int, k int) []int {\n    if k == 0 {\n        return []int{}\n    }\n    sort.Ints(arr)\n    return arr[len(arr)-k:]\n}\n",
            "func Solution(lst []int) int {\n    var sum int\n    for i, x := range lst {\n        if i % 2 == 0 && x % 2 != 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n",
            "func AddElements(arr []int, k int) int {\n    var sum int\n    for _, n := range arr[:k] {\n        if len(strconv.Itoa(n)) <= 2 {\n            sum += n\n        }\n    }\n    return sum\n}\n",
            "func GetOddCollatz(n int) []int {\n    collatz := []int{1}\n    for n != 1 {\n        if n % 2 != 0 {\n            collatz = append(collatz, n)\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    return collatz\n}\n",
            "func ValidDate(date string) bool {\n    if len(date) != 10 || date[2] != \"-\" || date[5] != \"-\" {\n        return false\n    }\n    m := int(date[:2])\n    d := int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31 {\n        return true\n    }\n    if m in [4, 6, 9, 11] && d >= 1 && d <= 30 {\n        return true\n    }\n    if m == 2 && d >= 1 && d <= 29 {\n        return true\n    }\n    return false\n}\n",
            "func SplitWords(txt string) []string {\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        return []string{strconv.Itoa(len([c for c in txt if c.islower() and ord(c) % 2 == 0]))}\n    }\n}\n",
            "func IsSorted(lst []int) bool {\n    if !all(lst[i-1] <= lst[i] for i in range(1, len(lst))) {\n        return false\n    }\n    freq := map[int]int{}\n    for i := range lst {\n        freq[i] = freq.get(i, 0) + 1\n    }\n    return max(freq.values(), default=0) <= 2\n}\n",
            "func Intersection(interval1 []int, interval2 []int) string {\n    if interval1[0] < interval2[0] {\n        interval1, interval2 = interval2, interval1\n    }\n    l := max(interval1[0], interval2[0])\n    r := min(interval1[1], interval2[1])\n    length := r - l\n    if length > 0 && isPrime(length) {\n        return \"YES\"\n    }\n    return \"NO\"\n}\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\nfunc isPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func ProdSigns(arr []int) *int {\n    if len(arr) == 0 {\n        return nil\n    }\n    if contains(arr, 0) {\n        return &[]int{0}[0]\n    }\n    sign := -1\n    if len(filter(arr, func(n int) bool {\n        return n < 0\n    })) % 2 == 1 {\n        sign = 1\n    }\n    return &[]int{sign * sum(map(arr, func(n int) int {\n        return abs(n)\n    }))}[0]\n}\n",
            "func MinPath(grid [][]int, k int) []int {\n    n := len(grid)\n    minVal := n * n + 1\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if grid[i][j] == 1 {\n                temp := []int{}\n                if i != 0 {\n                    temp = append(temp, grid[i - 1][j])\n                }\n                if j != 0 {\n                    temp = append(temp, grid[i][j - 1])\n                }\n                if i != n - 1 {\n                    temp = append(temp, grid[i + 1][j])\n                }\n                if j != n - 1 {\n                    temp = append(temp, grid[i][j + 1])\n                }\n                minVal = min(temp)\n            }\n        }\n    }\n    result := []int{}\n    for i := 0; i < k; i++ {\n        if i % 2 == 0 {\n            result = append(result, 1)\n        } else {\n            result = append(result, minVal)\n        }\n    }\n    return result\n}\n",
            "func Tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n    }\n    seq := []int{1, 3}\n    for i := 2; i <= n; i++ {\n        if i % 2 == 0 {\n            seq = append(seq, i / 2 + 1)\n        } else {\n            seq = append(seq, seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "func Digits(n int) int {\n    odds := []int{}\n    for _, d := range strconv.Itoa(n) {\n        if int(d) % 2 == 1 {\n            odds = append(odds, int(d))\n        }\n    }\n    if len(odds) > 0 {\n        return reduce(odds, 1, func(x, y int) int {\n            return x * y\n        })\n    }\n    return 0\n}\n",
            "func IsNested(s string) bool {\n    openIdx := []int{}\n    closeIdx := []int{}\n    for i, ch := range s {\n        if ch == '[' {\n            openIdx = append(openIdx, i)\n        } else if ch == ']' {\n            closeIdx = append(closeIdx, i)\n        }\n    }\n    closeIdx = reverse(closeIdx)\n    cnt := 0\n    i := 0\n    l := len(closeIdx)\n    for _, idx := range openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\nfunc reverse(s []int) []int {\n    for i, j := 0, len(s)-1; i < j; i, j = i+1, j-1 {\n        s[i], s[j] = s[j], s[i]\n    }\n    return s\n}\n",
            "func SumSquares(lst []float64) int {\n    return sum([]int{pow(ceil(n), 2) for n in lst})\n}\n",
            "func CheckIfLastCharIsALetter(txt string) bool {\n    if len(txt) == 0 {\n        return false\n    }\n    last := txt[strings.LastIndex(txt, \" \") + 1:]\n    return len(last) == 1 && last[0] >= 'a' && last[0] <= 'z'\n}\n",
            "func CanArrange(arr []int) int {\n    if len(arr) <= 1 {\n        return -1\n    }\n    idx := make([]int, 0)\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i - 1] {\n            idx = append(idx, i)\n        }\n    }\n    if len(idx) == 0 {\n        return -1\n    }\n    return idx[len(idx) - 1]\n}\n",
            "func LargestSmallestIntegers(lst []int) []*int {\n    neg := make([]int, 0)\n    pos := make([]int, 0)\n    for _, i := range lst {\n        if i < 0 {\n            neg = append(neg, i)\n        } else if i > 0 {\n            pos = append(pos, i)\n        }\n    }\n    max_neg := max(neg)\n    min_pos := min(pos)\n    return []*int{&max_neg, &min_pos}\n}\nfunc max(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    max := lst[0]\n    for _, i := range lst {\n        if i > max {\n            max = i\n        }\n    }\n    return max\n}\nfunc min(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    min := lst[0]\n    for _, i := range lst {\n        if i < min {\n            min = i\n        }\n    }\n    return min\n}\n",
            "func CompareOne(a interface{}, b interface{}) *float64 {\n    if a1, ok := a.(string); ok {\n        a1 = strings.Replace(a1, \",\", \".\", -1)\n        a1, _ = strconv.ParseFloat(a1, 64)\n    } else if a1, ok := a.(int); ok {\n        a1 = float64(a1)\n    } else if a1, ok := a.(float64); ok {\n        a1 = a1\n    } else {\n        panic(\"Type Error\")\n    }\n    if b1, ok := b.(string); ok {\n        b1 = strings.Replace(b1, \",\", \".\", -1)\n        b1, _ = strconv.ParseFloat(b1, 64)\n    } else if b1, ok := b.(int); ok {\n        b1 = float64(b1)\n    } else if b1, ok := b.(float64); ok {\n        b1 = b1\n    } else {\n        panic(\"Type Error\")\n    }\n    if a1 == b1 {\n        return nil\n    } else if a1 > b1 {\n        return &a1\n    } else {\n        return &b1\n    }\n}\n",
            "func IsEqualToSumEven(n int) bool {\n    return n % 2 == 0 && n >= 8\n}\n",
            "func SpecialFactorial(n int) int {\n    fact := 1\n    result := 1\n    for i := 1; i <= n; i++ {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "func FixSpaces(txt string) string {\n    return regexp.MustCompile(`\\s{3,}`).ReplaceAllString(txt, \"-\").Replace(\" \", \"_\")\n}\n",
            "func FileNameCheck(fileName string) string {\n    suf := []string{\"txt\", \"exe\", \"dll\"}\n    lst := strings.Split(fileName, \".\")\n    if len(lst) != 2 || !contains(lst[1], suf) || len(lst[0]) == 0 || !isalpha(lst[0][0]) || len(filter(lst[0], isdigit)) > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "func SumSquares(lst []int) int {\n    result := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 3 == 0 {\n            result += pow(lst[i], 2)\n        } else if i % 4 == 0 {\n            result += pow(lst[i], 3)\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "func WordsInSentence(sentence string) string {\n    words := strings.Split(sentence, \" \")\n    var result []string\n    for _, w := range words {\n        if isPrime(len(w)) {\n            result = append(result, w)\n        }\n    }\n    return strings.Join(result, \" \")\n}\nfunc isPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Simplify(x string, n string) bool {\n    xs := strings.Split(x, \"/\")\n    ns := strings.Split(n, \"/\")\n    num := int(xs[0]) * int(ns[0])\n    den := int(xs[1]) * int(ns[1])\n    return num % den == 0\n}\n",
            "func OrderByPoints(nums []int) []int {\n    return sorted(nums, key=digits_sum)\n}\n",
            "func SpecialFilter(nums []int) int {\n    odds := \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and str(n)[0] in odds])\n}\n",
            "func GetMaxTriples(n int) int {\n    c := [3]int{0, 0, 0}\n    for i := 1; i <= n; i++ {\n        a := i * i - i + 1\n        c[a % 3] += 1\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n}\n",
            "func Bf(planet1 string, planet2 string) []string {\n    names := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    if !(strings.Contains(names, planet1) || strings.Contains(names, planet2)) {\n        return []string{}\n    }\n    l := strings.Index(names, planet1)\n    r := strings.Index(names, planet2)\n    if l > r {\n        l, r = r, l\n    }\n    if l == r {\n        return []string{}\n    }\n    return names[l + 1 : r]\n}\n",
            "func SortedListSum(lst []string) []string {\n    result := []string{}\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        return len(result[i]) < len(result[j])\n    })\n    return result\n}\n",
            "func XOrY(n int, x int, y int) int {\n    if n < 2 {\n        return y\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n))) + 1; i++ {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func DoubleTheDifference(lst []float64) int {\n    var sum int\n    for _, n := range lst {\n        if n >= 0 && n % 2 == 1 {\n            sum += int(n * n)\n        }\n    }\n    return sum\n}\n",
            "func Compare(game []int, guess []int) []int {\n    return []int{abs(x - y) for x, y in zip(game, guess)}\n}\n",
            "func StrongestExtension(className string, extensions []string) string {\n    maxS := math.Inf(-1)\n    maxExt := \"\"\n    for _, ext := range extensions {\n        upper := len([]rune(ext))\n        lower := len([]rune(ext))\n        s := upper - lower\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", className, maxExt)\n}\n",
            "func CycpatternCheck(a string, b string) bool {\n    if len(a) < len(b) {\n        return false\n    }\n    for i := 0; i < len(b); i++ {\n        if strings.Contains(a, b[i:] + b[:i]) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func EvenOddCount(num int) []int {\n    ds := strconv.Itoa(abs(num))\n    even := len([d for d in ds if ord(d) % 2 == 0])\n    return [even, len(ds) - even]\n}\n",
            "func IntToMiniRoman(num int) string {\n    values := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    numerals := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    res := []string{}\n    for i := 0; i < len(values); i++ {\n        for num >= values[i] {\n            res = append(res, numerals[i])\n            num -= values[i]\n        }\n    }\n    return strings.Join(res, \"\")\n}\n",
            "func RightAngleTriangle(a int, b int, c int) bool {\n    s := []int{a, b, c}\n    sort.Ints(s)\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "func FindMax(words []string) string {\n    max_cnt := 0\n    max_w := \"\"\n    for _, w := range words {\n        cnt := len(set(w))\n        if cnt > max_cnt {\n            max_cnt = cnt\n            max_w = w\n        } else if cnt == max_cnt {\n            max_w = min(max_w, w)\n        }\n    }\n    return max_w\n}\n",
            "func Eat(num int, need int, remaining int) []int {\n    if need <= remaining {\n        return []int{num + need, remaining - need}\n    } else {\n        return []int{num + remaining, 0}\n    }\n}\n",
            "func DoAlgebra(operators []string, operands []int) int {\n    ops := operators.copy()\n    nums := operands.copy()\n    i := len(ops) - 1\n    for i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n        }\n        i -= 1\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "func Solve(s string) string {\n    if !(func(ch rune) bool {\n        return ch.isalpha()\n    }(rune(s[0]))) {\n        return string([]rune(s)[::-1])\n    }\n    result := []rune{}\n    for _, ch := range s {\n        if !(func(ch rune) bool {\n            return ch.isalpha()\n        }(ch)) {\n            result = append(result, ch)\n        } else if (func(ch rune) bool {\n            return ch.isupper()\n        }(ch)) {\n            result = append(result, ch.lower())\n        } else if (func(ch rune) bool {\n            return ch.islower()\n        }(ch)) {\n            result = append(result, ch.upper())\n        }\n    }\n    return string(result)\n}\n",
            "func StringToMd5(txt string) *string {\n    if len(txt) == 0 {\n        return nil\n    }\n    md5_hash := md5.New()\n    txt_bytes := []byte(txt)\n    md5_hash.Write(txt_bytes)\n    md5_encoded := md5_hash.Sum(nil)\n    return &md5_encoded\n}\n",
            "func GenerateIntegers(a int, b int) []int {\n    lower := max(2, min(a, b))\n    upper := min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n}\n"
        ],
        "java": [
            "class Global {\n    public static boolean hasCloseElements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<String> separateParenGroups(String parenString) {\n        List<String> groups = new ArrayList<>();\n        Stack<Character> stk = new Stack<>();\n        String currentGroup = \"\";\n        String parens = parenString.replace(\" \", \"\");\n        for (char ch : parens.toCharArray()) {\n            if (ch == '(') {\n                stk.push(ch);\n                currentGroup += ch;\n            } else if (ch == ')') {\n                stk.pop();\n                currentGroup += ch;\n                if (stk.isEmpty()) {\n                    groups.add(currentGroup);\n                    currentGroup = \"\";\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double truncateNumber(double num) {\n        return num - Math.floor(num);\n    }\n}\n",
            "class Global {\n    public static boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = sum(numbers) / len(numbers);\n        double deviation = sum(abs(x - mean) for x in numbers);\n        return deviation / len(numbers);\n    }\n}\n",
            "class Global {\n    public static List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i != 0) {\n                result.add(delimiter);\n            }\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseNestedParens(String parenString) {\n        List<Integer> result = new ArrayList<>();\n        String[] parenGroups = parenString.split(\" \");\n        for (String group : parenGroups) {\n            int maxDepth = 0;\n            int depth = 0;\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    depth += 1;\n                    maxDepth = Math.max(maxDepth, depth);\n                } else if (ch == ')') {\n                    depth -= 1;\n                }\n            }\n            result.add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> filterBySubstring(List<String> strs, String substring) {\n        return strs.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<Integer> sumProduct(List<Integer> numbers) {\n        int n_sum = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            n_sum += numbers.get(i);\n        }\n        int n_product = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            n_product *= numbers.get(i);\n        }\n        List<Integer> result = new ArrayList<Integer>();\n        result.add(n_sum);\n        result.add(n_product);\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> rollingMax(List<Integer> numbers) {\n        int max_so_far = Integer.MIN_VALUE;\n        List<Integer> result = new ArrayList<>();\n        for (int num : numbers) {\n            max_so_far = Math.max(max_so_far, num);\n            result.add(max_so_far);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String makePalindrome(String s) {\n        if (isPalindrome(s)) {\n            return s;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (isPalindrome(s.substring(i))) {\n                return s + new StringBuilder(s.substring(0, i)).reverse().toString();\n            }\n        }\n        return \"\";\n    }\n    public static boolean isPalindrome(String s) {\n        return s.equals(new StringBuilder(s).reverse().toString());\n    }\n}\n",
            "class Global {\n    public static String stringXor(String a, String b) {\n        return \"\".join([\"0\" if x == y else \"1\" for x, y in zip(a, b)])\n    }\n}\n",
            "class Global {\n    public static Optional<String> longest(List<String> strs) {\n        if (strs.size() == 0) {\n            return Optional.empty();\n        }\n        String longest_s = strs.get(0);\n        for (String s : strs) {\n            if (s.length() > longest_s.length()) {\n                longest_s = s;\n            }\n        }\n        return Optional.of(longest_s);\n    }\n}\n",
            "class Global {\n    public static int greatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}\n",
            "class Global {\n    public static List<String> allPrefixes(String s) {\n        List<String> prefixes = new ArrayList<String>();\n        for (int i = 0; i < s.length(); i++) {\n            prefixes.add(s.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static String stringSequence(int n) {\n        return String.join(\" \", IntStream.range(0, n + 1).mapToObj(Integer::toString).toArray(String[]::new));\n    }\n}\n",
            "class Global {\n    public static int countDistinctCharacters(String s) {\n        return s.toLowerCase().chars().distinct().count();\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseMusic(String musicString) {\n        Map<String, Integer> durations = new HashMap<>();\n        durations.put(\"o\", 4);\n        durations.put(\"o|\", 2);\n        durations.put(\".|\", 1);\n        String[] notes = musicString.split(\" \");\n        List<Integer> result = new ArrayList<>();\n        for (String note : notes) {\n            result.add(durations.get(note));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int howManyTimes(String s, String substring) {\n        int times = 0;\n        for (int i = 0; i < s.length() - substring.length() + 1; i++) {\n            if (s.substring(i, i + substring.length()).equals(substring)) {\n                times += 1;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static String sortNumbers(String numbers) {\n        HashMap<String, Integer> num_dict = new HashMap<String, Integer>();\n        num_dict.put(\"zero\", 0);\n        num_dict.put(\"one\", 1);\n        num_dict.put(\"two\", 2);\n        num_dict.put(\"three\", 3);\n        num_dict.put(\"four\", 4);\n        num_dict.put(\"five\", 5);\n        num_dict.put(\"six\", 6);\n        num_dict.put(\"seven\", 7);\n        num_dict.put(\"eight\", 8);\n        num_dict.put(\"nine\", 9);\n        String[] num_list = numbers.split(\" \");\n        Arrays.sort(num_list, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return num_dict.get(o1) - num_dict.get(o2);\n            }\n        });\n        return String.join(\" \", num_list);\n    }\n}\n",
            "class Global {\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> sorted_numbers = new ArrayList<Double>(numbers);\n        Collections.sort(sorted_numbers);\n        double min_diff = Double.POSITIVE_INFINITY;\n        List<Double> closest_pair = new ArrayList<Double>();\n        for (int i = 1; i < sorted_numbers.size(); i++) {\n            double diff = sorted_numbers.get(i) - sorted_numbers.get(i - 1);\n            if (diff < min_diff) {\n                min_diff = diff;\n                closest_pair = new ArrayList<Double>(Arrays.asList(sorted_numbers.get(i - 1), sorted_numbers.get(i)));\n            }\n        }\n        return closest_pair;\n    }\n}\n",
            "class Global {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        double min_num = Collections.min(numbers);\n        double max_num = Collections.max(numbers);\n        if (min_num == max_num) {\n            return Arrays.asList(new Double[numbers.size()]);\n        } else {\n            List<Double> result = new ArrayList<Double>();\n            for (double num : numbers) {\n                result.add((num - min_num) / (max_num - min_num));\n            }\n            return result;\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object x : values) {\n            if (x instanceof Integer) {\n                result.add((Integer) x);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int strLength(String s) {\n        return s.length();\n    }\n}\n",
            "class Global {\n    public static int largestDivisor(int n) {\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}\n",
            "class Global {\n    public static List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.add(divisor);\n                n /= divisor;\n            } else {\n                divisor += 1;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static List<Integer> removeDuplicates(List<Integer> numbers) {\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (Integer num : numbers) {\n            counts.put(num, counts.getOrDefault(num, 0) + 1);\n        }\n        List<Integer> res = new ArrayList<>();\n        for (Integer num : numbers) {\n            if (counts.get(num) == 1) {\n                res.add(num);\n            }\n        }\n        return res;\n    }\n}\n",
            "class Global {\n    public static String flipCase(String s) {\n        String flipped = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (!Character.isLetter(ch)) {\n                flipped += ch;\n            } else if (Character.isLowerCase(ch)) {\n                flipped += Character.toUpperCase(ch);\n            } else if (Character.isUpperCase(ch)) {\n                flipped += Character.toLowerCase(ch);\n            }\n        }\n        return flipped;\n    }\n}\n",
            "class Global {\n    public static String concatenate(List<String> strs) {\n        return String.join(\"\", strs);\n    }\n}\n",
            "class Global {\n    public static List<String> filterByPrefix(List<String> strs, String prefixStr) {\n        return strs.stream().filter(s -> s.startsWith(prefixStr)).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<Integer> getPositive(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int num : l) {\n            if (num > 0) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static double poly(List<Integer> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.size(); i++) {\n            res += xs.get(i) * Math.pow(x, i);\n        }\n        return res;\n    }\n    public static double findZero(List<Integer> xs) {\n        double x1 = 1.0, x2 = -1.0;\n        while (poly(xs, x1) * poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (poly(xs, mid) == 0) {\n                return mid;\n            } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortThird(List<Integer> l) {\n        List<Integer> sorted_third = sorted(l[::3]);\n        return [sorted_third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n    }\n}\n",
            "class Global {\n    public static List<Integer> listUnique(List<Integer> l) {\n        return l.stream().distinct().sorted().collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int maxElement(List<Integer> l) {\n        if (l.isEmpty()) {\n            return 0;\n        }\n        return Collections.max(l);\n    }\n}\n",
            "class Global {\n    public static int fizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += Integer.toString(i).split(\"7\").length - 1;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortEven(List<Integer> l) {\n        List<Integer> sorted_even = sorted(l[::2]);\n        return [sorted_even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n    }\n}\n",
            "class Global {\n    public static String encodeCyclic(String s) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i += 3) {\n            if (i + 3 > s.length()) {\n                result += s.substring(i);\n            } else {\n                result += s.substring(i + 1, i + 3);\n                result += s.substring(i, i + 1);\n            }\n        }\n        return result;\n    }\n    public static String decodeCyclic(String s) {\n        return encodeCyclic(encodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static int primeFib(int n) {\n        int[] f = {0, 1};\n        int cnt = 0;\n        while (cnt < n) {\n            f = new int[]{f[1], f[0] + f[1]};\n            if (isPrime(f[1])) {\n                cnt += 1;\n            }\n        }\n        return f[1];\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static int carRaceCollision(int n) {\n        return n * n;\n    }\n}\n",
            "class Global {\n    public static List<Integer> incrList(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i : l) {\n            result.add(i + 1);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String changeBase(int x, int bas) {\n        if (x == 0) {\n            return \"0\";\n        }\n        List<String> digits = new ArrayList<>();\n        while (x > 0) {\n            digits.add(String.valueOf(x % bas));\n            x /= bas;\n        }\n        return String.join(\"\", digits);\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int h) {\n        return a * h / 2;\n    }\n}\n",
            "class Global {\n    public static int fib4(int n) {\n        int[] fib = new int[]{0, 0, 2, 0};\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n        }\n        return fib[n % 4];\n    }\n}\n",
            "class Global {\n    public static double median(List<Double> l) {\n        List<Double> sl = new ArrayList<Double>(l);\n        Collections.sort(sl);\n        if (l.size() % 2 != 0) {\n            return sl.get(l.size() / 2);\n        } else {\n            return (sl.get(l.size() / 2) + sl.get(l.size() / 2 - 1)) / 2;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isPalindrome(String txt) {\n        return txt.equals(new StringBuilder(txt).reverse().toString());\n    }\n}\n",
            "class Global {\n    public static int modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "class Global {\n    public static String encodeShift(String s) {\n        String result = \"\";\n        for (char ch : s.toCharArray()) {\n            result += (char) (((ch - 97 + 5) % 26) + 97);\n        }\n        return result;\n    }\n    public static String decodeShift(String s) {\n        String result = \"\";\n        for (char ch : s.toCharArray()) {\n            result += (char) (((ch - 97 + 21) % 26) + 97);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String removeVowels(String txt) {\n        String vowels = \"aeiouAEIOU\";\n        String[] chars = txt.split(\"\");\n        String result = \"\";\n        for (String char : chars) {\n            if (!vowels.contains(char)) {\n                result += char;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean belowThreshold(List<Integer> l, int t) {\n        return l.stream().allMatch(x -> x < t);\n    }\n}\n",
            "class Global {\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static boolean sameChars(String s0, String s1) {\n        return new HashSet<Character>(Arrays.asList(s0.toCharArray())).equals(new HashSet<Character>(Arrays.asList(s1.toCharArray())));\n    }\n}\n",
            "class Global {\n    public static int fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth += 1;\n            } else if (b == '>') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static boolean monotonic(List<Integer> l) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < l.size() - 1; i++) {\n            diff.add(l.get(i + 1) - l.get(i));\n        }\n        boolean all_le = true;\n        for (int i = 0; i < diff.size(); i++) {\n            if (diff.get(i) > 0) {\n                all_le = false;\n                break;\n            }\n        }\n        if (all_le) {\n            return true;\n        }\n        boolean all_ge = true;\n        for (int i = 0; i < diff.size(); i++) {\n            if (diff.get(i) < 0) {\n                all_ge = false;\n                break;\n            }\n        }\n        return all_ge;\n    }\n}\n",
            "class Global {\n    public static List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        return l1.stream().filter(l2::contains).sorted().collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i += 1;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int sumToN(int n) {\n        return sum(range(n + 1));\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth += 1;\n            } else if (b == ')') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> derivative(List<Integer> xs) {\n        return IntStream.range(1, xs.size()).mapToObj(i -> xs.get(i) * i).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n        int a = 0;\n        int b = 0;\n        int c = 1;\n        while (n > 2) {\n            a = b;\n            b = c;\n            c = a + b + c;\n            n -= 1;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int vowelsCount(String s) {\n        String vowels = \"aeiou\";\n        int cnt = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'y' && i == s.length() - 1 || vowels.indexOf(s.charAt(i)) != -1) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static String circularShift(int x, int shift) {\n        String x_str = String.valueOf(x);\n        if (shift > x_str.length()) {\n            return new StringBuilder(x_str).reverse().toString();\n        } else {\n            return x_str.substring(x_str.length() - shift) + x_str.substring(0, x_str.length() - shift);\n        }\n    }\n}\n",
            "class Global {\n    public static int digitSum(String s) {\n        return s.chars().filter(Character::isUpperCase).sum();\n    }\n}\n",
            "class Global {\n    public static int fruitDistribution(String s, int n) {\n        String[] words = s.split(\" \");\n        int apples = Integer.parseInt(words[words.indexOf(\"apples\") - 1]);\n        int oranges = Integer.parseInt(words[words.indexOf(\"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n}\n",
            "class Global {\n    public static List<Integer> pluck(List<Integer> arr) {\n        List<Integer> evens = new ArrayList<>();\n        for (int n : arr) {\n            if (n % 2 == 0) {\n                evens.add(n);\n            }\n        }\n        if (evens.size() == 0) {\n            return new ArrayList<>();\n        }\n        int min_even = Collections.min(evens);\n        return Arrays.asList(min_even, arr.indexOf(min_even));\n    }\n}\n",
            "class Global {\n    public static int search(List<Integer> lst) {\n        Map<Integer, Integer> freqs = new HashMap<>();\n        for (int n : lst) {\n            freqs.put(n, freqs.getOrDefault(n, 0) + 1);\n        }\n        List<Integer> goodVals = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : freqs.entrySet()) {\n            if (entry.getValue() >= entry.getKey()) {\n                goodVals.add(entry.getKey());\n            }\n        }\n        return Collections.max(goodVals, Integer::compareTo);\n    }\n}\n",
            "class Global {\n    public static List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> sl = new ArrayList<Integer>(lst);\n        Collections.sort(sl);\n        List<Integer> result = new ArrayList<Integer>();\n        int left = 0;\n        int right = sl.size() - 1;\n        while (left <= right) {\n            result.add(sl.get(left));\n            left += 1;\n            if (left <= right) {\n                result.add(sl.get(right));\n                right -= 1;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        boolean is_palin = true;\n        for (int i = 0; i < q.size(); i++) {\n            if (q.get(i) != q.get(q.size() - i - 1)) {\n                is_palin = false;\n                break;\n            }\n        }\n        int total = 0;\n        for (int i = 0; i < q.size(); i++) {\n            total += q.get(i);\n        }\n        return is_palin && total <= w;\n    }\n}\n",
            "class Global {\n    public static int smallestChange(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (arr.get(i) != arr.get(arr.size() - i - 1)) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int cnt1 = 0;\n        for (String s : lst1) {\n            cnt1 += s.length();\n        }\n        int cnt2 = 0;\n        for (String s : lst2) {\n            cnt2 += s.length();\n        }\n        return cnt1 <= cnt2 ? lst1 : lst2;\n    }\n}\n",
            "class Global {\n    public static boolean isMultiplyPrime(int a) {\n        if (a < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(a) + 1; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean isSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "class Global {\n    public static boolean isCube(int a) {\n        a = Math.abs(a);\n        double root = Math.round(Math.pow(a, 1.0 / 3.0));\n        return root * root * root == a;\n    }\n}\n",
            "class Global {\n    public static int hexKey(String num) {\n        return num.split(\"\").filter(x -> x.matches(\"2357BD\")).length;\n    }\n}\n",
            "class Global {\n    public static String decimalToBinary(int dec) {\n        String binary = Integer.toBinaryString(dec);\n        return \"db\" + binary + \"db\";\n    }\n}\n",
            "class Global {\n    public static boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double g : grades) {\n            if (g == 4.0) {\n                result.add(\"A+\");\n            } else if (g > 3.7) {\n                result.add(\"A\");\n            } else if (g > 3.3) {\n                result.add(\"A-\");\n            } else if (g > 3.0) {\n                result.add(\"B+\");\n            } else if (g > 2.7) {\n                result.add(\"B\");\n            } else if (g > 2.3) {\n                result.add(\"B-\");\n            } else if (g > 2.0) {\n                result.add(\"C+\");\n            } else if (g > 1.7) {\n                result.add(\"C\");\n            } else if (g > 1.3) {\n                result.add(\"C-\");\n            } else if (g > 1.0) {\n                result.add(\"D+\");\n            } else if (g > 0.7) {\n                result.add(\"D\");\n            } else if (g > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean primeLength(String s) {\n        int length = s.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(length)) + 1; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int startsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 2 * 9 * (10 ** (n - 2));\n    }\n}\n",
            "class Global {\n    public static String solve(int n) {\n        int digits_sum = 0;\n        for (int d : String.valueOf(n).split(\"\")) {\n            digits_sum += Integer.parseInt(d);\n        }\n        return Integer.toBinaryString(digits_sum);\n    }\n}\n",
            "class Global {\n    public static int add(List<Integer> lst) {\n        return lst.stream().filter(x -> x % 2 == 0).mapToInt(x -> x).sum();\n    }\n}\n",
            "class Global {\n    public static String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            char[] word = words[i].toCharArray();\n            Arrays.sort(word);\n            words[i] = new String(word);\n        }\n        return String.join(\" \", words);\n    }\n}\n",
            "class Global {\n    public static List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    coords.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        coords.sort(Comparator.comparingInt(a -> a.get(0)).thenComparingInt(a -> -a.get(1)));\n        return coords;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        if ((arr.get(0) + arr.get(arr.size() - 1)) % 2 == 0) {\n            Collections.sort(arr, Collections.reverseOrder());\n        } else {\n            Collections.sort(arr);\n        }\n        return arr;\n    }\n}\n",
            "class Global {\n    public static String encrypt(String s) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            int shifted = (int) ch + 4;\n            if (shifted > (int) 'z') {\n                shifted -= 26;\n            }\n            result += (char) shifted;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> nextSmallest(List<Integer> lst) {\n        Set<Integer> sl = new HashSet<Integer>(lst);\n        if (sl.size() < 2) {\n            return Optional.empty();\n        }\n        List<Integer> sorted = new ArrayList<Integer>(sl);\n        Collections.sort(sorted);\n        return Optional.of(sorted.get(1));\n    }\n}\n",
            "class Global {\n    public static int isBored(String s) {\n        String[] sentences = s.split(\"[.!?]\\\\s*\");\n        int sum = 0;\n        for (String sentence : sentences) {\n            if (sentence.length() >= 2 && sentence.substring(0, 2).equals(\"I \")) {\n                sum += 1;\n            }\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            if ((int) x + (int) y == (int) z || (int) x + (int) z == (int) y || (int) y + (int) z == (int) x) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        String[] result = new String[0];\n        for (char ch : message.toCharArray()) {\n            if (Character.isAlphabetic(ch)) {\n                char ch1 = Character.toUpperCase(ch)\n                        if (Character.isLowerCase(ch)) {\n                            ch1 = Character.toLowerCase(ch);\n                        }\n                if (vowels.contains(ch1)) {\n                    ch1 = (char) (ch1 + 2);\n                }\n                result = Arrays.copyOf(result, result.length + 1);\n                result[result.length - 1] = String.valueOf(ch1);\n            } else {\n                result = Arrays.copyOf(result, result.length + 1);\n                result[result.length - 1] = String.valueOf(ch);\n            }\n        }\n        return String.join(\"\", result);\n    }\n}\n",
            "class Global {\n    public static int skjkasdkd(List<Integer> lst) {\n        List<Integer> primes = new ArrayList<>();\n        for (int n : lst) {\n            if (n < 2) {\n                continue;\n            }\n            boolean isPrime = true;\n            for (int i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n                if (n % i == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(n);\n            }\n        }\n        if (primes.size() == 0) {\n            return 0;\n        }\n        String largest = String.valueOf(Collections.max(primes));\n        int sum = 0;\n        for (char digit : largest.toCharArray()) {\n            sum += Character.getNumericValue(digit);\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static boolean checkDictCase(Map<String, String> d) {\n        if (d.size() == 0) {\n            return false;\n        }\n        boolean allLower = true;\n        boolean allUpper = true;\n        for (String key : d.keySet()) {\n            for (char c : key.toCharArray()) {\n                if (!Character.isLowerCase(c)) {\n                    allLower = false;\n                }\n                if (!Character.isUpperCase(c)) {\n                    allUpper = false;\n                }\n            }\n        }\n        return allLower || allUpper;\n    }\n}\n",
            "class Global {\n    public static List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int num = 2; num < n; num++) {\n            boolean isPrime = true;\n            for (int p : primes) {\n                if (num % p == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(num);\n            }\n        }\n        return primes;\n    }\n}\n",
            "class Global {\n    public static int multiply(int a, int b) {\n        return Math.abs(a) % 10 * Math.abs(b) % 10;\n    }\n}\n",
            "class Global {\n    public static int countUpper(String s) {\n        String vowels = \"AEIOU\";\n        return s.length() - s.replaceAll(\"[^AEIOU]\", \"\").length();\n    }\n}\n",
            "class Global {\n    public static int closestInteger(String value) {\n        double num = Double.parseDouble(value);\n        if (num >= 0) {\n            return (int) (num + 0.5);\n        } else {\n            return (int) (num - 0.5);\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> makeAPile(int n) {\n        return Arrays.asList(IntStream.range(0, n).map(i -> n + 2 * i).toArray());\n    }\n}\n",
            "class Global {\n    public static List<String> wordsString(String s) {\n        return Arrays.asList(s.split(\"[, ]\")).stream().filter(w -> w.length() > 0).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        return y - 1;\n    }\n}\n",
            "class Global {\n    public static Optional<String> roundedAvg(int n, int m) {\n        if (n > m) {\n            return null;\n        }\n        int r_avg = (int) ((m + n) / 2.0 + 0.5);\n        return Optional.of(Integer.toBinaryString(r_avg).substring(2));\n    }\n}\n",
            "class Global {\n    public static List<Integer> uniqueDigits(List<Integer> x) {\n        return x.stream()\n                .filter(num -> {\n                    String s = String.valueOf(num);\n                    return s.chars().allMatch(digit -> digit % 2 != 0);\n                })\n                .sorted()\n                .collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<String> byLength(List<Integer> arr) {\n        String[] digitNames = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        List<Integer> sortedArr = new ArrayList<Integer>(arr);\n        sortedArr.sort(Comparator.reverseOrder());\n        List<String> result = new ArrayList<String>();\n        for (int x : sortedArr) {\n            if (1 <= x && x <= 9) {\n                result.add(digitNames[x - 1]);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> f(int n) {\n        List<Integer> nums = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            nums.add(i);\n        }\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n            if (i % 2 != 0) {\n                int sum = 0;\n                for (int j = 0; j < i; j++) {\n                    sum += nums.get(j);\n                }\n                result.add(sum);\n            } else {\n                int product = 1;\n                for (int j = 0; j < i; j++) {\n                    product *= nums.get(j);\n                }\n                result.add(product);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> evenOddPalindrome(int n) {\n        List<Integer> cnt = new ArrayList<Integer>();\n        cnt.add(0);\n        cnt.add(0);\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(String.valueOf(i))) {\n                cnt.set(i % 2, cnt.get(i % 2) + 1);\n            }\n        }\n        return cnt;\n    }\n    public static boolean isPalindrome(String txt) {\n        return txt.equals(new StringBuilder(txt).reverse().toString());\n    }\n}\n",
            "class Global {\n    public static int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int n : arr) {\n            if (digitsSum(n) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static int digitsSum(int n) {\n        String nStr = String.valueOf(n);\n        if (n >= 0) {\n            int sum = 0;\n            for (char d : nStr.toCharArray()) {\n                sum += Character.getNumericValue(d);\n            }\n            return sum;\n        } else {\n            return Character.getNumericValue(nStr.charAt(0)) * 2 + digitsSum(Math.abs(n));\n        }\n    }\n}\n",
            "class Global {\n    public static boolean moveOneBall(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        List<Integer> sortedArr = arr.stream().sorted().collect(Collectors.toList());\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.subList(i, arr.size()).equals(sortedArr.subList(0, arr.size() - i)) && arr.subList(0, i).equals(sortedArr.subList(arr.size() - i, sortedArr.size())) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String canExchange(List<Integer> lst1, List<Integer> lst2) {\n        int odd_cnt = lst1.stream().filter(num -> num % 2 != 0).count();\n        int even_cnt = lst2.stream().filter(num -> num % 2 == 0).count();\n        return even_cnt >= odd_cnt ? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static Map<String, Integer> histogram(String test) {\n        Map<String, Integer> freq = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String w : words) {\n            if (w.length() > 0) {\n                freq.put(w, freq.getOrDefault(w, 0) + 1);\n            }\n        }\n        Map<String, Integer> result = new HashMap<>();\n        if (freq.size() > 0) {\n            int maxFreq = Collections.max(freq.values());\n            for (Map.Entry<String, Integer> entry : freq.entrySet()) {\n                if (entry.getValue() == maxFreq) {\n                    result.put(entry.getKey(), entry.getValue());\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> reverseDelete(String s, String c) {\n        String s1 = \"\";\n        for (char ch : s.toCharArray()) {\n            if (!c.contains(ch)) {\n                s1 += ch;\n            }\n        }\n        List<String> result = new ArrayList<>();\n        result.add(s1);\n        result.add(isPalindrome(s1) ? \"yes\" : \"no\");\n        return result;\n    }\n    public static boolean isPalindrome(String s) {\n        return s.equals(new StringBuilder(s).reverse().toString());\n    }\n}\n",
            "class Global {\n    public static List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String num : lst) {\n            int n = 0;\n            for (char d : num.toCharArray()) {\n                if (d % 2 == 1) {\n                    n++;\n                }\n            }\n            String rs = \"the number of odd elements in the string i of the input.\";\n            result.add(rs.replace(\"i\", String.valueOf(n)));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int minSubArraySum(List<Integer> nums) {\n        int min_sum = 0;\n        int cur_sum = 0;\n        for (int n : nums) {\n            cur_sum = Math.min(cur_sum + n, 0);\n            min_sum = Math.min(cur_sum, min_sum);\n        }\n        if (min_sum == 0) {\n            min_sum = Collections.min(nums);\n        }\n        return min_sum;\n    }\n}\n",
            "class Global {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        return grid.stream().mapToInt(arr -> (int) Math.ceil(arr.stream().mapToInt(Integer::intValue).sum() / capacity)).sum();\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        return arr.stream().sorted(Comparator.comparingInt(x -> Integer.bitCount(x)).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<String> selectWords(String s, int n) {\n        String consonants = \"bcdfghjklmnpqrstvwxyz\";\n        String[] words = s.split(\" \");\n        List<String> result = new ArrayList<String>();\n        for (String w : words) {\n            if (w.length() > 0) {\n                int count = 0;\n                for (char c : w.toCharArray()) {\n                    if (consonants.contains(Character.toString(c).toLowerCase())) {\n                        count++;\n                    }\n                }\n                if (count == n) {\n                    result.add(w);\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.contains(word.substring(i, i + 1)) && !vowels.contains(word.substring(i - 1, i)) && !vowels.contains(word.substring(i + 1, i + 2))) {\n                return word.substring(i, i + 1);\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static String matchParens(List<String> lst) {\n        String s1 = lst.get(0) + lst.get(1);\n        String s2 = lst.get(1) + lst.get(0);\n        return \"Yes\" if check(s1) or check(s2) else \"No\";\n    }\n}\n",
            "class Global {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return new ArrayList<Integer>();\n        }\n        Collections.sort(arr);\n        return arr.subList(arr.size() - k, arr.size());\n    }\n}\n",
            "class Global {\n    public static int solution(List<Integer> lst) {\n        return lst.stream().filter(x -> lst.indexOf(x) % 2 == 0 && x % 2 != 0).mapToInt(x -> x).sum();\n    }\n}\n",
            "class Global {\n    public static int addElements(List<Integer> arr, int k) {\n        return arr.stream().limit(k).filter(n -> String.valueOf(n).length() <= 2).mapToInt(n -> n).sum();\n    }\n}\n",
            "class Global {\n    public static List<Integer> getOddCollatz(int n) {\n        List<Integer> collatz = new ArrayList<Integer>();\n        collatz.add(1);\n        while (n != 1) {\n            if (n % 2 != 0) {\n                collatz.add(n);\n                n = 3 * n + 1;\n            } else {\n                n = n / 2;\n            }\n        }\n        return collatz;\n    }\n}\n",
            "class Global {\n    public static boolean validDate(String date) {\n        if (!date.length() == 10 || !date.charAt(2) == \"-\" || !date.charAt(5) == \"-\") {\n            return false;\n        }\n        int m = Integer.parseInt(date.substring(0, 2));\n        int d = Integer.parseInt(date.substring(3, 5));\n        if (m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31) {\n            return true;\n        }\n        if (m in [4, 6, 9, 11] && d >= 1 && d <= 30) {\n            return true;\n        }\n        if (m == 2 && d >= 1 && d <= 29) {\n            return true;\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<String> splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            return Arrays.asList(String.valueOf(txt.chars().filter(c -> Character.isLowerCase(c) && c % 2 == 0).count()));\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isSorted(List<Integer> lst) {\n        if (!lst.stream().skip(1).allMatch(i -> lst.get(lst.indexOf(i) - 1) <= i)) {\n            return false;\n        }\n        Map<Integer, Integer> freq = new HashMap<>();\n        for (int i : lst) {\n            freq.put(i, freq.getOrDefault(i, 0) + 1);\n        }\n        return Collections.max(freq.values(), Comparator.comparingInt(i -> i)).intValue() <= 2;\n    }\n}\n",
            "class Global {\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        return length > 0 && is_prime(length) ? \"YES\" : \"NO\";\n    }\n    public static boolean is_prime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int sign = arr.stream().filter(n -> n < 0).count() % 2 == 1 ? -1 : 1;\n        return Optional.of(sign * arr.stream().map(Math::abs).reduce(0, Integer::sum));\n    }\n}\n",
            "class Global {\n    public static List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int min_val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    min_val = Math.min(temp);\n                }\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            result.add(i % 2 == 0 ? 1 : min_val);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> tri(int n) {\n        if (n == 0) {\n            return Arrays.asList(1);\n        }\n        List<Integer> seq = Arrays.asList(1, 3);\n        for (int i = 2; i <= n + 1; i++) {\n            if (i % 2 == 0) {\n                seq.add(i / 2 + 1);\n            } else {\n                seq.add(seq.get(i - 1) + seq.get(i - 2) + (i + 3) / 2);\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int digits(int n) {\n        List<Integer> odds = new ArrayList<>();\n        for (String d : String.valueOf(n).split(\"\")) {\n            if (Integer.parseInt(d) % 2 == 1) {\n                odds.add(Integer.parseInt(d));\n            }\n        }\n        if (odds.size() > 0) {\n            return odds.stream().reduce(1, (x, y) -> x * y);\n        } else {\n            return 0;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isNested(String s) {\n        List<Integer> openIdx = new ArrayList<>();\n        List<Integer> closeIdx = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (ch == '[') {\n                openIdx.add(i);\n            } else if (ch == ']') {\n                closeIdx.add(i);\n            }\n        }\n        Collections.reverse(closeIdx);\n        int cnt = 0;\n        int i = 0;\n        int l = closeIdx.size();\n        for (int idx : openIdx) {\n            if (i < l && idx < closeIdx.get(i)) {\n                cnt += 1;\n                i += 1;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Double> lst) {\n        return lst.stream().map(n -> Math.pow(Math.ceil(n), 2)).reduce(0, (a, b) -> a + b);\n    }\n}\n",
            "class Global {\n    public static boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        String last = txt.substring(txt.lastIndexOf(' ') + 1);\n        return last.length() == 1 && last.charAt(0).isLetter();\n    }\n}\n",
            "class Global {\n    public static int canArrange(List<Integer> arr) {\n        if (arr.size() <= 1) {\n            return -1;\n        }\n        List<Integer> idx = new ArrayList<>();\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                idx.add(i);\n            }\n        }\n        return idx.stream().max(Integer::compareTo).orElse(-1);\n    }\n}\n",
            "class Global {\n    public static List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst) {\n        List<Integer> neg = new ArrayList<>();\n        List<Integer> pos = new ArrayList<>();\n        for (int i : lst) {\n            if (i < 0) {\n                neg.add(i);\n            } else if (i > 0) {\n                pos.add(i);\n            }\n        }\n        Integer max_neg = neg.size() > 0 ? Collections.max(neg) : null;\n        Integer min_pos = pos.size() > 0 ? Collections.min(pos) : null;\n        return Arrays.asList(max_neg, min_pos);\n    }\n}\n",
            "class Global {\n    public static Optional<Double> compareOne(Object a, Object b) {\n        if (a instanceof String) {\n            return Optional.of(Double.parseDouble(((String) a).replace(',', '.')));\n        } else if (a instanceof Integer) {\n            return Optional.of(((Integer) a).doubleValue());\n        } else if (a instanceof Double) {\n            return Optional.of((Double) a);\n        } else {\n            throw new RuntimeException(\"Type Error\");\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int specialFactorial(int n) {\n        int fact = 1;\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String fixSpaces(String txt) {\n        return txt.replaceAll(\"\\\\s{3,}\", \"-\").replace(\" \", \"_\");\n    }\n}\n",
            "class Global {\n    public static String fileNameCheck(String fileName) {\n        String[] suf = {\"txt\", \"exe\", \"dll\"};\n        String[] lst = fileName.split(\".\");\n        if (lst.length != 2 || !(lst[1] in suf) || lst[0].length() == 0 || !lst[0][0].isalpha() || len([x for x in lst[0] if x.isdigit()]) > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result += Math.pow(lst.get(i), 2);\n            } else if (i % 4 == 0) {\n                result += Math.pow(lst.get(i), 3);\n            } else {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String wordsInSentence(String sentence) {\n        if (sentence.length() < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(sentence.length())) + 1; i++) {\n            if (sentence.length() % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean simplify(String x, String n) {\n        String[] xs = x.split(\"/\");\n        String[] ns = n.split(\"/\");\n        int num = Integer.parseInt(xs[0]) * Integer.parseInt(ns[0]);\n        int den = Integer.parseInt(xs[1]) * Integer.parseInt(ns[1]);\n        return num % den == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> orderByPoints(List<Integer> nums) {\n        return nums.stream().sorted(Comparator.comparingInt(n -> {\n            String nStr = String.valueOf(n);\n            if (n >= 0) {\n                return nStr.chars().map(Character::getNumericValue).sum();\n            } else {\n                return Integer.parseInt(nStr.substring(0, 2)) * 2 + orderByPoints(Arrays.asList(Math.abs(n)));\n            }\n        })\n        .collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int specialFilter(List<Integer> nums) {\n        String odds = \"13579\";\n        return nums.stream().filter(n -> n > 10 && n % 2 == 1 && odds.contains(String.valueOf(n).charAt(0))\n                .collect(Collectors.toList()).size();\n    }\n}\n",
            "class Global {\n    public static int getMaxTriples(int n) {\n        int[] c = new int[3];\n        for (int i = 1; i <= n; i++) {\n            int a = i * i - i + 1;\n            c[a % 3] += 1;\n        }\n        return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n    }\n}\n",
            "class Global {\n    public static List<String> bf(String planet1, String planet2) {\n        String[] names = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        if (!Arrays.asList(names).contains(planet1) || !Arrays.asList(names).contains(planet2)) {\n            return new ArrayList<String>();\n        }\n        int l = Arrays.asList(names).indexOf(planet1);\n        int r = Arrays.asList(names).indexOf(planet2);\n        if (l > r) {\n            int temp = l;\n            l = r;\n            r = temp;\n        }\n        if (l == r) {\n            return new ArrayList<String>();\n        }\n        return Arrays.asList(names).subList(l + 1, r);\n    }\n}\n",
            "class Global {\n    public static List<String> sortedListSum(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                if (o1.length() == o2.length()) {\n                    return o1.compareTo(o2);\n                } else {\n                    return o1.length() - o2.length();\n                }\n            }\n        });\n        return result;\n    }\n}\n",
            "class Global {\n    public static int xOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int doubleTheDifference(List<Double> lst) {\n        return lst.stream().filter(n -> n >= 0 && n % 2 == 1).map(n -> n * n).reduce(0, (a, b) -> a + b);\n    }\n}\n",
            "class Global {\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        return game.stream().map(x -> Math.abs(x - guess.get(game.indexOf(x)))).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static String strongestExtension(String className, List<String> extensions) {\n        double max_s = Double.NEGATIVE_INFINITY;\n        String max_ext = \"\";\n        for (String ext : extensions) {\n            int upper = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    upper++;\n                }\n            }\n            int lower = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    lower++;\n                }\n            }\n            double s = upper - lower;\n            if (s > max_s) {\n                max_s = s;\n                max_ext = ext;\n            }\n        }\n        return className + \".\" + max_ext;\n    }\n}\n",
            "class Global {\n    public static boolean cycpatternCheck(String a, String b) {\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if (b.substring(i) + b.substring(0, i) in a) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<Integer> evenOddCount(int num) {\n        String ds = String.valueOf(Math.abs(num));\n        int even = ds.chars().filter(d -> d % 2 == 0).count();\n        return Arrays.asList(even, ds.length() - even);\n    }\n}\n",
            "class Global {\n    public static String intToMiniRoman(int num) {\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        String[] res = new String[0];\n        for (int i = 0; i < values.length; i++) {\n            while (num >= values[i]) {\n                res = Arrays.copyOf(res, res.length + 1);\n                res[res.length - 1] = numerals[i];\n                num -= values[i];\n            }\n        }\n        return String.join(\"\", res);\n    }\n}\n",
            "class Global {\n    public static boolean rightAngleTriangle(int a, int b, int c) {\n        int[] s = new int[]{a, b, c};\n        Arrays.sort(s);\n        return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n    }\n}\n",
            "class Global {\n    public static String findMax(List<String> words) {\n        int max_cnt = 0;\n        String max_w = \"\";\n        for (String w : words) {\n            int cnt = new HashSet<>(w).size();\n            if (cnt > max_cnt) {\n                max_cnt = cnt;\n                max_w = w;\n            } else if (cnt == max_cnt) {\n                max_w = max_w.compareTo(w) < 0 ? max_w : w;\n            }\n        }\n        return max_w;\n    }\n}\n",
            "class Global {\n    public static List<Integer> eat(int num, int need, int remaining) {\n        if (need <= remaining) {\n            return Arrays.asList(num + need, remaining - need);\n        } else {\n            return Arrays.asList(num + remaining, 0);\n        }\n    }\n}\n",
            "class Global {\n    public static int doAlgebra(List<String> operators, List<Integer> operands) {\n        List<String> ops = new ArrayList<>(operators);\n        List<Integer> nums = new ArrayList<>(operands);\n        int i = ops.size() - 1;\n        while (i >= 0) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.pow(nums.get(i), nums.get(i + 1)));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n            i -= 1;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            } else if (ops.get(i).equals(\"//\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        return nums.get(0);\n    }\n}\n",
            "class Global {\n    public static String solve(String s) {\n        if (!s.chars().anyMatch(Character::isAlphabetic)) {\n            return new StringBuilder(s).reverse().toString();\n        }\n        List<Character> result = new ArrayList<>();\n        for (char ch : s.toCharArray()) {\n            if (!Character.isAlphabetic(ch)) {\n                result.add(ch);\n            } else if (Character.isUpperCase(ch)) {\n                result.add(Character.toLowerCase(ch));\n            } else if (Character.isLowerCase(ch)) {\n                result.add(Character.toUpperCase(ch));\n            }\n        }\n        return result.stream().map(String::valueOf).collect(Collectors.joining());\n    }\n}\n",
            "class Global {\n    public static Optional<String> stringToMd5(String txt) {\n        if (!txt) {\n            return null;\n        }\n        MessageDigest md5_hash = MessageDigest.getInstance(\"MD5\");\n        byte[] txt_bytes = txt.getBytes();\n        md5_hash.update(txt_bytes);\n        String md5_encoded = md5_hash.digest();\n        return md5_encoded;\n    }\n}\n",
            "class Global {\n    public static List<Integer> generateIntegers(int a, int b) {\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n        List<Integer> result = new ArrayList<>();\n        for (int i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n"
        ],
        "javascript": [
            "/**\n * @param {Array<number>} numbers\n * @param {number} threshold\n * @returns {boolean}\n */\nexport const hasCloseElements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {string} parenString\n * @returns {Array<string>}\n */\nexport const separateParenGroups = (parenString) => {\n    let groups = [];\n    let stk = [];\n    let currentGroup = \"\";\n    let parens = parenString.replace(\" \", \"\");\n    for (let ch of parens) {\n        if (ch === \"(\") {\n            stk.push(ch);\n            currentGroup += ch;\n        } else if (ch === \")\") {\n            stk.pop();\n            currentGroup += ch;\n            if (!stk.length) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "/**\n * @param {number} num\n * @returns {number}\n */\nexport const truncateNumber = (num) => {\n    return num - Math.floor(num);\n}\n",
            "/**\n * @param {Array<number>} operations\n * @returns {boolean}\n */\nexport const belowZero = (operations) => {\n    let balance = 0;\n    for (let op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @returns {number}\n */\nexport const meanAbsoluteDeviation = (numbers) => {\n    const mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    const deviation = numbers.reduce((a, b) => Math.abs(b - mean) + a, 0);\n    return deviation / numbers.length;\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @param {number} delimiter\n * @returns {Array<number>}\n */\nexport const intersperse = (numbers, delimiter) => {\n    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i != 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "/**\n * @param {string} parenString\n * @returns {Array<number>}\n */\nexport const parseNestedParens = (parenString) => {\n    let result = [];\n    let parenGroups = parenString.split();\n    for (let group of parenGroups) {\n        let maxDepth = 0;\n        let depth = 0;\n        for (let ch of group) {\n            if (ch === \"(\") {\n                depth += 1;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch === \")\") {\n                depth -= 1;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}\n",
            "/**\n * @param {Array<string>} strs\n * @param {string} substring\n * @returns {Array<string>}\n */\nexport const filterBySubstring = (strs, substring) => {\n    return strs.filter(s => s.includes(substring))\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @returns {Array<number>}\n */\nexport const sumProduct = (numbers) => {\n    const n_sum = numbers.reduce((a, b) => a + b, 0);\n    const n_product = numbers.reduce((a, b) => a * b, 1);\n    return [n_sum, n_product];\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @returns {Array<number>}\n */\nexport const rollingMax = (numbers) => {\n    let max_so_far = Number.NEGATIVE_INFINITY;\n    let result = [];\n    for (let num of numbers) {\n        max_so_far = Math.max(max_so_far, num);\n        result.push(max_so_far);\n    }\n    return result;\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const makePalindrome = (s) => {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (isPalindrome(s.slice(i))) {\n            return s + s.slice(0, i).split(\"\").reverse().join(\"\");\n        }\n    }\n    return \"\";\n}\n/**\n * @param {string} s\n * @returns {boolean}\n */\nconst isPalindrome = (s) => {\n    return s === s.split(\"\").reverse().join(\"\");\n}\n",
            "/**\n * @param {string} a\n * @param {string} b\n * @returns {string}\n */\nexport const stringXor = (a, b) => {\n    return a.split(\"\").map((x, i) => x === b[i] ? \"0\" : \"1\").join(\"\");\n}\n",
            "/**\n * @param {Array<string>} strs\n * @returns {?string}\n */\nexport const longest = (strs) => {\n    if (!strs.length) {\n        return null;\n    }\n    let longest_s = strs[0];\n    for (let s of strs) {\n        if (s.length > longest_s.length) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n",
            "/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nexport const greatestCommonDivisor = (a, b) => {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "/**\n * @param {string} s\n * @returns {Array<string>}\n */\nexport const allPrefixes = (s) => {\n    prefixes = []\n    for (let i = 0; i < s.length; i++) {\n        prefixes.push(s.slice(0, i + 1))\n    }\n    return prefixes\n}\n",
            "/**\n * @param {number} n\n * @returns {string}\n */\nexport const stringSequence = (n) => {\n    return [...Array(n + 1).keys()].join(' ');\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const countDistinctCharacters = (s) => {\n    return s.toLowerCase().split('').filter((item, index, arr) => {\n        return arr.indexOf(item) === index;\n    }).length;\n}\n",
            "/**\n * @param {string} musicString\n * @returns {Array<number>}\n */\nexport const parseMusic = (musicString) => {\n    const durations = {\"o\": 4, \"o|\": 2, \".|\": 1};\n    const notes = musicString.split();\n    return [durations[note] for note in notes];\n}\n",
            "/**\n * @param {string} s\n * @param {string} substring\n * @returns {number}\n */\nexport const howManyTimes = (s, substring) => {\n    let times = 0;\n    for (let i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.substring(i, i + substring.length) === substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "/**\n * @param {string} numbers\n * @returns {string}\n */\nexport const sortNumbers = (numbers) => {\n    const num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    const num_list = numbers.split(\" \").filter(x => num_dict[x]).sort((a, b) => num_dict[a] - num_dict[b])\n    return num_list.join(\" \")\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @returns {Array<number>}\n */\nexport const findClosestElements = (numbers) => {\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    let minDiff = Infinity;\n    let closestPair = [];\n    for (let i = 1; i < sortedNumbers.length; i++) {\n        const diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @returns {Array<number>}\n */\nexport const rescaleToUnit = (numbers) => {\n    const min_num = Math.min(...numbers);\n    const max_num = Math.max(...numbers);\n    if (min_num === max_num) {\n        return Array(numbers.length).fill(0);\n    } else {\n        return numbers.map(num => (num - min_num) / (max_num - min_num));\n    }\n}\n",
            "/**\n * @param {Array<*>} values\n * @returns {Array<number>}\n */\nexport const filterIntegers = (values) => {\n    return values.filter(x => typeof x === 'number');\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const strLength = (s) => {\n    return s.length;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const largestDivisor = (n) => {\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const factorize = (n) => {\n    let factors = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n            n //= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @returns {Array<number>}\n */\nexport const removeDuplicates = (numbers) => {\n    const counts = {};\n    for (const num of numbers) {\n        counts[num] = counts.get(num, 0) + 1;\n    }\n    const res = [num for num in numbers if counts[num] == 1];\n    return res;\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const flipCase = (s) => {\n    let flipped = [];\n    for (let ch of s) {\n        if (!ch.isalpha()) {\n            flipped.push(ch);\n        } else if (ch.islower()) {\n            flipped.push(ch.toUpperCase());\n        } else if (ch.isupper()) {\n            flipped.push(ch.toLowerCase());\n        }\n    }\n    return flipped.join('');\n}\n",
            "/**\n * @param {Array<string>} strs\n * @returns {string}\n */\nexport const concatenate = (strs) => {\n    return strs.join(\"\");\n}\n",
            "/**\n * @param {Array<string>} strs\n * @param {string} prefixStr\n * @returns {Array<string>}\n */\nexport const filterByPrefix = (strs, prefixStr) => {\n    return strs.filter(s => s.startsWith(prefixStr))\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const getPositive = (l) => {\n    return l.filter(num => num > 0);\n}\n",
            "/**\n * @param {number} n\n * @returns {boolean}\n */\nexport const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {Array<number>} xs\n * @param {number} x\n * @returns {number}\n */\nexport const poly = (xs, x) => {\n    let res = 0.0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n}\n/**\n * @param {Array<number>} xs\n * @returns {number}\n */\nexport const findZero = (xs) => {\n    let x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        let mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const sortThird = (l) => {\n    const sorted_third = l.slice(0, l.length).sort((a, b) => a - b);\n    return l.map((item, index) => {\n        if (index % 3 === 0) {\n            return sorted_third[index / 3];\n        }\n        return item;\n    });\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const listUnique = (l) => {\n    return l.sort((a, b) => a - b).filter((item, index, arr) => arr.indexOf(item) === index);\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {number}\n */\nexport const maxElement = (l) => {\n    if (!l.length) {\n        return 0;\n    }\n    return Math.max(...l);\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const fizzBuzz = (n) => {\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += (i + \"\").split(\"7\").length - 1;\n        }\n    }\n    return cnt;\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const sortEven = (l) => {\n    const sortedEven = l.filter((_, i) => i % 2 === 0).sort((a, b) => a - b);\n    return l.map((_, i) => i % 2 === 0 ? sortedEven[i / 2] : l[i]);\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const encodeCyclic = (s) => {\n    let result = [];\n    for (let i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.push(s.slice(i));\n        } else {\n            result.push(s.slice(i + 1, i + 3));\n            result.push(s[i]);\n        }\n    }\n    return result.join(\"\");\n}\n/**\n * @param {string} s\n * @returns {string}\n */\nexport const decodeCyclic = (s) => {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const primeFib = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n    f = [0, 1];\n    cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (is_prime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {boolean}\n */\nexport const triplesSumToZero = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const carRaceCollision = (n) => {\n    return n ** 2;\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const incrList = (l) => {\n    return l.map(i => i + 1);\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {boolean}\n */\nexport const pairsSumToZero = (l) => {\n    const seen = new Set();\n    for (const num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "/**\n * @param {number} x\n * @param {number} bas\n * @returns {string}\n */\nexport const changeBase = (x, bas) => {\n    if (x === 0) {\n        return \"0\";\n    }\n    let digits = [];\n    while (x > 0) {\n        digits.push(String(x % bas));\n        x = Math.floor(x / bas);\n    }\n    return digits.reverse().join(\"\");\n}\n",
            "/**\n * @param {number} a\n * @param {number} h\n * @returns {number}\n */\nexport const triangleArea = (a, h) => {\n    return a * h / 2;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const fib4 = (n) => {\n    let fib = [0, 0, 2, 0];\n    for (let i = 4; i < n + 1; i++) {\n        fib[i % 4] = sum(fib);\n    }\n    return fib[n % 4];\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {number}\n */\nexport const median = (l) => {\n    sl = l.sort((a, b) => a - b)\n    if (l.length % 2 != 0) {\n        return sl[l.length // 2]\n    } else {\n        return (sl[l.length // 2] + sl[l.length // 2 - 1]) / 2\n    }\n}\n",
            "/**\n * @param {string} txt\n * @returns {boolean}\n */\nexport const isPalindrome = (txt) => {\n    return txt == txt.split('').reverse().join('');\n}\n",
            "/**\n * @param {number} n\n * @param {number} p\n * @returns {number}\n */\nexport const modp = (n, p) => {\n    let ret = 1;\n    for (let i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const encodeShift = (s) => {\n    const result = s.split('').map(ch => String.fromCharCode(((ch.charCodeAt(0) - 97 + 5) % 26) + 97));\n    return result.join('');\n}\n/**\n * @param {string} s\n * @returns {string}\n */\nexport const decodeShift = (s) => {\n    const result = s.split('').map(ch => String.fromCharCode(((ch.charCodeAt(0) - 97 + 21) % 26) + 97));\n    return result.join('');\n}\n",
            "/**\n * @param {string} txt\n * @returns {string}\n */\nexport const removeVowels = (txt) => {\n    vowels = \"aeiouAEIOU\";\n    return \"\".join([char for char in txt if char not in vowels]);\n}\n",
            "/**\n * @param {Array<number>} l\n * @param {number} t\n * @returns {boolean}\n */\nexport const belowThreshold = (l, t) => {\n    return l.every(x => x < t);\n}\n",
            "/**\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport const add = (x, y) => {\n    return x + y\n}\n",
            "/**\n * @param {string} s0\n * @param {string} s1\n * @returns {boolean}\n */\nexport const sameChars = (s0, s1) => {\n    return new Set(s0).size === new Set(s1).size;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const fib = (n) => {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "/**\n * @param {string} brackets\n * @returns {boolean}\n */\nexport const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (let b of brackets) {\n        if (b === \"<\") {\n            depth += 1;\n        } else if (b === \">\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {boolean}\n */\nexport const monotonic = (l) => {\n    const diff = l.map((x, i) => l[i + 1] - x);\n    return diff.every(x => x <= 0) || diff.every(x => x >= 0);\n}\n",
            "/**\n * @param {Array<number>} l1\n * @param {Array<number>} l2\n * @returns {Array<number>}\n */\nexport const common = (l1, l2) => {\n    return sorted(list(set(l1) & set(l2)))\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const largestPrimeFactor = (n) => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1;\n        } else {\n            n //= i;\n        }\n    }\n    return n;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const sumToN = (n) => {\n    return sum(range(n + 1))\n}\n",
            "/**\n * @param {string} brackets\n * @returns {boolean}\n */\nexport const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (let b of brackets) {\n        if (b === \"(\") {\n            depth += 1;\n        } else if (b === \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "/**\n * @param {Array<number>} xs\n * @returns {Array<number>}\n */\nexport const derivative = (xs) => {\n    return xs.map((x, i) => x * i);\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const fibfib = (n) => {\n    if (n <= 1) {\n        return 0;\n    }\n    let a = 0;\n    let b = 0;\n    let c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const vowelsCount = (s) => {\n    let vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() in vowels || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n",
            "/**\n * @param {number} x\n * @param {number} shift\n * @returns {string}\n */\nexport const circularShift = (x, shift) => {\n    const x_str = x.toString();\n    if (shift > x_str.length) {\n        return x_str.split('').reverse().join('');\n    } else {\n        return x_str.slice(-shift) + x_str.slice(0, -shift);\n    }\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const digitSum = (s) => {\n    return s.split('').reduce((acc, c) => {\n        if (c.toUpperCase() === c) {\n            acc += c.charCodeAt(0);\n        }\n        return acc;\n    }, 0);\n}\n",
            "/**\n * @param {string} s\n * @param {number} n\n * @returns {number}\n */\nexport const fruitDistribution = (s, n) => {\n    const words = s.split(' ');\n    const apples = parseInt(words[words.indexOf(\"apples\") - 1]);\n    const oranges = parseInt(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {Array<number>}\n */\nexport const pluck = (arr) => {\n    const evens = arr.filter(n => n % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n    const minEven = Math.min(...evens);\n    return [minEven, arr.indexOf(minEven)];\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const search = (lst) => {\n    const freqs = {};\n    for (const n of lst) {\n        freqs[n] = freqs.get(n, 0) + 1;\n    }\n    const good_vals = [k for k, v in freqs.items() if v >= k];\n    return Math.max(good_vals, default=-1);\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {Array<number>}\n */\nexport const strangeSortList = (lst) => {\n    const sl = lst.sort((a, b) => a - b);\n    const result = [];\n    let left = 0;\n    let right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @returns {number}\n */\nexport const triangleArea = (a, b, c) => {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2.0;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "/**\n * @param {Array<number>} q\n * @param {number} w\n * @returns {boolean}\n */\nexport const willItFly = (q, w) => {\n    if (q.length === 0) {\n        return false;\n    }\n    const isPalin = q.every((item, index) => item === q[q.length - index - 1]);\n    const total = q.reduce((acc, item) => acc + item, 0);\n    return isPalin && total <= w;\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {number}\n */\nexport const smallestChange = (arr) => {\n    let ans = 0;\n    for (let i = 0; i < len(arr) // 2; i++) {\n        if (arr[i] != arr[len(arr) - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "/**\n * @param {Array<string>} lst1\n * @param {Array<string>} lst2\n * @returns {Array<string>}\n */\nexport const totalMatch = (lst1, lst2) => {\n    const cnt1 = lst1.reduce((acc, s) => acc + s.length, 0);\n    const cnt2 = lst2.reduce((acc, s) => acc + s.length, 0);\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n",
            "/**\n * @param {number} a\n * @returns {boolean}\n */\nexport const isMultiplyPrime = (a) => {\n    if (a < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {number} x\n * @param {number} n\n * @returns {boolean}\n */\nexport const isSimplePower = (x, n) => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}\n",
            "/**\n * @param {number} a\n * @returns {boolean}\n */\nexport const isCube = (a) => {\n    a = Math.abs(a);\n    root = Math.round(Math.pow(a, 1.0 / 3.0));\n    return root * root * root == a;\n}\n",
            "/**\n * @param {string} num\n * @returns {number}\n */\nexport const hexKey = (num) => {\n    return num.split(\"\").filter(x => [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"].includes(x)).length;\n}\n",
            "/**\n * @param {number} dec\n * @returns {string}\n */\nexport const decimalToBinary = (dec) => {\n    let binary = dec.toString(2);\n    return `db${binary}db`;\n}\n",
            "/**\n * @param {string} s\n * @returns {boolean}\n */\nexport const isHappy = (s) => {\n    if (s.length < 3) {\n        return false;\n    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {Array<number>} grades\n * @returns {Array<string>}\n */\nexport const numericalLetterGrade = (grades) => {\n    let result = [];\n    for (let g of grades) {\n        if (g == 4.0) {\n            result.push(\"A+\");\n        } else if (g > 3.7) {\n            result.push(\"A\");\n        } else if (g > 3.3) {\n            result.push(\"A-\");\n        } else if (g > 3.0) {\n            result.push(\"B+\");\n        } else if (g > 2.7) {\n            result.push(\"B\");\n        } else if (g > 2.3) {\n            result.push(\"B-\");\n        } else if (g > 2.0) {\n            result.push(\"C+\");\n        } else if (g > 1.7) {\n            result.push(\"C\");\n        } else if (g > 1.3) {\n            result.push(\"C-\");\n        } else if (g > 1.0) {\n            result.push(\"D+\");\n        } else if (g > 0.7) {\n            result.push(\"D\");\n        } else if (g > 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {string} s\n * @returns {boolean}\n */\nexport const primeLength = (s) => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(length)) + 1; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const startsOneEnds = (n) => {\n    if (n === 1) {\n        return 1;\n    }\n    return 2 * 9 * (10 ** (n - 2));\n}\n",
            "/**\n * @param {number} n\n * @returns {string}\n */\nexport const solve = (n) => {\n    const digitsSum = [...n.toString()].reduce((acc, d) => acc + parseInt(d), 0);\n    return digitsSum.toString(2);\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const add = (lst) => {\n    return lst.reduce((acc, x, i) => {\n        if (i % 2 === 1 && x % 2 === 0) {\n            acc += x;\n        }\n        return acc;\n    }, 0);\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const antiShuffle = (s) => {\n    words = [\"\".join(sorted(list(word))) for word in s.split(\" \")]\n    return \" \".join(words)\n}\n",
            "/**\n * @param {Array<Array<number>>} lst\n * @param {number} x\n * @returns {Array<Array<number>>}\n */\nexport const getRow = (lst, x) => {\n    let coords = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    return coords.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {Array<number>}\n */\nexport const sortArray = (arr) => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) {\n        return arr.sort((a, b) => b - a);\n    } else {\n        return arr.sort((a, b) => a - b);\n    }\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const encrypt = (s) => {\n    let result = [];\n    for (let ch of s) {\n        let shifted = ch.charCodeAt(0) + 4;\n        if (shifted > 'z'.charCodeAt(0)) {\n            shifted -= 26;\n        }\n        result.push(String.fromCharCode(shifted));\n    }\n    return result.join('');\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {?number}\n */\nexport const nextSmallest = (lst) => {\n    const sl = sorted(set(lst));\n    if (len(sl) < 2) {\n        return None;\n    }\n    return sl[1];\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const isBored = (s) => {\n    const sentences = s.split(/\\.!\\?\\s*/);\n    return sentences.reduce((acc, sentence) => {\n        if (sentence.length >= 2 && sentence.slice(0, 2) === \"I \") {\n            return acc + 1;\n        }\n        return acc;\n    }, 0);\n}\n",
            "/**\n * @param {*} x\n * @param {*} y\n * @param {*} z\n * @returns {boolean}\n */\nexport const anyInt = (x, y, z) => {\n    if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n        if (x + y === z || x + z === y || y + z === x) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {string} message\n * @returns {string}\n */\nexport const encode = (message) => {\n    const vowels = \"aeiouAEIOU\";\n    const result = [];\n    for (const ch of message) {\n        if (ch.isalpha()) {\n            const ch1 = ch.upper() if ch.islower() else ch.lower();\n            if (ch1 in vowels) {\n                ch1 = chr(ord(ch1) + 2);\n            }\n            result.append(ch1);\n        } else {\n            result.append(ch);\n        }\n    }\n    return \"\".join(result);\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const skjkasdkd = (lst) => {\n    const is_prime = (n) => {\n        if (n < 2) {\n            return false;\n        }\n        for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n            if (n % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    const primes = lst.filter(n => is_prime(n));\n    if (primes.length === 0) {\n        return 0;\n    }\n    const largest = String(Math.max(...primes));\n    return largest.split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n}\n",
            "/**\n * @param {Map<string, string>} d\n * @returns {boolean}\n */\nexport const checkDictCase = (d) => {\n    if (!d) {\n        return false;\n    }\n    return d.keys().every(c => c.isLowerCase()) || d.keys().every(c => c.isUpperCase());\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const countUpTo = (n) => {\n    let primes = []\n    for (let num = 2; num < n; num++) {\n        if (primes.every(p => num % p !== 0)) {\n            primes.push(num)\n        }\n    }\n    return primes\n}\n",
            "/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nexport const multiply = (a, b) => {\n    return (Math.abs(a) % 10) * (Math.abs(b) % 10)\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const countUpper = (s) => {\n    const vowels = \"AEIOU\";\n    return s.split(\"\").filter((c, i) => i % 2 === 0 && vowels.includes(c)).length;\n}\n",
            "/**\n * @param {string} value\n * @returns {number}\n */\nexport const closestInteger = (value) => {\n    num = parseFloat(value);\n    if (num >= 0) {\n        return parseInt(num + 0.5);\n    } else {\n        return parseInt(num - 0.5);\n    }\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const makeAPile = (n) => {\n    return [n + 2 * i for i in range(n)]\n}\n",
            "/**\n * @param {string} s\n * @returns {Array<string>}\n */\nexport const wordsString = (s) => {\n    return [w for w in re.split(r\"[, ]\", s) if len(w) > 0]\n}\n",
            "/**\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport const chooseNum = (x, y) => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    return y - 1 !== x ? y - 1 : -1;\n}\n",
            "/**\n * @param {number} n\n * @param {number} m\n * @returns {?string}\n */\nexport const roundedAvg = (n, m) => {\n    if (n > m) {\n        return null;\n    }\n    const r_avg = Math.round((m + n) / 2.0 + 0.5);\n    return r_avg.toString(2);\n}\n",
            "/**\n * @param {Array<number>} x\n * @returns {Array<number>}\n */\nexport const uniqueDigits = (x) => {\n    return x.filter(num => {\n        return num.toString().split('').every(digit => {\n            return digit % 2 !== 0\n        })\n    }).sort((a, b) => a - b)\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {Array<string>}\n */\nexport const byLength = (arr) => {\n    const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const sortedArr = sorted([x for x in arr if 1 <= x <= 9], reverse=true);\n    return [digitNames[x-1] for x in sortedArr];\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const f = (n) => {\n    const nums = Array.from({ length: n }, (_, i) => i + 1);\n    return nums.map((_, i) => {\n        if (i % 2 !== 0) {\n            return nums.slice(0, i).reduce((a, b) => a + b, 0);\n        }\n        return nums.slice(0, i).reduce((a, b) => a * b, 1);\n    });\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const evenOddPalindrome = (n) => {\n    const cnt = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n};\n/**\n * @param {string} txt\n * @returns {boolean}\n */\nconst isPalindrome = (txt) => {\n    return txt === txt.split(\"\").reverse().join(\"\");\n};\n",
            "/**\n * @param {Array<number>} arr\n * @returns {number}\n */\nexport const countNums = (arr) => {\n    const digitsSum = (n) => {\n        const nStr = String(n);\n        if (n >= 0) {\n            return nStr.split('').reduce((acc, d) => acc + parseInt(d), 0);\n        } else {\n            return parseInt(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n        }\n    }\n    return arr.filter(n => digitsSum(n) > 0).length;\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {boolean}\n */\nexport const moveOneBall = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    const sortedArr = arr.sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.slice(i) === sortedArr.slice(0, arr.length - i) && arr.slice(0, i) === sortedArr.slice(arr.length - i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {Array<number>} lst1\n * @param {Array<number>} lst2\n * @returns {string}\n */\nexport const canExchange = (lst1, lst2) => {\n    const odd_cnt = lst1.filter(num => num % 2 != 0).length;\n    const even_cnt = lst2.filter(num => num % 2 == 0).length;\n    return even_cnt >= odd_cnt ? \"YES\" : \"NO\";\n}\n",
            "/**\n * @param {string} test\n * @returns {Map<string, number>}\n */\nexport const histogram = (test) => {\n    let freq = {};\n    let words = [w for w in test.split(\" \") if len(w) > 0];\n    for (let w of words) {\n        freq[w] = freq.get(w, 0) + 1;\n    }\n    let result = {};\n    if (len(freq) > 0) {\n        let max_freq = max(freq.values());\n        for (let k, v of freq.items()) {\n            if (v == max_freq) {\n                result[k] = v;\n            }\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {string} s\n * @param {string} c\n * @returns {Array<string>}\n */\nexport const reverseDelete = (s, c) => {\n    const s1 = s.split(\"\").filter(ch => !c.includes(ch)).join(\"\");\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"];\n}\nconst isPalindrome = s => s === s.split(\"\").reverse().join(\"\");\n",
            "/**\n * @param {Array<string>} lst\n * @returns {Array<string>}\n */\nexport const oddCount = (lst) => {\n    let result = [];\n    for (let num of lst) {\n        let n = sum(ord(d) % 2 == 1 for d in num);\n        let rs = \"the number of odd elements in the string i of the input.\";\n        result.append(rs.replace(\"i\", str(n)));\n    }\n    return result;\n}\n",
            "/**\n * @param {Array<number>} nums\n * @returns {number}\n */\nexport const minSubArraySum = (nums) => {\n    let min_sum = 0;\n    let cur_sum = 0;\n    for (let n of nums) {\n        cur_sum = Math.min(cur_sum + n, 0);\n        min_sum = Math.min(cur_sum, min_sum);\n    }\n    if (min_sum === 0) {\n        min_sum = Math.min(...nums);\n    }\n    return min_sum;\n}\n",
            "/**\n * @param {Array<Array<number>>} grid\n * @param {number} capacity\n * @returns {number}\n */\nexport const maxFill = (grid, capacity) => {\n    return sum([Math.ceil(sum(arr) / capacity) for arr in grid])\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {Array<number>}\n */\nexport const sortArray = (arr) => {\n    return arr.sort((a, b) => {\n        const aOnes = a.toString(2).split(\"\").filter(x => x === \"1\").length;\n        const bOnes = b.toString(2).split(\"\").filter(x => x === \"1\").length;\n        if (aOnes === bOnes) {\n            return a - b;\n        }\n        return aOnes - bOnes;\n    });\n}\n",
            "/**\n * @param {string} s\n * @param {number} n\n * @returns {Array<string>}\n */\nexport const selectWords = (s, n) => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = s.split(\" \").filter(w => w.length > 0);\n    return words.filter(w => w.split(\"\").filter(c => consonants.includes(c.toLowerCase())).length === n);\n}\n",
            "/**\n * @param {string} word\n * @returns {string}\n */\nexport const getClosestVowel = (word) => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = len(word) - 2; i > 0; i--) {\n        if (word[i] in vowels && word[i - 1] not in vowels && word[i + 1] not in vowels) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "/**\n * @param {Array<string>} lst\n * @returns {string}\n */\nexport const matchParens = (lst) => {\n    let depth = 0;\n    for (let ch of lst[0] + lst[1]) {\n        if (ch === \"(\") {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return \"No\";\n        }\n    }\n    return depth === 0 ? \"Yes\" : \"No\";\n}\n",
            "/**\n * @param {Array<number>} arr\n * @param {number} k\n * @returns {Array<number>}\n */\nexport const maximum = (arr, k) => {\n    if (k === 0) {\n        return [];\n    }\n    return arr.sort((a, b) => b - a).slice(-k);\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const solution = (lst) => {\n    return lst.reduce((acc, x, i) => {\n        if (i % 2 === 0 && x % 2 !== 0) {\n            acc += x;\n        }\n        return acc;\n    }, 0);\n}\n",
            "/**\n * @param {Array<number>} arr\n * @param {number} k\n * @returns {number}\n */\nexport const addElements = (arr, k) => {\n    return arr.slice(0, k).filter(n => n.toString().length <= 2).reduce((a, b) => a + b, 0);\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const getOddCollatz = (n) => {\n    collatz = [1];\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.append(n);\n            n = 3 * n + 1;\n        } else {\n            n = n // 2;\n        }\n    }\n    return sorted(collatz);\n}\n",
            "/**\n * @param {string} date\n * @returns {boolean}\n */\nexport const validDate = (date) => {\n    if (!(date.length === 10) || !(date[2] === \"-\") || !(date[5] === \"-\")) {\n        return false;\n    }\n    const m = parseInt(date.slice(0, 2));\n    const d = parseInt(date.slice(3, 5));\n    if (m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31) {\n        return true;\n    }\n    if (m in [4, 6, 9, 11] && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m === 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "/**\n * @param {string} txt\n * @returns {Array<string>}\n */\nexport const splitWords = (txt) => {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [String(txt.split(\"\").filter((c) => c.toLowerCase() === c && c.charCodeAt(0) % 2 === 0).length)];\n    }\n};\n",
            "/**\n * @param {Array<number>} lst\n * @returns {boolean}\n */\nexport const isSorted = (lst) => {\n    if (!lst.every((i, j) => j === 0 || lst[j - 1] <= lst[j])) {\n        return false;\n    }\n    const freq = {};\n    for (const i of lst) {\n        freq[i] = (freq[i] || 0) + 1;\n    }\n    return Math.max(...Object.values(freq), 0) <= 2;\n}\n",
            "/**\n * @param {Array<number>} interval1\n * @param {Array<number>} interval2\n * @returns {string}\n */\nexport const intersection = (interval1, interval2) => {\n    if (interval1[0] < interval2[0]) {\n        const temp = interval1;\n        interval1 = interval2;\n        interval2 = temp;\n    }\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n}\nconst isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {?number}\n */\nexport const prodSigns = (arr) => {\n    if (!arr.length) {\n        return null;\n    }\n    if (arr.includes(0)) {\n        return 0;\n    }\n    const sign = arr.filter(n => n < 0).length % 2 === 1 ? -1 : 1;\n    return sign * arr.map(n => Math.abs(n)).reduce((a, b) => a + b);\n}\n",
            "/**\n * @param {Array<Array<number>>} grid\n * @param {number} k\n * @returns {Array<number>}\n */\nexport const minPath = (grid, k) => {\n    const n = grid.length;\n    let min_val = n * n + 1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                const temp = [];\n                if (i !== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j !== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i !== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j !== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                min_val = Math.min(...temp);\n            }\n        }\n    }\n    const result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(i % 2 === 0 ? 1 : min_val);\n    }\n    return result;\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const tri = (n) => {\n    if (n === 0) {\n        return [1];\n    }\n    let seq = [1, 3];\n    for (let i = 2; i <= n + 1; i++) {\n        if (i % 2 === 0) {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const digits = (n) => {\n    const odds = [parseInt(d) for (d in str(n)) if (parseInt(d) % 2 == 1)]\n    return reduce((x, y) => x * y, odds, 1) if (len(odds) > 0) else 0\n}\n",
            "/**\n * @param {string} s\n * @returns {boolean}\n */\nexport const isNested = (s) => {\n    let openIdx = []\n    let closeIdx = []\n    for (let i = 0; i < s.length; i++) {\n        const ch = s[i]\n        if (ch === '[') {\n            openIdx.push(i)\n        } else if (ch === ']') {\n            closeIdx.push(i)\n        }\n    }\n    closeIdx.reverse()\n    let cnt = 0\n    let i = 0\n    let l = closeIdx.length\n    for (let idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const sumSquares = (lst) => {\n    return lst.reduce((acc, n) => acc + Math.pow(Math.ceil(n), 2), 0);\n}\n",
            "/**\n * @param {string} txt\n * @returns {boolean}\n */\nexport const checkIfLastCharIsALetter = (txt) => {\n    if (!txt) {\n        return false;\n    }\n    let last = txt[txt.lastIndexOf(' ') + 1];\n    return last.length === 1 && last[0].isalpha();\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {number}\n */\nexport const canArrange = (arr) => {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    const idx = [...Array(arr.length - 1).keys()].filter(i => arr[i + 1] < arr[i]);\n    return Math.max(...idx, -1);\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {Array<?number>}\n */\nexport const largestSmallestIntegers = (lst) => {\n    const neg = lst.filter(i => i < 0);\n    const pos = lst.filter(i => i > 0);\n    const max_neg = Math.max(...neg) || null;\n    const min_pos = Math.min(...pos) || null;\n    return [max_neg, min_pos];\n}\n",
            "/**\n * @param {*} a\n * @param {*} b\n * @returns {?number}\n */\nexport const compareOne = (a, b) => {\n    if (typeof a === 'string') {\n        a = parseFloat(a.replace(',', '.'));\n    } else if (typeof a === 'number') {\n        a = a;\n    } else {\n        throw new Error('Type Error');\n    }\n    if (typeof b === 'string') {\n        b = parseFloat(b.replace(',', '.'));\n    } else if (typeof b === 'number') {\n        b = b;\n    } else {\n        throw new Error('Type Error');\n    }\n    if (a === b) {\n        return null;\n    } else if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n",
            "/**\n * @param {number} n\n * @returns {boolean}\n */\nexport const isEqualToSumEven = (n) => {\n    return n % 2 == 0 && n >= 8\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const specialFactorial = (n) => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "/**\n * @param {string} txt\n * @returns {string}\n */\nexport const fixSpaces = (txt) => {\n    return re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n}\n",
            "/**\n * @param {string} fileName\n * @returns {string}\n */\nexport const fileNameCheck = (fileName) => {\n    suf = [\"txt\", \"exe\", \"dll\"];\n    lst = fileName.split(\".\");\n    if (len(lst) != 2 || !lst[1] in suf || len(lst[0]) == 0 || !lst[0][0].isalpha() || len([x for x in lst[0] if x.isdigit()]) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const sumSquares = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0) {\n            result += Math.pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {string} sentence\n * @returns {string}\n */\nexport const wordsInSentence = (sentence) => {\n    if (sentence.length < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(sentence.length)) + 1; i++) {\n        if (sentence % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {string} x\n * @param {string} n\n * @returns {boolean}\n */\nexport const simplify = (x, n) => {\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n}\n",
            "/**\n * @param {Array<number>} nums\n * @returns {Array<number>}\n */\nexport const orderByPoints = (nums) => {\n    const digitsSum = (n) => {\n        const nStr = String(n);\n        if (n >= 0) {\n            return nStr.split('').reduce((acc, d) => acc + Number(d), 0);\n        } else {\n            return Number(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n        }\n    }\n    return nums.sort((a, b) => digitsSum(a) - digitsSum(b));\n}\n",
            "/**\n * @param {Array<number>} nums\n * @returns {number}\n */\nexport const specialFilter = (nums) => {\n    odds = \"13579\";\n    return len([n for n in nums if n > 10 and n % 2 == 1 and str(n)[0] in odds]);\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const getMaxTriples = (n) => {\n    let c = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        let a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}\n",
            "/**\n * @param {string} planet1\n * @param {string} planet2\n * @returns {Array<string>}\n */\nexport const bf = (planet1, planet2) => {\n    const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.includes(planet1) || !names.includes(planet2)) {\n        return [];\n    }\n    let l = names.indexOf(planet1);\n    let r = names.indexOf(planet2);\n    if (l > r) {\n        [l, r] = [r, l];\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n}\n",
            "/**\n * @param {Array<string>} lst\n * @returns {Array<string>}\n */\nexport const sortedListSum = (lst) => {\n    const result = lst.filter(s => s.length % 2 === 0);\n    return result.sort((a, b) => {\n        if (a.length === b.length) {\n            return a.localeCompare(b);\n        }\n        return a.length - b.length;\n    });\n}\n",
            "/**\n * @param {number} n\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport const xOrY = (n, x, y) => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const doubleTheDifference = (lst) => {\n    return lst.filter(n => n >= 0 && n % 2 == 1).map(n => n * n).reduce((a, b) => a + b, 0);\n}\n",
            "/**\n * @param {Array<number>} game\n * @param {Array<number>} guess\n * @returns {Array<number>}\n */\nexport const compare = (game, guess) => {\n    return game.map((x, i) => Math.abs(x - guess[i]));\n}\n",
            "/**\n * @param {string} className\n * @param {Array<string>} extensions\n * @returns {string}\n */\nexport const strongestExtension = (className, extensions) => {\n    let max_s = Number.NEGATIVE_INFINITY;\n    let max_ext = \"\";\n    for (let ext of extensions) {\n        let upper = ext.split(\"\").filter(c => c.toUpperCase() === c).length;\n        let lower = ext.split(\"\").filter(c => c.toLowerCase() === c).length;\n        let s = upper - lower;\n        if (s > max_s) {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return `${className}.${max_ext}`;\n}\n",
            "/**\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n */\nexport const cycpatternCheck = (a, b) => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; i++) {\n        if (b.slice(i) + b.slice(0, i) in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {number} num\n * @returns {Array<number>}\n */\nexport const evenOddCount = (num) => {\n    const ds = Math.abs(num).toString();\n    const even = ds.split('').filter(d => d.charCodeAt(0) % 2 === 0).length;\n    return [even, ds.length - even];\n}\n",
            "/**\n * @param {number} num\n * @returns {string}\n */\nexport const intToMiniRoman = (num) => {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let res = [];\n    for (let i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.push(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join(\"\");\n}\n",
            "/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @returns {boolean}\n */\nexport const rightAngleTriangle = (a, b, c) => {\n    s = [a, b, c].sort((a, b) => a - b)\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "/**\n * @param {Array<string>} words\n * @returns {string}\n */\nexport const findMax = (words) => {\n    let max_cnt = 0;\n    let max_w = \"\";\n    for (let w of words) {\n        let cnt = new Set(w).size;\n        if (cnt > max_cnt) {\n            max_cnt = cnt;\n            max_w = w;\n        } else if (cnt == max_cnt) {\n            max_w = Math.min(max_w, w);\n        }\n    }\n    return max_w;\n}\n",
            "/**\n * @param {number} num\n * @param {number} need\n * @param {number} remaining\n * @returns {Array<number>}\n */\nexport const eat = (num, need, remaining) => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "/**\n * @param {Array<string>} operators\n * @param {Array<number>} operands\n * @returns {number}\n */\nexport const doAlgebra = (operators, operands) => {\n    ops = operators.copy();\n    nums = operands.copy();\n    i = len(ops) - 1;\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1]);\n            nums.pop(i + 1);\n            ops.pop(i);\n        i -= 1;\n    i = 0;\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        i += 1;\n    i = 0;\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        i += 1;\n    return nums[0];\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const solve = (s) => {\n    if (!s.split('').some(ch => ch.match(/[a-zA-Z]/))) {\n        return s.split('').reverse().join('');\n    }\n    const result = [];\n    for (const ch of s) {\n        if (!ch.match(/[a-zA-Z]/)) {\n            result.push(ch);\n        } else if (ch.match(/[A-Z]/)) {\n            result.push(ch.toLowerCase());\n        } else if (ch.match(/[a-z]/)) {\n            result.push(ch.toUpperCase());\n        }\n    }\n    return result.join('');\n}\n",
            "/**\n * @param {string} txt\n * @returns {?string}\n */\nexport const stringToMd5 = (txt) => {\n    if (!txt) {\n        return null;\n    }\n    const md5_hash = crypto.createHash('md5');\n    const txt_bytes = txt.encode();\n    md5_hash.update(txt_bytes);\n    const md5_encoded = md5_hash.digest('hex');\n    return md5_encoded;\n}\n",
            "/**\n * @param {number} a\n * @param {number} b\n * @returns {Array<number>}\n */\nexport const generateIntegers = (a, b) => {\n    const lower = Math.max(2, Math.min(a, b))\n    const upper = Math.min(8, Math.max(a, b))\n    return [...Array(upper - lower + 1).keys()].map(i => i + lower)\n}\n"
        ],
        "kotlin": [
            "fun hasCloseElements(numbers: List<Double>, threshold: Double): Boolean {\n    for (i in numbers.indices) {\n        for (j in i + 1 until numbers.size) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "fun separateParenGroups(parenString: String): List<String> {\n    val groups = ArrayList<String>()\n    val stk = ArrayList<Char>()\n    var currentGroup = \"\"\n    val parens = parenString.replace(\" \", \"\")\n    for (ch in parens) {\n        if (ch == '(') {\n            stk.add(ch)\n            currentGroup += ch\n        } else if (ch == ')') {\n            stk.removeAt(stk.size - 1)\n            currentGroup += ch\n            if (stk.isEmpty()) {\n                groups.add(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "fun truncateNumber(num: Double): Double {\n    return num - floor(num)\n}\n",
            "fun belowZero(operations: List<Int>): Boolean {\n    var balance = 0\n    for (op in operations) {\n        balance += op\n        if (balance < 0) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun meanAbsoluteDeviation(numbers: List<Double>): Double {\n    val mean = numbers.sum() / numbers.size\n    val deviation = numbers.sumByDouble { abs(it - mean) }\n    return deviation / numbers.size\n}\n",
            "fun intersperse(numbers: List<Int>, delimiter: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in 0 until numbers.size) {\n        if (i != 0) {\n            result.add(delimiter)\n        }\n        result.add(numbers[i])\n    }\n    return result\n}\n",
            "fun parseNestedParens(parenString: String): List<Int> {\n    val result = ArrayList<Int>()\n    val parenGroups = parenString.split(\" \")\n    for (group in parenGroups) {\n        var maxDepth = 0\n        var depth = 0\n        for (ch in group) {\n            if (ch == \"(\") {\n                depth += 1\n                maxDepth = maxOf(maxDepth, depth)\n            } else if (ch == \")\") {\n                depth -= 1\n            }\n        }\n        result.add(maxDepth)\n    }\n    return result\n}\n",
            "fun filterBySubstring(strs: List<String>, substring: String): List<String> {\n    return strs.filter { substring in it }\n}\n",
            "fun sumProduct(numbers: List<Int>): List<Int> {\n    val nSum = numbers.sum()\n    val nProduct = numbers.reduce { x, y -> x * y }\n    return listOf(nSum, nProduct)\n}\n",
            "fun rollingMax(numbers: List<Int>): List<Int> {\n    var maxSoFar = Float.NEGATIVE_INFINITY\n    val result = ArrayList<Int>()\n    for (num in numbers) {\n        maxSoFar = maxOf(maxSoFar, num)\n        result.add(maxSoFar)\n    }\n    return result\n}\n",
            "fun makePalindrome(s: String): String {\n    if (isPalindrome(s)) {\n        return s\n    }\n    for (i in s.indices) {\n        if (isPalindrome(s.substring(i))) {\n            return s + s.substring(0, i).reversed()\n        }\n    }\n    return \"\"\n}\nfun isPalindrome(s: String): Boolean {\n    return s == s.reversed()\n}\n",
            "fun stringXor(a: String, b: String): String {\n    return a.zip(b).map { (x, y) -> if (x == y) \"0\" else \"1\" }.joinToString(\"\")\n}\n",
            "fun longest(strs: List<String>): String? {\n    if (strs.isEmpty()) {\n        return null\n    }\n    var longestS = strs[0]\n    for (s in strs) {\n        if (s.length > longestS.length) {\n            longestS = s\n        }\n    }\n    return longestS\n}\n",
            "fun greatestCommonDivisor(a: Int, b: Int): Int {\n    if (b == 0) {\n        return a\n    } else {\n        return greatestCommonDivisor(b, a % b)\n    }\n}\n",
            "fun allPrefixes(s: String): List<String> {\n    val prefixes = ArrayList<String>()\n    for (i in 0 until s.length) {\n        prefixes.add(s.substring(0, i + 1))\n    }\n    return prefixes\n}\n",
            "fun stringSequence(n: Int): String {\n    return (1..n).joinToString(\" \")\n}\n",
            "fun countDistinctCharacters(s: String): Int {\n    return s.lowercase().toSet().size\n}\n",
            "fun parseMusic(musicString: String): List<Int> {\n    val durations = mapOf(\"o\" to 4, \"o|\" to 2, \".|\" to 1)\n    val notes = musicString.split(\" \")\n    return notes.map { durations[it]!! }\n}\n",
            "fun howManyTimes(s: String, substring: String): Int {\n    var times = 0\n    for (i in 0 until s.length - substring.length + 1) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "fun sortNumbers(numbers: String): String {\n    val numDict = mapOf(\n        \"zero\" to 0,\n        \"one\" to 1,\n        \"two\" to 2,\n        \"three\" to 3,\n        \"four\" to 4,\n        \"five\" to 5,\n        \"six\" to 6,\n        \"seven\" to 7,\n        \"eight\" to 8,\n        \"nine\" to 9\n    )\n    val numList = numbers.split(\" \").filter { it in numDict }\n    numList.sortBy { numDict[it] }\n    return numList.joinToString(\" \")\n}\n",
            "fun findClosestElements(numbers: List<Double>): List<Double> {\n    val sortedNumbers = numbers.sorted()\n    var minDiff = Double.MAX_VALUE\n    var closestPair = listOf<Double>()\n    for (i in 1 until sortedNumbers.size) {\n        val diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if (diff < minDiff) {\n            minDiff = diff\n            closestPair = listOf(sortedNumbers[i - 1], sortedNumbers[i])\n        }\n    }\n    return closestPair\n}\n",
            "fun rescaleToUnit(numbers: List<Double>): List<Double> {\n    val minNum = numbers.min()\n    val maxNum = numbers.max()\n    if (minNum == maxNum) {\n        return List(numbers.size) { 0.0 }\n    } else {\n        return numbers.map { (it - minNum) / (maxNum - minNum) }\n    }\n}\n",
            "fun filterIntegers(values: List<Any>): List<Int> {\n    return values.filter { it is Int }\n}\n",
            "fun strLength(s: String): Int {\n    return s.length\n}\n",
            "fun largestDivisor(n: Int): Int {\n    for (i in 2..n) {\n        if (n % i == 0) {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "fun factorize(n: Int): List<Int> {\n    val factors = ArrayList<Int>()\n    var divisor = 2\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "fun removeDuplicates(numbers: List<Int>): List<Int> {\n    val counts = HashMap<Int, Int>()\n    for (num in numbers) {\n        counts[num] = counts.getOrDefault(num, 0) + 1\n    }\n    val res = ArrayList<Int>()\n    for (num in numbers) {\n        if (counts[num] == 1) {\n            res.add(num)\n        }\n    }\n    return res\n}\n",
            "fun flipCase(s: String): String {\n    val flipped = ArrayList<Char>()\n    for (ch in s) {\n        if (!ch.isLetter()) {\n            flipped.add(ch)\n        } else if (ch.isLowerCase()) {\n            flipped.add(ch.toUpperCase())\n        } else if (ch.isUpperCase()) {\n            flipped.add(ch.toLowerCase())\n        }\n    }\n    return flipped.joinToString(\"\")\n}\n",
            "fun concatenate(strs: List<String>): String {\n    return strs.joinToString(\"\")\n}\n",
            "fun filterByPrefix(strs: List<String>, prefixStr: String): List<String> {\n    return strs.filter { it.startsWith(prefixStr) }\n}\n",
            "fun getPositive(l: List<Int>): List<Int> {\n    return l.filter { it > 0 }\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..sqrt(n).toInt() + 1) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun poly(xs: List<Int>, x: Double): Double {\n    var res = 0.0\n    for (i in xs.indices) {\n        res += xs[i] * Math.pow(x, i.toDouble())\n    }\n    return res\n}\nfun findZero(xs: List<Int>): Double {\n    var x1 = 1.0\n    var x2 = -1.0\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2\n        x2 *= 2\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        val mid = (x1 + x2) / 2\n        if (poly(xs, mid) == 0.0) {\n            return mid\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "fun sortThird(l: List<Int>): List<Int> {\n    val sortedThird = sorted(l[::3])\n    return l.mapIndexed { i, _ ->\n        if (i % 3 == 0) sortedThird[i / 3] else l[i]\n    }\n}\n",
            "fun listUnique(l: List<Int>): List<Int> {\n    return l.toSet().sorted()\n}\n",
            "fun maxElement(l: List<Int>): Int {\n    if (!l) {\n        return 0\n    }\n    return max(l)\n}\n",
            "fun fizzBuzz(n: Int): Int {\n    var cnt = 0\n    for (i in 0 until n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString().count { it == '7' }\n        }\n    }\n    return cnt\n}\n",
            "fun sortEven(l: List<Int>): List<Int> {\n    val sortedEven = l.filter { it % 2 == 0 }.sorted()\n    return l.mapIndexed { index, i ->\n        if (index % 2 == 0) sortedEven[index / 2] else i\n    }\n}\n",
            "fun encodeCyclic(s: String): String {\n    val result = ArrayList<String>()\n    for (i in 0..s.length step 3) {\n        if (i + 3 > s.length) {\n            result.add(s.substring(i))\n        } else {\n            result.add(s.substring(i + 1, i + 3))\n            result.add(s.substring(i, i + 1))\n        }\n    }\n    return result.joinToString(\"\")\n}\nfun decodeCyclic(s: String): String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "fun primeFib(n: Int): Int {\n    val f = intArrayOf(0, 1)\n    var cnt = 0\n    while (cnt < n) {\n        f[0] = f[1]\n        f[1] = f[0] + f[1]\n        if (isPrime(f[1])) {\n            cnt++\n        }\n    }\n    return f[1]\n}\nfun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun triplesSumToZero(l: List<Int>): Boolean {\n    for (i in l.indices) {\n        for (j in i + 1 until l.size) {\n            for (k in j + 1 until l.size) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "fun carRaceCollision(n: Int): Int {\n    return n * n\n}\n",
            "fun incrList(l: List<Int>): List<Int> {\n    return l.map { it + 1 }\n}\n",
            "fun pairsSumToZero(l: List<Int>): Boolean {\n    val seen = mutableSetOf<Int>()\n    for (num in l) {\n        if (-num in seen) {\n            return true\n        }\n        seen.add(num)\n    }\n    return false\n}\n",
            "fun changeBase(x: Int, bas: Int): String {\n    if (x == 0) {\n        return \"0\"\n    }\n    val digits = ArrayList<String>()\n    while (x > 0) {\n        digits.add(x % bas.toString())\n        x /= bas\n    }\n    return digits.reversed().joinToString(\"\")\n}\n",
            "fun triangleArea(a: Int, h: Int): Double {\n    return a * h / 2\n}\n",
            "fun fib4(n: Int): Int {\n    val fib = intArrayOf(0, 0, 2, 0)\n    for (i in 4..n) {\n        fib[i % 4] = fib.sum()\n    }\n    return fib[n % 4]\n}\n",
            "fun median(l: List<Double>): Double {\n    val sl = l.sorted()\n    if (l.size % 2 != 0) {\n        return sl[l.size / 2]\n    } else {\n        return (sl[l.size / 2] + sl[l.size / 2 - 1]) / 2\n    }\n}\n",
            "fun isPalindrome(txt: String): Boolean {\n    return txt == txt.reversed()\n}\n",
            "fun modp(n: Int, p: Int): Int {\n    var ret = 1\n    for (i in 0 until n) {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "fun encodeShift(s: String): String {\n    val result = s.map { ch ->\n        (((ch.toInt() - 97 + 5) % 26) + 97).toChar()\n    }\n    return result.joinToString(\"\")\n}\nfun decodeShift(s: String): String {\n    val result = s.map { ch ->\n        (((ch.toInt() - 97 + 21) % 26) + 97).toChar()\n    }\n    return result.joinToString(\"\")\n}\n",
            "fun removeVowels(txt: String): String {\n    val vowels = \"aeiouAEIOU\"\n    return txt.filter { it !in vowels }.joinToString(\"\")\n}\n",
            "fun belowThreshold(l: List<Int>, t: Int): Boolean {\n    return l.all { x -> x < t }\n}\n",
            "fun add(x: Int, y: Int): Int {\n    return x + y\n}\n",
            "fun sameChars(s0: String, s1: String): Boolean {\n    return s0.toSet() == s1.toSet()\n}\n",
            "fun fib(n: Int): Int {\n    if (n <= 1) {\n        return n\n    } else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n",
            "fun correctBracketing(brackets: String): Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == \"<\") {\n            depth += 1\n        } else if (b == \">\") {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "fun monotonic(l: List<Int>): Boolean {\n    val diff = l.zipWithNext { x, y -> y - x }\n    return diff.all { x -> x <= 0 } || diff.all { x -> x >= 0 }\n}\n",
            "fun common(l1: List<Int>, l2: List<Int>): List<Int> {\n    return sorted(list(set(l1) & set(l2)))\n}\n",
            "fun largestPrimeFactor(n: Int): Int {\n    var i = 2\n    while (i * i <= n) {\n        if (n % i == 0) {\n            i += 1\n        } else {\n            n /= i\n        }\n    }\n    return n\n}\n",
            "fun sumToN(n: Int): Int {\n    return (1..n).sum()\n}\n",
            "fun correctBracketing(brackets: String): Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == \"(\") {\n            depth += 1\n        } else if (b == \")\") {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "fun derivative(xs: List<Int>): List<Int> {\n    return xs.mapIndexed { i, x -> x * i }\n}\n",
            "fun fibfib(n: Int): Int {\n    if (n <= 1) {\n        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 1\n    while (n > 2) {\n        a = b\n        b = c\n        c = a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "fun vowelsCount(s: String): Int {\n    val vowels = \"aeiou\"\n    var cnt = 0\n    for (i in s.indices) {\n        if (s[i].toLowerCase() in vowels || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "fun circularShift(x: Int, shift: Int): String {\n    val xStr = x.toString()\n    return if (shift > xStr.length) {\n        xStr.reversed()\n    } else {\n        xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift)\n    }\n}\n",
            "fun digitSum(s: String): Int {\n    return s.filter { it.isUpperCase() }.sumBy { it.toInt() }\n}\n",
            "fun fruitDistribution(s: String, n: Int): Int {\n    val words = s.split(' ')\n    val apples = words[words.indexOf(\"apples\") - 1].toInt()\n    val oranges = words[words.indexOf(\"oranges\") - 1].toInt()\n    return n - apples - oranges\n}\n",
            "fun pluck(arr: List<Int>): List<Int> {\n    val evens = arr.filter { it % 2 == 0 }\n    if (evens.isEmpty()) {\n        return emptyList()\n    }\n    val minEven = evens.min()\n    return listOf(minEven, arr.indexOf(minEven))\n}\n",
            "fun search(lst: List<Int>): Int {\n    val freqs = HashMap<Int, Int>()\n    for (n in lst) {\n        freqs[n] = freqs.getOrDefault(n, 0) + 1\n    }\n    val goodVals = freqs.filter { (k, v) -> v >= k }.map { (k, _) -> k }\n    return goodVals.maxOrNull() ?: -1\n}\n",
            "fun strangeSortList(lst: List<Int>): List<Int> {\n    val sl = lst.sorted()\n    val result = mutableListOf<Int>()\n    var left = 0\n    var right = sl.size - 1\n    while (left <= right) {\n        result.add(sl[left])\n        left += 1\n        if (left <= right) {\n            result.add(sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "fun triangleArea(a: Int, b: Int, c: Int): Double {\n    if (a + b > c && a + c > b && b + c > a) {\n        val s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        return -1.0\n    }\n}\n",
            "fun willItFly(q: List<Int>, w: Int): Boolean {\n    if (q.isEmpty()) {\n        return false\n    }\n    val isPalin = q.indices.all { i -> q[i] == q[q.size - i - 1] }\n    val total = q.sum()\n    return isPalin && total <= w\n}\n",
            "fun smallestChange(arr: List<Int>): Int {\n    var ans = 0\n    for (i in 0 until arr.size / 2) {\n        if (arr[i] != arr[arr.size - i - 1]) {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "fun totalMatch(lst1: List<String>, lst2: List<String>): List<String> {\n    val cnt1 = lst1.sumOf { it.length }\n    val cnt2 = lst2.sumOf { it.length }\n    return if (cnt1 <= cnt2) lst1 else lst2\n}\n",
            "fun isMultiplyPrime(a: Int): Boolean {\n    var cnt = 0\n    for (i in 2..a + 1) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\nfun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..sqrt(n.toDouble()).toInt() + 1) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun isSimplePower(x: Int, n: Int): Boolean {\n    if (n < 2) {\n        return x == n\n    }\n    var tmp = 1\n    while (tmp < x) {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "fun isCube(a: Int): Boolean {\n    val a = abs(a)\n    val root = round(pow(a, 1.0 / 3.0)).toInt()\n    return root * root * root == a\n}\n",
            "fun hexKey(num: String): Int {\n    return num.filter { it in \"2357BD\" }.count()\n}\n",
            "fun decimalToBinary(dec: Int): String {\n    val binary = bin(dec)[2:]\n    return f\"db{binary}db\"\n}\n",
            "fun isHappy(s: String): Boolean {\n    if (s.length < 3) {\n        return false\n    }\n    for (i in 0 until s.length - 2) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun numericalLetterGrade(grades: List<Double>): List<String> {\n    val result = mutableListOf<String>()\n    for (g in grades) {\n        if (g == 4.0) {\n            result.add(\"A+\")\n        } else if (g > 3.7) {\n            result.add(\"A\")\n        } else if (g > 3.3) {\n            result.add(\"A-\")\n        } else if (g > 3.0) {\n            result.add(\"B+\")\n        } else if (g > 2.7) {\n            result.add(\"B\")\n        } else if (g > 2.3) {\n            result.add(\"B-\")\n        } else if (g > 2.0) {\n            result.add(\"C+\")\n        } else if (g > 1.7) {\n            result.add(\"C\")\n        } else if (g > 1.3) {\n            result.add(\"C-\")\n        } else if (g > 1.0) {\n            result.add(\"D+\")\n        } else if (g > 0.7) {\n            result.add(\"D\")\n        } else if (g > 0.0) {\n            result.add(\"D-\")\n        } else {\n            result.add(\"E\")\n        }\n    }\n    return result\n}\n",
            "fun primeLength(s: String): Boolean {\n    val length = s.length\n    if (length < 2) {\n        return false\n    }\n    for (i in 2..sqrt(length.toDouble()).toInt() + 1) {\n        if (length % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun startsOneEnds(n: Int): Int {\n    if (n == 1) {\n        return 1\n    }\n    return 2 * 9 * (10.pow(n - 2))\n}\n",
            "fun solve(n: Int): String {\n    val digitsSum = n.toString().map { it.toString().toInt() }.sum()\n    return digitsSum.toString(2)\n}\n",
            "fun add(lst: List<Int>): Int {\n    return lst.filterIndexed { index, x -> index % 2 == 1 && x % 2 == 0 }.sum()\n}\n",
            "fun antiShuffle(s: String): String {\n    val words = s.split(\" \").map { \"\".join(it.toCharArray().sorted()) }\n    return words.joinToString(\" \")\n}\n",
            "fun getRow(lst: List<List<Int>>, x: Int): List<List<Int>> {\n    val coords = mutableListOf<List<Int>>()\n    for (i in lst.indices) {\n        for (j in lst[i].indices) {\n            if (lst[i][j] == x) {\n                coords.add(listOf(i, j))\n            }\n        }\n    }\n    return coords.sortedWith(compareBy({ it[0] }, { -it[1] }))\n}\n",
            "fun sortArray(arr: List<Int>): List<Int> {\n    if (arr.size == 0) {\n        return listOf()\n    }\n    if ((arr[0] + arr[arr.size - 1]) % 2 == 0) {\n        return arr.sortedDescending()\n    } else {\n        return arr.sorted()\n    }\n}\n",
            "fun encrypt(s: String): String {\n    val result = ArrayList<String>()\n    for (ch in s) {\n        val shifted = ch.toInt() + 4\n        if (shifted > 'z'.toInt()) {\n            shifted -= 26\n        }\n        result.add(shifted.toChar().toString())\n    }\n    return result.joinToString(\"\")\n}\n",
            "fun nextSmallest(lst: List<Int>): Int? {\n    val sl = sortedSetOf<Int>().apply { addAll(lst) }\n    return if (sl.size < 2) null else sl[1]\n}\n",
            "fun isBored(s: String): Int {\n    val sentences = s.split(Regex(\"[.!?]\\\\s*\"))\n    return sentences.filter { it.length >= 2 }.sumOf { if (it.substring(0, 2) == \"I \") 1 else 0 }\n}\n",
            "fun anyInt(x: Any, y: Any, z: Any): Boolean {\n    if (x is Int && y is Int && z is Int) {\n        if (x + y == z || x + z == y || y + z == x) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun encode(message: String): String {\n    val vowels = \"aeiouAEIOU\"\n    val result = ArrayList<String>()\n    for (ch in message) {\n        if (ch.isLetter()) {\n            val ch1 = if (ch.isLowerCase()) ch.toUpperCase() else ch.toLowerCase()\n            if (ch1 in vowels) {\n                ch1 = ch1.plus(2)\n            }\n            result.add(ch1)\n        } else {\n            result.add(ch.toString())\n        }\n    }\n    return result.joinToString(\"\")\n}\n",
            "fun skjkasdkd(lst: List<Int>): Int {\n    val primes = lst.filter { is_prime(it) }\n    if (primes.isEmpty()) {\n        return 0\n    }\n    val largest = primes.max()!!.toString()\n    return largest.map { it.toString().toInt() }.sum()\n}\nfun is_prime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun checkDictCase(d: Map<String,String>): Boolean {\n    if (d.isEmpty()) {\n        return false\n    }\n    return d.keys.all { it.isLowerCase() } || d.keys.all { it.isUpperCase() }\n}\n",
            "fun countUpTo(n: Int): List<Int> {\n    val primes = ArrayList<Int>()\n    for (num in 2 until n) {\n        if (primes.all { num % it != 0 }) {\n            primes.add(num)\n        }\n    }\n    return primes\n}\n",
            "fun multiply(a: Int, b: Int): Int {\n    return (abs(a) % 10) * (abs(b) % 10)\n}\n",
            "fun countUpper(s: String): Int {\n    val vowels = \"AEIOU\"\n    return s.filterIndexed { i, c -> i % 2 == 0 && vowels.contains(c) }.count()\n}\n",
            "fun closestInteger(value: String): Int {\n    val num = value.toFloat()\n    if (num >= 0) {\n        return num.toInt() + 0.5\n    } else {\n        return num.toInt() - 0.5\n    }\n}\n",
            "fun makeAPile(n: Int): List<Int> {\n    return (0 until n).map { n + 2 * it }\n}\n",
            "fun wordsString(s: String): List<String> {\n    return s.split(Regex(\"[, ]\")).filter { it.length > 0 }\n}\n",
            "fun chooseNum(x: Int, y: Int): Int {\n    if (x > y) {\n        return -1\n    }\n    if (y % 2 == 0) {\n        return y\n    }\n    return if (x != y) y - 1 else -1\n}\n",
            "fun roundedAvg(n: Int, m: Int): String? {\n    if (n > m) {\n        return null\n    }\n    val rAvg = (m + n) / 2.0 + 0.5\n    return rAvg.toString()\n}\n",
            "fun uniqueDigits(x: List<Int>): List<Int> {\n    return x.filter { num -> all_digits_odd(num.toString()) }.sorted()\n}\n",
            "fun byLength(arr: List<Int>): List<String> {\n    val digitNames = arrayOf(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    val sortedArr = sorted(arr.filter { 1 <= it && it <= 9 }, reverse = true)\n    return sortedArr.map { digitNames[it - 1] }\n}\n",
            "fun f(n: Int): List<Int> {\n    val nums = (1..n).toList()\n    return nums.mapIndexed { i, _ ->\n        if (i % 2 != 0) {\n            nums.take(i).sum()\n        } else {\n            nums.take(i).reduce { x, y -> x * y }\n        }\n    }\n}\n",
            "fun evenOddPalindrome(n: Int): List<Int> {\n    val cnt = arrayOf(0, 0)\n    for (i in 1..n) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt.toList()\n}\nfun isPalindrome(txt: String): Boolean {\n    return txt == txt.reversed()\n}\n",
            "fun countNums(arr: List<Int>): Int {\n    return arr.filter { digitsSum(it) > 0 }.size\n}\nfun digitsSum(n: Int): Int {\n    val nStr = n.toString()\n    return if (n >= 0) {\n        nStr.map { it.toString().toInt() }.sum()\n    } else {\n        (nStr.substring(0, 2).toInt() * 2) + digitsSum(n.absoluteValue)\n    }\n}\n",
            "fun moveOneBall(arr: List<Int>): Boolean {\n    if (arr.isEmpty()) {\n        return true\n    }\n    val sortedArr = arr.sorted()\n    for (i in 0 until arr.size) {\n        if (arr.subList(i, arr.size) == sortedArr.subList(0, arr.size - i) && arr.subList(0, i) == sortedArr.subList(arr.size - i, arr.size)) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun canExchange(lst1: List<Int>, lst2: List<Int>): String {\n    val oddCnt = lst1.filter { it % 2 != 0 }.size\n    val evenCnt = lst2.filter { it % 2 == 0 }.size\n    return if (evenCnt >= oddCnt) \"YES\" else \"NO\"\n}\n",
            "fun histogram(test: String): Map<String,Int> {\n    val freq = HashMap<String, Int>()\n    val words = test.split(\" \").filter { w -> w.length > 0 }\n    for (w in words) {\n        freq[w] = freq.getOrDefault(w, 0) + 1\n    }\n    val result = HashMap<String, Int>()\n    if (freq.size > 0) {\n        val max_freq = freq.values.max()\n        for ((k, v) in freq) {\n            if (v == max_freq) {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "fun reverseDelete(s: String, c: String): List<String> {\n    val s1 = s.filter { it !in c }.joinToString(\"\")\n    return listOf(s1, if (isPalindrome(s1)) \"yes\" else \"no\")\n}\nfun isPalindrome(s: String): Boolean {\n    return s == s.reversed()\n}\n",
            "fun oddCount(lst: List<String>): List<String> {\n    val result = ArrayList<String>()\n    for (num in lst) {\n        val n = num.sumOf { it.toInt() % 2 == 1 }\n        val rs = \"the number of odd elements in the string i of the input.\"\n        result.add(rs.replace(\"i\", n.toString()))\n    }\n    return result\n}\n",
            "fun minSubArraySum(nums: List<Int>): Int {\n    var minSum = 0\n    var curSum = 0\n    for (n in nums) {\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if (minSum == 0) {\n        minSum = min(nums)\n    }\n    return minSum\n}\n",
            "fun maxFill(grid: List<List<Int>>, capacity: Int): Int {\n    return grid.sumOf { ceil(it.sum() / capacity) }\n}\n",
            "fun sortArray(arr: List<Int>): List<Int> {\n    return arr.sortedWith(compareBy({ it.toString(2).count { it == '1' } }, { it })\n}\n",
            "fun selectWords(s: String, n: Int): List<String> {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\"\n    val words = s.split(\" \").filter { it.isNotEmpty() }\n    return words.filter { it.count { c -> c.lowercaseChar() in consonants } == n }\n}\n",
            "fun getClosestVowel(word: String): String {\n    val vowels = \"aeiouAEIOU\"\n    for (i in word.length - 2 downTo 1) {\n        if (word[i] in vowels && word[i - 1] !in vowels && word[i + 1] !in vowels) {\n            return word[i]\n        }\n    }\n    return \"\"\n}\n",
            "fun matchParens(lst: List<String>): String {\n    val s1 = lst[0] + lst[1]\n    val s2 = lst[1] + lst[0]\n    return if (check(s1) || check(s2)) \"Yes\" else \"No\"\n}\nfun check(s: String): Boolean {\n    var depth = 0\n    for (ch in s) {\n        if (ch == \"(\") {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "fun maximum(arr: List<Int>, k: Int): List<Int> {\n    if (k == 0) {\n        return listOf()\n    }\n    return arr.sorted().takeLast(k)\n}\n",
            "fun solution(lst: List<Int>): Int {\n    return lst.filterIndexed { index, x -> index % 2 == 0 && x % 2 != 0 }.sum()\n}\n",
            "fun addElements(arr: List<Int>, k: Int): Int {\n    return arr.take(k).filter { it.toString().length <= 2 }.sum()\n}\n",
            "fun getOddCollatz(n: Int): List<Int> {\n    val collatz = listOf(1)\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.add(n)\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    return collatz.sorted()\n}\n",
            "fun validDate(date: String): Boolean {\n    if (!date.length == 10 || !date[2] == \"-\" || !date[5] == \"-\") {\n        return false\n    }\n    val m = date.substring(0, 2).toInt()\n    val d = date.substring(3, 5).toInt()\n    if (m in listOf(1, 3, 5, 7, 8, 10, 12) && d >= 1 && d <= 31) {\n        return true\n    }\n    if (m in listOf(4, 6, 9, 11) && d >= 1 && d <= 30) {\n        return true\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true\n    }\n    return false\n}\n",
            "fun splitWords(txt: String): List<String> {\n    if (\" \" in txt) {\n        return txt.split(\" \")\n    } else if (\",\" in txt) {\n        return txt.split(\",\")\n    } else {\n        return listOf(txt.count { it.isLowerCase() && it.toInt() % 2 == 0 }.toString())\n    }\n}\n",
            "fun isSorted(lst: List<Int>): Boolean {\n    if (!lst.indices.all { i -> lst[i - 1] <= lst[i] }) {\n        return false\n    }\n    val freq = mutableMapOf<Int, Int>()\n    for (i in lst) {\n        freq[i] = freq.getOrDefault(i, 0) + 1\n    }\n    return freq.values.maxOrNull() ?: 0 <= 2\n}\n",
            "fun intersection(interval1: List<Int>, interval2: List<Int>): String {\n    val l = max(interval1[0], interval2[0])\n    val r = min(interval1[1], interval2[1])\n    val length = r - l\n    return if (length > 0 && is_prime(length)) \"YES\" else \"NO\"\n}\n",
            "fun prodSigns(arr: List<Int>): Int? {\n    if (arr.isEmpty()) {\n        return null\n    }\n    val sign = if (arr.count { it < 0 } % 2 == 1) {\n        -1\n    } else {\n        1\n    }\n    return sign * arr.sumOf { it.absoluteValue }\n}\n",
            "fun minPath(grid: List<List<Int>>, k: Int): List<Int> {\n    val n = grid.size\n    var minVal = n * n + 1\n    for (i in 0 until n) {\n        for (j in 0 until n) {\n            if (grid[i][j] == 1) {\n                val temp = mutableListOf<Int>()\n                if (i != 0) {\n                    temp.add(grid[i - 1][j])\n                }\n                if (j != 0) {\n                    temp.add(grid[i][j - 1])\n                }\n                if (i != n - 1) {\n                    temp.add(grid[i + 1][j])\n                }\n                if (j != n - 1) {\n                    temp.add(grid[i][j + 1])\n                }\n                minVal = temp.min() ?: minVal\n            }\n        }\n    }\n    val result = mutableListOf<Int>()\n    for (i in 0 until k) {\n        result.add(if (i % 2 == 0) 1 else minVal)\n    }\n    return result\n}\n",
            "fun tri(n: Int): List<Int> {\n    if (n == 0) {\n        return listOf(1)\n    }\n    val seq = mutableListOf(1, 3)\n    for (i in 2..n + 1) {\n        if (i % 2 == 0) {\n            seq.add(i / 2 + 1)\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "fun digits(n: Int): Int {\n    val odds = n.toString().filter { it.toInt() % 2 == 1 }.map { it.toInt() }\n    return odds.reduce { x, y -> x * y }\n}\n",
            "fun isNested(s: String): Boolean {\n    val openIdx = ArrayList<Int>()\n    val closeIdx = ArrayList<Int>()\n    for (i in s.indices) {\n        val ch = s[i]\n        if (ch == '[') {\n            openIdx.add(i)\n        } else if (ch == ']') {\n            closeIdx.add(i)\n        }\n    }\n    closeIdx.reverse()\n    var cnt = 0\n    var i = 0\n    val l = closeIdx.size\n    for (idx in openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\n",
            "fun sumSquares(lst: List<Double>): Int {\n    return lst.map { ceil(it).pow(2) }.sum()\n}\n",
            "fun checkIfLastCharIsALetter(txt: String): Boolean {\n    if (txt.isEmpty()) {\n        return false\n    }\n    val last = txt.substring(txt.lastIndexOf(' ') + 1)\n    return last.length == 1 && last[0].isLetter()\n}\n",
            "fun canArrange(arr: List<Int>): Int {\n    if (arr.size <= 1) {\n        return -1\n    }\n    val idx = (1 until arr.size).filter { arr[it] < arr[it - 1] }\n    return idx.maxOrNull() ?: -1\n}\n",
            "fun largestSmallestIntegers(lst: List<Int>): List<Int?> {\n    val neg = lst.filter { it < 0 }\n    val pos = lst.filter { it > 0 }\n    val maxNeg = neg.maxOrNull()\n    val minPos = pos.minOrNull()\n    return listOf(maxNeg, minPos)\n}\n",
            "fun compareOne(a: Any, b: Any): Double? {\n    val a1 = anyToReal(a)\n    val b1 = anyToReal(b)\n    return if (a1 == b1) {\n        null\n    } else if (a1 > b1) {\n        a1\n    } else {\n        b1\n    }\n}\nfun anyToReal(o: Any): Double {\n    return if (o is String) {\n        o.replace(',', '.').toDouble()\n    } else if (o is Int) {\n        o.toDouble()\n    } else if (o is Float) {\n        o.toDouble()\n    } else {\n        throw RuntimeException(\"Type Error\")\n    }\n}\n",
            "fun isEqualToSumEven(n: Int): Boolean {\n    return n % 2 == 0 && n >= 8\n}\n",
            "fun specialFactorial(n: Int): Int {\n    var fact = 1\n    var result = 1\n    for (i in 1..n) {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "fun fixSpaces(txt: String): String {\n    return txt.replace(\" \", \"_\").replace(Regex(\"\\\\s{3,}\"), \"-\")\n}\n",
            "fun fileNameCheck(fileName: String): String {\n    val suf = arrayOf(\"txt\", \"exe\", \"dll\")\n    val lst = fileName.split(\".\")\n    if (lst.size != 2 || !lst[1] in suf || lst[0].length == 0 || !lst[0][0].isLetter() || lst[0].count { it.isDigit() } > 3) {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "fun sumSquares(lst: List<Int>): Int {\n    var result = 0\n    for (i in lst.indices) {\n        if (i % 3 == 0) {\n            result += Math.pow(lst[i], 2.0)\n        } else if (i % 4 == 0) {\n            result += Math.pow(lst[i], 3.0)\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "fun wordsInSentence(sentence: String): String {\n    if (sentence.length < 2) {\n        return false\n    }\n    for (i in 2..floor(sqrt(n)) + 1) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun simplify(x: String, n: String): Boolean {\n    val xs = x.split(\"/\")\n    val ns = n.split(\"/\")\n    val num = xs[0].toInt() * ns[0].toInt()\n    val den = xs[1].toInt() * ns[1].toInt()\n    return num % den == 0\n}\n",
            "fun orderByPoints(nums: List<Int>): List<Int> {\n    fun digitsSum(n: Int): Int {\n        val nStr = n.toString()\n        return if (n >= 0) {\n            nStr.map { it.toInt() }.sum()\n        } else {\n            (nStr.take(2).toInt() * 2) + digitsSum(n.absoluteValue)\n        }\n    }\n    return nums.sortedBy { digitsSum(it) }\n}\n",
            "fun specialFilter(nums: List<Int>): Int {\n    val odds = \"13579\"\n    return nums.filter { it > 10 && it % 2 == 1 && odds.contains(it.toString()[0]) }.size\n}\n",
            "fun getMaxTriples(n: Int): Int {\n    var c = intArrayOf(0, 0, 0)\n    for (i in 1..n) {\n        var a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n}\n",
            "fun bf(planet1: String, planet2: String): List<String> {\n    val names = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (!names.contains(planet1) || !names.contains(planet2)) {\n        return listOf()\n    }\n    val l = names.indexOf(planet1)\n    val r = names.indexOf(planet2)\n    if (l > r) {\n        val tmp = l\n        l = r\n        r = tmp\n    }\n    if (l == r) {\n        return listOf()\n    }\n    return names.subList(l + 1, r)\n}\n",
            "fun sortedListSum(lst: List<String>): List<String> {\n    val result = lst.filter { it.length % 2 == 0 }\n    return result.sortedWith(compareBy({ it.length }, { it }))\n}\n",
            "fun xOrY(n: Int, x: Int, y: Int): Int {\n    if (n < 2) {\n        return y\n    }\n    for (i in 2..floor(sqrt(n.toDouble()) + 1) {\n        if (n % i == 0) {\n            return y\n        }\n    }\n    return x\n}\n",
            "fun doubleTheDifference(lst: List<Double>): Int {\n    return lst.filter { it >= 0 && it % 2 == 1 }.map { it * it }.sum()\n}\n",
            "fun compare(game: List<Int>, guess: List<Int>): List<Int> {\n    return game.zip(guess).map { abs(it.first - it.second) }\n}\n",
            "fun strongestExtension(className: String, extensions: List<String>): String {\n    var max_s = Float.NEGATIVE_INFINITY\n    var max_ext = \"\"\n    for (ext in extensions) {\n        val upper = ext.count { it.isUpperCase() }\n        val lower = ext.count { it.isLowerCase() }\n        val s = upper - lower\n        if (s > max_s) {\n            max_s = s\n            max_ext = ext\n        }\n    }\n    return \"$className.$max_ext\"\n}\n",
            "fun cycpatternCheck(a: String, b: String): Boolean {\n    if (a.length < b.length) {\n        return false\n    }\n    for (i in 0 until b.length) {\n        if (b.substring(i) + b.substring(0, i) in a) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun evenOddCount(num: Int): List<Int> {\n    val ds = abs(num).toString()\n    val even = ds.count { ord(it) % 2 == 0 }\n    return listOf(even, ds.length - even)\n}\n",
            "fun intToMiniRoman(num: Int): String {\n    val values = listOf(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    val numerals = listOf(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    val res = mutableListOf<String>()\n    for (i in values.indices) {\n        while (num >= values[i]) {\n            res.add(numerals[i])\n            num -= values[i]\n        }\n    }\n    return res.joinToString(\"\")\n}\n",
            "fun rightAngleTriangle(a: Int, b: Int, c: Int): Boolean {\n    val s = sorted(listOf(a, b, c))\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "fun findMax(words: List<String>): String {\n    var max_cnt = 0\n    var max_w = \"\"\n    for (w in words) {\n        val cnt = w.toSet().size\n        if (cnt > max_cnt) {\n            max_cnt = cnt\n            max_w = w\n        } else if (cnt == max_cnt) {\n            max_w = minOf(max_w, w)\n        }\n    }\n    return max_w\n}\n",
            "fun eat(num: Int, need: Int, remaining: Int): List<Int> {\n    if (need <= remaining) {\n        return listOf(num + need, remaining - need)\n    } else {\n        return listOf(num + remaining, 0)\n    }\n}\n",
            "fun doAlgebra(operators: List<String>, operands: List<Int>): Int {\n    val ops = operators.toMutableList()\n    val nums = operands.toMutableList()\n    var i = ops.size - 1\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = Math.pow(nums[i].toDouble(), nums[i + 1].toDouble()).toInt()\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n        }\n        i -= 1\n    }\n    i = 0\n    while (i < ops.size) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] / nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while (i < ops.size) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "fun solve(s: String): String {\n    if (!s.any { it.isAlpha() }) {\n        return s.reversed()\n    }\n    val result = mutableListOf<Char>()\n    for (ch in s) {\n        if (!ch.isAlpha()) {\n            result.add(ch)\n        } else if (ch.isUpper()) {\n            result.add(ch.lower())\n        } else if (ch.isLower()) {\n            result.add(ch.upper())\n        }\n    }\n    return result.joinToString(\"\")\n}\n",
            "fun stringToMd5(txt: String): String? {\n    if (!txt) {\n        return null\n    }\n    val md5Hash = hashlib.md5()\n    val txtBytes = txt.encode()\n    md5Hash.update(txtBytes)\n    val md5Encoded = md5Hash.hexdigest()\n    return md5Encoded\n}\n",
            "fun generateIntegers(a: Int, b: Int): List<Int> {\n    val lower = max(2, min(a, b))\n    val upper = min(8, max(a, b))\n    return (lower..upper).filter { it % 2 == 0 }\n}\n"
        ],
        "php": [
            "/**\n * @param {array<float>} $numbers\n * @param {float} $threshold\n * @returns {bool}\n */\nfunction hasCloseElements ($numbers, $threshold) {\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {string} $parenString\n * @returns {array<string>}\n */\nfunction separateParenGroups ($parenString) {\n    $groups = [];\n    $stk = [];\n    $currentGroup = \"\";\n    $parens = $parenString->replace(\" \", \"\");\n    foreach ($ch in $parens) {\n        if ($ch == \"(\") {\n            $stk->append($ch);\n            $currentGroup += $ch;\n        } else if ($ch == \")\") {\n            $stk->pop();\n            $currentGroup += $ch;\n            if (!$stk) {\n                $groups->append($currentGroup);\n                $currentGroup = \"\";\n            }\n        }\n    }\n    return $groups;\n}\n",
            "/**\n * @param {float} $num\n * @returns {float}\n */\nfunction truncateNumber ($num) {\n    return $num - floor($num);\n}\n",
            "/**\n * @param {array<int>} $operations\n * @returns {bool}\n */\nfunction belowZero ($operations) {\n    $balance = 0;\n    foreach ($operations as $op) {\n        $balance += $op;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {array<float>} $numbers\n * @returns {float}\n */\nfunction meanAbsoluteDeviation ($numbers) {\n    $mean = array_sum($numbers) / count($numbers);\n    $deviation = array_sum(array_map(function ($x) use ($mean) {\n        return abs($x - $mean);\n    }, $numbers));\n    return $deviation / count($numbers);\n}\n",
            "/**\n * @param {array<int>} $numbers\n * @param {int} $delimiter\n * @returns {array<int>}\n */\nfunction intersperse ($numbers, $delimiter) {\n    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        if ($i != 0) {\n            $result[] = $delimiter;\n        }\n        $result[] = $numbers[$i];\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $parenString\n * @returns {array<int>}\n */\nfunction parseNestedParens ($parenString) {\n    $result = [];\n    $parenGroups = explode(\" \", $parenString);\n    foreach ($parenGroups as $group) {\n        $maxDepth = 0;\n        $depth = 0;\n        foreach (str_split($group) as $ch) {\n            if ($ch == \"(\") {\n                $depth += 1;\n                $maxDepth = max($maxDepth, $depth);\n            } elseif ($ch == \")\") {\n                $depth -= 1;\n            }\n        }\n        $result[] = $maxDepth;\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<string>} $strs\n * @param {string} $substring\n * @returns {array<string>}\n */\nfunction filterBySubstring ($strs, $substring) {\n    return array_filter($strs, function ($s) use ($substring) {\n        return strpos($s, $substring) !== false;\n    });\n}\n",
            "/**\n * @param {array<int>} $numbers\n * @returns {array<int>}\n */\nfunction sumProduct ($numbers) {\n    $n_sum = array_sum($numbers);\n    $n_product = array_reduce($numbers, function ($x, $y) {\n        return $x * $y;\n    }, 1);\n    return [$n_sum, $n_product];\n}\n",
            "/**\n * @param {array<int>} $numbers\n * @returns {array<int>}\n */\nfunction rollingMax ($numbers) {\n    $max_so_far = float(\"-inf\");\n    $result = [];\n    foreach ($numbers as $num) {\n        $max_so_far = max($max_so_far, $num);\n        $result[] = $max_so_far;\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction makePalindrome ($s) {\n    if (isPalindrome($s)) {\n        return $s;\n    }\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (isPalindrome(substr($s, $i))) {\n            return $s . strrev(substr($s, 0, $i));\n        }\n    }\n    return \"\";\n}\n/**\n * @param {string} $s\n * @returns {boolean}\n */\nfunction isPalindrome ($s) {\n    return $s == strrev($s);\n}\n",
            "/**\n * @param {string} $a\n * @param {string} $b\n * @returns {string}\n */\nfunction stringXor ($a, $b) {\n    return join([\"0\" if x == y else \"1\" for x, y in zip(a, b)]);\n}\n",
            "/**\n * @param {array<string>} $strs\n * @returns {string | null}\n */\nfunction longest ($strs) {\n    if (!$strs) {\n        return null;\n    }\n    $longest_s = $strs[0];\n    foreach ($strs as $s) {\n        if (strlen($s) > strlen($longest_s)) {\n            $longest_s = $s;\n        }\n    }\n    return $longest_s;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @returns {int}\n */\nfunction greatestCommonDivisor ($a, $b) {\n    if ($b == 0) {\n        return $a;\n    } else {\n        return greatestCommonDivisor($b, $a % $b);\n    }\n}\n",
            "/**\n * @param {string} $s\n * @returns {array<string>}\n */\nfunction allPrefixes ($s) {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $prefixes[] = substr($s, 0, $i + 1);\n    }\n    return $prefixes;\n}\n",
            "/**\n * @param {int} $n\n * @returns {string}\n */\nfunction stringSequence ($n) {\n    return implode(\" \", range(1, $n + 1));\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction countDistinctCharacters ($s) {\n    return count(array_unique(str_split(strtolower($s))));\n}\n",
            "/**\n * @param {string} $musicString\n * @returns {array<int>}\n */\nfunction parseMusic ($musicString) {\n    $durations = [\"o\" => 4, \"o|\" => 2, \".|\" => 1];\n    $notes = explode(\" \", $musicString);\n    return array_map(function ($note) use ($durations) {\n        return $durations[$note];\n    }, $notes);\n}\n",
            "/**\n * @param {string} $s\n * @param {string} $substring\n * @returns {int}\n */\nfunction howManyTimes ($s, $substring) {\n    $times = 0;\n    for ($i = 0; $i < strlen($s) - strlen($substring) + 1; $i++) {\n        if (substr($s, $i, strlen($substring)) == $substring) {\n            $times += 1;\n        }\n    }\n    return $times;\n}\n",
            "/**\n * @param {string} $numbers\n * @returns {string}\n */\nfunction sortNumbers ($numbers) {\n    $num_dict = [\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n    ];\n    $num_list = array_filter(explode(\" \", $numbers), function ($x) use ($num_dict) {\n        return in_array($x, $num_dict);\n    });\n    usort($num_list, function ($x, $y) use ($num_dict) {\n        return $num_dict[$x] - $num_dict[$y];\n    });\n    return implode(\" \", $num_list);\n}\n",
            "/**\n * @param {array<float>} $numbers\n * @returns {array<float>}\n */\nfunction findClosestElements ($numbers) {\n    $sorted_numbers = sort($numbers);\n    $min_diff = float(\"inf\");\n    $closest_pair = [];\n    for ($i = 1; $i < count($sorted_numbers); $i++) {\n        $diff = $sorted_numbers[$i] - $sorted_numbers[$i - 1];\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $closest_pair = [$sorted_numbers[$i - 1], $sorted_numbers[$i]];\n        }\n    }\n    return $closest_pair;\n}\n",
            "/**\n * @param {array<float>} $numbers\n * @returns {array<float>}\n */\nfunction rescaleToUnit ($numbers) {\n    $min_num = min($numbers);\n    $max_num = max($numbers);\n    if ($min_num == $max_num) {\n        return array_fill(0, count($numbers), 0.0);\n    } else {\n        $result = array();\n        foreach ($numbers as $num) {\n            array_push($result, ($num - $min_num) / ($max_num - $min_num));\n        }\n        return $result;\n    }\n}\n",
            "/**\n * @param {array<mixed>} $values\n * @returns {array<int>}\n */\nfunction filterIntegers ($values) {\n    return array_filter($values, function ($x) {\n        return is_int($x);\n    });\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction strLength ($s) {\n    return strlen($s);\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction largestDivisor ($n) {\n    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            return $n / $i;\n        }\n    }\n    return 1;\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction factorize ($n) {\n    $factors = [];\n    $divisor = 2;\n    while ($divisor <= $n) {\n        if ($n % $divisor == 0) {\n            $factors[] = $divisor;\n            $n //= $divisor;\n        } else {\n            $divisor += 1;\n        }\n    }\n    return $factors;\n}\n",
            "/**\n * @param {array<int>} $numbers\n * @returns {array<int>}\n */\nfunction removeDuplicates ($numbers) {\n    $counts = [];\n    foreach ($numbers as $num) {\n        $counts[$num] = $counts.get($num, 0) + 1;\n    }\n    $res = [$num for $num in $numbers if $counts[$num] == 1];\n    return $res;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction flipCase ($s) {\n    $flipped = [];\n    foreach ($s as $ch) {\n        if (!ctype_alpha($ch)) {\n            $flipped[] = $ch;\n        } elseif (ctype_lower($ch)) {\n            $flipped[] = strtoupper($ch);\n        } elseif (ctype_upper($ch)) {\n            $flipped[] = strtolower($ch);\n        }\n    }\n    return implode('', $flipped);\n}\n",
            "/**\n * @param {array<string>} $strs\n * @returns {string}\n */\nfunction concatenate ($strs) {\n    return implode(\"\", $strs);\n}\n",
            "/**\n * @param {array<string>} $strs\n * @param {string} $prefixStr\n * @returns {array<string>}\n */\nfunction filterByPrefix ($strs, $prefixStr) {\n    return array_filter($strs, function ($s) use ($prefixStr) {\n        return strpos($s, $prefixStr) === 0;\n    });\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction getPositive ($l) {\n    return array_filter($l, function ($num) {\n        return $num > 0;\n    });\n}\n",
            "/**\n * @param {int} $n\n * @returns {bool}\n */\nfunction isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)) + 1; $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {array<int>} $xs\n * @param {float} $x\n * @returns {float}\n */\nfunction poly ($xs, $x) {\n    $res = 0.0;\n    for ($i = 0; $i < count($xs); $i++) {\n        $res += $xs[$i] * pow($x, $i);\n    }\n    return $res;\n}\n/**\n * @param {array<int>} $xs\n * @returns {float}\n */\nfunction findZero ($xs) {\n    $x1 = 1.0;\n    $x2 = -1.0;\n    while (poly($xs, $x1) * poly($xs, $x2) > 0) {\n        $x1 *= 2;\n        $x2 *= 2;\n    }\n    while (abs($x1 - $x2) > 1e-10) {\n        $mid = ($x1 + $x2) / 2;\n        if (poly($xs, $mid) == 0) {\n            return $mid;\n        } else if (poly($xs, $mid) * poly($xs, $x1) < 0) {\n            $x2 = $mid;\n        } else {\n            $x1 = $mid;\n        }\n    }\n    return ($x1 + $x2) / 2;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction sortThird ($l) {\n    $sorted_third = sort($l[::3]);\n    return [$sorted_third[i // 3] if i % 3 == 0 else $l[i] for i in range(len($l))]\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction listUnique ($l) {\n    return array_values(array_unique($l));\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {int}\n */\nfunction maxElement ($l) {\n    if (!$l) {\n        return 0;\n    }\n    return max($l);\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fizzBuzz ($n) {\n    $cnt = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            $cnt += substr_count(strval($i), \"7\");\n        }\n    }\n    return $cnt;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction sortEven ($l) {\n    $sorted_even = sort($l[::2]);\n    return [$sorted_even[i // 2] if i % 2 == 0 else $l[i] for i in range(len($l))];\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction encodeCyclic ($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i += 3) {\n        if ($i + 3 > strlen($s)) {\n            $result[] = substr($s, $i);\n        } else {\n            $result[] = substr($s, $i + 1, 2);\n            $result[] = substr($s, $i, 1);\n        }\n    }\n    return implode(\"\", $result);\n}\n/**\n * @param {string} $s\n * @returns {string}\n */\nfunction decodeCyclic ($s) {\n    return encodeCyclic(encodeCyclic($s));\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction primeFib ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    $cnt = 0;\n    $f = [0, 1];\n    while ($cnt < $n) {\n        $f = [$f[1], $f[0] + $f[1]];\n        if (isPrime($f[1])) {\n            $cnt += 1;\n        }\n    }\n    return $f[1];\n}\n/**\n * @param {int} $n\n * @returns {bool}\n */\nfunction isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)) + 1; $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {bool}\n */\nfunction triplesSumToZero ($l) {\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            for ($k = $j + 1; $k < count($l); $k++) {\n                if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction carRaceCollision ($n) {\n    return $n ** 2;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction incrList ($l) {\n    return array_map(function ($i) {\n        return $i + 1;\n    }, $l);\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {bool}\n */\nfunction pairsSumToZero ($l) {\n    $seen = array();\n    foreach ($l as $num) {\n        if (in_array(-$num, $seen)) {\n            return true;\n        }\n        array_push($seen, $num);\n    }\n    return false;\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $bas\n * @returns {string}\n */\nfunction changeBase ($x, $bas) {\n    if ($x == 0) {\n        return \"0\";\n    }\n    $digits = [];\n    while ($x > 0) {\n        $digits[] = str($x % $bas);\n        $x //= $bas;\n    }\n    return join($digits[::-1]);\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $h\n * @returns {float}\n */\nfunction triangleArea ($a, $h) {\n    return $a * $h / 2;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fib4 ($n) {\n    $fib = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib[$i % 4] = sum($fib);\n    }\n    return $fib[$n % 4];\n}\n",
            "/**\n * @param {array<float>} $l\n * @returns {float}\n */\nfunction median ($l) {\n    $sl = sort($l);\n    if (len($l) % 2 != 0) {\n        return $sl[len($l) // 2];\n    } else {\n        return ($sl[len($l) // 2] + $sl[len($l) // 2 - 1]) / 2;\n    }\n}\n",
            "/**\n * @param {string} $txt\n * @returns {bool}\n */\nfunction isPalindrome ($txt) {\n    return $txt == strrev($txt);\n}\n",
            "/**\n * @param {int} $n\n * @param {int} $p\n * @returns {int}\n */\nfunction modp ($n, $p) {\n    $ret = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $ret = ($ret * 2) % $p;\n    }\n    return $ret;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction encodeShift ($s) {\n    $result = array_map(function ($ch) {\n        return chr(((ord($ch) - 97 + 5) % 26) + 97);\n    }, str_split($s));\n    return implode(\"\", $result);\n}\n/**\n * @param {string} $s\n * @returns {string}\n */\nfunction decodeShift ($s) {\n    $result = array_map(function ($ch) {\n        return chr(((ord($ch) - 97 + 21) % 26) + 97);\n    }, str_split($s));\n    return implode(\"\", $result);\n}\n",
            "/**\n * @param {string} $txt\n * @returns {string}\n */\nfunction removeVowels ($txt) {\n    $vowels = \"aeiouAEIOU\";\n    return implode(\"\", array_filter(str_split($txt), function ($char) use ($vowels) {\n        return !in_array($char, str_split($vowels));\n    }));\n}\n",
            "/**\n * @param {array<int>} $l\n * @param {int} $t\n * @returns {bool}\n */\nfunction belowThreshold ($l, $t) {\n    return array_reduce($l, function ($acc, $x) use ($t) {\n        return $acc && $x < $t;\n    }, true);\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $y\n * @returns {int}\n */\nfunction add ($x, $y) {\n    return $x + $y;\n}\n",
            "/**\n * @param {string} $s0\n * @param {string} $s1\n * @returns {bool}\n */\nfunction sameChars ($s0, $s1) {\n    return count(array_unique(str_split($s0))) == count(array_unique(str_split($s1)));\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fib ($n) {\n    if ($n <= 1) {\n        return $n;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n",
            "/**\n * @param {string} $brackets\n * @returns {bool}\n */\nfunction correctBracketing ($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        $b = $brackets[$i];\n        if ($b == \"<\") {\n            $depth += 1;\n        } else if ($b == \">\") {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {bool}\n */\nfunction monotonic ($l) {\n    $diff = array_map(function ($x, $y) {\n        return $y - $x;\n    }, $l, array_slice($l, 1));\n    return array_reduce($diff, function ($carry, $item) {\n        return $carry && $item <= 0;\n    }, true) || array_reduce($diff, function ($carry, $item) {\n        return $carry && $item >= 0;\n    }, true);\n}\n",
            "/**\n * @param {array<int>} $l1\n * @param {array<int>} $l2\n * @returns {array<int>}\n */\nfunction common ($l1, $l2) {\n    return array_values(array_intersect($l1, $l2));\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction largestPrimeFactor ($n) {\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i) {\n            $i += 1;\n        } else {\n            $n /= $i;\n        }\n    }\n    return $n;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction sumToN ($n) {\n    return array_sum(range(0, $n));\n}\n",
            "/**\n * @param {string} $brackets\n * @returns {bool}\n */\nfunction correctBracketing ($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        $b = $brackets[$i];\n        if ($b == \"(\") {\n            $depth += 1;\n        } else if ($b == \")\") {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "/**\n * @param {array<int>} $xs\n * @returns {array<int>}\n */\nfunction derivative ($xs) {\n    return array_map(function ($i) use ($xs) {\n        return $xs[$i] * $i;\n    }, range(1, count($xs)));\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fibfib ($n) {\n    if ($n <= 1) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    while ($n > 2) {\n        $a = $b;\n        $b = $c;\n        $c = $a + $b + $c;\n        $n -= 1;\n    }\n    return $c;\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction vowelsCount ($s) {\n    $vowels = \"aeiou\";\n    $cnt = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($vowels, $s[$i]) !== false || ($i == strlen($s) - 1 && $s[$i] == \"y\")) {\n            $cnt += 1;\n        }\n    }\n    return $cnt;\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $shift\n * @returns {string}\n */\nfunction circularShift ($x, $shift) {\n    $x_str = strval($x);\n    if ($shift > strlen($x_str)) {\n        return strrev($x_str);\n    } else {\n        return substr($x_str, -$shift) . substr($x_str, 0, -$shift);\n    }\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction digitSum ($s) {\n    return array_sum(array_map(function ($c) {\n        return ord($c);\n    }, str_split($s, 1), array_filter(str_split($s, 1), function ($c) {\n        return ctype_upper($c);\n    })));\n}\n",
            "/**\n * @param {string} $s\n * @param {int} $n\n * @returns {int}\n */\nfunction fruitDistribution ($s, $n) {\n    $words = explode(' ', $s);\n    $apples = intval($words[$words.index(\"apples\") - 1]);\n    $oranges = intval($words[$words.index(\"oranges\") - 1]);\n    return $n - $apples - $oranges;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {array<int>}\n */\nfunction pluck ($arr) {\n    $evens = array_filter($arr, function ($n) {\n        return $n % 2 == 0;\n    });\n    if (count($evens) == 0) {\n        return [];\n    }\n    $min_even = min($evens);\n    return [$min_even, array_search($min_even, $arr)];\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction search ($lst) {\n    $freqs = [];\n    foreach ($lst as $n) {\n        $freqs[$n] = $freqs[$n] ?? 0 + 1;\n    }\n    $good_vals = array_map(function ($k) use ($freqs) {\n        return $k;\n    }, array_filter(array_keys($freqs), function ($k) use ($freqs) {\n        return $freqs[$k] >= $k;\n    }));\n    return max($good_vals, default=-1);\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {array<int>}\n */\nfunction strangeSortList ($lst) {\n    $sl = sort($lst);\n    $result = [];\n    $left = 0;\n    $right = count($sl) - 1;\n    while ($left <= $right) {\n        $result[] = $sl[$left];\n        $left += 1;\n        if ($left <= $right) {\n            $result[] = $sl[$right];\n            $right -= 1;\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @param {int} $c\n * @returns {float}\n */\nfunction triangleArea ($a, $b, $c) {\n    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $s = ($a + $b + $c) / 2.0;\n        return sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "/**\n * @param {array<int>} $q\n * @param {int} $w\n * @returns {bool}\n */\nfunction willItFly ($q, $w) {\n    if (count($q) == 0) {\n        return false;\n    }\n    $is_palin = true;\n    for ($i = 0; $i < count($q); $i++) {\n        if ($q[$i] != $q[count($q) - $i - 1]) {\n            $is_palin = false;\n            break;\n        }\n    }\n    $total = array_sum($q);\n    return $is_palin && $total <= $w;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {int}\n */\nfunction smallestChange ($arr) {\n    $ans = 0;\n    for ($i = 0; $i < count($arr) / 2; $i++) {\n        if ($arr[$i] != $arr[count($arr) - $i - 1]) {\n            $ans += 1;\n        }\n    }\n    return $ans;\n}\n",
            "/**\n * @param {array<string>} $lst1\n * @param {array<string>} $lst2\n * @returns {array<string>}\n */\nfunction totalMatch ($lst1, $lst2) {\n    $cnt1 = array_sum(array_map(function ($s) {\n        return strlen($s);\n    }, $lst1));\n    $cnt2 = array_sum(array_map(function ($s) {\n        return strlen($s);\n    }, $lst2));\n    return $cnt1 <= $cnt2 ? $lst1 : $lst2;\n}\n",
            "/**\n * @param {int} $a\n * @returns {bool}\n */\nfunction isMultiplyPrime ($a) {\n    if ($a < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)) + 1; $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $n\n * @returns {bool}\n */\nfunction isSimplePower ($x, $n) {\n    if ($n < 2) {\n        return $x == $n;\n    }\n    $tmp = 1;\n    while ($tmp < $x) {\n        $tmp *= $n;\n    }\n    return $tmp == $x;\n}\n",
            "/**\n * @param {int} $a\n * @returns {bool}\n */\nfunction isCube ($a) {\n    $a = abs($a);\n    $root = int(round(pow($a, 1.0 / 3.0)));\n    return $root * $root * $root == $a;\n}\n",
            "/**\n * @param {string} $num\n * @returns {int}\n */\nfunction hexKey ($num) {\n    return count(array_filter(str_split($num), function ($x) {\n        return in_array($x, [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]);\n    }));\n}\n",
            "/**\n * @param {int} $dec\n * @returns {string}\n */\nfunction decimalToBinary ($dec) {\n    $binary = bin($dec)[2];\n    return f\"db{$binary}db\";\n}\n",
            "/**\n * @param {string} $s\n * @returns {bool}\n */\nfunction isHappy ($s) {\n    if (strlen($s) < 3) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($s) - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {array<float>} $grades\n * @returns {array<string>}\n */\nfunction numericalLetterGrade ($grades) {\n    $result = [];\n    foreach ($grades as $g) {\n        if ($g == 4.0) {\n            $result[] = \"A+\";\n        } else if ($g > 3.7) {\n            $result[] = \"A\";\n        } else if ($g > 3.3) {\n            $result[] = \"A-\";\n        } else if ($g > 3.0) {\n            $result[] = \"B+\";\n        } else if ($g > 2.7) {\n            $result[] = \"B\";\n        } else if ($g > 2.3) {\n            $result[] = \"B-\";\n        } else if ($g > 2.0) {\n            $result[] = \"C+\";\n        } else if ($g > 1.7) {\n            $result[] = \"C\";\n        } else if ($g > 1.3) {\n            $result[] = \"C-\";\n        } else if ($g > 1.0) {\n            $result[] = \"D+\";\n        } else if ($g > 0.7) {\n            $result[] = \"D\";\n        } else if ($g > 0.0) {\n            $result[] = \"D-\";\n        } else {\n            $result[] = \"E\";\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @returns {bool}\n */\nfunction primeLength ($s) {\n    $length = strlen($s);\n    if ($length < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($length)) + 1; $i++) {\n        if ($length % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction startsOneEnds ($n) {\n    if ($n == 1) {\n        return 1;\n    }\n    return 2 * 9 * (10 ** ($n - 2));\n}\n",
            "/**\n * @param {int} $n\n * @returns {string}\n */\nfunction solve ($n) {\n    $digits_sum = array_sum(array_map(function ($d) {\n        return intval($d);\n    }, str_split(strval($n))));\n    return bin2hex($digits_sum);\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction add ($lst) {\n    return array_sum(array_filter($lst, function ($x) {\n        return $x % 2 == 0;\n    }));\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction antiShuffle ($s) {\n    $words = array_map(function ($word) {\n        return implode(\"\", sort(str_split($word)));\n    }, explode(\" \", $s));\n    return implode(\" \", $words);\n}\n",
            "/**\n * @param {array<array<int>>} $lst\n * @param {int} $x\n * @returns {array<array<int>>}\n */\nfunction getRow ($lst, $x) {\n    $coords = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n                $coords[] = [$i, $j];\n            }\n        }\n    }\n    usort($coords, function ($a, $b) {\n        return $a[0] == $b[0] ? $b[1] - $a[1] : $a[0] - $b[0];\n    });\n    return $coords;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {array<int>}\n */\nfunction sortArray ($arr) {\n    if (count($arr) == 0) {\n        return [];\n    }\n    if (($arr[0] + $arr[count($arr) - 1]) % 2 == 0) {\n        return array_reverse(sort($arr));\n    } else {\n        return sort($arr);\n    }\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction encrypt ($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        $shifted = ord($ch) + 4;\n        if ($shifted > ord('z')) {\n            $shifted -= 26;\n        }\n        array_push($result, chr($shifted));\n    }\n    return implode(\"\", $result);\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int | null}\n */\nfunction nextSmallest ($lst) {\n    $sl = sort(array_unique($lst));\n    if (count($sl) < 2) {\n        return null;\n    }\n    return $sl[1];\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction isBored ($s) {\n    $sentences = preg_split(\"/[.!?]\\s*/\", $s);\n    return array_sum(array_map(function ($sentence) {\n        return $sentence[:2] == \"I \";\n    }, $sentences));\n}\n",
            "/**\n * @param {mixed} $x\n * @param {mixed} $y\n * @param {mixed} $z\n * @returns {bool}\n */\nfunction anyInt ($x, $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {string} $message\n * @returns {string}\n */\nfunction encode ($message) {\n    $vowels = \"aeiouAEIOU\";\n    $result = [];\n    foreach ($message as $ch) {\n        if (ctype_alpha($ch)) {\n            $ch1 = strtoupper($ch) if (ctype_lower($ch)) else strtolower($ch);\n            if (in_array($ch1, $vowels)) {\n                $ch1 = chr(ord($ch1) + 2);\n            }\n            $result[] = $ch1;\n        } else {\n            $result[] = $ch;\n        }\n    }\n    return implode(\"\", $result);\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction skjkasdkd ($lst) {\n    $primes = array_filter($lst, function ($n) {\n        if ($n < 2) {\n            return false;\n        }\n        for ($i = 2; $i <= floor(sqrt($n)) + 1; $i++) {\n            if ($n % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    if (count($primes) == 0) {\n        return 0;\n    }\n    $largest = strval(max($primes));\n    return array_sum(array_map(function ($digit) {\n        return intval($digit);\n    }, str_split($largest)));\n}\n",
            "/**\n * @param {array<string, string>} $d\n * @returns {bool}\n */\nfunction checkDictCase ($d) {\n    if (empty($d)) {\n        return false;\n    }\n    $keys = array_keys($d);\n    $lower = array_filter($keys, function ($c) {\n        return ctype_lower($c);\n    });\n    $upper = array_filter($keys, function ($c) {\n        return ctype_upper($c);\n    });\n    return count($lower) === count($keys) || count($upper) === count($keys);\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction countUpTo ($n) {\n    $primes = [];\n    for ($num = 2; $num < $n; $num++) {\n        if (all(function ($p) use ($num) {\n            return $num % $p != 0;\n        }, $primes)) {\n            $primes[] = $num;\n        }\n    }\n    return $primes;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @returns {int}\n */\nfunction multiply ($a, $b) {\n    return (abs($a) % 10) * (abs($b) % 10);\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction countUpper ($s) {\n    $vowels = \"AEIOU\";\n    return count(array_filter($s, function($c) use ($vowels) {\n        return $c % 2 == 0 && in_array($c, $vowels);\n    }));\n}\n",
            "/**\n * @param {string} $value\n * @returns {int}\n */\nfunction closestInteger ($value) {\n    $num = floatval($value);\n    if ($num >= 0) {\n        return intval($num + 0.5);\n    } else {\n        return intval($num - 0.5);\n    }\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction makeAPile ($n) {\n    return array_map(function ($i) use ($n) {\n        return $n + 2 * $i;\n    }, range(0, $n - 1));\n}\n",
            "/**\n * @param {string} $s\n * @returns {array<string>}\n */\nfunction wordsString ($s) {\n    return array_filter(explode(\"[, ]\", $s), function ($w) {\n        return strlen($w) > 0;\n    });\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $y\n * @returns {int}\n */\nfunction chooseNum ($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    if ($y % 2 == 0) {\n        return $y;\n    }\n    return $y - 1 if $x != $y else -1;\n}\n",
            "/**\n * @param {int} $n\n * @param {int} $m\n * @returns {string | null}\n */\nfunction roundedAvg ($n, $m) {\n    if ($n > $m) {\n        return null;\n    }\n    $r_avg = intval(($m + $n) / 2.0 + 0.5);\n    return bin2hex($r_avg)[2:];\n}\n",
            "/**\n * @param {array<int>} $x\n * @returns {array<int>}\n */\nfunction uniqueDigits ($x) {\n    return array_map(function ($num) {\n        return intval($num);\n    }, array_filter($x, function ($num) {\n        return array_reduce(str_split(strval($num)), function ($carry, $digit) {\n            return $carry && ord($digit) % 2 != 0;\n        }, true));\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {array<string>}\n */\nfunction byLength ($arr) {\n    $digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    $sorted_arr = array_reverse(array_sort(array_filter($arr, function ($x) {\n        return 1 <= $x && $x <= 9;\n    })));\n    return array_map(function ($x) use ($digit_names) {\n        return $digit_names[$x-1];\n    }, $sorted_arr);\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction f ($n) {\n    $nums = range(1, $n + 1);\n    return array_map(function ($i) use ($nums) {\n        return $i % 2 != 0 ? array_sum(array_slice($nums, 0, $i)) : array_reduce(function ($x, $y) {\n            return $x * $y;\n        }, $nums, 1);\n    }, $nums);\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction evenOddPalindrome ($n) {\n    $cnt = [0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        if (is_palindrome(str($i))) {\n            $cnt[$i % 2] += 1;\n        }\n    }\n    return $cnt;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {int}\n */\nfunction countNums ($arr) {\n    $n_str = strval($n);\n    if ($n >= 0) {\n        return array_sum(array_map(function ($d) {\n            return intval($d);\n        }, str_split($n_str)));\n    } else {\n        return intval(substr($n_str, 0, 2)) * 2 + countNums(abs($n));\n    }\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {bool}\n */\nfunction moveOneBall ($arr) {\n    if (count($arr) == 0) {\n        return true;\n    }\n    $sorted_arr = sort($arr);\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[i:] == $sorted_arr[:count($arr) - $i] && $arr[:$i] == $sorted_arr[count($arr) - $i:]) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {array<int>} $lst1\n * @param {array<int>} $lst2\n * @returns {string}\n */\nfunction canExchange ($lst1, $lst2) {\n    $odd_cnt = count(array_filter($lst1, function ($num) {\n        return $num % 2 != 0;\n    }));\n    $even_cnt = count(array_filter($lst2, function ($num) {\n        return $num % 2 == 0;\n    }));\n    return $even_cnt >= $odd_cnt ? \"YES\" : \"NO\";\n}\n",
            "/**\n * @param {string} $test\n * @returns {array<string, int>}\n */\nfunction histogram ($test) {\n    $freq = [];\n    $words = array_filter(explode(\" \", $test), function ($w) {\n        return strlen($w) > 0;\n    });\n    foreach ($words as $w) {\n        $freq[$w] = $freq[$w] ?? 0 + 1;\n    }\n    $result = [];\n    if (count($freq) > 0) {\n        $max_freq = max($freq);\n        foreach ($freq as $k => $v) {\n            if ($v == $max_freq) {\n                $result[$k] = $v;\n            }\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @param {string} $c\n * @returns {array<string>}\n */\nfunction reverseDelete ($s, $c) {\n    $s1 = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if (!strpos($c, $ch)) {\n            $s1 .= $ch;\n        }\n    }\n    return [$s1, is_palindrome($s1) ? \"yes\" : \"no\"];\n}\n",
            "/**\n * @param {array<string>} $lst\n * @returns {array<string>}\n */\nfunction oddCount ($lst) {\n    $result = [];\n    foreach ($lst as $num) {\n        $n = array_sum(array_map(function ($d) {\n            return ord($d) % 2 == 1;\n        }, str_split($num)));\n        $rs = \"the number of odd elements in the string i of the input.\";\n        $result[] = str_replace(\"i\", str($n), $rs);\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<int>} $nums\n * @returns {int}\n */\nfunction minSubArraySum ($nums) {\n    $min_sum = 0;\n    $cur_sum = 0;\n    foreach ($nums as $n) {\n        $cur_sum = min($cur_sum + $n, 0);\n        $min_sum = min($cur_sum, $min_sum);\n    }\n    if ($min_sum == 0) {\n        $min_sum = min($nums);\n    }\n    return $min_sum;\n}\n",
            "/**\n * @param {array<array<int>>} $grid\n * @param {int} $capacity\n * @returns {int}\n */\nfunction maxFill ($grid, $capacity) {\n    return array_sum(array_map(function ($arr) use ($capacity) {\n        return ceil(array_sum($arr) / $capacity);\n    }, $grid));\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {array<int>}\n */\nfunction sortArray ($arr) {\n    return array_values(array_sort(array_map(function ($x) {\n        return array($x, count_ones($x));\n    }, $arr), SORT_REGULAR));\n}\nfunction count_ones($num) {\n    return substr_count(decbin($num), \"1\");\n}\nfunction array_sort($arr, $flags = SORT_REGULAR) {\n    if (is_array($arr)) {\n        $GLOBALS['__array_sort_type'] = $flags;\n        $GLOBALS['__array_sort_arr'] = &$arr;\n        uasort($arr, '__array_sort_cmp');\n        unset($GLOBALS['__array_sort_type'], $GLOBALS['__array_sort_arr']);\n    }\n    return $arr;\n}\nfunction __array_sort_cmp($a, $b) {\n    if ($GLOBALS['__array_sort_type'] == SORT_NUMERIC) {\n        return ($a < $b) ? -1 : 1;\n    }\n    return strcmp($a[0], $b[0]);\n}\n",
            "/**\n * @param {string} $s\n * @param {int} $n\n * @returns {array<string>}\n */\nfunction selectWords ($s, $n) {\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $words = array_filter(explode(\" \", $s), function ($w) {\n        return strlen($w) > 0;\n    });\n    return array_filter($words, function ($w) use ($n, $consonants) {\n        return count(array_filter(str_split($w), function ($c) use ($consonants) {\n            return strpos($consonants, strtolower($c)) !== false;\n        }) == $n;\n    });\n}\n",
            "/**\n * @param {string} $word\n * @returns {string}\n */\nfunction getClosestVowel ($word) {\n    $vowels = \"aeiouAEIOU\";\n    for ($i = strlen($word) - 2; $i > 0; $i--) {\n        if (strpos($vowels, $word[$i]) !== false && strpos($vowels, $word[$i - 1]) === false && strpos($vowels, $word[$i + 1]) === false) {\n            return $word[$i];\n        }\n    }\n    return \"\";\n}\n",
            "/**\n * @param {array<string>} $lst\n * @returns {string}\n */\nfunction matchParens ($lst) {\n    $s1 = $lst[0] . $lst[1];\n    $s2 = $lst[1] . $lst[0];\n    return \"Yes\" if check($s1) or check($s2) else \"No\";\n}\n",
            "/**\n * @param {array<int>} $arr\n * @param {int} $k\n * @returns {array<int>}\n */\nfunction maximum ($arr, $k) {\n    if ($k == 0) {\n        return [];\n    }\n    return array_slice(array_reverse(array_sort($arr)), 0, $k);\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction solution ($lst) {\n    return array_sum(array_filter($lst, function ($x) {\n        return $x % 2 != 0;\n    }, ARRAY_FILTER_USE_KEY));\n}\n",
            "/**\n * @param {array<int>} $arr\n * @param {int} $k\n * @returns {int}\n */\nfunction addElements ($arr, $k) {\n    return array_sum(array_filter($arr, function ($n) {\n        return strlen($n) <= 2;\n    }));\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction getOddCollatz ($n) {\n    $collatz = [1];\n    while ($n != 1) {\n        if ($n % 2 != 0) {\n            $collatz[] = $n;\n            $n = 3 * $n + 1;\n        } else {\n            $n = $n / 2;\n        }\n    }\n    return $collatz;\n}\n",
            "/**\n * @param {string} $date\n * @returns {bool}\n */\nfunction validDate ($date) {\n    if (!len($date) == 10 || !$date[2] == \"-\" || !$date[5] == \"-\") {\n        return false;\n    }\n    $m = int($date[:2]);\n    $d = int($date[3:5]);\n    if ($m in [1, 3, 5, 7, 8, 10, 12] && $d >= 1 && $d <= 31) {\n        return true;\n    }\n    if ($m in [4, 6, 9, 11] && $d >= 1 && $d <= 30) {\n        return true;\n    }\n    if ($m == 2 && $d >= 1 && $d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "/**\n * @param {string} $txt\n * @returns {array<string>}\n */\nfunction splitWords ($txt) {\n    if (strpos($txt, \" \") !== false) {\n        return explode(\" \", $txt);\n    } else if (strpos($txt, \",\") !== false) {\n        return explode(\",\", $txt);\n    } else {\n        $result = [];\n        foreach (str_split($txt) as $c) {\n            if (ctype_lower($c) && ord($c) % 2 == 0) {\n                array_push($result, $c);\n            }\n        }\n        return [strlen($result)];\n    }\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {bool}\n */\nfunction isSorted ($lst) {\n    if (!all(function ($i) use ($lst) {\n        return $lst[$i-1] <= $lst[$i];\n    }, range(1, count($lst)))) {\n        return false;\n    }\n    $freq = [];\n    foreach ($lst as $i) {\n        $freq[$i] = ($freq[$i] ?? 0) + 1;\n    }\n    return max($freq) <= 2;\n}\n",
            "/**\n * @param {array<int>} $interval1\n * @param {array<int>} $interval2\n * @returns {string}\n */\nfunction intersection ($interval1, $interval2) {\n    if ($interval1[0] < $interval2[0]) {\n        $l = $interval2[0];\n    } else {\n        $l = $interval1[0];\n    }\n    if ($interval1[1] < $interval2[1]) {\n        $r = $interval1[1];\n    } else {\n        $r = $interval2[1];\n    }\n    $length = $r - $l;\n    if ($length > 0 && is_prime($length)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {int | null}\n */\nfunction prodSigns ($arr) {\n    if (!$arr) {\n        return null;\n    }\n    if (in_array(0, $arr)) {\n        return 0;\n    }\n    $sign = -1 if (count(array_filter($arr, function ($n) { return $n < 0; })) % 2 == 1) else 1;\n    return $sign * array_sum(array_map(function ($n) { return abs($n); }, $arr));\n}\n",
            "/**\n * @param {array<array<int>>} $grid\n * @param {int} $k\n * @returns {array<int>}\n */\nfunction minPath ($grid, $k) {\n    $n = count($grid);\n    $min_val = $n * $n + 1;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $temp = [];\n                if ($i != 0) {\n                    $temp[] = $grid[$i - 1][$j];\n                }\n                if ($j != 0) {\n                    $temp[] = $grid[$i][$j - 1];\n                }\n                if ($i != $n - 1) {\n                    $temp[] = $grid[$i + 1][$j];\n                }\n                if ($j != $n - 1) {\n                    $temp[] = $grid[$i][$j + 1];\n                }\n                $min_val = min($temp);\n            }\n        }\n    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = 1 if ($i % 2 == 0) else $min_val;\n    }\n    return $result;\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction tri ($n) {\n    if ($n == 0) {\n        return [1];\n    }\n    $seq = [1, 3];\n    for ($i = 2; $i <= $n + 1; $i++) {\n        if ($i % 2 == 0) {\n            $seq[] = $i / 2 + 1;\n        } else {\n            $seq[] = $seq[$i - 1] + $seq[$i - 2] + ($i + 3) / 2;\n        }\n    }\n    return $seq;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction digits ($n) {\n    $odds = array_map(function ($d) {\n        return intval($d);\n    }, array_filter(str_split(strval($n)), function ($d) {\n        return intval($d) % 2 == 1;\n    }));\n    return array_reduce($odds, function ($x, $y) {\n        return $x * $y;\n    }, 1) if count($odds) > 0 else 0;\n}\n",
            "/**\n * @param {string} $s\n * @returns {bool}\n */\nfunction isNested ($s) {\n    $open_idx = [];\n    $close_idx = [];\n    for ($i = 0, $l = strlen($s); $i < $l; $i++) {\n        $ch = $s[$i];\n        if ($ch == '[') {\n            $open_idx[] = $i;\n        } else if ($ch == ']') {\n            $close_idx[] = $i;\n        }\n    }\n    $close_idx = array_reverse($close_idx);\n    $cnt = 0;\n    $i = 0;\n    $l = count($close_idx);\n    foreach ($open_idx as $idx) {\n        if ($i < $l && $idx < $close_idx[$i]) {\n            $cnt += 1;\n            $i += 1;\n        }\n    }\n    return $cnt >= 2;\n}\n",
            "/**\n * @param {array<float>} $lst\n * @returns {int}\n */\nfunction sumSquares ($lst) {\n    return array_sum(array_map(function ($n) {\n        return pow(ceil($n), 2);\n    }, $lst));\n}\n",
            "/**\n * @param {string} $txt\n * @returns {bool}\n */\nfunction checkIfLastCharIsALetter ($txt) {\n    if (!$txt) {\n        return false;\n    }\n    $last = $txt[strrpos($txt, ' ') + 1];\n    return strlen($last) == 1 && ctype_alpha($last[0]);\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {int}\n */\nfunction canArrange ($arr) {\n    if (count($arr) <= 1) {\n        return -1;\n    }\n    $idx = array_filter(range(1, count($arr)), function ($i) use ($arr) {\n        return $arr[$i] < $arr[$i - 1];\n    });\n    return max($idx, default=-1);\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {array<int | null>}\n */\nfunction largestSmallestIntegers ($lst) {\n    $neg = array_filter($lst, function ($i) {\n        return $i < 0;\n    });\n    $pos = array_filter($lst, function ($i) {\n        return $i > 0;\n    });\n    $max_neg = count($neg) > 0 ? max($neg) : null;\n    $min_pos = count($pos) > 0 ? min($pos) : null;\n    return [$max_neg, $min_pos];\n}\n",
            "/**\n * @param {mixed} $a\n * @param {mixed} $b\n * @returns {float | null}\n */\nfunction compareOne ($a, $b) {\n    if (is_string($a)) {\n        return floatval(str_replace(',', '.', $a));\n    } else if (is_int($a)) {\n        return floatval($a);\n    } else if (is_float($a)) {\n        return $a;\n    } else {\n        throw new RuntimeException(\"Type Error\");\n    }\n    if ($a1 == $b1) {\n        return null;\n    } else if ($a1 > $b1) {\n        return $a1;\n    } else {\n        return $b1;\n    }\n}\n",
            "/**\n * @param {int} $n\n * @returns {bool}\n */\nfunction isEqualToSumEven ($n) {\n    return $n % 2 == 0 && $n >= 8;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction specialFactorial ($n) {\n    $fact = 1;\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $fact *= $i;\n        $result *= $fact;\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $txt\n * @returns {string}\n */\nfunction fixSpaces ($txt) {\n    return preg_replace(r\"\\s{3,}\", \"-\", $txt).replace(\" \", \"_\");\n}\n",
            "/**\n * @param {string} $fileName\n * @returns {string}\n */\nfunction fileNameCheck ($fileName) {\n    $suf = [\"txt\", \"exe\", \"dll\"];\n    $lst = explode(\".\", $fileName);\n    if (count($lst) != 2 || !in_array($lst[1], $suf) || strlen($lst[0]) == 0 || !ctype_alpha($lst[0][0]) || count(array_filter($lst[0], function($x) { return ctype_digit($x); })) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction sumSquares ($lst) {\n    $result = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n            $result += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n            $result += pow($lst[$i], 3);\n        } else {\n            $result += $lst[$i];\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $sentence\n * @returns {string}\n */\nfunction wordsInSentence ($sentence) {\n    $words = explode(\" \", $sentence);\n    $result = array();\n    foreach ($words as $w) {\n        if (is_prime(strlen($w))) {\n            array_push($result, $w);\n        }\n    }\n    return implode(\" \", $result);\n}\nfunction is_prime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)) + 1; $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {string} $x\n * @param {string} $n\n * @returns {bool}\n */\nfunction simplify ($x, $n) {\n    $xs = explode(\"/\", $x);\n    $ns = explode(\"/\", $n);\n    $num = intval($xs[0]) * intval($ns[0]);\n    $den = intval($xs[1]) * intval($ns[1]);\n    return $num % $den == 0;\n}\n",
            "/**\n * @param {array<int>} $nums\n * @returns {array<int>}\n */\nfunction orderByPoints ($nums) {\n    $digits_sum = function ($n) {\n        $n_str = strval($n);\n        if ($n >= 0) {\n            return array_sum(array_map(function ($d) {\n                return intval($d);\n            }, str_split($n_str)));\n        } else {\n            return intval($n_str[0]) * 2 + digits_sum(abs($n));\n        }\n    };\n    return sort($nums, function ($a, $b) use ($digits_sum) {\n        return $digits_sum($a) - $digits_sum($b);\n    });\n}\n",
            "/**\n * @param {array<int>} $nums\n * @returns {int}\n */\nfunction specialFilter ($nums) {\n    $odds = \"13579\";\n    return count(array_filter($nums, function ($n) use ($odds) {\n        return $n > 10 && $n % 2 == 1 && strpos($odds, $n[0]) !== false;\n    }));\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction getMaxTriples ($n) {\n    $c = [0, 0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        $a = $i * $i - $i + 1;\n        $c[$a % 3] += 1;\n    }\n    return $c[0] * $c[1] * $c[2] + ($c[0] * ($c[0] - 1) * ($c[0] - 2) + $c[1] * ($c[1] - 1) * ($c[1] - 2) + $c[2] * ($c[2] - 1) * ($c[2] - 2)) / 6;\n}\n",
            "/**\n * @param {string} $planet1\n * @param {string} $planet2\n * @returns {array<string>}\n */\nfunction bf ($planet1, $planet2) {\n    $names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!in_array($planet1, $names) || !in_array($planet2, $names)) {\n        return [];\n    }\n    $l = array_search($planet1, $names);\n    $r = array_search($planet2, $names);\n    if ($l > $r) {\n        $l, $r = $r, $l;\n    }\n    if ($l == $r) {\n        return [];\n    }\n    return array_slice($names, $l + 1, $r);\n}\n",
            "/**\n * @param {array<string>} $lst\n * @returns {array<string>}\n */\nfunction sortedListSum ($lst) {\n    $result = array_filter($lst, function ($s) {\n        return strlen($s) % 2 == 0;\n    });\n    usort($result, function ($a, $b) {\n        return strlen($a) <=> strlen($b) ?: $a <=> $b;\n    });\n    return $result;\n}\n",
            "/**\n * @param {int} $n\n * @param {int} $x\n * @param {int} $y\n * @returns {int}\n */\nfunction xOrY ($n, $x, $y) {\n    if ($n < 2) {\n        return $y;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)) + 1; $i++) {\n        if ($n % $i == 0) {\n            return $y;\n        }\n    }\n    return $x;\n}\n",
            "/**\n * @param {array<float>} $lst\n * @returns {int}\n */\nfunction doubleTheDifference ($lst) {\n    return array_sum(array_map(function ($n) {\n        return $n * $n;\n    }, array_filter($lst, function ($n) {\n        return $n >= 0 && $n % 2 == 1;\n    })));\n}\n",
            "/**\n * @param {array<int>} $game\n * @param {array<int>} $guess\n * @returns {array<int>}\n */\nfunction compare ($game, $guess) {\n    return array_map(function ($x, $y) {\n        return abs($x - $y);\n    }, $game, $guess);\n}\n",
            "/**\n * @param {string} $className\n * @param {array<string>} $extensions\n * @returns {string}\n */\nfunction strongestExtension ($className, $extensions) {\n    $max_s = float(\"-inf\");\n    $max_ext = \"\";\n    foreach ($extensions as $ext) {\n        $upper = count(array_filter(str_split($ext), function ($c) {\n            return ctype_upper($c);\n        }));\n        $lower = count(array_filter(str_split($ext), function ($c) {\n            return ctype_lower($c);\n        }));\n        $s = $upper - $lower;\n        if ($s > $max_s) {\n            $max_s = $s;\n            $max_ext = $ext;\n        }\n    }\n    return $className . \".\" . $max_ext;\n}\n",
            "/**\n * @param {string} $a\n * @param {string} $b\n * @returns {bool}\n */\nfunction cycpatternCheck ($a, $b) {\n    if (strlen($a) < strlen($b)) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($b); $i++) {\n        if (substr($b, $i) . substr($b, 0, $i) == $a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {int} $num\n * @returns {array<int>}\n */\nfunction evenOddCount ($num) {\n    $ds = strval(abs($num));\n    $even = count(array_filter($ds, function ($d) {\n        return ord($d) % 2 == 0;\n    }));\n    return [$even, strlen($ds) - $even];\n}\n",
            "/**\n * @param {int} $num\n * @returns {string}\n */\nfunction intToMiniRoman ($num) {\n    $values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    $res = [];\n    for ($i = 0; $i < count($values); $i++) {\n        while ($num >= $values[$i]) {\n            $res[] = $numerals[$i];\n            $num -= $values[$i];\n        }\n    }\n    return join($res);\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @param {int} $c\n * @returns {bool}\n */\nfunction rightAngleTriangle ($a, $b, $c) {\n    $s = array_values(array_unique(array_merge([$a, $b, $c], []));\n    sort($s);\n    return  $s[0] * $s[0] + $s[1] * $s[1] == $s[2] * $s[2];\n}\n",
            "/**\n * @param {array<string>} $words\n * @returns {string}\n */\nfunction findMax ($words) {\n    $max_cnt = 0;\n    $max_w = \"\";\n    foreach ($words as $w) {\n        $cnt = count(array_unique(str_split($w)));\n        if ($cnt > $max_cnt) {\n            $max_cnt = $cnt;\n            $max_w = $w;\n        } else if ($cnt == $max_cnt) {\n            $max_w = min($max_w, $w);\n        }\n    }\n    return $max_w;\n}\n",
            "/**\n * @param {int} $num\n * @param {int} $need\n * @param {int} $remaining\n * @returns {array<int>}\n */\nfunction eat ($num, $need, $remaining) {\n    if ($need <= $remaining) {\n        return [$num + $need, $remaining - $need];\n    } else {\n        return [$num + $remaining, 0];\n    }\n}\n",
            "/**\n * @param {array<string>} $operators\n * @param {array<int>} $operands\n * @returns {int}\n */\nfunction doAlgebra ($operators, $operands) {\n    $ops = $operators.copy();\n    $nums = $operands.copy();\n    $i = len($ops) - 1;\n    while ($i >= 0) {\n        if ($ops[$i] == \"**\") {\n            $nums[$i] = pow($nums[$i], $nums[$i + 1]);\n            $nums.pop($i + 1);\n            $ops.pop($i);\n        }\n        $i -= 1;\n    }\n    $i = 0;\n    while ($i < len($ops)) {\n        if ($ops[$i] == \"*\") {\n            $nums[$i] = $nums[$i] * $nums[$i + 1];\n            $nums.pop($i + 1);\n            $ops.pop($i);\n            $i -= 1;\n        } else if ($ops[$i] == \"//\") {\n            $nums[$i] = $nums[$i] // $nums[$i + 1];\n            $nums.pop($i + 1);\n            $ops.pop($i);\n            $i -= 1;\n        }\n        $i += 1;\n    }\n    $i = 0;\n    while ($i < len($ops)) {\n        if ($ops[$i] == \"+\") {\n            $nums[$i] = $nums[$i] + $nums[$i + 1];\n            $nums.pop($i + 1);\n            $ops.pop($i);\n            $i -= 1;\n        } else if ($ops[$i] == \"-\") {\n            $nums[$i] = $nums[$i] - $nums[$i + 1];\n            $nums.pop($i + 1);\n            $ops.pop($i);\n            $i -= 1;\n        }\n        $i += 1;\n    }\n    return $nums[0];\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction solve ($s) {\n    if (!any(ch.isalpha() for ch in s)) {\n        return s[::-1];\n    }\n    result = [];\n    for ch in s {\n        if (!ch.isalpha()) {\n            result.append(ch);\n        } else if (ch.isupper()) {\n            result.append(ch.lower());\n        } else if (ch.islower()) {\n            result.append(ch.upper());\n        }\n    }\n    return \"\".join(result);\n}\n",
            "/**\n * @param {string} $txt\n * @returns {string | null}\n */\nfunction stringToMd5 ($txt) {\n    if (!$txt) {\n        return null;\n    }\n    $md5_hash = hash_init('md5');\n    $txt_bytes = $txt->encode();\n    $md5_hash->update($txt_bytes);\n    $md5_encoded = $md5_hash->hexdigest();\n    return $md5_encoded;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @returns {array<int>}\n */\nfunction generateIntegers ($a, $b) {\n    $lower = max(2, min($a, $b));\n    $upper = min(8, max($a, $b));\n    return array_map(function ($i) {\n        return $i;\n    }, range($lower, $upper + 1));\n}\n"
        ],
        "ruby": [
            "# @param numbers [Array<Float>]\n# @param threshold [Float]\n# @returns {Boolean}\ndef has_close_elements(numbers, threshold)\n    for i in 0..numbers.length\n        for j in i + 1..numbers.length\n            if (numbers[i] - numbers[j]).abs < threshold\n                return true\n            end\n        end\n    end\n    return false\nend\n",
            "# @param paren_string [String]\n# @returns {Array<String>}\ndef separate_paren_groups(paren_string)\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens\n        if ch == \"(\"\n            stk.append(ch)\n            current_group += ch\n        elsif ch == \")\"\n            stk.pop()\n            current_group += ch\n            if not stk\n                groups.append(current_group)\n                current_group = \"\"\n        end\n    end\n    return groups\nend\n",
            "# @param num [Float]\n# @returns {Float}\ndef truncate_number(num)\n    num - floor(num)\nend\n",
            "# @param operations [Array<Integer>]\n# @returns {Boolean}\ndef below_zero(operations)\n    balance = 0\n    for op in operations do\n        balance += op\n        if balance < 0\n            return true\n        end\n    end\n    return false\nend\n",
            "# @param numbers [Array<Float>]\n# @returns {Float}\ndef mean_absolute_deviation(numbers)\n    mean = numbers.sum / numbers.length\n    deviation = numbers.map { |x| (x - mean).abs }.sum\n    return deviation / numbers.length\nend\n",
            "# @param numbers [Array<Integer>]\n# @param delimiter [Integer]\n# @returns {Array<Integer>}\ndef intersperse(numbers, delimiter)\n    result = []\n    for i in 0..numbers.length\n        if i != 0\n            result.append(delimiter)\n        end\n        result.append(numbers[i])\n    end\n    return result\nend\n",
            "# @param paren_string [String]\n# @returns {Array<Integer>}\ndef parse_nested_parens(paren_string)\n    result = []\n    paren_groups = paren_string.split()\n    for group in paren_groups\n        max_depth = 0\n        depth = 0\n        for ch in group\n            if ch == \"(\"\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elsif ch == \")\"\n                depth -= 1\n        end\n        result.append(max_depth)\n    end\n    return result\nend\n",
            "# @param strs [Array<String>]\n# @param substring [String]\n# @returns {Array<String>}\ndef filter_by_substring(strs, substring)\n    strs.select { |s| s.include?(substring) }\nend\n",
            "# @param numbers [Array<Integer>]\n# @returns {Array<Integer>}\ndef sum_product(numbers)\n    n_sum = numbers.reduce(:+)\n    n_product = numbers.reduce(1, :*)\n    return [n_sum, n_product]\nend\n",
            "# @param numbers [Array<Integer>]\n# @returns {Array<Integer>}\ndef rolling_max(numbers)\n    max_so_far = Float::INFINITY * -1\n    result = []\n    numbers.each do |num|\n        max_so_far = [max_so_far, num].max\n        result.append(max_so_far)\n    end\n    return result\nend\n",
            "# @param s [String]\n# @returns {String}\ndef make_palindrome(s)\n    if is_palindrome(s)\n        return s\n    end\n    for i in range(len(s))\n        if is_palindrome(s[i:])\n            return s + s[:i][::-1]\n        end\n    end\n    return \"\"\nend\n",
            "# @param a [String]\n# @param b [String]\n# @returns {String}\ndef string_xor(a, b)\n    a.zip(b).map { |x, y| x == y ? \"0\" : \"1\" }.join\nend\n",
            "# @param strs [Array<String>]\n# @returns {String, nil}\ndef longest(strs)\n    if strs.empty?\n        return nil\n    end\n    longest_s = strs[0]\n    strs.each do |s|\n        if s.length > longest_s.length\n            longest_s = s\n        end\n    end\n    return longest_s\nend\n",
            "# @param a [Integer]\n# @param b [Integer]\n# @returns {Integer}\ndef greatest_common_divisor(a, b)\n    if b == 0\n        return a\n    else\n        return greatest_common_divisor(b, a % b)\n    end\nend\n",
            "# @param s [String]\n# @returns {Array<String>}\ndef all_prefixes(s)\n    prefixes = []\n    for i in range(len(s))\n        prefixes.append(s[: i + 1])\n    return prefixes\nend\n",
            "# @param n [Integer]\n# @returns {String}\ndef string_sequence(n)\n    return (1..n).to_a.join(\" \")\nend\n",
            "# @param s [String]\n# @returns {Integer}\ndef count_distinct_characters(s)\n    return s.downcase.chars.uniq.length\nend\n",
            "# @param music_string [String]\n# @returns {Array<Integer>}\ndef parse_music(music_string)\n    durations = {\"o\" => 4, \"o|\" => 2, \".|\" => 1}\n    notes = music_string.split()\n    return [durations[note] for note in notes]\nend\n",
            "# @param s [String]\n# @param substring [String]\n# @returns {Integer}\ndef how_many_times(s, substring)\n    times = 0\n    for i in (0..(s.length - substring.length)).to_a do\n        if s[i, substring.length] == substring\n            times += 1\n        end\n    end\n    return times\nend\n",
            "# @param numbers [String]\n# @returns {String}\ndef sort_numbers(numbers)\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = numbers.split(\" \").filter { |x| x in num_dict }\n    num_list.sort { |x| num_dict[x] }\n    return num_list.join(\" \")\nend\n",
            "# @param numbers [Array<Float>]\n# @returns {Array<Float>}\ndef find_closest_elements(numbers)\n    sorted_numbers = numbers.sort\n    min_diff = Float::INFINITY\n    closest_pair = []\n    for i in 1..(sorted_numbers.length - 1)\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n        end\n    end\n    return closest_pair\nend\n",
            "# @param numbers [Array<Float>]\n# @returns {Array<Float>}\ndef rescale_to_unit(numbers)\n    min_num = numbers.min\n    max_num = numbers.max\n    if min_num == max_num\n        return [0.0] * numbers.length\n    else\n        return numbers.map { |num| (num - min_num) / (max_num - min_num) }\n    end\nend\n",
            "# @param values [Array<Object>]\n# @returns {Array<Integer>}\ndef filter_integers(values)\n    values.select { |x| x.is_a?(Integer) }\nend\n",
            "# @param s [String]\n# @returns {Integer}\ndef str_length(s)\n    return s.length\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef largest_divisor(n)\n    for i in 2..n\n        if n % i == 0\n            return n / i\n        end\n    end\n    return 1\nend\n",
            "# @param n [Integer]\n# @returns {Array<Integer>}\ndef factorize(n)\n    factors = []\n    divisor = 2\n    while divisor <= n\n        if n % divisor == 0\n            factors.append(divisor)\n            n //= divisor\n        else\n            divisor += 1\n        end\n    end\n    return factors\nend\n",
            "# @param numbers [Array<Integer>]\n# @returns {Array<Integer>}\ndef remove_duplicates(numbers)\n    counts = {}\n    numbers.each do |num|\n        counts[num] = counts.get(num, 0) + 1\n    end\n    res = [num for num in numbers if counts[num] == 1]\n    return res\nend\n",
            "# @param s [String]\n# @returns {String}\ndef flip_case(s)\n    flipped = []\n    for ch in s\n        if not ch.isalpha?\n            flipped.append(ch)\n        elsif ch.islower?\n            flipped.append(ch.upcase)\n        elsif ch.isupper?\n            flipped.append(ch.downcase)\n        end\n    end\n    return ''.join(flipped)\nend\n",
            "# @param strs [Array<String>]\n# @returns {String}\ndef concatenate(strs)\n    strs.join\nend\n",
            "# @param strs [Array<String>]\n# @param prefix_str [String]\n# @returns {Array<String>}\ndef filter_by_prefix(strs, prefix_str)\n    strs.select { |s| s.start_with?(prefix_str) }\nend\n",
            "# @param l [Array<Integer>]\n# @returns {Array<Integer>}\ndef get_positive(l)\n    l.select { |num| num > 0 }\nend\n",
            "# @param n [Integer]\n# @returns {Boolean}\ndef is_prime(n)\n    if n < 2\n        return false\n    end\n    for i in 2..sqrt(n) + 1\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\n",
            "# @param xs [Array<Integer>]\n# @param x [Float]\n# @returns {Float}\ndef poly(xs, x)\n    res = 0.0\n    for i in range(len(xs))\n        res += xs[i] * x**i\n    end\n    return res\nend\n# @param xs [Array<Integer>]\n# @returns {Float}\ndef find_zero(xs)\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0\n        x1 *= 2\n        x2 *= 2\n    end\n    while abs(x1 - x2) > 1e-10\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0\n            return mid\n        elsif poly(xs, mid) * poly(xs, x1) < 0\n            x2 = mid\n        else\n            x1 = mid\n        end\n    end\n    return (x1 + x2) / 2\nend\n",
            "# @param l [Array<Integer>]\n# @returns {Array<Integer>}\ndef sort_third(l)\n    sorted_third = l[::3].sort\n    l.map.with_index do |item, index|\n        if index % 3 == 0\n            sorted_third[index / 3]\n        else\n            item\n        end\n    end\nend\n",
            "# @param l [Array<Integer>]\n# @returns {Array<Integer>}\ndef list_unique(l)\n    l.sort.uniq\nend\n",
            "# @param l [Array<Integer>]\n# @returns {Integer}\ndef max_element(l)\n    if l.empty?\n        return 0\n    end\n    return l.max\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef fizz_buzz(n)\n    cnt = 0\n    for i in range(n)\n        if i % 11 == 0 or i % 13 == 0\n            cnt += str(i).count(\"7\")\n        end\n    end\n    return cnt\nend\n",
            "# @param l [Array<Integer>]\n# @returns {Array<Integer>}\ndef sort_even(l)\n    sorted_even = l[::2].sort\n    l.map.with_index do |x, i|\n        i.even? ? sorted_even[i / 2] : x\n    end\nend\n",
            "# @param s [String]\n# @returns {String}\ndef encode_cyclic(s)\n    result = []\n    for i in (0..len(s)).step(3)\n        if i + 3 > len(s)\n            result.append(s[i:])\n        else\n            result.append(s[i+1:i+3])\n            result.append(s[i])\n        end\n    end\n    return \"\".join(result)\nend\n# @param s [String]\n# @returns {String}\ndef decode_cyclic(s)\n    return encode_cyclic(encode_cyclic(s))\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef prime_fib(n)\n    f = [0, 1]\n    cnt = 0\n    while cnt < n\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1])\n            cnt += 1\n    end\n    return f[1]\nend\n",
            "# @param l [Array<Integer>]\n# @returns {Boolean}\ndef triples_sum_to_zero(l)\n    for i in 0..l.length\n        for j in i + 1..l.length\n            for k in j + 1..l.length\n                if l[i] + l[j] + l[k] == 0\n                    return true\n                end\n            end\n        end\n    end\n    return false\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef car_race_collision(n)\n    return n ** 2\nend\n",
            "# @param l [Array<Integer>]\n# @returns {Array<Integer>}\ndef incr_list(l)\n    l.map { |i| i + 1 }\nend\n",
            "# @param l [Array<Integer>]\n# @returns {Boolean}\ndef pairs_sum_to_zero(l)\n    seen = Set.new\n    l.each do |num|\n        if seen.include?(-num)\n            return true\n        end\n        seen.add(num)\n    end\n    return false\nend\n",
            "# @param x [Integer]\n# @param bas [Integer]\n# @returns {String}\ndef change_base(x, bas)\n    if x == 0\n        return \"0\"\n    end\n    digits = []\n    while x > 0\n        digits.append(str(x % bas))\n        x //= bas\n    end\n    return \"\".join(digits[::-1])\nend\n",
            "# @param a [Integer]\n# @param h [Integer]\n# @returns {Float}\ndef triangle_area(a, h)\n    return a * h / 2\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef fib4(n)\n    fib = [0, 0, 2, 0]\n    for i in (4..n + 1)\n        fib[i % 4] = sum(fib)\n    end\n    return fib[n % 4]\nend\n",
            "# @param l [Array<Float>]\n# @returns {Float}\ndef median(l)\n    sl = l.sort\n    if l.length % 2 != 0\n        return sl[l.length / 2]\n    else\n        return (sl[l.length / 2] + sl[l.length / 2 - 1]) / 2\n    end\nend\n",
            "# @param txt [String]\n# @returns {Boolean}\ndef is_palindrome(txt)\n    return txt == txt.reverse\nend\n",
            "# @param n [Integer]\n# @param p [Integer]\n# @returns {Integer}\ndef modp(n, p)\n    ret = 1\n    for _ in range(n)\n        ret = (ret * 2) % p\n    end\n    return ret\nend\n",
            "# @param s [String]\n# @returns {String}\ndef encode_shift(s)\n    result = s.chars.map { |ch|\n        ((ch.ord - 97 + 5) % 26) + 97\n    }\n    result.join\nend\n# @param s [String]\n# @returns {String}\ndef decode_shift(s)\n    result = s.chars.map { |ch|\n        ((ch.ord - 97 + 21) % 26) + 97\n    }\n    result.join\nend\n",
            "# @param txt [String]\n# @returns {String}\ndef remove_vowels(txt)\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in txt if char not in vowels])\nend\n",
            "# @param l [Array<Integer>]\n# @param t [Integer]\n# @returns {Boolean}\ndef below_threshold(l, t)\n    l.all? { |x| x < t }\nend\n",
            "# @param x [Integer]\n# @param y [Integer]\n# @returns {Integer}\ndef add(x, y)\n    return x + y\nend\n",
            "# @param s0 [String]\n# @param s1 [String]\n# @returns {Boolean}\ndef same_chars(s0, s1)\n    return s0.chars.sort == s1.chars.sort\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef fib(n)\n    if n <= 1\n        return n\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\nend\n",
            "# @param brackets [String]\n# @returns {Boolean}\ndef correct_bracketing(brackets)\n    depth = 0\n    brackets.each do |b|\n        if b == \"<\"\n            depth += 1\n        elsif b == \">\"\n            depth -= 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    return depth == 0\nend\n",
            "# @param l [Array<Integer>]\n# @returns {Boolean}\ndef monotonic(l)\n    diff = l.each_cons(2).map { |x, y| y - x }\n    return diff.all? { |x| x <= 0 } || diff.all? { |x| x >= 0 }\nend\n",
            "# @param l1 [Array<Integer>]\n# @param l2 [Array<Integer>]\n# @returns {Array<Integer>}\ndef common(l1, l2)\n    return l1.sort & l2.sort\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef largest_prime_factor(n)\n    i = 2\n    while i * i <= n\n        if n % i\n            i += 1\n        else\n            n /= i\n        end\n    end\n    return n\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef sum_to_n(n)\n    return (0..n).reduce(:+)\nend\n",
            "# @param brackets [String]\n# @returns {Boolean}\ndef correct_bracketing(brackets)\n    depth = 0\n    brackets.each do |b|\n        if b == \"(\"\n            depth += 1\n        elsif b == \")\"\n            depth -= 1\n        end\n        return false if depth < 0\n    end\n    return depth == 0\nend\n",
            "# @param xs [Array<Integer>]\n# @returns {Array<Integer>}\ndef derivative(xs)\n    return [xs[i] * i for i in range(1, len(xs))]\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef fibfib(n)\n    if n <= 1\n        return 0\n    end\n    a, b, c = 0, 0, 1\n    while n > 2\n        a, b, c = b, c, a + b + c\n        n -= 1\n    end\n    return c\nend\n",
            "# @param s [String]\n# @returns {Integer}\ndef vowels_count(s)\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s))\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == \"y\")\n            cnt += 1\n    return cnt\nend\n",
            "# @param x [Integer]\n# @param shift [Integer]\n# @returns {String}\ndef circular_shift(x, shift)\n    x_str = x.to_s\n    if shift > x_str.length\n        return x_str.reverse\n    else\n        return x_str[-shift..-1] + x_str[0..-shift-1]\n    end\nend\n",
            "# @param s [String]\n# @returns {Integer}\ndef digit_sum(s)\n    s.each_char.select(&:uppercase?).sum { |c| c.ord }\nend\n",
            "# @param s [String]\n# @param n [Integer]\n# @returns {Integer}\ndef fruit_distribution(s, n)\n    words = s.split(' ')\n    apples = Integer(words[words.index(\"apples\") - 1])\n    oranges = Integer(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\nend\n",
            "# @param arr [Array<Integer>]\n# @returns {Array<Integer>}\ndef pluck(arr)\n    evens = arr.select { |n| n % 2 == 0 }\n    if evens.length == 0\n        return []\n    end\n    min_even = evens.min\n    return [min_even, arr.index(min_even)]\nend\n",
            "# @param lst [Array<Integer>]\n# @returns {Integer}\ndef search(lst)\n    freqs = {}\n    lst.each do |n|\n        freqs[n] = freqs.fetch(n, 0) + 1\n    end\n    good_vals = freqs.keys.select { |k| freqs[k] >= k }\n    return good_vals.max || -1\nend\n",
            "# @param lst [Array<Integer>]\n# @returns {Array<Integer>}\ndef strange_sort_list(lst)\n    sl = lst.sort\n    result = []\n    left, right = 0, sl.length - 1\n    while left <= right\n        result.push(sl[left])\n        left += 1\n        if left <= right\n            result.push(sl[right])\n            right -= 1\n        end\n    end\n    return result\nend\n",
            "# @param a [Integer]\n# @param b [Integer]\n# @param c [Integer]\n# @returns {Float}\ndef triangle_area(a, b, c)\n    if a + b > c and a + c > b and b + c > a\n        s = (a + b + c) / 2.0\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else\n        return -1.0\n    end\nend\n",
            "# @param q [Array<Integer>]\n# @param w [Integer]\n# @returns {Boolean}\ndef will_it_fly(q, w)\n    if q.length == 0\n        return false\n    end\n    is_palin = q.each_with_index.all? { |x, i| x == q[q.length - i - 1] }\n    total = q.sum\n    return is_palin && total <= w\nend\n",
            "# @param arr [Array<Integer>]\n# @returns {Integer}\ndef smallest_change(arr)\n    ans = 0\n    for i in range(len(arr) // 2)\n        if arr[i] != arr[len(arr) - i - 1]\n            ans += 1\n        end\n    end\n    return ans\nend\n",
            "# @param lst1 [Array<String>]\n# @param lst2 [Array<String>]\n# @returns {Array<String>}\ndef total_match(lst1, lst2)\n    cnt1 = lst1.reduce(0) { |sum, s| sum + s.length }\n    cnt2 = lst2.reduce(0) { |sum, s| sum + s.length }\n    return lst1 if cnt1 <= cnt2\n    return lst2\nend\n",
            "# @param a [Integer]\n# @returns {Boolean}\ndef is_multiply_prime(a)\n    if a < 2\n        return false\n    end\n    for i in 2..floor(sqrt(n)) + 1\n        if a % i == 0\n            return false\n        end\n    end\n    return true\nend\n",
            "# @param x [Integer]\n# @param n [Integer]\n# @returns {Boolean}\ndef is_simple_power(x, n)\n    if n < 2\n        return x == n\n    end\n    tmp = 1\n    while tmp < x\n        tmp *= n\n    end\n    return tmp == x\nend\n",
            "# @param a [Integer]\n# @returns {Boolean}\ndef is_cube(a)\n    a = a.abs\n    root = (a ** (1.0 / 3.0)).round.to_i\n    return root * root * root == a\nend\n",
            "# @param num [String]\n# @returns {Integer}\ndef hex_key(num)\n    return num.count { |x| x.in?(\"2357BD\") }\nend\n",
            "# @param dec [Integer]\n# @returns {String}\ndef decimal_to_binary(dec)\n    binary = dec.to_s(2)\n    return \"db#{binary}db\"\nend\n",
            "# @param s [String]\n# @returns {Boolean}\ndef is_happy(s)\n    if s.length < 3\n        return false\n    end\n    for i in 0..(s.length - 3)\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]\n            return false\n        end\n    end\n    return true\nend\n",
            "# @param grades [Array<Float>]\n# @returns {Array<String>}\ndef numerical_letter_grade(grades)\n    result = []\n    grades.each do |g|\n        if g == 4.0\n            result.append(\"A+\")\n        elsif g > 3.7\n            result.append(\"A\")\n        elsif g > 3.3\n            result.append(\"A-\")\n        elsif g > 3.0\n            result.append(\"B+\")\n        elsif g > 2.7\n            result.append(\"B\")\n        elsif g > 2.3\n            result.append(\"B-\")\n        elsif g > 2.0\n            result.append(\"C+\")\n        elsif g > 1.7\n            result.append(\"C\")\n        elsif g > 1.3\n            result.append(\"C-\")\n        elsif g > 1.0\n            result.append(\"D+\")\n        elsif g > 0.7\n            result.append(\"D\")\n        elsif g > 0.0\n            result.append(\"D-\")\n        else\n            result.append(\"E\")\n        end\n    end\n    return result\nend\n",
            "# @param s [String]\n# @returns {Boolean}\ndef prime_length(s)\n    length = s.length\n    if length < 2\n        return false\n    end\n    for i in 2..sqrt(length)\n        if length % i == 0\n            return false\n        end\n    end\n    return true\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef starts_one_ends(n)\n    if n == 1\n        return 1\n    end\n    return 2 * 9 * (10 ** (n - 2))\nend\n",
            "# @param n [Integer]\n# @returns {String}\ndef solve(n)\n    digits_sum = n.to_s.chars.map(&:to_i).reduce(:+)\n    digits_sum.to_s(2)\nend\n",
            "# @param lst [Array<Integer>]\n# @returns {Integer}\ndef add(lst)\n    sum([x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0])\nend\n",
            "# @param s [String]\n# @returns {String}\ndef anti_shuffle(s)\n    words = s.split(\" \").map { |word| \"\".join(word.chars.sort) }\n    return words.join(\" \")\nend\n",
            "# @param lst [Array<Array<Integer>>]\n# @param x [Integer]\n# @returns {Array<Array<Integer>>}\ndef get_row(lst, x)\n    coords = []\n    for i in 0..lst.length\n        for j in 0..lst[i].length\n            if lst[i][j] == x\n                coords.append([i, j])\n            end\n        end\n    end\n    return coords.sort_by { |a| [a[0], -a[1]] }\nend\n",
            "# @param arr [Array<Integer>]\n# @returns {Array<Integer>}\ndef sort_array(arr)\n    if arr.length == 0\n        return []\n    elsif (arr[0] + arr[-1]) % 2 == 0\n        return arr.sort.reverse\n    else\n        return arr.sort\n    end\nend\n",
            "# @param s [String]\n# @returns {String}\ndef encrypt(s)\n    result = []\n    for ch in s\n        shifted = ch.ord + 4\n        if shifted > 'z'.ord\n            shifted -= 26\n        end\n        result.append(shifted.chr)\n    end\n    return result.join\nend\n",
            "# @param lst [Array<Integer>]\n# @returns {Integer, nil}\ndef next_smallest(lst)\n    sl = sorted(set(lst))\n    if len(sl) < 2\n        return None\n    return sl[1]\nend\n",
            "# @param s [String]\n# @returns {Integer}\ndef is_bored(s)\n    sentences = s.split(r\"[.!?]\\s*\")\n    return sentences.reduce(0) { |sum, sentence| sum + (sentence[:2] == \"I \" ? 1 : 0) }\nend\n",
            "# @param x [Object]\n# @param y [Object]\n# @param z [Object]\n# @returns {Boolean}\ndef any_int(x, y, z)\n    if x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer)\n        if (x + y == z) || (x + z == y) || (y + z == x)\n            return true\n        end\n    end\n    return false\nend\n",
            "# @param message [String]\n# @returns {String}\ndef encode(message)\n    vowels = \"aeiouAEIOU\"\n    result = []\n    message.each_char do |ch|\n        if ch.match?(/[a-zA-Z]/)\n            ch1 = ch.upcase if ch.match?(/[a-z]/)\n            ch1 = ch.downcase if ch.match?(/[A-Z]/)\n            if ch1.match?(vowels)\n                ch1 = ch1.next\n            end\n            result.append(ch1)\n        else\n            result.append(ch)\n        end\n    end\n    return result.join\nend\n",
            "# @param lst [Array<Integer>]\n# @returns {Integer}\ndef skjkasdkd(lst)\n    primes = lst.select { |n| is_prime(n) }\n    if primes.empty?\n        return 0\n    end\n    largest = primes.max.to_s\n    return largest.chars.map(&:to_i).reduce(:+)\nend\ndef is_prime(n)\n    if n < 2\n        return false\n    end\n    (2..Math.sqrt(n)).each do |i|\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\n",
            "# @param d [Hash{String => String}]\n# @returns {Boolean}\ndef check_dict_case(d)\n    if d.empty?\n        return false\n    end\n    return d.keys.all? { |c| c.islower } || d.keys.all? { |c| c.isupper }\nend\n",
            "# @param n [Integer]\n# @returns {Array<Integer>}\ndef count_up_to(n)\n    primes = []\n    for num in (2..n)\n        if all(num % p != 0 for p in primes)\n            primes.append(num)\n        end\n    end\n    return primes\nend\n",
            "# @param a [Integer]\n# @param b [Integer]\n# @returns {Integer}\ndef multiply(a, b)\n    return (abs(a) % 10) * (abs(b) % 10)\nend\n",
            "# @param s [String]\n# @returns {Integer}\ndef count_upper(s)\n    vowels = \"AEIOU\"\n    return len([c for i, c in enumerate(s) if i % 2 == 0 and c in vowels])\nend\n",
            "# @param value [String]\n# @returns {Integer}\ndef closest_integer(value)\n    num = value.to_f\n    if num >= 0\n        return num.to_i + 0.5\n    else\n        return num.to_i - 0.5\n    end\nend\n",
            "# @param n [Integer]\n# @returns {Array<Integer>}\ndef make_a_pile(n)\n    return (0..n).map { |i| n + 2 * i }\nend\n",
            "# @param s [String]\n# @returns {Array<String>}\ndef words_string(s)\n    return s.split(/[, ]/).filter { |w| w.length > 0 }\nend\n",
            "# @param x [Integer]\n# @param y [Integer]\n# @returns {Integer}\ndef choose_num(x, y)\n    if x > y\n        return -1\n    end\n    if y % 2 == 0\n        return y\n    end\n    return y - 1 if x != y else -1\nend\n",
            "# @param n [Integer]\n# @param m [Integer]\n# @returns {String, nil}\ndef rounded_avg(n, m)\n    if n > m\n        return nil\n    end\n    r_avg = (m + n) / 2.0 + 0.5\n    return r_avg.to_s(2)\nend\n",
            "# @param x [Array<Integer>]\n# @returns {Array<Integer>}\ndef unique_digits(x)\n    x.select { |num| num.to_s.chars.all? { |digit| digit.ord % 2 != 0 } }.sort\nend\n",
            "# @param arr [Array<Integer>]\n# @returns {Array<String>}\ndef by_length(arr)\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    return [digit_names[x-1] for x in sorted_arr]\nend\n",
            "# @param n [Integer]\n# @returns {Array<Integer>}\ndef f(n)\n    nums = (1..n).to_a\n    nums.map.with_index do |_, i|\n        if i % 2 != 0\n            nums[0..i].sum\n        else\n            nums[0..i].reduce(:*)\n        end\n    end\nend\n",
            "# @param n [Integer]\n# @returns {Array<Integer>}\ndef even_odd_palindrome(n)\n    cnt = [0, 0]\n    for i in 1..n\n        if is_palindrome(i.to_s)\n            cnt[i % 2] += 1\n        end\n    end\n    return cnt\nend\n",
            "# @param arr [Array<Integer>]\n# @returns {Integer}\ndef count_nums(arr)\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\nend\n",
            "# @param arr [Array<Integer>]\n# @returns {Boolean}\ndef move_one_ball(arr)\n    if arr.length == 0\n        return true\n    end\n    sorted_arr = arr.sort\n    for i in 0..arr.length\n        if arr[i..] == sorted_arr[0..arr.length - i] && arr[0..i] == sorted_arr[arr.length - i..]\n            return true\n        end\n    end\n    return false\nend\n",
            "# @param lst1 [Array<Integer>]\n# @param lst2 [Array<Integer>]\n# @returns {String}\ndef can_exchange(lst1, lst2)\n    odd_cnt = lst1.count { |num| num % 2 != 0 }\n    even_cnt = lst2.count { |num| num % 2 == 0 }\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\nend\n",
            "# @param test [String]\n# @returns {Hash{String => Integer}}\ndef histogram(test)\n    freq = {}\n    words = [w for w in test.split(\" \") if len(w) > 0]\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\nend\n",
            "# @param s [String]\n# @param c [String]\n# @returns {Array<String>}\ndef reverse_delete(s, c)\n    s1 = s.chars.select { |ch| !c.include?(ch) }.join\n    [s1, is_palindrome(s1) ? \"yes\" : \"no\"]\nend\ndef is_palindrome(s)\n    s == s.reverse\nend\n",
            "# @param lst [Array<String>]\n# @returns {Array<String>}\ndef odd_count(lst)\n    result = []\n    for num in lst\n        n = sum(ord(d) % 2 == 1 for d in num)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    end\n    return result\nend\n",
            "# @param nums [Array<Integer>]\n# @returns {Integer}\ndef min_sub_array_sum(nums)\n    min_sum = 0\n    cur_sum = 0\n    nums.each do |n|\n        cur_sum = [cur_sum + n, 0].min\n        min_sum = [cur_sum, min_sum].min\n    end\n    if min_sum == 0\n        min_sum = nums.min\n    end\n    return min_sum\nend\n",
            "# @param grid [Array<Array<Integer>>]\n# @param capacity [Integer]\n# @returns {Integer}\ndef max_fill(grid, capacity)\n    grid.map { |arr| (arr.sum / capacity).ceil }.sum\nend\n",
            "# @param arr [Array<Integer>]\n# @returns {Array<Integer>}\ndef sort_array(arr)\n    arr.sort_by { |x| [count_ones(x), x] }\nend\ndef count_ones(num)\n    num.to_s(2).count(\"1\")\nend\n",
            "# @param s [String]\n# @param n [Integer]\n# @returns {Array<String>}\ndef select_words(s, n)\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").select { |w| w.length > 0 }\n    words.select { |w| w.count { |c| consonants.include?(c.downcase) } == n }\nend\n",
            "# @param word [String]\n# @returns {String}\ndef get_closest_vowel(word)\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1)\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels\n            return word[i]\n        end\n    end\n    return \"\"\nend\n",
            "# @param lst [Array<String>]\n# @returns {String}\ndef match_parens(lst)\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\nend\n",
            "# @param arr [Array<Integer>]\n# @param k [Integer]\n# @returns {Array<Integer>}\ndef maximum(arr, k)\n    if k == 0\n        return []\n    end\n    return arr.sort[-k:]\nend\n",
            "# @param lst [Array<Integer>]\n# @returns {Integer}\ndef solution(lst)\n    return lst.select.with_index { |x, i| i.even? && x.odd? }.sum\nend\n",
            "# @param arr [Array<Integer>]\n# @param k [Integer]\n# @returns {Integer}\ndef add_elements(arr, k)\n    return arr[:k].select { |n| n.to_s.length <= 2 }.sum\nend\n",
            "# @param n [Integer]\n# @returns {Array<Integer>}\ndef get_odd_collatz(n)\n    collatz = [1]\n    while n != 1\n        if n % 2 != 0\n            collatz.append(n)\n            n = 3 * n + 1\n        else\n            n = n // 2\n        end\n    end\n    return sorted(collatz)\nend\n",
            "# @param date [String]\n# @returns {Boolean}\ndef valid_date(date)\n    if not date.length == 10 or not date[2] == \"-\" or not date[5] == \"-\"\n        return false\n    end\n    m = date[0..1].to_i\n    d = date[3..4].to_i\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31\n        return true\n    end\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30\n        return true\n    end\n    if m == 2 and d >= 1 and d <= 29\n        return true\n    end\n    return false\nend\n",
            "# @param txt [String]\n# @returns {Array<String>}\ndef split_words(txt)\n    if \" \" in txt\n        return txt.split(\" \")\n    elsif \",\" in txt\n        return txt.split(\",\")\n    else\n        return [str(len([c for c in txt if c.islower() and ord(c) % 2 == 0]))]\n    end\nend\n",
            "# @param lst [Array<Integer>]\n# @returns {Boolean}\ndef is_sorted(lst)\n    if !lst.each_cons(2).all? { |i, j| i <= j }\n        return false\n    end\n    freq = {}\n    lst.each do |i|\n        freq[i] = freq.fetch(i, 0) + 1\n    end\n    return freq.values.max(0) <= 2\nend\n",
            "# @param interval1 [Array<Integer>]\n# @param interval2 [Array<Integer>]\n# @returns {String}\ndef intersection(interval1, interval2)\n    if interval1[0] < interval2[0]\n        interval1, interval2 = interval2, interval1\n    end\n    l = interval1[0]\n    r = interval1[1]\n    if interval2[0] > l\n        l = interval2[0]\n    end\n    if interval2[1] < r\n        r = interval2[1]\n    end\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\nend\n",
            "# @param arr [Array<Integer>]\n# @returns {Integer, nil}\ndef prod_signs(arr)\n    if !arr\n        return nil\n    end\n    if 0 in arr\n        return 0\n    end\n    sign = -1 if len([n for n in arr if n < 0]) % 2 == 1 else 1\n    return sign * sum([abs(n) for n in arr])\nend\n",
            "# @param grid [Array<Array<Integer>>]\n# @param k [Integer]\n# @returns {Array<Integer>}\ndef min_path(grid, k)\n    n = grid.length\n    min_val = n * n + 1\n    for i in 0..n - 1\n        for j in 0..n - 1\n            if grid[i][j] == 1\n                temp = []\n                if i != 0\n                    temp.append(grid[i - 1][j])\n                end\n                if j != 0\n                    temp.append(grid[i][j - 1])\n                end\n                if i != n - 1\n                    temp.append(grid[i + 1][j])\n                end\n                if j != n - 1\n                    temp.append(grid[i][j + 1])\n                end\n                min_val = temp.min\n            end\n        end\n    end\n    result = []\n    for i in 0..k - 1\n        result.append(1 if i % 2 == 0 else min_val)\n    end\n    return result\nend\n",
            "# @param n [Integer]\n# @returns {Array<Integer>}\ndef tri(n)\n    if n == 0\n        return [1]\n    end\n    seq = [1, 3]\n    for i in (2..n + 1)\n        if i % 2 == 0\n            seq.append(i / 2 + 1)\n        else\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        end\n    end\n    return seq\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef digits(n)\n    odds = n.to_s.chars.map(&:to_i).select { |d| d % 2 == 1 }\n    odds.reduce(:*) if odds.length > 0\nend\n",
            "# @param s [String]\n# @returns {Boolean}\ndef is_nested(s)\n    open_idx = []\n    close_idx = []\n    s.each_char.with_index do |ch, i|\n        if ch == '['\n            open_idx.append(i)\n        elsif ch == ']'\n            close_idx.append(i)\n        end\n    end\n    close_idx.reverse!\n    cnt = 0\n    i = 0\n    l = close_idx.length\n    open_idx.each do |idx|\n        if i < l && idx < close_idx[i]\n            cnt += 1\n            i += 1\n        end\n    end\n    return cnt >= 2\nend\n",
            "# @param lst [Array<Float>]\n# @returns {Integer}\ndef sum_squares(lst)\n    return lst.map { |n| n.ceil ** 2 }.sum\nend\n",
            "# @param txt [String]\n# @returns {Boolean}\ndef check_if_last_char_is_a_letter(txt)\n    if not txt\n        return False\n    end\n    last = txt[txt.rfind(' ') + 1:]\n    return len(last) == 1 and last[0].isalpha()\nend\n",
            "# @param arr [Array<Integer>]\n# @returns {Integer}\ndef can_arrange(arr)\n    if arr.length <= 1\n        return -1\n    end\n    idx = (1..arr.length - 1).select { |i| arr[i] < arr[i - 1] }\n    return idx.max || -1\nend\n",
            "# @param lst [Array<Integer>]\n# @returns {Array<Integer, nil>}\ndef largest_smallest_integers(lst)\n    neg = lst.select { |i| i < 0 }\n    pos = lst.select { |i| i > 0 }\n    max_neg = neg.max if neg.length > 0\n    min_pos = pos.min if pos.length > 0\n    [max_neg, min_pos]\nend\n",
            "# @param a [Object]\n# @param b [Object]\n# @returns {Float, nil}\ndef compare_one(a, b)\n    if a.is_a?(String)\n        a1 = a.gsub(',', '.').to_f\n    elsif a.is_a?(Integer)\n        a1 = a.to_f\n    elsif a.is_a?(Float)\n        a1 = a\n    else\n        raise RuntimeError.new(\"Type Error\")\n    end\n    if b.is_a?(String)\n        b1 = b.gsub(',', '.').to_f\n    elsif b.is_a?(Integer)\n        b1 = b.to_f\n    elsif b.is_a?(Float)\n        b1 = b\n    else\n        raise RuntimeError.new(\"Type Error\")\n    end\n    if a1 == b1\n        return nil\n    elsif a1 > b1\n        return a1\n    else\n        return b1\n    end\nend\n",
            "# @param n [Integer]\n# @returns {Boolean}\ndef is_equal_to_sum_even(n)\n    return n % 2 == 0 and n >= 8\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef special_factorial(n)\n    fact = 1\n    result = 1\n    for i in (1..n + 1)\n        fact *= i\n        result *= fact\n    end\n    return result\nend\n",
            "# @param txt [String]\n# @returns {String}\ndef fix_spaces(txt)\n    re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\nend\n",
            "# @param file_name [String]\n# @returns {String}\ndef file_name_check(file_name)\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or not lst[1] in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or len([x for x in lst[0] if x.isdigit()]) > 3:\n        return \"No\"\n    return \"Yes\"\nend\n",
            "# @param lst [Array<Integer>]\n# @returns {Integer}\ndef sum_squares(lst)\n    result = 0\n    for i in range(len(lst))\n        if i % 3 == 0\n            result += pow(lst[i], 2)\n        elsif i % 4 == 0\n            result += pow(lst[i], 3)\n        else\n            result += lst[i]\n        end\n    end\n    return result\nend\n",
            "# @param sentence [String]\n# @returns {String}\ndef words_in_sentence(sentence)\n    if n < 2\n        return false\n    end\n    for i in (2..floor(sqrt(n)) + 1)\n        if n % i == 0\n            return false\n        end\n    end\n    return true\n    words = sentence.split(\" \")\n    return \" \".join([w for w in words if is_prime(len(w))])\nend\n",
            "# @param x [String]\n# @param n [String]\n# @returns {Boolean}\ndef simplify(x, n)\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = xs[0].to_i * ns[0].to_i\n    den = xs[1].to_i * ns[1].to_i\n    return num % den == 0\nend\n",
            "# @param nums [Array<Integer>]\n# @returns {Array<Integer>}\ndef order_by_points(nums)\n    def digits_sum(n)\n        n_str = n.to_s\n        if n >= 0\n            return n_str.chars.map(&:to_i).reduce(:+)\n        else\n            return n_str[0..1].to_i * 2 + digits_sum(n.abs)\n        end\n    end\n    return nums.sort_by { |n| digits_sum(n) }\nend\n",
            "# @param nums [Array<Integer>]\n# @returns {Integer}\ndef special_filter(nums)\n    odds = \"13579\"\n    return nums.select { |n| n > 10 && n % 2 == 1 && odds.include?(n.to_s[0]) }.length\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef get_max_triples(n)\n    c = [0, 0, 0]\n    for i in (1..n + 1)\n        a = i * i - i + 1\n        c[a % 3] += 1\n    end\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\nend\n",
            "# @param planet1 [String]\n# @param planet2 [String]\n# @returns {Array<String>}\ndef bf(planet1, planet2)\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if !names.include?(planet1) || !names.include?(planet2)\n        return []\n    end\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r\n        l, r = r, l\n    end\n    if l == r\n        return []\n    end\n    return names[l + 1..r]\nend\n",
            "# @param lst [Array<String>]\n# @returns {Array<String>}\ndef sorted_list_sum(lst)\n    result = lst.select { |s| s.length % 2 == 0 }\n    result.sort_by { |x| [x.length, x] }\nend\n",
            "# @param n [Integer]\n# @param x [Integer]\n# @param y [Integer]\n# @returns {Integer}\ndef x_or_y(n, x, y)\n    if n < 2\n        return y\n    end\n    for i in 2..floor(sqrt(n)) + 1\n        if n % i == 0\n            return y\n        end\n    end\n    return x\nend\n",
            "# @param lst [Array<Float>]\n# @returns {Integer}\ndef double_the_difference(lst)\n    return lst.select { |n| n >= 0 && n % 2 == 1 }.map { |n| n * n }.reduce(:+)\nend\n",
            "# @param game [Array<Integer>]\n# @param guess [Array<Integer>]\n# @returns {Array<Integer>}\ndef compare(game, guess)\n    game.zip(guess).map { |x, y| (x - y).abs }\nend\n",
            "# @param class_name [String]\n# @param extensions [Array<String>]\n# @returns {String}\ndef strongest_extension(class_name, extensions)\n    max_s = Float::INFINITY * -1\n    max_ext = \"\"\n    extensions.each do |ext|\n        upper = ext.count { |c| c.isupper }\n        lower = ext.count { |c| c.islower }\n        s = upper - lower\n        if s > max_s\n            max_s = s\n            max_ext = ext\n        end\n    end\n    return \"#{class_name}.#{max_ext}\"\nend\n",
            "# @param a [String]\n# @param b [String]\n# @returns {Boolean}\ndef cycpattern_check(a, b)\n    if a.length < b.length\n        return false\n    end\n    for i in 0..b.length\n        if b[i..-1] + b[0..i] in a\n            return true\n        end\n    end\n    return false\nend\n",
            "# @param num [Integer]\n# @returns {Array<Integer>}\ndef even_odd_count(num)\n    ds = num.abs.to_s\n    even = ds.count { |d| d.ord % 2 == 0 }\n    [even, ds.length - even]\nend\n",
            "# @param num [Integer]\n# @returns {String}\ndef int_to_mini_roman(num)\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i in range(len(values))\n        while num >= values[i]\n            res.append(numerals[i])\n            num -= values[i]\n    end\n    return \"\".join(res)\nend\n",
            "# @param a [Integer]\n# @param b [Integer]\n# @param c [Integer]\n# @returns {Boolean}\ndef right_angle_triangle(a, b, c)\n    s = [a, b, c].sort\n    return  s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\nend\n",
            "# @param words [Array<String>]\n# @returns {String}\ndef find_max(words)\n    max_cnt = 0\n    max_w = \"\"\n    words.each do |w|\n        cnt = w.chars.uniq.length\n        if cnt > max_cnt\n            max_cnt = cnt\n            max_w = w\n        elsif cnt == max_cnt\n            max_w = [max_w, w].min\n        end\n    end\n    return max_w\nend\n",
            "# @param num [Integer]\n# @param need [Integer]\n# @param remaining [Integer]\n# @returns {Array<Integer>}\ndef eat(num, need, remaining)\n    if need <= remaining\n        return [num + need, remaining - need]\n    else\n        return [num + remaining, 0]\n    end\nend\n",
            "# @param operators [Array<String>]\n# @param operands [Array<Integer>]\n# @returns {Integer}\ndef do_algebra(operators, operands)\n    ops = operators.clone\n    nums = operands.clone\n    i = ops.length - 1\n    while i >= 0\n        if ops[i] == \"**\"\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        end\n        i -= 1\n    end\n    i = 0\n    while i < ops.length\n        if ops[i] == \"*\"\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elsif ops[i] == \"//\"\n            nums[i] = nums[i] / nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        end\n        i += 1\n    end\n    i = 0\n    while i < ops.length\n        if ops[i] == \"+\"\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elsif ops[i] == \"-\"\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        end\n        i += 1\n    end\n    return nums[0]\nend\n",
            "# @param s [String]\n# @returns {String}\ndef solve(s)\n    if !s.chars.any? { |ch| ch.isalpha }\n        return s.reverse\n    end\n    result = []\n    s.each_char do |ch|\n        if !ch.isalpha\n            result.append(ch)\n        elsif ch.isupper\n            result.append(ch.downcase)\n        elsif ch.islower\n            result.append(ch.upcase)\n        end\n    end\n    return result.join\nend\n",
            "# @param txt [String]\n# @returns {String, nil}\ndef string_to_md5(txt)\n    if !txt\n        return nil\n    end\n    md5_hash = Digest::MD5.new\n    txt_bytes = txt.encode\n    md5_hash.update(txt_bytes)\n    md5_encoded = md5_hash.hexdigest\n    return md5_encoded\nend\n",
            "# @param a [Integer]\n# @param b [Integer]\n# @returns {Array<Integer>}\ndef generate_integers(a, b)\n    lower = [2, a, b].max\n    upper = [8, a, b].min\n    (lower..upper).select { |i| i % 2 == 0 }\nend\n"
        ],
        "rust": [
            "pub fn has_close_elements(numbers: &Vec<f64>, threshold: f64) -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len() {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "pub fn separate_paren_groups(paren_string: &String) -> Vec<String> {\n    let mut groups = Vec::new();\n    let mut stk = Vec::new();\n    let mut current_group = String::new();\n    let parens = paren_string.replace(\" \", \"\");\n    for ch in parens.chars() {\n        if ch == '(' {\n            stk.push(ch);\n            current_group.push(ch);\n        } else if ch == ')' {\n            stk.pop();\n            current_group.push(ch);\n            if stk.is_empty() {\n                groups.push(current_group);\n                current_group = String::new();\n            }\n        }\n    }\n    return groups;\n}\n",
            "pub fn truncate_number(num: f64) -> f64 {\n    num - floor(num)\n}\n",
            "pub fn below_zero(operations: &Vec<i32>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n        balance += op;\n        if balance < 0 {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "pub fn mean_absolute_deviation(numbers: &Vec<f64>) -> f64 {\n    let mean = numbers.iter().sum::<f64>() / numbers.len() as f64;\n    let deviation = numbers.iter().map(|x| (x - mean).abs()).sum::<f64>();\n    deviation / numbers.len() as f64\n}\n",
            "pub fn intersperse(numbers: &Vec<i32>, delimiter: i32) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len() {\n        if i != 0 {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "pub fn parse_nested_parens(paren_string: &String) -> Vec<i32> {\n    let mut result = Vec::new();\n    let paren_groups = paren_string.split();\n    for group in paren_groups {\n        let mut max_depth = 0;\n        let mut depth = 0;\n        for ch in group.chars() {\n            if ch == \"(\" {\n                depth += 1;\n                max_depth = max_depth.max(depth);\n            } else if ch == \")\" {\n                depth -= 1;\n            }\n        }\n        result.push(max_depth);\n    }\n    return result;\n}\n",
            "pub fn filter_by_substring(strs: &Vec<String>, substring: &String) -> Vec<String> {\n    strs.iter().filter(|s| s.contains(substring)).collect()\n}\n",
            "pub fn sum_product(numbers: &Vec<i32>) -> Vec<i32> {\n    let n_sum = numbers.iter().sum();\n    let n_product = numbers.iter().product();\n    return vec![n_sum, n_product];\n}\n",
            "pub fn rolling_max(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut max_so_far = std::i32::MIN;\n    let mut result = Vec::new();\n    for num in numbers {\n        max_so_far = std::cmp::max(max_so_far, *num);\n        result.push(max_so_far);\n    }\n    result\n}\n",
            "pub fn make_palindrome(s: &String) -> String {\n    if is_palindrome(s) {\n        return s;\n    }\n    for i in 0..s.len() {\n        if is_palindrome(&s[i..]) {\n            return s + &s[..i].chars().rev().collect::<String>()\n        }\n    }\n    return \"\".to_string();\n}\n",
            "pub fn string_xor(a: &String, b: &String) -> String {\n    let mut result = String::new();\n    for (x, y) in a.chars().zip(b.chars()) {\n        if x == y {\n            result.push('0');\n        } else {\n            result.push('1');\n        }\n    }\n    result\n}\n",
            "pub fn longest(strs: &Vec<String>) -> Option<String> {\n    if strs.len() == 0 {\n        return None;\n    }\n    let mut longest_s = strs[0].clone();\n    for s in strs {\n        if s.len() > longest_s.len() {\n            longest_s = s.clone();\n        }\n    }\n    Some(longest_s)\n}\n",
            "pub fn greatest_common_divisor(a: i32, b: i32) -> i32 {\n    if b == 0 {\n        return a;\n    } else {\n        return greatest_common_divisor(b, a % b);\n    }\n}\n",
            "pub fn all_prefixes(s: &String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..s.len() {\n        prefixes.push(s[0..i + 1].to_string());\n    }\n    prefixes\n}\n",
            "pub fn string_sequence(n: i32) -> String {\n    let mut result = String::new();\n    for i in 0..n + 1 {\n        result.push_str(&i.to_string());\n        result.push(' ');\n    }\n    result\n}\n",
            "pub fn count_distinct_characters(s: &String) -> i32 {\n    return s.len();\n}\n",
            "pub fn parse_music(music_string: &String) -> Vec<i32> {\n    let durations = {\n        let mut temp_map = HashMap::new();\n        temp_map.insert(\"o\", 4);\n        temp_map.insert(\"o|\", 2);\n        temp_map.insert(\".|\", 1);\n        temp_map\n    };\n    let notes = music_string.split();\n    return notes.map(|note| durations[note]);\n}\n",
            "pub fn how_many_times(s: &String, substring: &String) -> i32 {\n    let mut times = 0;\n    for i in 0..(s.len() - substring.len() + 1) {\n        if s[i..i + substring.len()] == substring {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "pub fn sort_numbers(numbers: &String) -> String {\n    let num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    let num_list = list(filter(lambda x: x in num_dict, numbers.split(\" \")));\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n}\n",
            "pub fn find_closest_elements(numbers: &Vec<f64>) -> Vec<f64> {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    let mut min_diff = f64::INFINITY;\n    let mut closest_pair = vec![];\n    for i in 1..sorted_numbers.len() {\n        let diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if diff < min_diff {\n            min_diff = diff;\n            closest_pair = vec![sorted_numbers[i - 1], sorted_numbers[i]];\n        }\n    }\n    return closest_pair;\n}\n",
            "pub fn rescale_to_unit(numbers: &Vec<f64>) -> Vec<f64> {\n    let min_num = numbers.iter().min().unwrap();\n    let max_num = numbers.iter().max().unwrap();\n    if min_num == max_num {\n        return vec![0.0; numbers.len()];\n    } else {\n        return numbers.iter().map(|num| (num - min_num) / (max_num - min_num)).collect();\n    }\n}\n",
            "pub fn filter_integers(values: &Vec<Box<dyn Any>>) -> Vec<i32> {\n    values.iter().filter(|x| x.is::<i32>()).map(|x| *x.downcast::<i32>().unwrap()).collect()\n}\n",
            "pub fn str_length(s: &String) -> i32 {\n    s.len()\n}\n",
            "pub fn largest_divisor(n: i32) -> i32 {\n    for i in 2..n {\n        if n % i == 0 {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "pub fn factorize(n: i32) -> Vec<i32> {\n    let mut factors = Vec::new();\n    let mut divisor = 2;\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "pub fn remove_duplicates(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut counts = HashMap::new();\n    for num in numbers {\n        let count = counts.entry(num).or_insert(0);\n        *count += 1;\n    }\n    let mut res = Vec::new();\n    for num in numbers {\n        if counts[num] == 1 {\n            res.push(num);\n        }\n    }\n    return res;\n}\n",
            "pub fn flip_case(s: &String) -> String {\n    let mut flipped = Vec::new();\n    for ch in s.chars() {\n        if !ch.is_alphabetic() {\n            flipped.push(ch);\n        } else if ch.is_lowercase() {\n            flipped.push(ch.to_uppercase().next().unwrap());\n        } else if ch.is_uppercase() {\n            flipped.push(ch.to_lowercase().next().unwrap());\n        }\n    }\n    flipped.into_iter().collect()\n}\n",
            "pub fn concatenate(strs: &Vec<String>) -> String {\n    strs.join(\"\")\n}\n",
            "pub fn filter_by_prefix(strs: &Vec<String>, prefix_str: &String) -> Vec<String> {\n    strs.iter().filter(|s| s.starts_with(prefix_str)).collect()\n}\n",
            "pub fn get_positive(l: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for num in l {\n        if num > 0 {\n            result.push(num);\n        }\n    }\n    result\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..floor(sqrt(n)) + 1 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "pub fn poly(xs: &Vec<i32>, x: f64) -> f64 {\n    let mut res = 0.0;\n    for i in 0..xs.len() {\n        res += xs[i] as f64 * x.powi(i as i32);\n    }\n    res\n}\npub fn find_zero(xs: &Vec<i32>) -> f64 {\n    let mut x1 = 1.0;\n    let mut x2 = -1.0;\n    while poly(xs, x1) * poly(xs, x2) > 0.0 {\n        x1 *= 2.0;\n        x2 *= 2.0;\n    }\n    while (x1 - x2).abs() > 1e-10 {\n        let mid = (x1 + x2) / 2.0;\n        if poly(xs, mid) == 0.0 {\n            return mid;\n        } else if poly(xs, mid) * poly(xs, x1) < 0.0 {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    (x1 + x2) / 2.0\n}\n",
            "pub fn sort_third(l: &Vec<i32>) -> Vec<i32> {\n    let sorted_third = l[::3].sort();\n    return [sorted_third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n}\n",
            "pub fn list_unique(l: &Vec<i32>) -> Vec<i32> {\n    let mut set = std::collections::HashSet::new();\n    for i in l {\n        set.insert(i);\n    }\n    let mut v = Vec::new();\n    for i in set {\n        v.push(i);\n    }\n    v.sort();\n    v\n}\n",
            "pub fn max_element(l: &Vec<i32>) -> i32 {\n    if l.len() == 0 {\n        return 0;\n    }\n    let mut max = l[0];\n    for i in 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n        }\n    }\n    return max;\n}\n",
            "pub fn fizz_buzz(n: i32) -> i32 {\n    let mut cnt = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += i.to_string().matches(\"7\").count() as i32;\n        }\n    }\n    cnt\n}\n",
            "pub fn sort_even(l: &Vec<i32>) -> Vec<i32> {\n    let sorted_even = l.iter().filter(|x| x % 2 == 0).collect::<Vec<i32>>();\n    sorted_even.sort();\n    let mut result = Vec::new();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n            result.push(sorted_even[i / 2]);\n        } else {\n            result.push(l[i]);\n        }\n    }\n    result\n}\n",
            "pub fn encode_cyclic(s: &String) -> String {\n    let mut result = Vec::new();\n    for i in (0..s.len()).step_by(3) {\n        if i + 3 > s.len() {\n            result.push(s[i..].to_string());\n        } else {\n            result.push(s[i+1..i+3].to_string());\n            result.push(s[i..i+1].to_string());\n        }\n    }\n    result.join(\"\")\n}\npub fn decode_cyclic(s: &String) -> String {\n    encode_cyclic(&encode_cyclic(s))\n}\n",
            "pub fn prime_fib(n: i32) -> i32 {\n    let mut f = [0, 1];\n    let mut cnt = 0;\n    while cnt < n {\n        f = [f[1], f[0] + f[1]];\n        if is_prime(f[1]) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\n",
            "pub fn triples_sum_to_zero(l: &Vec<i32>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len() {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "pub fn car_race_collision(n: i32) -> i32 {\n    n.pow(2)\n}\n",
            "pub fn incr_list(l: &Vec<i32>) -> Vec<i32> {\n    let mut new_list: Vec<i32> = Vec::new();\n    for i in l {\n        new_list.push(i + 1);\n    }\n    new_list\n}\n",
            "pub fn pairs_sum_to_zero(l: &Vec<i32>) -> bool {\n    let mut seen = HashSet::new();\n    for num in l {\n        if seen.contains(&(-num)) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n",
            "pub fn change_base(x: i32, bas: i32) -> String {\n    if x == 0 {\n        return \"0\".to_string();\n    }\n    let mut digits: Vec<String> = Vec::new();\n    while x > 0 {\n        digits.push(x % bas);\n        x /= bas;\n    }\n    return digits.reverse();\n}\n",
            "pub fn triangle_area(a: i32, h: i32) -> f64 {\n    return a * h / 2;\n}\n",
            "pub fn fib4(n: i32) -> i32 {\n    let mut fib = [0, 0, 2, 0];\n    for i in 4..n + 1 {\n        fib[i % 4] = fib.iter().sum();\n    }\n    fib[n % 4]\n}\n",
            "pub fn median(l: &Vec<f64>) -> f64 {\n    let mut sl = l.clone();\n    sl.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    if l.len() % 2 != 0 {\n        return sl[l.len() / 2];\n    } else {\n        return (sl[l.len() / 2] + sl[l.len() / 2 - 1]) / 2.0;\n    }\n}\n",
            "pub fn is_palindrome(txt: &String) -> bool {\n    return txt == txt[::-1]\n}\n",
            "pub fn modp(n: i32, p: i32) -> i32 {\n    let mut ret = 1;\n    for _ in 0..n {\n        ret = (ret * 2) % p;\n    }\n    ret\n}\n",
            "pub fn encode_shift(s: &String) -> String {\n    let result = s.chars().map(|ch| {\n        let ord = ch as u8;\n        let new_ord = ((ord - 97 + 5) % 26) + 97;\n        new_ord as char\n    }).collect::<String>();\n    return result;\n}\npub fn decode_shift(s: &String) -> String {\n    let result = s.chars().map(|ch| {\n        let ord = ch as u8;\n        let new_ord = ((ord - 97 + 21) % 26) + 97;\n        new_ord as char\n    }).collect::<String>();\n    return result;\n}\n",
            "pub fn remove_vowels(txt: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    return \"\".join([char for char in txt if char not in vowels])\n}\n",
            "pub fn below_threshold(l: &Vec<i32>, t: i32) -> bool {\n    l.iter().all(|x| x < t)\n}\n",
            "pub fn add(x: i32, y: i32) -> i32 {\n    return x + y;\n}\n",
            "pub fn same_chars(s0: &String, s1: &String) -> bool {\n    return s0.chars().collect::<HashSet<char>>() == s1.chars().collect::<HashSet<char>>();\n}\n",
            "pub fn fib(n: i32) -> i32 {\n    if n <= 1 {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "pub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '<' {\n            depth += 1;\n        } else if b == '>' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "pub fn monotonic(l: &Vec<i32>) -> bool {\n    let diff = l.iter().zip(l.iter().skip(1)).map(|(x, y)| y - x);\n    return diff.all(|x| x <= 0) || diff.all(|x| x >= 0);\n}\n",
            "pub fn common(l1: &Vec<i32>, l2: &Vec<i32>) -> Vec<i32> {\n    let mut l1_set: HashSet<i32> = HashSet::new();\n    for i in l1 {\n        l1_set.insert(*i);\n    }\n    let mut l2_set: HashSet<i32> = HashSet::new();\n    for i in l2 {\n        l2_set.insert(*i);\n    }\n    let mut common_set: HashSet<i32> = HashSet::new();\n    for i in l1_set {\n        if l2_set.contains(&i) {\n            common_set.insert(i);\n        }\n    }\n    let mut common_vec: Vec<i32> = Vec::new();\n    for i in common_set {\n        common_vec.push(i);\n    }\n    common_vec.sort();\n    common_vec\n}\n",
            "pub fn largest_prime_factor(n: i32) -> i32 {\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    n\n}\n",
            "pub fn sum_to_n(n: i32) -> i32 {\n    let mut sum = 0;\n    for i in 0..n + 1 {\n        sum += i;\n    }\n    return sum;\n}\n",
            "pub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '(' {\n            depth += 1;\n        } else if b == ')' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "pub fn derivative(xs: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i] * i);\n    }\n    result\n}\n",
            "pub fn fibfib(n: i32) -> i32 {\n    if n <= 1 {\n        return 0;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    while n > 2 {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "pub fn vowels_count(s: &String) -> i32 {\n    let vowels = \"aeiou\";\n    let mut cnt = 0;\n    for i in 0..s.len() {\n        if s[i].to_lowercase() == vowels[i] || (i == s.len() - 1 && s[i].to_lowercase() == \"y\") {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n",
            "pub fn circular_shift(x: i32, shift: i32) -> String {\n    let x_str = x.to_string();\n    if shift > x_str.len() as i32 {\n        return x_str.chars().rev().collect();\n    } else {\n        return x_str[x_str.len() - shift as usize..].to_string() + &x_str[..x_str.len() - shift as usize];\n    }\n}\n",
            "pub fn digit_sum(s: &String) -> i32 {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as i32).sum()\n}\n",
            "pub fn fruit_distribution(s: &String, n: i32) -> i32 {\n    let words = s.split(' ');\n    let apples = words[words.index(\"apples\") - 1];\n    let oranges = words[words.index(\"oranges\") - 1];\n    return n - apples - oranges;\n}\n",
            "pub fn pluck(arr: &Vec<i32>) -> Vec<i32> {\n    let evens = arr.iter().filter(|&n| n % 2 == 0).collect::<Vec<i32>>();\n    if evens.len() == 0 {\n        return vec![];\n    }\n    let min_even = evens.iter().min().unwrap();\n    let index = arr.iter().position(|&n| n == *min_even).unwrap();\n    return vec![*min_even, index as i32];\n}\n",
            "pub fn search(lst: &Vec<i32>) -> i32 {\n    let mut freqs = HashMap::new();\n    for n in lst {\n        let count = freqs.entry(n).or_insert(0);\n        *count += 1;\n    }\n    let good_vals = freqs.iter().filter(|(k, v)| **v >= **k).map(|(k, _)| *k).collect::<Vec<i32>>();\n    if good_vals.len() == 0 {\n        return -1;\n    }\n    let mut max_val = good_vals[0];\n    for val in good_vals {\n        if val > max_val {\n            max_val = val;\n        }\n    }\n    max_val\n}\n",
            "pub fn strange_sort_list(lst: &Vec<i32>) -> Vec<i32> {\n    let mut sl = lst.clone();\n    sl.sort();\n    let mut result = Vec::new();\n    let mut left = 0;\n    let mut right = sl.len() - 1;\n    while left <= right {\n        result.push(sl[left]);\n        left += 1;\n        if left <= right {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    result\n}\n",
            "pub fn triangle_area(a: i32, b: i32, c: i32) -> f64 {\n    if a + b > c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n        return s * (s - a as f64) * (s - b as f64) * (s - c as f64).sqrt();\n    } else {\n        return -1.0;\n    }\n}\n",
            "pub fn will_it_fly(q: &Vec<i32>, w: i32) -> bool {\n    if q.len() == 0 {\n        return false;\n    }\n    let is_palin = q.iter().enumerate().all(|(i, &x)| x == q[q.len() - i - 1]);\n    let total = q.iter().sum();\n    return is_palin && total <= w;\n}\n",
            "pub fn smallest_change(arr: &Vec<i32>) -> i32 {\n    let mut ans = 0;\n    for i in 0..(arr.len() / 2) {\n        if arr[i] != arr[arr.len() - i - 1] {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "pub fn total_match(lst1: &Vec<String>, lst2: &Vec<String>) -> Vec<String> {\n    let cnt1 = lst1.iter().map(|s| s.len()).sum();\n    let cnt2 = lst2.iter().map(|s| s.len()).sum();\n    if cnt1 <= cnt2 {\n        return lst1.clone();\n    } else {\n        return lst2.clone();\n    }\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..floor(sqrt(n)) + 1 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    return true;\n}\npub fn is_multiply_prime(a: i32) -> bool {\n    let mut cnt = 0;\n    for i in 2..a + 1 {\n        if is_prime(i) {\n            while a % i == 0 {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    return cnt == 3;\n}\n",
            "pub fn is_simple_power(x: i32, n: i32) -> bool {\n    if n < 2 {\n        return x == n;\n    }\n    let mut tmp = 1;\n    while tmp < x {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "pub fn is_cube(a: i32) -> bool {\n    let a = a.abs();\n    let root = (a as f64).powf(1.0 / 3.0) as i32;\n    return root * root * root == a;\n}\n",
            "pub fn hex_key(num: &String) -> i32 {\n    let mut count = 0;\n    for x in num.chars() {\n        if x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D' {\n            count += 1;\n        }\n    }\n    return count;\n}\n",
            "pub fn decimal_to_binary(dec: i32) -> String {\n    let binary = format!(\"{:b}\", dec);\n    return format!(\"db{}db\", binary);\n}\n",
            "pub fn is_happy(s: &String) -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    for i in 0..(s.len() - 2) {\n        if s.chars().nth(i).unwrap() == s.chars().nth(i + 1).unwrap() || s.chars().nth(i).unwrap() == s.chars().nth(i + 2).unwrap() || s.chars().nth(i + 1).unwrap() == s.chars().nth(i + 2).unwrap() {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "pub fn numerical_letter_grade(grades: &Vec<f64>) -> Vec<String> {\n    let mut result = Vec::new();\n    for g in grades {\n        if g == 4.0 {\n            result.push(\"A+\".to_string());\n        } else if g > 3.7 {\n            result.push(\"A\".to_string());\n        } else if g > 3.3 {\n            result.push(\"A-\".to_string());\n        } else if g > 3.0 {\n            result.push(\"B+\".to_string());\n        } else if g > 2.7 {\n            result.push(\"B\".to_string());\n        } else if g > 2.3 {\n            result.push(\"B-\".to_string());\n        } else if g > 2.0 {\n            result.push(\"C+\".to_string());\n        } else if g > 1.7 {\n            result.push(\"C\".to_string());\n        } else if g > 1.3 {\n            result.push(\"C-\".to_string());\n        } else if g > 1.0 {\n            result.push(\"D+\".to_string());\n        } else if g > 0.7 {\n            result.push(\"D\".to_string());\n        } else if g > 0.0 {\n            result.push(\"D-\".to_string());\n        } else {\n            result.push(\"E\".to_string());\n        }\n    }\n    return result;\n}\n",
            "pub fn prime_length(s: &String) -> bool {\n    let length = s.len();\n    if length < 2 {\n        return false;\n    }\n    for i in 2..floor(sqrt(length)) + 1 {\n        if length % i == 0 {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "pub fn starts_one_ends(n: i32) -> i32 {\n    if n == 1 {\n        return 1;\n    }\n    return 2 * 9 * (10 ** (n - 2));\n}\n",
            "pub fn solve(n: i32) -> String {\n    let digits_sum = str::from_utf8(&n.to_le_bytes()).unwrap().chars().filter(|&c| c != '-').map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n    return format!(\"{:b}\", digits_sum);\n}\n",
            "pub fn add(lst: &Vec<i32>) -> i32 {\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    return sum;\n}\n",
            "pub fn anti_shuffle(s: &String) -> String {\n    let words = s.split(\" \").map(|word| {\n        let mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n        chars.into_iter().collect()\n    });\n    words.collect()\n}\n",
            "pub fn get_row(lst: &Vec<Vec<i32>>, x: i32) -> Vec<Vec<i32>> {\n    let mut coords = vec![];\n    for i in 0..lst.len() {\n        for j in 0..lst[i].len() {\n            if lst[i][j] == x {\n                coords.push(vec![i, j]);\n            }\n        }\n    }\n    coords.sort_by(|a, b| a[0].cmp(&b[0]).then(b[1].cmp(&a[1]));\n    coords\n}\n",
            "pub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    if arr.len() == 0 {\n        return vec![];\n    }\n    if (arr[0] + arr[arr.len() - 1]) % 2 == 0 {\n        return arr.clone().into_iter().rev().collect();\n    } else {\n        return arr.clone().into_iter().collect();\n    }\n}\n",
            "pub fn encrypt(s: &String) -> String {\n    let mut result = Vec::new();\n    for ch in s.chars() {\n        let shifted = ch as u8 + 4;\n        if shifted > 'z' as u8 {\n            shifted -= 26;\n        }\n        result.push(shifted as char);\n    }\n    return result.into_iter().collect();\n}\n",
            "pub fn next_smallest(lst: &Vec<i32>) -> Option<i32> {\n    let sl = lst.iter().cloned().collect::<Vec<i32>>();\n    sl.sort();\n    sl.dedup();\n    if sl.len() < 2 {\n        return None;\n    }\n    return Some(sl[1]);\n}\n",
            "pub fn is_bored(s: &String) -> i32 {\n    let sentences = re.split(r\"[.!?]\\s*\", s);\n    return sum(sentence[:2] == \"I \" for sentence in sentences if len(sentence) >= 2)\n}\n",
            "pub fn any_int(x: &Box<dyn Any>, y: &Box<dyn Any>, z: &Box<dyn Any>) -> bool {\n    if x.is::<i32>() && y.is::<i32>() && z.is::<i32>() {\n        let x = *x.downcast_ref::<i32>().unwrap();\n        let y = *y.downcast_ref::<i32>().unwrap();\n        let z = *z.downcast_ref::<i32>().unwrap();\n        if (x + y == z) || (x + z == y) || (y + z == x) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "pub fn encode(message: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    let mut result = Vec::new();\n    for ch in message.chars() {\n        if ch.is_alphabetic() {\n            let ch1 = if ch.is_lowercase() {\n                ch.to_uppercase().next().unwrap()\n            } else {\n                ch.to_lowercase().next().unwrap()\n            };\n            if vowels.contains(ch1) {\n                result.push(ch1.next().unwrap());\n            } else {\n                result.push(ch1);\n            }\n        } else {\n            result.push(ch);\n        }\n    }\n    result.into_iter().collect()\n}\n",
            "pub fn skjkasdkd(lst: &Vec<i32>) -> i32 {\n    let primes = lst.iter().filter(|n| {\n        if *n < 2 {\n            return false;\n        }\n        for i in 2..floor(sqrt(*n)) + 1 {\n            if *n % i == 0 {\n                return false;\n            }\n        }\n        return true;\n    }).collect();\n    if primes.len() == 0 {\n        return 0;\n    }\n    let largest = primes.iter().max().unwrap().to_string();\n    return largest.chars().map(|digit| digit.to_digit(10).unwrap()).sum();\n}\n",
            "pub fn check_dict_case(d: &HashMap<String,String>) -> bool {\n    if d.is_empty() {\n        return false;\n    }\n    let mut all_lower = true;\n    let mut all_upper = true;\n    for c in d.keys() {\n        if !c.chars().all(|c| c.is_lowercase()) {\n            all_lower = false;\n        }\n        if !c.chars().all(|c| c.is_uppercase()) {\n            all_upper = false;\n        }\n    }\n    return all_lower || all_upper;\n}\n",
            "pub fn count_up_to(n: i32) -> Vec<i32> {\n    let mut primes = Vec::new();\n    for num in 2..n {\n        if primes.iter().all(|p| num % p != 0) {\n            primes.push(num);\n        }\n    }\n    primes\n}\n",
            "pub fn multiply(a: i32, b: i32) -> i32 {\n    return (a.abs() % 10) * (b.abs() % 10);\n}\n",
            "pub fn count_upper(s: &String) -> i32 {\n    let vowels = \"AEIOU\";\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(c) {\n            count += 1;\n        }\n    }\n    return count;\n}\n",
            "pub fn closest_integer(value: &String) -> i32 {\n    let num = value.parse::<f64>().unwrap();\n    if num >= 0.0 {\n        return (num + 0.5) as i32;\n    } else {\n        return (num - 0.5) as i32;\n    }\n}\n",
            "pub fn make_a_pile(n: i32) -> Vec<i32> {\n    let mut pile = Vec::new();\n    for i in 0..n {\n        pile.push(n + 2 * i);\n    }\n    pile\n}\n",
            "pub fn words_string(s: &String) -> Vec<String> {\n    let mut words: Vec<String> = Vec::new();\n    for w in re.split(r\"[, ]\", s) {\n        if w.len() > 0 {\n            words.push(w);\n        }\n    }\n    return words;\n}\n",
            "pub fn choose_num(x: i32, y: i32) -> i32 {\n    if x > y {\n        return -1;\n    }\n    if y % 2 == 0 {\n        return y;\n    }\n    return y - 1 if x != y else -1;\n}\n",
            "pub fn rounded_avg(n: i32, m: i32) -> Option<String> {\n    if n > m {\n        return None;\n    }\n    let r_avg = (m + n) / 2 + 0.5;\n    return Some(format!(\"{:b}\", r_avg));\n}\n",
            "pub fn unique_digits(x: &Vec<i32>) -> Vec<i32> {\n    x.iter().filter(|&num| {\n        let mut is_odd = true;\n        for digit in num.to_string().chars() {\n            if digit.to_digit(10).unwrap() % 2 == 0 {\n                is_odd = false;\n                break;\n            }\n        }\n        is_odd\n    }).collect()\n}\n",
            "pub fn by_length(arr: &Vec<i32>) -> Vec<String> {\n    let digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let sorted_arr = arr.iter().filter(|x| 1 <= *x && *x <= 9).collect::<Vec<i32>>();\n    sorted_arr.sort_by(|a, b| b.cmp(a));\n    sorted_arr.iter().map(|x| digit_names[*x as usize - 1].to_string()).collect::<Vec<String>>()\n}\n",
            "pub fn f(n: i32) -> Vec<i32> {\n    let nums = (1..=n).collect::<Vec<i32>>();\n    nums.iter().map(|i| {\n        if i % 2 != 0 {\n            nums[..*i as usize].iter().sum()\n        } else {\n            nums[..*i as usize].iter().product()\n        }\n    }).collect()\n}\n",
            "pub fn even_odd_palindrome(n: i32) -> Vec<i32> {\n    let mut cnt = [0, 0];\n    for i in 1..=n {\n        if is_palindrome(i.to_string()) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt.to_vec();\n}\n",
            "pub fn count_nums(arr: &Vec<i32>) -> i32 {\n    let mut count = 0;\n    for n in arr {\n        let n_str = n.to_string();\n        if *n >= 0 {\n            let mut sum = 0;\n            for d in n_str.chars() {\n                sum += d.to_digit(10).unwrap();\n            }\n            if sum > 0 {\n                count += 1;\n            }\n        } else {\n            let n_str = n_str[2..].to_string();\n            let mut sum = 0;\n            for d in n_str.chars() {\n                sum += d.to_digit(10).unwrap();\n            }\n            if sum > 0 {\n                count += 2;\n            }\n        }\n    }\n    count\n}\n",
            "pub fn move_one_ball(arr: &Vec<i32>) -> bool {\n    if arr.len() == 0 {\n        return true;\n    }\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort();\n    for i in 0..arr.len() {\n        if arr[i..].to_vec() == sorted_arr[..arr.len() - i].to_vec() && arr[..i].to_vec() == sorted_arr[arr.len() - i..].to_vec() {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "pub fn can_exchange(lst1: &Vec<i32>, lst2: &Vec<i32>) -> String {\n    let odd_cnt = lst1.iter().filter(|&num| num % 2 != 0).count();\n    let even_cnt = lst2.iter().filter(|&num| num % 2 == 0).count();\n    if even_cnt >= odd_cnt {\n        return \"YES\".to_string();\n    }\n    return \"NO\".to_string();\n}\n",
            "pub fn histogram(test: &String) -> HashMap<String,i32> {\n    let mut freq = HashMap::new();\n    let words = test.split(\" \").filter(|w| w.len() > 0).collect::<Vec<&str>>();\n    for w in words {\n        let count = freq.entry(w.to_string()).or_insert(0);\n        *count += 1;\n    }\n    let mut result = HashMap::new();\n    if freq.len() > 0 {\n        let max_freq = freq.values().max().unwrap();\n        for (k, v) in freq {\n            if v == max_freq {\n                result.insert(k, v);\n            }\n        }\n    }\n    return result;\n}\n",
            "pub fn reverse_delete(s: &String, c: &String) -> Vec<String> {\n    let s1 = s.chars().filter(|&ch| !c.contains(ch)).collect::<String>();\n    return vec![s1, if is_palindrome(&s1) { \"yes\".to_string() } else { \"no\".to_string() }];\n}\n",
            "pub fn odd_count(lst: &Vec<String>) -> Vec<String> {\n    let mut result = Vec::new();\n    for num in lst {\n        let n = num.chars().map(|d| (d as u32) % 2 == 1).sum();\n        let rs = \"the number of odd elements in the string i of the input.\";\n        result.push(rs.replace(\"i\", &n.to_string()));\n    }\n    return result;\n}\n",
            "pub fn min_sub_array_sum(nums: &Vec<i32>) -> i32 {\n    let mut min_sum = 0;\n    let mut cur_sum = 0;\n    for n in nums {\n        cur_sum = min(cur_sum + n, 0);\n        min_sum = min(cur_sum, min_sum);\n    }\n    if min_sum == 0 {\n        min_sum = min(nums);\n    }\n    return min_sum;\n}\n",
            "pub fn max_fill(grid: &Vec<Vec<i32>>, capacity: i32) -> i32 {\n    return grid.iter().map(|arr| ceil(arr.iter().sum::<i32>() / capacity)).sum();\n}\n",
            "pub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr.clone()\n}\n",
            "pub fn select_words(s: &String, n: i32) -> Vec<String> {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let words = s.split(\" \").filter(|w| w.len() > 0).collect();\n    return words.iter().filter(|w| w.chars().filter(|c| consonants.contains(c.to_lowercase().as_str())).count() == n).collect();\n}\n",
            "pub fn get_closest_vowel(word: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    for i in (0..(word.len() - 2)).rev() {\n        if vowels.contains(word.chars().nth(i).unwrap()) && !vowels.contains(word.chars().nth(i - 1).unwrap()) && !vowels.contains(word.chars().nth(i + 1).unwrap()) {\n            return word.chars().nth(i).unwrap().to_string();\n        }\n    }\n    return \"\".to_string();\n}\n",
            "pub fn match_parens(lst: &Vec<String>) -> String {\n    let mut depth = 0;\n    for ch in lst[0].chars() {\n        if ch == '(' {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return \"No\".to_string();\n        }\n    }\n    let s1 = lst[0].clone() + &lst[1];\n    let s2 = lst[1].clone() + &lst[0];\n    if check(s1) || check(s2) {\n        return \"Yes\".to_string();\n    } else {\n        return \"No\".to_string();\n    }\n}\n",
            "pub fn maximum(arr: &Vec<i32>, k: i32) -> Vec<i32> {\n    if k == 0 {\n        return vec![];\n    }\n    arr.sort();\n    return arr[arr.len() - k as usize..].to_vec();\n}\n",
            "pub fn solution(lst: &Vec<i32>) -> i32 {\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n            sum += x;\n        }\n    }\n    return sum;\n}\n",
            "pub fn add_elements(arr: &Vec<i32>, k: i32) -> i32 {\n    let mut sum = 0;\n    for n in arr[0..k as usize].iter() {\n        if n.to_string().len() <= 2 {\n            sum += n;\n        }\n    }\n    return sum;\n}\n",
            "pub fn get_odd_collatz(n: i32) -> Vec<i32> {\n    let mut collatz = vec![1];\n    while n != 1 {\n        if n % 2 != 0 {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    collatz.sort();\n    collatz\n}\n",
            "pub fn valid_date(date: &String) -> bool {\n    if !(date.len() == 10 || date[2] == \"-\" || date[5] == \"-\") {\n        return false;\n    }\n    let m = date[..2].parse::<i32>().unwrap();\n    let d = date[3..5].parse::<i32>().unwrap();\n    if m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31 {\n        return true;\n    }\n    if m in [4, 6, 9, 11] && d >= 1 && d <= 30 {\n        return true;\n    }\n    if m == 2 && d >= 1 && d <= 29 {\n        return true;\n    }\n    return false;\n}\n",
            "pub fn split_words(txt: &String) -> Vec<String> {\n    if \" \" in txt {\n        return txt.split(\" \");\n    } else if \",\" in txt {\n        return txt.split(\",\");\n    } else {\n        return [str(len([c for c in txt if c.islower() and ord(c) % 2 == 0]))];\n    }\n}\n",
            "pub fn is_sorted(lst: &Vec<i32>) -> bool {\n    if !lst.iter().enumerate().all(|(i, &x)| {\n        if i == 0 {\n            true\n        } else {\n            lst[i - 1] <= x\n        }\n    }) {\n        return false;\n    }\n    let mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n    return freq.values().max().unwrap_or(0) <= 2;\n}\n",
            "pub fn intersection(interval1: &Vec<i32>, interval2: &Vec<i32>) -> String {\n    let l = max(interval1[0], interval2[0]);\n    let r = min(interval1[1], interval2[1]);\n    let length = r - l;\n    if length > 0 && is_prime(length) {\n        return \"YES\".to_string();\n    }\n    return \"NO\".to_string();\n}\n",
            "pub fn prod_signs(arr: &Vec<i32>) -> Option<i32> {\n    if arr.len() == 0 {\n        return None;\n    }\n    if arr.contains(&0) {\n        return Some(0);\n    }\n    let sign = if arr.iter().filter(|&n| n < 0).count() % 2 == 1 {\n        -1\n    } else {\n        1\n    };\n    return Some(sign * arr.iter().map(|&n| n.abs()).sum());\n}\n",
            "pub fn min_path(grid: &Vec<Vec<i32>>, k: i32) -> Vec<i32> {\n    let n = grid.len();\n    let mut min_val = n * n + 1;\n    for i in 0..n {\n        for j in 0..n {\n            if grid[i][j] == 1 {\n                let mut temp = Vec::new();\n                if i != 0 {\n                    temp.push(grid[i - 1][j]);\n                }\n                if j != 0 {\n                    temp.push(grid[i][j - 1]);\n                }\n                if i != n - 1 {\n                    temp.push(grid[i + 1][j]);\n                }\n                if j != n - 1 {\n                    temp.push(grid[i][j + 1]);\n                }\n                min_val = temp.iter().min().unwrap();\n            }\n        }\n    }\n    let mut result = Vec::new();\n    for i in 0..k {\n        result.push(if i % 2 == 0 { 1 } else { min_val });\n    }\n    result\n}\n",
            "pub fn tri(n: i32) -> Vec<i32> {\n    if n == 0 {\n        return vec![1];\n    }\n    let mut seq = vec![1, 3];\n    for i in 2..n + 1 {\n        if i % 2 == 0 {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "pub fn digits(n: i32) -> i32 {\n    let odds = str::from_utf8(&n.to_be_bytes()).unwrap().chars().filter(|&d| d.to_digit(10).unwrap() % 2 == 1).collect::<String>();\n    odds.parse::<i32>().unwrap_or(0)\n}\n",
            "pub fn is_nested(s: &String) -> bool {\n    let mut open_idx = Vec::new();\n    let mut close_idx = Vec::new();\n    for (i, ch) in s.chars().enumerate() {\n        if ch == '[' {\n            open_idx.push(i);\n        } else if ch == ']' {\n            close_idx.push(i);\n        }\n    }\n    close_idx.reverse();\n    let mut cnt = 0;\n    let mut i = 0;\n    let l = close_idx.len();\n    for idx in open_idx {\n        if i < l && idx < close_idx[i] {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "pub fn sum_squares(lst: &Vec<f64>) -> i32 {\n    let mut sum = 0;\n    for n in lst {\n        sum += (n.ceil() as i32).pow(2);\n    }\n    sum\n}\n",
            "pub fn check_if_last_char_is_a_letter(txt: &String) -> bool {\n    if txt.len() == 0 {\n        return false;\n    }\n    let last = txt[txt.rfind(' ') + 1..];\n    return last.len() == 1 && last[0].is_alphabetic();\n}\n",
            "pub fn can_arrange(arr: &Vec<i32>) -> i32 {\n    if arr.len() <= 1 {\n        return -1;\n    }\n    let idx = (1..arr.len()).filter(|i| arr[*i] < arr[i - 1]).collect::<Vec<usize>>();\n    return *idx.iter().max().unwrap_or(&-1);\n}\n",
            "pub fn largest_smallest_integers(lst: &Vec<i32>) -> Vec<Option<i32>> {\n    let neg = lst.iter().filter(|&x| x < 0).collect();\n    let pos = lst.iter().filter(|&x| x > 0).collect();\n    let max_neg = neg.iter().max();\n    let min_pos = pos.iter().min();\n    return vec![max_neg, min_pos];\n}\n",
            "pub fn compare_one(a: &Box<dyn Any>, b: &Box<dyn Any>) -> Option<f64> {\n    let a1 = any_to_real(a);\n    let b1 = any_to_real(b);\n    if a1 == b1 {\n        return None;\n    } else if a1 > b1 {\n        return Some(a1);\n    } else {\n        return Some(b1);\n    }\n}\n",
            "pub fn is_equal_to_sum_even(n: i32) -> bool {\n    return n % 2 == 0 && n >= 8\n}\n",
            "pub fn special_factorial(n: i32) -> i32 {\n    let mut fact = 1;\n    let mut result = 1;\n    for i in 1..n + 1 {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "pub fn fix_spaces(txt: &String) -> String {\n    let re = Regex::new(r\"\\s{3,}\").unwrap();\n    return re.replace_all(txt, \"-\").replace(\" \", \"_\");\n}\n",
            "pub fn file_name_check(file_name: &String) -> String {\n    let suf = [\"txt\", \"exe\", \"dll\"];\n    let lst = file_name.split(\".\");\n    if lst.len() != 2 || !lst[1].in(suf) || lst[0].len() == 0 || !lst[0][0].isalpha() || lst[0].filter(|x| x.isdigit()).len() > 3 {\n        return \"No\".to_string();\n    }\n    return \"Yes\".to_string();\n}\n",
            "pub fn sum_squares(lst: &Vec<i32>) -> i32 {\n    let mut result = 0;\n    for i in 0..lst.len() {\n        if i % 3 == 0 {\n            result += lst[i].pow(2);\n        } else if i % 4 == 0 {\n            result += lst[i].pow(3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "pub fn words_in_sentence(sentence: &String) -> String {\n    let words = sentence.split(\" \");\n    let mut result = String::new();\n    for w in words {\n        if is_prime(w.len()) {\n            result.push_str(w);\n            result.push_str(\" \");\n        }\n    }\n    result\n}\n",
            "pub fn simplify(x: &String, n: &String) -> bool {\n    let xs = x.split(\"/\");\n    let ns = n.split(\"/\");\n    let num = int(xs[0]) * int(ns[0]);\n    let den = int(xs[1]) * int(ns[1]);\n    return num % den == 0;\n}\n",
            "pub fn order_by_points(nums: &Vec<i32>) -> Vec<i32> {\n    let mut nums = nums.clone();\n    nums.sort_by(|a, b| {\n        let a_str = a.to_string();\n        let b_str = b.to_string();\n        let a_sum = a_str.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b_str.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n    nums\n}\n",
            "pub fn special_filter(nums: &Vec<i32>) -> i32 {\n    let odds = \"13579\";\n    let mut count = 0;\n    for n in nums {\n        if *n > 10 && *n % 2 == 1 && odds.contains(&n.to_string()[0..1]) {\n            count += 1;\n        }\n    }\n    count\n}\n",
            "pub fn get_max_triples(n: i32) -> i32 {\n    let mut c = [0, 0, 0];\n    for i in 1..=n {\n        let a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}\n",
            "pub fn bf(planet1: &String, planet2: &String) -> Vec<String> {\n    let names = vec![\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if !names.contains(planet1) || !names.contains(planet2) {\n        return vec![];\n    }\n    let l = names.iter().position(|&x| x == *planet1).unwrap();\n    let r = names.iter().position(|&x| x == *planet2).unwrap();\n    if l > r {\n        let t = l;\n        l = r;\n        r = t;\n    }\n    if l == r {\n        return vec![];\n    }\n    return names[l + 1..r].to_vec();\n}\n",
            "pub fn sorted_list_sum(lst: &Vec<String>) -> Vec<String> {\n    let result = lst.iter().filter(|s| s.len() % 2 == 0).collect();\n    result.sort_by_key(|s| (s.len(), s));\n    result\n}\n",
            "pub fn x_or_y(n: i32, x: i32, y: i32) -> i32 {\n    if n < 2 {\n        return y;\n    }\n    for i in 2..floor(sqrt(n)) + 1 {\n        if n % i == 0 {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "pub fn double_the_difference(lst: &Vec<f64>) -> i32 {\n    let mut sum = 0;\n    for n in lst {\n        if n >= 0.0 && n % 2.0 == 1.0 {\n            sum += n * n;\n        }\n    }\n    return sum;\n}\n",
            "pub fn compare(game: &Vec<i32>, guess: &Vec<i32>) -> Vec<i32> {\n    game.iter().zip(guess.iter()).map(|(x, y)| (x - y).abs()).collect()\n}\n",
            "pub fn strongest_extension(class_name: &String, extensions: &Vec<String>) -> String {\n    let mut max_s = float(\"-inf\");\n    let mut max_ext = \"\";\n    for ext in extensions {\n        let upper = len([c for c in ext if c.isupper()]);\n        let lower = len([c for c in ext if c.islower()]);\n        let s = upper - lower;\n        if s > max_s {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return f\"{class_name}.{max_ext}\";\n}\n",
            "pub fn cycpattern_check(a: &String, b: &String) -> bool {\n    if a.len() < b.len() {\n        return false;\n    }\n    for i in 0..b.len() {\n        if b[i..].to_string() + &b[..i].to_string() == *a {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "pub fn even_odd_count(num: i32) -> Vec<i32> {\n    let ds = num.to_string();\n    let even = ds.chars().filter(|&d| d.is_digit(10) && d % 2 == 0).count();\n    return vec![even, ds.len() - even];\n}\n",
            "pub fn int_to_mini_roman(num: i32) -> String {\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let mut res = Vec::new();\n    for i in 0..values.len() {\n        while num >= values[i] {\n            res.push(numerals[i]);\n            num -= values[i];\n        }\n    }\n    res.join(\"\")\n}\n",
            "pub fn right_angle_triangle(a: i32, b: i32, c: i32) -> bool {\n    let s = [a, b, c].sort();\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}\n",
            "pub fn find_max(words: &Vec<String>) -> String {\n    let mut max_cnt = 0;\n    let mut max_w = String::new();\n    for w in words {\n        let cnt = w.chars().collect::<HashSet<char>>().len();\n        if cnt > max_cnt {\n            max_cnt = cnt;\n            max_w = w.clone();\n        } else if cnt == max_cnt {\n            max_w = min(max_w, w);\n        }\n    }\n    return max_w;\n}\n",
            "pub fn eat(num: i32, need: i32, remaining: i32) -> Vec<i32> {\n    if need <= remaining {\n        return vec![num + need, remaining - need];\n    } else {\n        return vec![num + remaining, 0];\n    }\n}\n",
            "pub fn do_algebra(operators: &Vec<String>, operands: &Vec<i32>) -> i32 {\n    let mut ops = operators.clone();\n    let mut nums = operands.clone();\n    let mut i = ops.len() - 1;\n    while i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = nums[i].pow(nums[i + 1] as u32);\n            nums.pop();\n            ops.pop();\n        }\n        i -= 1;\n    }\n    i = 0;\n    while i < ops.len() {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.pop();\n            ops.pop();\n            i -= 1;\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i + 1];\n            nums.pop();\n            ops.pop();\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while i < ops.len() {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.pop();\n            ops.pop();\n            i -= 1;\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.pop();\n            ops.pop();\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "pub fn solve(s: &String) -> String {\n    if !s.chars().any(|ch| ch.is_alphabetic()) {\n        return s.chars().rev().collect();\n    }\n    let mut result = Vec::new();\n    for ch in s.chars() {\n        if !ch.is_alphabetic() {\n            result.push(ch);\n        } else if ch.is_uppercase() {\n            result.push(ch.to_lowercase().next().unwrap());\n        } else if ch.is_lowercase() {\n            result.push(ch.to_uppercase().next().unwrap());\n        }\n    }\n    result.into_iter().collect()\n}\n",
            "pub fn string_to_md5(txt: &String) -> Option<String> {\n    if txt.is_empty() {\n        return None;\n    }\n    let mut md5_hash = Md5::new();\n    let txt_bytes = txt.as_bytes();\n    md5_hash.update(txt_bytes);\n    let md5_encoded = md5_hash.finalize();\n    return Some(md5_encoded.to_string());\n}\n",
            "pub fn generate_integers(a: i32, b: i32) -> Vec<i32> {\n    let lower = max(2, min(a, b));\n    let upper = min(8, max(a, b));\n    return (lower..=upper).filter(|&i| i % 2 == 0).collect();\n}\n"
        ],
        "scala": [
            "def hasCloseElements(numbers: Seq[Double], threshold: Double): Boolean = {\n    for (i <- 0 until numbers.length) {\n        for (j <- i + 1 until numbers.length) {\n            if (math.abs(numbers(i) - numbers(j)) < threshold) {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "def separateParenGroups(parenString: String): Seq[String] = {\n    val groups = Seq[String]()\n    val stk = Seq[String]()\n    var currentGroup = \"\"\n    val parens = parenString.replace(\" \", \"\")\n    for (ch <- parens) {\n        if (ch == \"(\") {\n            stk.append(ch)\n            currentGroup += ch\n        } else if (ch == \")\") {\n            stk.pop()\n            currentGroup += ch\n            if (stk.isEmpty) {\n                groups.append(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "def truncateNumber(num: Double): Double = {\n    num - floor(num)\n}\n",
            "def belowZero(operations: Seq[Int]): Boolean = {\n    var balance = 0\n    for (op <- operations) {\n        balance += op\n        if (balance < 0) {\n            return true\n        }\n    }\n    return false\n}\n",
            "def meanAbsoluteDeviation(numbers: Seq[Double]): Double = {\n    val mean = numbers.sum / numbers.length\n    val deviation = numbers.map(x => math.abs(x - mean)).sum\n    deviation / numbers.length\n}\n",
            "def intersperse(numbers: Seq[Int], delimiter: Int): Seq[Int] = {\n    var result = Seq[Int]()\n    for (i <- 0 until numbers.length) {\n        if (i != 0) {\n            result = result :+ delimiter\n        }\n        result = result :+ numbers(i)\n    }\n    return result\n}\n",
            "def parseNestedParens(parenString: String): Seq[Int] = {\n    val result = Seq.empty[Int]\n    val parenGroups = parenString.split(\" \")\n    for (group <- parenGroups) {\n        var maxDepth = 0\n        var depth = 0\n        for (ch <- group) {\n            if (ch == \"(\") {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if (ch == \")\") {\n                depth -= 1\n            }\n        }\n        result :+ maxDepth\n    }\n    result\n}\n",
            "def filterBySubstring(strs: Seq[String], substring: String): Seq[String] = {\n    strs.filter(s => s.contains(substring))\n}\n",
            "def sumProduct(numbers: Seq[Int]): Seq[Int] = {\n    val nSum = numbers.sum\n    val nProduct = numbers.reduce((x, y) => x * y)\n    Seq(nSum, nProduct)\n}\n",
            "def rollingMax(numbers: Seq[Int]): Seq[Int] = {\n    var max_so_far = Float.MinValue\n    var result = Seq[Int]()\n    for (num <- numbers) {\n        max_so_far = max(max_so_far, num)\n        result = result :+ max_so_far\n    }\n    return result\n}\n",
            "def makePalindrome(s: String): String = {\n    if (isPalindrome(s)) {\n        return s\n    }\n    for (i <- 0 until s.length) {\n        if (isPalindrome(s.substring(i))) {\n            return s + s.substring(0, i).reverse\n        }\n    }\n    return \"\"\n}\n",
            "def stringXor(a: String, b: String): String = {\n    a.zip(b).map(x => if (x._1 == x._2) \"0\" else \"1\").mkString\n}\n",
            "def longest(strs: Seq[String]): Option[String] = {\n    if (strs.isEmpty) {\n        None\n    } else {\n        var longest_s = strs(0)\n        for (s <- strs) {\n            if (s.length > longest_s.length) {\n                longest_s = s\n            }\n        }\n        Some(longest_s)\n    }\n}\n",
            "def greatestCommonDivisor(a: Int, b: Int): Int = {\n    if (b == 0) {\n        return a\n    } else {\n        return greatestCommonDivisor(b, a % b)\n    }\n}\n",
            "def allPrefixes(s: String): Seq[String] = {\n    var prefixes = Seq[String]()\n    for (i <- 0 until s.length) {\n        prefixes = prefixes :+ s.substring(0, i + 1)\n    }\n    prefixes\n}\n",
            "def stringSequence(n: Int): String = {\n    return \" \".join([str(i) for i in range(n + 1)])\n}\n",
            "def countDistinctCharacters(s: String): Int = {\n    s.toLowerCase.toSet.size\n}\n",
            "def parseMusic(musicString: String): Seq[Int] = {\n    val durations = Map(\"o\" -> 4, \"o|\" -> 2, \".|\" -> 1)\n    val notes = musicString.split(\" \")\n    notes.map(note => durations(note))\n}\n",
            "def howManyTimes(s: String, substring: String): Int = {\n    var times = 0\n    for (i <- 0 until s.length - substring.length + 1) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "def sortNumbers(numbers: String): String = {\n    val num_dict = Map(\n        \"zero\" -> 0,\n        \"one\" -> 1,\n        \"two\" -> 2,\n        \"three\" -> 3,\n        \"four\" -> 4,\n        \"five\" -> 5,\n        \"six\" -> 6,\n        \"seven\" -> 7,\n        \"eight\" -> 8,\n        \"nine\" -> 9,\n    )\n    val num_list = numbers.split(\" \").filter(x => num_dict.contains(x)).sortBy(x => num_dict(x))\n    num_list.mkString(\" \")\n}\n",
            "def findClosestElements(numbers: Seq[Double]): Seq[Double] = {\n    val sortedNumbers = numbers.sorted\n    var minDiff = Double.PositiveInfinity\n    var closestPair = Seq[Double]()\n    for (i <- 1 until sortedNumbers.length) {\n        val diff = sortedNumbers(i) - sortedNumbers(i - 1)\n        if (diff < minDiff) {\n            minDiff = diff\n            closestPair = Seq(sortedNumbers(i - 1), sortedNumbers(i))\n        }\n    }\n    return closestPair\n}\n",
            "def rescaleToUnit(numbers: Seq[Double]): Seq[Double] = {\n    val minNum = numbers.min\n    val maxNum = numbers.max\n    if (minNum == maxNum) {\n        return Seq.fill(numbers.length)(0.0)\n    } else {\n        return numbers.map(num => (num - minNum) / (maxNum - minNum))\n    }\n}\n",
            "def filterIntegers(values: Seq[Any]): Seq[Int] = {\n    values.filter(x => x.isInstanceOf[Int]).map(_.asInstanceOf[Int])\n}\n",
            "def strLength(s: String): Int = {\n    return s.length\n}\n",
            "def largestDivisor(n: Int): Int = {\n    for (i <- 2 to n) {\n        if (n % i == 0) {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "def factorize(n: Int): Seq[Int] = {\n    var factors = Seq[Int]()\n    var divisor = 2\n    while divisor <= n do {\n        if n % divisor == 0 then {\n            factors = factors :+ divisor\n            n = n / divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "def removeDuplicates(numbers: Seq[Int]): Seq[Int] = {\n    val counts = scala.collection.mutable.Map[Int, Int]()\n    for (num <- numbers) {\n        counts(num) = counts.getOrElse(num, 0) + 1\n    }\n    for (num <- numbers) yield {\n        if (counts(num) == 1) num\n    }\n}\n",
            "def flipCase(s: String): String = {\n    val flipped = new ArrayBuffer[Char]()\n    for (ch <- s) {\n        if (!ch.isLetter) {\n            flipped += ch\n        } else if (ch.isLower) {\n            flipped += ch.toUpper\n        } else if (ch.isUpper) {\n            flipped += ch.toLower\n        }\n    }\n    flipped.mkString\n}\n",
            "def concatenate(strs: Seq[String]): String = {\n    strs.mkString(\"\")\n}\n",
            "def filterByPrefix(strs: Seq[String], prefixStr: String): Seq[String] = {\n    strs.filter(s => s.startsWith(prefixStr))\n}\n",
            "def getPositive(l: Seq[Int]): Seq[Int] = {\n    l.filter(num => num > 0)\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) {\n        return false\n    }\n    for (i <- 2 to floor(sqrt(n)) + 1) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "def poly(xs: Seq[Int], x: Double): Double = {\n    var res = 0.0\n    for (i <- 0 until xs.length) {\n        res += xs(i) * math.pow(x, i)\n    }\n    res\n}\ndef findZero(xs: Seq[Int]): Double = {\n    var x1, x2 = 1.0\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2\n        x2 *= 2\n    }\n    while (math.abs(x1 - x2) > 1e-10) {\n        val mid = (x1 + x2) / 2\n        if (poly(xs, mid) == 0) {\n            return mid\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    (x1 + x2) / 2\n}\n",
            "def sortThird(l: Seq[Int]): Seq[Int] = {\n    val sortedThird = l.grouped(3).map(_.sorted).flatten\n    l.zipWithIndex.map { case (x, i) => if (i % 3 == 0) sortedThird(i / 3) else x }\n}\n",
            "def listUnique(l: Seq[Int]): Seq[Int] = {\n    l.toSet.toSeq.sorted\n}\n",
            "def maxElement(l: Seq[Int]): Int = {\n    if (l.isEmpty) {\n        return 0\n    }\n    return l.max\n}\n",
            "def fizzBuzz(n: Int): Int = {\n    var cnt = 0\n    for (i <- 0 until n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString.count(_ == '7')\n        }\n    }\n    cnt\n}\n",
            "def sortEven(l: Seq[Int]): Seq[Int] = {\n    val sortedEven = l.filter(_ % 2 == 0).sorted\n    l.zipWithIndex.map { case (x, i) => if (i % 2 == 0) sortedEven(i / 2) else x }\n}\n",
            "def encodeCyclic(s: String): String = {\n    val result = new ArrayBuffer[String]()\n    for (i <- 0 until s.length by 3) {\n        if (i + 3 > s.length) {\n            result.append(s.substring(i))\n        } else {\n            result.append(s.substring(i + 1, i + 3))\n            result.append(s.substring(i, i + 1))\n        }\n    }\n    result.mkString(\"\")\n}\ndef decodeCyclic(s: String): String = {\n    encodeCyclic(encodeCyclic(s))\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) {\n        return false\n    }\n    for (i <- 2 to floor(sqrt(n)) + 1) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\ndef primeFib(n: Int): Int = {\n    var f = Array(0, 1)\n    var cnt = 0\n    while (cnt < n) {\n        f = Array(f(1), f(0) + f(1))\n        if (isPrime(f(1))) {\n            cnt += 1\n        }\n    }\n    return f(1)\n}\n",
            "def triplesSumToZero(l: Seq[Int]): Boolean = {\n    for (i <- 0 until l.length) {\n        for (j <- i + 1 until l.length) {\n            for (k <- j + 1 until l.length) {\n                if (l(i) + l(j) + l(k) == 0) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "def carRaceCollision(n: Int): Int = {\n    return n ** 2\n}\n",
            "def incrList(l: Seq[Int]): Seq[Int] = {\n    l.map(i => i + 1)\n}\n",
            "def pairsSumToZero(l: Seq[Int]): Boolean = {\n    val seen = Set[Int]()\n    for (num <- l) {\n        if (-num in seen) {\n            return true\n        }\n        seen.add(num)\n    }\n    return false\n}\n",
            "def changeBase(x: Int, bas: Int): String = {\n    if (x == 0) {\n        return \"0\"\n    }\n    var digits = List[String]()\n    while (x > 0) {\n        digits = digits :+ x % bas\n        x /= bas\n    }\n    return digits.reverse.mkString\n}\n",
            "def triangleArea(a: Int, h: Int): Double = {\n    a * h / 2\n}\n",
            "def fib4(n: Int): Int = {\n    var fib = Array(0, 0, 2, 0)\n    for (i <- 4 until n + 1) {\n        fib(i % 4) = fib.sum\n    }\n    return fib(n % 4)\n}\n",
            "def median(l: Seq[Double]): Double = {\n    val sl = l.sorted\n    if (l.length % 2 != 0) {\n        sl(l.length / 2)\n    } else {\n        (sl(l.length / 2) + sl(l.length / 2 - 1)) / 2\n    }\n}\n",
            "def isPalindrome(txt: String): Boolean = {\n    txt == txt.reverse\n}\n",
            "def modp(n: Int, p: Int): Int = {\n    var ret = 1\n    for (_ <- 0 until n) {\n        ret = (ret * 2) % p\n    }\n    ret\n}\n",
            "def encodeShift(s: String): String = {\n    val result = s.map(ch => ((ch - 97 + 5) % 26) + 97).map(_.toChar)\n    result.mkString\n}\ndef decodeShift(s: String): String = {\n    val result = s.map(ch => ((ch - 97 + 21) % 26) + 97).map(_.toChar)\n    result.mkString\n}\n",
            "def removeVowels(txt: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    txt.filter(char => !vowels.contains(char))\n}\n",
            "def belowThreshold(l: Seq[Int], t: Int): Boolean = {\n    l.forall(x => x < t)\n}\n",
            "def add(x: Int, y: Int): Int = {\n    return x + y\n}\n",
            "def sameChars(s0: String, s1: String): Boolean = {\n    return set(s0) == set(s1)\n}\n",
            "def fib(n: Int): Int = {\n    if (n <= 1) {\n        return n\n    } else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n",
            "def correctBracketing(brackets: String): Boolean = {\n    var depth = 0\n    for (b <- brackets) {\n        if (b == '<') {\n            depth += 1\n        } else if (b == '>') {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "def monotonic(l: Seq[Int]): Boolean = {\n    val diff = l.zip(l.tail).map(x => x._2 - x._1)\n    diff.forall(_ <= 0) || diff.forall(_ >= 0)\n}\n",
            "def common(l1: Seq[Int], l2: Seq[Int]): Seq[Int] = {\n    l1.intersect(l2).sorted\n}\n",
            "def largestPrimeFactor(n: Int): Int = {\n    var i = 2\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i\n        } else {\n            i += 1\n        }\n    }\n    return n\n}\n",
            "def sumToN(n: Int): Int = {\n    // Implementation here\n}\n",
            "def correctBracketing(brackets: String): Boolean = {\n    var depth = 0\n    for (b <- brackets) {\n        if (b == \"(\") {\n            depth += 1\n        } else if (b == \")\") {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "def derivative(xs: Seq[Int]): Seq[Int] = {\n    xs.zipWithIndex.map { case (x, i) => x * i }\n}\n",
            "def fibfib(n: Int): Int = {\n    if (n <= 1) {\n        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 1\n    while (n > 2) {\n        a = b\n        b = c\n        c = a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "def vowelsCount(s: String): Int = {\n    val vowels = \"aeiou\"\n    var cnt = 0\n    for (i <- 0 until s.length) {\n        if (s(i).toLower == vowels || (i == s.length - 1 && s(i).toLower == \"y\")) {\n            cnt += 1\n        }\n    }\n    cnt\n}\n",
            "def circularShift(x: Int, shift: Int): String = {\n    val x_str = x.toString\n    if (shift > x_str.length) {\n        return x_str.reverse\n    } else {\n        return x_str.substring(x_str.length - shift) + x_str.substring(0, x_str.length - shift)\n    }\n}\n",
            "def digitSum(s: String): Int = {\n    s.filter(_.isUpper).map(_.toInt).sum\n}\n",
            "def fruitDistribution(s: String, n: Int): Int = {\n    val words = s.split(' ')\n    val apples = words(words.indexOf(\"apples\") - 1).toInt\n    val oranges = words(words.indexOf(\"oranges\") - 1).toInt\n    n - apples - oranges\n}\n",
            "def pluck(arr: Seq[Int]): Seq[Int] = {\n    val evens = arr.filter(n => n % 2 == 0)\n    if (evens.isEmpty) {\n        return Seq()\n    }\n    val minEven = evens.min\n    return Seq(minEven, arr.indexOf(minEven))\n}\n",
            "def search(lst: Seq[Int]): Int = {\n    val freqs = collection.mutable.Map[Int, Int]()\n    for (n <- lst) {\n        freqs(n) = freqs.getOrElse(n, 0) + 1\n    }\n    val good_vals = freqs.keys.filter(k => freqs(k) >= k).toSeq\n    if (good_vals.isEmpty) -1 else good_vals.max\n}\n",
            "def strangeSortList(lst: Seq[Int]): Seq[Int] = {\n    val sl = lst.sorted\n    var result = Seq[Int]()\n    var left, right = 0\n    while left <= right {\n        result = result :+ sl(left)\n        left += 1\n        if left <= right {\n            result = result :+ sl(right)\n            right -= 1\n        }\n    }\n    result\n}\n",
            "def triangleArea(a: Int, b: Int, c: Int): Double = {\n    if (a + b > c && a + c > b && b + c > a) {\n        val s = (a + b + c) / 2.0\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        return -1.0\n    }\n}\n",
            "def willItFly(q: Seq[Int], w: Int): Boolean = {\n    if (q.isEmpty) {\n        return false\n    }\n    val isPalin = q.zip(q.reverse).forall(x => x._1 == x._2)\n    val total = q.sum\n    return isPalin && total <= w\n}\n",
            "def smallestChange(arr: Seq[Int]): Int = {\n    var ans = 0\n    for (i <- 0 until arr.length / 2) {\n        if (arr(i) != arr(arr.length - i - 1)) {\n            ans += 1\n        }\n    }\n    ans\n}\n",
            "def totalMatch(lst1: Seq[String], lst2: Seq[String]): Seq[String] = {\n    val cnt1 = lst1.map(_.length).sum\n    val cnt2 = lst2.map(_.length).sum\n    if (cnt1 <= cnt2) lst1 else lst2\n}\n",
            "def isMultiplyPrime(a: Int): Boolean = {\n    if (a < 2) {\n        return false\n    }\n    for (i <- 2 to floor(sqrt(a)) + 1) {\n        if (a % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "def isSimplePower(x: Int, n: Int): Boolean = {\n    if (n < 2) {\n        return x == n\n    }\n    var tmp = 1\n    while (tmp < x) {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "def isCube(a: Int): Boolean = {\n    val a = math.abs(a)\n    val root = math.round(math.pow(a, 1.0 / 3.0)).toInt\n    return root * root * root == a\n}\n",
            "def hexKey(num: String): Int = {\n    num.filter(x => x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D').length\n}\n",
            "def decimalToBinary(dec: Int): String = {\n    val binary = dec.toBinaryString\n    return f\"db${binary}db\"\n}\n",
            "def isHappy(s: String): Boolean = {\n    if (s.length < 3) {\n        return false\n    }\n    for (i <- 0 until s.length - 2) {\n        if (s(i) == s(i + 1) || s(i) == s(i + 2) || s(i + 1) == s(i + 2)) {\n            return false\n        }\n    }\n    return true\n}\n",
            "def numericalLetterGrade(grades: Seq[Double]): Seq[String] = {\n    val result = Seq[String]()\n    for (g <- grades) {\n        if (g == 4.0) {\n            result.append(\"A+\")\n        } else if (g > 3.7) {\n            result.append(\"A\")\n        } else if (g > 3.3) {\n            result.append(\"A-\")\n        } else if (g > 3.0) {\n            result.append(\"B+\")\n        } else if (g > 2.7) {\n            result.append(\"B\")\n        } else if (g > 2.3) {\n            result.append(\"B-\")\n        } else if (g > 2.0) {\n            result.append(\"C+\")\n        } else if (g > 1.7) {\n            result.append(\"C\")\n        } else if (g > 1.3) {\n            result.append(\"C-\")\n        } else if (g > 1.0) {\n            result.append(\"D+\")\n        } else if (g > 0.7) {\n            result.append(\"D\")\n        } else if (g > 0.0) {\n            result.append(\"D-\")\n        } else {\n            result.append(\"E\")\n        }\n    }\n    return result\n}\n",
            "def primeLength(s: String): Boolean = {\n    val length = s.length\n    if (length < 2) {\n        return false\n    }\n    for (i <- 2 to floor(sqrt(length)) + 1) {\n        if (length % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "def startsOneEnds(n: Int): Int = {\n    if (n == 1) {\n        return 1\n    }\n    return 2 * 9 * (10 ** (n - 2))\n}\n",
            "def solve(n: Int): String = {\n    val digitsSum = n.toString.map(_.toInt).sum\n    digitsSum.toBinaryString\n}\n",
            "def add(lst: Seq[Int]): Int = {\n    lst.zipWithIndex.filter(x => x._2 % 2 == 1 && x._1 % 2 == 0).map(_._1).sum\n}\n",
            "def antiShuffle(s: String): String = {\n    val words = s.split(\" \").map(word => \"\".join(word.toCharArray.sorted))\n    words.join(\" \")\n}\n",
            "def getRow(lst: Seq[Seq[Int]], x: Int): Seq[Seq[Int]] = {\n    val coords = for {\n        i <- 0 until lst.length\n        j <- 0 until lst(i).length\n        if lst(i)(j) == x\n    } yield (i, j)\n    coords.sortBy(a => (a._1, -a._2))\n}\n",
            "def sortArray(arr: Seq[Int]): Seq[Int] = {\n    if (arr.length == 0) {\n        return Seq()\n    }\n    if ((arr(0) + arr(arr.length - 1)) % 2 == 0) {\n        return arr.sorted.reverse\n    } else {\n        return arr.sorted\n    }\n}\n",
            "def encrypt(s: String): String = {\n    val result = new ArrayBuffer[Char]()\n    for (ch <- s) {\n        val shifted = ch + 4\n        if (shifted > 'z') {\n            shifted -= 26\n        }\n        result += shifted\n    }\n    return result.mkString\n}\n",
            "def nextSmallest(lst: Seq[Int]): Option[Int] = {\n    val sl = sorted(set(lst))\n    if (len(sl) < 2) {\n        return None\n    }\n    return sl(1)\n}\n",
            "def isBored(s: String): Int = {\n    val sentences = s.split(\"[.!?]\\\\s*\")\n    sentences.map(sentence => sentence.slice(0, 2) == \"I \").sum\n}\n",
            "def anyInt(x: Any, y: Any, z: Any): Boolean = {\n    if (x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int]) {\n        if (x.asInstanceOf[Int] + y.asInstanceOf[Int] == z.asInstanceOf[Int] ||\n            x.asInstanceOf[Int] + z.asInstanceOf[Int] == y.asInstanceOf[Int] ||\n            y.asInstanceOf[Int] + z.asInstanceOf[Int] == x.asInstanceOf[Int]) {\n            return true\n        }\n    }\n    return false\n}\n",
            "def encode(message: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    val result = new ArrayBuffer[Char]()\n    for (ch <- message) {\n        if (ch.isLetter) {\n            val ch1 = if (ch.isLower) ch.toUpper else ch.toLower\n            if (vowels.contains(ch1)) {\n                result += (ch1 + 2).toChar\n            } else {\n                result += ch1\n            }\n        } else {\n            result += ch\n        }\n    }\n    result.mkString\n}\n",
            "def skjkasdkd(lst: Seq[Int]): Int = {\n    val primes = lst.filter(n => is_prime(n))\n    if (primes.isEmpty) {\n        0\n    } else {\n        val largest = primes.max.toString\n        largest.map(digit => digit.toInt).sum\n    }\n}\n",
            "def checkDictCase(d: Map[String,String]): Boolean = {\n    if (d.isEmpty) {\n        return false\n    }\n    return d.keys.forall(c => c.isLower) || d.keys.forall(c => c.isUpper)\n}\n",
            "def countUpTo(n: Int): Seq[Int] = {\n    var primes = Seq[Int]()\n    for (num <- 2 until n) {\n        if (primes.forall(p => num % p != 0)) {\n            primes = primes :+ num\n        }\n    }\n    primes\n}\n",
            "def multiply(a: Int, b: Int): Int = {\n    return (abs(a) % 10) * (abs(b) % 10)\n}\n",
            "def countUpper(s: String): Int = {\n    val vowels = \"AEIOU\"\n    s.zipWithIndex.filter(x => x._2 % 2 == 0 && vowels.contains(x._1)).length\n}\n",
            "def closestInteger(value: String): Int = {\n    val num = value.toFloat\n    if (num >= 0) {\n        num.toInt + 0.5\n    } else {\n        num.toInt - 0.5\n    }\n}\n",
            "def makeAPile(n: Int): Seq[Int] = {\n    (0 until n).map(i => n + 2 * i)\n}\n",
            "def wordsString(s: String): Seq[String] = {\n    s.split(\",\").filter(_.length > 0)\n}\n",
            "def chooseNum(x: Int, y: Int): Int = {\n    if (x > y) {\n        return -1\n    }\n    if (y % 2 == 0) {\n        return y\n    }\n    return y - 1 if x != y else -1\n}\n",
            "def roundedAvg(n: Int, m: Int): Option[String] = {\n    if (n > m) {\n        return None\n    }\n    val rAvg = (m + n) / 2.0 + 0.5\n    return Some(rAvg.toBinaryString.substring(2))\n}\n",
            "def allDigitsOdd(s: String): Boolean = {\n    s.forall(_.toInt % 2 != 0)\n}\ndef uniqueDigits(x: Seq[Int]): Seq[Int] = {\n    x.filter(allDigitsOdd(_.toString)).sorted\n}\n",
            "def byLength(arr: Seq[Int]): Seq[String] = {\n    val digitNames = Seq(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    val sortedArr = arr.filter(x => 1 <= x && x <= 9).sorted.reverse\n    sortedArr.map(x => digitNames(x - 1))\n}\n",
            "def f(n: Int): Seq[Int] = {\n    val nums = (1 to n).toList\n    nums.map(i => if (i % 2 != 0) nums.take(i).sum else nums.take(i).reduce(_ * _))\n}\n",
            "def evenOddPalindrome(n: Int): Seq[Int] = {\n    var cnt = Array(0, 0)\n    for (i <- 1 to n) {\n        if (isPalindrome(i.toString)) {\n            cnt(i % 2) += 1\n        }\n    }\n    cnt\n}\n",
            "def digitsSum(n: Int): Int = {\n    val nStr = n.toString\n    if (n >= 0) {\n        nStr.map(_.asDigit).sum\n    } else {\n        nStr.take(2).map(_.asDigit).sum * 2 + digitsSum(n.abs)\n    }\n}\ndef countNums(arr: Seq[Int]): Int = {\n    arr.count(digitsSum(_) > 0)\n}\n",
            "def moveOneBall(arr: Seq[Int]): Boolean = {\n    if (arr.length == 0) {\n        return true\n    }\n    val sortedArr = arr.sorted\n    for (i <- 0 until arr.length) {\n        if (arr.slice(i, arr.length) == sortedArr.slice(0, arr.length - i) && arr.slice(0, i) == sortedArr.slice(arr.length - i, sortedArr.length)) {\n            return true\n        }\n    }\n    return false\n}\n",
            "def canExchange(lst1: Seq[Int], lst2: Seq[Int]): String = {\n    val oddCnt = lst1.count(num => num % 2 != 0)\n    val evenCnt = lst2.count(num => num % 2 == 0)\n    if (evenCnt >= oddCnt) \"YES\" else \"NO\"\n}\n",
            "def histogram(test: String): Map[String,Int] = {\n    val freq = Map[String,Int]()\n    val words = test.split(\" \").filter(w => w.length > 0)\n    for (w <- words) {\n        freq(w) = freq.getOrElse(w, 0) + 1\n    }\n    val result = Map[String,Int]()\n    if (freq.size > 0) {\n        val max_freq = freq.values.max\n        for ((k, v) <- freq) {\n            if (v == max_freq) {\n                result(k) = v\n            }\n        }\n    }\n    return result\n}\n",
            "def reverseDelete(s: String, c: String): Seq[String] = {\n    val s1 = s.filter(ch => !c.contains(ch))\n    Seq(s1, if (isPalindrome(s1)) \"yes\" else \"no\")\n}\n",
            "def oddCount(lst: Seq[String]): Seq[String] = {\n    val result = Seq[String]()\n    for (num <- lst) {\n        val n = num.map(d => ord(d) % 2 == 1).sum\n        val rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    }\n    return result\n}\n",
            "def minSubArraySum(nums: Seq[Int]): Int = {\n    var min_sum = 0\n    var cur_sum = 0\n    for (n <- nums) {\n        cur_sum = Math.min(cur_sum + n, 0)\n        min_sum = Math.min(cur_sum, min_sum)\n    }\n    if (min_sum == 0) {\n        min_sum = nums.min\n    }\n    min_sum\n}\n",
            "def maxFill(grid: Seq[Seq[Int]], capacity: Int): Int = {\n    grid.map(_.sum / capacity).map(ceil).sum\n}\n",
            "def sortArray(arr: Seq[Int]): Seq[Int] = {\n    arr.sortBy(x => (x.toBinaryString.count(_ == '1'), x))\n}\n",
            "def selectWords(s: String, n: Int): Seq[String] = {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\"\n    val words = s.split(\" \").filter(w => w.length > 0)\n    words.filter(w => w.count(c => consonants.contains(c.toLower)) == n)\n}\n",
            "def getClosestVowel(word: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    for (i <- (len(word) - 2) to 0 by -1) {\n        if (word(i) in vowels && word(i - 1) not in vowels && word(i + 1) not in vowels) {\n            return word(i)\n        }\n    }\n    return \"\"\n}\n",
            "def matchParens(lst: Seq[String]): String = {\n    val s1 = lst(0) + lst(1)\n    val s2 = lst(1) + lst(0)\n    if (check(s1) || check(s2)) \"Yes\" else \"No\"\n}\ndef check(s: String): Boolean = {\n    var depth = 0\n    for (ch <- s) {\n        if (ch == \"(\") depth += 1\n        else depth -= 1\n        if (depth < 0) return false\n    }\n    depth == 0\n}\n",
            "def maximum(arr: Seq[Int], k: Int): Seq[Int] = {\n    if (k == 0) {\n        return Seq()\n    }\n    return arr.sorted.reverse.take(k)\n}\n",
            "def solution(lst: Seq[Int]): Int = {\n    lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 != 0).map(_._1).sum\n}\n",
            "def addElements(arr: Seq[Int], k: Int): Int = {\n    arr.take(k).filter(n => n.toString.length <= 2).sum\n}\n",
            "def getOddCollatz(n: Int): Seq[Int] = {\n    var collatz = Seq(1)\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz = collatz :+ n\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    collatz.sorted\n}\n",
            "def validDate(date: String): Boolean = {\n    if (!(date.length == 10) || !(date(2) == \"-\") || !(date(5) == \"-\")) {\n        return false\n    }\n    val m = date.substring(0, 2).toInt\n    val d = date.substring(3, 5).toInt\n    if (m in List(1, 3, 5, 7, 8, 10, 12) && d >= 1 && d <= 31) {\n        return true\n    }\n    if (m in List(4, 6, 9, 11) && d >= 1 && d <= 30) {\n        return true\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true\n    }\n    return false\n}\n",
            "def splitWords(txt: String): Seq[String] = {\n    if (txt.contains(\" \")) {\n        txt.split(\" \")\n    } else if (txt.contains(\",\")) {\n        txt.split(\",\")\n    } else {\n        Seq(txt.count(c => c.isLower && c % 2 == 0).toString)\n    }\n}\n",
            "def isSorted(lst: Seq[Int]): Boolean = {\n    if (!lst.sliding(2).forall(_.head <= _.last)) {\n        return false\n    }\n    val freq = scala.collection.mutable.Map[Int, Int]()\n    for (i <- lst) {\n        freq(i) = freq.getOrElse(i, 0) + 1\n    }\n    return freq.values.max <= 2\n}\n",
            "def intersection(interval1: Seq[Int], interval2: Seq[Int]): String = {\n    val l = max(interval1(0), interval2(0))\n    val r = min(interval1(1), interval2(1))\n    val length = r - l\n    if (length > 0 && is_prime(length)) \"YES\" else \"NO\"\n}\n",
            "def prodSigns(arr: Seq[Int]): Option[Int] = {\n    if (arr.isEmpty) {\n        None\n    } else if (arr.contains(0)) {\n        Some(0)\n    } else {\n        val sign = if (arr.count(_ < 0) % 2 == 1) -1 else 1\n        Some(sign * arr.map(math.abs).sum)\n    }\n}\n",
            "def minPath(grid: Seq[Seq[Int]], k: Int): Seq[Int] = {\n    val n = grid.length\n    var minVal = n * n + 1\n    for (i <- 0 until n) {\n        for (j <- 0 until n) {\n            if (grid(i)(j) == 1) {\n                var temp = Seq[Int]()\n                if (i != 0) {\n                    temp = temp :+ grid(i - 1)(j)\n                }\n                if (j != 0) {\n                    temp = temp :+ grid(i)(j - 1)\n                }\n                if (i != n - 1) {\n                    temp = temp :+ grid(i + 1)(j)\n                }\n                if (j != n - 1) {\n                    temp = temp :+ grid(i)(j + 1)\n                }\n                minVal = temp.min\n            }\n        }\n    }\n    var result = Seq[Int]()\n    for (i <- 0 until k) {\n        result = result :+ (if (i % 2 == 0) 1 else minVal)\n    }\n    result\n}\n",
            "def tri(n: Int): Seq[Int] = {\n    if (n == 0) {\n        return Seq(1)\n    }\n    var seq = Seq(1, 3)\n    for (i <- 2 to n + 1) {\n        if (i % 2 == 0) {\n            seq = seq :+ (i / 2 + 1)\n        } else {\n            seq = seq :+ (seq(i - 1) + seq(i - 2) + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "def digits(n: Int): Int = {\n    val odds = n.toString.map(_.toInt).filter(_ % 2 == 1)\n    odds.reduce(_ * _)\n}\n",
            "def isNested(s: String): Boolean = {\n    val openIdx = new ArrayBuffer[Int]()\n    val closeIdx = new ArrayBuffer[Int]()\n    for (i <- 0 until s.length) {\n        val ch = s.charAt(i)\n        if (ch == '[') {\n            openIdx += i\n        } else if (ch == ']') {\n            closeIdx += i\n        }\n    }\n    closeIdx.reverse\n    var cnt = 0\n    var i = 0\n    val l = closeIdx.length\n    for (idx <- openIdx) {\n        if (i < l && idx < closeIdx(i)) {\n            cnt += 1\n            i += 1\n        }\n    }\n    cnt >= 2\n}\n",
            "def sumSquares(lst: Seq[Double]): Int = {\n    lst.map(n => math.pow(math.ceil(n), 2)).sum\n}\n",
            "def checkIfLastCharIsALetter(txt: String): Boolean = {\n    if (!txt) {\n        return false\n    }\n    val last = txt.rfind(' ') + 1\n    return len(last) == 1 && last[0].isalpha()\n}\n",
            "def canArrange(arr: Seq[Int]): Int = {\n    if (arr.length <= 1) {\n        return -1\n    }\n    val idx = (1 until arr.length).filter(i => arr(i) < arr(i - 1))\n    return idx.max\n}\n",
            "def largestSmallestIntegers(lst: Seq[Int]): Seq[Option[Int]] = {\n    val neg = lst.filter(i => i < 0)\n    val pos = lst.filter(i => i > 0)\n    val max_neg = if (neg.length > 0) neg.max else None\n    val min_pos = if (pos.length > 0) pos.min else None\n    Seq(max_neg, min_pos)\n}\n",
            "def compareOne(a: Any, b: Any): Option[Double] = {\n    if (a.isInstanceOf[String]) {\n        val a1 = a.asInstanceOf[String].replace(',', '.').toDouble\n        if (b.isInstanceOf[String]) {\n            val b1 = b.asInstanceOf[String].replace(',', '.').toDouble\n            if (a1 == b1) {\n                None\n            } else if (a1 > b1) {\n                Some(a1)\n            } else {\n                Some(b1)\n            }\n        } else if (b.isInstanceOf[Int]) {\n            val b1 = b.asInstanceOf[Int].toDouble\n            if (a1 == b1) {\n                None\n            } else if (a1 > b1) {\n                Some(a1)\n            } else {\n                Some(b1)\n            }\n        } else if (b.isInstanceOf[Float]) {\n            val b1 = b.asInstanceOf[Float].toDouble\n            if (a1 == b1) {\n                None\n            } else if (a1 > b1) {\n                Some(a1)\n            } else {\n                Some(b1)\n            }\n        } else {\n            throw new RuntimeException(\"Type Error\")\n        }\n    } else if (a.isInstanceOf[Int]) {\n        val a1 = a.asInstanceOf[Int].toDouble\n        if (b.isInstanceOf[String]) {\n            val b1 = b.asInstanceOf[String].replace(',', '.').toDouble\n            if (a1 == b1) {\n                None\n            } else if (a1 > b1) {\n                Some(a1)\n            } else {\n                Some(b1)\n            }\n        } else if (b.isInstanceOf[Int]) {\n            val b1 = b.asInstanceOf[Int].toDouble\n            if (a1 == b1) {\n                None\n            } else if (a1 > b1) {\n                Some(a1)\n            } else {\n                Some(b1)\n            }\n        } else if (b.isInstanceOf[Float]) {\n            val b1 = b.asInstanceOf[Float].toDouble\n            if (a1 == b1) {\n                None\n            } else if (a1 > b1) {\n                Some(a1)\n            } else {\n                Some(b1)\n            }\n        } else {\n            throw new RuntimeException(\"Type Error\")\n        }\n    } else if (a.isInstanceOf[Float]) {\n        val a1 = a.asInstanceOf[Float].toDouble\n        if (b.isInstanceOf[String]) {\n            val b1 = b.asInstanceOf[String].replace(',', '.').toDouble\n            if (a1 == b1) {\n                None\n            } else if (a1 > b1) {\n                Some(a1)\n            } else {\n                Some(b1)\n            }\n        } else if (b.isInstanceOf[Int]) {\n            val b1 = b.asInstanceOf[Int].toDouble\n            if (a1 == b1) {\n                None\n            } else if (a1 > b1) {\n                Some(a1)\n            } else {\n                Some(b1)\n            }\n        } else if (b.isInstanceOf[Float]) {\n            val b1 = b.asInstanceOf[Float].toDouble\n            if (a1 == b1) {\n                None\n            } else if (a1 > b1) {\n                Some(a1)\n            } else {\n                Some(b1)\n            }\n        } else {\n            throw new RuntimeException(\"Type Error\")\n        }\n    } else {\n        throw new RuntimeException(\"Type Error\")\n    }\n}\n",
            "def isEqualToSumEven(n: Int): Boolean = {\n    return n % 2 == 0 && n >= 8\n}\n",
            "def specialFactorial(n: Int): Int = {\n    var fact = 1\n    var result = 1\n    for (i <- 1 to n) {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "def fixSpaces(txt: String): String = {\n    re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n}\n",
            "def fileNameCheck(fileName: String): String = {\n    val suf = Array(\"txt\", \"exe\", \"dll\")\n    val lst = fileName.split(\".\")\n    if (lst.length != 2 || !lst(1).contains(suf) || lst(0).length == 0 || !lst(0)(0).isLetter || lst(0).filter(_.isDigit).length > 3) {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "def sumSquares(lst: Seq[Int]): Int = {\n    var result = 0\n    for (i <- 0 until lst.length) {\n        if (i % 3 == 0) {\n            result += math.pow(lst(i), 2)\n        } else if (i % 4 == 0) {\n            result += math.pow(lst(i), 3)\n        } else {\n            result += lst(i)\n        }\n    }\n    result\n}\n",
            "def wordsInSentence(sentence: String): String = {\n    if (sentence.length < 2) {\n        return false\n    }\n    for (i <- 2 to floor(sqrt(sentence.length)) + 1) {\n        if (sentence.length % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "def simplify(x: String, n: String): Boolean = {\n    val xs = x.split(\"/\")\n    val ns = n.split(\"/\")\n    val num = xs(0).toInt * ns(0).toInt\n    val den = xs(1).toInt * ns(1).toInt\n    num % den == 0\n}\n",
            "def digitsSum(n: Int): Int = {\n    val nStr = n.toString\n    if (n >= 0) {\n        nStr.map(_.asDigit).sum\n    } else {\n        nStr.take(2).map(_.asDigit).sum * 2 + digitsSum(n.abs)\n    }\n}\ndef orderByPoints(nums: Seq[Int]): Seq[Int] = {\n    nums.sortBy(digitsSum)\n}\n",
            "def specialFilter(nums: Seq[Int]): Int = {\n    val odds = \"13579\"\n    nums.filter(n => n > 10 && n % 2 == 1 && odds.contains(n.toString.head)).length\n}\n",
            "def getMaxTriples(n: Int): Int = {\n    var c = Array(0, 0, 0)\n    for (i <- 1 to n) {\n        val a = i * i - i + 1\n        c(a % 3) += 1\n    }\n    return c(0) * c(1) * c(2) + (c(0) * (c(0) - 1) * (c(0) - 2) + c(1) * (c(1) - 1) * (c(1) - 2) + c(2) * (c(2) - 1) * (c(2) - 2)) / 6\n}\n",
            "def bf(planet1: String, planet2: String): Seq[String] = {\n    val names = Seq(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (!names.contains(planet1) || !names.contains(planet2)) {\n        return Seq()\n    }\n    val l = names.indexOf(planet1)\n    val r = names.indexOf(planet2)\n    if (l > r) {\n        val tmp = l\n        l = r\n        r = tmp\n    }\n    if (l == r) {\n        return Seq()\n    }\n    return names.slice(l + 1, r)\n}\n",
            "def sortedListSum(lst: Seq[String]): Seq[String] = {\n    val result = lst.filter(s => s.length % 2 == 0)\n    result.sortBy(s => (s.length, s))\n}\n",
            "def xOrY(n: Int, x: Int, y: Int): Int = {\n    if (n < 2) {\n        return y\n    }\n    for (i <- 2 to floor(sqrt(n)) + 1) {\n        if (n % i == 0) {\n            return y\n        }\n    }\n    return x\n}\n",
            "def doubleTheDifference(lst: Seq[Double]): Int = {\n    lst.filter(n => n >= 0 && n % 2 == 1).map(n => n * n).sum.toInt\n}\n",
            "def compare(game: Seq[Int], guess: Seq[Int]): Seq[Int] = {\n    game.zip(guess).map(x => Math.abs(x._1 - x._2))\n}\n",
            "def strongestExtension(className: String, extensions: Seq[String]): String = {\n    var max_s = Double.NegativeInfinity\n    var max_ext = \"\"\n    for (ext <- extensions) {\n        val upper = ext.count(c => c.isUpper)\n        val lower = ext.count(c => c.isLower)\n        val s = upper - lower\n        if (s > max_s) {\n            max_s = s\n            max_ext = ext\n        }\n    }\n    return s\"$className.$max_ext\"\n}\n",
            "def cycpatternCheck(a: String, b: String): Boolean = {\n    if (a.length < b.length) {\n        return false\n    }\n    for (i <- 0 until b.length) {\n        if (b.substring(i) + b.substring(0, i) in a) {\n            return true\n        }\n    }\n    return false\n}\n",
            "def evenOddCount(num: Int): Seq[Int] = {\n    val ds = num.abs.toString\n    val even = ds.count(d => d.toInt % 2 == 0)\n    Seq(even, ds.length - even)\n}\n",
            "def intToMiniRoman(num: Int): String = {\n    val values = Array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    val numerals = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    val res = ArrayBuffer[String]()\n    for (i <- 0 until values.length) {\n        while (num >= values(i)) {\n            res.append(numerals(i))\n            num -= values(i)\n        }\n    }\n    res.mkString(\"\")\n}\n",
            "def rightAngleTriangle(a: Int, b: Int, c: Int): Boolean = {\n    val s = List(a, b, c).sorted\n    s(0) * s(0) + s(1) * s(1) == s(2) * s(2)\n}\n",
            "def findMax(words: Seq[String]): String = {\n    var max_cnt = 0\n    var max_w = \"\"\n    for (w <- words) {\n        val cnt = w.toSet.size\n        if (cnt > max_cnt) {\n            max_cnt = cnt\n            max_w = w\n        } else if (cnt == max_cnt) {\n            max_w = if (max_w < w) max_w else w\n        }\n    }\n    max_w\n}\n",
            "def eat(num: Int, need: Int, remaining: Int): Seq[Int] = {\n    if (need <= remaining) {\n        return Seq(num + need, remaining - need)\n    } else {\n        return Seq(num + remaining, 0)\n    }\n}\n",
            "def doAlgebra(operators: Seq[String], operands: Seq[Int]): Int = {\n    var ops = operators.toList\n    var nums = operands.toList\n    var i = ops.length - 1\n    while (i >= 0) {\n        if (ops(i) == \"**\") {\n            nums(i) = math.pow(nums(i), nums(i + 1))\n            nums = nums.drop(i + 1)\n            ops = ops.drop(i)\n        }\n        i -= 1\n    }\n    i = 0\n    while (i < ops.length) {\n        if (ops(i) == \"*\") {\n            nums(i) = nums(i) * nums(i + 1)\n            nums = nums.drop(i + 1)\n            ops = ops.drop(i)\n            i -= 1\n        } else if (ops(i) == \"//\") {\n            nums(i) = nums(i) / nums(i + 1)\n            nums = nums.drop(i + 1)\n            ops = ops.drop(i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while (i < ops.length) {\n        if (ops(i) == \"+\") {\n            nums(i) = nums(i) + nums(i + 1)\n            nums = nums.drop(i + 1)\n            ops = ops.drop(i)\n            i -= 1\n        } else if (ops(i) == \"-\") {\n            nums(i) = nums(i) - nums(i + 1)\n            nums = nums.drop(i + 1)\n            ops = ops.drop(i)\n            i -= 1\n        }\n        i += 1\n    }\n    nums(0)\n}\n",
            "def solve(s: String): String = {\n    if (!s.exists(_.isLetter)) {\n        s.reverse\n    } else {\n        s.map {\n            case ch if !ch.isLetter => ch\n            case ch if ch.isUpper => ch.toLower\n            case ch if ch.isLower => ch.toUpper\n        }.mkString\n    }\n}\n",
            "def stringToMd5(txt: String): Option[String] = {\n    if (txt.isEmpty) {\n        return None\n    }\n    val md5Hash = java.security.MessageDigest.getInstance(\"MD5\")\n    val txtBytes = txt.getBytes()\n    md5Hash.update(txtBytes)\n    val md5Encoded = md5Hash.digest().map(\"%02x\".format(_)).mkString\n    return Some(md5Encoded)\n}\n",
            "def generateIntegers(a: Int, b: Int): Seq[Int] = {\n    val lower = max(2, min(a, b))\n    val upper = min(8, max(a, b))\n    (lower until upper + 1).filter(_ % 2 == 0)\n}\n"
        ],
        "swift": [
            "func hasCloseElements(_ numbers: [Double], _ threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i + 1..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func separateParenGroups(_ parenString: String) -> [String] {\n    var groups = [String]()\n    var stk = [Character]()\n    var currentGroup = \"\"\n    let parens = parenString.replacingOccurrences(of: \" \", with: \"\")\n    for ch in parens {\n        if ch == \"(\" {\n            stk.append(ch)\n            currentGroup += String(ch)\n        } else if ch == \")\" {\n            stk.popLast()\n            currentGroup += String(ch)\n            if stk.isEmpty {\n                groups.append(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "func truncateNumber(_ num: Double) -> Double {\n    return num - floor(num)\n}\n",
            "func belowZero(_ operations: [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func meanAbsoluteDeviation(_ numbers: [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n    let deviation = numbers.reduce(0) { $0 + abs($1 - mean) }\n    return deviation / Double(numbers.count)\n}\n",
            "func intersperse(_ numbers: [Int], _ delimiter: Int) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        if i != 0 {\n            result.append(delimiter)\n        }\n        result.append(numbers[i])\n    }\n    return result\n}\n",
            "func parseNestedParens(_ parenString: String) -> [Int] {\n    var result: [Int] = []\n    let parenGroups = parenString.split(separator: \" \")\n    for group in parenGroups {\n        var maxDepth = 0\n        var depth = 0\n        for ch in group {\n            if ch == \"(\" {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if ch == \")\" {\n                depth -= 1\n            }\n        }\n        result.append(maxDepth)\n    }\n    return result\n}\n",
            "func filterBySubstring(_ strs: [String], _ substring: String) -> [String] {\n    return strs.filter { $0.contains(substring) }\n}\n",
            "func sumProduct(_ numbers: [Int]) -> [Int] {\n    let n_sum = numbers.reduce(0, +)\n    let n_product = numbers.reduce(1, *)\n    return [n_sum, n_product]\n}\n",
            "func rollingMax(_ numbers: [Int]) -> [Int] {\n    var maxSoFar = Float.leastNormalMagnitude\n    var result = [Int]()\n    for num in numbers {\n        maxSoFar = max(maxSoFar, Float(num))\n        result.append(Int(maxSoFar))\n    }\n    return result\n}\n",
            "func makePalindrome(_ s: String) -> String {\n    func isPalindrome(_ s: String) -> Bool {\n        return s == String(s.reversed())\n    }\n    if isPalindrome(s) {\n        return s\n    }\n    for i in 0..<s.count {\n        if isPalindrome(String(s[s.index(s.startIndex, offsetBy: i)...])) {\n            return s + String(s[..<s.index(s.startIndex, offsetBy: i)].reversed())\n        }\n    }\n    return \"\"\n}\n",
            "func stringXor(_ a: String, _ b: String) -> String {\n    return \"\".join([\"0\" if x == y else \"1\" for x, y in zip(a, b)])\n}\n",
            "func longest(_ strs: [String]) -> String? {\n    if strs.isEmpty {\n        return nil\n    }\n    var longestS = strs[0]\n    for s in strs {\n        if s.count > longestS.count {\n            longestS = s\n        }\n    }\n    return longestS\n}\n",
            "func greatestCommonDivisor(_ a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    } else {\n        return greatestCommonDivisor(b, a % b)\n    }\n}\n",
            "func allPrefixes(_ s: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<s.count {\n        prefixes.append(String(s.prefix(i + 1)))\n    }\n    return prefixes\n}\n",
            "func stringSequence(_ n: Int) -> String {\n    return (0...n).map { String($0) }.joined(separator: \" \")\n}\n",
            "func countDistinctCharacters(_ s: String) -> Int {\n    return s.lowercased().count\n}\n",
            "func parseMusic(_ musicString: String) -> [Int] {\n    let durations: [String: Int] = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    let notes = musicString.split(separator: \" \")\n    return notes.map { durations[$0]! }\n}\n",
            "func howManyTimes(_ s: String, _ substring: String) -> Int {\n    var times = 0\n    for i in 0..<(s.count - substring.count + 1) {\n        if s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: i + substring.count)] == substring {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "func sortNumbers(_ numbers: String) -> String {\n    let numDict = [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    ]\n    let numList = numbers.split(separator: \" \").filter { numDict[$0] != nil }.sorted { numDict[$0]! < numDict[$1]! }\n    return numList.joined(separator: \" \")\n}\n",
            "func findClosestElements(_ numbers: [Double]) -> [Double] {\n    var sortedNumbers = numbers.sorted()\n    var minDiff = Double.infinity\n    var closestPair = [Double]()\n    for i in 1..<sortedNumbers.count {\n        let diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]]\n        }\n    }\n    return closestPair\n}\n",
            "func rescaleToUnit(_ numbers: [Double]) -> [Double] {\n    let minNum = numbers.min()\n    let maxNum = numbers.max()\n    if minNum == maxNum {\n        return [0.0] * numbers.count\n    } else {\n        return numbers.map { ($0 - minNum) / (maxNum - minNum) }\n    }\n}\n",
            "func filterIntegers(_ values: [Any]) -> [Int] {\n    return values.filter { $0 is Int }\n}\n",
            "func strLength(_ s: String) -> Int {\n    return s.count\n}\n",
            "func largestDivisor(_ n: Int) -> Int {\n    for i in 2..<n {\n        if n % i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "func factorize(_ n: Int) -> [Int] {\n    var factors = [Int]()\n    var divisor = 2\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.append(divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "func removeDuplicates(_ numbers: [Int]) -> [Int] {\n    var counts = [Int: Int]()\n    for num in numbers {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    var res = [Int]()\n    for num in numbers {\n        if counts[num] == 1 {\n            res.append(num)\n        }\n    }\n    return res\n}\n",
            "func flipCase(_ s: String) -> String {\n    var flipped = [Character]()\n    for ch in s {\n        if !ch.isLetter {\n            flipped.append(ch)\n        } else if ch.isLowercase {\n            flipped.append(ch.uppercased())\n        } else if ch.isUppercase {\n            flipped.append(ch.lowercased())\n        }\n    }\n    return String(flipped)\n}\n",
            "func concatenate(_ strs: [String]) -> String {\n    return strs.joined()\n}\n",
            "func filterByPrefix(_ strs: [String], _ prefixStr: String) -> [String] {\n    return strs.filter { $0.hasPrefix(prefixStr) }\n}\n",
            "func getPositive(_ l: [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) + 1 {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func poly(_ xs: [Int], _ x: Double) -> Double {\n    var res: Double = 0.0\n    for i in 0..<xs.count {\n        res += Double(xs[i]) * pow(x, Double(i))\n    }\n    return res\n}\nfunc findZero(_ xs: [Int]) -> Double {\n    var x1: Double = 1.0\n    var x2: Double = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    while abs(x1 - x2) > 1e-10 {\n        let mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0 {\n            return mid\n        } else if poly(xs, mid) * poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "func sortThird(_ l: [Int]) -> [Int] {\n    let sortedThird = l[::3].sorted()\n    return (0..<l.count).map { i -> Int in\n        if i % 3 == 0 {\n            return sortedThird[i / 3]\n        } else {\n            return l[i]\n        }\n    }\n}\n",
            "func listUnique(_ l: [Int]) -> [Int] {\n    return sorted(list(set(l)))\n}\n",
            "func maxElement(_ l: [Int]) -> Int {\n    if l.isEmpty {\n        return 0\n    }\n    return l.max()!\n}\n",
            "func fizzBuzz(_ n: Int) -> Int {\n    var cnt = 0\n    for i in 0..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += String(i).filter { $0 == \"7\" }.count\n        }\n    }\n    return cnt\n}\n",
            "func sortEven(_ l: [Int]) -> [Int] {\n    let sortedEven = l.filter { $0 % 2 == 0 }.sorted()\n    return l.enumerated().map { $0 % 2 == 0 ? sortedEven[$0 / 2] : $1 }\n}\n",
            "func encodeCyclic(_ s: String) -> String {\n    var result = [String]()\n    for i in stride(from: 0, to: s.count, by: 3) {\n        if i + 3 > s.count {\n            result.append(String(s[i...]))\n        } else {\n            result.append(String(s[i+1...i+2]))\n            result.append(String(s[i]))\n        }\n    }\n    return result.joined()\n}\nfunc decodeCyclic(_ s: String) -> String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) + 1 {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc primeFib(_ n: Int) -> Int {\n    var f = [0, 1]\n    var cnt = 0\n    while cnt < n {\n        f = [f[1], f[0] + f[1]]\n        if isPrime(f[1]) {\n            cnt += 1\n        }\n    }\n    return f[1]\n}\n",
            "func triplesSumToZero(_ l: [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func carRaceCollision(_ n: Int) -> Int {\n    return n ** 2\n}\n",
            "func incrList(_ l: [Int]) -> [Int] {\n    return l.map { $0 + 1 }\n}\n",
            "func pairsSumToZero(_ l: [Int]) -> Bool {\n    var seen = Set<Int>()\n    for num in l {\n        if seen.contains(-num) {\n            return true\n        }\n        seen.insert(num)\n    }\n    return false\n}\n",
            "func changeBase(_ x: Int, _ bas: Int) -> String {\n    if x == 0 {\n        return \"0\"\n    }\n    var digits: [String] = []\n    while x > 0 {\n        digits.append(String(x % bas))\n        x /= bas\n    }\n    return digits.reversed().joined()\n}\n",
            "func triangleArea(_ a: Int, _ h: Int) -> Double {\n    return Double(a) * Double(h) / 2\n}\n",
            "func fib4(_ n: Int) -> Int {\n    var fib = [0, 0, 2, 0]\n    for i in 4..<n + 1 {\n        fib[i % 4] = fib.reduce(0, +)\n    }\n    return fib[n % 4]\n}\n",
            "func median(_ l: [Double]) -> Double {\n    let sl = l.sorted()\n    if l.count % 2 != 0 {\n        return sl[l.count / 2]\n    } else {\n        return (sl[l.count / 2] + sl[l.count / 2 - 1]) / 2\n    }\n}\n",
            "func isPalindrome(_ txt: String) -> Bool {\n    return txt == txt.reversed()\n}\n",
            "func modp(_ n: Int, _ p: Int) -> Int {\n    var ret = 1\n    for _ in 0..<n {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func encodeShift(_ s: String) -> String {\n    let result = s.map {\n        Character(UnicodeScalar((Int($0.unicodeScalars.first!.value) - 97 + 5) % 26 + 97)!\n    }\n    return String(result)\n}\nfunc decodeShift(_ s: String) -> String {\n    let result = s.map {\n        Character(UnicodeScalar((Int($0.unicodeScalars.first!.value) - 97 + 21) % 26 + 97)!\n    }\n    return String(result)\n}\n",
            "func removeVowels(_ txt: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    return txt.filter { !vowels.contains($0) }\n}\n",
            "func belowThreshold(_ l: [Int], _ t: Int) -> Bool {\n    return l.allSatisfy { $0 < t }\n}\n",
            "func add(_ x: Int, _ y: Int) -> Int {\n    return x + y\n}\n",
            "func sameChars(_ s0: String, _ s1: String) -> Bool {\n    return Set(s0) == Set(s1)\n}\n",
            "func fib(_ n: Int) -> Int {\n    if n <= 1 {\n        return n\n    } else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"<\" {\n            depth += 1\n        } else if b == \">\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func monotonic(_ l: [Int]) -> Bool {\n    let diff = zip(l, l[1...]).map { $0.1 - $0.0 }\n    return diff.allSatisfy { $0 <= 0 } || diff.allSatisfy { $0 >= 0 }\n}\n",
            "func common(_ l1: [Int], _ l2: [Int]) -> [Int] {\n    return sorted(list(set(l1) & set(l2)))\n}\n",
            "func largestPrimeFactor(_ n: Int) -> Int {\n    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i\n        } else {\n            i += 1\n        }\n    }\n    return n\n}\n",
            "func sumToN(_ n: Int) -> Int {\n    return Array(0...n).reduce(0, +)\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"(\" {\n            depth += 1\n        } else if b == \")\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func derivative(_ xs: [Int]) -> [Int] {\n    return xs.enumerated().map { $0.element * $0.offset }\n}\n",
            "func fibfib(_ n: Int) -> Int {\n    if n <= 1 {\n        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 1\n    while n > 2 {\n        a = b\n        b = c\n        c = a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "func vowelsCount(_ s: String) -> Int {\n    let vowels = \"aeiou\"\n    var cnt = 0\n    for i in 0..<s.count {\n        if s[i].lowercased() == \"y\" && i == s.count - 1 || vowels.contains(s[i].lowercased()) {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "func circularShift(_ x: Int, _ shift: Int) -> String {\n    let x_str = String(x)\n    if shift > x_str.count {\n        return String(x_str.reversed())\n    } else {\n        return String(x_str.suffix(shift)) + String(x_str.prefix(x_str.count - shift))\n    }\n}\n",
            "func digitSum(_ s: String) -> Int {\n    return s.uppercased().compactMap { Int(String($0)) }.reduce(0, +)\n}\n",
            "func fruitDistribution(_ s: String, _ n: Int) -> Int {\n    let words = s.split(separator: \" \")\n    let apples = Int(words[words.index(of: \"apples\")! - 1])!\n    let oranges = Int(words[words.index(of: \"oranges\")! - 1])!\n    return n - apples - oranges\n}\n",
            "func pluck(_ arr: [Int]) -> [Int] {\n    let evens = arr.filter { $0 % 2 == 0 }\n    if evens.count == 0 {\n        return []\n    }\n    let minEven = evens.min()!\n    return [minEven, arr.firstIndex(of: minEven)!]\n}\n",
            "func search(_ lst: [Int]) -> Int {\n    var freqs: [Int: Int] = [:]\n    for n in lst {\n        freqs[n] = (freqs[n] ?? 0) + 1\n    }\n    let good_vals = freqs.filter { $0.value >= $0.key }.map { $0.key }\n    return good_vals.max() ?? -1\n}\n",
            "func strangeSortList(_ lst: [Int]) -> [Int] {\n    let sl = lst.sorted()\n    var result: [Int] = []\n    var left = 0\n    var right = sl.count - 1\n    while left <= right {\n        result.append(sl[left])\n        left += 1\n        if left <= right {\n            result.append(sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "func triangleArea(_ a: Int, _ b: Int, _ c: Int) -> Double {\n    if a + b > c && a + c > b && b + c > a {\n        let s = (Double(a) + Double(b) + Double(c)) / 2.0\n        return sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n    } else {\n        return -1.0\n    }\n}\n",
            "func willItFly(_ q: [Int], _ w: Int) -> Bool {\n    if q.count == 0 {\n        return false\n    }\n    let isPalin = q.enumerated().all { (i, qi) in\n        qi == q[q.count - i - 1]\n    }\n    let total = q.reduce(0, +)\n    return isPalin && total <= w\n}\n",
            "func smallestChange(_ arr: [Int]) -> Int {\n    var ans = 0\n    for i in 0..<arr.count / 2 {\n        if arr[i] != arr[arr.count - i - 1] {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "func totalMatch(_ lst1: [String], _ lst2: [String]) -> [String] {\n    let cnt1 = lst1.reduce(0) { $0 + $1.count }\n    let cnt2 = lst2.reduce(0) { $0 + $1.count }\n    return cnt1 <= cnt2 ? lst1 : lst2\n}\n",
            "func isMultiplyPrime(_ a: Int) -> Bool {\n    if a < 2 {\n        return false\n    }\n    var cnt = 0\n    for i in 2...Int(sqrt(Double(a)) + 1 {\n        if a % i == 0 {\n            while a % i == 0 {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "func isSimplePower(_ x: Int, _ n: Int) -> Bool {\n    if n < 2 {\n        return x == n\n    }\n    var tmp = 1\n    while tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "func isCube(_ a: Int) -> Bool {\n    let a = abs(a)\n    let root = Int(round(pow(Double(a), 1.0 / 3.0)))\n    return root * root * root == a\n}\n",
            "func hexKey(_ num: String) -> Int {\n    return num.filter { \"2357BD\".contains($0) }.count\n}\n",
            "func decimalToBinary(_ dec: Int) -> String {\n    let binary = String(dec, radix: 2)\n    return \"db\\(binary)db\"\n}\n",
            "func isHappy(_ s: String) -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func numericalLetterGrade(_ grades: [Double]) -> [String] {\n    var result: [String] = []\n    for g in grades {\n        if g == 4.0 {\n            result.append(\"A+\")\n        } else if g > 3.7 {\n            result.append(\"A\")\n        } else if g > 3.3 {\n            result.append(\"A-\")\n        } else if g > 3.0 {\n            result.append(\"B+\")\n        } else if g > 2.7 {\n            result.append(\"B\")\n        } else if g > 2.3 {\n            result.append(\"B-\")\n        } else if g > 2.0 {\n            result.append(\"C+\")\n        } else if g > 1.7 {\n            result.append(\"C\")\n        } else if g > 1.3 {\n            result.append(\"C-\")\n        } else if g > 1.0 {\n            result.append(\"D+\")\n        } else if g > 0.7 {\n            result.append(\"D\")\n        } else if g > 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"E\")\n        }\n    }\n    return result\n}\n",
            "func primeLength(_ s: String) -> Bool {\n    let length = s.count\n    if length < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(length))) {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func startsOneEnds(_ n: Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * (10 ** (n - 2))\n}\n",
            "func solve(_ n: Int) -> String {\n    let digitsSum = String(n).compactMap { Int(String($0)) }.reduce(0, +)\n    return String(digitsSum, radix: 2)\n}\n",
            "func add(_ lst: [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 == 1 && $0.element % 2 == 0 }.map { $0.element }.reduce(0, +)\n}\n",
            "func antiShuffle(_ s: String) -> String {\n    let words = s.split(separator: \" \").map { String($0.sorted()) }\n    return words.joined(separator: \" \")\n}\n",
            "func getRow(_ lst: [[Int]], _ x: Int) -> [[Int]] {\n    var coords = [[Int]]()\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            if lst[i][j] == x {\n                coords.append([i, j])\n            }\n        }\n    }\n    return coords.sorted { (a, b) in\n        a[0] < b[0] && a[1] > b[1]\n    }\n}\n",
            "func sortArray(_ arr: [Int]) -> [Int] {\n    if arr.count == 0 {\n        return []\n    }\n    if (arr[0] + arr[arr.count - 1]) % 2 == 0 {\n        return arr.sorted(by: >)\n    } else {\n        return arr.sorted()\n    }\n}\n",
            "func encrypt(_ s: String) -> String {\n    var result: [Character] = []\n    for ch in s {\n        var shifted = Int(ch.unicodeScalars.first!.value) + 4\n        if shifted > Int(\"z\".unicodeScalars.first!.value) {\n            shifted -= 26\n        }\n        result.append(Character(UnicodeScalar(shifted)!)\n    }\n    return String(result)\n}\n",
            "func nextSmallest(_ lst: [Int]) -> Int? {\n    let sl = sorted(Set(lst))\n    if sl.count < 2 {\n        return nil\n    }\n    return sl[1]\n}\n",
            "func isBored(_ s: String) -> Int {\n    let sentences = s.split(separator: \".!?\", maxSplits: Int.max, omittingEmptySubsequences: true)\n    return sentences.filter { $0.count >= 2 && $0.starts(with: \"I \") }.count\n}\n",
            "func anyInt(_ x: Any, _ y: Any, _ z: Any) -> Bool {\n    if let x = x as? Int, let y = y as? Int, let z = z as? Int {\n        if (x + y == z) || (x + z == y) || (y + z == x) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func encode(_ message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = [Character]()\n    for ch in message {\n        if ch.isLetter {\n            let ch1 = ch.isLowercase ? ch.uppercased() : ch.lowercased()\n            if vowels.contains(ch1) {\n                result.append(Character(UnicodeScalar(ch1.unicodeScalars.first!.value + 2)!)\n            } else {\n                result.append(ch1)\n            }\n        } else {\n            result.append(ch)\n        }\n    }\n    return String(result)\n}\n",
            "func skjkasdkd(_ lst: [Int]) -> Int {\n    func is_prime(_ n: Int) -> Bool {\n        if n < 2 {\n            return false\n        }\n        for i in 2...Int(sqrt(Double(n))) + 1 {\n            if n % i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n    let primes = lst.filter { is_prime($0) }\n    if primes.count == 0 {\n        return 0\n    }\n    let largest = String(primes.max()!)\n    return largest.reduce(0) { $0 + Int($1.wholeNumberValue)! }\n}\n",
            "func checkDictCase(_ d: [String:String]) -> Bool {\n    if d.isEmpty {\n        return false\n    }\n    return d.keys.allSatisfy { $0.allSatisfy { $0.isLowercase } } || d.keys.allSatisfy { $0.allSatisfy { $0.isUppercase } }\n}\n",
            "func countUpTo(_ n: Int) -> [Int] {\n    var primes = [Int]()\n    for num in 2..<n {\n        if primes.allSatisfy({ num % $0 != 0 }) {\n            primes.append(num)\n        }\n    }\n    return primes\n}\n",
            "func multiply(_ a: Int, _ b: Int) -> Int {\n    return (abs(a) % 10) * (abs(b) % 10)\n}\n",
            "func countUpper(_ s: String) -> Int {\n    let vowels = \"AEIOU\"\n    return s.enumerated().filter { $0.offset % 2 == 0 && vowels.contains($0.element) }.count\n}\n",
            "func closestInteger(_ value: String) -> Int {\n    let num = Float(value)\n    if num >= 0 {\n        return Int(num + 0.5)\n    } else {\n        return Int(num - 0.5)\n    }\n}\n",
            "func makeAPile(_ n: Int) -> [Int] {\n    return (0..<n).map { n + 2 * $0 }\n}\n",
            "func wordsString(_ s: String) -> [String] {\n    return s.split(separator: \", \").filter { $0.count > 0 }\n}\n",
            "func chooseNum(_ x: Int, _ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return y - 1\n}\n",
            "func roundedAvg(_ n: Int, _ m: Int) -> String? {\n    if n > m {\n        return nil\n    }\n    let r_avg = Int((m + n) / 2.0 + 0.5)\n    return String(r_avg, radix: 2)\n}\n",
            "func uniqueDigits(_ x: [Int]) -> [Int] {\n    return x.filter { num in\n        return String(num).allSatisfy { char in\n            return char.asciiValue! % 2 != 0\n        }\n    }.sorted()\n}\n",
            "func byLength(_ arr: [Int]) -> [String] {\n    let digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    let sortedArr = sorted([x for x in arr if 1 <= x <= 9], reverse: true)\n    return [digitNames[x-1] for x in sortedArr]\n}\n",
            "func f(_ n: Int) -> [Int] {\n    let nums = Array(1...n)\n    return nums.map {\n        if $0 % 2 != 0 {\n            return nums[0...$0].reduce(0, +)\n        } else {\n            return nums[0...$0].reduce(1, *)\n        }\n    }\n}\n",
            "func evenOddPalindrome(_ n: Int) -> [Int] {\n    var cnt = [0, 0]\n    for i in 1...n {\n        if isPalindrome(String(i)) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}\nfunc isPalindrome(_ txt: String) -> Bool {\n    return txt == String(txt.reversed())\n}\n",
            "func countNums(_ arr: [Int]) -> Int {\n    return arr.filter { digitsSum($0) > 0 }.count\n}\nfunc digitsSum(_ n: Int) -> Int {\n    let nStr = String(n)\n    if n >= 0 {\n        return nStr.reduce(0) { $0 + Int($1.wholeNumberValue ?? 0) }\n    } else {\n        return Int(nStr[nStr.startIndex..<nStr.index(nStr.startIndex, offsetBy: 2)])! * 2 + digitsSum(abs(n))\n    }\n}\n",
            "func moveOneBall(_ arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return true\n    }\n    let sortedArr = arr.sorted()\n    for i in 0..<arr.count {\n        if arr[i...] == sortedArr[0..<arr.count - i] && arr[..<i] == sortedArr[arr.count - i...] {\n            return true\n        }\n    }\n    return false\n}\n",
            "func canExchange(_ lst1: [Int], _ lst2: [Int]) -> String {\n    let oddCnt = lst1.filter { $0 % 2 != 0 }.count\n    let evenCnt = lst2.filter { $0 % 2 == 0 }.count\n    return evenCnt >= oddCnt ? \"YES\" : \"NO\"\n}\n",
            "func histogram(_ test: String) -> [String:Int] {\n    var freq = [String:Int]()\n    var words = [String]()\n    for w in test.split(\" \") {\n        if w.count > 0 {\n            words.append(w)\n        }\n    }\n    for w in words {\n        freq[w] = freq.get(w, 0) + 1\n    }\n    var result = [String:Int]()\n    if freq.count > 0 {\n        let max_freq = max(freq.values())\n        for (k, v) in freq {\n            if v == max_freq {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "func reverseDelete(_ s: String, _ c: String) -> [String] {\n    let s1 = s.filter { !c.contains($0) }.joined()\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"]\n}\n",
            "func oddCount(_ lst: [String]) -> [String] {\n    var result: [String] = []\n    for num in lst {\n        let n = num.reduce(0) { $0 + ($1.asciiValue! % 2 == 1 ? 1 : 0) }\n        let rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replacingOccurrences(of: \"i\", with: String(n)))\n    }\n    return result\n}\n",
            "func minSubArraySum(_ nums: [Int]) -> Int {\n    var minSum = 0\n    var curSum = 0\n    for n in nums {\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if minSum == 0 {\n        minSum = nums.min()!\n    }\n    return minSum\n}\n",
            "func maxFill(_ grid: [[Int]], _ capacity: Int) -> Int {\n    return grid.map { $0.reduce(0, +) / capacity }.reduce(0, +)\n}\n",
            "func sortArray(_ arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes = String(a, radix: 2).filter { $0 == \"1\" }.count\n        let bOnes = String(b, radix: 2).filter { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n    })\n}\n",
            "func selectWords(_ s: String, _ n: Int) -> [String] {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let words = s.split(separator: \" \").filter { $0.count > 0 }\n    return words.filter { $0.filter { consonants.contains($0.lowercased()) }.count == n }\n}\n",
            "func getClosestVowel(_ word: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    for i in (0...word.count - 2).reversed() {\n        if vowels.contains(word[i]) && !vowels.contains(word[i - 1]) && !vowels.contains(word[i + 1]) {\n            return String(word[i])\n        }\n    }\n    return \"\"\n}\n",
            "func matchParens(_ lst: [String]) -> String {\n    var depth = 0\n    for ch in lst[0] + lst[1] {\n        if ch == \"(\" {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if depth < 0 {\n            return \"No\"\n        }\n    }\n    return \"Yes\" if depth == 0 else \"No\"\n}\n",
            "func maximum(_ arr: [Int], _ k: Int) -> [Int] {\n    if k == 0 {\n        return []\n    }\n    return arr.sorted().suffix(k)\n}\n",
            "func solution(_ lst: [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 == 0 && $0.element % 2 != 0 }.map { $0.element }.reduce(0, +)\n}\n",
            "func addElements(_ arr: [Int], _ k: Int) -> Int {\n    return arr.prefix(k).filter { String($0).count <= 2 }.reduce(0, +)\n}\n",
            "func getOddCollatz(_ n: Int) -> [Int] {\n    var collatz = [1]\n    while n != 1 {\n        if n % 2 != 0 {\n            collatz.append(n)\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    return collatz.sorted()\n}\n",
            "func validDate(_ date: String) -> Bool {\n    if !(date.count == 10) || !(date[2] == \"-\") || !(date[5] == \"-\") {\n        return false\n    }\n    let m = Int(date[0..<2])\n    let d = Int(date[3..<5])\n    if m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12 {\n        if d >= 1 && d <= 31 {\n            return true\n        }\n    }\n    if m == 4 || m == 6 || m == 9 || m == 11 {\n        if d >= 1 && d <= 30 {\n            return true\n        }\n    }\n    if m == 2 {\n        if d >= 1 && d <= 29 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func splitWords(_ txt: String) -> [String] {\n    if txt.contains(\" \") {\n        return txt.split(separator: \" \")\n    } else if txt.contains(\",\") {\n        return txt.split(separator: \",\")\n    } else {\n        return [String(txt.count { $0.isLowercase && $0.asciiValue! % 2 == 0 })]\n    }\n}\n",
            "func isSorted(_ lst: [Int]) -> Bool {\n    if !lst.enumerated().dropFirst().all({ lst[$0.offset - 1] <= $0.element }) {\n        return false\n    }\n    var freq: [Int: Int] = [:]\n    for i in lst {\n        freq[i, default: 0] += 1\n    }\n    return freq.values.max() ?? 0 <= 2\n}\n",
            "func intersection(_ interval1: [Int], _ interval2: [Int]) -> String {\n    let l = max(interval1[0], interval2[0])\n    let r = min(interval1[1], interval2[1])\n    let length = r - l\n    return length > 0 && is_prime(length) ? \"YES\" : \"NO\"\n}\n",
            "func prodSigns(_ arr: [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    if arr.contains(0) {\n        return 0\n    }\n    let sign = arr.filter { $0 < 0 }.count % 2 == 1 ? -1 : 1\n    return sign * arr.map { abs($0) }.reduce(0, +)\n}\n",
            "func minPath(_ grid: [[Int]], _ k: Int) -> [Int] {\n    let n = grid.count\n    var minVal = n * n + 1\n    for i in 0..<n {\n        for j in 0..<n {\n            if grid[i][j] == 1 {\n                var temp: [Int] = []\n                if i != 0 {\n                    temp.append(grid[i - 1][j])\n                }\n                if j != 0 {\n                    temp.append(grid[i][j - 1])\n                }\n                if i != n - 1 {\n                    temp.append(grid[i + 1][j])\n                }\n                if j != n - 1 {\n                    temp.append(grid[i][j + 1])\n                }\n                minVal = min(temp)\n            }\n        }\n    }\n    var result: [Int] = []\n    for i in 0..<k {\n        result.append(1 if i % 2 == 0 else minVal)\n    }\n    return result\n}\n",
            "func tri(_ n: Int) -> [Int] {\n    if n == 0 {\n        return [1]\n    }\n    var seq = [1, 3]\n    for i in 2...n {\n        if i % 2 == 0 {\n            seq.append(i / 2 + 1)\n        } else {\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "func digits(_ n: Int) -> Int {\n    let odds = str(n).filter { Int($0) % 2 == 1 }\n    return odds.reduce(1, *)\n}\n",
            "func isNested(_ s: String) -> Bool {\n    var openIdx = [Int]()\n    var closeIdx = [Int]()\n    for (i, ch) in s.enumerated() {\n        if ch == \"[\" {\n            openIdx.append(i)\n        } else if ch == \"]\" {\n            closeIdx.append(i)\n        }\n    }\n    closeIdx.reverse()\n    var cnt = 0\n    var i = 0\n    let l = closeIdx.count\n    for idx in openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\n",
            "func sumSquares(_ lst: [Double]) -> Int {\n    return lst.map { ceil($0) }.map { pow($0, 2) }.reduce(0, +)\n}\n",
            "func checkIfLastCharIsALetter(_ txt: String) -> Bool {\n    if txt.isEmpty {\n        return false\n    }\n    let last = txt[txt.range(of: \" \")!.upperBound...]\n    return last.count == 1 && last.first!.isLetter\n}\n",
            "func canArrange(_ arr: [Int]) -> Int {\n    if arr.count <= 1 {\n        return -1\n    }\n    let idx = arr.enumerated().filter { $0.offset > 0 && $0.element < arr[$0.offset - 1] }.map { $0.offset }\n    return idx.max() ?? -1\n}\n",
            "func largestSmallestIntegers(_ lst: [Int]) -> [Int?] {\n    let neg = lst.filter { $0 < 0 }\n    let pos = lst.filter { $0 > 0 }\n    let maxNeg = neg.max()\n    let minPos = pos.min()\n    return [maxNeg, minPos]\n}\n",
            "func compareOne(_ a: Any, _ b: Any) -> Double? {\n    if let a = a as? String {\n        return Double(a.replacingOccurrences(of: \",\", with: \".\"))\n    } else if let a = a as? Int {\n        return Double(a)\n    } else if let a = a as? Double {\n        return a\n    }\n    return nil\n}\n",
            "func isEqualToSumEven(_ n: Int) -> Bool {\n    return n % 2 == 0 && n >= 8\n}\n",
            "func specialFactorial(_ n: Int) -> Int {\n    var fact = 1\n    var result = 1\n    for i in 1...n {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "func fixSpaces(_ txt: String) -> String {\n    return txt.replacingOccurrences(of: \"\\\\s{3,}\", with: \"-\").replacingOccurrences(of: \" \", with: \"_\")\n}\n",
            "func fileNameCheck(_ fileName: String) -> String {\n    let suf = [\"txt\", \"exe\", \"dll\"]\n    let lst = fileName.split(\".\")\n    if lst.count != 2 || !suf.contains(lst[1]) || lst[0].count == 0 || !lst[0].first!.isLetter || lst[0].filter({ $0.isNumber }).count > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "func sumSquares(_ lst: [Int]) -> Int {\n    var result = 0\n    for i in 0..<lst.count {\n        if i % 3 == 0 {\n            result += pow(lst[i], 2)\n        } else if i % 4 == 0 {\n            result += pow(lst[i], 3)\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "func wordsInSentence(_ sentence: String) -> String {\n    if sentence.count < 2 {\n        return false\n    }\n    for i in 2...floor(sqrt(sentence.count)) {\n        if sentence.count % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func simplify(_ x: String, _ n: String) -> Bool {\n    let xs = x.split(\"/\")\n    let ns = n.split(\"/\")\n    let num = Int(xs[0])! * Int(ns[0])!\n    let den = Int(xs[1])! * Int(ns[1])!\n    return num % den == 0\n}\n",
            "func digitsSum(_ n: Int) -> Int {\n    let nStr = String(n)\n    if n >= 0 {\n        return nStr.reduce(0) { $0 + Int($1)! }\n    } else {\n        return Int(nStr[0..<2])! * 2 + digitsSum(abs(n))\n    }\n}\nfunc orderByPoints(_ nums: [Int]) -> [Int] {\n    return nums.sorted { digitsSum($0) < digitsSum($1) }\n}\n",
            "func specialFilter(_ nums: [Int]) -> Int {\n    let odds = \"13579\"\n    return nums.filter { $0 > 10 && $0 % 2 == 1 && String(describing: $0)[0] in odds }.count\n}\n",
            "func getMaxTriples(_ n: Int) -> Int {\n    var c = [0, 0, 0]\n    for i in 1...n {\n        let a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n}\n",
            "func bf(_ planet1: String, _ planet2: String) -> [String] {\n    let names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if !names.contains(planet1) || !names.contains(planet2) {\n        return []\n    }\n    var l = names.firstIndex(of: planet1)!\n    var r = names.firstIndex(of: planet2)!\n    if l > r {\n        l = r\n        r = l\n    }\n    if l == r {\n        return []\n    }\n    return Array(names[l + 1 ..< r])\n}\n",
            "func sortedListSum(_ lst: [String]) -> [String] {\n    let result = lst.filter { $0.count % 2 == 0 }\n    return result.sorted { (s1, s2) -> Bool in\n        return s1.count < s2.count\n    }\n}\n",
            "func xOrY(_ n: Int, _ x: Int, _ y: Int) -> Int {\n    if n < 2 {\n        return y\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func doubleTheDifference(_ lst: [Double]) -> Int {\n    return lst.filter { $0 >= 0 && $0 % 2 == 1 }.map { $0 * $0 }.reduce(0, +)\n}\n",
            "func compare(_ game: [Int], _ guess: [Int]) -> [Int] {\n    return zip(game, guess).map { abs($0 - $1) }\n}\n",
            "func strongestExtension(_ className: String, _ extensions: [String]) -> String {\n    var max_s = Float.negativeInfinity\n    var max_ext = \"\"\n    for ext in extensions {\n        let upper = ext.filter { $0.isUppercase }.count\n        let lower = ext.filter { $0.isLowercase }.count\n        let s = upper - lower\n        if s > max_s {\n            max_s = s\n            max_ext = ext\n        }\n    }\n    return \"\\(className).\\(max_ext)\"\n}\n",
            "func cycpatternCheck(_ a: String, _ b: String) -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    for i in 0..<b.count {\n        if b[b.index(b.startIndex, offsetBy: i)...] + b[..<b.index(b.startIndex, offsetBy: i)] in a {\n            return true\n        }\n    }\n    return false\n}\n",
            "func evenOddCount(_ num: Int) -> [Int] {\n    let ds = String(abs(num))\n    let even = ds.filter { (d) -> Bool in\n        return d.asciiValue! % 2 == 0\n    }.count\n    return [even, ds.count - even]\n}\n",
            "func intToMiniRoman(_ num: Int) -> String {\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    var res = [String]()\n    for i in 0..<values.count {\n        while num >= values[i] {\n            res.append(numerals[i])\n            num -= values[i]\n        }\n    }\n    return res.joined()\n}\n",
            "func rightAngleTriangle(_ a: Int, _ b: Int, _ c: Int) -> Bool {\n    let s = [a, b, c].sorted()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "func findMax(_ words: [String]) -> String {\n    var max_cnt = 0\n    var max_w = \"\"\n    for w in words {\n        let cnt = Set(w).count\n        if cnt > max_cnt {\n            max_cnt = cnt\n            max_w = w\n        } else if cnt == max_cnt {\n            max_w = min(max_w, w)\n        }\n    }\n    return max_w\n}\n",
            "func eat(_ num: Int, _ need: Int, _ remaining: Int) -> [Int] {\n    if need <= remaining {\n        return [num + need, remaining - need]\n    } else {\n        return [num + remaining, 0]\n    }\n}\n",
            "func doAlgebra(_ operators: [String], _ operands: [Int]) -> Int {\n    var ops = operators\n    var nums = operands\n    var i = ops.count - 1\n    while i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = Int(pow(Double(nums[i]), Double(nums[i + 1])))\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n        }\n        i -= 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "func solve(_ s: String) -> String {\n    if !s.contains(where: { $0.isLetter }) {\n        return String(s.reversed())\n    }\n    var result: [Character] = []\n    for ch in s {\n        if !ch.isLetter {\n            result.append(ch)\n        } else if ch.isUppercase {\n            result.append(ch.lowercased())\n        } else if ch.isLowercase {\n            result.append(ch.uppercased())\n        }\n    }\n    return String(result)\n}\n",
            "func stringToMd5(_ txt: String) -> String? {\n    if txt.isEmpty {\n        return nil\n    }\n    let md5Hash = MD5(txt)\n    let md5Encoded = md5Hash.hexdigest()\n    return md5Encoded\n}\n",
            "func generateIntegers(_ a: Int, _ b: Int) -> [Int] {\n    let lower = max(2, min(a, b))\n    let upper = min(8, max(a, b))\n    return Array(lower..<upper).filter { $0 % 2 == 0 }\n}\n"
        ],
        "typescript": [
            "export const hasCloseElements = (numbers: Array<number>, threshold: number): boolean  => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "export const separateParenGroups = (parenString: string): Array<string>  => {\n    let groups = []\n    let stk = []\n    let currentGroup = \"\"\n    let parens = parenString.replace(\" \", \"\")\n    for (let ch of parens) {\n        if (ch == \"(\") {\n            stk.push(ch)\n            currentGroup += ch\n        } else if (ch == \")\") {\n            stk.pop()\n            currentGroup += ch\n            if (!stk.length) {\n                groups.push(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "export const truncateNumber = (num: number): number  => {\n    return num - Math.floor(num);\n}\n",
            "export const belowZero = (operations: Array<number>): boolean  => {\n    let balance = 0;\n    for (let op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const meanAbsoluteDeviation = (numbers: Array<number>): number  => {\n    const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    const deviation = numbers.reduce((a, b) => Math.abs(b - mean) + a, 0);\n    return deviation / numbers.length;\n}\n",
            "export const intersperse = (numbers: Array<number>, delimiter: number): Array<number>  => {\n    let result: Array<number> = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i != 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "export const parseNestedParens = (parenString: string): Array<number>  => {\n    let result: Array<number> = [];\n    let parenGroups: Array<string> = parenString.split();\n    for (let group of parenGroups) {\n        let maxDepth: number = 0;\n        let depth: number = 0;\n        for (let ch of group) {\n            if (ch == \"(\") {\n                depth += 1;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch == \")\") {\n                depth -= 1;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}\n",
            "export const filterBySubstring = (strs: Array<string>, substring: string): Array<string>  => {\n    return strs.filter(s => s.includes(substring))\n}\n",
            "export const sumProduct = (numbers: Array<number>): Array<number>  => {\n    const n_sum = numbers.reduce((a, b) => a + b, 0);\n    const n_product = numbers.reduce((a, b) => a * b, 1);\n    return [n_sum, n_product];\n}\n",
            "export const rollingMax = (numbers: Array<number>): Array<number>  => {\n    let max_so_far = Number.NEGATIVE_INFINITY;\n    let result: Array<number> = [];\n    for (let num of numbers) {\n        max_so_far = Math.max(max_so_far, num);\n        result.push(max_so_far);\n    }\n    return result;\n}\n",
            "export const makePalindrome = (s: string): string  => {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (isPalindrome(s.slice(i))) {\n            return s + s.slice(0, i).split(\"\").reverse().join(\"\");\n        }\n    }\n    return \"\";\n}\n",
            "export const stringXor = (a: string, b: string): string  => {\n    return a.split(\"\").map((x, i) => {\n        return x === b[i] ? \"0\" : \"1\";\n    }).join(\"\");\n}\n",
            "export const longest = (strs: Array<string>): string | null  => {\n    if (!strs) {\n        return null;\n    }\n    let longest_s = strs[0];\n    for (let s of strs) {\n        if (s.length > longest_s.length) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n",
            "export const greatestCommonDivisor = (a: number, b: number): number  => {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "export const allPrefixes = (s: string): Array<string>  => {\n    let prefixes: Array<string> = [];\n    for (let i = 0; i < s.length; i++) {\n        prefixes.push(s.slice(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "export const stringSequence = (n: number): string  => {\n    return \" \".join([str(i) for i in range(n + 1)])\n}\n",
            "export const countDistinctCharacters = (s: string): number  => {\n    return s.toLowerCase().split('').filter((item, index, arr) => {\n        return arr.indexOf(item) === index;\n    }).length;\n}\n",
            "export const parseMusic = (musicString: string): Array<number>  => {\n    const durations = {\"o\": 4, \"o|\": 2, \".|\": 1};\n    const notes = musicString.split();\n    return [durations[note] for note in notes];\n}\n",
            "export const howManyTimes = (s: string, substring: string): number  => {\n    let times = 0;\n    for (let i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.substring(i, i + substring.length) === substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "export const sortNumbers = (numbers: string): string  => {\n    const num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    const num_list = list(filter(lambda x: x in num_dict, numbers.split(\" \")))\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n}\n",
            "export const findClosestElements = (numbers: Array<number>): Array<number>  => {\n    sorted_numbers = numbers.sort((a, b) => a - b)\n    min_diff = Infinity\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n}\n",
            "export const rescaleToUnit = (numbers: Array<number>): Array<number>  => {\n    const minNum = Math.min(...numbers);\n    const maxNum = Math.max(...numbers);\n    if (minNum === maxNum) {\n        return Array(numbers.length).fill(0);\n    } else {\n        return numbers.map(num => (num - minNum) / (maxNum - minNum));\n    }\n}\n",
            "export const filterIntegers = (values: Array<any>): Array<number>  => {\n    return values.filter(x => typeof x === 'number');\n}\n",
            "export const strLength = (s: string): number  => {\n    return s.length;\n}\n",
            "export const largestDivisor = (n: number): number  => {\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "export const factorize = (n: number): Array<number>  => {\n    let factors = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n            n //= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "export const removeDuplicates = (numbers: Array<number>): Array<number>  => {\n    const counts = {};\n    for (const num of numbers) {\n        counts[num] = counts.get(num, 0) + 1;\n    }\n    const res = [num for num in numbers if counts[num] == 1];\n    return res;\n}\n",
            "export const flipCase = (s: string): string => {\n    let flipped: string[] = [];\n    for (let ch of s) {\n        if (!ch.isalpha()) {\n            flipped.push(ch);\n        } else if (ch.islower()) {\n            flipped.push(ch.toUpperCase());\n        } else if (ch.isupper()) {\n            flipped.push(ch.toLowerCase());\n        }\n    }\n    return flipped.join('');\n}\n",
            "export const concatenate = (strs: Array<string>): string  => {\n    return strs.join(\"\");\n}\n",
            "export const filterByPrefix = (strs: Array<string>, prefixStr: string): Array<string>  => {\n    return strs.filter(s => s.startsWith(prefixStr))\n}\n",
            "export const getPositive = (l: Array<number>): Array<number>  => {\n    return l.filter(num => num > 0)\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n",
            "export const poly = (xs: Array<number>, x: number): number  => {\n    let res = 0.0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n}\nexport const findZero = (xs: Array<number>): number  => {\n    let x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        let mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "export const sortThird = (l: Array<number>): Array<number>  => {\n    const sorted_third = sorted(l[::3])\n    return [sorted_third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n}\n",
            "export const listUnique = (l: Array<number>): Array<number>  => {\n    return sorted(list(set(l)))\n}\n",
            "export const maxElement = (l: Array<number>): number  => {\n    if (!l) {\n        return 0;\n    }\n    return Math.max(...l);\n}\n",
            "export const fizzBuzz = (n: number): number  => {\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += (i + \"\").split(\"7\").length - 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const sortEven = (l: Array<number>): Array<number>  => {\n    const sorted_even = sorted(l[::2])\n    return [sorted_even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n}\n",
            "export const encodeCyclic = (s: string): string  => {\n    let result: string[] = [];\n    for (let i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.push(s.slice(i));\n        } else {\n            result.push(s.slice(i + 1, i + 3));\n            result.push(s.slice(i, i + 1));\n        }\n    }\n    return result.join(\"\");\n}\nexport const decodeCyclic = (s: string): string  => {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "export const primeFib = (n: number): number  => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n    f = [0, 1];\n    cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (is_prime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\n",
            "export const triplesSumToZero = (l: Array<number>): boolean  => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "export const carRaceCollision = (n: number): number  => {\n    return n ** 2\n}\n",
            "export const incrList = (l: Array<number>): Array<number>  => {\n    return l.map(i => i + 1);\n}\n",
            "export const pairsSumToZero = (l: Array<number>): boolean  => {\n    const seen = new Set();\n    for (const num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "export const changeBase = (x: number, bas: number): string  => {\n    if (x === 0) {\n        return \"0\";\n    }\n    let digits: string[] = [];\n    while (x > 0) {\n        digits.push(String(x % bas));\n        x = Math.floor(x / bas);\n    }\n    return digits.reverse().join(\"\");\n}\n",
            "export const triangleArea = (a: number, h: number): number  => {\n    return a * h / 2\n}\n",
            "export const fib4 = (n: number): number  => {\n    let fib = [0, 0, 2, 0];\n    for (let i = 4; i < n + 1; i++) {\n        fib[i % 4] = sum(fib);\n    }\n    return fib[n % 4];\n}\n",
            "export const median = (l: Array<number>): number  => {\n    sl = l.sort();\n    if (l.length % 2 != 0) {\n        return sl[l.length // 2];\n    } else {\n        return (sl[l.length // 2] + sl[l.length // 2 - 1]) / 2;\n    }\n}\n",
            "export const isPalindrome = (txt: string): boolean  => {\n    return txt == txt[::-1]\n}\n",
            "export const modp = (n: number, p: number): number  => {\n    let ret = 1;\n    for (let _ = 0; _ < n; _++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "export const encodeShift = (s: string): string  => {\n    const result = [String.fromCharCode(((s.charCodeAt(ch) - 97 + 5) % 26) + 97) for ch in s];\n    return result.join(\"\");\n}\nexport const decodeShift = (s: string): string  => {\n    const result = [String.fromCharCode(((s.charCodeAt(ch) - 97 + 21) % 26) + 97) for ch in s];\n    return result.join(\"\");\n}\n",
            "export const removeVowels = (txt: string): string  => {\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in txt if char not in vowels])\n}\n",
            "export const belowThreshold = (l: Array<number>, t: number): boolean  => {\n    return l.every(x => x < t);\n}\n",
            "export const add = (x: number, y: number): number  => {\n    return x + y\n}\n",
            "export const sameChars = (s0: string, s1: string): boolean  => {\n    return new Set(s0).size === new Set(s1).size;\n}\n",
            "export const fib = (n: number): number => {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "export const correctBracketing = (brackets: string): boolean  => {\n    let depth = 0;\n    for (let b of brackets) {\n        if (b === \"<\") {\n            depth += 1;\n        } else if (b === \">\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const monotonic = (l: Array<number>): boolean  => {\n    const diff = l.map((x, i) => l[i + 1] - x);\n    return diff.every(x => x <= 0) || diff.every(x => x >= 0);\n}\n",
            "export const common = (l1: Array<number>, l2: Array<number>): Array<number>  => {\n    return sorted(list(set(l1) & set(l2)))\n}\n",
            "export const largestPrimeFactor = (n: number): number  => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1;\n        } else {\n            n //= i;\n        }\n    }\n    return n;\n}\n",
            "export const sumToN = (n: number): number  => {\n    return sum(range(n + 1))\n}\n",
            "export const correctBracketing = (brackets: string): boolean  => {\n    let depth = 0;\n    for (let b of brackets) {\n        if (b === \"(\") {\n            depth += 1;\n        } else if (b === \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const derivative = (xs: Array<number>): Array<number>  => {\n    return xs.map((x, i) => x * i);\n}\n",
            "export const fibfib = (n: number): number  => {\n    if (n <= 1) {\n        return 0;\n    }\n    let a = 0;\n    let b = 0;\n    let c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "export const vowelsCount = (s: string): number  => {\n    let vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() in vowels || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const circularShift = (x: number, shift: number): string  => {\n    const x_str = x.toString();\n    if (shift > x_str.length) {\n        return x_str.split('').reverse().join('');\n    } else {\n        return x_str.slice(-shift) + x_str.slice(0, -shift);\n    }\n}\n",
            "export const digitSum = (s: string): number  => {\n    return s.split('').reduce((acc, c) => {\n        if (c.toUpperCase() === c) {\n            acc += c.charCodeAt(0);\n        }\n        return acc;\n    }, 0);\n}\n",
            "export const fruitDistribution = (s: string, n: number): number  => {\n    const words = s.split(' ');\n    const apples = parseInt(words[words.indexOf(\"apples\") - 1]);\n    const oranges = parseInt(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "export const pluck = (arr: Array<number>): Array<number>  => {\n    const evens = arr.filter(n => n % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n    const minEven = Math.min(...evens);\n    return [minEven, arr.indexOf(minEven)];\n}\n",
            "export const search = (lst: Array<number>): number  => {\n    let freqs = {};\n    for (let n of lst) {\n        freqs[n] = freqs.get(n, 0) + 1;\n    }\n    let good_vals = [k for k, v in freqs.items() if v >= k];\n    return max(good_vals, default=-1);\n}\n",
            "export const strangeSortList = (lst: Array<number>): Array<number>  => {\n    const sl = lst.sort();\n    const result = [];\n    let left = 0;\n    let right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "export const triangleArea = (a: number, b: number, c: number): number  => {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2.0;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "export const willItFly = (q: Array<number>, w: number): boolean  => {\n    if (q.length === 0) {\n        return false;\n    }\n    const isPalin = q.every((item, index) => item === q[q.length - index - 1]);\n    const total = q.reduce((acc, item) => acc + item, 0);\n    return isPalin && total <= w;\n}\n",
            "export const smallestChange = (arr: Array<number>): number  => {\n    let ans = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i] != arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "export const totalMatch = (lst1: Array<string>, lst2: Array<string>): Array<string>  => {\n    const cnt1 = lst1.reduce((acc, s) => acc + s.length, 0);\n    const cnt2 = lst2.reduce((acc, s) => acc + s.length, 0);\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n",
            "export const isMultiplyPrime = (a: number): boolean  => {\n    if (a < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(a)) + 1; i++) {\n        if (a % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const isSimplePower = (x: number, n: number): boolean  => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}\n",
            "export const isCube = (a: number): boolean  => {\n    a = Math.abs(a);\n    root = Math.round(Math.pow(a, 1.0 / 3.0));\n    return root * root * root == a;\n}\n",
            "export const hexKey = (num: string): number  => {\n    return num.split(\"\").filter(x => x in \"2357BD\").length;\n}\n",
            "export const decimalToBinary = (dec: number): string  => {\n    const binary = dec.toString(2);\n    return `db${binary}db`;\n}\n",
            "export const isHappy = (s: string): boolean  => {\n    if (s.length < 3) {\n        return false;\n    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const numericalLetterGrade = (grades: Array<number>): Array<string>  => {\n    let result: Array<string> = [];\n    for (let g of grades) {\n        if (g == 4.0) {\n            result.push(\"A+\");\n        } else if (g > 3.7) {\n            result.push(\"A\");\n        } else if (g > 3.3) {\n            result.push(\"A-\");\n        } else if (g > 3.0) {\n            result.push(\"B+\");\n        } else if (g > 2.7) {\n            result.push(\"B\");\n        } else if (g > 2.3) {\n            result.push(\"B-\");\n        } else if (g > 2.0) {\n            result.push(\"C+\");\n        } else if (g > 1.7) {\n            result.push(\"C\");\n        } else if (g > 1.3) {\n            result.push(\"C-\");\n        } else if (g > 1.0) {\n            result.push(\"D+\");\n        } else if (g > 0.7) {\n            result.push(\"D\");\n        } else if (g > 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n",
            "export const primeLength = (s: string): boolean  => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(length)) + 1; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const startsOneEnds = (n: number): number  => {\n    if (n === 1) {\n        return 1;\n    }\n    return 2 * 9 * (10 ** (n - 2));\n}\n",
            "export const solve = (n: number): string  => {\n    const digits_sum = [...n.toString()].reduce((acc, d) => acc + parseInt(d), 0);\n    return digits_sum.toString(2);\n}\n",
            "export const add = (lst: Array<number>): number  => {\n    return lst.reduce((acc, x, i) => {\n        if (i % 2 === 1 && x % 2 === 0) {\n            acc += x;\n        }\n        return acc;\n    }, 0);\n}\n",
            "export const antiShuffle = (s: string): string  => {\n    const words = [\"\".join(sorted(list(word))) for word in s.split(\" \")]\n    return \" \".join(words)\n}\n",
            "export const getRow = (lst: Array<Array<number>>, x: number): Array<Array<number>>  => {\n    const coords = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    return coords.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n",
            "export const sortArray = (arr: Array<number>): Array<number>  => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) {\n        return arr.sort((a, b) => b - a);\n    } else {\n        return arr.sort((a, b) => a - b);\n    }\n}\n",
            "export const encrypt = (s: string): string => {\n    let result: string[] = [];\n    for (let ch of s) {\n        let shifted = ch.charCodeAt(0) + 4;\n        if (shifted > 'z'.charCodeAt(0)) {\n            shifted -= 26;\n        }\n        result.push(String.fromCharCode(shifted));\n    }\n    return result.join('');\n}\n",
            "export const nextSmallest = (lst: Array<number>): number | null  => {\n    const sl = sorted(set(lst))\n    if (len(sl) < 2) {\n        return null\n    }\n    return sl[1]\n}\n",
            "export const isBored = (s: string): number  => {\n    const sentences = re.split(r\"[.!?]\\s*\", s)\n    return sum(sentence[:2] == \"I \" for sentence in sentences if len(sentence) >= 2)\n}\n",
            "export const anyInt = (x: any, y: any, z: any): boolean  => {\n    if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n        if ((x + y === z) || (x + z === y) || (y + z === x)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const encode = (message: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    let result: string[] = [];\n    for (let ch of message) {\n        if (ch.isalpha()) {\n            let ch1 = ch.upper() ? ch.lower() : ch.lower();\n            if (ch1 in vowels) {\n                ch1 = String.fromCharCode(ch1.charCodeAt(0) + 2);\n            }\n            result.push(ch1);\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n};\n",
            "export const skjkasdkd = (lst: Array<number>): number  => {\n    const is_prime = (n: number): boolean => {\n        if (n < 2) {\n            return false;\n        }\n        for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n            if (n % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    const primes = lst.filter((n: number): boolean => is_prime(n));\n    if (primes.length === 0) {\n        return 0;\n    }\n    const largest = String(Math.max(...primes));\n    return largest.split('').reduce((acc: number, digit: string): number => acc + parseInt(digit), 0);\n}\n",
            "export const checkDictCase = (d: Map<string, string>): boolean  => {\n    if (!d) {\n        return false;\n    }\n    return all(c.islower() for c in d.keys()) || all(c.isupper() for c in d.keys());\n}\n",
            "export const countUpTo = (n: number): Array<number>  => {\n    let primes = []\n    for (let num = 2; num < n; num++) {\n        if (primes.every(p => num % p != 0)) {\n            primes.push(num)\n        }\n    }\n    return primes\n}\n",
            "export const multiply = (a: number, b: number): number  => {\n    return (Math.abs(a) % 10) * (Math.abs(b) % 10)\n}\n",
            "export const countUpper = (s: string): number  => {\n    const vowels = \"AEIOU\";\n    return len([c for i, c in enumerate(s) if i % 2 == 0 and c in vowels])\n}\n",
            "export const closestInteger = (value: string): number  => {\n    const num = parseFloat(value);\n    if (num >= 0) {\n        return Math.round(num);\n    } else {\n        return Math.floor(num);\n    }\n}\n",
            "export const makeAPile = (n: number): Array<number>  => {\n    return [n + 2 * i for i in range(n)]\n}\n",
            "export const wordsString = (s: string): Array<string>  => {\n    return [w for w in re.split(r\"[, ]\", s) if len(w) > 0]\n}\n",
            "export const chooseNum = (x: number, y: number): number  => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    return y - 1;\n}\n",
            "export const roundedAvg = (n: number, m: number): string | null  => {\n    if (n > m) {\n        return null;\n    }\n    const r_avg = Math.round((m + n) / 2.0);\n    return r_avg.toString(2);\n}\n",
            "export const uniqueDigits = (x: Array<number>): Array<number>  => {\n    return sorted([num for num in x if all_digits_odd(str(num))])\n}\n",
            "export const byLength = (arr: Array<number>): Array<string>  => {\n    const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const sortedArr = sorted([x for x in arr if 1 <= x <= 9], reverse=True);\n    return [digitNames[x-1] for x in sortedArr];\n}\n",
            "export const f = (n: number): Array<number>  => {\n    const nums = Array.from(Array(n + 1).keys()).slice(1);\n    return nums.map((i) => {\n        if (i % 2 !== 0) {\n            return nums.slice(0, i).reduce((x, y) => x + y, 0);\n        } else {\n            return nums.slice(0, i).reduce((x, y) => x * y, 1);\n        }\n    });\n}\n",
            "export const evenOddPalindrome = (n: number): Array<number>  => {\n    const cnt = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const countNums = (arr: Array<number>): number  => {\n    const digitsSum = (n: number): number => {\n        const nStr = String(n);\n        if (n >= 0) {\n            return nStr.split('').reduce((acc, d) => acc + Number(d), 0);\n        } else {\n            return Number(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n        }\n    };\n    return arr.filter(n => digitsSum(n) > 0).length;\n}\n",
            "export const moveOneBall = (arr: Array<number>): boolean  => {\n    if (arr.length === 0) {\n        return true;\n    }\n    const sortedArr = arr.sort();\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.slice(i) === sortedArr.slice(0, arr.length - i) && arr.slice(0, i) === sortedArr.slice(arr.length - i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const canExchange = (lst1: Array<number>, lst2: Array<number>): string  => {\n    const odd_cnt = lst1.filter(num => num % 2 != 0).length;\n    const even_cnt = lst2.filter(num => num % 2 == 0).length;\n    return even_cnt >= odd_cnt ? \"YES\" : \"NO\";\n}\n",
            "export const histogram = (test: string): Map<string, number>  => {\n    freq = {}\n    words = [w for w in test.split(\" \") if len(w) > 0]\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n}\n",
            "export const reverseDelete = (s: string, c: string): Array<string>  => {\n    const s1 = s.split(\"\").filter(ch => !c.includes(ch)).join(\"\");\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"];\n}\nconst isPalindrome = (s: string): boolean => {\n    return s === s.split(\"\").reverse().join(\"\");\n}\n",
            "export const oddCount = (lst: Array<string>): Array<string>  => {\n    let result: Array<string> = [];\n    for (let num of lst) {\n        let n: number = 0;\n        for (let d of num) {\n            if (ord(d) % 2 == 1) {\n                n += 1;\n            }\n        }\n        let rs: string = \"the number of odd elements in the string i of the input.\";\n        result.push(rs.replace(\"i\", str(n)));\n    }\n    return result;\n}\n",
            "export const minSubArraySum = (nums: Array<number>): number  => {\n    let min_sum = 0;\n    let cur_sum = 0;\n    for (let n of nums) {\n        cur_sum = Math.min(cur_sum + n, 0);\n        min_sum = Math.min(cur_sum, min_sum);\n    }\n    if (min_sum == 0) {\n        min_sum = Math.min(...nums);\n    }\n    return min_sum;\n}\n",
            "export const maxFill = (grid: Array<Array<number>>, capacity: number): number  => {\n    return grid.reduce((acc, arr) => acc + Math.ceil(arr.reduce((acc, num) => acc + num) / capacity), 0);\n}\n",
            "export const sortArray = (arr: Array<number>): Array<number>  => {\n    return arr.sort((a, b) => {\n        return countOnes(a) - countOnes(b) || a - b;\n    });\n}\nconst countOnes = (num: number): number => {\n    return num.toString(2).split('1').length - 1;\n}\n",
            "export const selectWords = (s: string, n: number): Array<string>  => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = [w for w in s.split(\" \") if len(w) > 0];\n    return [w for w in words if len([c for c in w if c.lower() in consonants]) == n];\n}\n",
            "export const getClosestVowel = (word: string): string  => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = len(word) - 2; i > 0; i--) {\n        if (word[i] in vowels && !(word[i - 1] in vowels) && !(word[i + 1] in vowels)) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "export const matchParens = (lst: Array<string>): string  => {\n    let depth = 0;\n    for (let ch of lst[0] + lst[1]) {\n        if (ch == \"(\") {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return \"No\";\n        }\n    }\n    return \"Yes\" if depth == 0 else \"No\";\n}\n",
            "export const maximum = (arr: Array<number>, k: number): Array<number>  => {\n    if (k === 0) {\n        return [];\n    }\n    return arr.sort((a, b) => a - b).slice(-k);\n}\n",
            "export const solution = (lst: Array<number>): number  => {\n    return lst.reduce((acc, x, i) => {\n        if (i % 2 === 0 && x % 2 !== 0) {\n            acc += x;\n        }\n        return acc;\n    }, 0);\n}\n",
            "export const addElements = (arr: Array<number>, k: number): number  => {\n    return arr.slice(0, k).filter(n => n.toString().length <= 2).reduce((a, b) => a + b, 0);\n}\n",
            "export const getOddCollatz = (n: number): Array<number>  => {\n    let collatz = [1];\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    return collatz.sort();\n}\n",
            "export const validDate = (date: string): boolean  => {\n    if (!(date.length === 10) || !(date[2] === \"-\") || !(date[5] === \"-\")) {\n        return false;\n    }\n    const m = parseInt(date.slice(0, 2));\n    const d = parseInt(date.slice(3, 5));\n    if (m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31) {\n        return true;\n    }\n    if (m in [4, 6, 9, 11] && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m === 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "export const splitWords = (txt: string): Array<string>  => {\n    if (\" \" in txt) {\n        return txt.split(\" \");\n    } else if (\",\" in txt) {\n        return txt.split(\",\");\n    } else {\n        return [String(txt.split(\"\").filter((c) => c.isLowerCase() && c.charCodeAt(0) % 2 === 0).length)];\n    }\n}\n",
            "export const isSorted = (lst: Array<number>): boolean  => {\n    if (!lst.every((i, j) => lst[j-1] <= lst[j])) {\n        return false;\n    }\n    const freq = {};\n    for (const i of lst) {\n        freq[i] = (freq[i] || 0) + 1;\n    }\n    return Math.max(...Object.values(freq)) <= 2;\n}\n",
            "export const intersection = (interval1: Array<number>, interval2: Array<number>): string  => {\n    if (interval1[0] < 2) {\n        return \"NO\";\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(interval1[0])) + 1; i++) {\n        if (interval1[0] % i === 0) {\n            return \"NO\";\n        }\n    }\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n    return length > 0 && is_prime(length) ? \"YES\" : \"NO\";\n}\n",
            "export const prodSigns = (arr: Array<number>): number | null  => {\n    if (!arr) {\n        return null;\n    }\n    if (0 in arr) {\n        return 0;\n    }\n    const sign = -1 if len([n for n in arr if n < 0]) % 2 == 1 else 1;\n    return sign * sum([abs(n) for n in arr]);\n}\n",
            "export const minPath = (grid: Array<Array<number>>, k: number): Array<number>  => {\n    const n = grid.length;\n    let min_val = n * n + 1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                const temp: Array<number> = [];\n                if (i !== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j !== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i !== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j !== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                min_val = Math.min(...temp);\n            }\n        }\n    }\n    const result: Array<number> = [];\n    for (let i = 0; i < k; i++) {\n        result.push(i % 2 === 0 ? 1 : min_val);\n    }\n    return result;\n}\n",
            "export const tri = (n: number): Array<number> => {\n    if (n === 0) {\n        return [1];\n    }\n    const seq: Array<number> = [1, 3];\n    for (let i = 2; i <= n + 1; i++) {\n        if (i % 2 === 0) {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n};\n",
            "export const digits = (n: number): number  => {\n    const odds = [parseInt(d) for d in str(n) if parseInt(d) % 2 == 1]\n    return odds.reduce((x, y) => x * y, 1) if len(odds) > 0 else 0\n}\n",
            "export const isNested = (s: string): boolean  => {\n    const open_idx: number[] = [];\n    const close_idx: number[] = [];\n    for (let i = 0; i < s.length; i++) {\n        const ch = s[i];\n        if (ch === '[') {\n            open_idx.push(i);\n        } else if (ch === ']') {\n            close_idx.push(i);\n        }\n    }\n    close_idx.reverse();\n    let cnt = 0;\n    let i = 0;\n    const l = close_idx.length;\n    for (const idx of open_idx) {\n        if (i < l && idx < close_idx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "export const sumSquares = (lst: Array<number>): number  => {\n    return lst.reduce((acc, n) => acc + Math.pow(Math.ceil(n), 2), 0)\n}\n",
            "export const checkIfLastCharIsALetter = (txt: string): boolean  => {\n    if (!txt) {\n        return false;\n    }\n    const last = txt.slice(txt.lastIndexOf(' ') + 1);\n    return last.length === 1 && last[0].isAlpha();\n}\n",
            "export const canArrange = (arr: Array<number>): number  => {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    const idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]];\n    return max(idx, default=-1);\n}\n",
            "export const largestSmallestIntegers = (lst: Array<number>): Array<number | null>  => {\n    const neg = lst.filter(i => i < 0);\n    const pos = lst.filter(i => i > 0);\n    const max_neg = neg.length > 0 ? Math.max(...neg) : null;\n    const min_pos = pos.length > 0 ? Math.min(...pos) : null;\n    return [max_neg, min_pos];\n}\n",
            "export const compareOne = (a: any, b: any): number | null  => {\n    if (typeof a === 'string') {\n        a = parseFloat(a.replace(',', '.'));\n    } else if (typeof a === 'number') {\n        a = a;\n    } else {\n        throw new Error('Type Error');\n    }\n    if (typeof b === 'string') {\n        b = parseFloat(b.replace(',', '.'));\n    } else if (typeof b === 'number') {\n        b = b;\n    } else {\n        throw new Error('Type Error');\n    }\n    if (a === b) {\n        return null;\n    } else if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n",
            "export const isEqualToSumEven = (n: number): boolean  => {\n    return n % 2 == 0 && n >= 8\n}\n",
            "export const specialFactorial = (n: number): number  => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "export const fixSpaces = (txt: string): string  => {\n    return re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n}\n",
            "export const fileNameCheck = (fileName: string): string  => {\n    const suf = [\"txt\", \"exe\", \"dll\"];\n    const lst = fileName.split(\".\");\n    if (lst.length !== 2 || !lst[1] in suf || lst[0].length === 0 || !lst[0][0].isalpha() || len([x for x in lst[0] if x.isdigit()]) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "export const sumSquares = (lst: Array<number>): number  => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0) {\n            result += Math.pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const wordsInSentence = (sentence: string): string  => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const simplify = (x: string, n: string): boolean  => {\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n}\n",
            "export const orderByPoints = (nums: Array<number>): Array<number>  => {\n    const digitsSum = (n: number): number => {\n        const nStr = String(n);\n        if (n >= 0) {\n            return nStr.split('').reduce((acc, d) => acc + Number(d), 0);\n        } else {\n            return Number(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n        }\n    };\n    return nums.sort((a, b) => digitsSum(a) - digitsSum(b));\n}\n",
            "export const specialFilter = (nums: Array<number>): number  => {\n    const odds = \"13579\";\n    return nums.filter(n => n > 10 && n % 2 === 1 && odds.includes(n.toString()[0])).length;\n}\n",
            "export const getMaxTriples = (n: number): number  => {\n    let c = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        let a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}\n",
            "export const bf = (planet1: string, planet2: string): Array<string>  => {\n    const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.includes(planet1) || !names.includes(planet2)) {\n        return [];\n    }\n    let l = names.indexOf(planet1);\n    let r = names.indexOf(planet2);\n    if (l > r) {\n        l = r;\n        r = l;\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n}\n",
            "export const sortedListSum = (lst: Array<string>): Array<string>  => {\n    const result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda x: (len(x), x))\n}\n",
            "export const xOrY = (n: number, x: number, y: number): number  => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "export const doubleTheDifference = (lst: Array<number>): number  => {\n    return lst.filter(n => n >= 0 && n % 2 == 1).map(n => n * n).reduce((a, b) => a + b, 0)\n}\n",
            "export const compare = (game: Array<number>, guess: Array<number>): Array<number>  => {\n    return [Math.abs(x - y) for x, y in zip(game, guess)]\n}\n",
            "export const strongestExtension = (className: string, extensions: Array<string>): string  => {\n    let max_s = Number.NEGATIVE_INFINITY;\n    let max_ext = \"\";\n    for (let ext of extensions) {\n        let upper = ext.split(\"\").filter(c => c.toUpperCase() === c).length;\n        let lower = ext.split(\"\").filter(c => c.toLowerCase() === c).length;\n        let s = upper - lower;\n        if (s > max_s) {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return `${className}.${max_ext}`;\n}\n",
            "export const cycpatternCheck = (a: string, b: string): boolean  => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; i++) {\n        if (b.slice(i) + b.slice(0, i) in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const evenOddCount = (num: number): Array<number>  => {\n    const ds = String(Math.abs(num));\n    const even = ds.filter(d => d.charCodeAt(0) % 2 === 0).length;\n    return [even, ds.length - even];\n}\n",
            "export const intToMiniRoman = (num: number): string  => {\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i in range(len(values)):\n        while num >= values[i]:\n            res.append(numerals[i])\n            num -= values[i]\n    return \"\".join(res)\n}\n",
            "export const rightAngleTriangle = (a: number, b: number, c: number): boolean  => {\n    s = [a, b, c].sort();\n    return  s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}\n",
            "export const findMax = (words: Array<string>): string  => {\n    let max_cnt = 0;\n    let max_w = \"\";\n    for (let w of words) {\n        let cnt = new Set(w).size;\n        if (cnt > max_cnt) {\n            max_cnt = cnt;\n            max_w = w;\n        } else if (cnt == max_cnt) {\n            max_w = Math.min(max_w, w);\n        }\n    }\n    return max_w;\n}\n",
            "export const eat = (num: number, need: number, remaining: number): Array<number>  => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "export const doAlgebra = (operators: Array<string>, operands: Array<number>): number  => {\n    ops = operators.copy();\n    nums = operands.copy();\n    i = len(ops) - 1;\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1]);\n            nums.pop(i + 1);\n            ops.pop(i);\n        i -= 1;\n    i = 0;\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        i += 1;\n    i = 0;\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        i += 1;\n    return nums[0];\n}\n",
            "export const solve = (s: string): string  => {\n    if (!s.split('').some(ch => ch.match(/[a-zA-Z]/))) {\n        return s.split('').reverse().join('');\n    }\n    let result = [];\n    for (let ch of s) {\n        if (!ch.match(/[a-zA-Z]/)) {\n            result.push(ch);\n        } else if (ch.match(/[A-Z]/)) {\n            result.push(ch.toLowerCase());\n        } else if (ch.match(/[a-z]/)) {\n            result.push(ch.toUpperCase());\n        }\n    }\n    return result.join('');\n}\n",
            "export const stringToMd5 = (txt: string): string | null  => {\n    if (!txt) {\n        return null;\n    }\n    const md5Hash = hashlib.md5();\n    const txtBytes = txt.encode();\n    md5Hash.update(txtBytes);\n    const md5Encoded = md5Hash.hexdigest();\n    return md5Encoded;\n}\n",
            "export const generateIntegers = (a: number, b: number): Array<number>  => {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n    return [i for i in range(lower, upper + 1) if i % 2 == 0];\n}\n"
        ]
    },
    "ruby": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(0, len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num.floor\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(map(lambda x: (x - mean).abs(), numbers))\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(0, len(numbers) - 1):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split()\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strs))\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = reduce(lambda x, y: x * y, numbers, 1)\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join([\"0\" if x == y else \"1\" for x, y in zip(a, b)])\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if len(strs) == 0:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[0:i])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split()\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(0, s.length - substring.length):\n        if s[i...(i + substring.length)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = numbers.split(\" \").select { |x| num_dict.key?(x) }\n    num_list.sort_by! { |x| num_dict[x] }\n    num_list.join(\" \")\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [ (num - min_num) / (max_num - min_num) for num in numbers ]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: isinstance(x, int), values))\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = [num for num in numbers if counts[num] == 1]\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.match(/[a-zA-Z]/):\n            flipped += ch\n        elif ch.match(/[a-z]/):\n            flipped += ch.upcase\n        elif ch.match(/[A-Z]/):\n            flipped += ch.downcase\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return list(filter(lambda s: s.startswith(prefix_str), strs))\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda num: num > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * x**i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while (x1 - x2).abs > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = list(filter(lambda x: x[1] % 3 == 0, enumerate(l)))\n    sorted_third.sort()\n    return list(map(lambda x: sorted_third[x[1] / 3] if x[1] % 3 == 0 else x[0], enumerate(l)))\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    if len(l) == 0:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(0, n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += i.count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = list(filter(lambda x: x[1] % 2 == 0, enumerate(l)))\n    sorted_even.sort()\n    return list(map(lambda x: sorted_even[x[1] / 2] if x[1] % 2 == 0 else x[0], enumerate(l)))\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i+1:i+3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(0, len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return list(map(lambda i: i + 1, l))\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h).to_f / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = l.sort()\n    if l.length % 2 != 0:\n        return sl[l.length / 2]\n    else:\n        return (sl[l.length / 2] + sl[l.length / 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(0, n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = [chr((ord(ch) - 97 + 5) % 26 + 97) for ch in s]\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = [chr((ord(ch) - 97 + 21) % 26 + 97) for ch in s]\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(char for char in txt if char not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = list(map(lambda a, b: b - a, l))\n    return all(map(lambda x: x <= 0, diff)) or all(map(lambda x: x >= 0, diff))\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return list(map(lambda x, i: x * i, xs))[1:]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = list(filter(lambda n: n % 2 == 0, arr))\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(0, len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(map(len, lst1))\n    cnt2 = sum(map(len, lst2))\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = round(a ** (1.0 / 3.0))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return num.count(\"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = dec.to_s(2)\n    return \"db#{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 3):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * (10 ** (n - 2))\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(i) for i in str(n))\n    return bin(digits_sum)\n",
            "def add(lst: List[int]) -> int:\n    return sum(map(lambda x: x[0], filter(lambda x: x[1] % 2 == 1 and x[0] % 2 == 0, enumerate(lst))))\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \").map { |word| word.chars.sort.join }\n    words.join(\" \")\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                coords.append([i, j])\n    coords.sort(key=lambda a: (a[0], -a[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return arr.sort(reverse=True)\n    else:\n        return arr.sort()\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = lst.uniq.sort\n    if sl.length < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(/[.!?]\\s*/)\n    return sentences.count { |sentence| sentence.length >= 2 && sentence[0..1] == \"I \" }\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.match(/[a-zA-Z]/):\n            ch1 = ch.upcase == ch ? ch.downcase : ch.upcase\n            if vowels.include?(ch1):\n                ch1 = (ch1.ord + 2).chr\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def skjkasdkd(lst: List[int]) -> int:\n    if len(lst) == 0:\n        return 0\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum([int(c) for c in str(largest)])\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    return all(k.match(/^[A-Z]+$/) for k in d.keys()) or all(k.match(/^[a-z]+$/) for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (a.abs % 10) * (b.abs % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return len(list(filter(lambda c: s[c] in vowels, range(0, len(s), 2))))\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return list(map(lambda i: n + 2 * i, range(n)))\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(/[ ,]/).select { |w| w.length > 0 }\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if y != x:\n        return y - 1\n    return -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = ((n + m) / 2.0 + 0.5).to_i\n    return r_avg.to_s(2)\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(ord(digit) % 2 != 0 for digit in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(n for n in x if all_digits_odd(str(n)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [nums.take(i).sum() if i % 2 != 0 else nums.take(i).reduce(lambda x, y: x * y) for i in nums]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str.split('')))\n    else:\n        return n_str[0..1].to_i * 2 + digits_sum(n.abs)\ndef count_nums(arr: List[int]) -> int:\n    return arr.count(n for n in arr if digits_sum(n) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if arr == []:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr)-i] and arr[:i] == sorted_arr[len(arr)-i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = len([n for n in lst1 if n % 2 != 0])\n    even_cnt = len([n for n in lst2 if n % 2 == 0])\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \").select { |w| w.length > 0 }\n    words.each do |w|\n        freq[w] = freq.fetch(w, 0) + 1\n    end\n    result = {}\n    if freq.length > 0\n        max_freq = freq.values.max\n        freq.each do |k, v|\n            if v == max_freq\n                result[k] = v\n            end\n        end\n    end\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, 'yes' if is_palindrome(s1) else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for d in num if ord(d) % 2 == 1)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: math.ceil(sum(arr) / capacity), grid))\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count(\"1\")\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda n: (count_ones(n), n))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").select { |w| w.length > 0 }\n    words.select { |w| w.chars.count { |c| consonants.include?(c.downcase) } == n }\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 1, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    depth = 0\n    for ch in lst[0] + lst[1]:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return \"No\"\n    return \"Yes\" if depth == 0 else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    arr.sort()\n    return arr[-k..]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(map(lambda x: x[0], filter(lambda x: x[1] % 2 == 0 and x[0] % 2 == 1, enumerate(lst))))\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda n: len(str(n)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != \"-\" or date[5] != \"-\":\n        return False\n    m = int(date[0:1])\n    d = int(date[3:4])\n    if [1, 3, 5, 7, 8, 10, 12].include?(m) and d >= 1 and d <= 31:\n        return True\n    if [4, 6, 9, 11].include?(m) and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(txt.count(lambda c: c == c.lower() and ord(c) % 2 == 0))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not all(a <= b for a, b in zip(lst, lst[1:])):\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    return (max(freq.values()) or 0) <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    if interval1[0] < interval2[0]:\n        l = interval2[0]\n    else:\n        l = interval1[0]\n    if interval1[1] < interval2[1]:\n        r = interval1[1]\n    else:\n        r = interval2[1]\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = 1 if arr.count(n for n in arr if n < 0) % 2 == 1 else -1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i / 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = list(filter(lambda d: int(d) % 2 == 1, str(n)))\n    if len(odds) == 0:\n        return 0\n    else:\n        return reduce(lambda x, y: x * y, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: n.ceil().pow(2), lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if txt == \"\":\n        return False\n    last = txt[(txt.rindex(\" \") or -1) + 1..]\n    return last.length == 1 and last[0].match?(/[[:alpha:]])\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = list(filter(lambda i: i < 0, lst))\n    pos = list(filter(lambda i: i > 0, lst))\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str):\n        a1 = float(a.replace(',', '.'))\n    elif isinstance(a, int):\n        a1 = float(a)\n    elif isinstance(a, float):\n        a1 = a\n    else:\n        raise Exception(\"Type Error\")\n    if isinstance(b, str):\n        b1 = float(b.replace(',', '.'))\n    elif isinstance(b, int):\n        b1 = float(b)\n    elif isinstance(b, float):\n        b1 = b\n    else:\n        raise Exception(\"Type Error\")\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\" \", \"_\").replace(r\"\\s{3,}\", \"-\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if lst.length != 2 or not suf.include?(lst[1]) or lst[0].length == 0 or not lst[0][0].match?(/[[:alpha:]]/) or lst[0].chars.count { |x| x.match?(/[[:digit:]]/) } > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(filter(lambda w: is_prime(len(w)), words))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = xs[0].to_i * ns[0].to_i\n    den = xs[1].to_i * ns[1].to_i\n    num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str.split('')))\n    else:\n        return n_str[0..1].to_i * 2 + digits_sum(n.abs)\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and odds.find(str(n)[0]) != -1])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if not planet1 in names or not planet2 in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = list(filter(lambda s: len(s) % 2 == 0, lst))\n    result.sort(key=lambda s: (len(s), s))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, math.sqrt(n) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(map(lambda n: int(n * n), filter(lambda n: n >= 0 and n % 2 == 1, lst)))\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return list(map(lambda x, y: abs(x - y), game, guess))\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -float('inf')\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c == c.upper())\n        lower = sum(1 for c in ext if c == c.lower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.dup\n    nums = operands.dup\n    i = ops.length - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n        i -= 1\n    i = 0\n    while i < ops.length:\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < ops.length:\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(ch.isalpha() for ch in s):\n        return s[::-1]\n    result = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        elif ch.islower():\n            result += ch.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    md5_hash = hashlib.md5()\n    txt_bytes = txt.encode()\n    md5_hash.update(txt_bytes)\n    md5_encoded = md5_hash.hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max([2, min([a, b])])\n    upper = min([8, max([a, b])])\n    return list(filter(lambda i: i % 2 == 0, range(lower, upper + 1)))\n"
        ]
    },
    "rust": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(0, len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups: List[str] = []\n    stk: List[str] = []\n    current_group: str = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num.floor()\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(map(lambda x: abs(x - mean), numbers))\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(0, len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_group = paren_string.split_whitespace()\n    for group in paren_group:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strs))\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = product(numbers)\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -2147483648\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(map(lambda x, y: '0' if x == y else '1', a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if len(strs) == 0:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[0:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join([str(i) for i in range(n + 1)])\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split_whitespace()\n    parsed_notes = list(map(lambda note: durations.get(note, 0), notes))\n    return parsed_notes\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = list(filter(lambda x: x in num_dict, numbers.split(\" \")))\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = numbers.clone()\n    sorted_numbers.sort_by(|a, b| a.total_cmp(b))\n    min_diff = f64::INFINITY\n    closest_pair = vec![]\n    for i in 1..sorted_numbers.len():\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = vec![sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers, key=lambda a, b: a.total_cmp(b))\n    max_num = max(numbers, key=lambda a, b: a.total_cmp(b))\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [num - min_num / max_num - min_num for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    num = n\n    while divisor <= num:\n        if num % divisor == 0:\n            factors.append(divisor)\n            num /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = [num for num in numbers if counts[num] == 1]\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return list(filter(lambda s: s.startswith(prefix_str), strs))\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda x: x > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0.0:\n        x1 *= 2.0\n        x2 *= 2.0\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2.0\n        if poly(xs, mid) == 0.0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0.0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2.0\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = list(filter(lambda x: x[0] % 3 == 0, enumerate(l)))\n    sorted_third.sort()\n    return list(map(lambda x: sorted_third[x[0] / 3] if x[0] % 3 == 0 else x[1], enumerate(l)))\n",
            "def list_unique(l: List[int]) -> List[int]:\n    result = l.clone()\n    result.sort()\n    result.dedup()\n    return result\n",
            "def max_element(l: List[int]) -> int:\n    if len(l) == 0:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += i.to_string().matches(\"7\").count()\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = list(filter(lambda x: x[0] % 2 == 0, enumerate(l)))\n    sorted_even.sort()\n    return list(map(lambda x: sorted_even[x[0] / 2] if x[0] % 2 == 0 else x[1], enumerate(l)))\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return list(map(lambda x: x + 1, l))\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    x = x\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x /= bas\n    digits.reverse()\n    return digits.join(\"\")\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[(i % 4) as usize] = sum(fib)\n    return fib[(n % 4) as usize]\n",
            "def median(l: List[float]) -> float:\n    sl = l.clone()\n    sl.sort_by(|a, b| a.total_cmp(b))\n    if l.len() % 2 != 0:\n        return sl[l.len() / 2]\n    else:\n        return (sl[l.len() / 2] + sl[l.len() / 2 - 1]) / 2.0\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for _ in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = map(lambda ch: (((ord(ch) - 97 + 5) % 26) + 97), s)\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = map(lambda ch: (((ord(ch) - 97 + 21) % 26) + 97), s)\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(filter(lambda c: not vowels.contains(c), txt))\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = list(map(lambda x, y: y - x, l, l[1:]))\n    return all(map(lambda x: x <= 0, diff)) or all(map(lambda x: x >= 0, diff))\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    result = list(filter(lambda x: x in l2, l1))\n    result = list(set(result))\n    result.sort()\n    return result\n",
            "def largest_prime_factor(n: int) -> int:\n    n = n\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n /= i\n        else:\n            i += 1\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(0, n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return list(map(lambda x: x * i, xs))\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    n = n\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.contains(s[i:i+1].lower()) or (i == len(s) - 1 and s[i:i+1].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(map(lambda c: ord(c), filter(lambda c: c.isupper(), s)))\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = list(filter(lambda n: n % 2 == 0, arr))\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst.copy()\n    sl.sort()\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(0, len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(map(lambda s: len(s), lst1))\n    cnt2 = sum(map(lambda s: len(s), lst2))\n    if cnt1 <= cnt2:\n        return lst1.clone()\n    else:\n        return lst2.clone()\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    a = a\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = round(pow(a, 1.0 / 3.0))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return len([x for x in num if x in \"2357BD\"])\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{dec:b}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * (10 ** (n - 2))\n",
            "def solve(n: int) -> str:\n    digits_sum: int = sum(int(d) for d in str(n))\n    return bin(digits_sum)\n",
            "def add(lst: List[int]) -> int:\n    return sum(filter(lambda x: x % 2 == 0, map(lambda x: x[1], filter(lambda x: x[0] % 2 == 1, enumerate(lst))))\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    words = map(lambda word: \"\".join(sorted(word)), words)\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords: List[List[int]] = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda a: (a[0], -a[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    result = arr.copy()\n    if (arr[0] + arr[len(arr) - 1]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        result.sort()\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            result += chr(shifted - 26)\n        else:\n            result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = lst.copy()\n    sl.sort()\n    sl.dedup()\n    if sl.len() < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r\"[.!?]\\s*\", s)\n    return len(list(filter(lambda sentence: len(sentence) >= 2 and sentence[:2] == \"I \", sentences)))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if (x.downcast_ref::<i32>(), y.downcast_ref::<i32>(), z.downcast_ref::<i32>()) == (Some(int_x), Some(int_y), Some(int_z)):\n        if (int_x + int_y == *int_z) || (int_x + int_z == *int_y) || (int_y + int_z == *int_x):\n            return true\n    return false\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.is_alpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def skjkasdkd(lst: List[int]) -> int:\n    if len(lst) == 0:\n        return 0\n    primes = list(filter(lambda n: is_prime(n), lst))\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum(map(lambda c: int(c), str(largest)))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    return all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return len(list(filter(lambda x: x[0] % 2 == 0 and x[1] in vowels, enumerate(s))))\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0.0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return list(map(lambda i: n + 2 * i, range(0, n)))\n",
            "def words_string(s: str) -> List[str]:\n    return re.split(r\"[, ]\", s).filter(lambda w: len(w) > 0).map(lambda w: w.to_string()).collect()\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if y != x:\n        return y - 1\n    else:\n        return -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = ((n + m) / 2 + 0.5)\n    return format(\"{:b}\", r_avg)\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(digit % 2 != 0 for digit in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    result = [num for num in x if all_digits_odd(str(num))]\n    result.sort()\n    return result\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = list(filter(lambda x: 1 <= x and x <= 9, arr))\n    sorted_arr.sort(reverse=True)\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums: List[int] = list(range(1, n + 1))\n    return [nums.iter().take(i).sum() if i % 2 != 0 else nums.iter().take(i).product() for i in nums]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return 2 * int(n_str[0:2]) + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len(list(filter(lambda n: digits_sum(n) > 0, arr)))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = arr.copy()\n    sorted_arr.sort()\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = len(list(filter(lambda n: n % 2 != 0, lst1)))\n    even_cnt = len(list(filter(lambda n: n % 2 == 0, lst2)))\n    if even_cnt >= odd_cnt:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        if w in freq:\n            freq[w] += 1\n        else:\n            freq[w] = 1\n    result = {}\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(filter(lambda ch: ch not in c, s))\n    return [s1, 'yes' if is_palindrome(s1) else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len(list(filter(lambda d: ord(d) % 2 == 1, num)))\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(math.ceil(sum(row) / capacity) for row in grid)\n",
            "def count_ones(num: int) -> int:\n    return format(num, 'b').count('1')\ndef sort_array(arr: List[int]) -> List[int]:\n    arr = arr.copy()\n    arr.sort(key=lambda x: (count_ones(x), x))\n    return arr\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = [w for w in s.split(\" \") if len(w) > 0]\n    return [w for w in words if len([c for c in w if c.lower() in consonants]) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    depth = 0\n    for ch in lst[0] + lst[1]:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return \"No\"\n    return \"Yes\" if depth == 0 else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    result = arr.clone()\n    result.sort()\n    return result.iter().skip(result.len() - k as usize).map(|x| *x).collect()\n",
            "def solution(lst: List[int]) -> int:\n    return sum(filter(lambda x: x % 2 != 0, map(lambda (i, x): x, filter(lambda (i, x): i % 2 == 0, enumerate(lst))));\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda n: len(str(n)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    n = n\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if [1, 3, 5, 7, 8, 10, 12].contains(m) and d >= 1 and d <= 31:\n        return True\n    if [4, 6, 9, 11].contains(m) and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return [s for s in txt.split() if s]\n    elif \",\" in txt:\n        return [s for s in txt.split(\",\") if s]\n    else:\n        return [str(len([c for c in txt if c.islower() and ord(c) % 2 == 0]))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)):\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    return max(freq.values()) <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = 1 if len(list(filter(lambda n: n < 0, arr))) % 2 == 1 else -1\n    return sign * sum(map(lambda n: abs(n), arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = (n * n + 1)\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = list(filter(lambda d: int(d) % 2 == 1, str(n)))\n    if len(odds) == 0:\n        return 0\n    else:\n        return reduce(lambda x, y: x * y, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: (math.ceil(n) ** 2), lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if len(txt) == 0:\n        return False\n    last = txt[txt.rfind(\" \").map_or(0, |i| i + 1)..]\n    return len(last) == 1 and last.chars().next().unwrap().is_alphabetic()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = (1..arr.len()).filter(|&i| arr[i] < arr[i - 1]).map(|i| i as i32)\n    return idx.max().unwrap_or(-1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg: List[int] = list(filter(lambda i: i < 0, lst))\n    pos: List[int] = list(filter(lambda i: i > 0, lst))\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str):\n        a1 = float(a.replace(\",\", \".\"))\n    elif isinstance(a, int):\n        a1 = float(a)\n    elif isinstance(a, float):\n        a1 = a\n    else:\n        raise TypeError(\"Type Error\")\n    if isinstance(b, str):\n        b1 = float(b.replace(\",\", \".\"))\n    elif isinstance(b, int):\n        b1 = float(b)\n    elif isinstance(b, float):\n        b1 = b\n    else:\n        raise TypeError(\"Type Error\")\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r\"\\s{3,}\", \"-\", re.sub(r\" \", \"_\", txt))\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or not suf.__contains__(lst[1]) or len(lst[0]) == 0 or not lst[0][0].isalpha() or len(list(filter(lambda c: c.isdigit(), lst[0]))) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    return \" \".join(filter(lambda w: is_prime(len(w)), words))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def order_by_points(nums: List[int]) -> List[int]:\n    result = nums.copy()\n    result.sort(key=lambda num: sum(int(d) for d in str(num)))\n    return result\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len(list(filter(lambda n: n > 10 and n % 2 == 1 and odds.contains(str(n)[0]), nums))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[(a % 3)] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l+1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = list(filter(lambda s: len(s) % 2 == 0, lst))\n    result.sort(key=lambda a: (len(a), a))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(map(lambda n: int(n * n), filter(lambda n: n >= 0.0 and n % 2.0 == 1.0, lst))\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return list(map(lambda x, y: abs(x - y), game, guess))\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = float('-inf')\n    max_ext = ''\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f'{class_name}.{max_ext}'\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = len(list(filter(lambda d: int(d) % 2 == 0, ds)))\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    num = num\n    for i in range(0, len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(ch.isalpha() for ch in s):\n        return s[::-1]\n    result = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        elif ch.islower():\n            result += ch.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt.is_empty():\n        return None\n    md5_hash = Md5.new()\n    txt_bytes = txt.as_bytes()\n    md5_hash.update(txt_bytes)\n    md5_encoded = format(\"{:x}\", md5_hash.finalize())\n    return Some(md5_encoded)\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return list(filter(lambda x: x % 2 == 0, range(lower, upper + 1)))\n"
        ]
    },
    "scala": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(0, len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if (abs(numbers[i] - numbers[j]) < threshold):\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == '(':\n            stk.append(ch)\n            current_group += ch\n        elif ch == ')':\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num.floor\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum([(x - mean).abs for x in numbers])\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(0, len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \").filter(_.length > 0)\n    for paren_group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in paren_group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return list(filter(lambda x: substring in x, strs))\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = reduce(lambda x, y: x * y, numbers)\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -2147483648\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    else:\n        for i in range(len(s)):\n            if is_palindrome(s[i:]):\n                return s + s[:i].reverse()\n        return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join([\"0\" if x == y else \"1\" for x, y in zip(a, b)])\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if len(strs) == 0:\n        return None\n    longestS = strs[0]\n    for s in strs:\n        if len(s) > len(longestS):\n            longestS = s\n    return Some(longestS)\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    result = []\n    for i in range(1, len(s) + 1):\n        result.append(s[0:i])\n    return result\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join([str(i) for i in range(n + 1)])\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \").filter(_.length > 0)\n    return notes.map(note => durations(note)).toList\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(0, len(s) - len(substring)):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = numbers.split(\" \").filter(num_dict.contains(_))\n    sorted_list = num_list.sortBy(num_dict)\n    return sorted_list.mkString(\" \")\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    def factorizeAcc(n: int, i: int):\n        if i > n:\n            return\n        elif n % i == 0:\n            factors.append(i)\n            factorizeAcc(n / i, i)\n        else:\n            factorizeAcc(n, i + 1)\n    factorizeAcc(n, 2)\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = [num for num in numbers if counts[num] == 1]\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = StringBuilder()\n    for ch in s:\n        if not ch.isLetter:\n            flipped += ch\n        elif ch.isLower:\n            flipped += ch.toUpper\n        elif ch.isUpper:\n            flipped += ch.toLower\n    return flipped.toString\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return list(filter(lambda x: x.startswith(prefix_str), strs))\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda x: x > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, math.sqrt(n).floor() + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = list(map(lambda x: x[0], filter(lambda x: x[1] % 3 == 0, map(lambda x: (x, index), l))))\n    return list(map(lambda x: sorted_third[x[1] / 3] if x[1] % 3 == 0 else x[0], map(lambda x: (x, index), l)))\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    if len(l) == 0:\n        return 0\n    else:\n        return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += i.toString().count(_ == '7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = list(filter(lambda x: x[1] % 2 == 0, map(lambda x: x[0], sorted(map(lambda x: (x, l.index(x)), l))))\n    return list(map(lambda x: sorted_even[x[1] // 2] if x[1] % 2 == 0 else x[0], zip(l, range(len(l)))))\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(0, len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return pow(n, 2).toInt\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return list(map(lambda x: x + 1, l))\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    def acc(x0: int):\n        if x0 > 0:\n            digits.append(str(x0 % bas))\n            acc(x0 / bas)\n    acc(x)\n    return \"\".join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) / 2]\n    else:\n        return (sl[len(l) / 2] + sl[len(l) / 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(0, n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = ''.join([chr(((ord(ch) - 97 + 5) % 26) + 97) for ch in s])\n    return result\ndef decode_shift(s: str) -> str:\n    result = ''.join([chr(((ord(ch) - 97 + 21) % 26) + 97) for ch in s])\n    return result\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(filter(lambda x: x not in vowels, txt))\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [b - a for a, b in zip(l, l[1:])]\n    return all(d <= 0 for d in diff) or all(d >= 0 for d in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1) & set(l2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    def acc(n0: int) -> int:\n        if i * i > n0:\n            return n0\n        elif n0 % i != 0:\n            i += 1\n            return acc(n0)\n        else:\n            return acc(n0 / i)\n    return acc(n)\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return list(map(lambda x: x[0] * x[1], zip(xs, range(1, len(xs))))\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    def acc(n: int) -> int:\n        if n <= 2:\n            return c\n        a, b, c = b, a + b + c, a\n        return acc(n - 1)\n    return acc(n)\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower()) != -1 or (i == len(s) - 1 and s[i].lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = list(filter(lambda x: x % 2 == 0, arr))\n    if len(evens) == 0:\n        return []\n    minEven = min(evens)\n    return [minEven, arr.index(minEven)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(0, len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(map(lambda x: len(x), lst1))\n    cnt2 = sum(map(lambda x: len(x), lst2))\n    if cnt1 <= cnt2:\n        return lst1\n    else:\n        return lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            def loop(a: int) -> int:\n                if a % i == 0:\n                    cnt += 1\n                    return loop(a / i)\n                else:\n                    return a\n            loop(a)\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a0 = abs(a)\n    root = round(pow(a0, 1.0 / 3.0))\n    return root * root * root == a0\n",
            "def hex_key(num: str) -> int:\n    return num.count(\"2357BD\".contains(_))\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = dec.to_binary_string\n    return f\"db{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    else:\n        for i in range(0, len(s) - 2):\n            if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n                return False\n        return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, math.sqrt(length).floor() + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * pow(10, n - 2)\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(digit) for digit in str(n))\n    return bin(digits_sum)\n",
            "def add(lst: List[int]) -> int:\n    return sum(filter(lambda x: x % 2 == 0, map(lambda x: x, filter(lambda x: x % 2 == 1, zip(lst, range(len(lst))))))\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \").map{word => word.sorted}\n    return words.mkString(\" \")\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda a: (a[0], -a[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[len(arr) - 1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\"[.!?]\\\\s*\")\n    return len(list(filter(lambda sentence: len(sentence) >= 2 and sentence[0:2] == \"I \", sentences)))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        a = x\n        b = y\n        c = z\n        if (a + b == c) or (a + c == b) or (b + c == a):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def skjkasdkd(lst: List[int]) -> int:\n    primes = list(filter(isPrime, lst))\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum(map(int, largest))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    return all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (a.abs % 10) * (b.abs % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return len(list(filter(lambda x: x[1] % 2 == 0 and x[0] in vowels, zip(s, range(len(s)))))\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return list(map(lambda i: n + 2 * i, range(0, n)))\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(\"[, ]\").filter(_.length > 0).toList\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if y != x:\n        return y - 1\n    else:\n        return -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = ((n + m).to_double / 2 + 0.5).to_int\n    return Some(r_avg.to_binary_string)\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return sorted(filter(lambda x: all_digits_odd(str(x)), x)\ndef all_digits_odd(s: str) -> bool:\n    return all(map(lambda x: x % 2 != 0, map(int, s)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [nums.take(i).sum() if i % 2 != 0 else nums.take(i).product() for i in nums]\n",
            "def even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return 2 * int(n_str[:2]) + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len(list(filter(lambda x: digits_sum(x) > 0, arr)))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if arr == []:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = 0\n    even_cnt = 0\n    for i in lst1:\n        if i % 2 != 0:\n            odd_cnt += 1\n    for i in lst2:\n        if i % 2 == 0:\n            even_cnt += 1\n    if even_cnt >= odd_cnt:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \").filter(lambda x: len(x) > 0)\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if len(freq) > 0:\n        maxFreq = max(freq.values())\n        for k, v in freq.items():\n            if v == maxFreq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = \"\".join(filter(lambda x: x not in c, s))\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len(list(filter(lambda x: int(x) % 2 == 1, num)))\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(ceil(sum(arr) / capacity) for arr in grid)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").filter(_.length > 0)\n    words.filter(w => w.count(c => consonants.contains(c.toLower)) == n)\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 1, -1):\n        if word[i] in vowels and not word[i - 1] in vowels and not word[i + 1] in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    depth = 0\n    for ch in lst:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return 'No'\n    return 'Yes' if depth == 0 else 'No'\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    return sorted(arr)[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(filter(lambda x: x % 2 != 0, map(lambda x: x[0], filter(lambda x: x[1] % 2 == 0, zip(lst, range(len(lst))))))\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda num: len(str(num)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    num = n\n    while num != 1:\n        if num % 2 != 0:\n            collatz.append(num)\n            num = 3 * num + 1\n        else:\n            num = num / 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if txt.contains(\" \"):\n        return txt.split(\" \").toList\n    elif txt.contains(\",\"):\n        return txt.split(\",\").toList\n    else:\n        return List(txt.filter(c => c.isLower && c.toInt % 2 == 0).length.toString)\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)):\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    return max(freq.values()) <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and isPrime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = 1 if len([x for x in arr if x < 0]) % 2 == 1 else -1\n    return sign * sum([abs(x) for x in arr])\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    else:\n        seq = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                seq.append(i / 2 + 1)\n            else:\n                seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        return seq\n",
            "def digits(n: int) -> int:\n    odds = list(filter(lambda x: int(x) % 2 == 1, str(n)))\n    if len(odds) == 0:\n        return 0\n    else:\n        return reduce(lambda x, y: x * y, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for (ch, i) in s.zipWithIndex:\n        ch match:\n            case '[':\n                open_idx.append(i)\n            case ']':\n                close_idx.append(i)\n    close_idx = close_idx.reverse\n    cnt = 0\n    i = 0\n    l = close_idx.length\n    for idx in open_idx:\n        if i < l and idx < close_idx(i):\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: pow(ceil(n), 2), lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if txt == \"\":\n        return False\n    last = txt[txt.rfind(\" \") + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = list(filter(lambda x: x < 0, lst))\n    pos = list(filter(lambda x: x > 0, lst))\n    maxNeg = max(neg) if neg else None\n    minPos = min(pos) if pos else None\n    return [maxNeg, minPos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str):\n        a1 = a.replace(\",\", \".\").to_double()\n    elif isinstance(a, int):\n        a1 = a.to_double()\n    elif isinstance(a, double):\n        a1 = a\n    else:\n        raise Exception(\"Type Error\")\n    if isinstance(b, str):\n        b1 = b.replace(\",\", \".\").to_double()\n    elif isinstance(b, int):\n        b1 = b.to_double()\n    elif isinstance(b, double):\n        b1 = b\n    else:\n        raise Exception(\"Type Error\")\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return Some(a1)\n    else:\n        return Some(b1)\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replaceAll(\"\\\\s{3,}\", \"-\").replaceAll(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or not suf.__contains__(lst[1]) or lst[0].__len__() == 0 or not lst[0][0].isalpha() or lst[0].count(lambda x: x.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(filter(lambda w: is_prime(len(w)), words)\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(lambda x: int(x), n_str))\n    else:\n        return n_str[:2] * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len(list(filter(lambda n: n > 10 and n % 2 == 1 and odds.contains(n.toString()(0)), nums))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if not names.contains(planet1) or not names.contains(planet2):\n        return List()\n    l = names.indexOf(planet1)\n    r = names.indexOf(planet2)\n    if l > r:\n        (l, r).match { case (_l, _r) => r = _l; l = _r}\n    if l == r:\n        return List()\n    names.slice(l + 1, r)\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    result.sort(key=lambda s: (len(s), s))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, math.sqrt(n).floor()):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(map(lambda n: int(n * n), filter(lambda n: n >= 0 and n % 2 == 1, lst)))\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return list(map(lambda x, y: abs(x - y), game, guess))\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -9223372036854775808\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    else:\n        for i in range(len(b)):\n            if a.contains(b.substring(i) + b.substring(0, i)):\n                return True\n        return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = ds.count(lambda d: int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    i = 0\n    while num > 0:\n        if num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n        else:\n            i += 1\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(w, max_w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.remove(i + 1)\n            ops.remove(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        elif ch.islower():\n            result += ch.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt.isEmpty():\n        return None\n    md5Hash = MessageDigest.getInstance(\"MD5\")\n    txtBytes = txt.getBytes()\n    md5Hash.update(txtBytes)\n    md5Encoded = md5Hash.digest().map(\"%02x\".format(_)).mkString\n    return Some(md5Encoded)\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return list(filter(lambda x: x % 2 == 0, range(lower, upper + 1)))\n"
        ]
    },
    "swift": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(number - mean) for number in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(0, len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \")\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return list(filter(lambda x: substring in x, strs))\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = reduce(lambda x, y: x * y, numbers)\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = int.min\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[i:] == s[i:][::-1]:\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join([\"0\" if x == y else \"1\" for x, y in zip(a, b)])\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if len(strs) == 0:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefix = s[:i+1]\n        prefixes.append(prefix)\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \")\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    if len(substring) > len(s):\n        return 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = list(filter(lambda x: x in num_dict, numbers.split(\" \")))\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers) if len(numbers) > 0 else 0.0\n    max_num = max(numbers) if len(numbers) > 0 else 0.0\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: isinstance(x, int), values))\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    if n < 2:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    num = n\n    while divisor <= num:\n        if num % divisor == 0:\n            factors.append(divisor)\n            num /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = (counts[num] if num in counts else 0) + 1\n    res = [num for num in numbers if counts[num] == 1]\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return ''.join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return list(filter(lambda x: x.startswith(prefix_str), strs)\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda x: x > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= math.floor(math.sqrt(n)):\n        for i in range(2, math.floor(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = list(map(lambda x: x[1], filter(lambda x: x[0] % 3 == 0, enumerate(l))))\n    return list(map(lambda x: sorted_third[x[0] // 3] if x[0] % 3 == 0 else x[1], enumerate(l)))\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    if len(l) == 0:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(list(filter(lambda x: x == \"7\", str(i))))\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = list(map(lambda x: x[1], filter(lambda x: x[0] % 2 == 0, enumerate(l))))\n    return list(map(lambda x: sorted_even[x[0] // 2] if x[0] % 2 == 0 else x[1], enumerate(l)))\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return int(pow(float(n), 2))\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return list(map(lambda x: x + 1, l))\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x /= bas\n    return \"\".join(reversed(digits))\n",
            "def triangle_area(a: int, h: int) -> float:\n    return float(a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) / 2]\n    else:\n        return (sl[len(l) / 2] + sl[len(l) / 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for _ in range(0, n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = [chr((ord(c) - 97 + 5) % 26 + 97) for c in s]\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = [chr((ord(c) - 97 + 21) % 26 + 97) for c in s]\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(filter(lambda x: x not in vowels, txt))\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = zip(l, l.dropFirst()).map { $1 - $0 }\n    return diff.allSatisfy { $0 <= 0 } || diff.allSatisfy { $0 >= 0 }\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1).intersection(set(l2))))\n",
            "def largest_prime_factor(n: int) -> int:\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(0, n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return list(map(lambda x: x[0] * x[1], xs.enumerated().dropFirst()))\n",
            "def fibfib(n: int) -> int:\n    if (n <= 1):\n        return 0\n    a = 0\n    b = 0\n    c = 1\n    n = n\n    while (n > 2):\n        (a, b, c) = (b, c, a + b + c)\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        c = s[i]\n        if c.lower() in vowels or (i == len(s) - 1 and c.lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[shift:] + x_str[:shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(map(lambda x: ord(x), filter(lambda x: x.isupper(), s)))\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = list(filter(lambda x: x % 2 == 0, arr))\n    if len(evens) == 0:\n        return []\n    minEven = min(evens)\n    return [minEven, arr.index(minEven)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = list(filter(lambda x: x[1] >= x[0], freqs.items()))\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(0, len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(map(lambda x: len(x), lst1))\n    cnt2 = sum(map(lambda x: len(x), lst2))\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= math.floor(math.sqrt(n)):\n        for i in range(2, math.floor(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    a = a\n    if a < 2:\n        return False\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a /= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = int(round(pow(a, 1.0 / 3.0)))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return len(list(filter(lambda x: x in \"2357BD\", num)))\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = str(dec, 2)\n    return \"db\" + binary + \"db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    if 2 <= math.floor(math.sqrt(length)):\n        for i in range(2, math.floor(math.sqrt(length)) + 1):\n            if length % i == 0:\n                return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * int(pow(10, float(n - 2)))\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(digit) for digit in str(n))\n    return bin(digits_sum)\n",
            "def add(lst: List[int]) -> int:\n    return sum(filter(lambda x: x[0] % 2 == 1 and x[1] % 2 == 0, enumerate(lst)))\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \").map(lambda word: \"\".join(sorted(word)))\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda x: x[0] == x[1])\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[len(arr) - 1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord(\"z\"):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(r'[.!?]\\s*')\n    return len(list(filter(lambda x: len(x) >= 2 and x[:2] == 'I ', sentences))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower() if ch.islower() else ch.upper()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def skjkasdkd(lst: List[int]) -> int:\n    if len(lst) == 0:\n        return 0\n    primes = list(filter(lambda x: isPrime(x), lst)\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum(map(lambda x: int(x), str(largest)))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    return all(map(lambda x: x.isupper(), d.keys())) or all(map(lambda x: x.islower(), d.keys()))\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    if 2 <= n:\n        for num in range(2, n):\n            if all(num % prime != 0 for prime in primes):\n                primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return len(list(filter(lambda x: x[0] % 2 == 0 and x[1] in vowels, enumerate(s))))\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return list(map(lambda i: n + 2 * i, range(0, n)))\n",
            "def words_string(s: str) -> List[str]:\n    return list(filter(lambda x: len(x) > 0, map(lambda x: str(x), s.split(separator=re.compile(r'[, ]'))))\n",
            "def choose_num(x: int, y: int) -> int:\n    if (x > y):\n        return -1\n    if (y % 2 == 0):\n        return y\n    return y != x ? y - 1 : -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = int(round((n + m) / 2))\n    return str(r_avg, base=2)\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return list(filter(lambda x: all_digits_odd(str(x)), sorted(x))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), key=lambda x: -x)\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [nums[0:i].reduce(lambda x, y: x + y, 0) if i % 2 != 0 else nums[0:i].reduce(lambda x, y: x * y, 1) for i in range(n)]\n",
            "def even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len(list(filter(lambda x: digits_sum(x) > 0, arr))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:len(arr)] == sorted_arr[0:len(arr) - i] and arr[0:i] == sorted_arr[len(arr) - i:len(arr)]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = len(list(filter(lambda x: x % 2 != 0, lst1)))\n    even_cnt = len(list(filter(lambda x: x % 2 == 0, lst2)))\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(filter(lambda x: x not in c, s))\n    return [s1, 'yes' if s1 == s1[::-1] else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([c for c in num if ord(c) % 2 == 1])\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(int(ceil(sum(row) / capacity)) for row in grid)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: bin(x).count(\"1\") == bin(y).count(\"1\") ? x < y : bin(x).count(\"1\") < bin(y).count(\"1\"))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").map(lambda x: str(x)).filter(lambda x: len(x) > 0)\n    return list(filter(lambda x: len(list(filter(lambda y: y.lower() in consonants, x))) == n, words)\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(word.count - 2, 1, -1):\n        index = word.index(word.startIndex, offsetBy: i)\n        if vowels.contains(word[index]) and not vowels.contains(word[word.index(before: index)]) and not vowels.contains(word[word.index(after: index)]):\n            return String(word[index])\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    depth = 0\n    for ch in lst[0] + lst[1]:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return \"No\"\n    return \"Yes\" if depth == 0 else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    return arr.sorted().suffix(k)\n",
            "def solution(lst: List[int]) -> int:\n    return sum(filter(lambda x: x[0] % 2 == 0 and x[1] % 2 != 0, enumerate(lst)))\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda x: len(str(x)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    n = n\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    return collatz.sorted()\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != \"-\" or date[5] != \"-\":\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len([c for c in txt if c.islower() and ord(c) % 2 == 0]))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not all(x <= y for x, y in zip(lst, lst[1:])):\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    return max(freq.values()) <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    if interval1[0] < interval2[0]:\n        l = interval2[0]\n    else:\n        l = interval1[0]\n    if interval1[1] < interval2[1]:\n        r = interval1[1]\n    else:\n        r = interval2[1]\n    length = r - l\n    if length > 0 and isPrime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = 1 if len(list(filter(lambda x: x < 0, arr))) % 2 == 1 else -1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    if 2 <= n:\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                seq.append(i / 2 + 1)\n            else:\n                seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = list(filter(lambda x: int(x) % 2 == 1, str(n)))\n    if odds:\n        return reduce(lambda x, y: x * y, odds)\n    else:\n        return 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == \"[\":\n            open_idx.append(i)\n        elif ch == \"]\":\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda x: ceil(x) * ceil(x), lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if len(txt) == 0:\n        return False\n    last = txt[txt.rfind(\" \") + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = list(filter(lambda x: x < 0, lst))\n    pos = list(filter(lambda x: x > 0, lst))\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\" \", \"_\").replace(\"   \", \"-\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\", 0)\n    if len(lst) != 2 or not suf.contains(lst[1]) or len(lst[0]) == 0 or not lst[0][0].isalpha() or len(lst[0].filter(lambda x: x.isdigit())) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(filter(lambda word: is_prime(len(word)), words))\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= math.floor(math.sqrt(n)):\n        for i in range(2, math.floor(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len(list(filter(lambda x: x > 10 and x % 2 == 1, nums))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if not planet1 in names or not planet2 in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = list(filter(lambda x: len(x) % 2 == 0, lst))\n    return sorted(result, key=lambda x: (len(x), x))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    if 2 <= math.floor(math.sqrt(n)):\n        for i in range(2, math.floor(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(map(lambda x: int(x * x), filter(lambda x: x >= 0 and x % 2 == 1, lst))\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return list(map(lambda x: abs(x[0] - x[1]), zip(game, guess))\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = float('-inf')\n    max_ext = ''\n    for ext in extensions:\n        upper = len(list(filter(str.isupper, ext)))\n        lower = len(list(filter(str.islower, ext)))\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f'{class_name}.{max_ext}'\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = len(list(filter(lambda x: int(str(x)) % 2 == 0, ds)))\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    num = num\n    for i in range(0, len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators\n    nums = operands\n    i = ops.count - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = int(pow(float(nums[i]), float(nums[i + 1])))\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n        i -= 1\n    i = 0\n    while i < ops.count:\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        else if ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < ops.count:\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        else if ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(ch.isalpha() for ch in s):\n        return s[::-1]\n    result = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        elif ch.islower():\n            result += ch.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    txt_bytes = txt.encode(\"utf-8\")\n    md5_encoded = \"\".join(f\"{byte:02x}\" for byte in md5(txt_bytes).digest())\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return  list(range(lower, upper + 1)).filter(lambda x: x % 2 == 0)\n"
        ]
    },
    "typescript": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups: List[str] = []\n    stk: List[str] = []\n    current_group: str = \"\"\n    parens: str = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(map(lambda num: abs(num - mean), numbers))\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result: List[int] = []\n    for i in range(0, len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result: List[int] = []\n    groups: List[str] = paren_string.split(\" \").filter((s) => s.length > 0)\n    for group of groups:\n        max_depth = 0\n        depth = 0\n        for ch of group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strs))\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    nSum = sum(numbers)\n    nProduct = reduce(lambda a, b: a * b, numbers, 1)\n    return [nSum, nProduct]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far: int = float('-inf')\n    result: List[int] = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i].split('').reverse().join('')\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(map(lambda c, i: '0' if c == b[i] else '1', a.split(''), range(len(a))))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s: str = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes: List[str] = []\n    for i in range(len(s)):\n        prefixes.append(s[0:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = { \"o\": 4, \"o|\": 2, \".|\": 1 }\n    notes = music_string.split(\" \").filter((s) => s.length > 0)\n    return notes.map(note => durations[note])\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(0, s.length - substring.length + 1):\n        if s.slice(i, i + substring.length) == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = list(filter(lambda x: x in num_dict, numbers.split(\" \")))\n    num_list.sort(lambda a, b: num_dict[a] - num_dict[b])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers: List[float] = [...numbers].sort((a, b) => a - b)\n    min_diff: float = Infinity\n    closest_pair: List[float] = []\n    for i in range(1, sorted_numbers.length):\n        diff: float = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num: float = min(numbers)\n    max_num: float = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: isinstance(x, int) and x.is_integer(), values))\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = [num for num in numbers if counts[num] == 1]\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = []\n    for ch in s:\n        if ch.match(/[^a-zA-Z]/):\n            flipped.push(ch)\n        elif ch.match(/[a-z]/):\n            flipped.push(ch.toUpperCase())\n        elif ch.match(/[A-Z]/):\n            flipped.push(ch.toLowerCase())\n    return flipped.join('')\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return list(filter(lambda s: s.startswith(prefix_str), strs))\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda num: num > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * math.pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third: List[int] = list(filter(lambda x: x % 3 == 0, l)).sort(lambda a, b: a - b)\n    return list(map(lambda x: sorted_third[x / 3] if x % 3 == 0 else x, l))\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    if len(l) == 0:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(str(i).split(\"7\")) - 1\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = list(filter(lambda _, i: (i & 1) == 0, l)).sort((a, b) => a - b)\n    return list(map(lambda x, i: sorted_even[i / 2] if (i & 1) == 0 else x, l))\n",
            "def encode_cyclic(s: str) -> str:\n    result: list[str] = []\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.append(s[i:])\n        else:\n            result.append(s[i+1:i+3])\n            result.append(s[i])\n    return \"\".join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return list(map(lambda i: i + 1, l))\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen: Set[int] = Set()\n    for num in l:\n        if seen.has(-num):\n            return true\n        seen.add(num)\n    return false\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x = int(x / bas)\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[int(len(l) / 2)]\n    else:\n        return (sl[int(len(l) / 2)] + sl[int(len(l) / 2) - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt.split('').reverse().join('')\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = [chr((ord(ch) - 97 + 5) % 26 + 97) for ch in s]\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = [chr((ord(ch) - 97 + 21) % 26 + 97) for ch in s]\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(filter(lambda char: not vowels.includes(char), txt.split('')))\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return _.isEqual(new Set([...s0]), new Set([...s1]))\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = list(map(lambda x, i: x - l[i], l[1:], range(len(l) - 1))\n    return all(map(lambda x: x <= 0, diff)) or all(map(lambda x: x >= 0, diff))\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1).intersection(l2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return list(map(lambda x, i: x * i, xs))[1:]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a = 0\n    b = 0\n    c = 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(map(lambda c: ord(c), filter(lambda c: c.match(/[A-Z]/), s.split('')))\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = list(filter(lambda n: n % 2 == 0, arr))\n    if len(evens) == 0:\n        return []\n    minEven = min(evens)\n    return [minEven, arr.index(minEven)]\n",
            "def search(lst: List[int]) -> int:\n    freqs: Map[int, int] = Map()\n    for n in lst:\n        freqs.set(n, (freqs.get(n) or 0) + 1)\n    goodVals: Array[int] = [...freqs.entries()].filter(p => p[1] >= p[0]).map(p => p[0])\n    return max(...goodVals, -1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    start = 0\n    right = len(sl) - 1\n    while start <= right:\n        result.append(sl[start])\n        start += 1\n        if start <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(0, len(arr) / 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(map(lambda x: len(x), lst1))\n    cnt2 = sum(map(lambda x: len(x), lst2))\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a /= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = round(pow(a, 1.0 / 3.0))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return len(list(filter(lambda x: x in \"2357BD\", num)))\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = str(dec)\n    return f\"db{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result: List[str] = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * (10 ** (n - 2))\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(digit) for digit in str(n))\n    return str(digits_sum)\n",
            "def add(lst: List[int]) -> int:\n    return sum(filter(lambda x: x % 2 == 0, lst[1::2]))\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(' ').map(word => word.split('').sort().join(''))\n    return words.join(' ')\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda x: (x[0], -x[1]))\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    sorted_arr = [...arr]\n    if sorted_arr.length <= 1:\n        return sorted_arr\n    if (sorted_arr[0] + sorted_arr[sorted_arr.length - 1]) % 2 == 0:\n        sorted_arr.sort((a, b) => b - a)\n    else:\n        sorted_arr.sort((a, b) => a - b)\n    return sorted_arr\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result.append(chr(shifted))\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences: List[str] = s.split(r\"[.!?]\\s*\")\n    return len(list(filter(lambda sentence: len(sentence) >= 2 and sentence[:2] == \"I \", sentences))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message:\n        if ch.match(/[a-z]/i):\n            ch1 = ch.toUpperCase() === ch ? ch.toLowerCase() : ch.toUpperCase()\n            if vowels.includes(ch1):\n                ch1 = String.fromCharCode(ch1.charCodeAt(0) + 2)\n            result.push(ch1)\n        else:\n            result.push(ch)\n    return result.join(\"\")\n",
            "def skjkasdkd(lst: List[int]) -> int:\n    if len(lst) == 0:\n        return 0\n    primes = list(filter(lambda n: isPrime(n), lst))\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum(map(lambda c: int(c), str(largest)))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    return all(RegExp('^[A-Z]+$').test(k) for k in d.keys()) or all(RegExp('^[a-z]+$').test(k) for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return len(list(filter(lambda c: c in vowels, s[::2]))\n",
            "def closest_integer(value: str) -> int:\n    num: int = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [*range(n)].map(i => n + 2 * i)\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(/[ ,]/).filter(w => w.length > 0)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y != x ? y - 1 : -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = math.trunc((n + m) / 2 + 0.5)\n    return str(r_avg)\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return list(filter(lambda num: all_digits_odd(str(num)), x)).sort(lambda a, b: a - b)\ndef all_digits_odd(s: str) -> bool:\n    return all(map(lambda digit: digit.code_point_at(0) % 2 != 0, s))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), key=lambda x: -x)\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums: List[int] = list(range(1, n + 1))\n    return list(map(lambda i: reduce(lambda x, y: x + y, nums[:i]) if i % 2 != 0 else reduce(lambda x, y: x * y, nums[:i]), nums)\n",
            "def even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len(list(filter(lambda n: digits_sum(n) > 0, arr)))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = len(list(filter(lambda n: n % 2 != 0, lst1)))\n    even_cnt = len(list(filter(lambda n: n % 2 == 0, lst2)))\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \").filter(w => w.length > 0)\n    for w in words:\n        freq.set(w, (freq.get(w) || 0) + 1)\n    result = {}\n    if freq.size > 0:\n        maxFreq = Math.max(...freq.values())\n        for [k, v] in freq:\n            if v === maxFreq:\n                result.set(k, v)\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(filter(lambda ch: not ch in c, s))\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"]\ndef is_palindrome(s: str) -> bool:\n    return s == ''.join(reversed(s))\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result: List[str] = []\n    for num in lst:\n        n = list(filter(lambda d: ord(d) % 2 == 1, list(num)))\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replaceAll(\"i\", n.toString()))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return grid.reduce(lambda acc, arr: acc + math.ceil(arr.reduce(lambda acc, n: acc + n, 0) / capacity), 0)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: bin(x).count('1'))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").filter(w => w.length > 0)\n    return words.filter(w => [...w].filter(c => consonants.includes(c.toLowerCase())).length == n)\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(word.length - 2, 0, -1):\n        if vowels.includes(word[i]) and not vowels.includes(word[i - 1]) and not vowels.includes(word[i + 1]):\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    depth = 0\n    for ch in lst:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return \"No\"\n    return \"Yes\" if depth == 0 else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    return sorted(arr, reverse=True)[:k]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(filter(lambda x: x % 2 != 0, lst[::2]))\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda n: len(str(n)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz: List[int] = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != \"-\" or date[5] != \"-\":\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if txt.includes(\" \"):\n        return txt.split(\" \")\n    elif txt.includes(\",\"):\n        return txt.split(\",\")\n    else:\n        return [[...txt].filter(c => /[a-z]/.test(c) && c.charCodeAt(0) % 2 === 0).length.toString()]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not lst[1:].map(lambda n, i: lst[i] <= n).every(lambda a: a):\n        return False\n    freq: Map[int, int] = Map()\n    for i in lst:\n        freq.set(i, (freq.get(i) or 0) + 1)\n    return max(freq.values()) <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and isPrime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = 1 if len(list(filter(lambda n: n < 0, arr))) % 2 == 1 else -1\n    return sign * sum(list(map(lambda n: abs(n), arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i / 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = list(filter(lambda d: int(d) % 2 == 1, str(n)))\n    if len(odds) > 0:\n        return reduce(lambda a, b: a * b, odds)\n    return 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: math.pow(math.ceil(n), 2), lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rindex(\" \") + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx, -1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = list(filter(lambda i: i < 0, lst))\n    pos = list(filter(lambda i: i > 0, lst))\n    max_neg = max(neg) if len(neg) > 0 else None\n    min_pos = min(pos) if len(pos) > 0 else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if type(a) == str:\n        a1 = float(a.replace(',', '.'))\n    elif type(a) == int:\n        a1 = float(a)\n    else:\n        raise TypeError('Type Error')\n    if type(b) == str:\n        b1 = float(b.replace(',', '.'))\n    elif type(b) == int:\n        b1 = float(b)\n    else:\n        raise TypeError('Type Error')\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(r\"\\s{3,}\", \"-\").replace(r\"\\s\", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split('.')\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].match(/[a-z]/i) or [...lst[0]].filter(ch => ch.match(/\\d/)).length > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(filter(lambda w: is_prime(len(w)), words)\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def order_by_points(nums: List[int]) -> List[int]:\n    def digits_sum(n: int) -> int:\n        n_str = str(n)\n        if n >= 0:\n            return sum(map(int, n_str))\n        else:\n            return int(n_str[:2]) * 2 + digits_sum(abs(n))\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len(list(filter(lambda n: n > 10 and n % 2 == 1 and odds.includes(n.toString()[0]), nums))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return (c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if not names.includes(planet1) or not names.includes(planet2):\n        return []\n    l = names.indexOf(planet1)\n    r = names.indexOf(planet2)\n    if l > r:\n        [l, r] = [r, l]\n    if l == r:\n        return []\n    return names.slice(l + 1, r)\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = list(filter(lambda s: len(s) % 2 == 0, lst))\n    return sorted(result, key=lambda s: (len(s), s))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, math.floor(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(map(lambda x: x * x, filter(lambda x: x >= 0 and x % 2 == 1, lst)))\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return game.map((x, i) => Math.abs(x - guess[i]))\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = float('-inf')\n    max_ext = ''\n    for ext in extensions:\n        upper = len(list(filter(lambda c: c.upper() == c, ext)))\n        lower = len(list(filter(lambda c: c.lower() == c, ext)))\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f'{class_name}.{max_ext}'\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = len([d for d in ds if ord(d) % 2 == 0])\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i in range(len(values)):\n        while num >= values[i]:\n            res.append(numerals[i])\n            num -= values[i]\n    return \"\".join(res)\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c].sort((a, b) => a - b)\n    return s[0] * s[0] + s[1] * s[1] === s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w < w and max_w or w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops: List[str] = [...operators]\n    nums: List[int] = [...operands]\n    i = ops.length - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = Math.pow(nums[i], nums[i + 1])\n            nums.splice(i + 1, 1)\n            ops.splice(i, 1)\n        i -= 1\n    i = 0\n    while i < ops.length:\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.splice(i + 1, 1)\n            ops.splice(i, 1)\n            i -= 1\n        else if ops[i] == \"//\":\n            nums[i] = Math.trunc(nums[i] / nums[i + 1])\n            nums.splice(i + 1, 1)\n            ops.splice(i, 1)\n            i -= 1\n        i += 1\n    i = 0\n    while i < ops.length:\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.splice(i + 1, 1)\n            ops.splice(i, 1)\n            i -= 1\n        else if ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.splice(i + 1, 1)\n            ops.splice(i, 1)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(ch.match(/[a-zA-Z]/) for ch in s):\n        return s.split('').reverse().join('')\n    result = []\n    for ch in s:\n        if not ch.match(/[a-zA-Z]/):\n            result.push(ch)\n        elif ch.match(/[A-Z]/):\n            result.push(ch.toLowerCase())\n        elif ch.match(/[a-z]/):\n            result.push(ch.toUpperCase())\n    return result.join('')\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = hashlib.md5()\n    txt_bytes = bytes(txt, 'utf-8')\n    md5_hash.update(txt_bytes)\n    md5_encoded = md5_hash.hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return list(range(lower, upper + 1, 2))\n"
        ]
    }
}