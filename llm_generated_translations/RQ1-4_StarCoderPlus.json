{
    "cpp": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string\n    parens = parens.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = reduce(lambda acc, x: acc + x, numbers) / len(numbers)\n    deviation = reduce(lambda acc, x: acc + abs(x - mean), numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    buf = iter(paren_string)\n    paren_groups = [next(buf) for _ in range(len(paren_string))]\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    result = []\n    for s in strs:\n        if substring in s:\n            result.append(s)\n    return result\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = reduce(lambda x, y: x + y, numbers)\n    n_product = reduce(lambda x, y: x * y, numbers)\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -1\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> Optional[str]:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[:i] + s[i + 1:]):\n            return s + s[:i] + s[i + 1:]\n    return None\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(c1!= c2)) for c1, c2 in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    a = list(range(n + 1))\n    return reduce(add, map(str, a), \"\")\n",
            "def count_distinct_characters(s: str) -> int:\n    dc = Counter(s.lower())\n    return len(dc)\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = defaultdict(int)\n    durations[\"o\"] = 4\n    durations[\"o|\"] = 2\n    durations[\".|\"] = 1\n    notes = music_string.split(\"|\")\n    result = []\n    for note in notes:\n        result.append(durations[note])\n    return result\n",
            "def how_many_times(s: str, substring: str) -> int:\n    return s.count(substring)\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = OrderedDict({\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    })\n    num_list = [x for x in numbers.split() if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = inf\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        res = []\n        for num in numbers:\n            res.append((num - min_num) / (max_num - min_num))\n        return res\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    filtered_values = []\n    for value in values:\n        try:\n            int_value = int(value)\n            filtered_values.append(int_value)\n        except ValueError:\n            continue\n    return filtered_values\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num, count in counts.items() if count == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if ch in ascii_lowercase:\n            flipped += ch.upper()\n        elif ch in ascii_uppercase:\n            flipped += ch.lower()\n        else:\n            flipped += ch\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return reduce(lambda a, b: a + b, strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    filtered = []\n    for str in strs:\n        if str.startswith(prefix_str):\n            filtered.append(str)\n    return filtered\n",
            "def get_positive(l: List[int]) -> List[int]:\n    result = []\n    for x in l:\n        if x > 0:\n            result.append(x)\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = []\n    for i in range(0, len(l), 3):\n        sorted_third.append(l[i])\n    sorted_third.sort()\n    result = []\n    for i in range(0, len(l)):\n        if i % 3 == 0:\n            result.append(sorted_third[i // 3])\n        else:\n            result.append(l[i])\n    return result\n",
            "def list_unique(l: List[int]) -> List[int]:\n    result = sorted(l)\n    return list(set(result))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            str_i = str(i)\n            cnt += str_i.count('7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = []\n    for i in range(0, len(l), 2):\n        sorted_even.append(l[i])\n    sorted_even.sort()\n    result = []\n    for i in range(0, len(l)):\n        if i % 2 == 0:\n            result.append(sorted_even[i // 2])\n        else:\n            result.append(l[i])\n    return result\n",
            "def encode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\ndef decode_cyclic(s: str) -> str:\n    return decode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = defaultdict(int)\n    for num in l:\n        if seen[num] == -num:\n            return True\n        seen[num] = -num\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return reduce(lambda a, b: a + b, digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return float(a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = reduce(lambda x, y: x + y, fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return \"\".join(chr((ord(c) - 97 + 5) % 26 + 97) for c in s)\ndef decode_shift(s: str) -> str:\n    return \"\".join(chr((ord(c) - 97 + 21) % 26 + 97) for c in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in txt:\n        if ch not in vowels:\n            result += ch\n    return result\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = []\n    for i in range(len(l) - 1):\n        diff.append(l[i + 1] - l[i])\n    return all(diff[i] <= 0 for i in range(len(diff))) or all(diff[i] >= 0 for i in range(len(diff)))\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    s1 = set(l1)\n    s2 = set(l2)\n    return list(chain.from_iterable(map(lambda x: [x] if x in s1 else [], s2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return (n * (n + 1)) // 2\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result\n",
            "def fibfib(n: int) -> int:\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower())!= -1 or (i == len(s) - 1 and s[i].lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return reduce(lambda a, c: a + (ord(c) - ord('A') + 1 if c.isupper() else 0), s, 0)\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split()\n    apples = int(words[find(words, \"apples\") - 1])\n    oranges = int(words[find(words, \"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = []\n    for n in arr:\n        if n % 2 == 0:\n            evens.append(n)\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = []\n    for n, freq in freqs.items():\n        if freq >= n:\n            good_vals.append(n)\n    return -1 if not good_vals else max(good_vals)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst.copy()\n    sl.sort()\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    idxs = list(range(len(q)))\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in idxs)\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum([len(s) for s in lst1])\n    cnt2 = sum([len(s) for s in lst2])\n    return cnt1 <= cnt2 and lst1 or lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, int(sqrt(a)) + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return abs(a) == pow(a, 1.0 / 3) * pow(a, 1.0 / 3) * pow(a, 1.0 / 3)\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = BitArray(hexlify(str(dec).encode('utf-8')))\n    binary = binary.bin\n    binary = binary.replace('0b', '')\n    return format(\"db{}db\", binary)\n",
            "def is_happy(s: str) -> bool:\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append(\"A+\")\n        elif grade > 3.7:\n            result.append(\"A\")\n        elif grade > 3.3:\n            result.append(\"A-\")\n        elif grade > 3.0:\n            result.append(\"B+\")\n        elif grade > 2.7:\n            result.append(\"B\")\n        elif grade > 2.3:\n            result.append(\"B-\")\n        elif grade > 2.0:\n            result.append(\"C+\")\n        elif grade > 1.7:\n            result.append(\"C\")\n        elif grade > 1.3:\n            result.append(\"C-\")\n        elif grade > 1.0:\n            result.append(\"D+\")\n        elif grade > 0.7:\n            result.append(\"D\")\n        elif grade > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 2 * 9 * 10 ** (n - 2) if n == 1 else 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    n_str = str(n)\n    digits_sum = reduce(add, map(int, n_str), 0)\n    binary = bin(digits_sum)[2:]\n    binary = binary.lstrip('0')\n    return binary\n",
            "def add(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split()\n    return reduce(add, map(lambda word: word if word.isalpha() else \" \" + word, sorted(words)))\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda coord: (coord[0], coord[1]), reverse=True)\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    result = arr[:]\n    if (arr[0] + arr[-1]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        result.sort()\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = ''\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(lst)\n    sl = list(set(sl))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    re = re_compile(r\"[.!?]\\s*\")\n    sentences = [m.group() for m in re_finditer(re, s)]\n    return sum(len(sentence) >= 2 and sentence[:2] == \"I \" for sentence in sentences)\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if type(x) == int and type(y) == int and type(z) == int:\n        int_x = int(x)\n        int_y = int(y)\n        int_z = int(z)\n        if (int_x + int_y == int_z) or (int_x + int_z == int_y) or (int_y + int_z == int_x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = ascii_lowercase + ascii_uppercase\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower() if ch.islower() else ch.upper()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = ''.join(sorted(map(str, max(primes, key=int))))\n    return reduce(add, map(int, largest))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(all(c.islower() for c in k) for k in d.keys()) or all(all(c.isupper() for c in k) for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if i % 2 == 0 and vowels.find(s[i])!= -1:\n            count += 1\n    return count\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(floor(num + 0.5))\n    else:\n        return int(floor(num - 0.5))\n",
            "def make_a_pile(n: int) -> List[int]:\n    pile = []\n    for i in range(n):\n        pile.append(n + 2 * i)\n    return pile\n",
            "def words_string(s: str) -> List[str]:\n    return [word for word in findall(r\"[^, ]+\", s) if word]\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y!= x? y - 1 : -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) / 2.0 + 0.5\n    result = BitArray(int(r_avg)).bin\n    result = result.replace('0', '')\n    return result\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    result = []\n    for num in x:\n        if all(map(lambda digit: digit % 2!= 0, str(num))):\n            result.append(num)\n    result.sort()\n    return result\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = []\n    for x in arr:\n        if 1 <= x and x <= 9:\n            sorted_arr.append(x)\n    sorted_arr.sort(reverse=True)\n    result = []\n    for x in sorted_arr:\n        result.append(digit_names[x-1])\n    return result\n",
            "def f(n: int) -> List[int]:\n    nums = [i for i in range(1, n + 1)]\n    result = []\n    for i in nums:\n        if i % 2!= 0:\n            result.append(reduce(lambda x, y: x + y, nums[:i]))\n        else:\n            result.append(reduce(lambda x, y: x * y, nums[:i]))\n    return result\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return reduce(lambda acc, d: acc + int(d), n_str, 0)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return sum(map(digits_sum, arr)) > 0\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[:i] == sorted_arr[i:] and arr[i:] == sorted_arr[:i]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2!= 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = Counter(test.split())\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = s\n    for ch in c:\n        s1 = s1.replace(ch, \"\")\n    return [s1, isPalindrome(s1) and \"yes\" or \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for c in num if c % 2 == 1)\n        rs = \"the number of odd elements in the string i of the input.\"\n        rs = rs.replace(\"i\", str(n)[0])\n        result.append(rs)\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return reduce(lambda a, b: a + ceil(reduce(lambda c, d: c + d, b, 0) / capacity), grid, 0)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    result = arr[:]\n    result.sort(key=lambda x: (Counter(bin(x)[2:]).get('1', 0), x))\n    return result\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = ascii_lowercase\n    words = s.split()\n    result = []\n    for w in words:\n        if Counter(c for c in w if c.lower() in consonants) == n:\n            result.append(w)\n    return result\n",
            "def get_closest_vowel(word: str) -> Optional[str]:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if vowels.find(word[i])!= -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return None\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    sorted_arr = sorted(arr)\n    ans = sorted_arr[-k:]\n    return ans\n",
            "def solution(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2!= 0:\n            result += lst[i]\n    return result\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return reduce(lambda a, b: a + (str(b).count('0') <= 2? b : 0), arr[:k], 0)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12:\n        return d >= 1 and d <= 31\n    if m == 4 or m == 6 or m == 9 or m == 11:\n        return d >= 1 and d <= 30\n    if m == 2:\n        return d >= 1 and d <= 29\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return list(map(str, (iss.readline() for iss in (istringstream(txt) for _ in count_if(txt, lambda c: c == \" \")))))\n    elif \",\" in txt:\n        return list(map(str, (iss.readline() for iss in (istringstream(txt) for _ in count_if(txt, lambda c: c == \",\")))))\n    else:\n        return [str(count_if(txt, lambda c: islower(c) and c % 2 == 0))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not lst:\n        return True\n    freq = Counter(lst)\n    return len(lst) == 0 or max(freq.values()) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = reduce(lambda a, b: a + abs(b), arr) % 2 == 1 and -1 or 1\n    return sign * reduce(lambda a, b: a + abs(b), arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = []\n    for c in str(n):\n        d = int(c)\n        if d % 2 == 1:\n            odds.append(d)\n    return 0 if not odds else reduce(lambda x, y: x * y, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i in range(len(s)):\n        if s[i] == '[':\n            open_idx.append(i)\n        elif s[i] == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return reduce(lambda acc, n: acc + pow(ceil(n), 2), lst, 0)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if txt == \"\":\n        return False\n    last = txt.split(\" \")[-1]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = []\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            idx.append(i)\n    return -1 if not idx else max(idx)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        o_str = str(o)\n        o_str = o_str.replace(',', '.')\n        return float(o_str)\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    raise RuntimeError('Type Error')\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    result = txt\n    result = regex_replace(result, regex_compile(r\"\\s{3,}\"), \"-\")\n    result = replace(result, \" \", \"_\")\n    return result\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = []\n    for iss, token in zip(map(istringstream, [file_name]), [\"\"]):\n        while getline(iss, token, '.'):\n            lst.append(token)\n    if len(lst)!= 2 or not lst[1] in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or sum(map(lambda c: c.isdigit(), lst[0])) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = [w for w in sentence.split() if is_prime(len(w))]\n    return \" \".join(accumulate(words, lambda a, b: a + (a and \" \") + b))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return int(n_str[0:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    result = nums\n    result.sort(key=lambda x: digits_sum(x))\n    return result\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(n > 10 and n % 2 == 1 and odds.find(str(n)[0])!= -1 for n in nums)\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        if len(s) % 2 == 0:\n            result.append(s)\n    result.sort(key=lambda s: (len(s), s))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return reduce(lambda acc, n: acc + (n >= 0 and n % 2 == 1? n * n : 0), lst, 0)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip_longest(game, guess, fillvalue=0)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i])!= -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if d % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators\n    nums = operands\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        elif ch.islower():\n            result += ch.upper()\n    return result[::-1]\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    md5_context = md5()\n    md5_context.update(txt.encode())\n    hash_bytes = md5_context.digest()\n    md5_encoded = \"\"\n    for i in range(len(hash_bytes)):\n        md5_encoded += format(\"{:02x}\", hash_bytes[i])\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    numbers = []\n    for n in range(lower, upper + 1):\n        if n % 2 == 0:\n            numbers.append(n)\n    return numbers\n"
        ]
    },
    "csharp": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        else:\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_groups = paren_string.split(\" \")\n    result = []\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -1\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(map(lambda x, y: '0' if x == y else '1', a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if len(strs) == 0:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(map(str, range(n + 1)))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = defaultdict(int)\n    durations[\"o\"] = 4\n    durations[\"o|\"] = 2\n    durations[\".|\"] = 1\n    notes = music_string.split(\" \").filter(lambda s: len(s) > 0)\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    return s.count(substring)\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = [x for x in numbers.split(\" \") if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0] * len(numbers)\n    else:\n        return [num - min_num / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = []\n    for num in numbers:\n        if counts[num] == 1:\n            res.append(num)\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        else:\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = l[::3]\n    return [sorted_third[i] if i % 3 == 0 else l[i] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len([x for x in str(i) if x == '7'])\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(l[::2])\n    return [sorted_even[i] if i % 2 == 0 else l[i] for i in range(len(l))]\n",
            "def encode_cyclic(s: str) -> str:\n    result = ''\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = defaultdict(int)\n    for num in l:\n        if seen[num] == -num:\n            return True\n        seen[num] = -num\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    digits.reverse()\n    return \"\".join(digits)\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib.sum()\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return \"\".join(chr((ord(ch) - 97 + 5) % 26 + 97) for ch in s)\ndef decode_shift(s: str) -> str:\n    return \"\".join(chr((ord(ch) - 97 + 21) % 26 + 97) for ch in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(c for c in txt if c not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [x - y for x, y in zip(l, l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return list(set(l1).intersection(set(l2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i!= 0:\n            i += 1\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs[1:], 1)]\n",
            "def fibfib(n: int) -> int:\n    a = 0\n    b = 0\n    c = 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower())!= -1 or (i == len(s) - 1 and s[i].lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(c for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = Counter(lst)\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return good_vals.default_if_empty(-1).max()\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    return all(q[i] == q[len(q) - i - 1] for i in range(len(q))) and sum(q) <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    return lst1 if lst1.sum() <= lst2.sum() else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return a * a * a == abs(a)\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)\n    return f\"db{binary[2:]}db\"\n",
            "def is_happy(s: str) -> bool:\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    return bin(n)[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(' ')\n    return''.join(sorted(word) for word in words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda x: (x[1], x[0]), reverse=True)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result.append(chr(shifted))\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = list(set(lst))\n    sl.sort()\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = split(r\"[.!?]\\s*\", s)\n    return sum(1 for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \")\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        intX = x\n        intY = y\n        intZ = z\n        if (intX + intY == intZ) or (intX + intZ == intY) or (intY + intZ == intX):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.islower() and ch.upper() or ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum([int(d) for d in str(largest)])\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    return len([c for c in s if c.isupper() and c.isalpha()])\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return re.split(r\"[, ]\", s).filter(lambda w: len(w) > 0)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y!= x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (m + n) // 2 + 0.5\n    return str(r_avg)\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(digit % 2!= 0 for digit in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(x, key=lambda num: all_digits_odd(str(num)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(arr, reverse=True)\n    return [digit_names[i - 1] for i in sorted_arr if 1 <= i <= 9]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [sum(nums[:i]) if i % 2!= 0 else reduce(lambda x, y: x * y, nums[:i]) for i in range(1, n + 1)]\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return 2 * int(n_str[0]) + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return sum(1 for n in arr if digits_sum(n) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i]:\n            return True\n        if arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2!= 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = Counter(test.split(\" \"))\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, is_palindrome(s1) and 'yes' or 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for d in num if d % 2 == 1)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", n.toString()))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: int(ceil(sum(arr) / capacity)), grid))\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count('1')\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=count_ones, reverse=True)\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").filter(lambda w: len(w) > 0)\n    return words.filter(lambda w: w.count(lambda c: consonants.lower().find(c.lower()) >= 0) == n)\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if vowels.find(word[i])!= -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr)[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len(list(filter(lambda c: char.islower(c) and (ord(c) % 2 == 0), txt))))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and all(lst[i]!= lst[i + 1] for i in range(len(lst) - 1))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = len(arr.filter(lambda n: n < 0)) % 2 == 1 and -1 or 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0? 1 : min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return 0 if len(odds) == 0 else reduce(lambda x, y: x * y, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i in range(len(s)):\n        if s[i] == '[':\n            open_idx.append(i)\n        elif s[i] == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i0 = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i0 < l and idx < close_idx[i0]:\n            cnt += 1\n            i0 += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(int(n ** 2) for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if txt is None or len(txt) == 0:\n        return False\n    last = txt.split(' ')[-1]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx, default=-1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    maxNeg = max(neg) if neg else None\n    minPos = min(pos) if pos else None\n    return [maxNeg, minPos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    raise Exception(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or lst[0].count(str.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(w for w in words if is_prime(len(w)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return 2 * int(n_str[0]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    return len([n for n in nums if n > 10 and n % 2 == 1 and n.tostring()[0] in \"13579\"])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda s: (len(s), s), reverse=True)\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum([int(n * n) for n in lst if n >= 0 and n % 2 == 1])\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i])!= -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = abs(num).to_string()\n    even = sum(1 for d in ds if d % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w if max_w < w else w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = list(operators)\n    nums = list(operands)\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = []\n    for ch in s:\n        if not ch.isalpha():\n            result.append(ch)\n        elif ch.isupper():\n            result.append(ch.lower())\n        else:\n            result.append(ch.upper())\n    return \"\".join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt is None or len(txt) == 0:\n        return None\n    txt_bytes = txt.encode('utf-8')\n    hash_bytes = md5(txt_bytes).digest()\n    md5_encoded = ''.join(map(lambda b: b.hex(), hash_bytes))\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [n for n in range(lower, upper + 1) if n % 2 == 0]\n"
        ]
    },
    "dart": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens.split():\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num.floor()\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_groups = paren_string.split(\" \").where((s) => s.isNotEmpty)\n    result = []\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group.split():\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -float('inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join(map(lambda x: \"0\" if x[0] == x[1] else \"1\", zip(a, b)))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(Counter(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \").where((s) => s.isNotEmpty)\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    return s.count(substring)\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [x for x in numbers.split(\" \") if num_dict.get(x)]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = numbers.copy()\n    sorted_numbers.sort()\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [num - min_num / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = [num for num in numbers if counts[num] == 1]\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s.split():\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        else:\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = [x for i, x in enumerate(l) if i % 3 == 0]\n    sorted_third.sort()\n    return [sorted_third[i // 3] if i % 3 == 0 else x for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    return reduce(max, l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(str(i).replace(\"7\", \"\"))\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = [x for i, x in enumerate(l) if i % 2 == 0]\n    sorted_even.sort()\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = ''\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib.reduce((a, b) => a + b)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join(chr((ord(ch) - 97 + 5) % 26 + 97) for ch in s)\ndef decode_shift(s: str) -> str:\n    return ''.join(chr((ord(ch) - 97 - 5) % 26 + 97) for ch in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(char for char in txt if char not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return Set(s0.split('')).issubset(Set(s1.split('')))\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = list(map(lambda x: x[1] - x[0], zip_longest(l, l[1:], fillvalue=0)))\n    return all(diff) <= 0 or all(diff) >= 0\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i!= 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return reduce(lambda a, b: a + b, range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs[1:], 1)]\n",
            "def fibfib(n: int) -> int:\n    a = 0\n    b = 0\n    c = 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(map(lambda e: ord(e) if e.isupper() else int(e), s))\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [p[0] for p in freqs.items() if p[1] >= p[0]]\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst.copy()\n    sl.sort()\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    return all(q[i] == q[len(q) - i - 1] for i in range(len(q))) and sum(q) <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return cnt1 <= cnt2 and lst1 or lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return a == pow(a, 1.0 / 3.0).round() ** 3\n",
            "def hex_key(num: str) -> int:\n    return len(list(filter(lambda x: \"2357BD\".contains(x), num)))\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{dec.to_bytes(1, 'big').hex()}db\"\n",
            "def is_happy(s: str) -> bool:\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 2 * 9 * pow(10, n - 2).toInt()\n",
            "def solve(n: int) -> str:\n    return bin(n).replace('0b', '')\n",
            "def add(lst: List[int]) -> int:\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(' ')\n    words = [word for word in words if word!= ''.join(sorted(list(word))) ]\n    return''.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return coords..sort(lambda a, b: a[0] == b[0]? b[1] - a[1] : a[0] - b[0])\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[len(arr) - 1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord(\"z\"):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(r\"[.!?]\\s*\")\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \"])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message.split():\n        if ch.isalpha():\n            ch1 = ch.upper() == ch? ch.lower() : ch.upper()\n            if vowels.contains(ch1):\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return int(''.join(str(d) for d in str(largest)))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(map(lambda k: (k == k.upper() or k == k.lower()), d.keys()))\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (a.abs() % 10) * (b.abs() % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return len([c for i, c in enumerate(s) if i % 2 == 0 and c in vowels])\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(r\"[, ]\").__iter__().__next__().__call__()\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y!= x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    rAvg = ((m + n) / 2.0 + 0.5).toInt()\n    return rAvg.toRadixString(2)\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(digit.codeUnitAt(0) % 2!= 0 for digit in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(num for num in x if all_digits_odd(str(num)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr.sort(key=lambda x: -x)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = [i + 1 for i in range(n)]\n    return [\n        sum(nums[:i]) if i % 2!= 0 else reduce(lambda x, y: x * y, nums[:i])\n        for i in range(1, n + 1)\n    ]\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if digits_sum(n) > 0])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[:i] == sorted_arr[:len(arr) - i] and arr[i:] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = len([num for num in lst1 if num % 2!= 0])\n    even_cnt = len([num for num in lst2 if num % 2 == 0])\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \").where((w) => w.length > 0).toList()\n    for w in words:\n        freq[w] = (freq[w]?? 0) + 1\n    result = {}\n    if freq.length > 0:\n        maxFreq = max(freq.values())\n        for k in freq.keys:\n            if freq[k] == maxFreq:\n                result[k] = freq[k]\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, is_palindrome(s1) and 'yes' or 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([d for d in num if d.isnumeric() and int(d) % 2 == 1])\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", n.toString()))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: (arr.reduce(lambda a, b: a + b) / capacity).ceil(), grid))\n",
            "def count_ones(num: int) -> int:\n    return len(str(bin(num))[2:])\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").where((w) => w.length > 0).toList()\n    return words.where((w) => w.split('').where((c) => consonants.lower().contains(c.lower())).length == n).toList()\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if vowels.find(word[i])!= -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    result = sorted(arr)\n    return result[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len([c for c in txt if c.isalpha() and c.islower() and c.isupper() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.isdigit() and c.isdecimal() and c.isalnum() and c.isascii() and c.isprintable() and c.isupper() and c.islower() and c.isspace() and c.",
            "def is_sorted(lst: List[int]) -> bool:\n    if not all(a <= b for a, b in zip(lst, lst[1:])):\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    return max(freq.values()) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = len(arr.filter(lambda n: n < 0)) % 2 == 1 and -1 or 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0? 1 : min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append((i / 2 + 1).toInt())\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + ((i + 3) / 2).toInt())\n    return seq\n",
            "def digits(n: int) -> int:\n    return int(''.join(str(d) for d in str(n) if int(d) % 2 == 1))\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s.split(\"\")):\n        if ch == \"[\":\n            open_idx.append(i)\n        elif ch == \"]\":\n            close_idx.append(i)\n    close_idx = close_idx[::-1]\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: pow(n.ceil(), 2).toInt(), lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if txt == '':\n        return False\n    last = txt.split(' ')[-1]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx, default=-1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(',', '.'))\n    elif isinstance(o, int):\n        return o\n    elif isinstance(o, float):\n        return o\n    raise Exception(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(r\"\\s{3,}\", \"-\").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or not suf.contains(lst[1]) or len(lst[0]) == 0 or not lst[0][0].islower() or len(lst[0].split(\"\")).where((x) => x.isdigit()).length > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(w for w in words if is_prime(len(w)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return 2 * int(n_str[0:2]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    result = nums.copy()\n    merge_sort(result, compare=lambda a, b: digits_sum(a) - digits_sum(b))\n    return result\n",
            "def special_filter(nums: List[int]) -> int:\n    return len([n for n in nums if n > 10 and n % 2 == 1 and str(n)[0] in \"13579\"])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [it for it in lst if len(it) % 2 == 0]\n    result.sort(key=lambda it: (len(it), it))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x[0] - x[1]) for x in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -float(\"inf\")\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i])!= -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = len([d for d in ds if int(d) % 2 == 0])\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w.lower() < w.lower() and max_w or w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = list(operators)\n    nums = list(operands)\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.remove(nums[i + 1])\n            ops.remove(ops[i])\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(nums[i + 1])\n            ops.remove(ops[i])\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.remove(nums[i + 1])\n            ops.remove(ops[i])\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(nums[i + 1])\n            ops.remove(ops[i])\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(nums[i + 1])\n            ops.remove(ops[i])\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = ''\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch.upper()\n    return result[::-1]\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    txt_bytes = txt.encode(\"utf-8\")\n    md5_encoded = md5(txt_bytes).hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "go": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = 0.0\n    for num in numbers:\n        mean += num\n    mean /= float(len(numbers))\n    deviation = 0.0\n    for num in numbers:\n        deviation += abs(num - mean)\n    return deviation / float(len(numbers))\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = []\n    for str in paren_string.split(\" \"):\n        if str!= \"\":\n            paren_groups.append(str)\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    result = []\n    for s in strs:\n        if substring in s:\n            result.append(s)\n    return result\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = 0\n    n_product = 1\n    for n in numbers:\n        n_sum += n\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = math.inf\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    runes = []\n    for r in s:\n        runes.append(r)\n    for i in range(len(runes) // 2):\n        if runes[i]!= runes[len(runes)-1-i]:\n            return False\n    return True\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            runes = []\n            for r in s[:i]:\n                runes.append(r)\n            for i, j in range(len(runes) // 2):\n                runes[i], runes[j] = runes[j], runes[i]\n            return s + ''.join(runes)\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if len(strs) == 0:\n        return None\n    longestS = strs[0]\n    for s in strs:\n        if len(s) > len(longestS):\n            longestS = s\n    return longestS\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i+1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    dc = {}\n    for ch in s.lower():\n        dc[ch] = True\n    return len(dc)\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    }\n    notes = []\n    for str in music_string.split(\" \"):\n        if str!= \"\":\n            notes.append(str)\n    result = []\n    for note in notes:\n        result.append(durations[note])\n    return result\n",
            "def how_many_times(s: str, substring: str) -> int:\n    return s.count(substring)\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    strs = numbers.split(\" \")\n    num_list = []\n    for str in strs:\n        num_list.append(str)\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = math.inf\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = math.inf\n    max_num = math.inf\n    for num in numbers:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n    res = []\n    if min_num == max_num:\n        return res\n    else:\n        for num in numbers:\n            res.append((num - min_num) / (max_num - min_num))\n        return res\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    res = []\n    for num in numbers:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    for num in numbers:\n        if counts[num] == 1:\n            res.append(num)\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not unicode.isalpha(ch):\n            flipped += ch\n        elif unicode.islower(ch):\n            flipped += unicode.upper(ch)\n        else:\n            flipped += unicode.lower(ch)\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    filtered = []\n    for str in strs:\n        if str.startswith(prefix_str):\n            filtered.append(str)\n    return filtered\n",
            "def get_positive(l: List[int]) -> List[int]:\n    result = []\n    for num in l:\n        if num > 0:\n            result.append(num)\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += float(xs[i]) * math.pow(x, float(i))\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    for poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    for abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = []\n    for i, x in enumerate(l):\n        if i % 3 == 0:\n            sorted_third.append(x)\n    result = []\n    sorted_third.sort()\n    for i, x in enumerate(l):\n        if i % 3 == 0:\n            result.append(sorted_third[i // 3])\n        else:\n            result.append(x)\n    return result\n",
            "def list_unique(l: List[int]) -> List[int]:\n    keys = set()\n    result = []\n    for x in l:\n        if x not in keys:\n            keys.add(x)\n            result.append(x)\n    result.sort()\n    return result\n",
            "def max_element(l: List[int]) -> int:\n    if len(l) == 0:\n        return 0\n    max = l[0]\n    for e in l:\n        if e > max:\n            max = e\n    return max\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = []\n    for i, x in enumerate(l):\n        if i % 2 == 0:\n            sorted_even.append(x)\n    result = [0] * len(l)\n    sorted_even.sort()\n    for i, x in enumerate(l):\n        if i % 2 == 0:\n            result[i] = sorted_even[i // 2]\n        else:\n            result[i] = x\n    return result\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i+1:i+3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [2, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return int(math.pow(n, 2))\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = {}\n    for num in l:\n        if num in seen:\n            return True\n        seen[num] = True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits)\n",
            "def triangle_area(a: int, h: int) -> float:\n    return float(a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3]\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    runes = list(txt)\n    for i in range(len(runes)//2):\n        if runes[i]!= runes[len(runes)-1-i]:\n            return False\n    return True\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append((ord(ch) - 97 + 5) % 26 + 97)\n    return \"\".join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append((ord(ch) - 97 + 21) % 26 + 97)\n    return \"\".join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(char for char in txt if char not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    for x in l:\n        if x >= t:\n            return False\n    return True\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    set0 = {}\n    for char in s0:\n        set0[char] = True\n    set1 = {}\n    for char in s1:\n        set1[char] = True\n    return set0 == set1\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i + 1] - l[i] for i in range(len(l) - 1)]\n    return all(x > 0 for x in diff) or all(x < 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    s1 = set(l1)\n    result = []\n    for num in l2:\n        if num in s1:\n            result.append(num)\n            s1.remove(num)\n    result.sort()\n    return result\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i!= 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result\n",
            "def fibfib(n: int) -> int:\n    a, b, c = 0, 0, 1\n    for _ in range(n - 2):\n        a, b, c = b, c, a + b + c\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        runes = list(x_str)\n        for i, j in zip(range(0, len(runes)), range(len(runes)-1, -1, -1)):\n            runes[i], runes[j] = runes[j], runes[i]\n        return \"\".join(runes)\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    a = 0\n    for c in s:\n        if c.isupper():\n            a += int(c)\n    return a\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = 0\n    oranges = 0\n    for i, word in enumerate(words):\n        if word == \"apples\":\n            apples, _ = int(words[i - 1])\n        if word == \"oranges\":\n            oranges, _ = int(words[i - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    min_even = math.inf\n    min_idx = -1\n    for i, n in enumerate(arr):\n        if n % 2 == 0 and n < min_even:\n            min_even = n\n            min_idx = i\n    if min_idx == -1:\n        return []\n    return [min_even, min_idx]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    max_val = math.inf\n    for k, v in freqs.items():\n        if v >= k and k > max_val:\n            max_val = k\n    if max_val == math.inf:\n        return -1\n    return max_val\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst[:]\n    sl.sort()\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    is_palin = True\n    for i in range(len(q)):\n        if q[i]!= q[len(q) - i - 1]:\n            is_palin = False\n            break\n    total = 0\n    for i in range(len(q)):\n        total += q[i]\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = 0\n    for b in lst1:\n        cnt1 += len(b)\n    cnt2 = 0\n    for b in lst2:\n        cnt2 += len(b)\n    if cnt1 <= cnt2:\n        return lst1\n    else:\n        return lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, int(sqrt(a)) + 1):\n        if a % i == 0:\n            cnt += 1\n            a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return a == int(sqrt(a) ** 3)\n",
            "def hex_key(num: str) -> int:\n    result = 0\n    for x in num:\n        if x in \"2357BD\":\n            result += 1\n    return result\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{bin(dec)[2:]}db\"\n",
            "def is_happy(s: str) -> bool:\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result = append(result, \"B+\")\n        elif g > 2.7:\n            result = append(result, \"B\")\n        elif g > 2.3:\n            result = append(result, \"B-\")\n        elif g > 2.0:\n            result = append(result, \"C+\")\n        elif g > 1.7:\n            result = append(result, \"C\")\n        elif g > 1.3:\n            result = append(result, \"C-\")\n        elif g > 1.0:\n            result = append(result, \"D+\")\n        elif g > 0.7:\n            result = append(result, \"D\")\n        elif g > 0.0:\n            result = append(result, \"D-\")\n        else:\n            result = append(result, \"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 2 * 9 * pow(10, n - 2)\n",
            "def solve(n: int) -> str:\n    return bin(n)[2:]\n",
            "def add(lst: List[int]) -> int:\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 2 == 1 and x % 2 == 0:\n            result += x\n    return result\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    for i, word in enumerate(words):\n        chars = list(word)\n        chars.sort(key=lambda x: x)\n        words[i] = \"\".join(chars)\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda coord: (coord[0], coord[1]), reverse=True)\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    result = arr.copy()\n    if (arr[0] + arr[-1]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        result.sort()\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    tmp = lst[:]\n    tmp.sort()\n    sl = []\n    for i in range(len(tmp)):\n        if i == 0 or tmp[i]!= tmp[i - 1]:\n            sl.append(tmp[i])\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r'[.!?]\\s*', s)\n    cnt = 0\n    for sentence in sentences:\n        if len(sentence) >= 2 and sentence[:2] == \"I \":\n            cnt += 1\n    return cnt\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return (x + y == z) or (x + z == y) or (y + z == x)\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if unicodedata.category(ch)[0] == \"L\":\n            ch1 = unicodedata.normalize(\"NFD\", ch)[0]\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.floor(math.sqrt(n)))):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    max_prime = 0\n    for n in lst:\n        if is_prime(n) and n > max_prime:\n            max_prime = n\n    if max_prime == 0:\n        return 0\n    largest = str(max_prime)\n    result = 0\n    for d in largest:\n        result += int(d) - ord('0')\n    return result\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    lower, upper = True, True\n    for k, _ in d.items():\n        for r in k:\n            if not unicode.islower(r):\n                lower = False\n            if not unicode.isupper(r):\n                upper = False\n    return lower or upper\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        flag = True\n        for p in primes:\n            if num % p == 0:\n                flag = False\n                break\n        if flag:\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    count = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c in vowels:\n            count += 1\n    return count\n",
            "def closest_integer(value: str) -> int:\n    num, _ = float(value), 0\n    if num >= 0:\n        return int(floor(num + 0.5))\n    else:\n        return int(floor(num - 0.5))\n",
            "def make_a_pile(n: int) -> List[int]:\n    result = []\n    for i in range(n):\n        result.append(n + 2 * i)\n    return result\n",
            "def words_string(s: str) -> List[str]:\n    words = re.split(r'[,\\s]', s)\n    result = []\n    for w in words:\n        if len(w) > 0:\n            result.append(w)\n    return result\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if y!= x:\n        return y - 1\n    return -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    rAvg = int((n + m) / 2.0 + 0.5)\n    result = str(rAvg)\n    return result if len(result) == 1 else None\n",
            "def all_odd_digits(s: str) -> bool:\n    for digit in s:\n        if digit % 2 == 0:\n            return False\n    return True\ndef unique_digits(x: List[int]) -> List[int]:\n    result = []\n    for num in x:\n        if all_odd_digits(str(num)):\n            result.append(num)\n    result.sort()\n    return result\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = []\n    for x in arr:\n        if 1 <= x and x <= 9:\n            sorted_arr.append(x)\n    sorted_arr.sort(reverse=True)\n    result = []\n    for x in sorted_arr:\n        result.append(digit_names[x - 1])\n    return result\n",
            "def f(n: int) -> List[int]:\n    nums = [i + 1 for i in range(n)]\n    result = []\n    for i in nums:\n        if i % 2!= 0:\n            sum = 0\n            for j in nums[:i]:\n                sum += j\n            result.append(sum)\n        else:\n            product = 1\n            for j in nums[:i]:\n                product *= j\n            result.append(product)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    runes = []\n    for r in s:\n        runes.append(r)\n    for i in range(len(runes) // 2):\n        if runes[i]!= runes[len(runes)-1-i]:\n            return False\n    return True\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n+1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        acc = 0\n        for d in n_str:\n            acc += int(d)\n        return acc\n    else:\n        neg, _ = int(n_str[0:2]), 0\n        return neg * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    cnt = 0\n    for n in arr:\n        if digits_sum(n) > 0:\n            cnt += 1\n    return cnt\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = 0\n    even_cnt = 0\n    for num in lst1:\n        if num % 2!= 0:\n            odd_cnt += 1\n    for num in lst2:\n        if num % 2 == 0:\n            even_cnt += 1\n    if even_cnt >= odd_cnt:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = Counter(test.split(\" \"))\n    result = {}\n    if len(freq) > 0:\n        maxFreq = 0\n        for k, v in freq.items():\n            if v > maxFreq:\n                maxFreq = v\n        for k, v in freq.items():\n            if v == maxFreq:\n                result[k] = v\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    runes = []\n    for ch in s:\n        runes.append(ch)\n    for i in range(len(runes)/2):\n        if runes[i]!= runes[len(runes)-1-i]:\n            return False\n    return True\ndef reverse_delete(s: str, c: str) -> List[str]:\n    s1 = \"\"\n    for ch in s:\n        if ch not in c:\n            s1 += ch\n    check = \"no\"\n    if is_palindrome(s1):\n        check = \"yes\"\n    return [s1, check]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = 0\n        for d in num:\n            if int(d) % 2 == 1:\n                n += 1\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        if cur_sum + n > 0:\n            cur_sum = 0\n        else:\n            cur_sum += n\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n    if min_sum == 0:\n        min_sum = max(nums)\n        for n in nums:\n            if n < min_sum:\n                min_sum = n\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    result = 0\n    for row in grid:\n        sum = 0\n        for n in row:\n            sum += n\n        result += int(math.ceil(float(sum) / float(capacity)))\n    return result\n",
            "def count_ones(num: int) -> int:\n    return sum(int(c) for c in bin(num)[2:])\ndef sort_array(arr: List[int]) -> List[int]:\n    result = []\n    for e in arr:\n        result.append(e)\n    result.sort(key=lambda x: (count_ones(x), x))\n    return result\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    strs = s.split(\" \")\n    words = []\n    for w in strs:\n        if len(w) > 0:\n            words.append(w)\n    result = []\n    for w in words:\n        count = 0\n        for c in w:\n            if c.islower() and c in consonants:\n                count += 1\n        if count == n:\n            result.append(w)\n    return result\n",
            "def get_closest_vowel(word: str) -> Optional[str]:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return None\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    if check(s1) or check(s2):\n        return 'Yes'\n    return 'No'\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    result = arr[:]\n    result.sort()\n    return result[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 2 == 0 and x % 2!= 0:\n            result += x\n    return result\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    result = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            result += arr[i]\n    return result\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n    m, _ = int(date[:2]), int(date[3:5])\n    for i in [1, 3, 5, 7, 8, 10, 12]:\n        if i == m and 1 <= d <= 31:\n            return True\n    for i in [4, 6, 9, 11]:\n        if i == m and 1 <= d <= 30:\n            return True\n    if m == 2 and 1 <= d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        cnt = 0\n        for c in txt:\n            if unicode.islower(c) and int(c) % 2 == 0:\n                cnt += 1\n        return [str(cnt)]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    maxFreq = 0\n    for _, v in freq.items():\n        if v > maxFreq:\n            maxFreq = v\n    return len(lst) == 0 or maxFreq <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.floor(math.sqrt(n)))):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    result = 0\n    for n in arr:\n        if n == 0:\n            return result\n        if n < 0:\n            result *= -1\n    sign = 1\n    for n in arr:\n        if n < 0:\n            sign *= -1\n        result += abs(n)\n    result = sign * result\n    return result\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = temp[0]\n                for v in temp:\n                    if v < min_val:\n                        min_val = v\n    result = []\n    for i in range(k):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = []\n    for d in str(n):\n        if int(d) % 2 == 1:\n            odds.append(int(d))\n    if len(odds) == 0:\n        return 0\n    result = 1\n    for d in odds:\n        result *= d\n    return result\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    result = 0\n    for n in lst:\n        result += int(math.ceil(n)) ** 2\n    return result\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if len(txt) == 0:\n        return False\n    last = txt[txt.rfind(\" \")+1:]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    idx = []\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            idx.append(i)\n    if len(idx) == 0:\n        return -1\n    maxIdx = idx[0]\n    for i in idx:\n        if i > maxIdx:\n            maxIdx = i\n    return maxIdx\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    maxNeg = None\n    minPos = None\n    for n in lst:\n        if n < 0:\n            if maxNeg is None:\n                maxNeg = n\n            else:\n                maxNeg = max(maxNeg, n)\n        if n > 0:\n            if minPos is None:\n                minPos = n\n            else:\n                minPos = min(minPos, n)\n    return [maxNeg, minPos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        o_float, _ = float(o.replace(\",\", \".\"))\n        return o_float\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    else:\n        raise TypeError(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a_1 = any_to_real(a)\n    b_1 = any_to_real(b)\n    if a_1 == b_1:\n        return None\n    elif a_1 > b_1:\n        return a_1\n    else:\n        return b_1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or len(lst[0]) == 0 or not lst[0][0].isalpha():\n        return \"No\"\n    found = False\n    for s in suf:\n        if s == lst[1]:\n            found = True\n            break\n    if not found:\n        return \"No\"\n    digit_cnt = 0\n    for ch in lst[0]:\n        if ch.isdigit():\n            digit_cnt += 1\n    if digit_cnt > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += int(math.pow(lst[i], 2))\n        elif i % 4 == 0:\n            result += int(math.pow(lst[i], 3))\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.floor(math.sqrt(n)))):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    strs = sentence.split(\" \")\n    words = []\n    for word in strs:\n        if is_prime(len(word)):\n            words.append(word)\n    return \" \".join(words)\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num0, _ = int(xs[0]), 1\n    den0, _ = int(xs[1]), 1\n    num1, _ = int(ns[0]), 1\n    den1, _ = int(ns[1]), 1\n    return (num0 * num1) % (den0 * den1) == 0\n",
            "import",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    cnt = 0\n    for n in nums:\n        if n > 10 and n % 2 == 1 and string(n)[0] in odds:\n            cnt += 1\n    return cnt\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    l, r = -1, -1\n    for i, name in enumerate(names):\n        if name == planet1:\n            l = i\n        if name == planet2:\n            r = i\n    if l == -1 or r == -1:\n        return []\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1 : r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        if len(s) % 2 == 0:\n            result.append(s)\n    result.sort(key=lambda s: (len(s), s))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    acc = 0\n    for n in lst:\n        if n >= 0 and int(n) % 2 == 1:\n            acc += int(n * n)\n    return acc\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    result = []\n    for x, i in enumerate(game):\n        result.append(int(math.fabs(float(i - guess[x]))))\n    return result\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = math.inf\n    max_ext = \"\"\n    for ext in extensions:\n        upper = 0\n        lower = 0\n        for c in ext:\n            if unicode.isupper(c):\n                upper += 1\n            elif unicode.islower(c):\n                lower += 1\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = 0\n    for d in ds:\n        if int(d) % 2 == 0:\n            even += 1\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        for num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    return a * a + b * b == c * c\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = 0\n        freq = {}\n        for c in w:\n            if c not in freq:\n                freq[c] = True\n                cnt += 1\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = []\n    nums = []\n    for i in range(len(operators)):\n        ops.append(operators[i])\n        nums.append(operands[i])\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = int(math.pow(float(nums[i]), float(nums[i + 1])))\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    flag = False\n    for ch in s:\n        if unicodedata.category(ch)[0] == \"L\":\n            flag = True\n            break\n    if not flag:\n        runes = []\n        for ch in s:\n            runes.append(ch)\n        for i in range(len(runes) // 2):\n            runes[i], runes[len(runes)-1-i] = runes[len(runes)-1-i], runes[i]\n        return \"\".join(runes)\n    result = \"\"\n    for ch in s:\n        if unicodedata.category(ch)[0] == \"L\":\n            result += string.ascii_lowercase[unicodedata.category(ch)[1]]\n        elif unicodedata.category(ch)[0] == \"M\":\n            result += string.ascii_uppercase[unicodedata.category(ch)[1]]\n        else:\n            result += ch\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    md5Hash = hashlib.md5()\n    txtBytes = txt.encode()\n    md5Hash.update(txtBytes)\n    md5Encoded = md5Hash.hexdigest()\n    return md5Encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    numbers = []\n    for i in range(lower, upper + 1):\n        if i % 2 == 0:\n            numbers.append(i)\n    return numbers\n"
        ]
    },
    "java": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum([abs(x - mean) for x in numbers])\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_groups = paren_string.split(\" \")\n    result = []\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -1\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(a[i]!= b[i])) for i in range(len(a)))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(map(str, count(0, 1)))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = defaultdict(int, {\"o\": 4, \"o|\": 2, \".|\": 1})\n    notes = [n for n in music_string.split(\" \") if len(n) > 0]\n    return [durations[n] for n in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    return s.count(substring)\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = defaultdict(int)\n    for num in numbers.split():\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    num_list = []\n    for num in num_dict:\n        num_list.extend([num] * num_dict[num])\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [num - min_num / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = defaultdict(int)\n    for num in numbers:\n        counts[num] += 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        else:\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = [l[i] for i in range(0, len(l)) if i % 3 == 0]\n    return [sorted_third[i] if i % 3 == 0 else l[i] for i in range(0, len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += sum(1 for c in str(i) if c == '7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = [e for i, e in enumerate(l) if i % 2 == 0]\n    return [e if i % 2 == 0 else sorted_even[i // 2] for i, e in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = ''\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = defaultdict(int)\n    for num in l:\n        if seen[num] == 1:\n            return True\n        seen[num] = -seen[num]\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    digits.reverse()\n    return \"\".join(digits)\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return \"\".join(chr((ord(c) - 97 + 5) % 26 + 97) for c in s)\ndef decode_shift(s: str) -> str:\n    return \"\".join(chr((ord(c) - 97 + 21) % 26 + 97) for c in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(c for c in txt if c not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i + 1] - l[i] for i in range(len(l) - 1)]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return list(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i!= 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]\n",
            "def fibfib(n: int) -> int:\n    a = 0\n    b = 0\n    c = 1\n    while n > 2:\n        tmp = a + b + c\n        a = b\n        b = c\n        c = tmp\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower())!= -1 or (i == len(s) - 1 and s[i].lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(c for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = defaultdict(int)\n    for n in lst:\n        freqs[n] += 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals, key=lambda x: freqs[x]) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    return all(q[i] == q[-i - 1] for i in range(len(q))) and sum(q) <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    return lst1 if len(lst1) <= len(lst2) else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return a * a * a == abs(a)\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if \"2357BD\".find(c)!= -1)\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)\n    return f\"db{binary[2:]}db\"\n",
            "def is_happy(s: str) -> bool:\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append(\"A+\")\n        elif grade > 3.7:\n            result.append(\"A\")\n        elif grade > 3.3:\n            result.append(\"A-\")\n        elif grade > 3.0:\n            result.append(\"B+\")\n        elif grade > 2.7:\n            result.append(\"B\")\n        elif grade > 2.3:\n            result.append(\"B-\")\n        elif grade > 2.0:\n            result.append(\"C+\")\n        elif grade > 1.7:\n            result.append(\"C\")\n        elif grade > 1.3:\n            result.append(\"C-\")\n        elif grade > 1.0:\n            result.append(\"D+\")\n        elif grade > 0.7:\n            result.append(\"D\")\n        elif grade > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    return bin(n).replace('0b', '')\n",
            "def add(lst: List[int]) -> int:\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = [word.sort() for word in s.split()]\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda coord: (coord[0] == coord[1]) - (coord[0] < coord[1]))\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for i in range(len(s)):\n        shifted = ord(s[i]) + 4\n        if shifted > 122:\n            shifted -= 26\n        result.append(chr(shifted))\n    return \"\".join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\"[.!?]\\\\s*\")\n    return sum(1 for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \")\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        int_x = int(x)\n        int_y = int(y)\n        int_z = int(z)\n        if (int_x + int_y == int_z) or (int_x + int_z == int_y) or (int_y + int_z == int_x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.islower() and ch.upper() or ch.lower()\n            if vowels.find(ch1)!= -1:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = str(max(primes))\n    return sum(map(int, largest))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        num0 = num\n        if all(num0 % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(i % 2 == 0 and vowels.contains(s[i]) for i in range(len(s)))\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return floor(num + 0.5)\n    else:\n        return floor(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return [w for w in s.split(\", \") if len(w) > 0]\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y!= x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (m + n) // 2 + 0.5\n    return str(bin(int(r_avg)))\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(digit % 2!= 0 for digit in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(x, key=lambda num: all_digits_odd(str(num)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(list(filter(lambda x: 1 <= x <= 9, arr)), reverse=True)\n    return [digit_names[i - 1] for i in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [reduce(lambda x, y: x + y, nums[:i]) if i % 2!= 0 else reduce(lambda x, y: x * y, nums[:i]) for i in nums]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return 2 * int(n_str[0]) + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return sum(filter(lambda n: digits_sum(n) > 0, arr))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(n % 2!= 0 for n in lst1)\n    even_cnt = sum(n % 2 == 0 for n in lst2)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = defaultdict(int)\n    words = [w for w in test.split(\" \") if len(w) > 0]\n    for w in words:\n        freq[w] += 1\n    result = {}\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        for entry in freq.items():\n            if entry[1] == max_freq:\n                result[entry[0]] = entry[1]\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef reverse_delete(s: str, c: str) -> List[str]:\n    s1 = \"\".join(ch for ch in s if c.find(ch) == -1)\n    return [s1, is_palindrome(s1) and \"yes\" or \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for d in num if d % 2 == 1)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: int(round(sum(arr) / capacity)), grid))\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count(\"1\")\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if len(w) > 0 and sum(1 for c in w if consonants.index(c.lower())!= -1) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if vowels.find(word[i])!= -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr)[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    return (m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31) or (m in [4, 6, 9, 11] and d >= 1 and d <= 30) or (m == 2 and d >= 1 and d <= 29)\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(sum(1 for c in txt if c.islower() and c % 2 == 0))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return False\n    freq = Counter(lst)\n    return max(freq.values()) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(lambda n: n < 0) % 2 == 1 else 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [d for d in str(n) if d.isdigit() and int(d) % 2 == 1]\n    return int(''.join(odds)) if odds else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i in range(len(s)):\n        if s[i] == '[':\n            open_idx.append(i)\n        elif s[i] == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(int(n ** 2) for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if txt == \"\":\n        return False\n    last = txt.split(\" \")[-1]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = reduce(lambda x, y: x if arr[y] < arr[x] else y, range(1, len(arr)), 0)\n    return idx\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg, key=lambda x: x) if neg else None\n    min_pos = min(pos, key=lambda x: x) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    elif isinstance(o, int):\n        return float(int(o))\n    elif isinstance(o, float):\n        return float(o)\n    raise RuntimeError(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"  \", \" \").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or lst[0].count(str.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(w for w in words if is_prime(len(w)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return 2 * int(n_str[0]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    return sum(n > 10 and n % 2 == 1 and n.tostring().substring(0, 1) in \"13579\" for n in nums)\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda s: (len(s), s))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(int(n * n) for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i])!= -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if d % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w.split(\"\")))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w.lower() < w.lower() and max_w or w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = list(operators)\n    nums = list(operands)\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = int(nums[i] ** nums[i + 1])\n            nums.remove(i + 1)\n            ops.remove(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    try:\n        md5_hash = md5(txt.encode())\n        return md5_hash.hexdigest()\n    except:\n        return None\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [n for n in range(lower, upper + 1) if n % 2 == 0]\n"
        ]
    },
    "javascript": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum([abs(num - mean) for num in numbers])\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \").filter(lambda s: len(s) > 0)\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -1\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(a[i]!= b[i])) for i in range(len(a)))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \").filter(lambda s: len(s) > 0)\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    return s.count(substring)\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [x for x in numbers.split(\" \") if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [num - min_num / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int) and x.is_integer()]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = defaultdict(int)\n    for num in numbers:\n        counts[num] += 1\n    res = []\n    for num in numbers:\n        if counts[num] == 1:\n            res.append(num)\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = []\n    for ch in s:\n        if not ch.isalpha():\n            flipped.append(ch)\n        elif ch.islower():\n            flipped.append(ch.upper())\n        else:\n            flipped.append(ch.lower())\n    return ''.join(flipped)\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = [x for x, i in enumerate(l) if i % 3 == 0]\n    sorted_third.sort()\n    return [l[i] if i % 3 == 0 else sorted_third[i // 3] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(str(i).split(\"7\")) - 1\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = [x for i, x in enumerate(l) if i % 2 == 0]\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.append(s[i:])\n        else:\n            result.append(s[i+1:i+3])\n            result.append(s[i])\n    return \"\".join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(-num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x = int(x / bas)\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib.reduce((a, b) => a + b)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[int(len(l) / 2)]\n    else:\n        return (sl[int(len(l) / 2)] + sl[int(len(l) / 2) - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join(chr(ord(ch) + 5) for ch in s)\ndef decode_shift(s: str) -> str:\n    return ''.join(chr(ord(ch) - 21) for ch in s)\n",
            "def remove_vowels(txt: str) -> str:\n    return ''.join([char for char in txt if char not in 'aeiouAEIOU'])\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [x - l[i] for i, x in enumerate(l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(1, n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs[1:])]\n",
            "def fibfib(n: int) -> int:\n    a = 0\n    b = 0\n    c = 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(reversed(x_str))\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(c.isdigit() for c in s)\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = defaultdict(int)\n    for n in lst:\n        freqs[n] += 1\n    good_vals = [n for n, freq in freqs.items() if freq >= n]\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return s * (s - a) * (s - b) * (s - c) ** 0.5\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    return all(q[i] == q[len(q) - i - 1] for i in range(len(q))) and sum(q) <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(0, int(len(arr) / 2)):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum([len(s) for s in lst1])\n    cnt2 = sum([len(s) for s in lst2])\n    return cnt1 <= cnt2 and lst1 or lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return a ** (1 / 3) == a\n",
            "def hex_key(num: str) -> int:\n    return len([x for x in num if x in \"2357BD\"])\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f'db{dec:b}db'\n",
            "def is_happy(s: str) -> bool:\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    return str(bin(n)[2:])\n",
            "def add(lst: List[int]) -> int:\n    return sum(lst[1::2])\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(' ')\n    words = [word.split('') for word in words]\n    words = [word.sort() for word in words]\n    words = [word.join('') for word in words]\n    return''.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda coord: coord[0] == coord[1] and coord[1] or coord[0])\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[len(arr) - 1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result.append(chr(shifted))\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = list(set(lst))\n    sl.sort()\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\".!?\")\n    return len(list(filter(lambda sentence: len(sentence) >= 2 and sentence[:2] == \"I \", sentences)))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    return (\n        isinstance(x, int)\n        and isinstance(y, int)\n        and isinstance(z, int)\n        and (x + y == z or x + z == y or y + z == x)\n    )\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message:\n        if ch.islower():\n            ch1 = ch.upper() if ch.isupper() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result.append(ch1)\n        else:\n            result.append(ch)\n    return \"\".join(result)\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = \"\".join(sorted(str(max(primes))))\n    return sum([int(c) for c in largest])\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(map(lambda k: k.isupper() or k.islower(), d.keys()))\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return len([c for c, i in zip(s, range(0, len(s), 2)) if i % 2 == 0 and c in vowels])\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(\" \").filter(lambda w: len(w) > 0)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y!= x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = int((n + m) / 2.0 + 0.5)\n    return str(r_avg)\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(digit.codePointAt(0) % 2!= 0 for digit in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(filter(all_digits_odd, map(str, x)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr.sort(reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = [x + 1 for x in range(n)]\n    return [sum(nums[:i]) if i % 2!= 0 else prod(nums[:i]) for i in range(1, n + 1)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return 2 * int(n_str[0]) + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if digits_sum(n) > 0])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = len([n for n in lst1 if n % 2!= 0])\n    even_cnt = len([n for n in lst2 if n % 2 == 0])\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = defaultdict(int)\n    words = test.split(\" \").filter(w => w.length > 0)\n    for w in words:\n        freq[w] += 1\n    result = defaultdict(int)\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, is_palindrome(s1) and 'yes' or 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([d for d in num if d.isdigit() and int(d) % 2 == 1])\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(*nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: int(round(sum(arr) / capacity)), grid))\n",
            "def count_ones(num: int) -> int:\n    return len([i for i in str(bin(num))[2:] if i == '1'])\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").filter(lambda w: len(w) > 0)\n    return words.filter(lambda w: len(list(filter(lambda c: c.lower() in consonants, w))) == n)\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if vowels.find(word[i])!= -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr, reverse=True)[:k]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(arr[:k])\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len([c for c in txt if c.islower() and c.isalpha() and c.isupper() % 2 == 0]))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)):\n        return False\n    freq = Counter(lst)\n    return max(freq.values()) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = len(arr.filter(lambda n: n < 0)) % 2 == 1 and -1 or 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 and 1 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [d for d in str(n) if int(d) % 2 == 1]\n    return int(''.join(odds)) if odds else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: int(n ** 2), lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt.split(\" \")[-1]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx, default=-1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(',', '.'))\n    elif isinstance(o, int):\n        return o\n    raise TypeError('Type Error')\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"  \", \" \").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or not suf.includes(lst[1]) or len(lst[0]) == 0 or not lst[0][0].match(/[a-z]/i) or len([ch for ch in lst[0] if ch.match(/\\d/)]) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(w for w in words if is_prime(len(w)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return 2 * int(n_str[0]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len(list(filter(lambda n: n > 10 and n % 2 == 1 and odds.find(str(n)[0])!= -1, nums)))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if not names.count(planet1) or not names.count(planet2):\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda s: (len(s), s))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum([n * n for n in lst if n >= 0 and n % 2 == 1])\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - guess[i]) for i, x in enumerate(game)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = float(\"-inf\")\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum([1 for c in ext if c.isupper()])\n        lower = sum([1 for c in ext if c.islower()])\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i])!= -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = abs(num).to_bytes(1, 'big').decode()\n    even = len([d for d in ds if d.code_point == 0])\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i in range(len(values)):\n        while num >= values[i]:\n            res.append(numerals[i])\n            num -= values[i]\n    return \"\".join(res)\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    return a * a + b * b == c * c\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w < w and max_w or w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = list(operators)\n    nums = list(operands)\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = int(nums[i] / nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = []\n    for ch in s:\n        if not ch.isalpha():\n            result.append(ch)\n        elif ch.isupper():\n            result.append(ch.lower())\n        else:\n            result.append(ch.upper())\n    return ''.join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(txt.encode())\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return list(range(lower, upper + 1, 2))\n"
        ]
    },
    "kotlin": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum([abs(n - mean) for n in numbers])\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \").filter(lambda it: it.strip())\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strs))\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for i in numbers:\n        n_product *= i\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -2147483648\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join(map(lambda x: \"0\" if x[0] == x[1] else \"1\", zip(a, b)))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1\n    }\n    notes = music_string.split(\" \").filter(lambda it: it!= \"\")\n    return [durations[it] for it in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = numbers.split(\" \").filter(lambda it: it in num_dict).to_mutable_list()\n    num_list.sort(key=lambda it: num_dict[it])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers) if numbers else 0.0\n    max_num = max(numbers) if numbers else 0.0\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [n / (max_num - min_num) for n in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    num = n\n    while divisor <= num:\n        if num % divisor == 0:\n            factors.append(divisor)\n            num /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = [num for num in numbers if counts[num] == 1]\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        else:\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return list(filter(lambda s: s.startswith(prefix_str), strs))\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [i for i in l if i > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0.0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = l[::3]\n    return [sorted_third[i] if i % 3 == 0 else l[i] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(str(i)) - str(i).count('7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = [x for i, x in enumerate(l) if i % 2 == 0]\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = ''\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [it + 1 for it in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x /= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib.sum()\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = [chr(((ord(c) - 97 + 5) % 26 + 97)) for c in s]\n    return \"\".join(result)\ndef decode_shift(s: str) -> str:\n    result = [chr(((ord(c) - 97 + 21) % 26 + 97)) for c in s]\n    return \"\".join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    return ''.join(filter(lambda char: char not in 'aeiouAEIOU', txt))\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(it < t for it in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [x - y for x, y in zip(l, l[1:])]\n    return all(diff <= 0) or all(diff >= 0)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(set(l2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i!= 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs[1:], 1)]\n",
            "def fibfib(n: int) -> int:\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i].lower())!= -1 or (i == len(s) - 1 and s[i].lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(map(int, filter(str.isupper, s)))\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = words[words.index('apples') - 1].toInt()\n    oranges = words[words.index('oranges') - 1].toInt()\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    return all(q[i] == q[len(q) - i - 1] for i in range(len(q))) and sum(q) <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(0, len(arr) // 2):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum([len(x) for x in lst1])\n    cnt2 = sum([len(x) for x in lst2])\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    a = a\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return abs(a) == round(abs(a).pow(1.0 / 3.0)) ** 3\n",
            "def hex_key(num: str) -> int:\n    return len(list(filter(lambda x: \"2357BD\".find(x)!= -1, num)))\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{dec:b}db\"\n",
            "def is_happy(s: str) -> bool:\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 2 * 9 * (10.0.pow(n - 2)).toInt()\n",
            "def solve(n: int) -> str:\n    return str(bin(n).replace(\"0b\", \"\"))\n",
            "def add(lst: List[int]) -> int:\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    return \" \".join(sorted(word) for word in words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda x: (x[1], x[0]))\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = set(lst).sorted()\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(r\"[.!?]\\s*\")\n    return len(list(filter(lambda x: len(x) >= 2 and x[:2] == \"I \", sentences)))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    return (x is int and y is int and z is int) and ((x + y == z) or (x + z == y) or (y + z == x))\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum([int(c) for c in str(largest)])\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * abs(b) % 10\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    return int(num + 0.5) if num >= 0 else int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(\"[, ]\".toRegex()).filter(lambda it: len(it) > 0)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y - 1 if y!= x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = ((n + m) / 2 + 0.5).toInt()\n    return r_avg.to_bin()\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(it.isdigit() and int(it) % 2!= 0 for it in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(filter(all_digits_odd, map(str, x)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr.sort(reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [sum(nums[:i + 1]) if nums[i] % 2!= 0 else reduce(lambda x, y: x * y, nums[:i + 1]) for i in range(n)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return sum(1 for i in arr if digits_sum(i) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for i in lst1 if i % 2!= 0)\n    even_cnt = sum(1 for i in lst2 if i % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \").filter(lambda w: len(w) > 0)\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if len(freq) > 0:\n        maxFreq = max(freq.values())\n        for kv in freq:\n            if kv[1] == maxFreq:\n                result[kv[0]] = kv[1]\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(i for i in s if i not in c)\n    return [s1, 'yes' if is_palindrome(s1) else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len(list(filter(lambda x: x.isdigit() and x % 2 == 1, num)))\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", n.toString()))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(ceil(sum(row) / capacity) for row in grid)\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count('1')\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").filter(lambda it: len(it) > 0)\n    return words.filter(lambda it: len(it.filter(lambda c: consonants.contains(c.lower()))) == n)\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return 'Yes' if check(s1) or check(s2) else 'No'\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr)[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(arr[:k]) if all(len(str(i)) <= 2 for i in arr[:k]) else -1\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    n = n\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    return collatz.sorted()\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d in range(1, 32):\n        return True\n    if m in [4, 6, 9, 11] and d in range(1, 31):\n        return True\n    if m == 2 and d in range(1, 30):\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(txt.lower().count(str(i)) % 2 == 0) for i in range(10)]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not lst[1:].zip(lst[:-1]).all(lambda x: x[0] <= x[1]):\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    return freq.values().max() or 0 <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(lambda x: x < 0) % 2 == 1 else 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(i) for i in str(n) if int(i) % 2 == 1]\n    return reduce(lambda x, y: x * y, odds) if odds else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for (i, ch) in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(ceil(it).pow(2) for it in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if txt == \"\":\n        return False\n    last = txt.split(\" \")[-1]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    else:\n        raise Exception(\"Unknown type\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(r\"\\s{3,}\", \"-\").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or lst[0].count(str.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(word for word in words if is_prime(len(word)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = xs[0].toInt() * ns[0].toInt()\n    den = xs[1].toInt() * ns[1].toInt()\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum([int(it) for it in n_str])\n    else:\n        return int(n_str[0:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and odds.find(str(n)[0])!= -1])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l = r\n        r = l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda s: (len(s), s))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum([x * x for x in lst if x >= 0 and x % 2 == 1])\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = ext.count(str.isupper)\n        lower = ext.count(str.islower)\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = abs(num).toString()\n    even = ds.count(lambda it: it.toInt() % 2 == 0)\n    return [even, ds.length - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    num = num\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    return (a * a + b * b == c * c)\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = int(nums[i] ** nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    md5_hash = md5(txt.encode())\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return list(range(lower, upper + 1, 2))\n"
        ]
    },
    "php": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(map(lambda x: abs(x - mean), numbers))\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = [s for s in paren_string.split(\" \") if len(s) > 0]\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -float('inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[i:] == s[i:][::-1]:\n            return s + s[i:][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x == y)) for x, y in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = [n for n in music_string.split(\" \") if len(n) > 0]\n    return [durations[n] for n in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [x for x in numbers.split(\" \") if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = numbers.copy()\n    sorted_numbers.sort()\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [\n            (num - min_num) / (max_num - min_num)\n            for num in numbers\n        ]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = []\n    for num in numbers:\n        if counts[num] == 1:\n            res.append(num)\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = [i for i in l if i % 3 == 0]\n    sorted_third.sort()\n    return [sorted_third[i // 3] if i % 3 == 0 else i for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = [i for i in l if i % 2 == 0]\n    sorted_even.sort()\n    return [sorted_even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = {}\n    for num in l:\n        if num in seen:\n            return True\n        seen[num] = True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x = int(x / bas)\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3]\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = l.copy()\n    sl.sort()\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return \"\".join(chr(((ord(ch) - 97 + 5) % 26) + 97) for ch in s)\ndef decode_shift(s: str) -> str:\n    return \"\".join(chr(((ord(ch) - 97 + 21) % 26) + 97) for ch in s)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(filter(lambda char: char not in vowels, txt))\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return len(list(filter(lambda x: x < t, l))) == len(l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    set0 = set(s0)\n    set1 = set(s1)\n    return set0 == set1\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [b - a for a, b in zip(l[:-1], l[1:])]\n    return len(list(filter(lambda x: x <= 0, diff))) == len(diff) or len(list(filter(lambda x: x >= 0, diff))) == len(diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    result = []\n    for e in l1:\n        if e in l2:\n            result.append(e)\n    result.sort()\n    return result\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(0, n))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs[1:], 1)]\n",
            "def fibfib(n: int) -> int:\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return str(x_str)[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split()\n    apples = words.index('apples') - 1\n    oranges = words.index('oranges') - 1\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst.copy()\n    sl.sort()\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return s * (s - a) * (s - b) * (s - c) ** 0.5\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    return len(q) > 0 and all(q[i] == q[-i - 1] for i in range(len(q))) and sum(q) <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(int(len(arr) / 2)):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(map(len, lst1))\n    cnt2 = sum(map(len, lst2))\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return a ** (1 / 3) == round(a ** (1 / 3))\n",
            "def hex_key(num: str) -> int:\n    return len(set(num).intersection(\"2357BD\"))\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{bin(dec)[2:]}db\"\n",
            "def is_happy(s: str) -> bool:\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 2 * 9 * 10 ** (n - 2) if n == 1 else 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    return bin(n)[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(v for k, v in lst if k % 2 == 1 and v % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = [word for word in s.split(' ') if word]\n    words = [sorted(word) for word in words]\n    return''.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coords.append([i, j])\n    coords.sort(key=lambda coord: coord[0] if coord[0] == coord[1] else coord[1], reverse=True)\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    result = arr\n    if (arr[0] + arr[-1]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        result.sort()\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = list(set(lst))\n    sl.sort()\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\".!?\")\n    return len(list(filter(lambda sentence: len(sentence) >= 2 and sentence[:2] == \"I \", sentences)))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and ((x + y == z) or (x + z == y) or (y + z == x))\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.islower()? ch.upper() : ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = max(primes)\n    return sum(map(int, str(largest)))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return len(d) == 0 or (len(list(filter(lambda k: k.islower(), d.keys()))) == len(d) or len(list(filter(lambda k: k.isupper(), d.keys()))) == len(d))\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if len(list(filter(lambda p: num % p!= 0, primes))) == len(primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * abs(b) % 10\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n",
            "def closest_integer(value: str) -> Union[int, float]:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(\" \", maxsplit=0)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y!= x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = int((n + m) / 2 + 0.5)\n    return bin(r_avg)\n",
            "def all_digits_odd(s: str) -> bool:\n    return len(list(filter(lambda digit: ord(digit) % 2!= 0, s))) == len(s)\ndef unique_digits(x: List[int]) -> List[int]:\n    result = list(filter(lambda x: all_digits_odd(str(x)), x))\n    result.sort()\n    return result\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [x for x in arr if 1 <= x and x <= 9]\n    sorted_arr.sort(reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [sum(nums[:i]) if i % 2!= 0 else reduce(lambda x, y: x * y, nums[:i], 1) for i in nums]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return 2 * int(n_str[0:2]) + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len(list(filter(lambda n: digits_sum(n) > 0, arr)))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2!= 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = [w for w in test.split() if len(w) > 0]\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, 'yes' if isPalindrome(s1) else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([d for d in num if ord(d) % 2 == 1])\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: int(ceil(sum(arr) / capacity)), grid))\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count('1')\ndef sort_array(arr: List[int]) -> List[int]:\n    result = arr\n    result.sort(key=lambda x: (count_ones(x), x))\n    return result\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = [w for w in s.split(\" \") if len(w) > 0]\n    return [w for w in words if len(set(filter(lambda c: c in consonants, w))) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if vowels.find(word[i])!= -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    result = sorted(arr)\n    return result[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum([v for k, v in lst.items() if k % 2 == 0 and v % 2!= 0])\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda n: len(str(n)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len(list(filter(lambda c: c.islower() and c.isalpha() and ord(c) % 2 == 0, txt))))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not all(i <= j for i, j in zip(lst[:-1], lst[1:])):\n        return False\n    freq = {i: 0 for i in lst}\n    for i in lst:\n        freq[i] += 1\n    return len(lst) == 0 or max(freq.values()) <= 2\n",
            "def intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and length == 1 or length == 2 or length == 3 or length == 5 or length == 7 or length == 11 or length == 13 or length == 17 or length == 19 or length == 23 or length == 29 or length == 31 or length == 37 or length == 41 or length == 43 or length == 47 or length == 53 or length == 59 or length == 61 or length == 67 or length == 71 or length == 73 or length == 79 or length == 83 or length == 89 or length == 97 or length == 101 or length == 103 or length == 107 or length == 109 or length == 113 or length == 127 or length == 131 or length == 137 or length == 139 or length == 149 or length == 151 or length == 157 or length == 163 or length == 167 or length == 173 or length == 179 or length == 181 or length == 191 or length == 193 or length == 197 or length == 199 or length == 211 or length == 223 or length == 227 or length == 229 or length == 233 or length == 239 or length == 241 or length == 251 or length == 257 or length == 263 or length == 269 or length == 271 or length == 277 or length == 281 or length == 283 or length == 293 or length == 307 or length == 311 or length == 313 or length == 317 or length == 331 or length == 337 or length == 347 or length == 349 or length == 353 or length == 359 or length == 367 or length == 373 or length == 379 or length == 383 or length == 389 or length == 397 or length == 401 or length == 409 or length == 419 or length == 421 or length == 431 or length == 433 or length == 439 or length == 443 or length == 449 or length == 457 or length == 461 or length == 463 or length == 467 or length == 479 or length == 487 or length == 491 or length == 499 or length == 503 or length == 509 or length == 521 or length == 523 or length == 541 or length == 547 or length == 557 or length == 563 or length == 569 or length == 571 or length == 577 or length == 587 or length == 593 or length == 599 or length == 601 or length == 607 or length == 613 or length == 617 or length == 619 or length == 631 or length == 641 or length == 643 or length == 647 or length == 653 or length == 659 or length == 661 or length == 673 or length == 677 or length == 683 or length == 691 or length == 701 or length == 709 or length == 719 or length == 727 or length == 733 or length == 739 or length == 743 or length == 751 or length == 757 or length == 761 or length == 769 or length == 773 or length == 787 or length == 797 or length == 809 or length == 811 or length == 821 or length == 823 or length == 827 or length == 829 or length == 839 or length == 853 or length == 857 or length == 859 or length == 863 or length == 877 or length == 881 or length == 883 or length == 887 or length == 907 or length == 911 or length == 919 or length == 929 or length == 937 or length == 941 or length == 947 or length == 953 or length == 967 or length == 971 or length == 977 or length == 983 or length == 991 or length == 997 or length == 1009 or length == 1013 or length == 1019 or length == 1021 or length == 1031 or length == 1033 or length == 1039 or length == 1049 or length == 1051 or length == 1061 or length == 1063 or length == 1069 or length == 1087 or length == 1091 or length == 1093 or length == 1097 or length == 1103 or length == 1109 or length == 1117 or length == 1123 or length == 1129 or length == 1151 or length == 1153 or length == 1163 or length == 1171 or length == 1181 or length == 1187 or length == 1193 or length == 1201 or length == 1213 or length == 1217 or length == 1223 or length == 1229 or length == 1231 or length == 1237 or length == 1249 or length == 1259 or length == 1277 or length == 1279 or length == 1283 or length == 1289 or length == 1291 or length == 1297 or length == 1301 or length == 1303 or length == 1307 or length == 1319 or length == 1321 or length == 1327 or length == 1361 or length == 1367 or length == 1373 or length == 1381 or length == 1399 or length == 1409 or length == 1423 or length == 1427 or length == 1429 or length == 1433 or length == 1439 or length == 1447 or length == 1451 or length == 1453 or length == 1459 or length == 1471 or length == 1481 or length == 1483 or length == 1487 or length == 1489 or length == 1493 or length == 1499 or length == 1511 or length == 1523 or length == 1531 or length == 1543 or length == 1549 or length == 1553 or length == 1559 or length == 1567 or length == 1571 or length == 1579 or length == 1583 or length == 1597 or length == 1601 or length == 1607 or length == 1609 or length == 1613 or length == 1619 or length == 1621 or length == 1627 or length == 1637 or length == 1657 or length == 1663 or length == 1667 or length == 1669 or length == 1693 or length == 1697 or length == 1699 or length == 1709 or length == 1721 or length == 1723 or length == 1733 or length == 1741 or length == 1",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = len(list(filter(lambda n: n < 0, arr))) % 2 == 1 and -1 or 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0? 1 : min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(x) for x in str(n) if int(x) % 2 == 1]\n    return 0 if len(odds) == 0 else reduce(lambda x, y: x * y, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx = close_idx[::-1]\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: pow(ceil(n), 2), lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[max(txt.rfind(\" \"), -1) + 1]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr) - 1) if arr[i] < arr[i - 1]]\n    return max(idx, default=-1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(',', '.'))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    raise RuntimeError(\"Unknown type\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\" \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"_\").replace(\"  \",",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or len(list(filter(lambda ch: ch.isdigit(), lst[0]))) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(filter(lambda w: is_prime(len(w)), words))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return 2 * int(n_str[0:2]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    result = nums\n    result.sort(key=lambda x: digits_sum(x))\n    return result\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and odds.find(str(n)[0])!= -1])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = []\n    for e in lst:\n        if len(e) % 2 == 0:\n            result.append(e)\n    result.sort(key=lambda x: (len(x), x))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(map(lambda n: n * n, filter(lambda n: n >= 0 and n % 2 == 1, lst)))\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -2147483648\n    max_ext = \"\"\n    for ext in extensions:\n        upper = len(re.sub(r'[^A-Z]', '', ext))\n        lower = len(re.sub(r'[^a-z]', '', ext))\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i] + b[:i])!= -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = len(list(filter(lambda d: ord(d) % 2 == 0, ds)))\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators\n    nums = operands\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = int(nums[i] / nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        elif ch.islower():\n            result += ch.upper()\n    return result[::-1]\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    txt_bytes = txt.encode('utf-8')\n    md5_encoded = txt_bytes.hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [i for i in range(lower, upper) if i % 2 == 0]\n"
        ]
    },
    "python": {
        "cpp": [
            "bool hasCloseElements(const vector<double>& numbers, double threshold) {\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "vector<string> separateParenGroups(const string& paren_string) {\n    vector<string> groups;\n    string current_group;\n    stack<char> stk;\n    for (char ch : paren_string) {\n        if (ch == '(') {\n            stk.push(ch);\n            current_group += ch;\n        } else if (ch == ')') {\n            stk.pop();\n            current_group += ch;\n            if (stk.empty()) {\n                groups.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - floor(num);\n}\n",
            "bool belowZero(const vector<int>& operations) {\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(const vector<double>& numbers) {\n    double mean = 0;\n    for (double n : numbers) {\n        mean += n;\n    }\n    mean /= numbers.size();\n    double deviation = 0;\n    for (double n : numbers) {\n        deviation += abs(n - mean);\n    }\n    return deviation / numbers.size();\n}\n",
            "vector<int> intersperse(const vector<int>& numbers, int delimiter) {\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (i!= 0) {\n            result.push_back(delimiter);\n        }\n        result.push_back(numbers[i]);\n    }\n    return result;\n}\n",
            "vector<int> parseNestedParens(const string& paren_string) {\n    vector<int> result;\n    vector<string> paren_groups = split(paren_string, \" \");\n    for (string group : paren_groups) {\n        int max_depth = 0;\n        int depth = 0;\n        for (char ch : group) {\n            if (ch == '(') {\n                depth += 1;\n                max_depth = max(max_depth, depth);\n            } else if (ch == ')') {\n                depth -= 1;\n            }\n        }\n        result.push_back(max_depth);\n    }\n    return result;\n}\nvector<string> split(const string& s, const string& delimiter) {\n    vector<string> result;\n    size_t pos = 0;\n    size_t prev = 0;\n    while ((pos = s.find(delimiter, prev))!= string::npos) {\n        result.push_back(s.substr(prev, pos - prev));\n        prev = pos + delimiter.length();\n    }\n    result.push_back(s.substr(prev));\n    return result;\n}\n",
            "vector<string> filterBySubstring(const vector<string>& strs, const string& substring) {\n    return vector<string>(\n        filter(\n            strs.begin(),\n            strs.end(),\n            [substring](const string& s) { return find(s.begin(), s.end(), substring)!= s.end(); }\n        )\n    );\n}\n",
            "vector<int> sumProduct(const vector<int>& numbers) {\n    int n_sum = accumulate(numbers.begin(), numbers.end(), 0);\n    int n_product = accumulate(numbers.begin(), numbers.end(), 1, multiplies<int>());\n    return {n_sum, n_product};\n}\n",
            "vector<int> rollingMax(const vector<int>& numbers) {\n    vector<int> result;\n    int max_so_far = -1;\n    for (int num : numbers) {\n        max_so_far = max(max_so_far, num);\n        result.push_back(max_so_far);\n    }\n    return result;\n}\n",
            "string makePalindrome(const string& s) {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (int i = 0; i < s.size(); ++i) {\n        if (isPalindrome(s.substr(i))) {\n            return s + s.substr(0, i)[::-1];\n        }\n    }\n    return \"\";\n}\n",
            "string stringXor(const string& a, const string& b) {\n    string result;\n    for (int i = 0; i < a.size(); i++) {\n        result.push_back(a[i] ^ b[i]);\n    }\n    return result;\n}\n",
            "optional<string> longest(const vector<string>& strs) {\n    if (strs.empty()) {\n        return nullopt;\n    }\n    string longest_s = strs[0];\n    for (string s : strs) {\n        if (s.size() > longest_s.size()) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "vector<string> allPrefixes(const string& s) {\n    vector<string> prefixes;\n    for (int i = 0; i < s.size(); ++i) {\n        prefixes.push_back(s.substr(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "string stringSequence(int n) {\n    stringstream ss;\n    for (int i = 0; i <= n; i++) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\n",
            "int countDistinctCharacters(const string& s) {\n    return (int)s.size() - (int)count(s.begin(), s.end(),'');\n}\n",
            "vector<int> parseMusic(const string& music_string) {\n    unordered_map<string, int> durations = {\n        {\"o\", 4}, {\"o|\", 2}, {\".|\", 1}\n    };\n    vector<string> notes = split(music_string,'');\n    vector<int> result;\n    for (string note : notes) {\n        result.push_back(durations[note]);\n    }\n    return result;\n}\n",
            "int howManyTimes(const string& s, const string& substring) {\n    int times = 0;\n    for (int i = 0; i < s.size() - substring.size() + 1; i++) {\n        if (s.substr(i, substring.size()) == substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "string sortNumbers(const string& numbers) {\n    unordered_map<string, int> num_dict = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9},\n    };\n    vector<string> num_list = {\n        \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\n    };\n    sort(num_list.begin(), num_list.end(), [&](const string& a, const string& b) {\n        return num_dict[a] < num_dict[b];\n    });\n    return \" \".join(num_list);\n}\n",
            "vector<double> findClosestElements(const vector<double>& numbers) {\n    sort(numbers.begin(), numbers.end());\n    double min_diff = numeric_limits<double>::infinity();\n    vector<double> closest_pair;\n    for (int i = 1; i < numbers.size(); i++) {\n        double diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {numbers[i - 1], numbers[i]};\n        }\n    }\n    return closest_pair;\n}\n",
            "vector<double> rescaleToUnit(const vector<double>& numbers) {\n    double min_num = *min_element(numbers.begin(), numbers.end());\n    double max_num = *max_element(numbers.begin(), numbers.end());\n    if (min_num == max_num) {\n        return vector<double>(numbers.size(), 0.0);\n    } else {\n        return vector<double>(numbers.size(), (num - min_num) / (max_num - min_num));\n    }\n}\n",
            "vector<int> filterIntegers(const vector<any>& values) {\n    vector<int> result;\n    for (auto x : values) {\n        if (x.is_integer()) {\n            result.push_back(x);\n        }\n    }\n    return result;\n}\n",
            "int strLength(const string& s) {\n    return s.length();\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "vector<int> factorize(int n) {\n    vector<int> factors;\n    int divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.push_back(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "vector<int> removeDuplicates(const vector<int>& numbers) {\n    unordered_map<int, int> counts;\n    for (int num : numbers) {\n        counts[num] = counts.get(num, 0) + 1;\n    }\n    vector<int> res;\n    for (int num : numbers) {\n        if (counts[num] == 1) {\n            res.push_back(num);\n        }\n    }\n    return res;\n}\n",
            "string flipCase(const string& s) {\n    string flipped;\n    for (char ch : s) {\n        if (!isalpha(ch)) {\n            flipped.push_back(ch);\n        } else if (islower(ch)) {\n            flipped.push_back(toupper(ch));\n        } else if (isupper(ch)) {\n            flipped.push_back(tolower(ch));\n        }\n    }\n    return flipped;\n}\n",
            "string concatenate(const vector<string>& strs) {\n    return string(strs.begin(), strs.end());\n}\n",
            "vector<string> filterByPrefix(const vector<string>& strs, const string& prefix_str) {\n    return vector<string>(\n        filter(\n            strs.begin(),\n            strs.end(),\n            [prefix_str](const string& s) { return s.find(prefix_str) == 0; }\n        )\n    );\n}\n",
            "vector<int> getPositive(const vector<int>& l) {\n    vector<int> result;\n    for (int num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "double poly(const vector<int>& xs, double x) {\n    double res = 0.0;\n    for (int i = 0; i < xs.size(); i++) {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\ndouble findZero(const vector<int>& xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "vector<int> sortThird(const vector<int>& l) {\n    vector<int> sorted_third = sort(l.begin(), l.end(), [](int a, int b) { return a % 3 < b % 3; });\n    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            result.push_back(sorted_third[i / 3]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n",
            "vector<int> listUnique(const vector<int>& l) {\n    return sorted(list(set(l)));\n}\n",
            "int maxElement(const vector<int>& l) {\n    return *max_element(l.begin(), l.end());\n}\n",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += to_string(i).find(\"7\")!= string::npos;\n        }\n    }\n    return cnt;\n}\n",
            "vector<int> sortEven(const vector<int>& l) {\n    vector<int> sorted_even = sorted(l.begin(), l.end(), [](int a, int b) { return a % 2 == 0; });\n    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        result.push_back(sorted_even[i // 2] if i % 2 == 0 else l[i]);\n    }\n    return result;\n}\n",
            "string encodeCyclic(const string& s) {\n    string result;\n    for (int i = 0; i < s.size(); i += 3) {\n        if (i + 3 > s.size()) {\n            result += s.substr(i);\n        } else {\n            result += s.substr(i + 1, 2);\n            result += s[i];\n        }\n    }\n    return result;\n}\nstring decodeCyclic(const string& s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "int primeFib(int n) {\n    int f[2] = {0, 1};\n    int cnt = 0;\n    while (cnt < n) {\n        int tmp[2] = {f[1], f[0] + f[1]};\n        if (isPrime(tmp[1])) {\n            cnt += 1;\n        }\n        f = tmp;\n    }\n    return f[1];\n}\n",
            "bool triplesSumToZero(const vector<int>& l) {\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return n * n;\n}\n",
            "vector<int> incrList(const vector<int>& l) {\n    vector<int> result;\n    for (int i : l) {\n        result.push_back(i + 1);\n    }\n    return result;\n}\n",
            "bool pairsSumToZero(const vector<int>& l) {\n    set<int> seen;\n    for (int num : l) {\n        if (-num in seen) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n",
            "string changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    vector<string> digits;\n    while (x > 0) {\n        digits.push_back(to_string(x % bas));\n        x /= bas;\n    }\n    return join(digits.rbegin(), digits.rend(), \"\");\n}\n",
            "double triangleArea(int a, int h) {\n    return a * h / 2;\n}\n",
            "int fib4(int n) {\n    vector<int> fib = {0, 0, 2, 0};\n    for (int i = 4; i <= n; i++) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n    }\n    return fib[n % 4];\n}\n",
            "double median(const vector<double>& l) {\n    sort(l.begin(), l.end());\n    if (l.size() % 2!= 0) {\n        return l[l.size() / 2];\n    } else {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2;\n    }\n}\n",
            "bool isPalindrome(const string& txt) {\n    return txt == txt.rbegin() + 1;\n}\n",
            "int modp(int n, int p) {\n    int ret = 1;\n    for (int _ = 0; _ < n; _++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "string encodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        result.push_back(\n            (char)(((int)ch - 97 + 5) % 26) + 97);\n    }\n    return result;\n}\nstring decodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        result.push_back(\n            (char)(((int)ch - 97 + 21) % 26) + 97);\n    }\n    return result;\n}\n",
            "string removeVowels(const string& txt) {\n    string vowels = \"aeiouAEIOU\";\n    string result;\n    for (char char : txt) {\n        if (vowels.find(char) == string::npos) {\n            result += char;\n        }\n    }\n    return result;\n}\n",
            "bool belowThreshold(const vector<int>& l, int t) {\n    return all_of(l.begin(), l.end(), [t](int x) { return x < t; });\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(const string& s0, const string& s1) {\n    return set<char>(s0) == set<char>(s1);\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '<') {\n            depth += 1;\n        } else if (b == '>') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(const vector<int>& l) {\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i - 1] and l[i] > l[i + 1]) {\n            return false;\n        }\n        if (l[i] > l[i - 1] and l[i] < l[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "vector<int> common(const vector<int>& l1, const vector<int>& l2) {\n    return sorted(list(set<int>(l1).intersection(set<int>(l2))));\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    return n * (n + 1) / 2;\n}\n",
            "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '(') {\n            depth += 1;\n        } else if (b == ')') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "vector<int> derivative(const vector<int>& xs) {\n    vector<int> result;\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a, b, c = b, c, a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(const string& s) {\n    int cnt = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || (i == s.length() - 1 && s[i] == 'y')) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n",
            "string circularShift(int x, int shift) {\n    string x_str = to_string(x);\n    if (shift > x_str.length()) {\n        return x_str.substr(0, x_str.length() - shift) + x_str.substr(shift);\n    } else {\n        return x_str.substr(x_str.length() - shift) + x_str.substr(0, x_str.length() - shift);\n    }\n}\n",
            "int digitSum(const string& s) {\n    return accumulate(s.begin(), s.end(), 0, [](int sum, char c) {\n        return sum + (c >= 'A' && c <= 'Z'? c - 'A' + 10 : c - '0');\n    });\n}\n",
            "int fruitDistribution(const string& s, int n) {\n    vector<string> words = split(s,'');\n    int apples = stoi(words[words.index(\"apples\") - 1]);\n    int oranges = stoi(words[words.index(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "vector<int> pluck(const vector<int>& arr) {\n    vector<int> evens;\n    for (int n : arr) {\n        if (n % 2 == 0) {\n            evens.push_back(n);\n        }\n    }\n    if (evens.size() == 0) {\n        return {};\n    }\n    int min_even = *min_element(evens.begin(), evens.end());\n    return {min_even, find(arr.begin(), arr.end(), min_even) - arr.begin()};\n}\n",
            "int search(const vector<int>& lst) {\n    unordered_map<int, int> freqs;\n    for (int n : lst) {\n        freqs[n] = freqs.get(n, 0) + 1;\n    }\n    vector<int> good_vals;\n    for (auto& [k, v] : freqs) {\n        if (v >= k) {\n            good_vals.push_back(k);\n        }\n    }\n    return *max_element(good_vals.begin(), good_vals.end(), greater<int>());\n}\n",
            "vector<int> strangeSortList(const vector<int>& lst) {\n    vector<int> sl = sorted(lst);\n    vector<int> result;\n    int left = 0, right = sl.size() - 1;\n    while (left <= right) {\n        result.push_back(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push_back(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        double s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(const vector<int>& q, int w) {\n    if (q.empty()) {\n        return false;\n    }\n    bool is_palin = true;\n    for (int i = 0; i < q.size() / 2; ++i) {\n        if (q[i]!= q[q.size() - i - 1]) {\n            is_palin = false;\n            break;\n        }\n    }\n    int total = 0;\n    for (int i : q) {\n        total += i;\n    }\n    return is_palin && total <= w;\n}\n",
            "int smallestChange(const vector<int>& arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.size() / 2; ++i) {\n        if (arr[i]!= arr[arr.size() - i - 1]) {\n            ++ans;\n        }\n    }\n    return ans;\n}\n",
            "vector<string> totalMatch(const vector<string>& lst1, const vector<string>& lst2) {\n    int cnt1 = 0;\n    for (string s : lst1) {\n        cnt1 += s.size();\n    }\n    int cnt2 = 0;\n    for (string s : lst2) {\n        cnt2 += s.size();\n    }\n    return cnt1 <= cnt2? lst1 : lst2;\n}\n",
            "bool isMultiplyPrime(int a) {\n    if (a < 2) {\n        return false;\n    }\n    int cnt = 0;\n    for (int i = 2; i * i <= a; ++i) {\n        if (a % i == 0) {\n            ++cnt;\n            while (a % i == 0) {\n                a /= i;\n            }\n        }\n    }\n    return cnt == 3;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    return abs(a) == pow(abs(a), 1.0 / 3.0) * pow(abs(a), 1.0 / 3.0) * pow(abs(a), 1.0 / 3.0);\n}\n",
            "int hexKey(const string& num) {\n    return count(num.begin(), num.end(), '2357BD');\n}\n",
            "string decimalToBinary(int dec) {\n    return \"db\" + to_string(dec, 2) + \"db\";\n}\n",
            "bool isHappy(const string& s) {\n    int sum = 0;\n    for (char c : s) {\n        sum += (c - '0');\n    }\n    while (sum!= 1 && sum!= 4) {\n        int carry = 0;\n        for (int i = 0; i < 10; i++) {\n            int digit = (sum % 10) * (sum % 10);\n            if (digit > 9) {\n                digit -= 9;\n                carry = 1;\n            }\n            sum = digit + carry + sum / 10;\n        }\n    }\n    return sum == 1;\n}\n",
            "vector<string> numericalLetterGrade(const vector<double>& grades) {\n    vector<string> result;\n    for (double g : grades) {\n        if (g == 4.0) {\n            result.push_back(\"A+\");\n        } else if (g > 3.7) {\n            result.push_back(\"A\");\n        } else if (g > 3.3) {\n            result.push_back(\"A-\");\n        } else if (g > 3.0) {\n            result.push_back(\"B+\");\n        } else if (g > 2.7) {\n            result.push_back(\"B\");\n        } else if (g > 2.3) {\n            result.push_back(\"B-\");\n        } else if (g > 2.0) {\n            result.push_back(\"C+\");\n        } else if (g > 1.7) {\n            result.push_back(\"C\");\n        } else if (g > 1.3) {\n            result.push_back(\"C-\");\n        } else if (g > 1.0) {\n            result.push_back(\"D+\");\n        } else if (g > 0.7) {\n            result.push_back(\"D\");\n        } else if (g > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(const string& s) {\n    int length = s.length();\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(length)); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    return n == 1? 1 : 2 * 9 * pow(10, n - 2);\n}\n",
            "string solve(int n) {\n    return to_string(n, 2);\n}\n",
            "int add(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "string antiShuffle(const string& s) {\n    vector<string> words;\n    for (string word : s.split(\" \")) {\n        words.push_back(sort(word));\n    }\n    return join(words, \" \");\n}\n",
            "vector<vector<int>> getRow(const vector<vector<int>>& lst, int x) {\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        vector<int> row;\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                row.push_back(i);\n                row.push_back(j);\n            }\n        }\n        result.push_back(row);\n    }\n    return result;\n}\n",
            "vector<int> sortArray(const vector<int>& arr) {\n    if (arr.empty()) {\n        return {};\n    }\n    if ((arr[0] + arr[arr.size() - 1]) % 2 == 0) {\n        return {arr.rbegin(), arr.rend()};\n    } else {\n        return {arr.begin(), arr.end()};\n    }\n}\n",
            "string encrypt(const string& s) {\n    string result;\n    for (char ch : s) {\n        int shifted = ord(ch) + 4;\n        if (shifted > ord('z')) {\n            shifted -= 26;\n        }\n        result.push_back(chr(shifted));\n    }\n    return result;\n}\n",
            "optional<int> nextSmallest(const vector<int>& lst) {\n    vector<int> sl = sorted(set(lst));\n    if (sl.size() < 2) {\n        return nullopt;\n    }\n    return sl[1];\n}\n",
            "int isBored(const string& s) {\n    regex sentences(R\"((\\S+[.!?]\\s*)+)\");\n    smatch matches;\n    regex_search(s, matches, sentences);\n    return accumulate(matches.begin(), matches.end(), 0, [](int sum, const string& sentence) {\n        return sum + (sentence.substr(0, 2) == \"I \");\n    });\n}\n",
            "bool anyInt(any x, any y, any z) {\n    return (x.is<int>() && y.is<int>() && z.is<int>() &&\n            (x.as<int>() + y.as<int>() == z.as<int>()) ||\n            (x.as<int>() + z.as<int>() == y.as<int>()) ||\n            (y.as<int>() + z.as<int>() == x.as<int>()));\n}\n",
            "string encode(const string& message) {\n    string result;\n    for (char ch : message) {\n        if (ch.isalpha()) {\n            char ch1 = ch.islower()? ch.toUpper() : ch.toLower();\n            if (ch1.isalpha() && \"aeiouAEIOU\".find(ch1)!= string::npos) {\n                ch1 = ch1.toUpper() + 2;\n            }\n            result += ch1;\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}\n",
            "int skjkasdkd(const vector<int>& lst) {\n    vector<int> primes;\n    for (int n : lst) {\n        if (is_prime(n)) {\n            primes.push_back(n);\n        }\n    }\n    if (primes.empty()) {\n        return 0;\n    }\n    string largest = to_string(max(primes));\n    int sum = 0;\n    for (char digit : largest) {\n        sum += digit - '0';\n    }\n    return sum;\n}\n",
            "bool checkDictCase(const unordered_map<string, string>& d) {\n    return d.empty() || (all_of(d.begin(), d.end(), [](const auto& p) { return p.first[0] == p.first[0].tolower(); }) && all_of(d.begin(), d.end(), [](const auto& p) { return p.first[0] == p.first[0].toupper(); }));\n}\n",
            "vector<int> countUpTo(int n) {\n    vector<int> primes;\n    for (int num = 2; num < n; num++) {\n        bool is_prime = true;\n        for (int p : primes) {\n            if (num % p == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}\n",
            "int countUpper(const string& s) {\n    return count_if(s.begin(), s.end(), [](char c) {\n        return c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n    });\n}\n",
            "int closestInteger(const string& value) {\n    double num = stod(value);\n    if (num >= 0) {\n        return int(num + 0.5);\n    } else {\n        return int(num - 0.5);\n    }\n}\n",
            "vector<int> makeAPile(int n) {\n    vector<int> result;\n    for (int i = 0; i < n; i++) {\n        result.push_back(n + 2 * i);\n    }\n    return result;\n}\n",
            "vector<string> wordsString(const string& s) {\n    return { w for w in regex_split(r\"[, ]\", s) if w.size() > 0 };\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return y - 1;\n}\n",
            "optional<string> roundedAvg(int n, int m) {\n    if (n > m) {\n        return nullopt;\n    }\n    int r_avg = (m + n) / 2 + 0.5;\n    return to_string(r_avg, 2);\n}\n",
            "vector<int> uniqueDigits(const vector<int>& x) {\n    return sort(unique(begin(x), end(x), [](int a, int b) {\n        return all_digits_odd(to_string(a)) < all_digits_odd(to_string(b));\n    }));\n}\n",
            "vector<string> byLength(const vector<int>& arr) {\n    vector<int> sorted_arr = {x for x in arr if 1 <= x <= 9};\n    sort(sorted_arr.begin(), sorted_arr.end(), greater<int>());\n    vector<string> digit_names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    return {digit_names[x-1] for x in sorted_arr};\n}\n",
            "vector<int> f(int n) {\n    vector<int> nums(n + 1);\n    iota(nums.begin(), nums.end(), 1);\n    vector<int> result;\n    for (int i : nums) {\n        result.push_back(i);\n        if (i % 2!= 0) {\n            result.push_back(accumulate(nums.begin(), nums.begin() + i, 1, multiplies<int>()));\n        }\n    }\n    return result;\n}\n",
            "bool isPalindrome(const string& txt) {\n    return txt == txt.rbegin() + 1;\n}\nvector<int> evenOddPalindrome(int n) {\n    vector<int> cnt(2);\n    for (int i = 1; i <= n; ++i) {\n        if (isPalindrome(to_string(i))) {\n            ++cnt[i % 2];\n        }\n    }\n    return cnt;\n}\n",
            "int digitsSum(int n) {\n    string n_str = to_string(n);\n    if (n >= 0) {\n        return accumulate(n_str.begin(), n_str.end(), 0, [](int sum, char c) { return sum + stoi(string(1, c)); });\n    } else {\n        return stoi(n_str.substr(0, 2)) * 2 + digitsSum(abs(n));\n    }\n}\nint countNums(const vector<int>& arr) {\n    return count_if(arr.begin(), arr.end(), [](int n) { return digitsSum(n) > 0; });\n}\n",
            "bool moveOneBall(const vector<int>& arr) {\n    if (arr.empty()) {\n        return true;\n    }\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end());\n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr.substr(i) == sorted_arr.substr(0, arr.size() - i) && arr.substr(0, i) == sorted_arr.substr(arr.size() - i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "string canExchange(const vector<int>& lst1, const vector<int>& lst2) {\n    int odd_cnt = 0;\n    for (int num : lst1) {\n        if (num % 2!= 0) {\n            odd_cnt++;\n        }\n    }\n    int even_cnt = 0;\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            even_cnt++;\n        }\n    }\n    return even_cnt >= odd_cnt? \"YES\" : \"NO\";\n}\n",
            "unordered_map<string, int> histogram(const string& test) {\n    unordered_map<string, int> freq;\n    vector<string> words = {w for w in test.split(\" \") if len(w) > 0};\n    for (string w : words) {\n        freq[w] = freq.get(w, 0) + 1;\n    }\n    unordered_map<string, int> result;\n    if (freq.size() > 0) {\n        int max_freq = *max_element(freq.values());\n        for (auto& [k, v] : freq) {\n            if (v == max_freq) {\n                result[k] = v;\n            }\n        }\n    }\n    return result;\n}\n",
            "vector<string> reverseDelete(const string& s, const string& c) {\n    string s1 = \"\";\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            s1 += ch;\n        }\n    }\n    return {s1, \"yes\" if is_palindrome(s1) else \"no\"};\n}\nbool is_palindrome(const string& s) {\n    int i = 0, j = s.size() - 1;\n    while (i < j) {\n        if (s[i]!= s[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n",
            "vector<string> oddCount(const vector<string>& lst) {\n    vector<string> result;\n    for (string num : lst) {\n        int n = count_if(num.begin(), num.end(), [](char d) { return d % 2 == 1; });\n        string rs = \"the number of odd elements in the string i of the input.\";\n        result.push_back(rs.replace(\"i\", to_string(n)));\n    }\n    return result;\n}\n",
            "int minSubArraySum(const vector<int>& nums) {\n    int min_sum = 0;\n    int cur_sum = 0;\n    for (int n : nums) {\n        cur_sum = min(cur_sum + n, 0);\n        min_sum = min(cur_sum, min_sum);\n    }\n    if (min_sum == 0) {\n        min_sum = min(nums);\n    }\n    return min_sum;\n}\n",
            "int maxFill(const vector<vector<int>>& grid, int capacity) {\n    return accumulate(grid.begin(), grid.end(), 0, [capacity](int sum, const vector<int>& arr) {\n        return sum + ceil(accumulate(arr.begin(), arr.end(), 0) / capacity);\n    });\n}\n",
            "vector<int> sortArray(const vector<int>& arr) {\n    return sort(arr.begin(), arr.end(), [](int a, int b) {\n        return count_ones(a) < count_ones(b) || (count_ones(a) == count_ones(b) && a < b);\n    });\n}\n",
            "vector<string> selectWords(const string& s, int n) {\n    vector<string> words = {w for w in s.split(\" \") if len(w) > 0};\n    return {w for w in words if len([c for c in w if c.lower() in \"bcdfghjklmnpqrstvwxyz\"]) == n};\n}\n",
            "string getClosestVowel(const string& word) {\n    string vowels = \"aeiouAEIOU\";\n    for (int i = word.size() - 2; i >= 0; i--) {\n        if (word[i] == vowels[0] and word[i - 1]!= vowels[0] and word[i + 1]!= vowels[0]) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "string matchParens(const vector<string>& lst) {\n    string s1 = lst[0] + lst[1];\n    string s2 = lst[1] + lst[0];\n    return \"Yes\" if check(s1) || check(s2) else \"No\";\n}\nbool check(string s) {\n    int depth = 0;\n    for (char ch : s) {\n        if (ch == '(') {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return true if depth == 0 else false;\n}\n",
            "vector<int> maximum(const vector<int>& arr, int k) {\n    return k == 0? vector<int>() : vector<int>(arr.rbegin(), arr.rbegin() + k);\n}\n",
            "int solution(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i] % 2!= 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "int addElements(const vector<int>& arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k && i < arr.size(); i++) {\n        if (arr[i] <= 2) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n",
            "vector<int> getOddCollatz(int n) {\n    vector<int> collatz = {1};\n    while (n!= 1) {\n        if (n % 2!= 0) {\n            collatz.push_back(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    return sorted(collatz);\n}\n",
            "bool validDate(const string& date) {\n    if (date.size()!= 10 || date[2]!= '-' || date[5]!= '-') {\n        return false;\n    }\n    int m = stoi(date.substr(0, 2));\n    int d = stoi(date.substr(3, 2));\n    if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n        return d >= 1 && d <= 31;\n    }\n    if (m == 4 || m == 6 || m == 9 || m == 11) {\n        return d >= 1 && d <= 30;\n    }\n    if (m == 2) {\n        return d >= 1 && d <= 29;\n    }\n    return false;\n}\n",
            "vector<string> splitWords(const string& txt) {\n    if (txt.find(\" \")!= string::npos) {\n        return split(txt, \" \");\n    } else if (txt.find(\",\")!= string::npos) {\n        return split(txt, \",\");\n    } else {\n        return {to_string(count_if(txt.begin(), txt.end(), [](char c) { return islower(c) && c % 2 == 0; }))};\n    }\n}\n",
            "bool isSorted(const vector<int>& lst) {\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i-1] > lst[i]) {\n            return false;\n        }\n    }\n    unordered_map<int, int> freq;\n    for (int i : lst) {\n        freq[i] = freq.get(i, 0) + 1;\n    }\n    return max(freq.values(), default(0)) <= 2;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nstring intersection(const vector<int>& interval1, const vector<int>& interval2) {\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    return \"YES\" if length > 0 and isPrime(length) else \"NO\";\n}\n",
            "optional<int> prodSigns(const vector<int>& arr) {\n    if (arr.empty()) {\n        return nullopt;\n    }\n    if (0 in arr) {\n        return 0;\n    }\n    int sign = -1;\n    if (arr.size() % 2 == 1) {\n        sign = 1;\n    }\n    return sign * accumulate(arr.begin(), arr.end(), 0, abs);\n}\n",
            "vector<int> minPath(const vector<vector<int>>& grid, int k) {\n    int n = grid.size();\n    int min_val = n * n + 1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                vector<int> temp;\n                if (i!= 0) {\n                    temp.push_back(grid[i - 1][j]);\n                }\n                if (j!= 0) {\n                    temp.push_back(grid[i][j - 1]);\n                }\n                if (i!= n - 1) {\n                    temp.push_back(grid[i + 1][j]);\n                }\n                if (j!= n - 1) {\n                    temp.push_back(grid[i][j + 1]);\n                }\n                min_val = min(temp);\n            }\n        }\n    }\n    vector<int> result;\n    for (int i = 0; i < k; i++) {\n        result.push_back(1 if i % 2 == 0 else min_val);\n    }\n    return result;\n}\n",
            "vector<int> tri(int n) {\n    if (n == 0) {\n        return {1};\n    }\n    vector<int> seq = {1, 3};\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq.push_back(i / 2 + 1);\n        } else {\n            seq.push_back(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    string s = to_string(n);\n    int result = 0;\n    for (char c : s) {\n        if (c % 2 == 1) {\n            result *= c - '0';\n        }\n    }\n    return result;\n}\n",
            "bool isNested(const string& s) {\n    vector<int> open_idx;\n    vector<int> close_idx;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] == '[') {\n            open_idx.push_back(i);\n        } else if (s[i] == ']') {\n            close_idx.push_back(i);\n        }\n    }\n    close_idx.reverse();\n    int cnt = 0;\n    int i = 0;\n    int l = close_idx.size();\n    for (int idx : open_idx) {\n        if (i < l && idx < close_idx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "int sumSquares(const vector<double>& lst) {\n    int result = 0;\n    for (double n : lst) {\n        result += pow(ceil(n), 2);\n    }\n    return result;\n}\n",
            "bool checkIfLastCharIsALetter(const string& txt) {\n    if (txt.empty()) {\n        return false;\n    }\n    string last = txt.substr(txt.find(' ') + 1);\n    return last.size() == 1 && isalpha(last[0]);\n}\n",
            "int canArrange(const vector<int>& arr) {\n    if (arr.size() <= 1) {\n        return -1;\n    }\n    vector<int> idx;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            idx.push_back(i);\n        }\n    }\n    return *max_element(idx.begin(), idx.end(), greater<int>());\n}\n",
            "vector<optional<int>> largestSmallestIntegers(const vector<int>& lst) {\n    vector<int> neg;\n    vector<int> pos;\n    for (int i : lst) {\n        if (i < 0) {\n            neg.push_back(i);\n        } else {\n            pos.push_back(i);\n        }\n    }\n    optional<int> max_neg = neg.empty()? nullopt : *max_element(neg.begin(), neg.end());\n    optional<int> min_pos = pos.empty()? nullopt : *min_element(pos.begin(), pos.end());\n    return {max_neg, min_pos};\n}\n",
            "optional<double> compareOne(any a, any b) {\n    if (a.is_string()) {\n        return stod(a.as<string>().replace(',', '.'));\n    } else if (a.is_number_integer()) {\n        return stod(a.as<int>());\n    } else if (a.is_number_float()) {\n        return a.as<double>();\n    }\n    throw runtime_error(\"Type Error\");\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    int fact = 1, result = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "string fixSpaces(const string& txt) {\n    return regex_replace(txt, regex(R\"(\\s{3,})\"), \"-\").replace(\" \", \"_\");\n}\n",
            "string fileNameCheck(const string& file_name) {\n    string suf = \"txt exe dll\";\n    vector<string> lst = split(file_name, \".\");\n    if (lst.size()!= 2 ||!find(suf.begin(), suf.end(), lst[1])!= suf.end() || lst[0].size() == 0 ||!isalpha(lst[0][0]) || count_if(lst[0].begin(), lst[0].end(), isdigit) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "int sumSquares(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            result += pow(lst[i], 2);\n        } else if (i % 4 == 0) {\n            result += pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "string wordsInSentence(const string& sentence) {\n    vector<string> words = split(sentence, \" \");\n    return join(words, \" \", [w](string& w) { return isPrime(w.size()); });\n}\n",
            "bool simplify(const string& x, const string& n) {\n    vector<string> xs = split(x, '/');\n    vector<string> ns = split(n, '/');\n    int num = stoi(xs[0]) * stoi(ns[0]);\n    int den = stoi(xs[1]) * stoi(ns[1]);\n    return num % den == 0;\n}\nvector<string> split(const string& s, char delimiter) {\n    vector<string> result;\n    stringstream ss(s);\n    string item;\n    while (getline(ss, item, delimiter)) {\n        result.push_back(item);\n    }\n    return result;\n}\n",
            "int digitsSum(int n) {\n    string n_str = to_string(n);\n    if (n >= 0) {\n        return accumulate(n_str.begin(), n_str.end(), 0, [](int sum, char c) { return sum + stoi(string(1, c)); });\n    } else {\n        return stoi(n_str.substr(0, 2)) * 2 + digitsSum(abs(n));\n    }\n}\nvector<int> orderByPoints(const vector<int>& nums) {\n    return sort(nums.begin(), nums.end(), [](int a, int b) { return digitsSum(a) < digitsSum(b); });\n}\n",
            "int specialFilter(const vector<int>& nums) {\n    int odds = \"13579\";\n    return count_if(nums.begin(), nums.end(), [=](int n) {\n        return n > 10 && n % 2 == 1 && str(n)[0] == odds[0];\n    });\n}\n",
            "int getMaxTriples(int n) {\n    vector<int> c(3, 0);\n    for (int i = 1; i <= n; i++) {\n        int a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}\n",
            "vector<string> bf(const string& planet1, const string& planet2) {\n    vector<string> names = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    if (find(names.begin(), names.end(), planet1) == names.end() || find(names.begin(), names.end(), planet2) == names.end()) {\n        return {};\n    }\n    int l = find(names.begin(), names.end(), planet1) - names.begin();\n    int r = find(names.begin(), names.end(), planet2) - names.begin();\n    if (l > r) {\n        l = r;\n        r = l;\n    }\n    if (l == r) {\n        return {};\n    }\n    return names.begin() + l + 1, names.begin() + r;\n}\n",
            "vector<string> sortedListSum(const vector<string>& lst) {\n    vector<string> result;\n    for (string s : lst) {\n        if (s.size() % 2 == 0) {\n            result.push_back(s);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        if (a.size()!= b.size()) {\n            return a.size() < b.size();\n        }\n        return a < b;\n    });\n    return result;\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(const vector<double>& lst) {\n    return accumulate(lst.begin(), lst.end(), 0,\n        [=](int sum, double n) {\n            return sum + (n >= 0 && n % 2 == 1) * n * n;\n        });\n}\n",
            "vector<int> compare(const vector<int>& game, const vector<int>& guess) {\n    vector<int> result;\n    for (int i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n",
            "string strongestExtension(const string& class_name, const vector<string>& extensions) {\n    int max_s = -1;\n    string max_ext = \"\";\n    for (string ext : extensions) {\n        int upper = count_if(ext.begin(), ext.end(), [](char c) { return isupper(c); });\n        int lower = count_if(ext.begin(), ext.end(), [](char c) { return islower(c); });\n        int s = upper - lower;\n        if (s > max_s) {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return class_name + \".\" + max_ext;\n}\n",
            "bool cycpatternCheck(const string& a, const string& b) {\n    if (a.size() < b.size()) {\n        return false;\n    }\n    for (int i = 0; i < b.size(); ++i) {\n        if (b.substr(i) + b.substr(0, i) == a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "vector<int> evenOddCount(int num) {\n    string ds = to_string(abs(num));\n    int even = 0;\n    for (char d : ds) {\n        if (d % 2 == 0) {\n            even++;\n        }\n    }\n    return {even, ds.size() - even};\n}\n",
            "string intToMiniRoman(int num) {\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string res = \"\";\n    for (int i = 0; i < values.size(); i++) {\n        while (num >= values[i]) {\n            res += numerals[i];\n            num -= values[i];\n        }\n    }\n    return res;\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    return (a * a + b * b == c * c);\n}\n",
            "string findMax(const vector<string>& words) {\n    int max_cnt = 0;\n    string max_w = \"\";\n    for (string w : words) {\n        int cnt = 0;\n        for (char c : w) {\n            if (cnt == 0) {\n                cnt = 1;\n            } else if (c == w[cnt - 1]) {\n                cnt += 1;\n            }\n        }\n        if (cnt > max_cnt) {\n            max_cnt = cnt;\n            max_w = w;\n        } else if (cnt == max_cnt) {\n            max_w = min(max_w, w);\n        }\n    }\n    return max_w;\n}\n",
            "vector<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return {num + need, remaining - need};\n    } else {\n        return {num + remaining, 0};\n    }\n}\n",
            "int doAlgebra(const vector<string>& operators, const vector<int>& operands) {\n    vector<string> ops = operators;\n    vector<int> nums = operands;\n    int i = ops.size() - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]);\n            nums.pop_back();\n            ops.pop_back();\n        }\n        i--;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.pop_back();\n            ops.pop_back();\n            i--;\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] / nums[i + 1];\n            nums.pop_back();\n            ops.pop_back();\n            i--;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.pop_back();\n            ops.pop_back();\n            i--;\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.pop_back();\n            ops.pop_back();\n            i--;\n        }\n        i++;\n    }\n    return nums[0];\n}\n",
            "string solve(const string& s) {\n    string result;\n    for (char ch : s) {\n        if (ch.isalpha()) {\n            if (ch.isupper()) {\n                result.push_back(ch.lower());\n            } else {\n                result.push_back(ch.upper());\n            }\n        } else {\n            result.push_back(ch);\n        }\n    }\n    return result;\n}\n",
            "",
            "vector<int> generateIntegers(int a, int b) {\n    int lower = max(2, min(a, b));\n    int upper = min(8, max(a, b));\n    vector<int> result;\n    for (int i = lower; i <= upper; ++i) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"
        ],
        "csharp": [
            "class Global {\n    public static bool HasCloseElements(IList<double> numbers, double threshold) {\n        foreach (var i in range(numbers.Count)) {\n            foreach (var j in range(i + 1, numbers.Count)) {\n                if (Math.Abs(numbers[i] - numbers[j]) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<string> SeparateParenGroups(string parenString) {\n        var groups = new List<string>();\n        var stk = new Stack<char>();\n        var currentGroup = \"\";\n        var parens = parenString.Replace(\" \", \"\");\n        foreach (var ch in parens) {\n            if (ch == \"(\") {\n                stk.Push(ch);\n                currentGroup += ch;\n            } else if (ch == \")\") {\n                stk.Pop();\n                currentGroup += ch;\n                if (stk.Count == 0) {\n                    groups.Add(currentGroup);\n                    currentGroup = \"\";\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double TruncateNumber(double num) {\n        return Math.Truncate(num);\n    }\n}\n",
            "class Global {\n    public static bool BelowZero(IList<int> operations) {\n        var balance = 0;\n        foreach (var op in operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double MeanAbsoluteDeviation(IList<double> numbers) {\n        var mean = numbers.Sum() / numbers.Count;\n        var deviation = 0.0;\n        foreach (var x in numbers) {\n            deviation += Math.Abs(x - mean);\n        }\n        return deviation / numbers.Count;\n    }\n}\n",
            "class Global {\n    public static IList<int> Intersperse(IList<int> numbers, int delimiter) {\n        var result = new List<int>();\n        for (var i = 0; i < numbers.Count; i++) {\n            if (i!= 0) {\n                result.Add(delimiter);\n            }\n            result.Add(numbers[i]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> ParseNestedParens(string parenString) {\n        var result = new List<int>();\n        var parenGroups = parenString.Split();\n        foreach (var group in parenGroups) {\n            var maxDepth = 0;\n            var depth = 0;\n            foreach (var ch in group) {\n                if (ch == \"(\") {\n                    depth += 1;\n                    maxDepth = Math.Max(maxDepth, depth);\n                } else if (ch == \")\") {\n                    depth -= 1;\n                }\n            }\n            result.Add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> FilterBySubstring(IList<string> strs, string substring) {\n        return strs.Where(s => s.Contains(substring)).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<int> SumProduct(IList<int> numbers) {\n        var nSum = numbers.Sum();\n        var nProduct = numbers.Aggregate((x, y) => x * y);\n        return new List<int> { nSum, nProduct };\n    }\n}\n",
            "class Global {\n    public static IList<int> RollingMax(IList<int> numbers) {\n        var maxSoFar = float.MinValue;\n        var result = new List<int>();\n        foreach (var num in numbers) {\n            maxSoFar = Math.Max(maxSoFar, num);\n            result.Add(maxSoFar);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string MakePalindrome(string s) {\n        if (IsPalindrome(s)) {\n            return s;\n        }\n        for (int i = 0; i < s.Length; i++) {\n            if (IsPalindrome(s.Substring(i))) {\n                return s + s.Substring(0, i).Reverse().ToString();\n            }\n        }\n        return \"\";\n    }\n    public static bool IsPalindrome(string s) {\n        for (int i = 0; i < s.Length / 2; i++) {\n            if (s[i]!= s[s.Length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static string StringXor(string a, string b) {\n        return string.Join(\"\", Enumerable.Zip(a, b, (x, y) => x == y? \"0\" : \"1\"));\n    }\n}\n",
            "namespace Global {\n    public static class Global {\n        public static string? Longest(IList<string> strs) {\n            if (strs.Count == 0) {\n                return null;\n            }\n            var longest_s = strs[0];\n            foreach (var s in strs) {\n                if (s.Length > longest_s.Length) {\n                    longest_s = s;\n                }\n            }\n            return longest_s;\n        }\n    }\n}\n",
            "class Global {\n    public static int GreatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return GreatestCommonDivisor(b, a % b);\n        }\n    }\n}\n",
            "class Global {\n    public static IList<string> AllPrefixes(string s) {\n        var prefixes = new List<string>();\n        for (var i = 0; i < s.Length; i++) {\n            prefixes.Add(s.Substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static string StringSequence(int n) {\n        return string.Join(\" \", Enumerable.Range(0, n + 1).Select(i => i.ToString()));\n    }\n}\n",
            "class Global {\n    public static int CountDistinctCharacters(string s) {\n        return s.ToLower().Distinct().Count();\n    }\n}\n",
            "class Global {\n    public static IList<int> ParseMusic(string musicString) {\n        var durations = new Dictionary<string, int> {\n            {\"o\", 4},\n            {\"o|\", 2},\n            {\".|\", 1}\n        };\n        var notes = musicString.Split();\n        return new List<int>(notes.Select(note => durations[note]));\n    }\n}\n",
            "class Global {\n    public static int HowManyTimes(string s, string substring) {\n        var times = 0;\n        for (var i = 0; i < s.Length - substring.Length + 1; i++) {\n            if (s.Substring(i, substring.Length) == substring) {\n                times += 1;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static string SortNumbers(string numbers) {\n        var numDict = new Dictionary<string, int> {\n            {\"zero\", 0},\n            {\"one\", 1},\n            {\"two\", 2},\n            {\"three\", 3},\n            {\"four\", 4},\n            {\"five\", 5},\n            {\"six\", 6},\n            {\"seven\", 7},\n            {\"eight\", 8},\n            {\"nine\", 9},\n        };\n        var numList = numbers.Split(\" \").Where(x => numDict.ContainsKey(x)).ToList();\n        numList.Sort((x, y) => numDict[x].CompareTo(numDict[y]));\n        return string.Join(\" \", numList);\n    }\n}\n",
            "class Global {\n    public static IList<double> FindClosestElements(IList<double> numbers) {\n        var sortedNumbers = new List<double>(numbers);\n        sortedNumbers.Sort();\n        var minDiff = double.MaxValue;\n        var closestPair = new List<double>();\n        for (var i = 1; i < sortedNumbers.Count; i++) {\n            var diff = sortedNumbers[i] - sortedNumbers[i - 1];\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = new List<double> { sortedNumbers[i - 1], sortedNumbers[i] };\n            }\n        }\n        return closestPair;\n    }\n}\n",
            "class Global {\n    public static IList<double> RescaleToUnit(IList<double> numbers) {\n        var minNum = numbers.Min();\n        var maxNum = numbers.Max();\n        if (minNum == maxNum) {\n            return new List<double>(Enumerable.Repeat(0.0, numbers.Count));\n        } else {\n            return new List<double>(numbers.Select(num => (num - minNum) / (maxNum - minNum)));\n        }\n    }\n}\n",
            "class Global {\n    public static IList<int> FilterIntegers(IList<object> values) {\n        return new List<int>(values.Where(x => x is int));\n    }\n}\n",
            "class Global {\n    public static int StrLength(string s) {\n        return s.Length;\n    }\n}\n",
            "class Global {\n    public static int LargestDivisor(int n) {\n        for (var i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}\n",
            "class Global {\n    public static IList<int> Factorize(int n) {\n        var factors = new List<int>();\n        var divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.Add(divisor);\n                n /= divisor;\n            } else {\n                divisor += 1;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static IList<int> RemoveDuplicates(IList<int> numbers) {\n        var counts = new Dictionary<int, int>();\n        foreach (var num in numbers) {\n            counts[num] = counts.GetOrDefault(num, 0) + 1;\n        }\n        var res = new List<int>();\n        foreach (var num in numbers) {\n            if (counts[num] == 1) {\n                res.Add(num);\n            }\n        }\n        return res;\n    }\n}\n",
            "class Global {\n    public static string FlipCase(string s) {\n        return new string(s.Select(ch => ch.IsLetter()? ch.IsLower()? ch.ToString().ToUpper() : ch.ToString().ToLower() : ch).ToArray());\n    }\n}\n",
            "class Global {\n    public static string Concatenate(IList<string> strs) {\n        return string.Join(\"\", strs);\n    }\n}\n",
            "class Global {\n    public static IList<string> FilterByPrefix(IList<string> strs, string prefixStr) {\n        return strs.Where(s => s.StartsWith(prefixStr)).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<int> GetPositive(IList<int> l) {\n        return l.Where(num => num > 0).ToList();\n    }\n}\n",
            "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        return Enumerable.Range(2, (int)Math.Floor(Math.Sqrt(n)))\n           .All(i => n % i!= 0);\n    }\n}\n",
            "class Global {\n    public static double Poly(IList<int> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.Count; i++) {\n            res += xs[i] * Math.Pow(x, i);\n        }\n        return res;\n    }\n    public static double FindZero(IList<int> xs) {\n        double x1 = 1.0, x2 = -1.0;\n        while (Poly(xs, x1) * Poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.Abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (Poly(xs, mid) == 0) {\n                return mid;\n            } else if (Poly(xs, mid) * Poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortThird(IList<int> l) {\n        var sortedThird = new List<int>();\n        for (var i = 0; i < l.Count; i += 3) {\n            sortedThird.Add(l[i]);\n        }\n        sortedThird.Sort();\n        var result = new List<int>();\n        for (var i = 0; i < l.Count; i++) {\n            if (i % 3 == 0) {\n                result.Add(sortedThird[i // 3]);\n            } else {\n                result.Add(l[i]);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> ListUnique(IList<int> l) {\n        return new List<int>(l.Distinct());\n    }\n}\n",
            "class Global {\n    public static int MaxElement(IList<int> l) {\n        if (l.Count == 0) {\n            return 0;\n        }\n        return l.Max();\n    }\n}\n",
            "class Global {\n    public static int FizzBuzz(int n) {\n        var cnt = 0;\n        for (var i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += i.ToString().Count(\"7\");\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortEven(IList<int> l) {\n        var sortedEven = new List<int>();\n        for (var i = 0; i < l.Count; i += 2) {\n            sortedEven.Add(l[i]);\n        }\n        sortedEven.Sort();\n        var result = new List<int>();\n        for (var i = 0; i < l.Count; i += 2) {\n            result.Add(sortedEven[i // 2]);\n        }\n        for (var i = 1; i < l.Count; i += 2) {\n            result.Add(l[i]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string EncodeCyclic(string s) {\n        var result = new List<char>();\n        for (var i = 0; i < s.Length; i += 3) {\n            if (i + 3 > s.Length) {\n                result.AddRange(s.Substring(i));\n            } else {\n                result.Add(s[i + 1]);\n                result.Add(s[i + 2]);\n                result.Add(s[i]);\n            }\n        }\n        return new string(result.ToArray());\n    }\n    public static string DecodeCyclic(string s) {\n        return EncodeCyclic(EncodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static int PrimeFib(int n) {\n        var f = new int[] { 0, 1 };\n        var cnt = 0;\n        while (cnt < n) {\n            f = new int[] { f[1], f[0] + f[1] };\n            if (IsPrime(f[1])) {\n                cnt += 1;\n            }\n        }\n        return f[1];\n    }\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (var i = 2; i <= Math.Floor(Math.Sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static bool TriplesSumToZero(IList<int> l) {\n        for (var i = 0; i < l.Count; i++) {\n            for (var j = i + 1; j < l.Count; j++) {\n                for (var k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static int CarRaceCollision(int n) {\n        return n * n;\n    }\n}\n",
            "class Global {\n    public static IList<int> IncrList(IList<int> l) {\n        return l.Select(i => i + 1).ToList();\n    }\n}\n",
            "class Global {\n    public static bool PairsSumToZero(IList<int> l) {\n        var seen = new HashSet<int>();\n        foreach (var num in l) {\n            if (-num in seen) {\n                return true;\n            }\n            seen.Add(num);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string ChangeBase(int x, int bas) {\n        if (x == 0) {\n            return \"0\";\n        }\n        var digits = new List<string>();\n        while (x > 0) {\n            digits.Add(x % bas.ToString());\n            x /= bas;\n        }\n        return string.Join(\"\", digits.Reverse());\n    }\n}\n",
            "class Global {\n    public static double TriangleArea(int a, int h) {\n        return a * h / 2;\n    }\n}\n",
            "class Global {\n    public static int Fib4(int n) {\n        var fib = new int[4];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        for (var i = 4; i <= n; i++) {\n            fib[i % 4] = fib[0] + fib[1] + fib[2];\n            fib[0] = fib[1];\n            fib[1] = fib[2];\n            fib[2] = fib[3];\n            fib[3] = fib[i % 4];\n        }\n        return fib[n % 4];\n    }\n}\n",
            "class Global {\n    public static double Median(IList<double> l) {\n        var sl = new List<double>(l);\n        sl.Sort();\n        if (sl.Count % 2!= 0) {\n            return sl[sl.Count / 2];\n        } else {\n            return (sl[sl.Count / 2] + sl[sl.Count / 2 - 1]) / 2;\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsPalindrome(string txt) {\n        return txt == txt.Reverse();\n    }\n}\n",
            "class Global {\n    public static int Modp(int n, int p) {\n        var ret = 1;\n        for (var _ = 0; _ < n; _++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "class Global {\n    public static string EncodeShift(string s) {\n        var result = new List<char>();\n        foreach (var ch in s) {\n            result.Add((char)(((int)ch - 97 + 5) % 26 + 97));\n        }\n        return new string(result.ToArray());\n    }\n    public static string DecodeShift(string s) {\n        var result = new List<char>();\n        foreach (var ch in s) {\n            result.Add((char)(((int)ch - 97 + 21) % 26 + 97));\n        }\n        return new string(result.ToArray());\n    }\n}\n",
            "class Global {\n    public static string RemoveVowels(string txt) {\n        var vowels = \"aeiouAEIOU\";\n        return new string(txt.Where(c =>!vowels.Contains(c)).ToArray());\n    }\n}\n",
            "class Global {\n    public static bool BelowThreshold(IList<int> l, int t) {\n        foreach (var x in l) {\n            if (x >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int Add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static bool SameChars(string s0, string s1) {\n        return new HashSet<char>(s0) == new HashSet<char>(s1);\n    }\n}\n",
            "class Global {\n    public static int Fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return Fib(n - 1) + Fib(n - 2);\n        }\n    }\n}\n",
            "class Global {\n    public static bool CorrectBracketing(string brackets) {\n        var depth = 0;\n        foreach (var b in brackets) {\n            if (b == \"<\") {\n                depth += 1;\n            } else if (b == \">\") {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static bool Monotonic(IList<int> l) {\n        var diff = new List<int>();\n        for (var i = 1; i < l.Count; i++) {\n            diff.Add(l[i] - l[i - 1]);\n        }\n        return diff.TrueForAll(x => x <= 0) || diff.TrueForAll(x => x >= 0);\n    }\n}\n",
            "class Global {\n    public static IList<int> Common(IList<int> l1, IList<int> l2) {\n        return new List<int>(new HashSet<int>(l1).Intersect(new HashSet<int>(l2)));\n    }\n}\n",
            "class Global {\n    public static int LargestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i) {\n                i += 1;\n            } else {\n                n /= i;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int SumToN(int n) {\n        return (n + 1) * n / 2;\n    }\n}\n",
            "class Global {\n    public static bool CorrectBracketing(string brackets) {\n        var depth = 0;\n        foreach (var b in brackets) {\n            if (b == \"(\") {\n                depth += 1;\n            } else if (b == \")\") {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static IList<int> Derivative(IList<int> xs) {\n        var result = new List<int>();\n        for (var i = 1; i < xs.Count; i++) {\n            result.Add(xs[i] * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int Fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n        int a = 0, b = 0, c = 1;\n        while (n > 2) {\n            a, b, c = b, c, a + b + c;\n            n -= 1;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int VowelsCount(string s) {\n        var vowels = \"aeiou\";\n        var cnt = 0;\n        for (var i = 0; i < s.Length; i++) {\n            if (s[i].ToLower() in vowels || (i == s.Length - 1 && s[i].ToLower() == \"y\")) {\n                cnt += 1;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static string CircularShift(int x, int shift) {\n        var x_str = x.ToString();\n        if (shift > x_str.Length) {\n            return new string(x_str.Reverse().ToArray());\n        } else {\n            return x_str.Substring(x_str.Length - shift) + x_str.Substring(0, x_str.Length - shift);\n        }\n    }\n}\n",
            "class Global {\n    public static int DigitSum(string s) {\n        return s.ToUpper().Sum(c => (int)c);\n    }\n}\n",
            "class Global {\n    public static int FruitDistribution(string s, int n) {\n        var words = s.Split(' ');\n        var apples = int.Parse(words[words.ToList().IndexOf(\"apples\") - 1]);\n        var oranges = int.Parse(words[words.ToList().IndexOf(\"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n}\n",
            "class Global {\n    public static IList<int> Pluck(IList<int> arr) {\n        var evens = new List<int>();\n        foreach (var n in arr) {\n            if (n % 2 == 0) {\n                evens.Add(n);\n            }\n        }\n        if (evens.Count == 0) {\n            return new List<int>();\n        }\n        var min_even = evens[0];\n        for (var i = 1; i < evens.Count; i++) {\n            if (evens[i] < min_even) {\n                min_even = evens[i];\n            }\n        }\n        return new List<int> { min_even, arr.IndexOf(min_even) };\n    }\n}\n",
            "class Global {\n    public static int Search(IList<int> lst) {\n        var freqs = new Dictionary<int, int>();\n        foreach (var n in lst) {\n            freqs[n] = freqs.GetOrDefault(n, 0) + 1;\n        }\n        var goodVals = new List<int>();\n        foreach (var kvp in freqs) {\n            if (kvp.Value >= kvp.Key) {\n                goodVals.Add(kvp.Key);\n            }\n        }\n        return goodVals.Count > 0? goodVals.Max() : -1;\n    }\n}\n",
            "class Global {\n    public static IList<int> StrangeSortList(IList<int> lst) {\n        var sl = new List<int>(lst);\n        var result = new List<int>();\n        var left = 0;\n        var right = sl.Count - 1;\n        while (left <= right) {\n            result.Add(sl[left]);\n            left += 1;\n            if (left <= right) {\n                result.Add(sl[right]);\n                right -= 1;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double TriangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            var s = (a + b + c) / 2.0;\n            return Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}\n",
            "class Global {\n    public static bool WillItFly(IList<int> q, int w) {\n        if (q.Count == 0) {\n            return false;\n        }\n        var isPalin = true;\n        for (var i = 0; i < q.Count; i++) {\n            if (q[i]!= q[q.Count - i - 1]) {\n                isPalin = false;\n                break;\n            }\n        }\n        var total = 0;\n        foreach (var e in q) {\n            total += e;\n        }\n        return isPalin && total <= w;\n    }\n}\n",
            "class Global {\n    public static int SmallestChange(IList<int> arr) {\n        var ans = 0;\n        for (var i = 0; i < arr.Count / 2; i++) {\n            if (arr[i]!= arr[arr.Count - i - 1]) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static IList<string> TotalMatch(IList<string> lst1, IList<string> lst2) {\n        var cnt1 = lst1.Sum(s => s.Length);\n        var cnt2 = lst2.Sum(s => s.Length);\n        return cnt1 <= cnt2? lst1 : lst2;\n    }\n}\n",
            "class Global {\n    public static bool IsMultiplyPrime(int a) {\n        if (a < 2) {\n            return false;\n        }\n        var sqrt = (int)Math.Sqrt(a);\n        for (var i = 2; i <= sqrt; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static bool IsSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        var tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "class Global {\n    public static bool IsCube(int a) {\n        return Math.Abs(a) == Math.Pow(Math.Abs(a), 1.0 / 3.0);\n    }\n}\n",
            "class Global {\n    public static int HexKey(string num) {\n        return num.Count(x => \"2357BD\".Contains(x));\n    }\n}\n",
            "class Global {\n    public static string DecimalToBinary(int dec) {\n        return $\"db{Convert.ToString(dec, 2).PadLeft(32, '0')}db\";\n    }\n}\n",
            "class Global {\n    public static bool IsHappy(string s) {\n        if (s.Length < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static IList<string> NumericalLetterGrade(IList<double> grades) {\n        var result = new List<string>();\n        foreach (var g in grades) {\n            if (g == 4.0) {\n                result.Add(\"A+\");\n            } else if (g > 3.7) {\n                result.Add(\"A\");\n            } else if (g > 3.3) {\n                result.Add(\"A-\");\n            } else if (g > 3.0) {\n                result.Add(\"B+\");\n            } else if (g > 2.7) {\n                result.Add(\"B\");\n            } else if (g > 2.3) {\n                result.Add(\"B-\");\n            } else if (g > 2.0) {\n                result.Add(\"C+\");\n            } else if (g > 1.7) {\n                result.Add(\"C\");\n            } else if (g > 1.3) {\n                result.Add(\"C-\");\n            } else if (g > 1.0) {\n                result.Add(\"D+\");\n            } else if (g > 0.7) {\n                result.Add(\"D\");\n            } else if (g > 0.0) {\n                result.Add(\"D-\");\n            } else {\n                result.Add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool PrimeLength(string s) {\n        var length = s.Length;\n        if (length < 2) {\n            return false;\n        }\n        for (var i = 2; Math.Floor(Math.Sqrt(length)) + 1 > i; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int StartsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 2 * 9 * (int)Math.Pow(10, n - 2);\n    }\n}\n",
            "class Global {\n    public static string Solve(int n) {\n        return Convert.ToString(n, 2).PadLeft(32, '0');\n    }\n}\n",
            "class Global {\n    public static int Add(IList<int> lst) {\n        var result = 0;\n        for (var i = 0; i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                result += lst[i];\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string AntiShuffle(string s) {\n        var words = s.Split(' ').Select(word => string.Join(\"\", word.OrderBy(c => c))).ToArray();\n        return string.Join(\" \", words);\n    }\n}\n",
            "class Global {\n    public static IList<IList<int>> GetRow(IList<IList<int>> lst, int x) {\n        var coords = new List<IList<int>>();\n        for (var i = 0; i < lst.Count; i++) {\n            for (var j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    coords.Add(new List<int> { i, j });\n                }\n            }\n        }\n        return coords.OrderBy(a => a[0]).ThenByDescending(a => a[1]).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<int> SortArray(IList<int> arr) {\n        if (arr.Count == 0) {\n            return new List<int>();\n        }\n        if ((arr[0] + arr[arr.Count - 1]) % 2 == 0) {\n            return new List<int>(arr).Sort((a, b) => b.CompareTo(a));\n        } else {\n            return new List<int>(arr).Sort();\n        }\n    }\n}\n",
            "class Global {\n    public static string Encrypt(string s) {\n        var result = new List<char>();\n        foreach (var ch in s) {\n            var shifted = (int)ch + 4;\n            if (shifted > 122) {\n                shifted -= 26;\n            }\n            result.Add((char)shifted);\n        }\n        return new string(result.ToArray());\n    }\n}\n",
            "class Global {\n    public static int? NextSmallest(IList<int> lst) {\n        var sl = new SortedSet<int>(lst);\n        if (sl.Count < 2) {\n            return null;\n        }\n        return sl.Min;\n    }\n}\n",
            "class Global {\n    public static int IsBored(string s) {\n        var sentences = Regex.Split(s, @\"[.!?]\\s*\");\n        return sentences.Count(sentence => sentence.StartsWith(\"I \", StringComparison.Ordinal) && sentence.Length >= 2);\n    }\n}\n",
            "class Global {\n    public static bool AnyInt(object x, object y, object z) {\n        return (x is int && y is int && z is int) && (x + y == z || x + z == y || y + z == x);\n    }\n}\n",
            "class Global {\n    public static string Encode(string message) {\n        var vowels = \"aeiouAEIOU\";\n        var result = new List<char>();\n        foreach (var ch in message) {\n            if (ch.IsLetter()) {\n                var ch1 = ch.IsLower()? ch.ToString().ToUpper() : ch.ToString().ToLower();\n                if (ch1.Contains(vowels)) {\n                    ch1 = ch1.Replace(ch1[0], (char)(ch1[0] + 2));\n                }\n                result.Add(ch1[0]);\n            } else {\n                result.Add(ch);\n            }\n        }\n        return new string(result.ToArray());\n    }\n}\n",
            "class Global {\n    public static int Skjkasdkd(IList<int> lst) {\n        var primes = lst.Where(n => is_prime(n)).ToList();\n        if (primes.Count == 0) {\n            return 0;\n        }\n        var largest = string.Join(\"\", primes.Max());\n        return largest.Sum(digit => int.Parse(digit.ToString()));\n    }\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static bool CheckDictCase(IDictionary<string, string> d) {\n        if (d == null) {\n            return false;\n        }\n        return d.Keys.All(c => char.IsLower(c)) || d.Keys.All(c => char.IsUpper(c));\n    }\n}\n",
            "class Global {\n    public static IList<int> CountUpTo(int n) {\n        var primes = new List<int>();\n        for (var num = 2; num < n; num++) {\n            if (primes.All(p => num % p!= 0)) {\n                primes.Add(num);\n            }\n        }\n        return primes;\n    }\n}\n",
            "class Global {\n    public static int Multiply(int a, int b) {\n        return Math.Abs(a) % 10 * Math.Abs(b) % 10;\n    }\n}\n",
            "class Global {\n    public static int CountUpper(string s) {\n        var vowels = \"AEIOU\";\n        return s.Length / 2 - s.Count(c => vowels.Contains(c));\n    }\n}\n",
            "class Global {\n    public static int ClosestInteger(string value) {\n        var num = float.Parse(value);\n        return (int)(num + 0.5);\n    }\n}\n",
            "class Global {\n    public static IList<int> MakeAPile(int n) {\n        var result = new List<int>();\n        for (var i = 0; i < n; i++) {\n            result.Add(n + 2 * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> WordsString(string s) {\n        return Regex.Split(s, @\"[, ]\").Where(w => w.Length > 0).ToList();\n    }\n}\n",
            "class Global {\n    public static int ChooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        return y - 1;\n    }\n}\n",
            "class Global {\n    public static string? RoundedAvg(int n, int m) {\n        if (n > m) {\n            return null;\n        }\n        var r_avg = (m + n) / 2.0 + 0.5;\n        return Convert.ToString(r_avg, 2);\n    }\n}\n",
            "class Global {\n    public static IList<int> UniqueDigits(IList<int> x) {\n        return x.Where(num => num.ToString().All(digit => (int)digit % 2!= 0)).OrderBy(num => num).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<string> ByLength(IList<int> arr) {\n        var digit_names = new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" };\n        var sorted_arr = new List<int>();\n        foreach (var x in arr) {\n            if (1 <= x && x <= 9) {\n                sorted_arr.Add(x);\n            }\n        }\n        sorted_arr.Sort(new Comparison<int>((x, y) => y.CompareTo(x)));\n        return new List<string>(sorted_arr.ConvertAll(x => digit_names[x - 1]));\n    }\n}\n",
            "class Global {\n    public static IList<int> F(int n) {\n        var nums = new List<int>();\n        for (var i = 1; i <= n; i++) {\n            nums.Add(i);\n        }\n        return nums.Select(i => i % 2!= 0? nums.Take(i).Sum() : nums.Take(i).Aggregate((x, y) => x * y)).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<int> EvenOddPalindrome(int n) {\n        var cnt = new List<int> { 0, 0 };\n        for (var i = 1; i <= n; i++) {\n            if (IsPalindrome(i.ToString())) {\n                cnt[i % 2]++;\n            }\n        }\n        return cnt;\n    }\n    public static bool IsPalindrome(string txt) {\n        return txt == txt.Reverse();\n    }\n}\n",
            "class Global {\n    public static int CountNums(IList<int> arr) {\n        return arr.Count(n => digits_sum(n) > 0);\n    }\n    public static int DigitsSum(int n) {\n        var n_str = n.ToString();\n        if (n >= 0) {\n            return int.Parse(n_str) + digits_sum(n);\n        } else {\n            return int.Parse(n_str[0].ToString()) * 2 + digits_sum(n);\n        }\n    }\n}\n",
            "class Global {\n    public static bool MoveOneBall(IList<int> arr) {\n        if (arr.Count == 0) {\n            return true;\n        }\n        var sortedArr = new List<int>(arr);\n        sortedArr.Sort();\n        for (var i = 0; i < arr.Count; i++) {\n            if (arr.Skip(i).SequenceEqual(sortedArr.Take(arr.Count - i)) && arr.Take(i).SequenceEqual(sortedArr.Skip(arr.Count - i))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string CanExchange(IList<int> lst1, IList<int> lst2) {\n        var oddCnt = 0;\n        var evenCnt = 0;\n        foreach (var num in lst1) {\n            if (num % 2!= 0) {\n                oddCnt++;\n            }\n        }\n        foreach (var num in lst2) {\n            if (num % 2 == 0) {\n                evenCnt++;\n            }\n        }\n        return \"YES\" if evenCnt >= oddCnt else \"NO\";\n    }\n}\n",
            "class Global {\n    public static IDictionary<string, int> Histogram(string test) {\n        var freq = new Dictionary<string, int>();\n        var words = test.Split(\" \");\n        foreach (var w in words) {\n            if (w.Length > 0) {\n                freq[w] = freq.GetOrDefault(w, 0) + 1;\n            }\n        }\n        var result = new Dictionary<string, int>();\n        if (freq.Count > 0) {\n            var max_freq = freq.Values.Max();\n            foreach (var kvp in freq) {\n                if (kvp.Value == max_freq) {\n                    result[kvp.Key] = kvp.Value;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> ReverseDelete(string s, string c) {\n        var s1 = new string(s.Where(ch =>!c.Contains(ch)).ToArray());\n        return new List<string> { s1, \"yes\" if s1 == s1.Reverse() else \"no\" };\n    }\n}\n",
            "class Global {\n    public static IList<string> OddCount(IList<string> lst) {\n        var result = new List<string>();\n        foreach (var num in lst) {\n            var n = 0;\n            foreach (var d in num) {\n                n += d % 2 == 1? 1 : 0;\n            }\n            var rs = \"the number of odd elements in the string i of the input.\";\n            result.Add(rs.Replace(\"i\", n.ToString()));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int MinSubArraySum(IList<int> nums) {\n        var minSum = 0;\n        var curSum = 0;\n        foreach (var n in nums) {\n            curSum = Math.Min(curSum + n, 0);\n            minSum = Math.Min(curSum, minSum);\n        }\n        if (minSum == 0) {\n            minSum = Math.Min(nums);\n        }\n        return minSum;\n    }\n}\n",
            "class Global {\n    public static int MaxFill(IList<IList<int>> grid, int capacity) {\n        return grid.Sum(arr => (int)Math.Ceiling(arr.Sum() / capacity));\n    }\n}\n",
            "class Global {\n    public static IList<int> SortArray(IList<int> arr) {\n        var result = new List<int>();\n        foreach (var e in arr) {\n            result.Add(e);\n        }\n        result.Sort((x, y) => {\n            var xCount = Convert.ToString(x, 2).Count(c => c == '1');\n            var yCount = Convert.ToString(y, 2).Count(c => c == '1');\n            if (xCount == yCount) {\n                return x.CompareTo(y);\n            }\n            return yCount - xCount;\n        });\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> SelectWords(string s, int n) {\n        var consonants = \"bcdfghjklmnpqrstvwxyz\";\n        var words = s.Split(\" \");\n        return words.Where(w => w.Length > 0 && w.ToLower().Count(c => consonants.Contains(c)) == n).ToList();\n    }\n}\n",
            "class Global {\n    public static string GetClosestVowel(string word) {\n        var vowels = \"aeiouAEIOU\";\n        for (var i = word.Length - 2; i >= 0; i--) {\n            if (word[i] in vowels && word[i - 1] not in vowels && word[i + 1] not in vowels) {\n                return word[i].ToString();\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static string MatchParens(IList<string> lst) {\n        var s1 = lst[0] + lst[1];\n        var s2 = lst[1] + lst[0];\n        return \"Yes\" if (check(s1) || check(s2)) else \"No\";\n    }\n    public static bool Check(string s) {\n        var depth = 0;\n        foreach (var ch in s) {\n            if (ch == \"(\") {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return true if depth == 0 else false;\n    }\n}\n",
            "class Global {\n    public static IList<int> Maximum(IList<int> arr, int k) {\n        return k == 0? new List<int>() : new List<int>(arr).SortDescending().Take(k).ToList();\n    }\n}\n",
            "class Global {\n    public static int Solution(IList<int> lst) {\n        return lst.Where((x, i) => i % 2 == 0 && x % 2!= 0).Sum();\n    }\n}\n",
            "class Global {\n    public static int AddElements(IList<int> arr, int k) {\n        return arr.Take(k).Where(n => n.ToString().Length <= 2).Sum();\n    }\n}\n",
            "class Global {\n    public static IList<int> GetOddCollatz(int n) {\n        var collatz = new List<int> { 1 };\n        while (n!= 1) {\n            if (n % 2!= 0) {\n                collatz.Add(n);\n                n = 3 * n + 1;\n            } else {\n                n = n / 2;\n            }\n        }\n        return collatz;\n    }\n}\n",
            "class Global {\n    public static bool ValidDate(string date) {\n        if (date.Length!= 10 || date[2]!= '-' || date[5]!= '-') {\n            return false;\n        }\n        var m = int.Parse(date.Substring(0, 2));\n        var d = int.Parse(date.Substring(3, 2));\n        if (m in new[] { 1, 3, 5, 7, 8, 10, 12 } && d >= 1 && d <= 31) {\n            return true;\n        }\n        if (m in new[] { 4, 6, 9, 11 } && d >= 1 && d <= 30) {\n            return true;\n        }\n        if (m == 2 && d >= 1 && d <= 29) {\n            return true;\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<string> SplitWords(string txt) {\n        if (txt.Contains(\" \")) {\n            return txt.Split(\" \");\n        } else if (txt.Contains(\",\")) {\n            return txt.Split(\",\");\n        } else {\n            return new List<string> { txt.Length.ToString() };\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsSorted(IList<int> lst) {\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i - 1] > lst[i]) {\n                return false;\n            }\n        }\n        var freq = new Dictionary<int, int>();\n        foreach (var i in lst) {\n            freq[i] = freq.GetOrDefault(i, 0) + 1;\n        }\n        return freq.Values.Max(x => x) <= 2;\n    }\n}\n",
            "class Global {\n    public static string Intersection(IList<int> interval1, IList<int> interval2) {\n        var l = Math.Max(interval1[0], interval2[0]);\n        var r = Math.Min(interval1[1], interval2[1]);\n        var length = r - l;\n        return \"YES\" if length > 0 && Enumerable.Range(2, (int)Math.Floor(Math.Sqrt(length)))\n           .All(i => length % i!= 0) else \"NO\";\n    }\n}\n",
            "class Global {\n    public static int? ProdSigns(IList<int> arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n        if (arr.Contains(0)) {\n            return 0;\n        }\n        var sign = -1;\n        if (arr.Count(n => n < 0) % 2 == 1) {\n            sign = 1;\n        }\n        return sign * arr.Sum(Math.Abs);\n    }\n}\n",
            "class Global {\n    public static IList<int> MinPath(IList<IList<int>> grid, int k) {\n        var n = grid.Count;\n        var minVal = n * n + 1;\n        for (var i = 0; i < n; i++) {\n            for (var j = 0; j < n; j++) {\n                if (grid[i][j] == 1) {\n                    var temp = new List<int>();\n                    if (i!= 0) {\n                        temp.Add(grid[i - 1][j]);\n                    }\n                    if (j!= 0) {\n                        temp.Add(grid[i][j - 1]);\n                    }\n                    if (i!= n - 1) {\n                        temp.Add(grid[i + 1][j]);\n                    }\n                    if (j!= n - 1) {\n                        temp.Add(grid[i][j + 1]);\n                    }\n                    minVal = Math.Min(minVal, temp[0]);\n                }\n            }\n        }\n        var result = new List<int>();\n        for (var i = 0; i < k; i++) {\n            result.Add(1);\n            if (i % 2 == 0) {\n                result.Add(minVal);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> Tri(int n) {\n        if (n == 0) {\n            return new List<int> { 1 };\n        }\n        var seq = new List<int> { 1, 3 };\n        for (var i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                seq.Add(i / 2 + 1);\n            } else {\n                seq.Add(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int Digits(int n) {\n        var odds = str(n).Where(d => int.Parse(d) % 2 == 1).Select(d => int.Parse(d)).ToList();\n        return odds.Count > 0? odds.Aggregate((x, y) => x * y) : 0;\n    }\n}\n",
            "class Global {\n    public static bool IsNested(string s) {\n        var openIdx = new List<int>();\n        var closeIdx = new List<int>();\n        for (var i = 0; i < s.Length; i++) {\n            if (s[i] == '[') {\n                openIdx.Add(i);\n            } else if (s[i] == ']') {\n                closeIdx.Add(i);\n            }\n        }\n        closeIdx.Reverse();\n        var cnt = 0;\n        var i = 0;\n        var l = closeIdx.Count;\n        for (var idx = 0; idx < openIdx.Count; idx++) {\n            if (i < l && openIdx[idx] < closeIdx[i]) {\n                cnt += 1;\n                i += 1;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int SumSquares(IList<double> lst) {\n        return lst.Select(n => (int)Math.Pow(Math.Ceiling(n), 2)).Sum();\n    }\n}\n",
            "class Global {\n    public static bool CheckIfLastCharIsALetter(string txt) {\n        if (string.IsNullOrEmpty(txt)) {\n            return false;\n        }\n        var last = txt.Substring(txt.LastIndexOf(' ') + 1);\n        return last.Length == 1 && char.IsLetter(last[0]);\n    }\n}\n",
            "class Global {\n    public static int CanArrange(IList<int> arr) {\n        if (arr.Count <= 1) {\n            return -1;\n        }\n        var idx = new List<int>();\n        for (var i = 1; i < arr.Count; i++) {\n            if (arr[i] < arr[i - 1]) {\n                idx.Add(i);\n            }\n        }\n        return idx.Count > 0? idx[idx.Count - 1] : -1;\n    }\n}\n",
            "class Global {\n    public static IList<int?> LargestSmallestIntegers(IList<int> lst) {\n        var neg = new List<int>();\n        var pos = new List<int>();\n        foreach (var i in lst) {\n            if (i < 0) {\n                neg.Add(i);\n            } else {\n                pos.Add(i);\n            }\n        }\n        var maxNeg = neg.Count > 0? neg.Max() : null;\n        var minPos = pos.Count > 0? pos.Min() : null;\n        return new List<int?> { maxNeg, minPos };\n    }\n}\n",
            "namespace PythonToCSharp {\n    class Global {\n        public static double? CompareOne(object a, object b) {\n            if (a is string) {\n                return double.Parse(a.ToString().Replace(',', '.'));\n            }\n            if (a is int) {\n                return (double)a;\n            }\n            if (a is double) {\n                return (double)a;\n            }\n            throw new RuntimeError(\"Type Error\");\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int SpecialFactorial(int n) {\n        var fact = 1;\n        var result = 1;\n        for (var i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string FixSpaces(string txt) {\n        return Regex.Replace(txt, @\"\\s{3,}\", \"-\").Replace(\" \", \"_\");\n    }\n}\n",
            "class Global {\n    public static string FileNameCheck(string fileName) {\n        var suf = new List<string> { \"txt\", \"exe\", \"dll\" };\n        var lst = fileName.Split('.');\n        if (lst.Length!= 2 ||!suf.Contains(lst[1]) || lst[0].Length == 0 ||!lst[0][0].IsLetter() || lst[0].Count(x => x.IsDigit()) > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
            "class Global {\n    public static int SumSquares(IList<int> lst) {\n        var result = 0;\n        for (var i = 0; i < lst.Count; i++) {\n            if (i % 3 == 0) {\n                result += (int)Math.Pow(lst[i], 2);\n            } else if (i % 4 == 0) {\n                result += (int)Math.Pow(lst[i], 3);\n            } else {\n                result += lst[i];\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string WordsInSentence(string sentence) {\n        var words = sentence.Split(\" \");\n        return string.Join(\" \", words.Where(w => is_prime(w.Length)));\n    }\n}\n",
            "class Global {\n    public static bool Simplify(string x, string n) {\n        var xs = x.Split('/');\n        var ns = n.Split('/');\n        var num = int.Parse(xs[0]) * int.Parse(ns[0]);\n        var den = int.Parse(xs[1]) * int.Parse(ns[1]);\n        return num % den == 0;\n    }\n}\n",
            "class Global {\n    public static IList<int> OrderByPoints(IList<int> nums) {\n        return nums.OrderBy(n => digits_sum(n)).ToList();\n    }\n    public static int DigitsSum(int n) {\n        var n_str = n.ToString();\n        if (n >= 0) {\n            return int.Parse(n_str);\n        } else {\n            return int.Parse(n_str[0].ToString()) * 2 + digits_sum(abs(n));\n        }\n    }\n}\n",
            "class Global {\n    public static int SpecialFilter(IList<int> nums) {\n        var odds = \"13579\";\n        return nums.Count(n => n > 10 && n % 2 == 1 && str[0] in odds);\n    }\n}\n",
            "class Global {\n    public static int GetMaxTriples(int n) {\n        var c = new int[3];\n        for (var i = 1; i <= n; i++) {\n            var a = i * i - i + 1;\n            c[a % 3]++;\n        }\n        return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n    }\n}\n",
            "class Global {\n    public static IList<string> Bf(string planet1, string planet2) {\n        var names = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        if (!names.Contains(planet1) ||!names.Contains(planet2)) {\n            return new List<string>();\n        }\n        var l = names.IndexOf(planet1);\n        var r = names.IndexOf(planet2);\n        if (l > r) {\n            l = r;\n        }\n        if (l == r) {\n            return new List<string>();\n        }\n        return names.GetRange(l + 1, r - l);\n    }\n}\n",
            "class Global {\n    public static IList<string> SortedListSum(IList<string> lst) {\n        var result = new List<string>();\n        foreach (var s in lst) {\n            if (s.Length % 2 == 0) {\n                result.Add(s);\n            }\n        }\n        result.Sort((x, y) => {\n            if (x.Length == y.Length) {\n                return x.CompareTo(y);\n            }\n            return x.Length - y.Length;\n        });\n        return result;\n    }\n}\n",
            "class Global {\n    public static int XOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        return Enumerable.Range(2, (int)Math.Floor(Math.Sqrt(n)))\n           .Any(i => n % i == 0)? y : x;\n    }\n}\n",
            "class Global {\n    public static int DoubleTheDifference(IList<double> lst) {\n        return lst.Where(n => n >= 0 && n % 2 == 1).Sum(n => n * n);\n    }\n}\n",
            "class Global {\n    public static IList<int> Compare(IList<int> game, IList<int> guess) {\n        var result = new List<int>();\n        for (var i = 0; i < game.Count; i++) {\n            result.Add(Math.Abs(game[i] - guess[i]));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string StrongestExtension(string className, IList<string> extensions) {\n        var max_s = float.NegativeInfinity;\n        var max_ext = \"\";\n        foreach (var ext in extensions) {\n            var upper = ext.Count(c => c.IsUpper());\n            var lower = ext.Count(c => c.IsLower());\n            var s = upper - lower;\n            if (s > max_s) {\n                max_s = s;\n                max_ext = ext;\n            }\n        }\n        return $\"{className}.{max_ext}\";\n    }\n}\n",
            "class Global {\n    public static bool CycpatternCheck(string a, string b) {\n        if (a.Length < b.Length) {\n            return false;\n        }\n        for (int i = 0; i < b.Length; i++) {\n            if (b.Substring(i) + b.Substring(0, i) == a) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<int> EvenOddCount(int num) {\n        var ds = num.ToString().ToCharArray();\n        var even = 0;\n        foreach (var d in ds) {\n            if (d % 2 == 0) {\n                even++;\n            }\n        }\n        return new List<int> { even, ds.Length - even };\n    }\n}\n",
            "class Global {\n    public static string IntToMiniRoman(int num) {\n        var values = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        var numerals = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        var res = new List<string>();\n        for (int i = 0; i < values.Length; i++) {\n            while (num >= values[i]) {\n                res.Add(numerals[i]);\n                num -= values[i];\n            }\n        }\n        return string.Join(\"\", res);\n    }\n}\n",
            "class Global {\n    public static bool RightAngleTriangle(int a, int b, int c) {\n        var s = new int[] { a, b, c }.OrderBy(x => x).ToArray();\n        return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n    }\n}\n",
            "class Global {\n    public static string FindMax(IList<string> words) {\n        var max_cnt = 0;\n        var max_w = \"\";\n        foreach (var w in words) {\n            var cnt = w.Distinct().Count();\n            if (cnt > max_cnt) {\n                max_cnt = cnt;\n                max_w = w;\n            } else if (cnt == max_cnt) {\n                max_w = min(max_w, w);\n            }\n        }\n        return max_w;\n    }\n}\n",
            "class Global {\n    public static IList<int> Eat(int num, int need, int remaining) {\n        if (need <= remaining) {\n            return new List<int> {num + need, remaining - need};\n        } else {\n            return new List<int> {num + remaining, 0};\n        }\n    }\n}\n",
            "class Global {\n    public static int DoAlgebra(IList<string> operators, IList<int> operands) {\n        var ops = new List<string>(operators);\n        var nums = new List<int>(operands);\n        var i = ops.Count - 1;\n        while (i >= 0) {\n            if (ops[i] == \"**\") {\n                nums[i] = (int)Math.Pow(nums[i], nums[i + 1]);\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n            }\n            i--;\n        }\n        i = 0;\n        while (i < ops.Count) {\n            if (ops[i] == \"*\") {\n                nums[i] = nums[i] * nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i--;\n            } else if (ops[i] == \"//\") {\n                nums[i] = nums[i] / nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i--;\n            }\n            i++;\n        }\n        i = 0;\n        while (i < ops.Count) {\n            if (ops[i] == \"+\") {\n                nums[i] = nums[i] + nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i--;\n            } else if (ops[i] == \"-\") {\n                nums[i] = nums[i] - nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i--;\n            }\n            i++;\n        }\n        return nums[0];\n    }\n}\n",
            "class Global {\n    public static string Solve(string s) {\n        var result = new List<char>();\n        foreach (var ch in s) {\n            if (char.IsLetter(ch)) {\n                result.Add(char.IsUpper(ch)? char.ToLower(ch) : char.ToUpper(ch));\n            } else {\n                result.Add(ch);\n            }\n        }\n        return new string(result.ToArray());\n    }\n}\n",
            "class Global {\n    public static string? StringToMd5(string txt) {\n        if (string.IsNullOrEmpty(txt)) {\n            return null;\n        }\n        var md5Hash = MD5.Create();\n        var txtBytes = System.Text.Encoding.UTF8.GetBytes(txt);\n        var md5HashBytes = md5Hash.ComputeHash(txtBytes);\n        var md5HashString = BitConverter.ToString(md5HashBytes).Replace(\"-\", \"\").ToLower();\n        return md5HashString;\n    }\n}\n",
            "class Global {\n    public static IList<int> GenerateIntegers(int a, int b) {\n        var lower = Math.Max(2, Math.Min(a, b));\n        var upper = Math.Min(8, Math.Max(a, b));\n        var result = new List<int>();\n        for (var i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                result.Add(i);\n            }\n        }\n        return result;\n    }\n}\n"
        ],
        "dart": [
            "bool hasCloseElements(List<double> numbers, double threshold) {\n    for (int i = 0; i < numbers.length; i++) {\n        for (int j = i + 1; j < numbers.length; j++) {\n            if (numbers[i] - numbers[j] < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "List<String> separateParenGroups(String parenString) {\n    var groups = <String>[];\n    var stk = <String>[];\n    var currentGroup = \"\";\n    var parens = parenString.replaceAll(\" \", \"\");\n    for (var ch in parens) {\n        if (ch == \"(\") {\n            stk.add(ch);\n            currentGroup += ch;\n        } else if (ch == \")\") {\n            stk.removeLast();\n            currentGroup += ch;\n            if (stk.isEmpty) {\n                groups.add(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - num.floor();\n}\n",
            "bool belowZero(List<int> operations) {\n    var balance = 0;\n    for (int op in operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(List<double> numbers) {\n    double mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    double deviation = numbers.map((x) => (x - mean).abs()).reduce((a, b) => a + b);\n    return deviation / numbers.length;\n}\n",
            "List<int> intersperse(List<int> numbers, int delimiter) {\n    var result = <int>[];\n    for (int i = 0; i < numbers.length; i++) {\n        if (i!= 0) {\n            result.add(delimiter);\n        }\n        result.add(numbers[i]);\n    }\n    return result;\n}\n",
            "List<int> parseNestedParens(String parenString) {\n    var result = <int>[];\n    var parenGroups = parenString.split();\n    for (var group in parenGroups) {\n        var maxDepth = 0;\n        var depth = 0;\n        for (var ch in group) {\n            if (ch == \"(\") {\n                depth += 1;\n                maxDepth = max(maxDepth, depth);\n            } else if (ch == \")\") {\n                depth -= 1;\n            }\n        }\n        result.add(maxDepth);\n    }\n    return result;\n}\n",
            "List<String> filterBySubstring(List<String> strs, String substring) {\n    return strs.where((s) => substring in s).toList();\n}\n",
            "List<int> sumProduct(List<int> numbers) {\n    var nSum = numbers.reduce((x, y) => x + y);\n    var nProduct = numbers.reduce((x, y) => x * y);\n    return [nSum, nProduct];\n}\n",
            "List<int> rollingMax(List<int> numbers) {\n    var maxSoFar = double.negativeInfinity;\n    var result = <int>[];\n    for (int num in numbers) {\n        maxSoFar = max(maxSoFar, num);\n        result.add(maxSoFar.toInt());\n    }\n    return result;\n}\n",
            "String makePalindrome(String s) {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (int i = 0; i < s.length; i++) {\n        if (isPalindrome(s.substring(i))) {\n            return s + s.substring(0, i).reversed.toString();\n        }\n    }\n    return \"\";\n}\nbool isPalindrome(String s) {\n    return s == s.reversed.toString();\n}\n",
            "String stringXor(String a, String b) {\n    return a.split('').map((x, i) => x == b[i]? '0' : '1').join('');\n}\n",
            "String? longest(List<String> strs) {\n    if (strs.isEmpty) {\n        return null;\n    }\n    String longestS = strs[0];\n    for (String s in strs) {\n        if (s.length > longestS.length) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "List<String> allPrefixes(String s) {\n    var prefixes = <String>[];\n    for (int i = 0; i < s.length; i++) {\n        prefixes.add(s.substring(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "String stringSequence(int n) {\n    return \" \".join([i.toString() for i in List.generate(n + 1, (i) => i)]);\n}\n",
            "int countDistinctCharacters(String s) {\n    return s.toLowerCase().toSet().length;\n}\n",
            "List<int> parseMusic(String musicString) {\n    var durations = {\"o\": 4, \"o|\": 2, \".|\": 1};\n    var notes = musicString.split();\n    return notes.map((note) => durations[note]).toList();\n}\n",
            "int howManyTimes(String s, String substring) {\n    int times = 0;\n    for (int i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "String sortNumbers(String numbers) {\n    var numDict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    var numList = numbers.split(\" \").where((x) => numDict.containsKey(x)).toList();\n    numList.sort((x, y) => numDict[x].compareTo(numDict[y]));\n    return \" \".join(numList);\n}\n",
            "List<double> findClosestElements(List<double> numbers) {\n    numbers.sort();\n    var minDiff = double.infinity;\n    var closestPair = [];\n    for (var i = 1; i < numbers.length; i++) {\n        var diff = numbers[i] - numbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [numbers[i - 1], numbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "List<double> rescaleToUnit(List<double> numbers) {\n    var minNum = numbers.reduce(min);\n    var maxNum = numbers.reduce(max);\n    if (minNum == maxNum) {\n        return List<double>.filled(numbers.length, 0.0);\n    } else {\n        return numbers.map((num) => (num - minNum) / (maxNum - minNum)).toList();\n    }\n}\n",
            "List<int> filterIntegers(List<Object> values) {\n    return values.where((x) => x is int).cast<int>();\n}\n",
            "int strLength(String s) {\n    return s.length;\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return n ~/ i;\n        }\n    }\n    return 1;\n}\n",
            "List<int> factorize(int n) {\n    var factors = <int>[];\n    var divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor);\n            n ~/= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "List<int> removeDuplicates(List<int> numbers) {\n    var counts = <int, int>{};\n    for (int num in numbers) {\n        counts[num] = counts.get(num, 0) + 1;\n    }\n    var res = <int>[];\n    for (int num in numbers) {\n        if (counts[num] == 1) {\n            res.add(num);\n        }\n    }\n    return res;\n}\n",
            "String flipCase(String s) {\n    var flipped = <String>[];\n    for (var ch in s) {\n        if (!ch.isLetter()) {\n            flipped.add(ch);\n        } else if (ch.isLower()) {\n            flipped.add(ch.toUpperCase());\n        } else if (ch.isUpper()) {\n            flipped.add(ch.toLowerCase());\n        }\n    }\n    return flipped.join();\n}\n",
            "String concatenate(List<String> strs) {\n    return strs.join();\n}\n",
            "List<String> filterByPrefix(List<String> strs, String prefixStr) {\n    return strs.where((s) => s.startsWith(prefixStr)).toList();\n}\n",
            "List<int> getPositive(List<int> l) {\n    return l.where((num) => num > 0).toList();\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).toInt(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "double poly(List<int> xs, double x) {\n    var res = 0.0;\n    for (var i = 0; i < xs.length; i++) {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\ndouble findZero(List<int> xs) {\n    var x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        var mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "List<int> sortThird(List<int> l) {\n    var sortedThird = l.sublist(0, l.length ~/ 3).toList()..sort();\n    return l.map((e, i) => i % 3 == 0? sortedThird[i ~/ 3] : e).toList();\n}\n",
            "List<int> listUnique(List<int> l) {\n    return l.toSet().toList();\n}\n",
            "int maxElement(List<int> l) {\n    if (l.isEmpty) {\n        return 0;\n    }\n    return l.reduce(max);\n}\n",
            "int fizzBuzz(int n) {\n    var cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString().split(\"\").where((e) => e == \"7\").length;\n        }\n    }\n    return cnt;\n}\n",
            "List<int> sortEven(List<int> l) {\n    var sortedEven = l.sublist(0, l.length).where((e) => e % 2 == 0).toList();\n    return l.map((e, i) => i % 2 == 0? sortedEven[i ~/ 2] : e).toList();\n}\n",
            "String encodeCyclic(String s) {\n    var result = <String>[];\n    for (var i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.add(s.substring(i));\n        } else {\n            result.add(s.substring(i + 1, i + 3));\n            result.add(s[i]);\n        }\n    }\n    return result.join();\n}\nString decodeCyclic(String s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "int primeFib(int n) {\n    var f = [0, 1];\n    var cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\n",
            "bool triplesSumToZero(List<int> l) {\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return n * n;\n}\n",
            "List<int> incrList(List<int> l) {\n    return l.map((i) => i + 1).toList();\n}\n",
            "bool pairsSumToZero(List<int> l) {\n    var seen = <int>{};\n    for (int num in l) {\n        if (-num in seen) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "String changeBase(int x, int bas) {\n    var digits = <String>[];\n    while (x > 0) {\n        digits.add(x % bas.toString());\n        x ~/= bas;\n    }\n    return digits.reversed.join();\n}\n",
            "double triangleArea(int a, int h) {\n    return a * h / 2;\n}\n",
            "int fib4(int n) {\n    var fib = [0, 0, 2, 0];\n    for (int i = 4; i <= n; i++) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n    }\n    return fib[n % 4];\n}\n",
            "double median(List<double> l) {\n    l.sort();\n    if (l.length % 2!= 0) {\n        return l[l.length ~/ 2];\n    } else {\n        return (l[l.length ~/ 2] + l[l.length ~/ 2 - 1]) / 2;\n    }\n}\n",
            "bool isPalindrome(String txt) {\n    return txt == txt.reversed.toString();\n}\n",
            "int modp(int n, int p) {\n    int ret = 1;\n    for (int _ = 0; _ < n; _++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "String encodeShift(String s) {\n    return String.fromCharCodes(s.codeUnits.map((ch) => ((ch - 97 + 5) % 26) + 97));\n}\nString decodeShift(String s) {\n    return String.fromCharCodes(s.codeUnits.map((ch) => ((ch - 97 + 21) % 26) + 97));\n}\n",
            "String removeVowels(String txt) {\n    return txt.replaceAll(RegExp(r'[aeiouAEIOU]'), '');\n}\n",
            "bool belowThreshold(List<int> l, int t) {\n    return l.every((x) => x < t);\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(String s0, String s1) {\n    return Set.from(s0).toSet() == Set.from(s1).toSet();\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "bool correctBracketing(String brackets) {\n    var depth = 0;\n    for (var b in brackets.split(\"\")) {\n        if (b == \"<\") {\n            depth += 1;\n        } else if (b == \">\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(List<int> l) {\n    return l.sublist(1).every((x) => x <= 0) || l.sublist(1).every((x) => x >= 0);\n}\n",
            "List<int> common(List<int> l1, List<int> l2) {\n    return l1.toSet().intersection(l2.toSet()).toList();\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1;\n        } else {\n            n ~/= i;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    return n * (n + 1) ~/ 2;\n}\n",
            "bool correctBracketing(String brackets) {\n    var depth = 0;\n    for (var b in brackets) {\n        if (b == \"(\") {\n            depth += 1;\n        } else if (b == \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "List<int> derivative(List<int> xs) {\n    return List.generate(xs.length - 1, (i) => xs[i] * i);\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a, b, c = b, c, a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(String s) {\n    var vowels = \"aeiou\";\n    var cnt = 0;\n    for (var i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() in vowels || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n",
            "String circularShift(int x, int shift) {\n    var xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.reversed.join();\n    } else {\n        return xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift);\n    }\n}\n",
            "int digitSum(String s) {\n    return s.runes.where((int c) => c.isUpper()).fold(0, (int sum, int c) => sum + c);\n}\n",
            "int fruitDistribution(String s, int n) {\n    var words = s.split(' ');\n    var apples = int.parse(words[words.index('apples') - 1]);\n    var oranges = int.parse(words[words.index('oranges') - 1]);\n    return n - apples - oranges;\n}\n",
            "List<int> pluck(List<int> arr) {\n    var evens = arr.where((n) => n % 2 == 0).toList();\n    if (evens.isEmpty) {\n        return [];\n    }\n    var minEven = evens.reduce((a, b) => a < b? a : b);\n    return [minEven, arr.indexOf(minEven)];\n}\n",
            "int search(List<int> lst) {\n    var freqs = <int, int>{};\n    for (int n in lst) {\n        freqs[n] = freqs.putIfAbsent(n, () => 0) + 1;\n    }\n    var goodVals = freqs.keys.where((k) => freqs[k] >= k).toList();\n    return goodVals.isEmpty? -1 : max(goodVals);\n}\n",
            "List<int> strangeSortList(List<int> lst) {\n    var sl = lst.toList();\n    sl.sort();\n    var result = <int>[];\n    var left = 0;\n    var right = sl.length - 1;\n    while (left <= right) {\n        result.add(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.add(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        var s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(List<int> q, int w) {\n    if (q.isEmpty) {\n        return false;\n    }\n    bool isPalin = q.every((e) => e == q.last);\n    int total = q.reduce((a, b) => a + b);\n    return isPalin && total <= w;\n}\n",
            "int smallestChange(List<int> arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.length ~/ 2; i++) {\n        if (arr[i]!= arr[arr.length - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;\n}\n",
            "List<String> totalMatch(List<String> lst1, List<String> lst2) {\n    var cnt1 = lst1.fold(0, (a, b) => a + b.length);\n    var cnt2 = lst2.fold(0, (a, b) => a + b.length);\n    return lst1 if cnt1 <= cnt2 else lst2;\n}\n",
            "bool isMultiplyPrime(int a) {\n    if (a < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(a).floor(); i++) {\n        if (a % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    var tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    return (a.abs() * a.abs() * a.abs()) == a;\n}\n",
            "int hexKey(String num) {\n    return num.length - num.replaceAll(RegExp(r\"2357BD\"), \"\").length;\n}\n",
            "String decimalToBinary(int dec) {\n    return \"db${dec.toRadixString(2)}db\";\n}\n",
            "bool isHappy(String s) {\n    for (int i = 0; i < s.length - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "List<String> numericalLetterGrade(List<double> grades) {\n    var result = <String>[];\n    for (double g in grades) {\n        if (g == 4.0) {\n            result.add(\"A+\");\n        } else if (g > 3.7) {\n            result.add(\"A\");\n        } else if (g > 3.3) {\n            result.add(\"A-\");\n        } else if (g > 3.0) {\n            result.add(\"B+\");\n        } else if (g > 2.7) {\n            result.add(\"B\");\n        } else if (g > 2.3) {\n            result.add(\"B-\");\n        } else if (g > 2.0) {\n            result.add(\"C+\");\n        } else if (g > 1.7) {\n            result.add(\"C\");\n        } else if (g > 1.3) {\n            result.add(\"C-\");\n        } else if (g > 1.0) {\n            result.add(\"D+\");\n        } else if (g > 0.7) {\n            result.add(\"D\");\n        } else if (g > 0.0) {\n            result.add(\"D-\");\n        } else {\n            result.add(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(String s) {\n    var length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (var i = 2; i <= sqrt(length).floor(); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * (10 ** (n - 2));\n}\n",
            "String solve(int n) {\n    return n.toRadixString(2).substring(2);\n}\n",
            "int add(List<int> lst) {\n    return lst.where((x, i) => i % 2 == 1 && x % 2 == 0).fold(0, (a, b) => a + b);\n}\n",
            "String antiShuffle(String s) {\n    var words = s.split(\" \").map((word) => word.runes.toList()..sort()).toList();\n    return words.join(\" \");\n}\n",
            "List<List<int>> getRow(List<List<int>> lst, int x) {\n    var coords = [];\n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                coords.add([i, j]);\n            }\n        }\n    }\n    return coords.sort((a, b) => a[0] == b[0]? a[1].compareTo(b[1]) : a[0].compareTo(b[0]));\n}\n",
            "List<int> sortArray(List<int> arr) {\n    if (arr.isEmpty) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 == 0) {\n        return arr.reversed.toList();\n    } else {\n        return arr.toList();\n    }\n}\n",
            "String encrypt(String s) {\n    var result = <int>[];\n    for (int i = 0; i < s.length; i++) {\n        var shifted = s.codeUnitAt(i) + 4;\n        if (shifted > 122) {\n            shifted -= 26;\n        }\n        result.add(shifted);\n    }\n    return String.fromCharCodes(result);\n}\n",
            "int? nextSmallest(List<int> lst) {\n    var sl = lst.toSet().toList();\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}\n",
            "int isBored(String s) {\n    var sentences = s.split(RegExp(r'[.!?]\\s*'));\n    return sentences.where((sentence) => sentence.startsWith('I ')).length;\n}\n",
            "bool anyInt(Object x, Object y, Object z) {\n    return (x is int && y is int && z is int) &&\n        (x + y == z || x + z == y || y + z == x);\n}\n",
            "String encode(String message) {\n    var vowels = \"aeiouAEIOU\";\n    var result = <String>[];\n    for (var ch in message) {\n        if (ch.isLetter) {\n            var ch1 = ch.toUpperCase() if ch.isLower else ch.toLowerCase;\n            if (ch1 in vowels) {\n                ch1 = String.fromCharCode(ch1.codeUnitAt(0) + 2);\n            }\n            result.add(ch1);\n        } else {\n            result.add(ch);\n        }\n    }\n    return result.join();\n}\n",
            "int skjkasdkd(List<int> lst) {\n    var primes = lst.where((n) => isPrime(n)).toList();\n    if (primes.isEmpty) {\n        return 0;\n    }\n    var largest = primes.reduce((a, b) => a.compareTo(b) > 0? a : b);\n    return largest.toString().split('').map((digit) => int.parse(digit)).reduce((a, b) => a + b);\n}\n",
            "bool checkDictCase(Map<String,String> d) {\n    return d.isEmpty || (d.keys.every((c) => c.toLowerCase() == c) || d.keys.every((c) => c.toUpperCase() == c));\n}\n",
            "List<int> countUpTo(int n) {\n    var primes = <int>[];\n    for (int num = 2; num <= n; num++) {\n        if (primes.every((p) => num % p!= 0)) {\n            primes.add(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    return (a.abs() % 10) * (b.abs() % 10);\n}\n",
            "int countUpper(String s) {\n    var vowels = \"AEIOU\";\n    return s.split(\"\").where((c, i) => i % 2 == 0 && vowels.contains(c)).length;\n}\n",
            "int closestInteger(String value) {\n    var num = double.parse(value);\n    if (num >= 0) {\n        return num.round();\n    } else {\n        return num.floor();\n    }\n}\n",
            "List<int> makeAPile(int n) {\n    return List.generate(n, (i) => n + 2 * i);\n}\n",
            "List<String> wordsString(String s) {\n    return s.split(RegExp(r\"[, ]\")).where((w) => w.length > 0).toList();\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return y - 1;\n}\n",
            "String? roundedAvg(int n, int m) {\n    if (n > m) {\n        return null;\n    }\n    var rAvg = (m + n) / 2.0 + 0.5;\n    return rAvg.toInt().toRadixString(2);\n}\n",
            "bool allDigitsOdd(String s) {\n    return s.runes.every((int rune) => rune % 2!= 0);\n}\nList<int> uniqueDigits(List<int> x) {\n    return x.where((int num) => allDigitsOdd(num.toString())).toList();\n}\n",
            "List<String> byLength(List<int> arr) {\n    var digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    var sortedArr = arr.where((x) => 1 <= x && x <= 9).toList()..sort((a, b) => b.compareTo(a));\n    return digitNames.sublist(0, sortedArr.length);\n}\n",
            "List<int> f(int n) {\n    var nums = List<int>.generate(n + 1, (i) => i);\n    return nums.map((i) => i % 2!= 0? nums.sublist(0, i).reduce((x, y) => x + y) : nums.sublist(0, i).reduce((x, y) => x * y, 1)).toList();\n}\n",
            "bool isPalindrome(String txt) {\n    return txt == txt.reversed.toString();\n}\nList<int> evenOddPalindrome(int n) {\n    var cnt = [0, 0];\n    for (int i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "int digitsSum(int n) {\n    var nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split('').map((d) => int.parse(d)).reduce((a, b) => a + b);\n    } else {\n        return int.parse(nStr.substring(0, 2)) * 2 + digitsSum(n.abs());\n    }\n}\nint countNums(List<int> arr) {\n    return arr.where((n) => digitsSum(n) > 0).length;\n}\n",
            "bool moveOneBall(List<int> arr) {\n    if (arr.isEmpty) {\n        return true;\n    }\n    var sortedArr = arr.toList()..sort();\n    for (int i = 0; i < arr.length; i++) {\n        if (arr.sublist(i) == sortedArr.sublist(0, arr.length - i) && arr.sublist(0, i) == sortedArr.sublist(arr.length - i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "String canExchange(List<int> lst1, List<int> lst2) {\n    var oddCnt = lst1.where((num) => num % 2!= 0).length;\n    var evenCnt = lst2.where((num) => num % 2 == 0).length;\n    return \"YES\" if evenCnt >= oddCnt else \"NO\";\n}\n",
            "Map<String,int> histogram(String test) {\n    var freq = <String,int>{};\n    var words = test.split(\" \").where((w) => w.length > 0);\n    for (var w in words) {\n        freq[w] = freq.putIfAbsent(w, () => 0) + 1;\n    }\n    var result = <String,int>{};\n    if (freq.isNotEmpty) {\n        var maxFreq = freq.values.reduce(max);\n        for (var k in freq.keys) {\n            if (freq[k] == maxFreq) {\n                result[k] = freq[k];\n            }\n        }\n    }\n    return result;\n}\n",
            "bool isPalindrome(String s) {\n    return s == s.reversed.toString();\n}\nList<String> reverseDelete(String s, String c) {\n    var s1 = s.replaceAll(RegExp(r\"[$c]\"), \"\");\n    return [s1, \"yes\" if isPalindrome(s1) else \"no\"];\n}\n",
            "List<String> oddCount(List<String> lst) {\n    var result = <String>[];\n    for (var num in lst) {\n        var n = lst.fold(0, (a, b) => a + (b.codeUnits.where((c) => c % 2 == 1).length));\n        var rs = \"the number of odd elements in the string i of the input.\";\n        result.add(rs.replaceAll(\"i\", n.toString()));\n    }\n    return result;\n}\n",
            "int minSubArraySum(List<int> nums) {\n    var minSum = 0;\n    var curSum = 0;\n    for (int n in nums) {\n        curSum = min(curSum + n, 0);\n        minSum = min(curSum, minSum);\n    }\n    if (minSum == 0) {\n        minSum = min(nums);\n    }\n    return minSum;\n}\n",
            "int maxFill(List<List<int>> grid, int capacity) {\n    return grid.map((arr) => arr.fold(0, (sum, num) => sum + num)).map((sum) => sum.ceil() / capacity).fold(0, (sum, num) => sum + num);\n}\n",
            "List<int> sortArray(List<int> arr) {\n    return arr.toList()..sort((a, b) => (countOnes(a), a).compareTo((countOnes(b), b)));\n}\nint countOnes(int num) {\n    return num.toRadixString(2).length - num.toRadixString(2).replaceFirst(\"0*\", \"\").length;\n}\n",
            "List<String> selectWords(String s, int n) {\n    var consonants = \"bcdfghjklmnpqrstvwxyz\";\n    var words = s.split(\" \");\n    return words.where((w) => w.length > 0).where((w) => w.toLowerCase().split(\"\").where((c) => consonants.contains(c)).length == n).toList();\n}\n",
            "String getClosestVowel(String word) {\n    var vowels = \"aeiouAEIOU\";\n    for (var i = word.length - 2; i >= 0; i -= 1) {\n        if (word[i] in vowels && word[i - 1] not in vowels && word[i + 1] not in vowels) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "String matchParens(List<String> lst) {\n    var s1 = lst[0] + lst[1];\n    var s2 = lst[1] + lst[0];\n    return \"Yes\" if (check(s1) || check(s2)) else \"No\";\n}\nbool check(String s) {\n    var depth = 0;\n    for (var ch in s) {\n        if (ch == \"(\") {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return true if depth == 0 else false;\n}\n",
            "List<int> maximum(List<int> arr, int k) {\n    return arr.length == 0? [] : arr.sublist(arr.length - k);\n}\n",
            "int solution(List<int> lst) {\n    return lst.where((x, i) => i % 2 == 0 && x % 2!= 0).fold(0, (a, b) => a + b);\n}\n",
            "int addElements(List<int> arr, int k) {\n    return arr.sublist(0, k).where((n) => n.toString().length <= 2).fold(0, (a, b) => a + b);\n}\n",
            "List<int> getOddCollatz(int n) {\n    var collatz = <int>[1];\n    while (n!= 1) {\n        if (n % 2!= 0) {\n            collatz.add(n);\n            n = 3 * n + 1;\n        } else {\n            n = n ~/ 2;\n        }\n    }\n    return collatz.toList()..sort();\n}\n",
            "bool validDate(String date) {\n    if (date.length!= 10 || date[2]!= '-' || date[5]!= '-') {\n        return false;\n    }\n    int m = int.parse(date.substring(0, 2));\n    int d = int.parse(date.substring(3, 5));\n    if (m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31) {\n        return true;\n    }\n    if (m in [4, 6, 9, 11] && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "List<String> splitWords(String txt) {\n    if (txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [txt.length.toString()];\n    }\n}\n",
            "bool isSorted(List<int> lst) {\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i-1] > lst[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).toInt(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nString intersection(List<int> interval1, List<int> interval2) {\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    return \"YES\" if length > 0 && isPrime(length) else \"NO\";\n}\n",
            "int? prodSigns(List<int> arr) {\n    if (arr.isEmpty) {\n        return null;\n    }\n    if (arr.contains(0)) {\n        return 0;\n    }\n    var sign = -1;\n    if (arr.where((n) => n < 0).length % 2 == 1) {\n        sign = 1;\n    }\n    return sign * arr.fold(0, (prev, curr) => prev + curr.abs());\n}\n",
            "List<int> minPath(List<List<int>> grid, int k) {\n    var n = grid.length;\n    var minVal = n * n + 1;\n    for (var i = 0; i < n; i++) {\n        for (var j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                var temp = [];\n                if (i!= 0) {\n                    temp.add(grid[i - 1][j]);\n                }\n                if (j!= 0) {\n                    temp.add(grid[i][j - 1]);\n                }\n                if (i!= n - 1) {\n                    temp.add(grid[i + 1][j]);\n                }\n                if (j!= n - 1) {\n                    temp.add(grid[i][j + 1]);\n                }\n                minVal = min(temp);\n            }\n        }\n    }\n    var result = [];\n    for (var i = 0; i < k; i++) {\n        result.add(1 if i % 2 == 0 else minVal);\n    }\n    return result;\n}\n",
            "List<int> tri(int n) {\n    if (n == 0) {\n        return [1];\n    }\n    var seq = [1, 3];\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq.add(i ~/ 2 + 1);\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) ~/ 2);\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    var odds = <int>[];\n    for (var d in n.toString()) {\n        if (int.parse(d) % 2 == 1) {\n            odds.add(int.parse(d));\n        }\n    }\n    return odds.isEmpty? 0 : odds.reduce((x, y) => x * y);\n}\n",
            "bool isNested(String s) {\n    var openIdx = <int>[];\n    var closeIdx = <int>[];\n    for (int i = 0; i < s.length; i++) {\n        if (s[i] == '[') {\n            openIdx.add(i);\n        } else if (s[i] == ']') {\n            closeIdx.add(i);\n        }\n    }\n    closeIdx.reverse();\n    var cnt = 0;\n    var i = 0;\n    var l = closeIdx.length;\n    for (int idx in openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "int sumSquares(List<double> lst) {\n    return lst.map((n) => pow(n.ceil(), 2)).reduce((a, b) => a + b);\n}\n",
            "bool checkIfLastCharIsALetter(String txt) {\n    if (txt.isEmpty) {\n        return false;\n    }\n    var last = txt.substring(txt.lastIndexOf(' ') + 1);\n    return last.length == 1 && last[0].isLetter();\n}\n",
            "int canArrange(List<int> arr) {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    var idx = arr.asMap().keys.where((i) => arr[i] < arr[i - 1]).toList();\n    return idx.isEmpty? -1 : idx.last;\n}\n",
            "List<int?> largestSmallestIntegers(List<int> lst) {\n    var neg = lst.where((i) => i < 0).toList();\n    var pos = lst.where((i) => i > 0).toList();\n    var maxNeg = neg.isEmpty? null : neg.reduce(max);\n    var minPos = pos.isEmpty? null : pos.reduce(min);\n    return [maxNeg, minPos];\n}\n",
            "double? compareOne(Object a, Object b) {\n    if (a is String) {\n        return double.parse(a.replaceAll(',', '.'));\n    } else if (a is int) {\n        return a.toDouble();\n    } else if (a is double) {\n        return a;\n    }\n    throw RuntimeError(\"Type Error\");\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    int fact = 1;\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "String fixSpaces(String txt) {\n    return txt.replaceAll(RegExp(r\"\\s{3,}\"), \"-\").replaceAll(\" \", \"_\");\n}\n",
            "String fileNameCheck(String fileName) {\n    var suf = [\"txt\", \"exe\", \"dll\"];\n    var lst = fileName.split(\".\");\n    if (lst.length!= 2 ||!lst[1] in suf || lst[0].length == 0 ||!lst[0][0].isLetter() || lst[0].where((x) => x.isDigit()).length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "int sumSquares(List<int> lst) {\n    var result = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            result += pow(lst[i], 2);\n        } else if (i % 4 == 0) {\n            result += pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "String wordsInSentence(String sentence) {\n    var words = sentence.split(\" \");\n    return \" \".join([w for w in words if is_prime(w.length)]);\n}\n",
            "bool simplify(String x, String n) {\n    var xs = x.split(\"/\");\n    var ns = n.split(\"/\");\n    var num = int.parse(xs[0]) * int.parse(ns[0]);\n    var den = int.parse(xs[1]) * int.parse(ns[1]);\n    return num % den == 0;\n}\n",
            "int digitsSum(int n) {\n    var nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split('').map((d) => int.parse(d)).reduce((a, b) => a + b);\n    } else {\n        return int.parse(nStr.substring(0, 2)) * 2 + digitsSum(n.abs());\n    }\n}\nList<int> orderByPoints(List<int> nums) {\n    return nums.toList()..sort((a, b) => digitsSum(a).compareTo(digitsSum(b)));\n}\n",
            "int specialFilter(List<int> nums) {\n    return nums.where((n) => n > 10 && n % 2 == 1 && n.toString()[0] == '1' || n.toString()[0] == '3' || n.toString()[0] == '5' || n.toString()[0] == '7' || n.toString()[0] == '9').length;\n}\n",
            "int getMaxTriples(int n) {\n    var c = [0, 0, 0];\n    for (int i = 1; i <= n; i++) {\n        var a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) ~/ 6;\n}\n",
            "List<String> bf(String planet1, String planet2) {\n    var names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (planet1 == null || planet2 == null ||!names.contains(planet1) ||!names.contains(planet2)) {\n        return [];\n    }\n    var l = names.indexOf(planet1);\n    var r = names.indexOf(planet2);\n    if (l > r) {\n        l, r = r, l;\n    }\n    if (l == r) {\n        return [];\n    }\n    return names.sublist(l + 1, r);\n}\n",
            "List<String> sortedListSum(List<String> lst) {\n    var result = <String>[];\n    for (var s in lst) {\n        if (s.length % 2 == 0) {\n            result.add(s);\n        }\n    }\n    result.sort((a, b) => a.length.compareTo(b.length));\n    return result;\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= sqrt(n).floor(); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(List<double> lst) {\n    return lst.where((n) => n >= 0 && n % 2 == 1).map((n) => n * n).reduce((a, b) => a + b);\n}\n",
            "List<int> compare(List<int> game, List<int> guess) {\n    return List.generate(game.length, (i) => (game[i] - guess[i]).abs());\n}\n",
            "String strongestExtension(String className, List<String> extensions) {\n    var maxS = double.negativeInfinity;\n    var maxExt = \"\";\n    for (var ext in extensions) {\n        var upper = ext.where((c) => c.isUpper()).length;\n        var lower = ext.where((c) => c.isLower()).length;\n        var s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return \"${className}.${maxExt}\";\n}\n",
            "bool cycpatternCheck(String a, String b) {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (int i = 0; i < b.length; i++) {\n        if (b.substring(i) + b.substring(0, i) in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "List<int> evenOddCount(int num) {\n    var ds = num.abs().toString();\n    var even = ds.split('').where((d) => d.codeUnitAt(0) % 2 == 0).length;\n    return [even, ds.length - even];\n}\n",
            "String intToMiniRoman(int num) {\n    var values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    var numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var res = <String>[];\n    for (int i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.add(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join();\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    return (a * a + b * b == c * c);\n}\n",
            "String findMax(List<String> words) {\n    var maxCnt = 0;\n    var maxW = \"\";\n    for (var w in words) {\n        var cnt = w.toSet().length;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt == maxCnt) {\n            maxW = maxW.compareTo(w) < 0? maxW : w;\n        }\n    }\n    return maxW;\n}\n",
            "List<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "int doAlgebra(List<String> operators, List<int> operands) {\n    var ops = operators.toList();\n    var nums = operands.toList();\n    var i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]);\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] ~/ nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "String solve(String s) {\n    var result = <String>[];\n    for (var ch in s) {\n        if (ch.isLetter) {\n            result.add(ch.isUpperCase? ch.toLowerCase() : ch.toUpperCase());\n        } else {\n            result.add(ch);\n        }\n    }\n    return result.join();\n}\n",
            "String? stringToMd5(String txt) {\n    if (txt == null) {\n        return null;\n    }\n    var md5_hash = md5.convert(utf8.encode(txt));\n    return md5_hash.toString();\n}\n",
            "List<int> generateIntegers(int a, int b) {\n    var lower = max(2, min(a, b));\n    var upper = min(8, max(a, b));\n    return List.generate(upper - lower + 1, (i) => i + lower, growable: false)\n       .where((i) => i % 2 == 0)\n       .toList();\n}\n"
        ],
        "go": [
            "func HasCloseElements(numbers []float64, threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func SeparateParenGroups(parenString string) []string {\n    groups := []string{}\n    stk := []rune{}\n    currentGroup := \"\"\n    parens := strings.Replace(parenString, \" \", \"\", -1)\n    for _, ch := range parens {\n        if ch == \"(\" {\n            stk = append(stk, ch)\n            currentGroup += string(ch)\n        } else if ch == \")\" {\n            stk = stk[:len(stk)-1]\n            currentGroup += string(ch)\n            if len(stk) == 0 {\n                groups = append(groups, currentGroup)\n                currentGroup = \"\"\n        }\n    }\n    return groups\n}\n",
            "func TruncateNumber(num float64) float64 {\n    return math.Trunc(num)\n}\n",
            "func BelowZero(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func MeanAbsoluteDeviation(numbers []float64) float64 {\n    mean := float64(0)\n    for _, n := range numbers {\n        mean += n\n    }\n    mean /= float64(len(numbers))\n    deviation := float64(0)\n    for _, n := range numbers {\n        deviation += math.Abs(n - mean)\n    }\n    return deviation / float64(len(numbers))\n}\n",
            "func Intersperse(numbers []int, delimiter int) []int {\n    result := make([]int, 0)\n    for i := 0; i < len(numbers); i++ {\n        if i!= 0 {\n            result = append(result, delimiter)\n        }\n        result = append(result, numbers[i])\n    }\n    return result\n}\n",
            "func ParseNestedParens(parenString string) []int {\n    result := []int{}\n    parenGroups := strings.Split(parenString, \" \")\n    for _, group := range parenGroups {\n        maxDepth := 0\n        depth := 0\n        for _, ch := range group {\n            if ch == \"(\" {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if ch == \")\" {\n                depth -= 1\n        }\n        result = append(result, maxDepth)\n    }\n    return result\n}\n",
            "func FilterBySubstring(strs []string, substring string) []string {\n    return []string{s for s := range strs if strings.Contains(s, substring)}\n}\n",
            "func SumProduct(numbers []int) []int {\n    return []int{sum(numbers), reduce(func(x, y int) int { return x * y }, numbers, 1)}\n}\n",
            "func RollingMax(numbers []int) []int {\n    maxSoFar := float64(-math.Inf(1))\n    result := make([]int, len(numbers))\n    for i, num := range numbers {\n        maxSoFar = math.Max(maxSoFar, float64(num))\n        result[i] = int(maxSoFar)\n    }\n    return result\n}\n",
            "func MakePalindrome(s string) string {\n    if isPalindrome(s) {\n        return s\n    }\n    for i := 0; i < len(s); i++ {\n        if isPalindrome(s[i:]) {\n            return s + s[:i][::-1]\n        }\n    }\n    return \"\"\n}\n",
            "func StringXor(a string, b string) string {\n    return strings.Join(strings.Split(a, \"\"), \"\", strings.Split(b, \"\", -1))\n}\n",
            "func Longest(strs []string) *string {\n    if len(strs) == 0 {\n        return nil\n    }\n    longest_s := strs[0]\n    for _, s := range strs {\n        if len(s) > len(longest_s) {\n            longest_s = s\n        }\n    }\n    return &longest_s\n}\n",
            "func GreatestCommonDivisor(a int, b int) int {\n    if b == 0 {\n        return a\n    }\n    return GreatestCommonDivisor(b, a%b)\n}\n",
            "func AllPrefixes(s string) []string {\n    prefixes := make([]string, 0)\n    for i := 0; i < len(s); i++ {\n        prefixes = append(prefixes, s[:i+1])\n    }\n    return prefixes\n}\n",
            "func StringSequence(n int) string {\n    return strings.Join(strings.Fields(fmt.Sprint(n+1)), \" \")\n}\n",
            "func CountDistinctCharacters(s string) int {\n    return len(map[rune]struct{}(s))\n}\n",
            "func ParseMusic(musicString string) []int {\n    durations := map[string]int{\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    }\n    notes := strings.Split(musicString, \" \")\n    return []int{durations[note] for note in notes}\n}\n",
            "func HowManyTimes(s string, substring string) int {\n    return strings.Count(s, substring)\n}\n",
            "func SortNumbers(numbers string) string {\n    numDict := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    numList := strings.Fields(numbers)\n    for i, v := range numList {\n        if _, ok := numDict[v];!ok {\n            numList[i] = \"\"\n        }\n    }\n    sort.Strings(numList)\n    return strings.Join(numList, \" \")\n}\n",
            "func FindClosestElements(numbers []float64) []float64 {\n    sortedNumbers := sort.Float64s(numbers)\n    minDiff := math.Inf(1)\n    closestPair := []float64{}\n    for i := 1; i < len(sortedNumbers); i++ {\n        diff := sortedNumbers[i] - sortedNumbers[i - 1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = []float64{sortedNumbers[i - 1], sortedNumbers[i]}\n        }\n    }\n    return closestPair\n}\n",
            "func RescaleToUnit(numbers []float64) []float64 {\n    minNum := math.Inf(1)\n    maxNum := math.Inf(-1)\n    for _, num := range numbers {\n        if num < minNum {\n            minNum = num\n        }\n        if num > maxNum {\n            maxNum = num\n        }\n    }\n    if minNum == maxNum {\n        return make([]float64, len(numbers))\n    }\n    return make([]float64, len(numbers)).apply(func(i int) float64 {\n        return (numbers[i] - minNum) / (maxNum - minNum)\n    })\n}\n",
            "func FilterIntegers(values []interface{}) []int {\n    result := []int{}\n    for _, v := range values {\n        if _, ok := v.(int); ok {\n            result = append(result, v.(int))\n        }\n    }\n    return result\n}\n",
            "func StrLength(s string) int {\n    return len(s)\n}\n",
            "func LargestDivisor(n int) int {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "func Factorize(n int) []int {\n    factors := []int{}\n    divisor := 2\n    for divisor <= n {\n        if n % divisor == 0 {\n            factors = append(factors, divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "func RemoveDuplicates(numbers []int) []int {\n    counts := make(map[int]int)\n    for _, num := range numbers {\n        counts[num] = counts.get(num, 0) + 1\n    }\n    res := make([]int, 0)\n    for _, num := range numbers {\n        if counts[num] == 1 {\n            res = append(res, num)\n        }\n    }\n    return res\n}\n",
            "func FlipCase(s string) string {\n    flipped := []byte(s)\n    for i, ch := range flipped {\n        if!unicode.IsLetter(ch) {\n            continue\n        }\n        if unicode.IsLower(ch) {\n            flipped[i] = unicode.ToUpper(ch)\n        } else {\n            flipped[i] = unicode.ToLower(ch)\n        }\n    }\n    return string(flipped)\n}\n",
            "func Concatenate(strs []string) string {\n    return strings.Join(strs, \"\")\n}\n",
            "func FilterByPrefix(strs []string, prefixStr string) []string {\n    result := []string{}\n    for _, s := range strs {\n        if strings.HasPrefix(s, prefixStr) {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
            "func GetPositive(l []int) []int {\n    result := []int{}\n    for _, num := range l {\n        if num > 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= math.Floor(math.Sqrt(float64(n))); i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Poly(xs []int, x float64) float64 {\n    res := 0.0\n    for i := 0; i < len(xs); i++ {\n        res += float64(xs[i]) * math.Pow(x, float64(i))\n    }\n    return res\n}\nfunc FindZero(xs []int) float64 {\n    x1, x2 := 1.0, -1.0\n    for Poly(xs, x1) * Poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    for math.Abs(x1 - x2) > 1e-10 {\n        mid := (x1 + x2) / 2\n        if Poly(xs, mid) == 0 {\n            return mid\n        } else if Poly(xs, mid) * Poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "func SortThird(l []int) []int {\n    sortedThird := make([]int, 0)\n    for i := 0; i < len(l); i += 3 {\n        sortedThird = append(sortedThird, l[i])\n    }\n    return append(sortedThird, l[len(l)-1])\n}\n",
            "func ListUnique(l []int) []int {\n    return sorted(list(set(l)))\n}\n",
            "func MaxElement(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n    return l[0]\n}\n",
            "func FizzBuzz(n int) int {\n    cnt := 0\n    for i := 0; i < n; i++ {\n        if i%11 == 0 || i%13 == 0 {\n            cnt += strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n    return cnt\n}\n",
            "func SortEven(l []int) []int {\n    sortedEven := make([]int, 0)\n    for i, e := range l {\n        if i%2 == 0 {\n            sortedEven = append(sortedEven, e)\n        }\n    }\n    return append(sortedEven, l[1::2]...)\n}\n",
            "func EncodeCyclic(s string) string {\n    return EncodeCyclic(EncodeCyclic(s))\n}\nfunc DecodeCyclic(s string) string {\n    return DecodeCyclic(EncodeCyclic(s))\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n)))); i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc PrimeFib(n int) int {\n    f := []int{0, 1}\n    cnt := 0\n    for cnt < n {\n        f = []int{f[1], f[0] + f[1]}\n        if IsPrime(f[1]) {\n            cnt += 1\n        }\n    }\n    return f[1]\n}\n",
            "func TriplesSumToZero(l []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func CarRaceCollision(n int) int {\n    return n * n\n}\n",
            "func IncrList(l []int) []int {\n    result := make([]int, len(l))\n    for i, v := range l {\n        result[i] = v + 1\n    }\n    return result\n}\n",
            "func PairsSumToZero(l []int) bool {\n    seen := make(map[int]bool)\n    for _, num := range l {\n        if _, ok := seen[-num]; ok {\n            return true\n        }\n        seen[num] = true\n    }\n    return false\n}\n",
            "func ChangeBase(x int, bas int) string {\n    if x == 0 {\n        return \"0\"\n    }\n    digits := []string{}\n    for x > 0 {\n        digits = append(digits, strconv.Itoa(x%bas))\n        x /= bas\n    }\n    return strings.Join(digits[::-1], \"\")\n}\n",
            "func TriangleArea(a int, h int) float64 {\n    return float64(a) * float64(h) / 2\n}\n",
            "func Fib4(n int) int {\n    fib := []int{0, 0, 2, 0}\n    for i := 4; i <= n; i++ {\n        fib[i%4] = fib[0] + fib[1] + fib[2] + fib[3]\n        fib[0], fib[1], fib[2], fib[3] = fib[1], fib[2], fib[3], fib[0] + fib[1] + fib[2] + fib[3]\n    }\n    return fib[n%4]\n}\n",
            "func Median(l []float64) float64 {\n    sl := sort.Float64s(l)\n    if len(l) % 2!= 0 {\n        return sl[len(l) / 2]\n    }\n    return (sl[len(l) / 2] + sl[len(l) / 2 - 1]) / 2\n}\n",
            "func IsPalindrome(txt string) bool {\n    return txt == strings.Reverse(txt)\n}\n",
            "func Modp(n int, p int) int {\n    ret := 1\n    for _ := 0; _ < n; _++ {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func EncodeShift(s string) string {\n    result := make([]byte, len(s))\n    for i, ch := range s {\n        result[i] = byte(((ord(ch) - 97 + 5) % 26) + 97)\n    }\n    return string(result)\n}\nfunc DecodeShift(s string) string {\n    result := make([]byte, len(s))\n    for i, ch := range s {\n        result[i] = byte(((ord(ch) - 97 + 21) % 26) + 97)\n    }\n    return string(result)\n}\n",
            "func RemoveVowels(txt string) string {\n    return strings.Map(func(r rune) rune {\n        if strings.ContainsRune(\"aeiouAEIOU\", r) {\n            return -1\n        }\n        return r\n    }, txt)\n}\n",
            "func BelowThreshold(l []int, t int) bool {\n    for _, x := range l {\n        if x >= t {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Add(x int, y int) int {\n    return x + y\n}\n",
            "func SameChars(s0 string, s1 string) bool {\n    return len(s0) == len(s1) && len(s0) == len(set.NewString(s0).Intersection(set.NewString(s1)).List())\n}\n",
            "func Fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return Fib(n - 1) + Fib(n - 2)\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == \"<\" {\n            depth += 1\n        } else if b == \">\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Monotonic(l []int) bool {\n    diff := make([]int, len(l)-1)\n    for i := 0; i < len(l)-1; i++ {\n        diff[i] = l[i+1] - l[i]\n    }\n    return all(x <= 0 for x in diff) || all(x >= 0 for x in diff)\n}\n",
            "func Common(l1 []int, l2 []int) []int {\n    return sorted(list(set(l1) & set(l2)))\n}\n",
            "func LargestPrimeFactor(n int) int {\n    i := 2\n    for i*i <= n {\n        if n%i == 0 {\n            n /= i\n        } else {\n            i += 1\n        }\n    }\n    return n\n}\n",
            "func SumToN(n int) int {\n    return n * (n + 1) / 2\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == \"(\" {\n            depth += 1\n        } else if b == \")\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Derivative(xs []int) []int {\n    result := make([]int, len(xs))\n    for i := 1; i < len(xs); i++ {\n        result[i] = xs[i] * i\n    }\n    return result\n}\n",
            "func Fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    }\n    a, b, c := 0, 0, 1\n    for n > 2 {\n        a, b, c = b, c, a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "func VowelsCount(s string) int {\n    vowels := \"aeiou\"\n    cnt := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'y' && i == len(s) - 1 {\n            cnt++\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        } else if s[i] == 'y' {\n            continue\n        }",
            "func CircularShift(x int, shift int) string {\n    xStr := strconv.Itoa(x)\n    if shift > len(xStr) {\n        return xStr[len(xStr)-shift:] + xStr[:len(xStr)-shift]\n    }\n    return xStr[len(xStr)-shift:] + xStr[:len(xStr)-shift]\n}\n",
            "func DigitSum(s string) int {\n    return sum(int(c) for c in s if c >= 'A' && c <= 'Z')\n}\n",
            "func FruitDistribution(s string, n int) int {\n    words := strings.Split(s, \" \")\n    apples, _ := strconv.Atoi(words[words.Index(\"apples\")-1])\n    oranges, _ := strconv.Atoi(words[words.Index(\"oranges\")-1])\n    return n - apples - oranges\n}\n",
            "func Pluck(arr []int) []int {\n    evens := []int{}\n    for _, n := range arr {\n        if n%2 == 0 {\n            evens = append(evens, n)\n        }\n    }\n    if len(evens) == 0 {\n        return []\n    }\n    min_even := min(evens)\n    return []int{min_even, arr[evens.index(min_even)]}\n}\n",
            "func Search(lst []int) int {\n    freqs := make(map[int]int)\n    for _, n := range lst {\n        freqs[n] = freqs[n] + 1\n    }\n    goodVals := []int{}\n    for k, v := range freqs {\n        if v >= k {\n            goodVals = append(goodVals, k)\n        }\n    }\n    return max(goodVals, -1)\n}\n",
            "func StrangeSortList(lst []int) []int {\n    result := make([]int, 0)\n    for i := 0; i < len(lst); i += 2 {\n        result = append(result, lst[i])\n    }\n    for i := 1; i < len(lst); i += 2 {\n        result = append(result, lst[i])\n    }\n    return result\n}\n",
            "func TriangleArea(a int, b int, c int) float64 {\n    if a+b > c && a+c > b && b+c > a {\n        s := (a + b + c) / 2.0\n        return math.Sqrt(s * (s - a) * (s - b) * (s - c))\n    }\n    return -1.0\n}\n",
            "func WillItFly(q []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n    isPalin := true\n    for i := 0; i < len(q)/2; i++ {\n        if q[i]!= q[len(q)-i-1] {\n            isPalin = false\n            break\n        }\n    }\n    total := 0\n    for _, e := range q {\n        total += e\n    }\n    return isPalin && total <= w\n}\n",
            "func SmallestChange(arr []int) int {\n    ans := 0\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i]!= arr[len(arr) - i - 1] {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "func TotalMatch(lst1 []string, lst2 []string) []string {\n    if len(lst1) > len(lst2) {\n        return lst1\n    }\n    return lst2\n}\n",
            "func IsMultiplyPrime(a int) bool {\n    if a < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(a))); i++ {\n        if a%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func IsSimplePower(x int, n int) bool {\n    if n < 2 {\n        return x == n\n    }\n    tmp := 1\n    for tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "func IsCube(a int) bool {\n    return math.Pow(float64(a), 1.0/3.0) == math.Floor(math.Pow(float64(a), 1.0/3.0))\n}\n",
            "func HexKey(num string) int {\n    return len([x for x in num if x in \"2357BD\"])\n}\n",
            "func DecimalToBinary(dec int) string {\n    return fmt.Sprintf(\"db%sdb\", strconv.FormatInt(int64(dec), 2))\n}\n",
            "func IsHappy(s string) bool {\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func NumericalLetterGrade(grades []float64) []string {\n    result := make([]string, len(grades))\n    for i, g := range grades {\n        if g == 4.0 {\n            result[i] = \"A+\"\n        } else if g > 3.7 {\n            result[i] = \"A\"\n        } else if g > 3.3 {\n            result[i] = \"A-\"\n        } else if g > 3.0 {\n            result[i] = \"B+\"\n        } else if g > 2.7 {\n            result[i] = \"B\"\n        } else if g > 2.3 {\n            result[i] = \"B-\"\n        } else if g > 2.0 {\n            result[i] = \"C+\"\n        } else if g > 1.7 {\n            result[i] = \"C\"\n        } else if g > 1.3 {\n            result[i] = \"C-\"\n        } else if g > 1.0 {\n            result[i] = \"D+\"\n        } else if g > 0.7 {\n            result[i] = \"D\"\n        } else if g > 0.0 {\n            result[i] = \"D-\"\n        } else {\n            result[i] = \"E\"\n        }\n    }\n    return result\n}\n",
            "func PrimeLength(s string) bool {\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; math.Floor(math.Sqrt(float64(length))) >= float64(i); i++ {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func StartsOneEnds(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * (10 ** (n - 2))\n}\n",
            "func Solve(n int) string {\n    return fmt.Sprintf(\"%b\", n)\n}\n",
            "func Add(lst []int) int {\n    result := 0\n    for i, x := range lst {\n        if i%2 == 1 && x%2 == 0 {\n            result += x\n        }\n    }\n    return result\n}\n",
            "func AntiShuffle(s string) string {\n    words := strings.Fields(s)\n    for i, word := range words {\n        words[i] = strings.Join(sort.StringSlice(strings.Split(word, \"\")), \"\")\n    }\n    return strings.Join(words, \" \")\n}\n",
            "func GetRow(lst [][]int, x int) [][]int {\n    coords := make([][]int, 0)\n    for i, row := range lst {\n        for j, val := range row {\n            if val == x {\n                coords = append(coords, []int{i, j})\n            }\n        }\n    }\n    return sorted(coords, func(a, b []int) bool {\n        if a[0] == b[0] {\n            return a[1] < b[1]\n        }\n        return a[0] < b[0]\n    })\n}\n",
            "func SortArray(arr []int) []int {\n    if len(arr) == 0 {\n        return []\n    }\n    if (arr[0] + arr[len(arr)-1]) % 2 == 0 {\n        return sort.Reverse(arr)\n    }\n    return arr\n}\n",
            "func Encrypt(s string) string {\n    result := make([]byte, 0)\n    for _, ch := range s {\n        shifted := byte(ch) + 4\n        if shifted > 'z' {\n            shifted -= 'z' - 'a' + 1\n        }\n        result = append(result, shifted)\n    }\n    return string(result)\n}\n",
            "func NextSmallest(lst []int) *int {\n    if len(lst) < 2 {\n        return nil\n    }\n    return &lst[1]\n}\n",
            "func IsBored(s string) int {\n    sentences := regexp.MustCompile(r\"[.!?]\\s*\").Split(s, -1)\n    return sum(sentence[:2] == \"I \" for sentence in sentences if len(sentence) >= 2)\n}\n",
            "func AnyInt(x interface{}, y interface{}, z interface{}) bool {\n    if x, ok := x.(int); ok && y, ok := y.(int); ok && z, ok := z.(int); ok {\n        if x+y == z || x+z == y || y+z == x {\n            return true\n        }\n    }\n    return false\n}\n",
            "func Encode(message string) string {\n    vowels := \"aeiouAEIOU\"\n    result := []byte{}\n    for _, ch := range message {\n        if ch >= 'a' && ch <= 'z' {\n            ch1 := ch\n            if ch1 >= 'a' && ch1 <= 'z' {\n                ch1 = ch1 - 'a' + 'A'\n            }\n            if ch1 in vowels {\n                ch1 = ch1 + 2\n            }\n            result = append(result, ch1)\n        } else {\n            result = append(result, ch)\n        }\n    }\n    return string(result)\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= math.Floor(math.Sqrt(float64(n))); i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc Skjkasdkd(lst []int) int {\n    primes := []int{}\n    for _, n := range lst {\n        if IsPrime(n) {\n            primes = append(primes, n)\n        }\n    }\n    if len(primes) == 0 {\n        return 0\n    }\n    largest := fmt.Sprint(math.MaxInt64)\n    for _, n := range primes {\n        largest = fmt.Sprint(math.Max(int64(largest), int64(n)))\n    }\n    return sum(int(digit) for digit in largest)\n}\n",
            "func CheckDictCase(d map[string]string) bool {\n    return len(d) == 0 || (all(c.islower() for c in d.keys()) && all(c.isupper() for c in d.keys()))\n}\n",
            "func CountUpTo(n int) []int {\n    primes := []int{}\n    for num := 2; num <= n; num++ {\n        if all(num % p!= 0 for p := range primes) {\n            primes = append(primes, num)\n        }\n    }\n    return primes\n}\n",
            "func Multiply(a int, b int) int {\n    return (abs(a) % 10) * (abs(b) % 10)\n}\n",
            "func CountUpper(s string) int {\n    vowels := \"AEIOU\"\n    return len([c for i, c := range s if i%2 == 0 && c in vowels])\n}\n",
            "func ClosestInteger(value string) int {\n    num, _ := strconv.ParseFloat(value, 64)\n    if num >= 0 {\n        return int(num + 0.5)\n    }\n    return int(num - 0.5)\n}\n",
            "func MakeAPile(n int) []int {\n    return []int{n + 2 * i for i := 0; i < n}\n}\n",
            "func WordsString(s string) []string {\n    return regexp.MustCompile(r\"[, ]\").Split(s, -1)\n}\n",
            "func ChooseNum(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if y%2 == 0 {\n        return y\n    }\n    return y-1 if x!=y else -1\n}\n",
            "func RoundedAvg(n int, m int) *string {\n    if n > m {\n        return nil\n    }\n    rAvg := int((m + n) / 2.0 + 0.5)\n    return &strconv.Itoa(rAvg)[2:]\n}\n",
            "func UniqueDigits(x []int) []int {\n    return sorted(filter(lambda num: all(ord(digit) % 2!= 0 for digit in str(num)), x))\n}\n",
            "func ByLength(arr []int) []string {\n    digitNames := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    sortedArr := []int{}\n    for _, x := range arr {\n        if 1 <= x && x <= 9 {\n            sortedArr = append(sortedArr, x)\n        }\n    }\n    sort.Slice(sortedArr, func(i, j int) bool { return sortedArr[i] > sortedArr[j] })\n    return []string{digitNames[sortedArr[i]-1] for i := range sortedArr}\n}\n",
            "func F(n int) []int {\n    nums := make([]int, n)\n    for i := 0; i < n; i++ {\n        nums[i] = i + 1\n    }\n    return []int{\n        sum(nums[:i]) if i%2!= 0 else reduce(func(x, y int) int { return x * y }, nums[:i], 1)\n        for i := range nums\n    }\n}\n",
            "func EvenOddPalindrome(n int) []int {\n    cnt := [0, 0]\n    for i := 1; i <= n; i++ {\n        if isPalindrome(strconv.Itoa(i)) {\n            cnt[i%2] += 1\n        }\n    }\n    return cnt\n}\n",
            "func DigitsSum(n int) int {\n    nStr := strconv.Itoa(n)\n    if n >= 0 {\n        return sum(int(d) for d := range nStr)\n    }\n    return int(nStr[:2]) * 2 + DigitsSum(abs(n))\n}\nfunc CountNums(arr []int) int {\n    return len([n for n := range arr if DigitsSum(n) > 0])\n}\n",
            "func MoveOneBall(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    sortedArr := sort.Ints(arr)\n    for i := 0; i < len(arr); i++ {\n        if arr[i:] == sortedArr[:len(arr) - i] && arr[:i] == sortedArr[len(arr) - i:] {\n            return true\n        }\n    }\n    return false\n}\n",
            "func CanExchange(lst1 []int, lst2 []int) string {\n    oddCnt := 0\n    for _, num := range lst1 {\n        if num % 2!= 0 {\n            oddCnt++\n        }\n    }\n    evenCnt := 0\n    for _, num := range lst2 {\n        if num % 2 == 0 {\n            evenCnt++\n        }\n    }\n    if evenCnt >= oddCnt {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
            "func Histogram(test string) map[string]int {\n    freq := make(map[string]int)\n    words := strings.Fields(test)\n    for _, w := range words {\n        freq[w] = freq[w] + 1\n    }\n    result := make(map[string]int)\n    if len(freq) > 0 {\n        max_freq := 0\n        for _, v := range freq {\n            if v > max_freq {\n                max_freq = v\n            }\n        }\n        for k, v := range freq {\n            if v == max_freq {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "func ReverseDelete(s string, c string) []string {\n    s1 := strings.Join(strings.Fields(s), \"\")\n    return []string{s1, \"yes\" if s1 == strings.Reverse(s1) else \"no\"}\n}\n",
            "func OddCount(lst []string) []string {\n    result := make([]string, 0)\n    for _, num := range lst {\n        n := 0\n        for _, d := range num {\n            if d%2 == 1 {\n                n++\n            }\n        }\n        rs := \"the number of odd elements in the string i of the input.\"\n        result = append(result, rs.Replace(\"i\", strconv.Itoa(n)))\n    }\n    return result\n}\n",
            "func MinSubArraySum(nums []int) int {\n    minSum := 0\n    curSum := 0\n    for _, n := range nums {\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if minSum == 0 {\n        minSum = min(nums)\n    }\n    return minSum\n}\n",
            "func MaxFill(grid [][]int, capacity int) int {\n    return int(math.Ceil(float64(sum(sum(arr) for arr in grid)) / float64(capacity)))\n}\n",
            "func SortArray(arr []int) []int {\n    return sort.Slice(arr, func(i, j int) bool {\n        return countOnes(arr[i]) < countOnes(arr[j]) || (countOnes(arr[i]) == countOnes(arr[j]) && arr[i] < arr[j])\n    })\n}\nfunc countOnes(num int) int {\n    return strings.Count(strconv.FormatInt(int64(num), 2), \"1\")\n}\n",
            "func SelectWords(s string, n int) []string {\n    consonants := \"bcdfghjklmnpqrstvwxyz\"\n    words := strings.Fields(s)\n    return []string{w for w := range words if len(strings.Count(w, consonants)) == n}\n}\n",
            "func GetClosestVowel(word string) string {\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 2; i >= 0; i-- {\n        if word[i] == vowels[0] && word[i-1]!= vowels[0] && word[i+1]!= vowels[0] {\n            return word[i]\n        }\n    }\n    return \"\"\n}\n",
            "func MatchParens(lst []string) string {\n    s1 := lst[0] + lst[1]\n    s2 := lst[1] + lst[0]\n    return \"Yes\" if check(s1) || check(s2) else \"No\"\n}\nfunc check(s string) bool {\n    depth := 0\n    for _, ch := range s {\n        if ch == \"(\" {\n            depth++\n        } else {\n            depth--\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return true if depth == 0 else false\n}\n",
            "func Maximum(arr []int, k int) []int {\n    return sort.Slice(arr, func(i, j int) bool { return arr[i] > arr[j] })[:k]\n}\n",
            "func Solution(lst []int) int {\n    return sum([x for i, x := range lst if i%2 == 0 && x%2!= 0])\n}\n",
            "func AddElements(arr []int, k int) int {\n    return sum([n for n in arr[:k] if len(strconv.Itoa(n)) <= 2])\n}\n",
            "func GetOddCollatz(n int) []int {\n    collatz := []int{1}\n    for n!= 1 {\n        if n%2!= 0 {\n            collatz = append(collatz, n)\n            n = 3*n + 1\n        } else {\n            n = n/2\n        }\n    }\n    return sorted(collatz)\n}\n",
            "func ValidDate(date string) bool {\n    if len(date)!= 10 || date[2]!= \"-\" || date[5]!= \"-\" {\n        return false\n    }\n    m, _ := strconv.Atoi(date[:2])\n    d, _ := strconv.Atoi(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31 {\n        return true\n    }\n    if m in [4, 6, 9, 11] && d >= 1 && d <= 30 {\n        return true\n    }\n    if m == 2 && d >= 1 && d <= 29 {\n        return true\n    }\n    return false\n}\n",
            "func SplitWords(txt string) []string {\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        return []string{strconv.Itoa(len(strings.FieldsFunc(txt, func(r rune) bool {\n            return unicode.IsLower(r) && (unicode.ToLower(r) % 2 == 0)\n        })))}\n    }\n}\n",
            "func IsSorted(lst []int) bool {\n    for i := 1; i < len(lst); i++ {\n        if lst[i-1] > lst[i] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Intersection(interval1 []int, interval2 []int) string {\n    l := max(interval1[0], interval2[0])\n    r := min(interval1[1], interval2[1])\n    length := r - l\n    return \"YES\" if length > 0 && is_prime(length) else \"NO\"\n}\n",
            "func ProdSigns(arr []int) *int {\n    if len(arr) == 0 {\n        return nil\n    }\n    if 0 in arr {\n        return new(int)\n    }\n    sign := -1\n    if len([n for n in arr if n < 0])%2 == 1 {\n        sign = 1\n    }\n    return new(int)(sign * sum([abs(n) for n in arr]))\n}\n",
            "func MinPath(grid [][]int, k int) []int {\n    n := len(grid)\n    minVal := n * n + 1\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if grid[i][j] == 1 {\n                temp := []int{}\n                if i!= 0 {\n                    temp = append(temp, grid[i-1][j])\n                }\n                if j!= 0 {\n                    temp = append(temp, grid[i][j-1])\n                }\n                if i!= n - 1 {\n                    temp = append(temp, grid[i+1][j])\n                }\n                if j!= n - 1 {\n                    temp = append(temp, grid[i][j+1])\n                }\n                minVal = min(minVal, temp...)\n            }\n        }\n    }\n    result := []int{}\n    for i := 0; i < k; i++ {\n        result = append(result, 1 if i%2 == 0 else minVal)\n    }\n    return result\n}\n",
            "func Tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n    }\n    seq := []int{1, 3}\n    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            seq = append(seq, i/2+1)\n        } else {\n            seq = append(seq, seq[i-1]+seq[i-2]+(i+3)/2)\n        }\n    }\n    return seq\n}\n",
            "func Digits(n int) int {\n    odds := []int{}\n    for _, d := range fmt.Sprint(n) {\n        if int(d) % 2 == 1 {\n            odds = append(odds, int(d))\n        }\n    }\n    return reduce(func(x, y int) int { return x * y }, odds, 1)\n}\n",
            "func IsNested(s string) bool {\n    openIdx := []int{}\n    closeIdx := []int{}\n    for i, ch := range s {\n        if ch == '[' {\n            openIdx = append(openIdx, i)\n        } else if ch == ']' {\n            closeIdx = append(closeIdx, i)\n        }\n    }\n    closeIdx = reverse(closeIdx)\n    cnt := 0\n    i := 0\n    l := len(closeIdx)\n    for idx := range openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt += 1\n            i += 1\n    }\n    return cnt >= 2\n}\nfunc reverse(s []int) []int {\n    result := make([]int, len(s))\n    for i, j := 0, len(s)-1; i < j; i, j = i+1, j-1 {\n        result[i], result[j] = s[j], s[i]\n    }\n    return result\n}\n",
            "func SumSquares(lst []float64) int {\n    return sum([math.Pow(math.Ceil(n), 2) for n := range lst])\n}\n",
            "func CheckIfLastCharIsALetter(txt string) bool {\n    if len(txt) == 0 {\n        return false\n    }\n    last := txt[strings.LastIndex(txt, \" \") + 1:]\n    return len(last) == 1 && unicode.IsLetter(last[0])\n}\n",
            "func CanArrange(arr []int) int {\n    if len(arr) <= 1 {\n        return -1\n    }\n    idx := []int{}\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i - 1] {\n            idx = append(idx, i)\n        }\n    }\n    return max(idx, -1)\n}\n",
            "func LargestSmallestIntegers(lst []int) []*int {\n    neg := make([]*int, 0)\n    pos := make([]*int, 0)\n    for _, i := range lst {\n        if i < 0 {\n            neg = append(neg, &i)\n        } else {\n            pos = append(pos, &i)\n        }\n    }\n    maxNeg := max(neg)\n    minPos := min(pos)\n    return []*int{maxNeg, minPos}\n}\n",
            "func AnyToReal(o interface{}) float64 {\n    switch o.(type) {\n    case string:\n        return float64(strings.Replace(o.(string), \",\", \".\", -1))\n    case int:\n        return float64(o.(int))\n    case float64:\n        return o.(float64)\n    default:\n        panic(\"Type Error\")\n    }\n}\nfunc CompareOne(a interface{}, b interface{}) *float64 {\n    a1 := AnyToReal(a)\n    b1 := AnyToReal(b)\n    if a1 == b1 {\n        return nil\n    } else if a1 > b1 {\n        return &a1\n    } else {\n        return &b1\n    }\n}\n",
            "func IsEqualToSumEven(n int) bool {\n    return n%2 == 0 && n >= 8\n}\n",
            "func SpecialFactorial(n int) int {\n    fact := 1\n    result := 1\n    for i := 1; i <= n; i++ {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "func FixSpaces(txt string) string {\n    return regexp.MustCompile(`\\s{3,}`).ReplaceAllString(txt, \"-\").Replace(\" \", \"_\")\n}\n",
            "func FileNameCheck(fileName string) string {\n    lst := strings.Split(fileName, \".\")\n    if len(lst)!= 2 ||!strings.HasSuffix(lst[1], \"txt\") ||!strings.HasPrefix(lst[0], string(lst[0][0])) || strings.Count(lst[0], \"0123456789\") > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "func SumSquares(lst []int) int {\n    result := 0\n    for i, v := range lst {\n        if i%3 == 0 {\n            result += v * v\n        } else if i%4 == 0 {\n            result += v * v * v\n        } else {\n            result += v\n        }\n    }\n    return result\n}\n",
            "func WordsInSentence(sentence string) string {\n    words := strings.Split(sentence, \" \")\n    return strings.Join(\n        strings.Fields(\n            strings.Join(\n                strings.Fields(\n                    strings.Join(\n                        strings.Fields(\n                            strings.Join(\n                                strings.Fields(\n                                    strings.Join(\n                                        strings.Fields(\n                                            strings.Join(\n                                                strings.Fields(\n                                                    strings.Join(\n                                                        strings.Fields(\n                                                            strings.Join(\n                                                                strings.Fields(\n                                                                    strings.Join(\n                                                                        strings.Fields(\n                                                                            strings.Join(\n                                                                                strings.Fields(\n                                                                                    strings.Join(\n                                                                                        strings.Fields(\n                                                                                            strings.Join(\n                                                                                                  strings.Fields(\n                                                                                                      strings.Join(\n                                                                                                          strings.Fields(\n                                                                                                              strings.Join(\n                                                                                                                  strings.Fields(\n                                                                                                                      strings.Join(\n                                                                                                                          strings.Fields(\n                                                                                                                              strings.Join(\n                                                                                                                                  strings.Fields(\n                                                                                                                                      strings.Join(\n                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.Fields(\n                                                                                                                                                                      strings.Join(\n                                                                                                                                                                          strings.Fields(\n                                                                                                                                              strings.Join(\n                                                                                                                                                  strings.Fields(\n                                                                                                                                                      strings.Join(\n                                                                                                                                                          strings.Fields(\n                                                                                                                                                              strings.Join(\n                                                                                                                                                                  strings.",
            "func Simplify(x string, n string) bool {\n    xs := strings.Split(x, \"/\")\n    ns := strings.Split(n, \"/\")\n    num, _ := strconv.Atoi(xs[0])\n    den, _ := strconv.Atoi(ns[0])\n    return num % den == 0\n}\n",
            "func DigitsSum(n int) int {\n    nStr := strconv.Itoa(n)\n    if n >= 0 {\n        return sum(int(d) for d := range nStr)\n    }\n    return int(nStr[:2]) * 2 + DigitsSum(abs(n))\n}\nfunc OrderByPoints(nums []int) []int {\n    return sorted(nums, func(a, b int) bool {\n        return DigitsSum(a) < DigitsSum(b)\n    })\n}\n",
            "func SpecialFilter(nums []int) int {\n    odds := \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and str(n)[0] in odds])\n}\n",
            "func GetMaxTriples(n int) int {\n    c := [3]int{0, 0, 0}\n    for i := 1; i <= n; i++ {\n        a := i * i - i + 1\n        c[a%3] += 1\n    }\n    return c[0] * c[1] * c[2] + (c[0]*(c[0]-1)*(c[0]-2) + c[1]*(c[1]-1)*(c[1]-2) + c[2]*(c[2]-1)*(c[2]-2)) // 6\n}\n",
            "func Bf(planet1 string, planet2 string) []string {\n    names := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    if planet1 == \"\" || planet2 == \"\" || planet1 == planet2 {\n        return []string{}\n    }\n    l := names.index(planet1)\n    r := names.index(planet2)\n    if l > r {\n        l, r = r, l\n    }\n    if l == r {\n        return []string{}\n    }\n    return names[l+1 : r]\n}\n",
            "func SortedListSum(lst []string) []string {\n    result := []string{}\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    return sorted(result, func(a, b string) bool {\n        if len(a)!= len(b) {\n            return len(a) < len(b)\n        }\n        return a < b\n    })\n}\n",
            "func XOrY(n int, x int, y int) int {\n    if n < 2 {\n        return y\n    }\n    for i := 2; i <= math.Floor(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func DoubleTheDifference(lst []float64) int {\n    return sum([n * n for n in lst if n >= 0 and n % 2 == 1])\n}\n",
            "func Compare(game []int, guess []int) []int {\n    return []int{abs(x - y) for x, y := range zip(game, guess)}\n}\n",
            "func StrongestExtension(className string, extensions []string) string {\n    maxS := float64(-math.Inf(1))\n    maxExt := \"\"\n    for _, ext := range extensions {\n        upper := len([c for c in ext if c.isupper()])\n        lower := len([c for c in ext if c.islower()])\n        s := float64(upper - lower)\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", className, maxExt)\n}\n",
            "func CycpatternCheck(a string, b string) bool {\n    if len(a) < len(b) {\n        return false\n    }\n    for i := 0; i < len(b); i++ {\n        if strings.Contains(a, b[i:] + b[:i]) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func EvenOddCount(num int) []int {\n    ds := fmt.Sprintf(\"%d\", math.Abs(float64(num)))\n    even := 0\n    for _, d := range ds {\n        if d%2 == 0 {\n            even++\n        }\n    }\n    return []int{even, len(ds) - even}\n}\n",
            "func IntToMiniRoman(num int) string {\n    values := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    numerals := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    res := []string{}\n    for i := 0; i < len(values); i++ {\n        for num >= values[i] {\n            res = append(res, numerals[i])\n            num -= values[i]\n        }\n    }\n    return strings.Join(res, \"\")\n}\n",
            "func RightAngleTriangle(a int, b int, c int) bool {\n    return a*a + b*b == c*c\n}\n",
            "func FindMax(words []string) string {\n    maxCnt := 0\n    maxW := \"\"\n    for _, w := range words {\n        cnt := len(set(w))\n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        } else if cnt == maxCnt {\n            maxW = min(maxW, w)\n        }\n    }\n    return maxW\n}\n",
            "func Eat(num int, need int, remaining int) []int {\n    if need <= remaining {\n        return []int{num + need, remaining - need}\n    }\n    return []int{num + remaining, 0}\n}\n",
            "func DoAlgebra(operators []string, operands []int) int {\n    ops := operators.copy()\n    nums := operands.copy()\n    i := len(ops) - 1\n    for i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n        }\n        i--\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i--\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i--\n        }\n        i++\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i--\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i--\n        }\n        i++\n    }\n    return nums[0]\n}\n",
            "func Solve(s string) string {\n    result := []rune(s)\n    for i, ch := range result {\n        if!unicode.IsLetter(ch) {\n            continue\n        }\n        if unicode.IsUpper(ch) {\n            result[i] = unicode.ToLower(ch)\n        } else if unicode.IsLower(ch) {\n            result[i] = unicode.ToUpper(ch)\n        }\n    }\n    return string(result)\n}\n",
            "func StringToMd5(txt string) *string {\n    if txt == \"\" {\n        return nil\n    }\n    md5_hash := md5.New()\n    txt_bytes := []byte(txt)\n    md5_hash.Write(txt_bytes)\n    md5_encoded := md5_hash.Sum(nil)\n    return &md5_encoded\n}\n",
            "func GenerateIntegers(a int, b int) []int {\n    lower := max(2, min(a, b))\n    upper := min(8, max(a, b))\n    result := make([]int, 0)\n    for i := lower; i <= upper; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n"
        ],
        "java": [
            "class Global {\n    public static boolean hasCloseElements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<String> separateParenGroups(String parenString) {\n        var groups = new ArrayList<String>();\n        var stk = new Stack<Character>();\n        var currentGroup = \"\";\n        var parens = parenString.replace(\" \", \"\");\n        for (char ch : parens.toCharArray()) {\n            if (ch == '(') {\n                stk.push(ch);\n                currentGroup += ch;\n            } else if (ch == ')') {\n                stk.pop();\n                currentGroup += ch;\n                if (stk.isEmpty()) {\n                    groups.add(currentGroup);\n                    currentGroup = \"\";\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double truncateNumber(double num) {\n        return num - Math.floor(num);\n    }\n}\n",
            "class Global {\n    public static boolean belowZero(List<Integer> operations) {\n        var balance = 0;\n        for (Integer op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        for (Double n : numbers) {\n            mean += n;\n        }\n        mean /= numbers.size();\n        double deviation = 0;\n        for (Double n : numbers) {\n            deviation += Math.abs(n - mean);\n        }\n        return deviation / numbers.size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i!= 0) {\n                result.add(delimiter);\n            }\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseNestedParens(String parenString) {\n        var result = new ArrayList<Integer>();\n        var parenGroups = parenString.split(\" \");\n        for (String group : parenGroups) {\n            var maxDepth = 0;\n            var depth = 0;\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    depth += 1;\n                    maxDepth = Math.max(maxDepth, depth);\n                } else if (ch == ')') {\n                    depth -= 1;\n                }\n            }\n            result.add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> filterBySubstring(List<String> strs, String substring) {\n        return List.of(strs).stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<Integer> sumProduct(List<Integer> numbers) {\n        var nSum = 0;\n        for (Integer n : numbers) {\n            nSum += n;\n        }\n        var nProduct = 1;\n        for (Integer n : numbers) {\n            nProduct *= n;\n        }\n        return Arrays.asList(nSum, nProduct);\n    }\n}\n",
            "class Global {\n    public static List<Integer> rollingMax(List<Integer> numbers) {\n        var maxSoFar = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            var max = numbers.get(i);\n            for (int j = i; j < numbers.size(); j++) {\n                max = Math.max(max, numbers.get(j));\n            }\n            maxSoFar.add(max);\n        }\n        return maxSoFar;\n    }\n}\n",
            "class Global {\n    public static String makePalindrome(String s) {\n        if (isPalindrome(s)) {\n            return s;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (isPalindrome(s.substring(i))) {\n                return s + s.substring(0, i).reverse();\n            }\n        }\n        return \"\";\n    }\n    public static boolean isPalindrome(String s) {\n        return s.equals(s.reverse());\n    }\n}\n",
            "class Global {\n    public static String stringXor(String a, String b) {\n        return String.join(\"\", Arrays.stream(a.toCharArray()).map(x -> (x ^ b.charAt(0)) + \"\").toArray(String[]::new));\n    }\n}\n",
            "class Global {\n    public static Optional<String> longest(List<String> strs) {\n        if (strs.isEmpty()) {\n            return Optional.empty();\n        }\n        var longest_s = strs.get(0);\n        for (String s : strs) {\n            if (s.length() > longest_s.length()) {\n                longest_s = s;\n            }\n        }\n        return Optional.of(longest_s);\n    }\n}\n",
            "class Global {\n    public static int greatestCommonDivisor(int a, int b) {\n        return b == 0? a : greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "class Global {\n    public static List<String> allPrefixes(String s) {\n        var prefixes = new ArrayList<String>();\n        for (int i = 0; i < s.length(); i++) {\n            prefixes.add(s.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static String stringSequence(int n) {\n        return String.join(\" \", IntStream.range(0, n + 1).boxed().collect(Collectors.toList()));\n    }\n}\n",
            "class Global {\n    public static int countDistinctCharacters(String s) {\n        return s.toLowerCase().chars().distinct().count();\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseMusic(String musicString) {\n        var durations = new HashMap<String, Integer>();\n        durations.put(\"o\", 4);\n        durations.put(\"o|\", 2);\n        durations.put(\".|\", 1);\n        var notes = musicString.split(\" \");\n        var result = new ArrayList<Integer>();\n        for (String note : notes) {\n            result.add(durations.get(note));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int howManyTimes(String s, String substring) {\n        int times = 0;\n        for (int i = 0; i < s.length() - substring.length() + 1; i++) {\n            if (s.substring(i, i + substring.length()).equals(substring)) {\n                times += 1;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static String sortNumbers(String numbers) {\n        var numDict = new HashMap<String, Integer>();\n        numDict.put(\"zero\", 0);\n        numDict.put(\"one\", 1);\n        numDict.put(\"two\", 2);\n        numDict.put(\"three\", 3);\n        numDict.put(\"four\", 4);\n        numDict.put(\"five\", 5);\n        numDict.put(\"six\", 6);\n        numDict.put(\"seven\", 7);\n        numDict.put(\"eight\", 8);\n        numDict.put(\"nine\", 9);\n        var numList = Arrays.stream(numbers.split(\" \"))\n           .filter(x -> numDict.containsKey(x))\n           .sorted(Comparator.comparingInt(numDict::get))\n           .collect(Collectors.toList());\n        return String.join(\" \", numList);\n    }\n}\n",
            "class Global {\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        var sortedNumbers = new ArrayList<Double>(numbers);\n        sortedNumbers.sort(Comparator.naturalOrder());\n        var minDiff = Double.POSITIVE_INFINITY;\n        var closestPair = new ArrayList<Double>();\n        for (int i = 1; i < sortedNumbers.size(); i++) {\n            var diff = sortedNumbers.get(i) - sortedNumbers.get(i - 1);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = new ArrayList<Double>();\n                closestPair.add(sortedNumbers.get(i - 1));\n                closestPair.add(sortedNumbers.get(i));\n            }\n        }\n        return closestPair;\n    }\n}\n",
            "class Global {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        var minNum = Collections.min(numbers);\n        var maxNum = Collections.max(numbers);\n        if (minNum == maxNum) {\n            return Arrays.asList(0.0, 0.0, 0.0);\n        } else {\n            return Arrays.stream(numbers.stream().mapToDouble(num -> (num - minNum) / (maxNum - minNum)).toArray()).boxed().collect(Collectors.toList());\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> filterIntegers(List<Object> values) {\n        return values.stream().filter(x -> x instanceof Integer).map(x -> (Integer) x).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int strLength(String s) {\n        return s.length();\n    }\n}\n",
            "class Global {\n    public static int largestDivisor(int n) {\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}\n",
            "class Global {\n    public static List<Integer> factorize(int n) {\n        var factors = new ArrayList<Integer>();\n        var divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.add(divisor);\n                n /= divisor;\n            } else {\n                divisor += 1;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static List<Integer> removeDuplicates(List<Integer> numbers) {\n        var counts = new HashMap<Integer, Integer>();\n        for (Integer num : numbers) {\n            counts.put(num, counts.getOrDefault(num, 0) + 1);\n        }\n        var res = new ArrayList<Integer>();\n        for (Integer num : numbers) {\n            if (counts.get(num) == 1) {\n                res.add(num);\n            }\n        }\n        return res;\n    }\n}\n",
            "class Global {\n    public static String flipCase(String s) {\n        var flipped = new ArrayList<Character>();\n        for (char ch : s.toCharArray()) {\n            if (!Character.isLetter(ch)) {\n                flipped.add(ch);\n            } else if (Character.isLowerCase(ch)) {\n                flipped.add(Character.toUpperCase(ch));\n            } else {\n                flipped.add(Character.toLowerCase(ch));\n            }\n        }\n        return String.join(\"\", flipped);\n    }\n}\n",
            "class Global {\n    public static String concatenate(List<String> strs) {\n        return String.join(\"\", strs);\n    }\n}\n",
            "class Global {\n    public static List<String> filterByPrefix(List<String> strs, String prefixStr) {\n        return List.of(strs).stream().filter(s -> s.startsWith(prefixStr)).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<Integer> getPositive(List<Integer> l) {\n        return Arrays.stream(l).filter(num -> num > 0).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static double poly(List<Integer> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.size(); i++) {\n            res += xs.get(i) * Math.pow(x, i);\n        }\n        return res;\n    }\n    public static double findZero(List<Integer> xs) {\n        double x1 = 1.0, x2 = -1.0;\n        while (poly(xs, x1) * poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (poly(xs, mid) == 0) {\n                return mid;\n            } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortThird(List<Integer> l) {\n        var sortedThird = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i += 3) {\n            sortedThird.add(l.get(i));\n        }\n        Collections.sort(sortedThird);\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(sortedThird.get(i // 3));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> listUnique(List<Integer> l) {\n        return new ArrayList<>(new TreeSet<>(l));\n    }\n}\n",
            "class Global {\n    public static int maxElement(List<Integer> l) {\n        return l.isEmpty()? 0 : Collections.max(l);\n    }\n}\n",
            "class Global {\n    public static int fizzBuzz(int n) {\n        var cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += Integer.toString(i).chars().filter(c -> c == '7').count();\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortEven(List<Integer> l) {\n        var sortedEven = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i += 2) {\n            sortedEven.add(l.get(i));\n        }\n        Collections.sort(sortedEven);\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i += 2) {\n            result.add(sortedEven.get(i // 2));\n        }\n        for (int i = 1; i < l.size(); i += 2) {\n            result.add(l.get(i));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String encodeCyclic(String s) {\n        var result = new ArrayList<String>();\n        for (int i = 0; i < s.length(); i += 3) {\n            if (i + 3 > s.length()) {\n                result.add(s.substring(i));\n            } else {\n                result.add(s.substring(i + 1, i + 3));\n                result.add(s.substring(i));\n            }\n        }\n        return String.join(\"\", result);\n    }\n    public static String decodeCyclic(String s) {\n        return encodeCyclic(encodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static int primeFib(int n) {\n        int[] f = new int[]{0, 1};\n        int cnt = 0;\n        while (cnt < n) {\n            f = new int[]{f[1], f[0] + f[1]};\n            if (isPrime(f[1])) {\n                cnt += 1;\n            }\n        }\n        return f[1];\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static int carRaceCollision(int n) {\n        return n * n;\n    }\n}\n",
            "class Global {\n    public static List<Integer> incrList(List<Integer> l) {\n        return Arrays.stream(l).map(i -> i + 1).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static boolean pairsSumToZero(List<Integer> l) {\n        var seen = new HashSet<Integer>();\n        for (Integer num : l) {\n            if (-num in seen) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String changeBase(int x, int bas) {\n        var digits = new ArrayList<String>();\n        while (x > 0) {\n            digits.add(String.valueOf(x % bas));\n            x /= bas;\n        }\n        return String.join(\"\", digits);\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int h) {\n        return a * h / 2;\n    }\n}\n",
            "class Global {\n    public static int fib4(int n) {\n        var fib = new int[4];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = fib[0] + fib[1] + fib[2];\n            fib[0] = fib[1];\n            fib[1] = fib[2];\n            fib[2] = fib[3];\n            fib[3] = fib[i % 4];\n        }\n        return fib[n % 4];\n    }\n}\n",
            "class Global {\n    public static double median(List<Double> l) {\n        var sl = new ArrayList<Double>(l);\n        Collections.sort(sl);\n        if (sl.size() % 2!= 0) {\n            return sl.get(sl.size() / 2);\n        } else {\n            return (sl.get(sl.size() / 2) + sl.get(sl.size() / 2 - 1)) / 2;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isPalindrome(String txt) {\n        return txt.equals(new StringBuilder(txt).reverse().toString());\n    }\n}\n",
            "class Global {\n    public static int modp(int n, int p) {\n        int ret = 1;\n        for (int _ = 0; _ < n; _++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "class Global {\n    public static String encodeShift(String s) {\n        var result = new ArrayList<Character>();\n        for (char ch : s.toCharArray()) {\n            result.add((char)(((ord(ch) - 97 + 5) % 26) + 97));\n        }\n        return String.join(\"\", result);\n    }\n    public static String decodeShift(String s) {\n        var result = new ArrayList<Character>();\n        for (char ch : s.toCharArray()) {\n            result.add((char)(((ord(ch) - 97 + 21) % 26) + 97));\n        }\n        return String.join(\"\", result);\n    }\n}\n",
            "class Global {\n    public static String removeVowels(String txt) {\n        return txt.replaceAll(\"[aeiouAEIOU]\", \"\");\n    }\n}\n",
            "class Global {\n    public static boolean belowThreshold(List<Integer> l, int t) {\n        return l.stream().allMatch(x -> x < t);\n    }\n}\n",
            "class Global {\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static boolean sameChars(String s0, String s1) {\n        return new HashSet<Character>(s0).equals(new HashSet<Character>(s1));\n    }\n}\n",
            "class Global {\n    public static int fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth += 1;\n            } else if (b == '>') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static boolean monotonic(List<Integer> l) {\n        var diff = new ArrayList<Integer>();\n        for (int i = 1; i < l.size(); i++) {\n            diff.add(l.get(i) - l.get(i - 1));\n        }\n        return diff.stream().allMatch(x -> x <= 0) || diff.stream().allMatch(x -> x >= 0);\n    }\n}\n",
            "class Global {\n    public static List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        return new ArrayList<>(new HashSet<>(l1).retainAll(l2));\n    }\n}\n",
            "class Global {\n    public static int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i) {\n                i += 1;\n            } else {\n                n /= i;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int sumToN(int n) {\n        return IntStream.rangeClosed(1, n).sum();\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth += 1;\n            } else if (b == ')') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> derivative(List<Integer> xs) {\n        var result = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int fibfib(int n) {\n        int a = 0, b = 0, c = 1;\n        while (n > 2) {\n            a, b, c = b, c, a + b + c;\n            n -= 1;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int vowelsCount(String s) {\n        var vowels = \"aeiou\";\n        var cnt = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z' && vowels.contains(s.substring(i, i + 1))) {\n                cnt += 1;\n            } else if (i == s.length() - 1 && s.charAt(i) == 'y') {\n                cnt += 1;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static String circularShift(int x, int shift) {\n        String xStr = String.valueOf(x);\n        if (shift > xStr.length()) {\n            return new StringBuilder(xStr).reverse().toString();\n        } else {\n            return xStr.substring(xStr.length() - shift) + xStr.substring(0, xStr.length() - shift);\n        }\n    }\n}\n",
            "class Global {\n    public static int digitSum(String s) {\n        return IntStream.range(0, s.length())\n           .map(i -> s.charAt(i))\n           .filter(c -> Character.isUpperCase(c))\n           .map(c -> (int) c)\n           .sum();\n    }\n}\n",
            "class Global {\n    public static int fruitDistribution(String s, int n) {\n        var words = s.split(\" \");\n        var apples = Integer.parseInt(words[words.indexOf(\"apples\") - 1]);\n        var oranges = Integer.parseInt(words[words.indexOf(\"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n}\n",
            "class Global {\n    public static List<Integer> pluck(List<Integer> arr) {\n        var evens = new ArrayList<Integer>();\n        for (Integer n : arr) {\n            if (n % 2 == 0) {\n                evens.add(n);\n            }\n        }\n        if (evens.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        var min_even = Collections.min(evens);\n        var min_even_index = arr.indexOf(min_even);\n        return Arrays.asList(min_even, min_even_index);\n    }\n}\n",
            "class Global {\n    public static int search(List<Integer> lst) {\n        var freqs = new HashMap<Integer, Integer>();\n        for (Integer n : lst) {\n            freqs.put(n, freqs.getOrDefault(n, 0) + 1);\n        }\n        var goodVals = freqs.entrySet().stream()\n               .filter(e -> e.getValue() >= e.getKey())\n               .map(Map.Entry::getKey)\n               .collect(Collectors.toList());\n        return goodVals.isEmpty()? -1 : Collections.max(goodVals);\n    }\n}\n",
            "class Global {\n    public static List<Integer> strangeSortList(List<Integer> lst) {\n        var sl = new ArrayList<Integer>(lst);\n        Collections.sort(sl);\n        var result = new ArrayList<Integer>();\n        int left = 0, right = sl.size() - 1;\n        while (left <= right) {\n            result.add(sl.get(left));\n            left += 1;\n            if (left <= right) {\n                result.add(sl.get(right));\n                right -= 1;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean willItFly(List<Integer> q, int w) {\n        return q.size() == 0? false : q.stream().allMatch(i -> i == q.get(q.size() - 1 - i)) && q.stream().mapToInt(i -> i).sum() <= w;\n    }\n}\n",
            "class Global {\n    public static int smallestChange(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (arr.get(i)!= arr.get(arr.size() - i - 1)) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        var cnt1 = lst1.stream().mapToInt(String::length).sum();\n        var cnt2 = lst2.stream().mapToInt(String::length).sum();\n        return cnt1 <= cnt2? lst1 : lst2;\n    }\n}\n",
            "class Global {\n    public static boolean isMultiplyPrime(int a) {\n        int cnt = 0;\n        for (int i = 2; i <= a; i++) {\n            if (isPrime(i)) {\n                while (a % i == 0) {\n                    cnt += 1;\n                    a /= i;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n}\n",
            "class Global {\n    public static boolean isSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "class Global {\n    public static boolean isCube(int a) {\n        return Math.pow(Math.abs(a), 1.0 / 3.0) * Math.pow(Math.abs(a), 1.0 / 3.0) * Math.pow(Math.abs(a), 1.0 / 3.0) == a;\n    }\n}\n",
            "class Global {\n    public static int hexKey(String num) {\n        return num.chars().filter(x -> \"2357BD\".indexOf(x) >= 0).count();\n    }\n}\n",
            "class Global {\n    public static String decimalToBinary(int dec) {\n        return String.format(\"db%sdb\", Integer.toBinaryString(dec));\n    }\n}\n",
            "class Global {\n    public static boolean isHappy(String s) {\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static List<String> numericalLetterGrade(List<Double> grades) {\n        var result = new ArrayList<String>();\n        for (Double g : grades) {\n            if (g == 4.0) {\n                result.add(\"A+\");\n            } else if (g > 3.7) {\n                result.add(\"A\");\n            } else if (g > 3.3) {\n                result.add(\"A-\");\n            } else if (g > 3.0) {\n                result.add(\"B+\");\n            } else if (g > 2.7) {\n                result.add(\"B\");\n            } else if (g > 2.3) {\n                result.add(\"B-\");\n            } else if (g > 2.0) {\n                result.add(\"C+\");\n            } else if (g > 1.7) {\n                result.add(\"C\");\n            } else if (g > 1.3) {\n                result.add(\"C-\");\n            } else if (g > 1.0) {\n                result.add(\"D+\");\n            } else if (g > 0.7) {\n                result.add(\"D\");\n            } else if (g > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean primeLength(String s) {\n        int length = s.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(length)); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int startsOneEnds(int n) {\n        return n == 1? 1 : 2 * 9 * (int) Math.pow(10, n - 2);\n    }\n}\n",
            "class Global {\n    public static String solve(int n) {\n        return Integer.toBinaryString(n).substring(2);\n    }\n}\n",
            "class Global {\n    public static int add(List<Integer> lst) {\n        return lst.stream().filter(x -> x % 2 == 1 && x % 2 == 0).mapToInt(x -> x).sum();\n    }\n}\n",
            "class Global {\n    public static String antiShuffle(String s) {\n        var words = new ArrayList<String>();\n        for (String word : s.split(\" \")) {\n            words.add(String.join(\"\", Collections.sort(word.toCharArray())));\n        }\n        return String.join(\" \", words);\n    }\n}\n",
            "class Global {\n    public static List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        var coords = new ArrayList<List<Integer>>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    coords.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        return coords.stream().sorted((a, b) -> {\n            if (a.get(0) == b.get(0)) {\n                return -a.get(1).compareTo(b.get(1));\n            }\n            return a.get(0).compareTo(b.get(0));\n        }).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        if ((arr.get(0) + arr.get(arr.size() - 1)) % 2 == 0) {\n            return new ArrayList<Integer>(Arrays.asList(arr.subList(0, arr.size() - 1)).stream().sorted(Collections.reverseOrder()).collect(Collectors.toList()));\n        } else {\n            return new ArrayList<Integer>(Arrays.asList(arr.subList(0, arr.size() - 1)).stream().sorted().collect(Collectors.toList()));\n        }\n    }\n}\n",
            "class Global {\n    public static String encrypt(String s) {\n        var result = new ArrayList<Character>();\n        for (char ch : s.toCharArray()) {\n            int shifted = (int) ch + 4;\n            if (shifted > 'z') {\n                shifted -= 26;\n            }\n            result.add((char) shifted);\n        }\n        return String.join(\"\", result);\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> nextSmallest(List<Integer> lst) {\n        var sl = new TreeSet<Integer>(lst);\n        if (sl.size() < 2) {\n            return Optional.empty();\n        }\n        return Optional.of(sl.higher(sl.first()));\n    }\n}\n",
            "class Global {\n    public static int isBored(String s) {\n        var sentences = s.split(\"[.!?]\\\\s*\");\n        return Arrays.stream(sentences).filter(sentence -> sentence.length() >= 2).mapToInt(sentence -> sentence.startsWith(\"I \")).sum();\n    }\n}\n",
            "class Global {\n    public static boolean anyInt(Object x, Object y, Object z) {\n        return (x instanceof Integer && y instanceof Integer && z instanceof Integer) && ((Integer) x + (Integer) y == (Integer) z) || ((Integer) x + (Integer) z == (Integer) y) || ((Integer) y + (Integer) z == (Integer) x);\n    }\n}\n",
            "class Global {\n    public static String encode(String message) {\n        var vowels = \"aeiouAEIOU\";\n        var result = new ArrayList<Character>();\n        for (char ch : message.toCharArray()) {\n            if (ch.isLetter()) {\n                char ch1 = ch.isLowerCase()? ch.toUpperCase() : ch.toLowerCase();\n                if (ch1.toString().contains(vowels)) {\n                    ch1 = (char)(ch1.toString().charAt(0) + 2);\n                }\n                result.add(ch1);\n            } else {\n                result.add(ch);\n            }\n        }\n        return String.join(\"\", result);\n    }\n}\n",
            "class Global {\n    public static int skjkasdkd(List<Integer> lst) {\n        var primes = new ArrayList<Integer>();\n        for (Integer n : lst) {\n            if (isPrime(n)) {\n                primes.add(n);\n            }\n        }\n        if (primes.size() == 0) {\n            return 0;\n        }\n        var largest = String.valueOf(Collections.max(primes));\n        return IntStream.range(0, largest.length()).map(i -> largest.charAt(i) - '0').sum();\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean checkDictCase(Map<String, String> d) {\n        return d.isEmpty() || (d.keySet().stream().allMatch(c -> c.equals(c.toLowerCase())) || d.keySet().stream().allMatch(c -> c.equals(c.toUpperCase())));\n    }\n}\n",
            "class Global {\n    public static List<Integer> countUpTo(int n) {\n        var primes = new ArrayList<Integer>();\n        for (int num = 2; num <= n; num++) {\n            if (all(num % p!= 0 for p in primes)) {\n                primes.add(num);\n            }\n        }\n        return primes;\n    }\n}\n",
            "class Global {\n    public static int multiply(int a, int b) {\n        return Math.abs(a) % 10 * Math.abs(b) % 10;\n    }\n}\n",
            "class Global {\n    public static int countUpper(String s) {\n        var vowels = \"AEIOU\";\n        return (int) Arrays.stream(s.toCharArray())\n               .filter(i -> i % 2 == 0 && vowels.contains(String.valueOf(i)))\n               .count();\n    }\n}\n",
            "class Global {\n    public static int closestInteger(String value) {\n        return (int) Math.round(Double.parseDouble(value));\n    }\n}\n",
            "class Global {\n    public static List<Integer> makeAPile(int n) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> wordsString(String s) {\n        return Arrays.asList(s.split(\"[, ]\"));\n    }\n}\n",
            "class Global {\n    public static int chooseNum(int x, int y) {\n        return x > y? -1 : y % 2 == 0? y : y - 1;\n    }\n}\n",
            "class Global {\n    public static Optional<String> roundedAvg(int n, int m) {\n        if (n > m) {\n            return Optional.empty();\n        }\n        int rAvg = (m + n) / 2 + 0.5;\n        return Optional.of(Integer.toBinaryString(rAvg));\n    }\n}\n",
            "class Global {\n    public static List<Integer> uniqueDigits(List<Integer> x) {\n        return Arrays.stream(x.stream().filter(num -> {\n            var s = String.valueOf(num);\n            return s.chars().allMatch(digit -> digit % 2!= 0);\n        }).sorted().toArray()).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<String> byLength(List<Integer> arr) {\n        var digitNames = Arrays.asList(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n        var sortedArr = Arrays.stream(arr.stream().filter(x -> 1 <= x && x <= 9).sorted(Collections.reverseOrder()).toArray()).mapToInt(x -> x).toArray();\n        return Arrays.stream(sortedArr).mapToObj(x -> digitNames.get(x - 1)).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<Integer> f(int n) {\n        var nums = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            nums.add(i);\n        }\n        return nums.stream().map(i -> i % 2!= 0? nums.subList(0, i).stream().reduce(0, Integer::sum) : nums.subList(0, i).stream().reduce(1, (x, y) -> x * y)).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<Integer> evenOddPalindrome(int n) {\n        var cnt = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(String.valueOf(i))) {\n                cnt.add(i % 2);\n            }\n        }\n        return cnt;\n    }\n    public static boolean isPalindrome(String txt) {\n        return txt.equals(new StringBuilder(txt).reverse().toString());\n    }\n}\n",
            "class Global {\n    public static int countNums(List<Integer> arr) {\n        return (int) arr.stream().filter(n -> digitsSum(n) > 0).count();\n    }\n    public static int digitsSum(int n) {\n        String nStr = String.valueOf(n);\n        if (n >= 0) {\n            return IntStream.range(0, nStr.length()).map(i -> Integer.parseInt(nStr.substring(i, i + 1))).sum();\n        } else {\n            return 2 * Integer.parseInt(nStr.substring(0, 2)) + digitsSum(Math.abs(n));\n        }\n    }\n}\n",
            "class Global {\n    public static boolean moveOneBall(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        var sortedArr = new ArrayList<Integer>(arr);\n        sortedArr.sort(Comparator.naturalOrder());\n        for (int i = 0; i < arr.size(); i++) {\n            if (Arrays.equals(arr.subList(i, arr.size()).toArray(), sortedArr.subList(0, arr.size() - i).toArray()) && Arrays.equals(arr.subList(0, i).toArray(), sortedArr.subList(arr.size() - i, arr.size()).toArray())) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String canExchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCnt = 0;\n        for (Integer num : lst1) {\n            if (num % 2!= 0) {\n                oddCnt++;\n            }\n        }\n        int evenCnt = 0;\n        for (Integer num : lst2) {\n            if (num % 2 == 0) {\n                evenCnt++;\n            }\n        }\n        return \"YES\" if evenCnt >= oddCnt else \"NO\";\n    }\n}\n",
            "class Global {\n    public static Map<String, Integer> histogram(String test) {\n        var freq = new HashMap<String, Integer>();\n        var words = Arrays.stream(test.split(\" \")).filter(w -> w.length() > 0).collect(Collectors.toList());\n        for (String w : words) {\n            freq.put(w, freq.getOrDefault(w, 0) + 1);\n        }\n        var result = new HashMap<String, Integer>();\n        if (freq.size() > 0) {\n            var max_freq = Collections.max(freq.values());\n            for (var entry : freq.entrySet()) {\n                if (entry.getValue() == max_freq) {\n                    result.put(entry.getKey(), entry.getValue());\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> reverseDelete(String s, String c) {\n        var s1 = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!c.contains(String.valueOf(ch))) {\n                s1.append(ch);\n            }\n        }\n        return Arrays.asList(s1.toString(), isPalindrome(s1.toString())? \"yes\" : \"no\");\n    }\n    public static boolean isPalindrome(String s) {\n        var i = 0;\n        var j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i)!= s.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static List<String> oddCount(List<String> lst) {\n        var result = new ArrayList<String>();\n        for (String num : lst) {\n            int n = 0;\n            for (char d : num.toCharArray()) {\n                n += d % 2 == 1? 1 : 0;\n            }\n            String rs = \"the number of odd elements in the string i of the input.\";\n            result.add(rs.replace(\"i\", String.valueOf(n)));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int minSubArraySum(List<Integer> nums) {\n        int minSum = 0;\n        int curSum = 0;\n        for (int n : nums) {\n            curSum = Math.min(curSum + n, 0);\n            minSum = Math.min(curSum, minSum);\n        }\n        if (minSum == 0) {\n            minSum = Collections.min(nums);\n        }\n        return minSum;\n    }\n}\n",
            "class Global {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        return (int) Arrays.stream(grid).mapToDouble(arr -> Math.ceil(Arrays.stream(arr).sum() / capacity)).sum();\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        return Arrays.stream(arr).sorted((x, y) -> {\n            int xCount = Integer.bitCount(x);\n            int yCount = Integer.bitCount(y);\n            return xCount == yCount? x - y : yCount - xCount;\n        }).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<String> selectWords(String s, int n) {\n        var consonants = \"bcdfghjklmnpqrstvwxyz\";\n        var words = Arrays.stream(s.split(\" \")).filter(w -> w.length() > 0).collect(Collectors.toList());\n        return words.stream().filter(w -> w.chars().map(c -> Character.toLowerCase(c)).filter(c -> consonants.contains(c)).count() == n).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static String getClosestVowel(String word) {\n        var vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i >= 0; i--) {\n            if (word.charAt(i) == vowels.charAt(0) && word.charAt(i - 1)!= vowels.charAt(0) && word.charAt(i + 1)!= vowels.charAt(0)) {\n                return word.charAt(i) + \"\";\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static String matchParens(List<String> lst) {\n        String s1 = lst.get(0) + lst.get(1);\n        String s2 = lst.get(1) + lst.get(0);\n        return \"Yes\" if check(s1) || check(s2) else \"No\";\n    }\n    public static boolean check(String s) {\n        int depth = 0;\n        for (char ch : s.toCharArray()) {\n            if (ch == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return true if depth == 0 else false;\n    }\n}\n",
            "class Global {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        return Arrays.stream(arr).sorted().limit(k).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int solution(List<Integer> lst) {\n        return lst.stream()\n           .filter(x -> x % 2 == 0 && x % 2!= 0)\n           .mapToInt(x -> x)\n           .sum();\n    }\n}\n",
            "class Global {\n    public static int addElements(List<Integer> arr, int k) {\n        return Arrays.stream(arr.subList(0, k).toArray())\n               .filter(n -> n <= 2)\n               .mapToInt(n -> n)\n               .sum();\n    }\n}\n",
            "class Global {\n    public static List<Integer> getOddCollatz(int n) {\n        var collatz = new ArrayList<Integer>();\n        while (n!= 1) {\n            if (n % 2!= 0) {\n                collatz.add(n);\n                n = 3 * n + 1;\n            } else {\n                n = n / 2;\n            }\n        }\n        return new ArrayList<>(new TreeSet<>(collatz));\n    }\n}\n",
            "class Global {\n    public static boolean validDate(String date) {\n        if (date.length()!= 10 || date.charAt(2)!= '-' || date.charAt(5)!= '-') {\n            return false;\n        }\n        int m = Integer.parseInt(date.substring(0, 2));\n        int d = Integer.parseInt(date.substring(3, 5));\n        if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n            return d >= 1 && d <= 31;\n        }\n        if (m == 4 || m == 6 || m == 9 || m == 11) {\n            return d >= 1 && d <= 30;\n        }\n        if (m == 2) {\n            return d >= 1 && d <= 29;\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<String> splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            return Arrays.asList(String.valueOf(txt.chars().filter(c -> Character.isLowerCase(c) && c % 2 == 0).count()));\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isSorted(List<Integer> lst) {\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i - 1) > lst.get(i)) {\n                return false;\n            }\n        }\n        var freq = new HashMap<Integer, Integer>();\n        for (Integer i : lst) {\n            freq.put(i, freq.getOrDefault(i, 0) + 1);\n        }\n        return freq.values().stream().max(Integer::compareTo).orElse(0) <= 2;\n    }\n}\n",
            "class Global {\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        return \"YES\" if length > 0 && isPrime(length) else \"NO\";\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        var sign = -1;\n        if (arr.stream().filter(n -> n < 0).count() % 2 == 1) {\n            sign = 1;\n        }\n        return Optional.of(sign * arr.stream().mapToInt(n -> Math.abs(n)).sum());\n    }\n}\n",
            "class Global {\n    public static List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int minVal = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    var temp = new ArrayList<Integer>();\n                    if (i!= 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j!= 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i!= n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j!= n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    minVal = Math.min(minVal, temp.get(i % 2));\n                }\n            }\n        }\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < k; i++) {\n            result.add(1 if i % 2 == 0 else minVal);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> tri(int n) {\n        if (n == 0) {\n            return Arrays.asList(1);\n        }\n        var seq = new ArrayList<Integer>();\n        seq.add(1);\n        seq.add(3);\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                seq.add(i / 2 + 1);\n            } else {\n                seq.add(seq.get(i - 1) + seq.get(i - 2) + (i + 3) / 2);\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int digits(int n) {\n        var odds = new ArrayList<Integer>();\n        for (char d : String.valueOf(n).toCharArray()) {\n            if (Integer.parseInt(String.valueOf(d)) % 2 == 1) {\n                odds.add(Integer.parseInt(String.valueOf(d)));\n            }\n        }\n        return odds.isEmpty()? 0 : odds.stream().reduce(1, (x, y) -> x * y);\n    }\n}\n",
            "class Global {\n    public static boolean isNested(String s) {\n        var openIdx = new ArrayList<Integer>();\n        var closeIdx = new ArrayList<Integer>();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (ch == '[') {\n                openIdx.add(i);\n            } else if (ch == ']') {\n                closeIdx.add(i);\n            }\n        }\n        closeIdx.reverse();\n        int cnt = 0;\n        int i = 0;\n        int l = closeIdx.size();\n        for (int idx : openIdx) {\n            if (i < l && idx < closeIdx.get(i)) {\n                cnt += 1;\n                i += 1;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Double> lst) {\n        return lst.stream().mapToInt(n -> (int) Math.pow(Math.ceil(n), 2)).sum();\n    }\n}\n",
            "class Global {\n    public static boolean checkIfLastCharIsALetter(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n        String last = txt.substring(txt.lastIndexOf(' ') + 1);\n        return last.length() == 1 && last.charAt(0).isLetter();\n    }\n}\n",
            "class Global {\n    public static int canArrange(List<Integer> arr) {\n        if (arr.size() <= 1) {\n            return -1;\n        }\n        var idx = new ArrayList<Integer>();\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                idx.add(i);\n            }\n        }\n        return idx.isEmpty()? -1 : Collections.max(idx);\n    }\n}\n",
            "class Global {\n    public static List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst) {\n        var neg = new ArrayList<Integer>();\n        var pos = new ArrayList<Integer>();\n        for (Integer i : lst) {\n            if (i < 0) {\n                neg.add(i);\n            } else {\n                pos.add(i);\n            }\n        }\n        var max_neg = neg.isEmpty()? Optional.empty() : Optional.of(Collections.max(neg));\n        var min_pos = pos.isEmpty()? Optional.empty() : Optional.of(Collections.min(pos));\n        return List.of(max_neg, min_pos);\n    }\n}\n",
            "class Global {\n    public static Optional<Double> compareOne(Object a, Object b) {\n        if (a instanceof String) {\n            return Optional.of(Double.parseDouble(((String) a).replace(',', '.')));\n        } else if (a instanceof Integer) {\n            return Optional.of((Integer) a);\n        } else if (a instanceof Double) {\n            return Optional.of((Double) a);\n        }\n        throw new RuntimeException(\"Type Error\");\n    }\n}\n",
            "class Global {\n    public static boolean isEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int specialFactorial(int n) {\n        int fact = 1;\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String fixSpaces(String txt) {\n        return txt.replaceAll(\"\\\\s{3,}\", \"-\").replace(\" \", \"_\");\n    }\n}\n",
            "class Global {\n    public static String fileNameCheck(String fileName) {\n        var suf = new String[] {\"txt\", \"exe\", \"dll\"};\n        var lst = fileName.split(\".\");\n        if (lst.length!= 2 ||!lst[1].equals(suf[0]) || lst[0].length() == 0 ||!lst[0].matches(\"[a-zA-Z][a-zA-Z0-9]*\") || lst[0].matches(\".*[0-9]{4,}.*\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Integer> lst) {\n        var result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result += Math.pow(lst.get(i), 2);\n            } else if (i % 4 == 0) {\n                result += Math.pow(lst.get(i), 3);\n            } else {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String wordsInSentence(String sentence) {\n        var words = sentence.split(\" \");\n        return String.join(\" \", Arrays.stream(words).filter(w -> isPrime(w.length())).toArray(String[]::new));\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean simplify(String x, String n) {\n        String[] xs = x.split(\"/\");\n        String[] ns = n.split(\"/\");\n        int num = Integer.parseInt(xs[0]) * Integer.parseInt(ns[0]);\n        int den = Integer.parseInt(xs[1]) * Integer.parseInt(ns[1]);\n        return num % den == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> orderByPoints(List<Integer> nums) {\n        return nums.stream().sorted((a, b) -> {\n            var a_str = String.valueOf(a);\n            var b_str = String.valueOf(b);\n            var a_sum = 0;\n            var b_sum = 0;\n            for (int i = 0; i < a_str.length(); i++) {\n                a_sum += Integer.parseInt(a_str.substring(i, i + 1));\n            }\n            for (int i = 0; i < b_str.length(); i++) {\n                b_sum += Integer.parseInt(b_str.substring(i, i + 1));\n            }\n            return Integer.compare(a_sum, b_sum);\n        }).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int specialFilter(List<Integer> nums) {\n        return (int) nums.stream()\n           .filter(n -> n > 10 && n % 2 == 1 && String.valueOf(n).charAt(0) == '1' || '3' || '5' || '7' || '9')\n           .count();\n    }\n}\n",
            "class Global {\n    public static int getMaxTriples(int n) {\n        var c = new int[3];\n        for (int i = 1; i <= n; i++) {\n            int a = i * i - i + 1;\n            c[a % 3] += 1;\n        }\n        return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6;\n    }\n}\n",
            "class Global {\n    public static List<String> bf(String planet1, String planet2) {\n        var names = List.of(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!names.contains(planet1) ||!names.contains(planet2)) {\n            return List.of();\n        }\n        var l = names.indexOf(planet1);\n        var r = names.indexOf(planet2);\n        if (l > r) {\n            l = r;\n            r = l;\n        }\n        if (l == r) {\n            return List.of();\n        }\n        return names.subList(l + 1, r);\n    }\n}\n",
            "class Global {\n    public static List<String> sortedListSum(List<String> lst) {\n        var result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        result.sort((s1, s2) -> {\n            if (s1.length()!= s2.length()) {\n                return s1.length() - s2.length();\n            }\n            return s1.compareTo(s2);\n        });\n        return result;\n    }\n}\n",
            "class Global {\n    public static int xOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int doubleTheDifference(List<Double> lst) {\n        return lst.stream().filter(n -> n >= 0 && n % 2 == 1).mapToInt(n -> n * n).sum();\n    }\n}\n",
            "class Global {\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String strongestExtension(String className, List<String> extensions) {\n        int maxS = Integer.MIN_VALUE;\n        String maxExt = \"\";\n        for (String ext : extensions) {\n            int upper = ext.chars().filter(c -> Character.isUpperCase(c)).count();\n            int lower = ext.chars().filter(c -> Character.isLowerCase(c)).count();\n            int s = upper - lower;\n            if (s > maxS) {\n                maxS = s;\n                maxExt = ext;\n            }\n        }\n        return className + \".\" + maxExt;\n    }\n}\n",
            "class Global {\n    public static boolean cycpatternCheck(String a, String b) {\n        return a.length() >= b.length() && a.contains(b + b);\n    }\n}\n",
            "class Global {\n    public static List<Integer> evenOddCount(int num) {\n        var ds = String.valueOf(Math.abs(num));\n        var even = (int) Arrays.stream(ds.toCharArray()).filter(d -> (int) d % 2 == 0).count();\n        return Arrays.asList(even, ds.length() - even);\n    }\n}\n",
            "class Global {\n    public static String intToMiniRoman(int num) {\n        var values = new int[]{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        var numerals = new String[]{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        var res = new ArrayList<String>();\n        for (int i = 0; i < values.length; i++) {\n            while (num >= values[i]) {\n                res.add(numerals[i]);\n                num -= values[i];\n            }\n        }\n        return String.join(\"\", res);\n    }\n}\n",
            "class Global {\n    public static boolean rightAngleTriangle(int a, int b, int c) {\n        var s = Arrays.stream(new int[]{a, b, c}).sorted().toArray();\n        return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n    }\n}\n",
            "class Global {\n    public static String findMax(List<String> words) {\n        var maxCnt = 0;\n        var maxW = \"\";\n        for (String w : words) {\n            var cnt = new HashSet<Character>();\n            for (char c : w.toCharArray()) {\n                cnt.add(c);\n            }\n            if (cnt.size() > maxCnt) {\n                maxCnt = cnt.size();\n                maxW = w;\n            } else if (cnt.size() == maxCnt) {\n                maxW = min(maxW, w);\n            }\n        }\n        return maxW;\n    }\n}\n",
            "class Global {\n    public static List<Integer> eat(int num, int need, int remaining) {\n        if (need <= remaining) {\n            return Arrays.asList(num + need, remaining - need);\n        } else {\n            return Arrays.asList(num + remaining, 0);\n        }\n    }\n}\n",
            "class Global {\n    public static int doAlgebra(List<String> operators, List<Integer> operands) {\n        var ops = new ArrayList<String>(operators);\n        var nums = new ArrayList<Integer>(operands);\n        int i = ops.size() - 1;\n        while (i >= 0) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.pow(nums.get(i), nums.get(i + 1)));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n            i--;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"//\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n            i++;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n            i++;\n        }\n        return nums.get(0);\n    }\n}\n",
            "class Global {\n    public static String solve(String s) {\n        var result = new ArrayList<Character>();\n        for (char ch : s.toCharArray()) {\n            if (!Character.isLetter(ch)) {\n                result.add(ch);\n            } else if (Character.isUpperCase(ch)) {\n                result.add(Character.toLowerCase(ch));\n            } else {\n                result.add(Character.toUpperCase(ch));\n            }\n        }\n        return String.join(\"\", result);\n    }\n}\n",
            "class Global {\n    public static Optional<String> stringToMd5(String txt) {\n        if (txt == null) {\n            return Optional.empty();\n        }\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(txt.getBytes());\n            byte[] digest = md5.digest();\n            StringBuilder sb = new StringBuilder();\n            for (byte b : digest) {\n                sb.append(String.format(\"%02x\", b));\n            }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> generateIntegers(int a, int b) {\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n        var result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n"
        ],
        "javascript": [
            "export const hasCloseElements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "export const separateParenGroups = (parenString) => {\n    const groups = [];\n    let stk = [];\n    let currentGroup = \"\";\n    const parens = parenString.replace(\" \", \"\");\n    for (const ch of parens) {\n        if (ch === \"(\") {\n            stk.push(ch);\n            currentGroup += ch;\n        } else if (ch === \")\") {\n            stk.pop();\n            currentGroup += ch;\n            if (!stk.length) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "export const truncateNumber = (num) => {\n    return num - Math.floor(num);\n}\n",
            "export const belowZero = (operations) => {\n    let balance = 0;\n    for (const op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const meanAbsoluteDeviation = (numbers) => {\n    const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    const deviation = numbers.reduce((a, b) => a + Math.abs(b - mean), 0);\n    return deviation / numbers.length;\n}\n",
            "export const intersperse = (numbers, delimiter) => {\n    const result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i!== 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "export const parseNestedParens = (parenString) => {\n    const parenGroups = parenString.split(\" \");\n    const result = [];\n    for (const group of parenGroups) {\n        let maxDepth = 0;\n        let depth = 0;\n        for (const ch of group) {\n            if (ch === \"(\") {\n                depth += 1;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch === \")\") {\n                depth -= 1;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}\n",
            "export const filterBySubstring = (strs, substring) => {\n    return strs.filter(s => substring in s);\n}\n",
            "export const sumProduct = (numbers) => {\n    const nSum = numbers.reduce((x, y) => x + y, 0);\n    const nProduct = numbers.reduce((x, y) => x * y, 1);\n    return [nSum, nProduct];\n}\n",
            "export const rollingMax = (numbers) => {\n    const result = [];\n    let maxSoFar = -Infinity;\n    for (const num of numbers) {\n        maxSoFar = Math.max(maxSoFar, num);\n        result.push(maxSoFar);\n    }\n    return result;\n}\n",
            "export const isPalindrome = (s) => {\n    return s === s.split(\"\").reverse().join(\"\");\n}\nexport const makePalindrome = (s) => {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (isPalindrome(s.slice(i))) {\n            return s + s.slice(0, i).split(\"\").reverse().join(\"\");\n        }\n    }\n    return \"\";\n}\n",
            "export const stringXor = (a, b) => {\n    return a.split(\"\").map((x, i) => x ^ b[i]).join(\"\");\n}\n",
            "export const longest = (strs) => {\n    if (!strs.length) {\n        return null;\n    }\n    let longest_s = strs[0];\n    for (const s of strs) {\n        if (s.length > longest_s.length) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n",
            "export const greatestCommonDivisor = (a, b) => {\n    if (b === 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "export const allPrefixes = (s) => {\n    const prefixes = [];\n    for (let i = 0; i < s.length; i++) {\n        prefixes.push(s.slice(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "export const stringSequence = (n) => {\n    return \" \".join([i.toString() for i in Array.from(Array(n + 1).keys())]);\n}\n",
            "export const countDistinctCharacters = (s) => {\n    return new Set(s.toLowerCase()).size;\n}\n",
            "export const parseMusic = (musicString) => {\n    const durations = {\n        o: 4,\n        o: 2,\n        \".\": 1,\n    };\n    const notes = musicString.split(\" \");\n    return notes.map((note) => durations[note]);\n}\n",
            "export const howManyTimes = (s, substring) => {\n    let times = 0;\n    for (let i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.substring(i, i + substring.length) === substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "export const sortNumbers = (numbers) => {\n    const numDict = {\n        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n        nine: 9,\n    };\n    const numList = numbers.split(\" \").filter((x) => x in numDict);\n    numList.sort((a, b) => numDict[a] - numDict[b]);\n    return numList.join(\" \");\n}\n",
            "export const findClosestElements = (numbers) => {\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    let minDiff = Number.POSITIVE_INFINITY;\n    let closestPair = [];\n    for (let i = 1; i < sortedNumbers.length; i++) {\n        const diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "export const rescaleToUnit = (numbers) => {\n    const minNum = Math.min(...numbers);\n    const maxNum = Math.max(...numbers);\n    if (minNum === maxNum) {\n        return Array(numbers.length).fill(0.0);\n    } else {\n        return numbers.map((num) => (num - minNum) / (maxNum - minNum));\n    }\n}\n",
            "export const filterIntegers = (values) => {\n    return values.filter(x => typeof x === \"number\");\n}\n",
            "export const strLength = (s) => s.length;\n",
            "export const largestDivisor = (n) => {\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "export const factorize = (n) => {\n    const factors = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "export const removeDuplicates = (numbers) => {\n    const counts = {};\n    for (const num of numbers) {\n        counts[num] = counts.get(num, 0) + 1;\n    }\n    const res = [];\n    for (const num of numbers) {\n        if (counts[num] === 1) {\n            res.push(num);\n        }\n    }\n    return res;\n}\n",
            "export const flipCase = (s) => {\n    const flipped = [];\n    for (const ch of s) {\n        if (!ch.match(/[a-zA-Z]/)) {\n            flipped.push(ch);\n        } else if (ch.match(/[a-z]/)) {\n            flipped.push(ch.toUpperCase());\n        } else {\n            flipped.push(ch.toLowerCase());\n        }\n    }\n    return flipped.join('');\n}\n",
            "export const concatenate = (strs) => strs.join(\"\");\n",
            "export const filterByPrefix = (strs, prefixStr) => {\n    return strs.filter(s => s.startsWith(prefixStr));\n}\n",
            "export const getPositive = (l) => {\n    return l.filter(num => num > 0);\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(n)) + 1 > i; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const poly = (xs, x) => {\n    let res = 0.0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n}\nexport const findZero = (xs) => {\n    let x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        const mid = (x1 + x2) / 2;\n        if (poly(xs, mid) === 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "export const sortThird = (l) => {\n    const sortedThird = l.slice(0, -1).sort((a, b) => a - b);\n    return l.map((e, i) => (i % 3 === 0? sortedThird[i // 3] : e));\n}\n",
            "export const listUnique = (l) => {\n    return l.sort().filter((v, i, a) => a.indexOf(v) === i);\n}\n",
            "export const maxElement = (l) => {\n    return l.reduce((a, b) => Math.max(a, b));\n}\n",
            "export const fizzBuzz = (n) => {\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += String(i).split(\"\").filter(x => x === \"7\").length;\n        }\n    }\n    return cnt;\n}\n",
            "export const sortEven = (l) => {\n    return l.map((e, i) => (i % 2 === 0? e : l[i])).sort((a, b) => a - b);\n}\n",
            "export const encodeCyclic = (s) => {\n    return encodeCyclic(encodeCyclic(s));\n}\nexport const decodeCyclic = (s) => {\n    return decodeCyclic(encodeCyclic(s));\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const primeFib = (n) => {\n    let f = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\n",
            "export const triplesSumToZero = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "export const carRaceCollision = (n) => {\n    return n ** 2;\n}\n",
            "export const incrList = (l) => {\n    return l.map(i => i + 1);\n}\n",
            "export const pairsSumToZero = (l) => {\n    const seen = new Set();\n    for (const num of l) {\n        if (-num in seen) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "export const changeBase = (x, bas) => {\n    if (x === 0) {\n        return \"0\";\n    }\n    const digits = [];\n    while (x > 0) {\n        digits.push(x % bas);\n        x = Math.floor(x / bas);\n    }\n    return digits.reverse().join(\"\");\n}\n",
            "export const triangleArea = (a, h) => a * h / 2;\n",
            "export const fib4 = (n) => {\n    const fib = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n    }\n    return fib[n % 4];\n}\n",
            "export const median = (l) => {\n    const sl = l.sort((a, b) => a - b);\n    if (l.length % 2!== 0) {\n        return sl[l.length // 2];\n    } else {\n        return (sl[l.length // 2] + sl[l.length // 2 - 1]) / 2;\n    }\n}\n",
            "export const isPalindrome = (txt) => {\n    return txt === txt.split(\"\").reverse().join(\"\");\n}\n",
            "export const modp = (n, p) => {\n    let ret = 1;\n    for (let _ = 0; _ < n; _++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "export const encodeShift = (s) => {\n    return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - 97 + 5) % 26) + 97)).join(\"\");\n}\nexport const decodeShift = (s) => {\n    return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - 97 + 21) % 26) + 97)).join(\"\");\n}\n",
            "export const removeVowels = (txt) => {\n    return txt.replace(/[aeiouAEIOU]/g, \"\");\n}\n",
            "export const belowThreshold = (l, t) => {\n    return l.every(x => x < t);\n}\n",
            "export const add = (x, y) => {\n    return x + y;\n}\n",
            "export const sameChars = (s0, s1) => {\n    return new Set(s0).size === new Set(s1).size;\n}\n",
            "export const fib = (n) => {\n    if (n <= 1) {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n",
            "export const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"<\") {\n            depth += 1;\n        } else if (b === \">\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const monotonic = (l) => {\n    const diff = l.slice(1).map((x, i) => x - l[i]);\n    return diff.every((x) => x <= 0) || diff.every((x) => x >= 0);\n}\n",
            "export const common = (l1, l2) => {\n    return l1.filter(e => l2.includes(e));\n}\n",
            "export const largestPrimeFactor = (n) => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}\n",
            "export const sumToN = (n) => {\n    return n * (n + 1) / 2;\n}\n",
            "export const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"(\") {\n            depth += 1;\n        } else if (b === \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const derivative = (xs) => {\n    return xs.map((x, i) => x * i);\n}\n",
            "export const fibfib = (n) => {\n    let a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a, b, c = b, c, a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "export const vowelsCount = (s) => {\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() === \"a\" || s[i].toLowerCase() === \"e\" || s[i].toLowerCase() === \"i\" || s[i].toLowerCase() === \"o\" || s[i].toLowerCase() === \"u\" || (i === s.length - 1 && s[i].toLowerCase() === \"y\")) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const circularShift = (x, shift) => {\n    const xStr = String(x);\n    if (shift > xStr.length) {\n        return xStr.split(\"\").reverse().join(\"\");\n    } else {\n        return xStr.slice(-shift) + xStr.slice(0, -shift);\n    }\n}\n",
            "export const digitSum = (s) => {\n    return s.toUpperCase().split(\"\").reduce((acc, c) => acc + c.charCodeAt(0), 0);\n}\n",
            "export const fruitDistribution = (s, n) => {\n    const words = s.split(' ');\n    const apples = parseInt(words[words.indexOf(\"apples\") - 1]);\n    const oranges = parseInt(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "export const pluck = (arr) => {\n    const evens = arr.filter(n => n % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n    const minEven = Math.min(...evens);\n    return [minEven, arr.indexOf(minEven)];\n}\n",
            "export const search = (lst) => {\n    const freqs = {};\n    for (const n of lst) {\n        freqs[n] = freqs[n] || 0;\n        freqs[n] += 1;\n    }\n    const goodVals = Object.keys(freqs).filter(k => freqs[k] >= k);\n    return Math.max(...goodVals, -1);\n}\n",
            "export const strangeSortList = (lst) => {\n    const sl = lst.slice().sort((a, b) => a - b);\n    const result = [];\n    let left = 0;\n    let right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "export const triangleArea = (a, b, c) => {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2.0;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "export const willItFly = (q, w) => {\n    const isPalin = q.every((e, i) => e === q[q.length - i - 1]);\n    const total = q.reduce((acc, e) => acc + e, 0);\n    return isPalin && total <= w;\n}\n",
            "export const smallestChange = (arr) => {\n    let ans = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i]!== arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "export const totalMatch = (lst1, lst2) => {\n    const cnt1 = lst1.reduce((acc, s) => acc + s.length, 0);\n    const cnt2 = lst2.reduce((acc, s) => acc + s.length, 0);\n    return cnt1 <= cnt2? lst1 : lst2;\n}\n",
            "export const isMultiplyPrime = (a) => {\n    let cnt = 0;\n    for (let i = 2; i <= Math.floor(Math.sqrt(a)); i++) {\n        if (isPrime(i)) {\n            while (a % i === 0) {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    return cnt === 3;\n}\n",
            "export const isSimplePower = (x, n) => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}\n",
            "export const isCube = (a) => {\n    return Math.pow(Math.abs(a), 1 / 3) === Math.floor(Math.pow(Math.abs(a), 1 / 3));\n}\n",
            "export const hexKey = (num) => {\n    return num.split(\"\").reduce((acc, x) => {\n        if (x === \"2\" || x === \"3\" || x === \"5\" || x === \"7\" || x === \"B\" || x === \"D\") {\n            return acc + 1;\n        }\n        return acc;\n    }, 0);\n}\n",
            "export const decimalToBinary = (dec) => {\n    return `db${dec.toString(2)}db`;\n}\n",
            "export const isHappy = (s) => {\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const numericalLetterGrade = (grades) => {\n    const result = [];\n    for (const g of grades) {\n        if (g === 4.0) {\n            result.push(\"A+\");\n        } else if (g > 3.7) {\n            result.push(\"A\");\n        } else if (g > 3.3) {\n            result.push(\"A-\");\n        } else if (g > 3.0) {\n            result.push(\"B+\");\n        } else if (g > 2.7) {\n            result.push(\"B\");\n        } else if (g > 2.3) {\n            result.push(\"B-\");\n        } else if (g > 2.0) {\n            result.push(\"C+\");\n        } else if (g > 1.7) {\n            result.push(\"C\");\n        } else if (g > 1.3) {\n            result.push(\"C-\");\n        } else if (g > 1.0) {\n            result.push(\"D+\");\n        } else if (g > 0.7) {\n            result.push(\"D\");\n        } else if (g > 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n",
            "export const primeLength = (s) => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(length)) + 1 > i; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const startsOneEnds = (n) => {\n    return n === 1? 1 : 2 * 9 ** (n - 2);\n}\n",
            "export const solve = (n) => {\n    const digitsSum = n.toString().split(\"\").reduce((acc, d) => acc + parseInt(d), 0);\n    return digitsSum.toString(2);\n}\n",
            "export const add = (lst) => {\n    return lst.reduce((acc, cur, idx) => {\n        if (idx % 2 === 1 && cur % 2 === 0) {\n            return acc + cur;\n        }\n        return acc;\n    }, 0);\n}\n",
            "export const antiShuffle = (s) => {\n    const words = s.split(\" \").map((word) => word.split(\"\").sort().join(\"\"));\n    return words.join(\" \");\n}\n",
            "export const getRow = (lst, x) => {\n    const coords = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    return coords.sort((a, b) => (a[0] - b[0]) || (b[1] - a[1]));\n}\n",
            "export const sortArray = (arr) => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) {\n        return arr.sort((a, b) => b - a);\n    } else {\n        return arr.sort((a, b) => a - b);\n    }\n}\n",
            "export const encrypt = (s) => {\n    const result = [];\n    for (const ch of s) {\n        const shifted = ord(ch) + 4;\n        if (shifted > ord('z')) {\n            shifted -= 26;\n        }\n        result.push(String.fromCharCode(shifted));\n    }\n    return result.join(\"\");\n}\n",
            "export const nextSmallest = (lst) => {\n    const sl = lst.sort((a, b) => a - b);\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}\n",
            "export const isBored = (s) => {\n    const sentences = s.split(/[.!?]\\s*/);\n    return sentences.reduce((acc, sentence) => acc + (sentence.startsWith(\"I \")? 1 : 0), 0);\n}\n",
            "export const anyInt = (x, y, z) => {\n    return (\n        (typeof x === \"number\" && typeof y === \"number\" && typeof z === \"number\") &&\n        (x + y === z || x + z === y || y + z === x)\n    );\n}\n",
            "export const encode = (message) => {\n    const vowels = \"aeiouAEIOU\";\n    const result = [];\n    for (const ch of message) {\n        if (ch.isAlpha()) {\n            const ch1 = ch.toUpperCase() if ch.isLowerCase() else ch.toLowerCase();\n            if (ch1 in vowels) {\n                ch1 = String.fromCharCode(ch1.charCodeAt(0) + 2);\n            }\n            result.push(ch1);\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const skjkasdkd = (lst) => {\n    const primes = lst.filter(isPrime);\n    if (primes.length === 0) {\n        return 0;\n    }\n    const largest = String(Math.max(...primes));\n    return largest.split(\"\").reduce((acc, curr) => acc + Number(curr), 0);\n}\n",
            "export const checkDictCase = (d) => {\n    return!d || d.every((k) => k.toLowerCase() === k || k.toUpperCase() === k);\n}\n",
            "export const countUpTo = (n) => {\n    const primes = [];\n    for (let num = 2; num <= n; num++) {\n        if (primes.every((p) => num % p!== 0)) {\n            primes.push(num);\n        }\n    }\n    return primes;\n}\n",
            "export const multiply = (a, b) => {\n    return Math.abs(a) % 10 * Math.abs(b) % 10;\n}\n",
            "export const countUpper = (s) => {\n    const vowels = \"AEIOU\";\n    return s.match(/[AEIOU]/g).length;\n}\n",
            "export const closestInteger = (value) => {\n    const num = parseFloat(value);\n    return num >= 0? Math.floor(num + 0.5) : Math.ceil(num - 0.5);\n}\n",
            "export const makeAPile = (n) => {\n    return Array.from({ length: n }, (_, i) => n + 2 * i);\n}\n",
            "export const wordsString = (s) => {\n    return s.split(/[, ]/).filter(w => w.length > 0);\n}\n",
            "export const chooseNum = (x, y) => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    return y - 1;\n}\n",
            "export const roundedAvg = (n, m) => {\n    if (n > m) {\n        return null;\n    }\n    const rAvg = Math.floor((m + n) / 2.0 + 0.5);\n    return rAvg.toString(2);\n}\n",
            "export const allDigitsOdd = (s) => {\n    return s.split(\"\").every((digit) => digit % 2!== 0);\n}\nexport const uniqueDigits = (x) => {\n    return x.filter((num) => allDigitsOdd(num.toString())).sort((a, b) => a - b);\n}\n",
            "export const byLength = (arr) => {\n    const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const sortedArr = arr.filter(x => 1 <= x && x <= 9).sort((a, b) => b - a);\n    return sortedArr.map(x => digitNames[x - 1]);\n}\n",
            "export const f = (n) => {\n    const nums = Array.from(Array(n + 1).keys()).slice(1);\n    return nums.map((i) => (i % 2 === 0? nums.slice(0, i).reduce((x, y) => x + y, 0) : nums.slice(0, i).reduce((x, y) => x * y, 1)));\n}\n",
            "export const isPalindrome = (txt) => {\n    return txt === txt.split(\"\").reverse().join(\"\");\n}\nexport const evenOddPalindrome = (n) => {\n    const cnt = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const digitsSum = (n) => {\n    const nStr = String(n);\n    if (n >= 0) {\n        return nStr.split(\"\").reduce((acc, d) => acc + Number(d), 0);\n    } else {\n        return Number(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n    }\n}\nexport const countNums = (arr) => {\n    return arr.filter((n) => digitsSum(n) > 0).length;\n}\n",
            "export const moveOneBall = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    const sortedArr = arr.sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.slice(i) === sortedArr.slice(0, arr.length - i) && arr.slice(0, i) === sortedArr.slice(arr.length - i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const canExchange = (lst1, lst2) => {\n    const oddCnt = lst1.filter(num => num % 2!== 0).length;\n    const evenCnt = lst2.filter(num => num % 2 === 0).length;\n    return \"YES\" if evenCnt >= oddCnt else \"NO\";\n}\n",
            "export const histogram = (test) => {\n    const freq = {};\n    const words = test.split(\" \").filter(w => w.length > 0);\n    for (const w of words) {\n        freq[w] = freq[w] || 0;\n        freq[w] += 1;\n    }\n    const result = {};\n    if (Object.keys(freq).length > 0) {\n        const maxFreq = Math.max(...Object.values(freq));\n        for (const [k, v] of Object.entries(freq)) {\n            if (v === maxFreq) {\n                result[k] = v;\n            }\n        }\n    }\n    return result;\n}\n",
            "export const isPalindrome = (s) => {\n    return s === s.split(\"\").reverse().join(\"\");\n}\nexport const reverseDelete = (s, c) => {\n    const s1 = s.split(\"\").filter((ch) => c.indexOf(ch) === -1).join(\"\");\n    return [s1, isPalindrome(s1)? \"yes\" : \"no\"];\n}\n",
            "export const oddCount = (lst) => {\n    const result = [];\n    for (const num of lst) {\n        const n = lst.reduce((acc, d) => acc + (d.charCodeAt(0) % 2 === 1? 1 : 0), 0);\n        const rs = \"the number of odd elements in the string i of the input.\";\n        result.push(rs.replace(\"i\", String(n)));\n    }\n    return result;\n}\n",
            "export const minSubArraySum = (nums) => {\n    let minSum = 0;\n    let curSum = 0;\n    for (const n of nums) {\n        curSum = Math.min(curSum + n, 0);\n        minSum = Math.min(curSum, minSum);\n    }\n    if (minSum === 0) {\n        minSum = Math.min(...nums);\n    }\n    return minSum;\n}\n",
            "export const maxFill = (grid, capacity) => {\n    return Math.ceil(grid.reduce((acc, row) => acc + row.reduce((acc, num) => acc + num, 0), 0) / capacity);\n}\n",
            "export const countOnes = (num) => {\n    return num.toString(2).split(\"\").filter(x => x === \"1\").length;\n}\nexport const sortArray = (arr) => {\n    return arr.sort((a, b) => {\n        const aCount = countOnes(a);\n        const bCount = countOnes(b);\n        if (aCount === bCount) {\n            return a - b;\n        }\n        return bCount - aCount;\n    });\n}\n",
            "export const selectWords = (s, n) => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = s.split(\" \").filter(w => w.length > 0);\n    return words.filter(w => w.split(\"\").filter(c => c.toLowerCase() in consonants).length === n);\n}\n",
            "export const getClosestVowel = (word) => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i >= 0; i--) {\n        if (word[i] in vowels && word[i - 1]!== vowels && word[i + 1]!== vowels) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "export const check = (s) => {\n    let depth = 0;\n    for (const ch of s) {\n        if (ch === \"(\") {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const matchParens = (lst) => {\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    return \"Yes\" if check(s1) || check(s2) else \"No\";\n}\n",
            "export const maximum = (arr, k) => {\n    return arr.sort((a, b) => b - a).slice(0, k);\n}\n",
            "export const solution = (lst) => {\n    return lst.reduce((acc, x, i) => acc + (i % 2 === 0 && x % 2!== 0? x : 0), 0);\n}\n",
            "export const addElements = (arr, k) => {\n    return arr.slice(0, k).reduce((acc, n) => acc + Number(n.toString().length <= 2), 0);\n}\n",
            "export const getOddCollatz = (n) => {\n    const collatz = [1];\n    while (n!== 1) {\n        if (n % 2!== 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    return collatz.sort((a, b) => a - b);\n}\n",
            "export const validDate = (date) => {\n    if (date.length!== 10 || date[2]!== \"-\" || date[5]!== \"-\") {\n        return false;\n    }\n    const m = parseInt(date.slice(0, 2));\n    const d = parseInt(date.slice(3, 5));\n    if (m === 1 || m === 3 || m === 5 || m === 7 || m === 8 || m === 10 || m === 12) {\n        return d >= 1 && d <= 31;\n    }\n    if (m === 4 || m === 6 || m === 9 || m === 11) {\n        return d >= 1 && d <= 30;\n    }\n    if (m === 2) {\n        return d >= 1 && d <= 29;\n    }\n    return false;\n}\n",
            "export const splitWords = (txt) => {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [String(txt.split(\"\").filter(c => c.toLowerCase().charCodeAt(0) % 2 === 0).length)];\n    }\n}\n",
            "export const isSorted = (lst) => {\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const intersection = (interval1, interval2) => {\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n    return \"YES\" if length > 0 && isPrime(length) else \"NO\";\n}\n",
            "export const prodSigns = (arr) => {\n    if (!arr.length) {\n        return null;\n    }\n    if (0 in arr) {\n        return 0;\n    }\n    const sign = -1 * (arr.filter(n => n < 0).length % 2 === 1);\n    return sign * arr.reduce((acc, n) => acc + Math.abs(n), 0);\n}\n",
            "export const minPath = (grid, k) => {\n    const n = grid.length;\n    let minVal = n * n + 1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                const temp = [];\n                if (i!== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j!== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i!== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j!== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                minVal = Math.min(temp);\n            }\n        }\n    }\n    const result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(1);\n        if (i % 2 === 0) {\n            result.push(minVal);\n        }\n    }\n    return result;\n}\n",
            "export const tri = (n) => {\n    if (n === 0) {\n        return [1];\n    }\n    const seq = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "export const digits = (n) => {\n    const odds = n.toString().split(\"\").filter(d => d % 2 === 1).map(d => parseInt(d));\n    return odds.length > 0? odds.reduce((x, y) => x * y, 1) : 0;\n}\n",
            "export const isNested = (s) => {\n    const openIdx = [];\n    const closeIdx = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === \"[\") {\n            openIdx.push(i);\n        } else if (s[i] === \"]\") {\n            closeIdx.push(i);\n        }\n    }\n    closeIdx.reverse();\n    let cnt = 0;\n    let i = 0;\n    const l = closeIdx.length;\n    for (const idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "export const sumSquares = (lst) => {\n    return lst.reduce((acc, n) => acc + Math.pow(Math.ceil(n), 2), 0);\n}\n",
            "export const checkIfLastCharIsALetter = (txt) => {\n    if (!txt) {\n        return false;\n    }\n    const last = txt.split(' ').pop();\n    return last.length === 1 && last[0].match(/[a-z]/i);\n}\n",
            "export const canArrange = (arr) => {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    const idx = arr.slice(1).map((e, i) => e < arr[i]? i : -1).filter(e => e >= 0);\n    return Math.max(...idx, -1);\n}\n",
            "export const largestSmallestIntegers = (lst) => {\n    const neg = lst.filter(i => i < 0);\n    const pos = lst.filter(i => i > 0);\n    const maxNeg = neg.length > 0? Math.max(...neg) : null;\n    const minPos = pos.length > 0? Math.min(...pos) : null;\n    return [maxNeg, minPos];\n}\n",
            "export const anyToReal = (o) => {\n    if (typeof o === \"string\") {\n        return parseFloat(o.replace(\",\", \".\"));\n    } else if (typeof o === \"number\") {\n        return o;\n    } else if (typeof o === \"number\") {\n        return o;\n    }\n    throw new Error(\"Type Error\");\n}\nexport const compareOne = (a, b) => {\n    const a1 = anyToReal(a);\n    const b1 = anyToReal(b);\n    if (a1 === b1) {\n        return null;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n}\n",
            "export const isEqualToSumEven = (n) => {\n    return n % 2 === 0 && n >= 8;\n}\n",
            "export const specialFactorial = (n) => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "export const fixSpaces = (txt) => {\n    return txt.replace(/\\s{3,}/g, \"-\").replace(/\\s/g, \"_\");\n}\n",
            "export const fileNameCheck = (fileName) => {\n    const suf = [\"txt\", \"exe\", \"dll\"];\n    const lst = fileName.split(\".\");\n    if (lst.length!== 2 ||!lst[1] in suf || lst[0].length === 0 ||!lst[0][0].match(/[a-zA-Z]/) || lst[0].match(/[0-9]/g).length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "export const sumSquares = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0) {\n            result += Math.pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    return words.filter(w => isPrime(w.length)).join(\" \");\n}\n",
            "export const simplify = (x, n) => {\n    const xs = x.split(\"/\");\n    const ns = n.split(\"/\");\n    const num = parseInt(xs[0]) * parseInt(ns[0]);\n    const den = parseInt(xs[1]) * parseInt(ns[1]);\n    return num % den === 0;\n}\n",
            "export const digitsSum = (n) => {\n    const nStr = String(n);\n    if (n >= 0) {\n        return nStr.split(\"\").map(d => parseInt(d)).reduce((a, b) => a + b, 0);\n    } else {\n        return parseInt(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n    }\n}\nexport const orderByPoints = (nums) => {\n    return nums.sort((a, b) => digitsSum(b) - digitsSum(a));\n}\n",
            "export const specialFilter = (nums) => {\n    const odds = \"13579\";\n    return nums.filter(n => n > 10 && n % 2 === 1 && String(n)[0] in odds).length;\n}\n",
            "export const getMaxTriples = (n) => {\n    const c = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        const a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6;\n}\n",
            "export const bf = (planet1, planet2) => {\n    const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (names.indexOf(planet1) === -1 || names.indexOf(planet2) === -1) {\n        return [];\n    }\n    const l = names.indexOf(planet1);\n    const r = names.indexOf(planet2);\n    if (l > r) {\n        l, r = r, l;\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n}\n",
            "export const sortedListSum = (lst) => {\n    const result = lst.filter(s => s.length % 2 === 0);\n    return result.sort((a, b) => (a.length - b.length) || a.localeCompare(b));\n}\n",
            "export const xOrY = (n, x, y) => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(n)) + 1 > i; i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "export const doubleTheDifference = (lst) => {\n    return lst.reduce((acc, n) => acc + (n >= 0 && n % 2 === 1? n * n : 0), 0);\n}\n",
            "export const compare = (game, guess) => {\n    return game.map((x, i) => Math.abs(x - guess[i]));\n}\n",
            "export const strongestExtension = (className, extensions) => {\n    let maxS = -Infinity;\n    let maxExt = \"\";\n    for (const ext of extensions) {\n        const upper = ext.split(\"\").filter((c) => c.toUpperCase() === c).length;\n        const lower = ext.split(\"\").filter((c) => c.toLowerCase() === c).length;\n        const s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return `${className}.${maxExt}`;\n}\n",
            "export const cycpatternCheck = (a, b) => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; i++) {\n        if (b.slice(i) + b.slice(0, i) in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const evenOddCount = (num) => {\n    const ds = String(Math.abs(num));\n    const even = ds.split(\"\").filter((d) => d % 2 === 0).length;\n    return [even, ds.length - even];\n}\n",
            "export const intToMiniRoman = (num) => {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    const res = [];\n    for (let i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.push(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join(\"\");\n}\n",
            "export const rightAngleTriangle = (a, b, c) => {\n    const s = [a, b, c].sort((a, b) => a - b);\n    return s[0] * s[0] + s[1] * s[1] === s[2] * s[2];\n}\n",
            "export const findMax = (words) => {\n    let maxCnt = 0;\n    let maxW = \"\";\n    for (const w of words) {\n        const cnt = new Set(w).size;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt === maxCnt) {\n            maxW = maxW.length < w.length? w : maxW;\n        }\n    }\n    return maxW;\n}\n",
            "export const eat = (num, need, remaining) => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "export const doAlgebra = (operators, operands) => {\n    const ops = operators.slice();\n    const nums = operands.slice();\n    let i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] === \"**\") {\n            nums[i] = Math.pow(nums[i], nums[i + 1]);\n            nums.pop(i + 1);\n            ops.pop(i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        } else if (ops[i] === \"//\") {\n            nums[i] = nums[i] // nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        } else if (ops[i] === \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "export const solve = (s) => {\n    const result = [];\n    for (const ch of s) {\n        if (!ch.match(/[a-zA-Z]/)) {\n            result.push(ch);\n        } else if (ch.match(/[A-Z]/)) {\n            result.push(ch.toLowerCase());\n        } else {\n            result.push(ch.toUpperCase());\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const stringToMd5 = (txt) => {\n    if (!txt) {\n        return null;\n    }\n    const md5Hash = md5(txt);\n    return md5Hash;\n}\n",
            "export const generateIntegers = (a, b) => {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n    return [...Array(upper - lower + 1).keys()].filter(i => i % 2 === 0);\n}\n"
        ],
        "kotlin": [
            "fun hasCloseElements(numbers: List<Double>, threshold: Double): Boolean {\n    for (i in numbers.indices) {\n        for (j in numbers.indices) {\n            if (i!= j && abs(numbers[i] - numbers[j]) < threshold) {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "fun separateParenGroups(parenString: String): List<String> {\n    val groups = mutableListOf<String>()\n    var stk = mutableListOf<Char>()\n    var currentGroup = \"\"\n    val parens = parenString.replace(\" \", \"\")\n    for (ch in parens) {\n        if (ch == \"(\") {\n            stk.add(ch)\n            currentGroup += ch\n        } else if (ch == \")\") {\n            stk.removeLast()\n            currentGroup += ch\n            if (stk.isEmpty()) {\n                groups.add(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "fun truncateNumber(num: Double): Double {\n    return num - floor(num)\n}\n",
            "fun belowZero(operations: List<Int>): Boolean {\n    var balance = 0\n    for (op in operations) {\n        balance += op\n        if (balance < 0) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun meanAbsoluteDeviation(numbers: List<Double>): Double {\n    val mean = numbers.sum() / numbers.size\n    return numbers.sumByDouble { abs(it - mean) } / numbers.size\n}\n",
            "fun intersperse(numbers: List<Int>, delimiter: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in numbers.indices) {\n        if (i!= 0) {\n            result.add(delimiter)\n        }\n        result.add(numbers[i])\n    }\n    return result\n}\n",
            "fun parseNestedParens(parenString: String): List<Int> {\n    val result = mutableListOf<Int>()\n    val parenGroups = parenString.split()\n    for (group in parenGroups) {\n        var maxDepth = 0\n        var depth = 0\n        for (ch in group) {\n            if (ch == \"(\") {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if (ch == \")\") {\n                depth -= 1\n            }\n        }\n        result.add(maxDepth)\n    }\n    return result\n}\n",
            "fun filterBySubstring(strs: List<String>, substring: String): List<String> {\n    return strs.filter { it.contains(substring) }\n}\n",
            "fun sumProduct(numbers: List<Int>): List<Int> {\n    val nSum = numbers.sum()\n    val nProduct = numbers.reduce { x, y -> x * y }\n    return listOf(nSum, nProduct)\n}\n",
            "fun rollingMax(numbers: List<Int>): List<Int> {\n    val maxSoFar = mutableListOf<Int>()\n    var maxSoFarValue = Int.MIN_VALUE\n    for (num in numbers) {\n        maxSoFarValue = max(maxSoFarValue, num)\n        maxSoFar.add(maxSoFarValue)\n    }\n    return maxSoFar\n}\n",
            "fun isPalindrome(s: String): Boolean {\n    return s == s.reversed()\n}\nfun makePalindrome(s: String): String {\n    if (isPalindrome(s)) {\n        return s\n    }\n    for (i in 0 until s.length) {\n        if (isPalindrome(s.substring(i))) {\n            return s + s.substring(0, i).reversed()\n        }\n    }\n    return \"\"\n}\n",
            "fun stringXor(a: String, b: String): String {\n    return a.zip(b).map { (x, y) -> if (x == y) \"0\" else \"1\" }.joinToString(\"\")\n}\n",
            "fun longest(strs: List<String>): String? {\n    if (strs.isEmpty()) {\n        return null\n    }\n    var longestS = strs[0]\n    for (s in strs) {\n        if (s.length > longestS.length) {\n            longestS = s\n        }\n    }\n    return longestS\n}\n",
            "fun greatestCommonDivisor(a: Int, b: Int): Int {\n    if (b == 0) {\n        return a\n    } else {\n        return greatestCommonDivisor(b, a % b)\n    }\n}\n",
            "fun allPrefixes(s: String): List<String> {\n    val prefixes = mutableListOf<String>()\n    for (i in 0 until s.length) {\n        prefixes.add(s.substring(0, i + 1))\n    }\n    return prefixes\n}\n",
            "fun stringSequence(n: Int): String {\n    return (0..n).joinToString(\" \")\n}\n",
            "fun countDistinctCharacters(s: String): Int {\n    return s.toLowerCase().toSet().size\n}\n",
            "fun parseMusic(musicString: String): List<Int> {\n    val durations = mapOf(\"o\" to 4, \"o|\" to 2, \".|\" to 1)\n    return musicString.split().map { durations[it]!! }\n}\n",
            "fun howManyTimes(s: String, substring: String): Int {\n    var times = 0\n    for (i in s.indices) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "fun sortNumbers(numbers: String): String {\n    val numDict = mapOf(\n        \"zero\" to 0,\n        \"one\" to 1,\n        \"two\" to 2,\n        \"three\" to 3,\n        \"four\" to 4,\n        \"five\" to 5,\n        \"six\" to 6,\n        \"seven\" to 7,\n        \"eight\" to 8,\n        \"nine\" to 9\n    )\n    val numList = numbers.split(\" \").filter { it in numDict }\n    numList.sortWith(compareBy { numDict[it] })\n    return numList.joinToString(\" \")\n}\n",
            "fun findClosestElements(numbers: List<Double>): List<Double> {\n    val sortedNumbers = numbers.sorted()\n    var minDiff = Double.POSITIVE_INFINITY\n    var closestPair = listOf<Double>()\n    for (i in 1 until sortedNumbers.size) {\n        val diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if (diff < minDiff) {\n            minDiff = diff\n            closestPair = listOf(sortedNumbers[i - 1], sortedNumbers[i])\n        }\n    }\n    return closestPair\n}\n",
            "fun rescaleToUnit(numbers: List<Double>): List<Double> {\n    val minNum = numbers.min()!!\n    val maxNum = numbers.max()!!\n    if (minNum == maxNum) {\n        return List(numbers.size) { 0.0 }\n    } else {\n        return numbers.map { (it - minNum) / (maxNum - minNum) }\n    }\n}\n",
            "fun filterIntegers(values: List<Any>): List<Int> {\n    return values.filterIsInstance<Int>()\n}\n",
            "fun strLength(s: String): Int {\n    return s.length\n}\n",
            "fun largestDivisor(n: Int): Int {\n    for (i in 2..n) {\n        if (n % i == 0) {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "fun factorize(n: Int): List<Int> {\n    val factors = mutableListOf<Int>()\n    var divisor = 2\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "fun removeDuplicates(numbers: List<Int>): List<Int> {\n    val counts = mutableMapOf<Int, Int>()\n    for (num in numbers) {\n        counts[num] = counts.getOrDefault(num, 0) + 1\n    }\n    val res = mutableListOf<Int>()\n    for (num in numbers) {\n        if (counts[num] == 1) {\n            res.add(num)\n        }\n    }\n    return res\n}\n",
            "fun flipCase(s: String): String {\n    val flipped = mutableListOf<Char>()\n    for (ch in s) {\n        if (!ch.isLetter()) {\n            flipped.add(ch)\n        } else if (ch.isLowerCase()) {\n            flipped.add(ch.toUpperCase())\n        } else {\n            flipped.add(ch.toLowerCase())\n        }\n    }\n    return flipped.joinToString(\"\")\n}\n",
            "fun concatenate(strs: List<String>): String {\n    return strs.joinToString(separator = \"\")\n}\n",
            "fun filterByPrefix(strs: List<String>, prefixStr: String): List<String> {\n    return strs.filter { it.startsWith(prefixStr) }\n}\n",
            "fun getPositive(l: List<Int>): List<Int> {\n    return l.filter { it > 0 }\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..floor(sqrt(n)).toInt()) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun poly(xs: List<Int>, x: Double): Double {\n    var res = 0.0\n    for (i in xs.indices) {\n        res += xs[i] * x.pow(i.toDouble())\n    }\n    return res\n}\nfun findZero(xs: List<Int>): Double {\n    var x1 = 1.0\n    var x2 = -1.0\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2\n        x2 *= 2\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        val mid = (x1 + x2) / 2\n        if (poly(xs, mid) == 0.0) {\n            return mid\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "fun sortThird(l: List<Int>): List<Int> {\n    val sortedThird = l.sortedBy { it % 3 }\n    return sortedThird.mapIndexed { i, e -> if (i % 3 == 0) e else l[i] }\n}\n",
            "fun listUnique(l: List<Int>): List<Int> {\n    return l.sorted().distinct()\n}\n",
            "fun maxElement(l: List<Int>): Int {\n    return if (l.isEmpty()) 0 else l.max()!!\n}\n",
            "fun fizzBuzz(n: Int): Int {\n    var cnt = 0\n    for (i in 0 until n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += (i.toString().count { it == '7' })\n        }\n    }\n    return cnt\n}\n",
            "fun sortEven(l: List<Int>): List<Int> {\n    val sortedEven = l.filterIndexed { i, _ -> i % 2 == 0 }.sorted()\n    return l.mapIndexed { i, _ -> if (i % 2 == 0) sortedEven[i // 2] else l[i] }\n}\n",
            "fun encodeCyclic(s: String): String {\n    val result = mutableListOf<Char>()\n    for (i in 0 until s.length step 3) {\n        if (i + 3 > s.length) {\n            result.addAll(s.substring(i).toList())\n        } else {\n            result.add(s[i + 1])\n            result.add(s[i])\n            result.add(s[i + 2])\n        }\n    }\n    return result.joinToString(\"\")\n}\nfun decodeCyclic(s: String): String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..floor(sqrt(n.toDouble())).toInt()) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\nfun primeFib(n: Int): Int {\n    var f = intArrayOf(0, 1)\n    var cnt = 0\n    while (cnt < n) {\n        f = intArrayOf(f[1], f[0] + f[1])\n        if (isPrime(f[1])) {\n            cnt += 1\n        }\n    }\n    return f[1]\n}\n",
            "fun triplesSumToZero(l: List<Int>): Boolean {\n    for (i in l.indices) {\n        for (j in i + 1 until l.size) {\n            for (k in j + 1 until l.size) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "fun carRaceCollision(n: Int): Int {\n    return n * n\n}\n",
            "fun incrList(l: List<Int>): List<Int> {\n    return l.map { it + 1 }\n}\n",
            "fun pairsSumToZero(l: List<Int>): Boolean {\n    val seen = mutableSetOf<Int>()\n    for (num in l) {\n        if (-num in seen) {\n            return true\n        }\n        seen.add(num)\n    }\n    return false\n}\n",
            "fun changeBase(x: Int, bas: Int): String {\n    val digits = mutableListOf<String>()\n    while (x > 0) {\n        digits.add(x % bas.toString())\n        x /= bas\n    }\n    return digits.reversed().joinToString(\"\")\n}\n",
            "fun triangleArea(a: Int, h: Int): Double {\n    return a * h / 2.0\n}\n",
            "fun fib4(n: Int): Int {\n    val fib = IntArray(4) { 0 }\n    fib[0] = 0\n    fib[1] = 0\n    fib[2] = 2\n    fib[3] = 0\n    for (i in 4 until n + 1) {\n        fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4] + fib[(i - 3) % 4]\n    }\n    return fib[n % 4]\n}\n",
            "fun median(l: List<Double>): Double {\n    val sl = l.sorted()\n    return if (l.size % 2!= 0) {\n        sl[l.size / 2]\n    } else {\n        (sl[l.size / 2] + sl[l.size / 2 - 1]) / 2\n    }\n}\n",
            "fun isPalindrome(txt: String): Boolean {\n    return txt == txt.reversed()\n}\n",
            "fun modp(n: Int, p: Int): Int {\n    var ret = 1\n    for (i in 0 until n) {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "fun encodeShift(s: String): String {\n    return s.map { (it.toInt() - 97 + 5) % 26 + 97 }.joinToString(\"\")\n}\nfun decodeShift(s: String): String {\n    return s.map { (it.toInt() - 97 + 21) % 26 + 97 }.joinToString(\"\")\n}\n",
            "fun removeVowels(txt: String): String {\n    return txt.filter { it!in \"aeiouAEIOU\" }\n}\n",
            "fun belowThreshold(l: List<Int>, t: Int): Boolean {\n    return l.all { it < t }\n}\n",
            "fun add(x: Int, y: Int): Int {\n    return x + y\n}\n",
            "fun sameChars(s0: String, s1: String): Boolean {\n    return s0.toSet() == s1.toSet()\n}\n",
            "fun fib(n: Int): Int {\n    return if (n <= 1) n else fib(n - 1) + fib(n - 2)\n}\n",
            "fun correctBracketing(brackets: String): Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == \"<\") {\n            depth += 1\n        } else if (b == \">\") {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "fun monotonic(l: List<Int>): Boolean {\n    val diff = l.zipWithNext().map { it.second - it.first }\n    return diff.all { it <= 0 } || diff.all { it >= 0 }\n}\n",
            "fun common(l1: List<Int>, l2: List<Int>): List<Int> {\n    return l1.filter { it in l2 }.sorted()\n}\n",
            "fun largestPrimeFactor(n: Int): Int {\n    var i = 2\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i\n        } else {\n            i += 1\n        }\n    }\n    return n\n}\n",
            "fun sumToN(n: Int): Int {\n    return (1..n).sum()\n}\n",
            "fun correctBracketing(brackets: String): Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == \"(\") {\n            depth += 1\n        } else if (b == \")\") {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "fun derivative(xs: List<Int>): List<Int> {\n    return xs.mapIndexed { index, x -> x * index }\n}\n",
            "fun fibfib(n: Int): Int {\n    var a = 0\n    var b = 0\n    var c = 1\n    while (n > 2) {\n        a = b\n        b = c\n        c = a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "fun vowelsCount(s: String): Int {\n    val vowels = \"aeiou\"\n    var cnt = 0\n    for (i in s.indices) {\n        if (s[i].toLowerCase() in vowels || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "fun circularShift(x: Int, shift: Int): String {\n    val xStr = x.toString()\n    if (shift > xStr.length) {\n        return xStr.reversed()\n    } else {\n        return xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift)\n    }\n}\n",
            "fun digitSum(s: String): Int {\n    return s.filter { it.isUpperCase() }.map { it.toInt() }.sum()\n}\n",
            "fun fruitDistribution(s: String, n: Int): Int {\n    val words = s.split(\" \")\n    val apples = words[words.indexOf(\"apples\") - 1].toInt()\n    val oranges = words[words.indexOf(\"oranges\") - 1].toInt()\n    return n - apples - oranges\n}\n",
            "fun pluck(arr: List<Int>): List<Int> {\n    val evens = arr.filter { it % 2 == 0 }\n    if (evens.isEmpty()) {\n        return emptyList()\n    }\n    val minEven = evens.min()!!\n    return listOf(minEven, arr.indexOf(minEven))\n}\n",
            "fun search(lst: List<Int>): Int {\n    val freqs = mutableMapOf<Int, Int>()\n    for (n in lst) {\n        freqs[n] = freqs.getOrDefault(n, 0) + 1\n    }\n    val goodVals = freqs.filter { it.value >= it.key }.map { it.key }\n    return goodVals.maxOrNull()?: -1\n}\n",
            "fun strangeSortList(lst: List<Int>): List<Int> {\n    val sl = lst.sorted()\n    val result = mutableListOf<Int>()\n    var left = 0\n    var right = sl.size - 1\n    while (left <= right) {\n        result.add(sl[left])\n        left += 1\n        if (left <= right) {\n            result.add(sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "fun triangleArea(a: Int, b: Int, c: Int): Double {\n    if (a + b > c && a + c > b && b + c > a) {\n        val s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        return -1.0\n    }\n}\n",
            "fun willItFly(q: List<Int>, w: Int): Boolean {\n    return q.size > 0 && q.all { it == q.last } && q.sum() <= w\n}\n",
            "fun smallestChange(arr: List<Int>): Int {\n    var ans = 0\n    for (i in 0 until arr.size / 2) {\n        if (arr[i]!= arr[arr.size - i - 1]) {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "fun totalMatch(lst1: List<String>, lst2: List<String>): List<String> {\n    val cnt1 = lst1.sumBy { it.length }\n    val cnt2 = lst2.sumBy { it.length }\n    return lst1 if cnt1 <= cnt2 else lst2\n}\n",
            "fun isMultiplyPrime(a: Int): Boolean {\n    var cnt = 0\n    for (i in 2..a) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "fun isSimplePower(x: Int, n: Int): Boolean {\n    if (n < 2) {\n        return x == n\n    }\n    var tmp = 1\n    while (tmp < x) {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "fun isCube(a: Int): Boolean {\n    return abs(a) == (a * a * a)\n}\n",
            "fun hexKey(num: String): Int {\n    return num.count { it in \"2357BD\" }\n}\n",
            "fun decimalToBinary(dec: Int): String {\n    return \"db\" + dec.toString(2) + \"db\"\n}\n",
            "fun isHappy(s: String): Boolean {\n    if (s.length < 3) {\n        return false\n    }\n    for (i in 0 until s.length - 2) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun numericalLetterGrade(grades: List<Double>): List<String> {\n    val result = mutableListOf<String>()\n    for (g in grades) {\n        if (g == 4.0) {\n            result.add(\"A+\")\n        } else if (g > 3.7) {\n            result.add(\"A\")\n        } else if (g > 3.3) {\n            result.add(\"A-\")\n        } else if (g > 3.0) {\n            result.add(\"B+\")\n        } else if (g > 2.7) {\n            result.add(\"B\")\n        } else if (g > 2.3) {\n            result.add(\"B-\")\n        } else if (g > 2.0) {\n            result.add(\"C+\")\n        } else if (g > 1.7) {\n            result.add(\"C\")\n        } else if (g > 1.3) {\n            result.add(\"C-\")\n        } else if (g > 1.0) {\n            result.add(\"D+\")\n        } else if (g > 0.7) {\n            result.add(\"D\")\n        } else if (g > 0.0) {\n            result.add(\"D-\")\n        } else {\n            result.add(\"E\")\n        }\n    }\n    return result\n}\n",
            "fun primeLength(s: String): Boolean {\n    val length = s.length\n    if (length < 2) {\n        return false\n    }\n    for (i in 2..floor(sqrt(length.toDouble())).toInt()) {\n        if (length % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun startsOneEnds(n: Int): Int {\n    return if (n == 1) 1 else 2 * 9 * (10.0.pow(n - 2))\n}\n",
            "fun solve(n: Int): String {\n    val digitsSum = n.toString().map { it.toInt() }.sum()\n    return Integer.toBinaryString(digitsSum)\n}\n",
            "fun add(lst: List<Int>): Int {\n    return lst.filterIndexed { index, element -> index % 2 == 1 && element % 2 == 0 }.sum()\n}\n",
            "fun antiShuffle(s: String): String {\n    val words = s.split(\" \").map { it.sorted().joinToString(\"\") }\n    return words.joinToString(\" \")\n}\n",
            "fun getRow(lst: List<List<Int>>, x: Int): List<List<Int>> {\n    val coords = mutableListOf<List<Int>>()\n    for (i in lst.indices) {\n        for (j in lst[i].indices) {\n            if (lst[i][j] == x) {\n                coords.add(listOf(i, j))\n            }\n        }\n    }\n    return coords.sortedWith(compareBy({ it[0] }, { -it[1] }))\n}\n",
            "fun sortArray(arr: List<Int>): List<Int> {\n    if (arr.isEmpty()) {\n        return emptyList()\n    }\n    if (arr[0] + arr[arr.lastIndex] % 2 == 0) {\n        return arr.sortedDescending()\n    } else {\n        return arr.sorted()\n    }\n}\n",
            "fun encrypt(s: String): String {\n    val result = mutableListOf<Char>()\n    for (ch in s) {\n        val shifted = (ord(ch) + 4).takeIf { it > ord('z') }?.let { it - 26 }?: it\n        result.add(shifted.toChar())\n    }\n    return result.joinToString(\"\")\n}\n",
            "fun nextSmallest(lst: List<Int>): Int? {\n    val sl = lst.sorted().toSet()\n    if (sl.size < 2) {\n        return null\n    }\n    return sl[1]\n}\n",
            "fun isBored(s: String): Int {\n    val sentences = Pattern.compile(r\"[.!?]\\s*\").split(s)\n    return sentences.filter { it.length >= 2 }.count { it.startsWith(\"I \") }\n}\n",
            "fun anyInt(x: Any, y: Any, z: Any): Boolean {\n    return when {\n        x is Int && y is Int && z is Int -> (x + y == z) || (x + z == y) || (y + z == x)\n        else -> false\n    }\n}\n",
            "fun encode(message: String): String {\n    val vowels = \"aeiouAEIOU\"\n    val result = mutableListOf<Char>()\n    for (ch in message) {\n        if (ch.isLetter()) {\n            val ch1 = if (ch.isLowerCase()) ch.toUpperCase() else ch.toLowerCase()\n            if (ch1 in vowels) {\n                ch1 = ch1.toString().toInt() + 2\n            }\n            result.add(ch1.toChar())\n        } else {\n            result.add(ch)\n        }\n    }\n    return result.joinToString(\"\")\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..floor(sqrt(n.toDouble())).toInt()) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\nfun skjkasdkd(lst: List<Int>): Int {\n    val primes = lst.filter { isPrime(it) }\n    if (primes.isEmpty()) {\n        return 0\n    }\n    val largest = max(primes).toString()\n    return largest.sumBy { it.digitToInt() }\n}\n",
            "fun checkDictCase(d: Map<String, String>): Boolean {\n    return d.keys.all { it.isLowerCase() } || d.keys.all { it.isUpperCase() }\n}\n",
            "fun countUpTo(n: Int): List<Int> {\n    val primes = mutableListOf<Int>()\n    for (num in 2..n) {\n        if (primes.all { num % it!= 0 }) {\n            primes.add(num)\n        }\n    }\n    return primes\n}\n",
            "fun multiply(a: Int, b: Int): Int {\n    return (a.absoluteValue % 10) * (b.absoluteValue % 10)\n}\n",
            "fun countUpper(s: String): Int {\n    val vowels = \"AEIOU\"\n    return s.filterIndexed { index, c -> index % 2 == 0 && c in vowels }.count()\n}\n",
            "fun closestInteger(value: String): Int {\n    val num = value.toFloat()\n    return if (num >= 0) num.toInt() + 0.5 else num.toInt() - 0.5\n}\n",
            "fun makeAPile(n: Int): List<Int> {\n    return (0 until n).map { n + 2 * it }\n}\n",
            "fun wordsString(s: String): List<String> {\n    return s.split(Regex(\",| \"))\n       .filter { it.isNotEmpty() }\n}\n",
            "fun chooseNum(x: Int, y: Int): Int {\n    return if (x > y) -1 else if (y % 2 == 0) y else y - 1\n}\n",
            "fun roundedAvg(n: Int, m: Int): String? {\n    if (n > m) {\n        return null\n    }\n    val rAvg = (m + n) / 2.0 + 0.5\n    return Integer.toBinaryString(rAvg.toInt())\n}\n",
            "fun allDigitsOdd(s: String): Boolean {\n    return s.all { it.toInt() % 2!= 0 }\n}\nfun uniqueDigits(x: List<Int>): List<Int> {\n    return x.filter { allDigitsOdd(it.toString()) }.sorted()\n}\n",
            "fun byLength(arr: List<Int>): List<String> {\n    val digitNames = listOf(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    val sortedArr = arr.filter { it in 1..9 }.sortedDescending()\n    return sortedArr.map { digitNames[it-1] }\n}\n",
            "fun f(n: Int): List<Int> {\n    val nums = (1..n).toList()\n    return nums.mapIndexed { i, _ ->\n        if (i % 2!= 0) nums.subList(0, i).reduce { x, y -> x * y } else nums.subList(0, i).sum()\n    }\n}\n",
            "fun isPalindrome(txt: String): Boolean {\n    return txt == txt.reversed()\n}\nfun evenOddPalindrome(n: Int): List<Int> {\n    val cnt = mutableListOf(0, 0)\n    for (i in 1..n) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}\n",
            "fun digitsSum(n: Int): Int {\n    val nStr = n.toString()\n    return if (n >= 0) {\n        nStr.map { it.toInt() }.sum()\n    } else {\n        (nStr.substring(0, 2).toInt() * 2) + digitsSum(n.absoluteValue)\n    }\n}\nfun countNums(arr: List<Int>): Int {\n    return arr.count { digitsSum(it) > 0 }\n}\n",
            "fun moveOneBall(arr: List<Int>): Boolean {\n    if (arr.isEmpty()) {\n        return true\n    }\n    val sortedArr = arr.sorted()\n    for (i in 0 until arr.size) {\n        if (arr.subList(i, arr.size) == sortedArr.subList(0, arr.size - i) && arr.subList(0, i) == sortedArr.subList(arr.size - i, arr.size)) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun canExchange(lst1: List<Int>, lst2: List<Int>): String {\n    val oddCnt = lst1.count { it % 2!= 0 }\n    val evenCnt = lst2.count { it % 2 == 0 }\n    return \"YES\" if evenCnt >= oddCnt else \"NO\"\n}\n",
            "fun histogram(test: String): Map<String, Int> {\n    val freq = mutableMapOf<String, Int>()\n    val words = test.split(\" \").filter { it.length > 0 }\n    for (w in words) {\n        freq[w] = freq.getOrDefault(w, 0) + 1\n    }\n    val result = mutableMapOf<String, Int>()\n    if (freq.isNotEmpty()) {\n        val maxFreq = freq.values.max()!!\n        for (k in freq.keys) {\n            if (freq[k] == maxFreq) {\n                result[k] = freq[k]!!\n            }\n        }\n    }\n    return result\n}\n",
            "fun isPalindrome(s: String): Boolean {\n    return s == s.reversed()\n}\nfun reverseDelete(s: String, c: String): List<String> {\n    val s1 = s.filter { it!in c }.joinToString(\"\")\n    return listOf(s1, \"yes\" if isPalindrome(s1) else \"no\")\n}\n",
            "fun oddCount(lst: List<String>): List<String> {\n    val result = mutableListOf<String>()\n    for (num in lst) {\n        val n = num.map { it.toInt() }.sumBy { if (it % 2 == 1) 1 else 0 }\n        val rs = \"the number of odd elements in the string i of the input.\"\n        result.add(rs.replace(\"i\", n.toString()))\n    }\n    return result\n}\n",
            "fun minSubArraySum(nums: List<Int>): Int {\n    var minSum = 0\n    var curSum = 0\n    for (n in nums) {\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if (minSum == 0) {\n        minSum = min(nums)\n    }\n    return minSum\n}\n",
            "fun maxFill(grid: List<List<Int>>, capacity: Int): Int {\n    return grid.map { it.sum() }.map { it.toDouble() / capacity }.map { ceil(it) }.sum()\n}\n",
            "fun countOnes(num: Int): Int {\n    return Integer.bitCount(num)\n}\nfun sortArray(arr: List<Int>): List<Int> {\n    return arr.sortedWith(compareBy({ countOnes(it) }, { it }))\n}\n",
            "fun selectWords(s: String, n: Int): List<String> {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\"\n    val words = s.split(\" \").filter { it.isNotEmpty() }\n    return words.filter { it.count { c -> c.isLowerCase() && consonants.contains(c) } == n }\n}\n",
            "fun getClosestVowel(word: String): String {\n    val vowels = \"aeiouAEIOU\"\n    for (i in word.length - 2 downTo 0 step 1) {\n        if (word[i] in vowels && word[i - 1]!in vowels && word[i + 1]!in vowels) {\n            return word[i]\n        }\n    }\n    return \"\"\n}\n",
            "fun matchParens(lst: List<String>): String {\n    val s1 = lst[0] + lst[1]\n    val s2 = lst[1] + lst[0]\n    return \"Yes\" if (check(s1) || check(s2)) else \"No\"\n}\n",
            "fun maximum(arr: List<Int>, k: Int): List<Int> {\n    return arr.sortedDescending().take(k).toList()\n}\n",
            "fun solution(lst: List<Int>): Int {\n    return lst.filterIndexed { index, element -> index % 2 == 0 && element % 2!= 0 }.sum()\n}\n",
            "fun addElements(arr: List<Int>, k: Int): Int {\n    return arr.subList(0, k).sumBy { it.toString().length <= 2 }\n}\n",
            "fun getOddCollatz(n: Int): List<Int> {\n    val collatz = mutableListOf<Int>()\n    while (n!= 1) {\n        if (n % 2!= 0) {\n            collatz.add(n)\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    return collatz.sorted()\n}\n",
            "fun validDate(date: String): Boolean {\n    return date.length == 10 && date[2] == \"-\" && date[5] == \"-\" && (date[0].isDigit() && date[1].isDigit() && (date[0].toInt() in 1..12 || date[0].toInt() in 1..3) && (date[3].toInt() in 1..31 || date[3].toInt() in 1..2) && (date[6].toInt() in 1..31 || date[6].toInt() in 1..12) || date[0].toInt() in 4..6 && date[3].toInt() in 1..30 || date[0].toInt() in 9..11 && date[3].toInt() in 1..30 || date[0].toInt() == 2 && date[3].toInt() in 1..29)\n}\n",
            "fun splitWords(txt: String): List<String> {\n    return if (txt.contains(\" \")) txt.split(\" \") else if (txt.contains(\",\")) txt.split(\",\") else listOf(txt.length.toString())\n}\n",
            "fun isSorted(lst: List<Int>): Boolean {\n    if (!lst.subList(1, lst.size).all { it <= lst[it - 1] }) {\n        return false\n    }\n    val freq = mutableMapOf<Int, Int>()\n    for (i in lst) {\n        freq[i] = freq.getOrDefault(i, 0) + 1\n    }\n    return freq.values.maxOrNull()?: 0 <= 2\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..floor(sqrt(n.toDouble())).toInt()) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\nfun intersection(interval1: List<Int>, interval2: List<Int>): String {\n    val l = max(interval1[0], interval2[0])\n    val r = min(interval1[1], interval2[1])\n    val length = r - l\n    return \"YES\" if length > 0 && isPrime(length) else \"NO\"\n}\n",
            "fun prodSigns(arr: List<Int>): Int? {\n    if (arr.isEmpty()) {\n        return null\n    }\n    if (0 in arr) {\n        return 0\n    }\n    val sign = if (arr.count { it < 0 } % 2 == 1) -1 else 1\n    return sign * arr.sumBy { it.absoluteValue }\n}\n",
            "fun minPath(grid: List<List<Int>>, k: Int): List<Int> {\n    val n = grid.size\n    val minVal = n * n + 1\n    for (i in 0 until n) {\n        for (j in 0 until n) {\n            if (grid[i][j] == 1) {\n                val temp = mutableListOf<Int>()\n                if (i!= 0) {\n                    temp.add(grid[i - 1][j])\n                }\n                if (j!= 0) {\n                    temp.add(grid[i][j - 1])\n                }\n                if (i!= n - 1) {\n                    temp.add(grid[i + 1][j])\n                }\n                if (j!= n - 1) {\n                    temp.add(grid[i][j + 1])\n                }\n                minVal = min(temp)\n            }\n        }\n    }\n    val result = mutableListOf<Int>()\n    for (i in 0 until k) {\n        result.add(1 if i % 2 == 0 else minVal)\n    }\n    return result\n}\n",
            "fun tri(n: Int): List<Int> {\n    if (n == 0) {\n        return listOf(1)\n    }\n    val seq = mutableListOf(1, 3)\n    for (i in 2 until n + 1) {\n        if (i % 2 == 0) {\n            seq.add(i / 2 + 1)\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "fun digits(n: Int): Int {\n    val odds = str(n).filter { it.toInt() % 2 == 1 }.map { it.toInt() }\n    return odds.reduce { x, y -> x * y } if odds.isNotEmpty() else 0\n}\n",
            "fun isNested(s: String): Boolean {\n    val openIdx = mutableListOf<Int>()\n    val closeIdx = mutableListOf<Int>()\n    for (i in s.indices) {\n        if (s[i] == '[') {\n            openIdx.add(i)\n        } else if (s[i] == ']') {\n            closeIdx.add(i)\n        }\n    }\n    closeIdx.reverse()\n    var cnt = 0\n    var i = 0\n    val l = closeIdx.size\n    for (idx in openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\n",
            "fun sumSquares(lst: List<Double>): Int {\n    return lst.map { it.pow(2) }.sum().toInt()\n}\n",
            "fun checkIfLastCharIsALetter(txt: String): Boolean {\n    if (txt.isEmpty()) {\n        return false\n    }\n    val last = txt.substring(txt.lastIndexOf(' ') + 1)\n    return last.length == 1 && last[0].isLetter()\n}\n",
            "fun canArrange(arr: List<Int>): Int {\n    if (arr.size <= 1) {\n        return -1\n    }\n    val idx = arr.withIndex().filter { it.value < it.previous().value }.map { it.index }\n    return idx.maxOrNull()?: -1\n}\n",
            "fun largestSmallestIntegers(lst: List<Int>): List<Int?> {\n    val neg = lst.filter { it < 0 }\n    val pos = lst.filter { it > 0 }\n    val maxNeg = neg.maxOrNull()\n    val minPos = pos.minOrNull()\n    return listOf(maxNeg, minPos)\n}\n",
            "fun anyToReal(o: Any): Double {\n    if (o is String) {\n        return o.replace(',', '.').toDouble()\n    } else if (o is Int) {\n        return o.toDouble()\n    } else if (o is Double) {\n        return o\n    }\n    throw RuntimeException(\"Type Error\")\n}\nfun compareOne(a: Any, b: Any): Double? {\n    val a1 = anyToReal(a)\n    val b1 = anyToReal(b)\n    if (a1 == b1) {\n        return null\n    } else if (a1 > b1) {\n        return a1\n    } else {\n        return b1\n    }\n}\n",
            "fun isEqualToSumEven(n: Int): Boolean {\n    return n % 2 == 0 && n >= 8\n}\n",
            "fun specialFactorial(n: Int): Int {\n    var fact = 1\n    var result = 1\n    for (i in 1..n) {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "fun fixSpaces(txt: String): String {\n    return txt.replace(Regex(\"\\\\s{3,}\"), \"-\").replace(\" \", \"_\")\n}\n",
            "fun fileNameCheck(fileName: String): String {\n    val suf = listOf(\"txt\", \"exe\", \"dll\")\n    val lst = fileName.split(\".\")\n    if (lst.size!= 2 ||!lst[1] in suf || lst[0].isEmpty() ||!lst[0][0].isLetter() || lst[0].filter { it.isDigit() }.count() > 3) {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "fun sumSquares(lst: List<Int>): Int {\n    var result = 0\n    for (i in lst.indices) {\n        if (i % 3 == 0) {\n            result += lst[i].pow(2)\n        } else if (i % 4 == 0) {\n            result += lst[i].pow(3)\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..floor(sqrt(n.toDouble())).toInt()) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\nfun wordsInSentence(sentence: String): String {\n    val words = sentence.split(\" \")\n    return words.joinToString(\" \") { w -> if (isPrime(w.length)) w else \"\" }\n}\n",
            "fun simplify(x: String, n: String): Boolean {\n    val xs = x.split(\"/\")\n    val ns = n.split(\"/\")\n    val num = xs[0].toInt() * ns[0].toInt()\n    val den = xs[1].toInt() * ns[1].toInt()\n    return num % den == 0\n}\n",
            "fun digitsSum(n: Int): Int {\n    val nStr = n.toString()\n    return if (n >= 0) {\n        nStr.map { it.toString().toInt() }.sum()\n    } else {\n        (nStr.substring(0, 2).toInt() * 2) + digitsSum(n.absoluteValue)\n    }\n}\nfun orderByPoints(nums: List<Int>): List<Int> {\n    return nums.sortedWith(compareBy { digitsSum(it) })\n}\n",
            "fun specialFilter(nums: List<Int>): Int {\n    val odds = \"13579\"\n    return nums.count { n -> n > 10 && n % 2 == 1 && odds.contains(n.toString()[0]) }\n}\n",
            "fun getMaxTriples(n: Int): Int {\n    val c = IntArray(3) { 0 }\n    for (i in 1..n) {\n        val a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n}\n",
            "fun bf(planet1: String, planet2: String): List<String> {\n    val names = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (planet1!in names || planet2!in names) {\n        return emptyList()\n    }\n    val l = names.indexOf(planet1)\n    val r = names.indexOf(planet2)\n    if (l > r) {\n        l, r = r, l\n    }\n    if (l == r) {\n        return emptyList()\n    }\n    return names.subList(l + 1, r)\n}\n",
            "fun sortedListSum(lst: List<String>): List<String> {\n    val result = lst.filter { it.length % 2 == 0 }\n    return result.sortedBy { it.length to it }\n}\n",
            "fun xOrY(n: Int, x: Int, y: Int): Int {\n    if (n < 2) {\n        return y\n    }\n    for (i in 2..n.toDouble().sqrt().toInt()) {\n        if (n % i == 0) {\n            return y\n        }\n    }\n    return x\n}\n",
            "fun doubleTheDifference(lst: List<Double>): Int {\n    return lst.filter { it >= 0 && it % 2 == 1 }.sumBy { it * it }\n}\n",
            "fun compare(game: List<Int>, guess: List<Int>): List<Int> {\n    return game.mapIndexed { index, gameElement ->\n        abs(gameElement - guess[index])\n    }\n}\n",
            "fun strongestExtension(className: String, extensions: List<String>): String {\n    var maxS = Float.NEGATIVE_INFINITY\n    var maxExt = \"\"\n    for (ext in extensions) {\n        val upper = ext.count { it.isUpperCase() }\n        val lower = ext.count { it.isLowerCase() }\n        val s = upper - lower\n        if (s > maxS) {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return \"$className.$maxExt\"\n}\n",
            "fun cycpatternCheck(a: String, b: String): Boolean {\n    if (a.length < b.length) {\n        return false\n    }\n    for (i in 0 until b.length) {\n        if (b.substring(i) + b.substring(0, i) in a) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun evenOddCount(num: Int): List<Int> {\n    val ds = num.toString().toCharArray()\n    val even = ds.count { it.toInt() % 2 == 0 }\n    return listOf(even, ds.size - even)\n}\n",
            "fun intToMiniRoman(num: Int): String {\n    val values = listOf(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    val numerals = listOf(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    val res = mutableListOf<String>()\n    for (i in values.indices) {\n        while (num >= values[i]) {\n            res.add(numerals[i])\n            num -= values[i]\n        }\n    }\n    return res.joinToString(\"\")\n}\n",
            "fun rightAngleTriangle(a: Int, b: Int, c: Int): Boolean {\n    val s = sortedArrayOf(a, b, c)\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "fun findMax(words: List<String>): String {\n    var maxCnt = 0\n    var maxW = \"\"\n    for (w in words) {\n        val cnt = w.toSet().size\n        if (cnt > maxCnt) {\n            maxCnt = cnt\n            maxW = w\n        } else if (cnt == maxCnt) {\n            maxW = maxOf(maxW, w)\n        }\n    }\n    return maxW\n}\n",
            "fun eat(num: Int, need: Int, remaining: Int): List<Int> {\n    return if (need <= remaining) listOf(num + need, remaining - need) else listOf(num + remaining, 0)\n}\n",
            "fun doAlgebra(operators: List<String>, operands: List<Int>): Int {\n    val ops = operators.toMutableList()\n    val nums = operands.toMutableList()\n    var i = ops.size - 1\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = nums[i].pow(nums[i + 1])\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n        }\n        i -= 1\n    }\n    i = 0\n    while (i < ops.size) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] / nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while (i < ops.size) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "fun solve(s: String): String {\n    val result = mutableListOf<Char>()\n    for (ch in s) {\n        if (ch.isLetter()) {\n            result.add(if (ch.isUpperCase()) ch.toLowerCase() else ch.toUpperCase())\n        } else {\n            result.add(ch)\n        }\n    }\n    return result.joinToString(\"\")\n}\n",
            "fun stringToMd5(txt: String): String? {\n    if (txt.isEmpty()) {\n        return null\n    }\n    val md5Hash = MessageDigest.getInstance(\"MD5\")\n    val txtBytes = txt.toByteArray()\n    md5Hash.update(txtBytes)\n    val md5Encoded = md5Hash.digest().joinToString(\"\") { \"%02x\".format(it) }\n    return md5Encoded\n}\n",
            "fun generateIntegers(a: Int, b: Int): List<Int> {\n    val lower = max(2, min(a, b))\n    val upper = min(8, max(a, b))\n    return (lower..upper).filter { it % 2 == 0 }.toList()\n}\n"
        ],
        "php": [
            "function hasCloseElements ($numbers, $threshold) {\n    foreach ($numbers as $i => $n) {\n        foreach ($numbers as $j => $m) {\n            if ($i!== $j && abs($n - $m) < $threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "function separateParenGroups ($parenString) {\n    $groups = [];\n    $stk = [];\n    $currentGroup = \"\";\n    $parens = $parenString->replace(\" \", \"\");\n    foreach ($parens as $ch) {\n        if ($ch == \"(\") {\n            $stk[] = $ch;\n            $currentGroup.= $ch;\n        } elseif ($ch == \")\") {\n            $stk[] = $ch;\n            $currentGroup.= $ch;\n            if (!$stk) {\n                $groups[] = $currentGroup;\n                $currentGroup = \"\";\n            }\n        }\n    }\n    return $groups;\n}\n",
            "function truncateNumber ($num) {\n    return $num - floor($num);\n}\n",
            "function belowZero ($operations) {\n    $balance = 0;\n    foreach ($operations as $op) {\n        $balance += $op;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function meanAbsoluteDeviation ($numbers) {\n    $mean = array_sum($numbers) / count($numbers);\n    $deviation = 0;\n    foreach ($numbers as $x) {\n        $deviation += abs($x - $mean);\n    }\n    return $deviation / count($numbers);\n}\n",
            "function intersperse ($numbers, $delimiter) {\n    $result = [];\n    foreach ($numbers as $i => $n) {\n        if ($i!= 0) {\n            $result[] = $delimiter;\n        }\n        $result[] = $n;\n    }\n    return $result;\n}\n",
            "function parseNestedParens ($parenString) {\n    $result = [];\n    $parenGroups = explode(' ', $parenString);\n    foreach ($parenGroups as $group) {\n        $maxDepth = 0;\n        $depth = 0;\n        foreach (str_split($group) as $ch) {\n            if ($ch == '(') {\n                $depth += 1;\n                $maxDepth = max($maxDepth, $depth);\n            } elseif ($ch == ')') {\n                $depth -= 1;\n            }\n        }\n        $result[] = $maxDepth;\n    }\n    return $result;\n}\n",
            "function filterBySubstring ($strs, $substring) {\n    return array_filter($strs, function ($s) use ($substring) {\n        return strpos($s, $substring)!== false;\n    });\n}\n",
            "function sumProduct ($numbers) {\n    $nSum = array_sum($numbers);\n    $nProduct = array_product($numbers);\n    return [$nSum, $nProduct];\n}\n",
            "function rollingMax ($numbers) {\n    $maxSoFar = float(\"-inf\");\n    $result = [];\n    foreach ($numbers as $num) {\n        $maxSoFar = max($maxSoFar, $num);\n        $result[] = $maxSoFar;\n    }\n    return $result;\n}\n",
            "function isPalindrome ($s) {\n    return $s == strrev($s);\n}\nfunction makePalindrome ($s) {\n    if (isPalindrome($s)) {\n        return $s;\n    }\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (isPalindrome(substr($s, $i))) {\n            return $s. substr($s, 0, $i). strrev(substr($s, $i));\n        }\n    }\n    return \"\";\n}\n",
            "function stringXor ($a, $b) {\n    return implode(\"\", array_map(function ($x, $y) {\n        return $x == $y? \"0\" : \"1\";\n    }, str_split($a), str_split($b)));\n}\n",
            "function longest ($strs) {\n    if (!$strs) {\n        return null;\n    }\n    $longest_s = $strs[0];\n    foreach ($strs as $s) {\n        if (strlen($s) > strlen($longest_s)) {\n            $longest_s = $s;\n        }\n    }\n    return $longest_s;\n}\n",
            "function greatestCommonDivisor ($a, $b) {\n    if ($b == 0) {\n        return $a;\n    } else {\n        return greatestCommonDivisor($b, $a % $b);\n    }\n}\n",
            "function allPrefixes ($s) {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $prefixes[] = substr($s, 0, $i + 1);\n    }\n    return $prefixes;\n}\n",
            "function stringSequence ($n) {\n    return \" \".join(range(1, $n + 1));\n}\n",
            "function countDistinctCharacters ($s) {\n    return count(array_unique(str_split($s)));\n}\n",
            "function parseMusic ($musicString) {\n    $durations = [\"o\" => 4, \"o|\" => 2, \".|\" => 1];\n    $notes = explode(\" \", $musicString);\n    return array_map(function ($note) use ($durations) {\n        return $durations[$note];\n    }, $notes);\n}\n",
            "function howManyTimes ($s, $substring) {\n    $times = 0;\n    for ($i = 0; $i < strlen($s) - strlen($substring) + 1; $i++) {\n        if (substr($s, $i, strlen($substring)) == $substring) {\n            $times++;\n        }\n    }\n    return $times;\n}\n",
            "function sortNumbers ($numbers) {\n    $numDict = [\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n    ];\n    $numList = array_filter(explode(\" \", $numbers), function ($x) use ($numDict) {\n        return isset($numDict[$x]);\n    });\n    usort($numList, function ($x, $y) use ($numDict) {\n        return $numDict[$x] - $numDict[$y];\n    });\n    return implode(\" \", $numList);\n}\n",
            "function findClosestElements ($numbers) {\n    $sortedNumbers = array_values(array_unique(array_sort($numbers)));\n    $minDiff = INF;\n    $closestPair = [];\n    for ($i = 1; $i < count($sortedNumbers); $i++) {\n        $diff = $sortedNumbers[$i] - $sortedNumbers[$i - 1];\n        if ($diff < $minDiff) {\n            $minDiff = $diff;\n            $closestPair = [$sortedNumbers[$i - 1], $sortedNumbers[$i]];\n        }\n    }\n    return $closestPair;\n}\n",
            "function rescaleToUnit ($numbers) {\n    $minNum = min($numbers);\n    $maxNum = max($numbers);\n    if ($minNum == $maxNum) {\n        return array_fill(0, count($numbers), 0.0);\n    } else {\n        return array_map(function ($num) use ($minNum, $maxNum) {\n            return ($num - $minNum) / ($maxNum - $minNum);\n        }, $numbers);\n    }\n}\n",
            "/**\n * @param {array<mixed>} $values\n * @returns {array<int>}\n */\nfunction filterIntegers ($values) {\n    return array_filter($values, function ($x) {\n        return is_int($x);\n    });\n}\n",
            "function strLength ($s) {\n    return strlen($s);\n}\n",
            "function largestDivisor ($n) {\n    for ($i = 2; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            return $n / $i;\n        }\n    }\n    return 1;\n}\n",
            "function factorize ($n) {\n    $factors = [];\n    $divisor = 2;\n    while ($divisor <= $n) {\n        if ($n % $divisor == 0) {\n            $factors[] = $divisor;\n            $n /= $divisor;\n        } else {\n            $divisor += 1;\n        }\n    }\n    return $factors;\n}\n",
            "function removeDuplicates ($numbers) {\n    $counts = [];\n    foreach ($numbers as $num) {\n        $counts[$num] = $counts[$num]?? 0;\n        $counts[$num]++;\n    }\n    $res = [];\n    foreach ($counts as $num => $count) {\n        if ($count == 1) {\n            $res[] = $num;\n        }\n    }\n    return $res;\n}\n",
            "function flipCase ($s) {\n    $flipped = [];\n    foreach (str_split($s) as $ch) {\n        if (!ctype_alpha($ch)) {\n            $flipped[] = $ch;\n        } elseif (ctype_lower($ch)) {\n            $flipped[] = strtoupper($ch);\n        } elseif (ctype_upper($ch)) {\n            $flipped[] = strtolower($ch);\n        }\n    }\n    return implode('', $flipped);\n}\n",
            "function concatenate ($strs) {\n    return implode(\"\", $strs);\n}\n",
            "function filterByPrefix ($strs, $prefixStr) {\n    return array_filter($strs, function ($s) use ($prefixStr) {\n        return strpos($s, $prefixStr) === 0;\n    });\n}\n",
            "function getPositive ($l) {\n    return array_filter($l, function ($num) {\n        return $num > 0;\n    });\n}\n",
            "function isPrime ($n) {\n    return $n < 2? false :!array_reduce(range(2, floor(sqrt($n)) + 1), function ($carry, $i) use ($n) {\n        return $carry || $n % $i == 0;\n    });\n}\n",
            "function poly ($xs, $x) {\n    $res = 0.0;\n    foreach ($xs as $i => $x) {\n        $res += $xs[$i] * pow($x, $i);\n    }\n    return $res;\n}\nfunction findZero ($xs) {\n    $x1 = 1.0;\n    $x2 = -1.0;\n    while (poly($xs, $x1) * poly($xs, $x2) > 0) {\n        $x1 *= 2;\n        $x2 *= 2;\n    }\n    while (abs($x1 - $x2) > 1e-10) {\n        $mid = ($x1 + $x2) / 2;\n        if (poly($xs, $mid) == 0) {\n            return $mid;\n        } elseif (poly($xs, $mid) * poly($xs, $x1) < 0) {\n            $x2 = $mid;\n        } else {\n            $x1 = $mid;\n        }\n    }\n    return ($x1 + $x2) / 2;\n}\n",
            "function sortThird ($l) {\n    $sortedThird = array_slice($l, 0, 3);\n    $sortedThird = array_map(function ($e) {\n        return $e;\n    }, $sortedThird);\n    $sortedThird = array_merge($sortedThird, array_slice($l, 3));\n    return $sortedThird;\n}\n",
            "function listUnique ($l) {\n    return array_unique($l);\n}\n",
            "function maxElement ($l) {\n    return max($l);\n}\n",
            "function fizzBuzz ($n) {\n    $cnt = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            $cnt += strlen(strval($i)) - strval($i)->count(\"7\");\n        }\n    }\n    return $cnt;\n}\n",
            "function sortEven ($l) {\n    $sortedEven = array_slice($l, 0, count($l) - 1, true);\n    $sortedOdd = array_slice($l, 1, count($l), true);\n    $result = [];\n    for ($i = 0; $i < count($l); $i++) {\n        if ($i % 2 == 0) {\n            $result[] = $sortedEven[$i // 2];\n        } else {\n            $result[] = $sortedOdd[$i];\n        }\n    }\n    return $result;\n}\n",
            "function encodeCyclic ($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i += 3) {\n        if ($i + 3 > strlen($s)) {\n            $result[] = substr($s, $i);\n        } else {\n            $result[] = substr($s, $i + 1, 2);\n            $result[] = substr($s, $i, 1);\n        }\n    }\n    return implode(\"\", $result);\n}\nfunction decodeCyclic ($s) {\n    return encodeCyclic(encodeCyclic($s));\n}\n",
            "function isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction primeFib ($n) {\n    $f = [0, 1];\n    $cnt = 0;\n    while ($cnt < $n) {\n        $f = [$f[1], $f[0] + $f[1]];\n        if (isPrime($f[1])) {\n            $cnt += 1;\n        }\n    }\n    return $f[1];\n}\n",
            "function triplesSumToZero ($l) {\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            for ($k = $j + 1; $k < count($l); $k++) {\n                if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "function carRaceCollision ($n) {\n    return $n ** 2;\n}\n",
            "function incrList ($l) {\n    return array_map(function ($i) {\n        return $i + 1;\n    }, $l);\n}\n",
            "function pairsSumToZero ($l) {\n    $seen = [];\n    foreach ($l as $num) {\n        if (-$num in $seen) {\n            return true;\n        }\n        $seen[] = $num;\n    }\n    return false;\n}\n",
            "function changeBase ($x, $bas) {\n    if ($x == 0) {\n        return \"0\";\n    }\n    $digits = [];\n    while ($x > 0) {\n        $digits[] = $x % $bas;\n        $x //= $bas;\n    }\n    return implode(\"\", array_reverse($digits));\n}\n",
            "function triangleArea ($a, $h) {\n    return $a * $h / 2;\n}\n",
            "function fib4 ($n) {\n    $fib = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib[$i % 4] = $fib[0] + $fib[1] + $fib[2] + $fib[3];\n    }\n    return $fib[$n % 4];\n}\n",
            "function median ($l) {\n    sort($l);\n    return $l[count($l) // 2];\n}\n",
            "function isPalindrome ($txt) {\n    return $txt == strrev($txt);\n}\n",
            "function modp ($n, $p) {\n    $ret = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $ret = ($ret * 2) % $p;\n    }\n    return $ret;\n}\n",
            "function encodeShift ($s) {\n    return implode(\"\", array_map(function ($ch) {\n        return chr(((ord($ch) - 97 + 5) % 26) + 97);\n    }, str_split($s)));\n}\nfunction decodeShift ($s) {\n    return implode(\"\", array_map(function ($ch) {\n        return chr(((ord($ch) - 97 + 21) % 26) + 97);\n    }, str_split($s)));\n}\n",
            "function removeVowels ($txt) {\n    return preg_replace('/[aeiouAEIOU]/', '', $txt);\n}\n",
            "function belowThreshold ($l, $t) {\n    return array_reduce($l, function ($carry, $item) use ($t) {\n        return $carry && $item < $t;\n    }, true);\n}\n",
            "function add ($x, $y) {\n    return $x + $y;\n}\n",
            "function sameChars ($s0, $s1) {\n    return $s0 === $s1;\n}\n",
            "function fib ($n) {\n    if ($n <= 1) {\n        return $n;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n",
            "function correctBracketing ($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        $b = $brackets[$i];\n        if ($b == \"<\") {\n            $depth++;\n        } elseif ($b == \">\") {\n            $depth--;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "function monotonic ($l) {\n    $diff = array_map(function ($x, $y) {\n        return $y - $x;\n    }, $l, array_slice($l, 1));\n    return all(function ($x) {\n        return $x <= 0;\n    }, $diff) || all(function ($x) {\n        return $x >= 0;\n    }, $diff);\n}\n",
            "function common ($l1, $l2) {\n    return array_values(array_intersect($l1, $l2));\n}\n",
            "function largestPrimeFactor ($n) {\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i) {\n            $i += 1;\n        } else {\n            $n //= $i;\n        }\n    }\n    return $n;\n}\n",
            "function sumToN ($n) {\n    return array_sum(range(1, $n + 1));\n}\n",
            "function correctBracketing ($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        $b = $brackets[$i];\n        if ($b == \"(\") {\n            $depth++;\n        } elseif ($b == \")\") {\n            $depth--;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "function derivative ($xs) {\n    $result = [];\n    for ($i = 1; $i < count($xs); $i++) {\n        $result[] = $xs[$i] * $i;\n    }\n    return $result;\n}\n",
            "function fibfib ($n) {\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    while ($n > 2) {\n        $a = $b;\n        $b = $c;\n        $c = $a + $b + $c;\n        $n -= 1;\n    }\n    return $c;\n}\n",
            "function vowelsCount ($s) {\n    $vowels = \"aeiou\";\n    $cnt = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (in_array($s[$i], $vowels) || ($i == strlen($s) - 1 && $s[$i] == \"y\")) {\n            $cnt++;\n        }\n    }\n    return $cnt;\n}\n",
            "function circularShift ($x, $shift) {\n    $x_str = strval($x);\n    if ($shift > strlen($x_str)) {\n        return strrev($x_str);\n    } else {\n        return substr($x_str, -$shift). substr($x_str, 0, -$shift);\n    }\n}\n",
            "function digitSum ($s) {\n    return array_sum(array_map('ord', array_filter(str_split($s), function ($c) {\n        return ctype_upper($c);\n    })));\n}\n",
            "function fruitDistribution ($s, $n) {\n    $words = explode(' ', $s);\n    $apples = $words[array_search('apples', $words) - 1];\n    $oranges = $words[array_search('oranges', $words) - 1];\n    return $n - $apples - $oranges;\n}\n",
            "function pluck ($arr) {\n    $evens = array_filter($arr, function ($n) {\n        return $n % 2 == 0;\n    });\n    if (count($evens) == 0) {\n        return [];\n    }\n    $min_even = min($evens);\n    return [$min_even, array_search($min_even, $arr)];\n}\n",
            "function search ($lst) {\n    $freqs = [];\n    foreach ($lst as $n) {\n        $freqs[$n] = $freqs[$n]?? 0;\n        $freqs[$n]++;\n    }\n    $good_vals = array_filter($freqs, function ($v, $k) {\n        return $v >= $k;\n    }, ARRAY_FILTER_USE_BOTH);\n    return max($good_vals, -1);\n}\n",
            "function strangeSortList ($lst) {\n    $sl = array_reverse(sort($lst));\n    $result = [];\n    $left = 0;\n    $right = count($sl) - 1;\n    while ($left <= $right) {\n        $result[] = $sl[$left];\n        $left += 1;\n        if ($left <= $right) {\n            $result[] = $sl[$right];\n            $right -= 1;\n        }\n    }\n    return $result;\n}\n",
            "function triangleArea ($a, $b, $c) {\n    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $s = ($a + $b + $c) / 2.0;\n        return sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "function willItFly ($q, $w) {\n    return count($q) > 0 && all(\n        $q[$i] == $q[count($q) - $i - 1]\n        for $i in range(count($q))\n    ) && sum($q) <= $w;\n}\n",
            "function smallestChange ($arr) {\n    $ans = 0;\n    for ($i = 0; $i < count($arr) / 2; $i++) {\n        if ($arr[$i]!= $arr[count($arr) - $i - 1]) {\n            $ans += 1;\n        }\n    }\n    return $ans;\n}\n",
            "function totalMatch ($lst1, $lst2) {\n    $cnt1 = array_sum(array_map('strlen', $lst1));\n    $cnt2 = array_sum(array_map('strlen', $lst2));\n    return $cnt1 <= $cnt2? $lst1 : $lst2;\n}\n",
            "function isMultiplyPrime ($a) {\n    $cnt = 0;\n    for ($i = 2; $i <= floor(sqrt($a)); $i++) {\n        if (isPrime($i)) {\n            while ($a % $i == 0) {\n                $cnt += 1;\n                $a /= $i;\n            }\n        }\n    }\n    return $cnt == 3;\n}\n",
            "function isSimplePower ($x, $n) {\n    if ($n < 2) {\n        return $x == $n;\n    }\n    $tmp = 1;\n    while ($tmp < $x) {\n        $tmp *= $n;\n    }\n    return $tmp == $x;\n}\n",
            "function isCube ($a) {\n    return abs($a) === pow(abs($a), 1.0 / 3.0);\n}\n",
            "function hexKey ($num) {\n    return strlen(str_replace(\"2357BD\", \"\", $num));\n}\n",
            "function decimalToBinary ($dec) {\n    return \"db\". bin($dec)[2]. \"db\";\n}\n",
            "function isHappy ($s) {\n    $hash = [];\n    while (strlen($s) > 1) {\n        $s = str_replace('0', '', $s);\n        $s = str_replace('1', '0', $s);\n        $s = str_replace('2', '1', $s);\n        $s = str_replace('3', '2', $s);\n        $s = str_replace('4', '3', $s);\n        $s = str_replace('5', '4', $s);\n        $s = str_replace('6', '5', $s);\n        $s = str_replace('7', '6', $s);\n        $s = str_replace('8', '7', $s);\n        $s = str_replace('9', '8', $s);\n        if (isset($hash[$s])) {\n            return false;\n        }\n        $hash[$s] = true;\n    }\n    return true;\n}\n",
            "function numericalLetterGrade ($grades) {\n    $result = [];\n    foreach ($grades as $g) {\n        if ($g == 4.0) {\n            $result[] = \"A+\";\n        } elseif ($g > 3.7) {\n            $result[] = \"A\";\n        } elseif ($g > 3.3) {\n            $result[] = \"A-\";\n        } elseif ($g > 3.0) {\n            $result[] = \"B+\";\n        } elseif ($g > 2.7) {\n            $result[] = \"B\";\n        } elseif ($g > 2.3) {\n            $result[] = \"B-\";\n        } elseif ($g > 2.0) {\n            $result[] = \"C+\";\n        } elseif ($g > 1.7) {\n            $result[] = \"C\";\n        } elseif ($g > 1.3) {\n            $result[] = \"C-\";\n        } elseif ($g > 1.0) {\n            $result[] = \"D+\";\n        } elseif ($g > 0.7) {\n            $result[] = \"D\";\n        } elseif ($g > 0.0) {\n            $result[] = \"D-\";\n        } else {\n            $result[] = \"E\";\n        }\n    }\n    return $result;\n}\n",
            "function primeLength ($s) {\n    $length = strlen($s);\n    if ($length < 2) {\n        return false;\n    }\n    for ($i = 2; floor(sqrt($length)) + 1 > $i; $i++) {\n        if ($length % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function startsOneEnds ($n) {\n    return 2 * 9 ** ($n - 2);\n}\n",
            "function solve ($n) {\n    return bin(sum(int(d) for d in str($n)))[2:];\n}\n",
            "function add ($lst) {\n    return array_sum(array_filter($lst, function ($x, $i) {\n        return $i % 2 == 1 && $x % 2 == 0;\n    }));\n}\n",
            "function antiShuffle ($s) {\n    return implode(\" \", array_map(function ($word) {\n        return implode(\"\", array_map(\"strrev\", explode(\"\", $word)));\n    }, explode(\" \", $s)));\n}\n",
            "function getRow ($lst, $x) {\n    $coords = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $val) {\n            if ($val == $x) {\n                $coords[] = [$i, $j];\n            }\n        }\n    }\n    return array_values(array_sort($coords, function ($a, $b) {\n        return $a[0] <=> $b[0]?: -$a[1] <=> -$b[1];\n    }));\n}\n",
            "function sortArray ($arr) {\n    if (count($arr) == 0) {\n        return [];\n    }\n    if (($arr[0] + $arr[count($arr) - 1]) % 2 == 0) {\n        return array_reverse(sort($arr));\n    } else {\n        return sort($arr);\n    }\n}\n",
            "function encrypt ($s) {\n    $result = [];\n    foreach (str_split($s) as $ch) {\n        $shifted = ord($ch) + 4;\n        if ($shifted > ord('z')) {\n            $shifted -= 26;\n        }\n        $result[] = chr($shifted);\n    }\n    return implode(\"\", $result);\n}\n",
            "function nextSmallest ($lst) {\n    $sl = array_unique($lst);\n    if (count($sl) < 2) {\n        return null;\n    }\n    return $sl[1];\n}\n",
            "function isBored ($s) {\n    $sentences = preg_split(\"/[.!?]\\s*/\", $s);\n    return array_sum(array_map(function ($sentence) {\n        return substr($sentence, 0, 2) == \"I \"? 1 : 0;\n    }, $sentences));\n}\n",
            "function anyInt ($x, $y, $z) {\n    return is_int($x) && is_int($y) && is_int($z) && ($x + $y == $z || $x + $z == $y || $y + $z == $x);\n}\n",
            "function encode ($message) {\n    $vowels = \"aeiouAEIOU\";\n    $result = [];\n    foreach (str_split($message) as $ch) {\n        if (ctype_alpha($ch)) {\n            $ch1 = $ch;\n            if (ctype_lower($ch)) {\n                $ch1 = strtoupper($ch1);\n            }\n            if (strpos($vowels, $ch1)!== false) {\n                $ch1 = chr(ord($ch1) + 2);\n            }\n            $result[] = $ch1;\n        } else {\n            $result[] = $ch;\n        }\n    }\n    return implode(\"\", $result);\n}\n",
            "function isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction skjkasdkd ($lst) {\n    $primes = array_filter($lst, 'isPrime');\n    if (count($primes) == 0) {\n        return 0;\n    }\n    $largest = str(max($primes));\n    return array_sum(array_map('intval', str_split($largest)));\n}\n",
            "function checkDictCase ($d) {\n    return!empty($d) && (all(ctype_lower($k) for $k in $d) || all(ctype_upper($k) for $k in $d));\n}\n",
            "function countUpTo ($n) {\n    $primes = [];\n    for ($num = 2; $num <= $n; $num++) {\n        if (all(function ($p) use ($num) {\n            return $num % $p!= 0;\n        }, $primes)) {\n            $primes[] = $num;\n        }\n    }\n    return $primes;\n}\n",
            "function multiply ($a, $b) {\n    return abs($a) % 10 * abs($b) % 10;\n}\n",
            "function countUpper ($s) {\n    $vowels = \"AEIOU\";\n    return count(array_filter(str_split($s), function ($i, $c) use ($vowels) {\n        return $i % 2 == 0 && in_array($c, $vowels);\n    }));\n}\n",
            "function closestInteger ($value) {\n    return (int) round($value);\n}\n",
            "function makeAPile ($n) {\n    return array_map(function ($i) use ($n) {\n        return $n + 2 * $i;\n    }, range(0, $n));\n}\n",
            "function wordsString ($s) {\n    return preg_split('/[, ]/', $s, -1, PREG_SPLIT_NO_EMPTY);\n}\n",
            "function chooseNum ($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    if ($y % 2 == 0) {\n        return $y;\n    }\n    return $y - 1;\n}\n",
            "function roundedAvg ($n, $m) {\n    if ($n > $m) {\n        return null;\n    }\n    $rAvg = intval(($m + $n) / 2.0 + 0.5);\n    return bin($rAvg)[2:];\n}\n",
            "function allDigitsOdd($s) {\n    return array_reduce($s, function ($carry, $digit) {\n        return $carry && ord($digit) % 2!= 0;\n    }, true);\n}\nfunction uniqueDigits($x) {\n    return array_filter(array_map(function ($num) {\n        return $num if allDigitsOdd(strval($num));\n    }, $x), function ($num) {\n        return $num;\n    });\n}\n",
            "function byLength ($arr) {\n    $digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    $sortedArr = array_filter($arr, function ($x) {\n        return 1 <= $x && $x <= 9;\n    });\n    usort($sortedArr, function ($a, $b) {\n        return $b - $a;\n    });\n    return array_map(function ($x) use ($digitNames) {\n        return $digitNames[$x - 1];\n    }, $sortedArr);\n}\n",
            "function f ($n) {\n    $nums = range(1, $n + 1);\n    return array_map(function ($i) use ($nums) {\n        return $i % 2!= 0? array_sum(array_slice($nums, 0, $i)) : array_reduce(array_slice($nums, 0, $i), function ($x, $y) {\n            return $x * $y;\n        }, 1);\n    }, $nums);\n}\n",
            "function isPalindrome ($txt) {\n    return $txt == strrev($txt);\n}\nfunction evenOddPalindrome ($n) {\n    $cnt = [0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        if (isPalindrome(strval($i))) {\n            $cnt[$i % 2] += 1;\n        }\n    }\n    return $cnt;\n}\n",
            "function digitsSum ($n) {\n    $nStr = strval($n);\n    if ($n >= 0) {\n        return array_sum(array_map('intval', str_split($nStr)));\n    } else {\n        return intval($nStr[0]) * 2 + digitsSum(abs($n));\n    }\n}\nfunction countNums ($arr) {\n    return count(array_filter($arr, function ($n) {\n        return digitsSum($n) > 0;\n    }));\n}\n",
            "function moveOneBall ($arr) {\n    if (empty($arr)) {\n        return true;\n    }\n    sort($arr);\n    for ($i = 0; $i < count($arr); $i++) {\n        if (array_slice($arr, $i) == array_slice($arr, 0, count($arr) - $i) && array_slice($arr, 0, $i) == array_slice($arr, count($arr) - $i, count($arr))) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function canExchange ($lst1, $lst2) {\n    $oddCnt = count(array_filter($lst1, function ($num) {\n        return $num % 2!= 0;\n    }));\n    $evenCnt = count(array_filter($lst2, function ($num) {\n        return $num % 2 == 0;\n    }));\n    return \"YES\" if $evenCnt >= $oddCnt else \"NO\";\n}\n",
            "function histogram ($test) {\n    $freq = [];\n    $words = explode(\" \", $test);\n    foreach ($words as $w) {\n        if (strlen($w) > 0) {\n            $freq[$w] = $freq[$w]?? 0;\n            $freq[$w] += 1;\n        }\n    }\n    $result = [];\n    if (count($freq) > 0) {\n        $max_freq = max($freq);\n        foreach ($freq as $k => $v) {\n            if ($v == $max_freq) {\n                $result[$k] = $v;\n            }\n        }\n    }\n    return $result;\n}\n",
            "function reverseDelete ($s, $c) {\n    $s1 = \"\";\n    foreach (str_split($s) as $ch) {\n        if (!in_array($ch, $c)) {\n            $s1.= $ch;\n        }\n    }\n    return [$s1, \"yes\" if is_palindrome($s1) else \"no\"];\n}\n",
            "function oddCount ($lst) {\n    $result = [];\n    foreach ($lst as $num) {\n        $n = 0;\n        foreach (str_split($num) as $d) {\n            $n += ord($d) % 2 == 1;\n        }\n        $rs = \"the number of odd elements in the string i of the input.\";\n        $result[] = str_replace(\"i\", str($n), $rs);\n    }\n    return $result;\n}\n",
            "function minSubArraySum ($nums) {\n    $minSum = 0;\n    $curSum = 0;\n    foreach ($nums as $n) {\n        $curSum = min($curSum + $n, 0);\n        $minSum = min($curSum, $minSum);\n    }\n    if ($minSum == 0) {\n        $minSum = min($nums);\n    }\n    return $minSum;\n}\n",
            "function maxFill ($grid, $capacity) {\n    return array_sum(array_map(function ($arr) use ($capacity) {\n        return ceil(array_sum($arr) / $capacity);\n    }, $grid));\n}\n",
            "function countOnes ($num) {\n    return bindec(decbin($num));\n}\nfunction sortArray ($arr) {\n    usort($arr, function ($a, $b) {\n        return countOnes($a) <=> countOnes($b);\n    });\n    return $arr;\n}\n",
            "function selectWords ($s, $n) {\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $words = explode(\" \", $s);\n    return array_filter($words, function ($w) use ($n) {\n        return count(array_filter($w, function ($c) use ($consonants) {\n            return in_array(strtolower($c), $consonants);\n        })) == $n;\n    });\n}\n",
            "function getClosestVowel ($word) {\n    $vowels = \"aeiouAEIOU\";\n    for ($i = strlen($word) - 2; $i >= 0; $i--) {\n        if (strpos($vowels, $word[$i])!== false && strpos($vowels, $word[$i - 1]) === false && strpos($vowels, $word[$i + 1]) === false) {\n            return $word[$i];\n        }\n    }\n    return \"\";\n}\n",
            "function matchParens ($lst) {\n    $s1 = $lst[0]. $lst[1];\n    $s2 = $lst[1]. $lst[0];\n    return \"Yes\" if check($s1) || check($s2) else \"No\";\n}\n",
            "function maximum ($arr, $k) {\n    return array_slice(\n        $arr,\n        -$k,\n        $k,\n        true\n    );\n}\n",
            "function solution ($lst) {\n    return array_sum(array_filter($lst, function ($x, $i) {\n        return $i % 2 == 0 && $x % 2!= 0;\n    }));\n}\n",
            "function addElements ($arr, $k) {\n    return array_sum(array_filter($arr, function ($n) {\n        return strlen(strval($n)) <= 2;\n    }));\n}\n",
            "function getOddCollatz ($n) {\n    $collatz = [1];\n    while ($n!= 1) {\n        if ($n % 2!= 0) {\n            $collatz[] = $n;\n            $n = 3 * $n + 1;\n        } else {\n            $n = $n / 2;\n        }\n    }\n    return array_values(array_unique($collatz));\n}\n",
            "function validDate ($date) {\n    return strlen($date) == 10 && $date[2] == \"-\" && $date[5] == \"-\" &&\n        (int) $date[0] >= 1 && (int) $date[0] <= 12 &&\n        (int) $date[3] >= 1 && (int) $date[3] <= 31 &&\n        (int) $date[6] >= 1 && (int) $date[6] <= 31 &&\n        (int) $date[9] >= 1 && (int) $date[9] <= 31;\n}\n",
            "function splitWords ($txt) {\n    if (strpos($txt, \" \")!== false) {\n        return explode(\" \", $txt);\n    } elseif (strpos($txt, \",\")!== false) {\n        return explode(\",\", $txt);\n    } else {\n        return [str_split($txt, 2)[0]];\n    }\n}\n",
            "function isSorted ($lst) {\n    $freq = [];\n    foreach ($lst as $i) {\n        $freq[$i] = $freq[$i]?? 0;\n        $freq[$i]++;\n    }\n    return max($freq, $default = 0) <= 2;\n}\n",
            "function isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction intersection ($interval1, $interval2) {\n    $l = max($interval1[0], $interval2[0]);\n    $r = min($interval1[1], $interval2[1]);\n    $length = $r - $l;\n    return \"YES\" if $length > 0 and isPrime($length) else \"NO\";\n}\n",
            "function prodSigns ($arr) {\n    if (!$arr) {\n        return null;\n    }\n    if (in_array(0, $arr)) {\n        return 0;\n    }\n    $sign = -1;\n    if (count([n for n in $arr if n < 0]) % 2 == 1) {\n        $sign = 1;\n    }\n    return $sign * array_sum(array_map('abs', $arr));\n}\n",
            "function minPath ($grid, $k) {\n    $n = count($grid);\n    $minVal = $n * $n + 1;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $temp = [];\n                if ($i!= 0) {\n                    $temp[] = $grid[$i - 1][$j];\n                }\n                if ($j!= 0) {\n                    $temp[] = $grid[$i][$j - 1];\n                }\n                if ($i!= $n - 1) {\n                    $temp[] = $grid[$i + 1][$j];\n                }\n                if ($j!= $n - 1) {\n                    $temp[] = $grid[$i][$j + 1];\n                }\n                $minVal = min($temp);\n            }\n        }\n    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = 1 if $i % 2 == 0 else $minVal;\n    }\n    return $result;\n}\n",
            "function tri ($n) {\n    if ($n == 0) {\n        return [1];\n    }\n    $seq = [1, 3];\n    for ($i = 2; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $seq[] = $i / 2 + 1;\n        } else {\n            $seq[] = $seq[$i - 1] + $seq[$i - 2] + ($i + 3) / 2;\n        }\n    }\n    return $seq;\n}\n",
            "function digits ($n) {\n    $odds = array_filter(str_split($n), function ($d) {\n        return $d % 2 == 1;\n    });\n    return array_reduce($odds, function ($x, $y) {\n        return $x * $y;\n    }, 1);\n}\n",
            "function isNested ($s) {\n    $openIdx = [];\n    $closeIdx = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] == '[') {\n            $openIdx[] = $i;\n        } elseif ($s[$i] == ']') {\n            $closeIdx[] = $i;\n        }\n    }\n    $closeIdx = array_reverse($closeIdx);\n    $cnt = 0;\n    $i = 0;\n    $l = count($closeIdx);\n    for ($idx = 0; $idx < count($openIdx); $idx++) {\n        if ($i < $l && $idx < $closeIdx[$i]) {\n            $cnt += 1;\n            $i += 1;\n        }\n    }\n    return $cnt >= 2;\n}\n",
            "function sumSquares ($lst) {\n    return array_sum(array_map(function ($n) {\n        return pow(ceil($n), 2);\n    }, $lst));\n}\n",
            "function checkIfLastCharIsALetter ($txt) {\n    if (!$txt) {\n        return false;\n    }\n    $last = substr($txt, strrpos($txt,'') + 1);\n    return strlen($last) == 1 && ctype_alpha($last[0]);\n}\n",
            "function canArrange ($arr) {\n    $idx = array_keys(array_filter($arr, function ($v, $k) use ($arr) {\n        return $v < $arr[$k - 1];\n    }));\n    return max($idx, -1);\n}\n",
            "function largestSmallestIntegers ($lst) {\n    $neg = array_filter($lst, function ($i) {\n        return $i < 0;\n    });\n    $pos = array_filter($lst, function ($i) {\n        return $i > 0;\n    });\n    $max_neg = max($neg)?: null;\n    $min_pos = min($pos)?: null;\n    return [$max_neg, $min_pos];\n}\n",
            "function anyToReal($o) {\n    if (is_string($o)) {\n        return floatval(str_replace(',', '.', $o));\n    } elseif (is_int($o)) {\n        return floatval($o);\n    } elseif (is_float($o)) {\n        return $o;\n    }\n    throw new RuntimeError(\"Type Error\");\n}\nfunction compareOne($a, $b) {\n    $a1 = anyToReal($a);\n    $b1 = anyToReal($b);\n    if ($a1 == $b1) {\n        return null;\n    } elseif ($a1 > $b1) {\n        return $a1;\n    } else {\n        return $b1;\n    }\n}\n",
            "function isEqualToSumEven ($n) {\n    return $n % 2 == 0 and $n >= 8;\n}\n",
            "function specialFactorial ($n) {\n    $fact = 1;\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $fact *= $i;\n        $result *= $fact;\n    }\n    return $result;\n}\n",
            "function fixSpaces ($txt) {\n    return preg_replace('/\\s{3,}/', '-', $txt)\n        ->replace(' ', '_');\n}\n",
            "function fileNameCheck ($fileName) {\n    $suf = [\"txt\", \"exe\", \"dll\"];\n    $lst = explode(\".\", $fileName);\n    if (count($lst)!= 2 ||!in_array($lst[1], $suf) || strlen($lst[0]) == 0 ||!ctype_alpha($lst[0][0]) || preg_match(\"/\\d/\", $lst[0]) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "function sumSquares ($lst) {\n    $result = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n            $result += pow($lst[$i], 2);\n        } elseif ($i % 4 == 0) {\n            $result += pow($lst[$i], 3);\n        } else {\n            $result += $lst[$i];\n        }\n    }\n    return $result;\n}\n",
            "function isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction wordsInSentence ($sentence) {\n    $words = explode(\" \", $sentence);\n    return implode(\" \", array_filter($words, \"isPrime\"));\n}\n",
            "function simplify ($x, $n) {\n    $xs = explode(\"/\", $x);\n    $ns = explode(\"/\", $n);\n    $num = $xs[0] * $ns[0];\n    $den = $xs[1] * $ns[1];\n    return $num % $den == 0;\n}\n",
            "function digitsSum ($n) {\n    $nStr = strval($n);\n    if ($n >= 0) {\n        return array_sum(array_map('intval', str_split($nStr)));\n    } else {\n        return intval($nStr[0]) * 2 + digitsSum(abs($n));\n    }\n}\nfunction orderByPoints ($nums) {\n    return array_map('intval', array_unique(array_map('digitsSum', $nums)));\n}\n",
            "function specialFilter ($nums) {\n    $odds = \"13579\";\n    return count(array_filter($nums, function ($n) {\n        return $n > 10 && $n % 2 == 1 && $n[0] in $odds;\n    }));\n}\n",
            "function getMaxTriples ($n) {\n    $c = [0, 0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        $a = $i * $i - $i + 1;\n        $c[$a % 3] += 1;\n    }\n    return $c[0] * $c[1] * $c[2] + ($c[0] * ($c[0] - 1) * ($c[0] - 2) + $c[1] * ($c[1] - 1) * ($c[1] - 2) + $c[2] * ($c[2] - 1) * ($c[2] - 2)) // 6;\n}\n",
            "function bf ($planet1, $planet2) {\n    $names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!in_array($planet1, $names) ||!in_array($planet2, $names)) {\n        return [];\n    }\n    $l = array_search($planet1, $names);\n    $r = array_search($planet2, $names);\n    if ($l > $r) {\n        $l, $r = $r, $l;\n    }\n    if ($l == $r) {\n        return [];\n    }\n    return array_slice($names, $l + 1, $r - $l);\n}\n",
            "function sortedListSum ($lst) {\n    $result = [];\n    foreach ($lst as $s) {\n        if (strlen($s) % 2 == 0) {\n            $result[] = $s;\n        }\n    }\n    return array_merge(\n        $result,\n        array_map(\n            function ($x) {\n                return $x;\n            },\n            array_filter(\n                $result,\n                function ($x) {\n                    return strlen($x) % 2 == 0;\n                }\n            )\n        )\n    );\n}\n",
            "function xOrY ($n, $x, $y) {\n    if ($n < 2) {\n        return $y;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return $y;\n        }\n    }\n    return $x;\n}\n",
            "function doubleTheDifference ($lst) {\n    return array_sum(array_map(function ($n) {\n        return $n * $n;\n    }, array_filter($lst, function ($n) {\n        return $n >= 0 && $n % 2 == 1;\n    })));\n}\n",
            "function compare ($game, $guess) {\n    return array_map(function ($x, $y) {\n        return abs($x - $y);\n    }, $game, $guess);\n}\n",
            "function strongestExtension ($className, $extensions) {\n    $maxS = -INF;\n    $maxExt = \"\";\n    foreach ($extensions as $ext) {\n        $upper = count(array_filter($ext, \"ctype_upper\"));\n        $lower = count(array_filter($ext, \"ctype_lower\"));\n        $s = $upper - $lower;\n        if ($s > $maxS) {\n            $maxS = $s;\n            $maxExt = $ext;\n        }\n    }\n    return $className. \".\". $maxExt;\n}\n",
            "function cycpatternCheck ($a, $b) {\n    if (strlen($a) < strlen($b)) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($b); $i++) {\n        if (substr($b, $i). substr($b, 0, $i) in $a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function evenOddCount ($num) {\n    $ds = str(abs($num));\n    $even = 0;\n    foreach ($ds as $d) {\n        if (ord($d) % 2 == 0) {\n            $even++;\n        }\n    }\n    return [$even, strlen($ds) - $even];\n}\n",
            "function intToMiniRoman ($num) {\n    $values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    $res = [];\n    for ($i = 0; $i < count($values); $i++) {\n        while ($num >= $values[$i]) {\n            $res[] = $numerals[$i];\n            $num -= $values[$i];\n        }\n    }\n    return implode(\"\", $res);\n}\n",
            "function rightAngleTriangle ($a, $b, $c) {\n    $s = [\n        $a,\n        $b,\n        $c\n    ];\n    sort($s);\n    return $s[0] * $s[0] + $s[1] * $s[1] == $s[2] * $s[2];\n}\n",
            "function findMax ($words) {\n    $max_cnt = 0;\n    $max_w = \"\";\n    foreach ($words as $w) {\n        $cnt = count(array_unique(str_split($w)));\n        if ($cnt > $max_cnt) {\n            $max_cnt = $cnt;\n            $max_w = $w;\n        } elseif ($cnt == $max_cnt) {\n            $max_w = min($max_w, $w);\n        }\n    }\n    return $max_w;\n}\n",
            "function eat ($num, $need, $remaining) {\n    if ($need <= $remaining) {\n        return [$num + $need, $remaining - $need];\n    } else {\n        return [$num + $remaining, 0];\n    }\n}\n",
            "function doAlgebra ($operators, $operands) {\n    $ops = $operators->copy();\n    $nums = $operands->copy();\n    $i = $ops->count() - 1;\n    while ($i >= 0) {\n        if ($ops[$i] == \"**\") {\n            $nums[$i] = pow($nums[$i], $nums[$i + 1]);\n            $nums->pop($i + 1);\n            $ops->pop($i);\n        }\n        $i--;\n    }\n    $i = 0;\n    while ($i < $ops->count()) {\n        if ($ops[$i] == \"*\") {\n            $nums[$i] = $nums[$i] * $nums[$i + 1];\n            $nums->pop($i + 1);\n            $ops->pop($i);\n            $i--;\n        } elseif ($ops[$i] == \"//\") {\n            $nums[$i] = $nums[$i] // $nums[$i + 1];\n            $nums->pop($i + 1);\n            $ops->pop($i);\n            $i--;\n        }\n        $i++;\n    }\n    $i = 0;\n    while ($i < $ops->count()) {\n        if ($ops[$i] == \"+\") {\n            $nums[$i] = $nums[$i] + $nums[$i + 1];\n            $nums->pop($i + 1);\n            $ops->pop($i);\n            $i--;\n        } elseif ($ops[$i] == \"-\") {\n            $nums[$i] = $nums[$i] - $nums[$i + 1];\n            $nums->pop($i + 1);\n            $ops->pop($i);\n            $i--;\n        }\n        $i++;\n    }\n    return $nums[0];\n}\n",
            "function solve ($s) {\n    $result = [];\n    foreach (str_split($s) as $ch) {\n        if (!ctype_alpha($ch)) {\n            $result[] = $ch;\n        } elseif (ctype_upper($ch)) {\n            $result[] = strtolower($ch);\n        } elseif (ctype_lower($ch)) {\n            $result[] = strtoupper($ch);\n        }\n    }\n    return implode(\"\", $result);\n}\n",
            "function stringToMd5 ($txt) {\n    if (!$txt) {\n        return null;\n    }\n    $md5Hash = md5($txt);\n    return $md5Hash;\n}\n",
            "function generateIntegers ($a, $b) {\n    $lower = max(2, min($a, $b));\n    $upper = min(8, max($a, $b));\n    return array_filter(range($lower, $upper + 1), function ($i) {\n        return $i % 2 == 0;\n    });\n}\n"
        ],
        "ruby": [
            "def has_close_elements(numbers, threshold)\n    for i in 0...numbers.length\n        for j in i + 1...numbers.length\n            if (numbers[i] - numbers[j]).abs < threshold\n                return true\n            end\n        end\n    end\n    return false\nend\n",
            "def separate_paren_groups(paren_string)\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.gsub(\" \", \"\")\n    for ch in parens\n        if ch == \"(\"\n            stk.push(ch)\n            current_group += ch\n        elsif ch == \")\"\n            stk.pop\n            current_group += ch\n            if not stk\n                groups.push(current_group)\n                current_group = \"\"\n    end\n    groups\nend\n",
            "def truncate_number(num)\n    num - num.floor\nend\n",
            "def below_zero(operations)\n    balance = 0\n    for op in operations\n        balance += op\n        if balance < 0\n            return true\n        end\n    end\n    return false\nend\n",
            "def mean_absolute_deviation(numbers)\n    mean = numbers.inject(:+) / numbers.size\n    deviation = numbers.inject(0) {|sum, x| sum + (x - mean).abs}\n    deviation / numbers.size\nend\n",
            "def intersperse(numbers, delimiter)\n    result = []\n    for i in 0...numbers.length\n        if i!= 0\n            result << delimiter\n        end\n        result << numbers[i]\n    end\n    result\nend\n",
            "def parse_nested_parens(paren_string)\n    result = []\n    paren_groups = paren_string.split\n    for group in paren_groups\n        max_depth = 0\n        depth = 0\n        for ch in group\n            if ch == \"(\"\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elsif ch == \")\"\n                depth -= 1\n        end\n        result << max_depth\n    end\n    result\nend\n",
            "def filter_by_substring(strs, substring)\n    strs.select {|s| s.include?(substring)}\nend\n",
            "def sum_product(numbers)\n    n_sum = numbers.inject(:+)\n    n_product = numbers.inject(:*)\n    [n_sum, n_product]\nend\n",
            "def rolling_max(numbers)\n    max_so_far = -Float::INFINITY\n    result = []\n    for num in numbers\n        max_so_far = num if num > max_so_far\n        result << max_so_far\n    end\n    result\nend\n",
            "def is_palindrome(s)\n    s == s.reverse\nend\ndef make_palindrome(s)\n    if is_palindrome(s)\n        return s\n    for i in 0...s.length\n        if is_palindrome(s[i..-1])\n            return s + s[i..-1].reverse\n        end\n    end\n    return \"\"\nend\n",
            "def string_xor(a, b)\n    a.chars.zip(b.chars).map {|x, y| x == y? \"0\" : \"1\"}.join\nend\n",
            "def longest(strs)\n    return nil if strs.empty?\n    longest_s = strs[0]\n    for s in strs\n        if s.length > longest_s.length\n            longest_s = s\n    end\n    longest_s\nend\n",
            "def greatest_common_divisor(a, b)\n    b == 0? a : greatest_common_divisor(b, a % b)\nend\n",
            "def all_prefixes(s)\n    s.chars.each_cons(1).map(&:join)\nend\n",
            "def string_sequence(n)\n    (1..n).map(&:to_s).join(' ')\nend\n",
            "def count_distinct_characters(s)\n    s.downcase.chars.uniq.length\nend\n",
            "def parse_music(music_string)\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split\n    notes.map {|note| durations[note]}\nend\n",
            "def how_many_times(s, substring)\n    s.count(substring)\nend\n",
            "def sort_numbers(numbers)\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = numbers.split(\" \").select {|x| num_dict.key?(x)}\n    num_list.sort! {|a, b| num_dict[a] <=> num_dict[b]}\n    num_list.join(\" \")\nend\n",
            "def find_closest_elements(numbers)\n    sorted_numbers = numbers.sort\n    min_diff = Float::INFINITY\n    closest_pair = []\n    for i in 1...sorted_numbers.length\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    end\n    closest_pair\nend\n",
            "def rescale_to_unit(numbers)\n    min_num = numbers.min\n    max_num = numbers.max\n    if min_num == max_num\n        return [0.0] * numbers.length\n    else\n        return (numbers - min_num) / (max_num - min_num)\n    end\nend\n",
            "def filter_integers(values)\n    values.select {|x| x.is_a?(Integer)}\nend\n",
            "def str_length(s)\n    s.length\nend\n",
            "def largest_divisor(n)\n    (2..n).each do |i|\n        if n % i == 0\n            return n / i\n        end\n    end\n    return 1\nend\n",
            "def factorize(n)\n    factors = []\n    divisor = 2\n    while divisor <= n\n        if n % divisor == 0\n            factors << divisor\n            n /= divisor\n        else\n            divisor += 1\n    end\n    factors\nend\n",
            "def remove_duplicates(numbers)\n    counts = {}\n    for num in numbers\n        counts[num] = counts.fetch(num, 0) + 1\n    res = []\n    for num in numbers\n        res << num if counts[num] == 1\n    end\n    res\nend\n",
            "def flip_case(s)\n    s.chars.map do |ch|\n        if ch.is_alpha?\n            ch.upcase if ch.downcase?\n            ch.downcase if ch.upcase?\n        else\n            ch\n        end\n    end.join\nend\n",
            "def concatenate(strs)\n    strs.join\nend\n",
            "def filter_by_prefix(strs, prefix_str)\n    strs.select {|s| s.start_with?(prefix_str)}\nend\n",
            "def get_positive(l)\n    l.select {|num| num > 0}\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n).floor).each do |i|\n        return false if n % i == 0\n    end\n    true\nend\n",
            "def poly(xs, x)\n    res = 0.0\n    for i in 0...xs.length\n        res += xs[i] * x**i\n    end\n    return res\nend\ndef find_zero(xs)\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0\n        x1 *= 2\n        x2 *= 2\n    end\n    while abs(x1 - x2) > 1e-10\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0\n            return mid\n        elsif poly(xs, mid) * poly(xs, x1) < 0\n            x2 = mid\n        else\n            x1 = mid\n    end\n    return (x1 + x2) / 2\nend\n",
            "def sort_third(l)\n    sorted_third = l.each_slice(3).map(&:sort).flatten\n    l.each_with_index.map do |e, i|\n        sorted_third[i // 3] if i % 3 == 0 else e\n    end\nend\n",
            "def list_unique(l)\n    l.sort.uniq\nend\n",
            "def max_element(l)\n    l.max\nend\n",
            "def fizz_buzz(n)\n    cnt = 0\n    (1..n).each do |i|\n        cnt += i.to_s.count(\"7\") if i % 11 == 0 || i % 13 == 0\n    end\n    cnt\nend\n",
            "def sort_even(l)\n    l.each_slice(2).map {|e| e[0] if e[1].nil? else e[1]}.sort\nend\n",
            "def encode_cyclic(s)\n    result = []\n    for i in 0...s.length, 3\n        if i + 3 > s.length\n            result.push(s[i..-1])\n        else\n            result.push(s[i+1..i+3])\n            result.push(s[i])\n        end\n    end\n    result.join\nend\ndef decode_cyclic(s)\n    encode_cyclic(encode_cyclic(s))\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n).floor).each do |i|\n        return false if n % i == 0\n    end\n    true\nend\ndef prime_fib(n)\n    f = [0, 1]\n    cnt = 0\n    while cnt < n\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1])\n            cnt += 1\n    end\n    f[1]\nend\n",
            "def triples_sum_to_zero(l)\n    for i in 0...l.length\n        for j in i+1...l.length\n            for k in j+1...l.length\n                if l[i] + l[j] + l[k] == 0\n                    return true\n                end\n            end\n        end\n    end\n    return false\nend\n",
            "def car_race_collision(n)\n    n ** 2\nend\n",
            "def incr_list(l)\n    l.map {|i| i + 1}\nend\n",
            "def pairs_sum_to_zero(l)\n    seen = Set.new\n    for num in l\n        if -num in seen\n            return true\n        end\n        seen.add(num)\n    end\n    return false\nend\n",
            "def change_base(x, bas)\n    digits = []\n    while x > 0\n        digits << x % bas\n        x /= bas\n    end\n    digits.reverse.join\nend\n",
            "def triangle_area(a, h)\n    a * h / 2\nend\n",
            "def fib4(n)\n    fib = [0, 0, 2, 0]\n    for i in 4..n\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3]\n    end\n    fib[n % 4]\nend\n",
            "def median(l)\n    l.sort!\n    l[l.length / 2]\nend\n",
            "def is_palindrome(txt)\n    txt == txt.reverse\nend\n",
            "def modp(n, p)\n    ret = 1\n    for _ in 0...n\n        ret = (ret * 2) % p\n    end\n    ret\nend\n",
            "def encode_shift(s)\n    s.chars.map {|ch| ((ord(ch) - 97 + 5) % 26) + 97}.pack(\"c*\")\nend\ndef decode_shift(s)\n    s.unpack(\"c*\").map {|ch| ((ord(ch) - 97 + 21) % 26) + 97}.pack(\"c*\")\nend\n",
            "def remove_vowels(txt)\n    txt.gsub(/[aeiouAEIOU]/, '')\nend\n",
            "def below_threshold(l, t)\n    l.all? {|x| x < t}\nend\n",
            "def add(x, y)\n    x + y\nend\n",
            "def same_chars(s0, s1)\n    s0.chars == s1.chars\nend\n",
            "def fib(n)\n    n <= 1? n : fib(n - 1) + fib(n - 2)\nend\n",
            "def correct_bracketing(brackets)\n    depth = 0\n    for b in brackets\n        if b == \"<\"\n            depth += 1\n        elsif b == \">\"\n            depth -= 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    return depth == 0\nend\n",
            "def monotonic(l)\n    diff = l[1..-1].zip(l[0..-2]).map {|x, y| x - y}\n    return diff.all? {|x| x <= 0} || diff.all? {|x| x >= 0}\nend\n",
            "def common(l1, l2)\n    l1.sort.uniq & l2.sort.uniq\nend\n",
            "def largest_prime_factor(n)\n    i = 2\n    while i * i <= n\n        if n % i:\n            i += 1\n        else:\n            n /= i\n    end\n    n\nend\n",
            "def sum_to_n(n)\n    (1..n).inject(:+)\nend\n",
            "def correct_bracketing(brackets)\n    depth = 0\n    for b in brackets\n        if b == \"(\"\n            depth += 1\n        elsif b == \")\"\n            depth -= 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    return depth == 0\nend\n",
            "def derivative(xs)\n    xs.each_with_index.map {|x, i| x * i}\nend\n",
            "def fibfib(n)\n    a, b, c = 0, 0, 1\n    while n > 2\n        a, b, c = b, c, a + b + c\n        n -= 1\n    end\n    c\nend\n",
            "def vowels_count(s)\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in 0...s.length\n        if s[i].downcase in vowels or (i == s.length - 1 and s[i].downcase == \"y\")\n            cnt += 1\n    end\n    cnt\nend\n",
            "def circular_shift(x, shift)\n    x_str = x.to_s\n    if shift > x_str.length\n        x_str.reverse\n    else\n        x_str[-shift..-1] + x_str[0...-shift]\n    end\nend\n",
            "def digit_sum(s)\n    s.upcase.chars.map(&:ord).reduce(:+)\nend\n",
            "def fruit_distribution(s, n)\n    words = s.split(' ')\n    apples = words[words.index(\"apples\") - 1].to_i\n    oranges = words[words.index(\"oranges\") - 1].to_i\n    n - apples - oranges\nend\n",
            "def pluck(arr)\n    evens = arr.select {|n| n % 2 == 0}\n    if evens.empty?\n        return []\n    min_even = evens.min\n    return [min_even, arr.index(min_even)]\nend\n",
            "def search(lst)\n    freqs = {}\n    for n in lst\n        freqs[n] = freqs.fetch(n, 0) + 1\n    good_vals = freqs.select {|k, v| v >= k}\n    good_vals.max_by {|k, v| v} || [-1]\nend\n",
            "def strange_sort_list(lst)\n    sl = lst.sort\n    result = []\n    left, right = 0, sl.length - 1\n    while left <= right\n        result << sl[left]\n        left += 1\n        if left <= right\n            result << sl[right]\n            right -= 1\n    end\n    result\nend\n",
            "def triangle_area(a, b, c)\n    return -1.0 if a + b > c and a + c > b and b + c > a\n    s = (a + b + c) / 2.0\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c))\nend\n",
            "def will_it_fly(q, w)\n    return false if q.empty?\n    is_palin = q.all? {|i| i == q.last}\n    total = q.inject(0) {|sum, i| sum + i}\n    is_palin && total <= w\nend\n",
            "def smallest_change(arr)\n    ans = 0\n    for i in 0...(arr.length / 2)\n        if arr[i]!= arr[arr.length - i - 1]\n            ans += 1\n    end\n    ans\nend\n",
            "def total_match(lst1, lst2)\n    lst1.length > lst2.length? lst1 : lst2\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n).floor).each do |i|\n        return false if n % i == 0\n    end\n    true\nend\ndef is_multiply_prime(a)\n    cnt = 0\n    (2..a).each do |i|\n        cnt += 1 if is_prime(i) && a % i == 0\n    end\n    cnt == 3\nend\n",
            "def is_simple_power(x, n)\n    return x == n if n < 2\n    tmp = 1\n    while tmp < x\n        tmp *= n\n    end\n    return tmp == x\nend\n",
            "def is_cube(a)\n    a = a.abs\n    root = a.to_f ** (1.0 / 3.0)\n    root * root * root == a\nend\n",
            "def hex_key(num)\n    num.count(\"2357BD\")\nend\n",
            "def decimal_to_binary(dec)\n    \"db#{dec.to_s(2).rjust(8, '0')}db\"\nend\n",
            "def is_happy(s)\n    s.length < 3? false : (0...s.length - 2).any? do |i|\n        s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n    end\nend\n",
            "def numerical_letter_grade(grades)\n    grades.map do |g|\n        if g == 4.0\n            \"A+\"\n        elsif g > 3.7\n            \"A\"\n        elsif g > 3.3\n            \"A-\"\n        elsif g > 3.0\n            \"B+\"\n        elsif g > 2.7\n            \"B\"\n        elsif g > 2.3\n            \"B-\"\n        elsif g > 2.0\n            \"C+\"\n        elsif g > 1.7\n            \"C\"\n        elsif g > 1.3\n            \"C-\"\n        elsif g > 1.0\n            \"D+\"\n        elsif g > 0.7\n            \"D\"\n        elsif g > 0.0\n            \"D-\"\n        else\n            \"E\"\n        end\n    end\nend\n",
            "def prime_length(s)\n    length = s.length\n    return false if length < 2\n    for i in 2..Math.sqrt(length).floor\n        return false if length % i == 0\n    end\n    true\nend\n",
            "def starts_one_ends(n)\n    n == 1? 1 : 2 * 9 * (10 ** (n - 2))\nend\n",
            "def solve(n)\n    digits_sum = n.to_s.split('').map(&:to_i).inject(&:+)\n    return digits_sum.to_s(2)[2..-1]\nend\n",
            "def add(lst)\n    lst.select.with_index {|x, i| i.odd? and x.even?}.sum\nend\n",
            "def anti_shuffle(s)\n    words = s.split(\" \").map {|word| word.chars.sort.join}\n    words.join(\" \")\nend\n",
            "def get_row(lst, x)\n    coords = []\n    for i in 0...lst.length\n        for j in 0...lst[i].length\n            if lst[i][j] == x\n                coords.push([i, j])\n            end\n        end\n    end\n    coords.sort! {|a, b| a[0] <=> b[0] || a[1] <=> b[1]}\nend\n",
            "def sort_array(arr)\n    if arr.empty?\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0\n        return arr.sort.reverse\n    else\n        return arr.sort\n    end\nend\n",
            "def encrypt(s)\n    result = []\n    for ch in s\n        shifted = ord(ch) + 4\n        if shifted > ord('z')\n            shifted -= 26\n        result << shifted.chr\n    end\n    result.join\nend\n",
            "def next_smallest(lst)\n    sl = lst.sort.uniq\n    sl.length < 2? nil : sl[1]\nend\n",
            "def is_bored(s)\n    sentences = s.split(/[.!?]\\s*/)\n    sentences.count { |sentence| sentence[0..1] == \"I \" }\nend\n",
            "def any_int(x, y, z)\n    x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer) && (x + y == z) || (x + z == y) || (y + z == x)\nend\n",
            "def encode(message)\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message\n        if ch.isalpha\n            ch1 = ch.upcase if ch.downcase\n            ch1 = ch1.ord + 2 if ch1.in? vowels\n            result << ch1\n        else\n            result << ch\n        end\n    end\n    result.join\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n).floor).each do |i|\n        return false if n % i == 0\n    end\n    true\nend\ndef skjkasdkd(lst)\n    primes = lst.select {|n| is_prime(n)}\n    return 0 if primes.empty?\n    largest = primes.max.to_s\n    return primes.sum { |n| n.to_s.to_i }\nend\n",
            "def check_dict_case(d)\n    return false if d.empty?\n    return d.keys.all?(&:downcase?) || d.keys.all?(&:upcase?)\nend\n",
            "def count_up_to(n)\n    primes = []\n    for num in (2..n)\n        primes << num if primes.all? {|p| num % p!= 0}\n    end\n    primes\nend\n",
            "def multiply(a, b)\n    (a.abs % 10) * (b.abs % 10)\nend\n",
            "def count_upper(s)\n    s.chars.each_with_index.count {|c, i| i.even? && \"AEIOU\".include?(c)}\nend\n",
            "def closest_integer(value)\n    num = value.to_f\n    num >= 0? num.ceil : num.floor\nend\n",
            "def make_a_pile(n)\n    (1..n).map {|i| n + 2 * i}\nend\n",
            "def words_string(s)\n    s.split(/[, ]/).select {|w| w.length > 0}\nend\n",
            "def choose_num(x, y)\n    if x > y\n        return -1\n    elsif y % 2 == 0\n        return y\n    else\n        return y - 1 if x!= y else -1\n    end\nend\n",
            "def rounded_avg(n, m)\n    if n > m\n        return nil\n    end\n    r_avg = (m + n) / 2.0 + 0.5\n    return r_avg.to_s(2)\nend\n",
            "def all_digits_odd(s)\n    s.each_char.all? {|digit| digit.ord % 2!= 0}\nend\ndef unique_digits(x)\n    x.select {|num| all_digits_odd(num.to_s)}\nend\n",
            "def by_length(arr)\n    arr.select {|x| 1 <= x <= 9}.sort.reverse.map {|x| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x-1]}\nend\n",
            "def f(n)\n    nums = (1..n).to_a\n    nums.map.with_index do |num, i|\n        sum(nums[0..i]) if i % 2!= 0 else nums[0..i].reduce(:*)\n    end\nend\n",
            "def is_palindrome(txt)\n    txt == txt.reverse\nend\ndef even_odd_palindrome(n)\n    cnt = [0, 0]\n    for i in 1..n\n        if is_palindrome(i.to_s)\n            cnt[i % 2] += 1\n    end\n    cnt\nend\n",
            "def digits_sum(n)\n    n_str = n.to_s\n    if n >= 0\n        n_str.chars.map(&:to_i).sum\n    else\n        n_str[0..1].to_i * 2 + digits_sum(n_str[2..-1].to_i * -1)\n    end\nend\ndef count_nums(arr)\n    arr.count { |n| digits_sum(n) > 0 }\nend\n",
            "def move_one_ball(arr)\n    return true if arr.empty?\n    sorted_arr = arr.sort\n    for i in 0...arr.length\n        return true if arr[i..] == sorted_arr[0...arr.length - i] && arr[0...i] == sorted_arr[arr.length - i..]\n    end\n    false\nend\n",
            "def can_exchange(lst1, lst2)\n    odd_cnt = lst1.count { |num| num % 2!= 0 }\n    even_cnt = lst2.count { |num| num % 2 == 0 }\n    \"YES\" if even_cnt >= odd_cnt else \"NO\"\nend\n",
            "def histogram(test)\n    freq = {}\n    words = test.split(\" \").select {|w| w.length > 0}\n    for w in words\n        freq[w] = freq.fetch(w, 0) + 1\n    result = {}\n    if freq.length > 0\n        max_freq = freq.values.max\n        for k, v in freq.to_a\n            if v == max_freq\n                result[k] = v\n    end\n    result\nend\n",
            "def is_palindrome(s)\n    s == s.reverse\nend\ndef reverse_delete(s, c)\n    s1 = s.gsub(c, \"\")\n    [s1, \"yes\" if is_palindrome(s1) else \"no\"]\nend\n",
            "def odd_count(lst)\n    result = []\n    for num in lst\n        n = 0\n        for d in num\n            n += ord(d) % 2 == 1\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    end\n    result\nend\n",
            "def min_sub_array_sum(nums)\n    min_sum = 0\n    cur_sum = 0\n    for n in nums\n        cur_sum = [cur_sum + n, 0].min\n        min_sum = [cur_sum, min_sum].min\n    if min_sum == 0\n        min_sum = nums.min\n    end\n    return min_sum\nend\n",
            "def max_fill(grid, capacity)\n    grid.map {|arr| arr.sum}.map {|sum| sum.ceil / capacity}.max\nend\n",
            "def count_ones(num)\n    num.to_s(2).count(\"1\")\nend\ndef sort_array(arr)\n    arr.sort {|a, b| [count_ones(a), a] <=> [count_ones(b), b]}\nend\n",
            "def select_words(s, n)\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    words.select {|w| w.length > 0 && w.downcase.count(consonants) == n}\nend\n",
            "def get_closest_vowel(word)\n    vowels = \"aeiouAEIOU\"\n    for i in (0...word.length - 2).step(-1)\n        if word[i] in vowels and word[i - 1]!~ vowels and word[i + 1]!~ vowels\n            return word[i]\n    end\n    return \"\"\nend\n",
            "def match_parens(lst)\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    \"Yes\" if check(s1) || check(s2) else \"No\"\nend\ndef check(s)\n    depth = 0\n    for ch in s\n        if ch == \"(\"\n            depth += 1\n        else\n            depth -= 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    return true if depth == 0 else false\nend\n",
            "def maximum(arr, k)\n    arr.sort.reverse[0..k-1]\nend\n",
            "def solution(lst)\n    lst.select.with_index {|x, i| i.even? and x.odd?}.sum\nend\n",
            "def add_elements(arr, k)\n    arr[0...k].map(&:to_s).map(&:length).map(&:to_i).reduce(&:+)\nend\n",
            "def get_odd_collatz(n)\n    collatz = [1]\n    while n!= 1\n        if n % 2!= 0\n            collatz << n\n            n = 3 * n + 1\n        else\n            n = n / 2\n    end\n    collatz.sort\nend\n",
            "def valid_date(date)\n    return false if date.length!= 10 or date[2]!= \"-\" or date[5]!= \"-\"\n    m = date[0..1].to_i\n    d = date[3..4].to_i\n    return true if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31\n    return true if m in [4, 6, 9, 11] and d >= 1 and d <= 30\n    return true if m == 2 and d >= 1 and d <= 29\n    false\nend\n",
            "def split_words(txt)\n    if \" \" in txt\n        txt.split(\" \")\n    elsif \",\" in txt\n        txt.split(\",\")\n    else\n        [txt.length.to_s]\n    end\nend\n",
            "def is_sorted(lst)\n    return false unless lst.length > 1\n    return false unless lst.all? { |e| e <= lst[0] }\n    freq = {}\n    lst.each do |e|\n        freq[e] = freq.fetch(e, 0) + 1\n    end\n    return freq.values.max <= 2\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    for i in 2..Math.sqrt(n).floor\n        return false if n % i == 0\n    end\n    true\nend\ndef intersection(interval1, interval2)\n    l = [interval1[0], interval2[0]].max\n    r = [interval1[1], interval2[1]].min\n    length = r - l\n    return \"YES\" if length > 0 && is_prime(length) else \"NO\"\nend\n",
            "def prod_signs(arr)\n    return 0 if arr.include?(0)\n    sign = -1 if arr.count { |n| n < 0 } % 2 == 1\n    return sign * arr.map { |n| n.abs }.inject(:*)\nend\n",
            "def min_path(grid, k)\n    n = grid.size\n    min_val = n * n + 1\n    for i in 0...n\n        for j in 0...n\n            if grid[i][j] == 1\n                temp = []\n                if i!= 0\n                    temp << grid[i - 1][j]\n                if j!= 0\n                    temp << grid[i][j - 1]\n                if i!= n - 1\n                    temp << grid[i + 1][j]\n                if j!= n - 1\n                    temp << grid[i][j + 1]\n                min_val = min(temp)\n    result = []\n    for i in 0...k\n        result << 1 if i % 2 == 0 else min_val\n    result\nend\n",
            "def tri(n)\n    if n == 0\n        return [1]\n    seq = [1, 3]\n    for i in 2..n\n        if i % 2 == 0\n            seq << i / 2 + 1\n        else\n            seq << seq[i - 1] + seq[i - 2] + (i + 3) / 2\n        end\n    end\n    seq\nend\n",
            "def digits(n)\n    n.to_s.chars.select {|d| d.to_i % 2 == 1}.map(&:to_i).reduce(1, :*)\nend\n",
            "def is_nested(s)\n    open_idx = []\n    close_idx = []\n    for i in 0...s.length\n        if s[i] == '['\n            open_idx << i\n        elsif s[i] == ']'\n            close_idx << i\n    close_idx.reverse!\n    cnt = 0\n    i = 0\n    l = close_idx.length\n    for idx in open_idx\n        if i < l and idx < close_idx[i]\n            cnt += 1\n            i += 1\n    cnt >= 2\nend\n",
            "def sum_squares(lst)\n    lst.map {|n| n = n.ceil; n * n}.reduce(:+)\nend\n",
            "def check_if_last_char_is_a_letter(txt)\n    return false if txt.nil? or txt.empty?\n    last = txt[txt.rindex(' ') + 1..-1]\n    return last.length == 1 and last[0].isalpha?\nend\n",
            "def can_arrange(arr)\n    return -1 if arr.length <= 1\n    idx = arr.each_with_index.select {|e, i| e < arr[i - 1]}.map(&:first)\n    return idx.max || -1\nend\n",
            "def largest_smallest_integers(lst)\n    neg = lst.select {|i| i < 0}\n    pos = lst.select {|i| i > 0}\n    max_neg = neg.max if neg.length > 0\n    min_pos = pos.min if pos.length > 0\n    [max_neg, min_pos]\nend\n",
            "def any_to_real(o)\n    if o.is_a?(String)\n        return o.gsub(',','.').to_f\n    elsif o.is_a?(Integer)\n        return o.to_f\n    elsif o.is_a?(Float)\n        return o\n    else\n        raise RuntimeError(\"Type Error\")\n    end\nend\ndef compare_one(a, b)\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1\n        return nil\n    elsif a1 > b1\n        return a1\n    else\n        return b1\n    end\nend\n",
            "def is_equal_to_sum_even(n)\n    n % 2 == 0 and n >= 8\nend\n",
            "def special_factorial(n)\n    fact = 1\n    result = 1\n    for i in 1..n\n        fact *= i\n        result *= fact\n    end\n    result\nend\n",
            "def fix_spaces(txt)\n    txt.gsub!(/\\s{3,}/, \"-\")\n    txt.gsub!(\" \", \"_\")\nend\n",
            "def file_name_check(file_name)\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if lst.length!= 2 ||!lst[1] in suf || lst[0].length == 0 ||!lst[0][0].isalpha() || lst[0].scan(/\\d/).length > 3\n        return \"No\"\n    return \"Yes\"\nend\n",
            "def sum_squares(lst)\n    result = 0\n    for i in 0...lst.length\n        if i % 3 == 0\n            result += lst[i] ** 2\n        elsif i % 4 == 0\n            result += lst[i] ** 3\n        else\n            result += lst[i]\n    end\n    result\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n).floor).each do |i|\n        return false if n % i == 0\n    end\n    true\nend\ndef words_in_sentence(sentence)\n    words = sentence.split(\" \")\n    words.select {|w| is_prime(w.length)}.join(\" \")\nend\n",
            "def simplify(x, n)\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = xs[0].to_i * ns[0].to_i\n    den = xs[1].to_i * ns[1].to_i\n    num % den == 0\nend\n",
            "def digits_sum(n)\n    n_str = n.to_s\n    if n >= 0\n        n_str.chars.map(&:to_i).sum\n    else\n        n_str[0..1].to_i * 2 + digits_sum(n_str[2..-1].to_i * -1)\n    end\nend\ndef order_by_points(nums)\n    nums.sort_by {|n| digits_sum(n)}\nend\n",
            "def special_filter(nums)\n    odds = \"13579\"\n    nums.select {|n| n > 10 and n % 2 == 1 and str(n)[0] in odds}.length\nend\n",
            "def get_max_triples(n)\n    c = [0, 0, 0]\n    for i in 1..n\n        a = i * i - i + 1\n        c[a % 3] += 1\n    end\n    c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\nend\n",
            "def bf(planet1, planet2)\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1.nil? || planet2.nil? ||!names.include?(planet1) ||!names.include?(planet2)\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r\n        l, r = r, l\n    if l == r\n        return []\n    return names[l + 1..r]\nend\n",
            "def sorted_list_sum(lst)\n    result = lst.select {|s| s.length % 2 == 0}\n    result.sort {|a, b| [a.length, a] <=> [b.length, b]}\nend\n",
            "def x_or_y(n, x, y)\n    if n < 2\n        return y\n    for i in 2..Math.sqrt(n).floor\n        if n % i == 0\n            return y\n    end\n    return x\nend\n",
            "def double_the_difference(lst)\n    lst.select {|n| n >= 0 and n % 2 == 1}.map {|n| n * n}.sum\nend\n",
            "def compare(game, guess)\n    game.zip(guess).map {|x, y| x - y}\nend\n",
            "def strongest_extension(class_name, extensions)\n    max_s = -Float::INFINITY\n    max_ext = \"\"\n    for ext in extensions\n        upper = ext.count { |c| c.upcase? }\n        lower = ext.count { |c| c.downcase? }\n        s = upper - lower\n        if s > max_s\n            max_s = s\n            max_ext = ext\n        end\n    end\n    \"#{class_name}.#{max_ext}\"\nend\n",
            "def cycpattern_check(a, b)\n    a.length < b.length? false : (0...b.length).any? do |i|\n        b[i..-1] + b[0...i] in a\n    end\nend\n",
            "def even_odd_count(num)\n    ds = num.abs.to_s\n    even = ds.count { |d| d.ord % 2 == 0 }\n    return [even, ds.length - even]\nend\n",
            "def int_to_mini_roman(num)\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i in 0..(values.length - 1)\n        while num >= values[i]\n            res.append(numerals[i])\n            num -= values[i]\n    end\n    return res.join\nend\n",
            "def right_angle_triangle(a, b, c)\n    s = [a, b, c].sort\n    s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\nend\n",
            "def find_max(words)\n    max_cnt = 0\n    max_w = \"\"\n    for w in words\n        cnt = w.chars.uniq.size\n        if cnt > max_cnt\n            max_cnt = cnt\n            max_w = w\n        elsif cnt == max_cnt\n            max_w = max_w < w? max_w : w\n        end\n    end\n    max_w\nend\n",
            "def eat(num, need, remaining)\n    [num + need, remaining - need] if need <= remaining else [num + remaining, 0]\nend\n",
            "def do_algebra(operators, operands)\n    ops = operators.dup\n    nums = operands.dup\n    i = ops.length - 1\n    while i >= 0\n        if ops[i] == \"**\"\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < ops.length\n        if ops[i] == \"*\"\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elsif ops[i] == \"//\"\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < ops.length\n        if ops[i] == \"+\"\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elsif ops[i] == \"-\"\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\nend\n",
            "def solve(s)\n    result = []\n    for ch in s\n        if ch.isalpha\n            result << ch.downcase if ch.upcase == ch\n            result << ch.upcase if ch.downcase == ch\n        else\n            result << ch\n        end\n    end\n    result.join\nend\n",
            "def string_to_md5(txt)\n    md5_hash = Digest::MD5.new\n    txt_bytes = txt.encode\n    md5_hash.update(txt_bytes)\n    md5_encoded = md5_hash.hexdigest\n    return md5_encoded\nend\n",
            "def generate_integers(a, b)\n    lower = [2, a, b].max\n    upper = [8, a, b].min\n    (lower..upper).select {|i| i % 2 == 0}\nend\n"
        ],
        "rust": [
            "pub fn has_close_elements(numbers: &Vec<f64>, threshold: f64) -> bool {\n    for i in 0..numbers.len() {\n        for j in (i + 1)..numbers.len() {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n                return true;\n            }\n        }\n    }\n    false\n}\n",
            "pub fn separate_paren_groups(paren_string: &String) -> Vec<String> {\n    let mut groups = Vec::new();\n    let mut stk = Vec::new();\n    let mut current_group = String::new();\n    let parens = paren_string.replace(\" \", \"\");\n    for ch in parens.chars() {\n        if ch == '(' {\n            stk.push(ch);\n            current_group.push(ch);\n        } else if ch == ')' {\n            stk.pop();\n            current_group.push(ch);\n            if stk.is_empty() {\n                groups.push(current_group);\n                current_group = String::new();\n            }\n        }\n    }\n    groups\n}\n",
            "pub fn truncate_number(num: f64) -> f64 {\n    num.trunc()\n}\n",
            "pub fn below_zero(operations: &Vec<i32>) -> bool {\n    operations.iter().fold(0, |acc, &op| acc + op) < 0\n}\n",
            "pub fn mean_absolute_deviation(numbers: &Vec<f64>) -> f64 {\n    let mean = numbers.iter().sum::<f64>() / numbers.len() as f64;\n    let mut deviation = 0.0;\n    for x in numbers {\n        deviation += (x - mean).abs();\n    }\n    deviation / numbers.len() as f64\n}\n",
            "pub fn intersperse(numbers: &Vec<i32>, delimiter: i32) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len() {\n        if i!= 0 {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    result\n}\n",
            "pub fn parse_nested_parens(paren_string: &String) -> Vec<i32> {\n    let mut result = vec![];\n    let mut depth = 0;\n    for ch in paren_string.chars() {\n        if ch == \"(\" {\n            depth += 1;\n        } else if ch == \")\" {\n            depth -= 1;\n        }\n        result.push(depth);\n    }\n    result\n}\n",
            "pub fn filter_by_substring(strs: &Vec<String>, substring: &String) -> Vec<String> {\n    strs.iter().filter(|s| s.contains(substring)).cloned().collect()\n}\n",
            "pub fn sum_product(numbers: &Vec<i32>) -> Vec<i32> {\n    let n_sum = numbers.iter().sum();\n    let n_product = numbers.iter().product();\n    vec![n_sum, n_product]\n}\n",
            "pub fn rolling_max(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut max_so_far = std::i32::MIN;\n    let mut result = vec![];\n    for num in numbers {\n        max_so_far = std::cmp::max(max_so_far, *num);\n        result.push(max_so_far);\n    }\n    result\n}\n",
            "pub fn make_palindrome(s: &String) -> String {\n    if s == s.chars().rev().collect::<String>() {\n        return s.clone();\n    }\n    for i in 0..s.len() {\n        if s.chars().rev().skip(i).take(s.len() - i).collect::<String>() == s.chars().skip(i).take(s.len() - i).collect::<String>() {\n            return s.clone() + s.chars().rev().skip(i).take(s.len() - i).collect::<String>();\n        }\n    }\n    \"\".to_string()\n}\n",
            "pub fn string_xor(a: &String, b: &String) -> String {\n    a.chars().zip(b.chars()).map(|(x, y)| (x ^ y).to_string()).collect()\n}\n",
            "pub fn longest(strs: &Vec<String>) -> Option<String> {\n    if strs.is_empty() {\n        return None;\n    }\n    let mut longest_s = strs[0].clone();\n    for s in strs {\n        if s.len() > longest_s.len() {\n            longest_s = s.clone();\n        }\n    }\n    Some(longest_s)\n}\n",
            "pub fn greatest_common_divisor(a: i32, b: i32) -> i32 {\n    if b == 0 { a } else { greatest_common_divisor(b, a % b) }\n}\n",
            "pub fn all_prefixes(s: &String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..s.len() + 1 {\n        prefixes.push(s.chars().take(i).collect());\n    }\n    prefixes\n}\n",
            "pub fn string_sequence(n: i32) -> String {\n    (0..=n).map(|i| i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n",
            "pub fn count_distinct_characters(s: &String) -> i32 {\n    s.chars().filter(|c| c.is_ascii_alphabetic()).collect::<HashSet<char>>().len() as i32\n}\n",
            "pub fn parse_music(music_string: &String) -> Vec<i32> {\n    let mut durations = HashMap::new();\n    durations.insert(\"o\", 4);\n    durations.insert(\"o|\", 2);\n    durations.insert(\".|\", 1);\n    music_string.split_whitespace().map(|note| durations[note]).collect()\n}\n",
            "pub fn how_many_times(s: &String, substring: &String) -> i32 {\n    s.matches(substring).count() as i32\n}\n",
            "pub fn sort_numbers(numbers: &String) -> String {\n    let num_dict = [\n        (\"zero\", 0),\n        (\"one\", 1),\n        (\"two\", 2),\n        (\"three\", 3),\n        (\"four\", 4),\n        (\"five\", 5),\n        (\"six\", 6),\n        (\"seven\", 7),\n        (\"eight\", 8),\n        (\"nine\", 9),\n    ];\n    let num_list: Vec<&str> = numbers.split(\" \").filter(|x| num_dict.contains(x)).collect();\n    num_list.sort_by(|a, b| num_dict.iter().find(|x| x.0 == a).unwrap().1.cmp(&num_dict.iter().find(|x| x.0 == b).unwrap().1));\n    num_list.join(\" \")\n}\n",
            "pub fn find_closest_elements(numbers: &Vec<f64>) -> Vec<f64> {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort();\n    let mut min_diff = f64::INFINITY;\n    let mut closest_pair = vec![];\n    for i in 1..sorted_numbers.len() {\n        let diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if diff < min_diff {\n            min_diff = diff;\n            closest_pair = vec![sorted_numbers[i - 1], sorted_numbers[i]];\n        }\n    }\n    closest_pair\n}\n",
            "pub fn rescale_to_unit(numbers: &Vec<f64>) -> Vec<f64> {\n    let min_num = numbers.iter().min().unwrap();\n    let max_num = numbers.iter().max().unwrap();\n    if min_num == max_num {\n        vec![0.0; numbers.len()]\n    } else {\n        numbers.iter().map(|num| (*num - min_num) / (max_num - min_num)).collect()\n    }\n}\n",
            "pub fn filter_integers(values: &Vec<Box<dyn Any>>) -> Vec<i32> {\n    values.iter().filter_map(|x| x.downcast_ref::<i32>()).collect()\n}\n",
            "pub fn str_length(s: &String) -> i32 {\n    s.len() as i32\n}\n",
            "pub fn largest_divisor(n: i32) -> i32 {\n    for i in 2..n {\n        if n % i == 0 {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "pub fn factorize(n: i32) -> Vec<i32> {\n    let mut factors = vec![];\n    let mut divisor = 2;\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    factors\n}\n",
            "pub fn remove_duplicates(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut counts = HashMap::new();\n    for num in numbers {\n        *counts.entry(*num).or_insert(0) += 1;\n    }\n    let mut res = Vec::new();\n    for num in numbers {\n        if *counts.get(num).unwrap() == 1 {\n            res.push(*num);\n        }\n    }\n    res\n}\n",
            "pub fn flip_case(s: &String) -> String {\n    s.chars().map(|ch| if ch.is_ascii_alphabetic() {\n        if ch.is_ascii_lowercase() { ch.to_ascii_uppercase() } else { ch.to_ascii_lowercase() }\n    } else { ch }).collect()\n}\n",
            "pub fn concatenate(strs: &Vec<String>) -> String {\n    strs.join(\"\")\n}\n",
            "pub fn filter_by_prefix(strs: &Vec<String>, prefix_str: &String) -> Vec<String> {\n    strs.iter().filter(|s| s.starts_with(prefix_str)).cloned().collect()\n}\n",
            "pub fn get_positive(l: &Vec<i32>) -> Vec<i32> {\n    l.iter().filter(|&num| *num > 0).cloned().collect()\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..(n as f64).sqrt() as i32 + 1 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn poly(xs: &Vec<i32>, x: f64) -> f64 {\n    let mut res = 0.0;\n    for i in 0..xs.len() {\n        res += xs[i] as f64 * x.powi(i as i32);\n    }\n    res\n}\npub fn find_zero(xs: &Vec<i32>) -> f64 {\n    let mut x1 = 1.0;\n    let mut x2 = -1.0;\n    while poly(xs, x1) * poly(xs, x2) > 0.0 {\n        x1 *= 2.0;\n        x2 *= 2.0;\n    }\n    while (x1 - x2).abs() > 1e-10 {\n        let mid = (x1 + x2) / 2.0;\n        if poly(xs, mid) == 0.0 {\n            return mid;\n        } else if poly(xs, mid) * poly(xs, x1) < 0.0 {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    (x1 + x2) / 2.0\n}\n",
            "pub fn sort_third(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_third = l[::3].to_vec();\n    sorted_third.sort();\n    let mut result = Vec::new();\n    for i in 0..l.len() {\n        if i % 3 == 0 {\n            result.push(sorted_third[i // 3]);\n        } else {\n            result.push(l[i]);\n        }\n    }\n    result\n}\n",
            "pub fn list_unique(l: &Vec<i32>) -> Vec<i32> {\n    l.iter().cloned().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<Vec<i32>>().into_iter().collect::<",
            "pub fn max_element(l: &Vec<i32>) -> i32 {\n    l.iter().max().unwrap_or(&0)\n}\n",
            "pub fn fizz_buzz(n: i32) -> i32 {\n    let mut cnt = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += i.to_string().matches(\"7\").count() as i32;\n        }\n    }\n    cnt\n}\n",
            "pub fn sort_even(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_even = l[::2].to_vec();\n    sorted_even.sort();\n    let mut result = Vec::new();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n            result.push(sorted_even[i // 2]);\n        } else {\n            result.push(l[i]);\n        }\n    }\n    result\n}\n",
            "pub fn encode_cyclic(s: &String) -> String {\n    let mut result = String::new();\n    let mut i = 0;\n    while i < s.len() {\n        result.push_str(&s[i..i+3]);\n        i += 3;\n        if i < s.len() {\n            result.push(s[i]);\n        }\n    }\n    result\n}\npub fn decode_cyclic(s: &String) -> String {\n    encode_cyclic(encode_cyclic(s))\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..(n as f64).sqrt() as i32 + 1 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn prime_fib(n: i32) -> i32 {\n    let mut f = vec![0, 1];\n    let mut cnt = 0;\n    while cnt < n {\n        f = vec![f[1], f[0] + f[1]];\n        if is_prime(f[1]) {\n            cnt += 1;\n        }\n    }\n    f[1]\n}\n",
            "pub fn triples_sum_to_zero(l: &Vec<i32>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len() {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true;\n                }\n            }\n        }\n    }\n    false\n}\n",
            "pub fn car_race_collision(n: i32) -> i32 {\n    n * n\n}\n",
            "pub fn incr_list(l: &Vec<i32>) -> Vec<i32> {\n    l.iter().map(|i| i + 1).collect()\n}\n",
            "pub fn pairs_sum_to_zero(l: &Vec<i32>) -> bool {\n    let mut seen = HashSet::new();\n    for num in l {\n        if seen.contains(&-num) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    false\n}\n",
            "pub fn change_base(x: i32, bas: i32) -> String {\n    let mut digits = vec![];\n    while x > 0 {\n        digits.push(x % bas);\n        x /= bas;\n    }\n    digits.iter().rev().map(|&d| d.to_string()).collect()\n}\n",
            "pub fn triangle_area(a: i32, h: i32) -> f64 {\n    a as f64 * h as f64 / 2.0\n}\n",
            "pub fn fib4(n: i32) -> i32 {\n    let mut fib = vec![0, 0, 2, 0];\n    for i in 4..=n {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n    }\n    fib[n % 4]\n}\n",
            "pub fn median(l: &Vec<f64>) -> f64 {\n    let sl = l.clone();\n    sl.sort();\n    if l.len() % 2!= 0 {\n        sl[l.len() / 2]\n    } else {\n        (sl[l.len() / 2] + sl[l.len() / 2 - 1]) / 2.0\n    }\n}\n",
            "pub fn is_palindrome(txt: &String) -> bool {\n    txt == txt.chars().rev().collect::<String>()\n}\n",
            "pub fn modp(n: i32, p: i32) -> i32 {\n    let mut ret = 1;\n    for _ in 0..n {\n        ret = (ret * 2) % p;\n    }\n    ret\n}\n",
            "pub fn encode_shift(s: &String) -> String {\n    s.chars().map(|ch| {\n        let ord = ch as u8;\n        let new_ord = (ord - 97 + 5) % 26 + 97;\n        new_ord as char\n    }).collect()\n}\npub fn decode_shift(s: &String) -> String {\n    s.chars().map(|ch| {\n        let ord = ch as u8;\n        let new_ord = (ord - 97 + 21) % 26 + 97;\n        new_ord as char\n    }).collect()\n}\n",
            "pub fn remove_vowels(txt: &String) -> String {\n    txt.chars().filter(|c|!c.is_ascii_vowel()).collect()\n}\n",
            "pub fn below_threshold(l: &Vec<i32>, t: i32) -> bool {\n    l.iter().all(|x| *x < t)\n}\n",
            "pub fn add(x: i32, y: i32) -> i32 {\n    x + y\n}\n",
            "pub fn same_chars(s0: &String, s1: &String) -> bool {\n    s0.chars().eq(s1.chars())\n}\n",
            "pub fn fib(n: i32) -> i32 {\n    if n <= 1 {\n        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n}\n",
            "pub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '<' {\n            depth += 1;\n        } else if b == '>' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn monotonic(l: &Vec<i32>) -> bool {\n    l.windows(2).all(|w| w[0] <= w[1])\n}\n",
            "pub fn common(l1: &Vec<i32>, l2: &Vec<i32>) -> Vec<i32> {\n    l1.iter().filter(|x| l2.contains(x)).cloned().collect()\n}\n",
            "pub fn largest_prime_factor(n: i32) -> i32 {\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    n\n}\n",
            "pub fn sum_to_n(n: i32) -> i32 {\n    (1..=n).sum()\n}\n",
            "pub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '(' {\n            depth += 1;\n        } else if b == ')' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn derivative(xs: &Vec<i32>) -> Vec<i32> {\n    xs.iter().enumerate().map(|(i, x)| x * i as i32).collect()\n}\n",
            "pub fn fibfib(n: i32) -> i32 {\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    while n > 2 {\n        a = b;\n        b = c;\n        c = a + b;\n        n -= 1\n    }\n    c\n}\n",
            "pub fn vowels_count(s: &String) -> i32 {\n    let mut cnt = 0;\n    for c in s.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && s.len() == 1) {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n",
            "pub fn circular_shift(x: i32, shift: i32) -> String {\n    let x_str = x.to_string();\n    if shift > x_str.len() {\n        x_str.chars().rev().collect()\n    } else {\n        x_str[x_str.len() - shift..].to_string() + &x_str[..x_str.len() - shift]\n    }\n}\n",
            "pub fn digit_sum(s: &String) -> i32 {\n    s.chars().filter(|c| c.is_uppercase()).map(|c| c as i32).sum()\n}\n",
            "pub fn fruit_distribution(s: &String, n: i32) -> i32 {\n    let words = s.split(' ');\n    let apples = words[words.iter().position(|w| w == \"apples\").unwrap() - 1].parse::<i32>().unwrap();\n    let oranges = words[words.iter().position(|w| w == \"oranges\").unwrap() - 1].parse::<i32>().unwrap();\n    n - apples - oranges\n}\n",
            "pub fn pluck(arr: &Vec<i32>) -> Vec<i32> {\n    let mut evens = vec![];\n    for n in arr {\n        if *n % 2 == 0 {\n            evens.push(*n);\n        }\n    }\n    if evens.len() == 0 {\n        return vec![];\n    }\n    let min_even = evens.iter().min().unwrap();\n    let min_even_index = arr.iter().position(|&x| x == *min_even).unwrap();\n    vec![*min_even, min_even_index as i32]\n}\n",
            "pub fn search(lst: &Vec<i32>) -> i32 {\n    let mut freqs = HashMap::new();\n    for n in lst {\n        *freqs.entry(*n).or_insert(0) += 1;\n    }\n    let mut good_vals = vec![];\n    for (k, v) in freqs {\n        if v >= k {\n            good_vals.push(k);\n        }\n    }\n    good_vals.sort_unstable();\n    good_vals.pop().unwrap_or(-1)\n}\n",
            "pub fn strange_sort_list(lst: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    let mut left = 0;\n    let mut right = lst.len() - 1;\n    while left <= right {\n        result.push(lst[left]);\n        left += 1;\n        if left <= right {\n            result.push(lst[right]);\n            right -= 1;\n        }\n    }\n    result\n}\n",
            "pub fn triangle_area(a: i32, b: i32, c: i32) -> f64 {\n    let s = (a + b + c) as f64 / 2.0;\n    s * s.sqrt() * (s - a).max(0.0).min(s - b).max(0.0).min(s - c).max(0.0)\n}\n",
            "pub fn will_it_fly(q: &Vec<i32>, w: i32) -> bool {\n    let mut total = 0;\n    for i in 0..q.len() {\n        total += q[i];\n        if total > w {\n            return false;\n        }\n    }\n    let mut is_palin = true;\n    for i in 0..q.len() / 2 {\n        if q[i]!= q[q.len() - i - 1] {\n            is_palin = false;\n            break;\n        }\n    }\n    is_palin\n}\n",
            "pub fn smallest_change(arr: &Vec<i32>) -> i32 {\n    let mut ans = 0;\n    for i in 0..(arr.len() / 2) {\n        if arr[i]!= arr[arr.len() - i - 1] {\n            ans += 1;\n        }\n    }\n    ans\n}\n",
            "pub fn total_match(lst1: &Vec<String>, lst2: &Vec<String>) -> Vec<String> {\n    if lst1.len() <= lst2.len() {\n        lst1.clone()\n    } else {\n        lst2.clone()\n    }\n}\n",
            "pub fn is_multiply_prime(a: i32) -> bool {\n    if a < 2 {\n        return false;\n    }\n    let mut cnt = 0;\n    for i in 2..=a.sqrt() as i32 {\n        if a % i == 0 {\n            cnt += 1;\n            a /= i;\n        }\n    }\n    cnt == 3\n}\n",
            "pub fn is_simple_power(x: i32, n: i32) -> bool {\n    if n < 2 {\n        return x == n;\n    }\n    let mut tmp = 1;\n    while tmp < x {\n        tmp *= n;\n    }\n    tmp == x\n}\n",
            "pub fn is_cube(a: i32) -> bool {\n    a.abs() == a * a * a\n}\n",
            "pub fn hex_key(num: &String) -> i32 {\n    num.chars().filter(|x| \"2357BD\".contains(x)).count() as i32\n}\n",
            "pub fn decimal_to_binary(dec: i32) -> String {\n    format!(\"db{}db\", dec.to_string().replace(\"b\", \"\"))\n}\n",
            "pub fn is_happy(s: &String) -> bool {\n    let mut seen = HashSet::new();\n    let mut current = s.clone();\n    loop {\n        if seen.contains(&current) {\n            return false;\n        }\n        seen.insert(current.clone());\n        let mut sum = 0;\n        for c in current.chars() {\n            sum += c.to_digit(10).unwrap();\n        }\n        current = format!(\"{}\", sum);\n        if current == \"1\" {\n            return true;\n        }\n    }\n}\n",
            "pub fn numerical_letter_grade(grades: &Vec<f64>) -> Vec<String> {\n    let mut result = Vec::new();\n    for g in grades {\n        if *g == 4.0 {\n            result.push(\"A+\".to_string());\n        } else if *g > 3.7 {\n            result.push(\"A\".to_string());\n        } else if *g > 3.3 {\n            result.push(\"A-\".to_string());\n        } else if *g > 3.0 {\n            result.push(\"B+\".to_string());\n        } else if *g > 2.7 {\n            result.push(\"B\".to_string());\n        } else if *g > 2.3 {\n            result.push(\"B-\".to_string());\n        } else if *g > 2.0 {\n            result.push(\"C+\".to_string());\n        } else if *g > 1.7 {\n            result.push(\"C\".to_string());\n        } else if *g > 1.3 {\n            result.push(\"C-\".to_string());\n        } else if *g > 1.0 {\n            result.push(\"D+\".to_string());\n        } else if *g > 0.7 {\n            result.push(\"D\".to_string());\n        } else if *g > 0.0 {\n            result.push(\"D-\".to_string());\n        } else {\n            result.push(\"E\".to_string());\n        }\n    }\n    result\n}\n",
            "pub fn prime_length(s: &String) -> bool {\n    let length = s.len();\n    if length < 2 {\n        return false;\n    }\n    for i in 2..(length as f64).sqrt() as usize + 1 {\n        if length % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn starts_one_ends(n: i32) -> i32 {\n    if n == 1 { 1 } else { 2 * 9 * (10i32.pow(n - 2)) }\n}\n",
            "pub fn solve(n: i32) -> String {\n    format!(\"{:b}\", n)\n}\n",
            "pub fn add(lst: &Vec<i32>) -> i32 {\n    lst.iter().enumerate().filter(|(_, x)| i % 2 == 1 && x % 2 == 0).map(|(_, x)| x).sum()\n}\n",
            "pub fn anti_shuffle(s: &String) -> String {\n    let words: Vec<&str> = s.split(\" \").collect();\n    let mut result = String::new();\n    for word in words {\n        result.push_str(word.chars().sorted().collect::<String>().as_str());\n        result.push(' ');\n    }\n    result.pop();\n    result\n}\n",
            "pub fn get_row(lst: &Vec<Vec<i32>>, x: i32) -> Vec<Vec<i32>> {\n    let mut result = vec![];\n    for i in 0..lst.len() {\n        let mut row = vec![];\n        for j in 0..lst[i].len() {\n            if lst[i][j] == x {\n                row.push(vec![i, j]);\n            }\n        }\n        result.push(row);\n    }\n    result.sort_by(|a, b| {\n        if a.len() == b.len() {\n            a[0].cmp(&b[0])\n        } else {\n            a.len().cmp(&b.len())\n        }\n    });\n    result\n}\n",
            "pub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    if arr.is_empty() {\n        return vec![];\n    }\n    if (arr[0] + arr[arr.len() - 1]) % 2 == 0 {\n        arr.iter().rev().cloned().collect()\n    } else {\n        arr.iter().cloned().collect()\n    }\n}\n",
            "pub fn encrypt(s: &String) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        let shifted = ch as u8 + 4;\n        if shifted > 122 {\n            shifted -= 26;\n        }\n        result.push(shifted as char);\n    }\n    result\n}\n",
            "pub fn next_smallest(lst: &Vec<i32>) -> Option<i32> {\n    if lst.len() < 2 {\n        return None;\n    }\n    let mut sl = lst.clone();\n    sl.sort();\n    sl.dedup();\n    if sl.len() < 2 {\n        return None;\n    }\n    Some(sl[1])\n}\n",
            "pub fn is_bored(s: &String) -> i32 {\n    let re = Regex::new(r\"[.!?]\\s*\").unwrap();\n    let sentences = re.split(s);\n    sentences.iter().filter(|sentence| sentence.starts_with(\"I \")).count() as i32\n}\n",
            "pub fn any_int(x: &Box<dyn Any>, y: &Box<dyn Any>, z: &Box<dyn Any>) -> bool {\n    if let (Some(x), Some(y), Some(z)) = (x.downcast_ref::<i32>(), y.downcast_ref::<i32>(), z.downcast_ref::<i32>()) {\n        if (x + y == z) || (x + z == y) || (y + z == x) {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn encode(message: &String) -> String {\n    let mut result = String::new();\n    for ch in message.chars() {\n        if ch.is_ascii_alphabetic() {\n            let mut ch1 = ch.to_ascii_uppercase();\n            if ch.is_ascii_lowercase() {\n                ch1 = ch1.to_ascii_uppercase();\n            }\n            if ch1.is_ascii_alphabetic() {\n                ch1 = ch1.to_ascii_uppercase();\n                ch1 = ch1.to_ascii_uppercase();\n            }\n            result.push(ch1);\n        } else {\n            result.push(ch);\n        }\n    }\n    result\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..(n as f64).sqrt() as i32 + 1 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn skjkasdkd(lst: &Vec<i32>) -> i32 {\n    let mut primes = Vec::new();\n    for n in lst {\n        if is_prime(*n) {\n            primes.push(*n);\n        }\n    }\n    if primes.len() == 0 {\n        return 0;\n    }\n    let largest = primes.iter().max().unwrap().to_string();\n    let mut sum = 0;\n    for digit in largest.chars() {\n        sum += digit.to_digit(10).unwrap();\n    }\n    sum\n}\n",
            "pub fn check_dict_case(d: &HashMap<String,String>) -> bool {\n    d.keys().all(|k| k.chars().all(|c| c.is_lowercase()) || k.chars().all(|c| c.is_uppercase()))\n}\n",
            "pub fn count_up_to(n: i32) -> Vec<i32> {\n    let mut primes = vec![];\n    for num in 2..n {\n        if primes.iter().all(|p| num % p!= 0) {\n            primes.push(num);\n        }\n    }\n    primes\n}\n",
            "pub fn multiply(a: i32, b: i32) -> i32 {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n",
            "pub fn count_upper(s: &String) -> i32 {\n    s.chars().enumerate().filter(|(_, c)| c.is_uppercase()).count() as i32\n}\n",
            "pub fn closest_integer(value: &String) -> i32 {\n    let num = value.parse::<f64>().unwrap();\n    if num >= 0.0 {\n        num.ceil() as i32\n    } else {\n        num.floor() as i32\n    }\n}\n",
            "pub fn make_a_pile(n: i32) -> Vec<i32> {\n    (0..n).map(|i| n + 2 * i).collect()\n}\n",
            "pub fn words_string(s: &String) -> Vec<String> {\n    s.split(r\"[, ]\").filter(|w| w.len() > 0).map(|w| w.to_string()).collect()\n}\n",
            "pub fn choose_num(x: i32, y: i32) -> i32 {\n    if x > y {\n        return -1;\n    }\n    if y % 2 == 0 {\n        return y;\n    }\n    return y - 1 if x!= y else -1;\n}\n",
            "pub fn rounded_avg(n: i32, m: i32) -> Option<String> {\n    if n > m {\n        return None;\n    }\n    let r_avg = (m + n) / 2 + 0.5;\n    Some(format!(\"{:b}\", r_avg))\n}\n",
            "pub fn unique_digits(x: &Vec<i32>) -> Vec<i32> {\n    x.iter().filter(|&num| num.to_string().chars().all(|digit| digit % 2!= 0)).copied().collect()\n}\n",
            "pub fn by_length(arr: &Vec<i32>) -> Vec<String> {\n    let mut sorted_arr = arr.iter().filter(|x| 1 <= *x && *x <= 9).cloned().collect::<Vec<i32>>();\n    sorted_arr.sort_by(|a, b| b.cmp(a));\n    let mut digit_names = vec![];\n    for x in sorted_arr {\n        digit_names.push(format!(\"{:?}\", x));\n    }\n    digit_names\n}\n",
            "pub fn f(n: i32) -> Vec<i32> {\n    let mut nums = (1..=n).collect::<Vec<i32>>();\n    nums.iter_mut().enumerate().for_each(|(i, x)| {\n        if i % 2!= 0 {\n            *x = nums[..i].iter().sum();\n        } else {\n            *x = nums[..i].iter().product();\n        }\n    });\n    nums\n}\n",
            "pub fn is_palindrome(txt: &str) -> bool {\n    txt == txt.chars().rev().collect::<String>()\n}\npub fn even_odd_palindrome(n: i32) -> Vec<i32> {\n    let mut cnt = vec![0; 2];\n    for i in 1..=n {\n        if is_palindrome(&i.to_string()) {\n            cnt[i % 2] += 1;\n        }\n    }\n    cnt\n}\n",
            "pub fn digits_sum(n: i32) -> i32 {\n    let n_str = n.to_string();\n    if n >= 0 {\n        n_str.chars().map(|d| d.to_digit(10).unwrap()).sum()\n    } else {\n        let n_str = n_str.chars().rev().collect::<String>();\n        let n_str = n_str.chars().take(2).collect::<String>();\n        n_str.parse::<i32>().unwrap() * 2 + digits_sum(n.abs())\n    }\n}\npub fn count_nums(arr: &Vec<i32>) -> i32 {\n    arr.iter().filter(|n| digits_sum(*n) > 0).count() as i32\n}\n",
            "pub fn move_one_ball(arr: &Vec<i32>) -> bool {\n    if arr.is_empty() {\n        return true;\n    }\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort();\n    for i in 0..arr.len() {\n        if arr[i..].eq(&sorted_arr[..arr.len() - i]) && arr[..i].eq(&sorted_arr[arr.len() - i..]) {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn can_exchange(lst1: &Vec<i32>, lst2: &Vec<i32>) -> String {\n    if lst1.iter().filter(|&x| x % 2!= 0).count() >= lst2.iter().filter(|&x| x % 2 == 0).count() {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}\n",
            "pub fn histogram(test: &String) -> HashMap<String,i32> {\n    let mut freq = HashMap::new();\n    let words = test.split_whitespace().collect::<Vec<&str>>();\n    for w in words {\n        freq.entry(w.to_string()).and_modify(|e| *e += 1).or_insert(1);\n    }\n    let mut result = HashMap::new();\n    if freq.len() > 0 {\n        let max_freq = freq.values().max().unwrap();\n        for (k, v) in freq {\n            if v == *max_freq {\n                result.insert(k, v);\n            }\n        }\n    }\n    result\n}\n",
            "pub fn reverse_delete(s: &String, c: &String) -> Vec<String> {\n    let s1 = s.chars().filter(|ch|!c.contains(ch)).collect::<String>();\n    vec![s1, if s1 == s1.chars().rev().collect::<String>() { \"yes\" } else { \"no\" }]\n}\n",
            "pub fn odd_count(lst: &Vec<String>) -> Vec<String> {\n    lst.iter().map(|s| {\n        let mut n = 0;\n        for d in s.chars() {\n            if d.is_digit(10) {\n                n += d.to_digit(10).unwrap() % 2 == 1;\n            }\n        }\n        format!(\"the number of odd elements in the string i of the input.\")\n           .replace(\"i\", &n.to_string())\n    }).collect()\n}\n",
            "pub fn min_sub_array_sum(nums: &Vec<i32>) -> i32 {\n    let mut min_sum = 0;\n    let mut cur_sum = 0;\n    for n in nums {\n        cur_sum = cur_sum.saturating_add(*n);\n        min_sum = min(cur_sum, min_sum);\n    }\n    if min_sum == 0 {\n        min_sum = *nums.iter().min().unwrap();\n    }\n    min_sum\n}\n",
            "pub fn max_fill(grid: &Vec<Vec<i32>>, capacity: i32) -> i32 {\n    grid.iter().map(|arr| (arr.iter().sum::<i32>() as f64 / capacity as f64).ceil() as i32).sum()\n}\n",
            "pub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    arr.sort_by(|a, b| {\n        let a_ones = count_ones(*a);\n        let b_ones = count_ones(*b);\n        if a_ones == b_ones {\n            *a.partial_cmp(b).unwrap()\n        } else {\n            b_ones.partial_cmp(&a_ones).unwrap()\n        }\n    });\n    arr.to_vec()\n}\n",
            "pub fn select_words(s: &String, n: i32) -> Vec<String> {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let words = s.split(\" \").filter(|w| w.len() > 0);\n    words.filter(|w| w.chars().filter(|c| c.to_lowercase().is_ascii_alphabetic()).filter(|c| consonants.contains(c)).count() == n as usize).collect()\n}\n",
            "pub fn get_closest_vowel(word: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    for i in (0..word.len() - 2).rev() {\n        if word.chars().nth(i).unwrap() == vowels.chars().nth(0).unwrap()\n            && word.chars().nth(i - 1).unwrap()!= vowels.chars().nth(0).unwrap()\n            && word.chars().nth(i + 1).unwrap()!= vowels.chars().nth(0).unwrap()\n        {\n            return word.chars().nth(i).unwrap().to_string();\n        }\n    }\n    \"\".to_string()\n}\n",
            "pub fn match_parens(lst: &Vec<String>) -> String {\n    let s1 = lst[0].clone() + lst[1].clone();\n    let s2 = lst[1].clone() + lst[0].clone();\n    if check(&s1) || check(&s2) {\n        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n    }\n}\nfn check(s: &str) -> bool {\n    let mut depth = 0;\n    for ch in s.chars() {\n        if ch == '(' {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    return true if depth == 0 else false;\n}\n",
            "pub fn maximum(arr: &Vec<i32>, k: i32) -> Vec<i32> {\n    arr.iter().rev().take(k as usize).cloned().collect()\n}\n",
            "pub fn solution(lst: &Vec<i32>) -> i32 {\n    lst.iter().enumerate().filter(|(_, x)| i % 2 == 0 && x % 2!= 0).map(|(i, x)| x).sum()\n}\n",
            "pub fn add_elements(arr: &Vec<i32>, k: i32) -> i32 {\n    let mut sum = 0;\n    for n in &arr[..k] {\n        if n.to_string().len() <= 2 {\n            sum += n;\n        }\n    }\n    sum\n}\n",
            "pub fn get_odd_collatz(n: i32) -> Vec<i32> {\n    let mut collatz = vec![1];\n    while n!= 1 {\n        if n % 2!= 0 {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    collatz.sort();\n    collatz\n}\n",
            "pub fn valid_date(date: &String) -> bool {\n    if date.len()!= 10 || date.chars().nth(2).unwrap()!= '-' || date.chars().nth(5).unwrap()!= '-' {\n        return false;\n    }\n    let m = date.chars().take(2).collect::<String>().parse::<i32>().unwrap();\n    let d = date.chars().skip(3).take(2).collect::<String>().parse::<i32>().unwrap();\n    if m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31 {\n        return true;\n    }\n    if m in [4, 6, 9, 11] && d >= 1 && d <= 30 {\n        return true;\n    }\n    if m == 2 && d >= 1 && d <= 29 {\n        return true;\n    }\n    return false;\n}\n",
            "pub fn split_words(txt: &String) -> Vec<String> {\n    if txt.contains(\" \") {\n        txt.split(\" \").map(|s| s.to_string()).collect()\n    } else if txt.contains(\",\") {\n        txt.split(\",\").map(|s| s.to_string()).collect()\n    } else {\n        vec![txt.chars().filter(|c| c.is_lowercase() && c.to_digit(10).unwrap() % 2 == 0).count().to_string()]\n    }\n}\n",
            "pub fn is_sorted(lst: &Vec<i32>) -> bool {\n    let mut prev = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] < prev {\n            return false;\n        }\n        prev = lst[i];\n    }\n    true\n}\n",
            "pub fn intersection(interval1: &Vec<i32>, interval2: &Vec<i32>) -> String {\n    let l = interval1[0].max(interval2[0]);\n    let r = interval1[1].min(interval2[1]);\n    let length = r - l;\n    if length > 0 && is_prime(length) {\n        \"YES\"\n    } else {\n        \"NO\"\n    }\n}\n",
            "pub fn prod_signs(arr: &Vec<i32>) -> Option<i32> {\n    if arr.is_empty() {\n        return None;\n    }\n    let mut sign = 1;\n    for n in arr {\n        if *n < 0 {\n            sign = -sign;\n        }\n    }\n    Some(sign * arr.iter().map(|n| n.abs()).sum())\n}\n",
            "pub fn min_path(grid: &Vec<Vec<i32>>, k: i32) -> Vec<i32> {\n    let n = grid.len();\n    let mut min_val = n * n + 1;\n    for i in 0..n {\n        for j in 0..n {\n            if grid[i][j] == 1 {\n                let mut temp = vec![];\n                if i!= 0 {\n                    temp.push(grid[i - 1][j]);\n                }\n                if j!= 0 {\n                    temp.push(grid[i][j - 1]);\n                }\n                if i!= n - 1 {\n                    temp.push(grid[i + 1][j]);\n                }\n                if j!= n - 1 {\n                    temp.push(grid[i][j + 1]);\n                }\n                min_val = min(temp);\n            }\n        }\n    }\n    let mut result = vec![];\n    for i in 0..k {\n        result.push(1 if i % 2 == 0 else min_val);\n    }\n    result\n}\n",
            "pub fn tri(n: i32) -> Vec<i32> {\n    let mut seq = vec![1, 3];\n    for i in 2..=n {\n        if i % 2 == 0 {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    seq\n}\n",
            "pub fn digits(n: i32) -> i32 {\n    let mut odds = Vec::new();\n    for d in n.to_string().chars() {\n        if d.to_digit(10).unwrap() % 2 == 1 {\n            odds.push(d.to_digit(10).unwrap());\n        }\n    }\n    odds.iter().fold(1, |acc, x| acc * x)\n}\n",
            "pub fn is_nested(s: &String) -> bool {\n    let mut open_idx = Vec::new();\n    let mut close_idx = Vec::new();\n    for (i, ch) in s.chars().enumerate() {\n        if ch == '[' {\n            open_idx.push(i);\n        } else if ch == ']' {\n            close_idx.push(i);\n        }\n    }\n    close_idx.reverse();\n    let mut cnt = 0;\n    let mut i = 0;\n    let l = close_idx.len();\n    for idx in open_idx {\n        if i < l && idx < close_idx[i] {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    cnt >= 2\n}\n",
            "pub fn sum_squares(lst: &Vec<f64>) -> i32 {\n    lst.iter().map(|n| (n.ceil() as i32).pow(2)).sum()\n}\n",
            "pub fn check_if_last_char_is_a_letter(txt: &String) -> bool {\n    if txt.is_empty() {\n        return false;\n    }\n    let last = &txt[txt.rfind(' ') + 1..];\n    last.len() == 1 && last.chars().next().unwrap().is_alphabetic()\n}\n",
            "pub fn can_arrange(arr: &Vec<i32>) -> i32 {\n    let mut idx = vec![];\n    for i in 1..arr.len() {\n        if arr[i] < arr[i - 1] {\n            idx.push(i);\n        }\n    }\n    idx.pop().unwrap_or(-1)\n}\n",
            "pub fn largest_smallest_integers(lst: &Vec<i32>) -> Vec<Option<i32>> {\n    let mut neg = Vec::new();\n    let mut pos = Vec::new();\n    for i in lst {\n        if i < 0 {\n            neg.push(*i);\n        } else {\n            pos.push(*i);\n        }\n    }\n    let max_neg = neg.iter().max().cloned();\n    let min_pos = pos.iter().min().cloned();\n    vec![max_neg, min_pos]\n}\n",
            "pub fn compare_one(a: &Box<dyn Any>, b: &Box<dyn Any>) -> Option<f64> {\n    if let (Some(a), Some(b)) = (a.downcast_ref::<f64>(), b.downcast_ref::<f64>()) {\n        if a == b {\n            return None;\n        }\n        if a > b {\n            return Some(*a);\n        }\n        return Some(*b);\n    }\n    if let (Some(a), Some(b)) = (a.downcast_ref::<i32>(), b.downcast_ref::<i32>()) {\n        return Some(*a as f64);\n    }\n    if let (Some(a), Some(b)) = (a.downcast_ref::<String>(), b.downcast_ref::<String>()) {\n        return Some(a.replace(',', '.').parse::<f64>().unwrap());\n    }\n    panic!(\"Type Error\");\n}\n",
            "pub fn is_equal_to_sum_even(n: i32) -> bool {\n    n % 2 == 0 && n >= 8\n}\n",
            "pub fn special_factorial(n: i32) -> i32 {\n    let mut fact = 1;\n    let mut result = 1;\n    for i in 1..=n {\n        fact *= i;\n        result *= fact;\n    }\n    result\n}\n",
            "pub fn fix_spaces(txt: &String) -> String {\n    txt.replace(\"  \", \" \").replace(\" \", \"_\")\n}\n",
            "pub fn file_name_check(file_name: &String) -> String {\n    let lst = file_name.split(\".\");\n    if lst.len()!= 2 ||!lst[1].ends_with(\"txt\") ||!lst[1].ends_with(\"exe\") ||!lst[1].ends_with(\"dll\") {\n        return \"No\".to_string();\n    }\n    if lst[0].len() == 0 ||!lst[0].chars().next().unwrap().is_alphabetic() || lst[0].chars().filter(|x| x.is_numeric()).count() > 3 {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()\n}\n",
            "pub fn sum_squares(lst: &Vec<i32>) -> i32 {\n    lst.iter().enumerate().fold(0, |acc, (i, &e)| {\n        if i % 3 == 0 { acc + e * e }\n        else if i % 4 == 0 { acc + e * e * e }\n        else { acc + e }\n    })\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..(n as f64).sqrt() as i32 + 1 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn words_in_sentence(sentence: &String) -> String {\n    let words = sentence.split(\" \");\n    words.iter().filter(|w| is_prime(w.len() as i32)).collect::<Vec<&str>>().join(\" \")\n}\n",
            "pub fn simplify(x: &String, n: &String) -> bool {\n    let xs = x.split(\"/\");\n    let ns = n.split(\"/\");\n    let num = xs[0].parse::<i32>().unwrap() * ns[0].parse::<i32>().unwrap();\n    let den = xs[1].parse::<i32>().unwrap() * ns[1].parse::<i32>().unwrap();\n    num % den == 0\n}\n",
            "pub fn digits_sum(n: i32) -> i32 {\n    let n_str = n.to_string();\n    if n >= 0 {\n        n_str.chars().map(|d| d.to_digit(10).unwrap()).sum()\n    } else {\n        let n_str = n_str.chars().rev().collect::<String>();\n        let mut n_str = n_str.chars().map(|d| d.to_digit(10).unwrap()).collect::<Vec<i32>>();\n        n_str[0] * 2 + digits_sum(n_str[1..].iter().sum::<i32>())\n    }\n}\npub fn order_by_points(nums: &Vec<i32>) -> Vec<i32> {\n    nums.iter().map(|n| digits_sum(*n)).collect()\n}\n",
            "pub fn special_filter(nums: &Vec<i32>) -> i32 {\n    let mut result = 0;\n    for n in nums {\n        if *n > 10 && *n % 2 == 1 && n.to_string().chars().nth(0).unwrap() == '1' || n.to_string().chars().nth(0).unwrap() == '3' || n.to_string().chars().nth(0).unwrap() == '5' || n.to_string().chars().nth(0).unwrap() == '7' || n.to_string().chars().nth(0).unwrap() == '9' {\n            result += 1;\n        }\n    }\n    result\n}\n",
            "pub fn get_max_triples(n: i32) -> i32 {\n    let mut c = [0, 0, 0];\n    for i in 1..=n {\n        let a = i * i - i + 1;\n        c[(a % 3) as usize] += 1;\n    }\n    c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n}\n",
            "pub fn bf(planet1: &String, planet2: &String) -> Vec<String> {\n    let names = vec![\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    ];\n    if!names.contains(planet1) ||!names.contains(planet2) {\n        return vec![];\n    }\n    let l = names.iter().position(|&x| x == *planet1).unwrap();\n    let r = names.iter().position(|&x| x == *planet2).unwrap();\n    if l > r {\n        l, r = r, l;\n    }\n    if l == r {\n        return vec![];\n    }\n    names[l + 1..r].to_vec()\n}\n",
            "pub fn sorted_list_sum(lst: &Vec<String>) -> Vec<String> {\n    lst.iter()\n       .filter(|s| s.len() % 2 == 0)\n       .sorted_by(|a, b| (a.len(), a.as_str()).cmp(&(b.len(), b.as_str())))\n       .cloned()\n       .collect()\n}\n",
            "pub fn x_or_y(n: i32, x: i32, y: i32) -> i32 {\n    if n < 2 {\n        return y;\n    }\n    for i in 2..(n as f64).sqrt() as i32 + 1 {\n        if n % i == 0 {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "pub fn double_the_difference(lst: &Vec<f64>) -> i32 {\n    lst.iter().filter(|n| *n >= 0 && *n % 2 == 1).map(|n| n * n).sum()\n}\n",
            "pub fn compare(game: &Vec<i32>, guess: &Vec<i32>) -> Vec<i32> {\n    game.iter().zip(guess).map(|(x, y)| (x - y).abs()).collect()\n}\n",
            "pub fn strongest_extension(class_name: &String, extensions: &Vec<String>) -> String {\n    let mut max_s = -1;\n    let mut max_ext = \"\";\n    for ext in extensions {\n        let upper = ext.chars().filter(|c| c.is_uppercase()).count();\n        let lower = ext.chars().filter(|c| c.is_lowercase()).count();\n        let s = upper - lower;\n        if s > max_s {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    format!(\"{}.{}\", class_name, max_ext)\n}\n",
            "pub fn cycpattern_check(a: &String, b: &String) -> bool {\n    if a.len() < b.len() {\n        return false;\n    }\n    for i in 0..b.len() {\n        if a.ends_with(&b[i..]) || a.starts_with(&b[i..]) {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn even_odd_count(num: i32) -> Vec<i32> {\n    let ds = num.to_string().chars().collect::<Vec<char>>();\n    let mut even = 0;\n    for d in ds {\n        if d % 2 == 0 {\n            even += 1;\n        }\n    }\n    vec![even, ds.len() - even]\n}\n",
            "pub fn int_to_mini_roman(num: i32) -> String {\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let mut res = String::new();\n    for i in 0..values.len() {\n        while num >= values[i] {\n            res.push_str(&numerals[i]);\n            num -= values[i];\n        }\n    }\n    res\n}\n",
            "pub fn right_angle_triangle(a: i32, b: i32, c: i32) -> bool {\n    let s = [a, b, c].iter().copied().sorted();\n    s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "pub fn find_max(words: &Vec<String>) -> String {\n    let mut max_cnt = 0;\n    let mut max_w = \"\";\n    for w in words {\n        let cnt = w.chars().collect::<HashSet<char>>().len();\n        if cnt > max_cnt {\n            max_cnt = cnt;\n            max_w = w;\n        } else if cnt == max_cnt {\n            max_w = max_w.chars().zip(w.chars()).fold(String::new(), |mut acc, (c1, c2)| {\n                if c1 > c2 { acc.push(c1); }\n                else { acc.push(c2); }\n                acc\n            });\n        }\n    }\n    max_w\n}\n",
            "pub fn eat(num: i32, need: i32, remaining: i32) -> Vec<i32> {\n    if need <= remaining {\n        vec![num + need, remaining - need]\n    } else {\n        vec![num + remaining, 0]\n    }\n}\n",
            "pub fn do_algebra(operators: &Vec<String>, operands: &Vec<i32>) -> i32 {\n    let mut ops = operators.clone();\n    let mut nums = operands.clone();\n    let mut i = ops.len() - 1;\n    while i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = nums[i].pow(nums[i + 1]);\n            nums.pop(i + 1);\n            ops.pop(i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while i < ops.len() {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while i < ops.len() {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    nums[0]\n}\n",
            "pub fn solve(s: &String) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        if ch.is_ascii_alphabetic() {\n            result.push(if ch.is_uppercase() { ch.to_ascii_lowercase() } else { ch.to_ascii_uppercase() });\n        } else {\n            result.push(ch);\n        }\n    }\n    result\n}\n",
            "pub fn string_to_md5(txt: &String) -> Option<String> {\n    let mut hasher = Md5Hasher::new();\n    hasher.write(txt.as_bytes());\n    let hash = hasher.finish();\n    let mut result = String::new();\n    for byte in hash.iter() {\n        write!(result, \"{:02x}\", byte).unwrap();\n    }\n    Some(result)\n}\nstruct Md5Hasher {\n    hash: u64,\n}\nimpl Md5Hasher {\n    fn new() -> Md5Hasher {\n        Md5Hasher { hash: 0 }\n    }\n    fn write(&mut self, bytes: &[u8]) {\n        for byte in bytes {\n            self.hash = self.hash.wrapping_add(*byte as u64);\n            self.hash = self.hash.rotate_left(7);\n            self.hash = self.hash.wrapping_add(self.hash << 3);\n            self.hash = self.hash.wrapping_add(self.hash >> 11);\n        }\n    }\n    fn finish(&self) -> [u8; 16] {\n        let mut result = [0; 16];\n        for i in 0..8 {\n            result[i] = (self.hash >> (56 - i * 8)) as u8;\n        }\n        result\n    }\n}\n",
            "pub fn generate_integers(a: i32, b: i32) -> Vec<i32> {\n    let lower = max(2, min(a, b));\n    let upper = min(8, max(a, b));\n    (lower..=upper).filter(|&i| i % 2 == 0).collect()\n}\n"
        ],
        "scala": [
            "def hasCloseElements(numbers: Seq[Double], threshold: Double): Boolean = {\n    for (i <- numbers.indices) {\n        for (j <- i + 1 until numbers.length) {\n            if (math.abs(numbers(i) - numbers(j)) < threshold) {\n                return true\n            }\n        }\n    }\n    false\n}\n",
            "def separateParenGroups(parenString: String): Seq[String] = {\n    val groups = mutable.ListBuffer[String]()\n    val stk = mutable.Stack[Char]()\n    var currentGroup = \"\"\n    val parens = parenString.replace(\" \", \"\")\n    for (ch <- parens) {\n        if (ch == \"(\") {\n            stk.push(ch)\n            currentGroup += ch\n        } else if (ch == \")\") {\n            stk.pop()\n            currentGroup += ch\n            if (stk.isEmpty) {\n                groups += currentGroup\n                currentGroup = \"\"\n            }\n        }\n    }\n    groups.toList\n}\n",
            "def truncateNumber(num: Double): Double = {\n    math.floor(num)\n}\n",
            "def belowZero(operations: Seq[Int]): Boolean = {\n    var balance = 0\n    for (op <- operations) {\n        balance += op\n        if (balance < 0) {\n            return true\n        }\n    }\n    false\n}\n",
            "def meanAbsoluteDeviation(numbers: Seq[Double]): Double = {\n    val mean = numbers.sum / numbers.length\n    numbers.map(x => math.abs(x - mean)).sum / numbers.length\n}\n",
            "def intersperse(numbers: Seq[Int], delimiter: Int): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    for (i <- numbers.indices) {\n        if (i!= 0) {\n            result += delimiter\n        }\n        result += numbers(i)\n    }\n    result.toList\n}\n",
            "def parseNestedParens(parenString: String): Seq[Int] = {\n    val parenGroups = parenString.split(\" \")\n    val result = mutable.ListBuffer[Int]()\n    for group <- parenGroups {\n        val maxDepth = mutable.Stack[Int]()\n        for ch <- group {\n            if (ch == \"(\") {\n                maxDepth.push(maxDepth.topOption.getOrElse(0) + 1)\n            } else {\n                maxDepth.pop()\n            }\n        }\n        result.addOne(maxDepth.topOption.getOrElse(0))\n    }\n    result.toList\n}\n",
            "def filterBySubstring(strs: Seq[String], substring: String): Seq[String] = {\n    strs.filter(s => substring.contains(s))\n}\n",
            "def sumProduct(numbers: Seq[Int]): Seq[Int] = {\n    val nSum = numbers.sum\n    val nProduct = numbers.product\n    Seq(nSum, nProduct)\n}\n",
            "def rollingMax(numbers: Seq[Int]): Seq[Int] = {\n    val maxSoFar = mutable.ListBuffer[Int]()\n    var maxSoFarValue = Int.MinValue\n    for (num <- numbers) {\n        maxSoFarValue = math.max(maxSoFarValue, num)\n        maxSoFar += maxSoFarValue\n    }\n    maxSoFar.toList\n}\n",
            "def makePalindrome(s: String): String = {\n    if (isPalindrome(s)) {\n        return s\n    }\n    for (i <- 0 until s.length) {\n        if (isPalindrome(s.substring(i))) {\n            return s + s.substring(0, i).reverse\n        }\n    }\n    \"\"\n}\n",
            "def stringXor(a: String, b: String): String = {\n    a.zip(b).map(x => if (x._1 == x._2) \"0\" else \"1\").mkString\n}\n",
            "def longest(strs: Seq[String]): Option[String] = {\n    if (strs.isEmpty) {\n        None\n    } else {\n        var longest_s = strs.head\n        for (s <- strs) {\n            if (s.length > longest_s.length) {\n                longest_s = s\n            }\n        }\n        Some(longest_s)\n    }\n}\n",
            "def greatestCommonDivisor(a: Int, b: Int): Int = {\n    if (b == 0) a else greatestCommonDivisor(b, a % b)\n}\n",
            "def allPrefixes(s: String): Seq[String] = {\n    val prefixes = mutable.ListBuffer[String]()\n    for (i <- 0 until s.length) {\n        prefixes += s.substring(0, i + 1)\n    }\n    prefixes.toList\n}\n",
            "def stringSequence(n: Int): String = {\n    (1 to n).map(_.toString).mkString(\" \")\n}\n",
            "def countDistinctCharacters(s: String): Int = {\n    s.toLowerCase.toSet.size\n}\n",
            "def parseMusic(musicString: String): Seq[Int] = {\n    musicString.split(\" \").map(note => note match {\n        case \"o\" => 4\n        case \"o|\" => 2\n        case \".|\" => 1\n    })\n}\n",
            "def howManyTimes(s: String, substring: String): Int = {\n    s.sliding(substring.length).count(_.startsWith(substring))\n}\n",
            "def sortNumbers(numbers: String): String = {\n    val numDict = Map(\n        \"zero\" -> 0,\n        \"one\" -> 1,\n        \"two\" -> 2,\n        \"three\" -> 3,\n        \"four\" -> 4,\n        \"five\" -> 5,\n        \"six\" -> 6,\n        \"seven\" -> 7,\n        \"eight\" -> 8,\n        \"nine\" -> 9\n    )\n    val numList = numbers.split(\" \").filter(x => numDict.contains(x)).map(x => numDict(x))\n    numList.sorted.map(x => numDict.find(_._2 == x).get._1).mkString(\" \")\n}\n",
            "def findClosestElements(numbers: Seq[Double]): Seq[Double] = {\n    val sortedNumbers = numbers.sorted\n    val minDiff = Double.PositiveInfinity\n    var closestPair = Seq.empty[Double]\n    for (i <- 1 until sortedNumbers.length) {\n        val diff = sortedNumbers(i) - sortedNumbers(i - 1)\n        if (diff < minDiff) {\n            minDiff = diff\n            closestPair = Seq(sortedNumbers(i - 1), sortedNumbers(i))\n        }\n    }\n    closestPair\n}\n",
            "def rescaleToUnit(numbers: Seq[Double]): Seq[Double] = {\n    val minNum = numbers.min\n    val maxNum = numbers.max\n    if (minNum == maxNum) {\n        Seq.fill(numbers.length)(0.0)\n    } else {\n        numbers.map(num => (num - minNum) / (maxNum - minNum))\n    }\n}\n",
            "def filterIntegers(values: Seq[Any]): Seq[Int] = {\n    values.filter(_.isInstanceOf[Int])\n}\n",
            "def strLength(s: String): Int = {\n    s.length\n}\n",
            "def largestDivisor(n: Int): Int = {\n    var i = 2\n    while (i <= n) {\n        if (n % i == 0) {\n            return n / i\n        }\n        i += 1\n    }\n    1\n}\n",
            "def factorize(n: Int): Seq[Int] = {\n    var factors = mutable.ListBuffer[Int]()\n    var divisor = 2\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors += divisor\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    factors.toList\n}\n",
            "def removeDuplicates(numbers: Seq[Int]): Seq[Int] = {\n    val counts = mutable.Map[Int, Int]()\n    for (num <- numbers) {\n        counts(num) = counts.getOrElse(num, 0) + 1\n    }\n    val res = mutable.ListBuffer[Int]()\n    for (num <- numbers) {\n        if (counts(num) == 1) {\n            res += num\n        }\n    }\n    res.toList\n}\n",
            "def flipCase(s: String): String = {\n    s.map(ch => if (ch.isLetter) if (ch.isLower) ch.toUpper else ch.toLower else ch).mkString\n}\n",
            "def concatenate(strs: Seq[String]): String = {\n    strs.mkString\n}\n",
            "def filterByPrefix(strs: Seq[String], prefixStr: String): Seq[String] = {\n    strs.filter(s => s.startsWith(prefixStr))\n}\n",
            "def getPositive(l: Seq[Int]): Seq[Int] = {\n    l.filter(_ > 0)\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) {\n        return false\n    }\n    for (i <- 2 to math.sqrt(n).toInt) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "def poly(xs: Seq[Int], x: Double): Double = {\n    var res = 0.0\n    for (i <- xs.indices) {\n        res += xs(i) * math.pow(x, i)\n    }\n    res\n}\ndef findZero(xs: Seq[Int]): Double = {\n    var x1 = 1.0\n    var x2 = -1.0\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2\n        x2 *= 2\n    }\n    while (math.abs(x1 - x2) > 1e-10) {\n        val mid = (x1 + x2) / 2\n        if (poly(xs, mid) == 0) {\n            return mid\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    (x1 + x2) / 2\n}\n",
            "def sortThird(l: Seq[Int]): Seq[Int] = {\n    val sortedThird = l.grouped(3).map(_.sorted).flatten\n    sortedThird.zipWithIndex.map { case (e, i) => if (i % 3 == 0) e else l(i) }\n}\n",
            "def listUnique(l: Seq[Int]): Seq[Int] = {\n    l.distinct.sorted\n}\n",
            "def maxElement(l: Seq[Int]): Int = {\n    if (l.isEmpty) 0 else l.max\n}\n",
            "def fizzBuzz(n: Int): Int = {\n    var cnt = 0\n    for (i <- 0 until n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += (i.toString.count(_ == '7'))\n        }\n    }\n    cnt\n}\n",
            "def sortEven(l: Seq[Int]): Seq[Int] = {\n    val sortedEven = l.filter(_ % 2 == 0).sorted\n    sortedEven.zipWithIndex.map { case (e, i) => if (i % 2 == 0) e else l(i) }\n}\n",
            "def encodeCyclic(s: String): String = {\n    encodeCyclic(encodeCyclic(s))\n}\ndef decodeCyclic(s: String): String = {\n    decodeCyclic(encodeCyclic(s))\n}\n",
            "def primeFib(n: Int): Int = {\n    var f = Array(0, 1)\n    var cnt = 0\n    while (cnt < n) {\n        f = Array(f(1), f(0) + f(1))\n        if (isPrime(f(1))) {\n            cnt += 1\n        }\n    }\n    f(1)\n}\ndef isPrime(n: Int): Boolean = {\n    if (n < 2) {\n        return false\n    }\n    for (i <- 2 to math.sqrt(n).toInt) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    true\n}\n",
            "def triplesSumToZero(l: Seq[Int]): Boolean = {\n    for (i <- 0 until l.length) {\n        for (j <- i until l.length) {\n            for (k <- j until l.length) {\n                if (l(i) + l(j) + l(k) == 0) {\n                    return true\n                }\n            }\n        }\n    }\n    false\n}\n",
            "def carRaceCollision(n: Int): Int = {\n    n * n\n}\n",
            "def incrList(l: Seq[Int]): Seq[Int] = {\n    l.map(i => i + 1)\n}\n",
            "def pairsSumToZero(l: Seq[Int]): Boolean = {\n    val seen = mutable.Set[Int]()\n    for (num <- l) {\n        if (-num in seen) {\n            return true\n        }\n        seen.add(num)\n    }\n    false\n}\n",
            "def changeBase(x: Int, bas: Int): String = {\n    if (x == 0) {\n        return \"0\"\n    }\n    val digits = mutable.ListBuffer[String]()\n    while (x > 0) {\n        digits += x % bas\n        x /= bas\n    }\n    digits.reverse.mkString\n}\n",
            "def triangleArea(a: Int, h: Int): Double = {\n    a * h / 2\n}\n",
            "def fib4(n: Int): Int = {\n    val fib = Array.fill(4)(0)\n    fib(0) = 0\n    fib(1) = 0\n    fib(2) = 2\n    fib(3) = 0\n    for (i <- 4 until n + 1) {\n        fib((i % 4) + 1) = fib((i - 1) % 4) + fib((i - 2) % 4) + fib((i - 3) % 4)\n    }\n    fib((n % 4) + 1)\n}\n",
            "def median(l: Seq[Double]): Double = {\n    val sl = l.sorted\n    if (l.length % 2!= 0) {\n        sl(l.length / 2)\n    } else {\n        (sl(l.length / 2) + sl(l.length / 2 - 1)) / 2\n    }\n}\n",
            "def isPalindrome(txt: String): Boolean = {\n    txt == txt.reverse\n}\n",
            "def modp(n: Int, p: Int): Int = {\n    var ret = 1\n    for (_ <- 0 until n) {\n        ret = (ret * 2) % p\n    }\n    ret\n}\n",
            "def encodeShift(s: String): String = {\n    s.map(ch => (ch.toInt - 97 + 5) % 26 + 97).map(_.toChar).mkString\n}\ndef decodeShift(s: String): String = {\n    s.map(ch => (ch.toInt - 97 + 21) % 26 + 97).map(_.toChar).mkString\n}\n",
            "def removeVowels(txt: String): String = {\n    txt.filter(c =>!\"aeiouAEIOU\".contains(c))\n}\n",
            "def belowThreshold(l: Seq[Int], t: Int): Boolean = {\n    l.forall(x => x < t)\n}\n",
            "def add(x: Int, y: Int): Int = {\n    x + y\n}\n",
            "def sameChars(s0: String, s1: String): Boolean = {\n    s0.toSet == s1.toSet\n}\n",
            "def fib(n: Int): Int = {\n    if (n <= 1) n else fib(n - 1) + fib(n - 2)\n}\n",
            "def correctBracketing(brackets: String): Boolean = {\n    var depth = 0\n    for (b <- brackets) {\n        if (b == \"<\") {\n            depth += 1\n        } else if (b == \">\") {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "def monotonic(l: Seq[Int]): Boolean = {\n    val diff = l.sliding(2).map(x => x(1) - x(0)).toSeq\n    diff.forall(_ <= 0) || diff.forall(_ >= 0)\n}\n",
            "def common(l1: Seq[Int], l2: Seq[Int]): Seq[Int] = {\n    l1.filter(l2.contains(_))\n}\n",
            "def largestPrimeFactor(n: Int): Int = {\n    var i = 2\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1\n        } else {\n            n /= i\n        }\n    }\n    n\n}\n",
            "def sumToN(n: Int): Int = {\n    var result = 0\n    for (i <- 1 to n) {\n        result += i\n    }\n    result\n}\n",
            "def correctBracketing(brackets: String): Boolean = {\n    var depth = 0\n    for (b <- brackets) {\n        if (b == \"(\") {\n            depth += 1\n        } else if (b == \")\") {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    depth == 0\n}\n",
            "def derivative(xs: Seq[Int]): Seq[Int] = {\n    xs.zipWithIndex.map { case (x, i) => x * i }\n}\n",
            "def fibfib(n: Int): Int = {\n    var a = 0\n    var b = 0\n    var c = 1\n    while (n > 2) {\n        a = b\n        b = c\n        c = a + b + c\n        n -= 1\n    }\n    c\n}\n",
            "def vowelsCount(s: String): Int = {\n    s.toLowerCase.count(c => \"aeiou\".contains(c) || (s.length == 1 && c == 'y'))\n}\n",
            "def circularShift(x: Int, shift: Int): String = {\n    val xStr = x.toString\n    if (shift > xStr.length) {\n        xStr.reverse\n    } else {\n        xStr.dropRight(shift) + xStr.takeRight(shift)\n    }\n}\n",
            "def digitSum(s: String): Int = {\n    s.filter(_.isUpper).map(_.toInt).sum\n}\n",
            "def fruitDistribution(s: String, n: Int): Int = {\n    val words = s.split(' ')\n    val apples = words.indexOf(\"apples\") - 1\n    val oranges = words.indexOf(\"oranges\") - 1\n    n - apples - oranges\n}\n",
            "def pluck(arr: Seq[Int]): Seq[Int] = {\n    val evens = arr.filter(_ % 2 == 0)\n    if (evens.isEmpty) {\n        Seq.empty\n    } else {\n        val minEven = evens.min\n        Seq(minEven, arr.indexOf(minEven))\n    }\n}\n",
            "def search(lst: Seq[Int]): Int = {\n    val freqs = mutable.Map[Int, Int]()\n    for (n <- lst) {\n        freqs(n) = freqs.getOrElse(n, 0) + 1\n    }\n    val goodVals = freqs.filter { case (k, v) => v >= k }.keys.toSeq\n    goodVals.max\n}\n",
            "def strangeSortList(lst: Seq[Int]): Seq[Int] = {\n    val sl = lst.sorted\n    val result = mutable.ListBuffer[Int]()\n    var left = 0\n    var right = sl.length - 1\n    while (left <= right) {\n        result.addOne(sl(left))\n        left += 1\n        if (left <= right) {\n            result.addOne(sl(right))\n            right -= 1\n        }\n    }\n    result.toList\n}\n",
            "def triangleArea(a: Int, b: Int, c: Int): Double = {\n    if (a + b > c && a + c > b && b + c > a) {\n        val s = (a + b + c) / 2.0\n        math.sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        -1.0\n    }\n}\n",
            "def willItFly(q: Seq[Int], w: Int): Boolean = {\n    val isPalin = q.zip(q.reverse).forall(p => p._1 == p._2)\n    val total = q.sum\n    isPalin && total <= w\n}\n",
            "def smallestChange(arr: Seq[Int]): Int = {\n    var ans = 0\n    for (i <- 0 until arr.length / 2) {\n        if (arr(i)!= arr(arr.length - i - 1)) {\n            ans += 1\n        }\n    }\n    ans\n}\n",
            "def totalMatch(lst1: Seq[String], lst2: Seq[String]): Seq[String] = {\n    val cnt1 = lst1.map(_.length).sum\n    val cnt2 = lst2.map(_.length).sum\n    if (cnt1 <= cnt2) lst1 else lst2\n}\n",
            "def isMultiplyPrime(a: Int): Boolean = {\n    if (a < 2) return false\n    var cnt = 0\n    for (i <- 2 to math.sqrt(a).toInt) {\n        if (a % i == 0) {\n            cnt += 1\n            a /= i\n        }\n    }\n    cnt == 3\n}\n",
            "def isSimplePower(x: Int, n: Int): Boolean = {\n    if (n < 2) {\n        return x == n\n    }\n    var tmp = 1\n    while (tmp < x) {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "def isCube(a: Int): Boolean = {\n    val root = math.pow(a, 1.0 / 3.0).toInt\n    root * root * root == a\n}\n",
            "def hexKey(num: String): Int = {\n    num.count(x => x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D')\n}\n",
            "def decimalToBinary(dec: Int): String = {\n    val binary = dec.toBinaryString\n    f\"db$binary$binary\"\n}\n",
            "def isHappy(s: String): Boolean = {\n    val set = mutable.Set[Char]()\n    var i = 0\n    while (i < s.length - 2) {\n        if (set.contains(s(i))) return false\n        if (set.contains(s(i + 1))) return false\n        if (set.contains(s(i + 2))) return false\n        set += s(i)\n        set += s(i + 1)\n        set += s(i + 2)\n        i += 1\n    }\n    true\n}\n",
            "def numericalLetterGrade(grades: Seq[Double]): Seq[String] = {\n    val result = mutable.ListBuffer[String]()\n    for (g <- grades) {\n        if (g == 4.0) {\n            result += \"A+\"\n        } else if (g > 3.7) {\n            result += \"A\"\n        } else if (g > 3.3) {\n            result += \"A-\"\n        } else if (g > 3.0) {\n            result += \"B+\"\n        } else if (g > 2.7) {\n            result += \"B\"\n        } else if (g > 2.3) {\n            result += \"B-\"\n        } else if (g > 2.0) {\n            result += \"C+\"\n        } else if (g > 1.7) {\n            result += \"C\"\n        } else if (g > 1.3) {\n            result += \"C-\"\n        } else if (g > 1.0) {\n            result += \"D+\"\n        } else if (g > 0.7) {\n            result += \"D\"\n        } else if (g > 0.0) {\n            result += \"D-\"\n        } else {\n            result += \"E\"\n        }\n    }\n    result.toList\n}\n",
            "def primeLength(s: String): Boolean = {\n    val length = s.length\n    if (length < 2) {\n        return false\n    }\n    for (i <- 2 to math.floor(math.sqrt(length)).toInt) {\n        if (length % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "def startsOneEnds(n: Int): Int = {\n    if (n == 1) 1 else 2 * 9 * (10.0 ** (n - 2))\n}\n",
            "def solve(n: Int): String = {\n    val digitsSum = n.toString.map(_.asDigit).sum\n    f\"${Integer.toBinaryString(digitsSum)}%032s\"\n}\n",
            "def add(lst: Seq[Int]): Int = {\n    lst.zipWithIndex.filter(_._2 % 2 == 1).filter(_._1 % 2 == 0).map(_._1).sum\n}\n",
            "def antiShuffle(s: String): String = {\n    s.split(\" \").map(_.sorted).mkString(\" \")\n}\n",
            "def getRow(lst: Seq[Seq[Int]], x: Int): Seq[Seq[Int]] = {\n    val coords = lst.flatMap(row => row.zipWithIndex.filter(_._1 == x).map(p => (p._2, p._1)))\n    coords.sortBy(p => (p._1, -p._2))\n}\n",
            "def sortArray(arr: Seq[Int]): Seq[Int] = {\n    if (arr.isEmpty) {\n        return Seq.empty\n    }\n    if ((arr.head + arr.last) % 2 == 0) {\n        return arr.sorted(Ordering.Int.reverse)\n    } else {\n        return arr.sorted\n    }\n}\n",
            "def encrypt(s: String): String = {\n    s.map(ch => (ch.toInt + 4) % 26 + 'a').mkString\n}\n",
            "def nextSmallest(lst: Seq[Int]): Option[Int] = {\n    val sl = lst.sorted.toSet\n    if (sl.size < 2) {\n        None\n    } else {\n        Some(sl.head)\n    }\n}\n",
            "def isBored(s: String): Int = {\n    val sentences: Seq[String] = s.split(Regex(\"\"\"[.!?]\\s*\"\"\"))\n    sentences.count(sentence => sentence.startsWith(\"I \"))\n}\n",
            "def anyInt(x: Any, y: Any, z: Any): Boolean = {\n    x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int] && (x.asInstanceOf[Int] + y.asInstanceOf[Int] == z.asInstanceOf[Int]) || (x.asInstanceOf[Int] + z.asInstanceOf[Int] == y.asInstanceOf[Int]) || (y.asInstanceOf[Int] + z.asInstanceOf[Int] == x.asInstanceOf[Int])\n}\n",
            "def encode(message: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    val result = mutable.ListBuffer[Char]()\n    for (ch <- message) {\n        if (ch.isLetter) {\n            val ch1 = ch.toUpper if ch.isLower else ch.toLower\n            if (ch1 in vowels) {\n                ch1 = ch1.toChar.toString.charAt(0).toUpper + (ch1.toChar.toString.charAt(0).toLower - 'a' + 2).toChar\n            }\n            result += ch1\n        } else {\n            result += ch\n        }\n    }\n    result.mkString\n}\n",
            "def skjkasdkd(lst: Seq[Int]): Int = {\n    val primes = lst.filter(n => isPrime(n))\n    if (primes.isEmpty) {\n        return 0\n    }\n    val largest = primes.max.toString\n    return largest.map(_.asDigit).sum\n}\n",
            "def checkDictCase(d: Map[String,String]): Boolean = {\n    if (d.isEmpty) {\n        return false\n    }\n    val keys = d.keys.toSeq\n    val isLower = keys.forall(_.isLower)\n    val isUpper = keys.forall(_.isUpper)\n    isLower || isUpper\n}\n",
            "def countUpTo(n: Int): Seq[Int] = {\n    val primes = mutable.ListBuffer[Int]()\n    for (num <- 2 to n) {\n        if (primes.forall(num % _!= 0)) {\n            primes += num\n        }\n    }\n    primes.toList\n}\n",
            "def multiply(a: Int, b: Int): Int = {\n    (math.abs(a) % 10) * (math.abs(b) % 10)\n}\n",
            "def countUpper(s: String): Int = {\n    s.zipWithIndex.count { case (c, i) => i % 2 == 0 && c.isUpper }\n}\n",
            "def closestInteger(value: String): Int = {\n    val num = value.toDouble\n    if (num >= 0) num.toInt + 0.5 else num.toInt - 0.5\n}\n",
            "def makeAPile(n: Int): Seq[Int] = {\n    (1 to n).map(i => n + 2 * i)\n}\n",
            "def wordsString(s: String): Seq[String] = {\n    val regex = new Regex(r\"[, ]\")\n    regex.split(s).filter(_.length > 0)\n}\n",
            "def chooseNum(x: Int, y: Int): Int = {\n    if (x > y) -1\n    else if (y % 2 == 0) y\n    else y - 1\n}\n",
            "def roundedAvg(n: Int, m: Int): Option[String] = {\n    if (n > m) {\n        return None\n    }\n    val rAvg = (m + n) / 2.0 + 0.5\n    val rAvgStr = f\"$rAvg%.0f\"\n    val rAvgBin = Integer.parseInt(rAvgStr, 16)\n    Some(f\"$rAvgBin%08x\")\n}\n",
            "def uniqueDigits(x: Seq[Int]): Seq[Int] = {\n    x.filter(num => num.toString.forall(digit => digit.toInt % 2!= 0)).sorted\n}\n",
            "def byLength(arr: Seq[Int]): Seq[String] = {\n    val digitNames = Seq(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    val sortedArr = arr.filter(x => 1 <= x && x <= 9).sorted(Ordering.Int.reverse)\n    sortedArr.map(x => digitNames(x - 1))\n}\n",
            "def f(n: Int): Seq[Int] = {\n    val nums = 1 to n\n    nums.map { i =>\n        if (i % 2!= 0) {\n            nums.take(i).reduce(_ * _)\n        } else {\n            nums.take(i).sum\n        }\n    }\n}\n",
            "def evenOddPalindrome(n: Int): Seq[Int] = {\n    val cnt = mutable.ListBuffer[Int](0, 0)\n    for (i <- 1 to n) {\n        if (isPalindrome(i.toString)) {\n            cnt(i % 2) += 1\n        }\n    }\n    cnt.toList\n}\n",
            "def countNums(arr: Seq[Int]): Int = {\n    arr.count(n => digitsSum(n) > 0)\n}\ndef digitsSum(n: Int): Int = {\n    val nStr = n.toString\n    if (n >= 0) {\n        nStr.map(_.toInt).sum\n    } else {\n        val nStr2 = nStr.take(2)\n        nStr2.toInt * 2 + digitsSum(nStr2.toInt)\n    }\n}\n",
            "def moveOneBall(arr: Seq[Int]): Boolean = {\n    if (arr.isEmpty) return true\n    val sortedArr = arr.sorted\n    for (i <- 0 until arr.length) {\n        if (arr.drop(i) == sortedArr.take(arr.length - i) && arr.take(i) == sortedArr.drop(arr.length - i)) return true\n    }\n    false\n}\n",
            "def canExchange(lst1: Seq[Int], lst2: Seq[Int]): String = {\n    val oddCnt = lst1.count(_ % 2!= 0)\n    val evenCnt = lst2.count(_ % 2 == 0)\n    if (evenCnt >= oddCnt) \"YES\" else \"NO\"\n}\n",
            "def histogram(test: String): Map[String,Int] = {\n    val freq = mutable.Map[String, Int]()\n    val words = test.split(\" \").filter(_.length > 0)\n    for (w <- words) {\n        freq(w) = freq.getOrElse(w, 0) + 1\n    }\n    val result = mutable.Map[String, Int]()\n    if (freq.nonEmpty) {\n        val maxFreq = freq.values.max\n        for ((k, v) <- freq) {\n            if (v == maxFreq) {\n                result(k) = v\n            }\n        }\n    }\n    result\n}\n",
            "def reverseDelete(s: String, c: String): Seq[String] = {\n    val s1 = s.filterNot(c.contains(_))\n    Seq(s1, \"yes\" if s1 == s1.reverse else \"no\")\n}\n",
            "def oddCount(lst: Seq[String]): Seq[String] = {\n    val result = mutable.ListBuffer[String]()\n    for (num <- lst) {\n        val n = num.map(d => (d.toInt % 2) == 1).sum\n        val rs = \"the number of odd elements in the string i of the input.\"\n        result += rs.replace(\"i\", n.toString)\n    }\n    result.toList\n}\n",
            "def minSubArraySum(nums: Seq[Int]): Int = {\n    var minSum = 0\n    var curSum = 0\n    for (n <- nums) {\n        curSum = math.min(curSum + n, 0)\n        minSum = math.min(curSum, minSum)\n    }\n    if (minSum == 0) {\n        minSum = nums.min\n    }\n    minSum\n}\n",
            "def maxFill(grid: Seq[Seq[Int]], capacity: Int): Int = {\n    grid.map(_.sum).map(ceil(_ / capacity)).sum\n}\n",
            "def sortArray(arr: Seq[Int]): Seq[Int] = {\n    arr.sortBy(x => (x.toString.count(_ == '1'), x))\n}\n",
            "def selectWords(s: String, n: Int): Seq[String] = {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\"\n    val words = s.split(\" \").filter(_.length > 0)\n    words.filter(w => w.count(c => c.isLower && consonants.contains(c)) == n)\n}\n",
            "def getClosestVowel(word: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    for (i <- word.length - 2 to 0 by -1) {\n        if (word(i) in vowels && word(i - 1) not in vowels && word(i + 1) not in vowels) {\n            return word(i)\n        }\n    }\n    \"\"\n}\n",
            "def matchParens(lst: Seq[String]): String = {\n    val s1 = lst(0) + lst(1)\n    val s2 = lst(1) + lst(0)\n    if (check(s1) || check(s2)) \"Yes\" else \"No\"\n}\ndef check(s: String): Boolean = {\n    var depth = 0\n    for (ch <- s) {\n        if (ch == \"(\") depth += 1\n        else depth -= 1\n        if (depth < 0) return false\n    }\n    true if depth == 0 else false\n}\n",
            "def maximum(arr: Seq[Int], k: Int): Seq[Int] = {\n    arr.sorted.reverse.take(k)\n}\n",
            "def solution(lst: Seq[Int]): Int = {\n    lst.zipWithIndex.filter(_._2 % 2 == 0 && _._1 % 2!= 0).map(_._1).sum\n}\n",
            "def addElements(arr: Seq[Int], k: Int): Int = {\n    arr.take(k).filter(_.toString.length <= 2).sum\n}\n",
            "def getOddCollatz(n: Int): Seq[Int] = {\n    val collatz = mutable.ListBuffer[Int]()\n    while (n!= 1) {\n        if (n % 2!= 0) {\n            collatz += n\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    collatz.sorted\n}\n",
            "def validDate(date: String): Boolean = {\n    if (date.length!= 10 || date(2)!= '-' || date(5)!= '-') {\n        return false\n    }\n    val m = date.substring(0, 2).toInt\n    val d = date.substring(3, 5).toInt\n    if (m in List(1, 3, 5, 7, 8, 10, 12) && d >= 1 && d <= 31) {\n        return true\n    }\n    if (m in List(4, 6, 9, 11) && d >= 1 && d <= 30) {\n        return true\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true\n    }\n    return false\n}\n",
            "def splitWords(txt: String): Seq[String] = {\n    if (txt.contains(\" \")) {\n        txt.split(\" \")\n    } else if (txt.contains(\",\")) {\n        txt.split(\",\")\n    } else {\n        Seq(txt.length.toString)\n    }\n}\n",
            "def isSorted(lst: Seq[Int]): Boolean = {\n    lst.sliding(2).forall { case Seq(a, b) => a <= b }\n}\n",
            "def intersection(interval1: Seq[Int], interval2: Seq[Int]): String = {\n    val l = math.max(interval1(0), interval2(0))\n    val r = math.min(interval1(1), interval2(1))\n    val length = r - l\n    \"YES\" if length > 0 && isPrime(length) else \"NO\"\n}\n",
            "def prodSigns(arr: Seq[Int]): Option[Int] = {\n    if (arr.isEmpty) {\n        return None\n    }\n    if (arr.contains(0)) {\n        return 0\n    }\n    val sign = if (arr.count(_ < 0) % 2 == 1) -1 else 1\n    Some(sign * arr.map(math.abs).sum)\n}\n",
            "def minPath(grid: Seq[Seq[Int]], k: Int): Seq[Int] = {\n    val n = grid.length\n    val minVal = n * n + 1\n    for (i <- 0 until n) {\n        for (j <- 0 until n) {\n            if (grid(i)(j) == 1) {\n                val temp = mutable.ListBuffer[Int]()\n                if (i!= 0) {\n                    temp += grid(i - 1)(j)\n                }\n                if (j!= 0) {\n                    temp += grid(i)(j - 1)\n                }\n                if (i!= n - 1) {\n                    temp += grid(i + 1)(j)\n                }\n                if (j!= n - 1) {\n                    temp += grid(i)(j + 1)\n                }\n                minVal = math.min(minVal, temp.min)\n            }\n        }\n    }\n    val result = mutable.ListBuffer[Int]()\n    for (i <- 0 until k) {\n        result += 1 if i % 2 == 0 else minVal\n    }\n    result.toList\n}\n",
            "def tri(n: Int): Seq[Int] = {\n    if (n == 0) {\n        return Seq(1)\n    }\n    val seq = Seq(1, 3)\n    for (i <- 2 until n + 1) {\n        if (i % 2 == 0) {\n            seq.append(i / 2 + 1)\n        } else {\n            seq.append(seq(i - 1) + seq(i - 2) + (i + 3) / 2)\n        }\n    }\n    seq\n}\n",
            "def digits(n: Int): Int = {\n    val odds = n.toString.filter(_.isDigit).map(_.toInt).filter(_ % 2 == 1)\n    if (odds.nonEmpty) odds.reduce(_ * _) else 0\n}\n",
            "def isNested(s: String): Boolean = {\n    var openIdx = mutable.ListBuffer[Int]()\n    var closeIdx = mutable.ListBuffer[Int]()\n    for ((ch, i) <- s.zipWithIndex) {\n        if (ch == '[') {\n            openIdx += i\n        } else if (ch == ']') {\n            closeIdx += i\n        }\n    }\n    closeIdx.reverse\n    var cnt = 0\n    var i = 0\n    var l = closeIdx.length\n    for (idx <- openIdx) {\n        if (i < l && idx < closeIdx(i)) {\n            cnt += 1\n            i += 1\n        }\n    }\n    cnt >= 2\n}\n",
            "def sumSquares(lst: Seq[Double]): Int = {\n    lst.map(n => math.pow(math.ceil(n), 2)).sum\n}\n",
            "def checkIfLastCharIsALetter(txt: String): Boolean = {\n    if (txt.isEmpty) {\n        return false\n    }\n    val last = txt.split(\" \").last\n    return last.length == 1 && last.head.isLetter\n}\n",
            "def canArrange(arr: Seq[Int]): Int = {\n    if (arr.length <= 1) {\n        return -1\n    }\n    val idx = arr.zipWithIndex.filter(_._1 < arr(_ - 1)).map(_._2)\n    idx.max\n}\n",
            "def largestSmallestIntegers(lst: Seq[Int]): Seq[Option[Int]] = {\n    val neg = lst.filter(_ < 0)\n    val pos = lst.filter(_ > 0)\n    val maxNeg = if (neg.nonEmpty) Some(neg.max) else None\n    val minPos = if (pos.nonEmpty) Some(pos.min) else None\n    Seq(maxNeg, minPos)\n}\n",
            "def compareOne(a: Any, b: Any): Option[Double] = {\n    if (a.isInstanceOf[String]) {\n        val a1 = a.toString.replace(',', '.').toDouble\n        if (b.isInstanceOf[String]) {\n            val b1 = b.toString.replace(',', '.').toDouble\n            if (a1 == b1) {\n                None\n            } else if (a1 > b1) {\n                Some(a1)\n            } else {\n                Some(b1)\n            }\n        } else if (b.isInstanceOf[Int]) {\n            val b1 = b.asInstanceOf[Int].toDouble\n            if (a1 == b1) {\n                None\n            } else if (a1 > b1) {\n                Some(a1)\n            } else {\n                Some(b1)\n            }\n        } else if (b.isInstanceOf[Double]) {\n            val b1 = b.asInstanceOf[Double]\n            if (a1 == b1) {\n                None\n            } else if (a1 > b1) {\n                Some(a1)\n            } else {\n                Some(b1)\n            }\n        } else {\n            throw new RuntimeException(\"Type Error\")\n        }\n    } else if (a.isInstanceOf[Int]) {\n        val a1 = a.asInstanceOf[Int].toDouble\n        if (b.isInstanceOf[String]) {\n            val b1 = b.toString.replace(',', '.').toDouble\n            if (a1 == b1) {\n                None\n            } else if (a1 > b1) {\n                Some(a1)\n            } else {\n                Some(b1)\n            }\n        } else if (b.isInstanceOf[Int]) {\n            val b1 = b.asInstanceOf[Int].toDouble\n            if (a1 == b1) {\n                None\n            } else if (a1 > b1) {\n                Some(a1)\n            } else {\n                Some(b1)\n            }\n        } else if (b.isInstanceOf[Double]) {\n            val b1 = b.asInstanceOf[Double]\n            if (a1 == b1) {\n                None\n            } else if (a1 > b1) {\n                Some(a1)\n            } else {\n                Some(b1)\n            }\n        } else {\n            throw new RuntimeException(\"Type Error\")\n        }\n    } else if (a.isInstanceOf[Double]) {\n        val a1 = a.asInstanceOf[Double]\n        if (b.isInstanceOf[String]) {\n            val b1 = b.toString.replace(',', '.').toDouble\n            if (a1 == b1) {\n                None\n            } else if (a1 > b1) {\n                Some(a1)\n            } else {\n                Some(b1)\n            }\n        } else if (b.isInstanceOf[Int]) {\n            val b1 = b.asInstanceOf[Int].toDouble\n            if (a1 == b1) {\n                None\n            } else if (a1 > b1) {\n                Some(a1)\n            } else {\n                Some(b1)\n            }\n        } else if (b.isInstanceOf[Double]) {\n            val b1 = b.asInstanceOf[Double]\n            if (a1 == b1) {\n                None\n            } else if (a1 > b1) {\n                Some(a1)\n            } else {\n                Some(b1)\n            }\n        } else {\n            throw new RuntimeException(\"Type Error\")\n        }\n    } else {\n        throw new RuntimeException(\"Type Error\")\n    }\n}\n",
            "def isEqualToSumEven(n: Int): Boolean = {\n    n % 2 == 0 && n >= 8\n}\n",
            "def specialFactorial(n: Int): Int = {\n    var fact = 1\n    var result = 1\n    for (i <- 1 to n) {\n        fact *= i\n        result *= fact\n    }\n    result\n}\n",
            "def fixSpaces(txt: String): String = {\n    txt.replaceAll(\"\\\\s{3,}\", \"-\").replaceAll(\" \", \"_\")\n}\n",
            "def fileNameCheck(fileName: String): String = {\n    val suf = Seq(\"txt\", \"exe\", \"dll\")\n    val lst = fileName.split('.')\n    if (lst.length!= 2 ||!lst(1).toLowerCase() in suf || lst(0).length == 0 ||!lst(0)(0).isLetter || lst(0).count(_.isDigit) > 3) {\n        \"No\"\n    } else {\n        \"Yes\"\n    }\n}\n",
            "def sumSquares(lst: Seq[Int]): Int = {\n    var result = 0\n    for (i <- lst.indices) {\n        if (i % 3 == 0) {\n            result += math.pow(lst(i), 2)\n        } else if (i % 4 == 0) {\n            result += math.pow(lst(i), 3)\n        } else {\n            result += lst(i)\n        }\n    }\n    result\n}\n",
            "def wordsInSentence(sentence: String): String = {\n    val words = sentence.split(\" \")\n    words.filter(w => isPrime(w.length)).mkString(\" \")\n}\ndef isPrime(n: Int): Boolean = {\n    if (n < 2) false\n    else (2 until n).forall(i => n % i!= 0)\n}\n",
            "def simplify(x: String, n: String): Boolean = {\n    val xs = x.split(\"/\")\n    val ns = n.split(\"/\")\n    val num = xs(0).toInt * ns(0).toInt\n    val den = xs(1).toInt * ns(1).toInt\n    num % den == 0\n}\n",
            "def orderByPoints(nums: Seq[Int]): Seq[Int] = {\n    nums.sortBy(digitsSum)\n}\ndef digitsSum(n: Int): Int = {\n    val nStr = n.toString\n    if (n >= 0) {\n        nStr.map(_.toInt).sum\n    } else {\n        (nStr.take(2).toInt * 2) + digitsSum(n.abs)\n    }\n}\n",
            "def specialFilter(nums: Seq[Int]): Int = {\n    val odds = \"13579\"\n    nums.count(n => n > 10 && n % 2 == 1 && odds.contains(n.toString.head))\n}\n",
            "def getMaxTriples(n: Int): Int = {\n    val c = Array.fill(3)(0)\n    for (i <- 1 to n) {\n        val a = i * i - i + 1\n        c((a % 3) + 0) += 1\n    }\n    c(0) * c(1) * c(2) + (c(0) * (c(0) - 1) * (c(0) - 2) + c(1) * (c(1) - 1) * (c(1) - 2) + c(2) * (c(2) - 1) * (c(2) - 2)) // 6\n}\n",
            "def bf(planet1: String, planet2: String): Seq[String] = {\n    val names = Seq(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (planet1.isEmpty || planet2.isEmpty ||!names.contains(planet1) ||!names.contains(planet2)) {\n        Seq.empty\n    } else {\n        val l = names.indexOf(planet1)\n        val r = names.indexOf(planet2)\n        if (l > r) {\n            l, r = r, l\n        }\n        if (l == r) {\n            Seq.empty\n        } else {\n            names.slice(l + 1, r)\n        }\n    }\n}\n",
            "def sortedListSum(lst: Seq[String]): Seq[String] = {\n    val result = lst.filter(s => s.length % 2 == 0)\n    result.sortBy(s => (s.length, s))\n}\n",
            "def xOrY(n: Int, x: Int, y: Int): Int = {\n    if (n < 2) return y\n    for (i <- 2 to math.sqrt(n).toInt) {\n        if (n % i == 0) return y\n    }\n    x\n}\n",
            "def doubleTheDifference(lst: Seq[Double]): Int = {\n    lst.filter(_ >= 0).filter(_ % 2 == 1).map(_ * _).sum\n}\n",
            "def compare(game: Seq[Int], guess: Seq[Int]): Seq[Int] = {\n    game.zip(guess).map(x => math.abs(x._1 - x._2))\n}\n",
            "def strongestExtension(className: String, extensions: Seq[String]): String = {\n    var maxS = Float.NegativeInfinity\n    var maxExt = \"\"\n    for (ext <- extensions) {\n        val upper = ext.count(_.isUpper)\n        val lower = ext.count(_.isLower)\n        val s = upper - lower\n        if (s > maxS) {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    s\"$className.$maxExt\"\n}\n",
            "def cycpatternCheck(a: String, b: String): Boolean = {\n    if (a.length < b.length) {\n        return false\n    }\n    for (i <- 0 until b.length) {\n        if (b.substring(i) + b.substring(0, i) in a) {\n            return true\n        }\n    }\n    return false\n}\n",
            "def evenOddCount(num: Int): Seq[Int] = {\n    val ds = num.toString.map(_.toString).reverse\n    val even = ds.count(_.toInt % 2 == 0)\n    Seq(even, ds.length - even)\n}\n",
            "def intToMiniRoman(num: Int): String = {\n    val values = List(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    val numerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    var res = \"\"\n    for (i <- values.indices) {\n        while (num >= values(i)) {\n            res += numerals(i)\n            num -= values(i)\n        }\n    }\n    res\n}\n",
            "def rightAngleTriangle(a: Int, b: Int, c: Int): Boolean = {\n    val s = List(a, b, c).sorted\n    s(0) * s(0) + s(1) * s(1) == s(2) * s(2)\n}\n",
            "def findMax(words: Seq[String]): String = {\n    var maxCnt = 0\n    var maxW = \"\"\n    for (w <- words) {\n        val cnt = w.toSet.size\n        if (cnt > maxCnt) {\n            maxCnt = cnt\n            maxW = w\n        } else if (cnt == maxCnt) {\n            maxW = if (maxW < w) w else maxW\n        }\n    }\n    maxW\n}\n",
            "def eat(num: Int, need: Int, remaining: Int): Seq[Int] = {\n    if (need <= remaining) Seq(num + need, remaining - need)\n    else Seq(num + remaining, 0)\n}\n",
            "def doAlgebra(operators: Seq[String], operands: Seq[Int]): Int = {\n    val ops = operators.copy()\n    val nums = operands.copy()\n    var i = ops.length - 1\n    while (i >= 0) {\n        if (ops(i) == \"**\") {\n            nums(i) = math.pow(nums(i), nums(i + 1))\n            nums.remove(i + 1)\n            ops.remove(i)\n        }\n        i -= 1\n    }\n    i = 0\n    while (i < ops.length) {\n        if (ops(i) == \"*\") {\n            nums(i) = nums(i) * nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        } else if (ops(i) == \"//\") {\n            nums(i) = nums(i) / nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while (i < ops.length) {\n        if (ops(i) == \"+\") {\n            nums(i) = nums(i) + nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        } else if (ops(i) == \"-\") {\n            nums(i) = nums(i) - nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        }\n        i += 1\n    }\n    nums(0)\n}\n",
            "def solve(s: String): String = {\n    val result = mutable.ListBuffer[Char]()\n    for (ch <- s) {\n        if (ch.isLetter) {\n            if (ch.isUpper) {\n                result += ch.toLower\n            } else {\n                result += ch.toUpper\n            }\n        } else {\n            result += ch\n        }\n    }\n    result.mkString\n}\n",
            "def stringToMd5(txt: String): Option[String] = {\n    if (txt.isEmpty) {\n        None\n    } else {\n        Try(MessageDigest.getInstance(\"MD5\").digest(txt.getBytes)).map(_.map(\"%02x\".format(_)).mkString).toOption\n    }\n}\n",
            "def generateIntegers(a: Int, b: Int): Seq[Int] = {\n    val lower = math.max(2, math.min(a, b))\n    val upper = math.min(8, math.max(a, b))\n    (lower to upper).filter(_ % 2 == 0).toSeq\n}\n"
        ],
        "swift": [
            "func hasCloseElements(_ numbers: [Double], _ threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func separateParenGroups(_ parenString: String) -> [String] {\n    var groups = [String]()\n    var stk = [String]()\n    var currentGroup = \"\"\n    var parens = parenString.replacingOccurrences(of: \" \", with: \"\")\n    for ch in parens {\n        if ch == \"(\" {\n            stk.append(ch)\n            currentGroup += ch\n        } else if ch == \")\" {\n            stk.popLast()\n            currentGroup += ch\n            if stk.isEmpty {\n                groups.append(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "func truncateNumber(_ num: Double) -> Double {\n    return num - floor(num)\n}\n",
            "func belowZero(_ operations: [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func meanAbsoluteDeviation(_ numbers: [Double]) -> Double {\n    var mean = 0.0\n    for n in numbers {\n        mean += n\n    }\n    mean /= Double(numbers.count)\n    var deviation = 0.0\n    for n in numbers {\n        deviation += abs(n - mean)\n    }\n    return deviation / Double(numbers.count)\n}\n",
            "func intersperse(_ numbers: [Int], _ delimiter: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<numbers.count {\n        if i!= 0 {\n            result.append(delimiter)\n        }\n        result.append(numbers[i])\n    }\n    return result\n}\n",
            "func parseNestedParens(_ parenString: String) -> [Int] {\n    var result = [Int]()\n    var parenGroups = parenString.split(separator: \" \")\n    for group in parenGroups {\n        var maxDepth = 0\n        var depth = 0\n        for ch in group {\n            if ch == \"(\" {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if ch == \")\" {\n                depth -= 1\n            }\n        }\n        result.append(maxDepth)\n    }\n    return result\n}\n",
            "func filterBySubstring(_ strs: [String], _ substring: String) -> [String] {\n    return strs.filter { $0.contains(substring) }\n}\n",
            "func sumProduct(_ numbers: [Int]) -> [Int] {\n    var nSum = 0\n    var nProduct = 1\n    for n in numbers {\n        nSum += n\n        nProduct *= n\n    }\n    return [nSum, nProduct]\n}\n",
            "func rollingMax(_ numbers: [Int]) -> [Int] {\n    var maxSoFar = Float.min\n    var result = [Int]()\n    for num in numbers {\n        maxSoFar = max(maxSoFar, num)\n        result.append(Int(maxSoFar))\n    }\n    return result\n}\n",
            "func isPalindrome(_ s: String) -> Bool {\n    return s == s.reversed()\n}\nfunc makePalindrome(_ s: String) -> String {\n    if isPalindrome(s) {\n        return s\n    }\n    for i in 0..<s.count {\n        if isPalindrome(s[i..<s.count]) {\n            return s + s[i..<s.count].reversed()\n        }\n    }\n    return \"\"\n}\n",
            "func stringXor(_ a: String, _ b: String) -> String {\n    return String(a.utf8.map { $0 ^ b.utf8[$0] })\n}\n",
            "func longest(_ strs: [String]) -> String? {\n    if strs.isEmpty {\n        return nil\n    }\n    var longestS = strs[0]\n    for s in strs {\n        if s.count > longestS.count {\n            longestS = s\n        }\n    }\n    return longestS\n}\n",
            "func greatestCommonDivisor(_ a: Int, _ b: Int) -> Int {\n    return b == 0? a : greatestCommonDivisor(b, a % b)\n}\n",
            "func allPrefixes(_ s: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<s.count {\n        prefixes.append(s[..<i + 1])\n    }\n    return prefixes\n}\n",
            "func stringSequence(_ n: Int) -> String {\n    return (0...n).map { String($0) }.joined(separator: \" \")\n}\n",
            "func countDistinctCharacters(_ s: String) -> Int {\n    return s.lowercased().characters.count\n}\n",
            "func parseMusic(_ musicString: String) -> [Int] {\n    var durations = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    var notes = musicString.split(separator: \" \")\n    return notes.map { note in durations[$0]! }\n}\n",
            "func howManyTimes(_ s: String, _ substring: String) -> Int {\n    var times = 0\n    for i in 0..<s.count - substring.count {\n        if s[i..<i + substring.count] == substring {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "func sortNumbers(_ numbers: String) -> String {\n    var numDict = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    var numList = numbers.split(\" \").filter { numDict[$0]!= nil }\n    numList.sort(by: { numDict[$0]! < numDict[$1]! })\n    return \" \".join(numList)\n}\n",
            "func findClosestElements(_ numbers: [Double]) -> [Double] {\n    var sortedNumbers = numbers.sorted()\n    var minDiff = Double.infinity\n    var closestPair = [Double]()\n    for i in 1..<sortedNumbers.count {\n        let diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]]\n        }\n    }\n    return closestPair\n}\n",
            "func rescaleToUnit(_ numbers: [Double]) -> [Double] {\n    var minNum = numbers.min()!\n    var maxNum = numbers.max()!\n    if minNum == maxNum {\n        return [0.0] * numbers.count\n    } else {\n        return [(num - minNum) / (maxNum - minNum) for num in numbers]\n    }\n}\n",
            "func filterIntegers(_ values: [Any]) -> [Int] {\n    return values.filter { $0 is Int }\n}\n",
            "func strLength(_ s: String) -> Int {\n    return s.count\n}\n",
            "func largestDivisor(_ n: Int) -> Int {\n    for i in 2...n {\n        if n % i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "func factorize(_ n: Int) -> [Int] {\n    var factors = [Int]()\n    var divisor = 2\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.append(divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "func removeDuplicates(_ numbers: [Int]) -> [Int] {\n    var counts = [Int: Int]()\n    for num in numbers {\n        counts[num] = counts[num]?? 0\n        counts[num] += 1\n    }\n    var res = [Int]()\n    for num in numbers {\n        if counts[num] == 1 {\n            res.append(num)\n        }\n    }\n    return res\n}\n",
            "func flipCase(_ s: String) -> String {\n    var flipped = [Character]()\n    for ch in s {\n        if!ch.isLetter {\n            flipped.append(ch)\n        } else if ch.isLowercase {\n            flipped.append(ch.uppercased())\n        } else if ch.isUppercase {\n            flipped.append(ch.lowercased())\n        }\n    }\n    return String(flipped)\n}\n",
            "func concatenate(_ strs: [String]) -> String {\n    return strs.joined(separator: \"\")\n}\n",
            "func filterByPrefix(_ strs: [String], _ prefixStr: String) -> [String] {\n    return strs.filter { $0.hasPrefix(prefixStr) }\n}\n",
            "func getPositive(_ l: [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    return n < 2? false : (2...Int(sqrt(Double(n))))\n       .filter { n % $0 == 0 }\n       .isEmpty\n}\n",
            "func poly(_ xs: [Int], _ x: Double) -> Double {\n    var res = 0.0\n    for i in 0..<xs.count {\n        res += xs[i] * x**Double(i)\n    }\n    return res\n}\nfunc findZero(_ xs: [Int]) -> Double {\n    var x1 = 1.0\n    var x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    while abs(x1 - x2) > 1e-10 {\n        let mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0 {\n            return mid\n        } else if poly(xs, mid) * poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "func sortThird(_ l: [Int]) -> [Int] {\n    var sortedThird = l[3..<l.count].sorted()\n    return l.enumerated().map { (i, e) -> Int in\n        return i % 3 == 0? sortedThird[i / 3] : e\n    }\n}\n",
            "func listUnique(_ l: [Int]) -> [Int] {\n    return sorted(Set(l))\n}\n",
            "func maxElement(_ l: [Int]) -> Int {\n    return l.isEmpty? 0 : max(l)\n}\n",
            "func fizzBuzz(_ n: Int) -> Int {\n    var cnt = 0\n    for i in 0..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += String(i).count(\"7\")\n        }\n    }\n    return cnt\n}\n",
            "func sortEven(_ l: [Int]) -> [Int] {\n    var sortedEven = l[0..<l.count].sorted(by: { $0 % 2 == 0 })\n    return [sortedEven[i // 2] if i % 2 == 0 else l[i] for i in 0..<l.count]\n}\n",
            "func encodeCyclic(_ s: String) -> String {\n    var result = [String]()\n    for i in 0..<s.count, i+2 < s.count {\n        result.append(s[i..<i+3])\n        result.append(s[i])\n    }\n    if s.count % 3!= 0 {\n        result.append(s[s.count..<s.count])\n    }\n    return result.joined()\n}\nfunc decodeCyclic(_ s: String) -> String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc primeFib(_ n: Int) -> Int {\n    var f = [0, 1]\n    var cnt = 0\n    while cnt < n {\n        f = [f[1], f[0] + f[1]]\n        if isPrime(f[1]) {\n            cnt += 1\n        }\n    }\n    return f[1]\n}\n",
            "func triplesSumToZero(_ l: [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in i..<l.count {\n            for k in j..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func carRaceCollision(_ n: Int) -> Int {\n    return n * n\n}\n",
            "func incrList(_ l: [Int]) -> [Int] {\n    return l.map { $0 + 1 }\n}\n",
            "func pairsSumToZero(_ l: [Int]) -> Bool {\n    var seen = Set<Int>()\n    for num in l {\n        if -num in seen {\n            return true\n        }\n        seen.insert(num)\n    }\n    return false\n}\n",
            "func changeBase(_ x: Int, _ bas: Int) -> String {\n    var digits = [String]()\n    while x > 0 {\n        digits.append(String(x % bas))\n        x /= bas\n    }\n    return digits.reversed().joined()\n}\n",
            "func triangleArea(_ a: Int, _ h: Int) -> Double {\n    return Double(a) * Double(h) / 2\n}\n",
            "func fib4(_ n: Int) -> Int {\n    var fib = [0, 0, 2, 0]\n    for i in 4...n {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3]\n        fib[0] = fib[1]\n        fib[1] = fib[2]\n        fib[2] = fib[3]\n        fib[3] = fib[0] + fib[1] + fib[2] + fib[3]\n    }\n    return fib[n % 4]\n}\n",
            "func median(_ l: [Double]) -> Double {\n    var sl = l.sorted()\n    if l.count % 2!= 0 {\n        return sl[l.count // 2]\n    } else {\n        return (sl[l.count // 2] + sl[l.count // 2 - 1]) / 2\n    }\n}\n",
            "func isPalindrome(_ txt: String) -> Bool {\n    return txt == txt.reversed()\n}\n",
            "func modp(_ n: Int, _ p: Int) -> Int {\n    var ret = 1\n    for _ in 0..<n {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func encodeShift(_ s: String) -> String {\n    return String(s.map { String(UnicodeScalar(UnicodeScalar(UnicodeScalar($0) - 97) + 5) % 26 + 97) })\n}\nfunc decodeShift(_ s: String) -> String {\n    return String(s.map { String(UnicodeScalar(UnicodeScalar(UnicodeScalar($0) - 97) + 21) % 26 + 97) })\n}\n",
            "func removeVowels(_ txt: String) -> String {\n    return txt.filter { $0.isLetter &&!$0.isVowel }\n}\n",
            "func belowThreshold(_ l: [Int], _ t: Int) -> Bool {\n    return l.filter { $0 < t }.count == l.count\n}\n",
            "func add(_ x: Int, _ y: Int) -> Int {\n    return x + y\n}\n",
            "func sameChars(_ s0: String, _ s1: String) -> Bool {\n    return s0.sorted() == s1.sorted()\n}\n",
            "func fib(_ n: Int) -> Int {\n    return n <= 1? n : fib(n - 1) + fib(n - 2)\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"<\" {\n            depth += 1\n        } else if b == \">\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func monotonic(_ l: [Int]) -> Bool {\n    return l.count > 1 && l.reduce(true) { $0 && ($1 <= 0 || $1 >= 0) }\n}\n",
            "func common(_ l1: [Int], _ l2: [Int]) -> [Int] {\n    return sorted(Set(l1).intersection(Set(l2)))\n}\n",
            "func largestPrimeFactor(_ n: Int) -> Int {\n    var i = 2\n    while i * i <= n {\n        if n % i:\n            i += 1\n        else:\n            n /= i\n    }\n    return n\n}\n",
            "func sumToN(_ n: Int) -> Int {\n    return (n * (n + 1)) / 2\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"(\" {\n            depth += 1\n        } else if b == \")\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func derivative(_ xs: [Int]) -> [Int] {\n    return xs.enumerated().map { (index, x) -> Int in\n        return x * index\n    }\n}\n",
            "func fibfib(_ n: Int) -> Int {\n    var a = 0\n    var b = 0\n    var c = 1\n    while n > 2 {\n        a, b, c = b, c, a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "func vowelsCount(_ s: String) -> Int {\n    var cnt = 0\n    for i in 0..<s.count {\n        if s[i].lowercased() in \"aeiou\" || (i == s.count - 1 && s[i].lowercased() == \"y\") {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "func circularShift(_ x: Int, _ shift: Int) -> String {\n    var xStr = String(x)\n    if shift > xStr.count {\n        return xStr.reversed()\n    } else {\n        return xStr.dropLast(shift) + xStr.prefix(shift)\n    }\n}\n",
            "func digitSum(_ s: String) -> Int {\n    return s.uppercased().map { Int($0.unicodeScalars.first!) }.reduce(0, +)\n}\n",
            "func fruitDistribution(_ s: String, _ n: Int) -> Int {\n    let words = s.split(separator: \" \")\n    let apples = Int(words[words.index(\"apples\") - 1])\n    let oranges = Int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n}\n",
            "func pluck(_ arr: [Int]) -> [Int] {\n    var evens = [Int]()\n    for n in arr {\n        if n % 2 == 0 {\n            evens.append(n)\n        }\n    }\n    if evens.count == 0 {\n        return []\n    }\n    var min_even = evens[0]\n    for n in evens {\n        if n < min_even {\n            min_even = n\n        }\n    }\n    return [min_even, arr.index(min_even)]\n}\n",
            "func search(_ lst: [Int]) -> Int {\n    var freqs = [Int: Int]()\n    for n in lst {\n        freqs[n] = freqs[n]?? 0\n        freqs[n] += 1\n    }\n    var goodVals = [Int]()\n    for (k, v) in freqs {\n        if v >= k {\n            goodVals.append(k)\n        }\n    }\n    return goodVals.isEmpty? -1 : max(goodVals)\n}\n",
            "func strangeSortList(_ lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var left = 0\n    var right = lst.count - 1\n    while left <= right {\n        result.append(lst[left])\n        left += 1\n        if left <= right {\n            result.append(lst[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "func triangleArea(_ a: Int, _ b: Int, _ c: Int) -> Double {\n    if a + b > c && a + c > b && b + c > a {\n        let s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        return -1.0\n    }\n}\n",
            "func willItFly(_ q: [Int], _ w: Int) -> Bool {\n    return q.count > 0 && q.reduce(0, +) <= w && q.reduce(0, { $0 + $1 }) == q.reduce(0, { $0 * $1 })\n}\n",
            "func smallestChange(_ arr: [Int]) -> Int {\n    var ans = 0\n    for i in 0..<arr.count / 2 {\n        if arr[i]!= arr[arr.count - i - 1] {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "func totalMatch(_ lst1: [String], _ lst2: [String]) -> [String] {\n    return lst1.count <= lst2.count? lst1 : lst2\n}\n",
            "func isMultiplyPrime(_ a: Int) -> Bool {\n    var cnt = 0\n    for i in 2...a {\n        if isPrime(i) {\n            while a % i == 0 {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "func isSimplePower(_ x: Int, _ n: Int) -> Bool {\n    return x == n || x % n == 0\n}\n",
            "func isCube(_ a: Int) -> Bool {\n    return abs(a) == pow(a, 1.0 / 3.0) * pow(a, 1.0 / 3.0) * pow(a, 1.0 / 3.0)\n}\n",
            "func hexKey(_ num: String) -> Int {\n    return num.count(of: \"2357BD\")\n}\n",
            "func decimalToBinary(_ dec: Int) -> String {\n    return \"db\" + String(format: \"%08b\", dec) + \"db\"\n}\n",
            "func isHappy(_ s: String) -> Bool {\n    var sum = 0\n    for i in 0..<s.count {\n        sum += Int(s[i]) * Int(s[(i + 1) % s.count])\n    }\n    var next = sum\n    while next!= 1 {\n        sum = 0\n        for i in 0..<s.count {\n            sum += Int(s[i]) * Int(s[(i + 1) % s.count])\n        }\n        next = sum\n    }\n    return true\n}\n",
            "func numericalLetterGrade(_ grades: [Double]) -> [String] {\n    var result = [String]()\n    for g in grades {\n        if g == 4.0 {\n            result.append(\"A+\")\n        } else if g > 3.7 {\n            result.append(\"A\")\n        } else if g > 3.3 {\n            result.append(\"A-\")\n        } else if g > 3.0 {\n            result.append(\"B+\")\n        } else if g > 2.7 {\n            result.append(\"B\")\n        } else if g > 2.3 {\n            result.append(\"B-\")\n        } else if g > 2.0 {\n            result.append(\"C+\")\n        } else if g > 1.7 {\n            result.append(\"C\")\n        } else if g > 1.3 {\n            result.append(\"C-\")\n        } else if g > 1.0 {\n            result.append(\"D+\")\n        } else if g > 0.7 {\n            result.append(\"D\")\n        } else if g > 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"E\")\n        }\n    }\n    return result\n}\n",
            "func primeLength(_ s: String) -> Bool {\n    let length = s.count\n    if length < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(length))) {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func startsOneEnds(_ n: Int) -> Int {\n    return n == 1? 1 : 2 * 9 * (10 ** (n - 2))\n}\n",
            "func solve(_ n: Int) -> String {\n    return String(n, radix: 2)\n}\n",
            "func add(_ lst: [Int]) -> Int {\n    var result = 0\n    for i in 0..<lst.count, lst[i] % 2 == 1, lst[i] % 2 == 0 {\n        result += lst[i]\n    }\n    return result\n}\n",
            "func antiShuffle(_ s: String) -> String {\n    return \" \".join(s.split(\" \").map { word in\n        return \"\".join(sorted(word))\n    })\n}\n",
            "func getRow(_ lst: [[Int]], _ x: Int) -> [[Int]] {\n    var coords = [Int]()\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            if lst[i][j] == x {\n                coords.append([i, j])\n            }\n        }\n    }\n    return coords.sorted(by: { a, b in\n        (a[0] < b[0])? true : (a[0] == b[0])? (a[1] > b[1]) : false\n    })\n}\n",
            "func sortArray(_ arr: [Int]) -> [Int] {\n    if arr.isEmpty {\n        return []\n    }\n    if (arr[0] + arr[arr.count - 1]) % 2 == 0 {\n        return arr.sorted(by: >)\n    } else {\n        return arr.sorted(by: <)\n    }\n}\n",
            "func encrypt(_ s: String) -> String {\n    var result = [Character]()\n    for ch in s {\n        let shifted = Int(ch) + 4\n        if shifted > Int(\"z\") {\n            shifted -= 26\n        }\n        result.append(Character(UnicodeScalar(shifted)))\n    }\n    return String(result)\n}\n",
            "func nextSmallest(_ lst: [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    return sorted(Set(lst))[1]\n}\n",
            "func isBored(_ s: String) -> Int {\n    let sentences = s.components(separatedBy: \".!?\")\n    return sentences.filter { $0.hasPrefix(\"I \") }.count\n}\n",
            "func anyInt(_ x: Any, _ y: Any, _ z: Any) -> Bool {\n    return (x as? Int)!= nil && (y as? Int)!= nil && (z as? Int)!= nil && (x as? Int)!.intValue + (y as? Int)!.intValue == (z as? Int)!.intValue || (x as? Int)!.intValue + (z as? Int)!.intValue == (y as? Int)!.intValue || (y as? Int)!.intValue + (z as? Int)!.intValue == (x as? Int)!.intValue\n}\n",
            "func encode(_ message: String) -> String {\n    var result = [String]()\n    for ch in message {\n        if ch.isLetter {\n            var ch1 = ch.uppercased()\n            if ch.isLowercase {\n                ch1 = ch1.uppercased()\n            }\n            if ch1.hasPrefix(\"AEIOU\") {\n                ch1 = String(UnicodeScalar(ch1.utf8.first!) + 2)\n            }\n            result.append(ch1)\n        } else {\n            result.append(ch)\n        }\n    }\n    return result.joined()\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc skjkasdkd(_ lst: [Int]) -> Int {\n    var primes = [Int]()\n    for n in lst {\n        if isPrime(n) {\n            primes.append(n)\n        }\n    }\n    if primes.count == 0 {\n        return 0\n    }\n    var largest = String(primes.max()!)\n    return Int(largest.reduce(0, +))\n}\n",
            "func checkDictCase(_ d: [String:String]) -> Bool {\n    return d.keys.all { $0.isLowercase } || d.keys.all { $0.isUppercase }\n}\n",
            "func countUpTo(_ n: Int) -> [Int] {\n    var primes = [Int]()\n    for num in 2...n {\n        if primes.isEmpty || primes.last % num!= 0 {\n            primes.append(num)\n        }\n    }\n    return primes\n}\n",
            "func multiply(_ a: Int, _ b: Int) -> Int {\n    return (a % 10) * (b % 10)\n}\n",
            "func countUpper(_ s: String) -> Int {\n    var vowels = \"AEIOU\"\n    var result = 0\n    for i in 0..<s.count, let c = s[i] where i % 2 == 0 && c in vowels {\n        result += 1\n    }\n    return result\n}\n",
            "func closestInteger(_ value: String) -> Int {\n    let num = Double(value)\n    return Int(num.rounded())\n}\n",
            "func makeAPile(_ n: Int) -> [Int] {\n    return (0..<n).map { $0 + 2 * $1 }\n}\n",
            "func wordsString(_ s: String) -> [String] {\n    return s.components(separatedBy: \", \")\n}\n",
            "func chooseNum(_ x: Int, _ y: Int) -> Int {\n    return y > x? -1 : y % 2 == 0? y : y - 1\n}\n",
            "func roundedAvg(_ n: Int, _ m: Int) -> String? {\n    if n > m {\n        return nil\n    }\n    let rAvg = Int((m + n) / 2.0 + 0.5)\n    return String(format: \"%08b\", rAvg)\n}\n",
            "func allDigitsOdd(_ s: String) -> Bool {\n    return s.characters.all { $0.unicodeScalars.first!.value % 2!= 0 }\n}\nfunc uniqueDigits(_ x: [Int]) -> [Int] {\n    return x.sorted { $0 < $1 }.filter { allDigitsOdd(String($0)) }\n}\n",
            "func byLength(_ arr: [Int]) -> [String] {\n    var digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    var sortedArr = arr.filter { $0 >= 1 && $0 <= 9 }\n    sortedArr.sort(by: { $0 > $1 })\n    return sortedArr.map { digitNames[$0-1] }\n}\n",
            "func f(_ n: Int) -> [Int] {\n    var nums = [Int]()\n    for i in 1...n {\n        nums.append(i)\n    }\n    return [nums.reduce(0, +) if nums[i] % 2!= 0 else nums.reduce(1, *) for i in 0..<nums.count]\n}\n",
            "func isPalindrome(_ txt: String) -> Bool {\n    return txt == txt.reversed()\n}\nfunc evenOddPalindrome(_ n: Int) -> [Int] {\n    var cnt = [0, 0]\n    for i in 1...n {\n        if isPalindrome(String(i)) {\n            cnt[(i % 2)] += 1\n        }\n    }\n    return cnt\n}\n",
            "func digitsSum(_ n: Int) -> Int {\n    var nStr = String(n)\n    if n >= 0 {\n        return nStr.map { Int($0) }.reduce(0, +)\n    } else {\n        return Int(nStr.prefix(2)) * 2 + digitsSum(abs(n))\n    }\n}\nfunc countNums(_ arr: [Int]) -> Int {\n    return arr.filter { digitsSum($0) > 0 }.count\n}\n",
            "func moveOneBall(_ arr: [Int]) -> Bool {\n    if arr.isEmpty {\n        return true\n    }\n    var sortedArr = arr.sorted()\n    for i in 0..<arr.count {\n        if arr[i..<] == sortedArr[..<arr.count - i] && arr[..<i] == sortedArr[arr.count - i..<] {\n            return true\n        }\n    }\n    return false\n}\n",
            "func canExchange(_ lst1: [Int], _ lst2: [Int]) -> String {\n    var oddCnt = 0\n    var evenCnt = 0\n    for num in lst1 {\n        if num % 2!= 0 {\n            oddCnt += 1\n        }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n            evenCnt += 1\n        }\n    }\n    return \"YES\" if evenCnt >= oddCnt else \"NO\"\n}\n",
            "func histogram(_ test: String) -> [String:Int] {\n    var freq = [String:Int]()\n    var words = test.split(\" \")\n    for w in words {\n        if w.count > 0 {\n            freq[w] = freq.get(w, 0) + 1\n        }\n    }\n    var result = [String:Int]()\n    if freq.count > 0 {\n        var maxFreq = 0\n        for (k, v) in freq {\n            if v > maxFreq {\n                maxFreq = v\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "func isPalindrome(_ s: String) -> Bool {\n    return s == s.reversed()\n}\nfunc reverseDelete(_ s: String, _ c: String) -> [String] {\n    var s1 = \"\"\n    for ch in s {\n        if ch!= c {\n            s1.append(ch)\n        }\n    }\n    return [s1, \"yes\" if isPalindrome(s1) else \"no\"]\n}\n",
            "func oddCount(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for num in lst {\n        var n = 0\n        for d in num {\n            n += d.unicodeScalars.first!.value % 2 == 1? 1 : 0\n        }\n        let rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replacingOccurrences(of: \"i\", with: String(n)))\n    }\n    return result\n}\n",
            "func minSubArraySum(_ nums: [Int]) -> Int {\n    var minSum = 0\n    var curSum = 0\n    for n in nums {\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if minSum == 0 {\n        minSum = min(nums)\n    }\n    return minSum\n}\n",
            "func maxFill(_ grid: [[Int]], _ capacity: Int) -> Int {\n    return grid.reduce(0) { (sum, arr) in\n        return sum + Int(ceil(Double(arr.reduce(0) { $0 + $1 }) / Double(capacity)))\n    }\n}\n",
            "func countOnes(_ num: Int) -> Int {\n    return String(num, radix: 2).count(\"1\")\n}\nfunc sortArray(_ arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) in\n        (countOnes(a), a) < (countOnes(b), b)\n    }\n}\n",
            "func selectWords(_ s: String, _ n: Int) -> [String] {\n    var consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var words = s.split(\" \")\n    return words.filter { w in w.count > 0 && w.count([c in c.lowercased() where consonants.contains(c)]) == n }\n}\n",
            "func getClosestVowel(_ word: String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    for i in stride(from: word.count - 2, to: 0, by: -1) {\n        if word[i] in vowels && word[i - 1]!= vowels[0] && word[i + 1]!= vowels[0] {\n            return word[i]\n        }\n    }\n    return \"\"\n}\n",
            "func matchParens(_ lst: [String]) -> String {\n    var s1 = lst[0] + lst[1]\n    var s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) || check(s2) else \"No\"\n}\n",
            "func maximum(_ arr: [Int], _ k: Int) -> [Int] {\n    return sorted(arr, descending: true).prefix(k)\n}\n",
            "func solution(_ lst: [Int]) -> Int {\n    return lst.filter { $0 % 2 == 0 && $0 % 2!= 0 }.reduce(0, +)\n}\n",
            "func addElements(_ arr: [Int], _ k: Int) -> Int {\n    return arr.prefix(k).reduce(0, +) { $0 + Int(String($1)) }\n}\n",
            "func getOddCollatz(_ n: Int) -> [Int] {\n    var collatz = [1]\n    while n!= 1 {\n        if n % 2!= 0 {\n            collatz.append(n)\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    return sorted(collatz)\n}\n",
            "func validDate(_ date: String) -> Bool {\n    return date.count == 10 && date[2] == \"-\" && date[5] == \"-\" && (date[0] >= \"1\" && date[0] <= \"9\") && (date[1] >= \"0\" && date[1] <= \"9\") && (date[3] >= \"1\" && date[3] <= \"9\") && (date[4] >= \"0\" && date[4] <= \"9\") && (date[6] >= \"1\" && date[6] <= \"9\") && (date[7] >= \"0\" && date[7] <= \"9\") && (date[8] >= \"1\" && date[8] <= \"9\") && (date[9] >= \"0\" && date[9] <= \"9\")\n}\n",
            "func splitWords(_ txt: String) -> [String] {\n    if txt.contains(\" \") {\n        return txt.components(separatedBy: \" \")\n    } else if txt.contains(\",\") {\n        return txt.components(separatedBy: \",\")\n    } else {\n        return [String(txt.count(where: { $0.isLowercased() && $0.unicodeScalars.first!.value % 2 == 0 }))]\n    }\n}\n",
            "func isSorted(_ lst: [Int]) -> Bool {\n    var freq = [Int: Int]()\n    for i in lst {\n        freq[i] = freq[i]?? 0\n        freq[i] += 1\n    }\n    return max(freq.values, default: 0) <= 2\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    return n > 1 && (n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0)\n}\nfunc intersection(_ interval1: [Int], _ interval2: [Int]) -> String {\n    let l = max(interval1[0], interval2[0])\n    let r = min(interval1[1], interval2[1])\n    let length = r - l\n    return \"YES\" if length > 0 && isPrime(length) else \"NO\"\n}\n",
            "func prodSigns(_ arr: [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    if 0 in arr {\n        return 0\n    }\n    let sign = -1 if arr.count(where: { $0 < 0 }) % 2 == 1 else 1\n    return sign * arr.reduce(0, +)\n}\n",
            "func minPath(_ grid: [[Int]], _ k: Int) -> [Int] {\n    var n = grid.count\n    var minVal = n * n + 1\n    for i in 0..<n {\n        for j in 0..<n {\n            if grid[i][j] == 1 {\n                var temp = [Int]()\n                if i!= 0 {\n                    temp.append(grid[i - 1][j])\n                }\n                if j!= 0 {\n                    temp.append(grid[i][j - 1])\n                }\n                if i!= n - 1 {\n                    temp.append(grid[i + 1][j])\n                }\n                if j!= n - 1 {\n                    temp.append(grid[i][j + 1])\n                }\n                minVal = min(temp)\n            }\n        }\n    }\n    var result = [Int]()\n    for i in 0..<k {\n        result.append(1 if i % 2 == 0 else minVal)\n    }\n    return result\n}\n",
            "func tri(_ n: Int) -> [Int] {\n    var seq = [1, 3]\n    for i in 2...n {\n        if i % 2 == 0 {\n            seq.append(i / 2 + 1)\n        } else {\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "func digits(_ n: Int) -> Int {\n    var odds = [Int]()\n    for d in String(n) {\n        if Int(d) % 2 == 1 {\n            odds.append(Int(d))\n        }\n    }\n    return odds.count > 0? odds.reduce(0, { $0 * $1 }) : 0\n}\n",
            "func isNested(_ s: String) -> Bool {\n    var openIdx = [Int]()\n    var closeIdx = [Int]()\n    for (i, ch) in s.enumerated() {\n        if ch == \"[\" {\n            openIdx.append(i)\n        } else if ch == \"]\" {\n            closeIdx.append(i)\n        }\n    }\n    closeIdx.reverse()\n    var cnt = 0\n    var i = 0\n    var l = closeIdx.count\n    for idx in openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\n",
            "func sumSquares(_ lst: [Double]) -> Int {\n    return lst.reduce(0, +) { $0 + pow(ceil($1), 2) }\n}\n",
            "func checkIfLastCharIsALetter(_ txt: String) -> Bool {\n    return txt.count > 0 && txt.last == \" \" && txt.last(1).isLetter\n}\n",
            "func canArrange(_ arr: [Int]) -> Int {\n    if arr.count <= 1 {\n        return -1\n    }\n    var idx = [Int]()\n    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1] {\n            idx.append(i)\n        }\n    }\n    return idx.count > 0? idx.max()! : -1\n}\n",
            "func largestSmallestIntegers(_ lst: [Int]) -> [Int?] {\n    var neg = [Int]()\n    var pos = [Int]()\n    for i in lst {\n        if i < 0 {\n            neg.append(i)\n        } else {\n            pos.append(i)\n        }\n    }\n    var maxNeg = neg.isEmpty? nil : neg.max()\n    var minPos = pos.isEmpty? nil : pos.min()\n    return [maxNeg, minPos]\n}\n",
            "func anyToReal(_ o: Any) -> Double {\n    if let o = o as? String {\n        return Double(o.replacingOccurrences(of: \",\", with: \".\"))!\n    } else if let o = o as? Int {\n        return Double(o)\n    } else if let o = o as? Double {\n        return o\n    }\n    throw RuntimeError(\"Type Error\")\n}\nfunc compareOne(_ a: Any, _ b: Any) -> Double? {\n    let a1 = anyToReal(a)\n    let b1 = anyToReal(b)\n    if a1 == b1 {\n        return nil\n    } else if a1 > b1 {\n        return a1\n    } else {\n        return b1\n    }\n}\n",
            "func isEqualToSumEven(_ n: Int) -> Bool {\n    return n % 2 == 0 && n >= 8\n}\n",
            "func specialFactorial(_ n: Int) -> Int {\n    var fact = 1\n    var result = 1\n    for i in 1...n {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "func fixSpaces(_ txt: String) -> String {\n    return txt.replacingOccurrences(of: \"  \", with: \"-\").replacingOccurrences(of: \" \", with: \"_\")\n}\n",
            "func fileNameCheck(_ fileName: String) -> String {\n    let suf = [\"txt\", \"exe\", \"dll\"]\n    let lst = fileName.split(\".\")\n    if lst.count!= 2 ||!lst[1] in suf || lst[0].isEmpty ||!lst[0][0].isalpha() || lst[0].count(of: CharacterSet.decimalDigits) > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "func sumSquares(_ lst: [Int]) -> Int {\n    var result = 0\n    for i in 0..<lst.count {\n        if i % 3 == 0 {\n            result += pow(lst[i], 2)\n        } else if i % 4 == 0 {\n            result += pow(lst[i], 3)\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc wordsInSentence(_ sentence: String) -> String {\n    var words = sentence.split(\" \")\n    return words.filter { isPrime(Int($0.count)) }.joined(separator: \" \")\n}\n",
            "func simplify(_ x: String, _ n: String) -> Bool {\n    let xs = x.components(separatedBy: \"/\")\n    let ns = n.components(separatedBy: \"/\")\n    let num = Int(xs[0])! * Int(ns[0])!\n    let den = Int(xs[1])! * Int(ns[1])!\n    return num % den == 0\n}\n",
            "func digitsSum(_ n: Int) -> Int {\n    var nStr = String(n)\n    if n >= 0 {\n        return nStr.map { Int($0) }.reduce(0, +)\n    } else {\n        return Int(nStr.prefix(2)) * 2 + digitsSum(abs(n))\n    }\n}\nfunc orderByPoints(_ nums: [Int]) -> [Int] {\n    return nums.sorted(by: { digitsSum($0) })\n}\n",
            "func specialFilter(_ nums: [Int]) -> Int {\n    return nums.filter { $0 > 10 && $0 % 2 == 1 && String($0)[0] == \"1\" || String($0)[0] == \"3\" || String($0)[0] == \"5\" || String($0)[0] == \"7\" || String($0)[0] == \"9\" }.count\n}\n",
            "func getMaxTriples(_ n: Int) -> Int {\n    var c = [0, 0, 0]\n    for i in 1...n {\n        let a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n}\n",
            "func bf(_ planet1: String, _ planet2: String) -> [String] {\n    let names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 == \"Mercury\" || planet2 == \"Mercury\" {\n        return []\n    }\n    if planet1 == \"Venus\" || planet2 == \"Venus\" {\n        return []\n    }\n    if planet1 == \"Earth\" || planet2 == \"Earth\" {\n        return []\n    }\n    if planet1 == \"Mars\" || planet2 == \"Mars\" {\n        return []\n    }\n    if planet1 == \"Jupiter\" || planet2 == \"Jupiter\" {\n        return []\n    }\n    if planet1 == \"Saturn\" || planet2 == \"Saturn\" {\n        return []\n    }\n    if planet1 == \"Uranus\" || planet2 == \"Uranus\" {\n        return []\n    }\n    if planet1 == \"Neptune\" || planet2 == \"Neptune\" {\n        return []\n    }\n    let l = names.index(of: planet1)\n    let r = names.index(of: planet2)\n    if l > r {\n        l, r = r, l\n    }\n    if l == r {\n        return []\n    }\n    return names[l + 1..<r]\n}\n",
            "func sortedListSum(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for s in lst {\n        if s.count % 2 == 0 {\n            result.append(s)\n        }\n    }\n    return sorted(result, key: { (s) -> (Int, String) in\n        return (s.count, s)\n    })\n}\n",
            "func xOrY(_ n: Int, _ x: Int, _ y: Int) -> Int {\n    if n < 2 {\n        return y\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func doubleTheDifference(_ lst: [Double]) -> Int {\n    return lst.filter { $0 >= 0 && $0 % 2 == 1 }.map { $0 * $0 }.reduce(0, +)\n}\n",
            "func compare(_ game: [Int], _ guess: [Int]) -> [Int] {\n    return (game.zip(guess)).map { abs($0.0 - $0.1) }\n}\n",
            "func strongestExtension(_ className: String, _ extensions: [String]) -> String {\n    var maxS = Float.infinity\n    var maxExt = \"\"\n    for ext in extensions {\n        var upper = 0\n        var lower = 0\n        for c in ext {\n            if c.isUppercase() {\n                upper += 1\n            } else if c.isLowercase() {\n                lower += 1\n            }\n        }\n        var s = upper - lower\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return \"\\(className).\\(maxExt)\"\n}\n",
            "func cycpatternCheck(_ a: String, _ b: String) -> Bool {\n    return a.count >= b.count && a.contains(b + b)\n}\n",
            "func evenOddCount(_ num: Int) -> [Int] {\n    var ds = String(abs(num))\n    var even = 0\n    for d in ds {\n        if d.isDigit && d.unicodeScalars.first!.value % 2 == 0 {\n            even += 1\n        }\n    }\n    return [even, ds.count - even]\n}\n",
            "func intToMiniRoman(_ num: Int) -> String {\n    var values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    var numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    var res = [String]()\n    for i in 0..<values.count {\n        while num >= values[i] {\n            res.append(numerals[i])\n            num -= values[i]\n        }\n    }\n    return res.joined()\n}\n",
            "func rightAngleTriangle(_ a: Int, _ b: Int, _ c: Int) -> Bool {\n    return (a * a + b * b == c * c)\n}\n",
            "func findMax(_ words: [String]) -> String {\n    var maxCnt = 0\n    var maxW = \"\"\n    for w in words {\n        var cnt = 0\n        for c in w {\n            if w.count(c) > 1 {\n                cnt += 1\n            }\n        }\n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        } else if cnt == maxCnt {\n            maxW = min(maxW, w)\n        }\n    }\n    return maxW\n}\n",
            "func eat(_ num: Int, _ need: Int, _ remaining: Int) -> [Int] {\n    return [num + remaining, 0]\n}\n",
            "func doAlgebra(_ operators: [String], _ operands: [Int]) -> Int {\n    var ops = operators.copy()\n    var nums = operands.copy()\n    var i = ops.count - 1\n    while i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n        }\n        i -= 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] // nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "func solve(_ s: String) -> String {\n    var result = [Character]()\n    for ch in s {\n        if ch.isLetter {\n            if ch.isLower {\n                result.append(ch.uppercased())\n            } else {\n                result.append(ch.lowercased())\n            }\n        } else {\n            result.append(ch)\n        }\n    }\n    return String(result)\n}\n",
            "func stringToMd5(_ txt: String) -> String? {\n    if txt.isEmpty {\n        return nil\n    }\n    let md5Hash = MD5()\n    md5Hash.update(txt.data(using:.utf8)!)\n    return md5Hash.hexdigest()\n}\n",
            "func generateIntegers(_ a: Int, _ b: Int) -> [Int] {\n    let lower = max(2, min(a, b))\n    let upper = min(8, max(a, b))\n    return (lower...upper).filter { $0 % 2 == 0 }\n}\n"
        ],
        "typescript": [
            "export const hasCloseElements = (numbers: Array<number>, threshold: number): boolean => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "export const separateParenGroups = (parenString: string): Array<string> => {\n    const groups: Array<string> = [];\n    const stk: Array<string> = [];\n    let currentGroup = \"\";\n    const parens = parenString.replace(\" \", \"\");\n    for (const ch of parens) {\n        if (ch === \"(\") {\n            stk.push(ch);\n            currentGroup += ch;\n        } else if (ch === \")\") {\n            stk.pop();\n            currentGroup += ch;\n            if (!stk.length) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "export const truncateNumber = (num: number): number => {\n    return num - Math.floor(num);\n}\n",
            "export const belowZero = (operations: Array<number>): boolean => {\n    let balance = 0;\n    for (const op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const meanAbsoluteDeviation = (numbers: Array<number>): number => {\n    const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    const deviation = numbers.reduce((a, b) => a + Math.abs(b - mean), 0);\n    return deviation / numbers.length;\n}\n",
            "export const intersperse = (numbers: Array<number>, delimiter: number): Array<number> => {\n    const result: Array<number> = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i!== 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "export const parseNestedParens = (parenString: string): Array<number> => {\n    const parenGroups = parenString.split(\" \");\n    const result: Array<number> = [];\n    for (const group of parenGroups) {\n        let maxDepth = 0;\n        let depth = 0;\n        for (const ch of group) {\n            if (ch === \"(\") {\n                depth += 1;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch === \")\") {\n                depth -= 1;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}\n",
            "export const filterBySubstring = (strs: Array<string>, substring: string): Array<string> => {\n    return strs.filter(s => substring in s);\n}\n",
            "export const sumProduct = (numbers: Array<number>): Array<number> => {\n    const nSum = numbers.reduce((acc, curr) => acc + curr, 0);\n    const nProduct = numbers.reduce((acc, curr) => acc * curr, 1);\n    return [nSum, nProduct];\n}\n",
            "export const rollingMax = (numbers: Array<number>): Array<number> => {\n    const result: Array<number> = [];\n    let maxSoFar = -Infinity;\n    for (const num of numbers) {\n        maxSoFar = Math.max(maxSoFar, num);\n        result.push(maxSoFar);\n    }\n    return result;\n}\n",
            "export const isPalindrome = (s: string): boolean => {\n    return s === s.split(\"\").reverse().join(\"\");\n}\nexport const makePalindrome = (s: string): string => {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (isPalindrome(s.slice(i))) {\n            return s + s.slice(0, i).split(\"\").reverse().join(\"\");\n        }\n    }\n    return \"\";\n}\n",
            "export const stringXor = (a: string, b: string): string => {\n    return a.split(\"\").map((x, i) => (x === b[i]? \"0\" : \"1\")).join(\"\");\n}\n",
            "export const longest = (strs: Array<string>): string | null => {\n    if (!strs.length) {\n        return null;\n    }\n    let longest_s = strs[0];\n    for (const s of strs) {\n        if (s.length > longest_s.length) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n",
            "export const greatestCommonDivisor = (a: number, b: number): number => {\n    if (b === 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "export const allPrefixes = (s: string): Array<string> => {\n    const prefixes: Array<string> = [];\n    for (let i = 0; i < s.length; i++) {\n        prefixes.push(s.slice(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "export const stringSequence = (n: number): string => {\n    return \" \".join([String(i) for i in range(n + 1)]);\n}\n",
            "export const countDistinctCharacters = (s: string): number => {\n    return new Set(s.toLowerCase()).size;\n}\n",
            "export const parseMusic = (musicString: string): Array<number> => {\n    const durations = {\n        o: 4,\n        o: 2,\n        \".\": 1,\n    };\n    const notes = musicString.split(\" \");\n    return notes.map((note) => durations[note]);\n}\n",
            "export const howManyTimes = (s: string, substring: string): number => {\n    let times = 0;\n    for (let i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.slice(i, i + substring.length) === substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "export const sortNumbers = (numbers: string): string => {\n    const numDict = {\n        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n        nine: 9,\n    };\n    const numList = numbers.split(\" \").filter((x) => x in numDict);\n    numList.sort((a, b) => numDict[a] - numDict[b]);\n    return numList.join(\" \");\n}\n",
            "export const findClosestElements = (numbers: Array<number>): Array<number> => {\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    let minDiff = Number.POSITIVE_INFINITY;\n    let closestPair = [];\n    for (let i = 1; i < sortedNumbers.length; i++) {\n        const diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "export const rescaleToUnit = (numbers: Array<number>): Array<number> => {\n    const minNum = Math.min(...numbers);\n    const maxNum = Math.max(...numbers);\n    if (minNum === maxNum) {\n        return new Array(numbers.length).fill(0.0);\n    } else {\n        return numbers.map((num) => (num - minNum) / (maxNum - minNum));\n    }\n}\n",
            "export const filterIntegers = (values: Array<any>): Array<number> => {\n    return values.filter(x => typeof x === \"number\");\n}\n",
            "export const strLength = (s: string): number => {\n    return s.length;\n}\n",
            "export const largestDivisor = (n: number): number => {\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "export const factorize = (n: number): Array<number> => {\n    const factors: Array<number> = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "export const removeDuplicates = (numbers: Array<number>): Array<number> => {\n    const counts: { [key: number]: number } = {};\n    for (const num of numbers) {\n        counts[num] = counts[num] || 0;\n        counts[num] += 1;\n    }\n    const res: Array<number> = [];\n    for (const num of numbers) {\n        if (counts[num] === 1) {\n            res.push(num);\n        }\n    }\n    return res;\n}\n",
            "export const flipCase = (s: string): string => {\n    const flipped: Array<string> = [];\n    for (const ch of s) {\n        if (!ch.match(/[a-zA-Z]/)) {\n            flipped.push(ch);\n        } else if (ch.match(/[a-z]/)) {\n            flipped.push(ch.toUpperCase());\n        } else {\n            flipped.push(ch.toLowerCase());\n        }\n    }\n    return flipped.join('');\n}\n",
            "export const concatenate = (strs: Array<string>): string => {\n    return strs.join(\"\");\n}\n",
            "export const filterByPrefix = (strs: Array<string>, prefixStr: string): Array<string> => {\n    return strs.filter(s => s.startsWith(prefixStr));\n}\n",
            "export const getPositive = (l: Array<number>): Array<number> => {\n    return l.filter(num => num > 0);\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(n)) >= i; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const poly = (xs: Array<number>, x: number): number => {\n    let res = 0.0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * x**i;\n    }\n    return res;\n}\nexport const findZero = (xs: Array<number>): number => {\n    let x1 = 1.0;\n    let x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        const mid = (x1 + x2) / 2;\n        if (poly(xs, mid) === 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "export const sortThird = (l: Array<number>): Array<number> => {\n    const sortedThird = l.slice(0, Math.ceil(l.length / 3)).sort((a, b) => a - b);\n    return l.map((e, i) => (i % 3 === 0? sortedThird[i // 3] : e));\n}\n",
            "export const listUnique = (l: Array<number>): Array<number> => {\n    return Array.from(new Set(l));\n}\n",
            "export const maxElement = (l: Array<number>): number => {\n    return l.length === 0? 0 : Math.max(...l);\n}\n",
            "export const fizzBuzz = (n: number): number => {\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += (\"\" + i).split(\"\").filter(x => x === \"7\").length;\n        }\n    }\n    return cnt;\n}\n",
            "export const sortEven = (l: Array<number>): Array<number> => {\n    const sortedEven = l.filter((e, i) => i % 2 === 0).sort((a, b) => a - b);\n    return l.map((e, i) => sortedEven[i // 2] || e);\n}\n",
            "export const encodeCyclic = (s: string): string => {\n    const result: Array<string> = [];\n    for (let i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.push(s.slice(i));\n        } else {\n            result.push(s.slice(i + 1, i + 3));\n            result.push(s[i]);\n        }\n    }\n    return result.join(\"\");\n}\nexport const decodeCyclic = (s: string): string => {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const primeFib = (n: number): number => {\n    let f = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\n",
            "export const triplesSumToZero = (l: Array<number>): boolean => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "export const carRaceCollision = (n: number): number => {\n    return n ** 2;\n}\n",
            "export const incrList = (l: Array<number>): Array<number> => {\n    return l.map(i => i + 1);\n}\n",
            "export const pairsSumToZero = (l: Array<number>): boolean => {\n    const seen = new Set<number>();\n    for (const num of l) {\n        if (-num in seen) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "export const changeBase = (x: number, bas: number): string => {\n    if (x === 0) {\n        return \"0\";\n    }\n    const digits: Array<string> = [];\n    while (x > 0) {\n        digits.push(x % bas + \"\");\n        x = Math.floor(x / bas);\n    }\n    return digits.reverse().join(\"\");\n}\n",
            "export const triangleArea = (a: number, h: number): number => {\n    return a * h / 2;\n}\n",
            "export const fib4 = (n: number): number => {\n    const fib = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n    }\n    return fib[n % 4];\n}\n",
            "export const median = (l: Array<number>): number => {\n    const sl = l.sort((a, b) => a - b);\n    if (l.length % 2!== 0) {\n        return sl[l.length // 2];\n    } else {\n        return (sl[l.length // 2] + sl[l.length // 2 - 1]) / 2;\n    }\n}\n",
            "export const isPalindrome = (txt: string): boolean => {\n    return txt === txt.split(\"\").reverse().join(\"\");\n}\n",
            "export const modp = (n: number, p: number): number => {\n    let ret = 1;\n    for (let _ = 0; _ < n; _++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "export const encodeShift = (s: string): string => {\n    return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - 97 + 5) % 26) + 97)).join(\"\");\n}\nexport const decodeShift = (s: string): string => {\n    return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - 97 + 21) % 26) + 97)).join(\"\");\n}\n",
            "export const removeVowels = (txt: string): string => {\n    return txt.replace(/[aeiouAEIOU]/g, \"\");\n}\n",
            "export const belowThreshold = (l: Array<number>, t: number): boolean => {\n    return l.every(x => x < t);\n}\n",
            "export const add = (x: number, y: number): number => {\n    return x + y;\n}\n",
            "export const sameChars = (s0: string, s1: string): boolean => {\n    return new Set(s0).size === new Set(s1).size;\n}\n",
            "export const fib = (n: number): number => {\n    if (n <= 1) {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n",
            "export const correctBracketing = (brackets: string): boolean => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"<\") {\n            depth += 1;\n        } else if (b === \">\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const monotonic = (l: Array<number>): boolean => {\n    const diff = l.slice(1).map((x, i) => x - l[i]);\n    return diff.every((x) => x <= 0) || diff.every((x) => x >= 0);\n}\n",
            "export const common = (l1: Array<number>, l2: Array<number>): Array<number> => {\n    return l1.filter(x => l2.includes(x));\n}\n",
            "export const largestPrimeFactor = (n: number): number => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}\n",
            "export const sumToN = (n: number): number => {\n    return n * (n + 1) / 2;\n}\n",
            "export const correctBracketing = (brackets: string): boolean => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"(\") {\n            depth += 1;\n        } else if (b === \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const derivative = (xs: Array<number>): Array<number> => {\n    return xs.map((x, i) => x * i);\n}\n",
            "export const fibfib = (n: number): number => {\n    let a = 0;\n    let b = 0;\n    let c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "export const vowelsCount = (s: string): number => {\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() === \"a\" || s[i].toLowerCase() === \"e\" || s[i].toLowerCase() === \"i\" || s[i].toLowerCase() === \"o\" || s[i].toLowerCase() === \"u\" || (i === s.length - 1 && s[i].toLowerCase() === \"y\")) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const circularShift = (x: number, shift: number): string => {\n    const xStr = String(x);\n    if (shift > xStr.length) {\n        return xStr.split(\"\").reverse().join(\"\");\n    } else {\n        return xStr.slice(-shift) + xStr.slice(0, -shift);\n    }\n}\n",
            "export const digitSum = (s: string): number => {\n    return s.split(\"\").reduce((acc, c) => acc + (c.toUpperCase()? c.charCodeAt(0) : 0), 0);\n}\n",
            "export const fruitDistribution = (s: string, n: number): number => {\n    const words = s.split(' ');\n    const apples = parseInt(words[words.indexOf('apples') - 1]);\n    const oranges = parseInt(words[words.indexOf('oranges') - 1]);\n    return n - apples - oranges;\n}\n",
            "export const pluck = (arr: Array<number>): Array<number> => {\n    const evens = arr.filter((n) => n % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n    const minEven = Math.min(...evens);\n    return [minEven, arr.indexOf(minEven)];\n}\n",
            "export const search = (lst: Array<number>): number => {\n    const freqs = {};\n    for (const n of lst) {\n        freqs[n] = freqs[n] || 0;\n        freqs[n] += 1;\n    }\n    const goodVals = Object.keys(freqs).filter(k => freqs[k] >= parseInt(k));\n    return Math.max(...goodVals, -1);\n}\n",
            "export const strangeSortList = (lst: Array<number>): Array<number> => {\n    const sl = lst.slice().sort((a, b) => a - b);\n    const result: Array<number> = [];\n    let left = 0;\n    let right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "export const triangleArea = (a: number, b: number, c: number): number => {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2.0;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "export const willItFly = (q: Array<number>, w: number): boolean => {\n    if (q.length === 0) {\n        return false;\n    }\n    const isPalin = q.every((e, i) => e === q[q.length - i - 1]);\n    const total = q.reduce((acc, e) => acc + e, 0);\n    return isPalin && total <= w;\n}\n",
            "export const smallestChange = (arr: Array<number>): number => {\n    let ans = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i]!== arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "export const totalMatch = (lst1: Array<string>, lst2: Array<string>): Array<string> => {\n    const cnt1 = lst1.reduce((acc, s) => acc + s.length, 0);\n    const cnt2 = lst2.reduce((acc, s) => acc + s.length, 0);\n    return cnt1 <= cnt2? lst1 : lst2;\n}\n",
            "export const isMultiplyPrime = (a: number): boolean => {\n    let cnt = 0;\n    for (let i = 2; i <= Math.floor(Math.sqrt(a)); i++) {\n        if (isPrime(i)) {\n            while (a % i === 0) {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    return cnt === 3;\n}\n",
            "export const isSimplePower = (x: number, n: number): boolean => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}\n",
            "export const isCube = (a: number): boolean => {\n    return Math.pow(Math.abs(a), 1 / 3) === Math.floor(Math.pow(Math.abs(a), 1 / 3));\n}\n",
            "export const hexKey = (num: string): number => {\n    return num.split(\"\").reduce((acc, curr) => {\n        if (curr === \"2\" || curr === \"3\" || curr === \"5\" || curr === \"7\" || curr === \"B\" || curr === \"D\") {\n            return acc + 1;\n        }\n        return acc;\n    }, 0);\n}\n",
            "export const decimalToBinary = (dec: number): string => {\n    return `db${dec.toString(2)}db`;\n}\n",
            "export const isHappy = (s: string): boolean => {\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const numericalLetterGrade = (grades: Array<number>): Array<string> => {\n    const result: Array<string> = [];\n    for (const g of grades) {\n        if (g === 4.0) {\n            result.push(\"A+\");\n        } else if (g > 3.7) {\n            result.push(\"A\");\n        } else if (g > 3.3) {\n            result.push(\"A-\");\n        } else if (g > 3.0) {\n            result.push(\"B+\");\n        } else if (g > 2.7) {\n            result.push(\"B\");\n        } else if (g > 2.3) {\n            result.push(\"B-\");\n        } else if (g > 2.0) {\n            result.push(\"C+\");\n        } else if (g > 1.7) {\n            result.push(\"C\");\n        } else if (g > 1.3) {\n            result.push(\"C-\");\n        } else if (g > 1.0) {\n            result.push(\"D+\");\n        } else if (g > 0.7) {\n            result.push(\"D\");\n        } else if (g > 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n",
            "export const primeLength = (s: string): boolean => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(length)) >= i; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const startsOneEnds = (n: number): number => {\n    return n === 1? 1 : 2 * 9 * (10 ** (n - 2));\n}\n",
            "export const solve = (n: number): string => {\n    const digitsSum = n.toString().split(\"\").reduce((acc, curr) => acc + parseInt(curr), 0);\n    return digitsSum.toString(2);\n}\n",
            "export const add = (lst: Array<number>): number => {\n    return lst.reduce((acc, cur, idx) => {\n        if (idx % 2 === 1 && cur % 2 === 0) {\n            return acc + cur;\n        }\n        return acc;\n    }, 0);\n}\n",
            "export const antiShuffle = (s: string): string => {\n    const words = s.split(\" \").map(word => word.split(\"\").sort().join(\"\"));\n    return words.join(\" \");\n}\n",
            "export const getRow = (lst: Array<Array<number>>, x: number): Array<Array<number>> => {\n    const coords: Array<[number, number]> = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    return coords.sort((a, b) => (a[0] === b[0]? b[1] - a[1] : a[0] - b[0]));\n}\n",
            "export const sortArray = (arr: Array<number>): Array<number> => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) {\n        return arr.sort((a, b) => b - a);\n    } else {\n        return arr.sort((a, b) => a - b);\n    }\n}\n",
            "export const encrypt = (s: string): string => {\n    const result: Array<string> = [];\n    for (const ch of s) {\n        const shifted = ord(ch) + 4;\n        if (shifted > ord('z')) {\n            shifted -= 26;\n        }\n        result.push(String.fromCharCode(shifted));\n    }\n    return result.join(\"\");\n}\n",
            "export const nextSmallest = (lst: Array<number>): number | null => {\n    const sl = lst.sort((a, b) => a - b);\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}\n",
            "export const isBored = (s: string): number => {\n    const sentences = s.split(\".!? \");\n    return sentences.reduce((acc, sentence) => acc + (sentence.startsWith(\"I \")? 1 : 0), 0);\n}\n",
            "export const anyInt = (x: any, y: any, z: any): boolean => {\n    return (\n        (typeof x === \"number\" && typeof y === \"number\" && typeof z === \"number\") &&\n        (x + y === z || x + z === y || y + z === x)\n    );\n}\n",
            "export const encode = (message: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    const result: Array<string> = [];\n    for (const ch of message) {\n        if (ch.isAlpha()) {\n            const ch1 = ch.toUpperCase() if ch.isLower() else ch.toLowerCase();\n            if (ch1 in vowels) {\n                ch1 = String.fromCharCode(ch1.charCodeAt(0) + 2);\n            }\n            result.push(ch1);\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const skjkasdkd = (lst: Array<number>): number => {\n    const primes = lst.filter(isPrime);\n    if (primes.length === 0) {\n        return 0;\n    }\n    const largest = String(Math.max(...primes));\n    return largest.split(\"\").reduce((acc, curr) => acc + Number(curr), 0);\n}\n",
            "export const checkDictCase = (d: Map<string, string>): boolean => {\n    if (!d) {\n        return false;\n    }\n    return d.every((value, key) => key.toLowerCase() === key || key.toUpperCase() === key);\n}\n",
            "export const countUpTo = (n: number): Array<number> => {\n    const primes: Array<number> = [];\n    for (let num = 2; num <= n; num++) {\n        if (primes.every(p => num % p!== 0)) {\n            primes.push(num);\n        }\n    }\n    return primes;\n}\n",
            "export const multiply = (a: number, b: number): number => {\n    return Math.abs(a) % 10 * Math.abs(b) % 10;\n}\n",
            "export const countUpper = (s: string): number => {\n    const vowels = \"AEIOU\";\n    return s.split(\"\").filter((c, i) => i % 2 === 0 && vowels.includes(c)).length;\n}\n",
            "export const closestInteger = (value: string): number => {\n    const num = parseFloat(value);\n    if (num >= 0) {\n        return Math.floor(num + 0.5);\n    } else {\n        return Math.ceil(num - 0.5);\n    }\n}\n",
            "export const makeAPile = (n: number): Array<number> => {\n    return Array.from({ length: n }, (_, i) => n + 2 * i);\n}\n",
            "export const wordsString = (s: string): Array<string> => {\n    return s.split(/[, ]/).filter(w => w.length > 0);\n}\n",
            "export const chooseNum = (x: number, y: number): number => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    return y - 1;\n}\n",
            "export const roundedAvg = (n: number, m: number): string | null => {\n    if (n > m) {\n        return null;\n    }\n    const rAvg = Math.floor((m + n) / 2.0 + 0.5);\n    return rAvg.toString(2);\n}\n",
            "export const allDigitsOdd = (s: string): boolean => {\n    return s.split(\"\").every((digit) => digit.charCodeAt(0) % 2!== 0);\n}\nexport const uniqueDigits = (x: Array<number>): Array<number> => {\n    return x.filter((num) => allDigitsOdd(num.toString())).sort((a, b) => a - b);\n}\n",
            "export const byLength = (arr: Array<number>): Array<string> => {\n    const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const sortedArr = arr.filter(x => 1 <= x && x <= 9).sort((a, b) => b - a);\n    return sortedArr.map(x => digitNames[x - 1]);\n}\n",
            "export const f = (n: number): Array<number> => {\n    const nums = Array.from(Array(n + 1).keys()).slice(1);\n    return nums.map((i) => (i % 2 === 0? nums.slice(0, i).reduce((x, y) => x + y, 0) : nums.slice(0, i).reduce((x, y) => x * y, 1)));\n}\n",
            "export const isPalindrome = (txt: string): boolean => {\n    return txt === txt.split(\"\").reverse().join(\"\");\n}\nexport const evenOddPalindrome = (n: number): Array<number> => {\n    const cnt: Array<number> = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(String(i))) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const digitsSum = (n: number): number => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split(\"\").map(d => parseInt(d)).reduce((a, b) => a + b, 0);\n    } else {\n        return parseInt(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n    }\n}\nexport const countNums = (arr: Array<number>): number => {\n    return arr.filter(n => digitsSum(n) > 0).length;\n}\n",
            "export const moveOneBall = (arr: Array<number>): boolean => {\n    if (arr.length === 0) {\n        return true;\n    }\n    const sortedArr = arr.sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.slice(i) === sortedArr.slice(0, arr.length - i) && arr.slice(0, i) === sortedArr.slice(arr.length - i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const canExchange = (lst1: Array<number>, lst2: Array<number>): string => {\n    const oddCnt = lst1.filter(num => num % 2!== 0).length;\n    const evenCnt = lst2.filter(num => num % 2 === 0).length;\n    return evenCnt >= oddCnt? \"YES\" : \"NO\";\n}\n",
            "export const histogram = (test: string): Map<string, number> => {\n    const freq: Map<string, number> = new Map();\n    const words = test.split(\" \").filter(w => w.length > 0);\n    for (const w of words) {\n        const count = freq.get(w) || 0;\n        freq.set(w, count + 1);\n    }\n    const result: Map<string, number> = new Map();\n    if (freq.size > 0) {\n        const maxFreq = Math.max(...freq.values());\n        for (const [k, v] of freq) {\n            if (v === maxFreq) {\n                result.set(k, v);\n            }\n        }\n    }\n    return result;\n}\n",
            "export const reverseDelete = (s: string, c: string): Array<string> => {\n    const s1 = s.split(\"\").filter(ch => c.indexOf(ch) === -1).join(\"\");\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"];\n}\n",
            "export const oddCount = (lst: Array<string>): Array<string> => {\n    const result: Array<string> = [];\n    for (const num of lst) {\n        const n = lst.reduce((acc, d) => acc + (d.charCodeAt(0) % 2 === 1? 1 : 0), 0);\n        const rs = \"the number of odd elements in the string i of the input.\";\n        result.push(rs.replace(\"i\", String(n)));\n    }\n    return result;\n}\n",
            "export const minSubArraySum = (nums: Array<number>): number => {\n    let minSum = 0;\n    let curSum = 0;\n    for (const n of nums) {\n        curSum = Math.min(curSum + n, 0);\n        minSum = Math.min(curSum, minSum);\n    }\n    if (minSum === 0) {\n        minSum = Math.min(...nums);\n    }\n    return minSum;\n}\n",
            "export const maxFill = (grid: Array<Array<number>>, capacity: number): number => {\n    return Math.ceil(grid.reduce((acc, row) => acc + row.reduce((acc, num) => acc + num, 0), 0) / capacity);\n}\n",
            "export const countOnes = (num: number): number => {\n    return num.toString(2).split(\"\").filter(x => x === \"1\").length;\n}\nexport const sortArray = (arr: Array<number>): Array<number> => {\n    return arr.sort((a, b) => {\n        const aCount = countOnes(a);\n        const bCount = countOnes(b);\n        if (aCount === bCount) {\n            return a - b;\n        }\n        return bCount - aCount;\n    });\n}\n",
            "export const selectWords = (s: string, n: number): Array<string> => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = s.split(\" \");\n    return words.filter(w => w.length > 0).filter(w => w.split(\"\").filter(c => c.toLowerCase() in consonants).length === n);\n}\n",
            "export const getClosestVowel = (word: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i >= 0; i--) {\n        if (word[i] in vowels && word[i - 1]!== vowels[0] && word[i + 1]!== vowels[0]) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "export const matchParens = (lst: Array<string>): string => {\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    return \"Yes\" if check(s1) || check(s2) else \"No\";\n}\n",
            "export const maximum = (arr: Array<number>, k: number): Array<number> => {\n    return arr.sort((a, b) => b - a).slice(0, k);\n}\n",
            "export const solution = (lst: Array<number>): number => {\n    return lst.reduce((acc, curr, idx) => {\n        if (idx % 2 === 0 && curr % 2!== 0) {\n            return acc + curr;\n        }\n        return acc;\n    }, 0);\n}\n",
            "export const addElements = (arr: Array<number>, k: number): number => {\n    return arr.slice(0, k).reduce((acc, cur) => acc + (cur < 10? cur : 0), 0);\n}\n",
            "export const getOddCollatz = (n: number): Array<number> => {\n    const collatz: Array<number> = [1];\n    while (n!== 1) {\n        if (n % 2!== 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    return collatz.sort((a, b) => a - b);\n}\n",
            "export const validDate = (date: string): boolean => {\n    if (date.length!== 10 || date[2]!== \"-\" || date[5]!== \"-\") {\n        return false;\n    }\n    const m = parseInt(date.substring(0, 2));\n    const d = parseInt(date.substring(3, 5));\n    if (m === 1 || m === 3 || m === 5 || m === 7 || m === 8 || m === 10 || m === 12) {\n        return d >= 1 && d <= 31;\n    }\n    if (m === 4 || m === 6 || m === 9 || m === 11) {\n        return d >= 1 && d <= 30;\n    }\n    if (m === 2) {\n        return d >= 1 && d <= 29;\n    }\n    return false;\n}\n",
            "export const splitWords = (txt: string): Array<string> => {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [String(txt.length - txt.replace(/[a-z]/gi, \"\").length)];\n    }\n}\n",
            "export const isSorted = (lst: Array<number>): boolean => {\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const intersection = (interval1: Array<number>, interval2: Array<number>): string => {\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n    return \"YES\" if length > 0 && isPrime(length) else \"NO\";\n}\n",
            "export const prodSigns = (arr: Array<number>): number | null => {\n    if (!arr.length) {\n        return null;\n    }\n    if (0 in arr) {\n        return 0;\n    }\n    const sign = -1 * (arr.filter(n => n < 0).length % 2 === 1);\n    return sign * arr.reduce((acc, n) => acc + Math.abs(n), 0);\n}\n",
            "export const minPath = (grid: Array<Array<number>>, k: number): Array<number> => {\n    const n = grid.length;\n    let minVal = n * n + 1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                const temp: Array<number> = [];\n                if (i!== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j!== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i!== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j!== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                minVal = Math.min(temp);\n            }\n        }\n    }\n    const result: Array<number> = [];\n    for (let i = 0; i < k; i++) {\n        result.push(1);\n        if (i % 2 === 0) {\n            result.push(minVal);\n        }\n    }\n    return result;\n}\n",
            "export const tri = (n: number): Array<number> => {\n    if (n === 0) {\n        return [1];\n    }\n    const seq = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "export const digits = (n: number): number => {\n    const odds = n.toString().split(\"\").filter(d => parseInt(d) % 2 === 1);\n    return odds.length > 0? odds.reduce((x, y) => x * y, 1) : 0;\n}\n",
            "export const isNested = (s: string): boolean => {\n    const openIdx: Array<number> = [];\n    const closeIdx: Array<number> = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === \"[\") {\n            openIdx.push(i);\n        } else if (s[i] === \"]\") {\n            closeIdx.push(i);\n        }\n    }\n    closeIdx.reverse();\n    let cnt = 0;\n    let i = 0;\n    const l = closeIdx.length;\n    for (const idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "export const sumSquares = (lst: Array<number>): number => {\n    return lst.reduce((acc, n) => acc + Math.pow(Math.ceil(n), 2), 0);\n}\n",
            "export const checkIfLastCharIsALetter = (txt: string): boolean => {\n    if (!txt) {\n        return false;\n    }\n    const last = txt.split(' ').pop();\n    return last.length === 1 && last[0].match(/[a-z]/i);\n}\n",
            "export const canArrange = (arr: Array<number>): number => {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    const idx = arr.slice(1).map((e, i) => i + 1).filter((e, i) => e < arr[i]);\n    return Math.max(...idx, -1);\n}\n",
            "export const largestSmallestIntegers = (lst: Array<number>): Array<number | null> => {\n    const neg = lst.filter(i => i < 0);\n    const pos = lst.filter(i => i > 0);\n    const maxNeg = neg.length > 0? Math.max(...neg) : null;\n    const minPos = pos.length > 0? Math.min(...pos) : null;\n    return [maxNeg, minPos];\n}\n",
            "export const anyToReal = (o: any): number => {\n    if (typeof o ==='string') {\n        return parseFloat(o.replace(',', '.'));\n    } else if (typeof o === 'number') {\n        return o;\n    } else if (typeof o === 'number') {\n        return o;\n    }\n    throw new Error('Type Error');\n}\nexport const compareOne = (a: any, b: any): number | null => {\n    const a1 = anyToReal(a);\n    const b1 = anyToReal(b);\n    if (a1 === b1) {\n        return null;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n}\n",
            "export const isEqualToSumEven = (n: number): boolean => {\n    return n % 2 === 0 && n >= 8;\n}\n",
            "export const specialFactorial = (n: number): number => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "export const fixSpaces = (txt: string): string => {\n    return txt.replace(/\\s{3,}/g, \"-\").replace(/\\s/g, \"_\");\n}\n",
            "export const fileNameCheck = (fileName: string): string => {\n    const suf = [\"txt\", \"exe\", \"dll\"];\n    const lst = fileName.split(\".\");\n    if (lst.length!== 2 ||!lst[1] in suf || lst[0].length === 0 ||!lst[0][0].match(/[a-zA-Z]/) || lst[0].match(/[0-9]/g).length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "export const sumSquares = (lst: Array<number>): number => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0) {\n            result += Math.pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const wordsInSentence = (sentence: string): string => {\n    const words = sentence.split(\" \");\n    return words.filter(w => isPrime(w.length)).join(\" \");\n}\n",
            "export const simplify = (x: string, n: string): boolean => {\n    const xs = x.split(\"/\");\n    const ns = n.split(\"/\");\n    const num = parseInt(xs[0]) * parseInt(ns[0]);\n    const den = parseInt(xs[1]) * parseInt(ns[1]);\n    return num % den === 0;\n}\n",
            "export const digitsSum = (n: number): number => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split(\"\").reduce((acc, d) => acc + parseInt(d), 0);\n    } else {\n        return parseInt(nStr[0]) * 2 + digitsSum(Math.abs(n));\n    }\n}\nexport const orderByPoints = (nums: Array<number>): Array<number> => {\n    return nums.sort((a, b) => digitsSum(b) - digitsSum(a));\n}\n",
            "export const specialFilter = (nums: Array<number>): number => {\n    return nums.filter(n => n > 10 && n % 2 === 1 && n.toString()[0] === \"1\" || n.toString()[0] === \"3\" || n.toString()[0] === \"5\" || n.toString()[0] === \"7\" || n.toString()[0] === \"9\").length;\n}\n",
            "export const getMaxTriples = (n: number): number => {\n    const c = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        const a = i * i - i + 1;\n        c[(a % 3)] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6;\n}\n",
            "export const bf = (planet1: string, planet2: string): Array<string> => {\n    const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (names.indexOf(planet1) === -1 || names.indexOf(planet2) === -1) {\n        return [];\n    }\n    const l = names.indexOf(planet1);\n    const r = names.indexOf(planet2);\n    if (l > r) {\n        l, r = r, l;\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n}\n",
            "export const sortedListSum = (lst: Array<string>): Array<string> => {\n    const result: Array<string> = [];\n    for (const s of lst) {\n        if (s.length % 2 === 0) {\n            result.push(s);\n        }\n    }\n    return result.sort((a, b) => (a.length - b.length) || a.localeCompare(b));\n}\n",
            "export const xOrY = (n: number, x: number, y: number): number => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; Math.floor(Math.sqrt(n)) + 1 > i; i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "export const doubleTheDifference = (lst: Array<number>): number => {\n    return lst.reduce((acc, n) => acc + (n >= 0 && n % 2 === 1? n * n : 0), 0);\n}\n",
            "export const compare = (game: Array<number>, guess: Array<number>): Array<number> => {\n    return game.map((x, i) => Math.abs(x - guess[i]));\n}\n",
            "export const strongestExtension = (className: string, extensions: Array<string>): string => {\n    let maxS = -Infinity;\n    let maxExt = \"\";\n    for (const ext of extensions) {\n        const upper = ext.split(\"\").filter((c) => c.toUpperCase() === c).length;\n        const lower = ext.split(\"\").filter((c) => c.toLowerCase() === c).length;\n        const s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return `${className}.${maxExt}`;\n}\n",
            "export const cycpatternCheck = (a: string, b: string): boolean => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; i++) {\n        if (b.slice(i) + b.slice(0, i) in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const evenOddCount = (num: number): Array<number> => {\n    const ds = String(Math.abs(num));\n    const even = ds.split(\"\").filter((d) => d.charCodeAt(0) % 2 === 0).length;\n    return [even, ds.length - even];\n}\n",
            "export const intToMiniRoman = (num: number): string => {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    const res: Array<string> = [];\n    for (let i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.push(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join(\"\");\n}\n",
            "export const rightAngleTriangle = (a: number, b: number, c: number): boolean => {\n    const s = [a, b, c].sort((a, b) => a - b);\n    return s[0] * s[0] + s[1] * s[1] === s[2] * s[2];\n}\n",
            "export const findMax = (words: Array<string>): string => {\n    let maxCnt = 0;\n    let maxW = \"\";\n    for (const w of words) {\n        const cnt = new Set(w).size;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt === maxCnt) {\n            maxW = maxW.length < w.length? w : maxW;\n        }\n    }\n    return maxW;\n}\n",
            "export const eat = (num: number, need: number, remaining: number): Array<number> => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "export const doAlgebra = (operators: Array<string>, operands: Array<number>): number => {\n    const ops = operators.slice();\n    const nums = operands.slice();\n    let i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] === \"**\") {\n            nums[i] = Math.pow(nums[i], nums[i + 1]);\n            nums.pop(i + 1);\n            ops.pop(i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        } else if (ops[i] === \"//\") {\n            nums[i] = nums[i] // nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        } else if (ops[i] === \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "export const solve = (s: string): string => {\n    const result: Array<string> = [];\n    for (const ch of s) {\n        if (!ch.match(/[a-zA-Z]/)) {\n            result.push(ch);\n        } else if (ch.match(/[A-Z]/)) {\n            result.push(ch.toLowerCase());\n        } else {\n            result.push(ch.toUpperCase());\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const stringToMd5 = (txt: string): string | null => {\n    if (!txt) {\n        return null;\n    }\n    const md5Hash = crypto.createHash(\"md5\");\n    md5Hash.update(txt);\n    return md5Hash.digest(\"hex\");\n}\n",
            "export const generateIntegers = (a: number, b: number): Array<number> => {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n    return [...Array(upper - lower + 1).keys()].map(i => lower + i);\n}\n"
        ]
    },
    "ruby": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num.floor()\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum([abs(x - mean) for x in numbers])\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split()\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    return [sum(numbers), reduce(lambda x, y: x * y, numbers)]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float(\"-inf\")\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    return [s[0:i] for i in range(len(s) + 1)]\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split()\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    return s.count(substring)\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [num_dict[x] for x in numbers.split(\" \") if x in num_dict]\n    num_list.sort()\n    return \" \".join([str(x) for x in num_list])\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [num - min_num / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = []\n    for num in numbers:\n        if counts[num] == 1:\n            res.append(num)\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    return False if n < 2 else all(n % i!= 0 for i in range(2, int(n ** 0.5) + 1))\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * x**i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = [x for i, x in enumerate(l) if i % 3 == 0]\n    return [sorted_third[i // 3] if i % 3 == 0 else x for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(str(i))\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(l, key=lambda x, i: i % 2 == 0)\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i+1:i+2]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(-num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    digits.reverse()\n    return \"\".join(digits)\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3]\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    l.sort()\n    if len(l) % 2!= 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return \"\".join(chr((ord(ch) - 97 + 5) % 26 + 97) for ch in s)\ndef decode_shift(s: str) -> str:\n    return \"\".join(chr((ord(ch) - 97 + 21) % 26 + 97) for ch in s)\n",
            "def remove_vowels(txt: str) -> str:\n    return \"\".join(char for char in txt if char not in \"aeiouAEIOU\")\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [b - a for a, b in zip(l, l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i!= 0:\n            i += 1\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs[1:], 1)]\n",
            "def fibfib(n: int) -> int:\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        x_str = x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n    else:\n        x_str = x_str[-shift:] + x_str[:-shift]\n    return x_str\n",
            "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = words.index('apples') - 1\n    oranges = words.index('oranges') - 1\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    result = []\n    left, right = 0, len(lst) - 1\n    while left <= right:\n        result.append(lst[left])\n        left += 1\n        if left <= right:\n            result.append(lst[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return s * (s - a) * (s - b) * (s - c) ** 0.5\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    return all(q[i] == q[-(i + 1)] for i in range(len(q))) and sum(q) <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return a ** (1.0 / 3.0) == a ** (1.0 / 3.0).round()\n",
            "def hex_key(num: str) -> int:\n    return num.count(\"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{dec:b}db\"\n",
            "def is_happy(s: str) -> bool:\n    return False if len(s) < 3 else False if s[0] == s[1] or s[0] == s[2] or s[1] == s[2] else True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * (10 ** (n - 2))\n",
            "def solve(n: int) -> str:\n    return bin(n).replace('0b', '')\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    return \" \".join(sorted(word, key=lambda x: x.lower())) for word in s.split(\" \")\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                coords.append([i, j])\n    coords.sort(key=lambda a: (a[0], -a[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    return min(lst[1:])\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\".!?\")\n    return sum(1 for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \")\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    return (x + y == z) or (x + z == y) or (y + z == x)\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr((ord(ch1) + 2) % 26 + ord('a'))\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = max(primes)\n    return sum(map(int, str(largest)))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(k.isupper() for k in d.keys()) or all(k.islower() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n + 1):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (a % 10) * (b % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return len([c for c in s if c.isalpha() and c.isupper() and c in vowels])\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return [w for w in s.split() if len(w) > 0]\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y - 1 if y!= x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = ((n + m) / 2.0 + 0.5).to_int()\n    return r_avg.to_bin()\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(ord(digit) % 2!= 0 for digit in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(n for n in x if all_digits_odd(str(n)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr.sort(reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [sum(nums[:i]) if i % 2!= 0 else reduce(lambda x, y: x * y, nums[:i]) for i in range(1, n + 1)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return 2 * int(n_str[0]) + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return sum(1 for n in arr if digits_sum(n) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr)-i] and arr[:i] == sorted_arr[len(arr)-i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2!= 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \").select(lambda w: w.length > 0)\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if freq.length > 0:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = \"\".join(ch for ch in s if ch not in c)\n    return [s1, s1 == s1[::-1] and \"yes\" or \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = num.count(d for d in num if d.isdigit() and int(d) % 2 == 1)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: (arr.sum / capacity), grid))\n",
            "def count_ones(num: int) -> int:\n    return num.bit_length() - num.bit_count()\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda n: (count_ones(n), n))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if len(w) > 0 and len(set(w).intersection(consonants)) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if vowels.find(word[i])!= -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr, reverse=True)[:k]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 1)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len([c for c in txt if c.islower() and c.isalpha() and c.isupper()]))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not all(a <= b for a, b in zip(lst, lst[1:])):\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    return max(freq.values()) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = (arr.count(lambda n: n < 0) % 2 == 1) * -1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 and 1 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    return 0 if n == 0 else int(str(n)[::2].replace('0', '')) * int(str(n)[1::2].replace('0', ''))\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(n.ceil() ** 2 for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    return False if not txt else txt[-1].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(',', '.'))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    else:\n        raise Exception('Type Error')\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"  \", \" \").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or not lst[1] in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or sum(1 for c in lst[0] if c.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(w for w in words if is_prime(len(w)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = xs[0].to_i * ns[0].to_i\n    den = xs[1].to_i * ns[1].to_i\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    return sum(int(c) for c in str(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(n > 10 and n % 2 == 1 and odds.find(str(n)[0]) >= 0 for n in nums)\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    result.sort(key=lambda s: (len(s), s))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum([n * n for n in lst if n >= 0 and n % 2 == 1])\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -float('inf')\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    return False if len(a) < len(b)\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i])!= -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = 0\n    for d in ds:\n        if int(d) % 2 == 0:\n            even += 1\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    return a * a + b * b == c * c\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    return [num + remaining, 0] if need <= remaining else [num + need, remaining - need]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    md5_hash = md5()\n    md5_hash.update(txt.encode())\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "rust": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if (numbers[i] - numbers[j]).abs() < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    stk = []\n    groups = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num.floor()\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_group = paren_string.split()\n    for group in paren_group:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    return [sum(numbers), reduce(lambda x, y: x * y, numbers)]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -1\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(map(lambda x: '0' if x[0] == x[1] else '1', zip(a, b)))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    return greatest_common_divisor(b, a % b) if b!= 0 else a\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(Counter(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = defaultdict(int, {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1\n    })\n    notes = music_string.split()\n    parsed_notes = [durations[note] for note in notes]\n    return parsed_notes\n",
            "def how_many_times(s: str, substring: str) -> int:\n    return s.count(substring)\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = defaultdict(int)\n    for num in numbers.split(\" \"):\n        num_dict[num] += 1\n    num_list = []\n    for num in num_dict:\n        num_list.extend([num] * num_dict[num])\n    return \" \".join(sorted(num_list))\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = numbers.copy()\n    sorted_numbers.sort()\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [num / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = defaultdict(int)\n    res = []\n    for num in numbers:\n        counts[num] += 1\n    for num in numbers:\n        if counts[num] == 1:\n            res.append(num)\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                flipped += ch.upper()\n            else:\n                flipped += ch.lower()\n        else:\n            flipped += ch\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * x.powi(i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0.0:\n        x1 *= 2.0\n        x2 *= 2.0\n    while (x1 - x2).abs() > 1e-10:\n        mid = (x1 + x2) / 2.0\n        if poly(xs, mid) == 0.0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0.0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2.0\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = [x for i, x in enumerate(l) if i % 3 == 0]\n    sorted_third.sort()\n    return [sorted_third[i // 3] if i % 3 == 0 else x for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    result = sorted(l)\n    result = list(set(result))\n    return result\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += i.to_string().count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = [x for i, x in enumerate(l) if i % 2 == 0]\n    sorted_even.sort()\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n * n\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = defaultdict(int)\n    for num in l:\n        seen[num] += 1\n        if seen[-num] > 1:\n            return True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    digits.reverse()\n    return \"\".join(digits)\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[(i % 4)] = sum(fib)\n    return fib[(n % 4)]\n",
            "def median(l: List[float]) -> float:\n    sl = l.copy()\n    sl.sort()\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2.0\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for _ in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return \"\".join(chr((ord(ch) - 97 + 5) % 26 + 97) for ch in s)\ndef decode_shift(s: str) -> str:\n    return \"\".join(chr((ord(ch) - 97 + 21) % 26 + 97) for ch in s)\n",
            "def remove_vowels(txt: str) -> str:\n    return ''.join(c for c in txt if c not in 'aeiouAEIOU')\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    return n if n <= 1 else fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [y - x for x, y in zip(l, l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    result = [x for x in l1 if x in l2]\n    result.sort()\n    result.dedup()\n    return result\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n /= i\n        else:\n            i += 1\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs[1:])]\n",
            "def fibfib(n: int) -> int:\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if vowels.find(s[i:i+1].lower())!= -1 or (i == len(s) - 1 and s[i:i+1].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(c for c in s if c.is_ascii_uppercase())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = defaultdict(int)\n    for n in lst:\n        freqs[n] += 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst.copy()\n    sl.sort()\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return s * (s - a) * (s - b) * (s - c).sqrt()\n    return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    return (q == q[::-1]) and sum(q) <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    a = a\n    while a > 1:\n        if is_prime(a):\n            cnt += 1\n            a //= a\n        else:\n            a -= 1\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return a == a**3\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for x in num if \"2357BD\".find(x)!= -1)\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{bin(dec)[2:]}db\"\n",
            "def is_happy(s: str) -> bool:\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 2 * 9 * (10 ** (n - 2))\n",
            "def solve(n: int) -> str:\n    return format(n, \"b\")\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    words = [sorted(word) for word in words]\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda x: (x[0], x[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    result = arr.copy()\n    if (arr[0] + arr[len(arr) - 1]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        result.sort()\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > 122:\n            result += chr((shifted - 26) % 26 + 97)\n        else:\n            result += chr(shifted % 26 + 97)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(lst)\n    sl = list(set(sl))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = split(r\"[.!?]\\s*\", s)\n    return sum(1 for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \")\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if vowels.find(ch1)!= -1:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum(map(int, str(largest)))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n + 1):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (a.abs() % 10) * (b.abs() % 10)\n",
            "def count_upper(s: str) -> int:\n    return sum(i % 2 == 0 and c in \"AEIOU\" for i, c in enumerate(s))\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    return int(num + 0.5) if num >= 0.0 else int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return list(filter(lambda w: len(w) > 0, split(r\"[, ]\", s)))\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if y!= x:\n        return y - 1\n    return -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = ((n + m) / 2 + 0.5)\n    return format(r_avg, \"b\")\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(digit % 2!= 0 for digit in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(filter(all_digits_odd, x))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr.sort()\n    sorted_arr.reverse()\n    return [digit_names[(x - 1) as usize] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [sum(nums[:i]) if i % 2!= 0 else prod(nums[:i]) for i in range(1, n + 1)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[(i % 2) as usize] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    if n >= 0:\n        return sum(int(d) for d in str(n))\n    else:\n        return 2 * int(n[0]) + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return sum(1 for n in arr if digits_sum(n) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(n % 2!= 0 for n in lst1)\n    even_cnt = sum(n % 2 == 0 for n in lst2)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = defaultdict(int)\n    for w in test.split(\" \"):\n        freq[w] += 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for (k, v) in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef reverse_delete(s: str, c: str) -> List[str]:\n    s1 = \"\".join(ch for ch in s if ch not in c)\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([d for d in num if d % 2 == 1])\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: (arr.sum() / capacity as f64).ceil(), grid))\n",
            "def count_ones(num: int) -> int:\n    return len([c for c in format(num, 'b') if c == '1'])\ndef sort_array(arr: List[int]) -> List[int]:\n    arr.sort(key=lambda x: (count_ones(x), x))\n    return arr\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words: List[str] = s.split(\" \")\n    return [w for w in words if len(w) > 0 and len(list(filter(lambda c: consonants.find(c.lower())!= -1, w))) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(1, len(word) - 1, -1):\n        if vowels.find(word[i])!= -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    if check(s1) or check(s2):\n        return 'Yes'\n    else:\n        return 'No'\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    result = arr.copy()\n    result.sort()\n    return result[result.len() - k:].copy()\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    n = n\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len(txt.lower().strip().split(\"\")[::2]))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    freq = Counter(lst)\n    return freq.most_common(1)[0][1] <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(n < 0) % 2 == 1 else 1\n    return sign * sum(n.abs() for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = (n * n + 1)\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    return int(''.join(str(d) for d in str(n) if d.isdigit() and int(d) % 2 == 1))\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for (i, ch) in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(n.ceil() ** 2 for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    return len(txt) > 0 and txt[-1].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg, default=None)\n    min_pos = min(pos, default=None)\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return o.replace(\",\", \".\").parse::<float>().unwrap()\n    elif isinstance(o, int):\n        return o\n    elif isinstance(o, float):\n        return o\n    else:\n        raise TypeError(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split('.')\n    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0].isalpha() or lst[0].isdigit():\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    return \" \".join(w for w in words if is_prime(len(w)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    return int(n_str[0:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    result = nums.copy()\n    result.sort(key=digits_sum)\n    return result\n",
            "def special_filter(nums: List[int]) -> int:\n    return len([n for n in nums if n > 10 and n % 2 == 1 and str(n)[0] in \"13579\"])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[(a % 3) as usize] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        (l, r) = (r, l)\n    if l == r:\n        return []\n    return names[l+1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    result.sort(key=lambda s: (len(s), s))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0.0 and n % 2.0 == 1.0)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return \"{}.{}\".format(class_name, max_ext)\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    return a.find(b + b[::-1])!= -1\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    num = num\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    return a * a + b * b == c * c\n",
            "def find_max(words: List[str]) -> str:\n    cnt = Counter(words)\n    max_w = \"\"\n    max_cnt = 0\n    for w in cnt:\n        if cnt[w] > max_cnt:\n            max_cnt = cnt[w]\n            max_w = w\n        elif cnt[w] == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    return [num + remaining, 0] if need <= remaining else [num + need, remaining - need]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i].pow(nums[i + 1])\n            nums.remove(i + 1)\n            ops.remove(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        i += 1\n    nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            result += ch.lower() if ch.islower() else ch.upper()\n        else:\n            result += ch\n    return result[::-1]\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    md5_hash = md5()\n    md5_hash.update(txt.encode())\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    return [x for x in range(max(2, min(a, b)), min(8, max(a, b))) if x % 2 == 0]\n"
        ]
    },
    "scala": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num.floor\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \").filter(len)\n    for paren_group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in paren_group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -1\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join(map(lambda x: \"0\" if x[0] == x[1] else \"1\", zip(a, b)))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    result = []\n    for i in range(1, len(s) + 1):\n        result.append(s[:i])\n    return result\n",
            "def string_sequence(n: int) -> str:\n    return \" \" * n\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \").filter(lambda x: len(x) > 0)\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    return s.count(substring)\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = [num for num in numbers.split(\" \") if num_dict.get(num)]\n    sorted_list = sorted(num_list, key=num_dict.get)\n    return \" \".join(sorted_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    def factorize_acc(n: int, i: int):\n        if i > n:\n            return\n        if n % i == 0:\n            factors.append(i)\n            factorize_acc(n // i, i)\n        else:\n            factorize_acc(n, i + 1)\n    factorize_acc(n, 2)\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = []\n    for num in numbers:\n        if counts[num] == 1:\n            res.append(num)\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        else:\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = [x for (i, x) in enumerate(l) if i % 3 == 0]\n    return [sorted_third[i // 3] if i % 3 == 0 else x for (i, x) in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l) if l else 0\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count('7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = [x for (i, x) in enumerate(l) if i % 2 == 0]\n    return [sorted_even[i // 2] if i % 2 == 0 else x for (i, x) in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = ''\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(-num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    def acc(x0: int):\n        if x0 > 0:\n            digits.append(str(x0 % bas))\n            acc(x0 // bas)\n    acc(x)\n    digits.reverse()\n    return \"\".join(digits)\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3]\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return \"\".join(chr((ord(ch) - 97 + 5) % 26 + 97) for ch in s)\ndef decode_shift(s: str) -> str:\n    return \"\".join(chr((ord(ch) - 97 + 21) % 26 + 97) for ch in s)\n",
            "def remove_vowels(txt: str) -> str:\n    return ''.join(c for c in txt if c not in 'aeiouAEIOU')\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [b - a for a, b in zip(l, l[1:])]\n    return all(diff <= 0) or all(diff >= 0)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    def acc(n0: int) -> int:\n        if i * i > n0:\n            n0\n        else:\n            if n0 % i!= 0:\n                i += 1\n                acc(n0)\n            else:\n                acc(n0 / i)\n    return acc(n)\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for x, i in zip(xs, range(1, len(xs)))]\n",
            "def fibfib(n: int) -> int:\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(c.isupper() and ord(c) - ord('A') + 1 for c in s)\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = defaultdict(int)\n    for n in lst:\n        freqs[n] += 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    return (0 <= q and q <= w) and (q == q[::-1])\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    if cnt1 <= cnt2:\n        return lst1\n    else:\n        return lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            a = a // i\n            while a % i == 0:\n                cnt += 1\n                a = a // i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return a == round(pow(a, 1.0 / 3.0)) ** 3\n",
            "def hex_key(num: str) -> int:\n    return num.count(\"2357BD\".contains(_))\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{dec.to_bytes(1, 'big').hex()}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        match g:\n            case 4.0:\n                result.append(\"A+\")\n            case g > 3.7:\n                result.append(\"A\")\n            case g > 3.3:\n                result.append(\"A-\")\n            case g > 3.0:\n                result.append(\"B+\")\n            case g > 2.7:\n                result.append(\"B\")\n            case g > 2.3:\n                result.append(\"B-\")\n            case g > 2.0:\n                result.append(\"C+\")\n            case g > 1.7:\n                result.append(\"C\")\n            case g > 1.3:\n                result.append(\"C-\")\n            case g > 1.0:\n                result.append(\"D+\")\n            case g > 0.7:\n                result.append(\"D\")\n            case g > 0.0:\n                result += \"D-\"\n            case _:\n                result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 1 if n == 1 else 2 * 9 * pow(10, n - 2).toInt\n",
            "def solve(n: int) -> str:\n    return bin(n)[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for x, i in lst if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    return \" \".join(sorted(word) for word in s.split(\" \"))\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda a: (a[0], -a[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = ''\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > 122:\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\"[.!?]\\\\s*\")\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \"])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        a = x\n        b = y\n        c = z\n        if (a + b == c) or (a + c == b) or (b + c == a):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = max(primes)\n    return sum([int(c) for c in str(largest)])\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (a % 10) * (b % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(\"[, ]\").filter(lambda x: len(x) > 0).tolist()\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if y!= x:\n        return y - 1\n    return -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = ((n + m) / 2 + 0.5).floor\n    return r_avg.to_bin(width=32)\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(int(c) % 2!= 0 for c in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(x, key=lambda x: all_digits_odd(str(x)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr.sort(reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [sum(nums[:i]) if i % 2!= 0 else reduce(lambda x, y: x * y, nums[:i]) for i in nums]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return 2 * int(n_str[:2]) + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return sum(map(digits_sum, arr))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = lst1.count(lambda x: x % 2!= 0)\n    even_cnt = lst2.count(lambda x: x % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = defaultdict(int)\n    words = test.split(\" \").filter(_.length > 0)\n    for w in words:\n        freq[w] += 1\n    result = {}\n    if freq:\n        maxFreq = max(freq.values())\n        for k, v in freq.items():\n            if v == maxFreq:\n                result[k] = v\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(c for c in s if c not in c)\n    return [s1, 'yes' if is_palindrome(s1) else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len(list(filter(lambda x: x.isdigit() and int(x) % 2 == 1, num)))\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = nums.min()\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(ceil(sum(arr) / capacity) for arr in grid)\n",
            "def count_ones(num: int) -> int:\n    return num.bit_length() - num.count('0')\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").filter(lambda w: len(w) > 0)\n    return words.filter(lambda w: w.count(lambda c: consonants.lower().contains(c)) == n)\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if vowels.find(word[i])!= -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    if check(s1) or check(s2):\n        return 'Yes'\n    else:\n        return 'No'\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr, reverse=True)[:k]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for x, i in zip(lst, range(len(lst))) if i % 2 == 0 and x % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(arr[:k]) if all(len(str(num)) <= 2 for num in arr[:k]) else -1\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    num = n\n    while num!= 1:\n        if num % 2!= 0:\n            collatz.append(num)\n            num = 3 * num + 1\n        else:\n            num = num / 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len(txt.lower().strip().replace(\"o\", \"0\").replace(\"i\", \"1\").replace(\"l\", \"1\").replace(\"s\", \"5\").replace(\"t\", \"7\").replace(\"a\", \"4\").replace(\"e\", \"3\").replace(\"r\", \"6\").replace(\"n\", \"2\").replace(\"u\", \"8\").replace(\"d\", \"9\").replace(\"c\", \"8\").replace(\"m\", \"5\").replace(\"p\", \"9\").replace(\"b\", \"6\").replace(\"f\", \"4\").replace(\"g\", \"6\").replace(\"h\", \"8\").replace(\"j\", \"1\").replace(\"k\", \"1\").replace(\"q\", \"9\").replace(\"v\", \"5\").replace(\"w\", \"5\").replace(\"x\", \"5\").replace(\"y\", \"5\").replace(\"z\", \"5\").replace(\" \", \"\"))) if txt.lower().strip().replace(\"o\", \"0\").replace(\"i\", \"1\").replace(\"l\", \"1\").replace(\"s\", \"5\").replace(\"t\", \"7\").replace(\"a\", \"4\").replace(\"e\", \"3\").replace(\"r\", \"6\").replace(\"n\", \"2\").replace(\"u\", \"8\").replace(\"d\", \"9\").replace(\"c\", \"8\").replace(\"m\", \"5\").replace(\"p\", \"9\").replace(\"b\", \"6\").replace(\"f\", \"4\").replace(\"g\", \"6\").replace(\"h\", \"8\").replace(\"j\", \"1\").replace(\"k\", \"1\").replace(\"q\", \"9\").replace(\"v\", \"5\").replace(\"w\", \"5\").replace(\"x\", \"5\").replace(\"y\", \"5\").replace(\"z\", \"5\").replace(\" \", \"\") else \"0\"]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(x[0] <= x[1] for x in lst.sliding(2)) and max(lst.count(x) for x in set(lst)) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(lambda x: x < 0) % 2 == 1 else 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    return 0 if n == 0 else int(str(n).replace('0', '').replace('1', ''))\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for (ch, i) in zip(s, range(len(s))):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx = close_idx[::-1]\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: int(ceil(n) ** 2), lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if txt == '':\n        return False\n    last = txt.split(' ')[-1]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    raise Exception(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return Some(a1)\n    else:\n        return Some(b1)\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"  \", \" \").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or not lst[1] in [\"txt\", \"exe\", \"dll\"] or not lst[0] or not lst[0][0].isalpha() or lst[0].count(str.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(w for w in words if is_prime(len(w)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return 2 * int(n_str[:2]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len(list(filter(lambda n: n > 10 and n % 2 == 1 and odds.contains(str(n)[0]), nums)))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[(a % 3)] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    result.sort(key=lambda s: (len(s), s))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum([n * n for n in lst if n >= 0 and n % 2 == 1])\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = ext.count(str.isupper)\n        lower = ext.count(str.islower)\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i])!= -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = ds.count(d => int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    def loop(num: int, i: int) -> None:\n        if num == 0:\n            return\n        elif num >= values[i]:\n            res += numerals[i]\n            loop(num - values[i], i)\n        else:\n            loop(num, i + 1)\n    loop(num, 0)\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    return a * a + b * b == c * c\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(w, max_w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    return [num + need, remaining - need] if need <= remaining else [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.remove(i + 1)\n            ops.remove(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        i += 1\n    nums[0]\n",
            "def solve(s: str) -> str:\n    result = []\n    for ch in s:\n        if not ch.isalpha():\n            result.append(ch)\n        elif ch.isupper():\n            result.append(ch.lower())\n        else:\n            result.append(ch.upper())\n    return \"\".join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    md5_hash = md5(txt.encode())\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [x for x in range(lower, upper) if x % 2 == 0]\n"
        ]
    },
    "swift": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if stk == []:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(n - mean) for n in numbers)\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_groups = paren_string.split(separator=\" \")\n    result = []\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -1\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        index = s.index(s[i])\n        if is_palindrome(s[:index] + s[index + 1:]):\n            return s + s[:index][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join(map(lambda x: \"0\" if x[0] == x[1] else \"1\", zip(a, b)))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        index = s.index(s[:i+1])\n        prefix = s[:index]\n        prefixes.append(prefix)\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(Counter(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \")\n    return [durations[str(n)] for n in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    if len(substring) > len(s):\n        return 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = [String(num_dict[num]) for num in numbers.split(separator=\" \") if num_dict[num]!= None]\n    num_list.sort(key=lambda num: num_dict[num])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers) if numbers else 0.0\n    max_num = max(numbers) if numbers else 0.0\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [num - min_num / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    if n < 2:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = (counts[num]?? 0) + 1\n    res = []\n    for num in numbers:\n        if counts[num] == 1:\n            res.append(num)\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        else:\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(floor(sqrt(n))):\n        for i in range(2, int(floor(sqrt(n)))):\n            if n % i == 0:\n                return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += float(xs[i]) * pow(x, float(i))\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0, x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = [e for (i, e) in enumerate(l) if i % 3 == 0].sort()\n    return [sorted_third[i] if i % 3 == 0 else e for (i, e) in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += sum(1 for c in str(i) if c == \"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = [e for (i, e) in enumerate(l) if i % 2 == 0].sort()\n    return [e if i % 2 == 0 else sorted_even[i // 2] for (i, e) in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(sqrt(n)):\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return int(pow(n, 2))\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = defaultdict(int)\n    for num in l:\n        seen[num] += 1\n        if seen[-num] > 0:\n            return True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x /= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return float(a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib.reduce(0, lambda x, y: x + y)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for _ in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join([chr((ord(c) - 97 + 5) % 26 + 97) for c in s])\ndef decode_shift(s: str) -> str:\n    return ''.join([chr((ord(c) - 97 + 21) % 26 + 97) for c in s])\n",
            "def remove_vowels(txt: str) -> str:\n    return ''.join(filter(lambda x: x not in 'aeiouAEIOU', txt))\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [x - y for x, y in zip(l, l[1:])]\n    return all(diff <= [0]) or all(diff >= [0])\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(set(l2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i!= 0:\n            i += 1\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs[1:])]\n",
            "def fibfib(n: int) -> int:\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        c = s[i]\n        if c.lower() in vowels or (i == len(s) - 1 and c.lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(map(int, filter(str.isupper, s)))\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    return all(q[i] == q[len(q) - i - 1] for i in range(len(q))) and sum(q) <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return cnt1 <= cnt2 and lst1 or lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    a = a\n    if a < 2:\n        return False\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return a * a * a == abs(a)\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if \"2357BD\".find(c)!= -1)\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{bin(dec)[2:]}db\"\n",
            "def is_happy(s: str) -> bool:\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    if 2 <= int(floor(sqrt(length))):\n        for i in range(2, int(floor(sqrt(length)))):\n            if length % i == 0:\n                return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    return bin(n)[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum([e for i, e in enumerate(lst) if i % 2 == 1 and e % 2 == 0])\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    return \" \".join(sorted(word) for word in words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda coord: (coord[0] == coord[1]) * (coord[1] < coord[0]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord(\"z\"):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = SortedList(lst)\n    if sl.count < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split()\n    return len([s for s in sentences if len(s) >= 2 and s.startswith(\"I \")])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.islower() and ch.upper() or ch.lower()\n            if vowels.find(ch1)!= -1:\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(floor(sqrt(n))):\n        for i in range(2, int(floor(sqrt(n)))):\n            if n % i == 0:\n                return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if len(primes) == 0:\n        return 0\n    largest = \"\".join(sorted(primes, reverse=True))\n    return int(\"\".join([str(x) for x in largest]))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(k.isupper() for k in d.keys()) or all(k.islower() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    if 2 <= n:\n        for num in range(2, n):\n            if all(num % p!= 0 for p in primes):\n                primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * abs(b) % 10\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(sep=\", \").filter(lambda x: len(x) > 0).map(str)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y!= x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    r_avg = int(round((n + m) / 2))\n    return str(r_avg, 2) if r_avg % 2 == 0 else None\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(c.isdigit() and int(c) % 2!= 0 for c in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted([n for n in x if all_digits_odd(str(n))])\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr.sort(reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [sum(nums[:i]) if nums[i] % 2!= 0 else prod(nums[:i]) for i in range(1, n + 1)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return 2 * int(n_str[:2]) + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if digits_sum(n) > 0])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = len([e for e in lst1 if e % 2!= 0])\n    even_cnt = len([e for e in lst2 if e % 2 == 0])\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for (k, v) in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(filter(lambda x: x not in c, s))\n    return [s1, is_palindrome(s1) and \"yes\" or \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([x for x in num if x.isnumeric() and int(x) % 2 == 1])\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = nums.min()\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda row: int(ceil(sum(row) / capacity)), grid))\n",
            "def count_ones(num: int) -> int:\n    return len(str(num, 2).replace(\"0\", \"\"))\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").map(str).filter(lambda w: len(w) > 0)\n    return words.filter(lambda w: len(w.lower().translate(str.maketrans(consonants, \" \"*len(consonants)))) == n)\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(word.count - 2, 0, -1):\n        index = word.index(word.find(vowels[i]), i)\n        if vowels.find(word[index])!= -1 and vowels.find(word[word.index(word.find(vowels[i]), -1)]) == -1 and vowels.find(word[word.index(word.find(vowels[i]), 1)]) == -1:\n            return word[index]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return arr.sort()[k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(e for i, e in enumerate(lst) if i % 2 == 0 and e % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(arr[:k])\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    n = n\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len(list(filter(lambda x: x.islower() and x.isalpha() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x.isalnum() and x.isdigit() and x.isspace() and x.isprintable() and x.isupper() and x.islower() and x.isascii() and x.isdecimal() and x",
            "def is_sorted(lst: List[int]) -> bool:\n    return all(x <= y for x, y in zip(lst, lst[1:])) and max(lst.count(x) for x in set(lst)) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(floor(sqrt(n))):\n        for i in range(2, int(floor(sqrt(n)))):\n            if n % i == 0:\n                return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = 1 if arr.count(lambda x: x < 0) % 2 == 1 else -1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0? 1 : min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    seq = [1, 3]\n    if 2 <= n:\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                seq.append(i // 2 + 1)\n            else:\n                seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    return reduce(lambda x, y: x * 10 + y, [int(c) for c in str(n) if int(c) % 2 == 1])\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for (i, ch) in enumerate(s):\n        if ch == \"[\":\n            open_idx.append(i)\n        elif ch == \"]\":\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum([int(ceil(x)) * int(ceil(x)) for x in lst])\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    return len(txt) > 0 and len(txt.split(\" \")) == 1 and txt[-1].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [e for e in lst if e < 0]\n    pos = [e for e in lst if e > 0]\n    maxNeg = max(neg) if neg else None\n    minPos = min(pos) if pos else None\n    return [maxNeg, minPos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    else:\n        raise TypeError(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"  \", \"-\").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\", maxsplit=1)\n    if len(lst)!= 2 or not suf.count(lst[1]) or len(lst[0]) == 0 or not lst[0][0].isalpha() or lst[0].count(str.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += int(pow(lst[i], 2))\n        elif i % 4 == 0:\n            result += int(pow(lst[i], 3))\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(floor(sqrt(n))):\n        for i in range(2, int(floor(sqrt(n)))):\n            if n % i == 0:\n                return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    return \" \".join(word for word in words if is_prime(len(word)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return 2 * int(n_str[:2]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    return len(nums.filter(lambda x: x > 10 and x % 2 == 1).filter(lambda x: \"13579\".find(str(x[0]))!= -1))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        (l, r) = (r, l)\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [e for e in lst if len(e) % 2 == 0]\n    return sorted(result, key=lambda x: (len(x), x))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    if 2 <= int(floor(sqrt(n))):\n        for i in range(2, int(floor(sqrt(n)))):\n            if n % i == 0:\n                return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum([int(x * x) for x in lst if x >= 0 and x.is_integer()])\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(g - g) for g in game]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.endswith(b[len(b) - i:] + b[:i]):\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum([int(c) for c in ds if int(c) % 2 == 0])\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    num = num\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    return a * a + b * b == c * c\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators\n    nums = operands\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = int(pow(float(nums[i]), float(nums[i + 1])))\n            nums.remove(i + 1)\n            ops.remove(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        elif ch.islower():\n            result += ch.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    txt_bytes = txt.encode(\"utf-8\")\n    md5_encoded = md5(txt_bytes).hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return list(range(lower, upper + 1)).filter(lambda x: x % 2 == 0)\n"
        ]
    },
    "typescript": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum([abs(num - mean) for num in numbers])\n    return deviation / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i!= 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    groups = paren_string.split(\" \").filter(lambda s: s.length > 0)\n    for group in groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -float('inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(map(lambda c, i: '0' if c == b[i] else '1', a, range(len(a))))\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = { \"o\": 4, \"o|\": 2, \".|\": 1 }\n    notes = music_string.split(\" \").filter(lambda s: len(s) > 0)\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [x for x in numbers.split(\" \") if x in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [num - min_num / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int) and x.is_integer()]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = []\n    for num in numbers:\n        if counts[num] == 1:\n            res.append(num)\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = []\n    for ch in s:\n        if not ch.isalnum():\n            flipped.append(ch)\n        elif ch.islower():\n            flipped.append(ch.upper())\n        else:\n            flipped.append(ch.lower())\n    return ''.join(flipped)\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = [x for x, i in enumerate(l) if i % 3 == 0]\n    sorted_third.sort()\n    return [sorted_third[i // 3] if i % 3 == 0 else x for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(str(i).split(\"7\")) - 1\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = [x for i, x in enumerate(l) if i & 1 == 0]\n    sorted_even.sort()\n    return [sorted_even[i // 2] if i & 1 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.append(s[i:])\n        else:\n            result.append(s[i+1:i+3])\n            result.append(s[i])\n    return \"\".join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(-num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x = int(x / bas)\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2!= 0:\n        return sl[int(len(l) / 2)]\n    else:\n        return (sl[int(len(l) / 2)] + sl[int(len(l) / 2) - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 97 + 5) % 26 + 97) for ch in s])\ndef decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 97 + 21) % 26 + 97) for ch in s])\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in txt if char not in vowels])\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [x - l[i] for i, x in enumerate(l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n /= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs[1:])]\n",
            "def fibfib(n: int) -> int:\n    a = 0\n    b = 0\n    c = 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return \"\".join(reversed(x_str))\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(c.isdigit() for c in s)\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = defaultdict(int)\n    for n in lst:\n        freqs[n] += 1\n    good_vals = [v for v, c in freqs.items() if c >= v]\n    return max(good_vals, default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    start = 0\n    right = len(sl) - 1\n    while start <= right:\n        result.append(sl[start])\n        start += 1\n        if start <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    return all(q[i] == q[len(q) - i - 1] for i in range(len(q))) and sum(q) <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum([len(s) for s in lst1])\n    cnt2 = sum([len(s) for s in lst2])\n    return cnt1 <= cnt2 and lst1 or lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return a ** (1.0 / 3.0) ** 3 == a\n",
            "def hex_key(num: str) -> int:\n    return len([x for x in num if x in \"2357BD\"])\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f'db{dec:b}db'\n",
            "def is_happy(s: str) -> bool:\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    return 2 * 9 * (10 ** (n - 2))\n",
            "def solve(n: int) -> str:\n    return str(bin(n))[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(lst[1::2])\n",
            "def anti_shuffle(s: str) -> str:\n    words = [word.sort() for word in s.split()]\n    return''.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return coords.sort(lambda a, b: a[0] == b[0] and b[1] - a[1] or a[0] - b[0])\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    sorted_arr = list(arr)\n    if len(sorted_arr) <= 1:\n        return sorted_arr\n    if (sorted_arr[0] + sorted_arr[-1]) % 2 == 0:\n        sorted_arr.sort(key=lambda x: x, reverse=True)\n    else:\n        sorted_arr.sort(key=lambda x: x)\n    return sorted_arr\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result.append(chr(shifted))\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = list(set(lst))\n    sl.sort()\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\".!?\")\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \"])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    return (\n        isinstance(x, int)\n        and isinstance(y, int)\n        and isinstance(z, int)\n        and (x + y == z or x + z == y or y + z == x)\n    )\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message:\n        if ch.islower():\n            ch1 = ch.upper() if ch.isupper() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result.append(ch1)\n        else:\n            result.append(ch)\n    return \"\".join(result)\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = ''.join(sorted(str(max(primes))))\n    return sum([int(c) for c in largest])\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    return all(map(lambda k: re.match('^[A-Z]+$', k) is not None or re.match('^[a-z]+$', k) is not None, d.keys()))\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p!= 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return len([c for c, i in zip(s, range(0, len(s), 2)) if i % 2 == 0 and c in vowels])\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(\" \").filter(lambda w: len(w) > 0)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y!= x and y - 1 or -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) // 2 + 0.5\n    return str(int(r_avg))\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(digit.codePointAt(0) % 2!= 0 for digit in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted(filter(all_digits_odd, map(str, x)))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [x for x in arr if 1 <= x and x <= 9]\n    sorted_arr.sort(reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = [x + 1 for x in range(n)]\n    return [sum(nums[:i]) if i % 2!= 0 else prod(nums[:i]) for i in range(1, n + 1)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return 2 * int(n_str[0]) + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if digits_sum(n) > 0])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = len([n for n in lst1 if n % 2!= 0])\n    even_cnt = len([n for n in lst2 if n % 2 == 0])\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = defaultdict(int)\n    words = test.split(\" \").filter(w => w.length > 0)\n    for w in words:\n        freq[w] += 1\n    result = defaultdict(int)\n    if len(freq) > 0:\n        maxFreq = max(freq.values())\n        for k, v in freq.items():\n            if v == maxFreq:\n                result[k] = v\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(ch for ch in s if ch not in c)\n    return [s1, is_palindrome(s1) and 'yes' or 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = [d for d in num if d.isdecimal() and int(d) % 2 == 1]\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(len(n))))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(*nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda row: sum(row) // capacity, grid))\n",
            "def count_ones(num: int) -> int:\n    return len(str(bin(num)).split('1')) - 1\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").filter(w => w.length > 0)\n    return words.filter(w => [c for c in w if c.lower() in consonants].length == n)\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if vowels.find(word[i])!= -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr, reverse=True)[:k]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2!= 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(arr[:k])\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n!= 1:\n        if n % 2!= 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n / 2\n    return collatz.sort(key=lambda x: x)\n",
            "def valid_date(date: str) -> bool:\n    if len(date)!= 10 or date[2]!= \"-\" or date[5]!= \"-\":\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len([c for c in txt if c.islower() and c.isalpha() and c.isupper() % 2 == 0]))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)):\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    return max(freq.values()) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = len(arr.filter(lambda n: n < 0)) % 2 == 1 and -1 or 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i!= 0:\n                    temp.append(grid[i - 1][j])\n                if j!= 0:\n                    temp.append(grid[i][j - 1])\n                if i!= n - 1:\n                    temp.append(grid[i + 1][j])\n                if j!= n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0? 1 : min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [d for d in str(n) if int(d) % 2 == 1]\n    return int(''.join(odds)) if odds else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for [i, ch] in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: n ** 2, map(lambda n: int(n), lst)))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt.split(\" \")[-1]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx, default=-1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(',', '.'))\n    elif isinstance(o, float):\n        return o\n    raise TypeError('Type Error')\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"   \", \"-\").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst)!= 2 or not suf.includes(lst[1]) or lst[0].length == 0 or not lst[0][0].match(/[a-z]/i) or [...lst[0]].filter(ch => ch.match(/\\d/)).length > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(w for w in words if is_prime(len(w)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(c) for c in n_str)\n    else:\n        return 2 * int(n_str[0]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    return len(list(filter(lambda n: n > 10 and n % 2 == 1 and str(n)[0] in \"13579\", nums)))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda s: (len(s), s.lower()))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum([n * n for n in lst if n >= 0 and n % 2 == 1])\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - guess[i]) for i, x in enumerate(game)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = float(\"-inf\")\n    max_ext = \"\"\n    for ext in extensions:\n        upper = len([c for c in ext if c.isupper()])\n        lower = len([c for c in ext if c.islower()])\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i])!= -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = abs(num).to_bytes(1, 'big').decode()\n    even = len([d for d in ds if d.code_point % 2 == 0])\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i in range(len(values)):\n        while num >= values[i]:\n            res.append(numerals[i])\n            num -= values[i]\n    return \"\".join(res)\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    return a * a + b * b == c * c\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = set(w)\n        if cnt.size > max_cnt:\n            max_cnt = cnt.size\n            max_w = w\n        elif cnt.size === max_cnt:\n            max_w = max_w < w? max_w : w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = list(operators)\n    nums = list(operands)\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = int(nums[i] / nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    result = []\n    for ch in s:\n        if not ch.isalpha():\n            result.append(ch)\n        elif ch.isupper():\n            result.append(ch.lower())\n        else:\n            result.append(ch.upper())\n    return ''.join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5Hash = hashlib.md5()\n    txtBytes = txt.encode('utf-8')\n    md5Hash.update(txtBytes)\n    md5Encoded = md5Hash.hexdigest()\n    return md5Encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [i + lower for i in range(upper - lower + 1) if i % 2 == 0]\n"
        ]
    }
}