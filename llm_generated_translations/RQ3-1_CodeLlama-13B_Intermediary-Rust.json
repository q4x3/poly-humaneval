{
    "python": {
        "cpp": [
            "bool hasCloseElements(const vector<double>& numbers, double threshold) {\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "vector<string> separateParenGroups(const string& paren_string) {\n    vector<string> groups;\n    stack<char> stk;\n    string current_group;\n    string parens = paren_string;\n    for (char ch : parens) {\n        if (ch == '(') {\n            stk.push(ch);\n            current_group.push_back(ch);\n        } else if (ch == ')') {\n            stk.pop();\n            current_group.push_back(ch);\n            if (stk.empty()) {\n                groups.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - floor(num);\n}\n",
            "bool belowZero(const vector<int>& operations) {\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(const vector<double>& numbers) {\n    double mean = accumulate(numbers.begin(), numbers.end(), 0.0) / numbers.size();\n    double deviation = accumulate(numbers.begin(), numbers.end(), 0.0, [mean](double a, double b) {\n        return a + abs(b - mean);\n    });\n    return deviation / numbers.size();\n}\n",
            "vector<int> intersperse(const vector<int>& numbers, int delimiter) {\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (i != 0) {\n            result.push_back(delimiter);\n        }\n        result.push_back(numbers[i]);\n    }\n    return result;\n}\n",
            "vector<int> parseNestedParens(const string& paren_string) {\n    vector<int> result;\n    string::size_type start = 0;\n    string::size_type end = 0;\n    while (end != string::npos) {\n        end = paren_string.find(\" \", start);\n        string group = paren_string.substr(start, end - start);\n        int depth = 0;\n        int max_depth = 0;\n        for (char ch : group) {\n            if (ch == '(') {\n                depth += 1;\n                max_depth = max(max_depth, depth);\n            } else if (ch == ')') {\n                depth -= 1;\n            }\n        }\n        result.push_back(max_depth);\n        start = end + 1;\n    }\n    return result;\n}\n",
            "vector<string> filterBySubstring(const vector<string>& strs, const string& substring) {\n    vector<string> result;\n    for (const string& s : strs) {\n        if (s.find(substring) != string::npos) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n",
            "vector<int> sumProduct(const vector<int>& numbers) {\n    int n_sum = accumulate(numbers.begin(), numbers.end(), 0);\n    int n_product = accumulate(numbers.begin(), numbers.end(), 1, multiplies<int>());\n    return vector<int>{n_sum, n_product};\n}\n",
            "vector<int> rollingMax(const vector<int>& numbers) {\n    int max_so_far = numeric_limits<int>::min();\n    vector<int> result;\n    for (int num : numbers) {\n        max_so_far = max(max_so_far, num);\n        result.push_back(max_so_far);\n    }\n    return result;\n}\n",
            "bool isPalindrome(const string& s) {\n    return s == string(s.rbegin(), s.rend());\n}\nstring makePalindrome(const string& s) {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (int i = 0; i < s.size(); i++) {\n        if (isPalindrome(s.substr(i))) {\n            return s + string(s.begin(), s.begin() + i);\n        }\n    }\n    return \"\";\n}\n",
            "string stringXor(const string& a, const string& b) {\n    string result;\n    transform(a.begin(), a.end(), b.begin(), back_inserter(result), [](char x, char y) {\n        return x == y ? '0' : '1';\n    });\n    return result;\n}\n",
            "optional<string> longest(const vector<string>& strs) {\n    if (strs.empty()) {\n        return nullopt;\n    }\n    string longest_s = strs[0];\n    for (const string& s : strs) {\n        if (s.size() > longest_s.size()) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    return b == 0 ? a : greatestCommonDivisor(b, a % b);\n}\n",
            "vector<string> allPrefixes(const string& s) {\n    vector<string> prefixes;\n    for (int i = 0; i < s.size(); i++) {\n        prefixes.push_back(s.substr(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "string stringSequence(int n) {\n    stringstream ss;\n    for (int i = 0; i <= n; i++) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\n",
            "int countDistinctCharacters(const string& s) {\n    unordered_set<char> set;\n    for (char c : s) {\n        set.insert(tolower(c));\n    }\n    return set.size();\n}\n",
            "vector<int> parseMusic(const string& music_string) {\n    map<string, int> durations = {\n        {\"o\", 4},\n        {\"o|\", 2},\n        {\".|\", 1}\n    };\n    vector<string> notes = split(music_string, ' ');\n    vector<int> result;\n    for (string note : notes) {\n        result.push_back(durations[note]);\n    }\n    return result;\n}\n",
            "int howManyTimes(const string& s, const string& substring) {\n    int times = 0;\n    for (int i = 0; i < s.size() - substring.size() + 1; i++) {\n        if (s.substr(i, substring.size()) == substring) {\n            times++;\n        }\n    }\n    return times;\n}\n",
            "string sortNumbers(const string& numbers) {\n    map<string, int> num_dict;\n    num_dict[\"zero\"] = 0;\n    num_dict[\"one\"] = 1;\n    num_dict[\"two\"] = 2;\n    num_dict[\"three\"] = 3;\n    num_dict[\"four\"] = 4;\n    num_dict[\"five\"] = 5;\n    num_dict[\"six\"] = 6;\n    num_dict[\"seven\"] = 7;\n    num_dict[\"eight\"] = 8;\n    num_dict[\"nine\"] = 9;\n    vector<string> num_list;\n    for (string word : split(numbers, \" \")) {\n        if (num_dict.find(word) != num_dict.end()) {\n            num_list.push_back(word);\n        }\n    }\n    sort(num_list.begin(), num_list.end(), [&](string a, string b) {\n        return num_dict[a] < num_dict[b];\n    });\n    return join(num_list, \" \");\n}\n",
            "vector<double> findClosestElements(const vector<double>& numbers) {\n    vector<double> sorted_numbers = numbers;\n    sort(sorted_numbers.begin(), sorted_numbers.end());\n    double min_diff = numeric_limits<double>::infinity();\n    vector<double> closest_pair;\n    for (int i = 1; i < sorted_numbers.size(); i++) {\n        double diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {sorted_numbers[i - 1], sorted_numbers[i]};\n        }\n    }\n    return closest_pair;\n}\n",
            "vector<double> rescaleToUnit(const vector<double>& numbers) {\n    double min_num = *min_element(numbers.begin(), numbers.end());\n    double max_num = *max_element(numbers.begin(), numbers.end());\n    if (min_num == max_num) {\n        return vector<double>(numbers.size(), 0.0);\n    } else {\n        vector<double> result;\n        transform(numbers.begin(), numbers.end(), back_inserter(result), [min_num, max_num](double num) {\n            return (num - min_num) / (max_num - min_num);\n        });\n        return result;\n    }\n}\n",
            "vector<int> filterIntegers(const vector<any>& values) {\n    vector<int> result;\n    for (const any& v : values) {\n        if (typeid(v) == typeid(int)) {\n            result.push_back(any_cast<int>(v));\n        }\n    }\n    return result;\n}\n",
            "int strLength(const string& s) {\n    return s.length();\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "vector<int> factorize(int n) {\n    vector<int> factors;\n    int divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.push_back(divisor);\n            n /= divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n",
            "vector<int> removeDuplicates(const vector<int>& numbers) {\n    unordered_map<int, int> counts;\n    for (int num : numbers) {\n        counts[num]++;\n    }\n    vector<int> res;\n    for (int num : numbers) {\n        if (counts[num] == 1) {\n            res.push_back(num);\n        }\n    }\n    return res;\n}\n",
            "string flipCase(const string& s) {\n    string flipped;\n    for (char ch : s) {\n        if (!isalpha(ch)) {\n            flipped.push_back(ch);\n        } else if (islower(ch)) {\n            flipped.push_back(toupper(ch));\n        } else if (isupper(ch)) {\n            flipped.push_back(tolower(ch));\n        }\n    }\n    return flipped;\n}\n",
            "string concatenate(const vector<string>& strs) {\n    string result;\n    for (string s : strs) {\n        result += s;\n    }\n    return result;\n}\n",
            "vector<string> filterByPrefix(const vector<string>& strs, const string& prefix_str) {\n    vector<string> result;\n    for (const string& s : strs) {\n        if (s.find(prefix_str) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n",
            "vector<int> getPositive(const vector<int>& l) {\n    vector<int> result;\n    for (int num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)) + 1; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "double poly(const vector<int>& xs, double x) {\n    double res = 0.0;\n    for (int i = 0; i < xs.size(); i++) {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\ndouble findZero(const vector<int>& xs) {\n    double x1 = 1.0;\n    double x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0.0) {\n        x1 *= 2.0;\n        x2 *= 2.0;\n    }\n    while (fabs(x1 - x2) > 1e-10) {\n        double mid = (x1 + x2) / 2.0;\n        if (poly(xs, mid) == 0.0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0.0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2.0;\n}\n",
            "vector<int> sortThird(const vector<int>& l) {\n    vector<int> sorted_third(l.begin(), l.end());\n    sort(sorted_third.begin(), sorted_third.end());\n    vector<int> result;\n    for (int i = 0; i < l.size(); ++i) {\n        result.push_back(i % 3 == 0 ? sorted_third[i / 3] : l[i]);\n    }\n    return result;\n}\n",
            "vector<int> listUnique(const vector<int>& l) {\n    set<int> s(l.begin(), l.end());\n    vector<int> result(s.begin(), s.end());\n    sort(result.begin(), result.end());\n    return result;\n}\n",
            "int maxElement(const vector<int>& l) {\n    return l.empty() ? 0 : *max_element(l.begin(), l.end());\n}\n",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += count(to_string(i).begin(), to_string(i).end(), '7');\n        }\n    }\n    return cnt;\n}\n",
            "vector<int> sortEven(const vector<int>& l) {\n    vector<int> sorted_even(l.begin(), l.begin() + l.size() / 2);\n    sort(sorted_even.begin(), sorted_even.end());\n    vector<int> result;\n    for (int i = 0; i < l.size(); ++i) {\n        if (i % 2 == 0) {\n            result.push_back(sorted_even[i / 2]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n",
            "string encodeCyclic(const string& s) {\n    string result;\n    for (int i = 0; i < s.size(); i += 3) {\n        if (i + 3 > s.size()) {\n            result.append(s.substr(i));\n        } else {\n            result.append(s.substr(i + 1, 2));\n            result.append(s.substr(i, 1));\n        }\n    }\n    return result;\n}\nstring decodeCyclic(const string& s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "int primeFib(int n) {\n    int f[2] = {0, 1};\n    int cnt = 0;\n    while (cnt < n) {\n        f[0] = f[1];\n        f[1] = f[0] + f[1];\n        if (isPrime(f[1])) { cnt += 1; }\n    }\n    return f[1];\n}\n",
            "bool triplesSumToZero(const vector<int>& l) {\n    unordered_set<int> s;\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return pow(n, 2);\n}\n",
            "vector<int> incrList(const vector<int>& l) {\n    vector<int> result;\n    transform(l.begin(), l.end(), back_inserter(result), [](int i) { return i + 1; });\n    return result;\n}\n",
            "bool pairsSumToZero(const vector<int>& l) {\n    unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n",
            "string changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    vector<string> digits;\n    while (x > 0) {\n        digits.push_back(to_string(x % bas));\n        x /= bas;\n    }\n    string result;\n    for (int i = digits.size() - 1; i >= 0; i--) {\n        result += digits[i];\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int h) {\n    return (a * h) / 2.0;\n}\n",
            "int fib4(int n) {\n    vector<int> fib(4, 0);\n    fib[2] = 2;\n    for (int i = 4; i <= n; ++i) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n    }\n    return fib[n % 4];\n}\n",
            "double median(const vector<double>& l) {\n    vector<double> sl = l;\n    sort(sl.begin(), sl.end());\n    if (sl.size() % 2 != 0) {\n        return sl[sl.size() / 2];\n    } else {\n        return (sl[sl.size() / 2] + sl[sl.size() / 2 - 1]) / 2.0;\n    }\n}\n",
            "bool isPalindrome(const string& txt) {\n    return txt == string(txt.rbegin(), txt.rend());\n}\n",
            "int modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "string encodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        int ch_num = ch;\n        int shifted_ch_num = (ch_num - 97 + 5) % 26 + 97;\n        result.push_back(shifted_ch_num);\n    }\n    return result;\n}\nstring decodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        int ch_num = ch;\n        int shifted_ch_num = (ch_num - 97 + 21) % 26 + 97;\n        result.push_back(shifted_ch_num);\n    }\n    return result;\n}\n",
            "string removeVowels(const string& txt) {\n    string vowels = \"aeiouAEIOU\";\n    string result;\n    for (char char : txt) {\n        if (vowels.find(char) == string::npos) {\n            result.push_back(char);\n        }\n    }\n    return result;\n}\n",
            "bool belowThreshold(const vector<int>& l, int t) {\n    return all_of(l.begin(), l.end(), [t](int x) { return x < t; });\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(const string& s0, const string& s1) {\n    return set<char>(s0.begin(), s0.end()) == set<char>(s1.begin(), s1.end());\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '<') {\n            depth += 1;\n        } else if (b == '>') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(const vector<int>& l) {\n    vector<int> diff;\n    for (int i = 1; i < l.size(); ++i) {\n        diff.push_back(l[i] - l[i - 1]);\n    }\n    return all_of(diff.begin(), diff.end(), [](int x) { return x <= 0; }) ||\n           all_of(diff.begin(), diff.end(), [](int x) { return x >= 0; });\n}\n",
            "vector<int> common(const vector<int>& l1, const vector<int>& l2) {\n    set<int> s1(l1.begin(), l1.end());\n    set<int> s2(l2.begin(), l2.end());\n    vector<int> result;\n    set_intersection(s1.begin(), s1.end(), s2.begin(), s2.end(), back_inserter(result));\n    sort(result.begin(), result.end());\n    return result;\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    return (n * (n + 1)) / 2;\n}\n",
            "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '(') {\n            depth += 1;\n        } else if (b == ')') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "vector<int> derivative(const vector<int>& xs) {\n    vector<int> result;\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(const string& s) {\n    set<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n    int cnt = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (vowels.find(s[i]) != vowels.end() || (i == s.size() - 1 && s[i] == 'y')) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n",
            "string circularShift(int x, int shift) {\n    string x_str = to_string(x);\n    if (shift > x_str.size()) {\n        return string(x_str.rbegin(), x_str.rend());\n    } else {\n        return x_str.substr(x_str.size() - shift) + x_str.substr(0, x_str.size() - shift);\n    }\n}\n",
            "int digitSum(const string& s) {\n    int result = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            result += c;\n        }\n    }\n    return result;\n}\n",
            "int fruitDistribution(const string& s, int n) {\n    vector<string> words;\n    stringstream ss(s);\n    string word;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    int apples = stoi(words[find(words.begin(), words.end(), \"apples\") - words.begin() - 1]);\n    int oranges = stoi(words[find(words.begin(), words.end(), \"oranges\") - words.begin() - 1]);\n    return n - apples - oranges;\n}\n",
            "vector<int> pluck(const vector<int>& arr) {\n    vector<int> evens;\n    for (int n : arr) {\n        if (n % 2 == 0) {\n            evens.push_back(n);\n        }\n    }\n    if (evens.empty()) {\n        return vector<int>();\n    }\n    int min_even = *min_element(evens.begin(), evens.end());\n    return vector<int>{min_even, distance(arr.begin(), find(arr.begin(), arr.end(), min_even))};\n}\n",
            "int search(const vector<int>& lst) {\n    unordered_map<int, int> freqs;\n    for (int n : lst) {\n        freqs[n]++;\n    }\n    vector<int> good_vals;\n    for (auto& [k, v] : freqs) {\n        if (v >= k) {\n            good_vals.push_back(k);\n        }\n    }\n    return *max_element(good_vals.begin(), good_vals.end());\n}\n",
            "vector<int> strangeSortList(const vector<int>& lst) {\n    vector<int> sl = lst;\n    sort(sl.begin(), sl.end());\n    vector<int> result;\n    int left = 0, right = sl.size() - 1;\n    while (left <= right) {\n        result.push_back(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push_back(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        double s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(const vector<int>& q, int w) {\n    if (q.empty()) {\n        return false;\n    }\n    bool is_palin = true;\n    for (int i = 0; i < q.size(); ++i) {\n        if (q[i] != q[q.size() - i - 1]) {\n            is_palin = false;\n            break;\n        }\n    }\n    int total = 0;\n    for (int e : q) {\n        total += e;\n    }\n    return is_palin && total <= w;\n}\n",
            "int smallestChange(const vector<int>& arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.size() / 2; i++) {\n        if (arr[i] != arr[arr.size() - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "vector<string> totalMatch(const vector<string>& lst1, const vector<string>& lst2) {\n    int cnt1 = 0;\n    for (const string& s : lst1) {\n        cnt1 += s.size();\n    }\n    int cnt2 = 0;\n    for (const string& s : lst2) {\n        cnt2 += s.size();\n    }\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n",
            "bool isMultiplyPrime(int a) {\n    if (a < 2) {\n        return false;\n    }\n    int cnt = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            while (a % i == 0) {\n                cnt++;\n                a /= i;\n            }\n        }\n    }\n    return cnt == 3;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    a = abs(a);\n    int root = int(round(pow(a, 1.0 / 3.0)));\n    return root * root * root == a;\n}\n",
            "int hexKey(const string& num) {\n    vector<char> v = {'2', '3', '5', '7', 'B', 'D'};\n    int result = 0;\n    for (char c : num) {\n        if (find(v.begin(), v.end(), c) != v.end()) {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "string decimalToBinary(int dec) {\n    return \"db\" + to_string(dec) + \"db\";\n}\n",
            "bool isHappy(const string& s) {\n    if (s.length() < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.length() - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "vector<string> numericalLetterGrade(const vector<double>& grades) {\n    vector<string> result;\n    for (double g : grades) {\n        if (g == 4.0) {\n            result.push_back(\"A+\");\n        } else if (g > 3.7) {\n            result.push_back(\"A\");\n        } else if (g > 3.3) {\n            result.push_back(\"A-\");\n        } else if (g > 3.0) {\n            result.push_back(\"B+\");\n        } else if (g > 2.7) {\n            result.push_back(\"B\");\n        } else if (g > 2.3) {\n            result.push_back(\"B-\");\n        } else if (g > 2.0) {\n            result.push_back(\"C+\");\n        } else if (g > 1.7) {\n            result.push_back(\"C\");\n        } else if (g > 1.3) {\n            result.push_back(\"C-\");\n        } else if (g > 1.0) {\n            result.push_back(\"D+\");\n        } else if (g > 0.7) {\n            result.push_back(\"D\");\n        } else if (g > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(const string& s) {\n    int length = s.length();\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(length)) + 1; i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * pow(10, n - 2);\n}\n",
            "string solve(int n) {\n    int digits_sum = 0;\n    while (n > 0) {\n        digits_sum += n % 10;\n        n /= 10;\n    }\n    return to_string(digits_sum);\n}\n",
            "int add(const vector<int>& lst) {\n    return accumulate(lst.begin() + 1, lst.end(), 0, [](int a, int b) {\n        return a + (b % 2 == 0);\n    });\n}\n",
            "string antiShuffle(const string& s) {\n    vector<string> words;\n    istringstream iss(s);\n    copy(istream_iterator<string>(iss), istream_iterator<string>(), back_inserter(words));\n    for (string& word : words) {\n        sort(word.begin(), word.end());\n    }\n    ostringstream oss;\n    copy(words.begin(), words.end(), ostream_iterator<string>(oss, \" \"));\n    return oss.str();\n}\n",
            "vector<vector<int>> getRow(const vector<vector<int>>& lst, int x) {\n    vector<vector<int>> coords;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                coords.push_back({i, j});\n            }\n        }\n    }\n    sort(coords.begin(), coords.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]);\n    });\n    return coords;\n}\n",
            "vector<int> sortArray(const vector<int>& arr) {\n    if (arr.empty()) {\n        return {};\n    }\n    if ((arr[0] + arr.back()) % 2 == 0) {\n        return vector<int>(arr.rbegin(), arr.rend());\n    } else {\n        return vector<int>(arr.begin(), arr.end());\n    }\n}\n",
            "string encrypt(const string& s) {\n    string result;\n    for (char ch : s) {\n        char shifted = ch + 4;\n        if (shifted > 'z') {\n            shifted -= 26;\n        }\n        result.push_back(shifted);\n    }\n    return result;\n}\n",
            "optional<int> nextSmallest(const vector<int>& lst) {\n    vector<int> sl = lst;\n    sort(sl.begin(), sl.end());\n    sl.erase(unique(sl.begin(), sl.end()), sl.end());\n    if (sl.size() < 2) {\n        return {};\n    }\n    return sl[1];\n}\n",
            "int isBored(const string& s) {\n    regex re(\"[.!?]\\\\s*\");\n    auto sentences = sregex_token_iterator(s.begin(), s.end(), re, -1);\n    auto end = sregex_token_iterator();\n    int count = 0;\n    for (auto sentence = sentences; sentence != end; ++sentence) {\n        if (sentence->length() >= 2 && sentence->str().substr(0, 2) == \"I \") {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "bool anyInt(any x, any y, any z) {\n    if (auto x_ptr = any_cast<int>(&x)) {\n        if (auto y_ptr = any_cast<int>(&y)) {\n            if (auto z_ptr = any_cast<int>(&z)) {\n                return *x_ptr + *y_ptr == *z_ptr || *x_ptr + *z_ptr == *y_ptr || *y_ptr + *z_ptr == *x_ptr;\n            }\n        }\n    }\n    return false;\n}\n",
            "string encode(const string& message) {\n    string vowels = \"aeiouAEIOU\";\n    string result;\n    for (char ch : message) {\n        if (isalpha(ch)) {\n            char ch1 = islower(ch) ? toupper(ch) : tolower(ch);\n            if (vowels.find(ch1) != string::npos) {\n                ch1 = char(ch1 + 2);\n            }\n            result.push_back(ch1);\n        } else {\n            result.push_back(ch);\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); ++i) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint skjkasdkd(const vector<int>& lst) {\n    vector<int> primes;\n    for (int n : lst) {\n        if (isPrime(n)) {\n            primes.push_back(n);\n        }\n    }\n    if (primes.empty()) {\n        return 0;\n    }\n    string largest = to_string(max(primes));\n    int sum = 0;\n    for (char digit : largest) {\n        sum += digit - '0';\n    }\n    return sum;\n}\n",
            "bool checkDictCase(const unordered_map<string, string>& d) {\n    if (d.empty()) {\n        return false;\n    }\n    for (auto& [k, v] : d) {\n        if (islower(k[0]) != islower(v[0])) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "vector<int> countUpTo(int n) {\n    vector<int> primes;\n    for (int num = 2; num < n; num++) {\n        if (all_of(primes.begin(), primes.end(), [num](int p) { return num % p != 0; })) {\n            primes.push_back(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    return abs(a % 10) * abs(b % 10);\n}\n",
            "int countUpper(const string& s) {\n    string vowels = \"AEIOU\";\n    int result = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (i % 2 == 0 && find(vowels.begin(), vowels.end(), s[i]) != vowels.end()) {\n            result += 1;\n        }\n    }\n    return result;\n}\n",
            "int closestInteger(const string& value) {\n    double num = stod(value);\n    return num >= 0.0 ? (num + 0.5) : (num - 0.5);\n}\n",
            "vector<int> makeAPile(int n) {\n    vector<int> result;\n    for (int i = 0; i < n; i++) {\n        result.push_back(n + 2 * i);\n    }\n    return result;\n}\n",
            "vector<string> wordsString(const string& s) {\n    regex re(R\"([, ])\");\n    vector<string> result;\n    for (sregex_token_iterator it(s.begin(), s.end(), re, -1), end; it != end; ++it) {\n        if (it->length() > 0) {\n            result.push_back(*it);\n        }\n    }\n    return result;\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    if (x != y) {\n        return y - 1;\n    }\n    return -1;\n}\n",
            "optional<string> roundedAvg(int n, int m) {\n    if (n > m) {\n        return {};\n    }\n    int r_avg = int((m + n) / 2.0 + 0.5);\n    return string(bin(r_avg)[2:]);\n}\n",
            "bool allDigitsOdd(const string& s) {\n    return all_of(s.begin(), s.end(), [](char digit) {\n        return digit - '0' % 2 != 0;\n    });\n}\nvector<int> uniqueDigits(const vector<int>& x) {\n    vector<int> result;\n    for (int num : x) {\n        if (allDigitsOdd(to_string(num))) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n",
            "vector<string> byLength(const vector<int>& arr) {\n    vector<string> digit_names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    vector<int> sorted_arr;\n    for (int x : arr) {\n        if (1 <= x && x <= 9) {\n            sorted_arr.push_back(x);\n        }\n    }\n    sort(sorted_arr.begin(), sorted_arr.end(), greater<int>());\n    vector<string> result;\n    for (int x : sorted_arr) {\n        result.push_back(digit_names[x-1]);\n    }\n    return result;\n}\n",
            "vector<int> f(int n) {\n    vector<int> nums(n);\n    iota(nums.begin(), nums.end(), 1);\n    vector<int> result(n);\n    for (int i = 0; i < n; ++i) {\n        result[i] = i % 2 != 0 ? accumulate(nums.begin(), nums.begin() + i + 1, 0) : accumulate(nums.begin(), nums.begin() + i + 1, 1, multiplies<int>());\n    }\n    return result;\n}\n",
            "bool isPalindrome(const string& txt) {\n    return txt == string(txt.rbegin(), txt.rend());\n}\nvector<int> evenOddPalindrome(int n) {\n    vector<int> cnt(2);\n    for (int i = 1; i <= n; ++i) {\n        if (isPalindrome(to_string(i))) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "int countNums(const vector<int>& arr) {\n    auto digits_sum = [](int n) {\n        string n_str = to_string(n);\n        if (n >= 0) {\n            return accumulate(n_str.begin(), n_str.end(), 0, [](int a, char d) { return a + d - '0'; });\n        } else {\n            return (n_str[0] - '0') * 2 + digits_sum(abs(n));\n        }\n    };\n    return count_if(arr.begin(), arr.end(), [&](int n) { return digits_sum(n) > 0; });\n}\n",
            "bool moveOneBall(const vector<int>& arr) {\n    if (arr.empty()) {\n        return true;\n    }\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end());\n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr.size() - i == count(arr.begin() + i, arr.end(), sorted_arr[i]) &&\n            i == count(arr.begin(), arr.begin() + i, sorted_arr[arr.size() - i - 1])) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "string canExchange(const vector<int>& lst1, const vector<int>& lst2) {\n    int odd_cnt = count_if(lst1.begin(), lst1.end(), [](int num) { return num % 2 != 0; });\n    int even_cnt = count_if(lst2.begin(), lst2.end(), [](int num) { return num % 2 == 0; });\n    return even_cnt >= odd_cnt ? \"YES\" : \"NO\";\n}\n",
            "unordered_map<string, int> histogram(const string& test) {\n    unordered_map<string, int> freq;\n    vector<string> words;\n    for (auto w : test) {\n        if (w != ' ') {\n            words.push_back(w);\n        }\n    }\n    for (auto w : words) {\n        freq[w]++;\n    }\n    unordered_map<string, int> result;\n    if (freq.size() > 0) {\n        int max_freq = *max_element(freq.begin(), freq.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n            return a.second < b.second;\n        });\n        for (auto& [k, v] : freq) {\n            if (v == max_freq) {\n                result[k] = v;\n            }\n        }\n    }\n    return result;\n}\n",
            "bool isPalindrome(const string& s) {\n    return s == string(s.rbegin(), s.rend());\n}\nvector<string> reverseDelete(const string& s, const string& c) {\n    string s1 = \"\";\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            s1 += ch;\n        }\n    }\n    vector<string> result;\n    result.push_back(s1);\n    result.push_back(isPalindrome(s1) ? \"yes\" : \"no\");\n    return result;\n}\n",
            "vector<string> oddCount(const vector<string>& lst) {\n    vector<string> result;\n    for (const string& num : lst) {\n        int n = count_if(num.begin(), num.end(), [](char d) { return d % 2 == 1; });\n        string rs = \"the number of odd elements in the string i of the input.\";\n        result.push_back(rs.replace(rs.find(\"i\"), 1, to_string(n)));\n    }\n    return result;\n}\n",
            "int minSubArraySum(const vector<int>& nums) {\n    int min_sum = 0;\n    int cur_sum = 0;\n    for (int n : nums) {\n        cur_sum = min(cur_sum + n, 0);\n        min_sum = min(cur_sum, min_sum);\n    }\n    if (min_sum == 0) {\n        min_sum = *min_element(nums.begin(), nums.end());\n    }\n    return min_sum;\n}\n",
            "int maxFill(const vector<vector<int>>& grid, int capacity) {\n    int result = 0;\n    for (const vector<int>& arr : grid) {\n        result += (arr.size() * (arr.size() + 1) / 2) / capacity;\n    }\n    return result;\n}\n",
            "int countOnes(int num) {\n    int count = 0;\n    while (num > 0) {\n        if (num & 1) {\n            count++;\n        }\n        num >>= 1;\n    }\n    return count;\n}\nvector<int> sortArray(const vector<int>& arr) {\n    vector<int> arr_copy = arr;\n    sort(arr_copy.begin(), arr_copy.end(), [](int a, int b) {\n        int a_count = countOnes(a);\n        int b_count = countOnes(b);\n        if (a_count == b_count) {\n            return a < b;\n        } else {\n            return a_count < b_count;\n        }\n    });\n    return arr_copy;\n}\n",
            "vector<string> selectWords(const string& s, int n) {\n    string consonants = \"bcdfghjklmnpqrstvwxyz\";\n    vector<string> words = {};\n    for (int i = 0; i < s.size(); i++) {\n        int j = i;\n        while (j < s.size() && s[j] != ' ') {\n            j++;\n        }\n        if (j > i) {\n            words.push_back(s.substr(i, j - i));\n        }\n        i = j;\n    }\n    vector<string> result;\n    for (string w : words) {\n        int count = 0;\n        for (char c : w) {\n            if (find(consonants.begin(), consonants.end(), tolower(c)) != consonants.end()) {\n                count++;\n            }\n        }\n        if (count == n) {\n            result.push_back(w);\n        }\n    }\n    return result;\n}\n",
            "string getClosestVowel(const string& word) {\n    string vowels = \"aeiouAEIOU\";\n    for (int i = word.length() - 2; i >= 1; i--) {\n        if (vowels.find(word[i]) != string::npos && vowels.find(word[i - 1]) == string::npos && vowels.find(word[i + 1]) == string::npos) {\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}\n",
            "string matchParens(const vector<string>& lst) {\n    string s1 = lst[0] + lst[1];\n    string s2 = lst[1] + lst[0];\n    if (check(s1) || check(s2)) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nbool check(const string& s) {\n    int depth = 0;\n    for (char ch : s) {\n        if (ch == '(') {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "vector<int> maximum(const vector<int>& arr, int k) {\n    if (k == 0) {\n        return vector<int>();\n    }\n    vector<int> result(arr);\n    sort(result.begin(), result.end());\n    return vector<int>(result.end() - k, result.end());\n}\n",
            "int solution(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "int addElements(const vector<int>& arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        string s = to_string(arr[i]);\n        if (s.length() <= 2) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n",
            "vector<int> getOddCollatz(int n) {\n    vector<int> collatz = {1};\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.push_back(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    sort(collatz.begin(), collatz.end());\n    return collatz;\n}\n",
            "bool validDate(const string& date) {\n    if (date.size() != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n    int m = stoi(date.substr(0, 2));\n    int d = stoi(date.substr(3, 2));\n    if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n        return d >= 1 && d <= 31;\n    }\n    if (m == 4 || m == 6 || m == 9 || m == 11) {\n        return d >= 1 && d <= 30;\n    }\n    if (m == 2) {\n        return d >= 1 && d <= 29;\n    }\n    return false;\n}\n",
            "vector<string> splitWords(const string& txt) {\n    vector<string> result;\n    if (txt.find(' ') != string::npos) {\n        result = split(txt, ' ');\n    } else if (txt.find(',') != string::npos) {\n        result = split(txt, ',');\n    } else {\n        result.push_back(to_string(count_if(txt.begin(), txt.end(), [](char c) {\n            return c.islower() && c % 2 == 0;\n        })));\n    }\n    return result;\n}\nvector<string> split(const string& txt, char delim) {\n    vector<string> result;\n    string::size_type start = 0;\n    string::size_type end = txt.find(delim);\n    while (end != string::npos) {\n        result.push_back(txt.substr(start, end - start));\n        start = end + 1;\n        end = txt.find(delim, start);\n    }\n    result.push_back(txt.substr(start));\n    return result;\n}\n",
            "bool isSorted(const vector<int>& lst) {\n    for (int i = 1; i < lst.size(); ++i) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n    unordered_map<int, int> freq;\n    for (int i : lst) {\n        ++freq[i];\n    }\n    int max_freq = 0;\n    for (auto& [_, v] : freq) {\n        max_freq = max(max_freq, v);\n    }\n    return max_freq <= 2;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nstring intersection(const vector<int>& interval1, const vector<int>& interval2) {\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n}\n",
            "optional<int> prodSigns(const vector<int>& arr) {\n    if (arr.empty()) {\n        return {};\n    }\n    if (count(arr.begin(), arr.end(), 0) > 0) {\n        return 0;\n    }\n    int sign = count(arr.begin(), arr.end(), -1) % 2 == 1 ? -1 : 1;\n    return sign * accumulate(arr.begin(), arr.end(), 0, [](int a, int b) { return abs(a) + abs(b); });\n}\n",
            "vector<int> minPath(const vector<vector<int>>& grid, int k) {\n    int n = grid.size();\n    int min_val = n * n + 1;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (grid[i][j] == 1) {\n                vector<int> temp;\n                if (i != 0) {\n                    temp.push_back(grid[i - 1][j]);\n                }\n                if (j != 0) {\n                    temp.push_back(grid[i][j - 1]);\n                }\n                if (i != n - 1) {\n                    temp.push_back(grid[i + 1][j]);\n                }\n                if (j != n - 1) {\n                    temp.push_back(grid[i][j + 1]);\n                }\n                min_val = min(min_val, *min_element(temp.begin(), temp.end()));\n            }\n        }\n    }\n    vector<int> result;\n    for (int i = 0; i < k; ++i) {\n        result.push_back(1);\n    }\n    return result;\n}\n",
            "vector<int> tri(int n) {\n    if (n == 0) {\n        return vector<int>{1};\n    }\n    vector<int> seq = {1, 3};\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq.push_back(i / 2 + 1);\n        } else {\n            seq.push_back(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    vector<int> odds;\n    for (char d : to_string(n)) {\n        if (d % 2 == 1) {\n            odds.push_back(d - '0');\n        }\n    }\n    return accumulate(odds.begin(), odds.end(), 1, multiplies<int>());\n}\n",
            "bool isNested(const string& s) {\n    vector<int> open_idx;\n    vector<int> close_idx;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == '[') {\n            open_idx.push_back(i);\n        } else if (s[i] == ']') {\n            close_idx.push_back(i);\n        }\n    }\n    reverse(close_idx.begin(), close_idx.end());\n    int cnt = 0;\n    int i = 0;\n    int l = close_idx.size();\n    for (int idx : open_idx) {\n        if (i < l && idx < close_idx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "int sumSquares(const vector<double>& lst) {\n    int result = 0;\n    for (double n : lst) {\n        result += pow(ceil(n), 2);\n    }\n    return result;\n}\n",
            "bool checkIfLastCharIsALetter(const string& txt) {\n    if (txt.empty()) {\n        return false;\n    }\n    string last = txt.substr(txt.rfind(' ') + 1);\n    return last.size() == 1 && isalpha(last[0]);\n}\n",
            "int canArrange(const vector<int>& arr) {\n    if (arr.size() <= 1) {\n        return -1;\n    }\n    vector<int> idx;\n    for (int i = 1; i < arr.size(); ++i) {\n        if (arr[i] < arr[i - 1]) {\n            idx.push_back(i);\n        }\n    }\n    return max(idx, default=-1);\n}\n",
            "vector<optional<int>> largestSmallestIntegers(const vector<int>& lst) {\n    vector<int> neg, pos;\n    for (int i : lst) {\n        if (i < 0) {\n            neg.push_back(i);\n        } else if (i > 0) {\n            pos.push_back(i);\n        }\n    }\n    optional<int> max_neg, min_pos;\n    if (!neg.empty()) {\n        max_neg = *max_element(neg.begin(), neg.end());\n    }\n    if (!pos.empty()) {\n        min_pos = *min_element(pos.begin(), pos.end());\n    }\n    return {max_neg, min_pos};\n}\n",
            "optional<double> compareOne(any a, any b) {\n    double a1, b1;\n    if (a.type() == typeid(string)) {\n        stringstream ss(any_cast<string>(a));\n        ss >> a1;\n    } else if (a.type() == typeid(int)) {\n        a1 = any_cast<int>(a);\n    } else if (a.type() == typeid(double)) {\n        a1 = any_cast<double>(a);\n    } else {\n        throw runtime_error(\"Type Error\");\n    }\n    if (b.type() == typeid(string)) {\n        stringstream ss(any_cast<string>(b));\n        ss >> b1;\n    } else if (b.type() == typeid(int)) {\n        b1 = any_cast<int>(b);\n    } else if (b.type() == typeid(double)) {\n        b1 = any_cast<double>(b);\n    } else {\n        throw runtime_error(\"Type Error\");\n    }\n    if (a1 == b1) {\n        return nullopt;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    int fact = 1;\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "string fixSpaces(const string& txt) {\n    return regex_replace(regex_replace(txt, regex(R\"(\\s{3,})\"), \"-\"), regex(R\"(\\s)\"), \"_\");\n}\n",
            "string fileNameCheck(const string& file_name) {\n    vector<string> suf = {\"txt\", \"exe\", \"dll\"};\n    vector<string> lst;\n    split(lst, file_name, is_any_of(\".\"));\n    if (lst.size() != 2 || find(suf.begin(), suf.end(), lst[1]) == suf.end() || lst[0].size() == 0 || !isalpha(lst[0][0]) || count_if(lst[0].begin(), lst[0].end(), [](char x) { return isdigit(x); }) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "int sumSquares(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            result += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            result += lst[i] * lst[i] * lst[i];\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)) + 1; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nstring wordsInSentence(const string& sentence) {\n    vector<string> words = split(sentence, ' ');\n    return join(words, ' ', [](const string& w) { return isPrime(w.size()); });\n}\n",
            "bool simplify(const string& x, const string& n) {\n    vector<string> xs;\n    vector<string> ns;\n    stringstream ss(x);\n    string token;\n    while (getline(ss, token, '/')) {\n        xs.push_back(token);\n    }\n    stringstream ss2(n);\n    while (getline(ss2, token, '/')) {\n        ns.push_back(token);\n    }\n    int num = stoi(xs[0]) * stoi(ns[0]);\n    int den = stoi(xs[1]) * stoi(ns[1]);\n    return num % den == 0;\n}\n",
            "int digitsSum(int n) {\n    string n_str = to_string(n);\n    if (n >= 0) {\n        return accumulate(n_str.begin(), n_str.end(), 0, [](int a, char b) { return a + b - '0'; });\n    } else {\n        return (n_str[0] - '0') * 2 + digitsSum(abs(n));\n    }\n}\nvector<int> orderByPoints(const vector<int>& nums) {\n    return vector<int>(nums.begin(), nums.end());\n}\n",
            "int specialFilter(const vector<int>& nums) {\n    string odds = \"13579\";\n    return count_if(nums.begin(), nums.end(), [&](int n) {\n        return n > 10 && n % 2 == 1 && odds.find(to_string(n)[0]) != string::npos;\n    });\n}\n",
            "int getMaxTriples(int n) {\n    vector<int> c(3, 0);\n    for (int i = 1; i <= n; ++i) {\n        int a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}\n",
            "vector<string> bf(const string& planet1, const string& planet2) {\n    vector<string> names = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    auto l = find(names.begin(), names.end(), planet1);\n    auto r = find(names.begin(), names.end(), planet2);\n    if (l == names.end() || r == names.end()) {\n        return {};\n    }\n    l = distance(names.begin(), l);\n    r = distance(names.begin(), r);\n    if (l > r) {\n        swap(l, r);\n    }\n    if (l == r) {\n        return {};\n    }\n    return vector<string>(names.begin() + l + 1, names.begin() + r);\n}\n",
            "vector<string> sortedListSum(const vector<string>& lst) {\n    vector<string> result;\n    for (const string& s : lst) {\n        if (s.size() % 2 == 0) {\n            result.push_back(s);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        if (a.size() == b.size()) {\n            return a < b;\n        } else {\n            return a.size() < b.size();\n        }\n    });\n    return result;\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(const vector<double>& lst) {\n    int result = 0;\n    for (double n : lst) {\n        if (n >= 0 && n % 2 == 1) {\n            result += n * n;\n        }\n    }\n    return result;\n}\n",
            "vector<int> compare(const vector<int>& game, const vector<int>& guess) {\n    vector<int> result;\n    transform(game.begin(), game.end(), guess.begin(), back_inserter(result), [](int x, int y) { return abs(x - y); });\n    return result;\n}\n",
            "string strongestExtension(const string& class_name, const vector<string>& extensions) {\n    double max_s = -INFINITY;\n    string max_ext;\n    for (const string& ext : extensions) {\n        int upper = 0;\n        int lower = 0;\n        for (char c : ext) {\n            if (isupper(c)) {\n                upper += 1;\n            } else if (islower(c)) {\n                lower += 1;\n            }\n        }\n        double s = upper - lower;\n        if (s > max_s) {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return class_name + \".\" + max_ext;\n}\n",
            "bool cycpatternCheck(const string& a, const string& b) {\n    if (a.size() < b.size()) {\n        return false;\n    }\n    for (int i = 0; i < b.size(); i++) {\n        if (a.find(b.substr(i) + b.substr(0, i)) != string::npos) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "vector<int> evenOddCount(int num) {\n    string ds = to_string(abs(num));\n    int even = count_if(ds.begin(), ds.end(), [](char d) { return d - '0' % 2 == 0; });\n    return vector<int>{even, ds.size() - even};\n}\n",
            "string intToMiniRoman(int num) {\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string res;\n    for (int i = 0; i < values.size(); i++) {\n        while (num >= values[i]) {\n            res += numerals[i];\n            num -= values[i];\n        }\n    }\n    return res;\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    int s[3] = {a, b, c};\n    sort(s, s + 3);\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}\n",
            "string findMax(const vector<string>& words) {\n    int max_cnt = 0;\n    string max_w;\n    for (const string& w : words) {\n        set<char> cnt;\n        for (char c : w) {\n            cnt.insert(c);\n        }\n        if (cnt.size() > max_cnt) {\n            max_cnt = cnt.size();\n            max_w = w;\n        } else if (cnt.size() == max_cnt) {\n            max_w = min(max_w, w);\n        }\n    }\n    return max_w;\n}\n",
            "vector<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return vector<int>{num + need, remaining - need};\n    } else {\n        return vector<int>{num + remaining, 0};\n    }\n}\n",
            "int doAlgebra(const vector<string>& operators, const vector<int>& operands) {\n    vector<string> ops = operators;\n    vector<int> nums = operands;\n    int i = ops.size() - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]);\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        }\n        else if (ops[i] == \"//\") {\n            nums[i] = nums[i] / nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        }\n        else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "string solve(const string& s) {\n    if (all_of(s.begin(), s.end(), [](char ch) { return !isalpha(ch); })) {\n        return string(s.rbegin(), s.rend());\n    }\n    string result;\n    for (char ch : s) {\n        if (!isalpha(ch)) {\n            result.push_back(ch);\n        } else if (isupper(ch)) {\n            result.push_back(tolower(ch));\n        } else if (islower(ch)) {\n            result.push_back(toupper(ch));\n        }\n    }\n    return result;\n}\n",
            "optional<string> stringToMd5(const string& txt) {\n    if (txt.empty()) {\n        return {};\n    }\n    unsigned char md5_encoded[MD5_DIGEST_LENGTH];\n    MD5((const unsigned char*)txt.c_str(), txt.length(), md5_encoded);\n    stringstream ss;\n    for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n        ss << setfill('0') << setw(2) << hex << (int)md5_encoded[i];\n    }\n    return ss.str();\n}\n",
            "vector<int> generateIntegers(int a, int b) {\n    int lower = max(2, min(a, b));\n    int upper = min(8, max(a, b));\n    vector<int> result;\n    for (int i = lower; i <= upper; i++) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"
        ],
        "csharp": [
            "class Global {\n    public static bool HasCloseElements(IList<double> numbers, double threshold) {\n        for (int i = 0; i < numbers.Count; i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n                if (Math.Abs(numbers[i] - numbers[j]) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<string> SeparateParenGroups(string parenString) {\n        var groups = new List<string>();\n        var stk = new Stack<char>();\n        var currentGroup = new StringBuilder();\n        var parens = parenString.Replace(\" \", \"\");\n        foreach (var ch in parens) {\n            if (ch == '(') {\n                stk.Push(ch);\n                currentGroup.Append(ch);\n            } else if (ch == ')') {\n                stk.Pop();\n                currentGroup.Append(ch);\n                if (stk.Count == 0) {\n                    groups.Add(currentGroup.ToString());\n                    currentGroup = new StringBuilder();\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double TruncateNumber(double num) {\n        return num - Math.Floor(num);\n    }\n}\n",
            "class Global {\n    public static bool BelowZero(IList<int> operations) {\n        int balance = 0;\n        foreach (var op in operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double MeanAbsoluteDeviation(IList<double> numbers) {\n        double mean = numbers.Sum() / numbers.Count;\n        double deviation = numbers.Select(x => Math.Abs(x - mean)).Sum();\n        return deviation / numbers.Count;\n    }\n}\n",
            "class Global {\n    public static IList<int> Intersperse(IList<int> numbers, int delimiter) {\n        var result = new List<int>();\n        for (int i = 0; i < numbers.Count; i++) {\n            if (i != 0) {\n                result.Add(delimiter);\n            }\n            result.Add(numbers[i]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> ParseNestedParens(string parenString) {\n        var result = new List<int>();\n        var parenGroups = parenString.Split(' ');\n        foreach (var group in parenGroups) {\n            var depth = 0;\n            var maxDepth = 0;\n            foreach (var ch in group) {\n                if (ch == '(') {\n                    depth += 1;\n                    maxDepth = Math.Max(maxDepth, depth);\n                } else if (ch == ')') {\n                    depth -= 1;\n                }\n            }\n            result.Add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> FilterBySubstring(IList<string> strs, string substring) {\n        return strs.Where(s => s.Contains(substring)).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<int> SumProduct(IList<int> numbers) {\n        var nSum = numbers.Sum();\n        var nProduct = numbers.Aggregate(1, (acc, x) => acc * x);\n        return new List<int> { nSum, nProduct };\n    }\n}\n",
            "class Global {\n    public static IList<int> RollingMax(IList<int> numbers) {\n        int maxSoFar = int.MinValue;\n        var result = new List<int>();\n        foreach (var num in numbers) {\n            maxSoFar = Math.Max(maxSoFar, num);\n            result.Add(maxSoFar);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string MakePalindrome(string s) {\n        if (s == new string(s.Reverse())) {\n            return s;\n        }\n        for (int i = 0; i < s.Length; i++) {\n            if (s.Substring(i) == new string(s.Substring(i).Reverse())) {\n                return s + s.Substring(0, i);\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static string StringXor(string a, string b) {\n        var result = new StringBuilder();\n        for (int i = 0; i < Math.Min(a.Length, b.Length); i++) {\n            if (a[i] == b[i]) {\n                result.Append('0');\n            } else {\n                result.Append('1');\n            }\n        }\n        return result.ToString();\n    }\n}\n",
            "class Global {\n    public static string? Longest(IList<string> strs) {\n        if (strs.Count == 0) {\n            return null;\n        }\n        string longestS = strs[0];\n        foreach (var s in strs) {\n            if (s.Length > longestS.Length) {\n                longestS = s;\n            }\n        }\n        return longestS;\n    }\n}\n",
            "class Global {\n    public static int GreatestCommonDivisor(int a, int b) {\n        return b == 0 ? a : GreatestCommonDivisor(b, a % b);\n    }\n}\n",
            "class Global {\n    public static IList<string> AllPrefixes(string s) {\n        var prefixes = new List<string>();\n        for (int i = 0; i < s.Length; i++) {\n            prefixes.Add(s.Substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static string StringSequence(int n) {\n        return string.Join(\" \", Enumerable.Range(0, n + 1).Select(i => i.ToString()));\n    }\n}\n",
            "class Global {\n    public static int CountDistinctCharacters(string s) {\n        var set = new HashSet<char>();\n        foreach (var c in s.ToLower().ToCharArray()) {\n            set.Add(c);\n        }\n        return set.Count;\n    }\n}\n",
            "class Global {\n    public static IList<int> ParseMusic(string musicString) {\n        var durations = new Dictionary<string, int> {\n            {\"o\", 4},\n            {\"o|\", 2},\n            {\".|\", 1}\n        };\n        var notes = musicString.Split(' ');\n        return notes.Select(note => durations[note]).ToList();\n    }\n}\n",
            "class Global {\n    public static int HowManyTimes(string s, string substring) {\n        int times = 0;\n        for (int i = 0; i < s.Length - substring.Length + 1; i++) {\n            if (s.Substring(i, substring.Length) == substring) {\n                times += 1;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static string SortNumbers(string numbers) {\n        var numDict = new Dictionary<string, int>();\n        numDict.Add(\"zero\", 0);\n        numDict.Add(\"one\", 1);\n        numDict.Add(\"two\", 2);\n        numDict.Add(\"three\", 3);\n        numDict.Add(\"four\", 4);\n        numDict.Add(\"five\", 5);\n        numDict.Add(\"six\", 6);\n        numDict.Add(\"seven\", 7);\n        numDict.Add(\"eight\", 8);\n        numDict.Add(\"nine\", 9);\n        var numList = new List<string>();\n        foreach (var word in numbers.Split(\" \")) {\n            if (numDict.ContainsKey(word)) {\n                numList.Add(word);\n            }\n        }\n        numList.Sort((a, b) => numDict[a].CompareTo(numDict[b]));\n        return string.Join(\" \", numList);\n    }\n}\n",
            "class Global {\n    public static IList<double> FindClosestElements(IList<double> numbers) {\n        var sortedNumbers = new List<double>(numbers);\n        sortedNumbers.Sort();\n        double minDiff = double.PositiveInfinity;\n        var closestPair = new List<double>();\n        for (int i = 1; i < sortedNumbers.Count; i++) {\n            var diff = sortedNumbers[i] - sortedNumbers[i - 1];\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = new List<double> { sortedNumbers[i - 1], sortedNumbers[i] };\n            }\n        }\n        return closestPair;\n    }\n}\n",
            "class Global {\n    public static IList<double> RescaleToUnit(IList<double> numbers) {\n        var minNum = numbers.Min();\n        var maxNum = numbers.Max();\n        if (minNum == maxNum) {\n            return new List<double>(new double[numbers.Count]);\n        } else {\n            return numbers.Select(num => (num - minNum) / (maxNum - minNum)).ToList();\n        }\n    }\n}\n",
            "class Global {\n    public static IList<int> FilterIntegers(IList<object> values) {\n        var result = new List<int>();\n        foreach (var v in values) {\n            if (v is int x) {\n                result.Add(x);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int StrLength(string s) {\n        return s.Length;\n    }\n}\n",
            "class Global {\n    public static int LargestDivisor(int n) {\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}\n",
            "class Global {\n    public static IList<int> Factorize(int n) {\n        var factors = new List<int>();\n        var divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.Add(divisor);\n                n /= divisor;\n            } else {\n                divisor++;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static IList<int> RemoveDuplicates(IList<int> numbers) {\n        var counts = new Dictionary<int, int>();\n        foreach (var num in numbers) {\n            counts[num] = counts.ContainsKey(num) ? counts[num] + 1 : 1;\n        }\n        var res = new List<int>();\n        foreach (var num in numbers) {\n            if (counts[num] == 1) {\n                res.Add(num);\n            }\n        }\n        return res;\n    }\n}\n",
            "class Global {\n    public static string FlipCase(string s) {\n        var flipped = new StringBuilder();\n        foreach (var ch in s) {\n            if (!char.IsLetter(ch)) {\n                flipped.Append(ch);\n            } else if (char.IsLower(ch)) {\n                flipped.Append(char.ToUpper(ch));\n            } else if (char.IsUpper(ch)) {\n                flipped.Append(char.ToLower(ch));\n            }\n        }\n        return flipped.ToString();\n    }\n}\n",
            "class Global {\n    public static string Concatenate(IList<string> strs) {\n        var result = \"\";\n        foreach (var s in strs) {\n            result += s;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> FilterByPrefix(IList<string> strs, string prefixStr) {\n        var result = new List<string>();\n        foreach (var s in strs) {\n            if (s.StartsWith(prefixStr)) {\n                result.Add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> GetPositive(IList<int> l) {\n        return l.Where(num => num > 0).ToList();\n    }\n}\n",
            "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static double Poly(IList<int> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.Count; i++) {\n            res += xs[i] * Math.Pow(x, i);\n        }\n        return res;\n    }\n    public static double FindZero(IList<int> xs) {\n        double x1 = 1.0;\n        double x2 = -1.0;\n        while (Poly(xs, x1) * Poly(xs, x2) > 0.0) {\n            x1 *= 2.0;\n            x2 *= 2.0;\n        }\n        while (Math.Abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2.0;\n            if (Poly(xs, mid) == 0.0) {\n                return mid;\n            } else if (Poly(xs, mid) * Poly(xs, x1) < 0.0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2.0;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortThird(IList<int> l) {\n        var sortedThird = new List<int>(l.Count);\n        for (int i = 0; i < l.Count; i += 3) {\n            sortedThird.Add(l[i]);\n        }\n        sortedThird.Sort();\n        var result = new List<int>(l.Count);\n        for (int i = 0; i < l.Count; i++) {\n            result.Add(i % 3 == 0 ? sortedThird[i / 3] : l[i]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> ListUnique(IList<int> l) {\n        return new List<int>(new HashSet<int>(l));\n    }\n}\n",
            "class Global {\n    public static int MaxElement(IList<int> l) {\n        if (l.Count == 0) {\n            return 0;\n        } else {\n            return l.Max();\n        }\n    }\n}\n",
            "class Global {\n    public static int FizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += i.ToString().Count(c => c == '7');\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortEven(IList<int> l) {\n        var sortedEven = new List<int>(l.Count / 2);\n        for (int i = 0; i < l.Count; i += 2) {\n            sortedEven.Add(l[i]);\n        }\n        sortedEven.Sort();\n        var result = new List<int>(l.Count);\n        for (int i = 0; i < l.Count; i++) {\n            result.Add(i % 2 == 0 ? sortedEven[i / 2] : l[i]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string EncodeCyclic(string s) {\n        var result = \"\";\n        for (int i = 0; i < s.Length; i += 3) {\n            if (i + 3 > s.Length) {\n                result += s.Substring(i);\n            } else {\n                result += s.Substring(i + 1, 2);\n                result += s.Substring(i, 1);\n            }\n        }\n        return result;\n    }\n    public static string DecodeCyclic(string s) {\n        return EncodeCyclic(EncodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static int PrimeFib(int n) {\n        int[] f = { 0, 1 };\n        int cnt = 0;\n        while (cnt < n) {\n            f = new int[] { f[1], f[0] + f[1] };\n            if (IsPrime(f[1])) { cnt += 1; }\n        }\n        return f[1];\n    }\n    public static bool IsPrime(int n) {\n        if (n < 2) { return false; }\n        for (int i = 2; i <= (int)Math.Sqrt(n); i++) {\n            if (n % i == 0) { return false; }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static bool TriplesSumToZero(IList<int> l) {\n        for (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static int CarRaceCollision(int n) {\n        return (int)Math.Pow(n, 2);\n    }\n}\n",
            "class Global {\n    public static IList<int> IncrList(IList<int> l) {\n        return l.Select(i => i + 1).ToList();\n    }\n}\n",
            "class Global {\n    public static bool PairsSumToZero(IList<int> l) {\n        var seen = new HashSet<int>();\n        foreach (var num in l) {\n            if (seen.Contains(-num)) {\n                return true;\n            }\n            seen.Add(num);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string ChangeBase(int x, int bas) {\n        if (x == 0) {\n            return \"0\";\n        }\n        var digits = new List<string>();\n        while (x > 0) {\n            digits.Add(x % bas);\n            x /= bas;\n        }\n        return string.Join(\"\", digits[::-1]);\n    }\n}\n",
            "class Global {\n    public static double TriangleArea(int a, int h) {\n        return (a * h) / 2.0;\n    }\n}\n",
            "class Global {\n    public static int Fib4(int n) {\n        var fib = new int[] { 0, 0, 2, 0 };\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n        }\n        return fib[n % 4];\n    }\n}\n",
            "class Global {\n    public static double Median(IList<double> l) {\n        var sl = new List<double>(l);\n        sl.Sort();\n        if (sl.Count % 2 != 0) {\n            return sl[sl.Count / 2];\n        } else {\n            return (sl[sl.Count / 2] + sl[sl.Count / 2 - 1]) / 2.0;\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsPalindrome(string txt) {\n        return txt == new string(txt.Reverse().ToArray());\n    }\n}\n",
            "class Global {\n    public static int Modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "class Global {\n    public static string EncodeShift(string s) {\n        var result = new StringBuilder();\n        foreach (var ch in s) {\n            var ch_num = ch;\n            var shifted_ch_num = (ch_num - 97 + 5) % 26 + 97;\n            result.Append(shifted_ch_num);\n        }\n        return result.ToString();\n    }\n    public static string DecodeShift(string s) {\n        var result = new StringBuilder();\n        foreach (var ch in s) {\n            var ch_num = ch;\n            var shifted_ch_num = (ch_num - 97 + 21) % 26 + 97;\n            result.Append(shifted_ch_num);\n        }\n        return result.ToString();\n    }\n}\n",
            "class Global {\n    public static string RemoveVowels(string txt) {\n        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        var result = new StringBuilder();\n        foreach (var char in txt) {\n            if (!vowels.Contains(char)) {\n                result.Append(char);\n            }\n        }\n        return result.ToString();\n    }\n}\n",
            "class Global {\n    public static bool BelowThreshold(IList<int> l, int t) {\n        return l.All(x => x < t);\n    }\n}\n",
            "class Global {\n    public static int Add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static bool SameChars(string s0, string s1) {\n        return new HashSet<char>(s0) == new HashSet<char>(s1);\n    }\n}\n",
            "class Global {\n    public static int Fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return Fib(n - 1) + Fib(n - 2);\n        }\n    }\n}\n",
            "class Global {\n    public static bool CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach (var b in brackets) {\n            if (b == '<') {\n                depth += 1;\n            } else if (b == '>') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static bool Monotonic(IList<int> l) {\n        var diff = new List<int>();\n        for (int i = 0; i < l.Count - 1; i++) {\n            diff.Add(l[i + 1] - l[i]);\n        }\n        return diff.TrueForAll(x => x <= 0) || diff.TrueForAll(x => x >= 0);\n    }\n}\n",
            "class Global {\n    public static IList<int> Common(IList<int> l1, IList<int> l2) {\n        return new List<int>(new HashSet<int>(l1) & new HashSet<int>(l2));\n    }\n}\n",
            "class Global {\n    public static int LargestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i != 0) {\n                i++;\n            } else {\n                n /= i;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int SumToN(int n) {\n        return (n * (n + 1)) / 2;\n    }\n}\n",
            "class Global {\n    public static bool CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach (var b in brackets) {\n            if (b == '(') {\n                depth += 1;\n            } else if (b == ')') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static IList<int> Derivative(IList<int> xs) {\n        var result = new List<int>();\n        for (int i = 1; i < xs.Count; i++) {\n            result.Add(xs[i] * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int Fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n        int a = 0, b = 0, c = 1;\n        while (n > 2) {\n            a = b;\n            b = c;\n            c = a + b + c;\n            n -= 1;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int VowelsCount(string s) {\n        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var cnt = 0;\n        for (var i = 0; i < s.Length; i++) {\n            if (vowels.Contains(char.ToLower(s[i])) || (i == s.Length - 1 && char.ToLower(s[i]) == 'y')) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static string CircularShift(int x, int shift) {\n        var x_str = x.ToString();\n        if (shift > x_str.Length) {\n            return new string(x_str.Reverse().ToArray());\n        } else {\n            return x_str.Substring(x_str.Length - shift) + x_str.Substring(0, x_str.Length - shift);\n        }\n    }\n}\n",
            "class Global {\n    public static int DigitSum(string s) {\n        return s.ToCharArray().Where(c => char.IsUpper(c)).Sum(c => c);\n    }\n}\n",
            "class Global {\n    public static int FruitDistribution(string s, int n) {\n        var words = s.Split(' ');\n        var apples = int.Parse(words[Array.IndexOf(words, \"apples\") - 1]);\n        var oranges = int.Parse(words[Array.IndexOf(words, \"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n}\n",
            "class Global {\n    public static IList<int> Pluck(IList<int> arr) {\n        var evens = new List<int>();\n        foreach (var n in arr) {\n            if (n % 2 == 0) {\n                evens.Add(n);\n            }\n        }\n        if (evens.Count == 0) {\n            return new List<int>();\n        }\n        var minEven = evens.Min();\n        return new List<int> { minEven, arr.IndexOf(minEven) };\n    }\n}\n",
            "class Global {\n    public static int Search(IList<int> lst) {\n        var freqs = new Dictionary<int, int>();\n        foreach (var n in lst) {\n            if (freqs.ContainsKey(n)) {\n                freqs[n] += 1;\n            } else {\n                freqs[n] = 1;\n            }\n        }\n        var goodVals = new List<int>(freqs.Count);\n        foreach (var kvp in freqs) {\n            if (kvp.Value >= kvp.Key) {\n                goodVals.Add(kvp.Key);\n            }\n        }\n        return goodVals.Count > 0 ? goodVals.Max() : -1;\n    }\n}\n",
            "class Global {\n    public static IList<int> StrangeSortList(IList<int> lst) {\n        var sl = new List<int>(lst);\n        sl.Sort();\n        var result = new List<int>();\n        var left = 0;\n        var right = sl.Count - 1;\n        while (left <= right) {\n            result.Add(sl[left]);\n            left += 1;\n            if (left <= right) {\n                result.Add(sl[right]);\n                right -= 1;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double TriangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            return Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}\n",
            "class Global {\n    public static bool WillItFly(IList<int> q, int w) {\n        if (q.Count == 0) {\n            return false;\n        }\n        bool isPalin = true;\n        for (int i = 0; i < q.Count; i++) {\n            if (q[i] != q[q.Count - i - 1]) {\n                isPalin = false;\n                break;\n            }\n        }\n        int total = 0;\n        foreach (var e in q) {\n            total += e;\n        }\n        return isPalin && total <= w;\n    }\n}\n",
            "class Global {\n    public static int SmallestChange(IList<int> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.Count / 2; i++) {\n            if (arr[i] != arr[arr.Count - i - 1]) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static IList<string> TotalMatch(IList<string> lst1, IList<string> lst2) {\n        var cnt1 = lst1.Sum(s => s.Length);\n        var cnt2 = lst2.Sum(s => s.Length);\n        return cnt1 <= cnt2 ? lst1 : lst2;\n    }\n}\n",
            "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= (int)Math.Sqrt(n) + 1; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static bool IsMultiplyPrime(int a) {\n        int cnt = 0;\n        for (int i = 2; i <= a; i++) {\n            if (IsPrime(i)) {\n                while (a % i == 0) {\n                    cnt++;\n                    a /= i;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n}\n",
            "class Global {\n    public static bool IsSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "class Global {\n    public static bool IsCube(int a) {\n        a = Math.Abs(a);\n        var root = (int)Math.Round(Math.Pow(a, 1.0 / 3.0));\n        return root * root * root == a;\n    }\n}\n",
            "class Global {\n    public static int HexKey(string num) {\n        return num.Count(x => \"2357BD\".Contains(x));\n    }\n}\n",
            "class Global {\n    public static string DecimalToBinary(int dec) {\n        return $\"db{Convert.ToString(dec, 2)}db\";\n    }\n}\n",
            "class Global {\n    public static bool IsHappy(string s) {\n        if (s.Length < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static IList<string> NumericalLetterGrade(IList<double> grades) {\n        var result = new List<string>();\n        foreach (var g in grades) {\n            if (g == 4.0) {\n                result.Add(\"A+\");\n            } else if (g > 3.7) {\n                result.Add(\"A\");\n            } else if (g > 3.3) {\n                result.Add(\"A-\");\n            } else if (g > 3.0) {\n                result.Add(\"B+\");\n            } else if (g > 2.7) {\n                result.Add(\"B\");\n            } else if (g > 2.3) {\n                result.Add(\"B-\");\n            } else if (g > 2.0) {\n                result.Add(\"C+\");\n            } else if (g > 1.7) {\n                result.Add(\"C\");\n            } else if (g > 1.3) {\n                result.Add(\"C-\");\n            } else if (g > 1.0) {\n                result.Add(\"D+\");\n            } else if (g > 0.7) {\n                result.Add(\"D\");\n            } else if (g > 0.0) {\n                result.Add(\"D-\");\n            } else {\n                result.Add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool PrimeLength(string s) {\n        var length = s.Length;\n        if (length < 2) {\n            return false;\n        }\n        for (var i = 2; i <= Math.Floor(Math.Sqrt(length)) + 1; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int StartsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 2 * 9 * (int)Math.Pow(10, n - 2);\n    }\n}\n",
            "class Global {\n    public static string Solve(int n) {\n        var digitsSum = n.ToString().Select(d => (int)Char.GetNumericValue(d)).Sum();\n        return Convert.ToString(digitsSum, 2);\n    }\n}\n",
            "class Global {\n    public static int Add(IList<int> lst) {\n        return lst.Where((x, i) => i % 2 == 1 && x % 2 == 0).Sum();\n    }\n}\n",
            "class Global {\n    public static string AntiShuffle(string s) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n        foreach (var word in words) {\n            var chars = word.ToCharArray();\n            Array.Sort(chars);\n            result.Add(new string(chars));\n        }\n        return string.Join(\" \", result);\n    }\n}\n",
            "class Global {\n    public static IList<IList<int>> GetRow(IList<IList<int>> lst, int x) {\n        var coords = new List<IList<int>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    coords.Add(new List<int> { i, j });\n                }\n            }\n        }\n        coords.Sort((a, b) => {\n            return a[0].CompareTo(b[0]).ThenByDescending(a[1].CompareTo(b[1]));\n        });\n        return coords;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortArray(IList<int> arr) {\n        if (arr.Count == 0) {\n            return new List<int>();\n        }\n        if ((arr[0] + arr[arr.Count - 1]) % 2 == 0) {\n            return new List<int>(arr).Sort((a, b) => b.CompareTo(a));\n        } else {\n            return new List<int>(arr).Sort();\n        }\n    }\n}\n",
            "class Global {\n    public static string Encrypt(string s) {\n        var result = new StringBuilder();\n        foreach (var ch in s) {\n            var shifted = (byte)(ch + 4);\n            if (shifted > 'z') {\n                shifted -= 26;\n            }\n            result.Append((char)shifted);\n        }\n        return result.ToString();\n    }\n}\n",
            "class Global {\n    public static int? NextSmallest(IList<int> lst) {\n        var sl = new List<int>(lst);\n        sl.Sort();\n        sl.RemoveAll(x => x == sl[0]);\n        if (sl.Count < 2) {\n            return null;\n        }\n        return sl[1];\n    }\n}\n",
            "class Global {\n    public static int IsBored(string s) {\n        var re = new Regex(@\"[.!?]\\s*\");\n        var sentences = re.Split(s);\n        return sentences.Where(sentence => sentence.Length >= 2 && sentence.Substring(0, 2) == \"I \").Count();\n    }\n}\n",
            "class Global {\n    public static bool AnyInt(object x, object y, object z) {\n        if (x is int x1 && y is int y1 && z is int z1) {\n            return x1 + y1 == z1 || x1 + z1 == y1 || y1 + z1 == x1;\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string Encode(string message) {\n        var vowels = \"aeiouAEIOU\";\n        var result = new List<char>();\n        foreach (var ch in message) {\n            if (char.IsLetter(ch)) {\n                var ch1 = char.IsLower(ch) ? char.ToUpper(ch) : char.ToLower(ch);\n                if (vowels.Contains(ch1)) {\n                    ch1 = (char)(ch1 + 2);\n                }\n                result.Add(ch1);\n            } else {\n                result.Add(ch);\n            }\n        }\n        return new string(result.ToArray());\n    }\n}\n",
            "class Global {\n    public static int Skjkasdkd(IList<int> lst) {\n        var primes = new List<int>();\n        foreach (var n in lst) {\n            if (n < 2) {\n                continue;\n            }\n            for (var i = 2; i <= Math.Floor(Math.Sqrt(n)) + 1; i++) {\n                if (n % i == 0) {\n                    goto next;\n                }\n            }\n            primes.Add(n);\n            next:;\n        }\n        if (primes.Count == 0) {\n            return 0;\n        }\n        var largest = primes.Max().ToString();\n        return largest.Sum(digit => (int)digit);\n    }\n}\n",
            "class Global {\n    public static bool CheckDictCase(IDictionary<string, string> d) {\n        if (d == null || d.Count == 0) {\n            return false;\n        }\n        return d.Keys.All(c => char.IsLower(c[0])) || d.Keys.All(c => char.IsUpper(c[0]));\n    }\n}\n",
            "class Global {\n    public static IList<int> CountUpTo(int n) {\n        var primes = new List<int>();\n        for (int num = 2; num < n; num++) {\n            if (primes.All(p => num % p != 0)) {\n                primes.Add(num);\n            }\n        }\n        return primes;\n    }\n}\n",
            "class Global {\n    public static int Multiply(int a, int b) {\n        return Math.Abs(a) % 10 * Math.Abs(b) % 10;\n    }\n}\n",
            "class Global {\n    public static int CountUpper(string s) {\n        var vowels = \"AEIOU\";\n        var result = 0;\n        for (var i = 0; i < s.Length; i++) {\n            if (i % 2 == 0 && vowels.Contains(s[i])) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int ClosestInteger(string value) {\n        var num = double.Parse(value, CultureInfo.InvariantCulture);\n        return num >= 0.0 ? (int)Math.Floor(num + 0.5) : (int)Math.Ceiling(num - 0.5);\n    }\n}\n",
            "class Global {\n    public static IList<int> MakeAPile(int n) {\n        var result = new List<int>();\n        for (int i = 0; i < n; i++) {\n            result.Add(n + 2 * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> WordsString(string s) {\n        var re = new Regex(\", | \");\n        var result = new List<string>();\n        foreach (var w in re.Split(s)) {\n            if (w.Length > 0) {\n                result.Add(w);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int ChooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x != y) {\n            return y - 1;\n        }\n        return -1;\n    }\n}\n",
            "class Global {\n    public static string? RoundedAvg(int n, int m) {\n        if (n > m) {\n            return null;\n        }\n        var rAvg = (int)Math.Round((m + n) / 2.0 + 0.5);\n        return Convert.ToString(rAvg, 2);\n    }\n}\n",
            "class Global {\n    public static IList<int> UniqueDigits(IList<int> x) {\n        var result = new List<int>();\n        foreach (var num in x) {\n            if (AllDigitsOdd(num.ToString())) {\n                result.Add(num);\n            }\n        }\n        result.Sort();\n        return result;\n    }\n    public static bool AllDigitsOdd(string s) {\n        return s.ToCharArray().All(digit => digit.ToString().ToInt32().Value % 2 != 0);\n    }\n}\n",
            "class Global {\n    public static IList<string> ByLength(IList<int> arr) {\n        var digitNames = new List<string> { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" };\n        var sortedArr = new List<int>(arr);\n        sortedArr.Sort();\n        sortedArr.Reverse();\n        return new List<string>(digitNames[x - 1] for x in sortedArr);\n    }\n}\n",
            "class Global {\n    public static IList<int> F(int n) {\n        var nums = new List<int>();\n        for (int i = 1; i <= n; i++) {\n            nums.Add(i);\n        }\n        return nums.Select((i, index) => index % 2 != 0 ? nums.Take(i).Sum() : nums.Take(i).Aggregate((x, y) => x * y)).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<int> EvenOddPalindrome(int n) {\n        var cnt = new List<int> { 0, 0 };\n        for (int i = 1; i <= n; i++) {\n            if (IsPalindrome(i.ToString())) {\n                cnt[(i % 2) as usize] += 1;\n            }\n        }\n        return cnt;\n    }\n    public static bool IsPalindrome(string txt) {\n        return txt == new string(txt.Reverse());\n    }\n}\n",
            "class Global {\n    public static int CountNums(IList<int> arr) {\n        return arr.Count(n => {\n            var n_str = n.ToString();\n            if (n >= 0) {\n                return n_str.Sum(d => int.Parse(d.ToString()));\n            } else {\n                return int.Parse(n_str.Substring(0, 2)) * 2 + CountNums(new List<int> { Math.Abs(n) });\n            }\n        }) > 0;\n    }\n}\n",
            "class Global {\n    public static bool MoveOneBall(IList<int> arr) {\n        if (arr.Count == 0) {\n            return true;\n        }\n        var sortedArr = new List<int>(arr);\n        sortedArr.Sort();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr.GetRange(i, arr.Count - i).SequenceEqual(sortedArr.GetRange(0, arr.Count - i)) && arr.GetRange(0, i).SequenceEqual(sortedArr.GetRange(arr.Count - i, i))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string CanExchange(IList<int> lst1, IList<int> lst2) {\n        var oddCnt = lst1.Count(num => num % 2 != 0);\n        var evenCnt = lst2.Count(num => num % 2 == 0);\n        return evenCnt >= oddCnt ? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static IDictionary<string, int> Histogram(string test) {\n        var freq = new Dictionary<string, int>();\n        var words = test.Split(' ').Where(w => w.Length > 0).ToList();\n        foreach (var w in words) {\n            if (freq.ContainsKey(w)) {\n                freq[w] += 1;\n            } else {\n                freq[w] = 1;\n            }\n        }\n        var result = new Dictionary<string, int>();\n        if (freq.Count > 0) {\n            var max_freq = freq.Values.Max();\n            foreach (var (k, v) in freq) {\n                if (v == max_freq) {\n                    result[k] = v;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> ReverseDelete(string s, string c) {\n        var s1 = new string(s.ToCharArray().Where(ch => !c.Contains(ch)).ToArray());\n        return new List<string> { s1, s1 == new string(s1.ToCharArray().Reverse().ToArray()) ? \"yes\" : \"no\" };\n    }\n}\n",
            "class Global {\n    public static IList<string> OddCount(IList<string> lst) {\n        var result = new List<string>();\n        foreach (var num in lst) {\n            var n = num.Count(d => d % 2 == 1);\n            var rs = \"the number of odd elements in the string i of the input.\";\n            result.Add(rs.Replace(\"i\", n.ToString()));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int MinSubArraySum(IList<int> nums) {\n        int minSum = 0;\n        int curSum = 0;\n        foreach (var n in nums) {\n            curSum = Math.Min(curSum + n, 0);\n            minSum = Math.Min(curSum, minSum);\n        }\n        if (minSum == 0) {\n            minSum = nums.Min();\n        }\n        return minSum;\n    }\n}\n",
            "class Global {\n    public static int MaxFill(IList<IList<int>> grid, int capacity) {\n        return grid.Sum(arr => (arr.Sum() as double / capacity as double).Ceiling() as int);\n    }\n}\n",
            "class Global {\n    public static IList<int> SortArray(IList<int> arr) {\n        var count = new Dictionary<int, int>();\n        foreach (var a in arr) {\n            count[a] = count.GetValueOrDefault(a, 0) + 1;\n        }\n        var result = new List<int>();\n        foreach (var a in arr) {\n            result.Add(a);\n        }\n        result.Sort((a, b) => {\n            var a_count = count.GetValueOrDefault(a, 0);\n            var b_count = count.GetValueOrDefault(b, 0);\n            if (a_count == b_count) {\n                return a.CompareTo(b);\n            } else {\n                return a_count.CompareTo(b_count);\n            }\n        });\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> SelectWords(string s, int n) {\n        var consonants = \"bcdfghjklmnpqrstvwxyz\";\n        var words = new List<string>();\n        foreach (var w in s.Split(' ')) {\n            if (w.Length > 0) {\n                words.Add(w);\n            }\n        }\n        return new List<string>(words.FindAll(w => w.ToLower().Count(c => consonants.Contains(c)) == n));\n    }\n}\n",
            "class Global {\n    public static string GetClosestVowel(string word) {\n        var vowels = \"aeiouAEIOU\";\n        for (int i = word.Length - 2; i >= 1; i--) {\n            if (vowels.Contains(word[i]) && !vowels.Contains(word[i - 1]) && !vowels.Contains(word[i + 1])) {\n                return word[i].ToString();\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static string MatchParens(IList<string> lst) {\n        var s1 = lst[0] + lst[1];\n        var s2 = lst[1] + lst[0];\n        if (Check(s1) || Check(s2)) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n    public static bool Check(string s) {\n        var depth = 0;\n        foreach (var ch in s) {\n            if (ch == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static IList<int> Maximum(IList<int> arr, int k) {\n        if (k == 0) {\n            return new List<int>();\n        }\n        return new List<int>(arr.GetRange(arr.Count - k, k));\n    }\n}\n",
            "class Global {\n    public static int Solution(IList<int> lst) {\n        return lst.Where((x, i) => i % 2 == 0 && x % 2 != 0).Sum();\n    }\n}\n",
            "class Global {\n    public static int AddElements(IList<int> arr, int k) {\n        return arr.Take(k).Where(n => n.ToString().Length <= 2).Sum();\n    }\n}\n",
            "class Global {\n    public static IList<int> GetOddCollatz(int n) {\n        var collatz = new List<int> { 1 };\n        while (n != 1) {\n            if (n % 2 != 0) {\n                collatz.Add(n);\n                n = 3 * n + 1;\n            } else {\n                n = n / 2;\n            }\n        }\n        return collatz;\n    }\n}\n",
            "class Global {\n    public static bool ValidDate(string date) {\n        if (date.Length != 10 || date[2] != '-' || date[5] != '-') {\n            return false;\n        }\n        int m = int.Parse(date.Substring(0, 2));\n        int d = int.Parse(date.Substring(3, 2));\n        if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n            if (d >= 1 && d <= 31) {\n                return true;\n            }\n        }\n        if (m == 4 || m == 6 || m == 9 || m == 11) {\n            if (d >= 1 && d <= 30) {\n                return true;\n            }\n        }\n        if (m == 2) {\n            if (d >= 1 && d <= 29) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<string> SplitWords(string txt) {\n        if (txt.Contains(\" \")) {\n            return txt.Split(\" \");\n        } else if (txt.Contains(\",\")) {\n            return txt.Split(\",\");\n        } else {\n            return new List<string> {\n                new string(new char[] {\n                    (char)((int)txt[0] + (int)txt[1])\n                })\n            };\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsSorted(IList<int> lst) {\n        if (!lst.SlidingWindow(2).All(w => w[0] <= w[1])) {\n            return false;\n        }\n        var freq = new Dictionary<int, int>();\n        foreach (var i in lst) {\n            freq.TryGetValue(i, out var count);\n            freq[i] = count + 1;\n        }\n        var maxFreq = freq.Values.Max();\n        return maxFreq <= 2;\n    }\n}\n",
            "class Global {\n    public static string Intersection(IList<int> interval1, IList<int> interval2) {\n        var l = Math.Max(interval1[0], interval2[0]);\n        var r = Math.Min(interval1[1], interval2[1]);\n        var length = r - l;\n        return length > 0 && IsPrime(length) ? \"YES\" : \"NO\";\n    }\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (var i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int? ProdSigns(IList<int> arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n        if (arr.Contains(0)) {\n            return 0;\n        }\n        var sign = -1;\n        if (arr.Count(n => n < 0) % 2 == 1) {\n            sign = 1;\n        }\n        return sign * arr.Sum(n => Math.Abs(n));\n    }\n}\n",
            "class Global {\n    public static IList<int> MinPath(IList<IList<int>> grid, int k) {\n        var n = grid.Count;\n        var minVal = n * n + 1;\n        for (var i = 0; i < n; i++) {\n            for (var j = 0; j < n; j++) {\n                if (grid[i][j] == 1) {\n                    var temp = new List<int>();\n                    if (i != 0) {\n                        temp.Add(grid[i - 1][j]);\n                    }\n                    if (j != 0) {\n                        temp.Add(grid[i][j - 1]);\n                    }\n                    if (i != n - 1) {\n                        temp.Add(grid[i + 1][j]);\n                    }\n                    if (j != n - 1) {\n                        temp.Add(grid[i][j + 1]);\n                    }\n                    minVal = Math.Min(temp.Min(), minVal);\n                }\n            }\n        }\n        var result = new List<int>();\n        for (var i = 0; i < k; i++) {\n            result.Add(1);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> Tri(int n) {\n        if (n == 0) {\n            return new List<int> { 1 };\n        }\n        var seq = new List<int> { 1, 3 };\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                seq.Add(i / 2 + 1);\n            } else {\n                seq.Add(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int Digits(int n) {\n        var odds = new List<int>();\n        foreach (var d in n.ToString()) {\n            if (int.Parse(d.ToString()) % 2 == 1) {\n                odds.Add(int.Parse(d.ToString()));\n            }\n        }\n        return odds.Aggregate((x, y) => x * y) if odds.Count > 0 else 0;\n    }\n}\n",
            "class Global {\n    public static bool IsNested(string s) {\n        var openIdx = new List<int>();\n        var closeIdx = new List<int>();\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i] == '[') {\n                openIdx.Add(i);\n            } else if (s[i] == ']') {\n                closeIdx.Add(i);\n            }\n        }\n        closeIdx.Reverse();\n        int cnt = 0;\n        int i = 0;\n        int l = closeIdx.Count;\n        for (int idx = 0; idx < openIdx.Count; idx++) {\n            if (i < l && openIdx[idx] < closeIdx[i]) {\n                cnt += 1;\n                i += 1;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int SumSquares(IList<double> lst) {\n        int result = 0;\n        foreach (var n in lst) {\n            result += (int)Math.Pow(Math.Ceiling(n), 2);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool CheckIfLastCharIsALetter(string txt) {\n        if (string.IsNullOrEmpty(txt)) {\n            return false;\n        }\n        var last = txt.Substring(txt.LastIndexOf(' ') + 1);\n        return last.Length == 1 && char.IsLetter(last[0]);\n    }\n}\n",
            "class Global {\n    public static int CanArrange(IList<int> arr) {\n        if (arr.Count <= 1) {\n            return -1;\n        }\n        var idx = new List<int>();\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < arr[i - 1]) {\n                idx.Add(i);\n            }\n        }\n        return idx.Count > 0 ? idx.Max() : -1;\n    }\n}\n",
            "class Global {\n    public static IList<int?> LargestSmallestIntegers(IList<int> lst) {\n        var neg = lst.Where(i => i < 0).ToList();\n        var pos = lst.Where(i => i > 0).ToList();\n        var maxNeg = neg.Max();\n        var minPos = pos.Min();\n        return new List<int?> { maxNeg, minPos };\n    }\n}\n",
            "class Global {\n    public static double? CompareOne(object a, object b) {\n        if (a is string) {\n            return double.Parse((string)a.Replace(',', '.'));\n        } else if (a is int) {\n            return (int)a;\n        } else if (a is float) {\n            return (float)a;\n        } else {\n            throw new RuntimeException(\"Type Error\");\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int SpecialFactorial(int n) {\n        int fact = 1;\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string FixSpaces(string txt) {\n        return Regex.Replace(txt, @\"\\s{3,}\", \"-\").Replace(\" \", \"_\");\n    }\n}\n",
            "class Global {\n    public static string FileNameCheck(string fileName) {\n        var suf = new List<string> { \"txt\", \"exe\", \"dll\" };\n        var lst = fileName.Split('.');\n        if (lst.Length != 2 || !suf.Contains(lst[1]) || lst[0].Length == 0 || !char.IsLetter(lst[0][0]) || lst[0].ToCharArray().Where(x => char.IsDigit(x)).Count() > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
            "class Global {\n    public static int SumSquares(IList<int> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 3 == 0) {\n                result += lst[i] * lst[i];\n            } else if (i % 4 == 0) {\n                result += lst[i] * lst[i] * lst[i];\n            } else {\n                result += lst[i];\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string WordsInSentence(string sentence) {\n        var words = sentence.Split(' ');\n        return string.Join(\" \", words.Where(w => IsPrime(w.Length)));\n    }\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static bool Simplify(string x, string n) {\n        var xs = x.Split('/');\n        var ns = n.Split('/');\n        var num = int.Parse(xs[0]) * int.Parse(ns[0]);\n        var den = int.Parse(xs[1]) * int.Parse(ns[1]);\n        return num % den == 0;\n    }\n}\n",
            "class Global {\n    public static int DigitsSum(int n) {\n        var nStr = n.ToString();\n        if (n >= 0) {\n            return nStr.Sum(d => int.Parse(d.ToString()));\n        } else {\n            return int.Parse(nStr.Substring(0, 2)) * 2 + DigitsSum(Math.Abs(n));\n        }\n    }\n    public static IList<int> OrderByPoints(IList<int> nums) {\n        return nums.OrderBy(n => DigitsSum(n)).ToList();\n    }\n}\n",
            "class Global {\n    public static int SpecialFilter(IList<int> nums) {\n        var odds = \"13579\";\n        return nums.Count(n => n > 10 && n % 2 == 1 && odds.Contains(n.ToString()[0]));\n    }\n}\n",
            "class Global {\n    public static int GetMaxTriples(int n) {\n        var c = new int[3];\n        for (int i = 1; i <= n; i++) {\n            var a = i * i - i + 1;\n            c[a % 3] += 1;\n        }\n        return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n    }\n}\n",
            "class Global {\n    public static IList<string> Bf(string planet1, string planet2) {\n        var names = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        if (!names.Contains(planet1) || !names.Contains(planet2)) {\n            return new List<string>();\n        }\n        var l = names.IndexOf(planet1);\n        var r = names.IndexOf(planet2);\n        if (l > r) {\n            l = r;\n            r = l;\n        }\n        if (l == r) {\n            return new List<string>();\n        }\n        return names.GetRange(l + 1, r - l - 1);\n    }\n}\n",
            "class Global {\n    public static IList<string> SortedListSum(IList<string> lst) {\n        var result = new List<string>();\n        foreach (var s in lst) {\n            if (s.Length % 2 == 0) {\n                result.Add(s);\n            }\n        }\n        result.Sort((a, b) => {\n            if (a.Length == b.Length) {\n                return a.CompareTo(b);\n            } else {\n                return a.Length.CompareTo(b.Length);\n            }\n        });\n        return result;\n    }\n}\n",
            "class Global {\n    public static int XOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i <= (int)Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int DoubleTheDifference(IList<double> lst) {\n        return lst.Where(n => n >= 0 && n % 2 == 1).Sum(n => n * n);\n    }\n}\n",
            "class Global {\n    public static IList<int> Compare(IList<int> game, IList<int> guess) {\n        return game.Zip(guess, (x, y) => Math.Abs(x - y)).ToList();\n    }\n}\n",
            "class Global {\n    public static string StrongestExtension(string className, IList<string> extensions) {\n        double maxS = double.NegativeInfinity;\n        string maxExt = \"\";\n        foreach (var ext in extensions) {\n            int upper = 0;\n            int lower = 0;\n            foreach (var c in ext) {\n                if (char.IsUpper(c)) {\n                    upper += 1;\n                } else if (char.IsLower(c)) {\n                    lower += 1;\n                }\n            }\n            double s = upper - lower;\n            if (s > maxS) {\n                maxS = s;\n                maxExt = ext;\n            }\n        }\n        return $\"{className}.{maxExt}\";\n    }\n}\n",
            "class Global {\n    public static bool CycpatternCheck(string a, string b) {\n        if (a.Length < b.Length) {\n            return false;\n        }\n        for (int i = 0; i < b.Length; i++) {\n            if (b.Substring(i) + b.Substring(0, i) == a) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<int> EvenOddCount(int num) {\n        var ds = num.ToString().ToCharArray();\n        var even = 0;\n        foreach (var d in ds) {\n            if (int.Parse(d.ToString()) % 2 == 0) {\n                even++;\n            }\n        }\n        return new List<int> { even, ds.Length - even };\n    }\n}\n",
            "class Global {\n    public static string IntToMiniRoman(int num) {\n        var values = new List<int> { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        var numerals = new List<string> { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        var res = new List<string>();\n        for (var i = 0; i < values.Count; i++) {\n            while (num >= values[i]) {\n                res.Add(numerals[i]);\n                num -= values[i];\n            }\n        }\n        return string.Join(\"\", res);\n    }\n}\n",
            "class Global {\n    public static bool RightAngleTriangle(int a, int b, int c) {\n        var s = new List<int> { a, b, c };\n        s.Sort();\n        return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n    }\n}\n",
            "class Global {\n    public static string FindMax(IList<string> words) {\n        var maxCnt = 0;\n        var maxW = \"\";\n        foreach (var w in words) {\n            var cnt = new HashSet<char>(w).Count;\n            if (cnt > maxCnt) {\n                maxCnt = cnt;\n                maxW = w;\n            } else if (cnt == maxCnt) {\n                maxW = min(maxW, w);\n            }\n        }\n        return maxW;\n    }\n}\n",
            "class Global {\n    public static IList<int> Eat(int num, int need, int remaining) {\n        return need <= remaining ? new List<int> { num + need, remaining - need } : new List<int> { num + remaining, 0 };\n    }\n}\n",
            "class Global {\n    public static int DoAlgebra(IList<string> operators, IList<int> operands) {\n        var ops = new List<string>(operators);\n        var nums = new List<int>(operands);\n        var i = ops.Count - 1;\n        while (i >= 0) {\n            if (ops[i] == \"**\") {\n                nums[i] = (int)Math.Pow(nums[i], nums[i + 1]);\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n            }\n            i -= 1;\n        }\n        i = 0;\n        while (i < ops.Count) {\n            if (ops[i] == \"*\") {\n                nums[i] = nums[i] * nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i -= 1;\n            }\n            else if (ops[i] == \"//\") {\n                nums[i] = nums[i] / nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        i = 0;\n        while (i < ops.Count) {\n            if (ops[i] == \"+\") {\n                nums[i] = nums[i] + nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i -= 1;\n            }\n            else if (ops[i] == \"-\") {\n                nums[i] = nums[i] - nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        return nums[0];\n    }\n}\n",
            "class Global {\n    public static string Solve(string s) {\n        if (string.IsNullOrEmpty(s) || !s.Any(ch => char.IsLetter(ch))) {\n            return new string(s.Reverse().ToArray());\n        }\n        var result = new List<char>();\n        foreach (var ch in s) {\n            if (!char.IsLetter(ch)) {\n                result.Add(ch);\n            } else if (char.IsUpper(ch)) {\n                result.Add(char.ToLower(ch));\n            } else if (char.IsLower(ch)) {\n                result.Add(char.ToUpper(ch));\n            }\n        }\n        return new string(result.ToArray());\n    }\n}\n",
            "class Global {\n    public static string? StringToMd5(string txt) {\n        if (string.IsNullOrEmpty(txt)) {\n            return null;\n        }\n        var md5_hash = MD5.Create();\n        var txt_bytes = System.Text.Encoding.UTF8.GetBytes(txt);\n        md5_hash.ComputeHash(txt_bytes);\n        var md5_encoded = md5_hash.Hash;\n        var md5_encoded = BitConverter.ToString(md5_encoded).Replace(\"-\", \"\").ToLower();\n        return md5_encoded;\n    }\n}\n",
            "class Global {\n    public static IList<int> GenerateIntegers(int a, int b) {\n        var lower = Math.Max(2, Math.Min(a, b));\n        var upper = Math.Min(8, Math.Max(a, b));\n        return Enumerable.Range(lower, upper - lower + 1).Where(i => i % 2 == 0).ToList();\n    }\n}\n"
        ],
        "dart": [
            "bool hasCloseElements(List<double> numbers, double threshold) {\n    for (int i = 0; i < numbers.length; i++) {\n        for (int j = i + 1; j < numbers.length; j++) {\n            if (numbers[i] - numbers[j].abs() < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "List<String> separateParenGroups(String parenString) {\n    var groups = <String>[];\n    var stk = <String>[];\n    var currentGroup = '';\n    var parens = parenString.replaceAll(' ', '');\n    for (var ch in parens.split('')) {\n        if (ch == '(') {\n            stk.add(ch);\n            currentGroup += ch;\n        } else if (ch == ')') {\n            stk.removeLast();\n            currentGroup += ch;\n            if (stk.isEmpty) {\n                groups.add(currentGroup);\n                currentGroup = '';\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - num.floorToDouble();\n}\n",
            "bool belowZero(List<int> operations) {\n    var balance = 0;\n    for (int op in operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(List<double> numbers) {\n    double mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    double deviation = numbers.map((x) => (x - mean).abs()).reduce((a, b) => a + b);\n    return deviation / numbers.length;\n}\n",
            "List<int> intersperse(List<int> numbers, int delimiter) {\n    var result = <int>[];\n    for (int i = 0; i < numbers.length; i++) {\n        if (i != 0) {\n            result.add(delimiter);\n        }\n        result.add(numbers[i]);\n    }\n    return result;\n}\n",
            "List<int> parseNestedParens(String parenString) {\n    var result = <int>[];\n    var parenGroups = parenString.split(\" \");\n    for (var group in parenGroups) {\n        var depth = 0;\n        var maxDepth = 0;\n        for (var ch in group.split(\"\")) {\n            if (ch == \"(\") {\n                depth += 1;\n                maxDepth = max(maxDepth, depth);\n            } else if (ch == \")\") {\n                depth -= 1;\n            }\n        }\n        result.add(maxDepth);\n    }\n    return result;\n}\n",
            "List<String> filterBySubstring(List<String> strs, String substring) {\n    return strs.where((s) => s.contains(substring)).toList();\n}\n",
            "List<int> sumProduct(List<int> numbers) {\n    int nSum = numbers.reduce((a, b) => a + b);\n    int nProduct = numbers.fold(1, (a, b) => a * b);\n    return [nSum, nProduct];\n}\n",
            "List<int> rollingMax(List<int> numbers) {\n    var maxSoFar = int.min;\n    var result = <int>[];\n    for (int num in numbers) {\n        maxSoFar = maxSoFar.max(num);\n        result.add(maxSoFar);\n    }\n    return result;\n}\n",
            "bool isPalindrome(String s) {\n    return s == s.split('').reversed.join();\n}\nString makePalindrome(String s) {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (int i = 0; i < s.length; i++) {\n        if (isPalindrome(s.substring(i))) {\n            return s + s.substring(0, i).split('').reversed.join();\n        }\n    }\n    return \"\";\n}\n",
            "String stringXor(String a, String b) {\n    var result = '';\n    for (int i = 0; i < a.length; i++) {\n        if (a[i] == b[i]) {\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n    return result;\n}\n",
            "String? longest(List<String> strs) {\n    if (strs.isEmpty) {\n        return null;\n    }\n    String longestS = strs[0];\n    for (String s in strs) {\n        if (s.length > longestS.length) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "List<String> allPrefixes(String s) {\n    var prefixes = <String>[];\n    for (int i = 0; i < s.length; i++) {\n        prefixes.add(s.substring(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "String stringSequence(int n) {\n    return [for (int i = 0; i <= n; i++) i.toString()].join(\" \");\n}\n",
            "int countDistinctCharacters(String s) {\n    var set = <String>{};\n    for (var c in s.toLowerCase().split('')) {\n        set.add(c);\n    }\n    return set.length;\n}\n",
            "Map<String, int> durations = {\n    \"o\": 4,\n    \"o|\": 2,\n    \".|\": 1,\n};\nList<int> parseMusic(String musicString) {\n    var notes = musicString.split(\" \");\n    return [durations[note] for note in notes];\n}\n",
            "int howManyTimes(String s, String substring) {\n    int times = 0;\n    for (int i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "String sortNumbers(String numbers) {\n    var numDict = <String, int>{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    var numList = <String>[];\n    for (String word in numbers.split(\" \")) {\n        if (numDict.containsKey(word)) {\n            numList.add(word);\n        }\n    }\n    numList.sort((a, b) => numDict[a].compareTo(numDict[b]));\n    return numList.join(\" \");\n}\n",
            "List<double> findClosestElements(List<double> numbers) {\n    var sortedNumbers = numbers.toList();\n    sortedNumbers.sort();\n    var minDiff = double.infinity;\n    var closestPair = <double>[];\n    for (int i = 1; i < sortedNumbers.length; i++) {\n        var diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "List<double> rescaleToUnit(List<double> numbers) {\n    double minNum = numbers.reduce(min);\n    double maxNum = numbers.reduce(max);\n    if (minNum == maxNum) {\n        return List.filled(numbers.length, 0.0);\n    } else {\n        return numbers.map((num) => (num - minNum) / (maxNum - minNum)).toList();\n    }\n}\n",
            "List<int> filterIntegers(List<Object> values) {\n    var result = <int>[];\n    for (var v in values) {\n        if (v is int) {\n            result.add(v);\n        }\n    }\n    return result;\n}\n",
            "int strLength(String s) {\n    return s.length;\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return n ~/ i;\n        }\n    }\n    return 1;\n}\n",
            "List<int> factorize(int n) {\n    var factors = <int>[];\n    var divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor);\n            n ~/= divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n",
            "List<int> removeDuplicates(List<int> numbers) {\n    var counts = <int, int>{};\n    for (int num in numbers) {\n        counts[num] = (counts[num] ?? 0) + 1;\n    }\n    var res = numbers.where((num) => counts[num] == 1).toList();\n    return res;\n}\n",
            "String flipCase(String s) {\n    var flipped = '';\n    for (var ch in s.runes) {\n        if (!new RegExp(r'[a-zA-Z]').hasMatch(new String.fromCharCode(ch))) {\n            flipped += new String.fromCharCode(ch);\n        } else if (new RegExp(r'[a-z]').hasMatch(new String.fromCharCode(ch))) {\n            flipped += new String.fromCharCode(ch).toUpperCase();\n        } else if (new RegExp(r'[A-Z]').hasMatch(new String.fromCharCode(ch))) {\n            flipped += new String.fromCharCode(ch).toLowerCase();\n        }\n    }\n    return flipped;\n}\n",
            "String concatenate(List<String> strs) {\n    var result = '';\n    for (String s in strs) {\n        result += s;\n    }\n    return result;\n}\n",
            "List<String> filterByPrefix(List<String> strs, String prefixStr) {\n    var result = <String>[];\n    for (String s in strs) {\n        if (s.startsWith(prefixStr)) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n",
            "List<int> getPositive(List<int> l) {\n    return l.where((num) => num > 0).toList();\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).floor(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "double poly(List<int> xs, double x) {\n    var res = 0.0;\n    for (int i = 0; i < xs.length; i++) {\n        res += xs[i] * x.pow(i);\n    }\n    return res;\n}\ndouble findZero(List<int> xs) {\n    var x1 = 1.0;\n    var x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0.0) {\n        x1 *= 2.0;\n        x2 *= 2.0;\n    }\n    while ((x1 - x2).abs() > 1e-10) {\n        var mid = (x1 + x2) / 2.0;\n        if (poly(xs, mid) == 0.0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0.0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2.0;\n}\n",
            "List<int> sortThird(List<int> l) {\n    var sortedThird = l.where((e) => e % 3 == 0).toList()..sort();\n    return [sortedThird[i ~/ 3] if i % 3 == 0 else l[i] for (int i = 0; i < l.length; i++)];\n}\n",
            "List<int> listUnique(List<int> l) {\n    return l.toSet().toList()..sort();\n}\n",
            "int maxElement(List<int> l) {\n    if (l.isEmpty) {\n        return 0;\n    } else {\n        return l.reduce(max);\n    }\n}\n",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString().split('7').length;\n        }\n    }\n    return cnt;\n}\n",
            "List<int> sortEven(List<int> l) {\n    var sortedEven = l.where((e) => e.isEven).toList()..sort();\n    return [sortedEven[i ~/ 2] if i.isEven else l[i] for (int i = 0; i < l.length; i++)];\n}\n",
            "String encodeCyclic(String s) {\n    var result = '';\n    for (int i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result += s.substring(i);\n        } else {\n            result += s.substring(i + 1, i + 3);\n            result += s.substring(i, i + 1);\n        }\n    }\n    return result;\n}\nString decodeCyclic(String s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) { return false; }\n    for (int i = 2; i <= (n as double).sqrt() as int + 1; i++) {\n        if (n % i == 0) { return false; }\n    }\n    return true;\n}\nint primeFib(int n) {\n    var f = [0, 1];\n    var cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) { cnt += 1; }\n    }\n    return f[1];\n}\n",
            "bool triplesSumToZero(List<int> l) {\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return n.pow(2);\n}\n",
            "List<int> incrList(List<int> l) {\n    return l.map((i) => i + 1).toList();\n}\n",
            "bool pairsSumToZero(List<int> l) {\n    var seen = <int>{};\n    for (int num in l) {\n        if (seen.contains(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "String changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    var digits = [];\n    while (x > 0) {\n        digits.add(x % bas);\n        x ~/= bas;\n    }\n    return digits.reversed.join();\n}\n",
            "double triangleArea(int a, int h) {\n    return (a * h) / 2.0;\n}\n",
            "int fib4(int n) {\n    var fib = [0, 0, 2, 0];\n    for (int i = 4; i <= n; i++) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2];\n    }\n    return fib[n % 4];\n}\n",
            "double median(List<double> l) {\n    var sl = l.toList();\n    sl.sort();\n    if (sl.length % 2 != 0) {\n        return sl[sl.length ~/ 2];\n    } else {\n        return (sl[sl.length ~/ 2] + sl[sl.length ~/ 2 - 1]) / 2.0;\n    }\n}\n",
            "bool isPalindrome(String txt) {\n    return txt == txt.split('').reversed.join();\n}\n",
            "int modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "String encodeShift(String s) {\n    var result = '';\n    for (int i = 0; i < s.length; i++) {\n        var ch = s[i];\n        var ch_num = ch.codeUnitAt(0);\n        var shifted_ch_num = (ch_num - 97 + 5) % 26 + 97;\n        result += String.fromCharCode(shifted_ch_num);\n    }\n    return result;\n}\nString decodeShift(String s) {\n    var result = '';\n    for (int i = 0; i < s.length; i++) {\n        var ch = s[i];\n        var ch_num = ch.codeUnitAt(0);\n        var shifted_ch_num = (ch_num - 97 + 21) % 26 + 97;\n        result += String.fromCharCode(shifted_ch_num);\n    }\n    return result;\n}\n",
            "String removeVowels(String txt) {\n    const vowels = \"aeiouAEIOU\";\n    var result = \"\";\n    for (var char in txt.split(\"\")) {\n        if (!vowels.contains(char)) {\n            result += char;\n        }\n    }\n    return result;\n}\n",
            "bool belowThreshold(List<int> l, int t) {\n    return l.every((x) => x < t);\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(String s0, String s1) {\n    return Set.from(s0.split('')).equals(Set.from(s1.split('')));\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "bool correctBracketing(String brackets) {\n    int depth = 0;\n    for (int i = 0; i < brackets.length; i++) {\n        if (brackets[i] == '<') {\n            depth += 1;\n        } else if (brackets[i] == '>') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(List<int> l) {\n    var diff = l.windowed(2, (List<int> w) => w[1] - w[0]).toList();\n    return diff.every((int x) => x <= 0) || diff.every((int x) => x >= 0);\n}\n",
            "List<int> common(List<int> l1, List<int> l2) {\n    return l1.toSet().intersection(l2.toSet()).toList()..sort();\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i != 0) {\n            i += 1;\n        } else {\n            n ~/= i;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    return (n * (n + 1)) ~/ 2;\n}\n",
            "bool correctBracketing(String brackets) {\n    int depth = 0;\n    for (int i = 0; i < brackets.length; i++) {\n        if (brackets[i] == '(') {\n            depth += 1;\n        } else if (brackets[i] == ')') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "List<int> derivative(List<int> xs) {\n    var result = <int>[];\n    for (int i = 1; i < xs.length; i++) {\n        result.add(xs[i] * i);\n    }\n    return result;\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(String s) {\n    var vowels = \"aeiou\";\n    var cnt = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (vowels.contains(s[i].toLowerCase()) || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n",
            "String circularShift(int x, int shift) {\n    var xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.split('').reversed.join();\n    } else {\n        return xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift);\n    }\n}\n",
            "int digitSum(String s) {\n    return s.runes.where((r) => r >= 65 && r <= 90).sum;\n}\n",
            "int fruitDistribution(String s, int n) {\n    var words = s.split(' ');\n    var apples = int.parse(words[words.indexOf('apples') - 1]);\n    var oranges = int.parse(words[words.indexOf('oranges') - 1]);\n    return n - apples - oranges;\n}\n",
            "List<int> pluck(List<int> arr) {\n    var evens = <int>[];\n    for (int n in arr) {\n        if (n % 2 == 0) {\n            evens.add(n);\n        }\n    }\n    if (evens.isEmpty) {\n        return <int>[];\n    }\n    var minEven = evens.reduce(min);\n    return <int>[minEven, arr.indexOf(minEven)];\n}\n",
            "int search(List<int> lst) {\n    var freqs = <int, int>{};\n    for (int n in lst) {\n        freqs[n] = (freqs[n] ?? 0) + 1;\n    }\n    var goodVals = freqs.entries.where((e) => e.value >= e.key).map((e) => e.key).toList();\n    return goodVals.reduce(max);\n}\n",
            "List<int> strangeSortList(List<int> lst) {\n    var sl = lst.sorted();\n    var result = <int>[];\n    var left = 0;\n    var right = sl.length - 1;\n    while (left <= right) {\n        result.add(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.add(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        var s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(List<int> q, int w) {\n    if (q.isEmpty) {\n        return false;\n    }\n    bool isPalin = q.every((e) => e == q[q.length - e - 1]);\n    int total = q.reduce((a, b) => a + b);\n    return isPalin && total <= w;\n}\n",
            "int smallestChange(List<int> arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.length ~/ 2; i++) {\n        if (arr[i] != arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "List<String> totalMatch(List<String> lst1, List<String> lst2) {\n    int cnt1 = lst1.fold(0, (int prev, String s) => prev + s.length);\n    int cnt2 = lst2.fold(0, (int prev, String s) => prev + s.length);\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n",
            "bool isMultiplyPrime(int a) {\n    if (a < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(a).floor(); i++) {\n        if (a % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    var tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    a = a.abs();\n    int root = (a.roundToDouble() / 3.0).round();\n    return root * root * root == a;\n}\n",
            "int hexKey(String num) {\n    return num.split(\"\").where((x) => \"2357BD\".contains(x)).length;\n}\n",
            "String decimalToBinary(int dec) {\n    return 'db${dec.toRadixString(2)}db';\n}\n",
            "bool isHappy(String s) {\n    if (s.length < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.length - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "List<String> numericalLetterGrade(List<double> grades) {\n    var result = <String>[];\n    for (double g in grades) {\n        if (g == 4.0) {\n            result.add(\"A+\");\n        } else if (g > 3.7) {\n            result.add(\"A\");\n        } else if (g > 3.3) {\n            result.add(\"A-\");\n        } else if (g > 3.0) {\n            result.add(\"B+\");\n        } else if (g > 2.7) {\n            result.add(\"B\");\n        } else if (g > 2.3) {\n            result.add(\"B-\");\n        } else if (g > 2.0) {\n            result.add(\"C+\");\n        } else if (g > 1.7) {\n            result.add(\"C\");\n        } else if (g > 1.3) {\n            result.add(\"C-\");\n        } else if (g > 1.0) {\n            result.add(\"D+\");\n        } else if (g > 0.7) {\n            result.add(\"D\");\n        } else if (g > 0.0) {\n            result.add(\"D-\");\n        } else {\n            result.add(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(String s) {\n    int length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(length).floor() + 1; i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * (10 ** (n - 2));\n}\n",
            "String solve(int n) {\n    var digitsSum = n.toString().split('').map((d) => int.parse(d)).reduce((a, b) => a + b);\n    return digitsSum.toRadixString(2);\n}\n",
            "int add(List<int> lst) {\n    return lst.where((x) => x.isOdd && x.isEven).reduce((a, b) => a + b);\n}\n",
            "String antiShuffle(String s) {\n    var words = s.split(\" \").map((word) {\n        var chars = word.split(\"\").toList();\n        chars.sort();\n        return chars.join();\n    }).toList();\n    return words.join(\" \");\n}\n",
            "List<List<int>> getRow(List<List<int>> lst, int x) {\n    var coords = <List<int>>[];\n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                coords.add([i, j]);\n            }\n        }\n    }\n    coords.sort((a, b) => a[0].compareTo(b[0]).then(a[1].compareTo(b[1]).reverse));\n    return coords;\n}\n",
            "List<int> sortArray(List<int> arr) {\n    if (arr.isEmpty) {\n        return [];\n    }\n    if ((arr[0] + arr.last) % 2 == 0) {\n        return arr.reversed.toList();\n    } else {\n        return arr.sorted();\n    }\n}\n",
            "String encrypt(String s) {\n    var result = '';\n    for (var ch in s.runes) {\n        var shifted = ch + 4;\n        if (shifted > 'z'.runes.first) {\n            shifted -= 26;\n        }\n        result += String.fromCharCode(shifted);\n    }\n    return result;\n}\n",
            "int? nextSmallest(List<int> lst) {\n    var sl = List.from(lst);\n    sl.sort();\n    sl.removeRange(0, sl.length - 1);\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}\n",
            "int isBored(String s) {\n    var re = RegExp(r\"[.!?]\\s*\");\n    var sentences = re.allMatches(s).map((m) => m.group(0)).toList();\n    return sentences.where((sentence) => sentence.length >= 2 && sentence.substring(0, 2) == \"I \").length;\n}\n",
            "bool anyInt(Object x, Object y, Object z) {\n    if (x is int && y is int && z is int) {\n        return x + y == z || x + z == y || y + z == x;\n    }\n    return false;\n}\n",
            "String encode(String message) {\n    var vowels = \"aeiouAEIOU\";\n    var result = <String>[];\n    for (var ch in message.split(\"\")) {\n        if (ch.isAlphabetic) {\n            var ch1 = ch.toUpperCase() if ch.isLowerCase else ch.toLowerCase();\n            if (vowels.contains(ch1)) {\n                ch1 = String.fromCharCode(ch1.codeUnitAt(0) + 2);\n            }\n            result.add(ch1);\n        } else {\n            result.add(ch);\n        }\n    }\n    return result.join(\"\");\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).floor() + 1; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint skjkasdkd(List<int> lst) {\n    var primes = lst.where((n) => isPrime(n)).toList();\n    if (primes.isEmpty) {\n        return 0;\n    }\n    var largest = primes.reduce((a, b) => a > b ? a : b).toString();\n    return largest.split('').map((digit) => int.parse(digit)).reduce((a, b) => a + b);\n}\n",
            "bool checkDictCase(Map<String,String> d) {\n    if (d.isEmpty) {\n        return false;\n    }\n    return d.keys.every((c) => c.toLowerCase() == c) || d.keys.every((c) => c.toUpperCase() == c);\n}\n",
            "List<int> countUpTo(int n) {\n    var primes = <int>[];\n    for (int num = 2; num <= n; num++) {\n        if (primes.every((p) => num % p != 0)) {\n            primes.add(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    return (a.abs() % 10) * (b.abs() % 10);\n}\n",
            "int countUpper(String s) {\n    const vowels = \"AEIOU\";\n    var result = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (i % 2 == 0 && vowels.contains(s[i])) {\n            result += 1;\n        }\n    }\n    return result;\n}\n",
            "int closestInteger(String value) {\n    var num = double.parse(value);\n    if (num >= 0.0) {\n        return (num + 0.5).floor();\n    } else {\n        return (num - 0.5).ceil();\n    }\n}\n",
            "List<int> makeAPile(int n) {\n    return List.generate(n, (i) => n + 2 * i);\n}\n",
            "List<String> wordsString(String s) {\n    var re = RegExp(r\"[, ]\");\n    var result = <String>[];\n    for (var w in re.allMatches(s)) {\n        if (w.group(0)!.length > 0) {\n            result.add(w.group(0)!);\n        }\n    }\n    return result;\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    if (x != y) {\n        return y - 1;\n    }\n    -1\n}\n",
            "String? roundedAvg(int n, int m) {\n    if (n > m) {\n        return null;\n    }\n    int rAvg = (m + n) ~/ 2;\n    return rAvg.toRadixString(2).substring(1);\n}\n",
            "bool allDigitsOdd(String s) {\n    return s.split('').every((digit) => int.parse(digit) % 2 != 0);\n}\nList<int> uniqueDigits(List<int> x) {\n    var result = <int>[];\n    for (int num in x) {\n        if (allDigitsOdd(num.toString())) {\n            result.add(num);\n        }\n    }\n    result.sort();\n    return result;\n}\n",
            "List<String> byLength(List<int> arr) {\n    var digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    var sortedArr = arr.where((x) => 1 <= x && x <= 9).toList()..sort((a, b) => b.compareTo(a));\n    return [digitNames[x-1] for x in sortedArr];\n}\n",
            "List<int> f(int n) {\n    var nums = List<int>.generate(n, (i) => i + 1);\n    return nums.map((i) => i % 2 != 0 ? nums.sublist(0, i).reduce((x, y) => x + y) : nums.sublist(0, i).reduce((x, y) => x * y)).toList();\n}\n",
            "bool isPalindrome(String txt) {\n    return txt == txt.split('').reversed.join();\n}\nList<int> evenOddPalindrome(int n) {\n    var cnt = <int>[0, 0];\n    for (int i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[(i % 2) as int] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "int digitsSum(int n) {\n    var nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split('').map((d) => int.parse(d)).reduce((a, b) => a + b);\n    } else {\n        return int.parse(nStr.substring(0, 2)) * 2 + digitsSum(n.abs());\n    }\n}\nint countNums(List<int> arr) {\n    return arr.where((n) => digitsSum(n) > 0).length;\n}\n",
            "bool moveOneBall(List<int> arr) {\n    if (arr.isEmpty) {\n        return true;\n    }\n    var sortedArr = arr.toList()..sort();\n    for (int i = 0; i < arr.length; i++) {\n        if (arr.sublist(i) == sortedArr.sublist(0, arr.length - i) &&\n            arr.sublist(0, i) == sortedArr.sublist(arr.length - i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "String canExchange(List<int> lst1, List<int> lst2) {\n    int oddCnt = lst1.where((num) => num % 2 != 0).length;\n    int evenCnt = lst2.where((num) => num % 2 == 0).length;\n    return evenCnt >= oddCnt ? \"YES\" : \"NO\";\n}\n",
            "Map<String,int> histogram(String test) {\n    var freq = <String,int>{};\n    var words = test.split(\" \").where((w) => w.length > 0).toList();\n    for (var w in words) {\n        freq.update(w, (v) => v + 1, ifAbsent: () => 1);\n    }\n    var result = <String,int>{};\n    if (freq.isNotEmpty) {\n        var maxFreq = freq.values.reduce(max);\n        for (var k in freq.keys) {\n            if (freq[k] == maxFreq) {\n                result[k] = freq[k];\n            }\n        }\n    }\n    return result;\n}\n",
            "bool isPalindrome(String s) {\n    return s == s.split('').reversed.join();\n}\nList<String> reverseDelete(String s, String c) {\n    var s1 = s.replaceAll(RegExp(c), '');\n    return [s1, isPalindrome(s1) ? 'yes' : 'no'];\n}\n",
            "List<String> oddCount(List<String> lst) {\n    var result = <String>[];\n    for (String num in lst) {\n        int n = 0;\n        for (int i = 0; i < num.length; i++) {\n            if (num.codeUnitAt(i) % 2 == 1) {\n                n++;\n            }\n        }\n        String rs = \"the number of odd elements in the string i of the input.\";\n        result.add(rs.replaceAll(\"i\", n.toString()));\n    }\n    return result;\n}\n",
            "int minSubArraySum(List<int> nums) {\n    int minSum = 0;\n    int curSum = 0;\n    for (int n in nums) {\n        curSum = min(curSum + n, 0);\n        minSum = min(curSum, minSum);\n    }\n    if (minSum == 0) {\n        minSum = min(nums);\n    }\n    return minSum;\n}\n",
            "int maxFill(List<List<int>> grid, int capacity) {\n    return grid.map((arr) => (arr.reduce((a, b) => a + b) / capacity).ceil()).reduce((a, b) => a + b);\n}\n",
            "int countOnes(int num) {\n    int count = 0;\n    int num = num;\n    while (num > 0) {\n        if (num & 1 == 1) {\n            count += 1;\n        }\n        num >>= 1;\n    }\n    return count;\n}\nList<int> sortArray(List<int> arr) {\n    var arr = arr.toList();\n    arr.sort((a, b) {\n        var a_count = countOnes(a);\n        var b_count = countOnes(b);\n        if (a_count == b_count) {\n            return a.compareTo(b);\n        } else {\n            return a_count.compareTo(b_count);\n        }\n    });\n    return arr;\n}\n",
            "List<String> selectWords(String s, int n) {\n    var consonants = \"bcdfghjklmnpqrstvwxyz\";\n    var words = s.split(\" \").where((w) => w.isNotEmpty).toList();\n    return words.where((w) => w.codeUnits.where((c) => consonants.contains(String.fromCharCode(c))).length == n).toList();\n}\n",
            "String getClosestVowel(String word) {\n    const vowels = \"aeiouAEIOU\";\n    for (int i = word.length - 2; i >= 0; i--) {\n        if (vowels.contains(word[i]) && !vowels.contains(word[i - 1]) && !vowels.contains(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "String matchParens(List<String> lst) {\n    String s1 = lst[0] + lst[1];\n    String s2 = lst[1] + lst[0];\n    if (check(s1) || check(s2)) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nbool check(String s) {\n    int depth = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (s[i] == '(') {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "List<int> maximum(List<int> arr, int k) {\n    if (k == 0) {\n        return [];\n    }\n    return arr.reversed.toList().sublist(0, k);\n}\n",
            "int solution(List<int> lst) {\n    return lst.asMap().entries.where((e) => e.key % 2 == 0 && e.value % 2 != 0).map((e) => e.value).reduce((a, b) => a + b);\n}\n",
            "int addElements(List<int> arr, int k) {\n    return arr.take(k).where((n) => n.toString().length <= 2).reduce((a, b) => a + b);\n}\n",
            "List<int> getOddCollatz(int n) {\n    var collatz = <int>[1];\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.add(n);\n            n = 3 * n + 1;\n        } else {\n            n = n ~/ 2;\n        }\n    }\n    return collatz.toList();\n}\n",
            "bool validDate(String date) {\n    if (date.length != 10 || date[2] != \"-\" || date[5] != \"-\") {\n        return false;\n    }\n    int m = int.parse(date.substring(0, 2));\n    int d = int.parse(date.substring(3, 5));\n    if (m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31) {\n        return true;\n    }\n    if (m in [4, 6, 9, 11] && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "List<String> splitWords(String txt) {\n    if (txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [\n            txt.split(\"\").where((c) => c.isLowerCase && c.codeUnitAt(0) % 2 == 0).length.toString()\n        ];\n    }\n}\n",
            "bool isSorted(List<int> lst) {\n    if (!lst.window(2).all((w) => w[0] <= w[1])) {\n        return false;\n    }\n    var freq = <int, int>{};\n    for (int i in lst) {\n        freq[i] = (freq[i] ?? 0) + 1;\n    }\n    var maxFreq = freq.values.max;\n    maxFreq <= 2;\n}\n",
            "String intersection(List<int> interval1, List<int> interval2) {\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n}\nbool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).toInt(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int? prodSigns(List<int> arr) {\n    if (arr.isEmpty) {\n        return null;\n    }\n    if (arr.contains(0)) {\n        return 0;\n    }\n    int sign = -1;\n    if (arr.where((n) => n < 0).length.isOdd) {\n        sign = 1;\n    }\n    return sign * arr.map((n) => n.abs()).reduce((a, b) => a + b);\n}\n",
            "List<int> minPath(List<List<int>> grid, int k) {\n    int n = grid.length;\n    int minVal = n * n + 1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                List<int> temp = [];\n                if (i != 0) {\n                    temp.add(grid[i - 1][j]);\n                }\n                if (j != 0) {\n                    temp.add(grid[i][j - 1]);\n                }\n                if (i != n - 1) {\n                    temp.add(grid[i + 1][j]);\n                }\n                if (j != n - 1) {\n                    temp.add(grid[i][j + 1]);\n                }\n                minVal = min(temp);\n            }\n        }\n    }\n    List<int> result = [];\n    for (int i = 0; i < k; i++) {\n        result.add(1 if i % 2 == 0 else minVal);\n    }\n    return result;\n}\n",
            "List<int> tri(int n) {\n    if (n == 0) {\n        return [1];\n    }\n    var seq = [1, 3];\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq.add(i ~/ 2 + 1);\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) ~/ 2);\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    var odds = <int>[];\n    for (var d in n.toString().split('')) {\n        var dInt = int.parse(d);\n        if (dInt % 2 == 1) {\n            odds.add(dInt);\n        }\n    }\n    return odds.fold(1, (x, y) => x * y) if odds.isNotEmpty else 0;\n}\n",
            "bool isNested(String s) {\n    var openIdx = <int>[];\n    var closeIdx = <int>[];\n    for (int i = 0; i < s.length; i++) {\n        if (s[i] == '[') {\n            openIdx.add(i);\n        } else if (s[i] == ']') {\n            closeIdx.add(i);\n        }\n    }\n    closeIdx.reverse();\n    var cnt = 0;\n    var i = 0;\n    var l = closeIdx.length;\n    for (int idx in openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    cnt >= 2;\n}\n",
            "int sumSquares(List<double> lst) {\n    var result = 0;\n    for (double n in lst) {\n        result += (n.ceil() as int).pow(2);\n    }\n    return result;\n}\n",
            "bool checkIfLastCharIsALetter(String txt) {\n    if (txt.isEmpty) {\n        return false;\n    }\n    String last = txt.substring(txt.lastIndexOf(' ') + 1);\n    return last.length == 1 && last[0].isLetter;\n}\n",
            "int canArrange(List<int> arr) {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    var idx = arr.asMap().entries.where((e) => e.value < arr[e.key - 1]).map((e) => e.key).toList();\n    return idx.isEmpty ? -1 : idx.reduce(max);\n}\n",
            "List<int?> largestSmallestIntegers(List<int> lst) {\n    var neg = lst.where((i) => i < 0).toList();\n    var pos = lst.where((i) => i > 0).toList();\n    var maxNeg = neg.isEmpty ? null : neg.reduce(max);\n    var minPos = pos.isEmpty ? null : pos.reduce(min);\n    return [maxNeg, minPos];\n}\n",
            "double? compareOne(Object a, Object b) {\n    if (a is String) {\n        return double.parse(a.replaceAll(',', '.'));\n    } else if (a is int) {\n        return a.toDouble();\n    } else if (a is double) {\n        return a;\n    } else {\n        throw RuntimeError(\"Type Error\");\n    }\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    var fact = 1;\n    var result = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "String fixSpaces(String txt) {\n    return RegExp(r\"\\s{3,}\").replaceAll(txt, \"-\").replaceAll(\" \", \"_\");\n}\n",
            "String fileNameCheck(String fileName) {\n    var suf = [\"txt\", \"exe\", \"dll\"];\n    var lst = fileName.split(\".\");\n    if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].length == 0 || !lst[0].runes.first.isAlphabetic || lst[0].runes.where((x) => x.isDigit).length > 3) {\n        return \"No\";\n    }\n    \"Yes\";\n}\n",
            "int sumSquares(List<int> lst) {\n    var result = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            result += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            result += lst[i] * lst[i] * lst[i];\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).floor(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nString wordsInSentence(String sentence) {\n    var words = sentence.split(\" \");\n    return words.where((w) => isPrime(w.length)).join(\" \");\n}\n",
            "bool simplify(String x, String n) {\n    var xs = x.split(\"/\");\n    var ns = n.split(\"/\");\n    var num = int.parse(xs[0]) * int.parse(ns[0]);\n    var den = int.parse(xs[1]) * int.parse(ns[1]);\n    return num % den == 0;\n}\n",
            "int digitsSum(int n) {\n    var nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split('').map((d) => int.parse(d)).reduce((a, b) => a + b);\n    } else {\n        return int.parse(nStr.substring(0, 2)) * 2 + digitsSum(n.abs());\n    }\n}\nList<int> orderByPoints(List<int> nums) {\n    return nums.toList()..sort((a, b) => digitsSum(a).compareTo(digitsSum(b)));\n}\n",
            "int specialFilter(List<int> nums) {\n    var odds = \"13579\";\n    return nums.where((n) => n > 10 && n % 2 == 1 && odds.contains(n.toString()[0])).length;\n}\n",
            "int getMaxTriples(int n) {\n    var c = [0, 0, 0];\n    for (int i = 1; i <= n; i++) {\n        var a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) ~/ 6;\n}\n",
            "List<String> bf(String planet1, String planet2) {\n    var names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.contains(planet1) || !names.contains(planet2)) {\n        return [];\n    }\n    var l = names.indexOf(planet1);\n    var r = names.indexOf(planet2);\n    if (l > r) {\n        l = r;\n        r = l;\n    }\n    if (l == r) {\n        return [];\n    }\n    return names.sublist(l + 1, r);\n}\n",
            "List<String> sortedListSum(List<String> lst) {\n    var result = <String>[];\n    for (String s in lst) {\n        if (s.length.isEven) {\n            result.add(s);\n        }\n    }\n    result.sort((a, b) {\n        if (a.length == b.length) {\n            return a.compareTo(b);\n        } else {\n            return a.length.compareTo(b.length);\n        }\n    });\n    return result;\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= (n as double).sqrt().toInt(); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(List<double> lst) {\n    return lst.where((n) => n >= 0 && n % 2 == 1).map((n) => n * n).reduce((a, b) => a + b);\n}\n",
            "List<int> compare(List<int> game, List<int> guess) {\n    return game.asMap().entries.map((e) => (e.value - guess[e.key]).abs()).toList();\n}\n",
            "String strongestExtension(String className, List<String> extensions) {\n    double maxS = double.negativeInfinity;\n    String maxExt = '';\n    for (String ext in extensions) {\n        int upper = 0;\n        int lower = 0;\n        for (int i = 0; i < ext.length; i++) {\n            if (ext[i].toUpperCase() == ext[i]) {\n                upper += 1;\n            } else if (ext[i].toLowerCase() == ext[i]) {\n                lower += 1;\n            }\n        }\n        double s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return '$className.$maxExt';\n}\n",
            "bool cycpatternCheck(String a, String b) {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (int i = 0; i < b.length; i++) {\n        if (b.substring(i) + b.substring(0, i) == a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "List<int> evenOddCount(int num) {\n    var ds = num.abs().toString().split('').map((e) => int.parse(e)).toList();\n    var even = ds.where((e) => e % 2 == 0).length;\n    return [even, ds.length - even];\n}\n",
            "String intToMiniRoman(int num) {\n    var values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    var numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var res = [];\n    for (int i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.add(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join();\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    var s = [a, b, c].toList()..sort();\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}\n",
            "String findMax(List<String> words) {\n    var maxCnt = 0;\n    var maxW = '';\n    for (String w in words) {\n        var cnt = w.runes.toSet().length;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt == maxCnt) {\n            maxW = min(maxW, w);\n        }\n    }\n    return maxW;\n}\n",
            "List<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "int doAlgebra(List<String> operators, List<int> operands) {\n    var ops = operators.toList();\n    var nums = operands.toList();\n    var i = operators.length - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]).toInt();\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < operators.length) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] ~/ nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < operators.length) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "String solve(String s) {\n    if (!s.contains(RegExp(r'[a-zA-Z]'))) {\n        return s.split('').reversed.join();\n    }\n    var result = <String>[];\n    for (int i = 0; i < s.length; i++) {\n        var ch = s[i];\n        if (!ch.contains(RegExp(r'[a-zA-Z]'))) {\n            result.add(ch);\n        } else if (ch.toUpperCase() == ch) {\n            result.add(ch.toLowerCase());\n        } else {\n            result.add(ch.toUpperCase());\n        }\n    }\n    return result.join();\n}\n",
            "String? stringToMd5(String txt) {\n    if (txt.isEmpty) {\n        return null;\n    }\n    var md5_hash = md5;\n    var txt_bytes = utf8.encode(txt);\n    md5_hash.update(txt_bytes);\n    var md5_encoded = md5_hash.close();\n    var md5_encoded = md5_encoded.map((b) => b.toRadixString(16).padLeft(2, '0')).join();\n    return md5_encoded;\n}\n",
            "List<int> generateIntegers(int a, int b) {\n    var lower = math.max(2, math.min(a, b));\n    var upper = math.min(8, math.max(a, b));\n    return List.generate(upper - lower + 1, (i) => lower + i * 2);\n}\n"
        ],
        "go": [
            "func HasCloseElements(numbers []float64, threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(numbers[i]-numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func SeparateParenGroups(parenString string) []string {\n    var groups []string\n    var stk []rune\n    var currentGroup string\n    for _, ch := range parenString {\n        if ch == '(' {\n            stk = append(stk, ch)\n            currentGroup += string(ch)\n        } else if ch == ')' {\n            stk = stk[:len(stk)-1]\n            currentGroup += string(ch)\n            if len(stk) == 0 {\n                groups = append(groups, currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "func TruncateNumber(num float64) float64 {\n    return num - math.Floor(num)\n}\n",
            "func BelowZero(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func MeanAbsoluteDeviation(numbers []float64) float64 {\n    mean := 0.0\n    for _, n := range numbers {\n        mean += n\n    }\n    mean /= float64(len(numbers))\n    deviation := 0.0\n    for _, n := range numbers {\n        deviation += math.Abs(n - mean)\n    }\n    return deviation / float64(len(numbers))\n}\n",
            "func Intersperse(numbers []int, delimiter int) []int {\n    result := make([]int, 0)\n    for i, n := range numbers {\n        if i != 0 {\n            result = append(result, delimiter)\n        }\n        result = append(result, n)\n    }\n    return result\n}\n",
            "func ParseNestedParens(parenString string) []int {\n    result := make([]int, 0)\n    parenGroups := strings.Split(parenString, \" \")\n    for _, group := range parenGroups {\n        depth := 0\n        maxDepth := 0\n        for _, ch := range group {\n            if ch == '(' {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if ch == ')' {\n                depth -= 1\n            }\n        }\n        result = append(result, maxDepth)\n    }\n    return result\n}\n",
            "func FilterBySubstring(strs []string, substring string) []string {\n    result := make([]string, 0)\n    for _, s := range strs {\n        if strings.Contains(s, substring) {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
            "func SumProduct(numbers []int) []int {\n    nSum := 0\n    for _, n := range numbers {\n        nSum += n\n    }\n    nProduct := 1\n    for _, n := range numbers {\n        nProduct *= n\n    }\n    return []int{nSum, nProduct}\n}\n",
            "func RollingMax(numbers []int) []int {\n    maxSoFar := math.MinInt32\n    result := make([]int, 0)\n    for _, num := range numbers {\n        maxSoFar = int(math.Max(float64(maxSoFar), float64(num)))\n        result = append(result, maxSoFar)\n    }\n    return result\n}\n",
            "func IsPalindrome(s string) bool {\n    return s == Reverse(s)\n}\nfunc MakePalindrome(s string) string {\n    if IsPalindrome(s) {\n        return s\n    }\n    for i := 0; i < len(s); i++ {\n        if IsPalindrome(s[i:]) {\n            return s + Reverse(s[:i])\n        }\n    }\n    return \"\"\n}\n",
            "func StringXor(a string, b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n    return result\n}\n",
            "func Longest(strs []string) *string {\n    if len(strs) == 0 {\n        return nil\n    }\n    longest := strs[0]\n    for _, s := range strs {\n        if len(s) > len(longest) {\n            longest = s\n        }\n    }\n    return &longest\n}\n",
            "func GreatestCommonDivisor(a int, b int) int {\n    if b == 0 {\n        return a\n    }\n    return GreatestCommonDivisor(b, a%b)\n}\n",
            "func AllPrefixes(s string) []string {\n    prefixes := make([]string, 0)\n    for i := 0; i < len(s); i++ {\n        prefixes = append(prefixes, s[:i+1])\n    }\n    return prefixes\n}\n",
            "func StringSequence(n int) string {\n    result := \"\"\n    for i := 0; i <= n; i++ {\n        result += strconv.Itoa(i) + \" \"\n    }\n    return result\n}\n",
            "func CountDistinctCharacters(s string) int {\n    set := make(map[rune]bool)\n    for _, c := range s {\n        set[c] = true\n    }\n    return len(set)\n}\n",
            "func ParseMusic(musicString string) []int {\n    durations := map[string]int{\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    }\n    notes := strings.Split(musicString, \" \")\n    result := make([]int, 0)\n    for _, note := range notes {\n        result = append(result, durations[note])\n    }\n    return result\n}\n",
            "func HowManyTimes(s string, substring string) int {\n    times := 0\n    for i := 0; i < len(s) - len(substring) + 1; i++ {\n        if s[i:i+len(substring)] == substring {\n            times++\n        }\n    }\n    return times\n}\n",
            "func SortNumbers(numbers string) string {\n    numDict := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    numList := []string{}\n    for _, word := range strings.Split(numbers, \" \") {\n        if _, ok := numDict[word]; ok {\n            numList = append(numList, word)\n        }\n    }\n    sort.Slice(numList, func(i, j int) bool {\n        return numDict[numList[i]] < numDict[numList[j]]\n    })\n    return strings.Join(numList, \" \")\n}\n",
            "func FindClosestElements(numbers []float64) []float64 {\n    sort.Float64s(numbers)\n    minDiff := math.Inf(1)\n    closestPair := []float64{}\n    for i := 1; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[i-1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = []float64{numbers[i-1], numbers[i]}\n        }\n    }\n    return closestPair\n}\n",
            "func RescaleToUnit(numbers []float64) []float64 {\n    minNum := numbers[0]\n    maxNum := numbers[0]\n    for _, num := range numbers {\n        if num < minNum {\n            minNum = num\n        }\n        if num > maxNum {\n            maxNum = num\n        }\n    }\n    if minNum == maxNum {\n        return make([]float64, len(numbers))\n    }\n    result := make([]float64, len(numbers))\n    for i, num := range numbers {\n        result[i] = (num - minNum) / (maxNum - minNum)\n    }\n    return result\n}\n",
            "func FilterIntegers(values []interface{}) []int {\n    result := make([]int, 0)\n    for _, v := range values {\n        if x, ok := v.(int); ok {\n            result = append(result, x)\n        }\n    }\n    return result\n}\n",
            "func StrLength(s string) int {\n    return len(s)\n}\n",
            "func LargestDivisor(n int) int {\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "func Factorize(n int) []int {\n    factors := make([]int, 0)\n    divisor := 2\n    for divisor <= n {\n        if n%divisor == 0 {\n            factors = append(factors, divisor)\n            n /= divisor\n        } else {\n            divisor++\n        }\n    }\n    return factors\n}\n",
            "func RemoveDuplicates(numbers []int) []int {\n    counts := make(map[int]int)\n    for _, num := range numbers {\n        counts[num]++\n    }\n    var res []int\n    for _, num := range numbers {\n        if counts[num] == 1 {\n            res = append(res, num)\n        }\n    }\n    return res\n}\n",
            "func FlipCase(s string) string {\n    var flipped string\n    for _, ch := range s {\n        if !unicode.IsLetter(ch) {\n            flipped += string(ch)\n        } else if unicode.IsLower(ch) {\n            flipped += string(unicode.ToUpper(ch))\n        } else if unicode.IsUpper(ch) {\n            flipped += string(unicode.ToLower(ch))\n        }\n    }\n    return flipped\n}\n",
            "func Concatenate(strs []string) string {\n    result := \"\"\n    for _, s := range strs {\n        result += s\n    }\n    return result\n}\n",
            "func FilterByPrefix(strs []string, prefixStr string) []string {\n    result := make([]string, 0)\n    for _, s := range strs {\n        if strings.HasPrefix(s, prefixStr) {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
            "func GetPositive(l []int) []int {\n    result := make([]int, 0)\n    for _, num := range l {\n        if num > 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n)))) + 1; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Poly(xs []int, x float64) float64 {\n    var res float64\n    for i := 0; i < len(xs); i++ {\n        res += float64(xs[i]) * math.Pow(x, float64(i))\n    }\n    return res\n}\nfunc FindZero(xs []int) float64 {\n    x1 := 1.0\n    x2 := -1.0\n    for Poly(xs, x1)*Poly(xs, x2) > 0.0 {\n        x1 *= 2.0\n        x2 *= 2.0\n    }\n    for math.Abs(x1-x2) > 1e-10 {\n        mid := (x1 + x2) / 2.0\n        if Poly(xs, mid) == 0.0 {\n            return mid\n        } else if Poly(xs, mid)*Poly(xs, x1) < 0.0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2.0\n}\n",
            "func SortThird(l []int) []int {\n    sortedThird := make([]int, len(l)/3)\n    for i := 0; i < len(l); i += 3 {\n        sortedThird[i/3] = l[i]\n    }\n    sort.Ints(sortedThird)\n    result := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if i % 3 == 0 {\n            result[i] = sortedThird[i/3]\n        } else {\n            result[i] = l[i]\n        }\n    }\n    return result\n}\n",
            "func ListUnique(l []int) []int {\n    m := make(map[int]bool)\n    for _, e := range l {\n        m[e] = true\n    }\n    result := make([]int, 0)\n    for k := range m {\n        result = append(result, k)\n    }\n    return result\n}\n",
            "func MaxElement(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n    return l[0]\n}\n",
            "func FizzBuzz(n int) int {\n    cnt := 0\n    for i := 0; i < n; i++ {\n        if i%11 == 0 || i%13 == 0 {\n            cnt += strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n    return cnt\n}\n",
            "func SortEven(l []int) []int {\n    sortedEven := make([]int, 0)\n    for i := 0; i < len(l); i += 2 {\n        sortedEven = append(sortedEven, l[i])\n    }\n    sort.Ints(sortedEven)\n    result := make([]int, 0)\n    for i := 0; i < len(l); i++ {\n        if i % 2 == 0 {\n            result = append(result, sortedEven[i/2])\n        } else {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n",
            "func EncodeCyclic(s string) string {\n    var result string\n    for i := 0; i < len(s); i += 3 {\n        if i+3 > len(s) {\n            result += s[i:]\n        } else {\n            result += s[i+1 : i+3]\n            result += s[i : i+1]\n        }\n    }\n    return result\n}\nfunc DecodeCyclic(s string) string {\n    return EncodeCyclic(EncodeCyclic(s))\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 { return false }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 { return false }\n    }\n    return true\n}\nfunc PrimeFib(n int) int {\n    f := [2, 1]\n    cnt := 0\n    for cnt < n {\n        f = [f[1], f[0] + f[1]]\n        if IsPrime(f[1]) { cnt++ }\n    }\n    return f[1]\n}\n",
            "func TriplesSumToZero(l []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i]+l[j]+l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func CarRaceCollision(n int) int {\n    return int(math.Pow(float64(n), 2))\n}\n",
            "func IncrList(l []int) []int {\n    result := make([]int, len(l))\n    for i, e := range l {\n        result[i] = e + 1\n    }\n    return result\n}\n",
            "func PairsSumToZero(l []int) bool {\n    seen := make(map[int]bool)\n    for _, num := range l {\n        if seen[num] {\n            return true\n        }\n        seen[num] = true\n    }\n    return false\n}\n",
            "func ChangeBase(x int, bas int) string {\n    if x == 0 {\n        return \"0\"\n    }\n    digits := []string{}\n    for x > 0 {\n        digits = append(digits, strconv.Itoa(x%bas))\n        x /= bas\n    }\n    return strings.Join(digits[::-1], \"\")\n}\n",
            "func TriangleArea(a int, h int) float64 {\n    return float64(a*h) / 2.0\n}\n",
            "func Fib4(n int) int {\n    fib := []int{0, 0, 2, 0}\n    for i := 4; i <= n; i++ {\n        fib[i%4] = fib[(i-1)%4] + fib[(i-2)%4] + fib[(i-3)%4]\n    }\n    return fib[n%4]\n}\n",
            "func Median(l []float64) float64 {\n    sort.Float64s(l)\n    if len(l)%2 != 0 {\n        return l[len(l)/2]\n    }\n    return (l[len(l)/2] + l[len(l)/2-1]) / 2.0\n}\n",
            "func IsPalindrome(txt string) bool {\n    return txt == string([]rune(txt)[len(txt)-1:0:-1])\n}\n",
            "func Modp(n int, p int) int {\n    ret := 1\n    for i := 0; i < int(n); i++ {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func EncodeShift(s string) string {\n    var result string\n    for _, ch := range s {\n        ch_num := ch\n        shifted_ch_num := (ch_num - 97 + 5) % 26 + 97\n        result += string(shifted_ch_num)\n    }\n    return result\n}\nfunc DecodeShift(s string) string {\n    var result string\n    for _, ch := range s {\n        ch_num := ch\n        shifted_ch_num := (ch_num - 97 + 21) % 26 + 97\n        result += string(shifted_ch_num)\n    }\n    return result\n}\n",
            "func RemoveVowels(txt string) string {\n    vowels := \"aeiouAEIOU\"\n    var result string\n    for _, char := range txt {\n        if !strings.ContainsRune(vowels, char) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
            "func BelowThreshold(l []int, t int) bool {\n    for _, x := range l {\n        if x >= t {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Add(x int, y int) int {\n    return x + y\n}\n",
            "func SameChars(s0 string, s1 string) bool {\n    return len(s0) == len(s1) && strings.NewReplacer(s0...).Replace(s1) == \"\"\n}\n",
            "func Fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return Fib(n - 1) + Fib(n - 2)\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '<' {\n            depth += 1\n        } else if b == '>' {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Monotonic(l []int) bool {\n    diff := make([]int, len(l)-1)\n    for i := 0; i < len(l)-1; i++ {\n        diff[i] = l[i+1] - l[i]\n    }\n    return all(diff, func(x int) bool { return x <= 0 }) || all(diff, func(x int) bool { return x >= 0 })\n}\nfunc all(l []int, f func(int) bool) bool {\n    for _, x := range l {\n        if !f(x) {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Common(l1 []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, e := range l1 {\n        m[e] = true\n    }\n    result := make([]int, 0)\n    for _, e := range l2 {\n        if m[e] {\n            result = append(result, e)\n        }\n    }\n    return result\n}\n",
            "func LargestPrimeFactor(n int) int {\n    i := 2\n    for i*i <= n {\n        if n%i != 0 {\n            i++\n        } else {\n            n /= i\n        }\n    }\n    return n\n}\n",
            "func SumToN(n int) int {\n    return n * (n + 1) / 2\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '(' {\n            depth += 1\n        } else if b == ')' {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Derivative(xs []int) []int {\n    result := make([]int, 0)\n    for i := 1; i < len(xs); i++ {\n        result = append(result, xs[i]*int(i))\n    }\n    return result\n}\n",
            "func Fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    }\n    a, b, c := 0, 0, 1\n    for n > 2 {\n        a, b, c = b, c, a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "func VowelsCount(s string) int {\n    vowels := \"aeiou\"\n    cnt := 0\n    for i := 0; i < len(s); i++ {\n        if strings.ContainsRune(vowels, unicode.ToLower(rune(s[i]))) || (i == len(s)-1 && s[i] == 'y') {\n            cnt++\n        }\n    }\n    return cnt\n}\n",
            "func CircularShift(x int, shift int) string {\n    xStr := strconv.Itoa(x)\n    if shift > len(xStr) {\n        return string([]rune(xStr)[::-1])\n    } else {\n        return string([]rune(xStr)[-shift:] + []rune(xStr)[:-shift])\n    }\n}\n",
            "func DigitSum(s string) int {\n    var sum int\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n",
            "func FruitDistribution(s string, n int) int {\n    words := strings.Split(s, \" \")\n    apples, _ := strconv.Atoi(words[strings.Index(s, \"apples\")-1])\n    oranges, _ := strconv.Atoi(words[strings.Index(s, \"oranges\")-1])\n    return n - apples - oranges\n}\n",
            "func Pluck(arr []int) []int {\n    evens := make([]int, 0)\n    for _, n := range arr {\n        if n%2 == 0 {\n            evens = append(evens, n)\n        }\n    }\n    if len(evens) == 0 {\n        return []int{}\n    }\n    minEven := evens[0]\n    for _, n := range evens {\n        if n < minEven {\n            minEven = n\n        }\n    }\n    return []int{minEven, int(sort.SearchInts(arr, minEven))}\n}\n",
            "func Search(lst []int) int {\n    freqs := make(map[int]int)\n    for _, n := range lst {\n        freqs[n]++\n    }\n    goodVals := make([]int, 0)\n    for k, v := range freqs {\n        if v >= k {\n            goodVals = append(goodVals, k)\n        }\n    }\n    max := -1\n    for _, v := range goodVals {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n",
            "func StrangeSortList(lst []int) []int {\n    sl := make([]int, len(lst))\n    copy(sl, lst)\n    sort.Ints(sl)\n    result := make([]int, 0)\n    left, right := 0, len(sl) - 1\n    for left <= right {\n        result = append(result, sl[left])\n        left += 1\n        if left <= right {\n            result = append(result, sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "func TriangleArea(a int, b int, c int) float64 {\n    if a+b > c && a+c > b && b+c > a {\n        s := float64(a + b + c) / 2.0\n        return math.Sqrt(s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n    }\n    return -1.0\n}\n",
            "func WillItFly(q []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n    isPalin := true\n    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            isPalin = false\n            break\n        }\n    }\n    total := 0\n    for _, e := range q {\n        total += e\n    }\n    return isPalin && total <= w\n}\n",
            "func SmallestChange(arr []int) int {\n    ans := 0\n    for i := 0; i < len(arr)/2; i++ {\n        if arr[i] != arr[len(arr)-i-1] {\n            ans++\n        }\n    }\n    return ans\n}\n",
            "func TotalMatch(lst1 []string, lst2 []string) []string {\n    cnt1 := 0\n    for _, s := range lst1 {\n        cnt1 += len(s)\n    }\n    cnt2 := 0\n    for _, s := range lst2 {\n        cnt2 += len(s)\n    }\n    if cnt1 <= cnt2 {\n        return lst1\n    }\n    return lst2\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc IsMultiplyPrime(a int) bool {\n    cnt := 0\n    for i := 2; i*i <= a; i++ {\n        if IsPrime(i) {\n            for a%i == 0 {\n                cnt++\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "func IsSimplePower(x int, n int) bool {\n    if n < 2 {\n        return x == n\n    }\n    tmp := 1\n    for tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "func IsCube(a int) bool {\n    a = int(math.Abs(float64(a)))\n    root := int(math.Pow(float64(a), 1.0/3.0))\n    return root*root*root == a\n}\n",
            "func HexKey(num string) int {\n    return len([]rune(num)) - len([]rune(num)[len([]rune(num
            "func DecimalToBinary(dec int) string {\n    return fmt.Sprintf(\"db%bdb\", dec)\n}\n",
            "func IsHappy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func NumericalLetterGrade(grades []float64) []string {\n    result := make([]string, 0)\n    for _, g := range grades {\n        if g == 4.0 {\n            result = append(result, \"A+\")\n        } else if g > 3.7 {\n            result = append(result, \"A\")\n        } else if g > 3.3 {\n            result = append(result, \"A-\")\n        } else if g > 3.0 {\n            result = append(result, \"B+\")\n        } else if g > 2.7 {\n            result = append(result, \"B\")\n        } else if g > 2.3 {\n            result = append(result, \"B-\")\n        } else if g > 2.0 {\n            result = append(result, \"C+\")\n        } else if g > 1.7 {\n            result = append(result, \"C\")\n        } else if g > 1.3 {\n            result = append(result, \"C-\")\n        } else if g > 1.0 {\n            result = append(result, \"D+\")\n        } else if g > 0.7 {\n            result = append(result, \"D\")\n        } else if g > 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n",
            "func PrimeLength(s string) bool {\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(length)))) + 1; i++ {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func StartsOneEnds(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * (10 << (n - 2))\n}\n",
            "func Solve(n int) string {\n    digitsSum := 0\n    for _, d := range strconv.Itoa(n) {\n        digitsSum += int(d - '0')\n    }\n    return strconv.FormatInt(int64(digitsSum), 2)\n}\n",
            "func Add(lst []int) int {\n    sum := 0\n    for i, x := range lst {\n        if i%2 == 1 && x%2 == 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n",
            "func AntiShuffle(s string) string {\n    words := strings.Split(s, \" \")\n    for i, word := range words {\n        chars := []rune(word)\n        sort.Slice(chars, func(i, j int) bool { return chars[i] < chars[j] })\n        words[i] = string(chars)\n    }\n    return strings.Join(words, \" \")\n}\n",
            "func GetRow(lst [][]int, x int) [][]int {\n    coords := make([][]int, 0)\n    for i := range lst {\n        for j := range lst[i] {\n            if lst[i][j] == x {\n                coords = append(coords, []int{int64(i), int64(j)})\n            }\n        }\n    }\n    sort.Slice(coords, func(i, j int) bool {\n        return coords[i][0] < coords[j][0] ||\n            (coords[i][0] == coords[j][0] && coords[i][1] > coords[j][1])\n    })\n    return coords\n}\n",
            "func SortArray(arr []int) []int {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    if (arr[0] + arr[len(arr)-1]) % 2 == 0 {\n        return SortArray(arr[:len(arr)-1])\n    }\n    return SortArray(arr[1:])\n}\n",
            "func Encrypt(s string) string {\n    var result string\n    for _, ch := range s {\n        shifted := ch + 4\n        if shifted > 'z' {\n            shifted -= 26\n        }\n        result += string(shifted)\n    }\n    return result\n}\n",
            "func NextSmallest(lst []int) *int {\n    sl := make([]int, len(lst))\n    copy(sl, lst)\n    sort.Ints(sl)\n    i := 0\n    for i = 1; i < len(sl); i++ {\n        if sl[i] != sl[i-1] {\n            break\n        }\n    }\n    if i == len(sl) {\n        return nil\n    }\n    return &sl[i]\n}\n",
            "func IsBored(s string) int {\n    re := regexp.MustCompile(`[.!?]\\s*`)\n    sentences := re.Split(s, -1)\n    return len(filter(func(sentence string) bool {\n        return len(sentence) >= 2 && sentence[:2] == \"I \"\n    }, sentences))\n}\n",
            "func AnyInt(x interface{}, y interface{}, z interface{}) bool {\n    if x, ok := x.(int); ok {\n        if y, ok := y.(int); ok {\n            if z, ok := z.(int); ok {\n                return x+y == z || x+z == y || y+z == x\n            }\n        }\n    }\n    return false\n}\n",
            "func Encode(message string) string {\n    vowels := \"aeiouAEIOU\"\n    result := make([]rune, 0)\n    for _, ch := range message {\n        if unicode.IsLetter(ch) {\n            ch1 := unicode.ToLower(ch)\n            if strings.ContainsRune(vowels, ch1) {\n                ch1 = ch1 + 2\n            }\n            result = append(result, ch1)\n        } else {\n            result = append(result, ch)\n        }\n    }\n    return string(result)\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc Skjkasdkd(lst []int) int {\n    primes := []int{}\n    for _, n := range lst {\n        if IsPrime(n) {\n            primes = append(primes, n)\n        }\n    }\n    if len(primes) == 0 {\n        return 0\n    }\n    largest := strconv.Itoa(max(primes))\n    sum := 0\n    for _, digit := range largest {\n        sum += int(digit - '0')\n    }\n    return sum\n}\n",
            "func CheckDictCase(d map[string]string) bool {\n    if len(d) == 0 {\n        return false\n    }\n    for k := range d {\n        if k[0] >= 'a' && k[0] <= 'z' {\n            return true\n        }\n        if k[0] >= 'A' && k[0] <= 'Z' {\n            return true\n        }\n    }\n    return false\n}\n",
            "func CountUpTo(n int) []int {\n    primes := make([]int, 0)\n    for num := 2; num < n; num++ {\n        isPrime := true\n        for _, p := range primes {\n            if num%p == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes = append(primes, num)\n        }\n    }\n    return primes\n}\n",
            "func Multiply(a int, b int) int {\n    return (int(math.Abs(float64(a))) % 10) * (int(math.Abs(float64(b))) % 10)\n}\n",
            "func CountUpper(s string) int {\n    vowels := \"AEIOU\"\n    result := 0\n    for i, c := range s {\n        if i%2 == 0 && strings.ContainsRune(vowels, c) {\n            result += 1\n        }\n    }\n    return result\n}\n",
            "func ClosestInteger(value string) int {\n    num, _ := strconv.ParseFloat(value, 64)\n    if num >= 0.0 {\n        return int(math.Floor(num + 0.5))\n    }\n    return int(math.Ceil(num - 0.5))\n}\n",
            "func MakeAPile(n int) []int {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i] = n + 2*i\n    }\n    return result\n}\n",
            "func WordsString(s string) []string {\n    re := regexp.MustCompile(`[, ]`)\n    result := make([]string, 0)\n    for _, w := range re.Split(s, -1) {\n        if len(w) > 0 {\n            result = append(result, w)\n        }\n    }\n    return result\n}\n",
            "func ChooseNum(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if y%2 == 0 {\n        return y\n    }\n    if x != y {\n        return y - 1\n    }\n    return -1\n}\n",
            "func RoundedAvg(n int, m int) *string {\n    if n > m {\n        return nil\n    }\n    rAvg := int((m + n) / 2.0 + 0.5)\n    s := strconv.FormatInt(int64(rAvg), 2)\n    return &s\n}\n",
            "func AllDigitsOdd(s string) bool {\n    for _, digit := range s {\n        if digit-'0'%2 == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc UniqueDigits(x []int) []int {\n    result := make([]int, 0)\n    for _, num := range x {\n        if AllDigitsOdd(strconv.Itoa(num)) {\n            result = append(result, num)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n",
            "func ByLength(arr []int) []string {\n    digitNames := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    sortedArr := make([]int, 0)\n    for _, x := range arr {\n        if 1 <= x && x <= 9 {\n            sortedArr = append(sortedArr, x)\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(sortedArr)))\n    result := make([]string, 0)\n    for _, x := range sortedArr {\n        result = append(result, digitNames[x-1])\n    }\n    return result\n}\n",
            "func F(n int) []int {\n    nums := make([]int, n)\n    for i := 0; i < n; i++ {\n        nums[i] = i + 1\n    }\n    result := make([]int, n)\n    for i, num := range nums {\n        if i%2 != 0 {\n            result[i] = sum(nums[:i])\n        } else {\n            result[i] = reduce(func(x, y int) int { return x * y }, nums[:i], 1)\n        }\n    }\n    return result\n}\n",
            "func IsPalindrome(txt string) bool {\n    return txt == string([]rune(txt)[len([]rune(txt))-1:0:-1])\n}\nfunc EvenOddPalindrome(n int) []int {\n    cnt := []int{0, 0}\n    for i := 1; i <= n; i++ {\n        if IsPalindrome(strconv.Itoa(i)) {\n            cnt[i%2]++\n        }\n    }\n    return cnt\n}\n",
            "func DigitsSum(n int) int {\n    nStr := strconv.Itoa(n)\n    if n >= 0 {\n        sum := 0\n        for _, d := range nStr {\n            sum += int(d - '0')\n        }\n        return sum\n    } else {\n        return int(nStr[:2]) * 2 + DigitsSum(abs(n))\n    }\n}\nfunc CountNums(arr []int) int {\n    return len([n for n in arr if DigitsSum(n) > 0])\n}\n",
            "func MoveOneBall(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    sortedArr := make([]int, len(arr))\n    copy(sortedArr, arr)\n    sort.Ints(sortedArr)\n    for i := 0; i < len(arr); i++ {\n        if arr[i:] == sortedArr[:len(arr)-i] && arr[:i] == sortedArr[len(arr)-i:] {\n            return true\n        }\n    }\n    return false\n}\n",
            "func CanExchange(lst1 []int, lst2 []int) string {\n    oddCnt := 0\n    for _, num := range lst1 {\n        if num%2 != 0 {\n            oddCnt++\n        }\n    }\n    evenCnt := 0\n    for _, num := range lst2 {\n        if num%2 == 0 {\n            evenCnt++\n        }\n    }\n    if evenCnt >= oddCnt {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
            "func Histogram(test string) map[string]int {\n    freq := make(map[string]int)\n    words := strings.Split(test, \" \")\n    for _, w := range words {\n        if len(w) > 0 {\n            freq[w]++\n        }\n    }\n    result := make(map[string]int)\n    if len(freq) > 0 {\n        maxFreq := 0\n        for _, v := range freq {\n            if v > maxFreq {\n                maxFreq = v\n            }\n        }\n        for k, v := range freq {\n            if v == maxFreq {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "func IsPalindrome(s string) bool {\n    return s == Reverse(s)\n}\nfunc ReverseDelete(s string, c string) []string {\n    s1 := strings.Join([]string{}, func(ch rune) bool { return !strings.ContainsRune(c, ch) })\n    return []string{s1, \"yes\" if IsPalindrome(s1) else \"no\"}\n}\n",
            "func OddCount(lst []string) []string {\n    result := make([]string, 0)\n    for _, num := range lst {\n        n := 0\n        for _, d := range num {\n            if d%2 == 1 {\n                n++\n            }\n        }\n        rs := \"the number of odd elements in the string i of the input.\"\n        result = append(result, rs.Replace(\"i\", strconv.Itoa(n)))\n    }\n    return result\n}\n",
            "func MinSubArraySum(nums []int) int {\n    minSum := 0\n    curSum := 0\n    for _, n := range nums {\n        curSum = min(curSum+n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if minSum == 0 {\n        minSum = min(nums)\n    }\n    return minSum\n}\n",
            "func MaxFill(grid [][]int, capacity int) int {\n    sum := 0\n    for _, arr := range grid {\n        sum += int(math.Ceil(float64(sum(arr)) / float64(capacity)))\n    }\n    return sum\n}\n",
            "func CountOnes(num int) int {\n    count := 0\n    for num > 0 {\n        if num&1 == 1 {\n            count++\n        }\n        num >>= 1\n    }\n    return count\n}\nfunc SortArray(arr []int) []int {\n    sort.Slice(arr, func(i, j int) bool {\n        aCount := CountOnes(arr[i])\n        bCount := CountOnes(arr[j])\n        if aCount == bCount {\n            return arr[i] < arr[j]\n        }\n        return aCount < bCount\n    })\n    return arr\n}\n",
            "func SelectWords(s string, n int) []string {\n    consonants := \"bcdfghjklmnpqrstvwxyz\"\n    words := strings.Split(s, \" \")\n    return []string{w for w in words if len(w) > 0 && len([c for c in w if strings.Contains(consonants, strings.ToLower(c))]) == n}\n}\n",
            "func GetClosestVowel(word string) string {\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 2; i >= 1; i-- {\n        if strings.ContainsRune(vowels, rune(word[i])) && !strings.ContainsRune(vowels, rune(word[i-1])) && !strings.ContainsRune(vowels, rune(word[i+1])) {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
            "func MatchParens(lst []string) string {\n    s1 := lst[0] + lst[1]\n    s2 := lst[1] + lst[0]\n    if check(s1) || check(s2) {\n        return \"Yes\"\n    }\n    return \"No\"\n}\nfunc check(s string) bool {\n    depth := 0\n    for _, ch := range s {\n        if ch == '(' {\n            depth++\n        } else {\n            depth--\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Maximum(arr []int, k int) []int {\n    if k == 0 {\n        return []int{}\n    }\n    sort.Slice(arr, func(i, j int) bool { return arr[i] < arr[j] })\n    return arr[len(arr)-k:]\n}\n",
            "func Solution(lst []int) int {\n    sum := 0\n    for i, x := range lst {\n        if i%2 == 0 && x%2 != 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n",
            "func AddElements(arr []int, k int) int {\n    sum := 0\n    for _, n := range arr {\n        if len(strconv.Itoa(n)) <= 2 {\n            sum += n\n        }\n    }\n    return sum\n}\n",
            "func GetOddCollatz(n int) []int {\n    collatz := []int{1}\n    for n != 1 {\n        if n%2 != 0 {\n            collatz = append(collatz, n)\n            n = 3*n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    sort.Ints(collatz)\n    return collatz\n}\n",
            "func ValidDate(date string) bool {\n    if len(date) != 10 || date[2] != '-' || date[5] != '-' {\n        return false\n    }\n    m, _ := strconv.Atoi(date[:2])\n    d, _ := strconv.Atoi(date[3:5])\n    if m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12 {\n        if d >= 1 && d <= 31 {\n            return true\n        }\n    }\n    if m == 4 || m == 6 || m == 9 || m == 11 {\n        if d >= 1 && d <= 30 {\n            return true\n        }\n    }\n    if m == 2 {\n        if d >= 1 && d <= 29 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func SplitWords(txt string) []string {\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        return []string{strconv.Itoa(len([]rune(txt)))}\n    }\n}\n",
            "func IsSorted(lst []int) bool {\n    for i := 0; i < len(lst)-1; i++ {\n        if lst[i] > lst[i+1] {\n            return false\n        }\n    }\n    freq := make(map[int]int)\n    for _, i := range lst {\n        freq[i]++\n    }\n    maxFreq := 0\n    for _, f := range freq {\n        if f > maxFreq {\n            maxFreq = f\n        }\n    }\n    return maxFreq <= 2\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc Intersection(interval1 []int, interval2 []int) string {\n    l := int(math.Max(float64(interval1[0]), float64(interval2[0])))\n    r := int(math.Min(float64(interval1[1]), float64(interval2[1])))\n    length := r - l\n    return \"YES\" if length > 0 && IsPrime(length) else \"NO\"\n}\n",
            "func ProdSigns(arr []int) *int {\n    if len(arr) == 0 {\n        return nil\n    }\n    if 0 in arr {\n        return 0\n    }\n    sign := -1\n    if len([n for n in arr if n < 0]) % 2 == 1 {\n        sign = 1\n    }\n    result := 0\n    for _, n := range arr {\n        result += abs(n)\n    }\n    return &result\n}\n",
            "func MinPath(grid [][]int, k int) []int {\n    n := len(grid)\n    minVal := n * n + 1\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if grid[i][j] == 1 {\n                temp := []int{}\n                if i != 0 {\n                    temp = append(temp, grid[i - 1][j])\n                }\n                if j != 0 {\n                    temp = append(temp, grid[i][j - 1])\n                }\n                if i != n - 1 {\n                    temp = append(temp, grid[i + 1][j])\n                }\n                if j != n - 1 {\n                    temp = append(temp, grid[i][j + 1])\n                }\n                minVal = min(temp)\n            }\n        }\n    }\n    result := []int{}\n    for i := 0; i < k; i++ {\n        result = append(result, 1)\n        if i%2 == 0 {\n            result[i] = minVal\n        }\n    }\n    return result\n}\n",
            "func Tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n    }\n    seq := []int{1, 3}\n    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            seq = append(seq, i/2+1)\n        } else {\n            seq = append(seq, seq[i-1]+seq[i-2]+(i+3)/2)\n        }\n    }\n    return seq\n}\n",
            "func Digits(n int) int {\n    odds := []int{}\n    for _, d := range strconv.Itoa(n) {\n        if d%2 == 1 {\n            odds = append(odds, int(d))\n        }\n    }\n    if len(odds) == 0 {\n        return 0\n    }\n    result := 1\n    for _, d := range odds {\n        result *= d\n    }\n    return result\n}\n",
            "func IsNested(s string) bool {\n    openIdx := make([]int, 0)\n    closeIdx := make([]int, 0)\n    for i, ch := range s {\n        if ch == '[' {\n            openIdx = append(openIdx, i)\n        } else if ch == ']' {\n            closeIdx = append(closeIdx, i)\n        }\n    }\n    reverse(closeIdx)\n    cnt := 0\n    i := 0\n    l := len(closeIdx)\n    for _, idx := range openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt += 1\n            i += 1\n        }\n    }\n    cnt >= 2\n}\nfunc reverse(s []int) {\n    for i, j := 0, len(s)-1; i < j; i, j = i+1, j-1 {\n        s[i], s[j] = s[j], s[i]\n    }\n}\n",
            "func SumSquares(lst []float64) int {\n    result := 0\n    for _, n := range lst {\n        result += int(math.Ceil(n)) * int(math.Ceil(n))\n    }\n    return result\n}\n",
            "func CheckIfLastCharIsALetter(txt string) bool {\n    if txt == \"\" {\n        return false\n    }\n    last := txt[strings.LastIndex(txt, \" \") + 1:]\n    return len(last) == 1 && last[0] >= 'a' && last[0] <= 'z'\n}\n",
            "func CanArrange(arr []int) int {\n    if len(arr) <= 1 {\n        return -1\n    }\n    idx := make([]int, 0)\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i-1] {\n            idx = append(idx, i)\n        }\n    }\n    if len(idx) == 0 {\n        return -1\n    }\n    return idx[len(idx)-1]\n}\n",
            "func LargestSmallestIntegers(lst []int) []*int {\n    neg := make([]int, 0)\n    pos := make([]int, 0)\n    for _, i := range lst {\n        if i < 0 {\n            neg = append(neg, i)\n        } else if i > 0 {\n            pos = append(pos, i)\n        }\n    }\n    maxNeg := func() *int {\n        if len(neg) == 0 {\n            return nil\n        }\n        max := neg[0]\n        for _, i := range neg {\n            if i > max {\n                max = i\n            }\n        }\n        return &max\n    }()\n    minPos := func() *int {\n        if len(pos) == 0 {\n            return nil\n        }\n        min := pos[0]\n        for _, i := range pos {\n            if i < min {\n                min = i\n            }\n        }\n        return &min\n    }()\n    return []*int{maxNeg, minPos}\n}\n",
            "func AnyToReal(o interface{}) (float64, error) {\n    switch o := o.(type) {\n    case string:\n        return strconv.ParseFloat(o, 64)\n    case int:\n        return float64(o), nil\n    case float64:\n        return o, nil\n    default:\n        return 0, fmt.Errorf(\"Type Error\")\n    }\n}\nfunc CompareOne(a interface{}, b interface{}) *float64 {\n    a1, err := AnyToReal(a)\n    if err != nil {\n        return nil\n    }\n    b1, err := AnyToReal(b)\n    if err != nil {\n        return nil\n    }\n    if a1 == b1 {\n        return nil\n    }\n    if a1 > b1 {\n        return &a1\n    }\n    return &b1\n}\n",
            "func IsEqualToSumEven(n int) bool {\n    return n%2 == 0 && n >= 8\n}\n",
            "func SpecialFactorial(n int) int {\n    fact := 1\n    result := 1\n    for i := 1; i < n+1; i++ {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "func FixSpaces(txt string) string {\n    return regexp.MustCompile(`\\s{3,}`).ReplaceAllString(txt, \"-\")\n}\n",
            "func FileNameCheck(fileName string) string {\n    suf := []string{\"txt\", \"exe\", \"dll\"}\n    lst := strings.Split(fileName, \".\")\n    if len(lst) != 2 || !contains(suf, lst[1]) || len(lst[0]) == 0 || !unicode.IsLetter(rune(lst[0][0])) || strings.Count(lst[0], \"0123456789\") > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\nfunc contains(s []string, e string) bool {\n    for _, a := range s {\n        if a == e {\n            return true\n        }\n    }\n    return false\n}\n",
            "func SumSquares(lst []int) int {\n    result := 0\n    for i, e := range lst {\n        if i%3 == 0 {\n            result += e * e\n        } else if i%4 == 0 {\n            result += e * e * e\n        } else {\n            result += e\n        }\n    }\n    return result\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc WordsInSentence(sentence string) string {\n    words := strings.Split(sentence, \" \")\n    return strings.Join(words, \" \")\n}\n",
            "func Simplify(x string, n string) bool {\n    xs := strings.Split(x, \"/\")\n    ns := strings.Split(n, \"/\")\n    num, _ := strconv.Atoi(xs[0])\n    den, _ := strconv.Atoi(xs[1])\n    num *= ns[0]\n    den *= ns[1]\n    return num%den == 0\n}\n",
            "func OrderByPoints(nums []int) []int {\n    sort.Slice(nums, func(i, j int) bool {\n        return digitsSum(nums[i]) < digitsSum(nums[j])\n    })\n    return nums\n}\nfunc digitsSum(n int) int {\n    nStr := strconv.Itoa(n)\n    if n >= 0 {\n        sum := 0\n        for _, d := range nStr {\n            sum += int(d - '0')\n        }\n        return sum\n    } else {\n        return int(nStr[:2]) * 2 + digitsSum(abs(n))\n    }\n}\n",
            "func SpecialFilter(nums []int) int {\n    odds := \"13579\"\n    return len([]int{n for n in nums if n > 10 && n%2 == 1 && string(n)[0] in odds})\n}\n",
            "func GetMaxTriples(n int) int {\n    c := [3]int{0, 0, 0}\n    for i := 1; i <= n; i++ {\n        a := i*i - i + 1\n        c[a%3]++\n    }\n    return c[0]*c[1]*c[2] + (c[0]*(c[0]-1)*(c[0]-2) + c[1]*(c[1]-1)*(c[1]-2) + c[2]*(c[2]-1)*(c[2]-2)) / 6\n}\n",
            "func Bf(planet1 string, planet2 string) []string {\n    names := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    l := -1\n    r := -1\n    for i, n := range names {\n        if n == planet1 {\n            l = i\n        }\n        if n == planet2 {\n            r = i\n        }\n    }\n    if l == -1 || r == -1 {\n        return []string{}\n    }\n    if l > r {\n        l, r = r, l\n    }\n    if l == r {\n        return []string{}\n    }\n    return names[l+1 : r]\n}\n",
            "func SortedListSum(lst []string) []string {\n    result := make([]string, 0)\n    for _, s := range lst {\n        if len(s)%2 == 0 {\n            result = append(result, s)\n        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        if len(result[i]) == len(result[j]) {\n            return result[i] < result[j]\n        }\n        return len(result[i]) < len(result[j])\n    })\n    return result\n}\n",
            "func XOrY(n int, x int, y int) int {\n    if n < 2 {\n        return y\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func DoubleTheDifference(lst []float64) int {\n    sum := 0\n    for _, n := range lst {\n        if n >= 0 && n%2 == 1 {\n            sum += int(n * n)\n        }\n    }\n    return sum\n}\n",
            "func Compare(game []int, guess []int) []int {\n    result := make([]int, len(game))\n    for i, _ := range game {\n        result[i] = int(math.Abs(float64(game[i] - guess[i])))\n    }\n    return result\n}\n",
            "func StrongestExtension(className string, extensions []string) string {\n    maxS := math.Inf(-1)\n    maxExt := \"\"\n    for _, ext := range extensions {\n        upper := 0\n        lower := 0\n        for _, c := range ext {\n            if unicode.IsUpper(c) {\n                upper++\n            } else if unicode.IsLower(c) {\n                lower++\n            }\n        }\n        s := float64(upper) - float64(lower)\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", className, maxExt)\n}\n",
            "func CycpatternCheck(a string, b string) bool {\n    if len(a) < len(b) {\n        return false\n    }\n    for i := 0; i < len(b); i++ {\n        if strings.Contains(a, b[i:]+b[:i]) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func EvenOddCount(num int) []int {\n    ds := []rune(strconv.Itoa(int(math.Abs(float64(num)))))\n    even := 0\n    for _, d := range ds {\n        if d-'0'%2 == 0 {\n            even++\n        }\n    }\n    return []int{even, int64(len(ds)) - int64(even)}\n}\n",
            "func IntToMiniRoman(num int) string {\n    values := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    numerals := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    res := []string{}\n    for i := range values {\n        for num >= values[i] {\n            res = append(res, numerals[i])\n            num -= values[i]\n        }\n    }\n    return strings.Join(res, \"\")\n}\n",
            "func RightAngleTriangle(a int, b int, c int) bool {\n    s := []int{a, b, c}\n    sort.Ints(s)\n    return s[0]*s[0]+s[1]*s[1] == s[2]*s[2]\n}\n",
            "func FindMax(words []string) string {\n    maxCnt := 0\n    maxW := \"\"\n    for _, w := range words {\n        cnt := len(uniqueChars(w))\n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        } else if cnt == maxCnt {\n            maxW = min(maxW, w)\n        }\n    }\n    return maxW\n}\nfunc uniqueChars(s string) []rune {\n    m := make(map[rune]bool)\n    for _, r := range s {\n        m[r] = true\n    }\n    result := make([]rune, 0)\n    for r := range m {\n        result = append(result, r)\n    }\n    return result\n}\nfunc min(a, b string) string {\n    if a < b {\n        return a\n    }\n    return b\n}\n",
            "func Eat(num int, need int, remaining int) []int {\n    if need <= remaining {\n        return []int{num + need, remaining - need}\n    }\n    return []int{num + remaining, 0}\n}\n",
            "func DoAlgebra(operators []string, operands []int) int {\n    ops := make([]string, len(operators))\n    copy(ops, operators)\n    nums := make([]int, len(operands))\n    copy(nums, operands)\n    i := len(ops) - 1\n    for i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = int(math.Pow(float64(nums[i]), float64(nums[i + 1])))\n            nums = nums[:i + 1]\n            ops = ops[:i]\n        }\n        i -= 1\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1]\n            nums = nums[:i + 1]\n            ops = ops[:i]\n            i -= 1\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i + 1]\n            nums = nums[:i + 1]\n            ops = ops[:i]\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1]\n            nums = nums[:i + 1]\n            ops = ops[:i]\n            i -= 1\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1]\n            nums = nums[:i + 1]\n            ops = ops[:i]\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "func Solve(s string) string {\n    if !strings.ContainsAny(s, \"abcdefghijklmnopqrstuvwxyz\") {\n        return string([]rune(s)[::-1])\n    }\n    result := []rune{}\n    for _, ch := range s {\n        if !unicode.IsLetter(ch) {\n            result = append(result, ch)\n        } else if unicode.IsUpper(ch) {\n            result = append(result, unicode.ToLower(ch))\n        } else if unicode.IsLower(ch) {\n            result = append(result, unicode.ToUpper(ch))\n        }\n    }\n    return string(result)\n}\n",
            "func StringToMd5(txt string) *string {\n    if txt == \"\" {\n        return nil\n    }\n    md5_hash := md5.New()\n    md5_hash.Write([]byte(txt))\n    md5_encoded := md5_hash.Sum(nil)\n    md5_encoded = []byte(fmt.Sprintf(\"%x\", md5_encoded))\n    md5_encoded = []byte(strings.Replace(string(md5_encoded), \" \", \"\", -1))\n    return &md5_encoded\n}\n",
            "func GenerateIntegers(a int, b int) []int {\n    lower := int(math.Max(2, math.Min(float64(a), float64(b))))\n    upper := int(math.Min(8, math.Max(float64(a), float64(b))))\n    result := make([]int, 0)\n    for i := lower; i <= upper; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n"
        ],
        "java": [
            "class Global {\n    public static boolean hasCloseElements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<String> separateParenGroups(String parenString) {\n        var groups = new ArrayList<String>();\n        var stk = new Stack<Character>();\n        var currentGroup = new StringBuilder();\n        var parens = parenString.replace(\" \", \"\");\n        for (char ch : parens.toCharArray()) {\n            if (ch == '(') {\n                stk.push(ch);\n                currentGroup.append(ch);\n            } else if (ch == ')') {\n                stk.pop();\n                currentGroup.append(ch);\n                if (stk.isEmpty()) {\n                    groups.add(currentGroup.toString());\n                    currentGroup = new StringBuilder();\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double truncateNumber(double num) {\n        return num - Math.floor(num);\n    }\n}\n",
            "class Global {\n    public static boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (Integer op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = numbers.stream().mapToDouble(x -> x).sum() / numbers.size();\n        double deviation = numbers.stream().mapToDouble(x -> Math.abs(x - mean)).sum();\n        return deviation / numbers.size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i != 0) {\n                result.add(delimiter);\n            }\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseNestedParens(String parenString) {\n        var result = new ArrayList<Integer>();\n        var parenGroups = parenString.split(\" \");\n        for (String group : parenGroups) {\n            int depth = 0;\n            int maxDepth = 0;\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    depth += 1;\n                    maxDepth = Math.max(maxDepth, depth);\n                } else if (ch == ')') {\n                    depth -= 1;\n                }\n            }\n            result.add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> filterBySubstring(List<String> strs, String substring) {\n        return strs.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<Integer> sumProduct(List<Integer> numbers) {\n        int nSum = 0;\n        int nProduct = 1;\n        for (Integer n : numbers) {\n            nSum += n;\n            nProduct *= n;\n        }\n        return Arrays.asList(nSum, nProduct);\n    }\n}\n",
            "class Global {\n    public static List<Integer> rollingMax(List<Integer> numbers) {\n        int maxSoFar = Integer.MIN_VALUE;\n        var result = new ArrayList<Integer>();\n        for (Integer num : numbers) {\n            maxSoFar = Math.max(maxSoFar, num);\n            result.add(maxSoFar);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isPalindrome(String s) {\n        return s.equals(new StringBuilder(s).reverse().toString());\n    }\n    public static String makePalindrome(String s) {\n        if (isPalindrome(s)) {\n            return s;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (isPalindrome(s.substring(i))) {\n                return s + new StringBuilder(s).reverse().substring(0, i);\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static String stringXor(String a, String b) {\n        var result = new StringBuilder();\n        for (int i = 0; i < Math.min(a.length(), b.length()); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static Optional<String> longest(List<String> strs) {\n        if (strs.isEmpty()) {\n            return Optional.empty();\n        }\n        String longestS = strs.get(0);\n        for (String s : strs) {\n            if (s.length() > longestS.length()) {\n                longestS = s;\n            }\n        }\n        return Optional.of(longestS);\n    }\n}\n",
            "class Global {\n    public static int greatestCommonDivisor(int a, int b) {\n        return b == 0 ? a : greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "class Global {\n    public static List<String> allPrefixes(String s) {\n        var prefixes = new ArrayList<String>();\n        for (int i = 0; i < s.length(); i++) {\n            prefixes.add(s.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static String stringSequence(int n) {\n        var result = new ArrayList<String>();\n        for (int i = 0; i <= n; i++) {\n            result.add(String.valueOf(i));\n        }\n        return String.join(\" \", result);\n    }\n}\n",
            "class Global {\n    public static int countDistinctCharacters(String s) {\n        var set = new HashSet<Character>();\n        for (Character c : s.toLowerCase().toCharArray()) {\n            set.add(c);\n        }\n        return set.size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseMusic(String musicString) {\n        var durations = new HashMap<String, Integer>();\n        durations.put(\"o\", 4);\n        durations.put(\"o|\", 2);\n        durations.put(\".|\", 1);\n        var notes = musicString.split(\" \");\n        var result = new ArrayList<Integer>();\n        for (String note : notes) {\n            result.add(durations.get(note));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int howManyTimes(String s, String substring) {\n        int times = 0;\n        for (int i = 0; i < s.length() - substring.length() + 1; i++) {\n            if (s.substring(i, i + substring.length()).equals(substring)) {\n                times++;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static String sortNumbers(String numbers) {\n        var numDict = new HashMap<String, Integer>();\n        numDict.put(\"zero\", 0);\n        numDict.put(\"one\", 1);\n        numDict.put(\"two\", 2);\n        numDict.put(\"three\", 3);\n        numDict.put(\"four\", 4);\n        numDict.put(\"five\", 5);\n        numDict.put(\"six\", 6);\n        numDict.put(\"seven\", 7);\n        numDict.put(\"eight\", 8);\n        numDict.put(\"nine\", 9);\n        var numList = new ArrayList<String>();\n        for (String word : numbers.split(\" \")) {\n            if (numDict.containsKey(word)) {\n                numList.add(word);\n            }\n        }\n        numList.sort(Comparator.comparing(numDict::get));\n        return String.join(\" \", numList);\n    }\n}\n",
            "class Global {\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        var sortedNumbers = new ArrayList<Double>(numbers);\n        Collections.sort(sortedNumbers);\n        double minDiff = Double.POSITIVE_INFINITY;\n        var closestPair = new ArrayList<Double>();\n        for (int i = 1; i < sortedNumbers.size(); i++) {\n            double diff = sortedNumbers.get(i) - sortedNumbers.get(i - 1);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = new ArrayList<Double>(Arrays.asList(sortedNumbers.get(i - 1), sortedNumbers.get(i)));\n            }\n        }\n        return closestPair;\n    }\n}\n",
            "class Global {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        double minNum = Double.MAX_VALUE;\n        double maxNum = Double.MIN_VALUE;\n        for (Double num : numbers) {\n            if (num < minNum) {\n                minNum = num;\n            }\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n        if (minNum == maxNum) {\n            return new ArrayList<Double>(Collections.nCopies(numbers.size(), 0.0));\n        } else {\n            var result = new ArrayList<Double>();\n            for (Double num : numbers) {\n                result.add((num - minNum) / (maxNum - minNum));\n            }\n            return result;\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> filterIntegers(List<Object> values) {\n        var result = new ArrayList<Integer>();\n        for (Object v : values) {\n            if (v instanceof Integer) {\n                result.add((Integer) v);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int strLength(String s) {\n        return s.length();\n    }\n}\n",
            "class Global {\n    public static int largestDivisor(int n) {\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}\n",
            "class Global {\n    public static List<Integer> factorize(int n) {\n        var factors = new ArrayList<Integer>();\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.add(divisor);\n                n /= divisor;\n            } else {\n                divisor += 1;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static List<Integer> removeDuplicates(List<Integer> numbers) {\n        var counts = new HashMap<Integer, Integer>();\n        for (Integer num : numbers) {\n            counts.put(num, counts.getOrDefault(num, 0) + 1);\n        }\n        var res = new ArrayList<Integer>();\n        for (Integer num : numbers) {\n            if (counts.get(num) == 1) {\n                res.add(num);\n            }\n        }\n        return res;\n    }\n}\n",
            "class Global {\n    public static String flipCase(String s) {\n        var flipped = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (!Character.isAlphabetic(ch)) {\n                flipped.append(ch);\n            } else if (Character.isLowerCase(ch)) {\n                flipped.append(Character.toUpperCase(ch));\n            } else if (Character.isUpperCase(ch)) {\n                flipped.append(Character.toLowerCase(ch));\n            }\n        }\n        return flipped.toString();\n    }\n}\n",
            "class Global {\n    public static String concatenate(List<String> strs) {\n        var result = new StringBuilder();\n        for (String s : strs) {\n            result.append(s);\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static List<String> filterByPrefix(List<String> strs, String prefixStr) {\n        var result = new ArrayList<String>();\n        for (String s : strs) {\n            if (s.startsWith(prefixStr)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(num -> num > 0).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static double poly(List<Integer> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.size(); i++) {\n            res += xs.get(i) * Math.pow(x, i);\n        }\n        return res;\n    }\n    public static double findZero(List<Integer> xs) {\n        double x1 = 1.0;\n        double x2 = -1.0;\n        while (poly(xs, x1) * poly(xs, x2) > 0.0) {\n            x1 *= 2.0;\n            x2 *= 2.0;\n        }\n        while (Math.abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2.0;\n            if (poly(xs, mid) == 0.0) {\n                return mid;\n            } else if (poly(xs, mid) * poly(xs, x1) < 0.0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2.0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortThird(List<Integer> l) {\n        var sortedThird = new ArrayList<Integer>(l.size());\n        for (int i = 0; i < l.size(); i += 3) {\n            sortedThird.add(l.get(i));\n        }\n        Collections.sort(sortedThird);\n        var result = new ArrayList<Integer>(l.size());\n        for (int i = 0; i < l.size(); i++) {\n            result.add(i % 3 == 0 ? sortedThird.get(i / 3) : l.get(i));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> listUnique(List<Integer> l) {\n        return new ArrayList<>(new LinkedHashSet<>(l));\n    }\n}\n",
            "class Global {\n    public static int maxElement(List<Integer> l) {\n        if (l.isEmpty()) {\n            return 0;\n        } else {\n            return Collections.max(l);\n        }\n    }\n}\n",
            "class Global {\n    public static int fizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += String.valueOf(i).chars().filter(c -> c == '7').count();\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortEven(List<Integer> l) {\n        var sortedEven = new ArrayList<Integer>(l.size() / 2);\n        for (Integer e : l) {\n            if (e % 2 == 0) {\n                sortedEven.add(e);\n            }\n        }\n        Collections.sort(sortedEven);\n        var result = new ArrayList<Integer>(l.size());\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(sortedEven.get(i / 2));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String encodeCyclic(String s) {\n        var result = new StringBuilder();\n        for (int i = 0; i < s.length(); i += 3) {\n            if (i + 3 > s.length()) {\n                result.append(s.substring(i));\n            } else {\n                result.append(s.substring(i + 1, i + 3));\n                result.append(s.substring(i, i + 1));\n            }\n        }\n        return result.toString();\n    }\n    public static String decodeCyclic(String s) {\n        return encodeCyclic(encodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static int primeFib(int n) {\n        int[] f = {0, 1};\n        int cnt = 0;\n        while (cnt < n) {\n            f = new int[] {f[1], f[0] + f[1]};\n            if (isPrime(f[1])) { cnt += 1; }\n        }\n        return f[1];\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) { return false; }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) { return false; }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static int carRaceCollision(int n) {\n        return (int) Math.pow(n, 2);\n    }\n}\n",
            "class Global {\n    public static List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static boolean pairsSumToZero(List<Integer> l) {\n        var seen = new HashSet<Integer>();\n        for (Integer num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String changeBase(int x, int bas) {\n        if (x == 0) {\n            return \"0\";\n        }\n        var digits = new ArrayList<String>();\n        while (x > 0) {\n            digits.add(String.valueOf(x % bas));\n            x /= bas;\n        }\n        Collections.reverse(digits);\n        return String.join(\"\", digits);\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int h) {\n        return (a * h) / 2.0;\n    }\n}\n",
            "class Global {\n    public static int fib4(int n) {\n        int[] fib = {0, 0, 2, 0};\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = fib[0] + fib[1] + fib[2];\n        }\n        return fib[n % 4];\n    }\n}\n",
            "class Global {\n    public static double median(List<Double> l) {\n        var sl = new ArrayList<Double>(l);\n        Collections.sort(sl);\n        if (sl.size() % 2 != 0) {\n            return sl.get(sl.size() / 2);\n        } else {\n            return (sl.get(sl.size() / 2) + sl.get(sl.size() / 2 - 1)) / 2.0;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isPalindrome(String txt) {\n        return txt.equals(new StringBuilder(txt).reverse().toString());\n    }\n}\n",
            "class Global {\n    public static int modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "class Global {\n    public static String encodeShift(String s) {\n        var result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            int chNum = ch;\n            int shiftedChNum = (chNum - 97 + 5) % 26 + 97;\n            result.append((char) shiftedChNum);\n        }\n        return result.toString();\n    }\n    public static String decodeShift(String s) {\n        var result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            int chNum = ch;\n            int shiftedChNum = (chNum - 97 + 21) % 26 + 97;\n            result.append((char) shiftedChNum);\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static String removeVowels(String txt) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder result = new StringBuilder();\n        for (char char : txt.toCharArray()) {\n            if (!vowels.contains(char)) {\n                result.append(char);\n            }\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static boolean belowThreshold(List<Integer> l, int t) {\n        for (Integer x : l) {\n            if (x >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static boolean sameChars(String s0, String s1) {\n        return new HashSet<>(s0.toCharArray()).equals(new HashSet<>(s1.toCharArray()));\n    }\n}\n",
            "class Global {\n    public static int fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth += 1;\n            } else if (b == '>') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static boolean monotonic(List<Integer> l) {\n        var diff = new ArrayList<Integer>();\n        for (int i = 0; i < l.size() - 1; i++) {\n            diff.add(l.get(i + 1) - l.get(i));\n        }\n        return diff.stream().allMatch(x -> x <= 0) || diff.stream().allMatch(x -> x >= 0);\n    }\n}\n",
            "class Global {\n    public static List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        var set1 = new HashSet<Integer>(l1);\n        var set2 = new HashSet<Integer>(l2);\n        set1.retainAll(set2);\n        var result = new ArrayList<Integer>(set1);\n        Collections.sort(result);\n        return result;\n    }\n}\n",
            "class Global {\n    public static int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i) {\n                i += 1;\n            } else {\n                n /= i;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int sumToN(int n) {\n        return (n * (n + 1)) / 2;\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth += 1;\n            } else if (b == ')') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> derivative(List<Integer> xs) {\n        var result = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n        int a = 0, b = 0, c = 1;\n        while (n > 2) {\n            a = b;\n            b = c;\n            c = a + b + c;\n            n -= 1;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int vowelsCount(String s) {\n        var vowels = \"aeiou\";\n        int cnt = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (vowels.indexOf(s.charAt(i)) >= 0 || (i == s.length() - 1 && s.charAt(i) == 'y')) {\n                cnt += 1;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static String circularShift(int x, int shift) {\n        String xStr = String.valueOf(x);\n        if (shift > xStr.length()) {\n            return new StringBuilder(xStr).reverse().toString();\n        } else {\n            return xStr.substring(xStr.length() - shift) + xStr.substring(0, xStr.length() - shift);\n        }\n    }\n}\n",
            "class Global {\n    public static int digitSum(String s) {\n        return s.chars().filter(c -> c >= 'A' && c <= 'Z').map(c -> c - 'A' + 1).sum();\n    }\n}\n",
            "class Global {\n    public static int fruitDistribution(String s, int n) {\n        String[] words = s.split(\" \");\n        int apples = Integer.parseInt(words[Arrays.asList(words).indexOf(\"apples\") - 1]);\n        int oranges = Integer.parseInt(words[Arrays.asList(words).indexOf(\"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n}\n",
            "class Global {\n    public static List<Integer> pluck(List<Integer> arr) {\n        var evens = new ArrayList<Integer>();\n        for (Integer n : arr) {\n            if (n % 2 == 0) {\n                evens.add(n);\n            }\n        }\n        if (evens.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        var minEven = Collections.min(evens);\n        return Arrays.asList(minEven, evens.indexOf(minEven));\n    }\n}\n",
            "class Global {\n    public static int search(List<Integer> lst) {\n        var freqs = new HashMap<Integer, Integer>();\n        for (Integer n : lst) {\n            freqs.merge(n, 1, Integer::sum);\n        }\n        var goodVals = freqs.entrySet().stream().filter(e -> e.getValue() >= e.getKey()).map(Map.Entry::getKey).collect(Collectors.toList());\n        return Collections.max(goodVals);\n    }\n}\n",
            "class Global {\n    public static List<Integer> strangeSortList(List<Integer> lst) {\n        var sl = new ArrayList<Integer>(lst);\n        Collections.sort(sl);\n        var result = new ArrayList<Integer>();\n        int left = 0, right = sl.size() - 1;\n        while (left <= right) {\n            result.add(sl.get(left));\n            left += 1;\n            if (left <= right) {\n                result.add(sl.get(right));\n                right -= 1;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        boolean isPalin = q.stream().allMatch(e -> e == q.get(q.size() - 1 - q.indexOf(e)));\n        int total = q.stream().mapToInt(Integer::intValue).sum();\n        return isPalin && total <= w;\n    }\n}\n",
            "class Global {\n    public static int smallestChange(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (!arr.get(i).equals(arr.get(arr.size() - i - 1))) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int cnt1 = 0;\n        for (String s : lst1) {\n            cnt1 += s.length();\n        }\n        int cnt2 = 0;\n        for (String s : lst2) {\n            cnt2 += s.length();\n        }\n        return cnt1 <= cnt2 ? lst1 : lst2;\n    }\n}\n",
            "class Global {\n    public static boolean isMultiplyPrime(int a) {\n        if (a < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(a) + 1; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean isSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "class Global {\n    public static boolean isCube(int a) {\n        a = Math.abs(a);\n        int root = (int) Math.round(Math.pow(a, 1.0 / 3.0));\n        return root * root * root == a;\n    }\n}\n",
            "class Global {\n    public static int hexKey(String num) {\n        return (int) num.chars().filter(x -> \"2357BD\".indexOf(x) != -1).count();\n    }\n}\n",
            "class Global {\n    public static String decimalToBinary(int dec) {\n        return \"db\" + Integer.toBinaryString(dec) + \"db\";\n    }\n}\n",
            "class Global {\n    public static boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) ||\n                s.charAt(i) == s.charAt(i + 2) ||\n                s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static List<String> numericalLetterGrade(List<Double> grades) {\n        var result = new ArrayList<String>();\n        for (Double g : grades) {\n            if (g == 4.0) {\n                result.add(\"A+\");\n            } else if (g > 3.7) {\n                result.add(\"A\");\n            } else if (g > 3.3) {\n                result.add(\"A-\");\n            } else if (g > 3.0) {\n                result.add(\"B+\");\n            } else if (g > 2.7) {\n                result.add(\"B\");\n            } else if (g > 2.3) {\n                result.add(\"B-\");\n            } else if (g > 2.0) {\n                result.add(\"C+\");\n            } else if (g > 1.7) {\n                result.add(\"C\");\n            } else if (g > 1.3) {\n                result.add(\"C-\");\n            } else if (g > 1.0) {\n                result.add(\"D+\");\n            } else if (g > 0.7) {\n                result.add(\"D\");\n            } else if (g > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean primeLength(String s) {\n        int length = s.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(length)) + 1; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int startsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 2 * 9 * (int) Math.pow(10, n - 2);\n    }\n}\n",
            "class Global {\n    public static String solve(int n) {\n        int digitsSum = 0;\n        for (char d : Integer.toString(n).toCharArray()) {\n            digitsSum += Character.getNumericValue(d);\n        }\n        return Integer.toBinaryString(digitsSum);\n    }\n}\n",
            "class Global {\n    public static int add(List<Integer> lst) {\n        return lst.stream().filter(x -> x % 2 == 0).filter(x -> lst.indexOf(x) % 2 == 1).mapToInt(x -> x).sum();\n    }\n}\n",
            "class Global {\n    public static String antiShuffle(String s) {\n        var words = Arrays.stream(s.split(\" \")).map(word -> {\n            var chars = word.chars().sorted().collect(Collectors.toList());\n            return String.join(\"\", chars);\n        }).collect(Collectors.toList());\n        return String.join(\" \", words);\n    }\n}\n",
            "class Global {\n    public static List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        var coords = new ArrayList<List<Integer>>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    coords.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        coords.sort(Comparator.comparing(l -> l.get(0)).thenComparing(l -> l.get(1)).reversed());\n        return coords;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        if ((arr.get(0) + arr.get(arr.size() - 1)) % 2 == 0) {\n            return new ArrayList<Integer>(arr);\n        } else {\n            Collections.sort(arr);\n            return arr;\n        }\n    }\n}\n",
            "class Global {\n    public static String encrypt(String s) {\n        var result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            int shifted = ch + 4;\n            if (shifted > 'z') {\n                shifted -= 26;\n            }\n            result.append((char) shifted);\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> nextSmallest(List<Integer> lst) {\n        var sl = new ArrayList<Integer>(lst);\n        Collections.sort(sl);\n        sl.removeIf(new HashSet<>(sl)::contains);\n        if (sl.size() < 2) {\n            return Optional.empty();\n        }\n        return Optional.of(sl.get(1));\n    }\n}\n",
            "class Global {\n    public static int isBored(String s) {\n        Pattern re = Pattern.compile(\"[.!?]\\\\s*\");\n        String[] sentences = re.split(s);\n        return Arrays.stream(sentences).filter(sentence -> sentence.length() >= 2 && sentence.substring(0, 2).equals(\"I \")).count();\n    }\n}\n",
            "class Global {\n    public static boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            Integer x1 = (Integer) x;\n            Integer y1 = (Integer) y;\n            Integer z1 = (Integer) z;\n            return x1 + y1 == z1 || x1 + z1 == y1 || y1 + z1 == x1;\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        var result = new ArrayList<Character>();\n        for (int i = 0; i < message.length(); i++) {\n            char ch = message.charAt(i);\n            if (Character.isAlphabetic(ch)) {\n                char ch1 = Character.isLowerCase(ch) ? Character.toUpperCase(ch) : Character.toLowerCase(ch);\n                if (vowels.indexOf(ch1) >= 0) {\n                    ch1 = (char) (ch1 + 2);\n                }\n                result.add(ch1);\n            } else {\n                result.add(ch);\n            }\n        }\n        return String.join(\"\", result);\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n) + 1; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static int skjkasdkd(List<Integer> lst) {\n        var primes = new ArrayList<Integer>();\n        for (Integer n : lst) {\n            if (isPrime(n)) {\n                primes.add(n);\n            }\n        }\n        if (primes.size() == 0) {\n            return 0;\n        }\n        var largest = String.valueOf(Collections.max(primes));\n        return Arrays.stream(largest.split(\"\")).mapToInt(Integer::parseInt).sum();\n    }\n}\n",
            "class Global {\n    public static boolean checkDictCase(Map<String, String> d) {\n        if (d == null || d.isEmpty()) {\n            return false;\n        }\n        return d.keySet().stream().allMatch(c -> c.toLowerCase().equals(c)) || d.keySet().stream().allMatch(c -> c.toUpperCase().equals(c));\n    }\n}\n",
            "class Global {\n    public static List<Integer> countUpTo(int n) {\n        var primes = new ArrayList<Integer>();\n        for (int num = 2; num < n; num++) {\n            boolean isPrime = true;\n            for (Integer p : primes) {\n                if (num % p == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(num);\n            }\n        }\n        return primes;\n    }\n}\n",
            "class Global {\n    public static int multiply(int a, int b) {\n        return (Math.abs(a) % 10) * (Math.abs(b) % 10);\n    }\n}\n",
            "class Global {\n    public static int countUpper(String s) {\n        String vowels = \"AEIOU\";\n        int result = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && vowels.contains(s.charAt(i))) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int closestInteger(String value) {\n        double num = Double.parseDouble(value);\n        return num >= 0.0 ? (int) Math.floor(num + 0.5) : (int) Math.ceil(num - 0.5);\n    }\n}\n",
            "class Global {\n    public static List<Integer> makeAPile(int n) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> wordsString(String s) {\n        var re = Pattern.compile(\"[, ]\").matcher(s);\n        var result = new ArrayList<String>();\n        while (re.find()) {\n            var w = re.group();\n            if (w.length() > 0) {\n                result.add(w);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x != y) {\n            return y - 1;\n        }\n        return -1;\n    }\n}\n",
            "class Global {\n    public static Optional<String> roundedAvg(int n, int m) {\n        if (n > m) {\n            return Optional.empty();\n        }\n        int rAvg = (int) Math.round((m + n) / 2.0 + 0.5);\n        return Optional.of(Integer.toBinaryString(rAvg));\n    }\n}\n",
            "class Global {\n    public static List<Integer> uniqueDigits(List<Integer> x) {\n        var result = new ArrayList<Integer>();\n        for (Integer num : x) {\n            if (allDigitsOdd(num.toString())) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n    public static boolean allDigitsOdd(String s) {\n        return s.chars().allMatch(digit -> digit.toString().toInt() % 2 != 0);\n    }\n}\n",
            "class Global {\n    public static List<String> byLength(List<Integer> arr) {\n        var digitNames = new String[] {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        var sortedArr = new ArrayList<Integer>();\n        for (Integer x : arr) {\n            if (1 <= x && x <= 9) {\n                sortedArr.add(x);\n            }\n        }\n        Collections.sort(sortedArr, Collections.reverseOrder());\n        var result = new ArrayList<String>();\n        for (Integer x : sortedArr) {\n            result.add(digitNames[x-1]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> f(int n) {\n        var nums = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            nums.add(i);\n        }\n        return nums.stream().map(i -> i % 2 != 0 ? nums.subList(0, i).stream().mapToInt(Integer::intValue).sum() : nums.subList(0, i).stream().mapToInt(Integer::intValue).reduce(1, (x, y) -> x * y)).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<Integer> evenOddPalindrome(int n) {\n        var cnt = new ArrayList<Integer>();\n        cnt.add(0);\n        cnt.add(0);\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                cnt.set((i % 2) as int, cnt.get((i % 2) as int) + 1);\n            }\n        }\n        return cnt;\n    }\n    public static boolean isPalindrome(int n) {\n        return Integer.toString(n).equals(new StringBuilder(Integer.toString(n)).reverse().toString());\n    }\n}\n",
            "class Global {\n    public static int countNums(List<Integer> arr) {\n        return (int) arr.stream().filter(n -> digitsSum(n) > 0).count();\n    }\n    public static int digitsSum(int n) {\n        String nStr = String.valueOf(n);\n        if (n >= 0) {\n            return nStr.chars().map(d -> d - '0').sum();\n        } else {\n            return Integer.parseInt(nStr.substring(0, 2)) * 2 + digitsSum(Math.abs(n));\n        }\n    }\n}\n",
            "class Global {\n    public static boolean moveOneBall(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        var sortedArr = new ArrayList<Integer>(arr);\n        Collections.sort(sortedArr);\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.subList(i, arr.size()).equals(sortedArr.subList(0, arr.size() - i)) && arr.subList(0, i).equals(sortedArr.subList(arr.size() - i, sortedArr.size()))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String canExchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCnt = 0;\n        for (Integer num : lst1) {\n            if (num % 2 != 0) {\n                oddCnt++;\n            }\n        }\n        int evenCnt = 0;\n        for (Integer num : lst2) {\n            if (num % 2 == 0) {\n                evenCnt++;\n            }\n        }\n        return evenCnt >= oddCnt ? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static Map<String, Integer> histogram(String test) {\n        var freq = new HashMap<String, Integer>();\n        var words = test.split(\" \");\n        for (String w : words) {\n            if (w.length() > 0) {\n                freq.put(w, freq.getOrDefault(w, 0) + 1);\n            }\n        }\n        var result = new HashMap<String, Integer>();\n        if (freq.size() > 0) {\n            var maxFreq = Collections.max(freq.values());\n            for (Map.Entry<String, Integer> entry : freq.entrySet()) {\n                if (entry.getValue() == maxFreq) {\n                    result.put(entry.getKey(), entry.getValue());\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> reverseDelete(String s, String c) {\n        var s1 = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (!c.contains(s.charAt(i) + \"\")) {\n                s1.append(s.charAt(i));\n            }\n        }\n        return Arrays.asList(s1.toString(), isPalindrome(s1.toString()) ? \"yes\" : \"no\");\n    }\n    public static boolean isPalindrome(String s) {\n        return s.equals(new StringBuilder(s).reverse().toString());\n    }\n}\n",
            "class Global {\n    public static List<String> oddCount(List<String> lst) {\n        var result = new ArrayList<String>();\n        for (String num : lst) {\n            int n = (int) num.chars().filter(d -> d % 2 == 1).count();\n            String rs = \"the number of odd elements in the string i of the input.\";\n            result.add(rs.replace(\"i\", String.valueOf(n)));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int minSubArraySum(List<Integer> nums) {\n        int minSum = 0;\n        int curSum = 0;\n        for (Integer n : nums) {\n            curSum = Math.min(curSum + n, 0);\n            minSum = Math.min(curSum, minSum);\n        }\n        if (minSum == 0) {\n            minSum = Collections.min(nums);\n        }\n        return minSum;\n    }\n}\n",
            "class Global {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        return grid.stream().mapToInt(arr -> (int) Math.ceil((double) arr.stream().mapToInt(Integer::intValue).sum() / capacity)).sum();\n    }\n}\n",
            "class Global {\n    public static int countOnes(int num) {\n        int count = 0;\n        int num = num;\n        while (num > 0) {\n            if ((num & 1) == 1) {\n                count += 1;\n            }\n            num >>= 1;\n        }\n        return count;\n    }\n    public static List<Integer> sortArray(List<Integer> arr) {\n        var arr = new ArrayList<Integer>(arr);\n        arr.sort(Comparator.comparingInt(Global::countOnes).thenComparingInt(i -> i));\n        return arr;\n    }\n}\n",
            "class Global {\n    public static List<String> selectWords(String s, int n) {\n        var consonants = \"bcdfghjklmnpqrstvwxyz\";\n        var words = Arrays.asList(s.split(\" \"));\n        return words.stream().filter(w -> w.length() > 0).filter(w -> w.chars().filter(c -> consonants.indexOf(Character.toLowerCase(c)) >= 0).count() == n).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i >= 1; i--) {\n            if (vowels.contains(word.charAt(i)) && !vowels.contains(word.charAt(i - 1)) && !vowels.contains(word.charAt(i + 1))) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static String matchParens(List<String> lst) {\n        String s1 = lst.get(0) + lst.get(1);\n        String s2 = lst.get(1) + lst.get(0);\n        if (check(s1) || check(s2)) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n    public static boolean check(String s) {\n        int depth = 0;\n        for (char ch : s.toCharArray()) {\n            if (ch == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return new ArrayList<Integer>();\n        }\n        var result = new ArrayList<Integer>();\n        var sorted = new ArrayList<Integer>(arr);\n        Collections.sort(sorted);\n        for (int i = sorted.size() - k; i < sorted.size(); i++) {\n            result.add(sorted.get(i));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int solution(List<Integer> lst) {\n        return lst.stream().filter(x -> x % 2 != 0).filter(x -> x % 2 == 0).mapToInt(x -> x).sum();\n    }\n}\n",
            "class Global {\n    public static int addElements(List<Integer> arr, int k) {\n        return arr.stream().limit(k).filter(n -> n.toString().length() <= 2).mapToInt(n -> n).sum();\n    }\n}\n",
            "class Global {\n    public static List<Integer> getOddCollatz(int n) {\n        var collatz = new ArrayList<Integer>();\n        collatz.add(1);\n        while (n != 1) {\n            if (n % 2 != 0) {\n                collatz.add(n);\n                n = 3 * n + 1;\n            } else {\n                n = n / 2;\n            }\n        }\n        Collections.sort(collatz);\n        return collatz;\n    }\n}\n",
            "class Global {\n    public static boolean validDate(String date) {\n        if (date.length() != 10 || date.charAt(2) != '-' || date.charAt(5) != '-') {\n            return false;\n        }\n        int m = Integer.parseInt(date.substring(0, 2));\n        int d = Integer.parseInt(date.substring(3, 5));\n        if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n            if (d >= 1 && d <= 31) {\n                return true;\n            }\n        }\n        if (m == 4 || m == 6 || m == 9 || m == 11) {\n            if (d >= 1 && d <= 30) {\n                return true;\n            }\n        }\n        if (m == 2) {\n            if (d >= 1 && d <= 29) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<String> splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            return Arrays.asList(String.valueOf(txt.chars().filter(c -> c >= 'a' && c <= 'z' && c % 2 == 0).count()));\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isSorted(List<Integer> lst) {\n        if (!lst.stream().collect(Collectors.groupingBy(Function.identity(), Collectors.counting())).values().stream().allMatch(i -> i <= 2)) {\n            return false;\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int sign = -1;\n        if (arr.stream().filter(n -> n < 0).count() % 2 == 1) {\n            sign = 1;\n        }\n        return Optional.of(sign * arr.stream().map(Math::abs).reduce(0, Integer::sum));\n    }\n}\n",
            "class Global {\n    public static List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int minVal = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    minVal = Math.min(minVal, Collections.min(temp));\n                }\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            result.add(i % 2 == 0 ? 1 : minVal);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> tri(int n) {\n        if (n == 0) {\n            return Arrays.asList(1);\n        }\n        var seq = new ArrayList<Integer>();\n        seq.add(1);\n        seq.add(3);\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                seq.add(i / 2 + 1);\n            } else {\n                seq.add(seq.get(i - 1) + seq.get(i - 2) + (i + 3) / 2);\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int digits(int n) {\n        var odds = new ArrayList<Integer>();\n        for (char d : String.valueOf(n).toCharArray()) {\n            odds.add(Integer.parseInt(String.valueOf(d)));\n        }\n        return odds.stream().reduce(1, (x, y) -> x * y);\n    }\n}\n",
            "class Global {\n    public static boolean isNested(String s) {\n        var openIdx = new ArrayList<Integer>();\n        var closeIdx = new ArrayList<Integer>();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '[') {\n                openIdx.add(i);\n            } else if (s.charAt(i) == ']') {\n                closeIdx.add(i);\n            }\n        }\n        Collections.reverse(closeIdx);\n        int cnt = 0;\n        int i = 0;\n        int l = closeIdx.size();\n        for (int idx : openIdx) {\n            if (i < l && idx < closeIdx.get(i)) {\n                cnt += 1;\n                i += 1;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Double> lst) {\n        int result = 0;\n        for (Double n : lst) {\n            result += (int) Math.pow(Math.ceil(n), 2);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean checkIfLastCharIsALetter(String txt) {\n        if (txt == null || txt.length() == 0) {\n            return false;\n        }\n        String last = txt.substring(txt.lastIndexOf(' ') + 1);\n        return last.length() == 1 && Character.isLetter(last.charAt(0));\n    }\n}\n",
            "class Global {\n    public static int canArrange(List<Integer> arr) {\n        if (arr.size() <= 1) {\n            return -1;\n        }\n        var idx = new ArrayList<Integer>();\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                idx.add(i);\n            }\n        }\n        return Collections.max(idx, (a, b) -> a - b);\n    }\n}\n",
            "class Global {\n    public static List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst) {\n        var neg = new ArrayList<Integer>();\n        var pos = new ArrayList<Integer>();\n        for (Integer i : lst) {\n            if (i < 0) {\n                neg.add(i);\n            } else if (i > 0) {\n                pos.add(i);\n            }\n        }\n        var maxNeg = neg.stream().max(Integer::compareTo).orElse(null);\n        var minPos = pos.stream().min(Integer::compareTo).orElse(null);\n        return Arrays.asList(Optional.ofNullable(maxNeg), Optional.ofNullable(minPos));\n    }\n}\n",
            "class Global {\n    public static Optional<Double> compareOne(Object a, Object b) {\n        if (a instanceof String) {\n            return Optional.of(Double.parseDouble(((String) a).replace(',', '.')));\n        } else if (a instanceof Integer) {\n            return Optional.of((double) (Integer) a);\n        } else if (a instanceof Double) {\n            return Optional.of((double) a);\n        } else {\n            throw new RuntimeException(\"Type Error\");\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int specialFactorial(int n) {\n        int fact = 1;\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String fixSpaces(String txt) {\n        return txt.replaceAll(\"\\\\s{3,}\", \"-\").replace(\" \", \"_\");\n    }\n}\n",
            "class Global {\n    public static String fileNameCheck(String fileName) {\n        String[] suf = {\"txt\", \"exe\", \"dll\"};\n        String[] lst = fileName.split(\"\\\\.\");\n        if (lst.length != 2 || !Arrays.asList(suf).contains(lst[1]) || lst[0].length() == 0 || !lst[0].chars().next().isAlphabetic() || lst[0].chars().filter(x -> x.isDigit(10)).count() > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int e = lst.get(i);\n            if (i % 3 == 0) {\n                result += e * e;\n            } else if (i % 4 == 0) {\n                result += e * e * e;\n            } else {\n                result += e;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static String wordsInSentence(String sentence) {\n        var words = sentence.split(\" \");\n        return String.join(\" \", Arrays.stream(words).filter(w -> isPrime(w.length())).toArray(String[]::new));\n    }\n}\n",
            "class Global {\n    public static boolean simplify(String x, String n) {\n        var xs = x.split(\"/\");\n        var ns = n.split(\"/\");\n        var num = Integer.parseInt(xs[0]) * Integer.parseInt(ns[0]);\n        var den = Integer.parseInt(xs[1]) * Integer.parseInt(ns[1]);\n        return num % den == 0;\n    }\n}\n",
            "class Global {\n    public static int digitsSum(int n) {\n        String nStr = String.valueOf(n);\n        if (n >= 0) {\n            return Arrays.stream(nStr.split(\"\")).mapToInt(Integer::parseInt).sum();\n        } else {\n            return Integer.parseInt(nStr.substring(0, 2)) * 2 + digitsSum(Math.abs(n));\n        }\n    }\n    public static List<Integer> orderByPoints(List<Integer> nums) {\n        return nums.stream().sorted(Comparator.comparingInt(Global::digitsSum)).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int specialFilter(List<Integer> nums) {\n        var odds = \"13579\";\n        return (int) nums.stream().filter(n -> n > 10 && n % 2 == 1 && odds.contains(String.valueOf(n).charAt(0))).count();\n    }\n}\n",
            "class Global {\n    public static int getMaxTriples(int n) {\n        var c = new int[3];\n        for (int i = 1; i <= n; i++) {\n            int a = i * i - i + 1;\n            c[a % 3] += 1;\n        }\n        return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n    }\n}\n",
            "class Global {\n    public static List<String> bf(String planet1, String planet2) {\n        var names = new ArrayList<String>();\n        names.add(\"Mercury\");\n        names.add(\"Venus\");\n        names.add(\"Earth\");\n        names.add(\"Mars\");\n        names.add(\"Jupiter\");\n        names.add(\"Saturn\");\n        names.add(\"Uranus\");\n        names.add(\"Neptune\");\n        if (!names.contains(planet1) || !names.contains(planet2)) {\n            return new ArrayList<String>();\n        }\n        int l = names.indexOf(planet1);\n        int r = names.indexOf(planet2);\n        if (l > r) {\n            l = r;\n            r = l;\n        }\n        if (l == r) {\n            return new ArrayList<String>();\n        }\n        return names.subList(l + 1, r);\n    }\n}\n",
            "class Global {\n    public static List<String> sortedListSum(List<String> lst) {\n        var result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, (a, b) -> {\n            if (a.length() == b.length()) {\n                return a.compareTo(b);\n            } else {\n                return Integer.compare(a.length(), b.length());\n            }\n        });\n        return result;\n    }\n}\n",
            "class Global {\n    public static int xOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int doubleTheDifference(List<Double> lst) {\n        return lst.stream().filter(n -> n >= 0 && n % 2 == 1).map(n -> n * n).mapToInt(n -> n.intValue()).sum();\n    }\n}\n",
            "class Global {\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        return game.stream().zip(guess.stream()).map(x -> Math.abs(x.getT1() - x.getT2())).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static String strongestExtension(String className, List<String> extensions) {\n        double maxS = Double.NEGATIVE_INFINITY;\n        String maxExt = \"\";\n        for (String ext : extensions) {\n            int upper = 0;\n            int lower = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    upper += 1;\n                } else if (Character.isLowerCase(c)) {\n                    lower += 1;\n                }\n            }\n            double s = upper - lower;\n            if (s > maxS) {\n                maxS = s;\n                maxExt = ext;\n            }\n        }\n        return className + \".\" + maxExt;\n    }\n}\n",
            "class Global {\n    public static boolean cycpatternCheck(String a, String b) {\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if (a.contains(b.substring(i) + b.substring(0, i))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<Integer> evenOddCount(int num) {\n        var ds = new ArrayList<Character>();\n        for (char d : num.abs().toString().toCharArray()) {\n            ds.add(d);\n        }\n        int even = 0;\n        for (char d : ds) {\n            if (Integer.parseInt(d + \"\") % 2 == 0) {\n                even++;\n            }\n        }\n        return Arrays.asList(even, ds.size() - even);\n    }\n}\n",
            "class Global {\n    public static String intToMiniRoman(int num) {\n        var values = new int[] {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        var numerals = new String[] {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        var res = new ArrayList<String>();\n        for (int i = 0; i < values.length; i++) {\n            while (num >= values[i]) {\n                res.add(numerals[i]);\n                num -= values[i];\n            }\n        }\n        return String.join(\"\", res);\n    }\n}\n",
            "class Global {\n    public static boolean rightAngleTriangle(int a, int b, int c) {\n        int[] s = {a, b, c};\n        Arrays.sort(s);\n        return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n    }\n}\n",
            "class Global {\n    public static String findMax(List<String> words) {\n        int maxCnt = 0;\n        String maxW = \"\";\n        for (String w : words) {\n            int cnt = new HashSet<>(w.chars().boxed().collect(Collectors.toList())).size();\n            if (cnt > maxCnt) {\n                maxCnt = cnt;\n                maxW = w;\n            } else if (cnt == maxCnt) {\n                maxW = min(maxW, w);\n            }\n        }\n        return maxW;\n    }\n}\n",
            "class Global {\n    public static List<Integer> eat(int num, int need, int remaining) {\n        if (need <= remaining) {\n            return Arrays.asList(num + need, remaining - need);\n        } else {\n            return Arrays.asList(num + remaining, 0);\n        }\n    }\n}\n",
            "class Global {\n    public static int doAlgebra(List<String> operators, List<Integer> operands) {\n        var ops = new ArrayList<String>(operators);\n        var nums = new ArrayList<Integer>(operands);\n        int i = ops.size() - 1;\n        while (i >= 0) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.pow(nums.get(i), nums.get(i + 1)));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n            i -= 1;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            } else if (ops.get(i).equals(\"//\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        return nums.get(0);\n    }\n}\n",
            "class Global {\n    public static String solve(String s) {\n        if (s.matches(\"[0-9]+\")) {\n            return new StringBuilder(s).reverse().toString();\n        }\n        var result = new ArrayList<Character>();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (!Character.isLetter(ch)) {\n                result.add(ch);\n            } else if (Character.isUpperCase(ch)) {\n                result.add(Character.toLowerCase(ch));\n            } else if (Character.isLowerCase(ch)) {\n                result.add(Character.toUpperCase(ch));\n            }\n        }\n        return String.join(\"\", result);\n    }\n}\n",
            "class Global {\n    public static Optional<String> stringToMd5(String txt) {\n        if (txt.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md5_hash = MessageDigest.getInstance(\"MD5\");\n        byte[] txt_bytes = txt.getBytes();\n        md5_hash.update(txt_bytes);\n        byte[] md5_encoded = md5_hash.digest();\n        String md5_encoded = Arrays.stream(md5_encoded).mapToObj(b -> String.format(\"%02x\", b)).collect(Collectors.joining());\n        return Optional.of(md5_encoded);\n    }\n}\n",
            "class Global {\n    public static List<Integer> generateIntegers(int a, int b) {\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n        return IntStream.rangeClosed(lower, upper)\n            .filter(i -> i % 2 == 0)\n            .boxed()\n            .collect(Collectors.toList());\n    }\n}\n"
        ],
        "javascript": [
            "export const hasCloseElements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "export const separateParenGroups = (parenString) => {\n    const groups = [];\n    const stk = [];\n    let currentGroup = \"\";\n    const parens = parenString.replace(\" \", \"\");\n    for (const ch of parens) {\n        if (ch === \"(\") {\n            stk.push(ch);\n            currentGroup += ch;\n        } else if (ch === \")\") {\n            stk.pop();\n            currentGroup += ch;\n            if (stk.length === 0) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "export const truncateNumber = (num) => {\n    return num - Math.floor(num);\n}\n",
            "export const belowZero = (operations) => {\n    let balance = 0;\n    for (const op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const meanAbsoluteDeviation = (numbers) => {\n    const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    const deviation = numbers.map((x) => Math.abs(x - mean)).reduce((a, b) => a + b, 0);\n    deviation / numbers.length;\n}\n",
            "export const intersperse = (numbers, delimiter) => {\n    const result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i !== 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "export const parseNestedParens = (parenString) => {\n    const result = [];\n    const parenGroups = parenString.split(\" \");\n    for (const group of parenGroups) {\n        let depth = 0;\n        let maxDepth = 0;\n        for (const ch of group) {\n            if (ch === \"(\") {\n                depth += 1;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch === \")\") {\n                depth -= 1;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}\n",
            "export const filterBySubstring = (strs, substring) => {\n    return strs.filter(s => s.includes(substring));\n}\n",
            "export const sumProduct = (numbers) => {\n    const nSum = numbers.reduce((acc, x) => acc + x, 0);\n    const nProduct = numbers.reduce((acc, x) => acc * x, 1);\n    return [nSum, nProduct];\n}\n",
            "export const rollingMax = (numbers) => {\n    let maxSoFar = Number.MIN_SAFE_INTEGER;\n    const result = [];\n    for (const num of numbers) {\n        maxSoFar = Math.max(maxSoFar, num);\n        result.push(maxSoFar);\n    }\n    return result;\n}\n",
            "export const makePalindrome = (s) => {\n    if (s === s.split(\"\").reverse().join(\"\")) {\n        return s;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (s.slice(i) === s.slice(i).split(\"\").reverse().join(\"\")) {\n            return s + s.slice(0, i).split(\"\").reverse().join(\"\");\n        }\n    }\n    return \"\";\n}\n",
            "export const stringXor = (a, b) => {\n    let result = \"\";\n    for (let i = 0; i < Math.max(a.length, b.length); i++) {\n        if (a[i] === b[i]) {\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n",
            "export const longest = (strs) => {\n    if (strs.length === 0) {\n        return null;\n    }\n    let longestS = strs[0];\n    for (const s of strs) {\n        if (s.length > longestS.length) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}\n",
            "export const greatestCommonDivisor = (a, b) => {\n    if (b === 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "export const allPrefixes = (s) => {\n    const prefixes = [];\n    for (let i = 0; i < s.length; i++) {\n        prefixes.push(s.substring(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "export const stringSequence = (n) => {\n    return Array.from({ length: n + 1 }, (_, i) => i).join(\" \");\n}\n",
            "export const countDistinctCharacters = (s) => {\n    const set = new Set();\n    for (const c of s.toLowerCase()) {\n        set.add(c);\n    }\n    return set.size;\n}\n",
            "export const parseMusic = (musicString) => {\n    const durations = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1\n    };\n    const notes = musicString.split(\" \");\n    return notes.map((note) => durations[note]);\n}\n",
            "export const howManyTimes = (s, substring) => {\n    let times = 0;\n    for (let i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.substring(i, i + substring.length) === substring) {\n            times++;\n        }\n    }\n    return times;\n}\n",
            "export const sortNumbers = (numbers) => {\n    const numDict = {\n        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n        nine: 9,\n    };\n    const numList = [];\n    for (const word of numbers.split(\" \")) {\n        if (word in numDict) {\n            numList.push(word);\n        }\n    }\n    numList.sort((a, b) => numDict[a] - numDict[b]);\n    return numList.join(\" \");\n}\n",
            "export const findClosestElements = (numbers) => {\n    const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n    let minDiff = Number.POSITIVE_INFINITY;\n    let closestPair = [];\n    for (let i = 1; i < sortedNumbers.length; i++) {\n        const diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "export const rescaleToUnit = (numbers) => {\n    const minNum = Math.min(...numbers);\n    const maxNum = Math.max(...numbers);\n    if (minNum === maxNum) {\n        return Array(numbers.length).fill(0.0);\n    } else {\n        return numbers.map((num) => (num - minNum) / (maxNum - minNum));\n    }\n}\n",
            "export const filterIntegers = (values) => {\n    const result = [];\n    for (const v of values) {\n        if (typeof v === \"number\") {\n            result.push(v);\n        }\n    }\n    return result;\n}\n",
            "export const strLength = (s) => {\n    return s.length;\n}\n",
            "export const largestDivisor = (n) => {\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "export const factorize = (n) => {\n    const factors = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "export const removeDuplicates = (numbers) => {\n    const counts = {};\n    for (const num of numbers) {\n        counts[num] = (counts[num] || 0) + 1;\n    }\n    const res = numbers.filter((num) => counts[num] === 1);\n    return res;\n}\n",
            "export const flipCase = (s) => {\n    const flipped = [];\n    for (const ch of s) {\n        if (!ch.match(/[a-zA-Z]/)) {\n            flipped.push(ch);\n        } else if (ch.match(/[a-z]/)) {\n            flipped.push(ch.toUpperCase());\n        } else if (ch.match(/[A-Z]/)) {\n            flipped.push(ch.toLowerCase());\n        }\n    }\n    return flipped.join(\"\");\n}\n",
            "export const concatenate = (strs) => {\n    let result = \"\";\n    for (const s of strs) {\n        result += s;\n    }\n    return result;\n}\n",
            "export const filterByPrefix = (strs, prefixStr) => {\n    return strs.filter(s => s.startsWith(prefixStr));\n}\n",
            "export const getPositive = (l) => {\n    return l.filter((num) => num > 0);\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= floor(sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const poly = (xs, x) => {\n    let res = 0.0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n}\nexport const findZero = (xs) => {\n    let x1 = 1.0;\n    let x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0.0) {\n        x1 *= 2.0;\n        x2 *= 2.0;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        const mid = (x1 + x2) / 2.0;\n        if (poly(xs, mid) === 0.0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0.0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2.0;\n}\n",
            "export const sortThird = (l) => {\n    const sortedThird = l.filter((_, i) => i % 3 === 0).sort((a, b) => a - b);\n    return l.map((e, i) => i % 3 === 0 ? sortedThird[i / 3] : e);\n}\n",
            "export const listUnique = (l) => {\n    return [...new Set(l)].sort();\n}\n",
            "export const maxElement = (l) => {\n    if (l.length === 0) {\n        return 0;\n    }\n    return Math.max(...l);\n}\n",
            "export const fizzBuzz = (n) => {\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += (i + \"\").split(\"7\").length - 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const sortEven = (l) => {\n    const sortedEven = l.filter((_, i) => i % 2 === 0).sort((a, b) => a - b);\n    return l.map((e, i) => i % 2 === 0 ? sortedEven[i / 2] : e);\n}\n",
            "export const encodeCyclic = (s) => {\n    let result = \"\";\n    for (let i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result += s.substring(i);\n        } else {\n            result += s.substring(i + 1, i + 3);\n            result += s.substring(i, i + 1);\n        }\n    }\n    return result;\n}\nexport const decodeCyclic = (s) => {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) { return false; }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) { return false; }\n    }\n    return true;\n}\nexport const primeFib = (n) => {\n    let f = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) { cnt += 1; }\n    }\n    return f[1];\n}\n",
            "export const triplesSumToZero = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "export const carRaceCollision = (n) => {\n    return n ** 2;\n}\n",
            "export const incrList = (l) => {\n    return l.map((i) => i + 1);\n}\n",
            "export const pairsSumToZero = (l) => {\n    const seen = new Set();\n    for (const num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "export const changeBase = (x, bas) => {\n    if (x === 0) {\n        return \"0\";\n    }\n    const digits = [];\n    while (x > 0) {\n        digits.push(x % bas);\n        x = Math.floor(x / bas);\n    }\n    return digits.reverse().join(\"\");\n}\n",
            "export const triangleArea = (a, h) => {\n    return (a * h) / 2;\n}\n",
            "export const fib4 = (n) => {\n    const fib = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2];\n    }\n    return fib[n % 4];\n}\n",
            "export const median = (l) => {\n    const sl = l.slice().sort((a, b) => a - b);\n    if (sl.length % 2 !== 0) {\n        return sl[sl.length / 2];\n    } else {\n        return (sl[sl.length / 2] + sl[sl.length / 2 - 1]) / 2.0;\n    }\n}\n",
            "export const isPalindrome = (txt) => {\n    return txt === txt.split(\"\").reverse().join(\"\");\n}\n",
            "export const modp = (n, p) => {\n    let ret = 1;\n    for (let i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "export const encodeShift = (s) => {\n    return s.split(\"\").map(ch => {\n        const ch_num = ch.charCodeAt(0);\n        const shifted_ch_num = (ch_num - 97 + 5) % 26 + 97;\n        return String.fromCharCode(shifted_ch_num);\n    }).join(\"\");\n}\nexport const decodeShift = (s) => {\n    return s.split(\"\").map(ch => {\n        const ch_num = ch.charCodeAt(0);\n        const shifted_ch_num = (ch_num - 97 + 21) % 26 + 97;\n        return String.fromCharCode(shifted_ch_num);\n    }).join(\"\");\n}\n",
            "export const removeVowels = (txt) => {\n    const vowels = \"aeiouAEIOU\";\n    let result = \"\";\n    for (const char of txt) {\n        if (!vowels.includes(char)) {\n            result += char;\n        }\n    }\n    return result;\n}\n",
            "export const belowThreshold = (l, t) => {\n    return l.every(x => x < t);\n}\n",
            "export const add = (x, y) => {\n    return x + y;\n}\n",
            "export const sameChars = (s0, s1) => {\n    return new Set(s0) === new Set(s1);\n}\n",
            "export const fib = (n) => {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "export const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"<\") {\n            depth += 1;\n        } else if (b === \">\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const monotonic = (l) => {\n    const diff = l.slice(1).map((x, i) => x - l[i]);\n    return diff.every((x) => x <= 0) || diff.every((x) => x >= 0);\n}\n",
            "export const common = (l1, l2) => {\n    return Array.from(new Set(l1.filter(e => l2.includes(e))));\n}\n",
            "export const largestPrimeFactor = (n) => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1;\n        } else {\n            n = Math.floor(n / i);\n        }\n    }\n    return n;\n}\n",
            "export const sumToN = (n) => {\n    return (n * (n + 1)) / 2;\n}\n",
            "export const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"(\") {\n            depth += 1;\n        } else if (b === \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const derivative = (xs) => {\n    const result = [];\n    for (let i = 1; i < xs.length; i++) {\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n",
            "export const fibfib = (n) => {\n    if (n <= 1) {\n        return 0;\n    }\n    let a = 0;\n    let b = 0;\n    let c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "export const vowelsCount = (s) => {\n    const vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase()) || (i === s.length - 1 && s[i].toLowerCase() === \"y\")) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n",
            "export const circularShift = (x, shift) => {\n    const xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.split(\"\").reverse().join(\"\");\n    } else {\n        return xStr.slice(-shift) + xStr.slice(0, -shift);\n    }\n}\n",
            "export const digitSum = (s) => {\n    return [...s].reduce((sum, c) => sum + c.charCodeAt(0), 0);\n}\n",
            "export const fruitDistribution = (s, n) => {\n    const words = s.split(\" \");\n    const apples = parseInt(words[words.indexOf(\"apples\") - 1]);\n    const oranges = parseInt(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "export const pluck = (arr) => {\n    const evens = [];\n    for (const n of arr) {\n        if (n % 2 === 0) {\n            evens.push(n);\n        }\n    }\n    if (evens.length === 0) {\n        return [];\n    }\n    const minEven = Math.min(...evens);\n    return [minEven, arr.indexOf(minEven)];\n}\n",
            "export const search = (lst) => {\n    const freqs = new Map();\n    for (const n of lst) {\n        const count = freqs.get(n) || 0;\n        freqs.set(n, count + 1);\n    }\n    const goodVals = [...freqs.entries()].filter(([k, v]) => v >= k).map(([k, _]) => k);\n    return Math.max(...goodVals) || -1;\n}\n",
            "export const strangeSortList = (lst) => {\n    const sl = lst.slice().sort((a, b) => a - b);\n    const result = [];\n    let left = 0, right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "export const triangleArea = (a, b, c) => {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2.0;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "export const willItFly = (q, w) => {\n    if (q.length === 0) {\n        return false;\n    }\n    const isPalin = q.every((e, i) => e === q[q.length - i - 1]);\n    const total = q.reduce((a, b) => a + b, 0);\n    return isPalin && total <= w;\n}\n",
            "export const smallestChange = (arr) => {\n    let ans = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i] !== arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "export const totalMatch = (lst1, lst2) => {\n    const cnt1 = lst1.reduce((acc, s) => acc + s.length, 0);\n    const cnt2 = lst2.reduce((acc, s) => acc + s.length, 0);\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n",
            "export const isMultiplyPrime = (a) => {\n    if (a < 2) {\n        return false;\n    }\n    let cnt = 0;\n    for (let i = 2; i <= a; i++) {\n        if (isPrime(i)) {\n            while (a % i === 0) {\n                cnt++;\n                a /= i;\n            }\n        }\n    }\n    return cnt === 3;\n}\n",
            "export const isSimplePower = (x, n) => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}\n",
            "export const isCube = (a) => {\n    a = Math.abs(a);\n    const root = Math.round(Math.pow(a, 1.0 / 3.0));\n    return root * root * root === a;\n}\n",
            "export const hexKey = (num) => {\n    return [...num].filter((x) => \"2357BD\".includes(x)).length;\n}\n",
            "export const decimalToBinary = (dec) => {\n    return `db${dec.toString(2)}db`;\n}\n",
            "export const isHappy = (s) => {\n    if (s.length < 3) {\n        return false;\n    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const numericalLetterGrade = (grades) => {\n    const result = [];\n    for (const g of grades) {\n        if (g === 4.0) {\n            result.push(\"A+\");\n        } else if (g > 3.7) {\n            result.push(\"A\");\n        } else if (g > 3.3) {\n            result.push(\"A-\");\n        } else if (g > 3.0) {\n            result.push(\"B+\");\n        } else if (g > 2.7) {\n            result.push(\"B\");\n        } else if (g > 2.3) {\n            result.push(\"B-\");\n        } else if (g > 2.0) {\n            result.push(\"C+\");\n        } else if (g > 1.7) {\n            result.push(\"C\");\n        } else if (g > 1.3) {\n            result.push(\"C-\");\n        } else if (g > 1.0) {\n            result.push(\"D+\");\n        } else if (g > 0.7) {\n            result.push(\"D\");\n        } else if (g > 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n",
            "export const primeLength = (s) => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(length)) + 1; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const startsOneEnds = (n) => {\n    if (n === 1) {\n        return 1;\n    }\n    return 2 * 9 * (10 ** (n - 2));\n}\n",
            "export const solve = (n) => {\n    const digitsSum = n.toString().split(\"\").reduce((acc, d) => acc + parseInt(d), 0);\n    return digitsSum.toString(2);\n}\n",
            "export const add = (lst) => {\n    return lst.reduce((acc, x, i) => {\n        if (i % 2 === 1 && x % 2 === 0) {\n            return acc + x;\n        }\n        return acc;\n    }, 0);\n}\n",
            "export const antiShuffle = (s) => {\n    const words = s.split(\" \").map((word) => {\n        const chars = word.split(\"\").sort();\n        return chars.join(\"\");\n    });\n    return words.join(\" \");\n}\n",
            "export const getRow = (lst, x) => {\n    const coords = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    coords.sort((a, b) => {\n        return a[0] - b[0] || b[1] - a[1];\n    });\n    return coords;\n}\n",
            "export const sortArray = (arr) => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) {\n        return arr.sort((a, b) => b - a);\n    } else {\n        return arr.sort((a, b) => a - b);\n    }\n}\n",
            "export const encrypt = (s) => {\n    let result = \"\";\n    for (const ch of s) {\n        let shifted = ch.charCodeAt(0) + 4;\n        if (shifted > \"z\".charCodeAt(0)) {\n            shifted -= 26;\n        }\n        result += String.fromCharCode(shifted);\n    }\n    return result;\n}\n",
            "export const nextSmallest = (lst) => {\n    const sl = [...new Set(lst.slice().sort())];\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}\n",
            "export const isBored = (s) => {\n    const re = /[.!?]\\s*/;\n    const sentences = split(s, re);\n    return sentences.filter((sentence) => sentence.length >= 2 && sentence.slice(0, 2) === \"I \").length;\n}\n",
            "export const anyInt = (x, y, z) => {\n    if (typeof x === \"number\" && typeof y === \"number\" && typeof z === \"number\") {\n        return x + y === z || x + z === y || y + z === x;\n    }\n    return false;\n}\n",
            "export const encode = (message) => {\n    const vowels = \"aeiouAEIOU\";\n    const result = [];\n    for (const ch of message) {\n        if (ch.match(/[a-zA-Z]/)) {\n            const ch1 = ch.toUpperCase() === ch ? ch.toLowerCase() : ch.toUpperCase();\n            if (vowels.includes(ch1)) {\n                result.push(String.fromCharCode(ch1.charCodeAt(0) + 2));\n            } else {\n                result.push(ch1);\n            }\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= floor(sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const skjkasdkd = (lst) => {\n    const primes = lst.filter(isPrime);\n    if (primes.length === 0) {\n        return 0;\n    }\n    const largest = Math.max(...primes).toString();\n    return largest.split(\"\").reduce((acc, digit) => acc + parseInt(digit), 0);\n}\n",
            "export const checkDictCase = (d) => {\n    if (!d.size) {\n        return false;\n    }\n    return [...d.keys()].every((c) => c.toLowerCase() === c) || [...d.keys()].every((c) => c.toUpperCase() === c);\n}\n",
            "export const countUpTo = (n) => {\n    const primes = [];\n    for (let num = 2; num < n; num++) {\n        if (primes.every((p) => num % p !== 0)) {\n            primes.push(num);\n        }\n    }\n    return primes;\n}\n",
            "export const multiply = (a, b) => {\n    return Math.abs(a) % 10 * Math.abs(b) % 10;\n}\n",
            "export const countUpper = (s) => {\n    const vowels = \"AEIOU\";\n    let result = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (i % 2 === 0 && vowels.includes(s[i])) {\n            result += 1;\n        }\n    }\n    return result;\n}\n",
            "export const closestInteger = (value) => {\n    const num = parseFloat(value);\n    if (num >= 0.0) {\n        return Math.floor(num + 0.5);\n    } else {\n        return Math.ceil(num - 0.5);\n    }\n}\n",
            "export const makeAPile = (n) => {\n    return Array.from({ length: n }, (_, i) => n + 2 * i);\n}\n",
            "export const wordsString = (s) => {\n    const re = /[, ]/;\n    const result = [];\n    for (const w of s.split(re)) {\n        if (w.length > 0) {\n            result.push(w);\n        }\n    }\n    return result;\n}\n",
            "export const chooseNum = (x, y) => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    if (x !== y) {\n        return y - 1;\n    }\n    -1\n}\n",
            "export const roundedAvg = (n, m) => {\n    if (n > m) {\n        return null;\n    }\n    const rAvg = Math.round((m + n) / 2.0);\n    return rAvg.toString(2);\n}\n",
            "export const uniqueDigits = (x) => {\n    const result = [];\n    for (const num of x) {\n        if (allDigitsOdd(num.toString())) {\n            result.push(num);\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}\n",
            "export const byLength = (arr) => {\n    const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const sortedArr = arr.filter(x => 1 <= x && x <= 9).sort((a, b) => b - a);\n    return sortedArr.map(x => digitNames[x - 1]);\n}\n",
            "export const f = (n) => {\n    const nums = Array.from({ length: n }, (_, i) => i + 1);\n    return nums.map((i) => {\n        if (i % 2 !== 0) {\n            return nums.slice(0, i).reduce((x, y) => x + y, 0);\n        }\n        return nums.slice(0, i).reduce((x, y) => x * y, 1);\n    });\n}\n",
            "export const isPalindrome = (txt) => {\n    return txt === txt.split(\"\").reverse().join(\"\");\n}\nexport const evenOddPalindrome = (n) => {\n    const cnt = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[(i % 2) as usize] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const countNums = (arr) => {\n    return arr.filter((n) => {\n        const nStr = n.toString();\n        if (n >= 0) {\n            return nStr.split(\"\").reduce((a, b) => a + parseInt(b), 0);\n        } else {\n            return parseInt(nStr.slice(0, 2)) * 2 + countNums([Math.abs(n)]);\n        }\n    }).length;\n}\n",
            "export const moveOneBall = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    const sortedArr = arr.slice().sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.slice(i).join(\"\") === sortedArr.slice(0, arr.length - i).join(\"\") && arr.slice(0, i).join(\"\") === sortedArr.slice(arr.length - i).join(\"\")) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const canExchange = (lst1, lst2) => {\n    const oddCnt = lst1.filter(num => num % 2 !== 0).length;\n    const evenCnt = lst2.filter(num => num % 2 === 0).length;\n    return evenCnt >= oddCnt ? \"YES\" : \"NO\";\n}\n",
            "export const histogram = (test) => {\n    const freq = new Map();\n    const words = test.split(\" \").filter((w) => w.length > 0);\n    for (const w of words) {\n        const count = freq.get(w) || 0;\n        freq.set(w, count + 1);\n    }\n    const result = new Map();\n    if (freq.size > 0) {\n        const maxFreq = Math.max(...freq.values());\n        for (const [k, v] of freq.entries()) {\n            if (v === maxFreq) {\n                result.set(k, v);\n            }\n        }\n    }\n    return result;\n}\n",
            "export const reverseDelete = (s, c) => {\n    const s1 = s.replace(new RegExp(`[${c}]`, \"g\"), \"\");\n    return [s1, s1 === s1.split(\"\").reverse().join(\"\") ? \"yes\" : \"no\"];\n}\n",
            "export const oddCount = (lst) => {\n    const result = [];\n    for (const num of lst) {\n        const n = [...num].reduce((acc, d) => acc + (d.charCodeAt(0) % 2 === 1 ? 1 : 0), 0);\n        const rs = \"the number of odd elements in the string i of the input.\";\n        result.push(rs.replace(\"i\", String(n)));\n    }\n    return result;\n}\n",
            "export const minSubArraySum = (nums) => {\n    let minSum = 0;\n    let curSum = 0;\n    for (const n of nums) {\n        curSum = Math.min(curSum + n, 0);\n        minSum = Math.min(curSum, minSum);\n    }\n    if (minSum === 0) {\n        minSum = Math.min(...nums);\n    }\n    return minSum;\n}\n",
            "export const maxFill = (grid, capacity) => {\n    return grid.reduce((sum, arr) => sum + Math.ceil(arr.reduce((sum, e) => sum + e, 0) / capacity), 0);\n}\n",
            "export const countOnes = (num) => {\n    let count = 0;\n    let num = num;\n    while (num > 0) {\n        if (num & 1 === 1) {\n            count += 1;\n        }\n        num >>= 1;\n    }\n    return count;\n}\nexport const sortArray = (arr) => {\n    const arr = arr.slice();\n    arr.sort((a, b) => {\n        const aCount = countOnes(a);\n        const bCount = countOnes(b);\n        if (aCount === bCount) {\n            return a - b;\n        } else {\n            return aCount - bCount;\n        }\n    });\n    return arr;\n}\n",
            "export const selectWords = (s, n) => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = s.split(\" \").filter(w => w.length > 0);\n    return words.filter(w => [...w].filter(c => c.toLowerCase() in consonants).length === n);\n}\n",
            "export const getClosestVowel = (word) => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i >= 1; i--) {\n        if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "export const matchParens = (lst) => {\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    if (check(s1) || check(s2)) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction check(s) {\n    let depth = 0;\n    for (const ch of s) {\n        if (ch === \"(\") {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const maximum = (arr, k) => {\n    if (k === 0) {\n        return [];\n    }\n    return arr.sort((a, b) => b - a).slice(-k);\n}\n",
            "export const solution = (lst) => {\n    return lst.reduce((acc, x, i) => {\n        if (i % 2 === 0 && x % 2 !== 0) {\n            return acc + x;\n        }\n        return acc;\n    }, 0);\n}\n",
            "export const addElements = (arr, k) => {\n    return arr.slice(0, k).filter(n => n.toString().length <= 2).reduce((a, b) => a + b, 0);\n}\n",
            "export const getOddCollatz = (n) => {\n    const collatz = [1];\n    while (n !== 1) {\n        if (n % 2 !== 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = Math.floor(n / 2);\n        }\n    }\n    return collatz.sort((a, b) => a - b);\n}\n",
            "export const validDate = (date) => {\n    if (date.length !== 10 || date[2] !== \"-\" || date[5] !== \"-\") {\n        return false;\n    }\n    const m = parseInt(date.substring(0, 2));\n    const d = parseInt(date.substring(3, 5));\n    if (m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31) {\n        return true;\n    }\n    if (m in [4, 6, 9, 11] && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m === 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "export const splitWords = (txt) => {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [\n            String(\n                [...txt].filter((c) => c.toLowerCase() && c.charCodeAt(0) % 2 === 0).length\n            ),\n        ];\n    }\n};\n",
            "export const isSorted = (lst) => {\n    if (!lst.slice(1).every((e, i) => e >= lst[i])) {\n        return false;\n    }\n    const freq = new Map();\n    for (const i of lst) {\n        freq.set(i, (freq.get(i) || 0) + 1);\n    }\n    const maxFreq = Math.max(...freq.values());\n    return maxFreq <= 2;\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const intersection = (interval1, interval2) => {\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n}\n",
            "export const prodSigns = (arr) => {\n    if (!arr.length) {\n        return null;\n    }\n    if (arr.includes(0)) {\n        return 0;\n    }\n    const sign = arr.filter(n => n < 0).length % 2 === 1 ? -1 : 1;\n    return sign * arr.map(Math.abs).reduce((a, b) => a + b);\n}\n",
            "export const minPath = (grid, k) => {\n    const n = grid.length;\n    let minVal = n * n + 1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                const temp = [];\n                if (i !== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j !== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i !== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j !== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                minVal = Math.min(...temp);\n            }\n        }\n    }\n    const result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(1);\n    }\n    return result;\n}\n",
            "export const tri = (n) => {\n    if (n === 0) {\n        return [1];\n    }\n    let seq = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(Math.floor(i / 2) + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + Math.floor((i + 3) / 2));\n        }\n    }\n    return seq;\n}\n",
            "export const digits = (n) => {\n    const odds = [...n.toString()].map(d => parseInt(d)).filter(d => d % 2 === 1);\n    return odds.reduce((x, y) => x * y, 1) || 0;\n}\n",
            "export const isNested = (s) => {\n    const openIdx = [];\n    const closeIdx = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === \"[\") {\n            openIdx.push(i);\n        } else if (s[i] === \"]\") {\n            closeIdx.push(i);\n        }\n    }\n    closeIdx.reverse();\n    let cnt = 0;\n    let i = 0;\n    const l = closeIdx.length;\n    for (const idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "export const sumSquares = (lst) => {\n    let result = 0;\n    for (const n of lst) {\n        result += Math.ceil(n) ** 2;\n    }\n    return result;\n}\n",
            "export const checkIfLastCharIsALetter = (txt) => {\n    if (!txt) {\n        return false;\n    }\n    const last = txt.substring(txt.lastIndexOf(\" \") + 1);\n    return last.length === 1 && last[0].isalpha();\n}\n",
            "export const canArrange = (arr) => {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    const idx = arr.map((e, i) => i).filter((i) => arr[i] < arr[i - 1]);\n    return Math.max(...idx, -1);\n}\n",
            "export const largestSmallestIntegers = (lst) => {\n    const neg = lst.filter((i) => i < 0);\n    const pos = lst.filter((i) => i > 0);\n    const maxNeg = Math.max(...neg);\n    const minPos = Math.min(...pos);\n    return [maxNeg, minPos];\n}\n",
            "export const compareOne = (a, b) => {\n    if (isString(a)) {\n        a = parseFloat(a.replace(\",\", \".\"));\n    }\n    if (isNumber(a)) {\n        a = a.valueOf();\n    }\n    if (isString(b)) {\n        b = parseFloat(b.replace(\",\", \".\"));\n    }\n    if (isNumber(b)) {\n        b = b.valueOf();\n    }\n    if (a === b) {\n        return null;\n    }\n    if (a > b) {\n        return a;\n    }\n    return b;\n}\n",
            "export const isEqualToSumEven = (n) => {\n    return n % 2 === 0 && n >= 8;\n}\n",
            "export const specialFactorial = (n) => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i < n + 1; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "export const fixSpaces = (txt) => {\n    return re.sub(/\\s{3,}/, \"-\", txt).replace(\" \", \"_\");\n}\n",
            "export const fileNameCheck = (fileName) => {\n    const suf = [\"txt\", \"exe\", \"dll\"];\n    const lst = fileName.split(\".\");\n    if (lst.length !== 2 || !suf.includes(lst[1]) || lst[0].length === 0 || !lst[0].charAt(0).match(/[a-zA-Z]/) || lst[0].split(\"\").filter(x => x.match(/[0-9]/)).length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "export const sumSquares = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        const e = lst[i];\n        if (i % 3 === 0) {\n            result += e * e;\n        } else if (i % 4 === 0) {\n            result += e * e * e;\n        } else {\n            result += e;\n        }\n    }\n    return result;\n}\n",
            "export const wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    return words.filter((w) => isPrime(w.length)).join(\" \");\n}\nconst isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const simplify = (x, n) => {\n    const xs = x.split(\"/\");\n    const ns = n.split(\"/\");\n    const num = parseInt(xs[0]) * parseInt(ns[0]);\n    const den = parseInt(xs[1]) * parseInt(ns[1]);\n    return num % den === 0;\n}\n",
            "export const orderByPoints = (nums) => {\n    return nums.sort((a, b) => {\n        const sumA = a < 0 ? a.toString().slice(0, 2) * 2 + digitsSum(Math.abs(a)) : digitsSum(a);\n        const sumB = b < 0 ? b.toString().slice(0, 2) * 2 + digitsSum(Math.abs(b)) : digitsSum(b);\n        return sumA - sumB;\n    });\n}\n",
            "export const specialFilter = (nums) => {\n    const odds = \"13579\";\n    return nums.filter(n => n > 10 && n % 2 === 1 && odds.includes(n.toString()[0])).length;\n}\n",
            "export const getMaxTriples = (n) => {\n    const c = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        const a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}\n",
            "export const bf = (planet1, planet2) => {\n    const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.includes(planet1) || !names.includes(planet2)) {\n        return [];\n    }\n    let l = names.indexOf(planet1);\n    let r = names.indexOf(planet2);\n    if (l > r) {\n        [l, r] = [r, l];\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n}\n",
            "export const sortedListSum = (lst) => {\n    const result = [];\n    for (const s of lst) {\n        if (s.length % 2 === 0) {\n            result.push(s);\n        }\n    }\n    result.sort((a, b) => {\n        if (a.length === b.length) {\n            return a.localeCompare(b);\n        } else {\n            return a.length - b.length;\n        }\n    });\n    return result;\n}\n",
            "export const xOrY = (n, x, y) => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "export const doubleTheDifference = (lst) => {\n    return lst.reduce((acc, n) => {\n        if (n >= 0 && n % 2 === 1) {\n            return acc + n * n;\n        }\n        return acc;\n    }, 0);\n}\n",
            "export const compare = (game, guess) => {\n    return game.map((x, i) => Math.abs(x - guess[i]));\n}\n",
            "export const strongestExtension = (className, extensions) => {\n    let maxS = Number.NEGATIVE_INFINITY;\n    let maxExt = \"\";\n    for (const ext of extensions) {\n        let upper = 0;\n        let lower = 0;\n        for (const c of ext) {\n            if (c.toUpperCase() === c) {\n                upper += 1;\n            } else if (c.toLowerCase() === c) {\n                lower += 1;\n            }\n        }\n        const s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return `${className}.${maxExt}`;\n}\n",
            "export const cycpatternCheck = (a, b) => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; i++) {\n        if (b.slice(i) + b.slice(0, i) in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const evenOddCount = (num) => {\n    const ds = num.toString().split(\"\");\n    const even = ds.filter(d => parseInt(d) % 2 === 0).length;\n    return [even, ds.length - even];\n}\n",
            "export const intToMiniRoman = (num) => {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    const res = [];\n    for (let i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.push(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join(\"\");\n}\n",
            "export const rightAngleTriangle = (a, b, c) => {\n    const s = [a, b, c].sort((a, b) => a - b);\n    return s[0] * s[0] + s[1] * s[1] === s[2] * s[2];\n}\n",
            "export const findMax = (words) => {\n    let maxCnt = 0;\n    let maxW = \"\";\n    for (const w of words) {\n        const cnt = new Set(w).size;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt === maxCnt) {\n            maxW = Math.min(maxW, w);\n        }\n    }\n    return maxW;\n}\n",
            "export const eat = (num, need, remaining) => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "export const doAlgebra = (operators, operands) => {\n    const ops = operators.slice();\n    const nums = operands.slice();\n    let i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] === \"**\") {\n            nums[i] = Math.pow(nums[i], nums[i + 1]);\n            nums.pop(i + 1);\n            ops.pop(i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        }\n        else if (ops[i] === \"//\") {\n            nums[i] = Math.floor(nums[i] / nums[i + 1]);\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        }\n        else if (ops[i] === \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "export const solve = (s) => {\n    if (!s.match(/[a-zA-Z]/)) {\n        return s.split(\"\").reverse().join(\"\");\n    }\n    const result = [];\n    for (const ch of s) {\n        if (!ch.match(/[a-zA-Z]/)) {\n            result.push(ch);\n        } else if (ch.toUpperCase() === ch) {\n            result.push(ch.toLowerCase());\n        } else {\n            result.push(ch.toUpperCase());\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const stringToMd5 = (txt) => {\n    if (txt.length === 0) {\n        return null;\n    }\n    const md5_hash = crypto.createHash(\"md5\");\n    const txt_bytes = Buffer.from(txt);\n    md5_hash.update(txt_bytes);\n    const md5_encoded = md5_hash.digest();\n    const md5_encoded = md5_encoded.toString(\"hex\");\n    return md5_encoded;\n}\n",
            "export const generateIntegers = (a, b) => {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n    return Array.from({ length: upper - lower + 1 }, (_, i) => lower + i * 2);\n}\n"
        ],
        "kotlin": [
            "fun hasCloseElements(numbers: List<Double>, threshold: Double): Boolean {\n    for (i in 0 until numbers.size) {\n        for (j in (i + 1) until numbers.size) {\n            if (numbers[i] - numbers[j].absoluteValue < threshold) {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "fun separateParenGroups(parenString: String): List<String> {\n    val groups = mutableListOf<String>()\n    val stk = mutableListOf<Char>()\n    var currentGroup = \"\"\n    val parens = parenString.replace(\" \", \"\")\n    for (ch in parens) {\n        if (ch == '(') {\n            stk.add(ch)\n            currentGroup += ch\n        } else if (ch == ')') {\n            stk.removeLast()\n            currentGroup += ch\n            if (stk.isEmpty()) {\n                groups.add(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "fun truncateNumber(num: Double): Double {\n    return num - num.toInt()\n}\n",
            "fun belowZero(operations: List<Int>): Boolean {\n    var balance = 0\n    for (op in operations) {\n        balance += op\n        if (balance < 0) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun meanAbsoluteDeviation(numbers: List<Double>): Double {\n    val mean = numbers.sum() / numbers.size\n    val deviation = numbers.map { it - mean }.sum()\n    deviation / numbers.size\n}\n",
            "fun intersperse(numbers: List<Int>, delimiter: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    for ((i, n) in numbers.withIndex()) {\n        if (i != 0) {\n            result.add(delimiter)\n        }\n        result.add(n)\n    }\n    return result\n}\n",
            "fun parseNestedParens(parenString: String): List<Int> {\n    val result = mutableListOf<Int>()\n    val parenGroups = parenString.split(\" \")\n    for (group in parenGroups) {\n        var depth = 0\n        var maxDepth = 0\n        for (ch in group) {\n            if (ch == '(') {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if (ch == ')') {\n                depth -= 1\n            }\n        }\n        result.add(maxDepth)\n    }\n    return result\n}\n",
            "fun filterBySubstring(strs: List<String>, substring: String): List<String> {\n    return strs.filter { it.contains(substring) }\n}\n",
            "fun sumProduct(numbers: List<Int>): List<Int> {\n    val nSum = numbers.sum()\n    val nProduct = numbers.fold(1) { acc, x -> acc * x }\n    return listOf(nSum, nProduct)\n}\n",
            "fun rollingMax(numbers: List<Int>): List<Int> {\n    var maxSoFar = Int.MIN_VALUE\n    val result = mutableListOf<Int>()\n    for (num in numbers) {\n        maxSoFar = maxOf(maxSoFar, num)\n        result.add(maxSoFar)\n    }\n    return result\n}\n",
            "fun isPalindrome(s: String): Boolean {\n    return s == s.reversed()\n}\nfun makePalindrome(s: String): String {\n    if (isPalindrome(s)) {\n        return s\n    }\n    for (i in 0 until s.length) {\n        if (isPalindrome(s.substring(i))) {\n            return s + s.substring(0, i).reversed()\n        }\n    }\n    return \"\"\n}\n",
            "fun stringXor(a: String, b: String): String {\n    val result = StringBuilder()\n    for ((x, y) in a.zip(b)) {\n        if (x == y) {\n            result.append('0')\n        } else {\n            result.append('1')\n        }\n    }\n    return result.toString()\n}\n",
            "fun longest(strs: List<String>): String? {\n    if (strs.isEmpty()) {\n        return null\n    }\n    var longestS = strs[0]\n    for (s in strs) {\n        if (s.length > longestS.length) {\n            longestS = s\n        }\n    }\n    return longestS\n}\n",
            "fun greatestCommonDivisor(a: Int, b: Int): Int {\n    return if (b == 0) a else greatestCommonDivisor(b, a % b)\n}\n",
            "fun allPrefixes(s: String): List<String> {\n    val prefixes = mutableListOf<String>()\n    for (i in 0 until s.length) {\n        prefixes.add(s.substring(0, i + 1))\n    }\n    return prefixes\n}\n",
            "fun stringSequence(n: Int): String {\n    return (0..n).joinToString(\" \")\n}\n",
            "fun countDistinctCharacters(s: String): Int {\n    val set = HashSet<Char>()\n    for (c in s.toLowerCase().toCharArray()) {\n        set.add(c)\n    }\n    return set.size\n}\n",
            "fun parseMusic(musicString: String): List<Int> {\n    val durations = mapOf(\"o\" to 4, \"o|\" to 2, \".|\" to 1)\n    val notes = musicString.split(\" \")\n    return notes.map { durations[it]!! }\n}\n",
            "fun howManyTimes(s: String, substring: String): Int {\n    var times = 0\n    for (i in 0 until s.length - substring.length + 1) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "fun sortNumbers(numbers: String): String {\n    val numDict = HashMap<String, Int>()\n    numDict[\"zero\"] = 0\n    numDict[\"one\"] = 1\n    numDict[\"two\"] = 2\n    numDict[\"three\"] = 3\n    numDict[\"four\"] = 4\n    numDict[\"five\"] = 5\n    numDict[\"six\"] = 6\n    numDict[\"seven\"] = 7\n    numDict[\"eight\"] = 8\n    numDict[\"nine\"] = 9\n    val numList = mutableListOf<String>()\n    for (word in numbers.split(\" \")) {\n        if (numDict.containsKey(word)) {\n            numList.add(word)\n        }\n    }\n    numList.sortBy { a, b -> numDict[a].compareTo(numDict[b]) }\n    return numList.joinToString(\" \")\n}\n",
            "fun findClosestElements(numbers: List<Double>): List<Double> {\n    val sortedNumbers = numbers.sorted()\n    var minDiff = Double.POSITIVE_INFINITY\n    var closestPair = mutableListOf<Double>()\n    for (i in 1 until sortedNumbers.size) {\n        val diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if (diff < minDiff) {\n            minDiff = diff\n            closestPair = mutableListOf(sortedNumbers[i - 1], sortedNumbers[i])\n        }\n    }\n    return closestPair\n}\n",
            "fun rescaleToUnit(numbers: List<Double>): List<Double> {\n    val minNum = numbers.min() ?: 0.0\n    val maxNum = numbers.max() ?: 0.0\n    if (minNum == maxNum) {\n        return List(numbers.size) { 0.0 }\n    } else {\n        return numbers.map { (it - minNum) / (maxNum - minNum) }\n    }\n}\n",
            "fun filterIntegers(values: List<Any>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (v in values) {\n        if (v is Int) {\n            result.add(v)\n        }\n    }\n    return result\n}\n",
            "fun strLength(s: String): Int {\n    return s.length\n}\n",
            "fun largestDivisor(n: Int): Int {\n    for (i in 2..n) {\n        if (n % i == 0) {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "fun factorize(n: Int): List<Int> {\n    val factors = mutableListOf<Int>()\n    var divisor = 2\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "fun removeDuplicates(numbers: List<Int>): List<Int> {\n    val counts = HashMap<Int, Int>()\n    for (num in numbers) {\n        counts[num] = (counts[num] ?: 0) + 1\n    }\n    val res = numbers.filter { counts[it] == 1 }\n    return res\n}\n",
            "fun flipCase(s: String): String {\n    val flipped = StringBuilder()\n    for (ch in s) {\n        if (!ch.isLetter()) {\n            flipped.append(ch)\n        } else if (ch.isLowerCase()) {\n            flipped.append(ch.toUpperCase())\n        } else if (ch.isUpperCase()) {\n            flipped.append(ch.toLowerCase())\n        }\n    }\n    return flipped.toString()\n}\n",
            "fun concatenate(strs: List<String>): String {\n    var result = \"\"\n    for (s in strs) {\n        result += s\n    }\n    return result\n}\n",
            "fun filterByPrefix(strs: List<String>, prefixStr: String): List<String> {\n    val result = mutableListOf<String>()\n    for (s in strs) {\n        if (s.startsWith(prefixStr)) {\n            result.add(s)\n        }\n    }\n    return result\n}\n",
            "fun getPositive(l: List<Int>): List<Int> {\n    return l.filter { it > 0 }\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..floor(sqrt(n.toDouble())).toInt()) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun poly(xs: List<Int>, x: Double): Double {\n    var res = 0.0\n    for (i in xs.indices) {\n        res += xs[i].toDouble() * x.pow(i.toDouble())\n    }\n    res\n}\nfun findZero(xs: List<Int>): Double {\n    var x1 = 1.0\n    var x2 = -1.0\n    while (poly(xs, x1) * poly(xs, x2) > 0.0) {\n        x1 *= 2.0\n        x2 *= 2.0\n    }\n    while (x1 - x2).absoluteValue > 1e-10 {\n        val mid = (x1 + x2) / 2.0\n        if (poly(xs, mid) == 0.0) {\n            return mid\n        } else if (poly(xs, mid) * poly(xs, x1) < 0.0) {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    (x1 + x2) / 2.0\n}\n",
            "fun sortThird(l: List<Int>): List<Int> {\n    val sortedThird = l.sorted().filterIndexed { index, _ -> index % 3 == 0 }\n    return l.mapIndexed { index, element -> if (index % 3 == 0) sortedThird[index / 3] else element }\n}\n",
            "fun listUnique(l: List<Int>): List<Int> {\n    return l.toSet().toList().sorted()\n}\n",
            "fun maxElement(l: List<Int>): Int {\n    return if (l.isEmpty()) 0 else l.max()!!\n}\n",
            "fun fizzBuzz(n: Int): Int {\n    var cnt = 0\n    for (i in 1..n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString().count { it == '7' }\n        }\n    }\n    return cnt\n}\n",
            "fun sortEven(l: List<Int>): List<Int> {\n    val sortedEven = l.filterIndexed { i, _ -> i % 2 == 0 }.sorted()\n    return l.mapIndexed { i, e -> if (i % 2 == 0) sortedEven[i / 2] else e }\n}\n",
            "fun encodeCyclic(s: String): String {\n    var result = \"\"\n    for (i in 0..s.length - 1 step 3) {\n        if (i + 3 > s.length) {\n            result += s.substring(i)\n        } else {\n            result += s.substring(i + 1, i + 3)\n            result += s.substring(i, i + 1)\n        }\n    }\n    return result\n}\nfun decodeCyclic(s: String): String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2..Math.sqrt(n.toDouble()).toInt() + 1) {\n        if (n % i == 0) return false\n    }\n    return true\n}\nfun primeFib(n: Int): Int {\n    var f = intArrayOf(0, 1)\n    var cnt = 0\n    while (cnt < n) {\n        f = intArrayOf(f[1], f[0] + f[1])\n        if (isPrime(f[1])) cnt += 1\n    }\n    return f[1]\n}\n",
            "fun triplesSumToZero(l: List<Int>): Boolean {\n    for (i in 0 until l.size) {\n        for (j in (i + 1) until l.size) {\n            for (k in (j + 1) until l.size) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "fun carRaceCollision(n: Int): Int {\n    return n.pow(2)\n}\n",
            "fun incrList(l: List<Int>): List<Int> {\n    return l.map { it + 1 }\n}\n",
            "fun pairsSumToZero(l: List<Int>): Boolean {\n    val seen = HashSet<Int>()\n    for (num in l) {\n        if (seen.contains(-num)) {\n            return true\n        }\n        seen.add(num)\n    }\n    return false\n}\n",
            "fun changeBase(x: Int, bas: Int): String {\n    if (x == 0) return \"0\"\n    val digits = mutableListOf<String>()\n    while (x > 0) {\n        digits.add(x % bas.toString())\n        x /= bas\n    }\n    return digits.reversed().joinToString(\"\")\n}\n",
            "fun triangleArea(a: Int, h: Int): Double {\n    return (a * h).toDouble() / 2.0\n}\n",
            "fun fib4(n: Int): Int {\n    val fib = intArrayOf(0, 0, 2, 0)\n    for (i in 4..n) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3]\n    }\n    return fib[n % 4]\n}\n",
            "fun median(l: List<Double>): Double {\n    val sl = l.sorted()\n    return if (sl.size % 2 != 0) {\n        sl[sl.size / 2]\n    } else {\n        (sl[sl.size / 2] + sl[sl.size / 2 - 1]) / 2.0\n    }\n}\n",
            "fun isPalindrome(txt: String): Boolean {\n    return txt == txt.reversed()\n}\n",
            "fun modp(n: Int, p: Int): Int {\n    var ret = 1\n    for (i in 0 until n) {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "fun encodeShift(s: String): String {\n    val result = StringBuilder()\n    for (ch in s) {\n        val chNum = ch.toInt()\n        val shiftedChNum = (chNum - 97 + 5) % 26 + 97\n        result.append(shiftedChNum.toChar())\n    }\n    return result.toString()\n}\nfun decodeShift(s: String): String {\n    val result = StringBuilder()\n    for (ch in s) {\n        val chNum = ch.toInt()\n        val shiftedChNum = (chNum - 97 + 21) % 26 + 97\n        result.append(shiftedChNum.toChar())\n    }\n    return result.toString()\n}\n",
            "fun removeVowels(txt: String): String {\n    val vowels = \"aeiouAEIOU\"\n    val result = StringBuilder()\n    for (char in txt) {\n        if (!vowels.contains(char)) {\n            result.append(char)\n        }\n    }\n    return result.toString()\n}\n",
            "fun belowThreshold(l: List<Int>, t: Int): Boolean {\n    return l.all { it < t }\n}\n",
            "fun add(x: Int, y: Int): Int {\n    return x + y\n}\n",
            "fun sameChars(s0: String, s1: String): Boolean {\n    return s0.toSet() == s1.toSet()\n}\n",
            "fun fib(n: Int): Int {\n    return if (n <= 1) n else fib(n - 1) + fib(n - 2)\n}\n",
            "fun correctBracketing(brackets: String): Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == '<') {\n            depth += 1\n        } else if (b == '>') {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "fun monotonic(l: List<Int>): Boolean {\n    val diff = l.windowed(2, 1).map { it[1] - it[0] }\n    return diff.all { it <= 0 } || diff.all { it >= 0 }\n}\n",
            "fun common(l1: List<Int>, l2: List<Int>): List<Int> {\n    return l1.intersect(l2).sorted()\n}\n",
            "fun largestPrimeFactor(n: Int): Int {\n    var i = 2\n    while (i * i <= n) {\n        if (n % i != 0) {\n            i++\n        } else {\n            n /= i\n        }\n    }\n    return n\n}\n",
            "fun sumToN(n: Int): Int {\n    return (n * (n + 1)) / 2\n}\n",
            "fun correctBracketing(brackets: String): Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == '(') {\n            depth += 1\n        } else if (b == ')') {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "fun derivative(xs: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in 1 until xs.size) {\n        result.add(xs[i] * i)\n    }\n    return result\n}\n",
            "fun fibfib(n: Int): Int {\n    if (n <= 1) {\n        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 1\n    while (n > 2) {\n        a = b\n        b = c\n        c = a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "fun vowelsCount(s: String): Int {\n    val vowels = \"aeiou\"\n    var cnt = 0\n    for (i in 0 until s.length) {\n        if (s[i].toLowerCase() in vowels || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "fun circularShift(x: Int, shift: Int): String {\n    val xStr = x.toString()\n    return if (shift > xStr.length) {\n        xStr.reversed()\n    } else {\n        xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift)\n    }\n}\n",
            "fun digitSum(s: String): Int {\n    return s.filter { it.isUpperCase() }.sumBy { it.toInt() }\n}\n",
            "fun fruitDistribution(s: String, n: Int): Int {\n    val words = s.split(\" \")\n    val apples = words[words.indexOf(\"apples\") - 1].toInt()\n    val oranges = words[words.indexOf(\"oranges\") - 1].toInt()\n    return n - apples - oranges\n}\n",
            "fun pluck(arr: List<Int>): List<Int> {\n    val evens = mutableListOf<Int>()\n    for (n in arr) {\n        if (n % 2 == 0) {\n            evens.add(n)\n        }\n    }\n    if (evens.isEmpty()) {\n        return emptyList()\n    }\n    val minEven = evens.min()!!\n    return listOf(minEven, arr.indexOf(minEven))\n}\n",
            "fun search(lst: List<Int>): Int {\n    val freqs = mutableMapOf<Int, Int>()\n    for (n in lst) {\n        freqs[n] = (freqs[n] ?: 0) + 1\n    }\n    val goodVals: List<Int> = freqs.filter { (k, v) -> v >= k }.map { (k, _) -> k }\n    return goodVals.maxOrNull() ?: -1\n}\n",
            "fun strangeSortList(lst: List<Int>): List<Int> {\n    val sl = lst.sorted()\n    val result = mutableListOf<Int>()\n    var left = 0\n    var right = sl.size - 1\n    while (left <= right) {\n        result.add(sl[left])\n        left += 1\n        if (left <= right) {\n            result.add(sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "fun triangleArea(a: Int, b: Int, c: Int): Double {\n    if (a + b > c && a + c > b && b + c > a) {\n        val s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        return -1.0\n    }\n}\n",
            "fun willItFly(q: List<Int>, w: Int): Boolean {\n    if (q.isEmpty()) {\n        return false\n    }\n    val isPalin = q.indices.all { q[it] == q[q.size - it - 1] }\n    val total = q.sum()\n    return isPalin && total <= w\n}\n",
            "fun smallestChange(arr: List<Int>): Int {\n    var ans = 0\n    for (i in 0 until arr.size / 2) {\n        if (arr[i] != arr[arr.size - i - 1]) {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "fun totalMatch(lst1: List<String>, lst2: List<String>): List<String> {\n    val cnt1 = lst1.sumBy { it.length }\n    val cnt2 = lst2.sumBy { it.length }\n    return if (cnt1 <= cnt2) lst1 else lst2\n}\n",
            "fun isMultiplyPrime(a: Int): Boolean {\n    if (a < 2) {\n        return false\n    }\n    for (i in 2..floor(sqrt(a.toDouble())).toInt()) {\n        if (a % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun isSimplePower(x: Int, n: Int): Boolean {\n    if (n < 2) {\n        return x == n\n    }\n    var tmp = 1\n    while (tmp < x) {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "fun isCube(a: Int): Boolean {\n    val a = abs(a)\n    val root = round(pow(a.toDouble(), 1.0 / 3.0)).toInt()\n    return root * root * root == a\n}\n",
            "fun hexKey(num: String): Int {\n    return num.count { it in \"2357BD\" }\n}\n",
            "fun decimalToBinary(dec: Int): String {\n    return \"db${dec.toString(2)}db\"\n}\n",
            "fun isHappy(s: String): Boolean {\n    if (s.length < 3) {\n        return false\n    }\n    for (i in 0 until s.length - 2) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun numericalLetterGrade(grades: List<Double>): List<String> {\n    val result = mutableListOf<String>()\n    for (g in grades) {\n        if (g == 4.0) {\n            result.add(\"A+\")\n        } else if (g > 3.7) {\n            result.add(\"A\")\n        } else if (g > 3.3) {\n            result.add(\"A-\")\n        } else if (g > 3.0) {\n            result.add(\"B+\")\n        } else if (g > 2.7) {\n            result.add(\"B\")\n        } else if (g > 2.3) {\n            result.add(\"B-\")\n        } else if (g > 2.0) {\n            result.add(\"C+\")\n        } else if (g > 1.7) {\n            result.add(\"C\")\n        } else if (g > 1.3) {\n            result.add(\"C-\")\n        } else if (g > 1.0) {\n            result.add(\"D+\")\n        } else if (g > 0.7) {\n            result.add(\"D\")\n        } else if (g > 0.0) {\n            result.add(\"D-\")\n        } else {\n            result.add(\"E\")\n        }\n    }\n    return result\n}\n",
            "fun primeLength(s: String): Boolean {\n    val length = s.length\n    if (length < 2) {\n        return false\n    }\n    for (i in 2..floor(sqrt(length.toDouble())).toInt()) {\n        if (length % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun startsOneEnds(n: Int): Int {\n    return if (n == 1) 1 else 2 * 9 * (10.0.pow(n - 2).toInt())\n}\n",
            "fun solve(n: Int): String {\n    val digitsSum = n.toString().map { it.digitToInt() }.sum()\n    return digitsSum.toString(2)\n}\n",
            "fun add(lst: List<Int>): Int {\n    return lst.filterIndexed { i, x -> i % 2 == 1 && x % 2 == 0 }.sum()\n}\n",
            "fun antiShuffle(s: String): String {\n    val words = s.split(\" \").map { word ->\n        val chars = word.toCharArray()\n        chars.sort()\n        chars.joinToString(\"\")\n    }\n    return words.joinToString(\" \")\n}\n",
            "fun getRow(lst: List<List<Int>>, x: Int): List<List<Int>> {\n    val coords = mutableListOf<List<Int>>()\n    for (i in lst.indices) {\n        for (j in lst[i].indices) {\n            if (lst[i][j] == x) {\n                coords.add(listOf(i.toInt(), j.toInt()))\n            }\n        }\n    }\n    coords.sortBy { a, b ->\n        a[0].compareTo(b[0]).then(a[1].compareTo(b[1]).reversed()\n    }\n    return coords\n}\n",
            "fun sortArray(arr: List<Int>): List<Int> {\n    if (arr.isEmpty()) {\n        return emptyList()\n    }\n    if ((arr[0] + arr.last()) % 2 == 0) {\n        return arr.sortedDescending()\n    } else {\n        return arr.sorted()\n    }\n}\n",
            "fun encrypt(s: String): String {\n    val result = StringBuilder()\n    for (ch in s) {\n        var shifted = ch.toInt() + 4\n        if (shifted > 'z'.toInt()) {\n            shifted -= 26\n        }\n        result.append(shifted.toChar())\n    }\n    return result.toString()\n}\n",
            "fun nextSmallest(lst: List<Int>): Int? {\n    val sl = lst.sorted().distinct()\n    return if (sl.size < 2) null else sl[1]\n}\n",
            "fun isBored(s: String): Int {\n    val re = Regex(\"[.!?]\\\\s*\")\n    val sentences = re.split(s)\n    return sentences.filter { sentence -> sentence.length >= 2 && sentence.substring(0, 2) == \"I \" }.count()\n}\n",
            "fun anyInt(x: Any, y: Any, z: Any): Boolean {\n    if (x is Int && y is Int && z is Int) {\n        return x + y == z || x + z == y || y + z == x\n    }\n    return false\n}\n",
            "fun encode(message: String): String {\n    val vowels = \"aeiouAEIOU\"\n    val result = mutableListOf<Char>()\n    for (ch in message) {\n        if (ch.isLetter()) {\n            val ch1 = if (ch.isLowerCase()) ch.uppercaseChar() else ch.lowercaseChar()\n            if (ch1 in vowels) {\n                result.add(ch1.inc())\n            } else {\n                result.add(ch1)\n            }\n        } else {\n            result.add(ch)\n        }\n    }\n    return result.joinToString(\"\")\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..floor(sqrt(n.toDouble())).toInt()) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\nfun skjkasdkd(lst: List<Int>): Int {\n    val primes = lst.filter { isPrime(it) }\n    if (primes.isEmpty()) {\n        return 0\n    }\n    val largest = primes.max()!!.toString()\n    return largest.sumBy { it.digitToInt() }\n}\n",
            "fun checkDictCase(d: Map<String,String>): Boolean {\n    if (d.isEmpty()) {\n        return false\n    }\n    return d.keys.all { c -> c.isLowerCase() } || d.keys.all { c -> c.isUpperCase() }\n}\n",
            "fun countUpTo(n: Int): List<Int> {\n    val primes = mutableListOf<Int>()\n    for (num in 2..n) {\n        if (primes.all { num % it != 0 }) {\n            primes.add(num)\n        }\n    }\n    return primes\n}\n",
            "fun multiply(a: Int, b: Int): Int {\n    return (a.absoluteValue % 10) * (b.absoluteValue % 10)\n}\n",
            "fun countUpper(s: String): Int {\n    val vowels = \"AEIOU\"\n    var result = 0\n    for ((i, c) in s.chars().withIndex()) {\n        if (i % 2 == 0 && vowels.contains(c)) {\n            result += 1\n        }\n    }\n    return result\n}\n",
            "fun closestInteger(value: String): Int {\n    val num = value.toDouble()\n    return if (num >= 0.0) {\n        (num + 0.5).toInt()\n    } else {\n        (num - 0.5).toInt()\n    }\n}\n",
            "fun makeAPile(n: Int): List<Int> {\n    return (0..n).map { n + 2 * it }\n}\n",
            "fun wordsString(s: String): List<String> {\n    val re = Regex(\"[, ]\")\n    val result = mutableListOf<String>()\n    for (w in re.split(s)) {\n        if (w.isNotEmpty()) {\n            result.add(w)\n        }\n    }\n    return result\n}\n",
            "fun chooseNum(x: Int, y: Int): Int {\n    if (x > y) {\n        return -1\n    }\n    if (y % 2 == 0) {\n        return y\n    }\n    if (x != y) {\n        return y - 1\n    }\n    -1\n}\n",
            "fun roundedAvg(n: Int, m: Int): String? {\n    if (n > m) return null\n    val rAvg = (m + n) / 2 + 0.5\n    return rAvg.toInt().toString(2)\n}\n",
            "fun allDigitsOdd(s: String): Boolean {\n    return s.all { it.digitToInt() % 2 != 0 }\n}\nfun uniqueDigits(x: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (num in x) {\n        if (allDigitsOdd(num.toString())) {\n            result.add(num)\n        }\n    }\n    result.sort()\n    return result\n}\n",
            "fun byLength(arr: List<Int>): List<String> {\n    val digitNames = listOf(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    val sortedArr = arr.filter { 1 <= it && it <= 9 }.sortedDescending()\n    return sortedArr.map { digitNames[it - 1] }\n}\n",
            "fun f(n: Int): List<Int> {\n    val nums = (1..n).toList()\n    return nums.mapIndexed { i, _ ->\n        if (i % 2 != 0) nums.take(i).sum() else nums.take(i).reduce { x, y -> x * y }\n    }\n}\n",
            "fun isPalindrome(txt: String): Boolean {\n    return txt == txt.reversed()\n}\nfun evenOddPalindrome(n: Int): List<Int> {\n    val cnt = mutableListOf(0, 0)\n    for (i in 1..n) {\n        if (isPalindrome(i.toString())) {\n            cnt[(i % 2) as Int] += 1\n        }\n    }\n    return cnt\n}\n",
            "fun digitsSum(n: Int): Int {\n    val nStr = n.toString()\n    return if (n >= 0) {\n        nStr.map { it.toString().toInt() }.sum()\n    } else {\n        nStr.substring(0, 2).toInt() * 2 + digitsSum(abs(n))\n    }\n}\nfun countNums(arr: List<Int>): Int {\n    return arr.filter { digitsSum(it) > 0 }.size\n}\n",
            "fun moveOneBall(arr: List<Int>): Boolean {\n    if (arr.isEmpty()) {\n        return true\n    }\n    val sortedArr = arr.sorted()\n    for (i in 0 until arr.size) {\n        if (arr.subList(i, arr.size) == sortedArr.subList(0, arr.size - i) && arr.subList(0, i) == sortedArr.subList(arr.size - i, arr.size)) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun canExchange(lst1: List<Int>, lst2: List<Int>): String {\n    val oddCnt = lst1.filter { it % 2 != 0 }.count()\n    val evenCnt = lst2.filter { it % 2 == 0 }.count()\n    return if (evenCnt >= oddCnt) \"YES\" else \"NO\"\n}\n",
            "fun histogram(test: String): Map<String, Int> {\n    val freq = mutableMapOf<String, Int>()\n    val words = test.split(\" \").filter { it.isNotEmpty() }\n    for (w in words) {\n        freq[w] = (freq[w] ?: 0) + 1\n    }\n    val result = mutableMapOf<String, Int>()\n    if (freq.isNotEmpty()) {\n        val maxFreq = freq.values.max()!!\n        for ((k, v) in freq) {\n            if (v == maxFreq) {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "fun reverseDelete(s: String, c: String): List<String> {\n    val s1 = s.filter { !c.contains(it) }\n    return listOf(s1, if (s1 == s1.reversed()) \"yes\" else \"no\")\n}\n",
            "fun oddCount(lst: List<String>): List<String> {\n    val result = mutableListOf<String>()\n    for (num in lst) {\n        val n = num.sumBy { it.toInt() % 2 == 1 }\n        val rs = \"the number of odd elements in the string i of the input.\"\n        result.add(rs.replace(\"i\", n.toString()))\n    }\n    return result\n}\n",
            "fun minSubArraySum(nums: List<Int>): Int {\n    var minSum = 0\n    var curSum = 0\n    for (n in nums) {\n        curSum = minOf(curSum + n, 0)\n        minSum = minOf(curSum, minSum)\n    }\n    if (minSum == 0) {\n        minSum = nums.minOrNull() ?: 0\n    }\n    return minSum\n}\n",
            "fun maxFill(grid: List<List<Int>>, capacity: Int): Int {\n    return grid.map { arr -> (arr.sum() / capacity).toInt().coerceAtLeast(1) }.sum()\n}\n",
            "fun countOnes(num: Int): Int {\n    var count = 0\n    var num = num\n    while (num > 0) {\n        if (num and 1 == 1) {\n            count++\n        }\n        num = num shr 1\n    }\n    return count\n}\nfun sortArray(arr: List<Int>): List<Int> {\n    val arr = arr.toMutableList()\n    arr.sortWith(Comparator { a, b ->\n        val aCount = countOnes(a)\n        val bCount = countOnes(b)\n        if (aCount == bCount) {\n            a.compareTo(b)\n        } else {\n            aCount.compareTo(bCount)\n        }\n    })\n    return arr\n}\n",
            "fun selectWords(s: String, n: Int): List<String> {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\"\n    val words = s.split(\" \").filter { it.isNotEmpty() }\n    return words.filter { it.count { c -> c.lowercaseChar() in consonants } == n }\n}\n",
            "fun getClosestVowel(word: String): String {\n    val vowels = \"aeiouAEIOU\"\n    for (i in (1..word.length - 1).reversed()) {\n        if (vowels.contains(word[i]) && !vowels.contains(word[i - 1]) && !vowels.contains(word[i + 1])) {\n            return word[i].toString()\n        }\n    }\n    return \"\"\n}\n",
            "fun matchParens(lst: List<String>): String {\n    val s1 = lst[0] + lst[1]\n    val s2 = lst[1] + lst[0]\n    return if (check(s1) || check(s2)) \"Yes\" else \"No\"\n}\nfun check(s: String): Boolean {\n    var depth = 0\n    for (ch in s) {\n        if (ch == '(') {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "fun maximum(arr: List<Int>, k: Int): List<Int> {\n    if (k == 0) {\n        return listOf()\n    }\n    return arr.sorted().takeLast(k)\n}\n",
            "fun solution(lst: List<Int>): Int {\n    return lst.filterIndexed { i, x -> i % 2 == 0 && x % 2 != 0 }.sum()\n}\n",
            "fun addElements(arr: List<Int>, k: Int): Int {\n    return arr.take(k).filter { it.toString().length <= 2 }.sum()\n}\n",
            "fun getOddCollatz(n: Int): List<Int> {\n    val collatz = mutableListOf(1)\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.add(n)\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    return collatz.sorted()\n}\n",
            "fun validDate(date: String): Boolean {\n    if (date.length != 10 || date[2] != '-' || date[5] != '-') {\n        return false\n    }\n    val m = date.substring(0, 2).toInt()\n    val d = date.substring(3, 5).toInt()\n    if (m in listOf(1, 3, 5, 7, 8, 10, 12) && d in 1..31) {\n        return true\n    }\n    if (m in listOf(4, 6, 9, 11) && d in 1..30) {\n        return true\n    }\n    if (m == 2 && d in 1..29) {\n        return true\n    }\n    return false\n}\n",
            "fun splitWords(txt: String): List<String> {\n    return if (\" \" in txt) {\n        txt.split(\" \")\n    } else if (\",\" in txt) {\n        txt.split(\",\")\n    } else {\n        listOf(txt.filter { c -> c.isLowerCase() && c.toInt() % 2 == 0 }.length.toString())\n    }\n}\n",
            "fun isSorted(lst: List<Int>): Boolean {\n    if (!lst.windowed(2).all { it[0] <= it[1] }) {\n        return false\n    }\n    val freq = mutableMapOf<Int, Int>()\n    for (i in lst) {\n        freq[i] = (freq[i] ?: 0) + 1\n    }\n    val maxFreq = freq.values.maxOrNull() ?: 0\n    maxFreq <= 2\n}\n",
            "fun intersection(interval1: List<Int>, interval2: List<Int>): String {\n    val l = maxOf(interval1[0], interval2[0])\n    val r = minOf(interval1[1], interval2[1])\n    val length = r - l\n    return if (length > 0 && isPrime(length)) \"YES\" else \"NO\"\n}\n",
            "fun prodSigns(arr: List<Int>): Int? {\n    if (arr.isEmpty()) {\n        return null\n    }\n    if (arr.contains(0)) {\n        return 0\n    }\n    val sign = if (arr.count { it < 0 } % 2 == 1) -1 else 1\n    return sign * arr.map { abs(it) }.sum()\n}\n",
            "fun minPath(grid: List<List<Int>>, k: Int): List<Int> {\n    val n = grid.size\n    var minVal = n * n + 1\n    for (i in 0 until n) {\n        for (j in 0 until n) {\n            if (grid[i][j] == 1) {\n                val temp = mutableListOf<Int>()\n                if (i != 0) {\n                    temp.add(grid[i - 1][j])\n                }\n                if (j != 0) {\n                    temp.add(grid[i][j - 1])\n                }\n                if (i != n - 1) {\n                    temp.add(grid[i + 1][j])\n                }\n                if (j != n - 1) {\n                    temp.add(grid[i][j + 1])\n                }\n                minVal = min(temp)\n            }\n        }\n    }\n    val result = mutableListOf<Int>()\n    for (i in 0 until k) {\n        result.add(1)\n    }\n    return result\n}\n",
            "fun tri(n: Int): List<Int> {\n    if (n == 0) {\n        return listOf(1)\n    }\n    var seq = listOf(1, 3)\n    for (i in 2..n) {\n        if (i % 2 == 0) {\n            seq = seq + (i / 2 + 1)\n        } else {\n            seq = seq + (seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "fun digits(n: Int): Int {\n    val odds = n.toString().map { it.toString().toInt() }.filter { it % 2 == 1 }\n    return odds.fold(1) { acc, i -> acc * i }\n}\n",
            "fun isNested(s: String): Boolean {\n    val openIdx = mutableListOf<Int>()\n    val closeIdx = mutableListOf<Int>()\n    for ((i, ch) in s.toCharArray().withIndex()) {\n        if (ch == '[') {\n            openIdx.add(i)\n        } else if (ch == ']') {\n            closeIdx.add(i)\n        }\n    }\n    closeIdx.reverse()\n    var cnt = 0\n    var i = 0\n    val l = closeIdx.size\n    for (idx in openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1\n            i += 1\n        }\n    }\n    cnt >= 2\n}\n",
            "fun sumSquares(lst: List<Double>): Int {\n    var result = 0\n    for (n in lst) {\n        result += (n.ceil() as Int).pow(2)\n    }\n    return result\n}\n",
            "fun checkIfLastCharIsALetter(txt: String): Boolean {\n    if (txt.isEmpty()) {\n        return false\n    }\n    val last = txt.substring(txt.lastIndexOf(' ') + 1)\n    return last.length == 1 && last[0].isLetter()\n}\n",
            "fun canArrange(arr: List<Int>): Int {\n    if (arr.size <= 1) {\n        return -1\n    }\n    val idx = arr.indices.filter { arr[it] < arr[it - 1] }.maxOrNull() ?: -1\n    return idx\n}\n",
            "fun largestSmallestIntegers(lst: List<Int>): List<Int?> {\n    val neg = lst.filter { it < 0 }\n    val pos = lst.filter { it > 0 }\n    val maxNeg = neg.max()\n    val minPos = pos.min()\n    return listOf(maxNeg, minPos)\n}\n",
            "fun anyToReal(o: Any): Double {\n    return when (o) {\n        is String -> o.replace(',', '.').toDouble()\n        is Int -> o.toDouble()\n        is Float -> o\n        else -> throw RuntimeException(\"Type Error\")\n    }\n}\nfun compareOne(a: Any, b: Any): Double? {\n    val a1 = anyToReal(a)\n    val b1 = anyToReal(b)\n    return when {\n        a1 == b1 -> null\n        a1 > b1 -> a1\n        else -> b1\n    }\n}\n",
            "fun isEqualToSumEven(n: Int): Boolean {\n    return n % 2 == 0 && n >= 8\n}\n",
            "fun specialFactorial(n: Int): Int {\n    var fact = 1\n    var result = 1\n    for (i in 1..(n + 1)) {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "fun fixSpaces(txt: String): String {\n    return Pattern.compile(\"\\\\s{3,}\").matcher(txt).replaceAll(\"-\").replace(\" \", \"_\")\n}\n",
            "fun fileNameCheck(fileName: String): String {\n    val suf = listOf(\"txt\", \"exe\", \"dll\")\n    val lst = fileName.split(\".\")\n    if (lst.size != 2 || !suf.contains(lst[1]) || lst[0].length == 0 || !lst[0][0].isLetter() || lst[0].filter { it.isDigit() }.count() > 3) {\n        return \"No\"\n    }\n    \"Yes\"\n}\n",
            "fun sumSquares(lst: List<Int>): Int {\n    var result = 0\n    for ((i, e) in lst.withIndex()) {\n        if (i % 3 == 0) {\n            result += e * e\n        } else if (i % 4 == 0) {\n            result += e * e * e\n        } else {\n            result += e\n        }\n    }\n    return result\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2..sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}\nfun wordsInSentence(sentence: String): String {\n    val words = sentence.split(\" \")\n    return words.filter { isPrime(it.length) }.joinToString(\" \")\n}\n",
            "fun simplify(x: String, n: String): Boolean {\n    val xs = x.split(\"/\").toTypedArray()\n    val ns = n.split(\"/\").toTypedArray()\n    val num = xs[0].toInt() * ns[0].toInt()\n    val den = xs[1].toInt() * ns[1].toInt()\n    num % den == 0\n}\n",
            "fun digitsSum(n: Int): Int {\n    val nStr = n.toString()\n    return if (n >= 0) {\n        nStr.map { it.toString().toInt() }.sum()\n    } else {\n        nStr.substring(0, 2).toInt() * 2 + digitsSum(abs(n))\n    }\n}\nfun orderByPoints(nums: List<Int>): List<Int> {\n    return nums.sortedWith(compareBy { digitsSum(it) })\n}\n",
            "fun specialFilter(nums: List<Int>): Int {\n    val odds = \"13579\"\n    return nums.filter { n -> n > 10 && n % 2 == 1 && odds.contains(n.toString()[0]) }.size\n}\n",
            "fun getMaxTriples(n: Int): Int {\n    val c = IntArray(3)\n    for (i in 1..n) {\n        val a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n}\n",
            "fun bf(planet1: String, planet2: String): List<String> {\n    val names = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (names.indexOf(planet1) == -1 || names.indexOf(planet2) == -1) {\n        return emptyList()\n    }\n    var l = names.indexOf(planet1)\n    var r = names.indexOf(planet2)\n    if (l > r) {\n        l = r.also { r = l }\n    }\n    if (l == r) {\n        return emptyList()\n    }\n    return names.subList(l + 1, r)\n}\n",
            "fun sortedListSum(lst: List<String>): List<String> {\n    val result = mutableListOf<String>()\n    for (s in lst) {\n        if (s.length % 2 == 0) {\n            result.add(s)\n        }\n    }\n    result.sortWith(Comparator { a, b ->\n        if (a.length == b.length) {\n            a.compareTo(b)\n        } else {\n            a.length.compareTo(b.length)\n        }\n    })\n    return result\n}\n",
            "fun xOrY(n: Int, x: Int, y: Int): Int {\n    if (n < 2) {\n        return y\n    }\n    for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) {\n            return y\n        }\n    }\n    return x\n}\n",
            "fun doubleTheDifference(lst: List<Double>): Int {\n    return lst.filter { it >= 0.0 && it % 2.0 == 1.0 }.map { it * it }.sum().toInt()\n}\n",
            "fun compare(game: List<Int>, guess: List<Int>): List<Int> {\n    return game.zip(guess).map { (x, y) -> (x - y).absoluteValue }\n}\n",
            "fun strongestExtension(className: String, extensions: List<String>): String {\n    var maxS = Double.NEGATIVE_INFINITY\n    var maxExt = \"\"\n    for (ext in extensions) {\n        var upper = 0\n        var lower = 0\n        for (c in ext) {\n            if (c.isUpperCase()) {\n                upper += 1\n            } else if (c.isLowerCase()) {\n                lower += 1\n            }\n        }\n        val s = upper.toDouble() - lower.toDouble()\n        if (s > maxS) {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return \"$className.$maxExt\"\n}\n",
            "fun cycpatternCheck(a: String, b: String): Boolean {\n    if (a.length < b.length) {\n        return false\n    }\n    for (i in 0 until b.length) {\n        if (b.substring(i) + b.substring(0, i) in a) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun evenOddCount(num: Int): List<Int> {\n    val ds = num.absoluteValue.toString().toCharArray().toList()\n    val even = ds.filter { it.toString().toInt() % 2 == 0 }.count()\n    return listOf(even, ds.size - even)\n}\n",
            "fun intToMiniRoman(num: Int): String {\n    val values = listOf(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    val numerals = listOf(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    val res = mutableListOf<String>()\n    for (i in values.indices) {\n        while (num >= values[i]) {\n            res.add(numerals[i])\n            num -= values[i]\n        }\n    }\n    return res.joinToString(\"\")\n}\n",
            "fun rightAngleTriangle(a: Int, b: Int, c: Int): Boolean {\n    val s = listOf(a, b, c).sorted()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "fun findMax(words: List<String>): String {\n    var maxCnt = 0\n    var maxW = \"\"\n    for (w in words) {\n        val cnt = w.toCharArray().toSet().size\n        if (cnt > maxCnt) {\n            maxCnt = cnt\n            maxW = w\n        } else if (cnt == maxCnt) {\n            maxW = min(maxW, w)\n        }\n    }\n    return maxW\n}\n",
            "fun eat(num: Int, need: Int, remaining: Int): List<Int> {\n    return if (need <= remaining) {\n        listOf(num + need, remaining - need)\n    } else {\n        listOf(num + remaining, 0)\n    }\n}\n",
            "fun doAlgebra(operators: List<String>, operands: List<Int>): Int {\n    val ops = operators.toMutableList()\n    val nums = operands.toMutableList()\n    var i = ops.size - 1\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = Math.pow(nums[i].toDouble(), nums[i + 1].toDouble()).toInt()\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n        }\n        i -= 1\n    }\n    i = 0\n    while (i < ops.size) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] / nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while (i < ops.size) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "fun solve(s: String): String {\n    if (s.none { it.isLetter() }) {\n        return s.reversed()\n    }\n    val result = mutableListOf<Char>()\n    for (ch in s) {\n        if (!ch.isLetter()) {\n            result.add(ch)\n        } else if (ch.isUpperCase()) {\n            result.add(ch.toLowerCase())\n        } else if (ch.isLowerCase()) {\n            result.add(ch.toUpperCase())\n        }\n    }\n    return result.joinToString(\"\")\n}\n",
            "fun stringToMd5(txt: String): String? {\n    if (txt.isEmpty()) {\n        return null\n    }\n    val md5_hash = MessageDigest.getInstance(\"MD5\")\n    val txt_bytes = txt.toByteArray()\n    md5_hash.update(txt_bytes)\n    val md5_encoded = md5_hash.digest()\n    val md5_encoded = md5_encoded.joinToString(\"\") { String.format(\"%02x\", it) }\n    return md5_encoded\n}\n",
            "fun generateIntegers(a: Int, b: Int): List<Int> {\n    val lower = kotlin.math.max(2, kotlin.math.min(a, b))\n    val upper = kotlin.math.min(8, kotlin.math.max(a, b))\n    return (lower..upper).filter { it % 2 == 0 }\n}\n"
        ],
        "php": [
            "function hasCloseElements ($numbers, $threshold) {\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            if abs($numbers[$i] - $numbers[$j]) < $threshold {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "function separateParenGroups ($parenString) {\n    $groups = [];\n    $stk = [];\n    $currentGroup = \"\";\n    $parens = str_replace(\" \", \"\", $parenString);\n    for ($i = 0; $i < strlen($parens); $i++) {\n        $ch = $parens[$i];\n        if ($ch == '(') {\n            array_push($stk, $ch);\n            $currentGroup .= $ch;\n        } else if ($ch == ')') {\n            array_pop($stk);\n            $currentGroup .= $ch;\n            if (count($stk) == 0) {\n                array_push($groups, $currentGroup);\n                $currentGroup = \"\";\n            }\n        }\n    }\n    return $groups;\n}\n",
            "function truncateNumber ($num) {\n    return $num - floor($num);\n}\n",
            "function belowZero ($operations) {\n    $balance = 0;\n    foreach ($operations as $op) {\n        $balance += $op;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function meanAbsoluteDeviation ($numbers) {\n    $mean = array_sum($numbers) / count($numbers);\n    $deviation = array_sum(array_map(function ($x) use ($mean) {\n        return abs($x - $mean);\n    }, $numbers));\n    return $deviation / count($numbers);\n}\n",
            "function intersperse ($numbers, $delimiter) {\n    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        if ($i != 0) {\n            $result[] = $delimiter;\n        }\n        $result[] = $numbers[$i];\n    }\n    return $result;\n}\n",
            "function parseNestedParens ($parenString) {\n    $result = [];\n    $parenGroups = explode(\" \", $parenString);\n    foreach ($parenGroups as $group) {\n        $depth = 0;\n        $maxDepth = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            $ch = $group[$i];\n            if ($ch == '(') {\n                $depth += 1;\n                $maxDepth = max($maxDepth, $depth);\n            } else if ($ch == ')') {\n                $depth -= 1;\n            }\n        }\n        $result[] = $maxDepth;\n    }\n    return $result;\n}\n",
            "function filterBySubstring ($strs, $substring) {\n    return array_filter($strs, function ($s) use ($substring) {\n        return strpos($s, $substring) !== false;\n    });\n}\n",
            "function sumProduct ($numbers) {\n    $nSum = array_sum($numbers);\n    $nProduct = array_product($numbers);\n    return [$nSum, $nProduct];\n}\n",
            "function rollingMax ($numbers) {\n    $maxSoFar = PHP_INT_MIN;\n    $result = [];\n    foreach ($numbers as $num) {\n        $maxSoFar = max($maxSoFar, $num);\n        $result[] = $maxSoFar;\n    }\n    return $result;\n}\n",
            "function isPalindrome ($s) {\n    return $s == strrev($s);\n}\nfunction makePalindrome ($s) {\n    if (isPalindrome($s)) {\n        return $s;\n    }\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (isPalindrome(substr($s, $i))) {\n            return $s . strrev(substr($s, 0, $i));\n        }\n    }\n    return \"\";\n}\n",
            "function stringXor ($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        if ($a[$i] == $b[$i]) {\n            $result .= '0';\n        } else {\n            $result .= '1';\n        }\n    }\n    return $result;\n}\n",
            "function longest ($strs) {\n    if (empty($strs)) {\n        return null;\n    }\n    $longestS = $strs[0];\n    foreach ($strs as $s) {\n        if (strlen($s) > strlen($longestS)) {\n            $longestS = $s;\n        }\n    }\n    return $longestS;\n}\n",
            "function greatestCommonDivisor ($a, $b) {\n    return $b == 0 ? $a : greatestCommonDivisor($b, $a % $b);\n}\n",
            "function allPrefixes ($s) {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $prefixes[] = substr($s, 0, $i + 1);\n    }\n    return $prefixes;\n}\n",
            "function stringSequence ($n) {\n    return implode(' ', range(1, $n + 1));\n}\n",
            "function countDistinctCharacters ($s) {\n    $set = [];\n    foreach (str_split(strtolower($s)) as $c) {\n        $set[$c] = true;\n    }\n    return count($set);\n}\n",
            "function parseMusic ($musicString) {\n    $durations = [\n        \"o\" => 4,\n        \"o|\" => 2,\n        \".|\" => 1,\n    ];\n    $notes = explode(\" \", $musicString);\n    return array_map(function ($note) use ($durations) {\n        return $durations[$note];\n    }, $notes);\n}\n",
            "function howManyTimes ($s, $substring) {\n    $times = 0;\n    for ($i = 0; $i < strlen($s) - strlen($substring) + 1; $i++) {\n        if (substr($s, $i, strlen($substring)) == $substring) {\n            $times++;\n        }\n    }\n    return $times;\n}\n",
            "function sortNumbers ($numbers) {\n    $numDict = [\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n    ];\n    $numList = [];\n    foreach (explode(\" \", $numbers) as $word) {\n        if (array_key_exists($word, $numDict)) {\n            $numList[] = $word;\n        }\n    }\n    sort($numList, function ($a, $b) use ($numDict) {\n        return $numDict[$a] <=> $numDict[$b];\n    });\n    return implode(\" \", $numList);\n}\n",
            "function findClosestElements ($numbers) {\n    $sortedNumbers = $numbers;\n    sort($sortedNumbers);\n    $minDiff = INF;\n    $closestPair = [];\n    for ($i = 1; $i < count($sortedNumbers); $i++) {\n        $diff = $sortedNumbers[$i] - $sortedNumbers[$i - 1];\n        if ($diff < $minDiff) {\n            $minDiff = $diff;\n            $closestPair = [$sortedNumbers[$i - 1], $sortedNumbers[$i]];\n        }\n    }\n    return $closestPair;\n}\n",
            "function rescaleToUnit ($numbers) {\n    $minNum = min($numbers);\n    $maxNum = max($numbers);\n    if ($minNum == $maxNum) {\n        return array_fill(0, count($numbers), 0.0);\n    } else {\n        return array_map(function ($num) use ($minNum, $maxNum) {\n            return ($num - $minNum) / ($maxNum - $minNum);\n        }, $numbers);\n    }\n}\n",
            "function filterIntegers ($values) {\n    $result = [];\n    foreach ($values as $v) {\n        if (is_int($v)) {\n            $result[] = $v;\n        }\n    }\n    return $result;\n}\n",
            "function strLength ($s) {\n    return strlen($s);\n}\n",
            "function largestDivisor ($n) {\n    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            return $n / $i;\n        }\n    }\n    return 1;\n}\n",
            "function factorize ($n) {\n    $factors = [];\n    $divisor = 2;\n    while ($divisor <= $n) {\n        if ($n % $divisor == 0) {\n            $factors[] = $divisor;\n            $n /= $divisor;\n        } else {\n            $divisor++;\n        }\n    }\n    return $factors;\n}\n",
            "function removeDuplicates ($numbers) {\n    $counts = [];\n    foreach ($numbers as $num) {\n        $counts[$num] = isset($counts[$num]) ? $counts[$num] + 1 : 1;\n    }\n    $res = [];\n    foreach ($numbers as $num) {\n        if ($counts[$num] == 1) {\n            $res[] = $num;\n        }\n    }\n    return $res;\n}\n",
            "function flipCase ($s) {\n    $flipped = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if (!ctype_alpha($ch)) {\n            $flipped .= $ch;\n        } else if (ctype_lower($ch)) {\n            $flipped .= strtoupper($ch);\n        } else if (ctype_upper($ch)) {\n            $flipped .= strtolower($ch);\n        }\n    }\n    return $flipped;\n}\n",
            "function concatenate ($strs) {\n    $result = '';\n    foreach ($strs as $s) {\n        $result .= $s;\n    }\n    return $result;\n}\n",
            "function filterByPrefix ($strs, $prefixStr) {\n    $result = [];\n    foreach ($strs as $s) {\n        if (strpos($s, $prefixStr) === 0) {\n            $result[] = $s;\n        }\n    }\n    return $result;\n}\n",
            "function getPositive ($l) {\n    return array_filter($l, function ($num) { return $num > 0; });\n}\n",
            "function isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)) + 1; $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function poly ($xs, $x) {\n    $res = 0.0;\n    for ($i = 0; $i < count($xs); $i++) {\n        $res += $xs[$i] * pow($x, $i);\n    }\n    return $res;\n}\nfunction findZero ($xs) {\n    $x1 = 1.0;\n    $x2 = -1.0;\n    while (poly($xs, $x1) * poly($xs, $x2) > 0.0) {\n        $x1 *= 2.0;\n        $x2 *= 2.0;\n    }\n    while (abs($x1 - $x2) > 1e-10) {\n        $mid = ($x1 + $x2) / 2.0;\n        if (poly($xs, $mid) == 0.0) {\n            return $mid;\n        } else if (poly($xs, $mid) * poly($xs, $x1) < 0.0) {\n            $x2 = $mid;\n        } else {\n            $x1 = $mid;\n        }\n    }\n    return ($x1 + $x2) / 2.0;\n}\n",
            "function sortThird ($l) {\n    $sortedThird = array_values(array_unique(array_filter($l, function ($e) {\n        return $e % 3 == 0;\n    })));\n    sort($sortedThird);\n    return array_map(function ($i) use ($l) {\n        return $i % 3 == 0 ? $sortedThird[$i // 3] : $l[$i];\n    }, range(0, count($l) - 1));\n}\n",
            "function listUnique ($l) {\n    return array_values(array_unique($l));\n}\n",
            "function maxElement ($l) {\n    if (empty($l)) {\n        return 0;\n    }\n    return max($l);\n}\n",
            "function fizzBuzz ($n) {\n    $cnt = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            $cnt += substr_count((string)$i, '7');\n        }\n    }\n    return $cnt;\n}\n",
            "function sortEven ($l) {\n    $sortedEven = array_values(array_filter($l, function ($e) {\n        return $e % 2 == 0;\n    }));\n    sort($sortedEven);\n    return array_map(function ($i) use ($l) {\n        return $i % 2 == 0 ? $sortedEven[$i // 2] : $l[$i];\n    }, range(0, count($l) - 1));\n}\n",
            "function encodeCyclic ($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i += 3) {\n        if ($i + 3 > strlen($s)) {\n            $result .= substr($s, $i);\n        } else {\n            $result .= substr($s, $i + 1, 2);\n            $result .= substr($s, $i, 1);\n        }\n    }\n    return $result;\n}\nfunction decodeCyclic ($s) {\n    return encodeCyclic(encodeCyclic($s));\n}\n",
            "function isPrime($n) {\n    if ($n < 2) { return false; }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) { return false; }\n    }\n    return true;\n}\nfunction primeFib($n) {\n    $f = [0, 1];\n    $cnt = 0;\n    while ($cnt < $n) {\n        $f = [$f[1], $f[0] + $f[1]];\n        if (isPrime($f[1])) { $cnt += 1; }\n    }\n    return $f[1];\n}\n",
            "function triplesSumToZero ($l) {\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            for ($k = $j + 1; $k < count($l); $k++) {\n                if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "function carRaceCollision ($n) {\n    return pow($n, 2);\n}\n",
            "function incrList ($l) {\n    return array_map(function ($i) { return $i + 1; }, $l);\n}\n",
            "function pairsSumToZero ($l) {\n    $seen = [];\n    foreach ($l as $num) {\n        if (isset($seen[-$num])) {\n            return true;\n        }\n        $seen[$num] = true;\n    }\n    return false;\n}\n",
            "function changeBase ($x, $bas) {\n    if ($x == 0) {\n        return \"0\";\n    }\n    $digits = [];\n    while ($x > 0) {\n        $digits[] = (string)($x % $bas);\n        $x = (int)($x / $bas);\n    }\n    return implode(\"\", array_reverse($digits));\n}\n",
            "function triangleArea ($a, $h) {\n    return ($a * $h) / 2.0;\n}\n",
            "function fib4 ($n) {\n    $fib = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib[$i % 4] = array_sum($fib);\n    }\n    return $fib[$n % 4];\n}\n",
            "function median ($l) {\n    $sl = $l;\n    sort($sl);\n    if (count($sl) % 2 != 0) {\n        return $sl[count($sl) / 2];\n    } else {\n        return ($sl[count($sl) / 2] + $sl[count($sl) / 2 - 1]) / 2.0;\n    }\n}\n",
            "function isPalindrome ($txt) {\n    return $txt == strrev($txt);\n}\n",
            "function modp ($n, $p) {\n    $ret = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $ret = ($ret * 2) % $p;\n    }\n    return $ret;\n}\n",
            "function encodeShift ($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        $ch_num = ord($ch);\n        $shifted_ch_num = (($ch_num - 97 + 5) % 26 + 97);\n        $result .= chr($shifted_ch_num);\n    }\n    return $result;\n}\nfunction decodeShift ($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        $ch_num = ord($ch);\n        $shifted_ch_num = (($ch_num - 97 + 21) % 26 + 97);\n        $result .= chr($shifted_ch_num);\n    }\n    return $result;\n}\n",
            "function removeVowels ($txt) {\n    $vowels = \"aeiouAEIOU\";\n    $result = \"\";\n    for ($i = 0; $i < strlen($txt); $i++) {\n        $char = $txt[$i];\n        if (strpos($vowels, $char) === false) {\n            $result .= $char;\n        }\n    }\n    return $result;\n}\n",
            "function belowThreshold ($l, $t) {\n    return !array_filter($l, function ($x) use ($t) { return $x >= $t; });\n}\n",
            "function add ($x, $y) {\n    return $x + $y;\n}\n",
            "function sameChars ($s0, $s1) {\n    return count_chars($s0, 3) == count_chars($s1, 3);\n}\n",
            "function fib ($n) {\n    if ($n <= 1) {\n        return $n;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n",
            "function correctBracketing ($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == '<') {\n            $depth += 1;\n        } else if ($brackets[$i] == '>') {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "function monotonic ($l) {\n    $diff = array_map(function ($w) { return $w[1] - $w[0]; }, array_map(null, $l, array_slice($l, 1)));\n    return array_reduce($diff, function ($acc, $x) { return $acc && $x <= 0; }, true) || array_reduce($diff, function ($acc, $x) { return $acc && $x >= 0; }, true);\n}\n",
            "function common ($l1, $l2) {\n    return array_values(array_intersect($l1, $l2));\n}\n",
            "function largestPrimeFactor ($n) {\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i) {\n            $i += 1;\n        } else {\n            $n /= $i;\n        }\n    }\n    return $n;\n}\n",
            "function sumToN ($n) {\n    return ($n * ($n + 1)) / 2;\n}\n",
            "function correctBracketing ($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        $b = $brackets[$i];\n        if ($b == '(') {\n            $depth += 1;\n        } else if ($b == ')') {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "function derivative ($xs) {\n    $result = [];\n    for ($i = 1; $i < count($xs); $i++) {\n        $result[] = $xs[$i] * $i;\n    }\n    return $result;\n}\n",
            "function fibfib ($n) {\n    if ($n <= 1) {\n        return 0;\n    }\n    $a = $b = 0;\n    $c = 1;\n    while ($n > 2) {\n        $a = $b;\n        $b = $c;\n        $c = $a + $b + $c;\n        $n -= 1;\n    }\n    return $c;\n}\n",
            "function vowelsCount ($s) {\n    $vowels = \"aeiou\";\n    $cnt = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($vowels, strtolower($s[$i])) !== false || ($i == strlen($s) - 1 && strtolower($s[$i]) == \"y\")) {\n            $cnt++;\n        }\n    }\n    return $cnt;\n}\n",
            "function circularShift ($x, $shift) {\n    $x_str = (string)$x;\n    if ($shift > strlen($x_str)) {\n        return strrev($x_str);\n    } else {\n        return substr($x_str, -$shift) . substr($x_str, 0, -$shift);\n    }\n}\n",
            "function digitSum ($s) {\n    return array_sum(array_map(function ($c) {\n        return ord($c);\n    }, array_filter(str_split($s), function ($c) {\n        return ctype_upper($c);\n    })));\n}\n",
            "function fruitDistribution ($s, $n) {\n    $words = explode(' ', $s);\n    $apples = (int) $words[array_search('apples', $words) - 1];\n    $oranges = (int) $words[array_search('oranges', $words) - 1];\n    return $n - $apples - $oranges;\n}\n",
            "function pluck ($arr) {\n    $evens = [];\n    foreach ($arr as $n) {\n        if ($n % 2 == 0) {\n            $evens[] = $n;\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n    $minEven = min($evens);\n    return [$minEven, array_search($minEven, $arr)];\n}\n",
            "function search ($lst) {\n    $freqs = [];\n    foreach ($lst as $n) {\n        $freqs[$n] = isset($freqs[$n]) ? $freqs[$n] + 1 : 1;\n    }\n    $good_vals = array_filter($freqs, function ($k, $v) { return $v >= $k; });\n    return max($good_vals) ?: -1;\n}\n",
            "function strangeSortList ($lst) {\n    $sl = sort($lst);\n    $result = [];\n    $left = 0;\n    $right = count($sl) - 1;\n    while ($left <= $right) {\n        $result[] = $sl[$left];\n        $left += 1;\n        if ($left <= $right) {\n            $result[] = $sl[$right];\n            $right -= 1;\n        }\n    }\n    return $result;\n}\n",
            "function triangleArea ($a, $b, $c) {\n    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $s = ($a + $b + $c) / 2.0;\n        return sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "function willItFly ($q, $w) {\n    if (count($q) == 0) {\n        return false;\n    }\n    $isPalin = true;\n    foreach ($q as $i => $e) {\n        if ($e != $q[count($q) - $i - 1]) {\n            $isPalin = false;\n            break;\n        }\n    }\n    $total = array_sum($q);\n    return $isPalin && $total <= $w;\n}\n",
            "function smallestChange ($arr) {\n    $ans = 0;\n    for ($i = 0; $i < count($arr) / 2; $i++) {\n        if ($arr[$i] != $arr[count($arr) - $i - 1]) {\n            $ans += 1;\n        }\n    }\n    return $ans;\n}\n",
            "function totalMatch ($lst1, $lst2) {\n    $cnt1 = array_sum(array_map(function ($s) { return strlen($s); }, $lst1));\n    $cnt2 = array_sum(array_map(function ($s) { return strlen($s); }, $lst2));\n    return $cnt1 <= $cnt2 ? $lst1 : $lst2;\n}\n",
            "function isMultiplyPrime ($a) {\n    if ($a < 2) {\n        return false;\n    }\n    $cnt = 0;\n    for ($i = 2; $i <= $a; $i++) {\n        if (isPrime($i)) {\n            while ($a % $i == 0) {\n                $cnt++;\n                $a /= $i;\n            }\n        }\n    }\n    return $cnt == 3;\n}\n",
            "function isSimplePower ($x, $n) {\n    if ($n < 2) {\n        return $x == $n;\n    }\n    $tmp = 1;\n    while ($tmp < $x) {\n        $tmp *= $n;\n    }\n    return $tmp == $x;\n}\n",
            "function isCube ($a) {\n    $a = abs($a);\n    $root = int(round(pow($a, 1.0 / 3.0)));\n    return $root * $root * $root == $a;\n}\n",
            "function hexKey ($num) {\n    return count(preg_grep('/[2357BD]/', str_split($num)));\n}\n",
            "function decimalToBinary ($dec) {\n    return \"db\" . decbin($dec) . \"db\";\n}\n",
            "function isHappy ($s) {\n    if (strlen($s) < 3) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($s) - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function numericalLetterGrade ($grades) {\n    $result = [];\n    foreach ($grades as $g) {\n        if ($g == 4.0) {\n            $result[] = \"A+\";\n        } else if ($g > 3.7) {\n            $result[] = \"A\";\n        } else if ($g > 3.3) {\n            $result[] = \"A-\";\n        } else if ($g > 3.0) {\n            $result[] = \"B+\";\n        } else if ($g > 2.7) {\n            $result[] = \"B\";\n        } else if ($g > 2.3) {\n            $result[] = \"B-\";\n        } else if ($g > 2.0) {\n            $result[] = \"C+\";\n        } else if ($g > 1.7) {\n            $result[] = \"C\";\n        } else if ($g > 1.3) {\n            $result[] = \"C-\";\n        } else if ($g > 1.0) {\n            $result[] = \"D+\";\n        } else if ($g > 0.7) {\n            $result[] = \"D\";\n        } else if ($g > 0.0) {\n            $result[] = \"D-\";\n        } else {\n            $result[] = \"E\";\n        }\n    }\n    return $result;\n}\n",
            "function primeLength ($s) {\n    $length = strlen($s);\n    if ($length < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($length)) + 1; $i++) {\n        if ($length % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function startsOneEnds ($n) {\n    if ($n == 1) {\n        return 1;\n    }\n    return 2 * 9 * (10 ** ($n - 2));\n}\n",
            "function solve ($n) {\n    $digitsSum = array_sum(str_split($n));\n    return base_convert($digitsSum, 10, 2);\n}\n",
            "function add ($lst) {\n    return array_sum(array_filter($lst, function ($x, $i) {\n        return $i % 2 == 1 && $x % 2 == 0;\n    }, ARRAY_FILTER_USE_BOTH));\n}\n",
            "function antiShuffle ($s) {\n    $words = explode(\" \", $s);\n    $words = array_map(function ($word) {\n        $chars = str_split($word);\n        sort($chars);\n        return implode($chars);\n    }, $words);\n    return implode(\" \", $words);\n}\n",
            "function getRow ($lst, $x) {\n    $coords = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n                $coords[] = [$i, $j];\n            }\n        }\n    }\n    usort($coords, function ($a, $b) {\n        return $a[0] <=> $b[0] ?: $b[1] <=> $a[1];\n    });\n    return $coords;\n}\n",
            "function sortArray ($arr) {\n    if (count($arr) == 0) {\n        return [];\n    }\n    if ($arr[0] + $arr[count($arr) - 1]) % 2 == 0 {\n        return array_reverse(sort($arr));\n    } else {\n        return sort($arr);\n    }\n}\n",
            "function encrypt ($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = ord($s[$i]);\n        $shifted = $ch + 4;\n        if ($shifted > ord('z')) {\n            $shifted -= 26;\n        }\n        $result .= chr($shifted);\n    }\n    return $result;\n}\n",
            "function nextSmallest ($lst) {\n    $sl = $lst;\n    sort($sl);\n    $sl = array_unique($sl);\n    if (count($sl) < 2) {\n        return null;\n    }\n    return $sl[1];\n}\n",
            "function isBored ($s) {\n    $re = '/[.!?]\\s*/';\n    $sentences = preg_split($re, $s);\n    return count(array_filter($sentences, function ($sentence) {\n        return strlen($sentence) >= 2 && substr($sentence, 0, 2) == 'I ';\n    }));\n}\n",
            "function anyInt ($x, $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        return $x + $y == $z || $x + $z == $y || $y + $z == $x;\n    }\n    return false;\n}\n",
            "function encode ($message) {\n    $vowels = \"aeiouAEIOU\";\n    $result = [];\n    for ($i = 0; $i < strlen($message); $i++) {\n        $ch = $message[$i];\n        if (ctype_alpha($ch)) {\n            $ch1 = ctype_lower($ch) ? strtoupper($ch) : strtolower($ch);\n            if (strpos($vowels, $ch1) !== false) {\n                $ch1 = chr(ord($ch1) + 2);\n            }\n            $result[] = $ch1;\n        } else {\n            $result[] = $ch;\n        }\n    }\n    return implode(\"\", $result);\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction skjkasdkd ($lst) {\n    $primes = array_filter($lst, 'isPrime');\n    if (count($primes) == 0) {\n        return 0;\n    }\n    $largest = max($primes);\n    return array_sum(str_split($largest));\n}\n",
            "function checkDictCase ($d) {\n    if (!$d) {\n        return false;\n    }\n    return all(function ($c) { return ctype_lower($c); }, array_keys($d)) || all(function ($c) { return ctype_upper($c); }, array_keys($d));\n}\n",
            "function countUpTo ($n) {\n    $primes = [];\n    for ($num = 2; $num <= $n; $num++) {\n        if (array_reduce($primes, function ($carry, $p) use ($num) { return $carry && $num % $p != 0; }, true)) {\n            $primes[] = $num;\n        }\n    }\n    return $primes;\n}\n",
            "function multiply ($a, $b) {\n    return abs($a) % 10 * abs($b) % 10;\n}\n",
            "function countUpper ($s) {\n    $vowels = \"AEIOU\";\n    $result = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($i % 2 == 0 && strpos($vowels, $s[$i]) !== false) {\n            $result += 1;\n        }\n    }\n    return $result;\n}\n",
            "function closestInteger ($value) {\n    $num = floatval($value);\n    if ($num >= 0.0) {\n        return floor($num + 0.5);\n    } else {\n        return ceil($num - 0.5);\n    }\n}\n",
            "function makeAPile ($n) {\n    return range(0, $n - 1).map(function ($i) use ($n) { return $n + 2 * $i; });\n}\n",
            "function wordsString ($s) {\n    $re = '/[, ]/';\n    $result = [];\n    foreach (preg_split($re, $s) as $w) {\n        if (strlen($w) > 0) {\n            $result[] = $w;\n        }\n    }\n    return $result;\n}\n",
            "function chooseNum ($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    if ($y % 2 == 0) {\n        return $y;\n    }\n    if ($x != $y) {\n        return $y - 1;\n    }\n    -1\n}\n",
            "function roundedAvg ($n, $m) {\n    if ($n > $m) {\n        return null;\n    }\n    $rAvg = intval(($m + $n) / 2.0 + 0.5);\n    return decbin($rAvg);\n}\n",
            "function allDigitsOdd ($s) {\n    return strlen($s) === strspn($s, '13579');\n}\nfunction uniqueDigits ($x) {\n    $result = [];\n    foreach ($x as $num) {\n        if (allDigitsOdd($num)) {\n            $result[] = $num;\n        }\n    }\n    sort($result);\n    return $result;\n}\n",
            "function byLength ($arr) {\n    $digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    $sortedArr = array_map(function ($x) {\n        return -$x;\n    }, array_filter($arr, function ($x) {\n        return 1 <= $x && $x <= 9;\n    }));\n    sort($sortedArr, SORT_NUMERIC);\n    return array_map(function ($x) use ($digitNames) {\n        return $digitNames[$x-1];\n    }, $sortedArr);\n}\n",
            "function f ($n) {\n    $nums = range(1, $n);\n    return array_map(function ($i) use ($nums) {\n        return $i % 2 ? array_sum(array_slice($nums, 0, $i)) : array_reduce(array_slice($nums, 0, $i), function ($x, $y) {\n            return $x * $y;\n        });\n    }, $nums);\n}\n",
            "function isPalindrome ($txt) {\n    return $txt == strrev($txt);\n}\nfunction evenOddPalindrome ($n) {\n    $cnt = [0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        if (isPalindrome($i)) {\n            $cnt[(($i % 2) ? 1 : 0)]++;\n        }\n    }\n    return $cnt;\n}\n",
            "function digitsSum ($n) {\n    $nStr = (string)$n;\n    if ($n >= 0) {\n        return array_sum(array_map('intval', str_split($nStr)));\n    } else {\n        return intval(substr($nStr, 0, 2)) * 2 + digitsSum(abs($n));\n    }\n}\nfunction countNums ($arr) {\n    return count(array_filter($arr, function ($n) {\n        return digitsSum($n) > 0;\n    }));\n}\n",
            "function moveOneBall ($arr) {\n    if (count($arr) == 0) {\n        return true;\n    }\n    $sortedArr = sort($arr);\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] == $sortedArr[$i] && $arr[$i] == $sortedArr[count($arr) - $i]) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function canExchange ($lst1, $lst2) {\n    $odd_cnt = count(array_filter($lst1, function ($num) { return $num % 2 != 0; }));\n    $even_cnt = count(array_filter($lst2, function ($num) { return $num % 2 == 0; }));\n    return $even_cnt >= $odd_cnt ? \"YES\" : \"NO\";\n}\n",
            "function histogram ($test) {\n    $freq = [];\n    $words = explode(' ', $test);\n    foreach ($words as $w) {\n        if (strlen($w) > 0) {\n            $freq[$w] = isset($freq[$w]) ? $freq[$w] + 1 : 1;\n        }\n    }\n    $result = [];\n    if (count($freq) > 0) {\n        $max_freq = max($freq);\n        foreach ($freq as $k => $v) {\n            if ($v == $max_freq) {\n                $result[$k] = $v;\n            }\n        }\n    }\n    return $result;\n}\n",
            "function isPalindrome($s) {\n    return $s == strrev($s);\n}\nfunction reverseDelete ($s, $c) {\n    $s1 = str_replace($c, \"\", $s);\n    return [$s1, isPalindrome($s1) ? \"yes\" : \"no\"];\n}\n",
            "function oddCount ($lst) {\n    $result = [];\n    foreach ($lst as $num) {\n        $n = strlen(preg_replace('/[02468]/', '', $num));\n        $rs = \"the number of odd elements in the string i of the input.\";\n        $result[] = str_replace('i', (string)$n, $rs);\n    }\n    return $result;\n}\n",
            "function minSubArraySum ($nums) {\n    $minSum = 0;\n    $curSum = 0;\n    foreach ($nums as $n) {\n        $curSum = min($curSum + $n, 0);\n        $minSum = min($curSum, $minSum);\n    }\n    if ($minSum == 0) {\n        $minSum = min($nums);\n    }\n    return $minSum;\n}\n",
            "function maxFill ($grid, $capacity) {\n    return array_sum(array_map(function ($arr) use ($capacity) {\n        return ceil(array_sum($arr) / $capacity);\n    }, $grid));\n}\n",
            "function countOnes($num) {\n    $count = 0;\n    $num = $num;\n    while ($num > 0) {\n        if ($num & 1 == 1) {\n            $count += 1;\n        }\n        $num >>= 1;\n    }\n    return $count;\n}\nfunction sortArray($arr) {\n    $arr = $arr;\n    usort($arr, function ($a, $b) {\n        $a_count = countOnes($a);\n        $b_count = countOnes($b);\n        if ($a_count == $b_count) {\n            return $a <=> $b;\n        } else {\n            return $a_count <=> $b_count;\n        }\n    });\n    return $arr;\n}\n",
            "function selectWords ($s, $n) {\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $words = array_filter(explode(\" \", $s), function ($w) {\n        return strlen($w) > 0;\n    });\n    return array_filter($words, function ($w) use ($consonants) {\n        return count(array_filter(str_split($w), function ($c) use ($consonants) {\n            return strpos($consonants, strtolower($c)) !== false;\n        })) == $n;\n    });\n}\n",
            "function getClosestVowel ($word) {\n    $vowels = \"aeiouAEIOU\";\n    for ($i = strlen($word) - 2; $i >= 1; $i--) {\n        if (strpos($vowels, $word[$i]) !== false && strpos($vowels, $word[$i - 1]) === false && strpos($vowels, $word[$i + 1]) === false) {\n            return $word[$i];\n        }\n    }\n    return \"\";\n}\n",
            "function matchParens ($lst) {\n    $s1 = $lst[0] . $lst[1];\n    $s2 = $lst[1] . $lst[0];\n    if (check($s1) || check($s2)) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction check($s) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] == '(') {\n            $depth += 1;\n        } else {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "function maximum ($arr, $k) {\n    if ($k == 0) {\n        return [];\n    }\n    return array_slice(sort($arr), -$k);\n}\n",
            "function solution ($lst) {\n    return array_sum(array_filter($lst, function ($x, $i) {\n        return $i % 2 == 0 && $x % 2 != 0;\n    }, ARRAY_FILTER_USE_BOTH));\n}\n",
            "function addElements ($arr, $k) {\n    return array_sum(array_filter($arr, function ($n) {\n        return strlen((string)$n) <= 2;\n    }, ARRAY_FILTER_USE_KEY));\n}\n",
            "function getOddCollatz ($n) {\n    $collatz = [1];\n    while ($n != 1) {\n        if ($n % 2 != 0) {\n            $collatz[] = $n;\n            $n = 3 * $n + 1;\n        } else {\n            $n = $n >> 1;\n        }\n    }\n    return $collatz;\n}\n",
            "function validDate ($date) {\n    if (strlen($date) != 10 || $date[2] != \"-\" || $date[5] != \"-\") {\n        return false;\n    }\n    $m = intval(substr($date, 0, 2));\n    $d = intval(substr($date, 3, 2));\n    if (in_array($m, [1, 3, 5, 7, 8, 10, 12]) && $d >= 1 && $d <= 31) {\n        return true;\n    }\n    if (in_array($m, [4, 6, 9, 11]) && $d >= 1 && $d <= 30) {\n        return true;\n    }\n    if ($m == 2 && $d >= 1 && $d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "function splitWords ($txt) {\n    if (strpos($txt, \" \") !== false) {\n        return explode(\" \", $txt);\n    } elseif (strpos($txt, \",\") !== false) {\n        return explode(\",\", $txt);\n    } else {\n        return [strval(count(preg_grep(\"/[a-z]/\", str_split($txt))))];\n    }\n}\n",
            "function isSorted ($lst) {\n    if (!array_reduce($lst, function ($carry, $item) {\n        return $carry && $item <= $lst[1];\n    }, true)) {\n        return false;\n    }\n    $freq = [];\n    foreach ($lst as $i) {\n        $freq[$i] = ($freq[$i] ?? 0) + 1;\n    }\n    $maxFreq = max($freq);\n    return $maxFreq <= 2;\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction intersection($interval1, $interval2) {\n    $l = max($interval1[0], $interval2[0]);\n    $r = min($interval1[1], $interval2[1]);\n    $length = $r - $l;\n    return $length > 0 && isPrime($length) ? \"YES\" : \"NO\";\n}\n",
            "function prodSigns ($arr) {\n    if (!$arr) {\n        return null;\n    }\n    if (in_array(0, $arr)) {\n        return 0;\n    }\n    $sign = -1;\n    if (count(array_filter($arr, function ($n) { return $n < 0; })) % 2 == 1) {\n        $sign = 1;\n    }\n    return $sign * array_sum(array_map(function ($n) { return abs($n); }, $arr));\n}\n",
            "function minPath ($grid, $k) {\n    $n = count($grid);\n    $minVal = $n * $n + 1;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $temp = [];\n                if ($i != 0) {\n                    $temp[] = $grid[$i - 1][$j];\n                }\n                if ($j != 0) {\n                    $temp[] = $grid[$i][$j - 1];\n                }\n                if ($i != $n - 1) {\n                    $temp[] = $grid[$i + 1][$j];\n                }\n                if ($j != $n - 1) {\n                    $temp[] = $grid[$i][$j + 1];\n                }\n                $minVal = min($temp);\n            }\n        }\n    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = 1 if $i % 2 == 0 else $minVal;\n    }\n    return $result;\n}\n",
            "function tri ($n) {\n    if ($n == 0) {\n        return [1];\n    }\n    $seq = [1, 3];\n    for ($i = 2; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $seq[] = $i / 2 + 1;\n        } else {\n            $seq[] = $seq[$i - 1] + $seq[$i - 2] + ($i + 3) / 2;\n        }\n    }\n    return $seq;\n}\n",
            "function digits ($n) {\n    $odds = array_map(function ($d) { return intval($d); }, str_split(strval($n)));\n    $odds = array_filter($odds, function ($d) { return $d % 2 == 1; });\n    return count($odds) > 0 ? array_reduce($odds, function ($x, $y) { return $x * $y; }, 1) : 0;\n}\n",
            "function isNested ($s) {\n    $openIdx = [];\n    $closeIdx = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] == '[') {\n            $openIdx[] = $i;\n        } else if ($s[$i] == ']') {\n            $closeIdx[] = $i;\n        }\n    }\n    $closeIdx = array_reverse($closeIdx);\n    $cnt = 0;\n    $i = 0;\n    $l = count($closeIdx);\n    for ($idx = 0; $idx < count($openIdx); $idx++) {\n        if ($i < $l && $openIdx[$idx] < $closeIdx[$i]) {\n            $cnt += 1;\n            $i += 1;\n        }\n    }\n    return $cnt >= 2;\n}\n",
            "function sumSquares ($lst) {\n    $result = 0;\n    foreach ($lst as $n) {\n        $result += pow(ceil($n), 2);\n    }\n    return $result;\n}\n",
            "function checkIfLastCharIsALetter ($txt) {\n    if (!$txt) {\n        return false;\n    }\n    $last = substr($txt, strrpos($txt, ' ') + 1);\n    return strlen($last) == 1 && ctype_alpha($last[0]);\n}\n",
            "function canArrange ($arr) {\n    if (count($arr) <= 1) {\n        return -1;\n    }\n    $idx = array_keys(array_filter(array_map(function ($i) use ($arr) {\n        return $arr[$i] < $arr[$i - 1];\n    }, range(1, count($arr) - 1))));\n    return max($idx, -1);\n}\n",
            "function largestSmallestIntegers ($lst) {\n    $neg = array_filter($lst, function ($i) { return $i < 0; });\n    $pos = array_filter($lst, function ($i) { return $i > 0; });\n    $maxNeg = max($neg);\n    $minPos = min($pos);\n    return [$maxNeg, $minPos];\n}\n",
            "function anyToReal($o) {\n    if (is_string($o)) {\n        return floatval(str_replace(',', '.', $o));\n    } elseif (is_int($o)) {\n        return floatval($o);\n    } elseif (is_float($o)) {\n        return $o;\n    } else {\n        throw new RuntimeException('Type Error');\n    }\n}\nfunction compareOne($a, $b) {\n    $a1 = anyToReal($a);\n    $b1 = anyToReal($b);\n    if ($a1 == $b1) {\n        return null;\n    } elseif ($a1 > $b1) {\n        return $a1;\n    } else {\n        return $b1;\n    }\n}\n",
            "function isEqualToSumEven ($n) {\n    return $n % 2 == 0 && $n >= 8;\n}\n",
            "function specialFactorial ($n) {\n    $fact = 1;\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $fact *= $i;\n        $result *= $fact;\n    }\n    return $result;\n}\n",
            "function fixSpaces ($txt) {\n    return preg_replace(\"/\\s{3,}/\", \"-\", str_replace(\" \", \"_\", $txt));\n}\n",
            "function fileNameCheck ($fileName) {\n    $suf = [\"txt\", \"exe\", \"dll\"];\n    $lst = explode(\".\", $fileName);\n    if (count($lst) != 2 || !in_array($lst[1], $suf) || strlen($lst[0]) == 0 || !ctype_alpha($lst[0][0]) || preg_match(\"/[0-9]/\", $lst[0]) > 3) {\n        return \"No\";\n    }\n    \"Yes\";\n}\n",
            "function sumSquares ($lst) {\n    $result = 0;\n    foreach ($lst as $i => $e) {\n        if ($i % 3 == 0) {\n            $result += $e * $e;\n        } else if ($i % 4 == 0) {\n            $result += $e * $e * $e;\n        } else {\n            $result += $e;\n        }\n    }\n    return $result;\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction wordsInSentence ($sentence) {\n    $words = explode(\" \", $sentence);\n    return implode(\" \", array_filter($words, \"isPrime\"));\n}\n",
            "function simplify ($x, $n) {\n    $xs = explode(\"/\", $x);\n    $ns = explode(\"/\", $n);\n    $num = $xs[0] * $ns[0];\n    $den = $xs[1] * $ns[1];\n    $num % $den == 0;\n}\n",
            "function digitsSum ($n) {\n    $nStr = (string)$n;\n    if ($n >= 0) {\n        return array_sum(array_map('intval', str_split($nStr)));\n    } else {\n        return intval(substr($nStr, 0, 2)) * 2 + digitsSum(abs($n));\n    }\n}\nfunction orderByPoints ($nums) {\n    return array_map('intval', $nums);\n}\n",
            "function specialFilter ($nums) {\n    $odds = \"13579\";\n    return count(array_filter($nums, function ($n) use ($odds) {\n        return $n > 10 && $n % 2 == 1 && strpos($odds, (string)$n[0]) !== false;\n    }));\n}\n",
            "function getMaxTriples ($n) {\n    $c = [0, 0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        $a = $i * $i - $i + 1;\n        $c[$a % 3] += 1;\n    }\n    return $c[0] * $c[1] * $c[2] + ($c[0] * ($c[0] - 1) * ($c[0] - 2) + $c[1] * ($c[1] - 1) * ($c[1] - 2) + $c[2] * ($c[2] - 1) * ($c[2] - 2)) / 6;\n}\n",
            "function bf ($planet1, $planet2) {\n    $names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!in_array($planet1, $names) || !in_array($planet2, $names)) {\n        return [];\n    }\n    $l = array_search($planet1, $names);\n    $r = array_search($planet2, $names);\n    if ($l > $r) {\n        $l = $r;\n        $r = $l;\n    }\n    if ($l == $r) {\n        return [];\n    }\n    return array_slice($names, $l + 1, $r - $l - 1);\n}\n",
            "function sortedListSum ($lst) {\n    $result = [];\n    foreach ($lst as $s) {\n        if (strlen($s) % 2 == 0) {\n            $result[] = $s;\n        }\n    }\n    usort($result, function ($a, $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n        } else {\n            return strlen($a) < strlen($b) ? -1 : 1;\n        }\n    });\n    return $result;\n}\n",
            "function xOrY ($n, $x, $y) {\n    if ($n < 2) {\n        return $y;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return $y;\n        }\n    }\n    return $x;\n}\n",
            "function doubleTheDifference ($lst) {\n    return array_sum(array_map(function ($n) {\n        return $n * $n;\n    }, array_filter($lst, function ($n) {\n        return $n >= 0 && $n % 2 == 1;\n    })));\n}\n",
            "function compare ($game, $guess) {\n    return array_map(function ($x, $y) {\n        return abs($x - $y);\n    }, $game, $guess);\n}\n",
            "function strongestExtension ($className, $extensions) {\n    $maxS = -INF;\n    $maxExt = '';\n    foreach ($extensions as $ext) {\n        $upper = 0;\n        $lower = 0;\n        for ($i = 0; $i < strlen($ext); $i++) {\n            $c = $ext[$i];\n            if (ctype_upper($c)) {\n                $upper++;\n            } else if (ctype_lower($c)) {\n                $lower++;\n            }\n        }\n        $s = $upper - $lower;\n        if ($s > $maxS) {\n            $maxS = $s;\n            $maxExt = $ext;\n        }\n    }\n    return $className . '.' . $maxExt;\n}\n",
            "function cycpatternCheck ($a, $b) {\n    if (strlen($a) < strlen($b)) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($b); $i++) {\n        if (strpos($a, substr($b, $i) . substr($b, 0, $i)) !== false) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function evenOddCount ($num) {\n    $ds = str_split(abs($num));\n    $even = count(array_filter($ds, function ($d) { return $d % 2 == 0; }));\n    return [$even, count($ds) - $even];\n}\n",
            "function intToMiniRoman ($num) {\n    $values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    $res = [];\n    for ($i = 0; $i < count($values); $i++) {\n        while ($num >= $values[$i]) {\n            $res[] = $numerals[$i];\n            $num -= $values[$i];\n        }\n    }\n    return implode(\"\", $res);\n}\n",
            "function rightAngleTriangle ($a, $b, $c) {\n    $s = [$a, $b, $c];\n    sort($s);\n    return $s[0] * $s[0] + $s[1] * $s[1] == $s[2] * $s[2];\n}\n",
            "function findMax ($words) {\n    $maxCnt = 0;\n    $maxW = '';\n    foreach ($words as $w) {\n        $cnt = count(array_unique(str_split($w)));\n        if ($cnt > $maxCnt) {\n            $maxCnt = $cnt;\n            $maxW = $w;\n        } else if ($cnt == $maxCnt) {\n            $maxW = min($maxW, $w);\n        }\n    }\n    return $maxW;\n}\n",
            "function eat ($num, $need, $remaining) {\n    if ($need <= $remaining) {\n        return [$num + $need, $remaining - $need];\n    } else {\n        return [$num + $remaining, 0];\n    }\n}\n",
            "function doAlgebra ($operators, $operands) {\n    $ops = $operators;\n    $nums = $operands;\n    $i = count($ops) - 1;\n    while ($i >= 0) {\n        if ($ops[$i] == \"**\") {\n            $nums[$i] = pow($nums[$i], $nums[$i + 1]);\n            array_pop($nums);\n            array_pop($ops);\n        }\n        $i -= 1;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"*\") {\n            $nums[$i] = $nums[$i] * $nums[$i + 1];\n            array_pop($nums);\n            array_pop($ops);\n            $i -= 1;\n        } elseif ($ops[$i] == \"//\") {\n            $nums[$i] = $nums[$i] / $nums[$i + 1];\n            array_pop($nums);\n            array_pop($ops);\n            $i -= 1;\n        }\n        $i += 1;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"+\") {\n            $nums[$i] = $nums[$i] + $nums[$i + 1];\n            array_pop($nums);\n            array_pop($ops);\n            $i -= 1;\n        } elseif ($ops[$i] == \"-\") {\n            $nums[$i] = $nums[$i] - $nums[$i + 1];\n            array_pop($nums);\n            array_pop($ops);\n            $i -= 1;\n        }\n        $i += 1;\n    }\n    return $nums[0];\n}\n",
            "function solve ($s) {\n    if (!preg_match('/[a-zA-Z]/', $s)) {\n        return strrev($s);\n    }\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if (!ctype_alpha($ch)) {\n            $result[] = $ch;\n        } elseif (ctype_upper($ch)) {\n            $result[] = strtolower($ch);\n        } elseif (ctype_lower($ch)) {\n            $result[] = strtoupper($ch);\n        }\n    }\n    return implode('', $result);\n}\n",
            "function stringToMd5 ($txt) {\n    if (strlen($txt) === 0) {\n        return null;\n    }\n    $md5_hash = md5_init();\n    $txt_bytes = str_split($txt);\n    $txt_bytes = array_map(function ($b) { return ord($b); }, $txt_bytes);\n    $txt_bytes = array_map(function ($b) { return chr($b); }, $txt_bytes);\n    $txt_bytes = implode(\"\", $txt_bytes);\n    $md5_hash = md5_update($md5_hash, $txt_bytes);\n    $md5_encoded = md5_final($md5_hash);\n    $md5_encoded = str_split($md5_encoded);\n    $md5_encoded = array_map(function ($b) { return ord($b); }, $md5_encoded);\n    $md5_encoded = array_map(function ($b) { return dechex($b); }, $md5_encoded);\n    $md5_encoded = array_map(function ($b) { return str_pad($b, 2, \"0\", STR_PAD_LEFT); }, $md5_encoded);\n    $md5_encoded = implode(\"\", $md5_encoded);\n    return $md5_encoded;\n}\n",
            "function generateIntegers ($a, $b) {\n    $lower = max(2, min($a, $b));\n    $upper = min(8, max($a, $b));\n    return range($lower, $upper, 2);\n}\n"
        ],
        "ruby": [
            "def has_close_elements(numbers, threshold)\n    for i in 0..numbers.length\n        for j in (i + 1)..numbers.length\n            if (numbers[i] - numbers[j]).abs < threshold\n                return true\n            end\n        end\n    end\n    false\nend\n",
            "def separate_paren_groups(paren_string)\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.gsub(\" \", \"\")\n    for ch in parens.chars\n        if ch == '('\n            stk.push(ch)\n            current_group += ch\n        elsif ch == ')'\n            stk.pop\n            current_group += ch\n            if stk.empty?\n                groups.push(current_group)\n                current_group = \"\"\n            end\n        end\n    end\n    groups\nend\n",
            "def truncate_number(num)\n    num - num.floor\nend\n",
            "def below_zero(operations)\n    balance = 0\n    for op in operations\n        balance += op\n        if balance < 0\n            return true\n        end\n    end\n    return false\nend\n",
            "def mean_absolute_deviation(numbers)\n    mean = numbers.reduce(0.0, :+) / numbers.length.to_f\n    deviation = numbers.map {|x| (x - mean).abs}.reduce(0.0, :+)\n    deviation / numbers.length.to_f\nend\n",
            "def intersperse(numbers, delimiter)\n    result = []\n    numbers.each_with_index do |n, i|\n        if i != 0\n            result.push(delimiter)\n        end\n        result.push(n)\n    end\n    return result\nend\n",
            "def parse_nested_parens(paren_string)\n    result = []\n    paren_groups = paren_string.split(\" \")\n    for group in paren_groups\n        depth = 0\n        max_depth = 0\n        for ch in group.chars\n            if ch == '('\n                depth += 1\n                max_depth = [max_depth, depth].max\n            elsif ch == ')'\n                depth -= 1\n            end\n        end\n        result.push(max_depth)\n    end\n    result\nend\n",
            "def filter_by_substring(strs, substring)\n    strs.select {|s| s.include?(substring)}\nend\n",
            "def sum_product(numbers)\n    n_sum = numbers.reduce(:+)\n    n_product = numbers.reduce(1, :*)\n    [n_sum, n_product]\nend\n",
            "def rolling_max(numbers)\n    max_so_far = numbers.min\n    result = []\n    for num in numbers\n        max_so_far = [max_so_far, num].max\n        result.append(max_so_far)\n    end\n    return result\nend\n",
            "def is_palindrome(s)\n    s == s.reverse\nend\ndef make_palindrome(s)\n    if is_palindrome(s)\n        return s\n    end\n    for i in 0..s.length-1\n        if is_palindrome(s[i..-1])\n            return s + s[0..i-1].reverse\n        end\n    end\n    return \"\"\nend\n",
            "def string_xor(a, b)\n    result = ''\n    a.chars.zip(b.chars).each do |x, y|\n        if x == y\n            result << '0'\n        else\n            result << '1'\n        end\n    end\n    result\nend\n",
            "def longest(strs)\n    return nil if strs.empty?\n    longest_s = strs[0]\n    for s in strs\n        longest_s = s if s.length > longest_s.length\n    end\n    longest_s\nend\n",
            "def greatest_common_divisor(a, b)\n    if b == 0\n        a\n    else\n        greatest_common_divisor(b, a % b)\n    end\nend\n",
            "def all_prefixes(s)\n    prefixes = []\n    for i in 0..s.length\n        prefixes.push(s[0..i])\n    end\n    prefixes\nend\n",
            "def string_sequence(n)\n    (0..n).map {|i| i.to_s}.join(\" \")\nend\n",
            "def count_distinct_characters(s)\n    set = Set.new\n    for c in s.downcase.chars\n        set.add(c)\n    end\n    set.size\nend\n",
            "def parse_music(music_string)\n    durations = {\"o\" => 4, \"o|\" => 2, \".|\" => 1}\n    notes = music_string.split\n    return notes.map {|note| durations[note]}\nend\n",
            "def how_many_times(s, substring)\n    times = 0\n    for i in 0..(s.length - substring.length)\n        if s[i, substring.length] == substring\n            times += 1\n        end\n    end\n    return times\nend\n",
            "def sort_numbers(numbers)\n    num_dict = {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9\n    }\n    num_list = []\n    for word in numbers.split(\" \")\n        if num_dict.has_key?(word)\n            num_list.push(word)\n        end\n    end\n    num_list.sort_by {|a, b| num_dict[a].cmp(num_dict[b])}\n    num_list.join(\" \")\nend\n",
            "def find_closest_elements(numbers)\n    sorted_numbers = numbers.sort\n    min_diff = Float::INFINITY\n    closest_pair = []\n    for i in 1..sorted_numbers.length\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n        end\n    end\n    closest_pair\nend\n",
            "def rescale_to_unit(numbers)\n    min_num = numbers.min\n    max_num = numbers.max\n    if min_num == max_num\n        return [0.0] * numbers.size\n    else\n        return (numbers - min_num) / (max_num - min_num)\n    end\nend\n",
            "def filter_integers(values)\n    result = []\n    for v in values\n        if v.is_a? Integer\n            result.append(v)\n        end\n    end\n    return result\nend\n",
            "def str_length(s)\n    s.length\nend\n",
            "def largest_divisor(n)\n    for i in 2..n\n        return n / i if n % i == 0\n    end\n    1\nend\n",
            "def factorize(n)\n    factors = []\n    divisor = 2\n    while divisor <= n\n        if n % divisor == 0\n            factors.append(divisor)\n            n /= divisor\n        else\n            divisor += 1\n        end\n    end\n    return factors\nend\n",
            "def remove_duplicates(numbers)\n    counts = Hash.new(0)\n    numbers.each do |num|\n        counts[num] += 1\n    end\n    res = numbers.select {|num| counts[num] == 1}\n    return res\nend\n",
            "def flip_case(s)\n    flipped = ''\n    for ch in s.chars\n        if !ch.is_alphabetic?\n            flipped.push(ch)\n        elsif ch.is_lowercase?\n            flipped.push(ch.to_uppercase)\n        elsif ch.is_uppercase?\n            flipped.push(ch.to_lowercase)\n        end\n    end\n    flipped\nend\n",
            "def concatenate(strs)\n    result = \"\"\n    for s in strs\n        result << s\n    end\n    result\nend\n",
            "def filter_by_prefix(strs, prefix_str)\n    result = []\n    for s in strs\n        if s.start_with?(prefix_str)\n            result.append(s)\n        end\n    end\n    return result\nend\n",
            "def get_positive(l)\n    l.select {|num| num > 0}\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    for i in 2..Math.sqrt(n).floor\n        return false if n % i == 0\n    end\n    return true\nend\n",
            "def poly(xs, x)\n    res = 0.0\n    xs.each_with_index do |e, i|\n        res += e * x**i\n    end\n    res\nend\ndef find_zero(xs)\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0.0\n        x1 *= 2.0\n        x2 *= 2.0\n    end\n    while (x1 - x2).abs > 1e-10\n        mid = (x1 + x2) / 2.0\n        if poly(xs, mid) == 0.0\n            return mid\n        elsif poly(xs, mid) * poly(xs, x1) < 0.0\n            x2 = mid\n        else\n            x1 = mid\n        end\n    end\n    (x1 + x2) / 2.0\nend\n",
            "def sort_third(l)\n    sorted_third = l.sort\n    return [sorted_third[i / 3] if i % 3 == 0 else l[i] for i in 0..l.length]\nend\n",
            "def list_unique(l)\n    return l.uniq.sort\nend\n",
            "def max_element(l)\n    if l.empty?\n        0\n    else\n        l.max\n    end\nend\n",
            "def fizz_buzz(n)\n    cnt = 0\n    for i in 1..n\n        if i % 11 == 0 or i % 13 == 0\n            cnt += i.to_s.count(\"7\")\n        end\n    end\n    return cnt\nend\n",
            "def sort_even(l)\n    sorted_even = l.select.with_index {|_, i| i.even?}.sort\n    return sorted_even.map.with_index {|e, i| i.even? ? e : l[i]}\nend\n",
            "def encode_cyclic(s)\n    result = ''\n    for i in (0..s.length).step(3)\n        if i + 3 > s.length\n            result << s[i..]\n        else\n            result << s[i+1..i+3]\n            result << s[i..i+1]\n        end\n    end\n    result\nend\ndef decode_cyclic(s)\n    encode_cyclic(encode_cyclic(s))\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..(n ** 0.5).to_i + 1).each do |i|\n        return false if n % i == 0\n    end\n    true\nend\ndef prime_fib(n)\n    f = [0, 1]\n    cnt = 0\n    while cnt < n\n        f = [f[1], f[0] + f[1]]\n        cnt += 1 if is_prime(f[1])\n    end\n    f[1]\nend\n",
            "def triples_sum_to_zero(l)\n    for i in 0..l.length\n        for j in (i + 1)..l.length\n            for k in (j + 1)..l.length\n                if l[i] + l[j] + l[k] == 0\n                    return true\n                end\n            end\n        end\n    end\n    return false\nend\n",
            "def car_race_collision(n)\n    n ** 2\nend\n",
            "def incr_list(l)\n    l.map {|i| i + 1}\nend\n",
            "def pairs_sum_to_zero(l)\n    seen = Set.new\n    for num in l\n        if seen.include?(-num)\n            return true\n        end\n        seen.add(num)\n    end\n    return false\nend\n",
            "def change_base(x, bas)\n    return \"0\" if x == 0\n    digits = []\n    while x > 0\n        digits.append(x % bas)\n        x /= bas\n    end\n    return digits.reverse.join\nend\n",
            "def triangle_area(a, h)\n    (a * h) / 2.0\nend\n",
            "def fib4(n)\n    fib = [0, 0, 2, 0]\n    for i in 4..n\n        fib[i % 4] = fib[0] + fib[1] + fib[2]\n    end\n    return fib[n % 4]\nend\n",
            "def median(l)\n    sl = l.clone\n    sl.sort!\n    if sl.length % 2 != 0\n        sl[sl.length / 2]\n    else\n        (sl[sl.length / 2] + sl[sl.length / 2 - 1]) / 2.0\n    end\nend\n",
            "def is_palindrome(txt)\n    txt == txt.reverse\nend\n",
            "def modp(n, p)\n    ret = 1\n    for _ in 0..n\n        ret = (ret * 2) % p\n    end\n    ret\nend\n",
            "def encode_shift(s)\n    result = ''\n    for ch in s.chars\n        ch_num = ch.ord\n        shifted_ch_num = (ch_num - 97 + 5) % 26 + 97\n        result << shifted_ch_num.chr\n    end\n    result\nend\ndef decode_shift(s)\n    result = ''\n    for ch in s.chars\n        ch_num = ch.ord\n        shifted_ch_num = (ch_num - 97 + 21) % 26 + 97\n        result << shifted_ch_num.chr\n    end\n    result\nend\n",
            "def remove_vowels(txt)\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in txt.chars\n        if not vowels.include?(char)\n            result.concat(char)\n        end\n    end\n    return result\nend\n",
            "def below_threshold(l, t)\n    l.all? {|x| x < t}\nend\n",
            "def add(x, y)\n    x + y\nend\n",
            "def same_chars(s0, s1)\n    s0.chars.to_set == s1.chars.to_set\nend\n",
            "def fib(n)\n    if n <= 1\n        n\n    else\n        fib(n - 1) + fib(n - 2)\n    end\nend\n",
            "def correct_bracketing(brackets)\n    depth = 0\n    for b in brackets.chars\n        if b == '<'\n            depth += 1\n        elsif b == '>'\n            depth -= 1\n        end\n        return false if depth < 0\n    end\n    depth == 0\nend\n",
            "def monotonic(l)\n    diff = l.each_cons(2).map {|w| w[1] - w[0]}\n    diff.all? {|x| x <= 0} || diff.all? {|x| x >= 0}\nend\n",
            "def common(l1, l2)\n    return (l1 & l2).sort\nend\n",
            "def largest_prime_factor(n)\n    i = 2\n    while i * i <= n\n        if n % i\n            i += 1\n        else\n            n /= i\n        end\n    end\n    return n\nend\n",
            "def sum_to_n(n)\n    (n * (n + 1)) / 2\nend\n",
            "def correct_bracketing(brackets)\n    depth = 0\n    for b in brackets.chars\n        if b == '('\n            depth += 1\n        elsif b == ')'\n            depth -= 1\n        end\n        return false if depth < 0\n    end\n    depth == 0\nend\n",
            "def derivative(xs)\n    result = []\n    for i in 1..xs.length\n        result.append(xs[i] * i)\n    end\n    return result\nend\n",
            "def fibfib(n)\n    return 0 if n <= 1\n    a, b, c = 0, 0, 1\n    while n > 2\n        a, b, c = b, c, a + b + c\n        n -= 1\n    end\n    return c\nend\n",
            "def vowels_count(s)\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in 0...s.length\n        if vowels.include?(s[i].downcase) or (i == s.length - 1 and s[i].downcase == \"y\")\n            cnt += 1\n        end\n    end\n    return cnt\nend\n",
            "def circular_shift(x, shift)\n    x_str = x.to_s\n    if shift > x_str.length\n        return x_str.reverse\n    else\n        return x_str[-shift..-1] + x_str[0..-shift-1]\n    end\nend\n",
            "def digit_sum(s)\n    s.chars.select {|c| c.upcase == c}.map {|c| c.ord}.reduce(:+)\nend\n",
            "def fruit_distribution(s, n)\n    words = s.split(' ')\n    apples = words[words.index('apples') - 1].to_i\n    oranges = words[words.index('oranges') - 1].to_i\n    n - apples - oranges\nend\n",
            "def pluck(arr)\n    evens = []\n    for n in arr\n        if n % 2 == 0\n            evens.push(n)\n        end\n    end\n    if evens.length == 0\n        return []\n    end\n    min_even = evens.min\n    [min_even, arr.index(min_even)]\nend\n",
            "def search(lst)\n    freqs = Hash.new(0)\n    for n in lst\n        freqs[n] += 1\n    end\n    good_vals = freqs.select {|k, v| v >= k}.map {|k, _| k}\n    good_vals.max || -1\nend\n",
            "def strange_sort_list(lst)\n    sl = lst.sort\n    result = []\n    left, right = 0, sl.length - 1\n    while left <= right\n        result.append(sl[left])\n        left += 1\n        if left <= right\n            result.append(sl[right])\n            right -= 1\n        end\n    end\n    return result\nend\n",
            "def triangle_area(a, b, c)\n    if a + b > c and a + c > b and b + c > a\n        s = (a + b + c) / 2.0\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else\n        return -1.0\n    end\nend\n",
            "def will_it_fly(q, w)\n    return false if q.empty?\n    is_palin = q.each_with_index.all? {|e, i| e == q[-i - 1]}\n    total = q.reduce(:+)\n    return is_palin && total <= w\nend\n",
            "def smallest_change(arr)\n    ans = 0\n    for i in 0..(arr.length / 2)\n        if arr[i] != arr[arr.length - i - 1]\n            ans += 1\n        end\n    end\n    ans\nend\n",
            "def total_match(lst1, lst2)\n    cnt1 = lst1.map {|s| s.length}.reduce(:+)\n    cnt2 = lst2.map {|s| s.length}.reduce(:+)\n    return lst1 if cnt1 <= cnt2 else lst2\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n).floor).each do |i|\n        return false if n % i == 0\n    end\n    true\nend\ndef is_multiply_prime(a)\n    cnt = 0\n    (2..a).each do |i|\n        if is_prime(i)\n            while a % i == 0\n                cnt += 1\n                a /= i\n            end\n        end\n    end\n    cnt == 3\nend\n",
            "def is_simple_power(x, n)\n    if n < 2\n        return x == n\n    end\n    tmp = 1\n    while tmp < x\n        tmp *= n\n    end\n    tmp == x\nend\n",
            "def is_cube(a)\n    a = a.abs\n    root = (a ** (1.0 / 3.0)).round\n    root * root * root == a\nend\n",
            "def hex_key(num)\n    num.count(\"2357BD\")\nend\n",
            "def decimal_to_binary(dec)\n    \"db#{dec.to_s(2)}db\"\nend\n",
            "def is_happy(s)\n    if s.length < 3\n        return false\n    end\n    for i in 0..s.length - 2\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n            return false\n        end\n    end\n    true\nend\n",
            "def numerical_letter_grade(grades)\n    result = []\n    for g in grades\n        if g == 4.0\n            result.push(\"A+\")\n        elsif g > 3.7\n            result.push(\"A\")\n        elsif g > 3.3\n            result.push(\"A-\")\n        elsif g > 3.0\n            result.push(\"B+\")\n        elsif g > 2.7\n            result.push(\"B\")\n        elsif g > 2.3\n            result.push(\"B-\")\n        elsif g > 2.0\n            result.push(\"C+\")\n        elsif g > 1.7\n            result.push(\"C\")\n        elsif g > 1.3\n            result.push(\"C-\")\n        elsif g > 1.0\n            result.push(\"D+\")\n        elsif g > 0.7\n            result.push(\"D\")\n        elsif g > 0.0\n            result.push(\"D-\")\n        else\n            result.push(\"E\")\n        end\n    end\n    return result\nend\n",
            "def prime_length(s)\n    length = s.length\n    if length < 2\n        return false\n    end\n    for i in 2..Math.sqrt(length).floor\n        if length % i == 0\n            return false\n        end\n    end\n    return true\nend\n",
            "def starts_one_ends(n)\n    if n == 1\n        return 1\n    end\n    return 2 * 9 * (10 ** (n - 2))\nend\n",
            "def solve(n)\n    digits_sum = n.to_s.chars.map {|d| d.to_i}.reduce(:+)\n    format('%b', digits_sum)\nend\n",
            "def add(lst)\n    lst.each_with_index.select {|x, i| i.odd? && x.even?}.map(&:first).sum\nend\n",
            "def anti_shuffle(s)\n    words = s.split(\" \").map {|word|\n        chars = word.chars.sort\n        chars.join\n    }\n    words.join(\" \")\nend\n",
            "def get_row(lst, x)\n    coords = []\n    for i in 0..lst.length\n        for j in 0..lst[i].length\n            if lst[i][j] == x\n                coords.push([i, j])\n            end\n        end\n    end\n    coords.sort_by {|a, b| a[0].cmp(b[0]).then(a[1].cmp(b[1]).reverse)}\nend\n",
            "def sort_array(arr)\n    if arr.empty?\n        return []\n    end\n    if (arr[0] + arr[-1]) % 2 == 0\n        return arr.sort.reverse\n    else\n        return arr.sort\n    end\nend\n",
            "def encrypt(s)\n    result = ''\n    for ch in s.chars\n        shifted = ch.ord + 4\n        if shifted > 'z'.ord\n            shifted -= 26\n        end\n        result << shifted.chr\n    end\n    return result\nend\n",
            "def next_smallest(lst)\n    sl = lst.clone\n    sl.sort!\n    sl.uniq!\n    if sl.length < 2\n        return nil\n    end\n    return sl[1]\nend\n",
            "def is_bored(s)\n    re = Regexp.new('[.!?]\\s*')\n    sentences = re.split(s)\n    sentences.select {|sentence| sentence.length >= 2 && sentence[0..1] == 'I '}.count\nend\n",
            "def any_int(x, y, z)\n    if x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer)\n        return x + y == z || x + z == y || y + z == x\n    end\n    false\nend\n",
            "def encode(message)\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message\n        if ch.isalpha()\n            ch1 = ch.upcase if ch.islower() else ch.downcase\n            if ch1 in vowels\n                ch1 = ch1.succ\n            end\n            result.append(ch1)\n        else\n            result.append(ch)\n        end\n    end\n    return result.join\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n).floor).each do |i|\n        return false if n % i == 0\n    end\n    true\nend\ndef skjkasdkd(lst)\n    primes = lst.select {|n| is_prime(n)}\n    return 0 if primes.empty?\n    largest = primes.max.to_s\n    largest.chars.map {|digit| digit.to_i}.reduce(:+)\nend\n",
            "def check_dict_case(d)\n    return false if d.empty?\n    return d.keys.all? {|c| c.downcase == c} || d.keys.all? {|c| c.upcase == c}\nend\n",
            "def count_up_to(n)\n    primes = []\n    for num in 2..n\n        if primes.all? {|p| num % p != 0}\n            primes.push(num)\n        end\n    end\n    primes\nend\n",
            "def multiply(a, b)\n    (a.abs % 10) * (b.abs % 10)\nend\n",
            "def count_upper(s)\n    vowels = \"AEIOU\"\n    result = 0\n    s.chars.each_with_index do |c, i|\n        if i % 2 == 0 && vowels.include?(c)\n            result += 1\n        end\n    end\n    result\nend\n",
            "def closest_integer(value)\n    num = value.to_f\n    if num >= 0.0\n        (num + 0.5).floor\n    else\n        (num - 0.5).ceil\n    end\nend\n",
            "def make_a_pile(n)\n    (0..n).map {|i| n + 2 * i}\nend\n",
            "def words_string(s)\n    re = Regexp.new('[, ]')\n    result = []\n    for w in re.split(s)\n        if w.length > 0\n            result.append(w.to_s)\n        end\n    end\n    return result\nend\n",
            "def choose_num(x, y)\n    if x > y\n        return -1\n    end\n    if y % 2 == 0\n        return y\n    end\n    if x != y\n        return y - 1\n    end\n    -1\nend\n",
            "def rounded_avg(n, m)\n    if n > m\n        return nil\n    end\n    r_avg = (m + n) / 2.0 + 0.5\n    return r_avg.to_s(2)\nend\n",
            "def all_digits_odd(s)\n    s.chars.all? {|digit| digit.to_i % 2 != 0}\nend\ndef unique_digits(x)\n    result = []\n    for num in x\n        if all_digits_odd(num.to_s)\n            result.push(num)\n        end\n    end\n    result.sort!\n    return result\nend\n",
            "def by_length(arr)\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = arr.select {|x| 1 <= x && x <= 9}.sort.reverse\n    return sorted_arr.map {|x| digit_names[x-1]}\nend\n",
            "def f(n)\n    nums = (1..n).to_a\n    return nums.map.with_index {|e, i| i % 2 != 0 ? nums[0..i].reduce(:+) : nums[0..i].reduce(:*)}\nend\n",
            "def is_palindrome(txt)\n    txt == txt.reverse\nend\ndef even_odd_palindrome(n)\n    cnt = [0, 0]\n    for i in 1..n\n        if is_palindrome(i.to_s)\n            cnt[(i % 2)] += 1\n        end\n    end\n    cnt\nend\n",
            "def digits_sum(n)\n    n_str = n.to_s\n    if n >= 0\n        return n_str.chars.map(&:to_i).reduce(:+)\n    else\n        return n_str[0..1].to_i * 2 + digits_sum(n.abs)\n    end\nend\ndef count_nums(arr)\n    return arr.count {|n| digits_sum(n) > 0}\nend\n",
            "def move_one_ball(arr)\n    return true if arr.empty?\n    sorted_arr = arr.sort\n    for i in 0..arr.length - 1\n        return true if arr[i..-1] == sorted_arr[0..arr.length - i - 1] and arr[0..i - 1] == sorted_arr[arr.length - i..-1]\n    end\n    return false\nend\n",
            "def can_exchange(lst1, lst2)\n    odd_cnt = lst1.count {|num| num % 2 != 0}\n    even_cnt = lst2.count {|num| num % 2 == 0}\n    if even_cnt >= odd_cnt\n        \"YES\"\n    else\n        \"NO\"\n    end\nend\n",
            "def histogram(test)\n    freq = Hash.new(0)\n    words = test.split(\" \").select {|w| w.length > 0}\n    for w in words\n        freq[w] += 1\n    end\n    result = Hash.new\n    if freq.length > 0\n        max_freq = freq.values.max\n        for (k, v) in freq.to_a\n            if v == max_freq\n                result[k] = v\n            end\n        end\n    end\n    result\nend\n",
            "def is_palindrome(s)\n    s == s.reverse\nend\ndef reverse_delete(s, c)\n    s1 = s.gsub(c, '')\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"]\nend\n",
            "def odd_count(lst)\n    result = []\n    for num in lst\n        n = sum(ord(d) % 2 == 1 for d in num)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    end\n    return result\nend\n",
            "def min_sub_array_sum(nums)\n    min_sum = 0\n    cur_sum = 0\n    for n in nums\n        cur_sum = [cur_sum + n, 0].min\n        min_sum = [cur_sum, min_sum].min\n    end\n    if min_sum == 0\n        min_sum = nums.min\n    end\n    return min_sum\nend\n",
            "def max_fill(grid, capacity)\n    grid.map {|arr| (arr.sum.to_f / capacity.to_f).ceil.to_i}.sum\nend\n",
            "def count_ones(num)\n    count = 0\n    num = num\n    while num > 0\n        if num & 1 == 1\n            count += 1\n        end\n        num >>= 1\n    end\n    count\nend\ndef sort_array(arr)\n    arr = arr.clone\n    arr.sort_by {|a, b|\n        a_count = count_ones(a)\n        b_count = count_ones(b)\n        if a_count == b_count\n            a.cmp(b)\n        else\n            a_count.cmp(b_count)\n        end\n    }\nend\n",
            "def select_words(s, n)\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    words.select {|w| w.length > 0}.select {|w| w.downcase.chars.select {|c| consonants.include?(c)}.length == n}\nend\n",
            "def get_closest_vowel(word)\n    vowels = \"aeiouAEIOU\"\n    for i in (1..word.length - 1).reverse\n        if vowels.include?(word[i]) && !vowels.include?(word[i - 1]) && !vowels.include?(word[i + 1])\n            return word[i]\n        end\n    end\n    \"\"\nend\n",
            "def check(s)\n    depth = 0\n    for ch in s.chars\n        if ch == '('\n            depth += 1\n        else\n            depth -= 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    depth == 0\nend\ndef match_parens(lst)\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    if check(s1) || check(s2)\n        \"Yes\"\n    else\n        \"No\"\n    end\nend\n",
            "def maximum(arr, k)\n    return [] if k == 0\n    arr.sort[-k..-1]\nend\n",
            "def solution(lst)\n    return lst.each_with_index.select {|x, i| i % 2 == 0 and x % 2 != 0}.map {|x| x}.sum\nend\n",
            "def add_elements(arr, k)\n    arr.take(k).select {|n| n.to_s.length <= 2}.reduce(:+)\nend\n",
            "def get_odd_collatz(n)\n    collatz = [1]\n    while n != 1\n        if n % 2 != 0\n            collatz.append(n)\n            n = 3 * n + 1\n        else\n            n = n / 2\n        end\n    end\n    return collatz.sort\nend\n",
            "def valid_date(date)\n    return false if date.length != 10 or date[2] != \"-\" or date[5] != \"-\"\n    m = date[0..1].to_i\n    d = date[3..4].to_i\n    if [1, 3, 5, 7, 8, 10, 12].include?(m) and d >= 1 and d <= 31\n        return true\n    end\n    if [4, 6, 9, 11].include?(m) and d >= 1 and d <= 30\n        return true\n    end\n    if m == 2 and d >= 1 and d <= 29\n        return true\n    end\n    return false\nend\n",
            "def split_words(txt)\n    if txt.include?(\" \")\n        return txt.split(\" \")\n    elsif txt.include?(\",\")\n        return txt.split(\",\")\n    else\n        return [txt.count {|c| c.islower() and c.ord % 2 == 0}.to_s]\n    end\nend\n",
            "def is_sorted(lst)\n    return false if lst.each_cons(2).any? {|a, b| a > b}\n    freq = Hash.new(0)\n    lst.each {|i| freq[i] += 1}\n    max_freq = freq.values.max || 0\n    max_freq <= 2\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    for i in 2..Math.sqrt(n).floor\n        return false if n % i == 0\n    end\n    return true\nend\ndef intersection(interval1, interval2)\n    l = [interval1[0], interval2[0]].max\n    r = [interval1[1], interval2[1]].min\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\nend\n",
            "def prod_signs(arr)\n    return nil if arr.empty?\n    return 0 if arr.include?(0)\n    sign = -1 if arr.count {|n| n < 0} % 2 == 1\n    sign = 1 if arr.count {|n| n < 0} % 2 == 0\n    return sign * arr.map {|n| n.abs}.reduce(:+)\nend\n",
            "def min_path(grid, k)\n    n = grid.size\n    min_val = n * n + 1\n    for i in 0...n\n        for j in 0...n\n            if grid[i][j] == 1\n                temp = []\n                if i != 0\n                    temp.append(grid[i - 1][j])\n                end\n                if j != 0\n                    temp.append(grid[i][j - 1])\n                end\n                if i != n - 1\n                    temp.append(grid[i + 1][j])\n                end\n                if j != n - 1\n                    temp.append(grid[i][j + 1])\n                end\n                min_val = [min_val, temp.min].min\n            end\n        end\n    end\n    result = []\n    for i in 0...k\n        result.append(1 if i % 2 == 0 else min_val)\n    end\n    return result\nend\n",
            "def tri(n)\n    if n == 0\n        return [1]\n    end\n    seq = [1, 3]\n    for i in 2..n\n        if i % 2 == 0\n            seq.push(i / 2 + 1)\n        else\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        end\n    end\n    seq\nend\n",
            "def digits(n)\n    odds = n.to_s.chars.map {|d| d.to_i}.select {|d| d % 2 == 1}\n    return odds.reduce(1, :*) if odds.size > 0 else 0\nend\n",
            "def is_nested(s)\n    open_idx = []\n    close_idx = []\n    s.chars.each_with_index {|ch, i|\n        if ch == '['\n            open_idx.push(i)\n        elsif ch == ']'\n            close_idx.push(i)\n        end\n    }\n    close_idx.reverse!\n    cnt = 0\n    i = 0\n    l = close_idx.length\n    open_idx.each {|idx|\n        if i < l && idx < close_idx[i]\n            cnt += 1\n            i += 1\n        end\n    }\n    cnt >= 2\nend\n",
            "def sum_squares(lst)\n    result = 0\n    for n in lst\n        result += (n.ceil as Integer).pow(2)\n    end\n    result\nend\n",
            "def check_if_last_char_is_a_letter(txt)\n    if txt.empty?\n        return false\n    end\n    last = txt[txt.rindex(' ') + 1..-1]\n    return last.length == 1 and last[0].isalpha\nend\n",
            "def can_arrange(arr)\n    return -1 if arr.length <= 1\n    idx = (1..arr.length - 1).select {|i| arr[i] < arr[i - 1]}\n    return idx.max {|a, b| a <=> b}\nend\n",
            "def largest_smallest_integers(lst)\n    neg = lst.select {|i| i < 0}\n    pos = lst.select {|i| i > 0}\n    max_neg = neg.max\n    min_pos = pos.min\n    [max_neg, min_pos]\nend\n",
            "def any_to_real(o)\n    if o.is_a? String\n        return Float(o.gsub(',', '.'))\n    elsif o.is_a? Integer\n        return Float(o)\n    elsif o.is_a? Float\n        return o\n    else\n        raise RuntimeError(\"Type Error\")\n    end\nend\ndef compare_one(a, b)\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1\n        return nil\n    elsif a1 > b1\n        return a1\n    else\n        return b1\n    end\nend\n",
            "def is_equal_to_sum_even(n)\n    n % 2 == 0 && n >= 8\nend\n",
            "def special_factorial(n)\n    fact = 1\n    result = 1\n    for i in 1..(n + 1)\n        fact *= i\n        result *= fact\n    end\n    result\nend\n",
            "def fix_spaces(txt)\n    return RE.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\nend\n",
            "def file_name_check(file_name)\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if lst.length != 2 || !suf.include?(lst[1]) || lst[0].length == 0 || !lst[0][0].is_a?(String) || lst[0].chars.filter {|x| x.is_a?(String)}.count > 3\n        return \"No\"\n    end\n    \"Yes\"\nend\n",
            "def sum_squares(lst)\n    result = 0\n    for i in 0..lst.length-1\n        if i % 3 == 0\n            result += lst[i] * lst[i]\n        elsif i % 4 == 0\n            result += lst[i] * lst[i] * lst[i]\n        else\n            result += lst[i]\n        end\n    end\n    return result\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    for i in 2..Math.sqrt(n).floor\n        return false if n % i == 0\n    end\n    return true\nend\ndef words_in_sentence(sentence)\n    words = sentence.split(\" \")\n    return words.select {|w| is_prime(w.length)}.join(\" \")\nend\n",
            "def simplify(x, n)\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = xs[0].to_i * ns[0].to_i\n    den = xs[1].to_i * ns[1].to_i\n    num % den == 0\nend\n",
            "def digits_sum(n)\n    n_str = n.to_s\n    if n >= 0\n        return n_str.chars.map(&:to_i).reduce(:+)\n    else\n        return n_str[0..1].to_i * 2 + digits_sum(n.abs)\n    end\nend\ndef order_by_points(nums)\n    return nums.sort_by {|n| digits_sum(n)}\nend\n",
            "def special_filter(nums)\n    odds = \"13579\"\n    return nums.count {|n| n > 10 and n % 2 == 1 and odds.include?(n.to_s[0])}\nend\n",
            "def get_max_triples(n)\n    c = [0, 0, 0]\n    for i in 1..n\n        a = i * i - i + 1\n        c[a % 3] += 1\n    end\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\nend\n",
            "def bf(planet1, planet2)\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if !names.include?(planet1) || !names.include?(planet2)\n        return []\n    end\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r\n        l, r = r, l\n    end\n    if l == r\n        return []\n    end\n    return names[l + 1 .. r]\nend\n",
            "def sorted_list_sum(lst)\n    result = []\n    for s in lst\n        if s.length % 2 == 0\n            result.push(s.clone)\n        end\n    end\n    result.sort! {|a, b|\n        if a.length == b.length\n            a.cmp(b)\n        else\n            a.length <=> b.length\n        end\n    }\n    return result\nend\n",
            "def x_or_y(n, x, y)\n    return y if n < 2\n    for i in 2..Math.sqrt(n).to_i\n        return y if n % i == 0\n    end\n    x\nend\n",
            "def double_the_difference(lst)\n    lst.select {|n| n >= 0 and n % 2 == 1}.map {|n| n * n}.sum\nend\n",
            "def compare(game, guess)\n    game.zip(guess).map {|x, y| (x - y).abs}\nend\n",
            "def strongest_extension(class_name, extensions)\n    max_s = -Float::INFINITY\n    max_ext = \"\"\n    for ext in extensions\n        upper = 0\n        lower = 0\n        for c in ext.chars\n            if c.upcase?\n                upper += 1\n            elsif c.downcase?\n                lower += 1\n            end\n        end\n        s = upper - lower\n        if s > max_s\n            max_s = s\n            max_ext = ext\n        end\n    end\n    return \"#{class_name}.#{max_ext}\"\nend\n",
            "def cycpattern_check(a, b)\n    if a.length < b.length\n        return false\n    end\n    for i in 0..b.length-1\n        if b[i..-1] + b[0..i-1] in a\n            return true\n        end\n    end\n    return false\nend\n",
            "def even_odd_count(num)\n    ds = num.abs.to_s.chars\n    even = ds.select {|d| d.to_i % 2 == 0}.count\n    [even, ds.length - even]\nend\n",
            "def int_to_mini_roman(num)\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i in 0..values.length-1\n        while num >= values[i]\n            res.append(numerals[i])\n            num -= values[i]\n        end\n    end\n    return res.join\nend\n",
            "def right_angle_triangle(a, b, c)\n    s = [a, b, c].sort\n    return  s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\nend\n",
            "def find_max(words)\n    max_cnt = 0\n    max_w = \"\"\n    for w in words\n        cnt = w.chars.to_set.size\n        if cnt > max_cnt\n            max_cnt = cnt\n            max_w = w\n        elsif cnt == max_cnt\n            max_w = [max_w, w].min\n        end\n    end\n    max_w\nend\n",
            "def eat(num, need, remaining)\n    if need <= remaining\n        [num + need, remaining - need]\n    else\n        [num + remaining, 0]\n    end\nend\n",
            "def do_algebra(operators, operands)\n    ops = operators.dup\n    nums = operands.dup\n    i = ops.length - 1\n    while i >= 0\n        if ops[i] == \"**\"\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        end\n        i -= 1\n    end\n    i = 0\n    while i < ops.length\n        if ops[i] == \"*\"\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elsif ops[i] == \"//\"\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        end\n        i += 1\n    end\n    i = 0\n    while i < ops.length\n        if ops[i] == \"+\"\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elsif ops[i] == \"-\"\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        end\n        i += 1\n    end\n    return nums[0]\nend\n",
            "def solve(s)\n    if s.chars.none? {|ch| ch.match(/[a-zA-Z]/) }\n        return s.reverse\n    end\n    result = []\n    for ch in s.chars\n        if not ch.match(/[a-zA-Z]/)\n            result.append(ch)\n        elsif ch.match(/[A-Z]/)\n            result.append(ch.downcase)\n        elsif ch.match(/[a-z]/)\n            result.append(ch.upcase)\n        end\n    end\n    return result.join\nend\n",
            "def string_to_md5(txt)\n    if txt.empty?\n        return nil\n    end\n    md5_hash = Digest::MD5.new\n    md5_hash.update(txt)\n    md5_encoded = md5_hash.final\n    md5_encoded = md5_encoded.bytes.map {|b| format(\"%02x\", b)}.join(\"\")\n    return md5_encoded\nend\n",
            "def generate_integers(a, b)\n    lower = [2, [a, b].min].max\n    upper = [8, [a, b].max].min\n    (lower..upper).select {|i| i % 2 == 0}\nend\n"
        ],
        "scala": [
            "def hasCloseElements(numbers: Seq[Double], threshold: Double): Boolean = {\n    for (i <- 0 until numbers.length) {\n        for (j <- (i + 1) until numbers.length) {\n            if (math.abs(numbers(i) - numbers(j)) < threshold) {\n                return true\n            }\n        }\n    }\n    false\n}\n",
            "def separateParenGroups(parenString: String): Seq[String] = {\n    val groups = mutable.ListBuffer[String]()\n    val stk = mutable.ListBuffer[Char]()\n    var currentGroup = \"\"\n    val parens = parenString.replace(\" \", \"\")\n    for (ch <- parens) {\n        if (ch == '(') {\n            stk.addOne(ch)\n            currentGroup += ch\n        } else if (ch == ')') {\n            stk.remove(stk.size - 1)\n            currentGroup += ch\n            if (stk.isEmpty) {\n                groups.addOne(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    groups.toList\n}\n",
            "def truncateNumber(num: Double): Double = {\n    num - num.floor\n}\n",
            "def belowZero(operations: Seq[Int]): Boolean = {\n    var balance = 0\n    for (op <- operations) {\n        balance += op\n        if (balance < 0) {\n            return true\n        }\n    }\n    false\n}\n",
            "def meanAbsoluteDeviation(numbers: Seq[Double]): Double = {\n    val mean = numbers.sum / numbers.length\n    val deviation = numbers.map(x => (x - mean).abs).sum\n    deviation / numbers.length\n}\n",
            "def intersperse(numbers: Seq[Int], delimiter: Int): Seq[Int] = {\n    numbers.zipWithIndex.flatMap {\n        case (n, i) => if (i != 0) Seq(delimiter) else Seq(n)\n    }\n}\n",
            "def parseNestedParens(parenString: String): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    val parenGroups = parenString.split(\" \")\n    for (group <- parenGroups) {\n        var depth = 0\n        var maxDepth = 0\n        for (ch <- group.toCharArray) {\n            if (ch == '(') {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if (ch == ')') {\n                depth -= 1\n            }\n        }\n        result.addOne(maxDepth)\n    }\n    result.toList\n}\n",
            "def filterBySubstring(strs: Seq[String], substring: String): Seq[String] = {\n    strs.filter(_.contains(substring))\n}\n",
            "def sumProduct(numbers: Seq[Int]): Seq[Int] = {\n    val nSum = numbers.sum\n    val nProduct = numbers.fold(1)(_ * _)\n    Seq(nSum, nProduct)\n}\n",
            "def rollingMax(numbers: Seq[Int]): Seq[Int] = {\n    var maxSoFar = Int.MinValue\n    val result = mutable.ListBuffer[Int]()\n    for (num <- numbers) {\n        maxSoFar = maxSoFar.max(num)\n        result.addOne(maxSoFar)\n    }\n    result.toList\n}\n",
            "def makePalindrome(s: String): String = {\n    if (s == s.reverse) {\n        s\n    } else {\n        val i = s.reverse.indexOf(s)\n        if (i == -1) {\n            \"\"\n        } else {\n            s + s.take(i).reverse\n        }\n    }\n}\n",
            "def stringXor(a: String, b: String): String = {\n    val result = new StringBuilder()\n    for ((x, y) <- a.zip(b)) {\n        if (x == y) {\n            result.append('0')\n        } else {\n            result.append('1')\n        }\n    }\n    result.toString\n}\n",
            "def longest(strs: Seq[String]): Option[String] = {\n    if (strs.isEmpty) {\n        None\n    } else {\n        val longestS = strs.head\n        Some(strs.foldLeft(longestS)((s1, s2) => if (s1.length > s2.length) s1 else s2))\n    }\n}\n",
            "def greatestCommonDivisor(a: Int, b: Int): Int = {\n    if (b == 0) a else greatestCommonDivisor(b, a % b)\n}\n",
            "def allPrefixes(s: String): Seq[String] = {\n    s.indices.map(i => s.substring(0, i + 1)).toList\n}\n",
            "def stringSequence(n: Int): String = {\n    (0 to n).map(_.toString).mkString(\" \")\n}\n",
            "def countDistinctCharacters(s: String): Int = {\n    val set = mutable.Set.empty[Char]\n    for (c <- s.toLowerCase.toList) {\n        set.add(c)\n    }\n    set.size\n}\n",
            "def parseMusic(musicString: String): Seq[Int] = {\n    val durations = Map(\"o\" -> 4, \"o|\" -> 2, \".|\" -> 1)\n    val notes = musicString.split(\" \")\n    val result = mutable.ListBuffer[Int]()\n    for (note <- notes) {\n        result.addOne(durations(note))\n    }\n    result.toList\n}\n",
            "def howManyTimes(s: String, substring: String): Int = {\n    var times = 0\n    for (i <- 0 until s.length - substring.length + 1) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1\n        }\n    }\n    times\n}\n",
            "def sortNumbers(numbers: String): String = {\n    val numDict = mutable.Map[String, Int]()\n    numDict.put(\"zero\", 0)\n    numDict.put(\"one\", 1)\n    numDict.put(\"two\", 2)\n    numDict.put(\"three\", 3)\n    numDict.put(\"four\", 4)\n    numDict.put(\"five\", 5)\n    numDict.put(\"six\", 6)\n    numDict.put(\"seven\", 7)\n    numDict.put(\"eight\", 8)\n    numDict.put(\"nine\", 9)\n    val numList = mutable.ListBuffer[String]()\n    for (word <- numbers.split(\" \")) {\n        if (numDict.contains(word)) {\n            numList.addOne(word)\n        }\n    }\n    numList.sortWith((a, b) => numDict(a) < numDict(b))\n    numList.mkString(\" \")\n}\n",
            "def findClosestElements(numbers: Seq[Double]): Seq[Double] = {\n    val sortedNumbers = numbers.sorted\n    var minDiff = Double.PositiveInfinity\n    var closestPair = Seq[Double]()\n    for (i <- 1 until sortedNumbers.length) {\n        val diff = sortedNumbers(i) - sortedNumbers(i - 1)\n        if (diff < minDiff) {\n            minDiff = diff\n            closestPair = Seq(sortedNumbers(i - 1), sortedNumbers(i))\n        }\n    }\n    closestPair\n}\n",
            "def rescaleToUnit(numbers: Seq[Double]): Seq[Double] = {\n    val minNum = numbers.min\n    val maxNum = numbers.max\n    if (minNum == maxNum) {\n        Seq.fill(numbers.size)(0.0)\n    } else {\n        numbers.map(num => (num - minNum) / (maxNum - minNum))\n    }\n}\n",
            "def filterIntegers(values: Seq[Any]): Seq[Int] = {\n    values.flatMap {\n        case x: Int => Some(x)\n        case _ => None\n    }\n}\n",
            "def strLength(s: String): Int = {\n    s.length\n}\n",
            "def largestDivisor(n: Int): Int = {\n    for (i <- 2 to n) {\n        if (n % i == 0) {\n            return n / i\n        }\n    }\n    1\n}\n",
            "def factorize(n: Int): Seq[Int] = {\n    val factors = mutable.ListBuffer[Int]()\n    var divisor = 2\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.addOne(divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    factors.toList\n}\n",
            "def removeDuplicates(numbers: Seq[Int]): Seq[Int] = {\n    val counts = mutable.Map[Int, Int]()\n    for (num <- numbers) {\n        counts.updateWith(num)(_.map(_ + 1).orElse(Some(1)))\n    }\n    val res = numbers.filter(num => counts(num) == 1)\n    res\n}\n",
            "def flipCase(s: String): String = {\n    s.foldLeft(\"\") { (flipped, ch) =>\n        if (!ch.isLetter) {\n            flipped + ch\n        } else if (ch.isLower) {\n            flipped + ch.toUpper\n        } else if (ch.isUpper) {\n            flipped + ch.toLower\n        } else {\n            flipped\n        }\n    }\n}\n",
            "def concatenate(strs: Seq[String]): String = {\n    strs.mkString\n}\n",
            "def filterByPrefix(strs: Seq[String], prefixStr: String): Seq[String] = {\n    strs.filter(_.startsWith(prefixStr))\n}\n",
            "def getPositive(l: Seq[Int]): Seq[Int] = {\n    l.filter(_ > 0)\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) false else {\n        for (i <- 2 to floor(sqrt(n)).toInt) {\n            if (n % i == 0) return false\n        }\n        true\n    }\n}\n",
            "def poly(xs: Seq[Int], x: Double): Double = {\n    xs.zipWithIndex.map { case (e, i) => e * x.pow(i) }.sum\n}\ndef findZero(xs: Seq[Int]): Double = {\n    var x1 = 1.0\n    var x2 = -1.0\n    while (poly(xs, x1) * poly(xs, x2) > 0.0) {\n        x1 *= 2.0\n        x2 *= 2.0\n    }\n    while (x1 - x2).abs > 1e-10 {\n        val mid = (x1 + x2) / 2.0\n        if (poly(xs, mid) == 0.0) {\n            return mid\n        } else if (poly(xs, mid) * poly(xs, x1) < 0.0) {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    (x1 + x2) / 2.0\n}\n",
            "def sortThird(l: Seq[Int]): Seq[Int] = {\n    val sortedThird = l.grouped(3).map(_.sorted).flatten\n    l.zipWithIndex.map { case (e, i) => if (i % 3 == 0) sortedThird(i / 3) else e }\n}\n",
            "def listUnique(l: Seq[Int]): Seq[Int] = {\n    l.distinct.sorted\n}\n",
            "def maxElement(l: Seq[Int]): Int = {\n    if (l.isEmpty) 0 else l.max\n}\n",
            "def fizzBuzz(n: Int): Int = {\n    var cnt = 0\n    for (i <- 1 to n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString.count(_ == '7')\n        }\n    }\n    cnt\n}\n",
            "def sortEven(l: Seq[Int]): Seq[Int] = {\n    val sortedEven = l.filter(_ % 2 == 0).sorted\n    l.zipWithIndex.map { case (e, i) => if (i % 2 == 0) sortedEven(i / 2) else e }\n}\n",
            "def encodeCyclic(s: String): String = {\n    val result = new StringBuilder()\n    for (i <- 0 until s.length by 3) {\n        if (i + 3 > s.length) {\n            result.append(s.substring(i))\n        } else {\n            result.append(s.substring(i + 1, i + 3))\n            result.append(s.substring(i, i + 1))\n        }\n    }\n    result.toString\n}\ndef decodeCyclic(s: String): String = {\n    encodeCyclic(encodeCyclic(s))\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) return false\n    for (i <- 2 to math.sqrt(n).toInt + 1) {\n        if (n % i == 0) return false\n    }\n    true\n}\ndef primeFib(n: Int): Int = {\n    var f = Array(0, 1)\n    var cnt = 0\n    while (cnt < n) {\n        f = Array(f(1), f(0) + f(1))\n        if (isPrime(f(1))) { cnt += 1 }\n    }\n    f(1)\n}\n",
            "def triplesSumToZero(l: Seq[Int]): Boolean = {\n    for (i <- 0 until l.length) {\n        for (j <- (i + 1) until l.length) {\n            for (k <- (j + 1) until l.length) {\n                if (l(i) + l(j) + l(k) == 0) {\n                    return true\n                }\n            }\n        }\n    }\n    false\n}\n",
            "def carRaceCollision(n: Int): Int = {\n    n.pow(2)\n}\n",
            "def incrList(l: Seq[Int]): Seq[Int] = {\n    l.map(_ + 1)\n}\n",
            "def pairsSumToZero(l: Seq[Int]): Boolean = {\n    val seen = mutable.Set.empty[Int]\n    for (num <- l) {\n        if (seen.contains(-num)) {\n            return true\n        }\n        seen.add(num)\n    }\n    false\n}\n",
            "def changeBase(x: Int, bas: Int): String = {\n    if (x == 0) {\n        return \"0\"\n    }\n    val digits = mutable.ListBuffer[String]()\n    var x_ = x\n    while (x_ > 0) {\n        digits.addOne(x_ % bas + \"\")\n        x_ /= bas\n    }\n    digits.reverse.mkString\n}\n",
            "def triangleArea(a: Int, h: Int): Double = {\n    (a * h) as Double / 2.0\n}\n",
            "def fib4(n: Int): Int = {\n    val fib = Array(0, 0, 2, 0)\n    for (i <- 4 to n) {\n        fib(i % 4) = fib.slice(i - 3, i).sum\n    }\n    fib(n % 4)\n}\n",
            "def median(l: Seq[Double]): Double = {\n    val sl = l.sorted\n    if (sl.length % 2 != 0) {\n        sl(sl.length / 2)\n    } else {\n        (sl(sl.length / 2) + sl(sl.length / 2 - 1)) / 2.0\n    }\n}\n",
            "def isPalindrome(txt: String): Boolean = {\n    txt == txt.reverse\n}\n",
            "def modp(n: Int, p: Int): Int = {\n    var ret = 1\n    for (_ <- 0 until n) {\n        ret = (ret * 2) % p\n    }\n    ret\n}\n",
            "def encodeShift(s: String): String = {\n    s.map(ch => ((ch.toInt - 97 + 5) % 26 + 97).toChar)\n}\ndef decodeShift(s: String): String = {\n    s.map(ch => ((ch.toInt - 97 + 21) % 26 + 97).toChar)\n}\n",
            "def removeVowels(txt: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    val result = new StringBuilder()\n    for (char <- txt.toCharArray) {\n        if (!vowels.contains(char)) {\n            result.append(char)\n        }\n    }\n    result.toString\n}\n",
            "def belowThreshold(l: Seq[Int], t: Int): Boolean = {\n    l.forall(_ < t)\n}\n",
            "def add(x: Int, y: Int): Int = {\n    x + y\n}\n",
            "def sameChars(s0: String, s1: String): Boolean = {\n    s0.toSet == s1.toSet\n}\n",
            "def fib(n: Int): Int = {\n    if (n <= 1) {\n        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n}\n",
            "def correctBracketing(brackets: String): Boolean = {\n    var depth = 0\n    for (b <- brackets) {\n        if (b == '<') {\n            depth += 1\n        } else if (b == '>') {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    depth == 0\n}\n",
            "def monotonic(l: Seq[Int]): Boolean = {\n    val diff = l.sliding(2).map(w => w(1) - w(0)).toList\n    diff.forall(_ <= 0) || diff.forall(_ >= 0)\n}\n",
            "def common(l1: Seq[Int], l2: Seq[Int]): Seq[Int] = {\n    (l1.toSet & l2.toSet).toList.sorted\n}\n",
            "def largestPrimeFactor(n: Int): Int = {\n    var i = 2\n    while (i * i <= n) {\n        if (n % i != 0) {\n            i += 1\n        } else {\n            n /= i\n        }\n    }\n    n\n}\n",
            "def sumToN(n: Int): Int = {\n    (n * (n + 1)) / 2\n}\n",
            "def correctBracketing(brackets: String): Boolean = {\n    var depth = 0\n    for (b <- brackets) {\n        if (b == '(') {\n            depth += 1\n        } else if (b == ')') {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    depth == 0\n}\n",
            "def derivative(xs: Seq[Int]): Seq[Int] = {\n    xs.zipWithIndex.map { case (x, i) => x * (i + 1) }\n}\n",
            "def fibfib(n: Int): Int = {\n    if (n <= 1) 0 else {\n        var a = 0\n        var b = 0\n        var c = 1\n        while (n > 2) {\n            a = b\n            b = c\n            c = a + b + c\n            n -= 1\n        }\n        c\n    }\n}\n",
            "def vowelsCount(s: String): Int = {\n    val vowels = \"aeiou\"\n    var cnt = 0\n    for (i <- 0 until s.length) {\n        if (vowels.contains(s(i).toLower) || (i == s.length - 1 && s(i).toLower == 'y')) {\n            cnt += 1\n        }\n    }\n    cnt\n}\n",
            "def circularShift(x: Int, shift: Int): String = {\n    val xStr = x.toString\n    if (shift > xStr.length) {\n        xStr.reverse\n    } else {\n        xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift)\n    }\n}\n",
            "def digitSum(s: String): Int = {\n    s.filter(_.isUpper).map(_.toInt).sum\n}\n",
            "def fruitDistribution(s: String, n: Int): Int = {\n    val words = s.split(\" \").toList\n    val apples = words(words.indexOf(\"apples\") - 1).toInt\n    val oranges = words(words.indexOf(\"oranges\") - 1).toInt\n    n - apples - oranges\n}\n",
            "def pluck(arr: Seq[Int]): Seq[Int] = {\n    val evens = mutable.ListBuffer[Int]()\n    for (n <- arr) {\n        if (n % 2 == 0) {\n            evens.addOne(n)\n        }\n    }\n    if (evens.isEmpty) {\n        return Seq.empty\n    }\n    val minEven = evens.min\n    Seq(minEven, arr.indexOf(minEven))\n}\n",
            "def search(lst: Seq[Int]): Int = {\n    val freqs = mutable.Map[Int, Int]()\n    for (n <- lst) {\n        freqs.updateWith(n)(_ => Some(freqs.getOrElse(n, 0) + 1))\n    }\n    val goodVals: Seq[Int] = freqs.iterator.filter { case (k, v) => v >= k }.map { case (k, _) => k }.toList\n    goodVals.maxOption.getOrElse(-1)\n}\n",
            "def strangeSortList(lst: Seq[Int]): Seq[Int] = {\n    val sl = lst.sorted\n    val result = mutable.ListBuffer[Int]()\n    var left, right = 0, sl.size - 1\n    while (left <= right) {\n        result.addOne(sl(left))\n        left += 1\n        if (left <= right) {\n            result.addOne(sl(right))\n            right -= 1\n        }\n    }\n    result.toList\n}\n",
            "def triangleArea(a: Int, b: Int, c: Int): Double = {\n    if (a + b > c && a + c > b && b + c > a) {\n        val s = (a + b + c) / 2.0\n        sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        -1.0\n    }\n}\n",
            "def willItFly(q: Seq[Int], w: Int): Boolean = {\n    if (q.isEmpty) {\n        return false\n    }\n    val isPalin = q.zip(q.reverse).forall(p => p._1 == p._2)\n    val total = q.sum\n    isPalin && total <= w\n}\n",
            "def smallestChange(arr: Seq[Int]): Int = {\n    var ans = 0\n    for (i <- 0 until (arr.length / 2)) {\n        if (arr(i) != arr(arr.length - i - 1)) {\n            ans += 1\n        }\n    }\n    ans\n}\n",
            "def totalMatch(lst1: Seq[String], lst2: Seq[String]): Seq[String] = {\n    val cnt1 = lst1.map(_.length).sum\n    val cnt2 = lst2.map(_.length).sum\n    if (cnt1 <= cnt2) lst1 else lst2\n}\n",
            "def isMultiplyPrime(a: Int): Boolean = {\n    if (a < 2) return false\n    var cnt = 0\n    for (i <- 2 to floor(sqrt(a)).toInt) {\n        if (a % i == 0) {\n            while (a % i == 0) {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    cnt == 3\n}\n",
            "def isSimplePower(x: Int, n: Int): Boolean = {\n    if (n < 2) {\n        return x == n\n    }\n    var tmp = 1\n    while (tmp < x) {\n        tmp *= n\n    }\n    tmp == x\n}\n",
            "def isCube(a: Int): Boolean = {\n    val a1 = math.abs(a)\n    val root = math.round(math.pow(a1, 1.0 / 3.0)).toInt\n    root * root * root == a1\n}\n",
            "def hexKey(num: String): Int = {\n    num.count(Set(\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"))\n}\n",
            "def decimalToBinary(dec: Int): String = {\n    f\"db${dec.toBinaryString}%bdb\"\n}\n",
            "def isHappy(s: String): Boolean = {\n    if (s.length < 3) {\n        return false\n    }\n    for (i <- 0 until s.length - 2) {\n        if (s.charAt(i) == s.charAt(i + 1) ||\n            s.charAt(i) == s.charAt(i + 2) ||\n            s.charAt(i + 1) == s.charAt(i + 2)) {\n            return false\n        }\n    }\n    true\n}\n",
            "def numericalLetterGrade(grades: Seq[Double]): Seq[String] = {\n    val result = mutable.ListBuffer[String]()\n    for (g <- grades) {\n        if (g == 4.0) {\n            result.addOne(\"A+\")\n        } else if (g > 3.7) {\n            result.addOne(\"A\")\n        } else if (g > 3.3) {\n            result.addOne(\"A-\")\n        } else if (g > 3.0) {\n            result.addOne(\"B+\")\n        } else if (g > 2.7) {\n            result.addOne(\"B\")\n        } else if (g > 2.3) {\n            result.addOne(\"B-\")\n        } else if (g > 2.0) {\n            result.addOne(\"C+\")\n        } else if (g > 1.7) {\n            result.addOne(\"C\")\n        } else if (g > 1.3) {\n            result.addOne(\"C-\")\n        } else if (g > 1.0) {\n            result.addOne(\"D+\")\n        } else if (g > 0.7) {\n            result.addOne(\"D\")\n        } else if (g > 0.0) {\n            result.addOne(\"D-\")\n        } else {\n            result.addOne(\"E\")\n        }\n    }\n    result.toList\n}\n",
            "def primeLength(s: String): Boolean = {\n    val length = s.length\n    if (length < 2) {\n        return false\n    }\n    for (i <- 2 to floor(sqrt(length)).toInt) {\n        if (length % i == 0) {\n            return false\n        }\n    }\n    true\n}\n",
            "def startsOneEnds(n: Int): Int = {\n    if (n == 1) 1 else 2 * 9 * (10 ** (n - 2))\n}\n",
            "def solve(n: Int): String = {\n    val digitsSum = n.toString.map(_.asDigit).sum\n    f\"$digitsSum%b\"\n}\n",
            "def add(lst: Seq[Int]): Int = {\n    lst.zipWithIndex.filter { case (_, i) => i % 2 == 1 && lst(i) % 2 == 0 }.map(_._2).sum\n}\n",
            "def antiShuffle(s: String): String = {\n    val words = s.split(\" \").map(word => {\n        val chars = word.toCharArray\n        java.util.Arrays.sort(chars)\n        new String(chars)\n    })\n    words.mkString(\" \")\n}\n",
            "def getRow(lst: Seq[Seq[Int]], x: Int): Seq[Seq[Int]] = {\n    val coords = mutable.ListBuffer[Seq[Int]]()\n    for (i <- 0 until lst.length) {\n        for (j <- 0 until lst(i).length) {\n            if (lst(i)(j) == x) {\n                coords.addOne(Seq(i, j))\n            }\n        }\n    }\n    coords.sortWith((a, b) => a(0).compareTo(b(0)) < 0 || (a(0) == b(0) && a(1).compareTo(b(1)) > 0))\n    coords.toList\n}\n",
            "def sortArray(arr: Seq[Int]): Seq[Int] = {\n    if (arr.isEmpty) {\n        return Seq.empty\n    }\n    if ((arr.head + arr.last) % 2 == 0) {\n        return arr.sorted.reverse\n    } else {\n        return arr.sorted\n    }\n}\n",
            "def encrypt(s: String): String = {\n    s.map(ch => {\n        val shifted = ch.toByte + 4\n        if (shifted > 'z'.toByte) {\n            (shifted - 26).toChar\n        } else {\n            shifted.toChar\n        }\n    })\n}\n",
            "def nextSmallest(lst: Seq[Int]): Option[Int] = {\n    val sl = mutable.ListBuffer(lst: _*)\n    sl.sortWith(_ < _)\n    sl.dedup\n    if (sl.size < 2) {\n        None\n    } else {\n        Some(sl(1))\n    }\n}\n",
            "def isBored(s: String): Int = {\n    val re = \"\"\"[.!?]\\s*\"\"\".r\n    val sentences = re.split(s).toList\n    sentences.count(sentence => sentence.length >= 2 && sentence.startsWith(\"I \"))\n}\n",
            "def anyInt(x: Any, y: Any, z: Any): Boolean = {\n    x match {\n        case x: Int => y match {\n            case y: Int => z match {\n                case z: Int => x + y == z || x + z == y || y + z == x\n                case _ => false\n            }\n            case _ => false\n        }\n        case _ => false\n    }\n}\n",
            "def encode(message: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    val result = new StringBuilder()\n    for (ch <- message) {\n        if (ch.isLetter) {\n            val ch1 = if (ch.isLower) ch.toUpper else ch.toLower\n            if (vowels.contains(ch1)) {\n                result.append(ch1.toInt + 2)\n            } else {\n                result.append(ch1)\n            }\n        } else {\n            result.append(ch)\n        }\n    }\n    result.toString\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) return false\n    for (i <- 2 to floor(sqrt(n)).toInt) {\n        if (n % i == 0) return false\n    }\n    true\n}\ndef skjkasdkd(lst: Seq[Int]): Int = {\n    val primes = lst.filter(isPrime)\n    if (primes.isEmpty) return 0\n    val largest = primes.max.toString\n    largest.map(_.asDigit).sum\n}\n",
            "def checkDictCase(d: Map[String,String]): Boolean = {\n    if (d.isEmpty) {\n        return false\n    }\n    val keys = d.keys\n    val lowerKeys = keys.filter(c => c.isLower)\n    val upperKeys = keys.filter(c => c.isUpper)\n    lowerKeys.nonEmpty || upperKeys.nonEmpty\n}\n",
            "def countUpTo(n: Int): Seq[Int] = {\n    val primes = mutable.ListBuffer[Int]()\n    for (num <- 2 to n) {\n        if (primes.forall(p => num % p != 0)) {\n            primes.addOne(num)\n        }\n    }\n    primes.toList\n}\n",
            "def multiply(a: Int, b: Int): Int = {\n    (a.abs % 10) * (b.abs % 10)\n}\n",
            "def countUpper(s: String): Int = {\n    val vowels = \"AEIOU\"\n    var result = 0\n    for ((i, c) <- s.zipWithIndex) {\n        if (i % 2 == 0 && vowels.contains(c)) {\n            result += 1\n        }\n    }\n    result\n}\n",
            "def closestInteger(value: String): Int = {\n    val num = value.toDouble\n    if (num >= 0.0) {\n        (num + 0.5).floor.toInt\n    } else {\n        (num - 0.5).ceil.toInt\n    }\n}\n",
            "def makeAPile(n: Int): Seq[Int] = {\n    (0 until n).map(i => n + 2 * i).toList\n}\n",
            "def wordsString(s: String): Seq[String] = {\n    val re = new Regex(\", | \")\n    val result = mutable.ListBuffer[String]()\n    for (w <- re.split(s)) {\n        if (w.length > 0) {\n            result.addOne(w)\n        }\n    }\n    result.toList\n}\n",
            "def chooseNum(x: Int, y: Int): Int = {\n    if (x > y) {\n        return -1\n    }\n    if (y % 2 == 0) {\n        return y\n    }\n    if (x != y) {\n        return y - 1\n    }\n    -1\n}\n",
            "def roundedAvg(n: Int, m: Int): Option[String] = {\n    if (n > m) {\n        None\n    } else {\n        val rAvg = (m + n) / 2.0 + 0.5\n        Some(Integer.toBinaryString(rAvg.toInt))\n    }\n}\n",
            "def uniqueDigits(x: Seq[Int]): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    for (num <- x) {\n        if (allDigitsOdd(num.toString)) {\n            result.addOne(num)\n        }\n    }\n    result.toList.sorted\n}\ndef allDigitsOdd(s: String): Boolean = {\n    s.forall(digit => digit.toInt % 2 != 0)\n}\n",
            "def byLength(arr: Seq[Int]): Seq[String] = {\n    val digitNames = Seq(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    val sortedArr = arr.filter(x => 1 <= x && x <= 9).sorted.reverse\n    sortedArr.map(x => digitNames(x - 1))\n}\n",
            "def f(n: Int): Seq[Int] = {\n    val nums = mutable.ListBuffer[Int]()\n    for (i <- 1 to n) {\n        nums.addOne(i)\n    }\n    val result = mutable.ListBuffer[Int]()\n    for (i <- nums) {\n        if (i % 2 != 0) {\n            result.addOne(nums.slice(0, i).sum)\n        } else {\n            result.addOne(nums.slice(0, i).reduce(_ * _))\n        }\n    }\n    result.toList\n}\n",
            "def isPalindrome(txt: String): Boolean = {\n    txt == txt.reverse\n}\ndef evenOddPalindrome(n: Int): Seq[Int] = {\n    val cnt = Array(0, 0)\n    for (i <- 1 to n) {\n        if (isPalindrome(i.toString)) {\n            cnt(i % 2) += 1\n        }\n    }\n    cnt\n}\n",
            "def countNums(arr: Seq[Int]): Int = {\n    val result = mutable.ListBuffer[Int]()\n    for (n <- arr) {\n        val n_str = n.toString\n        if (n >= 0) {\n            result.addOne(n_str.map(_.asDigit).sum)\n        } else {\n            result.addOne(n_str.take(2).map(_.asDigit).sum * 2 + countNums(Seq(n.abs)))\n        }\n    }\n    result.toList.count(_ > 0)\n}\n",
            "def moveOneBall(arr: Seq[Int]): Boolean = {\n    if (arr.isEmpty) {\n        return true\n    }\n    val sortedArr = arr.sorted\n    for (i <- 0 until arr.length) {\n        if (arr.drop(i) == sortedArr.take(arr.length - i) && arr.take(i) == sortedArr.drop(arr.length - i)) {\n            return true\n        }\n    }\n    false\n}\n",
            "def canExchange(lst1: Seq[Int], lst2: Seq[Int]): String = {\n    val oddCnt = lst1.count(_ % 2 != 0)\n    val evenCnt = lst2.count(_ % 2 == 0)\n    if (evenCnt >= oddCnt) \"YES\" else \"NO\"\n}\n",
            "def histogram(test: String): Map[String,Int] = {\n    val freq = mutable.Map[String,Int]()\n    val words = test.split(\" \").filter(w => w.length > 0).toList\n    for (w <- words) {\n        freq.update(w, freq.getOrElse(w, 0) + 1)\n    }\n    val result = mutable.Map[String,Int]()\n    if (freq.size > 0) {\n        val max_freq = freq.values.max\n        for ((k, v) <- freq) {\n            if (v == max_freq) {\n                result.update(k, v)\n            }\n        }\n    }\n    result.toMap\n}\n",
            "def reverseDelete(s: String, c: String): Seq[String] = {\n    val s1 = s.filterNot(c.contains(_))\n    val result = mutable.ListBuffer[String]()\n    result.addOne(s1)\n    result.addOne(if (s1 == s1.reverse) \"yes\" else \"no\")\n    result.toList\n}\n",
            "def oddCount(lst: Seq[String]): Seq[String] = {\n    lst.map(num => {\n        val n = num.count(d => (d.toInt % 2) == 1)\n        val rs = \"the number of odd elements in the string i of the input.\"\n        rs.replace(\"i\", n.toString)\n    })\n}\n",
            "def minSubArraySum(nums: Seq[Int]): Int = {\n    var minSum = 0\n    var curSum = 0\n    for (n <- nums) {\n        curSum = Math.min(curSum + n, 0)\n        minSum = Math.min(curSum, minSum)\n    }\n    if (minSum == 0) {\n        minSum = nums.min\n    }\n    minSum\n}\n",
            "def maxFill(grid: Seq[Seq[Int]], capacity: Int): Int = {\n    grid.map(arr => (arr.sum.toDouble / capacity.toDouble).ceil.toInt).sum\n}\n",
            "def countOnes(num: Int): Int = {\n    var count = 0\n    var num = num\n    while (num > 0) {\n        if ((num & 1) == 1) {\n            count += 1\n        }\n        num >>= 1\n    }\n    count\n}\ndef sortArray(arr: Seq[Int]): Seq[Int] = {\n    val arr = arr.clone()\n    arr.sortWith((a, b) => {\n        val a_count = countOnes(a)\n        val b_count = countOnes(b)\n        if (a_count == b_count) {\n            a.compare(b)\n        } else {\n            a_count.compare(b_count)\n        }\n    })\n    arr\n}\n",
            "def selectWords(s: String, n: Int): Seq[String] = {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\"\n    val words = s.split(\" \").filter(_.nonEmpty)\n    words.filter(w => w.count(c => consonants.contains(c.toLower)) == n)\n}\n",
            "def getClosestVowel(word: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    for (i <- (1 until word.length).reverse) {\n        if (vowels.contains(word.charAt(i)) && !vowels.contains(word.charAt(i - 1)) && !vowels.contains(word.charAt(i + 1))) {\n            return word.charAt(i).toString\n        }\n    }\n    \"\"\n}\n",
            "def matchParens(lst: Seq[String]): String = {\n    val s1 = lst(0) + lst(1)\n    val s2 = lst(1) + lst(0)\n    if (check(s1) || check(s2)) \"Yes\" else \"No\"\n}\ndef check(s: String): Boolean = {\n    var depth = 0\n    for (ch <- s) {\n        if (ch == '(') {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    depth == 0\n}\n",
            "def maximum(arr: Seq[Int], k: Int): Seq[Int] = {\n    if (k == 0) {\n        Seq.empty\n    } else {\n        arr.sorted.takeRight(k)\n    }\n}\n",
            "def solution(lst: Seq[Int]): Int = {\n    lst.zipWithIndex.filter { case (x, i) => i % 2 == 0 && x % 2 != 0 }.map(_._1).sum\n}\n",
            "def addElements(arr: Seq[Int], k: Int): Int = {\n    arr.take(k).filter(n => n.toString.length <= 2).sum\n}\n",
            "def getOddCollatz(n: Int): Seq[Int] = {\n    val collatz = mutable.ListBuffer[Int](1)\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.addOne(n)\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    collatz.toList.sorted\n}\n",
            "def validDate(date: String): Boolean = {\n    if (date.length != 10 || date(2) != '-' || date(5) != '-') {\n        return false\n    }\n    val m = date.substring(0, 2).toInt\n    val d = date.substring(3, 5).toInt\n    if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n        if (d >= 1 && d <= 31) {\n            return true\n        }\n    }\n    if (m == 4 || m == 6 || m == 9 || m == 11) {\n        if (d >= 1 && d <= 30) {\n            return true\n        }\n    }\n    if (m == 2) {\n        if (d >= 1 && d <= 29) {\n            return true\n        }\n    }\n    return false\n}\n",
            "def splitWords(txt: String): Seq[String] = {\n    if (txt.contains(\" \")) {\n        txt.split(\" \")\n    } else if (txt.contains(\",\")) {\n        txt.split(\",\")\n    } else {\n        Seq(txt.count(c => c.isLower && c.toInt % 2 == 0).toString)\n    }\n}\n",
            "def isSorted(lst: Seq[Int]): Boolean = {\n    if (!lst.sliding(2).forall(w => w(0) <= w(1))) {\n        return false\n    }\n    val freq = mutable.Map[Int, Int]()\n    for (i <- lst) {\n        freq.updateWith(i) {\n            case Some(v) => Some(v + 1)\n            case None => Some(1)\n        }\n    }\n    val maxFreq = freq.values.max\n    maxFreq <= 2\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) false else {\n        val sqrtN = sqrt(n).toInt\n        for (i <- 2 to sqrtN) {\n            if (n % i == 0) return false\n        }\n        true\n    }\n}\ndef intersection(interval1: Seq[Int], interval2: Seq[Int]): String = {\n    val l = math.max(interval1(0), interval2(0))\n    val r = math.min(interval1(1), interval2(1))\n    val length = r - l\n    if (length > 0 && isPrime(length)) \"YES\" else \"NO\"\n}\n",
            "def prodSigns(arr: Seq[Int]): Option[Int] = {\n    if (arr.isEmpty) None\n    else if (arr.contains(0)) Some(0)\n    else {\n        val sign = if (arr.count(_ < 0) % 2 == 1) -1 else 1\n        Some(sign * arr.map(Math.abs).sum)\n    }\n}\n",
            "def minPath(grid: Seq[Seq[Int]], k: Int): Seq[Int] = {\n    val n = grid.size\n    var minVal = n * n + 1\n    for (i <- 0 until n) {\n        for (j <- 0 until n) {\n            if (grid(i)(j) == 1) {\n                val temp = mutable.ListBuffer[Int]()\n                if (i != 0) {\n                    temp.addOne(grid(i - 1)(j))\n                }\n                if (j != 0) {\n                    temp.addOne(grid(i)(j - 1))\n                }\n                if (i != n - 1) {\n                    temp.addOne(grid(i + 1)(j))\n                }\n                if (j != n - 1) {\n                    temp.addOne(grid(i)(j + 1))\n                }\n                minVal = math.min(temp.toList: _*)\n            }\n        }\n    }\n    val result = mutable.ListBuffer[Int]()\n    for (i <- 0 until k) {\n        result.addOne(1)\n    }\n    result.toList\n}\n",
            "def tri(n: Int): Seq[Int] = {\n    if (n == 0) {\n        return Seq(1)\n    }\n    var seq = Seq(1, 3)\n    for (i <- 2 to n) {\n        if (i % 2 == 0) {\n            seq = seq :+ (i / 2 + 1)\n        } else {\n            seq = seq :+ (seq(i - 1) + seq(i - 2) + (i + 3) / 2)\n        }\n    }\n    seq\n}\n",
            "def digits(n: Int): Int = {\n    val odds = mutable.ListBuffer[Int]()\n    for (d <- n.toString) {\n        val digit = d.toString.toInt\n        if (digit % 2 == 1) {\n            odds.addOne(digit)\n        }\n    }\n    if (odds.nonEmpty) {\n        odds.reduce(_ * _)\n    } else {\n        0\n    }\n}\n",
            "def isNested(s: String): Boolean = {\n    val openIdx = mutable.ListBuffer[Int]()\n    val closeIdx = mutable.ListBuffer[Int]()\n    for ((i, ch) <- s.zipWithIndex) {\n        if (ch == '[') {\n            openIdx.addOne(i)\n        } else if (ch == ']') {\n            closeIdx.addOne(i)\n        }\n    }\n    closeIdx.reverse()\n    var cnt = 0\n    var i = 0\n    val l = closeIdx.length\n    for (idx <- openIdx) {\n        if (i < l && idx < closeIdx(i)) {\n            cnt += 1\n            i += 1\n        }\n    }\n    cnt >= 2\n}\n",
            "def sumSquares(lst: Seq[Double]): Int = {\n    lst.map(n => (n.ceil.toInt).pow(2)).sum\n}\n",
            "def checkIfLastCharIsALetter(txt: String): Boolean = {\n    if (txt.isEmpty) {\n        return false\n    }\n    val last = txt.substring(txt.lastIndexOf(' ') + 1)\n    last.length == 1 && last.charAt(0).isLetter\n}\n",
            "def canArrange(arr: Seq[Int]): Int = {\n    if (arr.size <= 1) -1 else arr.zipWithIndex.filter(_._1 < arr(_.i - 1)).map(_._2).max\n}\n",
            "def largestSmallestIntegers(lst: Seq[Int]): Seq[Option[Int]] = {\n    val neg = lst.filter(_ < 0)\n    val pos = lst.filter(_ > 0)\n    val maxNeg = neg.maxOption\n    val minPos = pos.minOption\n    Seq(maxNeg, minPos)\n}\n",
            "def compareOne(a: Any, b: Any): Option[Double] = {\n    val a1 = Try(a.toString.replace(',','.').toDouble).toOption\n    val b1 = Try(b.toString.replace(',','.').toDouble).toOption\n    (a1, b1) match {\n        case (Some(a1), Some(b1)) =>\n            if (a1 == b1) None\n            else if (a1 > b1) Some(a1)\n            else Some(b1)\n        case _ => None\n    }\n}\n",
            "def isEqualToSumEven(n: Int): Boolean = {\n    n % 2 == 0 && n >= 8\n}\n",
            "def specialFactorial(n: Int): Int = {\n    var fact = 1\n    var result = 1\n    for (i <- 1 to (n + 1)) {\n        fact *= i\n        result *= fact\n    }\n    result\n}\n",
            "def fixSpaces(txt: String): String = {\n    val re = new Regex(\"\\\\s{3,}\")\n    re.replaceAllIn(txt, \"-\").replace(\" \", \"_\")\n}\n",
            "def fileNameCheck(fileName: String): String = {\n    val suf = List(\"txt\", \"exe\", \"dll\")\n    val lst = fileName.split('.').toList\n    if (lst.length != 2 || !suf.contains(lst(1)) || lst(0).length == 0 || !lst(0).head.isLetter || lst(0).filter(_.isDigit).length > 3) {\n        \"No\"\n    } else {\n        \"Yes\"\n    }\n}\n",
            "def sumSquares(lst: Seq[Int]): Int = {\n    lst.zipWithIndex.foldLeft(0) {\n        case (result, (e, i)) =>\n            if (i % 3 == 0) result + e * e\n            else if (i % 4 == 0) result + e * e * e\n            else result + e\n    }\n}\n",
            "def wordsInSentence(sentence: String): String = {\n    val words = sentence.split(\" \")\n    val result = mutable.ListBuffer[String]()\n    for (w <- words) {\n        if (isPrime(w.length)) {\n            result.addOne(w)\n        }\n    }\n    result.mkString(\" \")\n}\ndef isPrime(n: Int): Boolean = {\n    if (n < 2) {\n        return false\n    }\n    for (i <- 2 to math.sqrt(n).toInt) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    true\n}\n",
            "def simplify(x: String, n: String): Boolean = {\n    val xs = x.split(\"/\").toList\n    val ns = n.split(\"/\").toList\n    val num = Try(xs(0).toInt * ns(0).toInt).getOrElse(0)\n    val den = Try(xs(1).toInt * ns(1).toInt).getOrElse(0)\n    num % den == 0\n}\n",
            "def orderByPoints(nums: Seq[Int]): Seq[Int] = {\n    val nStr = nums.map(_.toString)\n    val nStr2 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr3 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr4 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr5 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr6 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr7 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr8 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr9 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr10 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr11 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr12 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr13 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr14 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr15 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr16 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr17 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr18 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr19 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr20 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr21 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr22 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr23 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr24 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr25 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr26 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr27 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr28 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr29 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr30 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr31 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr32 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr33 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr34 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr35 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr36 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr37 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr38 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr39 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr40 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr41 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr42 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr43 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr44 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr45 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr46 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr47 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr48 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr49 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr50 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr51 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr52 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr53 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n    val nStr54 = nums.map(n => if (n >= 0) n.toString else n.toString.take(2) + \"0\")\n",
            "def specialFilter(nums: Seq[Int]): Int = {\n    val odds = Set(1, 3, 5, 7, 9)\n    nums.count(n => n > 10 && n % 2 == 1 && odds.contains(n % 10))\n}\n",
            "def getMaxTriples(n: Int): Int = {\n    val c = Array(0, 0, 0)\n    for (i <- 1 to n) {\n        val a = i * i - i + 1\n        c(a % 3) += 1\n    }\n    c(0) * c(1) * c(2) + (c(0) * (c(0) - 1) * (c(0) - 2) + c(1) * (c(1) - 1) * (c(1) - 2) + c(2) * (c(2) - 1) * (c(2) - 2)) // 6\n}\n",
            "def bf(planet1: String, planet2: String): Seq[String] = {\n    val names = Seq(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (!names.contains(planet1) || !names.contains(planet2)) {\n        return Seq()\n    }\n    val l = names.indexOf(planet1)\n    val r = names.indexOf(planet2)\n    if (l > r) {\n        val t = l\n        l = r\n        r = t\n    }\n    if (l == r) {\n        return Seq()\n    }\n    names.slice(l + 1, r)\n}\n",
            "def sortedListSum(lst: Seq[String]): Seq[String] = {\n    val result = mutable.ListBuffer[String]()\n    for (s <- lst) {\n        if (s.length % 2 == 0) {\n            result.addOne(s)\n        }\n    }\n    result.sortWith((a, b) => {\n        if (a.length == b.length) {\n            a.compareTo(b) < 0\n        } else {\n            a.length < b.length\n        }\n    })\n    result.toList\n}\n",
            "def xOrY(n: Int, x: Int, y: Int): Int = {\n    if (n < 2) {\n        return y\n    }\n    for (i <- 2 to math.sqrt(n).toInt) {\n        if (n % i == 0) {\n            return y\n        }\n    }\n    x\n}\n",
            "def doubleTheDifference(lst: Seq[Double]): Int = {\n    lst.filter(n => n >= 0 && n % 2 == 1).map(n => n * n).sum.toInt\n}\n",
            "def compare(game: Seq[Int], guess: Seq[Int]): Seq[Int] = {\n    game.zip(guess).map { case (x, y) => (x - y).abs }\n}\n",
            "def strongestExtension(className: String, extensions: Seq[String]): String = {\n    var maxS = Double.NegativeInfinity\n    var maxExt = \"\"\n    for (ext <- extensions) {\n        var upper = 0\n        var lower = 0\n        for (c <- ext) {\n            if (c.isUpper) {\n                upper += 1\n            } else if (c.isLower) {\n                lower += 1\n            }\n        }\n        val s = upper.toDouble - lower.toDouble\n        if (s > maxS) {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    s\"$className.$maxExt\"\n}\n",
            "def cycpatternCheck(a: String, b: String): Boolean = {\n    if (a.length < b.length) {\n        return false\n    }\n    for (i <- 0 until b.length) {\n        if (b.substring(i) + b.substring(0, i) == a) {\n            return true\n        }\n    }\n    return false\n}\n",
            "def evenOddCount(num: Int): Seq[Int] = {\n    val ds = num.abs.toString.toList\n    val even = ds.count(d => d.toString.toInt % 2 == 0)\n    Seq(even, ds.length - even)\n}\n",
            "def intToMiniRoman(num: Int): String = {\n    val values = List(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    val numerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    val res = mutable.ListBuffer[String]()\n    for (i <- 0 until values.size) {\n        while (num >= values(i)) {\n            res.addOne(numerals(i))\n            num -= values(i)\n        }\n    }\n    res.mkString\n}\n",
            "def rightAngleTriangle(a: Int, b: Int, c: Int): Boolean = {\n    val s = List(a, b, c).sorted\n    s(0) * s(0) + s(1) * s(1) == s(2) * s(2)\n}\n",
            "def findMax(words: Seq[String]): String = {\n    val maxCnt = words.map(_.toSet.size).max\n    val maxWords = mutable.ListBuffer[String]()\n    for (w <- words) {\n        if (w.toSet.size == maxCnt) {\n            maxWords.addOne(w)\n        }\n    }\n    maxWords.min\n}\n",
            "def eat(num: Int, need: Int, remaining: Int): Seq[Int] = {\n    if (need <= remaining) {\n        Seq(num + need, remaining - need)\n    } else {\n        Seq(num + remaining, 0)\n    }\n}\n",
            "def doAlgebra(operators: Seq[String], operands: Seq[Int]): Int = {\n    val ops = operators.toList\n    val nums = operands.toList\n    var i = ops.length - 1\n    while (i >= 0) {\n        if (ops(i) == \"**\") {\n            nums(i) = math.pow(nums(i), nums(i + 1)).toInt\n            nums.remove(i + 1)\n            ops.remove(i)\n        }\n        i -= 1\n    }\n    i = 0\n    while (i < ops.length) {\n        if (ops(i) == \"*\") {\n            nums(i) = nums(i) * nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        } else if (ops(i) == \"//\") {\n            nums(i) = nums(i) / nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while (i < ops.length) {\n        if (ops(i) == \"+\") {\n            nums(i) = nums(i) + nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        } else if (ops(i) == \"-\") {\n            nums(i) = nums(i) - nums(i + 1)\n            nums.remove(i + 1)\n            ops.remove(i)\n            i -= 1\n        }\n        i += 1\n    }\n    nums(0)\n}\n",
            "def solve(s: String): String = {\n    if (s.forall(ch => !ch.isLetter)) {\n        return s.reverse\n    }\n    val result = mutable.ListBuffer[Char]()\n    for (ch <- s) {\n        if (!ch.isLetter) {\n            result.addOne(ch)\n        } else if (ch.isUpper) {\n            result.addOne(ch.toLower)\n        } else if (ch.isLower) {\n            result.addOne(ch.toUpper)\n        }\n    }\n    result.mkString\n}\n",
            "def stringToMd5(txt: String): Option[String] = {\n    if (txt.isEmpty) {\n        None\n    } else {\n        val md5_hash = MessageDigest.getInstance(\"MD5\")\n        val txt_bytes = txt.getBytes\n        md5_hash.update(txt_bytes)\n        val md5_encoded = md5_hash.digest()\n        val md5_encoded = md5_encoded.map(b => f\"$b%02x\").mkString\n        Some(md5_encoded)\n    }\n}\n",
            "def generateIntegers(a: Int, b: Int): Seq[Int] = {\n    val lower = math.max(2, math.min(a, b))\n    val upper = math.min(8, math.max(a, b))\n    (lower to upper).filter(_ % 2 == 0).toList\n}\n"
        ],
        "swift": [
            "func hasCloseElements(_ numbers: [Double], _ threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in (i + 1)..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func separateParenGroups(_ parenString: String) -> [String] {\n    var groups = [String]()\n    var stk = [Character]()\n    var currentGroup = String()\n    let parens = parenString.replacingOccurrences(of: \" \", with: \"\")\n    for ch in parens.characters {\n        if ch == \"(\" {\n            stk.append(ch)\n            currentGroup.append(ch)\n        } else if ch == \")\" {\n            stk.removeLast()\n            currentGroup.append(ch)\n            if stk.isEmpty {\n                groups.append(currentGroup)\n                currentGroup = String()\n            }\n        }\n    }\n    return groups\n}\n",
            "func truncateNumber(_ num: Double) -> Double {\n    return num - num.rounded(.down)\n}\n",
            "func belowZero(_ operations: [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func meanAbsoluteDeviation(_ numbers: [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n    let deviation = numbers.map { abs($0 - mean) }.reduce(0, +)\n    return deviation / Double(numbers.count)\n}\n",
            "func intersperse(_ numbers: [Int], _ delimiter: Int) -> [Int] {\n    var result = [Int]()\n    for (i, n) in numbers.enumerated() {\n        if i != 0 {\n            result.append(delimiter)\n        }\n        result.append(n)\n    }\n    return result\n}\n",
            "func parseNestedParens(_ parenString: String) -> [Int] {\n    var result = [Int]()\n    let parenGroups = parenString.split(separator: \" \")\n    for group in parenGroups {\n        var depth = 0\n        var maxDepth = 0\n        for ch in group {\n            if ch == \"(\" {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if ch == \")\" {\n                depth -= 1\n            }\n        }\n        result.append(maxDepth)\n    }\n    return result\n}\n",
            "func filterBySubstring(_ strs: [String], _ substring: String) -> [String] {\n    return strs.filter { $0.contains(substring) }\n}\n",
            "func sumProduct(_ numbers: [Int]) -> [Int] {\n    let nSum = numbers.reduce(0, +)\n    let nProduct = numbers.reduce(1, *)\n    return [nSum, nProduct]\n}\n",
            "func rollingMax(_ numbers: [Int]) -> [Int] {\n    var maxSoFar = Int.min\n    var result = [Int]()\n    for num in numbers {\n        maxSoFar = max(maxSoFar, num)\n        result.append(maxSoFar)\n    }\n    return result\n}\n",
            "func isPalindrome(_ s: String) -> Bool {\n    return s == String(s.reversed())\n}\nfunc makePalindrome(_ s: String) -> String {\n    if isPalindrome(s) {\n        return s\n    }\n    for i in 0..<s.count {\n        if isPalindrome(String(s.suffix(s.count - i))) {\n            return s + String(s.prefix(i).reversed())\n        }\n    }\n    return \"\"\n}\n",
            "func stringXor(_ a: String, _ b: String) -> String {\n    var result = \"\"\n    for (x, y) in zip(a, b) {\n        if x == y {\n            result.append(\"0\")\n        } else {\n            result.append(\"1\")\n        }\n    }\n    return result\n}\n",
            "func longest(_ strs: [String]) -> String? {\n    if strs.isEmpty {\n        return nil\n    }\n    var longestS = strs[0]\n    for s in strs {\n        if s.count > longestS.count {\n            longestS = s\n        }\n    }\n    return longestS\n}\n",
            "func greatestCommonDivisor(_ a: Int, _ b: Int) -> Int {\n    if b == 0 { a } else { greatestCommonDivisor(b, a % b) }\n}\n",
            "func allPrefixes(_ s: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<s.count {\n        prefixes.append(String(s[..<s.index(s.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n",
            "func stringSequence(_ n: Int) -> String {\n    return (0...n).map { String($0) }.joined(separator: \" \")\n}\n",
            "func countDistinctCharacters(_ s: String) -> Int {\n    var set = Set<Character>()\n    for c in s.lowercased() {\n        set.insert(c)\n    }\n    return set.count\n}\n",
            "func parseMusic(_ musicString: String) -> [Int] {\n    let durations = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    let notes = musicString.split(separator: \" \")\n    return notes.map { durations[$0]! }\n}\n",
            "func howManyTimes(_ s: String, _ substring: String) -> Int {\n    var times = 0\n    for i in 0 ..< s.count - substring.count + 1 {\n        if s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: i + substring.count)] == substring {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "func sortNumbers(_ numbers: String) -> String {\n    let numDict = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    var numList = [String]()\n    for word in numbers.split(separator: \" \") {\n        if numDict.keys.contains(word) {\n            numList.append(word)\n        }\n    }\n    numList.sort { numDict[$0]! < numDict[$1]! }\n    return numList.joined(separator: \" \")\n}\n",
            "func findClosestElements(_ numbers: [Double]) -> [Double] {\n    var sortedNumbers = numbers\n    sortedNumbers.sort()\n    var minDiff = Double.infinity\n    var closestPair = [Double]()\n    for i in 1..<sortedNumbers.count {\n        let diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]]\n        }\n    }\n    return closestPair\n}\n",
            "func rescaleToUnit(_ numbers: [Double]) -> [Double] {\n    let minNum = numbers.min()!\n    let maxNum = numbers.max()!\n    if minNum == maxNum {\n        return [Double](repeating: 0.0, count: numbers.count)\n    } else {\n        return numbers.map { (num: Double) -> Double in\n            return (num - minNum) / (maxNum - minNum)\n        }\n    }\n}\n",
            "func filterIntegers(_ values: [Any]) -> [Int] {\n    var result = [Int]()\n    for v in values {\n        if let x = v as? Int {\n            result.append(x)\n        }\n    }\n    return result\n}\n",
            "func strLength(_ s: String) -> Int {\n    return s.count\n}\n",
            "func largestDivisor(_ n: Int) -> Int {\n    for i in 2..<n {\n        if n % i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "func factorize(_ n: Int) -> [Int] {\n    var factors = [Int]()\n    var divisor = 2\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.append(divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "func removeDuplicates(_ numbers: [Int]) -> [Int] {\n    var counts = [Int: Int]()\n    for num in numbers {\n        counts[num, default: 0] += 1\n    }\n    let res = numbers.filter { counts[$0] == 1 }\n    return res\n}\n",
            "func flipCase(_ s: String) -> String {\n    var flipped = \"\"\n    for ch in s {\n        if !ch.isLetter {\n            flipped.append(ch)\n        } else if ch.isLowercase {\n            flipped.append(ch.uppercased())\n        } else if ch.isUppercase {\n            flipped.append(ch.lowercased())\n        }\n    }\n    return flipped\n}\n",
            "func concatenate(_ strs: [String]) -> String {\n    var result = \"\"\n    for s in strs {\n        result += s\n    }\n    return result\n}\n",
            "func filterByPrefix(_ strs: [String], _ prefixStr: String) -> [String] {\n    return strs.filter { $0.hasPrefix(prefixStr) }\n}\n",
            "func getPositive(_ l: [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func poly(_ xs: [Int], _ x: Double) -> Double {\n    var res: Double = 0.0\n    for i in 0..<xs.count {\n        res += Double(xs[i]) * pow(x, Double(i))\n    }\n    return res\n}\nfunc findZero(_ xs: [Int]) -> Double {\n    var x1: Double = 1.0\n    var x2: Double = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0.0 {\n        x1 *= 2.0\n        x2 *= 2.0\n    }\n    while (x1 - x2).magnitude > 1e-10 {\n        let mid = (x1 + x2) / 2.0\n        if poly(xs, mid) == 0.0 {\n            return mid\n        } else if poly(xs, mid) * poly(xs, x1) < 0.0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    (x1 + x2) / 2.0\n}\n",
            "func sortThird(_ l: [Int]) -> [Int] {\n    let sortedThird = l.sorted()\n    return l.enumerated().map { i, e in\n        i % 3 == 0 ? sortedThird[i / 3] : e\n    }\n}\n",
            "func listUnique(_ l: [Int]) -> [Int] {\n    return Array(Set(l)).sorted()\n}\n",
            "func maxElement(_ l: [Int]) -> Int {\n    if l.isEmpty {\n        0\n    } else {\n        l.max()!\n    }\n}\n",
            "func fizzBuzz(_ n: Int) -> Int {\n    var cnt = 0\n    for i in 1...n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += String(i).count(of: \"7\")\n        }\n    }\n    return cnt\n}\n",
            "func sortEven(_ l: [Int]) -> [Int] {\n    let sortedEven = l[::2].sorted()\n    return zip(l, sortedEven).map { $0 % 2 == 0 ? $1 : $0 }\n}\n",
            "func encodeCyclic(_ s: String) -> String {\n    var result = \"\"\n    for i in stride(from: 0, to: s.count, by: 3) {\n        if i + 3 > s.count {\n            result.append(s[i..<s.count])\n        } else {\n            result.append(s[i+1..<i+3])\n            result.append(s[i..<i+1])\n        }\n    }\n    result\n}\nfunc decodeCyclic(_ s: String) -> String {\n    encodeCyclic(encodeCyclic(s))\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 { return false }\n    for i in 2..<Int(sqrt(Double(n))) + 1 {\n        if n % i == 0 { return false }\n    }\n    return true\n}\nfunc primeFib(_ n: Int) -> Int {\n    var f = [0, 1]\n    var cnt = 0\n    while cnt < n {\n        f = [f[1], f[0] + f[1]]\n        if isPrime(f[1]) { cnt += 1 }\n    }\n    return f[1]\n}\n",
            "func triplesSumToZero(_ l: [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in (i + 1)..<l.count {\n            for k in (j + 1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func carRaceCollision(_ n: Int) -> Int {\n    return Int(pow(Double(n), 2))\n}\n",
            "func incrList(_ l: [Int]) -> [Int] {\n    return l.map { $0 + 1 }\n}\n",
            "func pairsSumToZero(_ l: [Int]) -> Bool {\n    var seen = Set<Int>()\n    for num in l {\n        if seen.contains(-num) {\n            return true\n        }\n        seen.insert(num)\n    }\n    return false\n}\n",
            "func changeBase(_ x: Int, _ bas: Int) -> String {\n    if x == 0 {\n        return \"0\"\n    }\n    var digits = [String]()\n    var x = x\n    while x > 0 {\n        digits.append(String(x % bas))\n        x /= bas\n    }\n    return digits.reversed().joined()\n}\n",
            "func triangleArea(_ a: Int, _ h: Int) -> Double {\n    return Double(a * h) / 2.0\n}\n",
            "func fib4(_ n: Int) -> Int {\n    var fib = [0, 0, 2, 0]\n    for i in 4...n {\n        fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4]\n    }\n    return fib[n % 4]\n}\n",
            "func median(_ l: [Double]) -> Double {\n    var sl = l\n    sl.sort()\n    if sl.count % 2 != 0 {\n        sl[sl.count / 2]\n    } else {\n        (sl[sl.count / 2] + sl[sl.count / 2 - 1]) / 2.0\n    }\n}\n",
            "func isPalindrome(_ txt: String) -> Bool {\n    return txt == String(txt.reversed())\n}\n",
            "func modp(_ n: Int, _ p: Int) -> Int {\n    var ret = 1\n    for _ in 0..<n {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func encodeShift(_ s: String) -> String {\n    var result = String()\n    for ch in s {\n        let ch_num = ch.unicodeScalars.first!.value\n        let shifted_ch_num = (ch_num - 97 + 5) % 26 + 97\n        result.append(Character(UnicodeScalar(shifted_ch_num)!))\n    }\n    return result\n}\nfunc decodeShift(_ s: String) -> String {\n    var result = String()\n    for ch in s {\n        let ch_num = ch.unicodeScalars.first!.value\n        let shifted_ch_num = (ch_num - 97 + 21) % 26 + 97\n        result.append(Character(UnicodeScalar(shifted_ch_num)!))\n    }\n    return result\n}\n",
            "func removeVowels(_ txt: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for char in txt {\n        if !vowels.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n",
            "func belowThreshold(_ l: [Int], _ t: Int) -> Bool {\n    return l.allSatisfy { $0 < t }\n}\n",
            "func add(_ x: Int, _ y: Int) -> Int {\n    return x + y\n}\n",
            "func sameChars(_ s0: String, _ s1: String) -> Bool {\n    return Set(s0) == Set(s1)\n}\n",
            "func fib(_ n: Int) -> Int {\n    if n <= 1 {\n        return n\n    } else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"<\" {\n            depth += 1\n        } else if b == \">\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    depth == 0\n}\n",
            "func monotonic(_ l: [Int]) -> Bool {\n    let diff = zip(l, l.dropFirst()).map { $0.1 - $0.0 }\n    return diff.allSatisfy { $0 <= 0 } || diff.allSatisfy { $0 >= 0 }\n}\n",
            "func common(_ l1: [Int], _ l2: [Int]) -> [Int] {\n    return Array(Set(l1).intersection(Set(l2))).sorted()\n}\n",
            "func largestPrimeFactor(_ n: Int) -> Int {\n    var i = 2\n    while i * i <= n {\n        if n % i != 0 {\n            i += 1\n        } else {\n            n /= i\n        }\n    }\n    return n\n}\n",
            "func sumToN(_ n: Int) -> Int {\n    return (n * (n + 1)) / 2\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"(\" {\n            depth += 1\n        } else if b == \")\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    depth == 0\n}\n",
            "func derivative(_ xs: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(xs[i] * i)\n    }\n    return result\n}\n",
            "func fibfib(_ n: Int) -> Int {\n    if n <= 1 {\n        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 1\n    while n > 2 {\n        a = b\n        b = c\n        c = a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "func vowelsCount(_ s: String) -> Int {\n    let vowels = \"aeiou\"\n    var cnt = 0\n    for i in 0..<s.count {\n        if vowels.contains(s[i].lowercased()) || (i == s.count - 1 && s[i].lowercased() == \"y\") {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "func circularShift(_ x: Int, _ shift: Int) -> String {\n    let x_str = String(x)\n    if shift > x_str.count {\n        return String(x_str.reversed())\n    } else {\n        return String(x_str.suffix(x_str.count - shift)) + String(x_str.prefix(shift))\n    }\n}\n",
            "func digitSum(_ s: String) -> Int {\n    return s.unicodeScalars.reduce(0) { $0 + Int(String($1).unicodeScalars.first!.value) }\n}\n",
            "func fruitDistribution(_ s: String, _ n: Int) -> Int {\n    let words = s.components(separatedBy: \" \")\n    let apples = Int(words[words.firstIndex(of: \"apples\")!])!\n    let oranges = Int(words[words.firstIndex(of: \"oranges\")!])!\n    return n - apples - oranges\n}\n",
            "func pluck(_ arr: [Int]) -> [Int] {\n    var evens = [Int]()\n    for n in arr {\n        if n % 2 == 0 {\n            evens.append(n)\n        }\n    }\n    if evens.count == 0 {\n        return [Int]()\n    }\n    let minEven = evens.min()!\n    return [minEven, arr.firstIndex(of: minEven)!]\n}\n",
            "func search(_ lst: [Int]) -> Int {\n    var freqs = [Int: Int]()\n    for n in lst {\n        freqs[n, default: 0] += 1\n    }\n    let goodVals = freqs.filter { $0.value >= $0.key }.map { $0.key }\n    return goodVals.max() ?? -1\n}\n",
            "func strangeSortList(_ lst: [Int]) -> [Int] {\n    let sl = lst.sorted()\n    var result = [Int]()\n    var left = 0\n    var right = sl.count - 1\n    while left <= right {\n        result.append(sl[left])\n        left += 1\n        if left <= right {\n            result.append(sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "func triangleArea(_ a: Int, _ b: Int, _ c: Int) -> Double {\n    if a + b > c && a + c > b && b + c > a {\n        let s = Double((a + b + c)) / 2.0\n        return sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n    } else {\n        return -1.0\n    }\n}\n",
            "func willItFly(_ q: [Int], _ w: Int) -> Bool {\n    if q.count == 0 {\n        return false\n    }\n    let isPalin = q.enumerated().allSatisfy { (i, e) in\n        e == q[q.count - i - 1]\n    }\n    let total = q.reduce(0, +)\n    return isPalin && total <= w\n}\n",
            "func smallestChange(_ arr: [Int]) -> Int {\n    var ans = 0\n    for i in 0..<(arr.count / 2) {\n        if arr[i] != arr[arr.count - i - 1] {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "func totalMatch(_ lst1: [String], _ lst2: [String]) -> [String] {\n    let cnt1 = lst1.reduce(0) { $0 + $1.count }\n    let cnt2 = lst2.reduce(0) { $0 + $1.count }\n    return cnt1 <= cnt2 ? lst1 : lst2\n}\n",
            "func isMultiplyPrime(_ a: Int) -> Bool {\n    if a < 2 {\n        return false\n    }\n    var cnt = 0\n    for i in 2...Int(sqrt(Double(a))) {\n        if a % i == 0 {\n            while a % i == 0 {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "func isSimplePower(_ x: Int, _ n: Int) -> Bool {\n    if n < 2 {\n        return x == n\n    }\n    var tmp = 1\n    while tmp < x {\n        tmp *= n\n    }\n    tmp == x\n}\n",
            "func isCube(_ a: Int) -> Bool {\n    let a = abs(a)\n    let root = Int(round(pow(Double(a), 1.0 / 3.0)))\n    return root * root * root == a\n}\n",
            "func hexKey(_ num: String) -> Int {\n    return num.filter { \"2357BD\".contains($0) }.count\n}\n",
            "func decimalToBinary(_ dec: Int) -> String {\n    return \"db\\(String(dec, radix: 2))db\"\n}\n",
            "func isHappy(_ s: String) -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func numericalLetterGrade(_ grades: [Double]) -> [String] {\n    var result = [String]()\n    for g in grades {\n        if g == 4.0 {\n            result.append(\"A+\")\n        } else if g > 3.7 {\n            result.append(\"A\")\n        } else if g > 3.3 {\n            result.append(\"A-\")\n        } else if g > 3.0 {\n            result.append(\"B+\")\n        } else if g > 2.7 {\n            result.append(\"B\")\n        } else if g > 2.3 {\n            result.append(\"B-\")\n        } else if g > 2.0 {\n            result.append(\"C+\")\n        } else if g > 1.7 {\n            result.append(\"C\")\n        } else if g > 1.3 {\n            result.append(\"C-\")\n        } else if g > 1.0 {\n            result.append(\"D+\")\n        } else if g > 0.7 {\n            result.append(\"D\")\n        } else if g > 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"E\")\n        }\n    }\n    return result\n}\n",
            "func primeLength(_ s: String) -> Bool {\n    let length = s.count\n    if length < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(length))) {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func startsOneEnds(_ n: Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * (10 ** (n - 2))\n}\n",
            "func solve(_ n: Int) -> String {\n    let digitsSum = n.digits.reduce(0, +)\n    return String(digitsSum, radix: 2)\n}\n",
            "func add(_ lst: [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 == 1 && $0.element % 2 == 0 }.map { $0.element }.reduce(0, +)\n}\n",
            "func antiShuffle(_ s: String) -> String {\n    let words: [String] = s.split(separator: \" \").map({ word in\n        let chars: [Character] = Array(word)\n        let sortedChars: [Character] = chars.sorted()\n        return String(sortedChars)\n    })\n    return words.joined(separator: \" \")\n}\n",
            "func getRow(_ lst: [[Int]], _ x: Int) -> [[Int]] {\n    var coords = [[Int]]()\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            if lst[i][j] == x {\n                coords.append([i, j])\n            }\n        }\n    }\n    coords.sort { (a, b) -> Bool in\n        if a[0] == b[0] {\n            return a[1] > b[1]\n        } else {\n            return a[0] < b[0]\n        }\n    }\n    return coords\n}\n",
            "func sortArray(_ arr: [Int]) -> [Int] {\n    if arr.count == 0 {\n        return []\n    }\n    if (arr[0] + arr[arr.count - 1]) % 2 == 0 {\n        return arr.sorted(by: >)\n    } else {\n        return arr.sorted()\n    }\n}\n",
            "func encrypt(_ s: String) -> String {\n    var result = \"\"\n    for ch in s {\n        var shifted = ch.asciiValue! + 4\n        if shifted > 122 {\n            shifted -= 26\n        }\n        result.append(Character(UnicodeScalar(shifted)!))\n    }\n    return result\n}\n",
            "func nextSmallest(_ lst: [Int]) -> Int? {\n    var sl = lst\n    sl.sort()\n    sl.dedup()\n    if sl.count < 2 {\n        return nil\n    }\n    return sl[1]\n}\n",
            "func isBored(_ s: String) -> Int {\n    let re = try! NSRegularExpression(pattern: \"[.!?]\\\\s*\", options: [])\n    let sentences = re.split(s)\n    return sentences.filter { sentence in\n        sentence.count >= 2 && sentence.prefix(2) == \"I \"\n    }.count\n}\n",
            "func anyInt(_ x: Any, _ y: Any, _ z: Any) -> Bool {\n    if let x = x as? Int, let y = y as? Int, let z = z as? Int {\n        return x + y == z || x + z == y || y + z == x\n    }\n    return false\n}\n",
            "func encode(_ message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for ch in message {\n        if ch.isLetter {\n            let ch1 = ch.uppercased()\n            if vowels.contains(ch1) {\n                result.append(String(ch1.unicodeScalars.map {\n                    UnicodeScalar(UInt32(Int(ch1.unicodeScalars.first!.value) + 2))!\n                }))\n            } else {\n                result.append(ch1)\n            }\n        } else {\n            result.append(String(ch))\n        }\n    }\n    return result\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc skjkasdkd(_ lst: [Int]) -> Int {\n    let primes = lst.filter(isPrime)\n    if primes.isEmpty {\n        return 0\n    }\n    let largest = String(primes.max()!)\n    return largest.reduce(0) { $0 + Int(String($1))! }\n}\n",
            "func checkDictCase(_ d: [String:String]) -> Bool {\n    if d.isEmpty {\n        return false\n    }\n    return d.keys.allSatisfy { $0.allSatisfy { $0.isLowercase } } || d.keys.allSatisfy { $0.allSatisfy { $0.isUppercase } }\n}\n",
            "func countUpTo(_ n: Int) -> [Int] {\n    var primes = [Int]()\n    for num in 2..<n {\n        if primes.allSatisfy({ num % $0 != 0 }) {\n            primes.append(num)\n        }\n    }\n    return primes\n}\n",
            "func multiply(_ a: Int, _ b: Int) -> Int {\n    return (abs(a) % 10) * (abs(b) % 10)\n}\n",
            "func countUpper(_ s: String) -> Int {\n    let vowels = \"AEIOU\"\n    var result = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 && vowels.contains(c) {\n            result += 1\n        }\n    }\n    return result\n}\n",
            "func closestInteger(_ value: String) -> Int {\n    let num = Double(value)!\n    if num >= 0.0 {\n        return Int(num + 0.5)\n    } else {\n        return Int(num - 0.5)\n    }\n}\n",
            "func makeAPile(_ n: Int) -> [Int] {\n    return (0..<n).map { n + 2 * $0 }\n}\n",
            "func wordsString(_ s: String) -> [String] {\n    let re = try! NSRegularExpression(pattern: \"[, ]\", options: [])\n    let result = re.matches(in: s, options: [], range: NSRange(location: 0, length: s.count)).map {\n        String(s[Range($0.range, in: s)!])\n    }\n    return result\n}\n",
            "func chooseNum(_ x: Int, _ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    if x != y {\n        return y - 1\n    }\n    -1\n}\n",
            "func roundedAvg(_ n: Int, _ m: Int) -> String? {\n    if n > m {\n        return nil\n    }\n    let rAvg = Int((Double(m + n) / 2.0).rounded(.up))\n    return String(rAvg, radix: 2)\n}\n",
            "func allDigitsOdd(_ s: String) -> Bool {\n    return s.unicodeScalars.allSatisfy { $0.value >= 48 && $0.value <= 57 && $0.value % 2 != 0 }\n}\nfunc uniqueDigits(_ x: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if allDigitsOdd(String(num)) {\n            result.append(num)\n        }\n    }\n    result.sort()\n    return result\n}\n",
            "func byLength(_ arr: [Int]) -> [String] {\n    let digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    let sortedArr = arr.sorted(by: >)\n    return sortedArr.map { digitNames[$0 - 1] }\n}\n",
            "func f(_ n: Int) -> [Int] {\n    let nums = Array(1...n)\n    return nums.map { i in\n        if i % 2 != 0 {\n            return nums[0..<i].reduce(0, +)\n        } else {\n            return nums[0..<i].reduce(1, *)\n        }\n    }\n}\n",
            "func isPalindrome(_ txt: String) -> Bool {\n    txt == String(txt.reversed())\n}\nfunc evenOddPalindrome(_ n: Int) -> [Int] {\n    var cnt = [0, 0]\n    for i in 1...n {\n        if isPalindrome(String(i)) {\n            cnt[(i % 2) as Int] += 1\n        }\n    }\n    cnt\n}\n",
            "func digitsSum(_ n: Int) -> Int {\n    let nStr = String(n)\n    if n >= 0 {\n        return nStr.compactMap { Int(String($0)) }.reduce(0, +)\n    } else {\n        return Int(String(nStr.prefix(2)))! * 2 + digitsSum(abs(n))\n    }\n}\nfunc countNums(_ arr: [Int]) -> Int {\n    return arr.filter { digitsSum($0) > 0 }.count\n}\n",
            "func moveOneBall(_ arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return true\n    }\n    let sortedArr = arr.sorted()\n    for i in 0..<arr.count {\n        if arr[i..<arr.count] == sortedArr[0..<arr.count - i] && arr[0..<i] == sortedArr[arr.count - i..<arr.count] {\n            return true\n        }\n    }\n    return false\n}\n",
            "func canExchange(_ lst1: [Int], _ lst2: [Int]) -> String {\n    let odd_cnt = lst1.filter { $0 % 2 != 0 }.count\n    let even_cnt = lst2.filter { $0 % 2 == 0 }.count\n    if even_cnt >= odd_cnt {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n",
            "func histogram(_ test: String) -> [String:Int] {\n    var freq = [String:Int]()\n    let words = test.split(separator: \" \").filter { $0.count > 0 }\n    for w in words {\n        freq[w, default: 0] += 1\n    }\n    var result = [String:Int]()\n    if freq.count > 0 {\n        let max_freq = freq.values.max()!\n        for (k, v) in freq {\n            if v == max_freq {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "func isPalindrome(_ s: String) -> Bool {\n    return s == String(s.reversed())\n}\nfunc reverseDelete(_ s: String, _ c: String) -> [String] {\n    let s1 = String(s.filter { !c.contains($0) })\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"]\n}\n",
            "func oddCount(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for num in lst {\n        let n = num.reduce(0) { $0 + (Int(String($1))! % 2 == 1 ? 1 : 0) }\n        let rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replacingOccurrences(of: \"i\", with: String(n)))\n    }\n    return result\n}\n",
            "func minSubArraySum(_ nums: [Int]) -> Int {\n    var minSum = 0\n    var curSum = 0\n    for n in nums {\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if minSum == 0 {\n        minSum = min(nums)\n    }\n    return minSum\n}\n",
            "func maxFill(_ grid: [[Int]], _ capacity: Int) -> Int {\n    return grid.map { arr in (arr.reduce(0, +) as Double / Double(capacity)) }.reduce(0, +)\n}\n",
            "func countOnes(_ num: Int) -> Int {\n    var count = 0\n    var num = num\n    while num > 0 {\n        if num & 1 == 1 {\n            count += 1\n        }\n        num >>= 1\n    }\n    return count\n}\nfunc sortArray(_ arr: [Int]) -> [Int] {\n    var arr = arr\n    arr.sort { a, b in\n        let aCount = countOnes(a)\n        let bCount = countOnes(b)\n        if aCount == bCount {\n            return a.compare(b)\n        } else {\n            return aCount.compare(bCount)\n        }\n    }\n    return arr\n}\n",
            "func selectWords(_ s: String, _ n: Int) -> [String] {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let words = s.split(separator: \" \").map { String($0) }.filter { !$0.isEmpty }\n    return words.filter { $0.filter { consonants.contains($0.lowercased()) }.count == n }\n}\n",
            "func getClosestVowel(_ word: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    for i in (1..<word.count - 1).reversed() {\n        if vowels.contains(word[i]) && !vowels.contains(word[i - 1]) && !vowels.contains(word[i + 1]) {\n            return String(word[i])\n        }\n    }\n    return \"\"\n}\n",
            "func matchParens(_ lst: [String]) -> String {\n    let s1 = lst[0] + lst[1]\n    let s2 = lst[1] + lst[0]\n    if check(s1) || check(s2) {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }\n}\nfunc check(_ s: String) -> Bool {\n    var depth = 0\n    for ch in s {\n        if ch == \"(\" {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func maximum(_ arr: [Int], _ k: Int) -> [Int] {\n    if k == 0 {\n        return []\n    }\n    return arr.sorted().reversed()[0..<k]\n}\n",
            "func solution(_ lst: [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 == 0 && $0.element % 2 != 0 }.map { $0.element }.reduce(0, +)\n}\n",
            "func addElements(_ arr: [Int], _ k: Int) -> Int {\n    return arr.prefix(k).filter { $0.description.count <= 2 }.reduce(0, +)\n}\n",
            "func getOddCollatz(_ n: Int) -> [Int] {\n    var collatz = [1]\n    while n != 1 {\n        if n % 2 != 0 {\n            collatz.append(n)\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    return collatz.sorted()\n}\n",
            "func validDate(_ date: String) -> Bool {\n    if date.count != 10 || date[2] != \"-\" || date[5] != \"-\" {\n        return false\n    }\n    let m = Int(date[..<2])!\n    let d = Int(date[3..<5])!\n    if m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12 {\n        if d >= 1 && d <= 31 {\n            return true\n        }\n    }\n    if m == 4 || m == 6 || m == 9 || m == 11 {\n        if d >= 1 && d <= 30 {\n            return true\n        }\n    }\n    if m == 2 {\n        if d >= 1 && d <= 29 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func splitWords(_ txt: String) -> [String] {\n    if txt.contains(\" \") {\n        return txt.split(separator: \" \").map { String($0) }\n    } else if txt.contains(\",\") {\n        return txt.split(separator: \",\").map { String($0) }\n    } else {\n        return [String(txt.filter { $0.isLowercase && $0.unicodeScalars.first!.value % 2 == 0 }.count)]\n    }\n}\n",
            "func isSorted(_ lst: [Int]) -> Bool {\n    if !lst.windows(ofCount: 2).allSatisfy({ $0[0] <= $0[1] }) {\n        return false\n    }\n    var freq = [Int: Int]()\n    for i in lst {\n        freq[i, default: 0] += 1\n    }\n    let maxFreq = freq.values.max() ?? 0\n    maxFreq <= 2\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc intersection(_ interval1: [Int], _ interval2: [Int]) -> String {\n    let l = max(interval1[0], interval2[0])\n    let r = min(interval1[1], interval2[1])\n    let length = r - l\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\"\n}\n",
            "func prodSigns(_ arr: [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    if arr.contains(0) {\n        return 0\n    }\n    let sign = arr.filter({ $0 < 0 }).count % 2 == 1 ? -1 : 1\n    return sign * arr.map({ abs($0) }).reduce(0, +)\n}\n",
            "func minPath(_ grid: [[Int]], _ k: Int) -> [Int] {\n    let n = grid.count\n    var minVal = n * n + 1\n    for i in 0..<n {\n        for j in 0..<n {\n            if grid[i][j] == 1 {\n                var temp = [Int]()\n                if i != 0 {\n                    temp.append(grid[i - 1][j])\n                }\n                if j != 0 {\n                    temp.append(grid[i][j - 1])\n                }\n                if i != n - 1 {\n                    temp.append(grid[i + 1][j])\n                }\n                if j != n - 1 {\n                    temp.append(grid[i][j + 1])\n                }\n                minVal = min(temp)\n            }\n        }\n    }\n    var result = [Int]()\n    for i in 0..<k {\n        result.append(1)\n    }\n    return result\n}\n",
            "func tri(_ n: Int) -> [Int] {\n    if n == 0 {\n        return [1]\n    }\n    var seq = [1, 3]\n    for i in 2..<n {\n        if i % 2 == 0 {\n            seq.append(i / 2 + 1)\n        } else {\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    seq\n}\n",
            "func digits(_ n: Int) -> Int {\n    let odds = String(n).compactMap { Int(String($0)) }.filter { $0 % 2 == 1 }\n    return odds.reduce(1, *) if odds.count > 0 else 0\n}\n",
            "func isNested(_ s: String) -> Bool {\n    var openIdx = [Int]()\n    var closeIdx = [Int]()\n    for (i, ch) in s.enumerated() {\n        if ch == \"[\" {\n            openIdx.append(i)\n        } else if ch == \"]\" {\n            closeIdx.append(i)\n        }\n    }\n    closeIdx.reverse()\n    var cnt = 0\n    var i = 0\n    let l = closeIdx.count\n    for idx in openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt += 1\n            i += 1\n        }\n    }\n    cnt >= 2\n}\n",
            "func sumSquares(_ lst: [Double]) -> Int {\n    var result = 0\n    for n in lst {\n        result += Int(ceil(n)).pow(2)\n    }\n    return result\n}\n",
            "func checkIfLastCharIsALetter(_ txt: String) -> Bool {\n    if txt.isEmpty {\n        return false\n    }\n    let last = txt[txt.index(txt.endIndex, offsetBy: -1)..<txt.endIndex]\n    return last.count == 1 && last[last.startIndex].isLetter\n}\n",
            "func canArrange(_ arr: [Int]) -> Int {\n    if arr.count <= 1 {\n        return -1\n    }\n    let idx = arr.enumerated().filter { $0.element < arr[$0.offset - 1] }.map { $0.offset }\n    return idx.max() ?? -1\n}\n",
            "func largestSmallestIntegers(_ lst: [Int]) -> [Int?] {\n    let neg = lst.filter { $0 < 0 }\n    let pos = lst.filter { $0 > 0 }\n    let maxNeg = neg.max()\n    let minPos = pos.min()\n    return [maxNeg, minPos]\n}\n",
            "func anyToReal(_ o: Any) -> Double {\n    if let o = o as? String {\n        return Double(o.replacingOccurrences(of: \",\", with: \".\"))!\n    } else if let o = o as? Int {\n        return Double(o)\n    } else if let o = o as? Double {\n        return o\n    } else {\n        fatalError(\"Type Error\")\n    }\n}\nfunc compareOne(_ a: Any, _ b: Any) -> Double? {\n    let a1 = anyToReal(a)\n    let b1 = anyToReal(b)\n    if a1 == b1 {\n        return nil\n    } else if a1 > b1 {\n        return a1\n    } else {\n        return b1\n    }\n}\n",
            "func isEqualToSumEven(_ n: Int) -> Bool {\n    return n % 2 == 0 && n >= 8\n}\n",
            "func specialFactorial(_ n: Int) -> Int {\n    var fact = 1\n    var result = 1\n    for i in 1..<(n + 1) {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "func fixSpaces(_ txt: String) -> String {\n    return txt.replacingOccurrences(of: \"\\\\s{3,}\", with: \"-\", options: .regularExpression).replacingOccurrences(of: \" \", with: \"_\")\n}\n",
            "func fileNameCheck(_ fileName: String) -> String {\n    let suf = [\"txt\", \"exe\", \"dll\"]\n    let lst = fileName.split(separator: \".\")\n    if lst.count != 2 || !suf.contains(lst[1]) || lst[0].count == 0 || !lst[0].first!.isLetter || lst[0].filter({ $0.isNumber }).count > 3 {\n        return \"No\"\n    }\n    \"Yes\"\n}\n",
            "func sumSquares(_ lst: [Int]) -> Int {\n    var result = 0\n    for (i, e) in lst.enumerated() {\n        if i % 3 == 0 {\n            result += e * e\n        } else if i % 4 == 0 {\n            result += e * e * e\n        } else {\n            result += e\n        }\n    }\n    return result\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc wordsInSentence(_ sentence: String) -> String {\n    let words = sentence.split(separator: \" \")\n    return words.filter { isPrime(Int($0.count)) }.joined(separator: \" \")\n}\n",
            "func simplify(_ x: String, _ n: String) -> Bool {\n    let xs = x.split(separator: \"/\")\n    let ns = n.split(separator: \"/\")\n    let num = Int(xs[0])! * Int(ns[0])!\n    let den = Int(xs[1])! * Int(ns[1])!\n    num % den == 0\n}\n",
            "func digitsSum(_ n: Int) -> Int {\n    let n_str = String(n)\n    if n >= 0 {\n        return n_str.compactMap { Int(String($0)) }.reduce(0, +)\n    } else {\n        return Int(String(n_str.prefix(2)))! * 2 + digitsSum(abs(n))\n    }\n}\nfunc orderByPoints(_ nums: [Int]) -> [Int] {\n    return nums.sorted { digitsSum($0) < digitsSum($1) }\n}\n",
            "func specialFilter(_ nums: [Int]) -> Int {\n    let odds = \"13579\"\n    return nums.filter { $0 > 10 && $0 % 2 == 1 && odds.contains(String($0)[0]) }.count\n}\n",
            "func getMaxTriples(_ n: Int) -> Int {\n    var c = [0, 0, 0]\n    for i in 1...n {\n        let a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n}\n",
            "func bf(_ planet1: String, _ planet2: String) -> [String] {\n    let names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if !names.contains(planet1) || !names.contains(planet2) {\n        return []\n    }\n    var l = names.firstIndex(of: planet1)!\n    var r = names.firstIndex(of: planet2)!\n    if l > r {\n        l = r\n        r = l\n    }\n    if l == r {\n        return []\n    }\n    return Array(names[l + 1 ..< r])\n}\n",
            "func sortedListSum(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for s in lst {\n        if s.count % 2 == 0 {\n            result.append(s)\n        }\n    }\n    result.sort { (a, b) -> Bool in\n        if a.count == b.count {\n            return a < b\n        } else {\n            return a.count < b.count\n        }\n    }\n    return result\n}\n",
            "func xOrY(_ n: Int, _ x: Int, _ y: Int) -> Int {\n    if n < 2 {\n        return y\n    }\n    for i in 2..<(Int(sqrt(Double(n))) + 1) {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func doubleTheDifference(_ lst: [Double]) -> Int {\n    return lst.filter { $0 >= 0 && $0.truncatingRemainder(dividingBy: 2) == 1 }.map { $0 * $0 }.reduce(0, +)\n}\n",
            "func compare(_ game: [Int], _ guess: [Int]) -> [Int] {\n    return zip(game, guess).map { abs($0 - $1) }\n}\n",
            "func strongestExtension(_ className: String, _ extensions: [String]) -> String {\n    var maxS = Double.leastNonzeroMagnitude\n    var maxExt = \"\"\n    for ext in extensions {\n        var upper = 0\n        var lower = 0\n        for c in ext.unicodeScalars {\n            if c.isUppercase {\n                upper += 1\n            } else if c.isLowercase {\n                lower += 1\n            }\n        }\n        let s = Double(upper) - Double(lower)\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return \"\\(className).\\(maxExt)\"\n}\n",
            "func cycpatternCheck(_ a: String, _ b: String) -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    for i in 0..<b.count {\n        if b.suffix(b.count - i) + b.prefix(i) == a {\n            return true\n        }\n    }\n    return false\n}\n",
            "func evenOddCount(_ num: Int) -> [Int] {\n    let ds = String(abs(num)).map { Int(String($0))! }\n    let even = ds.filter { $0 % 2 == 0 }.count\n    return [even, ds.count - even]\n}\n",
            "func intToMiniRoman(_ num: Int) -> String {\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    var res = \"\"\n    for i in 0..<values.count {\n        while num >= values[i] {\n            res += numerals[i]\n            num -= values[i]\n        }\n    }\n    return res\n}\n",
            "func rightAngleTriangle(_ a: Int, _ b: Int, _ c: Int) -> Bool {\n    let s = [a, b, c].sorted()\n    return  s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "func findMax(_ words: [String]) -> String {\n    var maxCnt = 0\n    var maxW = \"\"\n    for w in words {\n        let cnt = Set(w).count\n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        } else if cnt == maxCnt {\n            maxW = min(maxW, w)\n        }\n    }\n    return maxW\n}\n",
            "func eat(_ num: Int, _ need: Int, _ remaining: Int) -> [Int] {\n    if need <= remaining {\n        return [num + need, remaining - need]\n    } else {\n        return [num + remaining, 0]\n    }\n}\n",
            "func doAlgebra(_ operators: [String], _ operands: [Int]) -> Int {\n    var ops = operators.copy()\n    var nums = operands.copy()\n    var i = ops.count - 1\n    while i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = Int(pow(Double(nums[i]), Double(nums[i + 1])))\n            nums.pop(i + 1)\n            ops.pop(i)\n        }\n        i -= 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "func solve(_ s: String) -> String {\n    if s.rangeOfCharacter(from: .letters) == nil {\n        return String(s.reversed())\n    }\n    var result = \"\"\n    for ch in s {\n        if !ch.isLetter {\n            result.append(ch)\n        } else if ch.isUppercase {\n            result.append(ch.lowercased())\n        } else if ch.isLowercase {\n            result.append(ch.uppercased())\n        }\n    }\n    return result\n}\n",
            "func stringToMd5(_ txt: String) -> String? {\n    if txt.isEmpty {\n        return nil\n    }\n    let md5_hash = MD5()\n    let txt_bytes = Array(txt.utf8)\n    md5_hash.update(txt_bytes)\n    let md5_encoded = md5_hash.final()\n    let md5_encoded = md5_encoded.map { String(format: \"%02x\", $0) }.joined()\n    return md5_encoded\n}\n",
            "func generateIntegers(_ a: Int, _ b: Int) -> [Int] {\n    let lower = max(2, min(a, b))\n    let upper = min(8, max(a, b))\n    return (lower...upper).filter { $0 % 2 == 0 }\n}\n"
        ],
        "typescript": [
            "export const hasCloseElements = (numbers: Array<number>, threshold: number): boolean => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "export const separateParenGroups = (parenString: string): Array<string> => {\n    const groups: Array<string> = [];\n    const stk: Array<string> = [];\n    let currentGroup = \"\";\n    const parens = parenString.replace(\" \", \"\");\n    for (const ch of parens) {\n        if (ch === \"(\") {\n            stk.push(ch);\n            currentGroup += ch;\n        } else if (ch === \")\") {\n            stk.pop();\n            currentGroup += ch;\n            if (stk.length === 0) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "export const truncateNumber = (num: number): number => {\n    return num - Math.floor(num);\n}\n",
            "export const belowZero = (operations: Array<number>): boolean => {\n    let balance = 0;\n    for (const op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const meanAbsoluteDeviation = (numbers: Array<number>): number => {\n    const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    const deviation = numbers.map((x) => Math.abs(x - mean)).reduce((a, b) => a + b, 0);\n    deviation / numbers.length;\n}\n",
            "export const intersperse = (numbers: Array<number>, delimiter: number): Array<number> => {\n    const result: Array<number> = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i !== 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "export const parseNestedParens = (parenString: string): Array<number> => {\n    const result: Array<number> = [];\n    const parenGroups = parenString.split(\" \");\n    for (const group of parenGroups) {\n        let depth = 0;\n        let maxDepth = 0;\n        for (const ch of group) {\n            if (ch === \"(\") {\n                depth += 1;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch === \")\") {\n                depth -= 1;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}\n",
            "export const filterBySubstring = (strs: Array<string>, substring: string): Array<string> => {\n    return strs.filter(s => s.includes(substring));\n}\n",
            "export const sumProduct = (numbers: Array<number>): Array<number> => {\n    const nSum = numbers.reduce((acc, x) => acc + x, 0);\n    const nProduct = numbers.reduce((acc, x) => acc * x, 1);\n    return [nSum, nProduct];\n}\n",
            "export const rollingMax = (numbers: Array<number>): Array<number> => {\n    let maxSoFar = Number.MIN_SAFE_INTEGER;\n    const result: Array<number> = [];\n    for (const num of numbers) {\n        maxSoFar = Math.max(maxSoFar, num);\n        result.push(maxSoFar);\n    }\n    return result;\n}\n",
            "export const makePalindrome = (s: string): string => {\n    if (s === s.split(\"\").reverse().join(\"\")) {\n        return s;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (s.slice(i) === s.slice(i).split(\"\").reverse().join(\"\")) {\n            return s + s.slice(0, i).split(\"\").reverse().join(\"\");\n        }\n    }\n    return \"\";\n}\n",
            "export const stringXor = (a: string, b: string): string => {\n    let result = \"\";\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n",
            "export const longest = (strs: Array<string>): string | null => {\n    if (strs.length === 0) {\n        return null;\n    }\n    let longestS = strs[0];\n    for (const s of strs) {\n        if (s.length > longestS.length) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}\n",
            "export const greatestCommonDivisor = (a: number, b: number): number => {\n    return b === 0 ? a : greatestCommonDivisor(b, a % b);\n}\n",
            "export const allPrefixes = (s: string): Array<string> => {\n    const prefixes: Array<string> = [];\n    for (let i = 0; i < s.length; i++) {\n        prefixes.push(s.substring(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "export const stringSequence = (n: number): string => {\n    return Array.from(Array(n + 1).keys()).map(i => i.toString()).join(\" \");\n}\n",
            "export const countDistinctCharacters = (s: string): number => {\n    const set = new Set();\n    for (const c of s.toLowerCase()) {\n        set.add(c);\n    }\n    return set.size;\n}\n",
            "export const parseMusic = (musicString: string): Array<number> => {\n    const durations = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1\n    };\n    const notes = musicString.split(\" \");\n    return notes.map((note) => durations[note]);\n}\n",
            "export const howManyTimes = (s: string, substring: string): number => {\n    let times = 0;\n    for (let i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.substring(i, i + substring.length) === substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "export const sortNumbers = (numbers: string): string => {\n    const numDict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    const numList = numbers.split(\" \").filter(word => word in numDict);\n    numList.sort((a, b) => numDict[a] - numDict[b]);\n    return numList.join(\" \");\n}\n",
            "export const findClosestElements = (numbers: Array<number>): Array<number> => {\n    const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n    let minDiff = Number.POSITIVE_INFINITY;\n    let closestPair = [];\n    for (let i = 1; i < sortedNumbers.length; i++) {\n        const diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "export const rescaleToUnit = (numbers: Array<number>): Array<number> => {\n    const minNum = Math.min(...numbers);\n    const maxNum = Math.max(...numbers);\n    if (minNum === maxNum) {\n        return Array(numbers.length).fill(0.0);\n    } else {\n        return numbers.map((num) => (num - minNum) / (maxNum - minNum));\n    }\n}\n",
            "export const filterIntegers = (values: Array<any>): Array<number> => {\n    const result: Array<number> = [];\n    for (const v of values) {\n        if (typeof v === \"number\") {\n            result.push(v);\n        }\n    }\n    return result;\n}\n",
            "export const strLength = (s: string): number => {\n    return s.length;\n}\n",
            "export const largestDivisor = (n: number): number => {\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "export const factorize = (n: number): Array<number> => {\n    const factors: Array<number> = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n = Math.floor(n / divisor);\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "export const removeDuplicates = (numbers: Array<number>): Array<number> => {\n    const counts: Map<number, number> = new Map();\n    for (const num of numbers) {\n        counts.set(num, (counts.get(num) || 0) + 1);\n    }\n    const res: Array<number> = numbers.filter((num) => counts.get(num) === 1);\n    return res;\n}\n",
            "export const flipCase = (s: string): string => {\n    let flipped = \"\";\n    for (const ch of s) {\n        if (!ch.match(/[a-zA-Z]/)) {\n            flipped += ch;\n        } else if (ch.match(/[a-z]/)) {\n            flipped += ch.toUpperCase();\n        } else if (ch.match(/[A-Z]/)) {\n            flipped += ch.toLowerCase();\n        }\n    }\n    return flipped;\n}\n",
            "export const concatenate = (strs: Array<string>): string => {\n    return strs.join(\"\");\n}\n",
            "export const filterByPrefix = (strs: Array<string>, prefixStr: string): Array<string> => {\n    const result: Array<string> = [];\n    for (const s of strs) {\n        if (s.startsWith(prefixStr)) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n",
            "export const getPositive = (l: Array<number>): Array<number> => {\n    return l.filter(num => num > 0);\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const poly = (xs: Array<number>, x: number): number => {\n    let res = 0.0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n}\nexport const findZero = (xs: Array<number>): number => {\n    let x1 = 1.0;\n    let x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0.0) {\n        x1 *= 2.0;\n        x2 *= 2.0;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        const mid = (x1 + x2) / 2.0;\n        if (poly(xs, mid) === 0.0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0.0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2.0;\n}\n",
            "export const sortThird = (l: Array<number>): Array<number> => {\n    const sortedThird = l.filter((_, i) => i % 3 === 0).sort((a, b) => a - b);\n    return l.map((e, i) => i % 3 === 0 ? sortedThird[i / 3] : e);\n}\n",
            "export const listUnique = (l: Array<number>): Array<number> => {\n    return Array.from(new Set(l)).sort();\n}\n",
            "export const maxElement = (l: Array<number>): number => {\n    if (l.length === 0) {\n        return 0;\n    }\n    return Math.max(...l);\n}\n",
            "export const fizzBuzz = (n: number): number => {\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += (i + \"\").split(\"7\").length;\n        }\n    }\n    return cnt;\n}\n",
            "export const sortEven = (l: Array<number>): Array<number> => {\n    const sortedEven = l.filter((_, i) => i % 2 === 0).sort((a, b) => a - b);\n    return l.map((e, i) => i % 2 === 0 ? sortedEven[i / 2] : e);\n}\n",
            "export const encodeCyclic = (s: string): string => {\n    let result = \"\";\n    for (let i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result += s.substring(i);\n        } else {\n            result += s.substring(i + 1, i + 3);\n            result += s.substring(i, i + 1);\n        }\n    }\n    return result;\n}\nexport const decodeCyclic = (s: string): string => {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) { return false; }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) { return false; }\n    }\n    return true;\n}\nexport const primeFib = (n: number): number => {\n    let f = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) { cnt += 1; }\n    }\n    return f[1];\n}\n",
            "export const triplesSumToZero = (l: Array<number>): boolean => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "export const carRaceCollision = (n: number): number => {\n    return n ** 2;\n}\n",
            "export const incrList = (l: Array<number>): Array<number> => {\n    return l.map(i => i + 1);\n}\n",
            "export const pairsSumToZero = (l: Array<number>): boolean => {\n    const seen = new Set();\n    for (const num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "export const changeBase = (x: number, bas: number): string => {\n    if (x === 0) {\n        return \"0\";\n    }\n    const digits: Array<string> = [];\n    while (x > 0) {\n        digits.push(String(x % bas));\n        x = Math.floor(x / bas);\n    }\n    return digits.reverse().join(\"\");\n}\n",
            "export const triangleArea = (a: number, h: number): number => {\n    return (a * h) / 2;\n}\n",
            "export const fib4 = (n: number): number => {\n    const fib: Array<number> = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2];\n    }\n    return fib[n % 4];\n}\n",
            "export const median = (l: Array<number>): number => {\n    const sl = [...l].sort((a, b) => a - b);\n    if (sl.length % 2 !== 0) {\n        return sl[sl.length / 2];\n    } else {\n        return (sl[sl.length / 2] + sl[sl.length / 2 - 1]) / 2.0;\n    }\n}\n",
            "export const isPalindrome = (txt: string): boolean => {\n    return txt === txt.split(\"\").reverse().join(\"\");\n}\n",
            "export const modp = (n: number, p: number): number => {\n    let ret = 1;\n    for (let i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "export const encodeShift = (s: string): string => {\n    return s.split(\"\").map(ch => {\n        const ch_num = ch.charCodeAt(0);\n        const shifted_ch_num = (ch_num - 97 + 5) % 26 + 97;\n        return String.fromCharCode(shifted_ch_num);\n    }).join(\"\");\n}\nexport const decodeShift = (s: string): string => {\n    return s.split(\"\").map(ch => {\n        const ch_num = ch.charCodeAt(0);\n        const shifted_ch_num = (ch_num - 97 + 21) % 26 + 97;\n        return String.fromCharCode(shifted_ch_num);\n    }).join(\"\");\n}\n",
            "export const removeVowels = (txt: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    let result = \"\";\n    for (const char of txt) {\n        if (!vowels.includes(char)) {\n            result += char;\n        }\n    }\n    return result;\n}\n",
            "export const belowThreshold = (l: Array<number>, t: number): boolean => {\n    return l.every(x => x < t);\n}\n",
            "export const add = (x: number, y: number): number => {\n    return x + y;\n}\n",
            "export const sameChars = (s0: string, s1: string): boolean => {\n    return new Set(s0).size === new Set(s1).size;\n}\n",
            "export const fib = (n: number): number => {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "export const correctBracketing = (brackets: string): boolean => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"<\") {\n            depth += 1;\n        } else if (b === \">\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const monotonic = (l: Array<number>): boolean => {\n    const diff = l.slice(1).map((x, i) => x - l[i]);\n    return diff.every((x) => x <= 0) || diff.every((x) => x >= 0);\n}\n",
            "export const common = (l1: Array<number>, l2: Array<number>): Array<number> => {\n    return Array.from(new Set(l1.filter(e => l2.includes(e))));\n}\n",
            "export const largestPrimeFactor = (n: number): number => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1;\n        } else {\n            n = Math.floor(n / i);\n        }\n    }\n    return n;\n}\n",
            "export const sumToN = (n: number): number => {\n    return (n * (n + 1)) / 2;\n}\n",
            "export const correctBracketing = (brackets: string): boolean => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"(\") {\n            depth += 1;\n        } else if (b === \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const derivative = (xs: Array<number>): Array<number> => {\n    const result: Array<number> = [];\n    for (let i = 1; i < xs.length; i++) {\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n",
            "export const fibfib = (n: number): number => {\n    if (n <= 1) {\n        return 0;\n    }\n    let a = 0;\n    let b = 0;\n    let c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "export const vowelsCount = (s: string): number => {\n    const vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase()) || (i === s.length - 1 && s[i].toLowerCase() === \"y\")) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const circularShift = (x: number, shift: number): string => {\n    const xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.split(\"\").reverse().join(\"\");\n    } else {\n        return xStr.slice(-shift) + xStr.slice(0, -shift);\n    }\n}\n",
            "export const digitSum = (s: string): number => {\n    return [...s].reduce((sum, c) => sum + c.charCodeAt(0), 0);\n}\n",
            "export const fruitDistribution = (s: string, n: number): number => {\n    const words: Array<string> = s.split(\" \");\n    const apples: number = parseInt(words[words.indexOf(\"apples\") - 1]);\n    const oranges: number = parseInt(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "export const pluck = (arr: Array<number>): Array<number> => {\n    const evens: Array<number> = [];\n    for (const n of arr) {\n        if (n % 2 === 0) {\n            evens.push(n);\n        }\n    }\n    if (evens.length === 0) {\n        return [];\n    }\n    const minEven = Math.min(...evens);\n    return [minEven, arr.indexOf(minEven)];\n}\n",
            "export const search = (lst: Array<number>): number => {\n    const freqs: Map<number, number> = new Map();\n    for (const n of lst) {\n        const count = freqs.get(n) || 0;\n        freqs.set(n, count + 1);\n    }\n    const goodVals: Array<number> = Array.from(freqs.entries()).filter(([k, v]) => v >= k).map(([k, _]) => k);\n    return Math.max(...goodVals) || -1;\n}\n",
            "export const strangeSortList = (lst: Array<number>): Array<number> => {\n    const sl = lst.sort((a, b) => a - b);\n    const result: Array<number> = [];\n    let left = 0;\n    let right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "export const triangleArea = (a: number, b: number, c: number): number => {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "export const willItFly = (q: Array<number>, w: number): boolean => {\n    if (q.length === 0) {\n        return false;\n    }\n    const isPalin = q.every((e, i) => e === q[q.length - i - 1]);\n    const total = q.reduce((a, b) => a + b);\n    return isPalin && total <= w;\n}\n",
            "export const smallestChange = (arr: Array<number>): number => {\n    let ans = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i] !== arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "export const totalMatch = (lst1: Array<string>, lst2: Array<string>): Array<string> => {\n    const cnt1 = lst1.reduce((acc, s) => acc + s.length, 0);\n    const cnt2 = lst2.reduce((acc, s) => acc + s.length, 0);\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n",
            "export const isMultiplyPrime = (a: number): boolean => {\n    if (a < 2) {\n        return false;\n    }\n    let cnt = 0;\n    for (let i = 2; i <= Math.floor(Math.sqrt(a)) + 1; i++) {\n        if (isPrime(i)) {\n            while (a % i === 0) {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    return cnt === 3;\n}\n",
            "export const isSimplePower = (x: number, n: number): boolean => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}\n",
            "export const isCube = (a: number): boolean => {\n    a = Math.abs(a);\n    const root = Math.round(Math.pow(a, 1.0 / 3.0));\n    return root * root * root === a;\n}\n",
            "export const hexKey = (num: string): number => {\n    return [...num].filter(x => \"2357BD\".includes(x)).length;\n}\n",
            "export const decimalToBinary = (dec: number): string => {\n    return `db${dec.toString(2)}db`;\n}\n",
            "export const isHappy = (s: string): boolean => {\n    if (s.length < 3) {\n        return false;\n    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const numericalLetterGrade = (grades: Array<number>): Array<string> => {\n    const result: Array<string> = [];\n    for (const g of grades) {\n        if (g === 4.0) {\n            result.push(\"A+\");\n        } else if (g > 3.7) {\n            result.push(\"A\");\n        } else if (g > 3.3) {\n            result.push(\"A-\");\n        } else if (g > 3.0) {\n            result.push(\"B+\");\n        } else if (g > 2.7) {\n            result.push(\"B\");\n        } else if (g > 2.3) {\n            result.push(\"B-\");\n        } else if (g > 2.0) {\n            result.push(\"C+\");\n        } else if (g > 1.7) {\n            result.push(\"C\");\n        } else if (g > 1.3) {\n            result.push(\"C-\");\n        } else if (g > 1.0) {\n            result.push(\"D+\");\n        } else if (g > 0.7) {\n            result.push(\"D\");\n        } else if (g > 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n",
            "export const primeLength = (s: string): boolean => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(length)) + 1; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const startsOneEnds = (n: number): number => {\n    if (n === 1) {\n        return 1;\n    }\n    return 2 * 9 * (10 ** (n - 2));\n}\n",
            "export const solve = (n: number): string => {\n    const digitsSum = n.toString().split(\"\").map(d => parseInt(d)).reduce((a, b) => a + b);\n    return digitsSum.toString(2);\n}\n",
            "export const add = (lst: Array<number>): number => {\n    return lst.filter((x, i) => i % 2 === 1 && x % 2 === 0).reduce((a, b) => a + b, 0);\n}\n",
            "export const antiShuffle = (s: string): string => {\n    const words: Array<string> = s.split(\" \").map((word) => {\n        const chars: Array<string> = word.split(\"\").sort().join(\"\");\n        return chars;\n    });\n    return words.join(\" \");\n}\n",
            "export const getRow = (lst: Array<Array<number>>, x: number): Array<Array<number>> => {\n    const coords: Array<Array<number>> = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    coords.sort((a, b) => {\n        return a[0] - b[0] || b[1] - a[1];\n    });\n    return coords;\n}\n",
            "export const sortArray = (arr: Array<number>): Array<number> => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) {\n        return arr.sort((a, b) => b - a);\n    } else {\n        return arr.sort((a, b) => a - b);\n    }\n}\n",
            "export const encrypt = (s: string): string => {\n    let result = \"\";\n    for (const ch of s) {\n        let shifted = ch.charCodeAt(0) + 4;\n        if (shifted > \"z\".charCodeAt(0)) {\n            shifted -= 26;\n        }\n        result += String.fromCharCode(shifted);\n    }\n    return result;\n}\n",
            "export const nextSmallest = (lst: Array<number>): number | null => {\n    const sl = [...lst].sort();\n    const deduped = [...new Set(sl)];\n    if (deduped.length < 2) {\n        return null;\n    }\n    return deduped[1];\n}\n",
            "export const isBored = (s: string): number => {\n    const re = /[.!?]\\s*/;\n    const sentences: Array<string> = s.split(re);\n    return sentences.filter((sentence) => sentence.length >= 2 && sentence.slice(0, 2) === \"I \").length;\n}\n",
            "export const anyInt = (x: any, y: any, z: any): boolean => {\n    if (typeof x === \"number\" && typeof y === \"number\" && typeof z === \"number\") {\n        return x + y === z || x + z === y || y + z === x;\n    }\n    return false;\n}\n",
            "export const encode = (message: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    const result: Array<string> = [];\n    for (const ch of message) {\n        if (ch.match(/[a-zA-Z]/)) {\n            const ch1 = ch.toUpperCase() === ch ? ch.toLowerCase() : ch.toUpperCase();\n            if (vowels.includes(ch1)) {\n                result.push(String.fromCharCode(ch1.charCodeAt(0) + 2));\n            } else {\n                result.push(ch1);\n            }\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= floor(sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const skjkasdkd = (lst: Array<number>): number => {\n    const primes = lst.filter(isPrime);\n    if (primes.length === 0) {\n        return 0;\n    }\n    const largest = Math.max(...primes).toString();\n    return largest.split(\"\").reduce((acc, digit) => acc + parseInt(digit), 0);\n}\n",
            "export const checkDictCase = (d: Map<string, string>): boolean => {\n    if (d.size === 0) {\n        return false;\n    }\n    return [...d.keys()].every(c => c.toLowerCase() === c) || [...d.keys()].every(c => c.toUpperCase() === c);\n}\n",
            "export const countUpTo = (n: number): Array<number> => {\n    const primes: Array<number> = [];\n    for (let num = 2; num < n; num++) {\n        if (primes.every((p) => num % p !== 0)) {\n            primes.push(num);\n        }\n    }\n    return primes;\n}\n",
            "export const multiply = (a: number, b: number): number => {\n    return Math.abs(a) % 10 * Math.abs(b) % 10;\n}\n",
            "export const countUpper = (s: string): number => {\n    const vowels = \"AEIOU\";\n    let result = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (i % 2 === 0 && vowels.includes(s[i])) {\n            result += 1;\n        }\n    }\n    return result;\n}\n",
            "export const closestInteger = (value: string): number => {\n    const num = parseFloat(value);\n    if (num >= 0.0) {\n        return Math.floor(num + 0.5);\n    } else {\n        return Math.ceil(num - 0.5);\n    }\n}\n",
            "export const makeAPile = (n: number): Array<number> => {\n    return Array.from({ length: n }, (_, i) => n + 2 * i);\n}\n",
            "export const wordsString = (s: string): Array<string> => {\n    const re = /[, ]/;\n    const result: Array<string> = [];\n    for (const w of s.split(re)) {\n        if (w.length > 0) {\n            result.push(w);\n        }\n    }\n    return result;\n}\n",
            "export const chooseNum = (x: number, y: number): number => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    if (x !== y) {\n        return y - 1;\n    }\n    -1\n}\n",
            "export const roundedAvg = (n: number, m: number): string | null => {\n    if (n > m) {\n        return null;\n    }\n    const rAvg = Math.floor((m + n) / 2.0 + 0.5);\n    return rAvg.toString(2);\n}\n",
            "export const allDigitsOdd = (s: string): boolean => {\n    return s.split(\"\").every((digit) => parseInt(digit) % 2 !== 0);\n}\nexport const uniqueDigits = (x: Array<number>): Array<number> => {\n    const result: Array<number> = [];\n    for (const num of x) {\n        if (allDigitsOdd(num.toString())) {\n            result.push(num);\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}\n",
            "export const byLength = (arr: Array<number>): Array<string> => {\n    const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const sortedArr = arr.filter(x => 1 <= x && x <= 9).sort((a, b) => b - a);\n    return sortedArr.map(x => digitNames[x - 1]);\n}\n",
            "export const f = (n: number): Array<number> => {\n    const nums = Array.from({ length: n }, (_, i) => i + 1);\n    return nums.map((i) => {\n        if (i % 2 !== 0) {\n            return nums.slice(0, i).reduce((a, b) => a + b, 0);\n        } else {\n            return nums.slice(0, i).reduce((a, b) => a * b, 1);\n        }\n    });\n}\n",
            "export const isPalindrome = (txt: string): boolean => {\n    return txt === txt.split(\"\").reverse().join(\"\");\n}\nexport const evenOddPalindrome = (n: number): Array<number> => {\n    const cnt = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[(i % 2) as usize] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const digitsSum = (n: number): number => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split(\"\").reduce((acc, d) => acc + parseInt(d), 0);\n    } else {\n        return parseInt(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n    }\n}\nexport const countNums = (arr: Array<number>): number => {\n    return arr.filter(n => digitsSum(n) > 0).length;\n}\n",
            "export const moveOneBall = (arr: Array<number>): boolean => {\n    if (arr.length === 0) {\n        return true;\n    }\n    const sortedArr = arr.slice().sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.slice(i).join(\"\") === sortedArr.slice(arr.length - i).join(\"\") && arr.slice(0, i).join(\"\") === sortedArr.slice(arr.length - i).join(\"\")) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const canExchange = (lst1: Array<number>, lst2: Array<number>): string => {\n    const oddCnt = lst1.filter(num => num % 2 !== 0).length;\n    const evenCnt = lst2.filter(num => num % 2 === 0).length;\n    return evenCnt >= oddCnt ? \"YES\" : \"NO\";\n}\n",
            "export const histogram = (test: string): Map<string, number> => {\n    const freq: Map<string, number> = new Map();\n    const words = test.split(\" \").filter((w) => w.length > 0);\n    for (const w of words) {\n        const count = freq.get(w) || 0;\n        freq.set(w, count + 1);\n    }\n    const result: Map<string, number> = new Map();\n    if (freq.size > 0) {\n        const maxFreq = Math.max(...Array.from(freq.values()));\n        for (const [k, v] of freq.entries()) {\n            if (v === maxFreq) {\n                result.set(k, v);\n            }\n        }\n    }\n    return result;\n}\n",
            "export const isPalindrome = (s: string): boolean => {\n    return s === s.split(\"\").reverse().join(\"\");\n}\nexport const reverseDelete = (s: string, c: string): Array<string> => {\n    const s1 = s.split(\"\").filter(ch => !c.includes(ch)).join(\"\");\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"];\n}\n",
            "export const oddCount = (lst: Array<string>): Array<string> => {\n    const result: Array<string> = [];\n    for (const num of lst) {\n        const n = [...num].reduce((acc, d) => acc + (d.charCodeAt(0) % 2 === 1 ? 1 : 0), 0);\n        const rs = \"the number of odd elements in the string i of the input.\";\n        result.push(rs.replace(\"i\", String(n)));\n    }\n    return result;\n}\n",
            "export const minSubArraySum = (nums: Array<number>): number => {\n    let minSum = 0;\n    let curSum = 0;\n    for (const n of nums) {\n        curSum = Math.min(curSum + n, 0);\n        minSum = Math.min(curSum, minSum);\n    }\n    if (minSum === 0) {\n        minSum = Math.min(...nums);\n    }\n    return minSum;\n}\n",
            "export const maxFill = (grid: Array<Array<number>>, capacity: number): number => {\n    return grid.reduce((sum, arr) => sum + Math.ceil(arr.reduce((sum, e) => sum + e, 0) / capacity), 0);\n}\n",
            "export const countOnes = (num: number): number => {\n    let count = 0;\n    let num = num;\n    while (num > 0) {\n        if (num & 1 === 1) {\n            count += 1;\n        }\n        num >>= 1;\n    }\n    return count;\n}\nexport const sortArray = (arr: Array<number>): Array<number> => {\n    const arr = arr.slice();\n    arr.sort((a, b) => {\n        const aCount = countOnes(a);\n        const bCount = countOnes(b);\n        if (aCount === bCount) {\n            return a - b;\n        } else {\n            return aCount - bCount;\n        }\n    });\n    return arr;\n}\n",
            "export const selectWords = (s: string, n: number): Array<string> => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = s.split(\" \").filter(w => w.length > 0);\n    return words.filter(w => [...w].filter(c => c.toLowerCase() in consonants).length === n);\n}\n",
            "export const getClosestVowel = (word: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i >= 1; i--) {\n        if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "export const matchParens = (lst: Array<string>): string => {\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    if (check(s1) || check(s2)) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction check(s: string): boolean {\n    let depth = 0;\n    for (const ch of s) {\n        if (ch === \"(\") {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const maximum = (arr: Array<number>, k: number): Array<number> => {\n    if (k === 0) {\n        return [];\n    }\n    return arr.sort((a, b) => b - a).slice(-k);\n}\n",
            "export const solution = (lst: Array<number>): number => {\n    return lst.reduce((acc, x, i) => {\n        if (i % 2 === 0 && x % 2 !== 0) {\n            return acc + x;\n        }\n        return acc;\n    }, 0);\n}\n",
            "export const addElements = (arr: Array<number>, k: number): number => {\n    return arr.slice(0, k).filter(n => n.toString().length <= 2).reduce((a, b) => a + b, 0);\n}\n",
            "export const getOddCollatz = (n: number): Array<number> => {\n    const collatz: Array<number> = [1];\n    while (n !== 1) {\n        if (n % 2 !== 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = Math.floor(n / 2);\n        }\n    }\n    return collatz.sort((a, b) => a - b);\n}\n",
            "export const validDate = (date: string): boolean => {\n    if (date.length !== 10 || date[2] !== \"-\" || date[5] !== \"-\") {\n        return false;\n    }\n    const m = parseInt(date.substring(0, 2));\n    const d = parseInt(date.substring(3, 5));\n    if (m === 1 || m === 3 || m === 5 || m === 7 || m === 8 || m === 10 || m === 12) {\n        return d >= 1 && d <= 31;\n    }\n    if (m === 4 || m === 6 || m === 9 || m === 11) {\n        return d >= 1 && d <= 30;\n    }\n    if (m === 2) {\n        return d >= 1 && d <= 29;\n    }\n    return false;\n}\n",
            "export const splitWords = (txt: string): Array<string> => {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [String(txt.split(\"\").filter(c => c.toLowerCase() && c.charCodeAt(0) % 2 === 0).length)];\n    }\n}\n",
            "export const isSorted = (lst: Array<number>): boolean => {\n    if (!lst.slice(1).every((e, i) => e >= lst[i])) {\n        return false;\n    }\n    const freq = new Map();\n    for (const i of lst) {\n        const count = freq.get(i) || 0;\n        freq.set(i, count + 1);\n    }\n    const maxFreq = Math.max(...freq.values());\n    return maxFreq <= 2;\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= floor(sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const intersection = (interval1: Array<number>, interval2: Array<number>): string => {\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n}\n",
            "export const prodSigns = (arr: Array<number>): number | null => {\n    if (arr.length === 0) {\n        return null;\n    }\n    if (arr.includes(0)) {\n        return 0;\n    }\n    const sign = arr.filter(n => n < 0).length % 2 === 1 ? -1 : 1;\n    return sign * arr.map(n => Math.abs(n)).reduce((a, b) => a + b);\n}\n",
            "export const minPath = (grid: Array<Array<number>>, k: number): Array<number> => {\n    const n = grid.length;\n    let minVal = n * n + 1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                const temp: Array<number> = [];\n                if (i !== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j !== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i !== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j !== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                minVal = Math.min(...temp);\n            }\n        }\n    }\n    const result: Array<number> = [];\n    for (let i = 0; i < k; i++) {\n        result.push(1);\n    }\n    return result;\n}\n",
            "export const tri = (n: number): Array<number> => {\n    if (n === 0) {\n        return [1];\n    }\n    let seq = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(Math.floor(i / 2) + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + Math.floor((i + 3) / 2));\n        }\n    }\n    return seq;\n}\n",
            "export const digits = (n: number): number => {\n    const odds = [...n.toString()].map(d => parseInt(d)).filter(d => d % 2 === 1);\n    return odds.reduce((x, y) => x * y, 1) || 0;\n}\n",
            "export const isNested = (s: string): boolean => {\n    const openIdx: Array<number> = [];\n    const closeIdx: Array<number> = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === \"[\") {\n            openIdx.push(i);\n        } else if (s[i] === \"]\") {\n            closeIdx.push(i);\n        }\n    }\n    closeIdx.reverse();\n    let cnt = 0;\n    let i = 0;\n    const l = closeIdx.length;\n    for (const idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "export const sumSquares = (lst: Array<number>): number => {\n    let result = 0;\n    for (const n of lst) {\n        result += Math.ceil(n) ** 2;\n    }\n    return result;\n}\n",
            "export const checkIfLastCharIsALetter = (txt: string): boolean => {\n    if (!txt) {\n        return false;\n    }\n    const last = txt.substring(txt.lastIndexOf(\" \") + 1);\n    return last.length === 1 && last[0].isAlpha();\n}\n",
            "export const canArrange = (arr: Array<number>): number => {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    const idx = arr.map((e, i) => i).filter(i => arr[i] < arr[i - 1]);\n    return Math.max(...idx, -1);\n}\n",
            "export const largestSmallestIntegers = (lst: Array<number>): Array<number | null> => {\n    const neg = lst.filter(i => i < 0);\n    const pos = lst.filter(i => i > 0);\n    const maxNeg = neg.length > 0 ? Math.max(...neg) : null;\n    const minPos = pos.length > 0 ? Math.min(...pos) : null;\n    return [maxNeg, minPos];\n}\n",
            "export const compareOne = (a: any, b: any): number | null => {\n    const a1 = typeof a === \"string\" ? parseFloat(a.replace(\",\", \".\")) : typeof a === \"number\" ? a : null;\n    const b1 = typeof b === \"string\" ? parseFloat(b.replace(\",\", \".\")) : typeof b === \"number\" ? b : null;\n    if (a1 === b1) {\n        return null;\n    }\n    else if (a1 > b1) {\n        return a1;\n    }\n    else {\n        return b1;\n    }\n}\n",
            "export const isEqualToSumEven = (n: number): boolean => {\n    return n % 2 === 0 && n >= 8;\n}\n",
            "export const specialFactorial = (n: number): number => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i < (n + 1); i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "export const fixSpaces = (txt: string): string => {\n    return re.sub(/\\s{3,}/, \"-\", txt).replace(\" \", \"_\");\n}\n",
            "export const fileNameCheck = (fileName: string): string => {\n    const suf = [\"txt\", \"exe\", \"dll\"];\n    const lst = fileName.split(\".\");\n    if (lst.length !== 2 || !suf.includes(lst[1]) || lst[0].length === 0 || !lst[0].charAt(0).match(/[a-zA-Z]/) || lst[0].split(\"\").filter(x => x.match(/[0-9]/)).length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "export const sumSquares = (lst: Array<number>): number => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += lst[i] * lst[i];\n        } else if (i % 4 === 0) {\n            result += lst[i] * lst[i] * lst[i];\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const wordsInSentence = (sentence: string): string => {\n    const words = sentence.split(\" \");\n    return words.filter((w) => isPrime(w.length)).join(\" \");\n}\nexport const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= floor(sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const simplify = (x: string, n: string): boolean => {\n    const xs = x.split(\"/\");\n    const ns = n.split(\"/\");\n    const num = parseInt(xs[0]) * parseInt(ns[0]);\n    const den = parseInt(xs[1]) * parseInt(ns[1]);\n    return num % den === 0;\n}\n",
            "export const digitsSum = (n: number): number => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split(\"\").reduce((acc, d) => acc + parseInt(d), 0);\n    } else {\n        return parseInt(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n    }\n}\nexport const orderByPoints = (nums: Array<number>): Array<number> => {\n    return nums.sort((a, b) => digitsSum(a) - digitsSum(b));\n}\n",
            "export const specialFilter = (nums: Array<number>): number => {\n    const odds = \"13579\";\n    return nums.filter(n => n > 10 && n % 2 === 1 && odds.includes(n.toString()[0])).length;\n}\n",
            "export const getMaxTriples = (n: number): number => {\n    const c: Array<number> = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        const a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}\n",
            "export const bf = (planet1: string, planet2: string): Array<string> => {\n    const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.includes(planet1) || !names.includes(planet2)) {\n        return [];\n    }\n    let l = names.indexOf(planet1);\n    let r = names.indexOf(planet2);\n    if (l > r) {\n        l = r;\n        r = l;\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n}\n",
            "export const sortedListSum = (lst: Array<string>): Array<string> => {\n    const result: Array<string> = [];\n    for (const s of lst) {\n        if (s.length % 2 === 0) {\n            result.push(s);\n        }\n    }\n    result.sort((a, b) => {\n        if (a.length === b.length) {\n            return a.localeCompare(b);\n        } else {\n            return a.length - b.length;\n        }\n    });\n    return result;\n}\n",
            "export const xOrY = (n: number, x: number, y: number): number => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "export const doubleTheDifference = (lst: Array<number>): number => {\n    return lst.reduce((acc, n) => acc + (n >= 0 && n % 2 === 1 ? n * n : 0), 0);\n}\n",
            "export const compare = (game: Array<number>, guess: Array<number>): Array<number> => {\n    return game.map((x, i) => Math.abs(x - guess[i]));\n}\n",
            "export const strongestExtension = (className: string, extensions: Array<string>): string => {\n    let maxS = Number.NEGATIVE_INFINITY;\n    let maxExt = \"\";\n    for (const ext of extensions) {\n        let upper = 0;\n        let lower = 0;\n        for (const c of ext) {\n            if (c.toUpperCase() === c) {\n                upper += 1;\n            } else if (c.toLowerCase() === c) {\n                lower += 1;\n            }\n        }\n        const s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return `${className}.${maxExt}`;\n}\n",
            "export const cycpatternCheck = (a: string, b: string): boolean => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; i++) {\n        if (b.substring(i) + b.substring(0, i) in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const evenOddCount = (num: number): Array<number> => {\n    const ds = num.toString().split(\"\").map(d => parseInt(d));\n    const even = ds.filter(d => d % 2 === 0).length;\n    return [even, ds.length - even];\n}\n",
            "export const intToMiniRoman = (num: number): string => {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    const res: Array<string> = [];\n    for (let i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.push(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join(\"\");\n}\n",
            "export const rightAngleTriangle = (a: number, b: number, c: number): boolean => {\n    const s = [a, b, c].sort((a, b) => a - b);\n    return s[0] * s[0] + s[1] * s[1] === s[2] * s[2];\n}\n",
            "export const findMax = (words: Array<string>): string => {\n    let maxCnt = 0;\n    let maxW = \"\";\n    for (const w of words) {\n        const cnt = new Set(w).size;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt === maxCnt) {\n            maxW = min(maxW, w);\n        }\n    }\n    return maxW;\n}\n",
            "export const eat = (num: number, need: number, remaining: number): Array<number> => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "export const doAlgebra = (operators: Array<string>, operands: Array<number>): number => {\n    const ops = operators.slice();\n    const nums = operands.slice();\n    let i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] === \"**\") {\n            nums[i] = Math.pow(nums[i], nums[i + 1]);\n            nums.pop();\n            ops.pop();\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.pop();\n            ops.pop();\n            i -= 1;\n        } else if (ops[i] === \"//\") {\n            nums[i] = Math.floor(nums[i] / nums[i + 1]);\n            nums.pop();\n            ops.pop();\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.pop();\n            ops.pop();\n            i -= 1;\n        } else if (ops[i] === \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.pop();\n            ops.pop();\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "export const solve = (s: string): string => {\n    if (!s.match(/[a-zA-Z]/)) {\n        return s.split(\"\").reverse().join(\"\");\n    }\n    const result: Array<string> = [];\n    for (const ch of s) {\n        if (!ch.match(/[a-zA-Z]/)) {\n            result.push(ch);\n        } else if (ch.toUpperCase() === ch) {\n            result.push(ch.toLowerCase());\n        } else {\n            result.push(ch.toUpperCase());\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const stringToMd5 = (txt: string): string | null => {\n    if (txt.length === 0) {\n        return null;\n    }\n    const md5_hash = createHash(\"md5\");\n    const txt_bytes = Buffer.from(txt);\n    md5_hash.update(txt_bytes);\n    const md5_encoded = md5_hash.digest(\"hex\");\n    return md5_encoded;\n}\n",
            "export const generateIntegers = (a: number, b: number): Array<number> => {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n    return Array.from(Array(upper - lower + 1).keys()).filter(i => i % 2 === 0).map(i => i + lower);\n}\n"
        ]
    }
}