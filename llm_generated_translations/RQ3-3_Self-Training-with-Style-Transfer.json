{
    "python": {
        "cpp": [
            "bool hasCloseElements(const vector<double>& numbers, double threshold) {\n    for (int i = 0; i < numbers.size(); ++i) {\n        for (int j = i + 1; j < numbers.size(); ++j) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "vector<string> separateParenGroups(const string& paren_string) {\n    vector<string> groups;\n    stack<char> stk;\n    string current_group;\n    string parens = paren_string.replace(paren_string.find(' '), 1, \"\");\n    for (char ch : parens) {\n        if (ch == '(') {\n            stk.push(ch);\n            current_group += ch;\n        } else if (ch == ')') {\n            stk.pop();\n            current_group += ch;\n            if (stk.empty()) {\n                groups.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - floor(num);\n}\n",
            "bool belowZero(const vector<int>& operations) {\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(const vector<double>& numbers) {\n    double mean = 0.0;\n    for (double x : numbers) {\n        mean += x;\n    }\n    mean /= numbers.size();\n    double deviation = 0.0;\n    for (double x : numbers) {\n        deviation += abs(x - mean);\n    }\n    return deviation / numbers.size();\n}\n",
            "vector<int> intersperse(const vector<int>& numbers, int delimiter) {\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n        if (i != 0) {\n            result.push_back(delimiter);\n        }\n        result.push_back(numbers[i]);\n    }\n    return result;\n}\n",
            "vector<int> parseNestedParens(const string& paren_string) {\n    vector<int> result;\n    stringstream ss(paren_string);\n    string group;\n    while (ss >> group) {\n        int max_depth = 0;\n        int depth = 0;\n        for (char ch : group) {\n            if (ch == '(') {\n                depth++;\n                max_depth = max(max_depth, depth);\n            } else if (ch == ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n    }\n    return result;\n}\n",
            "vector<string> filterBySubstring(const vector<string>& strs, const string& substring) {\n    vector<string> result;\n    for (string s : strs) {\n        if (s.find(substring) != string::npos) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n",
            "vector<int> sumProduct(const vector<int>& numbers) {\n    int n_sum = 0;\n    int n_product = 1;\n    for (int n : numbers) {\n        n_sum += n;\n        n_product *= n;\n    }\n    return {n_sum, n_product};\n}\n",
            "vector<int> rollingMax(const vector<int>& numbers) {\n    vector<int> result;\n    int max_so_far = INT_MIN;\n    for (int num : numbers) {\n        max_so_far = max(max_so_far, num);\n        result.push_back(max_so_far);\n    }\n    return result;\n}\n",
            "string makePalindrome(string s) {\n    if (s == s.substr(s.size() - s.size())) {\n        return s;\n    }\n    for (int i = 0; i < s.size(); i++) {\n        if (s.substr(i) == s.substr(i).substr(s.size() - i)) {\n            return s + s.substr(0, i);\n        }\n    }\n    return \"\";\n}\n",
            "string stringXor(const string& a, const string& b) {\n    string result;\n    for (int i = 0; i < a.size(); ++i) {\n        result += a[i] == b[i] ? '0' : '1';\n    }\n    return result;\n}\n",
            "optional<string> longest(const vector<string>& strs) {\n    if (strs.empty()) {\n        return nullopt;\n    }\n    string longest_s = strs[0];\n    for (string s : strs) {\n        if (s.size() > longest_s.size()) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    while (b != 0) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n",
            "vector<string> allPrefixes(const string& s) {\n    vector<string> prefixes;\n    for (int i = 0; i < s.size(); i++) {\n        prefixes.push_back(s.substr(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "string stringSequence(int n) {\n    string result;\n    for (int i = 0; i <= n; ++i) {\n        result += to_string(i) + \" \";\n    }\n    return result.substr(0, result.size() - 1);\n}\n",
            "int countDistinctCharacters(const string& s) {\n    set<char> distinctCharacters;\n    for (char char_ : s) {\n        distinctCharacters.insert(tolower(char_));\n    }\n    return distinctCharacters.size();\n}\n",
            "vector<int> parseMusic(const string& music_string) {\n    unordered_map<string, int> durations = {{\"o\", 4}, {\"o|\", 2}, {\".|\", 1}};\n    vector<string> notes = split(music_string, ' ');\n    vector<int> result;\n    for (string note : notes) {\n        result.push_back(durations[note]);\n    }\n    return result;\n}\n",
            "int howManyTimes(const string& s, const string& substring) {\n    int times = 0;\n    for (int i = 0; i < s.size() - substring.size() + 1; ++i) {\n        if (s.substr(i, substring.size()) == substring) {\n            times++;\n        }\n    }\n    return times;\n}\n",
            "string sortNumbers(const string& numbers) {\n    unordered_map<string, int> num_dict = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9},\n    };\n    vector<string> num_list;\n    for (string x : split(numbers, ' ')) {\n        if (num_dict.find(x) != num_dict.end()) {\n            num_list.push_back(x);\n        }\n    }\n    sort(num_list.begin(), num_list.end(), [&](string x, string y) {\n        return num_dict[x] < num_dict[y];\n    });\n    return join(num_list, \" \");\n}\n",
            "vector<double> findClosestElements(const vector<double>& numbers) {\n    vector<double> sorted_numbers = numbers;\n    sort(sorted_numbers.begin(), sorted_numbers.end());\n    double min_diff = numeric_limits<double>::max();\n    vector<double> closest_pair;\n    for (int i = 1; i < sorted_numbers.size(); ++i) {\n        double diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {sorted_numbers[i - 1], sorted_numbers[i]};\n        }\n    }\n    return closest_pair;\n}\n",
            "vector<double> rescaleToUnit(const vector<double>& numbers) {\n    double min_num = numeric_limits<double>::max();\n    double max_num = numeric_limits<double>::min();\n    for (double num : numbers) {\n        if (num < min_num) {\n            min_num = num;\n        }\n        if (num > max_num) {\n            max_num = num;\n        }\n    }\n    if (min_num == max_num) {\n        return vector<double>(numbers.size(), 0.0);\n    } else {\n        vector<double> result(numbers.size());\n        transform(numbers.begin(), numbers.end(), result.begin(), [min_num, max_num](double num) {\n            return (num - min_num) / (max_num - min_num);\n        });\n        return result;\n    }\n}\n",
            "vector<int> filterIntegers(const vector<any>& values) {\n    vector<int> result;\n    for (const any& x : values) {\n        if (any_cast<int>(&x)) {\n            result.push_back(any_cast<int>(x));\n        }\n    }\n    return result;\n}\n",
            "int strLength(const string& s) {\n    int length = 0;\n    for (char c : s) {\n        length++;\n    }\n    return length;\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "vector<int> factorize(int n) {\n    vector<int> factors;\n    int divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.push_back(divisor);\n            n /= divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n",
            "vector<int> removeDuplicates(const vector<int>& numbers) {\n    unordered_map<int, int> counts;\n    for (int num : numbers) {\n        if (counts.find(num) == counts.end()) {\n            counts[num] = 1;\n        } else {\n            counts[num] += 1;\n        }\n    }\n    vector<int> res;\n    for (int num : numbers) {\n        if (counts[num] == 1) {\n            res.push_back(num);\n        }\n    }\n    return res;\n}\n",
            "string flipCase(const string& s) {\n    string result;\n    for (char ch : s) {\n        if (!isalpha(ch)) {\n            result.push_back(ch);\n        } else if (islower(ch)) {\n            result.push_back(toupper(ch));\n        } else {\n            result.push_back(tolower(ch));\n        }\n    }\n    return result;\n}\n",
            "string concatenate(const vector<string>& strs) {\n    string result = \"\";\n    for (string s : strs) {\n        result += s;\n    }\n    return result;\n}\n",
            "vector<string> filterByPrefix(const vector<string>& strs, const string& prefix_str) {\n    vector<string> result;\n    for (string s : strs) {\n        if (s.find(prefix_str) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n",
            "vector<int> getPositive(const vector<int>& l) {\n    vector<int> result;\n    for (int num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "double poly(const vector<int>& xs, double x) {\n    double res = 0.0;\n    for (int i = 0; i < xs.size(); ++i) {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\ndouble findZero(const vector<int>& xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "vector<int> sortThird(const vector<int>& l) {\n    vector<int> sorted_third = l;\n    sort(sorted_third.begin(), sorted_third.end());\n    vector<int> result(l.size());\n    for (int i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            result[i] = sorted_third[i / 3];\n        } else {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}\n",
            "vector<int> listUnique(const vector<int>& l) {\n    set<int> unique_list;\n    for (int item : l) {\n        unique_list.insert(item);\n    }\n    vector<int> result(unique_list.begin(), unique_list.end());\n    sort(result.begin(), result.end());\n    return result;\n}\n",
            "int maxElement(const vector<int>& l) {\n    int max_value = -2147483648;\n    for (int i : l) {\n        if (i > max_value) {\n            max_value = i;\n        }\n    }\n    return max_value;\n}\n",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; ++i) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += count(to_string(i).begin(), to_string(i).end(), '7');\n        }\n    }\n    return cnt;\n}\n",
            "vector<int> sortEven(const vector<int>& l) {\n    vector<int> sorted_even(l.begin(), l.end());\n    sort(sorted_even.begin(), sorted_even.end());\n    vector<int> result(l.size());\n    for (int i = 0; i < l.size(); ++i) {\n        result[i] = i % 2 == 0 ? sorted_even[i / 2] : l[i];\n    }\n    return result;\n}\n",
            "string encodeCyclic(const string& s) {\n    string result;\n    for (int i = 0; i < s.size(); i += 3) {\n        if (i + 3 > s.size()) {\n            result += s.substr(i);\n        } else {\n            result += s.substr(i + 1, 2);\n            result += s[i];\n        }\n    }\n    return result;\n}\nstring decodeCyclic(const string& s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "int primeFib(int n) {\n    vector<int> f = {0, 1};\n    int cnt = 0;\n    while (cnt < n) {\n        f = {f[1], f[0] + f[1]};\n        if (isPrime(f[1])) {\n            cnt++;\n        }\n    }\n    return f[1];\n}\nbool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "bool triplesSumToZero(const vector<int>& l) {\n    for (int i = 0; i < l.size(); ++i) {\n        for (int j = i + 1; j < l.size(); ++j) {\n            for (int k = j + 1; k < l.size(); ++k) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return pow(n, 2);\n}\n",
            "vector<int> incrList(const vector<int>& l) {\n    vector<int> result(l.size());\n    for (int i = 0; i < l.size(); ++i) {\n        result[i] = l[i] + 1;\n    }\n    return result;\n}\n",
            "bool pairsSumToZero(const vector<int>& l) {\n    unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.count(-num)) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n",
            "string changeBase(int x, int bas) {\n    string result = \"\";\n    while (x > 0) {\n        result = to_string(x % bas) + result;\n        x /= bas;\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int h) {\n    return a * h / 2.0;\n}\n",
            "int fib4(int n) {\n    vector<int> fib(4, 0);\n    fib[2] = 2;\n    for (int i = 4; i <= n; i++) {\n        fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4];\n    }\n    return fib[n % 4];\n}\n",
            "double median(const vector<double>& l) {\n    vector<double> sl = l;\n    sort(sl.begin(), sl.end());\n    if (l.size() % 2 != 0) {\n        return sl[l.size() / 2];\n    } else {\n        return (sl[l.size() / 2] + sl[l.size() / 2 - 1]) / 2;\n    }\n}\n",
            "bool isPalindrome(const string& txt) {\n    for (int i = 0; i < txt.size() / 2; ++i) {\n        if (txt[i] != txt[txt.size() - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "string encodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        result.push_back(((ch - 'a' + 5) % 26) + 'a');\n    }\n    return result;\n}\nstring decodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        result.push_back(((ch - 'a' + 21) % 26) + 'a');\n    }\n    return result;\n}\n",
            "string removeVowels(const string& txt) {\n    string vowels = \"aeiouAEIOU\";\n    string result;\n    for (char charr : txt) {\n        if (vowels.find(charr) == string::npos) {\n            result += charr;\n        }\n    }\n    return result;\n}\n",
            "bool belowThreshold(const vector<int>& l, int t) {\n    for (int x : l) {\n        if (x >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(const string& s0, const string& s1) {\n    unordered_set<char> s0_set(s0.begin(), s0.end());\n    unordered_set<char> s1_set(s1.begin(), s1.end());\n    return s0_set == s1_set;\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '<') {\n            depth++;\n        } else if (b == '>') {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(const vector<int>& l) {\n    vector<int> diff(l.size() - 1);\n    for (int i = 0; i < l.size() - 1; ++i) {\n        diff[i] = l[i + 1] - l[i];\n    }\n    return all_of(diff.begin(), diff.end(), [](int x) { return x <= 0; }) || all_of(diff.begin(), diff.end(), [](int x) { return x >= 0; });\n}\n",
            "vector<int> common(const vector<int>& l1, const vector<int>& l2) {\n    vector<int> result;\n    for (int i : l1) {\n        if (find(l2.begin(), l2.end(), i) != l2.end()) {\n            result.push_back(i);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i++;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    int result = 0;\n    for (int i = 0; i <= n; ++i) {\n        result += i;\n    }\n    return result;\n}\n",
            "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '(') {\n            depth++;\n        } else if (b == ')') {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "vector<int> derivative(const vector<int>& xs) {\n    vector<int> result;\n    for (int i = 1; i < xs.size(); ++i) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(const string& s) {\n    string vowels = \"aeiou\";\n    int cnt = 0;\n    for (int i = 0; i < s.size(); ++i) {\n        if (vowels.find(tolower(s[i])) != string::npos || (i == s.size() - 1 && tolower(s[i]) == 'y')) {\n            ++cnt;\n        }\n    }\n    return cnt;\n}\n",
            "string circularShift(int x, int shift) {\n    string x_str = to_string(x);\n    if (shift > x_str.size()) {\n        reverse(x_str.begin(), x_str.end());\n        return x_str;\n    } else {\n        return x_str.substr(x_str.size() - shift) + x_str.substr(0, x_str.size() - shift);\n    }\n}\n",
            "int digitSum(const string& s) {\n    int sum_value = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum_value += c;\n        }\n    }\n    return sum_value;\n}\n",
            "int fruitDistribution(string s, int n) {\n    vector<string> words = split(s, ' ');\n    int apples = stoi(words[words.index(\"apples\") - 1]);\n    int oranges = stoi(words[words.index(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "vector<int> pluck(const vector<int>& arr) {\n    vector<int> evens;\n    for (int n : arr) {\n        if (n % 2 == 0) {\n            evens.push_back(n);\n        }\n    }\n    if (evens.empty()) {\n        return {};\n    }\n    int min_even = *min_element(evens.begin(), evens.end());\n    vector<int> result = {min_even, distance(evens.begin(), find(evens.begin(), evens.end(), min_even))};\n    return result;\n}\n",
            "int search(const vector<int>& lst) {\n    unordered_map<int, int> freqs;\n    for (int n : lst) {\n        freqs[n]++;\n    }\n    vector<int> good_vals;\n    for (auto [k, v] : freqs) {\n        if (v >= k) {\n            good_vals.push_back(k);\n        }\n    }\n    if (good_vals.size() > 0) {\n        return *max_element(good_vals.begin(), good_vals.end());\n    } else {\n        return -1;\n    }\n}\n",
            "vector<int> strangeSortList(const vector<int>& lst) {\n    vector<int> sl = lst;\n    sort(sl.begin(), sl.end());\n    vector<int> result;\n    int left = 0, right = sl.size() - 1;\n    while (left <= right) {\n        result.push_back(sl[left]);\n        left++;\n        if (left <= right) {\n            result.push_back(sl[right]);\n            right--;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    double s = (a + b + c) / 2.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(const vector<int>& q, int w) {\n    if (q.empty()) {\n        return false;\n    }\n    bool is_palin = true;\n    for (int i = 0; i < q.size(); ++i) {\n        if (q[i] != q[q.size() - i - 1]) {\n            is_palin = false;\n        }\n    }\n    int total = 0;\n    for (int i : q) {\n        total += i;\n    }\n    return is_palin && total <= w;\n}\n",
            "int smallestChange(vector<int> arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.size() / 2; ++i) {\n        if (arr[i] != arr[arr.size() - i - 1]) {\n            ++ans;\n        }\n    }\n    return ans;\n}\n",
            "vector<string> totalMatch(const vector<string>& lst1, const vector<string>& lst2) {\n    int cnt1 = 0;\n    for (string s : lst1) {\n        cnt1 += s.size();\n    }\n    int cnt2 = 0;\n    for (string s : lst2) {\n        cnt2 += s.size();\n    }\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n",
            "bool isMultiplyPrime(int a) {\n    if (a < 2) {\n        return false;\n    }\n    int cnt = 0;\n    for (int i = 2; i * i <= a; ++i) {\n        if (a % i == 0) {\n            while (a % i == 0) {\n                ++cnt;\n                a /= i;\n            }\n        }\n    }\n    return cnt == 3;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    a = abs(a);\n    int root = pow(a, 1.0 / 3.0);\n    return root * root * root == a;\n}\n",
            "int hexKey(const string& num) {\n    int count = 0;\n    for (char x : num) {\n        if (x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D') {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "string decimalToBinary(int dec) {\n    string binary = bitset<32>(dec).to_string();\n    return \"db\" + binary + \"db\";\n}\n",
            "bool isHappy(string s) {\n    if (s.size() < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.size() - 2; ++i) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "vector<string> numericalLetterGrade(const vector<double>& grades) {\n    vector<string> result(grades.size());\n    transform(grades.begin(), grades.end(), result.begin(), [](double g) {\n        if (g == 4.0) {\n            return \"A+\";\n        } else if (g > 3.7) {\n            return \"A\";\n        } else if (g > 3.3) {\n            return \"A-\";\n        } else if (g > 3.0) {\n            return \"B+\";\n        } else if (g > 2.7) {\n            return \"B\";\n        } else if (g > 2.3) {\n            return \"B-\";\n        } else if (g > 2.0) {\n            return \"C+\";\n        } else if (g > 1.7) {\n            return \"C\";\n        } else if (g > 1.3) {\n            return \"C-\";\n        } else if (g > 1.0) {\n            return \"D+\";\n        } else if (g > 0.7) {\n            return \"D\";\n        } else if (g > 0.0) {\n            return \"D-\";\n        } else {\n            return \"E\";\n        }\n    });\n    return result;\n}\n",
            "bool primeLength(const string& s) {\n    int length = s.length();\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(length); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    int result = 2 * 9 * pow(10, n - 2);\n    return result;\n}\n",
            "string solve(int n) {\n    int digits_sum = 0;\n    for (char d : to_string(n)) {\n        digits_sum += d - '0';\n    }\n    return bitset<32>(digits_sum).to_string().substr(2);\n}\n",
            "int add(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); ++i) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "string antiShuffle(const string& s) {\n    vector<string> words = split(s, ' ');\n    for (int i = 0; i < words.size(); ++i) {\n        sort(words[i].begin(), words[i].end());\n    }\n    return join(words, ' ');\n}\n",
            "vector<vector<int>> getRow(const vector<vector<int>>& lst, int x) {\n    vector<vector<int>> coords;\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                coords.push_back({i, j});\n            }\n        }\n    }\n    sort(coords.begin(), coords.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]);\n    });\n    return coords;\n}\n",
            "vector<int> sortArray(const vector<int>& arr) {\n    if (arr.size() == 0) {\n        return {};\n    }\n    if ((arr[0] + arr.back()) % 2 == 0) {\n        vector<int> result(arr.begin(), arr.end());\n        sort(result.begin(), result.end(), greater<int>());\n        return result;\n    } else {\n        vector<int> result(arr.begin(), arr.end());\n        sort(result.begin(), result.end());\n        return result;\n    }\n}\n",
            "string encrypt(const string& s) {\n    string result;\n    for (char ch : s) {\n        int shifted = ch + 4;\n        if (shifted > 'z') {\n            shifted -= 26;\n        }\n        result.push_back(shifted);\n    }\n    return result;\n}\n",
            "optional<int> nextSmallest(const vector<int>& lst) {\n    set<int> unique_list(lst.begin(), lst.end());\n    vector<int> sorted_list(unique_list.begin(), unique_list.end());\n    sort(sorted_list.begin(), sorted_list.end());\n    if (sorted_list.size() < 2) {\n        return nullopt;\n    }\n    return sorted_list[1];\n}\n",
            "int isBored(const string& s) {\n    regex re(\"[.!?]\\\\s*\");\n    int count = 0;\n    for (sregex_token_iterator it(s.begin(), s.end(), re, -1), end; it != end; ++it) {\n        string sentence = *it;\n        if (sentence.size() >= 2 && sentence.substr(0, 2) == \"I \") {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "bool anyInt(any x, any y, any z) {\n    if (x.type() == typeid(int) && y.type() == typeid(int) && z.type() == typeid(int)) {\n        int x_int = any_cast<int>(x);\n        int y_int = any_cast<int>(y);\n        int z_int = any_cast<int>(z);\n        return (x_int + y_int == z_int) || (x_int + z_int == y_int) || (y_int + z_int == x_int);\n    }\n    return false;\n}\n",
            "string encode(const string& message) {\n    string vowels = \"aeiouAEIOU\";\n    string result;\n    for (char ch : message) {\n        if (isalpha(ch)) {\n            char ch1 = islower(ch) ? toupper(ch) : tolower(ch);\n            if (vowels.find(ch1) != string::npos) {\n                ch1 = char(ch1 + 2);\n            }\n            result.push_back(ch1);\n        } else {\n            result.push_back(ch);\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint skjkasdkd(const vector<int>& lst) {\n    vector<int> primes;\n    for (int n : lst) {\n        if (isPrime(n)) {\n            primes.push_back(n);\n        }\n    }\n    if (primes.empty()) {\n        return 0;\n    }\n    string largest = to_string(max(primes));\n    int result = 0;\n    for (char digit : largest) {\n        result += digit - '0';\n    }\n    return result;\n}\n",
            "bool checkDictCase(const unordered_map<string, string>& d) {\n    if (d.empty()) {\n        return false;\n    }\n    bool lower_case_keys = true;\n    bool upper_case_keys = true;\n    for (auto it = d.begin(); it != d.end(); ++it) {\n        if (!islower(it->first[0])) {\n            lower_case_keys = false;\n        }\n        if (!isupper(it->first[0])) {\n            upper_case_keys = false;\n        }\n    }\n    return lower_case_keys || upper_case_keys;\n}\n",
            "vector<int> countUpTo(int n) {\n    vector<int> primes;\n    for (int num = 2; num <= n; ++num) {\n        bool is_prime = true;\n        for (int p : primes) {\n            if (num % p == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    int result = 0;\n    for (int i = 0; i < abs(a) % 10; i++) {\n        result += abs(b) % 10;\n    }\n    return result;\n}\n",
            "int countUpper(const string& s) {\n    string vowels = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; i < s.size(); ++i) {\n        if (i % 2 == 0 && vowels.find(s[i]) != string::npos) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "int closestInteger(const string& value) {\n    double num = stod(value);\n    return num >= 0 ? int(num + 0.5) : int(num - 0.5);\n}\n",
            "vector<int> makeAPile(int n) {\n    vector<int> result(n);\n    for (int i = 0; i < n; ++i) {\n        result[i] = n + 2 * i;\n    }\n    return result;\n}\n",
            "vector<string> wordsString(const string& s) {\n    vector<string> result;\n    regex re(\"[, ]\");\n    for (auto w : s | regex_token_iterator(s.begin(), s.end(), re, -1)) {\n        if (w.length() > 0) {\n            result.push_back(w);\n        }\n    }\n    return result;\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    if (x != y) {\n        return y - 1;\n    }\n    return -1;\n}\n",
            "optional<string> roundedAvg(int n, int m) {\n    if (n > m) {\n        return {};\n    }\n    int r_avg = (m + n) / 2 + (m + n) % 2;\n    string result = bitset<32>(r_avg).to_string();\n    return result;\n}\n",
            "bool allDigitsOdd(string s) {\n    for (char digit : s) {\n        if (digit % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nvector<int> uniqueDigits(const vector<int>& x) {\n    vector<int> result;\n    for (int num : x) {\n        if (allDigitsOdd(to_string(num))) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n",
            "vector<string> byLength(const vector<int>& arr) {\n    vector<string> digitNames = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    vector<int> sortedArr(arr.begin(), arr.end());\n    sort(sortedArr.begin(), sortedArr.end(), greater<int>());\n    vector<string> result(sortedArr.size());\n    transform(sortedArr.begin(), sortedArr.end(), result.begin(), [&digitNames](int x) { return digitNames[x-1]; });\n    return result;\n}\n",
            "vector<int> f(int n) {\n    vector<int> nums(n);\n    iota(nums.begin(), nums.end(), 1);\n    vector<int> result(n);\n    for (int i = 0; i < n; ++i) {\n        if (i % 2 != 0) {\n            result[i] = accumulate(nums.begin(), nums.begin() + i + 1, 0);\n        } else {\n            result[i] = accumulate(nums.begin(), nums.begin() + i + 1, 1, multiplies<int>());\n        }\n    }\n    return result;\n}\n",
            "vector<int> evenOddPalindrome(int n) {\n    vector<int> cnt(2, 0);\n    for (int i = 1; i <= n; ++i) {\n        string s = to_string(i);\n        if (s == string(s.rbegin(), s.rend())) {\n            cnt[i % 2]++;\n        }\n    }\n    return cnt;\n}\n",
            "int countNums(const vector<int>& arr) {\n    int count_value = 0;\n    for (int n : arr) {\n        int sum_value = 0;\n        string n_str = to_string(n);\n        if (n >= 0) {\n            for (char d : n_str) {\n                sum_value += d - '0';\n            }\n        } else {\n            sum_value = (n_str[0] - '0') * 2 + digitsSum(abs(n));\n        }\n        if (sum_value > 0) {\n            count_value += 1;\n        }\n    }\n    return count_value;\n}\n",
            "bool moveOneBall(const vector<int>& arr) {\n    if (arr.empty()) {\n        return true;\n    }\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end());\n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr.size() - i == count(sorted_arr.begin(), sorted_arr.end(), arr[i]) && count(arr.begin(), arr.end(), sorted_arr[i]) == arr.size() - i) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "string canExchange(const vector<int>& lst1, const vector<int>& lst2) {\n    int odd_cnt = 0;\n    int even_cnt = 0;\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            odd_cnt++;\n        }\n    }\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            even_cnt++;\n        }\n    }\n    return odd_cnt >= even_cnt ? \"YES\" : \"NO\";\n}\n",
            "unordered_map<string, int> histogram(const string& test) {\n    unordered_map<string, int> freq;\n    vector<string> words = [w for w in test.split(\" \") if len(w) > 0];\n    for (string w : words) {\n        freq[w] = freq.get(w, 0) + 1;\n    }\n    unordered_map<string, int> result;\n    if (freq.size() > 0) {\n        int max_freq = *max_element(freq.begin(), freq.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n            return a.second < b.second;\n        });\n        for (auto& [k, v] : freq) {\n            if (v == max_freq) {\n                result[k] = v;\n            }\n        }\n    }\n    return result;\n}\n",
            "vector<string> reverseDelete(const string& s, const string& c) {\n    string s1 = \"\";\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            s1 += ch;\n        }\n    }\n    vector<string> result = {s1, s1 == s1[::-1] ? \"yes\" : \"no\"};\n    return result;\n}\n",
            "vector<string> oddCount(const vector<string>& lst) {\n    vector<string> result;\n    for (string num : lst) {\n        int n = 0;\n        for (char d : num) {\n            if (d % 2 == 1) {\n                n++;\n            }\n        }\n        string rs = \"the number of odd elements in the string i of the input.\";\n        result.push_back(rs.replace(rs.find(\"i\"), 1, to_string(n)));\n    }\n    return result;\n}\n",
            "int minSubArraySum(const vector<int>& nums) {\n    int min_sum = 0;\n    int cur_sum = 0;\n    for (int n : nums) {\n        cur_sum = min(cur_sum + n, 0);\n        min_sum = min(cur_sum, min_sum);\n    }\n    if (min_sum == 0) {\n        min_sum = *min_element(nums.begin(), nums.end());\n    }\n    return min_sum;\n}\n",
            "int maxFill(const vector<vector<int>>& grid, int capacity) {\n    int result = 0;\n    for (const vector<int>& arr : grid) {\n        int sum_arr = accumulate(arr.begin(), arr.end(), 0);\n        result += ceil(sum_arr / capacity);\n    }\n    return result;\n}\n",
            "int countOnes(int num) {\n    int count = 0;\n    while (num > 0) {\n        if (num & 1) {\n            count++;\n        }\n        num >>= 1;\n    }\n    return count;\n}\nvector<int> sortArray(const vector<int>& arr) {\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end(), [](int x, int y) {\n        return countOnes(x) < countOnes(y) || (countOnes(x) == countOnes(y) && x < y);\n    });\n    return sorted_arr;\n}\n",
            "vector<string> selectWords(const string& s, int n) {\n    string consonants = \"bcdfghjklmnpqrstvwxyz\";\n    vector<string> words = {};\n    for (int i = 0; i < s.size(); i++) {\n        int j = i;\n        while (j < s.size() && s[j] != ' ') {\n            words.push_back(s.substr(i, j - i + 1));\n            j++;\n            i = j;\n        }\n    }\n    vector<string> result;\n    for (string w : words) {\n        int count = 0;\n        for (char c : w) {\n            if (islower(c) && consonants.find(c) != string::npos) {\n                count++;\n            }\n        }\n        if (count == n) {\n            result.push_back(w);\n        }\n    }\n    return result;\n}\n",
            "string getClosestVowel(const string& word) {\n    string vowels = \"aeiouAEIOU\";\n    for (int i = word.size() - 2; i > 0; --i) {\n        if (vowels.find(word[i]) != string::npos && vowels.find(word[i - 1]) == string::npos && vowels.find(word[i + 1]) == string::npos) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "bool check(string s) {\n    int depth = 0;\n    for (char ch : s) {\n        if (ch == '(') {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\nstring matchParens(vector<string> lst) {\n    string s1 = lst[0] + lst[1];\n    string s2 = lst[1] + lst[0];\n    if (check(s1) || check(s2)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n",
            "vector<int> maximum(const vector<int>& arr, int k) {\n    if (k == 0) {\n        return {};\n    }\n    vector<int> result(arr.begin(), arr.end());\n    sort(result.begin(), result.end());\n    return vector<int>(result.end() - k, result.end());\n}\n",
            "int solution(const vector<int>& lst) {\n    int sum_value = 0;\n    for (int i = 0; i < lst.size(); ++i) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum_value += lst[i];\n        }\n    }\n    return sum_value;\n}\n",
            "int addElements(const vector<int>& arr, int k) {\n    int sum_value = 0;\n    for (int i = 0; i < k; ++i) {\n        int n = arr[i];\n        if (to_string(n).length() <= 2) {\n            sum_value += n;\n        }\n    }\n    return sum_value;\n}\n",
            "vector<int> getOddCollatz(int n) {\n    vector<int> collatz = {1};\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.push_back(n);\n            n = 3 * n + 1;\n        } else {\n            n /= 2;\n        }\n    }\n    sort(collatz.begin(), collatz.end());\n    return collatz;\n}\n",
            "bool validDate(string date) {\n    if (date.size() != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n    int m = stoi(date.substr(0, 2));\n    int d = stoi(date.substr(3, 2));\n    if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n        if (d >= 1 && d <= 31) {\n            return true;\n        }\n    } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n        if (d >= 1 && d <= 30) {\n            return true;\n        }\n    } else if (m == 2) {\n        if (d >= 1 && d <= 29) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "vector<string> splitWords(const string& txt) {\n    vector<string> result;\n    if (txt.find(\" \") != string::npos) {\n        result = split(txt, \" \");\n    } else if (txt.find(\",\") != string::npos) {\n        result = split(txt, \",\");\n    } else {\n        result.push_back(to_string(count_if(txt.begin(), txt.end(), [](char c) {\n            return islower(c) && c % 2 == 0;\n        })));\n    }\n    return result;\n}\n",
            "bool isSorted(const vector<int>& lst) {\n    for (int i = 1; i < lst.size(); ++i) {\n        if (lst[i-1] > lst[i]) {\n            return false;\n        }\n    }\n    unordered_map<int, int> freq;\n    for (int i : lst) {\n        freq[i] = freq.count(i) + 1;\n    }\n    return max(freq.begin(), freq.end(), [](const pair<int, int>& a, const pair<int, int>& b) { return a.second < b.second; })->second <= 2;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); ++i) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nstring intersection(const vector<int>& interval1, const vector<int>& interval2) {\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    if (length > 0 && isPrime(length)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n",
            "optional<int> prodSigns(const vector<int>& arr) {\n    if (arr.empty()) {\n        return {};\n    }\n    if (count(arr.begin(), arr.end(), 0) > 0) {\n        return 0;\n    }\n    int sign = count_if(arr.begin(), arr.end(), [](int n) { return n < 0; }) % 2 == 1 ? -1 : 1;\n    int result = 0;\n    for (int n : arr) {\n        result += abs(n);\n    }\n    return sign * result;\n}\n",
            "vector<int> minPath(const vector<vector<int>>& grid, int k) {\n    int n = grid.size();\n    int min_val = n * n + 1;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (grid[i][j] == 1) {\n                vector<int> temp;\n                if (i != 0) {\n                    temp.push_back(grid[i - 1][j]);\n                }\n                if (j != 0) {\n                    temp.push_back(grid[i][j - 1]);\n                }\n                if (i != n - 1) {\n                    temp.push_back(grid[i + 1][j]);\n                }\n                if (j != n - 1) {\n                    temp.push_back(grid[i][j + 1]);\n                }\n                min_val = min(min_val, *min_element(temp.begin(), temp.end()));\n            }\n        }\n    }\n    vector<int> result;\n    for (int i = 0; i < k; ++i) {\n        result.push_back(1 if i % 2 == 0 else min_val);\n    }\n    return result;\n}\n",
            "vector<int> tri(int n) {\n    if (n == 0) {\n        return {1};\n    }\n    vector<int> seq = {1, 3};\n    for (int i = 2; i <= n; ++i) {\n        if (i % 2 == 0) {\n            seq.push_back(i / 2 + 1);\n        } else {\n            seq.push_back(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    vector<int> odds;\n    for (int i = 0; i < to_string(n).length(); i++) {\n        if (to_string(n)[i] - '0' % 2 == 1) {\n            odds.push_back(to_string(n)[i] - '0');\n        }\n    }\n    int result = 1;\n    for (int d : odds) {\n        result *= d;\n    }\n    return result > 0 ? result : 0;\n}\n",
            "bool isNested(const string& s) {\n    vector<int> open_idx;\n    vector<int> close_idx;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] == '[') {\n            open_idx.push_back(i);\n        } else if (s[i] == ']') {\n            close_idx.push_back(i);\n        }\n    }\n    reverse(close_idx.begin(), close_idx.end());\n    int cnt = 0;\n    int i = 0;\n    int l = close_idx.size();\n    for (int idx : open_idx) {\n        if (i < l && idx < close_idx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "int sumSquares(const vector<double>& lst) {\n    int result = 0;\n    for (double n : lst) {\n        result += pow(ceil(n), 2);\n    }\n    return result;\n}\n",
            "bool checkIfLastCharIsALetter(string txt) {\n    if (txt.empty()) {\n        return false;\n    }\n    int last = txt.find_last_of(' ') + 1;\n    return txt.size() - last == 1 && isalpha(txt[last]);\n}\n",
            "int canArrange(const vector<int>& arr) {\n    if (arr.size() <= 1) {\n        return -1;\n    }\n    vector<int> idx;\n    for (int i = 1; i < arr.size(); ++i) {\n        if (arr[i] < arr[i - 1]) {\n            idx.push_back(i);\n        }\n    }\n    return max(idx.begin(), idx.end(), [](int a, int b) { return a < b; }) - idx.begin();\n}\n",
            "vector<optional<int>> largestSmallestIntegers(const vector<int>& lst) {\n    optional<int> max_neg;\n    optional<int> min_pos;\n    for (int i : lst) {\n        if (i < 0) {\n            if (!max_neg.has_value() || i > max_neg.value()) {\n                max_neg = i;\n            }\n        } else if (i > 0) {\n            if (!min_pos.has_value() || i < min_pos.value()) {\n                min_pos = i;\n            }\n        }\n    }\n    return {max_neg, min_pos};\n}\n",
            "optional<double> compareOne(any a, any b) {\n    double a1 = 0.0, b1 = 0.0;\n    if (a.type() == typeid(string)) {\n        a1 = stod(any_cast<string>(a).replace(a1, b1, ',', '.'));\n    } else if (a.type() == typeid(int)) {\n        a1 = any_cast<int>(a);\n    } else if (a.type() == typeid(double)) {\n        a1 = any_cast<double>(a);\n    } else {\n        throw runtime_error(\"Type Error\");\n    }\n    if (b.type() == typeid(string)) {\n        b1 = stod(any_cast<string>(b).replace(a1, b1, ',', '.'));\n    } else if (b.type() == typeid(int)) {\n        b1 = any_cast<int>(b);\n    } else if (b.type() == typeid(double)) {\n        b1 = any_cast<double>(b);\n    } else {\n        throw runtime_error(\"Type Error\");\n    }\n    if (a1 == b1) {\n        return nullopt;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        int fact = 1;\n        for (int j = 1; j <= i; j++) {\n            fact *= j;\n        }\n        result *= fact;\n    }\n    return result;\n}\n",
            "string fixSpaces(const string& txt) {\n    return regex_replace(txt, regex(\"\\\\s{3,}\"), \"-\").replace(txt.find(' '), 1, \"_\");\n}\n",
            "string fileNameCheck(string file_name) {\n    vector<string> suf = {\"txt\", \"exe\", \"dll\"};\n    vector<string> lst = split(file_name, \".\");\n    if (lst.size() != 2 || find(suf.begin(), suf.end(), lst[1]) == suf.end() || lst[0].size() == 0 || lst[0][0] < 'a' || lst[0][0] > 'z' || lst[0].size() > 3 || count_if(lst[0].begin(), lst[0].end(), [](char x) { return isdigit(x); }) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "int sumSquares(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            result += pow(lst[i], 2);\n        } else if (i % 4 == 0) {\n            result += pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)) + 1; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nstring wordsInSentence(const string& sentence) {\n    vector<string> words = split(sentence, ' ');\n    vector<string> result;\n    for (string w : words) {\n        if (isPrime(w.size())) {\n            result.push_back(w);\n        }\n    }\n    return join(result, ' ');\n}\n",
            "bool simplify(string x, string n) {\n    vector<string> xs = split(x, \"/\");\n    vector<string> ns = split(n, \"/\");\n    int num = stoi(xs[0]) * stoi(ns[0]);\n    int den = stoi(xs[1]) * stoi(ns[1]);\n    return num % den == 0;\n}\n",
            "int digitsSum(int n) {\n    string n_str = to_string(n);\n    if (n >= 0) {\n        int result = 0;\n        for (char d : n_str) {\n            result += d - '0';\n        }\n        return result;\n    } else {\n        return (n_str[0] - '0') * 2 + digitsSum(abs(n));\n    }\n}\nvector<int> orderByPoints(const vector<int>& nums) {\n    vector<int> result(nums);\n    sort(result.begin(), result.end(), [](int a, int b) {\n        return digitsSum(a) < digitsSum(b);\n    });\n    return result;\n}\n",
            "int specialFilter(const vector<int>& nums) {\n    string odds = \"13579\";\n    int count = 0;\n    for (int n : nums) {\n        if (n > 10 && n % 2 == 1 && odds.find(to_string(n)[0]) != string::npos) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "int getMaxTriples(int n) {\n    vector<int> c(3, 0);\n    for (int i = 1; i <= n; ++i) {\n        int a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}\n",
            "vector<string> bf(string planet1, string planet2) {\n    vector<string> names = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    if (find(names.begin(), names.end(), planet1) == names.end() || find(names.begin(), names.end(), planet2) == names.end()) {\n        return {};\n    }\n    int l = distance(names.begin(), find(names.begin(), names.end(), planet1));\n    int r = distance(names.begin(), find(names.begin(), names.end(), planet2));\n    if (l > r) {\n        l = r;\n        r = l;\n    }\n    if (l == r) {\n        return {};\n    }\n    return vector<string>(names.begin() + l + 1, names.begin() + r);\n}\n",
            "vector<string> sortedListSum(const vector<string>& lst) {\n    vector<string> result;\n    for (string s : lst) {\n        if (s.size() % 2 == 0) {\n            result.push_back(s);\n        }\n    }\n    sort(result.begin(), result.end(), [](string a, string b) {\n        return a.size() < b.size() || (a.size() == b.size() && a < b);\n    });\n    return result;\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= floor(sqrt(n)) + 1; i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(const vector<double>& lst) {\n    int result = 0;\n    for (double n : lst) {\n        if (n >= 0 && fmod(n, 2) == 1) {\n            result += n * n;\n        }\n    }\n    return result;\n}\n",
            "vector<int> compare(const vector<int>& game, const vector<int>& guess) {\n    vector<int> result;\n    for (int i = 0; i < game.size(); ++i) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n",
            "string strongestExtension(const string& class_name, const vector<string>& extensions) {\n    int max_s = -1;\n    string max_ext = \"\";\n    for (string ext : extensions) {\n        int upper = 0;\n        int lower = 0;\n        for (char c : ext) {\n            if (isupper(c)) {\n                upper += 1;\n            } else if (islower(c)) {\n                lower += 1;\n            }\n        }\n        int s = upper - lower;\n        if (s > max_s) {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return class_name + \".\" + max_ext;\n}\n",
            "bool cycpatternCheck(const string& a, const string& b) {\n    if (a.size() < b.size()) {\n        return false;\n    }\n    for (int i = 0; i < b.size(); i++) {\n        if (a.find(b.substr(i) + b.substr(0, i)) != string::npos) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "vector<int> evenOddCount(int num) {\n    string ds = to_string(abs(num));\n    int even = 0;\n    for (char d : ds) {\n        if (d % 2 == 0) {\n            even++;\n        }\n    }\n    return {even, ds.size() - even};\n}\n",
            "string intToMiniRoman(int num) {\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string res = \"\";\n    for (int i = 0; i < values.size(); ++i) {\n        while (num >= values[i]) {\n            res += numerals[i];\n            num -= values[i];\n        }\n    }\n    return res;\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    vector<int> s = {a, b, c};\n    sort(s.begin(), s.end());\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}\n",
            "string findMax(const vector<string>& words) {\n    int max_cnt = 0;\n    string max_w = \"\";\n    for (string w : words) {\n        int cnt = set<char>(w.begin(), w.end()).size();\n        if (cnt > max_cnt) {\n            max_cnt = cnt;\n            max_w = w;\n        } else if (cnt == max_cnt) {\n            max_w = min(max_w, w);\n        }\n    }\n    return max_w;\n}\n",
            "vector<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return {num + need, remaining - need};\n    } else {\n        return {num + remaining, 0};\n    }\n}\n",
            "int doAlgebra(const vector<string>& operators, const vector<int>& operands) {\n    vector<string> ops = operators;\n    vector<int> nums = operands;\n    int i = ops.size() - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]);\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] / nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "string solve(string s) {\n    string result;\n    for (char ch : s) {\n        if (!isalpha(ch)) {\n            result.push_back(ch);\n        } else if (isupper(ch)) {\n            result.push_back(tolower(ch));\n        } else if (islower(ch)) {\n            result.push_back(toupper(ch));\n        }\n    }\n    if (!any_of(result.begin(), result.end(), [](char ch) { return isalpha(ch); })) {\n        reverse(result.begin(), result.end());\n    }\n    return result;\n}\n",
            "optional<string> stringToMd5(const string& txt) {\n    if (txt.empty()) {\n        return {};\n    }\n    string md5_encoded = crypt(txt.c_str(), \"$1$\");\n    return md5_encoded;\n}\n",
            "vector<int> generateIntegers(int a, int b) {\n    int lower = max(2, min(a, b));\n    int upper = min(8, max(a, b));\n    vector<int> result;\n    for (int i = lower; i <= upper; ++i) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"
        ],
        "csharp": [
            "class Global {\n    public static bool HasCloseElements(IList<double> numbers, double threshold) {\n        for (int i = 0; i < numbers.Count; i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n                if (Math.Abs(numbers[i] - numbers[j]) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<string> SeparateParenGroups(string parenString) {\n        var groups = new List<string>();\n        var stk = new Stack<char>();\n        var currentGroup = \"\";\n        var parens = parenString.Replace(\" \", \"\");\n        foreach (var ch in parens) {\n            if (ch == '(') {\n                stk.Push(ch);\n                currentGroup += ch;\n            } else if (ch == ')') {\n                stk.Pop();\n                currentGroup += ch;\n                if (stk.Count == 0) {\n                    groups.Add(currentGroup);\n                    currentGroup = \"\";\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double TruncateNumber(double num) {\n        return num - Math.Floor(num);\n    }\n}\n",
            "class Global {\n    public static bool BelowZero(IList<int> operations) {\n        int balance = 0;\n        foreach (var op in operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double MeanAbsoluteDeviation(IList<double> numbers) {\n        double mean = numbers.Sum() / numbers.Count;\n        double deviation = 0.0;\n        foreach (var x in numbers) {\n            deviation += Math.Abs(x - mean);\n        }\n        return deviation / numbers.Count;\n    }\n}\n",
            "class Global {\n    public static IList<int> Intersperse(IList<int> numbers, int delimiter) {\n        var result = new List<int>();\n        for (int i = 0; i < numbers.Count; i++) {\n            if (i != 0) {\n                result.Add(delimiter);\n            }\n            result.Add(numbers[i]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> ParseNestedParens(string parenString) {\n        var result = new List<int>();\n        var parenGroups = parenString.Split(' ');\n        foreach (var group in parenGroups) {\n            var maxDepth = 0;\n            var depth = 0;\n            foreach (var ch in group) {\n                if (ch == '(') {\n                    depth += 1;\n                    maxDepth = Math.Max(maxDepth, depth);\n                } else if (ch == ')') {\n                    depth -= 1;\n                }\n            }\n            result.Add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> FilterBySubstring(IList<string> strs, string substring) {\n        var result = new List<string>();\n        foreach (var s in strs) {\n            if (s.Contains(substring)) {\n                result.Add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> SumProduct(IList<int> numbers) {\n        int nSum = 0;\n        int nProduct = 1;\n        foreach (var n in numbers) {\n            nSum += n;\n            nProduct *= n;\n        }\n        return new List<int> { nSum, nProduct };\n    }\n}\n",
            "class Global {\n    public static IList<int> RollingMax(IList<int> numbers) {\n        var result = new List<int>();\n        var maxSoFar = int.MinValue;\n        foreach (var num in numbers) {\n            if (num > maxSoFar) {\n                maxSoFar = num;\n            }\n            result.Add(maxSoFar);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string MakePalindrome(string s) {\n        if (s == new string(s.Reverse())) {\n            return s;\n        }\n        for (int i = 0; i < s.Length; i++) {\n            if (s.Substring(i) == new string(s.Substring(i).Reverse())) {\n                return s + s.Substring(0, i);\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static string StringXor(string a, string b) {\n        return string.Join(\"\", a.Zip(b, (c1, c2) => c1 == c2 ? \"0\" : \"1\"));\n    }\n}\n",
            "class Global {\n    public static string? Longest(IList<string> strs) {\n        if (strs.Count == 0) {\n            return null;\n        }\n        string longestS = strs[0];\n        foreach (var s in strs) {\n            if (s.Length > longestS.Length) {\n                longestS = s;\n            }\n        }\n        return longestS;\n    }\n}\n",
            "class Global {\n    public static int GreatestCommonDivisor(int a, int b) {\n        while (b != 0) {\n            int temp = a;\n            a = b;\n            b = temp % b;\n        }\n        return a;\n    }\n}\n",
            "class Global {\n    public static IList<string> AllPrefixes(string s) {\n        var prefixes = new List<string>();\n        for (int i = 0; i < s.Length; i++) {\n            prefixes.Add(s.Substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static string StringSequence(int n) {\n        var result = \"\";\n        for (int i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result.Substring(0, result.Length - 1);\n    }\n}\n",
            "class Global {\n    public static int CountDistinctCharacters(string s) {\n        var distinctCharacters = new HashSet<char>();\n        foreach (var char in s.ToLower()) {\n            distinctCharacters.Add(char);\n        }\n        return distinctCharacters.Count;\n    }\n}\n",
            "class Global {\n    public static IList<int> ParseMusic(string musicString) {\n        var durations = new Dictionary<string, int> {\n            { \"o\", 4 },\n            { \"o|\", 2 },\n            { \".|\", 1 }\n        };\n        var notes = musicString.Split();\n        var result = new List<int>();\n        foreach (var note in notes) {\n            result.Add(durations[note]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int HowManyTimes(string s, string substring) {\n        int times = 0;\n        for (int i = 0; i < s.Length - substring.Length + 1; i++) {\n            if (s.Substring(i, substring.Length) == substring) {\n                times++;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static string SortNumbers(string numbers) {\n        var numDict = new Dictionary<string, int>() {\n            { \"zero\", 0 },\n            { \"one\", 1 },\n            { \"two\", 2 },\n            { \"three\", 3 },\n            { \"four\", 4 },\n            { \"five\", 5 },\n            { \"six\", 6 },\n            { \"seven\", 7 },\n            { \"eight\", 8 },\n            { \"nine\", 9 },\n        };\n        var numList = numbers.Split(\" \").Where(x => numDict.ContainsKey(x)).ToList();\n        numList.Sort((x, y) => numDict[x].CompareTo(numDict[y]));\n        return string.Join(\" \", numList);\n    }\n}\n",
            "class Global {\n    public static IList<double> FindClosestElements(IList<double> numbers) {\n        var sortedNumbers = new List<double>(numbers);\n        sortedNumbers.Sort();\n        double minDiff = double.PositiveInfinity;\n        var closestPair = new List<double>();\n        for (int i = 1; i < sortedNumbers.Count; i++) {\n            double diff = sortedNumbers[i] - sortedNumbers[i - 1];\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = new List<double> { sortedNumbers[i - 1], sortedNumbers[i] };\n            }\n        }\n        return closestPair;\n    }\n}\n",
            "class Global {\n    public static IList<double> RescaleToUnit(IList<double> numbers) {\n        double minNum = double.PositiveInfinity;\n        double maxNum = double.NegativeInfinity;\n        foreach (var num in numbers) {\n            if (num < minNum) {\n                minNum = num;\n            }\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n        if (minNum == maxNum) {\n            return new List<double>(new double[numbers.Count]);\n        } else {\n            return numbers.Select(num => (num - minNum) / (maxNum - minNum)).ToList();\n        }\n    }\n}\n",
            "class Global {\n    public static IList<int> FilterIntegers(IList<object> values) {\n        var result = new List<int>();\n        foreach (var x in values) {\n            if (x is int) {\n                result.Add((int)x);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int StrLength(string s) {\n        return s.Length;\n    }\n}\n",
            "class Global {\n    public static int LargestDivisor(int n) {\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}\n",
            "class Global {\n    public static IList<int> Factorize(int n) {\n        var factors = new List<int>();\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.Add(divisor);\n                n /= divisor;\n            } else {\n                divisor++;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static IList<int> RemoveDuplicates(IList<int> numbers) {\n        var counts = new Dictionary<int, int>();\n        foreach (var num in numbers) {\n            if (!counts.ContainsKey(num)) {\n                counts[num] = 1;\n            } else {\n                counts[num] += 1;\n            }\n        }\n        var res = new List<int>();\n        foreach (var num in numbers) {\n            if (counts[num] == 1) {\n                res.Add(num);\n            }\n        }\n        return res;\n    }\n}\n",
            "class Global {\n    public static string FlipCase(string s) {\n        return string.Concat(s.Select(ch => char.IsLetter(ch) ? char.IsLower(ch) ? char.ToUpper(ch) : char.ToLower(ch) : ch));\n    }\n}\n",
            "class Global {\n    public static string Concatenate(IList<string> strs) {\n        string result = \"\";\n        foreach (var s in strs) {\n            result += s;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> FilterByPrefix(IList<string> strs, string prefixStr) {\n        var result = new List<string>();\n        foreach (var s in strs) {\n            if (s.StartsWith(prefixStr)) {\n                result.Add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> GetPositive(IList<int> l) {\n        var result = new List<int>();\n        foreach (var num in l) {\n            if (num > 0) {\n                result.Add(num);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static double Poly(IList<int> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.Count; i++) {\n            res += xs[i] * Math.Pow(x, i);\n        }\n        return res;\n    }\n    public static double FindZero(IList<int> xs) {\n        double x1 = 1.0, x2 = -1.0;\n        while (Poly(xs, x1) * Poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.Abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (Poly(xs, mid) == 0) {\n                return mid;\n            }\n            else if (Poly(xs, mid) * Poly(xs, x1) < 0) {\n                x2 = mid;\n            }\n            else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortThird(IList<int> l) {\n        var sortedThird = l.Where((x, i) => i % 3 == 0).OrderBy(x => x).ToList();\n        var result = new List<int>();\n        for (int i = 0; i < l.Count; i++) {\n            if (i % 3 == 0) {\n                result.Add(sortedThird[i / 3]);\n            } else {\n                result.Add(l[i]);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> ListUnique(IList<int> l) {\n        var uniqueList = new List<int>();\n        foreach (var item in l) {\n            if (!uniqueList.Contains(item)) {\n                uniqueList.Add(item);\n            }\n        }\n        uniqueList.Sort();\n        return uniqueList;\n    }\n}\n",
            "class Global {\n    public static int MaxElement(IList<int> l) {\n        int maxValue = int.MinValue;\n        foreach (var i in l) {\n            if (i > maxValue) {\n                maxValue = i;\n            }\n        }\n        return maxValue;\n    }\n}\n",
            "class Global {\n    public static int FizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += User.CountDigits(i, '7');\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortEven(IList<int> l) {\n        var sortedEven = l.Where((x, i) => i % 2 == 0).OrderBy(x => x).ToList();\n        var result = new List<int>();\n        for (int i = 0; i < l.Count; i++) {\n            if (i % 2 == 0) {\n                result.Add(sortedEven[i / 2]);\n            } else {\n                result.Add(l[i]);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string EncodeCyclic(string s) {\n        var result = new List<string>();\n        for (int i = 0; i < s.Length; i += 3) {\n            if (i + 3 > s.Length) {\n                result.Add(s.Substring(i));\n            } else {\n                result.Add(s.Substring(i + 1, 2));\n                result.Add(s[i].ToString());\n            }\n        }\n        return string.Join(\"\", result);\n    }\n    public static string DecodeCyclic(string s) {\n        return EncodeCyclic(EncodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static int PrimeFib(int n) {\n        var f = new List<int> { 0, 1 };\n        var cnt = 0;\n        while (cnt < n) {\n            f = new List<int> { f[1], f[0] + f[1] };\n            if (IsPrime(f[1])) {\n                cnt += 1;\n            }\n        }\n        return f[1];\n    }\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= (int)Math.Sqrt(n) + 1; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static bool TriplesSumToZero(IList<int> l) {\n        for (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static int CarRaceCollision(int n) {\n        return (int)Math.Pow(n, 2);\n    }\n}\n",
            "class Global {\n    public static IList<int> IncrList(IList<int> l) {\n        var result = new List<int>();\n        foreach (var i in l) {\n            result.Add(i + 1);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool PairsSumToZero(IList<int> l) {\n        var seen = new HashSet<int>();\n        foreach (var num in l) {\n            if (seen.Contains(-num)) {\n                return true;\n            }\n            seen.Add(num);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string ChangeBase(int x, int bas) {\n        if (x == 0) {\n            return \"0\";\n        }\n        string result = \"\";\n        while (x > 0) {\n            result = (x % bas) + result;\n            x /= bas;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double TriangleArea(int a, int h) {\n        return a * h / 2.0;\n    }\n}\n",
            "class Global {\n    public static int Fib4(int n) {\n        var fib = new int[4] { 0, 0, 2, 0 };\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = fib[0] + fib[1] + fib[2];\n        }\n        return fib[n % 4];\n    }\n}\n",
            "class Global {\n    public static double Median(IList<double> l) {\n        var sl = l.OrderBy(x => x).ToList();\n        if (sl.Count % 2 != 0) {\n            return sl[sl.Count / 2];\n        } else {\n            return (sl[sl.Count / 2] + sl[sl.Count / 2 - 1]) / 2;\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsPalindrome(string txt) {\n        for (int i = 0; i < txt.Length / 2; i++) {\n            if (txt[i] != txt[txt.Length - i - 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int Modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "class Global {\n    public static string EncodeShift(string s) {\n        return string.Concat(s.Select(ch => (char)(((ch - 'a' + 5) % 26) + 'a')));\n    }\n    public static string DecodeShift(string s) {\n        return string.Concat(s.Select(ch => (char)(((ch - 'a' + 21) % 26) + 'a')));\n    }\n}\n",
            "class Global {\n    public static string RemoveVowels(string txt) {\n        var vowels = \"aeiouAEIOU\";\n        return new string(txt.Where(char => !vowels.Contains(char)).ToArray());\n    }\n}\n",
            "class Global {\n    public static bool BelowThreshold(IList<int> l, int t) {\n        foreach (var x in l) {\n            if (x >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int Add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static bool SameChars(string s0, string s1) {\n        var s0Set = new HashSet<char>(s0);\n        var s1Set = new HashSet<char>(s1);\n        return s0Set.SetEquals(s1Set);\n    }\n}\n",
            "class Global {\n    public static int Fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return Fib(n - 1) + Fib(n - 2);\n    }\n}\n",
            "class Global {\n    public static bool CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach (char b in brackets) {\n            if (b == '<') {\n                depth += 1;\n            } else if (b == '>') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static bool Monotonic(IList<int> l) {\n        var diff = new List<int>();\n        for (int i = 0; i < l.Count - 1; i++) {\n            diff.Add(l[i + 1] - l[i]);\n        }\n        return diff.TrueForAll(x => x <= 0) || diff.TrueForAll(x => x >= 0);\n    }\n}\n",
            "class Global {\n    public static IList<int> Common(IList<int> l1, IList<int> l2) {\n        var result = new List<int>();\n        foreach (var i in l1) {\n            if (l2.Contains(i)) {\n                result.Add(i);\n            }\n        }\n        result.Sort();\n        return result;\n    }\n}\n",
            "class Global {\n    public static int LargestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i != 0) {\n                i++;\n            } else {\n                n /= i;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int SumToN(int n) {\n        int result = 0;\n        for (int i = 0; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach (var b in brackets) {\n            if (b == '(') {\n                depth += 1;\n            } else if (b == ')') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static IList<int> Derivative(IList<int> xs) {\n        var result = new List<int>();\n        for (int i = 1; i < xs.Count; i++) {\n            result.Add(xs[i] * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int Fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n        int a = 0, b = 0, c = 1;\n        while (n > 2) {\n            a = b;\n            b = c;\n            c = a + b + c;\n            n -= 1;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int VowelsCount(string s) {\n        var vowels = \"aeiou\";\n        var cnt = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i].ToLower() == \"y\" && i == s.Length - 1 || vowels.Contains(s[i].ToLower())) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static string CircularShift(int x, int shift) {\n        var xStr = x.ToString();\n        if (shift > xStr.Length) {\n            return new string(xStr.Reverse().ToArray());\n        } else {\n            return xStr.Substring(xStr.Length - shift) + xStr.Substring(0, xStr.Length - shift);\n        }\n    }\n}\n",
            "class Global {\n    public static int DigitSum(string s) {\n        return s.Sum(c => char.IsUpper(c) ? (int)c : 0);\n    }\n}\n",
            "class Global {\n    public static int FruitDistribution(string s, int n) {\n        var words = s.Split(' ');\n        var apples = int.Parse(words[words.ToList().IndexOf(\"apples\") - 1]);\n        var oranges = int.Parse(words[words.ToList().IndexOf(\"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n}\n",
            "class Global {\n    public static IList<int> Pluck(IList<int> arr) {\n        var evens = arr.Where(n => n % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return new List<int>();\n        }\n        var minEven = evens.Min();\n        return new List<int> { minEven, arr.IndexOf(minEven) };\n    }\n}\n",
            "class Global {\n    public static int Search(IList<int> lst) {\n        var freqs = new Dictionary<int, int>();\n        foreach (var n in lst) {\n            if (!freqs.ContainsKey(n)) {\n                freqs[n] = 0;\n            }\n            freqs[n] += 1;\n        }\n        var goodVals = new List<int>();\n        foreach (var kvp in freqs) {\n            if (kvp.Value >= kvp.Key) {\n                goodVals.Add(kvp.Key);\n            }\n        }\n        if (goodVals.Count > 0) {\n            return goodVals.Max();\n        } else {\n            return -1;\n        }\n    }\n}\n",
            "class Global {\n    public static IList<int> StrangeSortList(IList<int> lst) {\n        var sl = lst.OrderBy(x => x).ToList();\n        var result = new List<int>();\n        int left = 0, right = sl.Count - 1;\n        while (left <= right) {\n            result.Add(sl[left]);\n            left++;\n            if (left <= right) {\n                result.Add(sl[right]);\n                right--;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double TriangleArea(int a, int b, int c) {\n        double s = (a + b + c) / 2.0;\n        if (a + b > c && a + c > b && b + c > a) {\n            return Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}\n",
            "class Global {\n    public static bool WillItFly(IList<int> q, int w) {\n        if (q.Count == 0) {\n            return false;\n        }\n        bool isPalin = true;\n        for (int i = 0; i < q.Count; i++) {\n            if (q[i] != q[q.Count - i - 1]) {\n                isPalin = false;\n            }\n        }\n        int total = 0;\n        foreach (var i in q) {\n            total += i;\n        }\n        return isPalin && total <= w;\n    }\n}\n",
            "class Global {\n    public static int SmallestChange(IList<int> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.Count / 2; i++) {\n            if (arr[i] != arr[arr.Count - i - 1]) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static IList<string> TotalMatch(IList<string> lst1, IList<string> lst2) {\n        int cnt1 = 0;\n        foreach (var s in lst1) {\n            cnt1 += s.Length;\n        }\n        int cnt2 = 0;\n        foreach (var s in lst2) {\n            cnt2 += s.Length;\n        }\n        return cnt1 <= cnt2 ? lst1 : lst2;\n    }\n}\n",
            "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static bool IsMultiplyPrime(int a) {\n        int cnt = 0;\n        for (int i = 2; i <= a; i++) {\n            if (IsPrime(i)) {\n                while (a % i == 0) {\n                    cnt++;\n                    a /= i;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n}\n",
            "class Global {\n    public static bool IsSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "class Global {\n    public static bool IsCube(int a) {\n        a = Math.Abs(a);\n        int root = (int)Math.Round(Math.Pow(a, 1.0 / 3.0));\n        return root * root * root == a;\n    }\n}\n",
            "class Global {\n    public static int HexKey(string num) {\n        return num.Count(x => \"2357BD\".Contains(x));\n    }\n}\n",
            "class Global {\n    public static string DecimalToBinary(int dec) {\n        return $\"db{Convert.ToString(dec, 2)}db\";\n    }\n}\n",
            "class Global {\n    public static bool IsHappy(string s) {\n        if (s.Length < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static IList<string> NumericalLetterGrade(IList<double> grades) {\n        var result = new List<string>();\n        foreach (var g in grades) {\n            if (g == 4.0) {\n                result.Add(\"A+\");\n            } else if (g > 3.7) {\n                result.Add(\"A\");\n            } else if (g > 3.3) {\n                result.Add(\"A-\");\n            } else if (g > 3.0) {\n                result.Add(\"B+\");\n            } else if (g > 2.7) {\n                result.Add(\"B\");\n            } else if (g > 2.3) {\n                result.Add(\"B-\");\n            } else if (g > 2.0) {\n                result.Add(\"C+\");\n            } else if (g > 1.7) {\n                result.Add(\"C\");\n            } else if (g > 1.3) {\n                result.Add(\"C-\");\n            } else if (g > 1.0) {\n                result.Add(\"D+\");\n            } else if (g > 0.7) {\n                result.Add(\"D\");\n            } else if (g > 0.0) {\n                result.Add(\"D-\");\n            } else {\n                result.Add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool PrimeLength(string s) {\n        int length = s.Length;\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(length)) + 1; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int StartsOneEnds(int n) {\n        return n == 1 ? 1 : 2 * 9 * (int)Math.Pow(10, n - 2);\n    }\n}\n",
            "class Global {\n    public static string Solve(int n) {\n        var digitsSum = 0;\n        foreach (var d in n.ToString()) {\n            digitsSum += int.Parse(d.ToString());\n        }\n        return Convert.ToString(digitsSum, 2).Substring(2);\n    }\n}\n",
            "class Global {\n    public static int Add(IList<int> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                result += lst[i];\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string AntiShuffle(string s) {\n        var words = s.Split(\" \").ToList();\n        for (int i = 0; i < words.Count; i++) {\n            words[i] = string.Concat(words[i].OrderBy(c => c));\n        }\n        return string.Join(\" \", words);\n    }\n}\n",
            "class Global {\n    public static IList<IList<int>> GetRow(IList<IList<int>> lst, int x) {\n        var coords = new List<IList<int>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    coords.Add(new List<int> { i, j });\n                }\n            }\n        }\n        coords.Sort((a, b) => a[0].CompareTo(b[0]) == 0 ? b[1].CompareTo(a[1]) : a[0].CompareTo(b[0]));\n        return coords;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortArray(IList<int> arr) {\n        if (arr.Count == 0) {\n            return new List<int>();\n        }\n        if ((arr[0] + arr[arr.Count - 1]) % 2 == 0) {\n            return arr.OrderByDescending(x => x).ToList();\n        } else {\n            return arr.OrderBy(x => x).ToList();\n        }\n    }\n}\n",
            "class Global {\n    public static string Encrypt(string s) {\n        var result = new List<char>();\n        foreach (var ch in s) {\n            var shifted = (int)ch + 4;\n            if (shifted > (int)'z') {\n                shifted -= 26;\n            }\n            result.Add((char)shifted);\n        }\n        return string.Join(\"\", result);\n    }\n}\n",
            "class Global {\n    public static int? NextSmallest(IList<int> lst) {\n        var uniqueList = new HashSet<int>(lst);\n        var sortedList = new List<int>(uniqueList);\n        sortedList.Sort();\n        if (sortedList.Count < 2) {\n            return null;\n        }\n        return sortedList[1];\n    }\n}\n",
            "class Global {\n    public static int IsBored(string s) {\n        var sentences = Regex.Split(s, @\"[.!?]\\s*\");\n        int count = 0;\n        foreach (var sentence in sentences) {\n            if (sentence.Length >= 2 && sentence.Substring(0, 2) == \"I \") {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static bool AnyInt(object x, object y, object z) {\n        if (x is int x1 && y is int y1 && z is int z1) {\n            return x1 + y1 == z1 || x1 + z1 == y1 || y1 + z1 == x1;\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string Encode(string message) {\n        var vowels = \"aeiouAEIOU\";\n        var result = message.Select(ch => {\n            if (char.IsLetter(ch)) {\n                var ch1 = char.IsLower(ch) ? char.ToUpper(ch) : char.ToLower(ch);\n                if (vowels.Contains(ch1)) {\n                    ch1 = (char)(ch1 + 2);\n                }\n                return ch1;\n            } else {\n                return ch;\n            }\n        });\n        return string.Join(\"\", result);\n    }\n}\n",
            "class Global {\n    public static int Skjkasdkd(IList<int> lst) {\n        var primes = new List<int>();\n        foreach (var n in lst) {\n            if (n < 2) {\n                continue;\n            }\n            for (int i = 2; i <= Math.Sqrt(n); i++) {\n                if (n % i == 0) {\n                    goto Continue;\n                }\n            }\n            primes.Add(n);\n            Continue:;\n        }\n        if (primes.Count == 0) {\n            return 0;\n        }\n        var largest = primes.Max().ToString();\n        return largest.Sum(digit => (int)digit);\n    }\n}\n",
            "class Global {\n    public static bool CheckDictCase(IDictionary<string, string> d) {\n        if (d == null || d.Count == 0) {\n            return false;\n        }\n        bool lowerCaseKeys = true;\n        bool upperCaseKeys = true;\n        foreach (var key in d.Keys) {\n            if (!key.All(char.IsLower)) {\n                lowerCaseKeys = false;\n            }\n            if (!key.All(char.IsUpper)) {\n                upperCaseKeys = false;\n            }\n        }\n        return lowerCaseKeys || upperCaseKeys;\n    }\n}\n",
            "class Global {\n    public static IList<int> CountUpTo(int n) {\n        var primes = new List<int>();\n        for (int num = 2; num <= n; num++) {\n            bool isPrime = true;\n            foreach (var p in primes) {\n                if (num % p == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.Add(num);\n            }\n        }\n        return primes;\n    }\n}\n",
            "class Global {\n    public static int Multiply(int a, int b) {\n        int result = 0;\n        for (int i = 0; i < Math.Abs(a) % 10; i++) {\n            result += Math.Abs(b) % 10;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int CountUpper(string s) {\n        var vowels = \"AEIOU\";\n        var count = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (i % 2 == 0 && vowels.Contains(s[i])) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static int ClosestInteger(string value) {\n        double num = double.Parse(value);\n        return num >= 0 ? (int)(num + 0.5) : (int)(num - 0.5);\n    }\n}\n",
            "class Global {\n    public static IList<int> MakeAPile(int n) {\n        var result = new List<int>();\n        for (int i = 0; i < n; i++) {\n            result.Add(n + 2 * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> WordsString(string s) {\n        var result = new List<string>();\n        foreach (var w in Regex.Split(s, \"[, ]\")) {\n            if (w.Length > 0) {\n                result.Add(w);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int ChooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x != y) {\n            return y - 1;\n        }\n        return -1;\n    }\n}\n",
            "class Global {\n    public static string? RoundedAvg(int n, int m) {\n        if (n > m) {\n            return null;\n        }\n        int rAvg = (int)Math.Round((double)(m + n) / 2.0);\n        string result = Convert.ToString(rAvg, 2).Substring(1);\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool AllDigitsOdd(string s) {\n        foreach (var digit in s) {\n            if (digit - '0' % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static IList<int> UniqueDigits(IList<int> x) {\n        var result = new List<int>();\n        foreach (var num in x) {\n            if (AllDigitsOdd(num.ToString())) {\n                result.Add(num);\n            }\n        }\n        result.Sort();\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> ByLength(IList<int> arr) {\n        var digitNames = new List<string> {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        var sortedArr = new List<int>(arr.Where(x => x >= 1 && x <= 9).OrderByDescending(x => x));\n        return sortedArr.Select(x => digitNames[x - 1]).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<int> F(int n) {\n        var nums = new List<int>();\n        for (int i = 1; i <= n; i++) {\n            nums.Add(i);\n        }\n        var result = new List<int>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (nums[i] % 2 != 0) {\n                result.Add(nums.GetRange(0, i).Sum());\n            } else {\n                result.Add(nums.GetRange(0, i).Aggregate((x, y) => x * y));\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool IsPalindrome(string txt) {\n        return txt == new string(txt.Reverse());\n    }\n    public static IList<int> EvenOddPalindrome(int n) {\n        var cnt = new List<int> { 0, 0 };\n        for (int i = 1; i <= n; i++) {\n            if (IsPalindrome(i.ToString())) {\n                cnt[i % 2]++;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static int CountNums(IList<int> arr) {\n        int countValue = 0;\n        foreach (var n in arr) {\n            int sumValue = 0;\n            string nStr = n.ToString();\n            if (n >= 0) {\n                foreach (var d in nStr) {\n                    sumValue += int.Parse(d.ToString());\n                }\n            } else {\n                sumValue = int.Parse(nStr.Substring(0, 2)) * 2 + CountNums(Math.Abs(n));\n            }\n            if (sumValue > 0) {\n                countValue += 1;\n            }\n        }\n        return countValue;\n    }\n}\n",
            "class Global {\n    public static bool MoveOneBall(IList<int> arr) {\n        if (arr.Count == 0) {\n            return true;\n        }\n        var sortedArr = new List<int>(arr);\n        sortedArr.Sort();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr.GetRange(i, arr.Count - i).SequenceEqual(sortedArr.GetRange(0, arr.Count - i)) && arr.GetRange(0, i).SequenceEqual(sortedArr.GetRange(arr.Count - i, i))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string CanExchange(IList<int> lst1, IList<int> lst2) {\n        int oddCnt = 0;\n        int evenCnt = 0;\n        foreach (var num in lst1) {\n            if (num % 2 != 0) {\n                oddCnt++;\n            }\n        }\n        foreach (var num in lst2) {\n            if (num % 2 == 0) {\n                evenCnt++;\n            }\n        }\n        return evenCnt >= oddCnt ? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static IDictionary<string, int> Histogram(string test) {\n        var freq = new Dictionary<string, int>();\n        var words = test.Split(\" \");\n        foreach (var w in words) {\n            if (w.Length > 0) {\n                freq[w] = freq.ContainsKey(w) ? freq[w] + 1 : 1;\n            }\n        }\n        var result = new Dictionary<string, int>();\n        if (freq.Count > 0) {\n            var maxFreq = freq.Values.Max();\n            foreach (var kvp in freq) {\n                if (kvp.Value == maxFreq) {\n                    result[kvp.Key] = kvp.Value;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> ReverseDelete(string s, string c) {\n        var s1 = new string(s.Where(ch => !c.Contains(ch)).ToArray());\n        return new List<string> { s1, s1 == new string(s1.Reverse().ToArray()) ? \"yes\" : \"no\" };\n    }\n}\n",
            "class Global {\n    public static IList<string> OddCount(IList<string> lst) {\n        var result = new List<string>();\n        foreach (var num in lst) {\n            var n = num.Count(d => (int)d % 2 == 1);\n            var rs = \"the number of odd elements in the string i of the input.\";\n            result.Add(rs.Replace(\"i\", n.ToString()));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int MinSubArraySum(IList<int> nums) {\n        int minSum = 0;\n        int curSum = 0;\n        foreach (var n in nums) {\n            curSum = Math.Min(curSum + n, 0);\n            minSum = Math.Min(curSum, minSum);\n        }\n        if (minSum == 0) {\n            minSum = nums.Min();\n        }\n        return minSum;\n    }\n}\n",
            "class Global {\n    public static int MaxFill(IList<IList<int>> grid, int capacity) {\n        int result = 0;\n        foreach (var arr in grid) {\n            int sumArr = 0;\n            foreach (var item in arr) {\n                sumArr += item;\n            }\n            result += (int)Math.Ceiling((double)sumArr / capacity);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int CountOnes(int num) {\n        int count = 0;\n        while (num > 0) {\n            if ((num & 1) == 1) {\n                count++;\n            }\n            num >>= 1;\n        }\n        return count;\n    }\n    public static IList<int> SortArray(IList<int> arr) {\n        var sortedArr = arr.OrderBy(x => CountOnes(x)).ThenBy(x => x).ToList();\n        return sortedArr;\n    }\n}\n",
            "class Global {\n    public static IList<string> SelectWords(string s, int n) {\n        string consonants = \"bcdfghjklmnpqrstvwxyz\";\n        string[] words = s.Split(\" \");\n        var result = new List<string>();\n        foreach (var w in words) {\n            int count = 0;\n            foreach (var c in w) {\n                if (consonants.Contains(c.ToString().ToLower())) {\n                    count += 1;\n                }\n            }\n            if (count == n) {\n                result.Add(w);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string GetClosestVowel(string word) {\n        var vowels = \"aeiouAEIOU\";\n        for (int i = word.Length - 2; i > 0; i--) {\n            if (vowels.Contains(word[i]) && !vowels.Contains(word[i - 1]) && !vowels.Contains(word[i + 1])) {\n                return word[i].ToString();\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static string MatchParens(IList<string> lst) {\n        string s1 = lst[0] + lst[1];\n        string s2 = lst[1] + lst[0];\n        return (Check(s1) || Check(s2)) ? \"Yes\" : \"No\";\n    }\n    public static bool Check(string s) {\n        int depth = 0;\n        foreach (char ch in s) {\n            if (ch == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static IList<int> Maximum(IList<int> arr, int k) {\n        if (k == 0) {\n            return new List<int>();\n        }\n        var result = new List<int>(arr);\n        result.Sort();\n        return result.GetRange(result.Count - k, k);\n    }\n}\n",
            "class Global {\n    public static int Solution(IList<int> lst) {\n        int sumValue = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 != 0) {\n                sumValue += lst[i];\n            }\n        }\n        return sumValue;\n    }\n}\n",
            "class Global {\n    public static int AddElements(IList<int> arr, int k) {\n        int sumValue = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr[i].ToString().Length <= 2) {\n                sumValue += arr[i];\n            }\n        }\n        return sumValue;\n    }\n}\n",
            "class Global {\n    public static IList<int> GetOddCollatz(int n) {\n        var collatz = new List<int> { 1 };\n        while (n != 1) {\n            if (n % 2 != 0) {\n                collatz.Add(n);\n                n = 3 * n + 1;\n            } else {\n                n /= 2;\n            }\n        }\n        return collatz.OrderBy(x => x).ToList();\n    }\n}\n",
            "class Global {\n    public static bool ValidDate(string date) {\n        if (date.Length != 10 || date[2] != '-' || date[5] != '-') {\n            return false;\n        }\n        int m = int.Parse(date.Substring(0, 2));\n        int d = int.Parse(date.Substring(3, 2));\n        if (new int[] { 1, 3, 5, 7, 8, 10, 12 }.Contains(m) && d >= 1 && d <= 31) {\n            return true;\n        }\n        if (new int[] { 4, 6, 9, 11 }.Contains(m) && d >= 1 && d <= 30) {\n            return true;\n        }\n        if (m == 2 && d >= 1 && d <= 29) {\n            return true;\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<string> SplitWords(string txt) {\n        if (txt.Contains(\" \")) {\n            return txt.Split(\" \");\n        } else if (txt.Contains(\",\")) {\n            return txt.Split(\",\");\n        } else {\n            return new List<string> { txt.Count(c => char.IsLower(c) && c % 2 == 0).ToString() };\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsSorted(IList<int> lst) {\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i-1] > lst[i]) {\n                return false;\n            }\n        }\n        var freq = new Dictionary<int, int>();\n        foreach (var i in lst) {\n            freq[i] = freq.GetValueOrDefault(i, 0) + 1;\n        }\n        return lst.Max() <= 2;\n    }\n}\n",
            "class Global {\n    public static string Intersection(IList<int> interval1, IList<int> interval2) {\n        int l = Math.Max(interval1[0], interval2[0]);\n        int r = Math.Min(interval1[1], interval2[1]);\n        int length = r - l;\n        if (length > 0 && IsPrime(length)) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int? ProdSigns(IList<int> arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n        if (arr.Contains(0)) {\n            return 0;\n        }\n        int sign = arr.Count([n => n < 0]) % 2 == 1 ? -1 : 1;\n        int result = 0;\n        foreach (var n in arr) {\n            result += Math.Abs(n);\n        }\n        return sign * result;\n    }\n}\n",
            "class Global {\n    public static IList<int> MinPath(IList<IList<int>> grid, int k) {\n        int n = grid.Count;\n        int minVal = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 1) {\n                    var temp = new List<int>();\n                    if (i != 0) {\n                        temp.Add(grid[i - 1][j]);\n                    }\n                    if (j != 0) {\n                        temp.Add(grid[i][j - 1]);\n                    }\n                    if (i != n - 1) {\n                        temp.Add(grid[i + 1][j]);\n                    }\n                    if (j != n - 1) {\n                        temp.Add(grid[i][j + 1]);\n                    }\n                    minVal = Math.Min(temp.Min(), minVal);\n                }\n            }\n        }\n        var result = new List<int>();\n        for (int i = 0; i < k; i++) {\n            result.Add(i % 2 == 0 ? 1 : minVal);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> Tri(int n) {\n        if (n == 0) {\n            return new List<int> { 1 };\n        }\n        var seq = new List<int> { 1, 3 };\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                seq.Add(i / 2 + 1);\n            } else {\n                seq.Add(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int Digits(int n) {\n        var odds = string.Join(\"\", n.ToString().Select(c => c)).Where(c => int.Parse(c.ToString()) % 2 == 1).Select(c => int.Parse(c.ToString())).ToList();\n        int result = 1;\n        foreach (var d in odds) {\n            result *= d;\n        }\n        return result > 0 ? result : 0;\n    }\n}\n",
            "class Global {\n    public static bool IsNested(string s) {\n        var openIdx = new List<int>();\n        var closeIdx = new List<int>();\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i] == '[') {\n                openIdx.Add(i);\n            } else if (s[i] == ']') {\n                closeIdx.Add(i);\n            }\n        }\n        closeIdx.Reverse();\n        int cnt = 0;\n        int i = 0;\n        int l = closeIdx.Count;\n        for (int idx = 0; idx < openIdx.Count; idx++) {\n            if (i < l && openIdx[idx] < closeIdx[i]) {\n                cnt += 1;\n                i += 1;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int SumSquares(IList<double> lst) {\n        int result = 0;\n        foreach (var n in lst) {\n            result += (int)Math.Pow(Math.Ceiling(n), 2);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool CheckIfLastCharIsALetter(string txt) {\n        if (string.IsNullOrEmpty(txt)) {\n            return false;\n        }\n        var last = txt.Substring(txt.LastIndexOf(' ') + 1);\n        return last.Length == 1 && char.IsLetter(last[0]);\n    }\n}\n",
            "class Global {\n    public static int CanArrange(IList<int> arr) {\n        if (arr.Count <= 1) {\n            return -1;\n        }\n        var idx = new List<int>();\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < arr[i - 1]) {\n                idx.Add(i);\n            }\n        }\n        return idx.Count > 0 ? idx.Max() : -1;\n    }\n}\n",
            "class Global {\n    public static IList<int?> LargestSmallestIntegers(IList<int> lst) {\n        int? maxNeg = null;\n        int? minPos = null;\n        foreach (var i in lst) {\n            if (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n                    maxNeg = i;\n                }\n            } else if (i > 0) {\n                if (minPos == null || i < minPos) {\n                    minPos = i;\n                }\n            }\n        }\n        return new List<int?> { maxNeg, minPos };\n    }\n}\n",
            "class Global {\n    public static double? CompareOne(object a, object b) {\n        if (a is string) {\n            return double.Parse((string)a.Replace(',', '.'));\n        } else if (a is int) {\n            return (int)a;\n        } else if (a is float) {\n            return (float)a;\n        } else {\n            throw new RuntimeException(\"Type Error\");\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int SpecialFactorial(int n) {\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            int fact = 1;\n            for (int j = 1; j <= i; j++) {\n                fact *= j;\n            }\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string FixSpaces(string txt) {\n        return Regex.Replace(txt, @\"\\s{3,}\", \"-\").Replace(\" \", \"_\");\n    }\n}\n",
            "class Global {\n    public static string FileNameCheck(string fileName) {\n        var suf = new List<string> { \"txt\", \"exe\", \"dll\" };\n        var lst = fileName.Split('.');\n        if (lst.Length != 2 || !suf.Contains(lst[1]) || lst[0].Length == 0 || !char.IsLetter(lst[0][0]) || lst[0].Count(x => char.IsDigit(x)) > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
            "class Global {\n    public static int SumSquares(IList<int> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 3 == 0) {\n                result += (int)Math.Pow(lst[i], 2);\n            } else if (i % 4 == 0) {\n                result += (int)Math.Pow(lst[i], 3);\n            } else {\n                result += lst[i];\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string WordsInSentence(string sentence) {\n        var words = sentence.Split(\" \");\n        var result = words.Where(w => IsPrime(w.Length)).ToList();\n        return string.Join(\" \", result);\n    }\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static bool Simplify(string x, string n) {\n        var xs = x.Split(\"/\");\n        var ns = n.Split(\"/\");\n        var num = int.Parse(xs[0]) * int.Parse(ns[0]);\n        var den = int.Parse(xs[1]) * int.Parse(ns[1]);\n        return num % den == 0;\n    }\n}\n",
            "class Global {\n    public static int DigitsSum(int n) {\n        string nStr = n.ToString();\n        if (n >= 0) {\n            int result = 0;\n            foreach (char d in nStr) {\n                result += (int)char.GetNumericValue(d);\n            }\n            return result;\n        } else {\n            return (int)char.GetNumericValue(nStr[0]) * 2 + DigitsSum(Math.Abs(n));\n        }\n    }\n    public static IList<int> OrderByPoints(IList<int> nums) {\n        var result = new List<int>();\n        foreach (var num in nums) {\n            result.Add(num);\n        }\n        result.Sort((a, b) => DigitsSum(a).CompareTo(DigitsSum(b)));\n        return result;\n    }\n}\n",
            "class Global {\n    public static int SpecialFilter(IList<int> nums) {\n        string odds = \"13579\";\n        int count = 0;\n        foreach (var n in nums) {\n            if (n > 10 && n % 2 == 1 && odds.Contains(n.ToString()[0])) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static int GetMaxTriples(int n) {\n        var c = new int[3];\n        for (int i = 1; i <= n; i++) {\n            var a = i * i - i + 1;\n            c[a % 3] += 1;\n        }\n        return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n    }\n}\n",
            "class Global {\n    public static IList<string> Bf(string planet1, string planet2) {\n        var names = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        if (!names.Contains(planet1) || !names.Contains(planet2)) {\n            return new List<string>();\n        }\n        var l = names.IndexOf(planet1);\n        var r = names.IndexOf(planet2);\n        if (l > r) {\n            l = r;\n            r = l;\n        }\n        if (l == r) {\n            return new List<string>();\n        }\n        return names.GetRange(l + 1, r - l - 1);\n    }\n}\n",
            "class Global {\n    public static IList<string> SortedListSum(IList<string> lst) {\n        var result = new List<string>();\n        foreach (var s in lst) {\n            if (s.Length % 2 == 0) {\n                result.Add(s);\n            }\n        }\n        result.Sort((x, y) => x.Length == y.Length ? x.CompareTo(y) : x.Length.CompareTo(y.Length));\n        return result;\n    }\n}\n",
            "class Global {\n    public static int XOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i <= (int)Math.Floor(Math.Sqrt(n)) + 1; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int DoubleTheDifference(IList<double> lst) {\n        int result = 0;\n        foreach (var n in lst) {\n            if (n >= 0 && Math.Abs(n % 2) < 1e-9) {\n                result += n * n;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> Compare(IList<int> game, IList<int> guess) {\n        var result = new List<int>();\n        for (int i = 0; i < game.Count; i++) {\n            result.Add(Math.Abs(game[i] - guess[i]));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string StrongestExtension(string className, IList<string> extensions) {\n        double maxS = double.NegativeInfinity;\n        string maxExt = \"\";\n        foreach (var ext in extensions) {\n            int upper = 0;\n            int lower = 0;\n            foreach (var c in ext) {\n                if (char.IsUpper(c)) {\n                    upper += 1;\n                } else if (char.IsLower(c)) {\n                    lower += 1;\n                }\n            }\n            double s = upper - lower;\n            if (s > maxS) {\n                maxS = s;\n                maxExt = ext;\n            }\n        }\n        return $\"{className}.{maxExt}\";\n    }\n}\n",
            "class Global {\n    public static bool CycpatternCheck(string a, string b) {\n        if (a.Length < b.Length) {\n            return false;\n        }\n        for (int i = 0; i < b.Length; i++) {\n            if (a.Contains(b.Substring(i) + b.Substring(0, i))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<int> EvenOddCount(int num) {\n        var ds = Math.Abs(num).ToString();\n        var even = 0;\n        foreach (var d in ds) {\n            if (d % 2 == 0) {\n                even += 1;\n            }\n        }\n        return new List<int> { even, ds.Length - even };\n    }\n}\n",
            "class Global {\n    public static string IntToMiniRoman(int num) {\n        var values = new List<int> { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        var numerals = new List<string> { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        var res = new List<string>();\n        for (int i = 0; i < values.Count; i++) {\n            while (num >= values[i]) {\n                res.Add(numerals[i]);\n                num -= values[i];\n            }\n        }\n        return string.Join(\"\", res);\n    }\n}\n",
            "class Global {\n    public static bool RightAngleTriangle(int a, int b, int c) {\n        var s = new List<int> { a, b, c };\n        s.Sort();\n        return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n    }\n}\n",
            "class Global {\n    public static string FindMax(IList<string> words) {\n        int maxCnt = 0;\n        string maxW = \"\";\n        foreach (var w in words) {\n            int cnt = new HashSet<char>(w).Count;\n            if (cnt > maxCnt) {\n                maxCnt = cnt;\n                maxW = w;\n            } else if (cnt == maxCnt) {\n                maxW = Math.Min(maxW, w);\n            }\n        }\n        return maxW;\n    }\n}\n",
            "class Global {\n    public static IList<int> Eat(int num, int need, int remaining) {\n        return need <= remaining ? new List<int> { num + need, remaining - need } : new List<int> { num + remaining, 0 };\n    }\n}\n",
            "class Global {\n    public static int DoAlgebra(IList<string> operators, IList<int> operands) {\n        var ops = new List<string>(operators);\n        var nums = new List<int>(operands);\n        for (int i = ops.Count - 1; i >= 0; i--) {\n            if (ops[i] == \"**\") {\n                nums[i] = (int)Math.Pow(nums[i], nums[i + 1]);\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n            }\n        }\n        for (int i = 0; i < ops.Count; i++) {\n            if (ops[i] == \"*\") {\n                nums[i] = nums[i] * nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i -= 1;\n            } else if (ops[i] == \"//\") {\n                nums[i] = nums[i] / nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i -= 1;\n            }\n        }\n        for (int i = 0; i < ops.Count; i++) {\n            if (ops[i] == \"+\") {\n                nums[i] = nums[i] + nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i -= 1;\n            } else if (ops[i] == \"-\") {\n                nums[i] = nums[i] - nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i -= 1;\n            }\n        }\n        return nums[0];\n    }\n}\n",
            "class Global {\n    public static string Solve(string s) {\n        var result = new List<char>();\n        foreach (var ch in s) {\n            if (!char.IsLetter(ch)) {\n                result.Add(ch);\n            } else if (char.IsUpper(ch)) {\n                result.Add(char.ToLower(ch));\n            } else if (char.IsLower(ch)) {\n                result.Add(char.ToUpper(ch));\n            }\n        }\n        if (!result.Any(ch => char.IsLetter(ch))) {\n            return new string(result.Reverse().ToArray());\n        }\n        return new string(result.ToArray());\n    }\n}\n",
            "class Global {\n    public static string? StringToMd5(string txt) {\n        if (string.IsNullOrEmpty(txt)) {\n            return null;\n        }\n        var md5Hash = MD5.Create();\n        var txtBytes = System.Text.Encoding.UTF8.GetBytes(txt);\n        md5Hash.ComputeHash(txtBytes);\n        var md5Encoded = BitConverter.ToString(md5Hash.Hash).Replace(\"-\", \"\").ToLower();\n        return md5Encoded;\n    }\n}\n",
            "class Global {\n    public static IList<int> GenerateIntegers(int a, int b) {\n        int lower = Math.Max(2, Math.Min(a, b));\n        int upper = Math.Min(8, Math.Max(a, b));\n        var result = new List<int>();\n        for (int i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                result.Add(i);\n            }\n        }\n        return result;\n    }\n}\n"
        ],
        "dart": [
            "bool hasCloseElements(List<double> numbers, double threshold) {\n    for (int i = 0; i < numbers.length; i++) {\n        for (int j = i + 1; j < numbers.length; j++) {\n            if (numbers[i] - numbers[j].abs() < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "List<String> separateParenGroups(String parenString) {\n    var groups = <String>[];\n    var stk = <String>[];\n    var currentGroup = \"\";\n    var parens = parenString.replaceAll(\" \", \"\");\n    for (int i = 0; i < parens.length; i++) {\n        if (parens[i] == \"(\") {\n            stk.add(parens[i]);\n            currentGroup += parens[i];\n        } else if (parens[i] == \")\") {\n            stk.removeLast();\n            currentGroup += parens[i];\n            if (stk.isEmpty) {\n                groups.add(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - num.floorToDouble();\n}\n",
            "bool belowZero(List<int> operations) {\n    var balance = 0;\n    for (int op in operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(List<double> numbers) {\n    double mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    double deviation = 0.0;\n    for (double x in numbers) {\n        deviation += (x - mean).abs();\n    }\n    return deviation / numbers.length;\n}\n",
            "List<int> intersperse(List<int> numbers, int delimiter) {\n    var result = <int>[];\n    for (int i = 0; i < numbers.length; i++) {\n        if (i != 0) {\n            result.add(delimiter);\n        }\n        result.add(numbers[i]);\n    }\n    return result;\n}\n",
            "List<int> parseNestedParens(String parenString) {\n    var result = <int>[];\n    var parenGroups = parenString.split(\" \");\n    for (var group in parenGroups) {\n        var maxDepth = 0;\n        var depth = 0;\n        for (var ch in group.split(\"\")) {\n            if (ch == \"(\") {\n                depth += 1;\n                maxDepth = max(maxDepth, depth);\n            } else if (ch == \")\") {\n                depth -= 1;\n            }\n        }\n        result.add(maxDepth);\n    }\n    return result;\n}\n",
            "List<String> filterBySubstring(List<String> strs, String substring) {\n    var result = <String>[];\n    for (var s in strs) {\n        if (s.contains(substring)) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n",
            "List<int> sumProduct(List<int> numbers) {\n    int nSum = 0;\n    int nProduct = 1;\n    for (int n in numbers) {\n        nSum += n;\n        nProduct *= n;\n    }\n    return [nSum, nProduct];\n}\n",
            "List<int> rollingMax(List<int> numbers) {\n    var result = <int>[];\n    var maxSoFar = double.negativeInfinity;\n    for (int num in numbers) {\n        if (num > maxSoFar) {\n            maxSoFar = num.toDouble();\n        }\n        result.add(maxSoFar.toInt());\n    }\n    return result;\n}\n",
            "bool isPalindrome(String s) {\n    return s == s.split('').reversed.join();\n}\nString makePalindrome(String s) {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (int i = 0; i < s.length; i++) {\n        if (isPalindrome(s.substring(i))) {\n            return s + s.substring(0, i).split('').reversed.join();\n        }\n    }\n    return \"\";\n}\n",
            "String stringXor(String a, String b) {\n    var result = \"\";\n    for (int i = 0; i < a.length; i++) {\n        if (a[i] == b[i]) {\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n",
            "String? longest(List<String> strs) {\n    if (strs.isEmpty) {\n        return null;\n    }\n    String longestS = strs[0];\n    for (String s in strs) {\n        if (s.length > longestS.length) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    while (b != 0) {\n        int temp = a;\n        a = b;\n        b = temp % b;\n    }\n    return a;\n}\n",
            "List<String> allPrefixes(String s) {\n    var prefixes = <String>[];\n    for (int i = 0; i < s.length; i++) {\n        prefixes.add(s.substring(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "String stringSequence(int n) {\n    var result = \"\";\n    for (int i = 0; i <= n; i++) {\n        result += i.toString() + \" \";\n    }\n    return result.substring(0, result.length - 1);\n}\n",
            "int countDistinctCharacters(String s) {\n    var distinctCharacters = <String>{};\n    for (var char in s.toLowerCase().split('')) {\n        distinctCharacters.add(char);\n    }\n    return distinctCharacters.length;\n}\n",
            "Map<String, int> durations = {\"o\": 4, \"o|\": 2, \".|\": 1};\nList<int> parseMusic(String musicString) {\n    var notes = musicString.split(\" \");\n    var result = <int>[];\n    for (var note in notes) {\n        result.add(durations[note]);\n    }\n    return result;\n}\n",
            "int howManyTimes(String s, String substring) {\n    int times = 0;\n    for (int i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "String sortNumbers(String numbers) {\n    var numDict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    var numList = numbers.split(\" \").where((x) => numDict.containsKey(x)).toList();\n    numList.sort((a, b) => numDict[a].compareTo(numDict[b]));\n    return numList.join(\" \");\n}\n",
            "List<double> findClosestElements(List<double> numbers) {\n    numbers.sort();\n    double minDiff = double.infinity;\n    List<double> closestPair = [];\n    for (int i = 1; i < numbers.length; i++) {\n        double diff = numbers[i] - numbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [numbers[i - 1], numbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "List<double> rescaleToUnit(List<double> numbers) {\n    double minNum = double.infinity;\n    double maxNum = double.negativeInfinity;\n    for (double num in numbers) {\n        if (num < minNum) {\n            minNum = num;\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    if (minNum == maxNum) {\n        return [0.0] * numbers.length;\n    } else {\n        return numbers.map((num) => (num - minNum) / (maxNum - minNum)).toList();\n    }\n}\n",
            "List<int> filterIntegers(List<Object> values) {\n    var result = <int>[];\n    for (var x in values) {\n        if (x is int) {\n            result.add(x);\n        }\n    }\n    return result;\n}\n",
            "int strLength(String s) {\n    int length = 0;\n    for (int i = 0; i < s.length; i++) {\n        length += 1;\n    }\n    return length;\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return n ~/ i;\n        }\n    }\n    return 1;\n}\n",
            "List<int> factorize(int n) {\n    var factors = <int>[];\n    var divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor);\n            n ~/= divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n",
            "List<int> removeDuplicates(List<int> numbers) {\n    var counts = <int, int>{};\n    for (int num in numbers) {\n        if (counts.containsKey(num)) {\n            counts[num] += 1;\n        } else {\n            counts[num] = 1;\n        }\n    }\n    var res = numbers.where((num) => counts[num] == 1).toList();\n    return res;\n}\n",
            "String flipCase(String s) {\n    var flipped = <String>[];\n    for (int i = 0; i < s.length; i++) {\n        if (!s[i].isAlphabetic) {\n            flipped.add(s[i]);\n        } else if (s[i].isLowerCase) {\n            flipped.add(s[i].toUpperCase());\n        } else if (s[i].isUpperCase) {\n            flipped.add(s[i].toLowerCase());\n        }\n    }\n    return flipped.join();\n}\n",
            "String concatenate(List<String> strs) {\n    var result = \"\";\n    for (var s in strs) {\n        result += s;\n    }\n    return result;\n}\n",
            "List<String> filterByPrefix(List<String> strs, String prefixStr) {\n    var result = <String>[];\n    for (var s in strs) {\n        if (s.startsWith(prefixStr)) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n",
            "List<int> getPositive(List<int> l) {\n    var result = <int>[];\n    for (int num in l) {\n        if (num > 0) {\n            result.add(num);\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).floor(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "double poly(List<int> xs, double x) {\n    double res = 0.0;\n    for (int i = 0; i < xs.length; i++) {\n        res += xs[i] * pow(x, i).toDouble();\n    }\n    return res;\n}\ndouble findZero(List<int> xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (x1 - x2 > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "List<int> sortThird(List<int> l) {\n    var sortedThird = l.where((e) => e % 3 == 0).toList()..sort();\n    var result = <int>[];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 == 0) {\n            result.add(sortedThird[i ~/ 3]);\n        } else {\n            result.add(l[i]);\n        }\n    }\n    return result;\n}\n",
            "List<int> listUnique(List<int> l) {\n    var uniqueList = <int>[];\n    for (int item in l) {\n        if (!uniqueList.contains(item)) {\n            uniqueList.add(item);\n        }\n    }\n    uniqueList.sort();\n    return uniqueList;\n}\n",
            "int maxElement(List<int> l) {\n    int maxValue = double.negativeInfinity;\n    for (int i in l) {\n        if (i > maxValue) {\n            maxValue = i;\n        }\n    }\n    return maxValue;\n}\n",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += (i.toString().split('7').length - 1);\n        }\n    }\n    return cnt;\n}\n",
            "List<int> sortEven(List<int> l) {\n    var sortedEven = l.where((e) => e.isEven).toList()..sort();\n    var result = <int>[];\n    for (int i = 0; i < l.length; i++) {\n        if (i.isEven) {\n            result.add(sortedEven[i ~/ 2]);\n        } else {\n            result.add(l[i]);\n        }\n    }\n    return result;\n}\n",
            "String encodeCyclic(String s) {\n    var result = <String>[];\n    for (int i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.add(s.substring(i));\n        } else {\n            result.add(s.substring(i + 1, i + 3));\n            result.add(s[i]);\n        }\n    }\n    return result.join();\n}\nString decodeCyclic(String s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).floor() + 1; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint primeFib(int n) {\n    var f = [0, 1];\n    var cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\n",
            "bool triplesSumToZero(List<int> l) {\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return pow(n, 2).toInt();\n}\n",
            "List<int> incrList(List<int> l) {\n    var result = <int>[];\n    for (int i in l) {\n        result.add(i + 1);\n    }\n    return result;\n}\n",
            "bool pairsSumToZero(List<int> l) {\n    var seen = <int>{};\n    for (int num in l) {\n        if (-num in seen) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "String changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    String result = \"\";\n    while (x > 0) {\n        result = (x % bas).toString() + result;\n        x ~/= bas;\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int h) {\n    return a * h / 2.0;\n}\n",
            "int fib4(int n) {\n    List<int> fib = [0, 0, 2, 0];\n    for (int i = 4; i <= n; i++) {\n        fib[i % 4] = fib[i - 1] + fib[i - 2];\n    }\n    return fib[n % 4];\n}\n",
            "double median(List<double> l) {\n    l.sort();\n    if (l.length.isOdd) {\n        return l[l.length ~/ 2];\n    } else {\n        return (l[l.length ~/ 2] + l[l.length ~/ 2 - 1]) / 2;\n    }\n}\n",
            "bool isPalindrome(String txt) {\n    for (int i = 0; i < txt.length ~/ 2; i++) {\n        if (txt[i] != txt[txt.length - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "String encodeShift(String s) {\n    var result = <String>[];\n    for (int i = 0; i < s.length; i++) {\n        result.add(String.fromCharCode(((s.codeUnitAt(i) - 97 + 5) % 26) + 97));\n    }\n    return result.join();\n}\nString decodeShift(String s) {\n    var result = <String>[];\n    for (int i = 0; i < s.length; i++) {\n        result.add(String.fromCharCode(((s.codeUnitAt(i) - 97 + 21) % 26) + 97));\n    }\n    return result.join();\n}\n",
            "String removeVowels(String txt) {\n    var vowels = \"aeiouAEIOU\";\n    var result = \"\";\n    for (int i = 0; i < txt.length; i++) {\n        if (!vowels.contains(txt[i])) {\n            result += txt[i];\n        }\n    }\n    return result;\n}\n",
            "bool belowThreshold(List<int> l, int t) {\n    for (int x in l) {\n        if (x >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(String s0, String s1) {\n    var s0Set = Set<String>.from(s0.split(''));\n    var s1Set = Set<String>.from(s1.split(''));\n    return s0Set == s1Set;\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "bool correctBracketing(String brackets) {\n    int depth = 0;\n    for (int i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"<\") {\n            depth += 1;\n        } else if (brackets[i] == \">\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(List<int> l) {\n    var diff = [y - x for (int x, y) in zip(l, l.sublist(1))];\n    return diff.every((x) => x <= 0) || diff.every((x) => x >= 0);\n}\n",
            "List<int> common(List<int> l1, List<int> l2) {\n    var result = <int>[];\n    for (int i in l1) {\n        if (l2.contains(i)) {\n            result.add(i);\n        }\n    }\n    return result.toList()..sort();\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i != 0) {\n            i += 1;\n        } else {\n            n ~/= i;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    int result = 0;\n    for (int i = 0; i <= n; i++) {\n        result += i;\n    }\n    return result;\n}\n",
            "bool correctBracketing(String brackets) {\n    int depth = 0;\n    for (int i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"(\") {\n            depth += 1;\n        } else if (brackets[i] == \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "List<int> derivative(List<int> xs) {\n    var result = <int>[];\n    for (int i = 1; i < xs.length; i++) {\n        result.add(xs[i] * i);\n    }\n    return result;\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(String s) {\n    var vowels = \"aeiou\";\n    var cnt = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (vowels.contains(s[i].toLowerCase()) || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n",
            "String circularShift(int x, int shift) {\n    String xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.split('').reversed.join();\n    } else {\n        return xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift);\n    }\n}\n",
            "int digitSum(String s) {\n    int sumValue = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() == s[i]) {\n            sumValue += s.codeUnitAt(i);\n        }\n    }\n    return sumValue;\n}\n",
            "int fruitDistribution(String s, int n) {\n    var words = s.split(' ');\n    var apples = int.parse(words[words.indexOf(\"apples\") - 1]);\n    var oranges = int.parse(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "List<int> pluck(List<int> arr) {\n    var evens = arr.where((n) => n % 2 == 0).toList();\n    if (evens.isEmpty) {\n        return [];\n    }\n    var minEven = evens.reduce(min);\n    return [minEven, evens.indexOf(minEven)];\n}\n",
            "int search(List<int> lst) {\n    var freqs = <int, int>{};\n    for (int n in lst) {\n        if (!freqs.containsKey(n)) {\n            freqs[n] = 0;\n        }\n        freqs[n] += 1;\n    }\n    var goodVals = [for (int k, int v in freqs.entries) if (v >= k) k];\n    if (goodVals.isNotEmpty) {\n        return goodVals.reduce(max);\n    } else {\n        return -1;\n    }\n}\n",
            "List<int> strangeSortList(List<int> lst) {\n    var sl = lst.sorted();\n    var result = <int>[];\n    var left = 0;\n    var right = sl.length - 1;\n    while (left <= right) {\n        result.add(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.add(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    double s = (a + b + c) / 2.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(List<int> q, int w) {\n    if (q.isEmpty) {\n        return false;\n    }\n    bool isPalin = true;\n    for (int i = 0; i < q.length; i++) {\n        if (q[i] != q[q.length - i - 1]) {\n            isPalin = false;\n        }\n    }\n    int total = 0;\n    for (int i in q) {\n        total += i;\n    }\n    return isPalin && total <= w;\n}\n",
            "int smallestChange(List<int> arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.length ~/ 2; i++) {\n        if (arr[i] != arr[arr.length - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;\n}\n",
            "List<String> totalMatch(List<String> lst1, List<String> lst2) {\n    int cnt1 = 0;\n    for (String s in lst1) {\n        cnt1 += s.length;\n    }\n    int cnt2 = 0;\n    for (String s in lst2) {\n        cnt2 += s.length;\n    }\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n",
            "bool isMultiplyPrime(int a) {\n    if (a < 2) {\n        return false;\n    }\n    for (int i = 2; i * i <= a; i++) {\n        if (a % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    a = a.abs();\n    int root = (a.roundToDouble() / 3.0).round();\n    return root * root * root == a;\n}\n",
            "int hexKey(String num) {\n    int count = 0;\n    for (int i = 0; i < num.length; i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D') {\n            count += 1;\n        }\n    }\n    return count;\n}\n",
            "String decimalToBinary(int dec) {\n    String binary = dec.toRadixString(2);\n    return \"db\" + binary + \"db\";\n}\n",
            "bool isHappy(String s) {\n    if (s.length < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.length - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "List<String> numericalLetterGrade(List<double> grades) {\n    var result = <String>[];\n    for (double g in grades) {\n        if (g == 4.0) {\n            result.add(\"A+\");\n        } else if (g > 3.7) {\n            result.add(\"A\");\n        } else if (g > 3.3) {\n            result.add(\"A-\");\n        } else if (g > 3.0) {\n            result.add(\"B+\");\n        } else if (g > 2.7) {\n            result.add(\"B\");\n        } else if (g > 2.3) {\n            result.add(\"B-\");\n        } else if (g > 2.0) {\n            result.add(\"C+\");\n        } else if (g > 1.7) {\n            result.add(\"C\");\n        } else if (g > 1.3) {\n            result.add(\"C-\");\n        } else if (g > 1.0) {\n            result.add(\"D+\");\n        } else if (g > 0.7) {\n            result.add(\"D\");\n        } else if (g > 0.0) {\n            result.add(\"D-\");\n        } else {\n            result.add(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(String s) {\n    int length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(length).floor() + 1; i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    int result = 2 * 9 * pow(10, n - 2).toInt();\n    return result;\n}\n",
            "String solve(int n) {\n    var digitsSum = 0;\n    for (var d in n.toString().split('')) {\n        digitsSum += int.parse(d);\n    }\n    return digitsSum.toRadixString(2).substring(2);\n}\n",
            "int add(List<int> lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i.isOdd && lst[i].isEven) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "String antiShuffle(String s) {\n    var words = s.split(\" \").map((word) => word.split(\"\")).toList();\n    for (int i = 0; i < words.length; i++) {\n        words[i] = words[i].join().split(\"\").sorted().join();\n    }\n    return words.join(\" \");\n}\n",
            "List<List<int>> getRow(List<List<int>> lst, int x) {\n    var coords = <List<int>>[];\n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                coords.add([i, j]);\n            }\n        }\n    }\n    coords.sort((a, b) => a[0].compareTo(b[0]));\n    return coords;\n}\n",
            "List<int> sortArray(List<int> arr) {\n    if (arr.isEmpty) {\n        return [];\n    }\n    if ((arr[0] + arr.last) % 2 == 0) {\n        return arr.reversed.toList();\n    } else {\n        return arr.sorted();\n    }\n}\n",
            "String encrypt(String s) {\n    var result = <String>[];\n    for (int i = 0; i < s.length; i++) {\n        var shifted = s.codeUnitAt(i) + 4;\n        if (shifted > 'z'.codeUnitAt(0)) {\n            shifted -= 26;\n        }\n        result.add(String.fromCharCode(shifted));\n    }\n    return result.join();\n}\n",
            "int? nextSmallest(List<int> lst) {\n    var uniqueList = lst.toSet();\n    var sortedList = uniqueList.toList()..sort();\n    if (sortedList.length < 2) {\n        return null;\n    }\n    return sortedList[1];\n}\n",
            "int isBored(String s) {\n    var sentences = s.split(RegExp(r\"[.!?]\\s*\"));\n    var count = 0;\n    for (var sentence in sentences) {\n        if (sentence.length >= 2 && sentence.startsWith(\"I \")) {\n            count += 1;\n        }\n    }\n    return count;\n}\n",
            "bool anyInt(dynamic x, dynamic y, dynamic z) {\n    if (x is int && y is int && z is int) {\n        return (x + y == z) || (x + z == y) || (y + z == x);\n    }\n    return false;\n}\n",
            "String encode(String message) {\n    var vowels = \"aeiouAEIOU\";\n    var result = [];\n    for (var ch in message.split('')) {\n        if (ch.isAlphabetic) {\n            var ch1 = ch.toUpperCase() == ch ? ch.toLowerCase() : ch.toUpperCase();\n            if (vowels.contains(ch1)) {\n                ch1 = String.fromCharCode(ch1.codeUnitAt(0) + 2);\n            }\n            result.add(ch1);\n        } else {\n            result.add(ch);\n        }\n    }\n    return result.join();\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).floor(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint skjkasdkd(List<int> lst) {\n    var primes = lst.where((n) => isPrime(n)).toList();\n    if (primes.length == 0) {\n        return 0;\n    }\n    var largest = primes.reduce((a, b) => a > b ? a : b).toString();\n    return largest.split('').map((digit) => int.parse(digit)).reduce((a, b) => a + b);\n}\n",
            "bool checkDictCase(Map<String, String> d) {\n    if (d.isEmpty) {\n        return false;\n    }\n    bool lowerCaseKeys = true;\n    bool upperCaseKeys = true;\n    for (var key in d.keys) {\n        if (!key.toLowerCase().contains(key)) {\n            lowerCaseKeys = false;\n        }\n        if (!key.toUpperCase().contains(key)) {\n            upperCaseKeys = false;\n        }\n    }\n    return lowerCaseKeys || upperCaseKeys;\n}\n",
            "List<int> countUpTo(int n) {\n    var primes = <int>[];\n    for (int num = 2; num < n; num++) {\n        bool isPrime = true;\n        for (int p in primes) {\n            if (num % p == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.add(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    int result = 0;\n    for (int i = 0; i < (a.abs() % 10); i++) {\n        result += b.abs() % 10;\n    }\n    return result;\n}\n",
            "int countUpper(String s) {\n    var vowels = \"AEIOU\";\n    var count = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (i % 2 == 0 && vowels.contains(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "int closestInteger(String value) {\n    double num = double.parse(value);\n    if (num >= 0) {\n        return (num + 0.5).toInt();\n    } else {\n        return (num - 0.5).toInt();\n    }\n}\n",
            "List<int> makeAPile(int n) {\n    var result = <int>[];\n    for (int i = 0; i < n; i++) {\n        result.add(n + 2 * i);\n    }\n    return result;\n}\n",
            "List<String> wordsString(String s) {\n    var result = <String>[];\n    for (var w in s.split(RegExp(r\"[, ]\"))) {\n        if (w.length > 0) {\n            result.add(w);\n        }\n    }\n    return result;\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    if (x != y) {\n        return y - 1;\n    }\n    return -1;\n}\n",
            "String? roundedAvg(int n, int m) {\n    if (n > m) {\n        return null;\n    }\n    int rAvg = (m + n) ~/ 2;\n    String result = rAvg.toRadixString(2);\n    return result;\n}\n",
            "bool allDigitsOdd(String s) {\n    for (int i = 0; i < s.length; i++) {\n        if (int.parse(s[i]) % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nList<int> uniqueDigits(List<int> x) {\n    var result = <int>[];\n    for (int num in x) {\n        if (allDigitsOdd(num.toString())) {\n            result.add(num);\n        }\n    }\n    result.sort();\n    return result;\n}\n",
            "List<String> byLength(List<int> arr) {\n    var digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    var sortedArr = arr.where((x) => x >= 1 && x <= 9).toList()..sort((a, b) => b.compareTo(a));\n    return [digitNames[x - 1] for x in sortedArr];\n}\n",
            "List<int> f(int n) {\n    var nums = List<int>.generate(n, (i) => i + 1);\n    var result = <int>[];\n    for (int i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 != 0) {\n            result.add(nums.sublist(0, i + 1).reduce((x, y) => x + y));\n        } else {\n            result.add(nums.sublist(0, i + 1).reduce((x, y) => x * y));\n        }\n    }\n    return result;\n}\n",
            "bool isPalindrome(String txt) {\n    return txt == txt.split('').reversed.join();\n}\nList<int> evenOddPalindrome(int n) {\n    var cnt = [0, 0];\n    for (int i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "int digitsSum(int n) {\n    String nStr = n.toString();\n    if (n >= 0) {\n        int sumValue = 0;\n        for (int i = 0; i < nStr.length; i++) {\n            sumValue += int.parse(nStr[i]);\n        }\n        return sumValue;\n    } else {\n        return int.parse(nStr.substring(0, 2)) * 2 + digitsSum(n.abs());\n    }\n}\nint countNums(List<int> arr) {\n    int countValue = 0;\n    for (int n in arr) {\n        if (digitsSum(n) > 0) {\n            countValue += 1;\n        }\n    }\n    return countValue;\n}\n",
            "bool moveOneBall(List<int> arr) {\n    if (arr.length == 0) {\n        return true;\n    }\n    var sortedArr = arr.toList()..sort();\n    for (int i = 0; i < arr.length; i++) {\n        if (arr.sublist(i) == sortedArr.sublist(0, arr.length - i) && arr.sublist(0, i) == sortedArr.sublist(arr.length - i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "String canExchange(List<int> lst1, List<int> lst2) {\n    int oddCnt = 0;\n    int evenCnt = 0;\n    for (int num in lst1) {\n        if (num % 2 != 0) {\n            oddCnt += 1;\n        }\n    }\n    for (int num in lst2) {\n        if (num % 2 == 0) {\n            evenCnt += 1;\n        }\n    }\n    return evenCnt >= oddCnt ? \"YES\" : \"NO\";\n}\n",
            "Map<String, int> histogram(String test) {\n    var freq = {};\n    var words = test.split(\" \").where((w) => w.length > 0).toList();\n    for (var w in words) {\n        freq[w] = freq.containsKey(w) ? freq[w] + 1 : 1;\n    }\n    var result = {};\n    if (freq.isNotEmpty) {\n        var maxFreq = freq.values.reduce(max);\n        for (var k in freq.keys) {\n            if (freq[k] == maxFreq) {\n                result[k] = freq[k];\n            }\n        }\n    }\n    return result;\n}\n",
            "bool isPalindrome(String s) {\n    return s == s.split('').reversed.join();\n}\nList<String> reverseDelete(String s, String c) {\n    String s1 = s.replaceAll(RegExp('[$c]'), '');\n    return [s1, isPalindrome(s1) ? 'yes' : 'no'];\n}\n",
            "List<String> oddCount(List<String> lst) {\n    var result = <String>[];\n    for (var num in lst) {\n        var n = num.split('').fold(0, (prev, curr) {\n            return prev + (curr.codeUnitAt(0) % 2 == 1 ? 1 : 0);\n        });\n        var rs = \"the number of odd elements in the string i of the input.\".replaceAll(\"i\", n.toString());\n        result.add(rs);\n    }\n    return result;\n}\n",
            "int minSubArraySum(List<int> nums) {\n    int minSum = 0;\n    int curSum = 0;\n    for (int n in nums) {\n        curSum = min(curSum + n, 0);\n        minSum = min(curSum, minSum);\n    }\n    if (minSum == 0) {\n        minSum = min(nums);\n    }\n    return minSum;\n}\n",
            "int maxFill(List<List<int>> grid, int capacity) {\n    int result = 0;\n    for (var arr in grid) {\n        int sumArr = arr.reduce((a, b) => a + b);\n        result += (sumArr / capacity).ceil();\n    }\n    return result;\n}\n",
            "int countOnes(int num) {\n    int count = 0;\n    while (num > 0) {\n        if (num & 1 == 1) {\n            count += 1;\n        }\n        num >>= 1;\n    }\n    return count;\n}\nList<int> sortArray(List<int> arr) {\n    var sortedArr = arr.sorted((x, y) => countOnes(x).compareTo(countOnes(y))).toList();\n    return sortedArr;\n}\n",
            "List<String> selectWords(String s, int n) {\n    var consonants = \"bcdfghjklmnpqrstvwxyz\";\n    var words = s.split(\" \");\n    var result = <String>[];\n    for (var w in words) {\n        var count = 0;\n        for (var c in w) {\n            if (consonants.contains(c.toLowerCase())) {\n                count += 1;\n            }\n        }\n        if (count == n) {\n            result.add(w);\n        }\n    }\n    return result;\n}\n",
            "String getClosestVowel(String word) {\n    var vowels = \"aeiouAEIOU\";\n    for (int i = word.length - 2; i > 0; i--) {\n        if (vowels.contains(word[i]) && !vowels.contains(word[i - 1]) && !vowels.contains(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "bool check(String s) {\n    int depth = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (s[i] == '(') {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\nString matchParens(List<String> lst) {\n    String s1 = lst[0] + lst[1];\n    String s2 = lst[1] + lst[0];\n    if (check(s1) || check(s2)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n",
            "List<int> maximum(List<int> arr, int k) {\n    if (k == 0) {\n        return [];\n    }\n    var result = <int>[];\n    for (int i = 0; i < arr.length; i++) {\n        result.add(arr[i]);\n    }\n    result.sort();\n    return result.sublist(result.length - k);\n}\n",
            "int solution(List<int> lst) {\n    int sumValue = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i.isEven && lst[i].isOdd) {\n            sumValue += lst[i];\n        }\n    }\n    return sumValue;\n}\n",
            "int addElements(List<int> arr, int k) {\n    int sumValue = 0;\n    for (int n in arr.sublist(0, k)) {\n        if (n.toString().length <= 2) {\n            sumValue += n;\n        }\n    }\n    return sumValue;\n}\n",
            "List<int> getOddCollatz(int n) {\n    var collatz = [1];\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.add(n);\n            n = 3 * n + 1;\n        } else {\n            n = n ~/ 2;\n        }\n    }\n    collatz.sort();\n    return collatz;\n}\n",
            "bool validDate(String date) {\n    if (date.length != 10 || date[2] != \"-\" || date[5] != \"-\") {\n        return false;\n    }\n    int m = int.parse(date.substring(0, 2));\n    int d = int.parse(date.substring(3, 5));\n    if (m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31) {\n        return true;\n    }\n    if (m in [4, 6, 9, 11] && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "List<String> splitWords(String txt) {\n    if (txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [txt.split(\"\").where((c) => c.isLowerCase && c.codeUnitAt(0) % 2 == 0).length.toString()];\n    }\n}\n",
            "bool isSorted(List<int> lst) {\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n    var freq = <int, int>{};\n    for (int i in lst) {\n        freq[i] = freq.containsKey(i) ? freq[i] + 1 : 1;\n    }\n    return freq.values.reduce(max) <= 2;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nString intersection(List<int> interval1, List<int> interval2) {\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    if (length > 0 && isPrime(length)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n",
            "int? prodSigns(List<int> arr) {\n    if (arr.isEmpty) {\n        return null;\n    }\n    if (arr.contains(0)) {\n        return 0;\n    }\n    int sign = -1;\n    if (arr.where((n) => n < 0).length.isOdd) {\n        sign = 1;\n    }\n    int result = 0;\n    for (int n in arr) {\n        result += n.abs();\n    }\n    return sign * result;\n}\n",
            "List<int> minPath(List<List<int>> grid, int k) {\n    int n = grid.length;\n    int minVal = n * n + 1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                List<int> temp = [];\n                if (i != 0) {\n                    temp.add(grid[i - 1][j]);\n                }\n                if (j != 0) {\n                    temp.add(grid[i][j - 1]);\n                }\n                if (i != n - 1) {\n                    temp.add(grid[i + 1][j]);\n                }\n                if (j != n - 1) {\n                    temp.add(grid[i][j + 1]);\n                }\n                minVal = min(temp);\n            }\n        }\n    }\n    List<int> result = [];\n    for (int i = 0; i < k; i++) {\n        result.add(1 if i % 2 == 0 else minVal);\n    }\n    return result;\n}\n",
            "List<int> tri(int n) {\n    if (n == 0) {\n        return [1];\n    }\n    var seq = [1, 3];\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq.add(i ~/ 2 + 1);\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) ~/ 2);\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    var odds = [int.parse(d) for (var d in n.toString().split('')) if int.parse(d) % 2 == 1];\n    var result = 1;\n    for (var d in odds) {\n        result *= d;\n    }\n    return result if odds.length > 0 else 0;\n}\n",
            "bool isNested(String s) {\n    var openIdx = <int>[];\n    var closeIdx = <int>[];\n    for (int i = 0; i < s.length; i++) {\n        if (s[i] == '[') {\n            openIdx.add(i);\n        } else if (s[i] == ']') {\n            closeIdx.add(i);\n        }\n    }\n    closeIdx.sort((a, b) => b.compareTo(a));\n    var cnt = 0;\n    var i = 0;\n    var l = closeIdx.length;\n    for (int idx in openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt++;\n            i++;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "int sumSquares(List<double> lst) {\n    int result = 0;\n    for (double n in lst) {\n        result += pow(ceilToDouble(n), 2).toInt();\n    }\n    return result;\n}\n",
            "bool checkIfLastCharIsALetter(String txt) {\n    if (txt.isEmpty) {\n        return false;\n    }\n    String last = txt.substring(txt.lastIndexOf(' ') + 1);\n    return last.length == 1 && last[0].isLetter;\n}\n",
            "int canArrange(List<int> arr) {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    List<int> idx = [];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            idx.add(i);\n        }\n    }\n    return idx.isEmpty ? -1 : idx.reduce(max);\n}\n",
            "List<int?> largestSmallestIntegers(List<int> lst) {\n    int? maxNeg = null;\n    int? minPos = null;\n    for (int i in lst) {\n        if (i < 0) {\n            if (maxNeg == null || i > maxNeg) {\n                maxNeg = i;\n            }\n        } else if (i > 0) {\n            if (minPos == null || i < minPos) {\n                minPos = i;\n            }\n        }\n    }\n    return [maxNeg, minPos];\n}\n",
            "double? compareOne(Object a, Object b) {\n    if (a is String) {\n        return double.parse(a.replaceAll(',', '.'));\n    } else if (a is int) {\n        return a.toDouble();\n    } else if (a is double) {\n        return a;\n    }\n    throw ArgumentError(\"Type Error\");\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        int fact = 1;\n        for (int j = 1; j <= i; j++) {\n            fact *= j;\n        }\n        result *= fact;\n    }\n    return result;\n}\n",
            "String fixSpaces(String txt) {\n    return txt.replaceAll(RegExp(r\"\\s{3,}\"), \"-\").replaceAll(\" \", \"_\");\n}\n",
            "String fileNameCheck(String fileName) {\n    List<String> suf = [\"txt\", \"exe\", \"dll\"];\n    List<String> lst = fileName.split(\".\");\n    if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].length == 0 || !lst[0][0].isLetter() || lst[0].length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "int sumSquares(List<int> lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            result += pow(lst[i], 2).toInt();\n        } else if (i % 4 == 0) {\n            result += pow(lst[i], 3).toInt();\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).floor(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nString wordsInSentence(String sentence) {\n    var words = sentence.split(\" \");\n    var result = <String>[];\n    for (var w in words) {\n        if (isPrime(w.length)) {\n            result.add(w);\n        }\n    }\n    return result.join(\" \");\n}\n",
            "bool simplify(String x, String n) {\n    var xs = x.split(\"/\");\n    var ns = n.split(\"/\");\n    var num = int.parse(xs[0]) * int.parse(ns[0]);\n    var den = int.parse(xs[1]) * int.parse(ns[1]);\n    return num % den == 0;\n}\n",
            "int digitsSum(int n) {\n    var nStr = n.toString();\n    if (n >= 0) {\n        var result = 0;\n        for (var d in nStr.split('')) {\n            result += int.parse(d);\n        }\n        return result;\n    } else {\n        return int.parse(nStr.substring(0, 2)) * 2 + digitsSum(n.abs());\n    }\n}\nList<int> orderByPoints(List<int> nums) {\n    var result = <int>[];\n    for (var num in nums) {\n        result.add(num);\n    }\n    result.sort((a, b) => digitsSum(a).compareTo(digitsSum(b)));\n    return result;\n}\n",
            "int specialFilter(List<int> nums) {\n    var odds = \"13579\";\n    var count = 0;\n    for (int n in nums) {\n        if (n > 10 && n % 2 == 1 && odds.contains(n.toString()[0])) {\n            count += 1;\n        }\n    }\n    return count;\n}\n",
            "int getMaxTriples(int n) {\n    var c = [0, 0, 0];\n    for (int i = 1; i <= n; i++) {\n        var a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) ~/ 6;\n}\n",
            "List<String> bf(String planet1, String planet2) {\n    var names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.contains(planet1) || !names.contains(planet2)) {\n        return [];\n    }\n    var l = names.indexOf(planet1);\n    var r = names.indexOf(planet2);\n    if (l > r) {\n        l = r;\n        r = l;\n    }\n    if (l == r) {\n        return [];\n    }\n    return names.sublist(l + 1, r);\n}\n",
            "List<String> sortedListSum(List<String> lst) {\n    var result = <String>[];\n    for (var s in lst) {\n        if (s.length % 2 == 0) {\n            result.add(s);\n        }\n    }\n    result.sort((a, b) => a.length.compareTo(b.length));\n    return result;\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= sqrt(n).floor() + 1; i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(List<double> lst) {\n    int result = 0;\n    for (double n in lst) {\n        if (n >= 0 && n.remainder(2) == 1) {\n            result += n * n;\n        }\n    }\n    return result;\n}\n",
            "List<int> compare(List<int> game, List<int> guess) {\n    var result = <int>[];\n    for (int i = 0; i < game.length; i++) {\n        result.add(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n",
            "String strongestExtension(String className, List<String> extensions) {\n    double maxS = -double.infinity;\n    String maxExt = \"\";\n    for (String ext in extensions) {\n        int upper = 0;\n        int lower = 0;\n        for (int i = 0; i < ext.length; i++) {\n            if (ext[i].toUpperCase() == ext[i]) {\n                upper += 1;\n            } else {\n                lower += 1;\n            }\n        }\n        double s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return \"${className}.${maxExt}\";\n}\n",
            "bool cycpatternCheck(String a, String b) {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (int i = 0; i < b.length; i++) {\n        if (b.substring(i) + b.substring(0, i) == a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "List<int> evenOddCount(int num) {\n    var ds = num.abs().toString().split('');\n    var even = 0;\n    for (var d in ds) {\n        if (int.parse(d) % 2 == 0) {\n            even++;\n        }\n    }\n    return [even, ds.length - even];\n}\n",
            "String intToMiniRoman(int num) {\n    var values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    var numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var res = [];\n    for (var i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.add(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join();\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    var s = [a, b, c].toList()..sort();\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}\n",
            "String findMax(List<String> words) {\n    int maxCnt = 0;\n    String maxW = \"\";\n    for (String w in words) {\n        int cnt = Set.of(w).length;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt == maxCnt) {\n            maxW = min(maxW, w);\n        }\n    }\n    return maxW;\n}\n",
            "List<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "int doAlgebra(List<String> operators, List<int> operands) {\n    var ops = operators.toList();\n    var nums = operands.toList();\n    var i = operators.length - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]).toInt();\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < operators.length) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] ~/ nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < operators.length) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "String solve(String s) {\n    var result = <String>[];\n    for (int i = 0; i < s.length; i++) {\n        if (!s[i].isAlphabetic) {\n            result.add(s[i]);\n        } else if (s[i].isUpperCase) {\n            result.add(s[i].toLowerCase());\n        } else if (s[i].isLowerCase) {\n            result.add(s[i].toUpperCase());\n        }\n    }\n    if (!result.any((ch) => ch.isAlphabetic)) {\n        return result.reversed.join();\n    }\n    return result.join();\n}\n",
            "String? stringToMd5(String txt) {\n    if (txt.isEmpty) {\n        return null;\n    }\n    var md5Hash = md5.convert(txt.codeUnits);\n    return md5Hash.toString();\n}\n",
            "List<int> generateIntegers(int a, int b) {\n    int lower = max(2, min(a, b));\n    int upper = min(8, max(a, b));\n    var result = <int>[];\n    for (int i = lower; i <= upper; i++) {\n        if (i % 2 == 0) {\n            result.add(i);\n        }\n    }\n    return result;\n}\n"
        ],
        "go": [
            "func HasCloseElements(numbers []float64, threshold float64) bool {\n    for i := range numbers {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(numbers[i]-numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func SeparateParenGroups(parenString string) []string {\n    groups := []string{}\n    stk := []string{}\n    currentGroup := \"\"\n    parens := strings.Replace(parenString, \" \", \"\", -1)\n    for _, ch := range parens {\n        if ch == '(' {\n            stk = append(stk, string(ch))\n            currentGroup += string(ch)\n        } else if ch == ')' {\n            stk = stk[:len(stk)-1]\n            currentGroup += string(ch)\n            if len(stk) == 0 {\n                groups = append(groups, currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "func TruncateNumber(num float64) float64 {\n    return num - math.Floor(num)\n}\n",
            "func BelowZero(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func MeanAbsoluteDeviation(numbers []float64) float64 {\n    mean := 0.0\n    for _, x := range numbers {\n        mean += x\n    }\n    mean /= float64(len(numbers))\n    deviation := 0.0\n    for _, x := range numbers {\n        deviation += math.Abs(x - mean)\n    }\n    return deviation / float64(len(numbers))\n}\n",
            "func Intersperse(numbers []int, delimiter int) []int {\n    result := make([]int, 0)\n    for i, num := range numbers {\n        if i != 0 {\n            result = append(result, delimiter)\n        }\n        result = append(result, num)\n    }\n    return result\n}\n",
            "func ParseNestedParens(parenString string) []int {\n    result := []int{}\n    parenGroups := strings.Split(parenString, \" \")\n    for _, group := range parenGroups {\n        maxDepth := 0\n        depth := 0\n        for _, ch := range group {\n            if ch == '(' {\n                depth++\n                maxDepth = max(maxDepth, depth)\n            } else if ch == ')' {\n                depth--\n            }\n        }\n        result = append(result, maxDepth)\n    }\n    return result\n}\n",
            "func FilterBySubstring(strs []string, substring string) []string {\n    result := []string{}\n    for _, s := range strs {\n        if strings.Contains(s, substring) {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
            "func SumProduct(numbers []int) []int {\n    nSum := 0\n    nProduct := 1\n    for _, n := range numbers {\n        nSum += n\n        nProduct *= n\n    }\n    return []int{nSum, nProduct}\n}\n",
            "func RollingMax(numbers []int) []int {\n    result := make([]int, len(numbers))\n    maxSoFar := math.Inf(-1)\n    for i, num := range numbers {\n        if num > maxSoFar {\n            maxSoFar = num\n        }\n        result[i] = int(maxSoFar)\n    }\n    return result\n}\n",
            "func IsPalindrome(s string) bool {\n    return s == Reverse(s)\n}\nfunc Reverse(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\nfunc MakePalindrome(s string) string {\n    if IsPalindrome(s) {\n        return s\n    }\n    for i := 0; i < len(s); i++ {\n        if IsPalindrome(s[i:]) {\n            return s + Reverse(s[:i])\n        }\n    }\n    return \"\"\n}\n",
            "func StringXor(a string, b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n    return result\n}\n",
            "func Longest(strs []string) *string {\n    if len(strs) == 0 {\n        return nil\n    }\n    longest := strs[0]\n    for _, s := range strs {\n        if len(s) > len(longest) {\n            longest = s\n        }\n    }\n    return &longest\n}\n",
            "func GreatestCommonDivisor(a int, b int) int {\n    for b != 0 {\n        a, b = b, a%b\n    }\n    return a\n}\n",
            "func AllPrefixes(s string) []string {\n    prefixes := make([]string, 0)\n    for i := 0; i < len(s); i++ {\n        prefixes = append(prefixes, s[:i+1])\n    }\n    return prefixes\n}\n",
            "func StringSequence(n int) string {\n    result := \"\"\n    for i := 0; i <= n; i++ {\n        result += strconv.Itoa(i) + \" \"\n    }\n    return result[:len(result)-1]\n}\n",
            "func CountDistinctCharacters(s string) int {\n    distinctCharacters := make(map[rune]bool)\n    for _, char := range s {\n        distinctCharacters[char] = true\n    }\n    return len(distinctCharacters)\n}\n",
            "func ParseMusic(musicString string) []int {\n    durations := map[string]int{\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes := strings.Split(musicString, \" \")\n    result := []int{}\n    for _, note := range notes {\n        result = append(result, durations[note])\n    }\n    return result\n}\n",
            "func HowManyTimes(s string, substring string) int {\n    times := 0\n    for i := 0; i < len(s) - len(substring) + 1; i++ {\n        if s[i:i+len(substring)] == substring {\n            times++\n        }\n    }\n    return times\n}\n",
            "func SortNumbers(numbers string) string {\n    numDict := map[string]int{\n        \"zero\":   0,\n        \"one\":    1,\n        \"two\":    2,\n        \"three\":  3,\n        \"four\":   4,\n        \"five\":   5,\n        \"six\":    6,\n        \"seven\":  7,\n        \"eight\":  8,\n        \"nine\":   9,\n    }\n    numList := []string{}\n    for _, x := range strings.Split(numbers, \" \") {\n        if numDict[x] != 0 {\n            numList = append(numList, x)\n        }\n    }\n    sort.Slice(numList, func(i, j int) bool { return numDict[numList[i]] < numDict[numList[j]] })\n    return strings.Join(numList, \" \")\n}\n",
            "func FindClosestElements(numbers []float64) []float64 {\n    sort.Float64s(numbers)\n    minDiff := math.MaxFloat64\n    closestPair := []float64{}\n    for i := 1; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[i-1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = []float64{numbers[i-1], numbers[i]}\n        }\n    }\n    return closestPair\n}\n",
            "func RescaleToUnit(numbers []float64) []float64 {\n    minNum := math.MaxFloat64\n    maxNum := math.SmallestNonzeroFloat64\n    for _, num := range numbers {\n        if num < minNum {\n            minNum = num\n        }\n        if num > maxNum {\n            maxNum = num\n        }\n    }\n    if minNum == maxNum {\n        return make([]float64, len(numbers))\n    } else {\n        result := make([]float64, len(numbers))\n        for i, num := range numbers {\n            result[i] = (num - minNum) / (maxNum - minNum)\n        }\n        return result\n    }\n}\n",
            "func FilterIntegers(values []interface{}) []int {\n    result := []int{}\n    for _, x := range values {\n        if i, ok := x.(int); ok {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n",
            "func StrLength(s string) int {\n    length := 0\n    for _, char := range s {\n        length += 1\n    }\n    return length\n}\n",
            "func LargestDivisor(n int) int {\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "func Factorize(n int) []int {\n    factors := []int{}\n    divisor := 2\n    for divisor <= n {\n        if n%divisor == 0 {\n            factors = append(factors, divisor)\n            n /= divisor\n        } else {\n            divisor++\n        }\n    }\n    return factors\n}\n",
            "func RemoveDuplicates(numbers []int) []int {\n    counts := make(map[int]int)\n    for _, num := range numbers {\n        if _, ok := counts[num]; !ok {\n            counts[num] = 1\n        } else {\n            counts[num] += 1\n        }\n    }\n    res := make([]int, 0)\n    for _, num := range numbers {\n        if counts[num] == 1 {\n            res = append(res, num)\n        }\n    }\n    return res\n}\n",
            "func FlipCase(s string) string {\n    flipped := []rune{}\n    for _, ch := range s {\n        if !unicode.IsLetter(ch) {\n            flipped = append(flipped, ch)\n        } else if unicode.IsLower(ch) {\n            flipped = append(flipped, unicode.ToUpper(ch))\n        } else if unicode.IsUpper(ch) {\n            flipped = append(flipped, unicode.ToLower(ch))\n        }\n    }\n    return string(flipped)\n}\n",
            "func Concatenate(strs []string) string {\n    result := \"\"\n    for _, s := range strs {\n        result += s\n    }\n    return result\n}\n",
            "func FilterByPrefix(strs []string, prefixStr string) []string {\n    result := []string{}\n    for _, s := range strs {\n        if strings.HasPrefix(s, prefixStr) {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
            "func GetPositive(l []int) []int {\n    result := []int{}\n    for _, num := range l {\n        if num > 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Poly(xs []int, x float64) float64 {\n    res := 0.0\n    for i := range xs {\n        res += float64(xs[i]) * math.Pow(x, float64(i))\n    }\n    return res\n}\nfunc FindZero(xs []int) float64 {\n    x1, x2 := 1.0, -1.0\n    for Poly(xs, x1)*Poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    for math.Abs(x1-x2) > 1e-10 {\n        mid := (x1 + x2) / 2\n        if Poly(xs, mid) == 0 {\n            return mid\n        } else if Poly(xs, mid)*Poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "func SortThird(l []int) []int {\n    sortedThird := make([]int, len(l)/3)\n    copy(sortedThird, l[0:len(l):3])\n    sort.Ints(sortedThird)\n    result := make([]int, len(l))\n    for i := range l {\n        if i%3 == 0 {\n            result[i] = sortedThird[i/3]\n        } else {\n            result[i] = l[i]\n        }\n    }\n    return result\n}\n",
            "func ListUnique(l []int) []int {\n    uniqueList := make([]int, 0)\n    for _, item := range l {\n        if !contains(uniqueList, item) {\n            uniqueList = append(uniqueList, item)\n        }\n    }\n    sort.Ints(uniqueList)\n    return uniqueList\n}\nfunc contains(l []int, e int) bool {\n    for _, item := range l {\n        if item == e {\n            return true\n        }\n    }\n    return false\n}\n",
            "func MaxElement(l []int) int {\n    maxValue := math.MinInt\n    for _, i := range l {\n        if i > maxValue {\n            maxValue = i\n        }\n    }\n    return maxValue\n}\n",
            "func FizzBuzz(n int) int {\n    cnt := 0\n    for i := 0; i < n; i++ {\n        if i%11 == 0 || i%13 == 0 {\n            cnt += strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n    return cnt\n}\n",
            "func SortEven(l []int) []int {\n    sortedEven := make([]int, len(l)/2)\n    copy(sortedEven, l[1:])\n    sort.Ints(sortedEven)\n    result := make([]int, len(l))\n    for i := range l {\n        if i%2 == 0 {\n            result[i] = sortedEven[i/2]\n        } else {\n            result[i] = l[i]\n        }\n    }\n    return result\n}\n",
            "func EncodeCyclic(s string) string {\n    result := []string{}\n    for i := 0; i < len(s); i += 3 {\n        if i+3 > len(s) {\n            result = append(result, s[i:])\n        } else {\n            result = append(result, s[i+1:i+3])\n            result = append(result, string(s[i]))\n        }\n    }\n    return strings.Join(result, \"\")\n}\nfunc DecodeCyclic(s string) string {\n    return EncodeCyclic(EncodeCyclic(s))\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc PrimeFib(n int) int {\n    f := []int{0, 1}\n    cnt := 0\n    for cnt < n {\n        f = append(f, f[len(f)-1]+f[len(f)-2])\n        if IsPrime(f[len(f)-1]) {\n            cnt++\n        }\n    }\n    return f[len(f)-1]\n}\n",
            "func TriplesSumToZero(l []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i]+l[j]+l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func CarRaceCollision(n int) int {\n    return n * n\n}\n",
            "func IncrList(l []int) []int {\n    result := make([]int, len(l))\n    for i, v := range l {\n        result[i] = v + 1\n    }\n    return result\n}\n",
            "func PairsSumToZero(l []int) bool {\n    seen := make(map[int]bool)\n    for _, num := range l {\n        if seen[-num] {\n            return true\n        }\n        seen[num] = true\n    }\n    return false\n}\n",
            "func ChangeBase(x int, bas int) string {\n    if x == 0 {\n        return \"0\"\n    }\n    result := \"\"\n    for x > 0 {\n        result = strconv.Itoa(x % bas) + result\n        x /= bas\n    }\n    return result\n}\n",
            "func TriangleArea(a int, h int) float64 {\n    return float64(a) * float64(h) / 2\n}\n",
            "func Fib4(n int) int {\n    fib := []int{0, 0, 2, 0}\n    for i := 4; i <= n; i++ {\n        fib[i%4] = fib[i-1] + fib[i-2]\n    }\n    return fib[n%4]\n}\n",
            "func Median(l []float64) float64 {\n    sort.Float64s(l)\n    if len(l)%2 != 0 {\n        return l[len(l)/2]\n    }\n    return (l[len(l)/2] + l[len(l)/2-1]) / 2\n}\n",
            "func IsPalindrome(txt string) bool {\n    for i := 0; i < len(txt)/2; i++ {\n        if txt[i] != txt[len(txt)-i-1] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Modp(n int, p int) int {\n    ret := 1\n    for i := 0; i < n; i++ {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func EncodeShift(s string) string {\n    result := []rune{}\n    for _, ch := range s {\n        result = append(result, rune(((int(ch) - 97 + 5) % 26) + 97))\n    }\n    return string(result)\n}\nfunc DecodeShift(s string) string {\n    result := []rune{}\n    for _, ch := range s {\n        result = append(result, rune(((int(ch) - 97 + 21) % 26) + 97))\n    }\n    return string(result)\n}\n",
            "func RemoveVowels(txt string) string {\n    vowels := \"aeiouAEIOU\"\n    result := \"\"\n    for _, char := range txt {\n        if strings.IndexRune(vowels, char) == -1 {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
            "func BelowThreshold(l []int, t int) bool {\n    for _, x := range l {\n        if x >= t {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Add(x int, y int) int {\n    return x + y\n}\n",
            "func SameChars(s0 string, s1 string) bool {\n    s0Set := make(map[rune]bool)\n    for _, c := range s0 {\n        s0Set[c] = true\n    }\n    s1Set := make(map[rune]bool)\n    for _, c := range s1 {\n        s1Set[c] = true\n    }\n    return len(s0Set) == len(s1Set) && len(s0Set) == len(s0Set.Intersection(s1Set))\n}\n",
            "func Fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return Fib(n-1) + Fib(n-2)\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '<' {\n            depth++\n        } else if b == '>' {\n            depth--\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Monotonic(l []int) bool {\n    diff := make([]int, len(l)-1)\n    for i := range diff {\n        diff[i] = l[i+1] - l[i]\n    }\n    return all(diff, func(x int) bool { return x <= 0 }) || all(diff, func(x int) bool { return x >= 0 })\n}\nfunc all(l []int, f func(int) bool) bool {\n    for _, x := range l {\n        if !f(x) {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Common(l1 []int, l2 []int) []int {\n    result := make([]int, 0)\n    for _, i := range l1 {\n        if contains(l2, i) {\n            result = append(result, i)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\nfunc contains(l []int, e int) bool {\n    for _, i := range l {\n        if i == e {\n            return true\n        }\n    }\n    return false\n}\n",
            "func LargestPrimeFactor(n int) int {\n    i := 2\n    for i*i <= n {\n        if n%i != 0 {\n            i++\n        } else {\n            n /= i\n        }\n    }\n    return n\n}\n",
            "func SumToN(n int) int {\n    result := 0\n    for i := 0; i <= n; i++ {\n        result += i\n    }\n    return result\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '(' {\n            depth++\n        } else if b == ')' {\n            depth--\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Derivative(xs []int) []int {\n    result := make([]int, 0)\n    for i := 1; i < len(xs); i++ {\n        result = append(result, xs[i]*i)\n    }\n    return result\n}\n",
            "func Fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    }\n    a, b, c := 0, 0, 1\n    for n > 2 {\n        a, b, c = b, c, a+b+c\n        n -= 1\n    }\n    return c\n}\n",
            "func VowelsCount(s string) int {\n    vowels := \"aeiou\"\n    cnt := 0\n    for i := 0; i < len(s); i++ {\n        if strings.Contains(vowels, strings.ToLower(string(s[i]))) || (i == len(s)-1 && strings.ToLower(string(s[i])) == \"y\") {\n            cnt++\n        }\n    }\n    return cnt\n}\n",
            "func CircularShift(x int, shift int) string {\n    xStr := strconv.Itoa(x)\n    if shift > len(xStr) {\n        return string([]rune(xStr)[::-1])\n    } else {\n        return string([]rune(xStr)[len(xStr)-shift:]) + string([]rune(xStr)[:len(xStr)-shift])\n    }\n}\n",
            "func DigitSum(s string) int {\n    sumValue := 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sumValue += int(c)\n        }\n    }\n    return sumValue\n}\n",
            "func FruitDistribution(s string, n int) int {\n    words := strings.Split(s, \" \")\n    apples, _ := strconv.Atoi(words[strings.Index(s, \"apples\")-1])\n    oranges, _ := strconv.Atoi(words[strings.Index(s, \"oranges\")-1])\n    return n - apples - oranges\n}\n",
            "func Pluck(arr []int) []int {\n    evens := make([]int, 0)\n    for _, n := range arr {\n        if n%2 == 0 {\n            evens = append(evens, n)\n        }\n    }\n    if len(evens) == 0 {\n        return []int{}\n    }\n    minEven := evens[0]\n    for _, n := range evens {\n        if n < minEven {\n            minEven = n\n        }\n    }\n    for i, n := range arr {\n        if n == minEven {\n            return []int{minEven, int(i)}\n        }\n    }\n    return []int{}\n}\n",
            "func Search(lst []int) int {\n    freqs := make(map[int]int)\n    for _, n := range lst {\n        if _, ok := freqs[n]; !ok {\n            freqs[n] = 0\n        }\n        freqs[n] += 1\n    }\n    goodVals := []int{}\n    for k, v := range freqs {\n        if v >= k {\n            goodVals = append(goodVals, k)\n        }\n    }\n    if len(goodVals) > 0 {\n        return max(goodVals)\n    } else {\n        return -1\n    }\n}\n",
            "func StrangeSortList(lst []int) []int {\n    sl := make([]int, len(lst))\n    copy(sl, lst)\n    sort.Ints(sl)\n    result := make([]int, 0)\n    left, right := 0, len(sl) - 1\n    for left <= right {\n        result = append(result, sl[left])\n        left++\n        if left <= right {\n            result = append(result, sl[right])\n            right--\n        }\n    }\n    return result\n}\n",
            "func TriangleArea(a int, b int, c int) float64 {\n    s := float64(a + b + c) / 2.0\n    if a+b > c && a+c > b && b+c > a {\n        return math.Sqrt(s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n    }\n    return -1.0\n}\n",
            "func WillItFly(q []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n    isPalin := true\n    for i := 0; i < len(q); i++ {\n        if q[i] != q[len(q)-i-1] {\n            isPalin = false\n        }\n    }\n    total := 0\n    for _, i := range q {\n        total += i\n    }\n    return isPalin && total <= w\n}\n",
            "func SmallestChange(arr []int) int {\n    ans := 0\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] != arr[len(arr) - i - 1] {\n            ans++\n        }\n    }\n    return ans\n}\n",
            "func TotalMatch(lst1 []string, lst2 []string) []string {\n    cnt1 := 0\n    for _, s := range lst1 {\n        cnt1 += len(s)\n    }\n    cnt2 := 0\n    for _, s := range lst2 {\n        cnt2 += len(s)\n    }\n    if cnt1 <= cnt2 {\n        return lst1\n    }\n    return lst2\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc IsMultiplyPrime(a int) bool {\n    cnt := 0\n    for i := 2; i*i <= a; i++ {\n        if IsPrime(i) {\n            for a%i == 0 {\n                cnt++\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "func IsSimplePower(x int, n int) bool {\n    if n < 2 {\n        return x == n\n    }\n    tmp := 1\n    for tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "func IsCube(a int) bool {\n    a = int(math.Abs(float64(a)))\n    root := int(math.Cbrt(float64(a)))\n    return root*root*root == a\n}\n",
            "func HexKey(num string) int {\n    count := 0\n    for _, x := range num {\n        if strings.ContainsRune(\"2357BD\", x) {\n            count++\n        }\n    }\n    return count\n}\n",
            "func DecimalToBinary(dec int) string {\n    binary := strconv.FormatInt(int64(dec), 2)\n    return \"db\" + binary + \"db\"\n}\n",
            "func IsHappy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func NumericalLetterGrade(grades []float64) []string {\n    result := make([]string, len(grades))\n    for i, g := range grades {\n        if g == 4.0 {\n            result[i] = \"A+\"\n        } else if g > 3.7 {\n            result[i] = \"A\"\n        } else if g > 3.3 {\n            result[i] = \"A-\"\n        } else if g > 3.0 {\n            result[i] = \"B+\"\n        } else if g > 2.7 {\n            result[i] = \"B\"\n        } else if g > 2.3 {\n            result[i] = \"B-\"\n        } else if g > 2.0 {\n            result[i] = \"C+\"\n        } else if g > 1.7 {\n            result[i] = \"C\"\n        } else if g > 1.3 {\n            result[i] = \"C-\"\n        } else if g > 1.0 {\n            result[i] = \"D+\"\n        } else if g > 0.7 {\n            result[i] = \"D\"\n        } else if g > 0.0 {\n            result[i] = \"D-\"\n        } else {\n            result[i] = \"E\"\n        }\n    }\n    return result\n}\n",
            "func PrimeLength(s string) bool {\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(length)))) + 1; i++ {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func StartsOneEnds(n int) int {\n    if n == 1 {\n        return 1\n    }\n    result := 2 * 9 * int(math.Pow10(n-2))\n    return result\n}\n",
            "func Solve(n int) string {\n    digitsSum := 0\n    for _, d := range strconv.Itoa(n) {\n        digitsSum += int(d - '0')\n    }\n    return strconv.FormatInt(int64(digitsSum), 2)\n}\n",
            "func Add(lst []int) int {\n    result := 0\n    for i, x := range lst {\n        if i%2 == 1 && x%2 == 0 {\n            result += x\n        }\n    }\n    return result\n}\n",
            "func AntiShuffle(s string) string {\n    words := strings.Split(s, \" \")\n    for i := range words {\n        words[i] = strings.Join(sort.StringSlice(words[i]), \"\")\n    }\n    return strings.Join(words, \" \")\n}\n",
            "func GetRow(lst [][]int, x int) [][]int {\n    coords := make([][]int, 0)\n    for i := range lst {\n        for j := range lst[i] {\n            if lst[i][j] == x {\n                coords = append(coords, []int{i, j})\n            }\n        }\n    }\n    sort.Slice(coords, func(i, j int) bool {\n        return coords[i][0] < coords[j][0] || (coords[i][0] == coords[j][0] && coords[i][1] > coords[j][1])\n    })\n    return coords\n}\n",
            "func SortArray(arr []int) []int {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    if (arr[0] + arr[len(arr)-1]) % 2 == 0 {\n        sort.Slice(arr, func(i, j int) bool { return arr[i] > arr[j] })\n    } else {\n        sort.Ints(arr)\n    }\n    return arr\n}\n",
            "func Encrypt(s string) string {\n    result := []rune{}\n    for _, ch := range s {\n        shifted := ch + 4\n        if shifted > 'z' {\n            shifted -= 26\n        }\n        result = append(result, shifted)\n    }\n    return string(result)\n}\n",
            "func NextSmallest(lst []int) *int {\n    uniqueList := make(map[int]bool)\n    for _, v := range lst {\n        uniqueList[v] = true\n    }\n    sortedList := make([]int, 0)\n    for k := range uniqueList {\n        sortedList = append(sortedList, k)\n    }\n    sort.Ints(sortedList)\n    if len(sortedList) < 2 {\n        return nil\n    }\n    return &sortedList[1]\n}\n",
            "func IsBored(s string) int {\n    sentences := regexp.MustCompile(`[.!?]\\s*`).Split(s, -1)\n    count := 0\n    for _, sentence := range sentences {\n        if len(sentence) >= 2 && sentence[:2] == \"I \" {\n            count += 1\n        }\n    }\n    return count\n}\n",
            "func AnyInt(x interface{}, y interface{}, z interface{}) bool {\n    if x, ok := x.(int); ok && y, ok := y.(int); ok && z, ok := z.(int); ok {\n        return x+y == z || x+z == y || y+z == x\n    }\n    return false\n}\n",
            "func Encode(message string) string {\n    vowels := \"aeiouAEIOU\"\n    result := []rune{}\n    for _, ch := range message {\n        if unicode.IsLetter(ch) {\n            ch1 := unicode.ToLower(ch)\n            if strings.ContainsRune(vowels, ch1) {\n                ch1 = ch1 + 2\n            }\n            result = append(result, ch1)\n        } else {\n            result = append(result, ch)\n        }\n    }\n    return string(result)\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc Skjkasdkd(lst []int) int {\n    primes := []int{}\n    for _, n := range lst {\n        if IsPrime(n) {\n            primes = append(primes, n)\n        }\n    }\n    if len(primes) == 0 {\n        return 0\n    }\n    largest := strconv.Itoa(max(primes))\n    sum := 0\n    for _, digit := range largest {\n        sum += int(digit - '0')\n    }\n    return sum\n}\n",
            "func CheckDictCase(d map[string]string) bool {\n    if len(d) == 0 {\n        return false\n    }\n    lowerCaseKeys, upperCaseKeys := true, true\n    for key := range d {\n        if !strings.ToLower(key) == key {\n            lowerCaseKeys = false\n        }\n        if !strings.ToUpper(key) == key {\n            upperCaseKeys = false\n        }\n    }\n    return lowerCaseKeys || upperCaseKeys\n}\n",
            "func CountUpTo(n int) []int {\n    primes := []int{}\n    for num := 2; num <= n; num++ {\n        isPrime := true\n        for _, p := range primes {\n            if num%p == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes = append(primes, num)\n        }\n    }\n    return primes\n}\n",
            "func Multiply(a int, b int) int {\n    result := 0\n    for i := 0; i < abs(a)%10; i++ {\n        result += abs(b) % 10\n    }\n    return result\n}\n",
            "func CountUpper(s string) int {\n    vowels := \"AEIOU\"\n    count := 0\n    for i, c := range s {\n        if i%2 == 0 && strings.ContainsRune(vowels, c) {\n            count++\n        }\n    }\n    return count\n}\n",
            "func ClosestInteger(value string) int {\n    num, _ := strconv.ParseFloat(value, 64)\n    if num >= 0 {\n        return int(num + 0.5)\n    }\n    return int(num - 0.5)\n}\n",
            "func MakeAPile(n int) []int {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i] = n + 2*i\n    }\n    return result\n}\n",
            "func WordsString(s string) []string {\n    result := []string{}\n    for _, w := range strings.Split(s, \", \") {\n        if len(w) > 0 {\n            result = append(result, w)\n        }\n    }\n    return result\n}\n",
            "func ChooseNum(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if y%2 == 0 {\n        return y\n    }\n    if x != y {\n        return y - 1\n    }\n    return -1\n}\n",
            "func RoundedAvg(n int, m int) *string {\n    if n > m {\n        return nil\n    }\n    rAvg := int((m + n) / 2)\n    result := strconv.FormatInt(int64(rAvg), 2)\n    return &result\n}\n",
            "func AllDigitsOdd(s string) bool {\n    for _, digit := range s {\n        if digit%2 == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc UniqueDigits(x []int) []int {\n    result := []int{}\n    for _, num := range x {\n        if AllDigitsOdd(strconv.Itoa(num)) {\n            result = append(result, num)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n",
            "func ByLength(arr []int) []string {\n    digitNames := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    sortedArr := make([]int, 0)\n    for _, x := range arr {\n        if x >= 1 && x <= 9 {\n            sortedArr = append(sortedArr, x)\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(sortedArr)))\n    result := make([]string, 0)\n    for _, x := range sortedArr {\n        result = append(result, digitNames[x-1])\n    }\n    return result\n}\n",
            "func F(n int) []int {\n    nums := make([]int, n)\n    for i := 0; i < n; i++ {\n        nums[i] = i + 1\n    }\n    result := make([]int, 0)\n    for i, num := range nums {\n        if num%2 != 0 {\n            result = append(result, sum(nums[:i+1]...))\n        } else {\n            result = append(result, reduce(func(x, y int) int { return x * y }, nums[:i+1]...))\n        }\n    }\n    return result\n}\n",
            "func IsPalindrome(txt string) bool {\n    return txt == Reverse(txt)\n}\nfunc EvenOddPalindrome(n int) []int {\n    cnt := make([]int, 2)\n    for i := 1; i <= n; i++ {\n        if IsPalindrome(strconv.Itoa(i)) {\n            cnt[i%2]++\n        }\n    }\n    return cnt\n}\n",
            "func DigitsSum(n int) int {\n    nStr := strconv.Itoa(n)\n    if n >= 0 {\n        sumValue := 0\n        for _, d := range nStr {\n            sumValue += int(d - '0')\n        }\n        return sumValue\n    } else {\n        return int(nStr[:2]) * 2 + DigitsSum(abs(n))\n    }\n}\nfunc CountNums(arr []int) int {\n    countValue := 0\n    for _, n := range arr {\n        if DigitsSum(n) > 0 {\n            countValue += 1\n        }\n    }\n    return countValue\n}\n",
            "func MoveOneBall(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    sortedArr := make([]int, len(arr))\n    copy(sortedArr, arr)\n    sort.Ints(sortedArr)\n    for i := 0; i < len(arr); i++ {\n        if arr[i:] == sortedArr[:len(arr)-i] && arr[:i] == sortedArr[len(arr)-i:] {\n            return true\n        }\n    }\n    return false\n}\n",
            "func CanExchange(lst1 []int, lst2 []int) string {\n    oddCnt, evenCnt := 0, 0\n    for _, num := range lst1 {\n        if num%2 != 0 {\n            oddCnt++\n        }\n    }\n    for _, num := range lst2 {\n        if num%2 == 0 {\n            evenCnt++\n        }\n    }\n    if evenCnt >= oddCnt {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
            "func Histogram(test string) map[string]int {\n    freq := make(map[string]int)\n    words := strings.Fields(test)\n    for _, w := range words {\n        freq[w]++\n    }\n    result := make(map[string]int)\n    if len(freq) > 0 {\n        maxFreq := 0\n        for _, v := range freq {\n            if v > maxFreq {\n                maxFreq = v\n            }\n        }\n        for k, v := range freq {\n            if v == maxFreq {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "func IsPalindrome(s string) bool {\n    for i := 0; i < len(s)/2; i++ {\n        if s[i] != s[len(s)-1-i] {\n            return false\n        }\n    }\n    return true\n}\nfunc ReverseDelete(s string, c string) []string {\n    s1 := strings.Join([]string{}, func(i int, ch string) string {\n        if strings.ContainsRune(c, rune(ch)) {\n            return \"\"\n        }\n        return string(ch)\n    })\n    return []string{s1, \"yes\" if IsPalindrome(s1) else \"no\"}\n}\n",
            "func OddCount(lst []string) []string {\n    result := make([]string, 0)\n    for _, num := range lst {\n        n := 0\n        for _, d := range num {\n            if d%2 == 1 {\n                n++\n            }\n        }\n        rs := \"the number of odd elements in the string i of the input.\"\n        result = append(result, strings.Replace(rs, \"i\", strconv.Itoa(n), 1))\n    }\n    return result\n}\n",
            "func MinSubArraySum(nums []int) int {\n    minSum := 0\n    curSum := 0\n    for _, n := range nums {\n        if curSum > 0 {\n            curSum += n\n        } else {\n            curSum = n\n        }\n        if curSum < minSum {\n            minSum = curSum\n        }\n    }\n    if minSum == 0 {\n        minSum = min(nums)\n    }\n    return minSum\n}\n",
            "func MaxFill(grid [][]int, capacity int) int {\n    result := 0\n    for _, arr := range grid {\n        sumArr := 0\n        for _, v := range arr {\n            sumArr += v\n        }\n        result += int(math.Ceil(float64(sumArr) / float64(capacity)))\n    }\n    return result\n}\n",
            "func CountOnes(num int) int {\n    count := 0\n    for num > 0 {\n        if num&1 == 1 {\n            count++\n        }\n        num >>= 1\n    }\n    return count\n}\nfunc SortArray(arr []int) []int {\n    sortedArr := make([]int, len(arr))\n    copy(sortedArr, arr)\n    sort.Slice(sortedArr, func(i, j int) bool {\n        return CountOnes(sortedArr[i]) < CountOnes(sortedArr[j]) || (CountOnes(sortedArr[i]) == CountOnes(sortedArr[j]) && sortedArr[i] < sortedArr[j])\n    })\n    return sortedArr\n}\n",
            "func SelectWords(s string, n int) []string {\n    consonants := \"bcdfghjklmnpqrstvwxyz\"\n    words := strings.Split(s, \" \")\n    result := []string{}\n    for _, w := range words {\n        count := 0\n        for _, c := range w {\n            if strings.Contains(consonants, strings.ToLower(string(c))) {\n                count++\n            }\n        }\n        if count == n {\n            result = append(result, w)\n        }\n    }\n    return result\n}\n",
            "func GetClosestVowel(word string) string {\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 2; i > 0; i-- {\n        if strings.ContainsRune(vowels, rune(word[i])) && !strings.ContainsRune(vowels, rune(word[i-1])) && !strings.ContainsRune(vowels, rune(word[i+1])) {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
            "func Check(s string) bool {\n    depth := 0\n    for _, ch := range s {\n        if ch == '(' {\n            depth++\n        } else {\n            depth--\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\nfunc MatchParens(lst []string) string {\n    s1 := lst[0] + lst[1]\n    s2 := lst[1] + lst[0]\n    if Check(s1) || Check(s2) {\n        return \"Yes\"\n    }\n    return \"No\"\n}\n",
            "func Maximum(arr []int, k int) []int {\n    if k == 0 {\n        return []int{}\n    }\n    result := make([]int, len(arr))\n    copy(result, arr)\n    sort.Ints(result)\n    return result[len(result)-k:]\n}\n",
            "func Solution(lst []int) int {\n    sumValue := 0\n    for i, x := range lst {\n        if i%2 == 0 && x%2 != 0 {\n            sumValue += x\n        }\n    }\n    return sumValue\n}\n",
            "func AddElements(arr []int, k int) int {\n    sumValue := 0\n    for _, n := range arr[:k] {\n        if len(strconv.Itoa(n)) <= 2 {\n            sumValue += n\n        }\n    }\n    return sumValue\n}\n",
            "func GetOddCollatz(n int) []int {\n    collatz := []int{1}\n    for n != 1 {\n        if n%2 != 0 {\n            collatz = append(collatz, n)\n            n = 3 * n + 1\n        } else {\n            n /= 2\n        }\n    }\n    sort.Ints(collatz)\n    return collatz\n}\n",
            "func ValidDate(date string) bool {\n    if len(date) != 10 || date[2] != '-' || date[5] != '-' {\n        return false\n    }\n    m, _ := strconv.Atoi(date[:2])\n    d, _ := strconv.Atoi(date[3:5])\n    if m >= 1 && m <= 12 && d >= 1 && d <= 31 {\n        return true\n    }\n    return false\n}\n",
            "func SplitWords(txt string) []string {\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        result := []string{}\n        for _, c := range txt {\n            if unicode.IsLower(c) && c%2 == 0 {\n                result = append(result, strconv.Itoa(int(c)))\n            }\n        }\n        return result\n    }\n}\n",
            "func IsSorted(lst []int) bool {\n    for i := 1; i < len(lst); i++ {\n        if lst[i-1] > lst[i] {\n            return false\n        }\n    }\n    freq := make(map[int]int)\n    for _, i := range lst {\n        freq[i]++\n    }\n    maxFreq := 0\n    for _, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    return maxFreq <= 2\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc Intersection(interval1 []int, interval2 []int) string {\n    l := max(interval1[0], interval2[0])\n    r := min(interval1[1], interval2[1])\n    length := r - l\n    if length > 0 && IsPrime(length) {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
            "func ProdSigns(arr []int) *int {\n    if len(arr) == 0 {\n        return nil\n    }\n    if 0 in arr {\n        return 0\n    }\n    sign := -1\n    if len([n for n in arr if n < 0]) % 2 == 1 {\n        sign = 1\n    }\n    result := 0\n    for _, n := range arr {\n        result += int(math.Abs(float64(n)))\n    }\n    return &result\n}\n",
            "func MinPath(grid [][]int, k int) []int {\n    n := len(grid)\n    minVal := n * n + 1\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if grid[i][j] == 1 {\n                temp := []int{}\n                if i != 0 {\n                    temp = append(temp, grid[i-1][j])\n                }\n                if j != 0 {\n                    temp = append(temp, grid[i][j-1])\n                }\n                if i != n-1 {\n                    temp = append(temp, grid[i+1][j])\n                }\n                if j != n-1 {\n                    temp = append(temp, grid[i][j+1])\n                }\n                minVal = min(temp)\n            }\n        }\n    }\n    result := make([]int, 0)\n    for i := 0; i < k; i++ {\n        result = append(result, 1 if i % 2 == 0 else minVal)\n    }\n    return result\n}\n",
            "func Tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n    }\n    seq := []int{1, 3}\n    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            seq = append(seq, i/2+1)\n        } else {\n            seq = append(seq, seq[i-1]+seq[i-2]+(i+3)/2)\n        }\n    }\n    return seq\n}\n",
            "func Digits(n int) int {\n    odds := []int{}\n    for _, d := range strconv.Itoa(n) {\n        if int(d) % 2 == 1 {\n            odds = append(odds, int(d))\n        }\n    }\n    result := 1\n    for _, d := range odds {\n        result *= d\n    }\n    if len(odds) > 0 {\n        return result\n    }\n    return 0\n}\n",
            "func IsNested(s string) bool {\n    openIdx := []int{}\n    closeIdx := []int{}\n    for i, ch := range s {\n        if ch == '[' {\n            openIdx = append(openIdx, i)\n        } else if ch == ']' {\n            closeIdx = append(closeIdx, i)\n        }\n    }\n    reverse(closeIdx)\n    cnt := 0\n    i := 0\n    l := len(closeIdx)\n    for _, idx := range openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\nfunc reverse(s []int) {\n    for i, j := 0, len(s)-1; i < j; i, j = i+1, j-1 {\n        s[i], s[j] = s[j], s[i]\n    }\n}\n",
            "func SumSquares(lst []float64) int {\n    result := 0\n    for _, n := range lst {\n        result += int(math.Pow(math.Ceil(n), 2))\n    }\n    return result\n}\n",
            "func CheckIfLastCharIsALetter(txt string) bool {\n    if len(txt) == 0 {\n        return false\n    }\n    last := txt[strings.LastIndex(txt, \" \") + 1:]\n    return len(last) == 1 && last[0] >= 'a' && last[0] <= 'z' || last[0] >= 'A' && last[0] <= 'Z'\n}\n",
            "func CanArrange(arr []int) int {\n    if len(arr) <= 1 {\n        return -1\n    }\n    idx := make([]int, 0)\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i-1] {\n            idx = append(idx, i)\n        }\n    }\n    if len(idx) == 0 {\n        return -1\n    }\n    return idx[len(idx)-1]\n}\n",
            "func LargestSmallestIntegers(lst []int) []*int {\n    maxNeg := -1\n    minPos := -1\n    for _, i := range lst {\n        if i < 0 {\n            if maxNeg == -1 || i > maxNeg {\n                maxNeg = i\n            }\n        } else if i > 0 {\n            if minPos == -1 || i < minPos {\n                minPos = i\n            }\n        }\n    }\n    return []*int{&maxNeg, &minPos}\n}\n",
            "func AnyToReal(o interface{}) float64 {\n    switch o.(type) {\n    case string:\n        f, _ := strconv.ParseFloat(o.(string), 64)\n        return f\n    case int:\n        return float64(o.(int))\n    case float64:\n        return o.(float64)\n    default:\n        panic(\"Type Error\")\n    }\n}\nfunc CompareOne(a interface{}, b interface{}) *float64 {\n    a1 := AnyToReal(a)\n    b1 := AnyToReal(b)\n    if a1 == b1 {\n        return nil\n    } else if a1 > b1 {\n        return &a1\n    } else {\n        return &b1\n    }\n}\n",
            "func IsEqualToSumEven(n int) bool {\n    return n%2 == 0 && n >= 8\n}\n",
            "func SpecialFactorial(n int) int {\n    result := 1\n    for i := 1; i <= n; i++ {\n        fact := 1\n        for j := 1; j <= i; j++ {\n            fact *= j\n        }\n        result *= fact\n    }\n    return result\n}\n",
            "func FixSpaces(txt string) string {\n    return regexp.MustCompile(`\\s{3,}`).ReplaceAllString(txt, \"-\")\n}\n",
            "func FileNameCheck(fileName string) string {\n    suf := []string{\"txt\", \"exe\", \"dll\"}\n    lst := strings.Split(fileName, \".\")\n    if len(lst) != 2 || !contains(suf, lst[1]) || len(lst[0]) == 0 || !unicode.IsLetter(rune(lst[0][0])) || len(regexp.MustCompile(`\\d`).FindAllString(lst[0], -1)) > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "func SumSquares(lst []int) int {\n    result := 0\n    for i, v := range lst {\n        if i%3 == 0 {\n            result += v * v\n        } else if i%4 == 0 {\n            result += v * v * v\n        } else {\n            result += v\n        }\n    }\n    return result\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc WordsInSentence(sentence string) string {\n    words := strings.Split(sentence, \" \")\n    result := []string{}\n    for _, w := range words {\n        if IsPrime(len(w)) {\n            result = append(result, w)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n",
            "func Simplify(x string, n string) bool {\n    xs := strings.Split(x, \"/\")\n    ns := strings.Split(n, \"/\")\n    num, _ := strconv.Atoi(xs[0])\n    den, _ := strconv.Atoi(xs[1])\n    num *= den\n    den *= ns[1]\n    return num%den == 0\n}\n",
            "func DigitsSum(n int) int {\n    nStr := strconv.Itoa(n)\n    if n >= 0 {\n        result := 0\n        for _, d := range nStr {\n            result += int(d - '0')\n        }\n        return result\n    } else {\n        return int(nStr[:2]) * 2 + DigitsSum(abs(n))\n    }\n}\nfunc OrderByPoints(nums []int) []int {\n    result := make([]int, len(nums))\n    copy(result, nums)\n    sort.Slice(result, func(i, j int) bool {\n        return DigitsSum(result[i]) < DigitsSum(result[j])\n    })\n    return result\n}\n",
            "func SpecialFilter(nums []int) int {\n    odds := \"13579\"\n    count := 0\n    for _, n := range nums {\n        if n > 10 && n%2 == 1 && strings.ContainsRune(odds, rune(n)) {\n            count++\n        }\n    }\n    return count\n}\n",
            "func GetMaxTriples(n int) int {\n    c := [3]int{0, 0, 0}\n    for i := 1; i <= n; i++ {\n        a := i*i - i + 1\n        c[a%3]++\n    }\n    return c[0]*c[1]*c[2] + (c[0]*(c[0]-1)*(c[0]-2) + c[1]*(c[1]-1)*(c[1]-2) + c[2]*(c[2]-1)*(c[2]-2)) / 6\n}\n",
            "func Bf(planet1 string, planet2 string) []string {\n    names := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    if !contains(names, planet1) || !contains(names, planet2) {\n        return []string{}\n    }\n    l := index(names, planet1)\n    r := index(names, planet2)\n    if l > r {\n        l, r = r, l\n    }\n    if l == r {\n        return []string{}\n    }\n    return names[l+1 : r]\n}\nfunc contains(s []string, e string) bool {\n    for _, a := range s {\n        if a == e {\n            return true\n        }\n    }\n    return false\n}\nfunc index(s []string, e string) int {\n    for i, a := range s {\n        if a == e {\n            return i\n        }\n    }\n    return -1\n}\n",
            "func SortedListSum(lst []string) []string {\n    result := make([]string, 0)\n    for _, s := range lst {\n        if len(s)%2 == 0 {\n            result = append(result, s)\n        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        return len(result[i]) < len(result[j]) || (len(result[i]) == len(result[j]) && result[i] < result[j])\n    })\n    return result\n}\n",
            "func XOrY(n int, x int, y int) int {\n    if n < 2 {\n        return y\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n)))) + 1; i++ {\n        if n%i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func DoubleTheDifference(lst []float64) int {\n    result := 0\n    for _, n := range lst {\n        if n >= 0 && math.Mod(n, 2) == 1 {\n            result += int(n * n)\n        }\n    }\n    return result\n}\n",
            "func Compare(game []int, guess []int) []int {\n    result := make([]int, len(game))\n    for i, x := range game {\n        result[i] = int(math.Abs(float64(x - guess[i])))\n    }\n    return result\n}\n",
            "func StrongestExtension(className string, extensions []string) string {\n    maxS := float64(-math.MaxFloat64)\n    maxExt := \"\"\n    for _, ext := range extensions {\n        upper := 0\n        lower := 0\n        for _, c := range ext {\n            if unicode.IsUpper(c) {\n                upper++\n            } else if unicode.IsLower(c) {\n                lower++\n            }\n        }\n        s := float64(upper) - float64(lower)\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", className, maxExt)\n}\n",
            "func CycpatternCheck(a string, b string) bool {\n    if len(a) < len(b) {\n        return false\n    }\n    for i := 0; i < len(b); i++ {\n        if strings.Contains(a, b[i:]+b[:i]) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func EvenOddCount(num int) []int {\n    ds := strconv.Itoa(abs(num))\n    even := 0\n    for _, d := range ds {\n        if d%2 == 0 {\n            even++\n        }\n    }\n    return []int{even, len(ds) - even}\n}\n",
            "func IntToMiniRoman(num int) string {\n    values := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    numerals := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    res := []string{}\n    for i := 0; i < len(values); i++ {\n        for num >= values[i] {\n            res = append(res, numerals[i])\n            num -= values[i]\n        }\n    }\n    return strings.Join(res, \"\")\n}\n",
            "func RightAngleTriangle(a int, b int, c int) bool {\n    s := []int{a, b, c}\n    sort.Ints(s)\n    return s[0]*s[0]+s[1]*s[1] == s[2]*s[2]\n}\n",
            "func FindMax(words []string) string {\n    maxCnt := 0\n    maxW := \"\"\n    for _, w := range words {\n        cnt := len(strings.Split(w, \"\"))\n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        } else if cnt == maxCnt {\n            if w < maxW {\n                maxW = w\n            }\n        }\n    }\n    return maxW\n}\n",
            "func Eat(num int, need int, remaining int) []int {\n    if need <= remaining {\n        return []int{num + need, remaining - need}\n    }\n    return []int{num + remaining, 0}\n}\n",
            "func DoAlgebra(operators []string, operands []int) int {\n    ops := make([]string, len(operators))\n    copy(ops, operators)\n    nums := make([]int, len(operands))\n    copy(nums, operands)\n    i := len(ops) - 1\n    for i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = int(math.Pow(float64(nums[i]), float64(nums[i+1])))\n            nums = nums[:i+1]\n            ops = ops[:i]\n        }\n        i--\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"*\" {\n            nums[i] *= nums[i+1]\n            nums = nums[:i+1]\n            ops = ops[:i]\n            i--\n        } else if ops[i] == \"//\" {\n            nums[i] /= nums[i+1]\n            nums = nums[:i+1]\n            ops = ops[:i]\n            i--\n        }\n        i++\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"+\" {\n            nums[i] += nums[i+1]\n            nums = nums[:i+1]\n            ops = ops[:i]\n            i--\n        } else if ops[i] == \"-\" {\n            nums[i] -= nums[i+1]\n            nums = nums[:i+1]\n            ops = ops[:i]\n            i--\n        }\n        i++\n    }\n    return nums[0]\n}\n",
            "func Solve(s string) string {\n    result := []rune{}\n    for _, ch := range s {\n        if !unicode.IsLetter(ch) {\n            result = append(result, ch)\n        } else if unicode.IsUpper(ch) {\n            result = append(result, unicode.ToLower(ch))\n        } else if unicode.IsLower(ch) {\n            result = append(result, unicode.ToUpper(ch))\n        }\n    }\n    if !any(unicode.IsLetter(ch) for ch in result) {\n        return string(result[::-1])\n    }\n    return string(result)\n}\n",
            "func StringToMd5(txt string) *string {\n    if txt == \"\" {\n        return nil\n    }\n    md5Hash := md5.New()\n    txtBytes := []byte(txt)\n    md5Hash.Write(txtBytes)\n    md5Encoded := hex.EncodeToString(md5Hash.Sum(nil))\n    return &md5Encoded\n}\n",
            "func GenerateIntegers(a int, b int) []int {\n    lower := int(math.Max(2, math.Min(float64(a), float64(b))))\n    upper := int(math.Min(8, math.Max(float64(a), float64(b))))\n    result := []int{}\n    for i := lower; i <= upper; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n"
        ],
        "java": [
            "class Global {\n    public static boolean hasCloseElements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<String> separateParenGroups(String parenString) {\n        var groups = new ArrayList<String>();\n        var stk = new Stack<Character>();\n        var currentGroup = \"\";\n        var parens = parenString.replace(\" \", \"\");\n        for (char ch : parens.toCharArray()) {\n            if (ch == '(') {\n                stk.push(ch);\n                currentGroup += ch;\n            } else if (ch == ')') {\n                stk.pop();\n                currentGroup += ch;\n                if (stk.isEmpty()) {\n                    groups.add(currentGroup);\n                    currentGroup = \"\";\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double truncateNumber(double num) {\n        return num - Math.floor(num);\n    }\n}\n",
            "class Global {\n    public static boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (double x : numbers) {\n            mean += x;\n        }\n        mean /= numbers.size();\n        double deviation = 0.0;\n        for (double x : numbers) {\n            deviation += Math.abs(x - mean);\n        }\n        return deviation / numbers.size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i != 0) {\n                result.add(delimiter);\n            }\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseNestedParens(String parenString) {\n        var result = new ArrayList<Integer>();\n        var parenGroups = parenString.split(\" \");\n        for (String group : parenGroups) {\n            int maxDepth = 0;\n            int depth = 0;\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    depth += 1;\n                    maxDepth = Math.max(maxDepth, depth);\n                } else if (ch == ')') {\n                    depth -= 1;\n                }\n            }\n            result.add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> filterBySubstring(List<String> strs, String substring) {\n        var result = new ArrayList<String>();\n        for (String s : strs) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sumProduct(List<Integer> numbers) {\n        int nSum = 0;\n        int nProduct = 1;\n        for (int n : numbers) {\n            nSum += n;\n            nProduct *= n;\n        }\n        return Arrays.asList(nSum, nProduct);\n    }\n}\n",
            "class Global {\n    public static List<Integer> rollingMax(List<Integer> numbers) {\n        var result = new ArrayList<Integer>();\n        int maxSoFar = Integer.MIN_VALUE;\n        for (int num : numbers) {\n            if (num > maxSoFar) {\n                maxSoFar = num;\n            }\n            result.add(maxSoFar);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isPalindrome(String s) {\n        return s.equals(new StringBuilder(s).reverse().toString());\n    }\n    public static String makePalindrome(String s) {\n        if (isPalindrome(s)) {\n            return s;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (isPalindrome(s.substring(i))) {\n                return s + new StringBuilder(s.substring(0, i)).reverse().toString();\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static String stringXor(String a, String b) {\n        String result = \"\";\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result += \"0\";\n            } else {\n                result += \"1\";\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static Optional<String> longest(List<String> strs) {\n        if (strs.isEmpty()) {\n            return Optional.empty();\n        }\n        String longestS = strs.get(0);\n        for (String s : strs) {\n            if (s.length() > longestS.length()) {\n                longestS = s;\n            }\n        }\n        return Optional.of(longestS);\n    }\n}\n",
            "class Global {\n    public static int greatestCommonDivisor(int a, int b) {\n        while (b != 0) {\n            int temp = a;\n            a = b;\n            b = temp % b;\n        }\n        return a;\n    }\n}\n",
            "class Global {\n    public static List<String> allPrefixes(String s) {\n        var prefixes = new ArrayList<String>();\n        for (int i = 0; i < s.length(); i++) {\n            prefixes.add(s.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n            result += String.valueOf(i) + \" \";\n        }\n        return result.substring(0, result.length() - 1);\n    }\n}\n",
            "class Global {\n    public static int countDistinctCharacters(String s) {\n        Set<Character> distinctCharacters = new HashSet<>();\n        for (char charInS : s.toLowerCase().toCharArray()) {\n            distinctCharacters.add(charInS);\n        }\n        return distinctCharacters.size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseMusic(String musicString) {\n        Map<String, Integer> durations = new HashMap<String, Integer>() {{\n            put(\"o\", 4);\n            put(\"o|\", 2);\n            put(\".|\", 1);\n        }};\n        String[] notes = musicString.split(\" \");\n        List<Integer> result = new ArrayList<Integer>();\n        for (String note : notes) {\n            result.add(durations.get(note));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int howManyTimes(String s, String substring) {\n        int times = 0;\n        for (int i = 0; i < s.length() - substring.length() + 1; i++) {\n            if (s.substring(i, i + substring.length()).equals(substring)) {\n                times++;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static String sortNumbers(String numbers) {\n        Map<String, Integer> numDict = new HashMap<String, Integer>() {{\n            put(\"zero\", 0);\n            put(\"one\", 1);\n            put(\"two\", 2);\n            put(\"three\", 3);\n            put(\"four\", 4);\n            put(\"five\", 5);\n            put(\"six\", 6);\n            put(\"seven\", 7);\n            put(\"eight\", 8);\n            put(\"nine\", 9);\n        }};\n        List<String> numList = new ArrayList<String>();\n        for (String x : numbers.split(\" \")) {\n            if (numDict.containsKey(x)) {\n                numList.add(x);\n            }\n        }\n        Collections.sort(numList, (String x, String y) -> numDict.get(x).compareTo(numDict.get(y)));\n        return String.join(\" \", numList);\n    }\n}\n",
            "class Global {\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        var sortedNumbers = new ArrayList<Double>(numbers);\n        Collections.sort(sortedNumbers);\n        double minDiff = Double.POSITIVE_INFINITY;\n        List<Double> closestPair = new ArrayList<>();\n        for (int i = 1; i < sortedNumbers.size(); i++) {\n            double diff = sortedNumbers.get(i) - sortedNumbers.get(i - 1);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = Arrays.asList(sortedNumbers.get(i - 1), sortedNumbers.get(i));\n            }\n        }\n        return closestPair;\n    }\n}\n",
            "class Global {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        double minNum = Double.POSITIVE_INFINITY;\n        double maxNum = Double.NEGATIVE_INFINITY;\n        for (double num : numbers) {\n            if (num < minNum) {\n                minNum = num;\n            }\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n        if (minNum == maxNum) {\n            return new ArrayList<Double>(Collections.nCopies(numbers.size(), 0.0));\n        } else {\n            List<Double> result = new ArrayList<Double>();\n            for (double num : numbers) {\n                result.add((num - minNum) / (maxNum - minNum));\n            }\n            return result;\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> filterIntegers(List<Object> values) {\n        var result = new ArrayList<Integer>();\n        for (Object x : values) {\n            if (x instanceof Integer) {\n                result.add((Integer)x);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int strLength(String s) {\n        int length = 0;\n        for (int i = 0; i < s.length(); i++) {\n            length++;\n        }\n        return length;\n    }\n}\n",
            "class Global {\n    public static int largestDivisor(int n) {\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}\n",
            "class Global {\n    public static List<Integer> factorize(int n) {\n        var factors = new ArrayList<Integer>();\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.add(divisor);\n                n /= divisor;\n            } else {\n                divisor++;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static List<Integer> removeDuplicates(List<Integer> numbers) {\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (int num : numbers) {\n            counts.putIfAbsent(num, 0);\n            counts.put(num, counts.get(num) + 1);\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int num : numbers) {\n            if (counts.get(num) == 1) {\n                res.add(num);\n            }\n        }\n        return res;\n    }\n}\n",
            "class Global {\n    public static String flipCase(String s) {\n        var flipped = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (!Character.isLetter(ch)) {\n                flipped.append(ch);\n            } else if (Character.isLowerCase(ch)) {\n                flipped.append(Character.toUpperCase(ch));\n            } else if (Character.isUpperCase(ch)) {\n                flipped.append(Character.toLowerCase(ch));\n            }\n        }\n        return flipped.toString();\n    }\n}\n",
            "class Global {\n    public static String concatenate(List<String> strs) {\n        String result = \"\";\n        for (String s : strs) {\n            result += s;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> filterByPrefix(List<String> strs, String prefixStr) {\n        var result = new ArrayList<String>();\n        for (String s : strs) {\n            if (s.startsWith(prefixStr)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> getPositive(List<Integer> l) {\n        var result = new ArrayList<Integer>();\n        for (Integer num : l) {\n            if (num > 0) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static double poly(List<Integer> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.size(); i++) {\n            res += xs.get(i) * Math.pow(x, i);\n        }\n        return res;\n    }\n    public static double findZero(List<Integer> xs) {\n        double x1 = 1.0, x2 = -1.0;\n        while (poly(xs, x1) * poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (poly(xs, mid) == 0) {\n                return mid;\n            } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortThird(List<Integer> l) {\n        var sortedThird = new ArrayList<Integer>(l);\n        Collections.sort(sortedThird);\n        sortedThird = sortedThird.stream().filter(i -> i % 3 == 0).collect(Collectors.toList());\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(sortedThird.get(i / 3));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> listUnique(List<Integer> l) {\n        var uniqueList = new ArrayList<Integer>();\n        for (Integer item : l) {\n            if (!uniqueList.contains(item)) {\n                uniqueList.add(item);\n            }\n        }\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n}\n",
            "class Global {\n    public static int maxElement(List<Integer> l) {\n        int maxValue = Integer.MIN_VALUE;\n        for (int i : l) {\n            if (i > maxValue) {\n                maxValue = i;\n            }\n        }\n        return maxValue;\n    }\n}\n",
            "class Global {\n    public static int fizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += String.valueOf(i).chars().filter(ch -> ch == '7').count();\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortEven(List<Integer> l) {\n        List<Integer> sortedEven = new ArrayList<>(l.size() / 2);\n        for (int i = 0; i < l.size(); i += 2) {\n            sortedEven.add(l.get(i));\n        }\n        Collections.sort(sortedEven);\n        List<Integer> result = new ArrayList<>(l.size());\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(sortedEven.get(i / 2));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String encodeCyclic(String s) {\n        var result = new StringBuilder();\n        for (int i = 0; i < s.length(); i += 3) {\n            if (i + 3 > s.length()) {\n                result.append(s.substring(i));\n            } else {\n                result.append(s.substring(i + 1, i + 3));\n                result.append(s.charAt(i));\n            }\n        }\n        return result.toString();\n    }\n    public static String decodeCyclic(String s) {\n        return encodeCyclic(encodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n) + 1; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static int primeFib(int n) {\n        int[] f = new int[]{0, 1};\n        int cnt = 0;\n        while (cnt < n) {\n            f = new int[]{f[1], f[0] + f[1]};\n            if (isPrime(f[1])) {\n                cnt++;\n            }\n        }\n        return f[1];\n    }\n}\n",
            "class Global {\n    public static boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static int carRaceCollision(int n) {\n        return (int)Math.pow(n, 2);\n    }\n}\n",
            "class Global {\n    public static List<Integer> incrList(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i : l) {\n            result.add(i + 1);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String changeBase(int x, int bas) {\n        if (x == 0) {\n            return \"0\";\n        }\n        String result = \"\";\n        while (x > 0) {\n            result = (x % bas) + result;\n            x /= bas;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int h) {\n        return a * h / 2.0;\n    }\n}\n",
            "class Global {\n    public static int fib4(int n) {\n        int[] fib = new int[]{0, 0, 2, 0};\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = sum(fib);\n        }\n        return fib[n % 4];\n    }\n}\n",
            "class Global {\n    public static double median(List<Double> l) {\n        var sl = new ArrayList<Double>(l);\n        Collections.sort(sl);\n        if (sl.size() % 2 != 0) {\n            return sl.get(sl.size() / 2);\n        } else {\n            return (sl.get(sl.size() / 2) + sl.get(sl.size() / 2 - 1)) / 2;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isPalindrome(String txt) {\n        for (int i = 0; i < txt.length() / 2; i++) {\n            if (txt.charAt(i) != txt.charAt(txt.length() - i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "class Global {\n    public static String encodeShift(String s) {\n        char[] result = new char[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            result[i] = (char) ((s.charAt(i) - 'a' + 5) % 26 + 'a');\n        }\n        return new String(result);\n    }\n    public static String decodeShift(String s) {\n        char[] result = new char[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            result[i] = (char) ((s.charAt(i) - 'a' + 21) % 26 + 'a');\n        }\n        return new String(result);\n    }\n}\n",
            "class Global {\n    public static String removeVowels(String txt) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < txt.length(); i++) {\n            char char = txt.charAt(i);\n            if (!vowels.contains(Character.toString(char))) {\n                result.append(char);\n            }\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static boolean belowThreshold(List<Integer> l, int t) {\n        for (int x : l) {\n            if (x >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static boolean sameChars(String s0, String s1) {\n        Set<Character> s0Set = new HashSet<>();\n        for (int i = 0; i < s0.length(); i++) {\n            s0Set.add(s0.charAt(i));\n        }\n        Set<Character> s1Set = new HashSet<>();\n        for (int i = 0; i < s1.length(); i++) {\n            s1Set.add(s1.charAt(i));\n        }\n        return s0Set.equals(s1Set);\n    }\n}\n",
            "class Global {\n    public static int fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth += 1;\n            } else if (b == '>') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static boolean monotonic(List<Integer> l) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < l.size() - 1; i++) {\n            diff.add(l.get(i + 1) - l.get(i));\n        }\n        boolean allLessEqual = true;\n        boolean allGreaterEqual = true;\n        for (int x : diff) {\n            allLessEqual = allLessEqual && x <= 0;\n            allGreaterEqual = allGreaterEqual && x >= 0;\n        }\n        return allLessEqual || allGreaterEqual;\n    }\n}\n",
            "class Global {\n    public static List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        var result = new ArrayList<Integer>();\n        for (Integer i : l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n",
            "class Global {\n    public static int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i != 0) {\n                i++;\n            } else {\n                n /= i;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int sumToN(int n) {\n        int result = 0;\n        for (int i = 0; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth++;\n            } else if (b == ')') {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> derivative(List<Integer> xs) {\n        var result = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n        int a = 0, b = 0, c = 1;\n        while (n > 2) {\n            a = b;\n            b = c;\n            c = a + b + c;\n            n -= 1;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int vowelsCount(String s) {\n        String vowels = \"aeiou\";\n        int cnt = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (vowels.contains(Character.toLowerCase(s.charAt(i))) || (i == s.length() - 1 && s.charAt(i) == 'y')) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static String circularShift(int x, int shift) {\n        String xStr = String.valueOf(x);\n        if (shift > xStr.length()) {\n            return new StringBuilder(xStr).reverse().toString();\n        } else {\n            return xStr.substring(xStr.length() - shift) + xStr.substring(0, xStr.length() - shift);\n        }\n    }\n}\n",
            "class Global {\n    public static int digitSum(String s) {\n        int sumValue = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sumValue += (int) c;\n            }\n        }\n        return sumValue;\n    }\n}\n",
            "class Global {\n    public static int fruitDistribution(String s, int n) {\n        String[] words = s.split(\" \");\n        int apples = Integer.parseInt(words[words.indexOf(\"apples\") - 1]);\n        int oranges = Integer.parseInt(words[words.indexOf(\"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n}\n",
            "class Global {\n    public static List<Integer> pluck(List<Integer> arr) {\n        List<Integer> evens = new ArrayList<>();\n        for (int n : arr) {\n            if (n % 2 == 0) {\n                evens.add(n);\n            }\n        }\n        if (evens.size() == 0) {\n            return new ArrayList<>();\n        }\n        int minEven = Collections.min(evens);\n        return Arrays.asList(minEven, evens.indexOf(minEven));\n    }\n}\n",
            "class Global {\n    public static int search(List<Integer> lst) {\n        Map<Integer, Integer> freqs = new HashMap<>();\n        for (int n : lst) {\n            if (!freqs.containsKey(n)) {\n                freqs.put(n, 0);\n            }\n            freqs.put(n, freqs.get(n) + 1);\n        }\n        List<Integer> goodVals = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : freqs.entrySet()) {\n            if (entry.getValue() >= entry.getKey()) {\n                goodVals.add(entry.getKey());\n            }\n        }\n        if (goodVals.size() > 0) {\n            return Collections.max(goodVals);\n        } else {\n            return -1;\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> strangeSortList(List<Integer> lst) {\n        var sl = new ArrayList<Integer>(lst);\n        Collections.sort(sl);\n        var result = new ArrayList<Integer>();\n        int left = 0, right = sl.size() - 1;\n        while (left <= right) {\n            result.add(sl.get(left));\n            left++;\n            if (left <= right) {\n                result.add(sl.get(right));\n                right--;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int b, int c) {\n        double s = (a + b + c) / 2.0;\n        if (a + b > c && a + c > b && b + c > a) {\n            return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        boolean isPalin = true;\n        for (int i = 0; i < q.size(); i++) {\n            if (q.get(i) != q.get(q.size() - i - 1)) {\n                isPalin = false;\n            }\n        }\n        int total = 0;\n        for (int i : q) {\n            total += i;\n        }\n        return isPalin && total <= w;\n    }\n}\n",
            "class Global {\n    public static int smallestChange(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (!arr.get(i).equals(arr.get(arr.size() - i - 1))) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int cnt1 = 0;\n        for (String s : lst1) {\n            cnt1 += s.length();\n        }\n        int cnt2 = 0;\n        for (String s : lst2) {\n            cnt2 += s.length();\n        }\n        return cnt1 <= cnt2 ? lst1 : lst2;\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static boolean isMultiplyPrime(int a) {\n        int cnt = 0;\n        for (int i = 2; i <= a; i++) {\n            if (isPrime(i)) {\n                while (a % i == 0) {\n                    cnt++;\n                    a /= i;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n}\n",
            "class Global {\n    public static boolean isSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "class Global {\n    public static boolean isCube(int a) {\n        a = Math.abs(a);\n        int root = (int) Math.round(Math.pow(a, 1.0 / 3.0));\n        return root * root * root == a;\n    }\n}\n",
            "class Global {\n    public static int hexKey(String num) {\n        int count = 0;\n        for (char x : num.toCharArray()) {\n            if (x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D') {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static String decimalToBinary(int dec) {\n        String binary = Integer.toBinaryString(dec);\n        return \"db\" + binary + \"db\";\n    }\n}\n",
            "class Global {\n    public static boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static List<String> numericalLetterGrade(List<Double> grades) {\n        var result = new ArrayList<String>();\n        for (Double g : grades) {\n            if (g == 4.0) {\n                result.add(\"A+\");\n            } else if (g > 3.7) {\n                result.add(\"A\");\n            } else if (g > 3.3) {\n                result.add(\"A-\");\n            } else if (g > 3.0) {\n                result.add(\"B+\");\n            } else if (g > 2.7) {\n                result.add(\"B\");\n            } else if (g > 2.3) {\n                result.add(\"B-\");\n            } else if (g > 2.0) {\n                result.add(\"C+\");\n            } else if (g > 1.7) {\n                result.add(\"C\");\n            } else if (g > 1.3) {\n                result.add(\"C-\");\n            } else if (g > 1.0) {\n                result.add(\"D+\");\n            } else if (g > 0.7) {\n                result.add(\"D\");\n            } else if (g > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean primeLength(String s) {\n        int length = s.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(length)) + 1; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int startsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        int result = 2 * 9 * (int)Math.pow(10, n - 2);\n        return result;\n    }\n}\n",
            "class Global {\n    public static String solve(int n) {\n        int digitsSum = 0;\n        for (char d : Integer.toString(n).toCharArray()) {\n            digitsSum += d - '0';\n        }\n        return Integer.toBinaryString(digitsSum).substring(1);\n    }\n}\n",
            "class Global {\n    public static int add(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            words[i] = String.join(\"\", Arrays.stream(words[i].split(\"\")).sorted().toArray(String[]::new));\n        }\n        return String.join(\" \", words);\n    }\n}\n",
            "class Global {\n    public static List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    coords.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        coords.sort(Comparator.comparingInt(a -> a.get(0)).thenComparingInt(a -> -a.get(1)));\n        return coords;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return new ArrayList<>();\n        }\n        if ((arr.get(0) + arr.get(arr.size() - 1)) % 2 == 0) {\n            Collections.sort(arr, Collections.reverseOrder());\n        } else {\n            Collections.sort(arr);\n        }\n        return arr;\n    }\n}\n",
            "class Global {\n    public static String encrypt(String s) {\n        char[] result = new char[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            int shifted = s.charAt(i) + 4;\n            if (shifted > 'z') {\n                shifted -= 26;\n            }\n            result[i] = (char) shifted;\n        }\n        return new String(result);\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> nextSmallest(List<Integer> lst) {\n        Set<Integer> uniqueList = new HashSet<>(lst);\n        List<Integer> sortedList = new ArrayList<>(uniqueList);\n        Collections.sort(sortedList);\n        if (sortedList.size() < 2) {\n            return Optional.empty();\n        }\n        return Optional.of(sortedList.get(1));\n    }\n}\n",
            "class Global {\n    public static int isBored(String s) {\n        String[] sentences = Pattern.compile(\"[.!?]\\\\s*\").split(s);\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.length() >= 2 && sentence.substring(0, 2).equals(\"I \")) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int x1 = (int) x;\n            int y1 = (int) y;\n            int z1 = (int) z;\n            return (x1 + y1 == z1) || (x1 + z1 == y1) || (y1 + z1 == x1);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder result = new StringBuilder();\n        for (char ch : message.toCharArray()) {\n            if (Character.isAlphabetic(ch)) {\n                char ch1 = Character.isLowerCase(ch) ? Character.toUpperCase(ch) : Character.toLowerCase(ch);\n                if (vowels.contains(String.valueOf(ch1))) {\n                    ch1 = (char) (ch1 + 2);\n                }\n                result.append(ch1);\n            } else {\n                result.append(ch);\n            }\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static int skjkasdkd(List<Integer> lst) {\n        List<Integer> primes = new ArrayList<>();\n        for (int n : lst) {\n            if (isPrime(n)) {\n                primes.add(n);\n            }\n        }\n        if (primes.size() == 0) {\n            return 0;\n        }\n        String largest = String.valueOf(Collections.max(primes));\n        int sum = 0;\n        for (char digit : largest.toCharArray()) {\n            sum += Character.getNumericValue(digit);\n        }\n        return sum;\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean checkDictCase(Map<String, String> d) {\n        if (d.isEmpty()) {\n            return false;\n        }\n        boolean lowerCaseKeys = true;\n        boolean upperCaseKeys = true;\n        for (String key : d.keySet()) {\n            if (!key.matches(\"[a-z]+\")) {\n                lowerCaseKeys = false;\n            }\n            if (!key.matches(\"[A-Z]+\")) {\n                upperCaseKeys = false;\n            }\n        }\n        return lowerCaseKeys || upperCaseKeys;\n    }\n}\n",
            "class Global {\n    public static List<Integer> countUpTo(int n) {\n        var primes = new ArrayList<Integer>();\n        for (int num = 2; num <= n; num++) {\n            boolean isPrime = true;\n            for (Integer p : primes) {\n                if (num % p == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(num);\n            }\n        }\n        return primes;\n    }\n}\n",
            "class Global {\n    public static int multiply(int a, int b) {\n        int result = 0;\n        for (int i = 0; i < Math.abs(a) % 10; i++) {\n            result += Math.abs(b) % 10;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int countUpper(String s) {\n        String vowels = \"AEIOU\";\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && vowels.contains(String.valueOf(s.charAt(i)))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static int closestInteger(String value) {\n        double num = Double.parseDouble(value);\n        return num >= 0.0 ? (int) (num + 0.5) : (int) (num - 0.5);\n    }\n}\n",
            "class Global {\n    public static List<Integer> makeAPile(int n) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> wordsString(String s) {\n        var result = new ArrayList<String>();\n        for (String w : s.split(\"[, ]\")) {\n            if (w.length() > 0) {\n                result.add(w);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x != y) {\n            return y - 1;\n        }\n        return -1;\n    }\n}\n",
            "class Global {\n    public static Optional<String> roundedAvg(int n, int m) {\n        if (n > m) {\n            return Optional.empty();\n        }\n        int rAvg = (int) Math.round((m + n) / 2.0 + 0.5);\n        String result = Integer.toBinaryString(rAvg);\n        return Optional.of(result);\n    }\n}\n",
            "class Global {\n    public static boolean allDigitsOdd(String s) {\n        for (char digit : s.toCharArray()) {\n            if (digit % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static List<Integer> uniqueDigits(List<Integer> x) {\n        var result = new ArrayList<Integer>();\n        for (Integer num : x) {\n            if (allDigitsOdd(String.valueOf(num))) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> byLength(List<Integer> arr) {\n        String[] digitNames = new String[] {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        List<Integer> sortedArr = new ArrayList<>(Arrays.asList(arr.stream().filter(x -> x >= 1 && x <= 9).sorted(Comparator.reverseOrder()).toArray(Integer[]::new)));\n        return sortedArr.stream().map(x -> digitNames[x-1]).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<Integer> f(int n) {\n        List<Integer> nums = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            nums.add(i);\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i : nums) {\n            if (i % 2 != 0) {\n                result.add(sum(nums.subList(0, i)));\n            } else {\n                result.add(reduce(nums.subList(0, i), (x, y) -> x * y, 1));\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isPalindrome(String txt) {\n        return txt.equals(new StringBuilder(txt).reverse().toString());\n    }\n    public static List<Integer> evenOddPalindrome(int n) {\n        var cnt = new int[2];\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(String.valueOf(i))) {\n                cnt[i % 2]++;\n            }\n        }\n        return Arrays.asList(cnt);\n    }\n}\n",
            "class Global {\n    public static int countNums(List<Integer> arr) {\n        int countValue = 0;\n        for (int n : arr) {\n            if (digitsSum(n) > 0) {\n                countValue += 1;\n            }\n        }\n        return countValue;\n    }\n    public static int digitsSum(int n) {\n        String nStr = Integer.toString(n);\n        if (n >= 0) {\n            int sumValue = 0;\n            for (char d : nStr.toCharArray()) {\n                sumValue += Character.getNumericValue(d);\n            }\n            return sumValue;\n        } else {\n            return Integer.parseInt(nStr.substring(0, 2)) * 2 + digitsSum(Math.abs(n));\n        }\n    }\n}\n",
            "class Global {\n    public static boolean moveOneBall(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        var sortedArr = new ArrayList<Integer>(arr);\n        Collections.sort(sortedArr);\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.subList(i, arr.size()).equals(sortedArr.subList(0, arr.size() - i)) && arr.subList(0, i).equals(sortedArr.subList(arr.size() - i, sortedArr.size()))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String canExchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCnt = 0;\n        int evenCnt = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCnt += 1;\n            }\n        }\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCnt += 1;\n            }\n        }\n        return evenCnt >= oddCnt ? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static Map<String, Integer> histogram(String test) {\n        Map<String, Integer> freq = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String w : words) {\n            if (w.length() > 0) {\n                freq.put(w, freq.getOrDefault(w, 0) + 1);\n            }\n        }\n        Map<String, Integer> result = new HashMap<>();\n        if (freq.size() > 0) {\n            int maxFreq = Collections.max(freq.values());\n            for (Map.Entry<String, Integer> entry : freq.entrySet()) {\n                if (entry.getValue() == maxFreq) {\n                    result.put(entry.getKey(), entry.getValue());\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> reverseDelete(String s, String c) {\n        String s1 = String.join(\"\", s.chars().filter(ch -> !c.contains(String.valueOf((char)ch))).mapToObj(ch -> String.valueOf((char)ch)).toArray(String[]::new));\n        return Arrays.asList(s1, isPalindrome(s1) ? \"yes\" : \"no\");\n    }\n    public static boolean isPalindrome(String s) {\n        return s.equals(new StringBuilder(s).reverse().toString());\n    }\n}\n",
            "class Global {\n    public static List<String> oddCount(List<String> lst) {\n        var result = new ArrayList<String>();\n        for (String num : lst) {\n            int n = (int) num.chars().filter(d -> d % 2 == 1).count();\n            String rs = \"the number of odd elements in the string i of the input.\".replace(\"i\", String.valueOf(n));\n            result.add(rs);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int minSubArraySum(List<Integer> nums) {\n        int minSum = 0;\n        int curSum = 0;\n        for (int n : nums) {\n            curSum = Math.min(curSum + n, 0);\n            minSum = Math.min(curSum, minSum);\n        }\n        if (minSum == 0) {\n            minSum = Collections.min(nums);\n        }\n        return minSum;\n    }\n}\n",
            "class Global {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        int result = 0;\n        for (List<Integer> arr : grid) {\n            int sumArr = 0;\n            for (int e : arr) {\n                sumArr += e;\n            }\n            result += (int)Math.ceil((double)sumArr / capacity);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int countOnes(int num) {\n        int count = 0;\n        while (num > 0) {\n            if ((num & 1) == 1) {\n                count++;\n            }\n            num >>= 1;\n        }\n        return count;\n    }\n    public static List<Integer> sortArray(List<Integer> arr) {\n        var sortedArr = new ArrayList<Integer>(arr);\n        sortedArr.sort(Comparator.comparingInt(Global::countOnes).thenComparingInt(x -> x));\n        return sortedArr;\n    }\n}\n",
            "class Global {\n    public static List<String> selectWords(String s, int n) {\n        String consonants = \"bcdfghjklmnpqrstvwxyz\";\n        String[] words = s.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String w : words) {\n            int count = 0;\n            for (char c : w.toCharArray()) {\n                if (consonants.contains(String.valueOf(c).toLowerCase())) {\n                    count += 1;\n                }\n            }\n            if (count == n) {\n                result.add(w);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i - 1)) == -1 && vowels.indexOf(word.charAt(i + 1)) == -1) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static String matchParens(List<String> lst) {\n        String s1 = lst.get(0) + lst.get(1);\n        String s2 = lst.get(1) + lst.get(0);\n        return check(s1) || check(s2) ? \"Yes\" : \"No\";\n    }\n    public static boolean check(String s) {\n        int depth = 0;\n        for (char ch : s.toCharArray()) {\n            if (ch == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return new ArrayList<>();\n        }\n        var result = new ArrayList<Integer>(arr);\n        Collections.sort(result);\n        return result.subList(result.size() - k, result.size());\n    }\n}\n",
            "class Global {\n    public static int solution(List<Integer> lst) {\n        int sumValue = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sumValue += lst.get(i);\n            }\n        }\n        return sumValue;\n    }\n}\n",
            "class Global {\n    public static int addElements(List<Integer> arr, int k) {\n        int sumValue = 0;\n        for (int i = 0; i < k; i++) {\n            int n = arr.get(i);\n            if (String.valueOf(n).length() <= 2) {\n                sumValue += n;\n            }\n        }\n        return sumValue;\n    }\n}\n",
            "class Global {\n    public static List<Integer> getOddCollatz(int n) {\n        List<Integer> collatz = new ArrayList<>();\n        collatz.add(1);\n        while (n != 1) {\n            if (n % 2 != 0) {\n                collatz.add(n);\n                n = 3 * n + 1;\n            } else {\n                n /= 2;\n            }\n        }\n        Collections.sort(collatz);\n        return collatz;\n    }\n}\n",
            "class Global {\n    public static boolean validDate(String date) {\n        if (date.length() != 10 || date.charAt(2) != '-' || date.charAt(5) != '-') {\n            return false;\n        }\n        int m = Integer.parseInt(date.substring(0, 2));\n        int d = Integer.parseInt(date.substring(3, 5));\n        if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n            if (d >= 1 && d <= 31) {\n                return true;\n            }\n        } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n            if (d >= 1 && d <= 30) {\n                return true;\n            }\n        } else if (m == 2) {\n            if (d >= 1 && d <= 29) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<String> splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            return Arrays.asList(String.valueOf(txt.chars().filter(c -> Character.isLowerCase(c) && c % 2 == 0).count()));\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isSorted(List<Integer> lst) {\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i-1) > lst.get(i)) {\n                return false;\n            }\n        }\n        Map<Integer, Integer> freq = new HashMap<>();\n        for (int i : lst) {\n            freq.put(i, freq.getOrDefault(i, 0) + 1);\n        }\n        return Collections.max(freq.values()) <= 2;\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        if (length > 0 && isPrime(length)) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int sign = -1;\n        if (arr.stream().filter(n -> n < 0).count() % 2 == 1) {\n            sign = 1;\n        }\n        int result = 0;\n        for (int n : arr) {\n            result += Math.abs(n);\n        }\n        return Optional.of(sign * result);\n    }\n}\n",
            "class Global {\n    public static List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int minVal = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    minVal = Math.min(minVal, Collections.min(temp));\n                }\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            result.add(i % 2 == 0 ? 1 : minVal);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> tri(int n) {\n        if (n == 0) {\n            return new ArrayList<>(Arrays.asList(1));\n        }\n        List<Integer> seq = new ArrayList<>(Arrays.asList(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                seq.add(i / 2 + 1);\n            } else {\n                seq.add(seq.get(i - 1) + seq.get(i - 2) + (i + 3) / 2);\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int digits(int n) {\n        List<Integer> odds = new ArrayList<>();\n        for (char d : String.valueOf(n).toCharArray()) {\n            odds.add(Integer.parseInt(String.valueOf(d)));\n        }\n        int result = 1;\n        for (int d : odds) {\n            result *= d;\n        }\n        return result > 0 ? result : 0;\n    }\n}\n",
            "class Global {\n    public static boolean isNested(String s) {\n        var openIdx = new ArrayList<Integer>();\n        var closeIdx = new ArrayList<Integer>();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '[') {\n                openIdx.add(i);\n            } else if (s.charAt(i) == ']') {\n                closeIdx.add(i);\n            }\n        }\n        Collections.reverse(closeIdx);\n        int cnt = 0;\n        int i = 0;\n        int l = closeIdx.size();\n        for (int idx : openIdx) {\n            if (i < l && idx < closeIdx.get(i)) {\n                cnt += 1;\n                i += 1;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Double> lst) {\n        int result = 0;\n        for (Double n : lst) {\n            result += Math.pow(Math.ceil(n), 2);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean checkIfLastCharIsALetter(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n        String last = txt.substring(txt.lastIndexOf(' ') + 1);\n        return last.length() == 1 && Character.isLetter(last.charAt(0));\n    }\n}\n",
            "class Global {\n    public static int canArrange(List<Integer> arr) {\n        if (arr.size() <= 1) {\n            return -1;\n        }\n        List<Integer> idx = new ArrayList<>();\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                idx.add(i);\n            }\n        }\n        return Collections.max(idx, (a, b) -> a - b);\n    }\n}\n",
            "class Global {\n    public static List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst) {\n        int maxNeg = Integer.MIN_VALUE;\n        int minPos = Integer.MAX_VALUE;\n        for (int i : lst) {\n            if (i < 0) {\n                if (maxNeg == Integer.MIN_VALUE || i > maxNeg) {\n                    maxNeg = i;\n                }\n            } else if (i > 0) {\n                if (minPos == Integer.MAX_VALUE || i < minPos) {\n                    minPos = i;\n                }\n            }\n        }\n        return Arrays.asList(Optional.of(maxNeg), Optional.of(minPos));\n    }\n}\n",
            "class Global {\n    public static Optional<Double> compareOne(Object a, Object b) {\n        double a1 = 0.0;\n        double b1 = 0.0;\n        if (a instanceof String) {\n            a1 = Double.parseDouble(((String) a).replace(\",\", \".\"));\n        } else if (a instanceof Integer) {\n            a1 = (double) (int) a;\n        } else if (a instanceof Double) {\n            a1 = (double) a;\n        } else {\n            throw new RuntimeException(\"Type Error\");\n        }\n        if (b instanceof String) {\n            b1 = Double.parseDouble(((String) b).replace(\",\", \".\"));\n        } else if (b instanceof Integer) {\n            b1 = (double) (int) b;\n        } else if (b instanceof Double) {\n            b1 = (double) b;\n        } else {\n            throw new RuntimeException(\"Type Error\");\n        }\n        if (a1 == b1) {\n            return Optional.empty();\n        } else if (a1 > b1) {\n            return Optional.of(a1);\n        } else {\n            return Optional.of(b1);\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int specialFactorial(int n) {\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            int fact = 1;\n            for (int j = 1; j <= i; j++) {\n                fact *= j;\n            }\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String fixSpaces(String txt) {\n        return Pattern.compile(\"\\\\s{3,}\").matcher(txt).replaceAll(\"-\").replace(\" \", \"_\");\n    }\n}\n",
            "class Global {\n    public static String fileNameCheck(String fileName) {\n        List<String> suf = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        String[] lst = fileName.split(\"\\\\.\");\n        if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].length() == 0 || !Character.isLetter(lst[0].charAt(0)) || lst[0].replaceAll(\"\\\\d\", \"\").length() > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result += (int)Math.pow(lst.get(i), 2);\n            } else if (i % 4 == 0) {\n                result += (int)Math.pow(lst.get(i), 3);\n            } else {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n) + 1; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String w : words) {\n            if (isPrime(w.length())) {\n                result.add(w);\n            }\n        }\n        return String.join(\" \", result);\n    }\n}\n",
            "class Global {\n    public static boolean simplify(String x, String n) {\n        String[] xs = x.split(\"/\");\n        String[] ns = n.split(\"/\");\n        int num = Integer.parseInt(xs[0]) * Integer.parseInt(ns[0]);\n        int den = Integer.parseInt(xs[1]) * Integer.parseInt(ns[1]);\n        return num % den == 0;\n    }\n}\n",
            "class Global {\n    public static int digitsSum(int n) {\n        String nStr = Integer.toString(n);\n        if (n >= 0) {\n            int result = 0;\n            for (char d : nStr.toCharArray()) {\n                result += Character.getNumericValue(d);\n            }\n            return result;\n        } else {\n            return Integer.parseInt(nStr.substring(0, 2)) * 2 + digitsSum(Math.abs(n));\n        }\n    }\n    public static List<Integer> orderByPoints(List<Integer> nums) {\n        var result = new ArrayList<Integer>(nums);\n        result.sort(Comparator.comparingInt(Global::digitsSum));\n        return result;\n    }\n}\n",
            "class Global {\n    public static int specialFilter(List<Integer> nums) {\n        String odds = \"13579\";\n        int count = 0;\n        for (int n : nums) {\n            if (n > 10 && n % 2 == 1 && odds.contains(String.valueOf(n).charAt(0))) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static int getMaxTriples(int n) {\n        int[] c = new int[3];\n        for (int i = 1; i <= n; i++) {\n            int a = i * i - i + 1;\n            c[a % 3] += 1;\n        }\n        return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n    }\n}\n",
            "class Global {\n    public static List<String> bf(String planet1, String planet2) {\n        List<String> names = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!names.contains(planet1) || !names.contains(planet2)) {\n            return new ArrayList<>();\n        }\n        int l = names.indexOf(planet1);\n        int r = names.indexOf(planet2);\n        if (l > r) {\n            l = r;\n            r = l;\n        }\n        if (l == r) {\n            return new ArrayList<>();\n        }\n        return names.subList(l + 1, r);\n    }\n}\n",
            "class Global {\n    public static List<String> sortedListSum(List<String> lst) {\n        var result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        result.sort(Comparator.comparing(String::length).thenComparing(s -> s));\n        return result;\n    }\n}\n",
            "class Global {\n    public static int xOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int doubleTheDifference(List<Double> lst) {\n        int result = 0;\n        for (Double n : lst) {\n            if (n >= 0 && n % 2 == 1) {\n                result += n * n;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String strongestExtension(String className, List<String> extensions) {\n        double maxS = -Double.MAX_VALUE;\n        String maxExt = \"\";\n        for (String ext : extensions) {\n            int upper = 0;\n            int lower = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    upper++;\n                } else if (Character.isLowerCase(c)) {\n                    lower++;\n                }\n            }\n            double s = upper - lower;\n            if (s > maxS) {\n                maxS = s;\n                maxExt = ext;\n            }\n        }\n        return String.format(\"%s.%s\", className, maxExt);\n    }\n}\n",
            "class Global {\n    public static boolean cycpatternCheck(String a, String b) {\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if (b.substring(i) + b.substring(0, i).equals(a)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<Integer> evenOddCount(int num) {\n        String ds = String.valueOf(Math.abs(num));\n        int even = 0;\n        for (char d : ds.toCharArray()) {\n            if (d % 2 == 0) {\n                even++;\n            }\n        }\n        return Arrays.asList(even, ds.length() - even);\n    }\n}\n",
            "class Global {\n    public static String intToMiniRoman(int num) {\n        int[] values = new int[]{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] numerals = new String[]{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        StringBuilder res = new StringBuilder();\n        for (int i = 0; i < values.length; i++) {\n            while (num >= values[i]) {\n                res.append(numerals[i]);\n                num -= values[i];\n            }\n        }\n        return res.toString();\n    }\n}\n",
            "class Global {\n    public static boolean rightAngleTriangle(int a, int b, int c) {\n        int[] s = new int[]{a, b, c};\n        Arrays.sort(s);\n        return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n    }\n}\n",
            "class Global {\n    public static String findMax(List<String> words) {\n        int maxCnt = 0;\n        String maxW = \"\";\n        for (String w : words) {\n            int cnt = new HashSet<>(Arrays.asList(w.split(\"\"))).size();\n            if (cnt > maxCnt) {\n                maxCnt = cnt;\n                maxW = w;\n            } else if (cnt == maxCnt) {\n                maxW = min(maxW, w);\n            }\n        }\n        return maxW;\n    }\n}\n",
            "class Global {\n    public static List<Integer> eat(int num, int need, int remaining) {\n        if (need <= remaining) {\n            return Arrays.asList(num + need, remaining - need);\n        } else {\n            return Arrays.asList(num + remaining, 0);\n        }\n    }\n}\n",
            "class Global {\n    public static int doAlgebra(List<String> operators, List<Integer> operands) {\n        var ops = new ArrayList<String>(operators);\n        var nums = new ArrayList<Integer>(operands);\n        int i = ops.size() - 1;\n        while (i >= 0) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int)Math.pow(nums.get(i), nums.get(i + 1)));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n            i -= 1;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            } else if (ops.get(i).equals(\"//\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        return nums.get(0);\n    }\n}\n",
            "class Global {\n    public static String solve(String s) {\n        var result = new ArrayList<Character>();\n        for (char ch : s.toCharArray()) {\n            if (!Character.isAlphabetic(ch)) {\n                result.add(ch);\n            } else if (Character.isUpperCase(ch)) {\n                result.add(Character.toLowerCase(ch));\n            } else if (Character.isLowerCase(ch)) {\n                result.add(Character.toUpperCase(ch));\n            }\n        }\n        if (!result.stream().anyMatch(ch -> Character.isAlphabetic(ch))) {\n            Collections.reverse(result);\n        }\n        return String.valueOf(result.toArray(new Character[0]));\n    }\n}\n",
            "class Global {\n    public static Optional<String> stringToMd5(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n        byte[] txtBytes = txt.getBytes();\n        md5.update(txtBytes);\n        String md5Encoded = new BigInteger(1, md5.digest()).toString(16);\n        return Optional.of(md5Encoded);\n    }\n}\n",
            "class Global {\n    public static List<Integer> generateIntegers(int a, int b) {\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n        var result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n"
        ],
        "javascript": [
            "export const hasCloseElements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "export const separateParenGroups = (parenString) => {\n    const groups = [];\n    const stk = [];\n    let currentGroup = \"\";\n    const parens = parenString.replace(\" \", \"\");\n    for (let i = 0; i < parens.length; i++) {\n        const ch = parens[i];\n        if (ch === \"(\") {\n            stk.push(ch);\n            currentGroup += ch;\n        } else if (ch === \")\") {\n            stk.pop();\n            currentGroup += ch;\n            if (!stk.length) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "export const truncateNumber = (num) => {\n    return num - Math.floor(num);\n}\n",
            "export const belowZero = (operations) => {\n    let balance = 0;\n    for (const op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const meanAbsoluteDeviation = (numbers) => {\n    let mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    let deviation = 0.0;\n    for (let x of numbers) {\n        deviation += Math.abs(x - mean);\n    }\n    return deviation / numbers.length;\n}\n",
            "export const intersperse = (numbers, delimiter) => {\n    const result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i !== 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "export const parseNestedParens = (parenString) => {\n    const result = [];\n    const parenGroups = parenString.split(\" \");\n    for (const group of parenGroups) {\n        let maxDepth = 0;\n        let depth = 0;\n        for (const ch of group) {\n            if (ch === \"(\") {\n                depth += 1;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch === \")\") {\n                depth -= 1;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}\n",
            "export const filterBySubstring = (strs, substring) => {\n    return strs.filter((s) => s.includes(substring));\n}\n",
            "export const sumProduct = (numbers) => {\n    let nSum = 0;\n    let nProduct = 1;\n    for (const n of numbers) {\n        nSum += n;\n        nProduct *= n;\n    }\n    return [nSum, nProduct];\n}\n",
            "export const rollingMax = (numbers) => {\n    const result = [];\n    let maxSoFar = Number.NEGATIVE_INFINITY;\n    for (const num of numbers) {\n        if (num > maxSoFar) {\n            maxSoFar = num;\n        }\n        result.push(maxSoFar);\n    }\n    return result;\n}\n",
            "export const makePalindrome = (s) => {\n    if (s === s.split(\"\").reverse().join(\"\")) {\n        return s;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (s.slice(i) === s.slice(i).split(\"\").reverse().join(\"\")) {\n            return s + s.slice(0, i).split(\"\").reverse().join(\"\");\n        }\n    }\n    return \"\";\n}\n",
            "export const stringXor = (a, b) => {\n    let result = \"\";\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n",
            "export const longest = (strs) => {\n    if (!strs.length) {\n        return null;\n    }\n    let longestS = strs[0];\n    for (const s of strs) {\n        if (s.length > longestS.length) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}\n",
            "export const greatestCommonDivisor = (a, b) => {\n    while (b !== 0) {\n        [a, b] = [b, a % b];\n    }\n    return a;\n}\n",
            "export const allPrefixes = (s) => {\n    let prefixes = [];\n    for (let i = 0; i < s.length; i++) {\n        prefixes.push(s.substring(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "export const stringSequence = (n) => {\n    let result = \"\";\n    for (let i = 0; i <= n; i++) {\n        result += `${i} `;\n    }\n    return result.slice(0, -1);\n}\n",
            "export const countDistinctCharacters = (s) => {\n    const distinctCharacters = new Set();\n    for (const char of s.toLowerCase()) {\n        distinctCharacters.add(char);\n    }\n    return distinctCharacters.size;\n}\n",
            "export const parseMusic = (musicString) => {\n    const durations = {\n        o: 4,\n        o: 2,\n        \".\": 1\n    };\n    const notes = musicString.split(\" \");\n    const result = [];\n    for (const note of notes) {\n        result.push(durations[note]);\n    }\n    return result;\n}\n",
            "export const howManyTimes = (s, substring) => {\n    let times = 0;\n    for (let i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.substring(i, i + substring.length) === substring) {\n            times++;\n        }\n    }\n    return times;\n}\n",
            "export const sortNumbers = (numbers) => {\n    const numDict = {\n        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n        nine: 9,\n    };\n    const numList = numbers.split(\" \").filter((x) => x in numDict).sort((a, b) => numDict[a] - numDict[b]);\n    return numList.join(\" \");\n}\n",
            "export const findClosestElements = (numbers) => {\n    const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n    let minDiff = Number.POSITIVE_INFINITY;\n    let closestPair = [];\n    for (let i = 1; i < sortedNumbers.length; i++) {\n        const diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "export const rescaleToUnit = (numbers) => {\n    let minNum = Number.POSITIVE_INFINITY;\n    let maxNum = Number.NEGATIVE_INFINITY;\n    for (const num of numbers) {\n        if (num < minNum) {\n            minNum = num;\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    if (minNum === maxNum) {\n        return numbers.map(() => 0.0);\n    } else {\n        return numbers.map((num) => (num - minNum) / (maxNum - minNum));\n    }\n}\n",
            "export const filterIntegers = (values) => {\n    const result = [];\n    for (const x of values) {\n        if (typeof x === \"number\") {\n            result.push(x);\n        }\n    }\n    return result;\n}\n",
            "export const strLength = (s) => {\n    let length = 0;\n    for (const char of s) {\n        length += 1;\n    }\n    return length;\n}\n",
            "export const largestDivisor = (n) => {\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return Math.floor(n / i);\n        }\n    }\n    return 1;\n}\n",
            "export const factorize = (n) => {\n    const factors = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n",
            "export const removeDuplicates = (numbers) => {\n    const counts = {};\n    for (const num of numbers) {\n        if (num in counts) {\n            counts[num] += 1;\n        } else {\n            counts[num] = 1;\n        }\n    }\n    const res = numbers.filter((num) => counts[num] === 1);\n    return res;\n}\n",
            "export const flipCase = (s) => {\n    const flipped = s.split(\"\").map((ch) => {\n        if (!ch.match(/[a-zA-Z]/)) {\n            return ch;\n        }\n        if (ch.toLowerCase() === ch) {\n            return ch.toUpperCase();\n        }\n        return ch.toLowerCase();\n    });\n    return flipped.join(\"\");\n}\n",
            "export const concatenate = (strs) => {\n    let result = \"\";\n    for (const s of strs) {\n        result += s;\n    }\n    return result;\n}\n",
            "export const filterByPrefix = (strs, prefixStr) => {\n    return strs.filter((s) => s.startsWith(prefixStr));\n}\n",
            "export const getPositive = (l) => {\n    return l.filter((num) => num > 0);\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const poly = (xs, x) => {\n    let res = 0.0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n};\nexport const findZero = (xs) => {\n    let x1 = 1.0;\n    let x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        const mid = (x1 + x2) / 2;\n        if (poly(xs, mid) === 0) {\n            return mid;\n        }\n        if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n};\n",
            "export const sortThird = (l) => {\n    const sortedThird = l.filter((_, i) => i % 3 === 0).sort((a, b) => a - b);\n    return l.map((e, i) => i % 3 === 0 ? sortedThird[i / 3] : e);\n}\n",
            "export const listUnique = (l) => {\n    const uniqueList = [];\n    for (const item of l) {\n        if (!uniqueList.includes(item)) {\n            uniqueList.push(item);\n        }\n    }\n    return uniqueList.sort((a, b) => a - b);\n}\n",
            "export const maxElement = (l) => {\n    let maxValue = Number.NEGATIVE_INFINITY;\n    for (let i of l) {\n        if (i > maxValue) {\n            maxValue = i;\n        }\n    }\n    return maxValue;\n}\n",
            "export const fizzBuzz = (n) => {\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += (i + \"\").split(\"7\").length;\n        }\n    }\n    return cnt;\n}\n",
            "export const sortEven = (l) => {\n    const sortedEven = l.filter((_, i) => i % 2 === 0).sort((a, b) => a - b);\n    return l.map((e, i) => i % 2 === 0 ? sortedEven[i / 2] : e);\n}\n",
            "export const encodeCyclic = (s) => {\n    const result = [];\n    for (let i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.push(s.substring(i));\n        } else {\n            result.push(s.substring(i + 1, i + 3));\n            result.push(s[i]);\n        }\n    }\n    return result.join(\"\");\n}\nexport const decodeCyclic = (s) => {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const primeFib = (n) => {\n    let f = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\n",
            "export const triplesSumToZero = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "export const carRaceCollision = (n) => {\n    return n ** 2;\n}\n",
            "export const incrList = (l) => {\n    return l.map((i) => i + 1);\n}\n",
            "export const pairsSumToZero = (l) => {\n    const seen = new Set();\n    for (const num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "export const changeBase = (x, bas) => {\n    if (x === 0) {\n        return \"0\";\n    }\n    let result = \"\";\n    while (x > 0) {\n        result = (x % bas).toString() + result;\n        x = Math.floor(x / bas);\n    }\n    return result;\n}\n",
            "export const triangleArea = (a, h) => {\n    return a * h / 2;\n}\n",
            "export const fib4 = (n) => {\n    const fib = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2];\n    }\n    return fib[n % 4];\n}\n",
            "export const median = (l) => {\n    const sl = l.slice().sort((a, b) => a - b);\n    if (l.length % 2 !== 0) {\n        return sl[Math.floor(l.length / 2)];\n    } else {\n        return (sl[Math.floor(l.length / 2)] + sl[Math.floor(l.length / 2) - 1]) / 2;\n    }\n}\n",
            "export const isPalindrome = (txt) => {\n    for (let i = 0; i < txt.length / 2; i++) {\n        if (txt[i] !== txt[txt.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const modp = (n, p) => {\n    let ret = 1;\n    for (let _ = 0; _ < n; _++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "export const encodeShift = (s) => {\n    return s.split(\"\").map((ch) => String.fromCharCode(((ch.charCodeAt(0) - 97 + 5) % 26) + 97)).join(\"\");\n}\nexport const decodeShift = (s) => {\n    return s.split(\"\").map((ch) => String.fromCharCode(((ch.charCodeAt(0) - 97 + 21) % 26) + 97)).join(\"\");\n}\n",
            "export const removeVowels = (txt) => {\n    const vowels = \"aeiouAEIOU\";\n    let result = \"\";\n    for (let i = 0; i < txt.length; i++) {\n        const char = txt[i];\n        if (vowels.indexOf(char) === -1) {\n            result += char;\n        }\n    }\n    return result;\n}\n",
            "export const belowThreshold = (l, t) => {\n    for (let x of l) {\n        if (x >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const add = (x, y) => {\n    return x + y;\n}\n",
            "export const sameChars = (s0, s1) => {\n    const s0Set = new Set(s0);\n    const s1Set = new Set(s1);\n    return s0Set.size === s1Set.size && [...s0Set].every(c => s1Set.has(c));\n}\n",
            "export const fib = (n) => {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n};\n",
            "export const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"<\") {\n            depth += 1;\n        } else if (b === \">\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const monotonic = (l) => {\n    const diff = l.slice(1).map((y, i) => y - l[i]);\n    return diff.every((x) => x <= 0) || diff.every((x) => x >= 0);\n}\n",
            "export const common = (l1, l2) => {\n    const result = [];\n    for (const i of l1) {\n        if (l2.includes(i)) {\n            result.push(i);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n",
            "export const largestPrimeFactor = (n) => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i++;\n        } else {\n            n = Math.floor(n / i);\n        }\n    }\n    return n;\n}\n",
            "export const sumToN = (n) => {\n    let result = 0;\n    for (let i = 0; i <= n; i++) {\n        result += i;\n    }\n    return result;\n}\n",
            "export const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"(\") {\n            depth += 1;\n        } else if (b === \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const derivative = (xs) => {\n    const result = [];\n    for (let i = 1; i < xs.length; i++) {\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n",
            "export const fibfib = (n) => {\n    if (n <= 1) {\n        return 0;\n    }\n    let a = 0;\n    let b = 0;\n    let c = 1;\n    while (n > 2) {\n        [a, b, c] = [b, c, a + b + c];\n        n -= 1;\n    }\n    return c;\n}\n",
            "export const vowelsCount = (s) => {\n    const vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase()) || (i === s.length - 1 && s[i].toLowerCase() === \"y\")) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n",
            "export const circularShift = (x, shift) => {\n    const xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.split(\"\").reverse().join(\"\");\n    } else {\n        return xStr.slice(-shift) + xStr.slice(0, -shift);\n    }\n}\n",
            "export const digitSum = (s) => {\n    let sumValue = 0;\n    for (let i = 0; i < s.length; i++) {\n        const c = s[i];\n        if (c >= \"A\" && c <= \"Z\") {\n            sumValue += c.charCodeAt(0);\n        }\n    }\n    return sumValue;\n}\n",
            "export const fruitDistribution = (s, n) => {\n    const words = s.split(\" \");\n    const apples = parseInt(words[words.indexOf(\"apples\") - 1]);\n    const oranges = parseInt(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "export const pluck = (arr) => {\n    const evens = arr.filter((n) => n % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n    const minEven = Math.min(...evens);\n    return [minEven, arr.indexOf(minEven)];\n}\n",
            "export const search = (lst) => {\n    const freqs = {};\n    for (const n of lst) {\n        if (!(n in freqs)) {\n            freqs[n] = 0;\n        }\n        freqs[n] += 1;\n    }\n    const goodVals = Object.keys(freqs).filter((k) => freqs[k] >= parseInt(k));\n    if (goodVals.length > 0) {\n        return Math.max(...goodVals);\n    } else {\n        return -1;\n    }\n}\n",
            "export const strangeSortList = (lst) => {\n    const sl = lst.slice().sort((a, b) => a - b);\n    const result = [];\n    let left = 0, right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left++;\n        if (left <= right) {\n            result.push(sl[right]);\n            right--;\n        }\n    }\n    return result;\n}\n",
            "export const triangleArea = (a, b, c) => {\n    const s = (a + b + c) / 2.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "export const willItFly = (q, w) => {\n    if (q.length === 0) {\n        return false;\n    }\n    let isPalin = true;\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== q[q.length - i - 1]) {\n            isPalin = false;\n        }\n    }\n    let total = 0;\n    for (let i of q) {\n        total += i;\n    }\n    return isPalin && total <= w;\n}\n",
            "export const smallestChange = (arr) => {\n    let ans = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i] !== arr[arr.length - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;\n}\n",
            "export const totalMatch = (lst1, lst2) => {\n    let cnt1 = 0;\n    for (const s of lst1) {\n        cnt1 += s.length;\n    }\n    let cnt2 = 0;\n    for (const s of lst2) {\n        cnt2 += s.length;\n    }\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n",
            "export const isMultiplyPrime = (a) => {\n    if (a < 2) {\n        return false;\n    }\n    let cnt = 0;\n    for (let i = 2; i <= Math.floor(Math.sqrt(a)) + 1; i++) {\n        if (a % i === 0) {\n            while (a % i === 0) {\n                cnt++;\n                a /= i;\n            }\n        }\n    }\n    return cnt === 3;\n}\n",
            "export const isSimplePower = (x, n) => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}\n",
            "export const isCube = (a) => {\n    a = Math.abs(a);\n    const root = Math.round(Math.pow(a, 1 / 3));\n    return root * root * root === a;\n}\n",
            "export const hexKey = (num) => {\n    let count = 0;\n    for (let x of num) {\n        if (\"2357BD\".includes(x)) {\n            count += 1;\n        }\n    }\n    return count;\n}\n",
            "export const decimalToBinary = (dec) => {\n    const binary = dec.toString(2);\n    return `db${binary}db`;\n}\n",
            "export const isHappy = (s) => {\n    if (s.length < 3) {\n        return false;\n    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const numericalLetterGrade = (grades) => {\n    const result = grades.map((g) => {\n        if (g === 4.0) {\n            return \"A+\";\n        } else if (g > 3.7) {\n            return \"A\";\n        } else if (g > 3.3) {\n            return \"A-\";\n        } else if (g > 3.0) {\n            return \"B+\";\n        } else if (g > 2.7) {\n            return \"B\";\n        } else if (g > 2.3) {\n            return \"B-\";\n        } else if (g > 2.0) {\n            return \"C+\";\n        } else if (g > 1.7) {\n            return \"C\";\n        } else if (g > 1.3) {\n            return \"C-\";\n        } else if (g > 1.0) {\n            return \"D+\";\n        } else if (g > 0.7) {\n            return \"D\";\n        } else if (g > 0.0) {\n            return \"D-\";\n        } else {\n            return \"E\";\n        }\n    });\n    return result;\n}\n",
            "export const primeLength = (s) => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(length)) + 1; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const startsOneEnds = (n) => {\n    if (n === 1) {\n        return 1;\n    }\n    let result = 2 * 9 * Math.pow(10, n - 2);\n    return result;\n}\n",
            "export const solve = (n) => {\n    let digitsSum = 0;\n    for (let d of String(n)) {\n        digitsSum += parseInt(d);\n    }\n    return digitsSum.toString(2).slice(1);\n}\n",
            "export const add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1 && lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const antiShuffle = (s) => {\n    const words = s.split(\" \").map((word) => word.split(\"\").sort().join(\"\"));\n    return words.join(\" \");\n}\n",
            "export const getRow = (lst, x) => {\n    const coords = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    return coords.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n",
            "export const sortArray = (arr) => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) {\n        return arr.sort((a, b) => b - a);\n    } else {\n        return arr.sort((a, b) => a - b);\n    }\n}\n",
            "export const encrypt = (s) => {\n    let result = [];\n    for (let i = 0; i < s.length; i++) {\n        let shifted = s.charCodeAt(i) + 4;\n        if (shifted > \"z\".charCodeAt(0)) {\n            shifted -= 26;\n        }\n        result.push(String.fromCharCode(shifted));\n    }\n    return result.join(\"\");\n}\n",
            "export const nextSmallest = (lst) => {\n    const uniqueList = new Set(lst);\n    const sortedList = [...uniqueList].sort((a, b) => a - b);\n    if (sortedList.length < 2) {\n        return null;\n    }\n    return sortedList[1];\n}\n",
            "export const isBored = (s) => {\n    const sentences = s.split(/[.!?]\\s*/);\n    let count = 0;\n    for (const sentence of sentences) {\n        if (sentence.startsWith(\"I \") && sentence.length >= 2) {\n            count += 1;\n        }\n    }\n    return count;\n}\n",
            "export const anyInt = (x, y, z) => {\n    if (typeof x === \"number\" && typeof y === \"number\" && typeof z === \"number\") {\n        return (x + y === z) || (x + z === y) || (y + z === x);\n    }\n    return false;\n}\n",
            "export const encode = (message) => {\n    const vowels = \"aeiouAEIOU\";\n    const result = [];\n    for (let i = 0; i < message.length; i++) {\n        const ch = message[i];\n        if (ch.match(/[a-zA-Z]/)) {\n            let ch1 = ch.toUpperCase() === ch ? ch.toLowerCase() : ch.toUpperCase();\n            if (vowels.includes(ch1)) {\n                ch1 = String.fromCharCode(ch1.charCodeAt(0) + 2);\n            }\n            result.push(ch1);\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n}\n",
            "const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\nexport const skjkasdkd = (lst) => {\n    const primes = lst.filter(isPrime);\n    if (primes.length === 0) {\n        return 0;\n    }\n    const largest = Math.max(...primes).toString();\n    return largest.split(\"\").reduce((a, b) => a + parseInt(b), 0);\n};\n",
            "export const checkDictCase = (d) => {\n    if (!d.size) {\n        return false;\n    }\n    let lowerCaseKeys = true;\n    let upperCaseKeys = true;\n    for (const key of d.keys()) {\n        if (!key.toLowerCase() === key) {\n            lowerCaseKeys = false;\n        }\n        if (!key.toUpperCase() === key) {\n            upperCaseKeys = false;\n        }\n    }\n    return lowerCaseKeys || upperCaseKeys;\n}\n",
            "export const countUpTo = (n) => {\n    const primes = [];\n    for (let num = 2; num <= n; num++) {\n        let isPrime = true;\n        for (const p of primes) {\n            if (num % p === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push(num);\n        }\n    }\n    return primes;\n}\n",
            "export const multiply = (a, b) => {\n    let result = 0;\n    for (let i = 0; i < Math.abs(a) % 10; i++) {\n        result += Math.abs(b) % 10;\n    }\n    return result;\n}\n",
            "export const countUpper = (s) => {\n    const vowels = \"AEIOU\";\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (i % 2 === 0 && vowels.includes(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "export const closestInteger = (value) => {\n    const num = parseFloat(value);\n    if (num >= 0) {\n        return Math.round(num);\n    } else {\n        return Math.round(num - 0.5);\n    }\n}\n",
            "export const makeAPile = (n) => {\n    const result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(n + 2 * i);\n    }\n    return result;\n}\n",
            "export const wordsString = (s) => {\n    const result = s.split(/[, ]/).filter((w) => w.length > 0);\n    return result;\n}\n",
            "export const chooseNum = (x, y) => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    if (x !== y) {\n        return y - 1;\n    }\n    return -1;\n}\n",
            "export const roundedAvg = (n, m) => {\n    if (n > m) {\n        return null;\n    }\n    const rAvg = Math.floor((m + n) / 2);\n    const result = rAvg.toString(2);\n    return result;\n}\n",
            "export const allDigitsOdd = (s) => {\n    for (const digit of s) {\n        if (digit.charCodeAt(0) % 2 === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const uniqueDigits = (x) => {\n    const result = [];\n    for (const num of x) {\n        if (allDigitsOdd(num.toString())) {\n            result.push(num);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n",
            "export const byLength = (arr) => {\n    const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const sortedArr = arr.filter((x) => x >= 1 && x <= 9).sort((a, b) => b - a);\n    return sortedArr.map((x) => digitNames[x - 1]);\n}\n",
            "export const f = (n) => {\n    const nums = [...Array(n + 1).keys()].slice(1);\n    const result = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 !== 0) {\n            result.push(nums.slice(0, i + 1).reduce((a, b) => a + b));\n        } else {\n            result.push(nums.slice(0, i + 1).reduce((a, b) => a * b));\n        }\n    }\n    return result;\n}\n",
            "export const isPalindrome = (txt) => {\n    return txt === txt.split(\"\").reverse().join(\"\");\n}\nexport const evenOddPalindrome = (n) => {\n    const cnt = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const countNums = (arr) => {\n    let countValue = 0;\n    for (let n of arr) {\n        if (digitsSum(n) > 0) {\n            countValue += 1;\n        }\n    }\n    return countValue;\n}\nconst digitsSum = (n) => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        let sumValue = 0;\n        for (const d of nStr) {\n            sumValue += parseInt(d);\n        }\n        return sumValue;\n    } else {\n        return parseInt(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n    }\n}\n",
            "export const moveOneBall = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    const sortedArr = arr.slice().sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.slice(i).toString() === sortedArr.slice(arr.length - i).toString() && arr.slice(0, i).toString() === sortedArr.slice(sortedArr.length - i).toString()) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const canExchange = (lst1, lst2) => {\n    let oddCnt = 0;\n    let evenCnt = 0;\n    for (const num of lst1) {\n        if (num % 2 !== 0) {\n            oddCnt += 1;\n        }\n    }\n    for (const num of lst2) {\n        if (num % 2 === 0) {\n            evenCnt += 1;\n        }\n    }\n    return evenCnt >= oddCnt ? \"YES\" : \"NO\";\n}\n",
            "export const histogram = (test) => {\n    const freq = {};\n    const words = test.split(\" \").filter((w) => w.length > 0);\n    for (const w of words) {\n        freq[w] = freq[w] || 0;\n        freq[w] += 1;\n    }\n    const result = {};\n    if (Object.keys(freq).length > 0) {\n        const maxFreq = Math.max(...Object.values(freq));\n        for (const [k, v] of Object.entries(freq)) {\n            if (v === maxFreq) {\n                result[k] = v;\n            }\n        }\n    }\n    return result;\n}\n",
            "export const isPalindrome = (s) => {\n    return s === s.split(\"\").reverse().join(\"\");\n}\nexport const reverseDelete = (s, c) => {\n    const s1 = s.replace(new RegExp(`[${c}]`, \"g\"), \"\");\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"];\n}\n",
            "export const oddCount = (lst) => {\n    const result = [];\n    for (let i = 0; i < lst.length; i++) {\n        const num = lst[i];\n        let n = 0;\n        for (let j = 0; j < num.length; j++) {\n            const d = num[j];\n            if (d.charCodeAt(0) % 2 === 1) {\n                n++;\n            }\n        }\n        const rs = \"the number of odd elements in the string i of the input.\".replace(\"i\", String(n));\n        result.push(rs);\n    }\n    return result;\n}\n",
            "export const minSubArraySum = (nums) => {\n    let minSum = 0;\n    let curSum = 0;\n    for (let n of nums) {\n        curSum = Math.min(curSum + n, 0);\n        minSum = Math.min(curSum, minSum);\n    }\n    if (minSum === 0) {\n        minSum = Math.min(...nums);\n    }\n    return minSum;\n}\n",
            "export const maxFill = (grid, capacity) => {\n    let result = 0;\n    for (const arr of grid) {\n        const sumArr = arr.reduce((a, b) => a + b);\n        result += Math.ceil(sumArr / capacity);\n    }\n    return result;\n}\n",
            "export const countOnes = (num) => {\n    let count = 0;\n    while (num > 0) {\n        if (num & 1 === 1) {\n            count++;\n        }\n        num >>= 1;\n    }\n    return count;\n};\nexport const sortArray = (arr) => {\n    const sortedArr = arr.sort((a, b) => countOnes(a) - countOnes(b) || a - b);\n    return sortedArr;\n};\n",
            "export const selectWords = (s, n) => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = s.split(\" \").filter(w => w.length > 0);\n    const result = [];\n    for (const w of words) {\n        let count = 0;\n        for (const c of w) {\n            if (consonants.includes(c.toLowerCase())) {\n                count += 1;\n            }\n        }\n        if (count === n) {\n            result.push(w);\n        }\n    }\n    return result;\n}\n",
            "export const getClosestVowel = (word) => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "export const check = (s) => {\n    let depth = 0;\n    for (const ch of s) {\n        if (ch === \"(\") {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n};\nexport const matchParens = (lst) => {\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    if (check(s1) || check(s2)) {\n        return \"Yes\";\n    }\n    return \"No\";\n};\n",
            "export const maximum = (arr, k) => {\n    if (k === 0) {\n        return [];\n    }\n    const result = [...arr];\n    result.sort((a, b) => b - a);\n    return result.slice(-k);\n}\n",
            "export const solution = (lst) => {\n    let sumValue = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sumValue += lst[i];\n        }\n    }\n    return sumValue;\n}\n",
            "export const addElements = (arr, k) => {\n    let sumValue = 0;\n    for (let i = 0; i < k; i++) {\n        if (String(arr[i]).length <= 2) {\n            sumValue += arr[i];\n        }\n    }\n    return sumValue;\n}\n",
            "export const getOddCollatz = (n) => {\n    let collatz = [1];\n    while (n !== 1) {\n        if (n % 2 !== 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = Math.floor(n / 2);\n        }\n    }\n    return collatz.sort((a, b) => a - b);\n}\n",
            "export const validDate = (date) => {\n    if (date.length !== 10 || date[2] !== \"-\" || date[5] !== \"-\") {\n        return false;\n    }\n    const m = parseInt(date.substring(0, 2));\n    const d = parseInt(date.substring(3, 5));\n    if ([1, 3, 5, 7, 8, 10, 12].includes(m) && d >= 1 && d <= 31) {\n        return true;\n    }\n    if ([4, 6, 9, 11].includes(m) && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m === 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "export const splitWords = (txt) => {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [String(txt.split(\"\").filter((c) => c.toLowerCase() === c && c.charCodeAt(0) % 2 === 0).length)];\n    }\n}\n",
            "export const isSorted = (lst) => {\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n    const freq = {};\n    for (const i of lst) {\n        freq[i] = (freq[i] || 0) + 1;\n    }\n    return Math.max(...Object.values(freq)) <= 2;\n}\n",
            "const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\nexport const intersection = (interval1, interval2) => {\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n    if (length > 0 && isPrime(length)) {\n        return \"YES\";\n    }\n    return \"NO\";\n};\n",
            "export const prodSigns = (arr) => {\n    if (!arr.length) {\n        return null;\n    }\n    if (arr.includes(0)) {\n        return 0;\n    }\n    const sign = arr.filter((n) => n < 0).length % 2 === 1 ? -1 : 1;\n    let result = 0;\n    for (const n of arr) {\n        result += Math.abs(n);\n    }\n    return sign * result;\n}\n",
            "export const minPath = (grid, k) => {\n    const n = grid.length;\n    let minVal = n * n + 1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                let temp = [];\n                if (i !== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j !== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i !== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j !== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                minVal = Math.min(...temp);\n            }\n        }\n    }\n    const result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(1 if i % 2 == 0 else minVal);\n    }\n    return result;\n}\n",
            "export const tri = (n) => {\n    if (n === 0) {\n        return [1];\n    }\n    let seq = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(Math.floor(i / 2) + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + Math.floor((i + 3) / 2));\n        }\n    }\n    return seq;\n}\n",
            "export const digits = (n) => {\n    const odds = [...String(n)].map((d) => parseInt(d)).filter((d) => d % 2 === 1);\n    let result = 1;\n    for (const d of odds) {\n        result *= d;\n    }\n    return result > 0 ? result : 0;\n}\n",
            "export const isNested = (s) => {\n    const openIdx = [];\n    const closeIdx = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === \"[\") {\n            openIdx.push(i);\n        } else if (s[i] === \"]\") {\n            closeIdx.push(i);\n        }\n    }\n    closeIdx.reverse();\n    let cnt = 0;\n    let i = 0;\n    const l = closeIdx.length;\n    for (const idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "export const sumSquares = (lst) => {\n    let result = 0;\n    for (let n of lst) {\n        result += Math.pow(Math.ceil(n), 2);\n    }\n    return result;\n}\n",
            "export const checkIfLastCharIsALetter = (txt) => {\n    if (!txt) {\n        return false;\n    }\n    const last = txt.slice(txt.lastIndexOf(\" \") + 1);\n    return last.length === 1 && last[0].isAlpha();\n}\n",
            "export const canArrange = (arr) => {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    const idx = [];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            idx.push(i);\n        }\n    }\n    return Math.max(...idx, -1);\n}\n",
            "export const largestSmallestIntegers = (lst) => {\n    let maxNeg = null;\n    let minPos = null;\n    for (let i of lst) {\n        if (i < 0) {\n            if (maxNeg === null || i > maxNeg) {\n                maxNeg = i;\n            }\n        } else if (i > 0) {\n            if (minPos === null || i < minPos) {\n                minPos = i;\n            }\n        }\n    }\n    return [maxNeg, minPos];\n}\n",
            "export const anyToReal = (o) => {\n    if (typeof o === \"string\") {\n        return parseFloat(o.replace(\",\", \".\"));\n    } else if (typeof o === \"number\") {\n        return parseFloat(o);\n    } else if (typeof o === \"float\") {\n        return o;\n    } else {\n        throw new Error(\"Type Error\");\n    }\n};\nexport const compareOne = (a, b) => {\n    const a1 = anyToReal(a);\n    const b1 = anyToReal(b);\n    if (a1 === b1) {\n        return null;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n};\n",
            "export const isEqualToSumEven = (n) => {\n    return n % 2 === 0 && n >= 8;\n}\n",
            "export const specialFactorial = (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        let fact = 1;\n        for (let j = 1; j <= i; j++) {\n            fact *= j;\n        }\n        result *= fact;\n    }\n    return result;\n}\n",
            "export const fixSpaces = (txt) => {\n    return txt.replace(/\\s{3,}/g, \"-\").replace(/ /g, \"_\");\n}\n",
            "export const fileNameCheck = (fileName) => {\n    const suf = [\"txt\", \"exe\", \"dll\"];\n    const lst = fileName.split(\".\");\n    if (lst.length !== 2 || !suf.includes(lst[1]) || lst[0].length === 0 || !lst[0][0].match(/[a-zA-Z]/) || lst[0].match(/[0-9]/g).length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "export const sumSquares = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0) {\n            result += Math.pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    const result = [];\n    for (const w of words) {\n        if (isPrime(w.length)) {\n            result.push(w);\n        }\n    }\n    return result.join(\" \");\n}\n",
            "export const simplify = (x, n) => {\n    const xs = x.split(\"/\");\n    const ns = n.split(\"/\");\n    const num = parseInt(xs[0]) * parseInt(ns[0]);\n    const den = parseInt(xs[1]) * parseInt(ns[1]);\n    return num % den === 0;\n}\n",
            "export const digitsSum = (n) => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        let result = 0;\n        for (const d of nStr) {\n            result += parseInt(d);\n        }\n        return result;\n    } else {\n        return parseInt(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n    }\n};\nexport const orderByPoints = (nums) => {\n    const result = [];\n    for (const num of nums) {\n        result.push(num);\n    }\n    result.sort((a, b) => digitsSum(a) - digitsSum(b));\n    return result;\n}\n",
            "export const specialFilter = (nums) => {\n    const odds = \"13579\";\n    let count = 0;\n    for (const n of nums) {\n        if (n > 10 && n % 2 === 1 && odds.includes(String(n)[0])) {\n            count += 1;\n        }\n    }\n    return count;\n}\n",
            "export const getMaxTriples = (n) => {\n    const c = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        const a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}\n",
            "export const bf = (planet1, planet2) => {\n    const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.includes(planet1) || !names.includes(planet2)) {\n        return [];\n    }\n    let l = names.indexOf(planet1);\n    let r = names.indexOf(planet2);\n    if (l > r) {\n        [l, r] = [r, l];\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n}\n",
            "export const sortedListSum = (lst) => {\n    const result = [];\n    for (const s of lst) {\n        if (s.length % 2 === 0) {\n            result.push(s);\n        }\n    }\n    result.sort((a, b) => a.length === b.length ? a.localeCompare(b) : a.length - b.length);\n    return result;\n}\n",
            "export const xOrY = (n, x, y) => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "export const doubleTheDifference = (lst) => {\n    let result = 0;\n    for (let n of lst) {\n        if (n >= 0 && n % 2 === 1) {\n            result += n * n;\n        }\n    }\n    return result;\n}\n",
            "export const compare = (game, guess) => {\n    const result = [];\n    for (let i = 0; i < game.length; i++) {\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}\n",
            "export const strongestExtension = (className, extensions) => {\n    let maxS = -Infinity;\n    let maxExt = \"\";\n    for (const ext of extensions) {\n        let upper = 0;\n        let lower = 0;\n        for (const c of ext) {\n            if (c.toUpperCase() === c) {\n                upper += 1;\n            } else {\n                lower += 1;\n            }\n        }\n        const s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return `${className}.${maxExt}`;\n}\n",
            "export const cycpatternCheck = (a, b) => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; i++) {\n        if (b.slice(i) + b.slice(0, i) in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const evenOddCount = (num) => {\n    const ds = Math.abs(num).toString();\n    let even = 0;\n    for (const d of ds) {\n        if (d.charCodeAt(0) % 2 === 0) {\n            even += 1;\n        }\n    }\n    return [even, ds.length - even];\n}\n",
            "export const intToMiniRoman = (num) => {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    const res = [];\n    for (let i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.push(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join(\"\");\n}\n",
            "export const rightAngleTriangle = (a, b, c) => {\n    const s = [a, b, c].sort((a, b) => a - b);\n    return s[0] * s[0] + s[1] * s[1] === s[2] * s[2];\n}\n",
            "export const findMax = (words) => {\n    let maxCnt = 0;\n    let maxW = \"\";\n    for (const w of words) {\n        const cnt = new Set(w).size;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt === maxCnt) {\n            maxW = Math.min(maxW, w);\n        }\n    }\n    return maxW;\n}\n",
            "export const eat = (num, need, remaining) => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "export const doAlgebra = (operators, operands) => {\n    let ops = [...operators];\n    let nums = [...operands];\n    let i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] === \"**\") {\n            nums[i] = Math.pow(nums[i], nums[i + 1]);\n            nums.pop(i + 1);\n            ops.pop(i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        } else if (ops[i] === \"//\") {\n            nums[i] = Math.floor(nums[i] / nums[i + 1]);\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        } else if (ops[i] === \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.pop(i + 1);\n            ops.pop(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "export const solve = (s) => {\n    const result = [];\n    for (let i = 0; i < s.length; i++) {\n        const ch = s[i];\n        if (!ch.match(/[a-zA-Z]/)) {\n            result.push(ch);\n        } else if (ch.toUpperCase() === ch) {\n            result.push(ch.toLowerCase());\n        } else {\n            result.push(ch.toUpperCase());\n        }\n    }\n    if (!result.some((ch) => ch.match(/[a-zA-Z]/))) {\n        return result.reverse().join(\"\");\n    }\n    return result.join(\"\");\n}\n",
            "export const stringToMd5 = (txt) => {\n    if (!txt) {\n        return null;\n    }\n    const md5Hash = crypto.createHash(\"md5\");\n    const txtBytes = Buffer.from(txt);\n    md5Hash.update(txtBytes);\n    const md5Encoded = md5Hash.digest(\"hex\");\n    return md5Encoded;\n}\n",
            "export const generateIntegers = (a, b) => {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n    const result = [];\n    for (let i = lower; i <= upper; i++) {\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n"
        ],
        "kotlin": [
            "fun hasCloseElements(numbers: List<Double>, threshold: Double): Boolean {\n    for (i in numbers.indices) {\n        for (j in i + 1 until numbers.size) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "fun separateParenGroups(parenString: String): List<String> {\n    val groups = mutableListOf<String>()\n    val stk = mutableListOf<Char>()\n    var currentGroup = \"\"\n    val parens = parenString.replace(\" \", \"\")\n    for (ch in parens) {\n        if (ch == '(') {\n            stk.add(ch)\n            currentGroup += ch\n        } else if (ch == ')') {\n            stk.removeLast()\n            currentGroup += ch\n            if (stk.isEmpty()) {\n                groups.add(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "fun truncateNumber(num: Double): Double {\n    return num - floor(num)\n}\n",
            "fun belowZero(operations: List<Int>): Boolean {\n    var balance = 0\n    for (op in operations) {\n        balance += op\n        if (balance < 0) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun meanAbsoluteDeviation(numbers: List<Double>): Double {\n    val mean = numbers.sum() / numbers.size\n    var deviation = 0.0\n    for (x in numbers) {\n        deviation += abs(x - mean)\n    }\n    return deviation / numbers.size\n}\n",
            "fun intersperse(numbers: List<Int>, delimiter: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in 0 until numbers.size) {\n        if (i != 0) {\n            result.add(delimiter)\n        }\n        result.add(numbers[i])\n    }\n    return result\n}\n",
            "fun parseNestedParens(parenString: String): List<Int> {\n    val result = mutableListOf<Int>()\n    val parenGroups = parenString.split(\" \")\n    for (group in parenGroups) {\n        var maxDepth = 0\n        var depth = 0\n        for (ch in group) {\n            if (ch == '(') {\n                depth += 1\n                maxDepth = maxOf(maxDepth, depth)\n            } else if (ch == ')') {\n                depth -= 1\n            }\n        }\n        result.add(maxDepth)\n    }\n    return result\n}\n",
            "fun filterBySubstring(strs: List<String>, substring: String): List<String> {\n    val result = mutableListOf<String>()\n    for (s in strs) {\n        if (s.contains(substring)) {\n            result.add(s)\n        }\n    }\n    return result\n}\n",
            "fun sumProduct(numbers: List<Int>): List<Int> {\n    var nSum = 0\n    var nProduct = 1\n    for (n in numbers) {\n        nSum += n\n        nProduct *= n\n    }\n    return listOf(nSum, nProduct)\n}\n",
            "fun rollingMax(numbers: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    var maxSoFar = Int.MIN_VALUE\n    for (num in numbers) {\n        if (num > maxSoFar) {\n            maxSoFar = num\n        }\n        result.add(maxSoFar)\n    }\n    return result\n}\n",
            "fun isPalindrome(s: String): Boolean {\n    return s == s.reversed()\n}\nfun makePalindrome(s: String): String {\n    if (isPalindrome(s)) return s\n    for (i in 0 until s.length) {\n        if (isPalindrome(s.substring(i))) return s + s.substring(0, i).reversed()\n    }\n    return \"\"\n}\n",
            "fun stringXor(a: String, b: String): String {\n    var result = \"\"\n    for (i in 0 until a.length) {\n        if (a[i] == b[i]) {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n    return result\n}\n",
            "fun longest(strs: List<String>): String? {\n    if (strs.isEmpty()) return null\n    var longestS = strs[0]\n    for (s in strs) {\n        if (s.length > longestS.length) {\n            longestS = s\n        }\n    }\n    return longestS\n}\n",
            "fun greatestCommonDivisor(a: Int, b: Int): Int {\n    while (b != 0) {\n        val temp = a\n        a = b\n        b = temp % b\n    }\n    return a\n}\n",
            "fun allPrefixes(s: String): List<String> {\n    val prefixes = mutableListOf<String>()\n    for (i in 0..s.length - 1) {\n        prefixes.add(s.substring(0, i + 1))\n    }\n    return prefixes\n}\n",
            "fun stringSequence(n: Int): String {\n    var result = \"\"\n    for (i in 0..n) {\n        result += \"${i} \"\n    }\n    return result.substring(0, result.length - 1)\n}\n",
            "fun countDistinctCharacters(s: String): Int {\n    val distinctCharacters = mutableSetOf<Char>()\n    for (char in s.toLowerCase()) {\n        distinctCharacters.add(char)\n    }\n    return distinctCharacters.size\n}\n",
            "fun parseMusic(musicString: String): List<Int> {\n    val durations = mapOf(\"o\" to 4, \"o|\" to 2, \".|\" to 1)\n    val notes = musicString.split(\" \")\n    val result = mutableListOf<Int>()\n    for (note in notes) {\n        result.add(durations[note]!!)\n    }\n    return result\n}\n",
            "fun howManyTimes(s: String, substring: String): Int {\n    var times = 0\n    for (i in 0 until s.length - substring.length + 1) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "fun sortNumbers(numbers: String): String {\n    val numDict = mapOf(\n        \"zero\" to 0,\n        \"one\" to 1,\n        \"two\" to 2,\n        \"three\" to 3,\n        \"four\" to 4,\n        \"five\" to 5,\n        \"six\" to 6,\n        \"seven\" to 7,\n        \"eight\" to 8,\n        \"nine\" to 9\n    )\n    val numList = numbers.split(\" \").filter { numDict.containsKey(it) }.sortedBy { numDict[it]!! }\n    return numList.joinToString(\" \")\n}\n",
            "fun findClosestElements(numbers: List<Double>): List<Double> {\n    val sortedNumbers = numbers.sorted()\n    var minDiff = Double.MAX_VALUE\n    var closestPair = mutableListOf<Double>()\n    for (i in 1 until sortedNumbers.size) {\n        val diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if (diff < minDiff) {\n            minDiff = diff\n            closestPair = mutableListOf(sortedNumbers[i - 1], sortedNumbers[i])\n        }\n    }\n    return closestPair\n}\n",
            "fun rescaleToUnit(numbers: List<Double>): List<Double> {\n    var minNum = Double.POSITIVE_INFINITY\n    var maxNum = Double.NEGATIVE_INFINITY\n    for (num in numbers) {\n        if (num < minNum) {\n            minNum = num\n        }\n        if (num > maxNum) {\n            maxNum = num\n        }\n    }\n    if (minNum == maxNum) {\n        return List(numbers.size) { 0.0 }\n    } else {\n        return numbers.map { (num - minNum) / (maxNum - minNum) }\n    }\n}\n",
            "fun filterIntegers(values: List<Any>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (x in values) {\n        if (x is Int) {\n            result.add(x)\n        }\n    }\n    return result\n}\n",
            "fun strLength(s: String): Int {\n    var length = 0\n    for (char in s) {\n        length += 1\n    }\n    return length\n}\n",
            "fun largestDivisor(n: Int): Int {\n    for (i in 2..n) {\n        if (n % i == 0) return n / i\n    }\n    return 1\n}\n",
            "fun factorize(n: Int): List<Int> {\n    var divisor = 2\n    val factors = mutableListOf<Int>()\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.add(divisor)\n            n /= divisor\n        } else {\n            divisor++\n        }\n    }\n    return factors\n}\n",
            "fun removeDuplicates(numbers: List<Int>): List<Int> {\n    val counts = mutableMapOf<Int, Int>()\n    for (num in numbers) {\n        if (num !in counts) {\n            counts[num] = 1\n        } else {\n            counts[num] = counts[num]!! + 1\n        }\n    }\n    val res = mutableListOf<Int>()\n    for (num in numbers) {\n        if (counts[num] == 1) {\n            res.add(num)\n        }\n    }\n    return res\n}\n",
            "fun flipCase(s: String): String {\n    val flipped = mutableListOf<Char>()\n    for (ch in s) {\n        if (!ch.isLetter()) {\n            flipped.add(ch)\n        } else if (ch.isLowerCase()) {\n            flipped.add(ch.uppercaseChar())\n        } else if (ch.isUpperCase()) {\n            flipped.add(ch.lowercaseChar())\n        }\n    }\n    return flipped.joinToString(\"\")\n}\n",
            "fun concatenate(strs: List<String>): String {\n    var result = \"\"\n    for (s in strs) {\n        result += s\n    }\n    return result\n}\n",
            "fun filterByPrefix(strs: List<String>, prefixStr: String): List<String> {\n    val result = mutableListOf<String>()\n    for (s in strs) {\n        if (s.startsWith(prefixStr)) {\n            result.add(s)\n        }\n    }\n    return result\n}\n",
            "fun getPositive(l: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (num in l) {\n        if (num > 0) {\n            result.add(num)\n        }\n    }\n    return result\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2..floor(sqrt(n.toDouble())).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n",
            "fun poly(xs: List<Int>, x: Double): Double {\n    var res = 0.0\n    for (i in xs.indices) {\n        res += xs[i] * x.pow(i)\n    }\n    return res\n}\nfun findZero(xs: List<Int>): Double {\n    var x1 = 1.0\n    var x2 = -1.0\n    while (poly(xs, x1) * poly(xs, x2) > 0.0) {\n        x1 *= 2.0\n        x2 *= 2.0\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        val mid = (x1 + x2) / 2\n        if (poly(xs, mid) == 0.0) {\n            return mid\n        } else if (poly(xs, mid) * poly(xs, x1) < 0.0) {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "fun sortThird(l: List<Int>): List<Int> {\n    val sortedThird = l.sorted().filterIndexed { index, _ -> index % 3 == 0 }\n    val result = mutableListOf<Int>()\n    for (i in l.indices) {\n        if (i % 3 == 0) {\n            result.add(sortedThird[i / 3])\n        } else {\n            result.add(l[i])\n        }\n    }\n    return result\n}\n",
            "fun listUnique(l: List<Int>): List<Int> {\n    val uniqueList = mutableListOf<Int>()\n    for (item in l) {\n        if (!uniqueList.contains(item)) {\n            uniqueList.add(item)\n        }\n    }\n    return uniqueList.sorted()\n}\n",
            "fun maxElement(l: List<Int>): Int {\n    var maxValue = Int.MIN_VALUE\n    for (i in l) {\n        if (i > maxValue) {\n            maxValue = i\n        }\n    }\n    return maxValue\n}\n",
            "fun fizzBuzz(n: Int): Int {\n    var cnt = 0\n    for (i in 0 until n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString().count { it == '7' }\n        }\n    }\n    return cnt\n}\n",
            "fun sortEven(l: List<Int>): List<Int> {\n    val sortedEven = l.filterIndexed { index, _ -> index % 2 == 0 }.sorted()\n    val result = mutableListOf<Int>()\n    for (i in l.indices) {\n        if (i % 2 == 0) {\n            result.add(sortedEven[i / 2])\n        } else {\n            result.add(l[i])\n        }\n    }\n    return result\n}\n",
            "fun encodeCyclic(s: String): String {\n    val result = mutableListOf<String>()\n    for (i in 0 until s.length step 3) {\n        if (i + 3 > s.length) {\n            result.add(s.substring(i))\n        } else {\n            result.add(s.substring(i + 1, i + 3))\n            result.add(s[i].toString())\n        }\n    }\n    return result.joinToString(\"\")\n}\nfun decodeCyclic(s: String): String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2..floor(sqrt(n.toDouble())).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}\nfun primeFib(n: Int): Int {\n    var f = arrayListOf(0, 1)\n    var cnt = 0\n    while (cnt < n) {\n        f = arrayListOf(f[1], f[0] + f[1])\n        if (isPrime(f[1])) {\n            cnt += 1\n        }\n    }\n    return f[1]\n}\n",
            "fun triplesSumToZero(l: List<Int>): Boolean {\n    for (i in l.indices) {\n        for (j in i + 1 until l.size) {\n            for (k in j + 1 until l.size) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "fun carRaceCollision(n: Int): Int {\n    return n * n\n}\n",
            "fun incrList(l: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in l) {\n        result.add(i + 1)\n    }\n    return result\n}\n",
            "fun pairsSumToZero(l: List<Int>): Boolean {\n    val seen = mutableSetOf<Int>()\n    for (num in l) {\n        if (-num in seen) {\n            return true\n        }\n        seen.add(num)\n    }\n    return false\n}\n",
            "fun changeBase(x: Int, bas: Int): String {\n    if (x == 0) return \"0\"\n    var result = \"\"\n    while (x > 0) {\n        result = (x % bas).toString() + result\n        x /= bas\n    }\n    return result\n}\n",
            "fun triangleArea(a: Int, h: Int): Double {\n    return a.toDouble() * h / 2\n}\n",
            "fun fib4(n: Int): Int {\n    val fib = mutableListOf(0, 0, 2, 0)\n    for (i in 4..n) {\n        fib[i % 4] = fib.slice(IntRange(0, i % 4)).sum()\n    }\n    return fib[n % 4]\n}\n",
            "fun median(l: List<Double>): Double {\n    val sl = l.sorted()\n    return if (l.size % 2 != 0) sl[l.size / 2] else (sl[l.size / 2] + sl[l.size / 2 - 1]) / 2\n}\n",
            "fun isPalindrome(txt: String): Boolean {\n    for (i in 0 until txt.length / 2) {\n        if (txt[i] != txt[txt.length - 1 - i]) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun modp(n: Int, p: Int): Int {\n    var ret = 1\n    for (i in 0 until n) {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "fun encodeShift(s: String): String {\n    val result = StringBuilder()\n    for (ch in s) {\n        result.append(('a' + (ch.toInt() - 'a'.toInt() + 5) % 26).toChar())\n    }\n    return result.toString()\n}\nfun decodeShift(s: String): String {\n    val result = StringBuilder()\n    for (ch in s) {\n        result.append(('a' + (ch.toInt() - 'a'.toInt() + 21) % 26).toChar())\n    }\n    return result.toString()\n}\n",
            "fun removeVowels(txt: String): String {\n    val vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for (char in txt) {\n        if (!vowels.contains(char)) {\n            result += char\n        }\n    }\n    return result\n}\n",
            "fun belowThreshold(l: List<Int>, t: Int): Boolean {\n    for (x in l) {\n        if (x >= t) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun add(x: Int, y: Int): Int {\n    return x + y\n}\n",
            "fun sameChars(s0: String, s1: String): Boolean {\n    val s0Set = s0.toSet()\n    val s1Set = s1.toSet()\n    return s0Set == s1Set\n}\n",
            "fun fib(n: Int): Int {\n    if (n <= 1) {\n        return n\n    } else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n",
            "fun correctBracketing(brackets: String): Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == '<') {\n            depth += 1\n        } else if (b == '>') {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "fun monotonic(l: List<Int>): Boolean {\n    val diff = l.zipWithNext { x, y -> y - x }\n    return diff.all { x -> x <= 0 } || diff.all { x -> x >= 0 }\n}\n",
            "fun common(l1: List<Int>, l2: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in l1) {\n        if (l2.contains(i)) {\n            result.add(i)\n        }\n    }\n    return result.sorted()\n}\n",
            "fun largestPrimeFactor(n: Int): Int {\n    var i = 2\n    while (i * i <= n) {\n        if (n % i != 0) {\n            i++\n        } else {\n            n /= i\n        }\n    }\n    return n\n}\n",
            "fun sumToN(n: Int): Int {\n    var result = 0\n    for (i in 0..n) {\n        result += i\n    }\n    return result\n}\n",
            "fun correctBracketing(brackets: String): Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == '(') {\n            depth += 1\n        } else if (b == ')') {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "fun derivative(xs: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in 1 until xs.size) {\n        result.add(xs[i] * i)\n    }\n    return result\n}\n",
            "fun fibfib(n: Int): Int {\n    if (n <= 1) return 0\n    var a = 0\n    var b = 0\n    var c = 1\n    while (n > 2) {\n        a = b\n        b = c\n        c = a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "fun vowelsCount(s: String): Int {\n    val vowels = \"aeiou\"\n    var cnt = 0\n    for (i in 0 until s.length) {\n        if (s[i].toLowerCase() in vowels || (i == s.length - 1 && s[i].toLowerCase() == 'y')) {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "fun circularShift(x: Int, shift: Int): String {\n    val xStr = x.toString()\n    return if (shift > xStr.length) xStr.reversed() else xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift)\n}\n",
            "fun digitSum(s: String): Int {\n    var sumValue = 0\n    for (c in s) {\n        if (c.isUpperCase()) {\n            sumValue += c.toInt()\n        }\n    }\n    return sumValue\n}\n",
            "fun fruitDistribution(s: String, n: Int): Int {\n    val words = s.split(\" \")\n    val apples = words[words.indexOf(\"apples\") - 1].toInt()\n    val oranges = words[words.indexOf(\"oranges\") - 1].toInt()\n    return n - apples - oranges\n}\n",
            "fun pluck(arr: List<Int>): List<Int> {\n    val evens = arr.filter { it % 2 == 0 }\n    if (evens.isEmpty()) return listOf()\n    val minEven = evens.min()!!\n    return listOf(minEven, arr.indexOf(minEven))\n}\n",
            "fun search(lst: List<Int>): Int {\n    val freqs = mutableMapOf<Int, Int>()\n    for (n in lst) {\n        if (!freqs.containsKey(n)) {\n            freqs[n] = 0\n        }\n        freqs[n] = freqs[n]!! + 1\n    }\n    val goodVals = freqs.filter { it.value >= it.key }.keys\n    return if (goodVals.isNotEmpty()) goodVals.max()!! else -1\n}\n",
            "fun strangeSortList(lst: List<Int>): List<Int> {\n    val sl = lst.sorted()\n    val result = mutableListOf<Int>()\n    var left = 0\n    var right = sl.size - 1\n    while (left <= right) {\n        result.add(sl[left])\n        left++\n        if (left <= right) {\n            result.add(sl[right])\n            right--\n        }\n    }\n    return result\n}\n",
            "fun triangleArea(a: Int, b: Int, c: Int): Double {\n    val s = (a + b + c) / 2.0\n    return if (a + b > c && a + c > b && b + c > a) sqrt(s * (s - a) * (s - b) * (s - c)) else -1.0\n}\n",
            "fun willItFly(q: List<Int>, w: Int): Boolean {\n    if (q.isEmpty()) return false\n    var isPalin = true\n    for (i in 0 until q.size) {\n        if (q[i] != q[q.size - i - 1]) {\n            isPalin = false\n        }\n    }\n    var total = 0\n    for (i in q) {\n        total += i\n    }\n    return isPalin && total <= w\n}\n",
            "fun smallestChange(arr: List<Int>): Int {\n    var ans = 0\n    for (i in 0 until arr.size / 2) {\n        if (arr[i] != arr[arr.size - i - 1]) {\n            ans++\n        }\n    }\n    return ans\n}\n",
            "fun totalMatch(lst1: List<String>, lst2: List<String>): List<String> {\n    var cnt1 = 0\n    for (s in lst1) {\n        cnt1 += s.length\n    }\n    var cnt2 = 0\n    for (s in lst2) {\n        cnt2 += s.length\n    }\n    return if (cnt1 <= cnt2) lst1 else lst2\n}\n",
            "fun isMultiplyPrime(a: Int): Boolean {\n    if (a < 2) return false\n    for (i in 2..sqrt(a.toDouble()).toInt()) {\n        if (a % i == 0) return false\n    }\n    var cnt = 0\n    for (i in 2..a) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt++\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "fun isSimplePower(x: Int, n: Int): Boolean {\n    if (n < 2) return x == n\n    var tmp = 1\n    while (tmp < x) {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "fun isCube(a: Int): Boolean {\n    val root = kotlin.math.pow(kotlin.math.abs(a), 1.0 / 3.0).toInt()\n    return root * root * root == a\n}\n",
            "fun hexKey(num: String): Int {\n    var count = 0\n    for (x in num) {\n        if (x in listOf('2', '3', '5', '7', 'B', 'D')) {\n            count += 1\n        }\n    }\n    return count\n}\n",
            "fun decimalToBinary(dec: Int): String {\n    val binary = Integer.toBinaryString(dec)\n    return \"db$binary\"\n}\n",
            "fun isHappy(s: String): Boolean {\n    if (s.length < 3) {\n        return false\n    }\n    for (i in 0 until s.length - 2) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun numericalLetterGrade(grades: List<Double>): List<String> {\n    val result = mutableListOf<String>()\n    for (g in grades) {\n        if (g == 4.0) {\n            result.add(\"A+\")\n        } else if (g > 3.7) {\n            result.add(\"A\")\n        } else if (g > 3.3) {\n            result.add(\"A-\")\n        } else if (g > 3.0) {\n            result.add(\"B+\")\n        } else if (g > 2.7) {\n            result.add(\"B\")\n        } else if (g > 2.3) {\n            result.add(\"B-\")\n        } else if (g > 2.0) {\n            result.add(\"C+\")\n        } else if (g > 1.7) {\n            result.add(\"C\")\n        } else if (g > 1.3) {\n            result.add(\"C-\")\n        } else if (g > 1.0) {\n            result.add(\"D+\")\n        } else if (g > 0.7) {\n            result.add(\"D\")\n        } else if (g > 0.0) {\n            result.add(\"D-\")\n        } else {\n            result.add(\"E\")\n        }\n    }\n    return result\n}\n",
            "fun primeLength(s: String): Boolean {\n    val length = s.length\n    if (length < 2) {\n        return false\n    }\n    for (i in 2..floor(sqrt(length.toDouble())).toInt()) {\n        if (length % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun startsOneEnds(n: Int): Int {\n    return if (n == 1) 1 else 2 * 9 * (10.0.pow(n - 2).toInt())\n}\n",
            "fun solve(n: Int): String {\n    var digitsSum = 0\n    for (d in n.toString()) {\n        digitsSum += d.toInt() - '0'.toInt()\n    }\n    return digitsSum.toString(2).substring(1)\n}\n",
            "fun add(lst: List<Int>): Int {\n    var result = 0\n    for (i in lst.indices) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "fun antiShuffle(s: String): String {\n    val words = s.split(\" \").toMutableList()\n    for (i in 0 until words.size) {\n        words[i] = words[i].toCharArray().sorted().joinToString(\"\")\n    }\n    return words.joinToString(\" \")\n}\n",
            "fun getRow(lst: List<List<Int>>, x: Int): List<List<Int>> {\n    val coords = mutableListOf<List<Int>>()\n    for (i in lst.indices) {\n        for (j in lst[i].indices) {\n            if (lst[i][j] == x) {\n                coords.add(listOf(i, j))\n            }\n        }\n    }\n    return coords.sortedWith(compareBy({ it[0] }, { -it[1] }))\n}\n",
            "fun sortArray(arr: List<Int>): List<Int> {\n    if (arr.isEmpty()) return listOf()\n    return if ((arr[0] + arr.last()) % 2 == 0) arr.sortedDescending() else arr.sorted()\n}\n",
            "fun encrypt(s: String): String {\n    val result = StringBuilder()\n    for (ch in s) {\n        var shifted = ch.toInt() + 4\n        if (shifted > 'z'.toInt()) {\n            shifted -= 26\n        }\n        result.append(shifted.toChar())\n    }\n    return result.toString()\n}\n",
            "fun nextSmallest(lst: List<Int>): Int? {\n    val uniqueList = lst.toSet()\n    val sortedList = uniqueList.sorted()\n    if (sortedList.size < 2) {\n        return null\n    }\n    return sortedList[1]\n}\n",
            "fun isBored(s: String): Int {\n    val sentences = s.split(Regex(\"[.!?]\\\\s*\"))\n    var count = 0\n    for (sentence in sentences) {\n        if (sentence.length >= 2 && sentence.startsWith(\"I \")) {\n            count += 1\n        }\n    }\n    return count\n}\n",
            "fun anyInt(x: Any, y: Any, z: Any): Boolean {\n    return when {\n        x is Int && y is Int && z is Int -> (x + y == z) || (x + z == y) || (y + z == x)\n        else -> false\n    }\n}\n",
            "fun encode(message: String): String {\n    val vowels = \"aeiouAEIOU\"\n    val result = mutableListOf<Char>()\n    for (ch in message) {\n        if (ch.isLetter()) {\n            val ch1 = if (ch.isLowerCase()) ch.uppercaseChar() else ch.lowercaseChar()\n            if (vowels.contains(ch1)) {\n                result.add(ch1.plus(2))\n            } else {\n                result.add(ch1)\n            }\n        } else {\n            result.add(ch)\n        }\n    }\n    return result.joinToString(\"\")\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2..floor(sqrt(n.toDouble())).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}\nfun skjkasdkd(lst: List<Int>): Int {\n    val primes = lst.filter { isPrime(it) }\n    if (primes.isEmpty()) return 0\n    val largest = primes.max()!!.toString()\n    return largest.map { it.toString().toInt() }.sum()\n}\n",
            "fun checkDictCase(d: Map<String, String>): Boolean {\n    if (d.isEmpty()) return false\n    var lowerCaseKeys = true\n    var upperCaseKeys = true\n    for (key in d.keys) {\n        if (!key.all { it.isLowerCase() }) {\n            lowerCaseKeys = false\n        }\n        if (!key.all { it.isUpperCase() }) {\n            upperCaseKeys = false\n        }\n    }\n    return lowerCaseKeys || upperCaseKeys\n}\n",
            "fun countUpTo(n: Int): List<Int> {\n    val primes = mutableListOf<Int>()\n    for (num in 2..n) {\n        var isPrime = true\n        for (p in primes) {\n            if (num % p == 0) {\n                isPrime = false\n                break\n            }\n        }\n        if (isPrime) {\n            primes.add(num)\n        }\n    }\n    return primes\n}\n",
            "fun multiply(a: Int, b: Int): Int {\n    var result = 0\n    for (i in 0 until abs(a) % 10) {\n        result += abs(b) % 10\n    }\n    return result\n}\n",
            "fun countUpper(s: String): Int {\n    val vowels = \"AEIOU\"\n    var count = 0\n    for (i in s.indices) {\n        if (i % 2 == 0 && vowels.contains(s[i])) {\n            count += 1\n        }\n    }\n    return count\n}\n",
            "fun closestInteger(value: String): Int {\n    val num = value.toDouble()\n    return if (num >= 0.0) (num + 0.5).toInt() else (num - 0.5).toInt()\n}\n",
            "fun makeAPile(n: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in 0 until n) {\n        result.add(n + 2 * i)\n    }\n    return result\n}\n",
            "fun wordsString(s: String): List<String> {\n    val result = mutableListOf<String>()\n    for (w in s.split(Regex(\"[, ]\"))) {\n        if (w.isNotEmpty()) {\n            result.add(w)\n        }\n    }\n    return result\n}\n",
            "fun chooseNum(x: Int, y: Int): Int {\n    return if (x > y) -1 else if (y % 2 == 0) y else if (x != y) y - 1 else -1\n}\n",
            "fun roundedAvg(n: Int, m: Int): String? {\n    if (n > m) return null\n    val rAvg = (m + n) / 2 + 0.5\n    val result = Integer.toBinaryString(rAvg.toInt())\n    return result.substring(2)\n}\n",
            "fun allDigitsOdd(s: String): Boolean {\n    for (digit in s) {\n        if (digit.toInt() % 2 == 0) {\n            return false\n        }\n    }\n    return true\n}\nfun uniqueDigits(x: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (num in x) {\n        if (allDigitsOdd(num.toString())) {\n            result.add(num)\n        }\n    }\n    return result.sorted()\n}\n",
            "fun byLength(arr: List<Int>): List<String> {\n    val digitNames = listOf(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    val sortedArr = arr.filter { x -> 1 <= x && x <= 9 }.sortedDescending()\n    return sortedArr.map { x -> digitNames[x-1] }\n}\n",
            "fun f(n: Int): List<Int> {\n    val nums = (1..n).toList()\n    val result = mutableListOf<Int>()\n    for (i in nums) {\n        if (i % 2 != 0) {\n            result.add(nums.subList(0, i).sum())\n        } else {\n            result.add(nums.subList(0, i).fold(1) { acc, e -> acc * e })\n        }\n    }\n    return result\n}\n",
            "fun isPalindrome(txt: String): Boolean {\n    return txt == txt.reversed()\n}\nfun evenOddPalindrome(n: Int): List<Int> {\n    val cnt = mutableListOf(0, 0)\n    for (i in 1..n) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}\n",
            "fun digitsSum(n: Int): Int {\n    val nStr = n.toString()\n    if (n >= 0) {\n        var sumValue = 0\n        for (d in nStr) {\n            sumValue += d.toString().toInt()\n        }\n        return sumValue\n    } else {\n        return nStr.substring(0, 2).toInt() * 2 + digitsSum(abs(n))\n    }\n}\nfun countNums(arr: List<Int>): Int {\n    var countValue = 0\n    for (n in arr) {\n        if (digitsSum(n) > 0) {\n            countValue += 1\n        }\n    }\n    return countValue\n}\n",
            "fun moveOneBall(arr: List<Int>): Boolean {\n    if (arr.isEmpty()) return true\n    val sortedArr = arr.sorted()\n    for (i in 0 until arr.size) {\n        if (arr.subList(i, arr.size) == sortedArr.subList(0, arr.size - i) && arr.subList(0, i) == sortedArr.subList(arr.size - i, sortedArr.size)) return true\n    }\n    return false\n}\n",
            "fun canExchange(lst1: List<Int>, lst2: List<Int>): String {\n    var oddCnt = 0\n    var evenCnt = 0\n    for (num in lst1) {\n        if (num % 2 != 0) {\n            oddCnt += 1\n        }\n    }\n    for (num in lst2) {\n        if (num % 2 == 0) {\n            evenCnt += 1\n        }\n    }\n    return if (evenCnt >= oddCnt) \"YES\" else \"NO\"\n}\n",
            "fun histogram(test: String): Map<String, Int> {\n    val freq = mutableMapOf<String, Int>()\n    val words = test.split(\" \").filter { it.isNotEmpty() }\n    for (w in words) {\n        freq[w] = freq.getOrDefault(w, 0) + 1\n    }\n    val result = mutableMapOf<String, Int>()\n    if (freq.isNotEmpty()) {\n        val maxFreq = freq.values.max()!!\n        for ((k, v) in freq) {\n            if (v == maxFreq) {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "fun reverseDelete(s: String, c: String): List<String> {\n    val s1 = s.filter { !c.contains(it) }\n    return listOf(s1, if (s1 == s1.reversed()) \"yes\" else \"no\")\n}\n",
            "fun oddCount(lst: List<String>): List<String> {\n    val result = mutableListOf<String>()\n    for (num in lst) {\n        val n = num.fold(0) { acc, d -> acc + if (d.toInt() % 2 == 1) 1 else 0 }\n        val rs = \"the number of odd elements in the string i of the input.\".replace(\"i\", n.toString())\n        result.add(rs)\n    }\n    return result\n}\n",
            "fun minSubArraySum(nums: List<Int>): Int {\n    var minSum = 0\n    var curSum = 0\n    for (n in nums) {\n        curSum = minOf(curSum + n, 0)\n        minSum = minOf(curSum, minSum)\n    }\n    if (minSum == 0) {\n        minSum = nums.minOrNull() ?: 0\n    }\n    return minSum\n}\n",
            "fun maxFill(grid: List<List<Int>>, capacity: Int): Int {\n    var result = 0\n    for (arr in grid) {\n        val sumArr = arr.sum()\n        result += ceil(sumArr / capacity.toDouble()).toInt()\n    }\n    return result\n}\n",
            "fun countOnes(num: Int): Int {\n    var count = 0\n    var num = num\n    while (num > 0) {\n        if (num and 1 == 1) {\n            count++\n        }\n        num = num shr 1\n    }\n    return count\n}\nfun sortArray(arr: List<Int>): List<Int> {\n    val sortedArr = arr.sortedWith(Comparator { a, b ->\n        val countA = countOnes(a)\n        val countB = countOnes(b)\n        if (countA == countB) {\n            a.compareTo(b)\n        } else {\n            countA.compareTo(countB)\n        }\n    })\n    return sortedArr\n}\n",
            "fun selectWords(s: String, n: Int): List<String> {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\"\n    val words = s.split(\" \").filter { it.isNotEmpty() }\n    val result = mutableListOf<String>()\n    for (w in words) {\n        var count = 0\n        for (c in w) {\n            if (c.toLowerCase() in consonants) {\n                count += 1\n            }\n        }\n        if (count == n) {\n            result.add(w)\n        }\n    }\n    return result\n}\n",
            "fun getClosestVowel(word: String): String {\n    val vowels = \"aeiouAEIOU\"\n    for (i in word.length - 2 downTo 0) {\n        if (vowels.contains(word[i]) && !vowels.contains(word[i - 1]) && !vowels.contains(word[i + 1])) {\n            return word[i].toString()\n        }\n    }\n    return \"\"\n}\n",
            "fun matchParens(lst: List<String>): String {\n    var depth = 0\n    for (ch in lst[0] + lst[1]) {\n        if (ch == '(') {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return \"No\"\n        }\n    }\n    return if (depth == 0) \"Yes\" else \"No\"\n}\n",
            "fun maximum(arr: List<Int>, k: Int): List<Int> {\n    if (k == 0) return listOf()\n    val result = mutableListOf<Int>()\n    for (i in 0 until arr.size) {\n        result.add(arr[i])\n    }\n    result.sort()\n    return result.subList(result.size - k, result.size)\n}\n",
            "fun solution(lst: List<Int>): Int {\n    var sumValue = 0\n    for (i in lst.indices) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sumValue += lst[i]\n        }\n    }\n    return sumValue\n}\n",
            "fun addElements(arr: List<Int>, k: Int): Int {\n    var sumValue = 0\n    for (n in arr.subList(0, k)) {\n        if (n.toString().length <= 2) {\n            sumValue += n\n        }\n    }\n    return sumValue\n}\n",
            "fun getOddCollatz(n: Int): List<Int> {\n    var collatz = mutableListOf(1)\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.add(n)\n            n = 3 * n + 1\n        } else {\n            n /= 2\n        }\n    }\n    return collatz.sorted()\n}\n",
            "fun validDate(date: String): Boolean {\n    if (date.length != 10 || date[2] != '-' || date[5] != '-') {\n        return false\n    }\n    val m = date.substring(0, 2).toInt()\n    val d = date.substring(3, 5).toInt()\n    if (m in listOf(1, 3, 5, 7, 8, 10, 12) && d in 1..31) {\n        return true\n    }\n    if (m in listOf(4, 6, 9, 11) && d in 1..30) {\n        return true\n    }\n    if (m == 2 && d in 1..29) {\n        return true\n    }\n    return false\n}\n",
            "fun splitWords(txt: String): List<String> {\n    return if (\" \" in txt) {\n        txt.split(\" \")\n    } else if (\",\" in txt) {\n        txt.split(\",\")\n    } else {\n        listOf(String.format(\"%d\", txt.filter { c -> c.isLowerCase() && c.toInt() % 2 == 0 }.length))\n    }\n}\n",
            "fun isSorted(lst: List<Int>): Boolean {\n    for (i in 1 until lst.size) {\n        if (lst[i - 1] > lst[i]) return false\n    }\n    val freq = mutableMapOf<Int, Int>()\n    for (i in lst) {\n        freq[i] = freq.getOrDefault(i, 0) + 1\n    }\n    return freq.values.maxOrNull() ?: 0 <= 2\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2..sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}\nfun intersection(interval1: List<Int>, interval2: List<Int>): String {\n    val l = maxOf(interval1[0], interval2[0])\n    val r = minOf(interval1[1], interval2[1])\n    val length = r - l\n    return if (length > 0 && isPrime(length)) \"YES\" else \"NO\"\n}\n",
            "fun prodSigns(arr: List<Int>): Int? {\n    if (arr.isEmpty()) return null\n    if (arr.contains(0)) return 0\n    val sign = if (arr.count { it < 0 } % 2 == 1) -1 else 1\n    var result = 0\n    for (n in arr) {\n        result += abs(n)\n    }\n    return sign * result\n}\n",
            "fun minPath(grid: List<List<Int>>, k: Int): List<Int> {\n    val n = grid.size\n    var minVal = n * n + 1\n    for (i in 0 until n) {\n        for (j in 0 until n) {\n            if (grid[i][j] == 1) {\n                var temp = mutableListOf<Int>()\n                if (i != 0) {\n                    temp.add(grid[i - 1][j])\n                }\n                if (j != 0) {\n                    temp.add(grid[i][j - 1])\n                }\n                if (i != n - 1) {\n                    temp.add(grid[i + 1][j])\n                }\n                if (j != n - 1) {\n                    temp.add(grid[i][j + 1])\n                }\n                minVal = min(temp)\n            }\n        }\n    }\n    val result = mutableListOf<Int>()\n    for (i in 0 until k) {\n        result.add(1 if i % 2 == 0 else minVal)\n    }\n    return result\n}\n",
            "fun tri(n: Int): List<Int> {\n    if (n == 0) return listOf(1)\n    var seq = mutableListOf(1, 3)\n    for (i in 2..n) {\n        if (i % 2 == 0) {\n            seq.add(i / 2 + 1)\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "fun digits(n: Int): Int {\n    val odds = n.toString().filter { it.toInt() % 2 == 1 }.map { it.toInt() }\n    var result = 1\n    for (d in odds) {\n        result *= d\n    }\n    return if (odds.isNotEmpty()) result else 0\n}\n",
            "fun isNested(s: String): Boolean {\n    val openIdx = mutableListOf<Int>()\n    val closeIdx = mutableListOf<Int>()\n    for (i in s.indices) {\n        if (s[i] == '[') {\n            openIdx.add(i)\n        } else if (s[i] == ']') {\n            closeIdx.add(i)\n        }\n    }\n    closeIdx.reverse()\n    var cnt = 0\n    var i = 0\n    val l = closeIdx.size\n    for (idx in openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\n",
            "fun sumSquares(lst: List<Double>): Int {\n    var result = 0\n    for (n in lst) {\n        result += ceil(n.pow(2.0)).toInt()\n    }\n    return result\n}\n",
            "fun checkIfLastCharIsALetter(txt: String): Boolean {\n    if (txt.isEmpty()) {\n        return false\n    }\n    val last = txt.substring(txt.lastIndexOf(' ') + 1)\n    return last.length == 1 && last[0].isLetter()\n}\n",
            "fun canArrange(arr: List<Int>): Int {\n    if (arr.size <= 1) return -1\n    val idx = mutableListOf<Int>()\n    for (i in 1 until arr.size) {\n        if (arr[i] < arr[i - 1]) {\n            idx.add(i)\n        }\n    }\n    return idx.maxOrNull() ?: -1\n}\n",
            "fun largestSmallestIntegers(lst: List<Int>): List<Int?> {\n    var maxNeg = null\n    var minPos = null\n    for (i in lst) {\n        if (i < 0) {\n            if (maxNeg == null || i > maxNeg) {\n                maxNeg = i\n            }\n        } else if (i > 0) {\n            if (minPos == null || i < minPos) {\n                minPos = i\n            }\n        }\n    }\n    return listOf(maxNeg, minPos)\n}\n",
            "fun anyToReal(o: Any): Double {\n    return when (o) {\n        is String -> o.replace(\",\", \".\").toDouble()\n        is Int -> o.toDouble()\n        is Double -> o\n        else -> throw RuntimeException(\"Type Error\")\n    }\n}\nfun compareOne(a: Any, b: Any): Double? {\n    val a1 = anyToReal(a)\n    val b1 = anyToReal(b)\n    return when {\n        a1 == b1 -> null\n        a1 > b1 -> a1\n        else -> b1\n    }\n}\n",
            "fun isEqualToSumEven(n: Int): Boolean {\n    return n % 2 == 0 && n >= 8\n}\n",
            "fun specialFactorial(n: Int): Int {\n    var result = 1\n    for (i in 1..n) {\n        var fact = 1\n        for (j in 1..i) {\n            fact *= j\n        }\n        result *= fact\n    }\n    return result\n}\n",
            "fun fixSpaces(txt: String): String {\n    return txt.replace(\"\\\\s{3,}\".toRegex(), \"-\").replace(\" \", \"_\")\n}\n",
            "fun fileNameCheck(fileName: String): String {\n    val suf = listOf(\"txt\", \"exe\", \"dll\")\n    val lst = fileName.split(\".\")\n    if (lst.size != 2 || !suf.contains(lst[1]) || lst[0].isEmpty() || !lst[0][0].isLetter() || lst[0].count { it.isDigit() } > 3) {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "fun sumSquares(lst: List<Int>): Int {\n    var result = 0\n    for (i in lst.indices) {\n        if (i % 3 == 0) {\n            result += Math.pow(lst[i].toDouble(), 2.0).toInt()\n        } else if (i % 4 == 0) {\n            result += Math.pow(lst[i].toDouble(), 3.0).toInt()\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2..floor(sqrt(n.toDouble())).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}\nfun wordsInSentence(sentence: String): String {\n    val words = sentence.split(\" \")\n    val result = mutableListOf<String>()\n    for (w in words) {\n        if (isPrime(w.length)) {\n            result.add(w)\n        }\n    }\n    return result.joinToString(separator = \" \")\n}\n",
            "fun simplify(x: String, n: String): Boolean {\n    val xs = x.split(\"/\")\n    val ns = n.split(\"/\")\n    val num = xs[0].toInt() * ns[0].toInt()\n    val den = xs[1].toInt() * ns[1].toInt()\n    return num % den == 0\n}\n",
            "fun digitsSum(n: Int): Int {\n    val nStr = n.toString()\n    return if (n >= 0) {\n        var result = 0\n        for (d in nStr) {\n            result += d.toString().toInt()\n        }\n        result\n    } else {\n        nStr.substring(0, 2).toInt() * 2 + digitsSum(abs(n))\n    }\n}\nfun orderByPoints(nums: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (num in nums) {\n        result.add(num)\n    }\n    result.sortBy { digitsSum(it) }\n    return result\n}\n",
            "fun specialFilter(nums: List<Int>): Int {\n    val odds = \"13579\"\n    var count = 0\n    for (n in nums) {\n        if (n > 10 && n % 2 == 1 && odds.contains(n.toString()[0].toString())) {\n            count += 1\n        }\n    }\n    return count\n}\n",
            "fun getMaxTriples(n: Int): Int {\n    val c = IntArray(3)\n    for (i in 1..n) {\n        val a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n}\n",
            "fun bf(planet1: String, planet2: String): List<String> {\n    val names = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (!names.contains(planet1) || !names.contains(planet2)) {\n        return listOf()\n    }\n    var l = names.indexOf(planet1)\n    var r = names.indexOf(planet2)\n    if (l > r) {\n        l = r.also { r = l }\n    }\n    if (l == r) {\n        return listOf()\n    }\n    return names.subList(l + 1, r)\n}\n",
            "fun sortedListSum(lst: List<String>): List<String> {\n    val result = mutableListOf<String>()\n    for (s in lst) {\n        if (s.length % 2 == 0) {\n            result.add(s)\n        }\n    }\n    result.sortWith(Comparator { s1, s2 ->\n        if (s1.length == s2.length) {\n            s1.compareTo(s2)\n        } else {\n            s1.length.compareTo(s2.length)\n        }\n    })\n    return result\n}\n",
            "fun xOrY(n: Int, x: Int, y: Int): Int {\n    if (n < 2) return y\n    for (i in 2..floor(sqrt(n.toDouble())).toInt()) {\n        if (n % i == 0) return y\n    }\n    return x\n}\n",
            "fun doubleTheDifference(lst: List<Double>): Int {\n    var result = 0\n    for (n in lst) {\n        if (n >= 0.0 && n % 2 == 1.0) {\n            result += (n * n).toInt()\n        }\n    }\n    return result\n}\n",
            "fun compare(game: List<Int>, guess: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for ((x, y) in game.zip(guess)) {\n        result.add(abs(x - y))\n    }\n    return result\n}\n",
            "fun strongestExtension(className: String, extensions: List<String>): String {\n    var maxS = -1.0\n    var maxExt = \"\"\n    for (ext in extensions) {\n        var upper = 0\n        var lower = 0\n        for (c in ext) {\n            if (c.isUpperCase()) {\n                upper++\n            } else if (c.isLowerCase()) {\n                lower++\n            }\n        }\n        val s = upper - lower\n        if (s > maxS) {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return \"${className}.${maxExt}\"\n}\n",
            "fun cycpatternCheck(a: String, b: String): Boolean {\n    if (a.length < b.length) {\n        return false\n    }\n    for (i in 0 until b.length) {\n        if (b.substring(i) + b.substring(0, i) in a) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun evenOddCount(num: Int): List<Int> {\n    val ds = num.absoluteValue.toString()\n    var even = 0\n    for (d in ds) {\n        if (d.toInt() % 2 == 0) {\n            even++\n        }\n    }\n    return listOf(even, ds.length - even)\n}\n",
            "fun intToMiniRoman(num: Int): String {\n    val values = listOf(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    val numerals = listOf(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    val res = mutableListOf<String>()\n    for (i in values.indices) {\n        while (num >= values[i]) {\n            res.add(numerals[i])\n            num -= values[i]\n        }\n    }\n    return res.joinToString(\"\")\n}\n",
            "fun rightAngleTriangle(a: Int, b: Int, c: Int): Boolean {\n    val s = listOf(a, b, c).sorted()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "fun findMax(words: List<String>): String {\n    var maxCnt = 0\n    var maxW = \"\"\n    for (w in words) {\n        val cnt = w.toSet().size\n        if (cnt > maxCnt) {\n            maxCnt = cnt\n            maxW = w\n        } else if (cnt == maxCnt) {\n            maxW = minOf(maxW, w)\n        }\n    }\n    return maxW\n}\n",
            "fun eat(num: Int, need: Int, remaining: Int): List<Int> {\n    return if (need <= remaining) listOf(num + need, remaining - need) else listOf(num + remaining, 0)\n}\n",
            "fun doAlgebra(operators: List<String>, operands: List<Int>): Int {\n    val ops = operators.toMutableList()\n    val nums = operands.toMutableList()\n    var i = ops.size - 1\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = Math.pow(nums[i].toDouble(), nums[i + 1].toDouble()).toInt()\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n        }\n        i -= 1\n    }\n    i = 0\n    while (i < ops.size) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] / nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while (i < ops.size) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "fun solve(s: String): String {\n    val result = mutableListOf<Char>()\n    for (ch in s) {\n        if (!ch.isLetter()) {\n            result.add(ch)\n        } else if (ch.isUpperCase()) {\n            result.add(ch.toLowerCase())\n        } else if (ch.isLowerCase()) {\n            result.add(ch.toUpperCase())\n        }\n    }\n    if (!result.any { ch -> ch.isLetter() }) {\n        return result.reversed().joinToString(\"\")\n    }\n    return result.joinToString(\"\")\n}\n",
            "fun stringToMd5(txt: String): String? {\n    if (txt.isEmpty()) return null\n    val md5Hash = MessageDigest.getInstance(\"MD5\")\n    val txtBytes = txt.toByteArray()\n    md5Hash.update(txtBytes)\n    val md5Encoded = md5Hash.digest().toHexString()\n    return md5Encoded\n}\n",
            "fun generateIntegers(a: Int, b: Int): List<Int> {\n    val lower = maxOf(2, minOf(a, b))\n    val upper = minOf(8, maxOf(a, b))\n    val result = mutableListOf<Int>()\n    for (i in lower..upper) {\n        if (i % 2 == 0) {\n            result.add(i)\n        }\n    }\n    return result\n}\n"
        ],
        "php": [
            "function hasCloseElements($numbers, $threshold) {\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            if abs($numbers[$i] - $numbers[$j]) < $threshold {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "function separateParenGroups($parenString) {\n    $groups = [];\n    $stk = [];\n    $currentGroup = \"\";\n    $parens = str_replace(\" \", \"\", $parenString);\n    for ($i = 0; $i < strlen($parens); $i++) {\n        $ch = $parens[$i];\n        if ($ch == \"(\") {\n            array_push($stk, $ch);\n            $currentGroup .= $ch;\n        } else if ($ch == \")\") {\n            array_pop($stk);\n            $currentGroup .= $ch;\n            if (count($stk) == 0) {\n                array_push($groups, $currentGroup);\n                $currentGroup = \"\";\n            }\n        }\n    }\n    return $groups;\n}\n",
            "function truncateNumber($num) {\n    return $num - floor($num);\n}\n",
            "function belowZero($operations) {\n    $balance = 0;\n    foreach ($operations as $op) {\n        $balance += $op;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function meanAbsoluteDeviation($numbers) {\n    $mean = array_sum($numbers) / count($numbers);\n    $deviation = 0.0;\n    foreach ($numbers as $x) {\n        $deviation += abs($x - $mean);\n    }\n    return $deviation / count($numbers);\n}\n",
            "function intersperse($numbers, $delimiter) {\n    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        if ($i != 0) {\n            $result[] = $delimiter;\n        }\n        $result[] = $numbers[$i];\n    }\n    return $result;\n}\n",
            "function parseNestedParens($parenString) {\n    $result = [];\n    $parenGroups = explode(\" \", $parenString);\n    foreach ($parenGroups as $group) {\n        $maxDepth = 0;\n        $depth = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i] == \"(\") {\n                $depth++;\n                $maxDepth = max($maxDepth, $depth);\n            } else if ($group[$i] == \")\") {\n                $depth--;\n            }\n        }\n        $result[] = $maxDepth;\n    }\n    return $result;\n}\n",
            "function filterBySubstring ($strs, $substring) {\n    $result = [];\n    foreach ($strs as $s) {\n        if (strpos($s, $substring) !== false) {\n            $result[] = $s;\n        }\n    }\n    return $result;\n}\n",
            "function sumProduct($numbers) {\n    $nSum = 0;\n    $nProduct = 1;\n    foreach ($numbers as $n) {\n        $nSum += $n;\n        $nProduct *= $n;\n    }\n    return [$nSum, $nProduct];\n}\n",
            "function rollingMax($numbers) {\n    $result = [];\n    $maxSoFar = -INF;\n    foreach ($numbers as $num) {\n        if ($num > $maxSoFar) {\n            $maxSoFar = $num;\n        }\n        $result[] = $maxSoFar;\n    }\n    return $result;\n}\n",
            "function isPalindrome($s) {\n    return $s == strrev($s);\n}\nfunction makePalindrome($s) {\n    if (isPalindrome($s)) {\n        return $s;\n    }\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (isPalindrome(substr($s, $i))) {\n            return $s . strrev(substr($s, 0, $i));\n        }\n    }\n    return \"\";\n}\n",
            "function stringXor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        if ($a[$i] == $b[$i]) {\n            $result .= \"0\";\n        } else {\n            $result .= \"1\";\n        }\n    }\n    return $result;\n}\n",
            "function longest($strs) {\n    if (!count($strs)) {\n        return null;\n    }\n    $longestS = $strs[0];\n    foreach ($strs as $s) {\n        if (strlen($s) > strlen($longestS)) {\n            $longestS = $s;\n        }\n    }\n    return $longestS;\n}\n",
            "function greatestCommonDivisor($a, $b) {\n    while ($b != 0) {\n        $a = $b;\n        $b = $a % $b;\n    }\n    return $a;\n}\n",
            "function allPrefixes($s) {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $prefixes[] = substr($s, 0, $i + 1);\n    }\n    return $prefixes;\n}\n",
            "function stringSequence($n) {\n    $result = \"\";\n    for ($i = 0; $i <= $n; $i++) {\n        $result .= strval($i) . \" \";\n    }\n    return substr($result, 0, -1);\n}\n",
            "function countDistinctCharacters ($s) {\n    $distinctCharacters = array_unique(str_split(strtolower($s)));\n    return count($distinctCharacters);\n}\n",
            "function parseMusic($musicString) {\n    $durations = [\"o\" => 4, \"o|\" => 2, \".|\" => 1];\n    $notes = explode(\" \", $musicString);\n    $result = [];\n    foreach ($notes as $note) {\n        $result[] = $durations[$note];\n    }\n    return $result;\n}\n",
            "function howManyTimes($s, $substring) {\n    $times = 0;\n    for ($i = 0; $i < strlen($s) - strlen($substring) + 1; $i++) {\n        if (substr($s, $i, strlen($substring)) == $substring) {\n            $times++;\n        }\n    }\n    return $times;\n}\n",
            "function sortNumbers($numbers) {\n    $numDict = [\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n    ];\n    $numList = array_filter(explode(\" \", $numbers), function ($x) use ($numDict) {\n        return array_key_exists($x, $numDict);\n    });\n    sort($numList, SORT_REGULAR);\n    return implode(\" \", $numList);\n}\n",
            "function findClosestElements($numbers) {\n    sort($numbers);\n    $minDiff = PHP_FLOAT_MAX;\n    $closestPair = [];\n    for ($i = 1; $i < count($numbers); $i++) {\n        $diff = $numbers[$i] - $numbers[$i - 1];\n        if ($diff < $minDiff) {\n            $minDiff = $diff;\n            $closestPair = [$numbers[$i - 1], $numbers[$i]];\n        }\n    }\n    return $closestPair;\n}\n",
            "function rescaleToUnit($numbers) {\n    $minNum = min($numbers);\n    $maxNum = max($numbers);\n    if ($minNum == $maxNum) {\n        return array_fill(0, count($numbers), 0.0);\n    } else {\n        return array_map(function ($num) use ($minNum, $maxNum) { return ($num - $minNum) / ($maxNum - $minNum); }, $numbers);\n    }\n}\n",
            "function filterIntegers ($values) {\n    $result = [];\n    foreach ($values as $x) {\n        if (is_int($x)) {\n            $result[] = $x;\n        }\n    }\n    return $result;\n}\n",
            "function strLength ($s) {\n    $length = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $length++;\n    }\n    return $length;\n}\n",
            "function largestDivisor($n) {\n    for ($i = 2; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            return $n / $i;\n        }\n    }\n    return 1;\n}\n",
            "function factorize($n) {\n    $factors = [];\n    $divisor = 2;\n    while ($divisor <= $n) {\n        if ($n % $divisor == 0) {\n            $factors[] = $divisor;\n            $n /= $divisor;\n        } else {\n            $divisor++;\n        }\n    }\n    return $factors;\n}\n",
            "function removeDuplicates($numbers) {\n    $counts = [];\n    foreach ($numbers as $num) {\n        if (!isset($counts[$num])) {\n            $counts[$num] = 1;\n        } else {\n            $counts[$num] += 1;\n        }\n    }\n    $res = [];\n    foreach ($numbers as $num) {\n        if ($counts[$num] == 1) {\n            $res[] = $num;\n        }\n    }\n    return $res;\n}\n",
            "function flipCase($s) {\n    $flipped = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if (!ctype_alpha($ch)) {\n            $flipped[] = $ch;\n        } elseif (ctype_lower($ch)) {\n            $flipped[] = strtoupper($ch);\n        } elseif (ctype_upper($ch)) {\n            $flipped[] = strtolower($ch);\n        }\n    }\n    return implode($flipped);\n}\n",
            "function concatenate($strs) {\n    $result = \"\";\n    foreach ($strs as $s) {\n        $result .= $s;\n    }\n    return $result;\n}\n",
            "function filterByPrefix ($strs, $prefixStr) {\n    $result = [];\n    foreach ($strs as $s) {\n        if (strpos($s, $prefixStr) === 0) {\n            $result[] = $s;\n        }\n    }\n    return $result;\n}\n",
            "function getPositive($l) {\n    $result = [];\n    foreach ($l as $num) {\n        if ($num > 0) {\n            $result[] = $num;\n        }\n    }\n    return $result;\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function poly($xs, $x) {\n    $res = 0.0;\n    foreach ($xs as $i => $e) {\n        $res += $e * pow($x, $i);\n    }\n    return $res;\n}\nfunction findZero($xs) {\n    $x1 = 1.0;\n    $x2 = -1.0;\n    while (poly($xs, $x1) * poly($xs, $x2) > 0) {\n        $x1 *= 2;\n        $x2 *= 2;\n    }\n    while (abs($x1 - $x2) > 1e-10) {\n        $mid = ($x1 + $x2) / 2;\n        if (poly($xs, $mid) == 0) {\n            return $mid;\n        } elseif (poly($xs, $mid) * poly($xs, $x1) < 0) {\n            $x2 = $mid;\n        } else {\n            $x1 = $mid;\n        }\n    }\n    return ($x1 + $x2) / 2;\n}\n",
            "function sortThird ($l) {\n    $sortedThird = array_values(array_unique(array_filter($l, function ($v) { return $v % 3 == 0; })));\n    sort($sortedThird);\n    $result = [];\n    foreach ($l as $i => $v) {\n        if ($i % 3 == 0) {\n            $result[] = $sortedThird[$i // 3];\n        } else {\n            $result[] = $v;\n        }\n    }\n    return $result;\n}\n",
            "function listUnique($l) {\n    $uniqueList = [];\n    foreach ($l as $item) {\n        if (!in_array($item, $uniqueList)) {\n            $uniqueList[] = $item;\n        }\n    }\n    sort($uniqueList);\n    return $uniqueList;\n}\n",
            "function maxElement ($l) {\n    $maxValue = -INF;\n    foreach ($l as $i) {\n        if ($i > $maxValue) {\n            $maxValue = $i;\n        }\n    }\n    return $maxValue;\n}\n",
            "function fizzBuzz($n) {\n    $cnt = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            $cnt += substr_count((string)$i, \"7\");\n        }\n    }\n    return $cnt;\n}\n",
            "function sortEven($l) {\n    $sortedEven = array_values(array_filter($l, function ($v) { return $v % 2 == 0; }, ARRAY_FILTER_USE_KEY));\n    sort($sortedEven);\n    $result = [];\n    foreach ($l as $i => $v) {\n        $result[] = $i % 2 == 0 ? $sortedEven[$i // 2] : $v;\n    }\n    return $result;\n}\n",
            "function encodeCyclic($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i += 3) {\n        if ($i + 3 > strlen($s)) {\n            $result[] = substr($s, $i);\n        } else {\n            $result[] = substr($s, $i + 1, 2);\n            $result[] = substr($s, $i, 1);\n        }\n    }\n    return implode($result);\n}\nfunction decodeCyclic($s) {\n    return encodeCyclic(encodeCyclic($s));\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction primeFib($n) {\n    $f = [0, 1];\n    $cnt = 0;\n    while ($cnt < $n) {\n        $f = [$f[1], $f[0] + $f[1]];\n        if (isPrime($f[1])) {\n            $cnt++;\n        }\n    }\n    return $f[1];\n}\n",
            "function triplesSumToZero($l) {\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            for ($k = $j + 1; $k < count($l); $k++) {\n                if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "function carRaceCollision($n) {\n    return pow($n, 2);\n}\n",
            "function incrList ($l) {\n    $result = [];\n    foreach ($l as $i) {\n        $result[] = $i + 1;\n    }\n    return $result;\n}\n",
            "function pairsSumToZero($l) {\n    $seen = [];\n    foreach ($l as $num) {\n        if (in_array(-$num, $seen)) {\n            return true;\n        }\n        $seen[] = $num;\n    }\n    return false;\n}\n",
            "function changeBase($x, $bas) {\n    if ($x == 0) {\n        return \"0\";\n    }\n    $result = \"\";\n    while ($x > 0) {\n        $result = (string)($x % $bas) . $result;\n        $x = (int)($x / $bas);\n    }\n    return $result;\n}\n",
            "function triangleArea($a, $h) {\n    return $a * $h / 2;\n}\n",
            "function fib4($n) {\n    $fib = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib[$i % 4] = array_sum($fib);\n    }\n    return $fib[$n % 4];\n}\n",
            "function median($l) {\n    $sl = sort($l);\n    if (count($l) % 2 != 0) {\n        return $sl[count($l) / 2];\n    } else {\n        return ($sl[count($l) / 2] + $sl[count($l) / 2 - 1]) / 2;\n    }\n}\n",
            "function isPalindrome($txt) {\n    for ($i = 0; $i < strlen($txt) / 2; $i++) {\n        if ($txt[$i] != $txt[strlen($txt) - $i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function modp($n, $p) {\n    $ret = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $ret = ($ret * 2) % $p;\n    }\n    return $ret;\n}\n",
            "function encodeShift($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $result[] = chr(((ord($s[$i]) - 97 + 5) % 26) + 97);\n    }\n    return implode($result);\n}\nfunction decodeShift($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $result[] = chr(((ord($s[$i]) - 97 + 21) % 26) + 97);\n    }\n    return implode($result);\n}\n",
            "function removeVowels($txt) {\n    $vowels = \"aeiouAEIOU\";\n    $result = \"\";\n    for ($i = 0; $i < strlen($txt); $i++) {\n        if (strpos($vowels, $txt[$i]) === false) {\n            $result .= $txt[$i];\n        }\n    }\n    return $result;\n}\n",
            "function belowThreshold ($l, $t) {\n    foreach ($l as $x) {\n        if ($x >= $t) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function add($x, $y) {\n    return $x + $y;\n}\n",
            "function sameChars($s0, $s1) {\n    $s0Set = str_split($s0);\n    $s1Set = str_split($s1);\n    return count(array_intersect($s0Set, $s1Set)) == count($s0Set);\n}\n",
            "function fib($n) {\n    if ($n <= 1) {\n        return $n;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n",
            "function correctBracketing($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"<\") {\n            $depth++;\n        } else if ($brackets[$i] == \">\") {\n            $depth--;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "function monotonic($l) {\n    $diff = array_map(function ($x, $y) { return $y - $x; }, $l, array_slice($l, 1));\n    return count(array_filter($diff, function ($x) { return $x <= 0; })) == count($diff) || count(array_filter($diff, function ($x) { return $x >= 0; })) == count($diff);\n}\n",
            "function common($l1, $l2) {\n    $result = [];\n    foreach ($l1 as $i) {\n        if (in_array($i, $l2)) {\n            $result[] = $i;\n        }\n    }\n    sort($result);\n    return $result;\n}\n",
            "function largestPrimeFactor ($n) {\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i) {\n            $i += 1;\n        } else {\n            $n = intdiv($n, $i);\n        }\n    }\n    return $n;\n}\n",
            "function sumToN ($n) {\n    $result = 0;\n    for ($i = 0; $i <= $n; $i++) {\n        $result += $i;\n    }\n    return $result;\n}\n",
            "function correctBracketing($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"(\") {\n            $depth++;\n        } else if ($brackets[$i] == \")\") {\n            $depth--;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "function derivative($xs) {\n    $result = [];\n    for ($i = 1; $i < count($xs); $i++) {\n        $result[] = $xs[$i] * $i;\n    }\n    return $result;\n}\n",
            "function fibfib($n) {\n    if ($n <= 1) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    while ($n > 2) {\n        $a = $b;\n        $b = $c;\n        $c = $a + $b + $c;\n        $n -= 1;\n    }\n    return $c;\n}\n",
            "function vowelsCount ($s) {\n    $vowels = \"aeiou\";\n    $cnt = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($vowels, strtolower($s[$i])) !== false || ($i == strlen($s) - 1 && strtolower($s[$i]) == \"y\")) {\n            $cnt++;\n        }\n    }\n    return $cnt;\n}\n",
            "function circularShift($x, $shift) {\n    $xStr = (string)$x;\n    if ($shift > strlen($xStr)) {\n        return strrev($xStr);\n    } else {\n        return substr($xStr, -$shift) . substr($xStr, 0, -$shift);\n    }\n}\n",
            "function digitSum($s) {\n    $sumValue = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ord($s[$i]) >= 65 && ord($s[$i]) <= 90) {\n            $sumValue += ord($s[$i]);\n        }\n    }\n    return $sumValue;\n}\n",
            "function fruitDistribution($s, $n) {\n    $words = explode(\" \", $s);\n    $apples = intval($words[array_search(\"apples\", $words) - 1]);\n    $oranges = intval($words[array_search(\"oranges\", $words) - 1]);\n    return $n - $apples - $oranges;\n}\n",
            "function pluck($arr) {\n    $evens = array_filter($arr, function ($n) { return $n % 2 == 0; });\n    if (count($evens) == 0) {\n        return [];\n    }\n    $minEven = min($evens);\n    return [$minEven, array_search($minEven, $arr)];\n}\n",
            "function search($lst) {\n    $freqs = [];\n    foreach ($lst as $n) {\n        if (!isset($freqs[$n])) {\n            $freqs[$n] = 0;\n        }\n        $freqs[$n] += 1;\n    }\n    $goodVals = [];\n    foreach ($freqs as $k => $v) {\n        if ($v >= $k) {\n            $goodVals[] = $k;\n        }\n    }\n    if (count($goodVals) > 0) {\n        return max($goodVals);\n    } else {\n        return -1;\n    }\n}\n",
            "function strangeSortList ($lst) {\n    $sl = sort($lst);\n    $result = [];\n    $left = 0;\n    $right = count($sl) - 1;\n    while ($left <= $right) {\n        $result[] = $sl[$left];\n        $left++;\n        if ($left <= $right) {\n            $result[] = $sl[$right];\n            $right--;\n        }\n    }\n    return $result;\n}\n",
            "function triangleArea($a, $b, $c) {\n    $s = ($a + $b + $c) / 2.0;\n    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        return sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "function willItFly($q, $w) {\n    if (count($q) == 0) {\n        return false;\n    }\n    $isPalin = true;\n    for ($i = 0; $i < count($q); $i++) {\n        if ($q[$i] != $q[count($q) - $i - 1]) {\n            $isPalin = false;\n        }\n    }\n    $total = 0;\n    foreach ($q as $i) {\n        $total += $i;\n    }\n    return $isPalin && $total <= $w;\n}\n",
            "function smallestChange($arr) {\n    $ans = 0;\n    for ($i = 0; $i < count($arr) / 2; $i++) {\n        if ($arr[$i] != $arr[count($arr) - $i - 1]) {\n            $ans++;\n        }\n    }\n    return $ans;\n}\n",
            "function totalMatch ($lst1, $lst2) {\n    $cnt1 = 0;\n    foreach ($lst1 as $s) {\n        $cnt1 += strlen($s);\n    }\n    $cnt2 = 0;\n    foreach ($lst2 as $s) {\n        $cnt2 += strlen($s);\n    }\n    return $cnt1 <= $cnt2 ? $lst1 : $lst2;\n}\n",
            "function isMultiplyPrime($a) {\n    if ($a < 2) {\n        return false;\n    }\n    $cnt = 0;\n    for ($i = 2; $i <= floor(sqrt($a)); $i++) {\n        if ($a % $i == 0) {\n            while ($a % $i == 0) {\n                $cnt++;\n                $a /= $i;\n            }\n        }\n    }\n    return $cnt == 3;\n}\n",
            "function isSimplePower($x, $n) {\n    if ($n < 2) {\n        return $x == $n;\n    }\n    $tmp = 1;\n    while ($tmp < $x) {\n        $tmp *= $n;\n    }\n    return $tmp == $x;\n}\n",
            "function isCube($a) {\n    $a = abs($a);\n    $root = int(round(pow($a, 1.0 / 3.0)));\n    return $root * $root * $root == $a;\n}\n",
            "function hexKey($num) {\n    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i], [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"])) {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "function decimalToBinary($dec) {\n    $binary = str_pad(decbin($dec), 8, \"0\", STR_PAD_LEFT);\n    return \"db\" . $binary . \"db\";\n}\n",
            "function isHappy($s) {\n    if (strlen($s) < 3) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($s) - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function numericalLetterGrade($grades) {\n    $result = [];\n    foreach ($grades as $g) {\n        if ($g == 4.0) {\n            $result[] = \"A+\";\n        } elseif ($g > 3.7) {\n            $result[] = \"A\";\n        } elseif ($g > 3.3) {\n            $result[] = \"A-\";\n        } elseif ($g > 3.0) {\n            $result[] = \"B+\";\n        } elseif ($g > 2.7) {\n            $result[] = \"B\";\n        } elseif ($g > 2.3) {\n            $result[] = \"B-\";\n        } elseif ($g > 2.0) {\n            $result[] = \"C+\";\n        } elseif ($g > 1.7) {\n            $result[] = \"C\";\n        } elseif ($g > 1.3) {\n            $result[] = \"C-\";\n        } elseif ($g > 1.0) {\n            $result[] = \"D+\";\n        } elseif ($g > 0.7) {\n            $result[] = \"D\";\n        } elseif ($g > 0.0) {\n            $result[] = \"D-\";\n        } else {\n            $result[] = \"E\";\n        }\n    }\n    return $result;\n}\n",
            "function primeLength($s) {\n    $length = strlen($s);\n    if ($length < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($length)) + 1; $i++) {\n        if ($length % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function startsOneEnds ($n) {\n    if ($n == 1) {\n        return 1;\n    }\n    $result = 2 * 9 * pow(10, $n - 2);\n    return $result;\n}\n",
            "function solve($n) {\n    $digitsSum = 0;\n    for ($i = 0; $i < strlen($n); $i++) {\n        $digitsSum += intval(substr($n, $i, 1));\n    }\n    return decbin($digitsSum);\n}\n",
            "function add($lst) {\n    $result = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 2 == 1 && $lst[$i] % 2 == 0) {\n            $result += $lst[$i];\n        }\n    }\n    return $result;\n}\n",
            "function antiShuffle($s) {\n    $words = array_map(function($word) {\n        return implode(array_sort(str_split($word)));\n    }, explode(\" \", $s));\n    return implode(\" \", $words);\n}\n",
            "function getRow ($lst, $x) {\n    $coords = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n                $coords[] = [$i, $j];\n            }\n        }\n    }\n    return array_map(function ($a) { return [$a[0], -$a[1]]; }, $coords);\n}\n",
            "function sortArray ($arr) {\n    if (count($arr) == 0) {\n        return [];\n    }\n    if ($arr[0] + $arr[count($arr) - 1] % 2 == 0) {\n        return array_reverse(sort($arr));\n    } else {\n        return sort($arr);\n    }\n}\n",
            "function encrypt($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $shifted = ord($s[$i]) + 4;\n        if ($shifted > ord('z')) {\n            $shifted -= 26;\n        }\n        $result[] = chr($shifted);\n    }\n    return implode($result);\n}\n",
            "function nextSmallest($lst) {\n    $uniqueList = array_unique($lst);\n    sort($uniqueList);\n    if (count($uniqueList) < 2) {\n        return null;\n    }\n    return $uniqueList[1];\n}\n",
            "function isBored($s) {\n    $sentences = preg_split(\"/[.!?]\\s*/\", $s);\n    $count = 0;\n    foreach ($sentences as $sentence) {\n        if (strlen($sentence) >= 2 && substr($sentence, 0, 2) == \"I \") {\n            $count += 1;\n        }\n    }\n    return $count;\n}\n",
            "function anyInt ($x, $y, $z) {\n    return is_int($x) && is_int($y) && is_int($z) && (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x));\n}\n",
            "function encode($message) {\n    $vowels = \"aeiouAEIOU\";\n    $result = [];\n    for ($i = 0; $i < strlen($message); $i++) {\n        $ch = $message[$i];\n        if (ctype_alpha($ch)) {\n            $ch1 = ctype_lower($ch) ? strtoupper($ch) : strtolower($ch);\n            if (strpos($vowels, $ch1) !== false) {\n                $ch1 = chr(ord($ch1) + 2);\n            }\n            $result[] = $ch1;\n        } else {\n            $result[] = $ch;\n        }\n    }\n    return implode($result);\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction skjkasdkd($lst) {\n    $primes = array_filter($lst, function ($n) { return isPrime($n); });\n    if (count($primes) == 0) {\n        return 0;\n    }\n    $largest = strval(max($primes));\n    return array_sum(array_map(function ($digit) { return intval($digit); }, str_split($largest)));\n}\n",
            "function checkDictCase ($d) {\n    if (!$d) {\n        return false;\n    }\n    $lowerCaseKeys = true;\n    $upperCaseKeys = true;\n    foreach (array_keys($d) as $key) {\n        if (!ctype_lower($key)) {\n            $lowerCaseKeys = false;\n        }\n        if (!ctype_upper($key)) {\n            $upperCaseKeys = false;\n        }\n    }\n    return $lowerCaseKeys || $upperCaseKeys;\n}\n",
            "function countUpTo($n) {\n    $primes = [];\n    for ($num = 2; $num <= $n; $num++) {\n        $isPrime = true;\n        foreach ($primes as $p) {\n            if ($num % $p == 0) {\n                $isPrime = false;\n                break;\n            }\n        }\n        if ($isPrime) {\n            $primes[] = $num;\n        }\n    }\n    return $primes;\n}\n",
            "function multiply($a, $b) {\n    $result = 0;\n    for ($i = 0; $i < abs($a) % 10; $i++) {\n        $result += abs($b) % 10;\n    }\n    return $result;\n}\n",
            "function countUpper($s) {\n    $vowels = \"AEIOU\";\n    $count = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($i % 2 == 0 && strpos($vowels, $s[$i]) !== false) {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "function closestInteger($value) {\n    $num = floatval($value);\n    return $num >= 0 ? intval($num + 0.5) : intval($num - 0.5);\n}\n",
            "function makeAPile($n) {\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n + 2 * $i;\n    }\n    return $result;\n}\n",
            "function wordsString($s) {\n    $result = [];\n    foreach (explode(\", \", $s) as $w) {\n        if (strlen($w) > 0) {\n            $result[] = $w;\n        }\n    }\n    return $result;\n}\n",
            "function chooseNum ($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    if ($y % 2 == 0) {\n        return $y;\n    }\n    if ($x != $y) {\n        return $y - 1;\n    }\n    return -1;\n}\n",
            "function roundedAvg($n, $m) {\n    if ($n > $m) {\n        return null;\n    }\n    $rAvg = intval(($m + $n) / 2.0 + 0.5);\n    $result = str_pad(decbin($rAvg), 8, \"0\", STR_PAD_LEFT);\n    return $result;\n}\n",
            "function allDigitsOdd($s) {\n    foreach (str_split($s) as $digit) {\n        if ord($digit) % 2 == 0 {\n            return false;\n        }\n    }\n    return true;\n}\nfunction uniqueDigits($x) {\n    $result = [];\n    foreach ($x as $num) {\n        if allDigitsOdd(strval($num)) {\n            $result[] = $num;\n        }\n    }\n    sort($result);\n    return $result;\n}\n",
            "function byLength ($arr) {\n    $digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    $sortedArr = array_map(function ($x) {\n        return $x;\n    }, array_filter($arr, function ($x) {\n        return $x >= 1 && $x <= 9;\n    }));\n    sort($sortedArr, SORT_NUMERIC | SORT_DESC);\n    return array_map(function ($x) use ($digitNames) {\n        return $digitNames[$x - 1];\n    }, $sortedArr);\n}\n",
            "function f($n) {\n    $nums = range(1, $n);\n    $result = [];\n    foreach ($nums as $i) {\n        if ($i % 2 != 0) {\n            $result[] = array_sum(array_slice($nums, 0, $i));\n        } else {\n            $result[] = array_reduce($nums, function ($x, $y) { return $x * $y; }, 1);\n        }\n    }\n    return $result;\n}\n",
            "function isPalindrome($txt) {\n    return $txt == strrev($txt);\n}\nfunction evenOddPalindrome($n) {\n    $cnt = [0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        if (isPalindrome(strval($i))) {\n            $cnt[$i % 2]++;\n        }\n    }\n    return $cnt;\n}\n",
            "function digitsSum($n) {\n    $nStr = (string)$n;\n    if ($n >= 0) {\n        $sumValue = 0;\n        for ($i = 0; $i < strlen($nStr); $i++) {\n            $sumValue += intval($nStr[$i]);\n        }\n        return $sumValue;\n    } else {\n        return intval($nStr[0] . $nStr[1]) * 2 + digitsSum(abs($n));\n    }\n}\nfunction countNums($arr) {\n    $countValue = 0;\n    foreach ($arr as $n) {\n        if (digitsSum($n) > 0) {\n            $countValue += 1;\n        }\n    }\n    return $countValue;\n}\n",
            "function moveOneBall($arr) {\n    if (count($arr) == 0) {\n        return true;\n    }\n    $sortedArr = array_values(array_sort($arr));\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i:] == array_slice($sortedArr, 0, count($arr) - $i) && $arr[:$i] == array_slice($sortedArr, count($arr) - $i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function canExchange($lst1, $lst2) {\n    $oddCnt = 0;\n    $evenCnt = 0;\n    foreach ($lst1 as $num) {\n        if ($num % 2 != 0) {\n            $oddCnt++;\n        }\n    }\n    foreach ($lst2 as $num) {\n        if ($num % 2 == 0) {\n            $evenCnt++;\n        }\n    }\n    return $evenCnt >= $oddCnt ? \"YES\" : \"NO\";\n}\n",
            "function histogram($test) {\n    $freq = [];\n    $words = array_filter(explode(\" \", $test), function ($w) { return strlen($w) > 0; });\n    foreach ($words as $w) {\n        $freq[$w] = $freq[$w] ?? 0;\n        $freq[$w] += 1;\n    }\n    $result = [];\n    if (count($freq) > 0) {\n        $maxFreq = max($freq);\n        foreach ($freq as $k => $v) {\n            if ($v == $maxFreq) {\n                $result[$k] = $v;\n            }\n        }\n    }\n    return $result;\n}\n",
            "function isPalindrome($s) {\n    return $s == strrev($s);\n}\nfunction reverseDelete($s, $c) {\n    $s1 = str_replace($c, \"\", $s);\n    return [$s1, isPalindrome($s1) ? \"yes\" : \"no\"];\n}\n",
            "function oddCount ($lst) {\n    $result = [];\n    foreach ($lst as $num) {\n        $n = strlen(preg_replace('/[^1]/', '', $num));\n        $rs = \"the number of odd elements in the string i of the input.\";\n        $result[] = str_replace('i', (string)$n, $rs);\n    }\n    return $result;\n}\n",
            "function minSubArraySum($nums) {\n    $minSum = 0;\n    $curSum = 0;\n    foreach ($nums as $n) {\n        $curSum = min($curSum + $n, 0);\n        $minSum = min($curSum, $minSum);\n    }\n    if ($minSum == 0) {\n        $minSum = min($nums);\n    }\n    return $minSum;\n}\n",
            "function maxFill ($grid, $capacity) {\n    $result = 0;\n    foreach ($grid as $arr) {\n        $sumArr = array_sum($arr);\n        $result += ceil($sumArr / $capacity);\n    }\n    return $result;\n}\n",
            "function countOnes($num) {\n    $count = 0;\n    while ($num > 0) {\n        if ($num & 1 == 1) {\n            $count += 1;\n        }\n        $num >>= 1;\n    }\n    return $count;\n}\nfunction sortArray($arr) {\n    $sortedArr = usort($arr, function ($x, $y) {\n        return countOnes($x) == countOnes($y) ? $x - $y : countOnes($x) - countOnes($y);\n    });\n    return $sortedArr;\n}\n",
            "function selectWords($s, $n) {\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $words = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $w) {\n        $count = 0;\n        for ($i = 0; $i < strlen($w); $i++) {\n            if (strpos($consonants, strtolower($w[$i])) !== false) {\n                $count++;\n            }\n        }\n        if ($count == $n) {\n            $result[] = $w;\n        }\n    }\n    return $result;\n}\n",
            "function getClosestVowel($word) {\n    $vowels = \"aeiouAEIOU\";\n    for ($i = strlen($word) - 2; $i > 0; $i--) {\n        if (strpos($vowels, $word[$i]) !== false && strpos($vowels, $word[$i - 1]) === false && strpos($vowels, $word[$i + 1]) === false) {\n            return $word[$i];\n        }\n    }\n    return \"\";\n}\n",
            "function check($s) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] == \"(\") {\n            $depth++;\n        } else {\n            $depth--;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\nfunction matchParens ($lst) {\n    $s1 = $lst[0] . $lst[1];\n    $s2 = $lst[1] . $lst[0];\n    if (check($s1) || check($s2)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n",
            "function maximum ($arr, $k) {\n    if ($k == 0) {\n        return [];\n    }\n    $result = [];\n    foreach ($arr as $i) {\n        $result[] = $i;\n    }\n    sort($result);\n    return array_slice($result, -$k);\n}\n",
            "function solution($lst) {\n    $sumValue = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 2 == 0 && $lst[$i] % 2 != 0) {\n            $sumValue += $lst[$i];\n        }\n    }\n    return $sumValue;\n}\n",
            "function addElements ($arr, $k) {\n    $sumValue = 0;\n    for ($i = 0; $i < $k; $i++) {\n        $n = $arr[$i];\n        if (strlen((string)$n) <= 2) {\n            $sumValue += $n;\n        }\n    }\n    return $sumValue;\n}\n",
            "function getOddCollatz ($n) {\n    $collatz = [1];\n    while ($n != 1) {\n        if ($n % 2 != 0) {\n            $collatz[] = $n;\n            $n = 3 * $n + 1;\n        } else {\n            $n = $n / 2;\n        }\n    }\n    sort($collatz);\n    return $collatz;\n}\n",
            "function validDate($date) {\n    if (strlen($date) != 10 || $date[2] != \"-\" || $date[5] != \"-\") {\n        return false;\n    }\n    $m = intval(substr($date, 0, 2));\n    $d = intval(substr($date, 3, 2));\n    if ($m == 1 || $m == 3 || $m == 5 || $m == 7 || $m == 8 || $m == 10 || $m == 12) {\n        if ($d >= 1 && $d <= 31) {\n            return true;\n        }\n    } else if ($m == 4 || $m == 6 || $m == 9 || $m == 11) {\n        if ($d >= 1 && $d <= 30) {\n            return true;\n        }\n    } else if ($m == 2) {\n        if ($d >= 1 && $d <= 29) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function splitWords($txt) {\n    if (strpos($txt, \" \") !== false) {\n        return explode(\" \", $txt);\n    } elseif (strpos($txt, \",\") !== false) {\n        return explode(\",\", $txt);\n    } else {\n        return [strval(count(preg_grep(\"/[a-z]/\", str_split($txt))))];\n    }\n}\n",
            "function isSorted($lst) {\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i - 1] > $lst[$i]) {\n            return false;\n        }\n    }\n    $freq = [];\n    foreach ($lst as $i) {\n        $freq[$i] = $freq[$i] ?? 0;\n        $freq[$i]++;\n    }\n    return max($freq) <= 2;\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction intersection($interval1, $interval2) {\n    $l = max($interval1[0], $interval2[0]);\n    $r = min($interval1[1], $interval2[1]);\n    $length = $r - $l;\n    if ($length > 0 && isPrime($length)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n",
            "function prodSigns($arr) {\n    if (!count($arr)) {\n        return null;\n    }\n    if (in_array(0, $arr)) {\n        return 0;\n    }\n    $sign = count(array_filter($arr, function ($n) { return $n < 0; })) % 2 == 1 ? -1 : 1;\n    $result = 0;\n    foreach ($arr as $n) {\n        $result += abs($n);\n    }\n    return $sign * $result;\n}\n",
            "function minPath($grid, $k) {\n    $n = count($grid);\n    $minVal = $n * $n + 1;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $temp = [];\n                if ($i != 0) {\n                    $temp[] = $grid[$i - 1][$j];\n                }\n                if ($j != 0) {\n                    $temp[] = $grid[$i][$j - 1];\n                }\n                if ($i != $n - 1) {\n                    $temp[] = $grid[$i + 1][$j];\n                }\n                if ($j != $n - 1) {\n                    $temp[] = $grid[$i][$j + 1];\n                }\n                $minVal = min($temp);\n            }\n        }\n    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = 1 if $i % 2 == 0 else $minVal;\n    }\n    return $result;\n}\n",
            "function tri($n) {\n    if ($n == 0) {\n        return [1];\n    }\n    $seq = [1, 3];\n    for ($i = 2; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $seq[] = $i / 2 + 1;\n        } else {\n            $seq[] = $seq[$i - 1] + $seq[$i - 2] + ($i + 3) / 2;\n        }\n    }\n    return $seq;\n}\n",
            "function digits($n) {\n    $odds = array_map(function ($d) { return intval($d); }, array_filter(str_split(strval($n)), function ($d) { return intval($d) % 2 == 1; }));\n    $result = 1;\n    foreach ($odds as $d) {\n        $result *= $d;\n    }\n    return count($odds) > 0 ? $result : 0;\n}\n",
            "function isNested($s) {\n    $openIdx = [];\n    $closeIdx = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] == '[') {\n            $openIdx[] = $i;\n        } else if ($s[$i] == ']') {\n            $closeIdx[] = $i;\n        }\n    }\n    $closeIdx = array_reverse($closeIdx);\n    $cnt = 0;\n    $i = 0;\n    $l = count($closeIdx);\n    foreach ($openIdx as $idx) {\n        if ($i < $l && $idx < $closeIdx[$i]) {\n            $cnt++;\n            $i++;\n        }\n    }\n    return $cnt >= 2;\n}\n",
            "function sumSquares($lst) {\n    $result = 0;\n    foreach ($lst as $n) {\n        $result += pow(ceil($n), 2);\n    }\n    return $result;\n}\n",
            "function checkIfLastCharIsALetter ($txt) {\n    if (strlen($txt) == 0) {\n        return false;\n    }\n    $last = substr($txt, strrpos($txt, ' ') + 1);\n    return strlen($last) == 1 && ctype_alpha($last);\n}\n",
            "function canArrange ($arr) {\n    if (count($arr) <= 1) {\n        return -1;\n    }\n    $idx = [];\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $idx[] = $i;\n        }\n    }\n    return max($idx, -1);\n}\n",
            "function largestSmallestIntegers($lst) {\n    $maxNeg = null;\n    $minPos = null;\n    foreach ($lst as $i) {\n        if ($i < 0) {\n            if ($maxNeg === null || $i > $maxNeg) {\n                $maxNeg = $i;\n            }\n        } elseif ($i > 0) {\n            if ($minPos === null || $i < $minPos) {\n                $minPos = $i;\n            }\n        }\n    }\n    return [$maxNeg, $minPos];\n}\n",
            "function anyToReal($o) {\n    if (is_string($o)) {\n        return floatval(str_replace(',', '.', $o));\n    } elseif (is_int($o)) {\n        return floatval($o);\n    } elseif (is_float($o)) {\n        return $o;\n    } else {\n        throw new RuntimeException(\"Type Error\");\n    }\n}\nfunction compareOne($a, $b) {\n    $a1 = anyToReal($a);\n    $b1 = anyToReal($b);\n    if ($a1 == $b1) {\n        return null;\n    } elseif ($a1 > $b1) {\n        return $a1;\n    } else {\n        return $b1;\n    }\n}\n",
            "function isEqualToSumEven ($n) {\n    return $n % 2 == 0 && $n >= 8;\n}\n",
            "function specialFactorial($n) {\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $fact = 1;\n        for ($j = 1; $j <= $i; $j++) {\n            $fact *= $j;\n        }\n        $result *= $fact;\n    }\n    return $result;\n}\n",
            "function fixSpaces($txt) {\n    return preg_replace(\"/\\s{3,}/\", \"-\", str_replace(\" \", \"_\", $txt));\n}\n",
            "function fileNameCheck($fileName) {\n    $suf = [\"txt\", \"exe\", \"dll\"];\n    $lst = explode(\".\", $fileName);\n    if (count($lst) != 2 || !in_array($lst[1], $suf) || strlen($lst[0]) == 0 || !ctype_alpha($lst[0][0]) || count(preg_grep(\"/[0-9]/\", str_split($lst[0]))) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "function sumSquares ($lst) {\n    $result = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n            $result += pow($lst[$i], 2);\n        } elseif ($i % 4 == 0) {\n            $result += pow($lst[$i], 3);\n        } else {\n            $result += $lst[$i];\n        }\n    }\n    return $result;\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction wordsInSentence($sentence) {\n    $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words as $w) {\n        if (isPrime(strlen($w))) {\n            $result[] = $w;\n        }\n    }\n    return implode(\" \", $result);\n}\n",
            "function simplify($x, $n) {\n    $xs = explode(\"/\", $x);\n    $ns = explode(\"/\", $n);\n    $num = intval($xs[0]) * intval($ns[0]);\n    $den = intval($xs[1]) * intval($ns[1]);\n    return $num % $den == 0;\n}\n",
            "function digitsSum($n) {\n    $nStr = (string)$n;\n    if ($n >= 0) {\n        $result = 0;\n        for ($i = 0; $i < strlen($nStr); $i++) {\n            $result += intval($nStr[$i]);\n        }\n        return $result;\n    } else {\n        return intval(substr($nStr, 0, 2)) * 2 + digitsSum(abs($n));\n    }\n}\nfunction orderByPoints($nums) {\n    $result = [];\n    foreach ($nums as $num) {\n        $result[] = $num;\n    }\n    usort($result, function ($a, $b) {\n        return digitsSum($a) - digitsSum($b);\n    });\n    return $result;\n}\n",
            "function specialFilter($nums) {\n    $odds = \"13579\";\n    $count = 0;\n    foreach ($nums as $n) {\n        if ($n > 10 && $n % 2 == 1 && strpos($odds, (string)$n[0]) !== false) {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "function getMaxTriples ($n) {\n    $c = [0, 0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        $a = $i * $i - $i + 1;\n        $c[$a % 3] += 1;\n    }\n    return $c[0] * $c[1] * $c[2] + ($c[0] * ($c[0] - 1) * ($c[0] - 2) + $c[1] * ($c[1] - 1) * ($c[1] - 2) + $c[2] * ($c[2] - 1) * ($c[2] - 2)) / 6;\n}\n",
            "function bf($planet1, $planet2) {\n    $names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!in_array($planet1, $names) || !in_array($planet2, $names)) {\n        return [];\n    }\n    $l = array_search($planet1, $names);\n    $r = array_search($planet2, $names);\n    if ($l > $r) {\n        $l = $r;\n        $r = $l;\n    }\n    if ($l == $r) {\n        return [];\n    }\n    return array_slice($names, $l + 1, $r - $l - 1);\n}\n",
            "function sortedListSum ($lst) {\n    $result = [];\n    foreach ($lst as $s) {\n        if (strlen($s) % 2 == 0) {\n            $result[] = $s;\n        }\n    }\n    usort($result, function ($a, $b) {\n        return strlen($a) == strlen($b) ? strcmp($a, $b) : strlen($a) - strlen($b);\n    });\n    return $result;\n}\n",
            "function xOrY($n, $x, $y) {\n    if ($n < 2) {\n        return $y;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return $y;\n        }\n    }\n    return $x;\n}\n",
            "function doubleTheDifference ($lst) {\n    $result = 0;\n    foreach ($lst as $n) {\n        if ($n >= 0 && $n % 2 == 1) {\n            $result += $n * $n;\n        }\n    }\n    return $result;\n}\n",
            "function compare($game, $guess) {\n    $result = [];\n    for ($i = 0; $i < count($game); $i++) {\n        $result[] = abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n}\n",
            "function strongestExtension($className, $extensions) {\n    $maxS = -INF;\n    $maxExt = \"\";\n    foreach ($extensions as $ext) {\n        $upper = 0;\n        $lower = 0;\n        for ($i = 0; $i < strlen($ext); $i++) {\n            if (ctype_upper($ext[$i])) {\n                $upper++;\n            } else if (ctype_lower($ext[$i])) {\n                $lower++;\n            }\n        }\n        $s = $upper - $lower;\n        if ($s > $maxS) {\n            $maxS = $s;\n            $maxExt = $ext;\n        }\n    }\n    return $className . \".\" . $maxExt;\n}\n",
            "function cycpatternCheck($a, $b) {\n    if (strlen($a) < strlen($b)) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($b); $i++) {\n        if (strpos($a, substr($b, $i) . substr($b, 0, $i)) !== false) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function evenOddCount ($num) {\n    $ds = strval(abs($num));\n    $even = 0;\n    for ($i = 0; $i < strlen($ds); $i++) {\n        if ord($ds[$i]) % 2 == 0 {\n            $even++;\n        }\n    }\n    return [$even, strlen($ds) - $even];\n}\n",
            "function intToMiniRoman($num) {\n    $values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    $res = [];\n    for ($i = 0; $i < count($values); $i++) {\n        while ($num >= $values[$i]) {\n            $res[] = $numerals[$i];\n            $num -= $values[$i];\n        }\n    }\n    return join($res);\n}\n",
            "function rightAngleTriangle ($a, $b, $c) {\n    $s = [$a, $b, $c];\n    sort($s);\n    return $s[0] * $s[0] + $s[1] * $s[1] == $s[2] * $s[2];\n}\n",
            "function findMax ($words) {\n    $maxCnt = 0;\n    $maxW = \"\";\n    foreach ($words as $w) {\n        $cnt = count(array_unique(str_split($w)));\n        if ($cnt > $maxCnt) {\n            $maxCnt = $cnt;\n            $maxW = $w;\n        } elseif ($cnt == $maxCnt) {\n            $maxW = min($maxW, $w);\n        }\n    }\n    return $maxW;\n}\n",
            "function eat($num, $need, $remaining) {\n    return $need <= $remaining ? [$num + $need, $remaining - $need] : [$num + $remaining, 0];\n}\n",
            "function doAlgebra($operators, $operands) {\n    $ops = $operators;\n    $nums = $operands;\n    $i = count($ops) - 1;\n    while ($i >= 0) {\n        if ($ops[$i] == \"**\") {\n            $nums[$i] = pow($nums[$i], $nums[$i + 1]);\n            array_pop($nums);\n            array_pop($ops);\n        }\n        $i -= 1;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"*\") {\n            $nums[$i] = $nums[$i] * $nums[$i + 1];\n            array_pop($nums);\n            array_pop($ops);\n            $i -= 1;\n        } elseif ($ops[$i] == \"//\") {\n            $nums[$i] = $nums[$i] / $nums[$i + 1];\n            array_pop($nums);\n            array_pop($ops);\n            $i -= 1;\n        }\n        $i += 1;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"+\") {\n            $nums[$i] = $nums[$i] + $nums[$i + 1];\n            array_pop($nums);\n            array_pop($ops);\n            $i -= 1;\n        } elseif ($ops[$i] == \"-\") {\n            $nums[$i] = $nums[$i] - $nums[$i + 1];\n            array_pop($nums);\n            array_pop($ops);\n            $i -= 1;\n        }\n        $i += 1;\n    }\n    return $nums[0];\n}\n",
            "function solve($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if (!ctype_alpha($ch)) {\n            $result[] = $ch;\n        } elseif (ctype_upper($ch)) {\n            $result[] = strtolower($ch);\n        } elseif (ctype_lower($ch)) {\n            $result[] = strtoupper($ch);\n        }\n    }\n    if (!preg_match('/[a-zA-Z]/', implode($result))) {\n        return implode(array_reverse($result));\n    }\n    return implode($result);\n}\n",
            "function stringToMd5($txt) {\n    if (!$txt) {\n        return null;\n    }\n    $md5_hash = hash(\"md5\", $txt);\n    return $md5_hash;\n}\n",
            "function generateIntegers($a, $b) {\n    $lower = max(2, min($a, $b));\n    $upper = min(8, max($a, $b));\n    $result = [];\n    for ($i = $lower; $i <= $upper; $i++) {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n"
        ],
        "ruby": [
            "def has_close_elements(numbers, threshold)\n    for i in 0...numbers.length\n        for j in i + 1...numbers.length\n            if (numbers[i] - numbers[j]).abs < threshold\n                return true\n            end\n        end\n    end\n    return false\nend\n",
            "def separate_paren_groups(paren_string)\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.gsub(\" \", \"\")\n    for ch in parens.chars\n        if ch == \"(\"\n            stk.push(ch)\n            current_group += ch\n        elsif ch == \")\"\n            stk.pop()\n            current_group += ch\n            if stk.empty?\n                groups.push(current_group)\n                current_group = \"\"\n        end\n    end\n    return groups\nend\n",
            "def truncate_number(num)\n    num - num.floor\nend\n",
            "def below_zero(operations)\n    balance = 0\n    for op in operations\n        balance += op\n        if balance < 0\n            return true\n        end\n    end\n    return false\nend\n",
            "def mean_absolute_deviation(numbers)\n    mean = numbers.reduce(:+) / numbers.size.to_f\n    deviation = 0.0\n    for x in numbers\n        deviation += (x - mean).abs\n    end\n    return deviation / numbers.size\nend\n",
            "def intersperse(numbers, delimiter)\n    result = []\n    (0..numbers.length-1).each do |i|\n        if i != 0\n            result << delimiter\n        end\n        result << numbers[i]\n    end\n    return result\nend\n",
            "def parse_nested_parens(paren_string)\n    result = []\n    paren_groups = paren_string.split(\" \")\n    for group in paren_groups\n        max_depth = 0\n        depth = 0\n        for ch in group\n            if ch == \"(\"\n                depth += 1\n                max_depth = [max_depth, depth].max\n            elsif ch == \")\"\n                depth -= 1\n            end\n        end\n        result << max_depth\n    end\n    return result\nend\n",
            "def filter_by_substring(strs, substring)\n    result = []\n    for s in strs\n        result << s if s.include?(substring)\n    end\n    return result\nend\n",
            "def sum_product(numbers)\n    n_sum = 0\n    n_product = 1\n    for n in numbers\n        n_sum += n\n        n_product *= n\n    end\n    return [n_sum, n_product]\nend\n",
            "def rolling_max(numbers)\n    result = []\n    max_so_far = -Float::INFINITY\n    for num in numbers\n        if num > max_so_far\n            max_so_far = num\n        end\n        result << max_so_far\n    end\n    return result\nend\n",
            "def is_palindrome(s)\n    s == s.reverse\nend\ndef make_palindrome(s)\n    if is_palindrome(s)\n        return s\n    end\n    for i in 0..s.length\n        if is_palindrome(s[i..-1])\n            return s + s[0..i-1].reverse\n        end\n    end\n    return \"\"\nend\n",
            "def string_xor(a, b)\n    result = \"\"\n    for i in 0...a.length\n        if a[i] == b[i]\n            result += \"0\"\n        else\n            result += \"1\"\n        end\n    end\n    return result\nend\n",
            "def longest(strs)\n    return nil if strs.empty?\n    longest_s = strs[0]\n    strs.each do |s|\n        longest_s = s if s.length > longest_s.length\n    end\n    longest_s\nend\n",
            "def greatest_common_divisor(a, b)\n    while b != 0\n        a, b = b, a % b\n    end\n    return a\nend\n",
            "def all_prefixes(s)\n    prefixes = []\n    for i in 0..s.length\n        prefixes.append(s[0..i])\n    end\n    return prefixes\nend\n",
            "def string_sequence(n)\n    result = \"\"\n    for i in 0..n\n        result += i.to_s + \" \"\n    end\n    return result[0..-2]\nend\n",
            "def count_distinct_characters(s)\n    distinct_characters = Set.new\n    for char in s.downcase.chars\n        distinct_characters.add(char)\n    end\n    return distinct_characters.size\nend\n",
            "def parse_music(music_string)\n    durations = {\"o\" => 4, \"o|\" => 2, \".|\" => 1}\n    notes = music_string.split()\n    result = []\n    for note in notes\n        result.append(durations[note])\n    end\n    return result\nend\n",
            "def how_many_times(s, substring)\n    times = 0\n    for i in 0..(s.length - substring.length)\n        if s[i, substring.length] == substring\n            times += 1\n        end\n    end\n    return times\nend\n",
            "def sort_numbers(numbers)\n    num_dict = {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n    }\n    num_list = numbers.split(\" \").select {|x| num_dict.key?(x)}\n    num_list.sort_by! {|x| num_dict[x]}\n    return num_list.join(\" \")\nend\n",
            "def find_closest_elements(numbers)\n    sorted_numbers = numbers.sort\n    min_diff = sorted_numbers[1] - sorted_numbers[0]\n    closest_pair = [sorted_numbers[0], sorted_numbers[1]]\n    for i in 1...sorted_numbers.length\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n        end\n    end\n    return closest_pair\nend\n",
            "def rescale_to_unit(numbers)\n    min_num = numbers.min\n    max_num = numbers.max\n    if min_num == max_num\n        return [0.0] * numbers.length\n    else\n        return (numbers.map {|num| (num - min_num) / (max_num - min_num)})\n    end\nend\n",
            "def filter_integers(values)\n    result = []\n    for x in values\n        result << x if x.is_a? Integer\n    end\n    return result\nend\n",
            "def str_length(s)\n    length = 0\n    for char in s\n        length += 1\n    end\n    return length\nend\n",
            "def largest_divisor(n)\n    (2..n).each do |i|\n        return n / i if n % i == 0\n    end\n    1\nend\n",
            "def factorize(n)\n    factors = []\n    divisor = 2\n    while divisor <= n\n        if n % divisor == 0\n            factors << divisor\n            n /= divisor\n        else\n            divisor += 1\n        end\n    end\n    return factors\nend\n",
            "def remove_duplicates(numbers)\n    counts = {}\n    for num in numbers\n        if counts.key?(num)\n            counts[num] += 1\n        else\n            counts[num] = 1\n        end\n    end\n    res = numbers.select {|num| counts[num] == 1}\n    return res\nend\n",
            "def flip_case(s)\n    flipped = s.chars.map do |ch|\n        if ch.alpha?\n            ch.upcase? ? ch.downcase : ch.upcase\n        else\n            ch\n        end\n    end\n    flipped.join\nend\n",
            "def concatenate(strs)\n    result = \"\"\n    for s in strs\n        result += s\n    end\n    return result\nend\n",
            "def filter_by_prefix(strs, prefix_str)\n    result = []\n    for s in strs\n        if s.start_with?(prefix_str)\n            result << s\n        end\n    end\n    return result\nend\n",
            "def get_positive(l)\n    l.select {|num| num > 0}\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n).floor).each do |i|\n        return false if n % i == 0\n    end\n    true\nend\n",
            "def poly(xs, x)\n    res = 0.0\n    for i in 0...xs.length\n        res += xs[i] * x**i\n    end\n    return res\nend\ndef find_zero(xs)\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0\n        x1 *= 2\n        x2 *= 2\n    end\n    while (x1 - x2).abs > 1e-10\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0\n            return mid\n        elsif poly(xs, mid) * poly(xs, x1) < 0\n            x2 = mid\n        else\n            x1 = mid\n        end\n    end\n    return (x1 + x2) / 2\nend\n",
            "def sort_third(l)\n    sorted_third = l.sort.each_slice(3).map(&:first)\n    result = []\n    (0..l.length-1).each do |i|\n        if i % 3 == 0\n            result.append(sorted_third[i // 3])\n        else\n            result.append(l[i])\n        end\n    end\n    return result\nend\n",
            "def list_unique(l)\n    unique_list = []\n    for item in l\n        if not unique_list.include?(item)\n            unique_list.append(item)\n        end\n    end\n    return unique_list.sort\nend\n",
            "def max_element(l)\n    max_value = -Float::INFINITY\n    for i in l\n        if i > max_value\n            max_value = i\n        end\n    end\n    return max_value\nend\n",
            "def fizz_buzz(n)\n    cnt = 0\n    for i in 0..n-1\n        if i % 11 == 0 or i % 13 == 0\n            cnt += i.to_s.count(\"7\")\n        end\n    end\n    return cnt\nend\n",
            "def sort_even(l)\n    sorted_even = l.select.with_index {|_, i| i.even?}.sort\n    result = []\n    l.each_with_index do |e, i|\n        if i.even?\n            result << sorted_even[i // 2]\n        else\n            result << e\n        end\n    end\n    return result\nend\n",
            "def encode_cyclic(s)\n    result = []\n    for i in 0..(s.length - 1).step(3)\n        if i + 3 > s.length\n            result << s[i..-1]\n        else\n            result << s[i+1..i+3]\n            result << s[i]\n        end\n    end\n    return result.join\nend\ndef decode_cyclic(s)\n    return encode_cyclic(encode_cyclic(s))\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n).floor).each do |i|\n        return false if n % i == 0\n    end\n    true\nend\ndef prime_fib(n)\n    f = [0, 1]\n    cnt = 0\n    while cnt < n\n        f = [f[1], f[0] + f[1]]\n        cnt += 1 if is_prime(f[1])\n    end\n    f[1]\nend\n",
            "def triples_sum_to_zero(l)\n    (0..l.length - 1).each do |i|\n        (i + 1..l.length - 1).each do |j|\n            (j + 1..l.length - 1).each do |k|\n                return true if l[i] + l[j] + l[k] == 0\n            end\n        end\n    end\n    return false\nend\n",
            "def car_race_collision(n)\n    n ** 2\nend\n",
            "def incr_list(l)\n    l.map {|i| i + 1}\nend\n",
            "def pairs_sum_to_zero(l)\n    seen = Set.new\n    for num in l\n        if seen.include?(-num)\n            return true\n        end\n        seen.add(num)\n    end\n    return false\nend\n",
            "def change_base(x, bas)\n    return \"0\" if x == 0\n    result = \"\"\n    while x > 0\n        result = (x % bas).to_s + result\n        x //= bas\n    end\n    return result\nend\n",
            "def triangle_area(a, h)\n    a * h / 2.0\nend\n",
            "def fib4(n)\n    fib = [0, 0, 2, 0]\n    for i in 4..n\n        fib[i % 4] = fib[i - 1] + fib[i - 2]\n    end\n    return fib[n % 4]\nend\n",
            "def median(l)\n    sl = l.sort\n    if l.length % 2 != 0\n        return sl[l.length / 2]\n    else\n        return (sl[l.length / 2] + sl[l.length / 2 - 1]) / 2.0\n    end\nend\n",
            "def is_palindrome(txt)\n    (0...txt.length / 2).each do |i|\n        return false if txt[i] != txt[-i - 1]\n    end\n    true\nend\n",
            "def modp(n, p)\n    ret = 1\n    for _ in 0..(n - 1)\n        ret = (ret * 2) % p\n    end\n    return ret\nend\n",
            "def encode_shift(s)\n    result = s.chars.map {|ch| (((ch.ord - 97 + 5) % 26) + 97).chr}\n    return result.join\nend\ndef decode_shift(s)\n    result = s.chars.map {|ch| (((ch.ord - 97 + 21) % 26) + 97).chr}\n    return result.join\nend\n",
            "def remove_vowels(txt)\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in txt\n        result += char unless vowels.include?(char)\n    end\n    return result\nend\n",
            "def below_threshold(l, t)\n    l.each {|x| return false if x >= t}\n    true\nend\n",
            "def add(x, y)\n    x + y\nend\n",
            "def same_chars(s0, s1)\n    s0_set = s0.chars.to_set\n    s1_set = s1.chars.to_set\n    s0_set == s1_set\nend\n",
            "def fib(n)\n    return n if n <= 1\n    fib(n - 1) + fib(n - 2)\nend\n",
            "def correct_bracketing(brackets)\n    depth = 0\n    for b in brackets\n        if b == \"<\"\n            depth += 1\n        elsif b == \">\"\n            depth -= 1\n        end\n        return false if depth < 0\n    end\n    depth == 0\nend\n",
            "def monotonic(l)\n    diff = l.each_cons(2).map {|x, y| y - x}\n    return diff.all? {|x| x <= 0} || diff.all? {|x| x >= 0}\nend\n",
            "def common(l1, l2)\n    result = []\n    for i in l1\n        if l2.include?(i)\n            result << i\n        end\n    end\n    return result.sort\nend\n",
            "def largest_prime_factor(n)\n    i = 2\n    while i * i <= n\n        if n % i != 0\n            i += 1\n        else\n            n /= i\n        end\n    end\n    return n\nend\n",
            "def sum_to_n(n)\n    result = 0\n    for i in 0..n\n        result += i\n    end\n    return result\nend\n",
            "def correct_bracketing(brackets)\n    depth = 0\n    for b in brackets\n        if b == \"(\"\n            depth += 1\n        elsif b == \")\"\n            depth -= 1\n        end\n        return false if depth < 0\n    end\n    depth == 0\nend\n",
            "def derivative(xs)\n    result = []\n    (1..xs.length-1).each do |i|\n        result << xs[i] * i\n    end\n    return result\nend\n",
            "def fibfib(n)\n    return 0 if n <= 1\n    a, b, c = 0, 0, 1\n    while n > 2\n        a, b, c = b, c, a + b + c\n        n -= 1\n    end\n    return c\nend\n",
            "def vowels_count(s)\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in 0...s.length\n        if vowels.include?(s[i].downcase) || (i == s.length - 1 && s[i].downcase == \"y\")\n            cnt += 1\n        end\n    end\n    return cnt\nend\n",
            "def circular_shift(x, shift)\n    x_str = x.to_s\n    if shift > x_str.length\n        return x_str.reverse\n    else\n        return x_str[-shift..-1] + x_str[0..-shift-1]\n    end\nend\n",
            "def digit_sum(s)\n    sum_value = 0\n    for c in s\n        if c.upcase == c\n            sum_value += c.ord\n        end\n    end\n    return sum_value\nend\n",
            "def fruit_distribution(s, n)\n    words = s.split(' ')\n    apples = words.index(\"apples\").nil? ? 0 : words[words.index(\"apples\") - 1].to_i\n    oranges = words.index(\"oranges\").nil? ? 0 : words[words.index(\"oranges\") - 1].to_i\n    return n - apples - oranges\nend\n",
            "def pluck(arr)\n    evens = arr.select {|n| n % 2 == 0}\n    if evens.empty?\n        return []\n    end\n    min_even = evens.min\n    return [min_even, arr.index(min_even)]\nend\n",
            "def search(lst)\n    freqs = {}\n    for n in lst\n        if not freqs.key?(n)\n            freqs[n] = 0\n        end\n        freqs[n] += 1\n    end\n    good_vals = [k for k, v in freqs if v >= k]\n    if good_vals.length > 0\n        return good_vals.max\n    else\n        return -1\n    end\nend\n",
            "def strange_sort_list(lst)\n    sl = lst.sort\n    result = []\n    left, right = 0, sl.length - 1\n    while left <= right\n        result << sl[left]\n        left += 1\n        if left <= right\n            result << sl[right]\n            right -= 1\n        end\n    end\n    return result\nend\n",
            "def triangle_area(a, b, c)\n    s = (a + b + c) / 2.0\n    if a + b > c and a + c > b and b + c > a\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else\n        return -1.0\n    end\nend\n",
            "def will_it_fly(q, w)\n    return false if q.length == 0\n    is_palin = true\n    for i in 0...q.length\n        if q[i] != q[q.length - i - 1]\n            is_palin = false\n        end\n    end\n    total = 0\n    for i in q\n        total += i\n    end\n    return is_palin && total <= w\nend\n",
            "def smallest_change(arr)\n    ans = 0\n    (0..(arr.length / 2 - 1)).each do |i|\n        if arr[i] != arr[arr.length - i - 1]\n            ans += 1\n        end\n    end\n    return ans\nend\n",
            "def total_match(lst1, lst2)\n    cnt1 = 0\n    for s in lst1\n        cnt1 += s.length\n    end\n    cnt2 = 0\n    for s in lst2\n        cnt2 += s.length\n    end\n    return lst1 if cnt1 <= cnt2 else lst2\nend\n",
            "def is_prime(n)\n    n < 2 ? false : (2..Math.sqrt(n).floor).none? {|i| n % i == 0}\nend\ndef is_multiply_prime(a)\n    cnt = 0\n    for i in 2..a\n        if is_prime(i)\n            while a % i == 0\n                cnt += 1\n                a /= i\n            end\n        end\n    end\n    cnt == 3\nend\n",
            "def is_simple_power(x, n)\n    return x == n if n < 2\n    tmp = 1\n    while tmp < x\n        tmp *= n\n    end\n    return tmp == x\nend\n",
            "def is_cube(a)\n    a = a.abs\n    root = (a ** (1.0 / 3.0)).round\n    root * root * root == a\nend\n",
            "def hex_key(num)\n    count = 0\n    for x in num\n        count += 1 if \"2357BD\".include?(x)\n    end\n    return count\nend\n",
            "def decimal_to_binary(dec)\n    binary = dec.to_s(2)\n    return \"db#{binary}db\"\nend\n",
            "def is_happy(s)\n    return false if s.length < 3\n    (0..s.length - 3).each do |i|\n        return false if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n    end\n    return true\nend\n",
            "def numerical_letter_grade(grades)\n    result = []\n    for g in grades\n        if g == 4.0\n            result.append(\"A+\")\n        elsif g > 3.7\n            result.append(\"A\")\n        elsif g > 3.3\n            result.append(\"A-\")\n        elsif g > 3.0\n            result.append(\"B+\")\n        elsif g > 2.7\n            result.append(\"B\")\n        elsif g > 2.3\n            result.append(\"B-\")\n        elsif g > 2.0\n            result.append(\"C+\")\n        elsif g > 1.7\n            result.append(\"C\")\n        elsif g > 1.3\n            result.append(\"C-\")\n        elsif g > 1.0\n            result.append(\"D+\")\n        elsif g > 0.7\n            result.append(\"D\")\n        elsif g > 0.0\n            result.append(\"D-\")\n        else\n            result.append(\"E\")\n        end\n    end\n    return result\nend\n",
            "def prime_length(s)\n    length = s.length\n    if length < 2\n        return false\n    end\n    for i in 2..Math.sqrt(length).floor\n        if length % i == 0\n            return false\n        end\n    end\n    return true\nend\n",
            "def starts_one_ends(n)\n    return 1 if n == 1\n    result = 2 * 9 * (10 ** (n - 2))\n    return result\nend\n",
            "def solve(n)\n    digits_sum = 0\n    for d in n.to_s\n        digits_sum += d.to_i\n    end\n    return digits_sum.to_s(2)[1..-1]\nend\n",
            "def add(lst)\n    result = 0\n    for i, x in enumerate(lst)\n        if i % 2 == 1 and x % 2 == 0\n            result += x\n        end\n    end\n    return result\nend\n",
            "def anti_shuffle(s)\n    words = s.split(\" \").map {|word| word}\n    for i in 0...words.length\n        words[i] = words[i].chars.sort.join\n    end\n    return words.join(\" \")\nend\n",
            "def get_row(lst, x)\n    coords = []\n    for i in 0...lst.length\n        for j in 0...lst[i].length\n            if lst[i][j] == x\n                coords.append([i, j])\n            end\n        end\n    end\n    return coords.sort_by {|a| [a[0], -a[1]]}\nend\n",
            "def sort_array(arr)\n    return [] if arr.length == 0\n    if (arr[0] + arr[-1]) % 2 == 0\n        return arr.sort.reverse\n    else\n        return arr.sort\n    end\nend\n",
            "def encrypt(s)\n    result = []\n    for ch in s\n        shifted = ch.ord + 4\n        if shifted > \"z\".ord\n            shifted -= 26\n        end\n        result << shifted.chr\n    end\n    return result.join\nend\n",
            "def next_smallest(lst)\n    unique_list = lst.uniq\n    sorted_list = unique_list.sort\n    return nil if sorted_list.size < 2\n    return sorted_list[1]\nend\n",
            "def is_bored(s)\n    sentences = s.split(/[.!?]\\s*/)\n    count = 0\n    for sentence in sentences\n        if sentence.length >= 2 and sentence[0..1] == \"I \"\n            count += 1\n        end\n    end\n    return count\nend\n",
            "def any_int(x, y, z)\n    if x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer)\n        return (x + y == z) || (x + z == y) || (y + z == x)\n    end\n    return false\nend\n",
            "def encode(message)\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message\n        if ch.isalpha()\n            ch1 = ch.upcase() if ch.islower() else ch.downcase()\n            if vowels.include?(ch1)\n                ch1 = ch1.succ()\n            end\n            result << ch1\n        else\n            result << ch\n        end\n    end\n    return result.join()\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n).floor).each do |i|\n        return false if n % i == 0\n    end\n    true\nend\ndef skjkasdkd(lst)\n    primes = lst.select {|n| is_prime(n)}\n    if primes.empty?\n        return 0\n    end\n    largest = primes.max.to_s\n    return largest.chars.map {|digit| digit.to_i}.sum\nend\n",
            "def check_dict_case(d)\n    return false if d.empty?\n    lower_case_keys = true\n    upper_case_keys = true\n    d.keys.each do |key|\n        lower_case_keys = false if not key.downcase.eql? key\n        upper_case_keys = false if not key.upcase.eql? key\n    end\n    return lower_case_keys or upper_case_keys\nend\n",
            "def count_up_to(n)\n    primes = []\n    for num in 2..n\n        is_prime = true\n        for p in primes\n            if num % p == 0\n                is_prime = false\n                break\n            end\n        end\n        if is_prime\n            primes << num\n        end\n    end\n    return primes\nend\n",
            "def multiply(a, b)\n    result = 0\n    for i in 0..(a.abs % 10)\n        result += b.abs % 10\n    end\n    return result\nend\n",
            "def count_upper(s)\n    vowels = \"AEIOU\"\n    count = 0\n    for i, c in s.chars.each_with_index\n        if i % 2 == 0 and vowels.include?(c)\n            count += 1\n        end\n    end\n    return count\nend\n",
            "def closest_integer(value)\n    num = value.to_f\n    if num >= 0.0\n        return (num + 0.5).to_i\n    else\n        return (num - 0.5).to_i\n    end\nend\n",
            "def make_a_pile(n)\n    result = []\n    for i in 0..(n - 1)\n        result.append(n + 2 * i)\n    end\n    return result\nend\n",
            "def words_string(s)\n    result = []\n    for w in s.split(/[, ]/)\n        if w.length > 0\n            result << w\n        end\n    end\n    return result\nend\n",
            "def choose_num(x, y)\n    return -1 if x > y\n    return y if y % 2 == 0\n    return y - 1 if x != y\n    return -1\nend\n",
            "def rounded_avg(n, m)\n    return nil if n > m\n    r_avg = (m + n) / 2.0 + 0.5\n    result = r_avg.to_s(2)\n    return result\nend\n",
            "def all_digits_odd(s)\n    s.each_char.all? {|digit| digit.ord % 2 == 1}\nend\ndef unique_digits(x)\n    result = []\n    for num in x\n        if all_digits_odd(num.to_s)\n            result << num\n        end\n    end\n    result.sort\nend\n",
            "def by_length(arr)\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = arr.select {|x| 1 <= x && x <= 9}.sort.reverse\n    return sorted_arr.map {|x| digit_names[x-1]}\nend\n",
            "def f(n)\n    nums = (1..n).to_a\n    result = []\n    for i in nums\n        if i % 2 != 0\n            result << nums[0..i].reduce(:+)\n        else\n            result << nums[0..i].reduce(:*)\n        end\n    end\n    return result\nend\n",
            "def is_palindrome(txt)\n    txt == txt.reverse\nend\ndef even_odd_palindrome(n)\n    cnt = [0, 0]\n    for i in 1..n\n        if is_palindrome(i.to_s)\n            cnt[i % 2] += 1\n        end\n    end\n    return cnt\nend\n",
            "def digits_sum(n)\n    n_str = n.to_s\n    if n >= 0\n        sum_value = 0\n        for d in n_str\n            sum_value += d.to_i\n        end\n        return sum_value\n    else\n        return n_str[0..1].to_i * 2 + digits_sum(n.abs)\n    end\nend\ndef count_nums(arr)\n    count_value = 0\n    for n in arr\n        if digits_sum(n) > 0\n            count_value += 1\n        end\n    end\n    return count_value\nend\n",
            "def move_one_ball(arr)\n    return true if arr.empty?\n    sorted_arr = arr.sort\n    (0..arr.length - 1).each do |i|\n        return true if arr[i..-1] == sorted_arr[0..arr.length - i - 1] && arr[0..i] == sorted_arr[arr.length - i..-1]\n    end\n    return false\nend\n",
            "def can_exchange(lst1, lst2)\n    odd_cnt = 0\n    even_cnt = 0\n    for num in lst1\n        odd_cnt += 1 if num % 2 != 0\n    end\n    for num in lst2\n        even_cnt += 1 if num % 2 == 0\n    end\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\nend\n",
            "def histogram(test)\n    freq = {}\n    words = test.split(\" \").select {|w| w.length > 0}\n    for w in words\n        freq[w] = freq.fetch(w, 0) + 1\n    end\n    result = {}\n    if freq.length > 0\n        max_freq = freq.values.max\n        freq.each {|k, v| result[k] = v if v == max_freq}\n    end\n    return result\nend\n",
            "def is_palindrome(s)\n    s == s.reverse\nend\ndef reverse_delete(s, c)\n    s1 = s.gsub(c, \"\")\n    [s1, \"yes\" if is_palindrome(s1) else \"no\"]\nend\n",
            "def odd_count(lst)\n    result = []\n    for num in lst\n        n = num.chars.reduce(0) {|acc, d| acc + (d.ord % 2 == 1 ? 1 : 0)}\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.gsub(\"i\", n.to_s))\n    end\n    return result\nend\n",
            "def min_sub_array_sum(nums)\n    min_sum = 0\n    cur_sum = 0\n    for n in nums\n        cur_sum = [cur_sum + n, 0].min\n        min_sum = [cur_sum, min_sum].min\n    end\n    if min_sum == 0\n        min_sum = nums.min\n    end\n    return min_sum\nend\n",
            "def max_fill(grid, capacity)\n    result = 0\n    for arr in grid\n        sum_arr = arr.reduce(:+)\n        result += (sum_arr / capacity).ceil\n    end\n    return result\nend\n",
            "def count_ones(num)\n    count = 0\n    while num > 0\n        if num & 1 == 1\n            count += 1\n        end\n        num >>= 1\n    end\n    return count\nend\ndef sort_array(arr)\n    sorted_arr = arr.sort {|a, b| [count_ones(a), a] <=> [count_ones(b), b]}\n    return sorted_arr\nend\n",
            "def select_words(s, n)\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").select {|w| w.length > 0}\n    result = []\n    for w in words\n        count = 0\n        for c in w\n            if c.downcase.include?(consonants)\n                count += 1\n            end\n        end\n        if count == n\n            result << w\n        end\n    end\n    return result\nend\n",
            "def get_closest_vowel(word)\n    vowels = \"aeiouAEIOU\"\n    for i in (0..(word.length - 2)).reverse\n        if vowels.include?(word[i]) and not vowels.include?(word[i - 1]) and not vowels.include?(word[i + 1])\n            return word[i]\n        end\n    end\n    return \"\"\nend\n",
            "def check(s)\n    depth = 0\n    for ch in s\n        if ch == \"(\"\n            depth += 1\n        else\n            depth -= 1\n        end\n        return false if depth < 0\n    end\n    return true if depth == 0 else false\nend\ndef match_parens(lst)\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    if check(s1) || check(s2)\n        return \"Yes\"\n    end\n    return \"No\"\nend\n",
            "def maximum(arr, k)\n    return [] if k == 0\n    result = arr.dup\n    result.sort!\n    return result[-k..-1]\nend\n",
            "def solution(lst)\n    sum_value = 0\n    for i, x in enumerate(lst)\n        if i % 2 == 0 and x % 2 != 0\n            sum_value += x\n        end\n    end\n    return sum_value\nend\n",
            "def add_elements(arr, k)\n    sum_value = 0\n    for n in arr[0..k-1]\n        if n.to_s.length <= 2\n            sum_value += n\n        end\n    end\n    return sum_value\nend\n",
            "def get_odd_collatz(n)\n    collatz = [1]\n    while n != 1\n        if n % 2 != 0\n            collatz << n\n            n = 3 * n + 1\n        else\n            n = n / 2\n        end\n    end\n    return collatz.sort\nend\n",
            "def valid_date(date)\n    return false if date.length != 10 || date[2] != \"-\" || date[5] != \"-\"\n    m = date[0..1].to_i\n    d = date[3..4].to_i\n    if [1, 3, 5, 7, 8, 10, 12].include?(m) && d >= 1 && d <= 31\n        return true\n    end\n    if [4, 6, 9, 11].include?(m) && d >= 1 && d <= 30\n        return true\n    end\n    if m == 2 && d >= 1 && d <= 29\n        return true\n    end\n    return false\nend\n",
            "def split_words(txt)\n    if txt.include?(\" \")\n        return txt.split(\" \")\n    elsif txt.include?(\",\")\n        return txt.split(\",\")\n    else\n        return [txt.count(txt.chars.select {|c| c.islower() && c.ord % 2 == 0}).to_s]\n    end\nend\n",
            "def is_sorted(lst)\n    (0...lst.size-1).each do |i|\n        return false if lst[i] > lst[i+1]\n    end\n    freq = {}\n    lst.each do |i|\n        freq[i] = freq.fetch(i, 0) + 1\n    end\n    return freq.values.max <= 2\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n).floor).each do |i|\n        return false if n % i == 0\n    end\n    true\nend\ndef intersection(interval1, interval2)\n    l = [interval1[0], interval2[0]].max\n    r = [interval1[1], interval2[1]].min\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length)\n    \"NO\"\nend\n",
            "def prod_signs(arr)\n    return nil if arr.empty?\n    return 0 if arr.include?(0)\n    sign = -1 if arr.count {|n| n < 0} % 2 == 1 else 1\n    result = 0\n    for n in arr\n        result += n.abs\n    end\n    return sign * result\nend\n",
            "def min_path(grid, k)\n    n = grid.length\n    min_val = n * n + 1\n    for i in 0...n\n        for j in 0...n\n            if grid[i][j] == 1\n                temp = []\n                if i != 0\n                    temp.append(grid[i - 1][j])\n                end\n                if j != 0\n                    temp.append(grid[i][j - 1])\n                end\n                if i != n - 1\n                    temp.append(grid[i + 1][j])\n                end\n                if j != n - 1\n                    temp.append(grid[i][j + 1])\n                end\n                min_val = [temp.min, min_val].min\n            end\n        end\n    end\n    result = []\n    for i in 0...k\n        result.append(1) if i % 2 == 0 else result.append(min_val)\n    end\n    return result\nend\n",
            "def tri(n)\n    return [1] if n == 0\n    seq = [1, 3]\n    for i in 2..n\n        if i % 2 == 0\n            seq << (i / 2 + 1)\n        else\n            seq << seq[i - 1] + seq[i - 2] + (i + 3) / 2\n        end\n    end\n    return seq\nend\n",
            "def digits(n)\n    odds = n.to_s.chars.map(&:to_i).select {|d| d % 2 == 1}\n    result = 1\n    for d in odds\n        result *= d\n    end\n    return result if odds.size > 0 else 0\nend\n",
            "def is_nested(s)\n    open_idx = []\n    close_idx = []\n    s.each_char.with_index {|ch, i| open_idx << i if ch == '['; close_idx << i if ch == ']'}\n    close_idx.reverse!\n    cnt = 0\n    i = 0\n    l = close_idx.length\n    open_idx.each {|idx| cnt += 1 if i < l && idx < close_idx[i]; i += 1}\n    return cnt >= 2\nend\n",
            "def sum_squares(lst)\n    result = 0\n    for n in lst\n        result += (n.ceil) ** 2\n    end\n    return result\nend\n",
            "def check_if_last_char_is_a_letter(txt)\n    return false if txt.empty?\n    last = txt[txt.rindex(' ') + 1..-1]\n    return last.length == 1 && last[0].isalpha\nend\n",
            "def can_arrange(arr)\n    return -1 if arr.length <= 1\n    idx = []\n    (1..arr.length - 1).each do |i|\n        idx << i if arr[i] < arr[i - 1]\n    end\n    return idx.max {|a, b| a <=> b}\nend\n",
            "def largest_smallest_integers(lst)\n    max_neg = nil\n    min_pos = nil\n    for i in lst\n        if i < 0\n            if max_neg.nil? || i > max_neg\n                max_neg = i\n            end\n        elsif i > 0\n            if min_pos.nil? || i < min_pos\n                min_pos = i\n            end\n        end\n    end\n    return [max_neg, min_pos]\nend\n",
            "def any_to_real(o)\n    if o.is_a? String\n        return Float(o.gsub(',', '.'))\n    elsif o.is_a? Integer\n        return Float(o)\n    elsif o.is_a? Float\n        return o\n    else\n        raise RuntimeError.new(\"Type Error\")\n    end\nend\ndef compare_one(a, b)\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1\n        return nil\n    elsif a1 > b1\n        return a1\n    else\n        return b1\n    end\nend\n",
            "def is_equal_to_sum_even(n)\n    n % 2 == 0 and n >= 8\nend\n",
            "def special_factorial(n)\n    result = 1\n    (1..n).each do |i|\n        fact = 1\n        (1..i).each do |j|\n            fact *= j\n        end\n        result *= fact\n    end\n    return result\nend\n",
            "def fix_spaces(txt)\n    txt.gsub(/\\s{3,}/, \"-\").gsub(\" \", \"_\")\nend\n",
            "def file_name_check(file_name)\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if lst.size != 2 or not suf.include?(lst[1]) or lst[0].size == 0 or not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String) or lst[0][0].is_a?(String) and not lst[0][0].is_a?(String",
            "def sum_squares(lst)\n    result = 0\n    for i in 0...lst.length\n        if i % 3 == 0\n            result += lst[i] ** 2\n        elsif i % 4 == 0\n            result += lst[i] ** 3\n        else\n            result += lst[i]\n        end\n    end\n    return result\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n).floor).each do |i|\n        return false if n % i == 0\n    end\n    true\nend\ndef words_in_sentence(sentence)\n    words = sentence.split(\" \")\n    result = []\n    for w in words\n        result.append(w) if is_prime(w.length)\n    end\n    return result.join(\" \")\nend\n",
            "def simplify(x, n)\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = xs[0].to_i * ns[0].to_i\n    den = xs[1].to_i * ns[1].to_i\n    num % den == 0\nend\n",
            "def digits_sum(n)\n    n_str = n.to_s\n    if n >= 0\n        result = 0\n        for d in n_str\n            result += d.to_i\n        end\n        return result\n    else\n        return n_str[0..1].to_i * 2 + digits_sum(n.abs)\n    end\nend\ndef order_by_points(nums)\n    result = []\n    for num in nums\n        result << num\n    end\n    result.sort_by! {|num| digits_sum(num)}\n    return result\nend\n",
            "def special_filter(nums)\n    odds = \"13579\"\n    count = 0\n    for n in nums\n        if n > 10 and n % 2 == 1 and odds.include?(n.to_s[0])\n            count += 1\n        end\n    end\n    return count\nend\n",
            "def get_max_triples(n)\n    c = [0, 0, 0]\n    for i in 1..n\n        a = i * i - i + 1\n        c[a % 3] += 1\n    end\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\nend\n",
            "def bf(planet1, planet2)\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if !names.include?(planet1) || !names.include?(planet2)\n        return []\n    end\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r\n        l, r = r, l\n    end\n    if l == r\n        return []\n    end\n    return names[l + 1 .. r]\nend\n",
            "def sorted_list_sum(lst)\n    result = []\n    for s in lst\n        if s.length % 2 == 0\n            result << s\n        end\n    end\n    result.sort_by! {|x| [x.length, x]}\n    return result\nend\n",
            "def x_or_y(n, x, y)\n    return y if n < 2\n    (2..Math.sqrt(n).floor).each do |i|\n        return y if n % i == 0\n    end\n    return x\nend\n",
            "def double_the_difference(lst)\n    result = 0\n    for n in lst\n        if n >= 0.0 and n % 2 == 1.0\n            result += n * n\n        end\n    end\n    return result\nend\n",
            "def compare(game, guess)\n    result = []\n    for x, y in game.zip(guess)\n        result.append(x - y).abs\n    end\n    return result\nend\n",
            "def strongest_extension(class_name, extensions)\n    max_s = -Float::INFINITY\n    max_ext = \"\"\n    for ext in extensions\n        upper = 0\n        lower = 0\n        for c in ext\n            if c.upcase == c\n                upper += 1\n            else\n                lower += 1\n            end\n        end\n        s = upper - lower\n        if s > max_s\n            max_s = s\n            max_ext = ext\n        end\n    end\n    return \"#{class_name}.#{max_ext}\"\nend\n",
            "def cycpattern_check(a, b)\n    return false if a.length < b.length\n    b.length.times.any? {|i| b[i..-1] + b[0...i] == a}\nend\n",
            "def even_odd_count(num)\n    ds = num.abs.to_s.chars\n    even = 0\n    for d in ds\n        even += 1 if d.ord % 2 == 0\n    end\n    return [even, ds.length - even]\nend\n",
            "def int_to_mini_roman(num)\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i in 0...values.length\n        while num >= values[i]\n            res.append(numerals[i])\n            num -= values[i]\n        end\n    end\n    return res.join\nend\n",
            "def right_angle_triangle(a, b, c)\n    s = [a, b, c].sort\n    s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\nend\n",
            "def find_max(words)\n    max_cnt = 0\n    max_w = \"\"\n    for w in words\n        cnt = w.chars.uniq.size\n        if cnt > max_cnt\n            max_cnt = cnt\n            max_w = w\n        elsif cnt == max_cnt\n            max_w = [max_w, w].min\n        end\n    end\n    return max_w\nend\n",
            "def eat(num, need, remaining)\n    if need <= remaining\n        return [num + need, remaining - need]\n    else\n        return [num + remaining, 0]\n    end\nend\n",
            "def do_algebra(operators, operands)\n    ops = operators.dup\n    nums = operands.dup\n    i = operators.length - 1\n    while i >= 0\n        if ops[i] == \"**\"\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n        end\n        i -= 1\n    end\n    i = 0\n    while i < operators.length\n        if ops[i] == \"*\"\n            nums[i] = nums[i] * nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        elsif ops[i] == \"//\"\n            nums[i] = nums[i] / nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        end\n        i += 1\n    end\n    i = 0\n    while i < operators.length\n        if ops[i] == \"+\"\n            nums[i] = nums[i] + nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        elsif ops[i] == \"-\"\n            nums[i] = nums[i] - nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        end\n        i += 1\n    end\n    return nums[0]\nend\n",
            "def solve(s)\n    result = []\n    for ch in s\n        if not ch.isalpha()\n            result.append(ch)\n        elsif ch.upcase == ch\n            result.append(ch.downcase)\n        elsif ch.downcase == ch\n            result.append(ch.upcase)\n        end\n    end\n    if not result.any? {|ch| ch.isalpha()}\n        return result.reverse.join\n    end\n    return result.join\nend\n",
            "def string_to_md5(txt)\n    return nil if txt.empty?\n    md5_hash = Digest::MD5.new\n    txt_bytes = txt.encode()\n    md5_hash.update(txt_bytes)\n    md5_encoded = md5_hash.hexdigest()\n    return md5_encoded\nend\n",
            "def generate_integers(a, b)\n    lower = [2, [a, b].min].max\n    upper = [8, [a, b].max].min\n    result = []\n    for i in lower..upper\n        result << i if i % 2 == 0\n    end\n    return result\nend\n"
        ],
        "rust": [
            "pub fn has_close_elements(numbers: &Vec<f64>, threshold: f64) -> bool {\n    for i in 0..numbers.len() {\n        for j in (i + 1)..numbers.len() {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n                return true;\n            }\n        }\n    }\n    false\n}\n",
            "pub fn separate_paren_groups(paren_string: &String) -> Vec<String> {\n    let mut groups = vec![];\n    let mut stk = vec![];\n    let mut current_group = String::new();\n    let parens = paren_string.replace(\" \", \"\");\n    for ch in parens.chars() {\n        if ch == '(' {\n            stk.push(ch);\n            current_group.push(ch);\n        } else if ch == ')' {\n            stk.pop();\n            current_group.push(ch);\n            if stk.is_empty() {\n                groups.push(current_group.clone());\n                current_group.clear();\n            }\n        }\n    }\n    groups\n}\n",
            "pub fn truncate_number(num: f64) -> f64 {\n    num - num.floor()\n}\n",
            "pub fn below_zero(operations: &Vec<i32>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n        balance += op;\n        if balance < 0 {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn mean_absolute_deviation(numbers: &Vec<f64>) -> f64 {\n    let mean: f64 = numbers.iter().sum::<f64>() / numbers.len() as f64;\n    let mut deviation: f64 = 0.0;\n    for x in numbers {\n        deviation += (x - mean).abs();\n    }\n    deviation / numbers.len() as f64\n}\n",
            "pub fn intersperse(numbers: &Vec<i32>, delimiter: i32) -> Vec<i32> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate() {\n        if i != 0 {\n            result.push(delimiter);\n        }\n        result.push(*n);\n    }\n    result\n}\n",
            "pub fn parse_nested_parens(paren_string: &String) -> Vec<i32> {\n    let mut result = vec![];\n    let paren_groups: Vec<&str> = paren_string.split(\" \").collect();\n    for group in paren_groups {\n        let mut max_depth = 0;\n        let mut depth = 0;\n        for ch in group.chars() {\n            if ch == '(' {\n                depth += 1;\n                max_depth = max(max_depth, depth);\n            } else if ch == ')' {\n                depth -= 1;\n            }\n        }\n        result.push(max_depth);\n    }\n    result\n}\n",
            "pub fn filter_by_substring(strs: &Vec<String>, substring: &String) -> Vec<String> {\n    let mut result = vec![];\n    for s in strs {\n        if s.contains(substring) {\n            result.push(s.to_string());\n        }\n    }\n    result\n}\n",
            "pub fn sum_product(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut n_sum = 0;\n    let mut n_product = 1;\n    for n in numbers {\n        n_sum += n;\n        n_product *= n;\n    }\n    vec![n_sum, n_product]\n}\n",
            "pub fn rolling_max(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    let mut max_so_far = std::i32::MIN;\n    for num in numbers {\n        if *num > max_so_far {\n            max_so_far = *num;\n        }\n        result.push(max_so_far);\n    }\n    result\n}\n",
            "pub fn make_palindrome(s: &String) -> String {\n    if s == s.chars().rev().collect::<String>() {\n        s.to_string()\n    } else {\n        for i in 0..s.len() {\n            if s[i..].chars().rev().collect::<String>() == s[..i].to_string() {\n                return format!(\"{}{}\", s, s[..i].to_string());\n            }\n        }\n        \"\".to_string()\n    }\n}\n",
            "pub fn string_xor(a: &String, b: &String) -> String {\n    let mut result = String::new();\n    for (i, (c1, c2)) in a.chars().zip(b.chars()).enumerate() {\n        if c1 == c2 {\n            result.push('0');\n        } else {\n            result.push('1');\n        }\n    }\n    result\n}\n",
            "pub fn longest(strs: &Vec<String>) -> Option<String> {\n    if strs.is_empty() { return None }\n    let mut longest_s = strs[0].clone();\n    for s in strs {\n        if s.len() > longest_s.len() {\n            longest_s = s.clone();\n        }\n    }\n    Some(longest_s)\n}\n",
            "pub fn greatest_common_divisor(a: i32, b: i32) -> i32 {\n    while b != 0 {\n        let temp = b;\n        b = a % b;\n        a = temp;\n    }\n    a\n}\n",
            "pub fn all_prefixes(s: &String) -> Vec<String> {\n    let mut prefixes = vec![];\n    for i in 0..s.len() {\n        prefixes.push(s[..i + 1].to_string());\n    }\n    prefixes\n}\n",
            "pub fn string_sequence(n: i32) -> String {\n    let mut result = String::new();\n    for i in 0..n + 1 {\n        result.push_str(&i.to_string());\n        result.push(' ');\n    }\n    result.pop();\n    result\n}\n",
            "pub fn count_distinct_characters(s: &String) -> i32 {\n    let mut distinct_characters: HashSet<char> = HashSet::new();\n    for char in s.chars() {\n        distinct_characters.insert(char);\n    }\n    distinct_characters.len() as i32\n}\n",
            "pub fn parse_music(music_string: &String) -> Vec<i32> {\n    let durations = vec![4, 2, 1];\n    let notes: Vec<&str> = music_string.split(\" \").collect();\n    let mut result = Vec::new();\n    for note in notes {\n        result.push(durations[note.chars().nth(0).unwrap() as usize - 'o' as usize]);\n    }\n    result\n}\n",
            "pub fn how_many_times(s: &String, substring: &String) -> i32 {\n    let mut times = 0;\n    for i in 0..s.len() - substring.len() + 1 {\n        if &s[i..i + substring.len()] == substring {\n            times += 1;\n        }\n    }\n    times\n}\n",
            "pub fn sort_numbers(numbers: &String) -> String {\n    let mut num_dict = HashMap::new();\n    num_dict.insert(\"zero\", 0);\n    num_dict.insert(\"one\", 1);\n    num_dict.insert(\"two\", 2);\n    num_dict.insert(\"three\", 3);\n    num_dict.insert(\"four\", 4);\n    num_dict.insert(\"five\", 5);\n    num_dict.insert(\"six\", 6);\n    num_dict.insert(\"seven\", 7);\n    num_dict.insert(\"eight\", 8);\n    num_dict.insert(\"nine\", 9);\n    let mut num_list: Vec<&str> = numbers.split(\" \").filter(|x| num_dict.contains_key(x)).collect();\n    num_list.sort_by(|a, b| num_dict[a].cmp(&num_dict[b]));\n    num_list.join(\" \")\n}\n",
            "pub fn find_closest_elements(numbers: &Vec<f64>) -> Vec<f64> {\n    let mut sorted_numbers = numbers.to_vec();\n    sorted_numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    let mut min_diff = f64::INFINITY;\n    let mut closest_pair = vec![];\n    for i in 1..sorted_numbers.len() {\n        let diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if diff < min_diff {\n            min_diff = diff;\n            closest_pair = vec![sorted_numbers[i - 1], sorted_numbers[i]];\n        }\n    }\n    closest_pair\n}\n",
            "pub fn rescale_to_unit(numbers: &Vec<f64>) -> Vec<f64> {\n    let mut min_num = f64::INFINITY;\n    let mut max_num = f64::NEG_INFINITY;\n    for num in numbers {\n        if *num < min_num {\n            min_num = *num;\n        }\n        if *num > max_num {\n            max_num = *num;\n        }\n    }\n    if min_num == max_num {\n        return vec![0.0; numbers.len()];\n    } else {\n        return numbers.iter().map(|num| (num - min_num) / (max_num - min_num)).collect();\n    }\n}\n",
            "pub fn filter_integers(values: &Vec<Box<dyn std::any::Any>>) -> Vec<i32> {\n    let mut result = vec![];\n    for x in values {\n        if let Some(x) = x.downcast_ref::<i32>() {\n            result.push(*x);\n        }\n    }\n    result\n}\n",
            "pub fn str_length(s: &String) -> i32 {\n    let mut length = 0;\n    for char in s.chars() {\n        length += 1;\n    }\n    length\n}\n",
            "pub fn largest_divisor(n: i32) -> i32 {\n    for i in 2..n {\n        if n % i == 0 {\n            return n / i;\n        }\n    }\n    1\n}\n",
            "pub fn factorize(n: i32) -> Vec<i32> {\n    let mut factors = vec![];\n    let mut divisor = 2;\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    factors\n}\n",
            "pub fn remove_duplicates(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut counts = HashMap::new();\n    for num in numbers {\n        *counts.entry(*num).or_insert(0) += 1;\n    }\n    let res: Vec<i32> = numbers.iter().filter(|&num| counts[num] == 1).cloned().collect();\n    res\n}\n",
            "pub fn flip_case(s: &String) -> String {\n    let mut flipped = String::new();\n    for ch in s.chars() {\n        if !ch.is_alphabetic() {\n            flipped.push(ch);\n        } else if ch.is_lowercase() {\n            flipped.push(ch.to_uppercase().next().unwrap());\n        } else if ch.is_uppercase() {\n            flipped.push(ch.to_lowercase().next().unwrap());\n        }\n    }\n    flipped\n}\n",
            "pub fn concatenate(strs: &Vec<String>) -> String {\n    let mut result = String::new();\n    for s in strs {\n        result.push_str(s);\n    }\n    result\n}\n",
            "pub fn filter_by_prefix(strs: &Vec<String>, prefix_str: &String) -> Vec<String> {\n    let mut result = vec![];\n    for s in strs {\n        if s.starts_with(prefix_str) {\n            result.push(s.to_string());\n        }\n    }\n    result\n}\n",
            "pub fn get_positive(l: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for num in l {\n        if *num > 0 {\n            result.push(*num);\n        }\n    }\n    result\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 { return false }\n    for i in 2..=n.sqrt() as i32 {\n        if n % i == 0 { return false }\n    }\n    true\n}\n",
            "pub fn poly(xs: &Vec<i32>, x: f64) -> f64 {\n    let mut res = 0.0;\n    for i in 0..xs.len() {\n        res += xs[i] as f64 * x.powi(i as i32);\n    }\n    res\n}\npub fn find_zero(xs: &Vec<i32>) -> f64 {\n    let mut x1 = 1.0;\n    let mut x2 = -1.0;\n    while poly(xs, x1) * poly(xs, x2) > 0.0 {\n        x1 *= 2.0;\n        x2 *= 2.0;\n    }\n    while (x1 - x2).abs() > 1e-10 {\n        let mid = (x1 + x2) / 2.0;\n        if poly(xs, mid).abs() < 1e-10 {\n            return mid;\n        } else if poly(xs, mid) * poly(xs, x1) < 0.0 {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    (x1 + x2) / 2.0\n}\n",
            "pub fn sort_third(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_third = l[..].to_vec();\n    sorted_third.sort();\n    let mut result = Vec::new();\n    for i in 0..l.len() {\n        if i % 3 == 0 {\n            result.push(sorted_third[i / 3]);\n        } else {\n            result.push(l[i]);\n        }\n    }\n    result\n}\n",
            "pub fn list_unique(l: &Vec<i32>) -> Vec<i32> {\n    let mut unique_list = Vec::new();\n    for item in l {\n        if !unique_list.contains(item) {\n            unique_list.push(*item);\n        }\n    }\n    unique_list.sort();\n    unique_list\n}\n",
            "pub fn max_element(l: &Vec<i32>) -> i32 {\n    let mut max_value = std::i32::MIN;\n    for i in l {\n        if *i > max_value {\n            max_value = *i;\n        }\n    }\n    max_value\n}\n",
            "pub fn fizz_buzz(n: i32) -> i32 {\n    let mut cnt = 0;\n    for i in 1..=n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += i.to_string().chars().filter(|&c| c == '7').count() as i32;\n        }\n    }\n    cnt\n}\n",
            "pub fn sort_even(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_even: Vec<i32> = l[0..l.len()].iter().filter(|&x| x % 2 == 0).cloned().collect();\n    sorted_even.sort();\n    let mut result = Vec::new();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n            result.push(sorted_even[i / 2]);\n        } else {\n            result.push(l[i]);\n        }\n    }\n    result\n}\n",
            "pub fn encode_cyclic(s: &String) -> String {\n    let mut result = String::new();\n    for i in (0..s.len()).step_by(3) {\n        if i + 3 > s.len() {\n            result.push_str(&s[i..]);\n        } else {\n            result.push_str(&s[i+1..i+3]);\n            result.push(s.chars().nth(i).unwrap());\n        }\n    }\n    result\n}\npub fn decode_cyclic(s: &String) -> String {\n    encode_cyclic(&encode_cyclic(s))\n}\n",
            "fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=n.sqrt() as i32 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn prime_fib(n: i32) -> i32 {\n    let mut f = vec![0, 1];\n    let mut cnt = 0;\n    while cnt < n {\n        f = vec![f[1], f[0] + f[1]];\n        if is_prime(f[1]) {\n            cnt += 1;\n        }\n    }\n    f[1]\n}\n",
            "pub fn triples_sum_to_zero(l: &Vec<i32>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len() {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true;\n                }\n            }\n        }\n    }\n    false\n}\n",
            "pub fn car_race_collision(n: i32) -> i32 {\n    n.pow(2)\n}\n",
            "pub fn incr_list(l: &Vec<i32>) -> Vec<i32> {\n    l.iter().map(|&x| x + 1).collect()\n}\n",
            "pub fn pairs_sum_to_zero(l: &Vec<i32>) -> bool {\n    let mut seen: HashSet<i32> = HashSet::new();\n    for num in l {\n        if seen.contains(&(-num)) { return true }\n        seen.insert(*num);\n    }\n    false\n}\n",
            "pub fn change_base(x: i32, bas: i32) -> String {\n    if x == 0 {\n        return \"0\".to_string();\n    }\n    let mut result = String::new();\n    while x > 0 {\n        result = format!(\"{}{}\", x % bas, result);\n        x /= bas;\n    }\n    result\n}\n",
            "pub fn triangle_area(a: i32, h: i32) -> f64 {\n    (a * h) as f64 / 2.0\n}\n",
            "pub fn fib4(n: i32) -> i32 {\n    let mut fib = [0, 0, 2, 0];\n    for i in 4..=n {\n        fib[i as usize % 4] = fib[i as usize % 4 - 2] + fib[i as usize % 4 - 1];\n    }\n    fib[n as usize % 4]\n}\n",
            "pub fn median(l: &Vec<f64>) -> f64 {\n    let mut sl = l.to_vec();\n    sl.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    if sl.len() % 2 == 0 { sl[sl.len() / 2] } else { (sl[sl.len() / 2] + sl[sl.len() / 2 - 1]) / 2.0 }\n}\n",
            "pub fn is_palindrome(txt: &String) -> bool {\n    let mut chars: Vec<char> = txt.chars().collect();\n    for i in 0..chars.len() / 2 {\n        if chars[i] != chars[chars.len() - i - 1] {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn modp(n: i32, p: i32) -> i32 {\n    let mut ret = 1;\n    for _ in 0..n {\n        ret = (ret * 2) % p;\n    }\n    ret\n}\n",
            "pub fn encode_shift(s: &String) -> String {\n    s.chars().map(|ch| (((ch as u8 - 97 + 5) % 26) + 97) as char).collect()\n}\npub fn decode_shift(s: &String) -> String {\n    s.chars().map(|ch| (((ch as u8 - 97 + 21) % 26) + 97) as char).collect()\n}\n",
            "pub fn remove_vowels(txt: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    let mut result = String::new();\n    for char in txt.chars() {\n        if !vowels.contains(char) {\n            result.push(char);\n        }\n    }\n    result\n}\n",
            "pub fn below_threshold(l: &Vec<i32>, t: i32) -> bool {\n    for x in l {\n        if x >= t {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn add(x: i32, y: i32) -> i32 {\n    x + y\n}\n",
            "pub fn same_chars(s0: &String, s1: &String) -> bool {\n    let s0_set: HashSet<char> = s0.chars().collect();\n    let s1_set: HashSet<char> = s1.chars().collect();\n    s0_set == s1_set\n}\n",
            "pub fn fib(n: i32) -> i32 {\n    if n <= 1 {\n        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n}\n",
            "pub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '<' {\n            depth += 1;\n        } else if b == '>' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn monotonic(l: &Vec<i32>) -> bool {\n    let diff: Vec<i32> = l.iter().zip(l.iter().skip(1)).map(|(x, y)| y - x).collect();\n    diff.iter().all(|&x| x <= 0) || diff.iter().all(|&x| x >= 0)\n}\n",
            "pub fn common(l1: &Vec<i32>, l2: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in l1 {\n        if l2.contains(i) {\n            result.push(*i);\n        }\n    }\n    result.sort();\n    result\n}\n",
            "pub fn largest_prime_factor(n: i32) -> i32 {\n    let mut i = 2;\n    while i * i <= n {\n        if n % i != 0 {\n            i += 1;\n        } else {\n            n /= i;\n        }\n    }\n    n\n}\n",
            "pub fn sum_to_n(n: i32) -> i32 {\n    (n * (n + 1)) / 2\n}\n",
            "pub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '(' {\n            depth += 1;\n        } else if b == ')' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn derivative(xs: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i] * i as i32);\n    }\n    result\n}\n",
            "pub fn fibfib(n: i32) -> i32 {\n    if n <= 1 {\n        0\n    } else {\n        let mut a = 0;\n        let mut b = 0;\n        let mut c = 1;\n        while n > 2 {\n            a = b;\n            b = c;\n            c = a + b + c;\n            n -= 1;\n        }\n        c\n    }\n}\n",
            "pub fn vowels_count(s: &String) -> i32 {\n    let vowels = \"aeiou\";\n    let mut cnt = 0;\n    for (i, c) in s.chars().enumerate() {\n        if c.to_lowercase().collect::<String>().contains(vowels) || (i == s.len() - 1 && c.to_lowercase().collect::<String>() == \"y\") {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n",
            "pub fn circular_shift(x: i32, shift: i32) -> String {\n    let x_str = x.to_string();\n    if shift > x_str.len() as i32 {\n        x_str.chars().rev().collect()\n    } else {\n        x_str[x_str.len() - shift as usize..].to_string() + &x_str[..x_str.len() - shift as usize]\n    }\n}\n",
            "pub fn digit_sum(s: &String) -> i32 {\n    let mut sum_value: i32 = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n            sum_value += c as i32;\n        }\n    }\n    sum_value\n}\n",
            "pub fn fruit_distribution(s: &String, n: i32) -> i32 {\n    let words: Vec<&str> = s.split(' ').collect();\n    let apples = words[words.iter().position(|&x| x == \"apples\").unwrap() - 1].parse::<i32>().unwrap();\n    let oranges = words[words.iter().position(|&x| x == \"oranges\").unwrap() - 1].parse::<i32>().unwrap();\n    n - apples - oranges\n}\n",
            "pub fn pluck(arr: &Vec<i32>) -> Vec<i32> {\n    let evens: Vec<i32> = arr.iter().filter(|&n| n % 2 == 0).cloned().collect();\n    if evens.len() == 0 {\n        return vec![];\n    }\n    let min_even = evens.iter().min().unwrap();\n    vec![min_even.clone(), arr.iter().position(|&n| n == *min_even).unwrap() as i32]\n}\n",
            "pub fn search(lst: &Vec<i32>) -> i32 {\n    let mut freqs: HashMap<i32, i32> = HashMap::new();\n    for n in lst {\n        *freqs.entry(*n).or_insert(0) += 1;\n    }\n    let good_vals: Vec<i32> = freqs.iter().filter(|(k, v)| **v >= *k).map(|(k, _)| *k).collect();\n    if good_vals.len() > 0 {\n        *good_vals.iter().max().unwrap()\n    } else {\n        -1\n    }\n}\n",
            "pub fn strange_sort_list(lst: &Vec<i32>) -> Vec<i32> {\n    let mut sl = lst.to_vec();\n    sl.sort();\n    let mut result = Vec::new();\n    let (mut left, mut right) = (0, sl.len() - 1);\n    while left <= right {\n        result.push(sl[left]);\n        left += 1;\n        if left <= right {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    result\n}\n",
            "pub fn triangle_area(a: i32, b: i32, c: i32) -> f64 {\n    let s = (a + b + c) as f64 / 2.0;\n    if a + b > c && a + c > b && b + c > a {\n        return (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt();\n    }\n    -1.0\n}\n",
            "pub fn will_it_fly(q: &Vec<i32>, w: i32) -> bool {\n    if q.len() == 0 { return false }\n    let mut is_palin = true;\n    for i in 0..q.len() {\n        if q[i] != q[q.len() - i - 1] {\n            is_palin = false;\n        }\n    }\n    let mut total = 0;\n    for i in q {\n        total += i;\n    }\n    is_palin && total <= w\n}\n",
            "pub fn smallest_change(arr: &Vec<i32>) -> i32 {\n    let mut ans = 0;\n    for i in 0..(arr.len() / 2) {\n        if arr[i] != arr[arr.len() - i - 1] {\n            ans += 1;\n        }\n    }\n    ans\n}\n",
            "pub fn total_match(lst1: &Vec<String>, lst2: &Vec<String>) -> Vec<String> {\n    let mut cnt1 = 0;\n    for s in lst1 {\n        cnt1 += s.len();\n    }\n    let mut cnt2 = 0;\n    for s in lst2 {\n        cnt2 += s.len();\n    }\n    if cnt1 <= cnt2 { lst1.to_vec() } else { lst2.to_vec() }\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 { return false }\n    for i in 2..=n.sqrt() as i32 {\n        if n % i == 0 { return false }\n    }\n    true\n}\npub fn is_multiply_prime(a: i32) -> bool {\n    let mut cnt = 0;\n    let mut n = a;\n    for i in 2..=n {\n        if is_prime(i) {\n            while n % i == 0 {\n                cnt += 1;\n                n /= i;\n            }\n        }\n    }\n    cnt == 3\n}\n",
            "pub fn is_simple_power(x: i32, n: i32) -> bool {\n    if n < 2 {\n        return x == n;\n    }\n    let mut tmp = 1;\n    while tmp < x {\n        tmp *= n;\n    }\n    tmp == x\n}\n",
            "pub fn is_cube(a: i32) -> bool {\n    let a = a.abs();\n    let root = (a as f64).powf(1.0 / 3.0) as i32;\n    root * root * root == a\n}\n",
            "pub fn hex_key(num: &String) -> i32 {\n    let mut count = 0;\n    for x in num.chars() {\n        if \"2357BD\".contains(x) {\n            count += 1;\n        }\n    }\n    count\n}\n",
            "pub fn decimal_to_binary(dec: i32) -> String {\n    format!(\"db{:b}db\", dec)\n}\n",
            "pub fn is_happy(s: &String) -> bool {\n    if s.len() < 3 { return false; }\n    for i in 0..(s.len() - 2) {\n        if s.chars().nth(i).unwrap() == s.chars().nth(i + 1).unwrap() || s.chars().nth(i).unwrap() == s.chars().nth(i + 2).unwrap() || s.chars().nth(i + 1).unwrap() == s.chars().nth(i + 2).unwrap() { return false; }\n    }\n    true\n}\n",
            "pub fn numerical_letter_grade(grades: &Vec<f64>) -> Vec<String> {\n    let mut result = Vec::new();\n    for g in grades {\n        if *g == 4.0 {\n            result.push(\"A+\".to_string());\n        } else if *g > 3.7 {\n            result.push(\"A\".to_string());\n        } else if *g > 3.3 {\n            result.push(\"A-\".to_string());\n        } else if *g > 3.0 {\n            result.push(\"B+\".to_string());\n        } else if *g > 2.7 {\n            result.push(\"B\".to_string());\n        } else if *g > 2.3 {\n            result.push(\"B-\".to_string());\n        } else if *g > 2.0 {\n            result.push(\"C+\".to_string());\n        } else if *g > 1.7 {\n            result.push(\"C\".to_string());\n        } else if *g > 1.3 {\n            result.push(\"C-\".to_string());\n        } else if *g > 1.0 {\n            result.push(\"D+\".to_string());\n        } else if *g > 0.7 {\n            result.push(\"D\".to_string());\n        } else if *g > 0.0 {\n            result.push(\"D-\".to_string());\n        } else {\n            result.push(\"E\".to_string());\n        }\n    }\n    result\n}\n",
            "pub fn prime_length(s: &String) -> bool {\n    let length = s.len();\n    if length < 2 { return false; }\n    for i in 2..=((length as f64).sqrt() as i32) {\n        if length % i == 0 { return false; }\n    }\n    true\n}\n",
            "pub fn starts_one_ends(n: i32) -> i32 {\n    if n == 1 {\n        return 1;\n    }\n    let result = 2 * 9 * (10_i32.pow((n - 2) as u32));\n    result\n}\n",
            "pub fn solve(n: i32) -> String {\n    let mut digits_sum = 0;\n    for d in n.to_string().chars() {\n        digits_sum += d.to_digit(10).unwrap();\n    }\n    format!(\"{:b}\", digits_sum)\n}\n",
            "pub fn add(lst: &Vec<i32>) -> i32 {\n    let mut result = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 1 && x % 2 == 0 {\n            result += x;\n        }\n    }\n    result\n}\n",
            "pub fn anti_shuffle(s: &String) -> String {\n    let words: Vec<&str> = s.split(\" \").collect();\n    let mut result = String::new();\n    for word in words {\n        let mut chars: Vec<char> = word.chars().collect();\n        chars.sort();\n        result.push_str(&chars.iter().collect::<String>());\n        result.push(' ');\n    }\n    result.pop();\n    result\n}\n",
            "pub fn get_row(lst: &Vec<Vec<i32>>, x: i32) -> Vec<Vec<i32>> {\n    let mut coords: Vec<Vec<i32>> = lst.iter().enumerate().flat_map(|(i, row)| {\n        row.iter().enumerate().filter_map(move |(j, &e)| {\n            if e == x { Some(vec![i as i32, j as i32]) } else { None }\n        })\n    }).collect();\n    coords.sort_by(|a, b| a[0].cmp(&b[0]).then(a[1].cmp(&b[1]).reverse()));\n    coords\n}\n",
            "pub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    if arr.len() == 0 { return vec![] }\n    if (arr[0] + arr[arr.len() - 1]) % 2 == 0 {\n        let mut result = arr.to_vec();\n        result.sort_by(|a, b| b.cmp(a));\n        result\n    } else {\n        let mut result = arr.to_vec();\n        result.sort();\n        result\n    }\n}\n",
            "pub fn encrypt(s: &String) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        let shifted = ch as u32 + 4;\n        if shifted > 'z' as u32 {\n            result.push((shifted - 26) as u8 as char);\n        } else {\n            result.push(shifted as u8 as char);\n        }\n    }\n    result\n}\n",
            "pub fn next_smallest(lst: &Vec<i32>) -> Option<i32> {\n    let unique_list: HashSet<i32> = lst.iter().cloned().collect();\n    let sorted_list: Vec<i32> = unique_list.into_iter().sorted().collect();\n    if sorted_list.len() < 2 {\n        return None;\n    }\n    Some(sorted_list[1])\n}\n",
            "pub fn is_bored(s: &String) -> i32 {\n    let sentences: Vec<&str> = s.split(\".!?\").collect();\n    let mut count = 0;\n    for sentence in sentences {\n        if sentence.starts_with(\"I \") && sentence.len() >= 2 {\n            count += 1;\n        }\n    }\n    count\n}\n",
            "pub fn any_int(x: &Box<dyn std::any::Any>, y: &Box<dyn std::any::Any>, z: &Box<dyn std::any::Any>) -> bool {\n    if let (Some(x), Some(y), Some(z)) = (x.downcast_ref::<i32>(), y.downcast_ref::<i32>(), z.downcast_ref::<i32>()) {\n        return (x + y == z) || (x + z == y) || (y + z == x);\n    }\n    false\n}\n",
            "pub fn encode(message: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    let mut result = String::new();\n    for ch in message.chars() {\n        if ch.is_alphabetic() {\n            let ch1 = if ch.is_lowercase() { ch.to_uppercase().next().unwrap() } else { ch.to_lowercase().next().unwrap() };\n            if vowels.contains(ch1) {\n                result.push((ch1 as u8 + 2) as char);\n            } else {\n                result.push(ch1);\n            }\n        } else {\n            result.push(ch);\n        }\n    }\n    result\n}\n",
            "fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn skjkasdkd(lst: &Vec<i32>) -> i32 {\n    let primes: Vec<i32> = lst.iter().filter(|&n| is_prime(*n)).cloned().collect();\n    if primes.len() == 0 {\n        return 0;\n    }\n    let largest: String = primes.iter().map(|n| n.to_string()).max().unwrap();\n    largest.chars().map(|c| c.to_digit(10).unwrap()).sum()\n}\n",
            "pub fn check_dict_case(d: &HashMap<String, String>) -> bool {\n    if d.is_empty() {\n        return false;\n    }\n    let mut lower_case_keys = true;\n    let mut upper_case_keys = true;\n    for key in d.keys() {\n        if !key.chars().all(char::is_lowercase) {\n            lower_case_keys = false;\n        }\n        if !key.chars().all(char::is_uppercase) {\n            upper_case_keys = false;\n        }\n    }\n    lower_case_keys || upper_case_keys\n}\n",
            "pub fn count_up_to(n: i32) -> Vec<i32> {\n    let mut primes = vec![];\n    for num in 2..n {\n        let mut is_prime = true;\n        for p in &primes {\n            if num % p == 0 {\n                is_prime = false;\n                break;\n            }\n        }\n        if is_prime {\n            primes.push(num);\n        }\n    }\n    primes\n}\n",
            "pub fn multiply(a: i32, b: i32) -> i32 {\n    let mut result = 0;\n    for i in 0..(a.abs() % 10) {\n        result += b.abs() % 10;\n    }\n    result\n}\n",
            "pub fn count_upper(s: &String) -> i32 {\n    let vowels = \"AEIOU\";\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(c) {\n            count += 1;\n        }\n    }\n    count\n}\n",
            "pub fn closest_integer(value: &String) -> i32 {\n    let num: f64 = value.parse().unwrap();\n    if num >= 0.0 { (num + 0.5) as i32 } else { (num - 0.5) as i32 }\n}\n",
            "pub fn make_a_pile(n: i32) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in 0..n {\n        result.push(n + 2 * i);\n    }\n    result\n}\n",
            "pub fn words_string(s: &String) -> Vec<String> {\n    let result: Vec<String> = s.split(|c: char| c == ',' || c == ' ').map(|w: &str| w.to_string()).collect();\n    result\n}\n",
            "pub fn choose_num(x: i32, y: i32) -> i32 {\n    if x > y {\n        return -1;\n    }\n    if y % 2 == 0 {\n        return y;\n    }\n    if x != y {\n        return y - 1;\n    }\n    -1\n}\n",
            "pub fn rounded_avg(n: i32, m: i32) -> Option<String> {\n    if n > m {\n        return None;\n    }\n    let r_avg = (m + n) / 2 + (m + n) % 2;\n    let result = format!(\"{:b}\", r_avg);\n    Some(result)\n}\n",
            "pub fn all_digits_odd(s: &str) -> bool {\n    for digit in s.chars() {\n        if digit.to_string().parse::<i32>().unwrap() % 2 == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn unique_digits(x: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for num in x {\n        if all_digits_odd(&num.to_string()) {\n            result.push(*num);\n        }\n    }\n    result.sort();\n    result\n}\n",
            "pub fn by_length(arr: &Vec<i32>) -> Vec<String> {\n    let digit_names = vec![\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let mut sorted_arr: Vec<i32> = arr.iter().filter(|&x| 1 <= *x && *x <= 9).cloned().collect();\n    sorted_arr.sort_unstable_by(|a, b| b.cmp(a));\n    let mut result = Vec::new();\n    for x in sorted_arr {\n        result.push(digit_names[x as usize - 1].to_string());\n    }\n    result\n}\n",
            "pub fn f(n: i32) -> Vec<i32> {\n    let mut nums: Vec<i32> = (1..=n).collect();\n    let mut result: Vec<i32> = Vec::new();\n    for i in 0..nums.len() {\n        if i % 2 != 0 {\n            result.push(nums[..i].iter().sum());\n        } else {\n            result.push(nums[..i].iter().product());\n        }\n    }\n    result\n}\n",
            "pub fn is_palindrome(txt: &str) -> bool {\n    txt == txt.chars().rev().collect::<String>()\n}\npub fn even_odd_palindrome(n: i32) -> Vec<i32> {\n    let mut cnt = vec![0, 0];\n    for i in 1..=n {\n        if is_palindrome(&i.to_string()) {\n            cnt[(i % 2) as usize] += 1;\n        }\n    }\n    cnt\n}\n",
            "pub fn digits_sum(n: i32) -> i32 {\n    let n_str = n.to_string();\n    if n >= 0 {\n        let mut sum_value = 0;\n        for d in n_str.chars() {\n            sum_value += d.to_digit(10).unwrap();\n        }\n        sum_value\n    } else {\n        let n_str = n.abs().to_string();\n        n_str[..2].parse::<i32>().unwrap() * 2 + digits_sum(n)\n    }\n}\npub fn count_nums(arr: &Vec<i32>) -> i32 {\n    let mut count_value = 0;\n    for n in arr {\n        if digits_sum(*n) > 0 {\n            count_value += 1;\n        }\n    }\n    count_value\n}\n",
            "pub fn move_one_ball(arr: &Vec<i32>) -> bool {\n    if arr.len() == 0 { return true }\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort();\n    for i in 0..arr.len() {\n        if &arr[i..] == &sorted_arr[..arr.len() - i] && &arr[..i] == &sorted_arr[arr.len() - i..] { return true }\n    }\n    false\n}\n",
            "pub fn can_exchange(lst1: &Vec<i32>, lst2: &Vec<i32>) -> String {\n    let mut odd_cnt = 0;\n    let mut even_cnt = 0;\n    for num in lst1 {\n        if num % 2 != 0 {\n            odd_cnt += 1;\n        }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n            even_cnt += 1;\n        }\n    }\n    if even_cnt >= odd_cnt {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}\n",
            "pub fn histogram(test: &String) -> HashMap<String, i32> {\n    let mut freq: HashMap<String, i32> = HashMap::new();\n    let words: Vec<&str> = test.split(\" \").filter(|w| w.len() > 0).collect();\n    for w in words {\n        *freq.entry(w.to_string()).or_insert(0) += 1;\n    }\n    let mut result: HashMap<String, i32> = HashMap::new();\n    if freq.len() > 0 {\n        let max_freq = freq.values().max().unwrap();\n        for (k, v) in freq.iter() {\n            if v == max_freq {\n                result.insert(k.to_string(), *v);\n            }\n        }\n    }\n    result\n}\n",
            "pub fn is_palindrome(s: &String) -> bool {\n    s == s.chars().rev().collect::<String>()\n}\npub fn reverse_delete(s: &String, c: &String) -> Vec<String> {\n    let s1 = s.chars().filter(|ch| !c.contains(*ch)).collect::<String>();\n    vec![s1.clone(), s1.chars().rev().collect::<String>()]\n}\n",
            "pub fn odd_count(lst: &Vec<String>) -> Vec<String> {\n    let mut result = vec![];\n    for num in lst {\n        let n = num.chars().filter(|d| d.is_ascii_digit()).count();\n        let rs = format!(\"the number of odd elements in the string {} of the input.\", n);\n        result.push(rs);\n    }\n    result\n}\n",
            "pub fn min_sub_array_sum(nums: &Vec<i32>) -> i32 {\n    let mut min_sum = 0;\n    let mut cur_sum = 0;\n    for n in nums {\n        cur_sum = min(cur_sum + n, 0);\n        min_sum = min(cur_sum, min_sum);\n    }\n    if min_sum == 0 { min_sum = min(nums.iter().min().unwrap(), &0) }\n    min_sum\n}\n",
            "pub fn max_fill(grid: &Vec<Vec<i32>>, capacity: i32) -> i32 {\n    let mut result = 0;\n    for arr in grid {\n        let sum_arr: i32 = arr.iter().sum();\n        result += (sum_arr / capacity).ceil() as i32;\n    }\n    result\n}\n",
            "pub fn count_ones(num: i32) -> i32 {\n    let mut count = 0;\n    let mut num = num;\n    while num > 0 {\n        if num & 1 == 1 {\n            count += 1;\n        }\n        num >>= 1;\n    }\n    count\n}\npub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort_by(|a, b| {\n        let count_a = count_ones(*a);\n        let count_b = count_ones(*b);\n        if count_a == count_b {\n            a.cmp(b)\n        } else {\n            count_a.cmp(&count_b)\n        }\n    });\n    sorted_arr\n}\n",
            "pub fn select_words(s: &String, n: i32) -> Vec<String> {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let words: Vec<&str> = s.split(\" \").filter(|w| w.len() > 0).collect();\n    let mut result = Vec::new();\n    for w in words {\n        let mut count = 0;\n        for c in w.chars() {\n            if consonants.contains(c) {\n                count += 1;\n            }\n        }\n        if count == n as usize {\n            result.push(w.to_string());\n        }\n    }\n    result\n}\n",
            "pub fn get_closest_vowel(word: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    for i in (1..word.len() - 1).rev() {\n        if vowels.contains(word.chars().nth(i).unwrap()) && !vowels.contains(word.chars().nth(i - 1).unwrap()) && !vowels.contains(word.chars().nth(i + 1).unwrap()) {\n            return word[i..i + 1].to_string();\n        }\n    }\n    \"\".to_string()\n}\n",
            "pub fn match_parens(lst: &Vec<String>) -> String {\n    let s1 = format!(\"{}{}\", lst[0], lst[1]);\n    let s2 = format!(\"{}{}\", lst[1], lst[0]);\n    if s1.chars().all(|ch| ch == '(' || ch == ')') && s1.chars().count() % 2 == 0 || s2.chars().all(|ch| ch == '(' || ch == ')') && s2.chars().count() % 2 == 0 {\n        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n    }\n}\n",
            "pub fn maximum(arr: &Vec<i32>, k: i32) -> Vec<i32> {\n    if k == 0 { return vec![] }\n    let mut result = arr.to_vec();\n    result.sort();\n    result[result.len() - k as usize..].to_vec()\n}\n",
            "pub fn solution(lst: &Vec<i32>) -> i32 {\n    let mut sum_value: i32 = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n            sum_value += x;\n        }\n    }\n    sum_value\n}\n",
            "pub fn add_elements(arr: &Vec<i32>, k: i32) -> i32 {\n    let mut sum_value: i32 = 0;\n    for n in &arr[..k as usize] {\n        if n.to_string().len() <= 2 {\n            sum_value += n;\n        }\n    }\n    sum_value\n}\n",
            "pub fn get_odd_collatz(n: i32) -> Vec<i32> {\n    let mut collatz = vec![1];\n    while n != 1 {\n        if n % 2 != 0 {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    collatz.sort();\n    collatz\n}\n",
            "pub fn valid_date(date: &String) -> bool {\n    if date.len() != 10 || date.as_bytes()[2] != b'-' || date.as_bytes()[5] != b'-' {\n        return false;\n    }\n    let m = date[..2].parse::<i32>().unwrap();\n    let d = date[3..5].parse::<i32>().unwrap();\n    if (1..=31).contains(&d) && (1..=12).contains(&m) {\n        return true;\n    }\n    if (1..=30).contains(&d) && (4..=6).contains(&m) {\n        return true;\n    }\n    if (1..=29).contains(&d) && m == 2 {\n        return true;\n    }\n    false\n}\n",
            "pub fn split_words(txt: &String) -> Vec<String> {\n    if txt.contains(\" \") {\n        return txt.split(\" \").map(|s| s.to_string()).collect();\n    } else if txt.contains(\",\") {\n        return txt.split(\",\").map(|s| s.to_string()).collect();\n    } else {\n        let mut result = Vec::new();\n        for c in txt.chars() {\n            if c.is_lowercase() && c.to_string().parse::<i32>().unwrap() % 2 == 0 {\n                result.push(c.to_string());\n            }\n        }\n        return vec![result.len().to_string()];\n    }\n}\n",
            "pub fn is_sorted(lst: &Vec<i32>) -> bool {\n    for i in 1..lst.len() {\n        if lst[i-1] > lst[i] {\n            return false;\n        }\n    }\n    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(*i).or_insert(0) += 1;\n    }\n    let max_freq = freq.values().max().unwrap_or(&0);\n    *max_freq <= 2\n}\n",
            "fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=n.sqrt() as i32 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn intersection(interval1: &Vec<i32>, interval2: &Vec<i32>) -> String {\n    let l = interval1[0].max(interval2[0]);\n    let r = interval1[1].min(interval2[1]);\n    let length = r - l;\n    if length > 0 && is_prime(length) {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}\n",
            "pub fn prod_signs(arr: &Vec<i32>) -> Option<i32> {\n    if arr.is_empty() { return None }\n    if arr.iter().any(|&n| n == 0) { return Some(0) }\n    let sign = if arr.iter().filter(|&n| *n < 0).count() % 2 == 1 { -1 } else { 1 };\n    let mut result = 0;\n    for n in arr {\n        result += n.abs();\n    }\n    Some(sign * result)\n}\n",
            "pub fn min_path(grid: &Vec<Vec<i32>>, k: i32) -> Vec<i32> {\n    let n = grid.len();\n    let mut min_val = n * n + 1;\n    for i in 0..n {\n        for j in 0..n {\n            if grid[i][j] == 1 {\n                let mut temp = vec![];\n                if i > 0 {\n                    temp.push(grid[i - 1][j]);\n                }\n                if j > 0 {\n                    temp.push(grid[i][j - 1]);\n                }\n                if i < n - 1 {\n                    temp.push(grid[i + 1][j]);\n                }\n                if j < n - 1 {\n                    temp.push(grid[i][j + 1]);\n                }\n                min_val = min_val.min(temp.into_iter().min().unwrap());\n            }\n        }\n    }\n    let mut result = vec![];\n    for i in 0..k as usize {\n        result.push(1 if i % 2 == 0 else min_val);\n    }\n    result\n}\n",
            "pub fn tri(n: i32) -> Vec<i32> {\n    if n == 0 {\n        return vec![1];\n    }\n    let mut seq = vec![1, 3];\n    for i in 2..=n {\n        if i % 2 == 0 {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i as usize - 1] + seq[i as usize - 2] + (i + 3) / 2);\n        }\n    }\n    seq\n}\n",
            "pub fn digits(n: i32) -> i32 {\n    let odds: Vec<i32> = n.to_string().chars().filter_map(|c| c.to_digit(10)).filter(|&d| d % 2 == 1).collect();\n    let result = odds.iter().fold(1, |acc, &d| acc * d);\n    if odds.len() > 0 { result } else { 0 }\n}\n",
            "pub fn is_nested(s: &String) -> bool {\n    let mut open_idx = Vec::new();\n    let mut close_idx = Vec::new();\n    for (i, ch) in s.chars().enumerate() {\n        if ch == '[' {\n            open_idx.push(i);\n        } else if ch == ']' {\n            close_idx.push(i);\n        }\n    }\n    close_idx.reverse();\n    let mut cnt = 0;\n    let mut i = 0;\n    let l = close_idx.len();\n    for idx in open_idx {\n        if i < l && idx < close_idx[i] {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    cnt >= 2\n}\n",
            "pub fn sum_squares(lst: &Vec<f64>) -> i32 {\n    let mut result = 0;\n    for n in lst {\n        result += (n.ceil() as i32).pow(2);\n    }\n    result\n}\n",
            "pub fn check_if_last_char_is_a_letter(txt: &String) -> bool {\n    if txt.is_empty() { return false; }\n    let last = &txt[txt.rfind(' ').map(|i| i + 1).unwrap_or(0)..];\n    last.len() == 1 && last.chars().next().unwrap().is_alphabetic()\n}\n",
            "pub fn can_arrange(arr: &Vec<i32>) -> i32 {\n    if arr.len() <= 1 {\n        return -1;\n    }\n    let mut idx: Vec<usize> = Vec::new();\n    for i in 1..arr.len() {\n        if arr[i] < arr[i - 1] {\n            idx.push(i);\n        }\n    }\n    return idx.iter().max().map_or(-1, |&x| x as i32);\n}\n",
            "pub fn largest_smallest_integers(lst: &Vec<i32>) -> Vec<Option<i32>> {\n    let mut max_neg = None;\n    let mut min_pos = None;\n    for i in lst {\n        if *i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg = Some(*i);\n            }\n        } else if *i > 0 {\n            if min_pos.is_none() || i < min_pos.unwrap() {\n                min_pos = Some(*i);\n            }\n        }\n    }\n    vec![max_neg, min_pos]\n}\n",
            "pub fn any_to_real(o: &Box<dyn Any>) -> f64 {\n    if let Some(s) = o.downcast_ref::<String>() {\n        s.replace(\",\", \".\").parse().unwrap()\n    } else if let Some(i) = o.downcast_ref::<i32>() {\n        *i as f64\n    } else if let Some(f) = o.downcast_ref::<f64>() {\n        *f\n    } else {\n        panic!(\"Type Error\")\n    }\n}\npub fn compare_one(a: &Box<dyn Any>, b: &Box<dyn Any>) -> Option<f64> {\n    let a1 = any_to_real(a);\n    let b1 = any_to_real(b);\n    if a1 == b1 {\n        None\n    } else if a1 > b1 {\n        Some(a1)\n    } else {\n        Some(b1)\n    }\n}\n",
            "pub fn is_equal_to_sum_even(n: i32) -> bool {\n    n % 2 == 0 && n >= 8\n}\n",
            "pub fn special_factorial(n: i32) -> i32 {\n    let mut result = 1;\n    for i in 1..(n + 1) {\n        let mut fact = 1;\n        for j in 1..(i + 1) {\n            fact *= j;\n        }\n        result *= fact;\n    }\n    result\n}\n",
            "pub fn fix_spaces(txt: &String) -> String {\n    txt.replace(\" \", \"_\").replace(\"   \", \"-\").replace(\"  \", \"_\")\n}\n",
            "pub fn file_name_check(file_name: &String) -> String {\n    let suf = vec![\"txt\", \"exe\", \"dll\"];\n    let lst: Vec<&str> = file_name.split(\".\").collect();\n    if lst.len() != 2 || !suf.contains(&lst[1]) || lst[0].len() == 0 || !lst[0].chars().next().unwrap().is_alphabetic() || lst[0].chars().filter(|x| x.is_numeric()).count() > 3 {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()\n}\n",
            "pub fn sum_squares(lst: &Vec<i32>) -> i32 {\n    let mut result = 0;\n    for (i, e) in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            result += e.pow(2);\n        } else if i % 4 == 0 {\n            result += e.pow(3);\n        } else {\n            result += *e;\n        }\n    }\n    result\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 { false } else { (2..(n as f64).sqrt() as i32 + 1).all(|i| n % i != 0) }\n}\npub fn words_in_sentence(sentence: &String) -> String {\n    let words: Vec<&str> = sentence.split(\" \").collect();\n    let mut result = String::new();\n    for w in words {\n        if is_prime(w.len() as i32) {\n            result.push_str(w);\n            result.push(' ');\n        }\n    }\n    result.pop();\n    result\n}\n",
            "pub fn simplify(x: &String, n: &String) -> bool {\n    let xs: Vec<&str> = x.split(\"/\").collect();\n    let ns: Vec<&str> = n.split(\"/\").collect();\n    let num = xs[0].parse::<i32>().unwrap() * ns[0].parse::<i32>().unwrap();\n    let den = xs[1].parse::<i32>().unwrap() * ns[1].parse::<i32>().unwrap();\n    num % den == 0\n}\n",
            "pub fn digits_sum(n: i32) -> i32 {\n    let n_str = n.to_string();\n    if n >= 0 {\n        let mut result = 0;\n        for d in n_str.chars() {\n            result += d.to_digit(10).unwrap();\n        }\n        result\n    } else {\n        let n_str = n.abs().to_string();\n        n_str.chars().next().unwrap().to_digit(10).unwrap() * 2 + digits_sum(n.abs())\n    }\n}\npub fn order_by_points(nums: &Vec<i32>) -> Vec<i32> {\n    let mut result = nums.to_vec();\n    result.sort_by(|a, b| digits_sum(*a).cmp(&digits_sum(*b)));\n    result\n}\n",
            "pub fn special_filter(nums: &Vec<i32>) -> i32 {\n    let odds: Vec<char> = \"13579\".chars().collect();\n    let mut count = 0;\n    for n in nums {\n        if n > &10 && n % 2 == 1 && odds.contains(&(n.to_string().chars().next().unwrap())) {\n            count += 1;\n        }\n    }\n    count\n}\n",
            "pub fn get_max_triples(n: i32) -> i32 {\n    let mut c = vec![0, 0, 0];\n    for i in 1..=n {\n        let a = i * i - i + 1;\n        c[a as usize % 3] += 1;\n    }\n    c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n}\n",
            "pub fn bf(planet1: &String, planet2: &String) -> Vec<String> {\n    let names = vec![\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if !names.contains(planet1) || !names.contains(planet2) { return vec![] }\n    let l = names.iter().position(|x| x == planet1).unwrap();\n    let r = names.iter().position(|x| x == planet2).unwrap();\n    if l > r { let tmp = l; l = r; r = tmp; }\n    if l == r { return vec![] }\n    names[l + 1..r].to_vec()\n}\n",
            "pub fn sorted_list_sum(lst: &Vec<String>) -> Vec<String> {\n    let mut result: Vec<String> = lst.iter().filter(|s| s.len() % 2 == 0).map(|s| s.to_string()).collect();\n    result.sort_by(|a, b| {\n        if a.len() == b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n        }\n    });\n    result\n}\n",
            "pub fn x_or_y(n: i32, x: i32, y: i32) -> i32 {\n    if n < 2 {\n        return y;\n    }\n    for i in 2..=n.sqrt() as i32 {\n        if n % i == 0 {\n            return y;\n        }\n    }\n    x\n}\n",
            "pub fn double_the_difference(lst: &Vec<f64>) -> i32 {\n    let mut result = 0;\n    for n in lst {\n        if *n >= 0.0 && *n.floor() == *n {\n            result += (*n * *n) as i32;\n        }\n    }\n    result\n}\n",
            "pub fn compare(game: &Vec<i32>, guess: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for (x, y) in game.iter().zip(guess.iter()) {\n        result.push((x - y).abs());\n    }\n    result\n}\n",
            "pub fn strongest_extension(class_name: &String, extensions: &Vec<String>) -> String {\n    let mut max_s = -1.0;\n    let mut max_ext = String::new();\n    for ext in extensions {\n        let mut upper = 0;\n        let mut lower = 0;\n        for c in ext.chars() {\n            if c.is_uppercase() {\n                upper += 1;\n            } else if c.is_lowercase() {\n                lower += 1;\n            }\n        }\n        let s = upper as f64 - lower as f64;\n        if s > max_s {\n            max_s = s;\n            max_ext = ext.to_string();\n        }\n    }\n    format!(\"{}.{}\", class_name, max_ext)\n}\n",
            "pub fn cycpattern_check(a: &String, b: &String) -> bool {\n    if a.len() < b.len() { return false }\n    for i in 0..b.len() {\n        if a.contains(&b[i..].to_string() + &b[..i].to_string()) { return true }\n    }\n    false\n}\n",
            "pub fn even_odd_count(num: i32) -> Vec<i32> {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num.abs();\n    while num > 0 {\n        if num % 10 % 2 == 0 { even += 1 } else { odd += 1 }\n        num /= 10;\n    }\n    vec![even, odd]\n}\n",
            "pub fn int_to_mini_roman(num: i32) -> String {\n    let values = vec![1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let numerals = vec![\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let mut res = String::new();\n    for i in 0..values.len() {\n        while num >= values[i] {\n            res.push_str(numerals[i]);\n            num -= values[i];\n        }\n    }\n    res\n}\n",
            "pub fn right_angle_triangle(a: i32, b: i32, c: i32) -> bool {\n    let s = [a, b, c].iter().sorted().collect::<Vec<&i32>>();\n    s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "pub fn find_max(words: &Vec<String>) -> String {\n    let mut max_cnt = 0;\n    let mut max_w = String::new();\n    for w in words {\n        let cnt = w.chars().collect::<HashSet<char>>().len();\n        if cnt > max_cnt {\n            max_cnt = cnt;\n            max_w = w.clone();\n        } else if cnt == max_cnt {\n            max_w = min(max_w, w.clone());\n        }\n    }\n    max_w\n}\n",
            "pub fn eat(num: i32, need: i32, remaining: i32) -> Vec<i32> {\n    if need <= remaining {\n        vec![num + need, remaining - need]\n    } else {\n        vec![num + remaining, 0]\n    }\n}\n",
            "pub fn do_algebra(operators: &Vec<String>, operands: &Vec<i32>) -> i32 {\n    let mut ops = operators.to_vec();\n    let mut nums = operands.to_vec();\n    let mut i = ops.len() - 1;\n    while i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = nums[i].pow(nums[i + 1] as u32);\n            nums.remove(i + 1);\n            ops.remove(i);\n        }\n        i -= 1;\n    }\n    let mut i = 0;\n    while i < ops.len() {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    let mut i = 0;\n    while i < ops.len() {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    nums[0]\n}\n",
            "pub fn solve(s: &String) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        if !ch.is_alphabetic() {\n            result.push(ch);\n        } else if ch.is_uppercase() {\n            result.push(ch.to_lowercase().next().unwrap());\n        } else if ch.is_lowercase() {\n            result.push(ch.to_uppercase().next().unwrap());\n        }\n    }\n    if !result.chars().any(|ch| ch.is_alphabetic()) {\n        result.chars().rev().collect()\n    } else {\n        result\n    }\n}\n",
            "pub fn string_to_md5(txt: &String) -> Option<String> {\n    if txt.is_empty() {\n        return None;\n    }\n    let mut md5_hash = Md5::new();\n    let txt_bytes = txt.as_bytes();\n    md5_hash.update(txt_bytes);\n    let md5_encoded = md5_hash.finalize();\n    Some(format!(\"{:x}\", md5_encoded))\n}\n",
            "pub fn generate_integers(a: i32, b: i32) -> Vec<i32> {\n    let lower = max(2, min(a, b));\n    let upper = min(8, max(a, b));\n    let mut result = vec![];\n    for i in lower..=upper {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n"
        ],
        "scala": [
            "def hasCloseElements(numbers: Seq[Double], threshold: Double): Boolean = {\n    for (i <- 0 until numbers.length) {\n        for (j <- i + 1 until numbers.length) {\n            if (math.abs(numbers(i) - numbers(j)) < threshold) {\n                return true\n            }\n        }\n    }\n    false\n}\n",
            "def separateParenGroups(parenString: String): Seq[String] = {\n    val groups = mutable.ListBuffer[String]()\n    val stk = mutable.Stack[Char]()\n    var currentGroup = \"\"\n    val parens = parenString.replace(\" \", \"\")\n    for (ch <- parens) {\n        if (ch == '(') {\n            stk.push(ch)\n            currentGroup += ch\n        } else if (ch == ')') {\n            stk.pop()\n            currentGroup += ch\n            if (stk.isEmpty) {\n                groups.addOne(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    groups.toList\n}\n",
            "def truncateNumber(num: Double): Double = {\n    num - math.floor(num)\n}\n",
            "def belowZero(operations: Seq[Int]): Boolean = {\n    var balance = 0\n    for (op <- operations) {\n        balance += op\n        if (balance < 0) {\n            return true\n        }\n    }\n    false\n}\n",
            "def meanAbsoluteDeviation(numbers: Seq[Double]): Double = {\n    val mean = numbers.sum / numbers.length\n    val deviation = numbers.map(x => math.abs(x - mean)).sum\n    deviation / numbers.length\n}\n",
            "def intersperse(numbers: Seq[Int], delimiter: Int): Seq[Int] = {\n    numbers.zipWithIndex.flatMap { case (n, i) => if (i != 0) Seq(delimiter, n) else Seq(n) }\n}\n",
            "def parseNestedParens(parenString: String): Seq[Int] = {\n    val result = parenString.split(\" \").map(group => {\n        var maxDepth = 0\n        var depth = 0\n        for (ch <- group) {\n            if (ch == '(') {\n                depth += 1\n                maxDepth = math.max(maxDepth, depth)\n            } else if (ch == ')') {\n                depth -= 1\n            }\n        }\n        maxDepth\n    })\n    result\n}\n",
            "def filterBySubstring(strs: Seq[String], substring: String): Seq[String] = {\n    strs.filter(_.contains(substring))\n}\n",
            "def sumProduct(numbers: Seq[Int]): Seq[Int] = {\n    val nSum = numbers.sum\n    val nProduct = numbers.foldLeft(1)(_ * _)\n    Seq(nSum, nProduct)\n}\n",
            "def rollingMax(numbers: Seq[Int]): Seq[Int] = {\n    var maxSoFar = Double.NegativeInfinity\n    val result = numbers.map(num => {\n        if (num > maxSoFar) maxSoFar = num\n        maxSoFar\n    })\n    result\n}\n",
            "def isPalindrome(s: String): Boolean = {\n    s == s.reverse\n}\ndef makePalindrome(s: String): String = {\n    if (isPalindrome(s)) return s\n    for (i <- 0 until s.length) {\n        if (isPalindrome(s.substring(i))) return s + s.substring(0, i).reverse\n    }\n    \"\"\n}\n",
            "def stringXor(a: String, b: String): String = {\n    a.zip(b).map { case (c1, c2) => if (c1 == c2) \"0\" else \"1\" }.mkString\n}\n",
            "def longest(strs: Seq[String]): Option[String] = {\n    if (strs.isEmpty) None else Some(strs.maxBy(_.length))\n}\n",
            "def greatestCommonDivisor(a: Int, b: Int): Int = {\n    var result = a\n    while (b != 0) {\n        result = b\n        b = a % b\n    }\n    result\n}\n",
            "def allPrefixes(s: String): Seq[String] = {\n    (0 until s.length).map(i => s.substring(0, i + 1)).toList\n}\n",
            "def stringSequence(n: Int): String = {\n    (0 to n).map(_.toString).mkString(\" \")\n}\n",
            "def countDistinctCharacters(s: String): Int = {\n    s.toLowerCase.toSet.size\n}\n",
            "def parseMusic(musicString: String): Seq[Int] = {\n    val durations = Map(\"o\" -> 4, \"o|\" -> 2, \".|\" -> 1)\n    val notes = musicString.split(\" \")\n    val result = notes.map(durations(_))\n    result\n}\n",
            "def howManyTimes(s: String, substring: String): Int = {\n    s.sliding(substring.length).count(substring == _)\n}\n",
            "def sortNumbers(numbers: String): String = {\n    val numDict = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n    val numList = numbers.split(\" \").filter(numDict.contains).sorted(Ordering.by(numDict(_)))\n    numList.mkString(\" \")\n}\n",
            "def findClosestElements(numbers: Seq[Double]): Seq[Double] = {\n    val sortedNumbers = numbers.sorted\n    var minDiff = Double.PositiveInfinity\n    var closestPair = Seq.empty[Double]\n    for (i <- 1 until sortedNumbers.length) {\n        val diff = sortedNumbers(i) - sortedNumbers(i - 1)\n        if (diff < minDiff) {\n            minDiff = diff\n            closestPair = Seq(sortedNumbers(i - 1), sortedNumbers(i))\n        }\n    }\n    closestPair\n}\n",
            "def rescaleToUnit(numbers: Seq[Double]): Seq[Double] = {\n    val minNum = numbers.min\n    val maxNum = numbers.max\n    if (minNum == maxNum) {\n        List.fill(numbers.length)(0.0)\n    } else {\n        numbers.map(num => (num - minNum) / (maxNum - minNum))\n    }\n}\n",
            "def filterIntegers(values: Seq[Any]): Seq[Int] = {\n    values.filter(_.isInstanceOf[Int]).map(_.asInstanceOf[Int])\n}\n",
            "def strLength(s: String): Int = {\n    s.length\n}\n",
            "def largestDivisor(n: Int): Int = {\n    for (i <- 2 to n) {\n        if (n % i == 0) return n / i\n    }\n    1\n}\n",
            "def factorize(n: Int): Seq[Int] = {\n    var factors = List[Int]()\n    var divisor = 2\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors = divisor :: factors\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    factors.reverse\n}\n",
            "def removeDuplicates(numbers: Seq[Int]): Seq[Int] = {\n    val counts = numbers.groupBy(identity).mapValues(_.size)\n    numbers.filter(num => counts(num) == 1)\n}\n",
            "def flipCase(s: String): String = {\n    s.map(ch => if (ch.isLetter) if (ch.isLower) ch.toUpper else ch.toLower else ch).mkString\n}\n",
            "def concatenate(strs: Seq[String]): String = {\n    strs.foldLeft(\"\")((acc, s) => acc + s)\n}\n",
            "def filterByPrefix(strs: Seq[String], prefixStr: String): Seq[String] = {\n    strs.filter(_.startsWith(prefixStr))\n}\n",
            "def getPositive(l: Seq[Int]): Seq[Int] = {\n    l.filter(_ > 0)\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) return false\n    for (i <- 2 to math.sqrt(n).toInt) {\n        if (n % i == 0) return false\n    }\n    true\n}\n",
            "def poly(xs: Seq[Int], x: Double): Double = {\n    xs.zipWithIndex.map(x => x._1 * math.pow(x._2, x)).sum\n}\ndef findZero(xs: Seq[Int]): Double = {\n    var x1 = 1.0\n    var x2 = -1.0\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2\n        x2 *= 2\n    }\n    while (math.abs(x1 - x2) > 1e-10) {\n        val mid = (x1 + x2) / 2\n        if (poly(xs, mid) == 0) {\n            return mid\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    (x1 + x2) / 2\n}\n",
            "def sortThird(l: Seq[Int]): Seq[Int] = {\n    val sortedThird = l.sorted.grouped(3).toList.flatten\n    l.zipWithIndex.map { case (e, i) => if (i % 3 == 0) sortedThird(i / 3) else e }\n}\n",
            "def listUnique(l: Seq[Int]): Seq[Int] = {\n    l.distinct.sorted\n}\n",
            "def maxElement(l: Seq[Int]): Int = {\n    l.max\n}\n",
            "def fizzBuzz(n: Int): Int = {\n    var cnt = 0\n    for (i <- 0 until n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString.count(_ == '7')\n        }\n    }\n    cnt\n}\n",
            "def sortEven(l: Seq[Int]): Seq[Int] = {\n    val sortedEven = l.filter(_ % 2 == 0).sorted\n    l.zipWithIndex.map { case (e, i) => if (i % 2 == 0) sortedEven(i / 2) else e }\n}\n",
            "def encodeCyclic(s: String): String = {\n    s.sliding(3, 3).map(_.reverse).mkString\n}\ndef decodeCyclic(s: String): String = {\n    encodeCyclic(encodeCyclic(s))\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) return false\n    for (i <- 2 to math.sqrt(n).toInt) {\n        if (n % i == 0) return false\n    }\n    true\n}\ndef primeFib(n: Int): Int = {\n    var f = Array(0, 1)\n    var cnt = 0\n    while (cnt < n) {\n        f = Array(f(1), f(0) + f(1))\n        if (isPrime(f(1))) cnt += 1\n    }\n    f(1)\n}\n",
            "def triplesSumToZero(l: Seq[Int]): Boolean = {\n    for (i <- l.indices; j <- i + 1 until l.length; k <- j + 1 until l.length) {\n        if (l(i) + l(j) + l(k) == 0) {\n            return true\n        }\n    }\n    false\n}\n",
            "def carRaceCollision(n: Int): Int = {\n    n * n\n}\n",
            "def incrList(l: List[Int]): List[Int] = {\n    l.map(x => x + 1)\n}\n",
            "def pairsSumToZero(l: Seq[Int]): Boolean = {\n    val seen = mutable.Set[Int]()\n    for (num <- l) {\n        if (seen.contains(-num)) return true\n        seen.add(num)\n    }\n    false\n}\n",
            "def changeBase(x: Int, bas: Int): String = {\n    if (x == 0) return \"0\"\n    var result = \"\"\n    while (x > 0) {\n        result = (x % bas).toString + result\n        x /= bas\n    }\n    result\n}\n",
            "def triangleArea(a: Int, h: Int): Double = a * h / 2\n",
            "def fib4(n: Int): Int = {\n    val fib = Array(0, 0, 2, 0)\n    for (i <- 4 to n) {\n        fib(i % 4) = fib.slice(i % 4, i % 4 + 2).sum\n    }\n    fib(n % 4)\n}\n",
            "def median(l: Seq[Double]): Double = {\n    val sl = l.sorted\n    if (l.length % 2 != 0) sl(l.length / 2) else (sl(l.length / 2) + sl(l.length / 2 - 1)) / 2\n}\n",
            "def isPalindrome(txt: String): Boolean = {\n    for (i <- 0 until txt.length / 2) {\n        if (txt(i) != txt(txt.length - i - 1)) {\n            return false\n        }\n    }\n    true\n}\n",
            "def modp(n: Int, p: Int): Int = {\n    var ret = 1\n    for (_ <- 0 until n) {\n        ret = (ret * 2) % p\n    }\n    ret\n}\n",
            "def encodeShift(s: String): String = {\n    s.map(ch => (((ch - 'a' + 5) % 26) + 'a').toChar).mkString\n}\ndef decodeShift(s: String): String = {\n    s.map(ch => (((ch - 'a' + 21) % 26) + 'a').toChar).mkString\n}\n",
            "def removeVowels(txt: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    txt.filter(c => !vowels.contains(c))\n}\n",
            "def belowThreshold(l: Seq[Int], t: Int): Boolean = {\n    l.forall(_ < t)\n}\n",
            "def add(x: Int, y: Int): Int = {\n    x + y\n}\n",
            "def sameChars(s0: String, s1: String): Boolean = {\n    s0.toSet == s1.toSet\n}\n",
            "def fib(n: Int): Int = {\n    if (n <= 1) n else fib(n - 1) + fib(n - 2)\n}\n",
            "def correctBracketing(brackets: String): Boolean = {\n    var depth = 0\n    for (b <- brackets) {\n        if (b == '<') {\n            depth += 1\n        } else if (b == '>') {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    depth == 0\n}\n",
            "def monotonic(l: Seq[Int]): Boolean = {\n    val diff = l.zip(l.tail).map(_._2 - _._1)\n    diff.forall(_ <= 0) || diff.forall(_ >= 0)\n}\n",
            "def common(l1: Seq[Int], l2: Seq[Int]): Seq[Int] = {\n    l1.filter(i => l2.contains(i)).sorted\n}\n",
            "def largestPrimeFactor(n: Int): Int = {\n    var i = 2\n    while i * i <= n {\n        if n % i != 0 {\n            i += 1\n        } else {\n            n /= i\n        }\n    }\n    n\n}\n",
            "def sumToN(n: Int): Int = {\n    (1 to n).sum\n}\n",
            "def correctBracketing(brackets: String): Boolean = {\n    var depth = 0\n    for (b <- brackets) {\n        if (b == '(') {\n            depth += 1\n        } else if (b == ')') {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    depth == 0\n}\n",
            "def derivative(xs: List[Int]): List[Int] = {\n    xs.zipWithIndex.map(x => x._1 * (x._2 + 1)).toList\n}\n",
            "def fibfib(n: Int): Int = {\n    if (n <= 1) 0 else {\n        var a = 0\n        var b = 0\n        var c = 1\n        while (n > 2) {\n            a = b\n            b = c\n            c = a + b + c\n            n -= 1\n        }\n        c\n    }\n}\n",
            "def vowelsCount(s: String): Int = {\n    val vowels = \"aeiou\"\n    var cnt = 0\n    for (i <- 0 until s.length) {\n        if (vowels.contains(s(i).toLower) || (i == s.length - 1 && s(i).toLower == 'y')) {\n            cnt += 1\n        }\n    }\n    cnt\n}\n",
            "def circularShift(x: Int, shift: Int): String = {\n    val xStr = x.toString\n    if (shift > xStr.length) xStr.reverse else xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift)\n}\n",
            "def digitSum(s: String): Int = {\n    s.foldLeft(0)((sumValue, c) => if (c.isUpper) sumValue + c.toInt else sumValue)\n}\n",
            "def fruitDistribution(s: String, n: Int): Int = {\n    val words = s.split(\" \")\n    val apples = words.indexOf(\"apples\") match {\n        case -1 => 0\n        case i => words(i - 1).toInt\n    }\n    val oranges = words.indexOf(\"oranges\") match {\n        case -1 => 0\n        case i => words(i - 1).toInt\n    }\n    n - apples - oranges\n}\n",
            "def pluck(arr: Seq[Int]): Seq[Int] = {\n    val evens = arr.filter(_ % 2 == 0)\n    if (evens.isEmpty) {\n        return Seq()\n    }\n    val minEven = evens.min\n    Seq(minEven, arr.indexOf(minEven))\n}\n",
            "def search(lst: List[Int]): Int = {\n    val freqs = lst.groupBy(identity).mapValues(_.size)\n    val goodVals = freqs.filter(_._2 >= _._1).keys\n    if (goodVals.nonEmpty) goodVals.max else -1\n}\n",
            "def strangeSortList(lst: Seq[Int]): Seq[Int] = {\n    val sl = lst.sorted\n    val result = mutable.ListBuffer[Int]()\n    var left = 0\n    var right = sl.length - 1\n    while left <= right {\n        result.addOne(sl(left))\n        left += 1\n        if left <= right {\n            result.addOne(sl(right))\n            right -= 1\n        }\n    }\n    result.toList\n}\n",
            "def triangleArea(a: Int, b: Int, c: Int): Double = {\n    val s = (a + b + c) / 2.0\n    if (a + b > c && a + c > b && b + c > a) math.sqrt(s * (s - a) * (s - b) * (s - c)) else -1.0\n}\n",
            "def willItFly(q: Seq[Int], w: Int): Boolean = {\n    if (q.isEmpty) return false\n    val isPalin = q.zip(q.reverse).forall(x => x._1 == x._2)\n    val total = q.sum\n    isPalin && total <= w\n}\n",
            "def smallestChange(arr: Seq[Int]): Int = {\n    var ans = 0\n    for (i <- 0 until arr.length / 2) {\n        if (arr(i) != arr(arr.length - i - 1)) {\n            ans += 1\n        }\n    }\n    ans\n}\n",
            "def totalMatch(lst1: Seq[String], lst2: Seq[String]): Seq[String] = {\n    val cnt1 = lst1.map(_.length).sum\n    val cnt2 = lst2.map(_.length).sum\n    if (cnt1 <= cnt2) lst1 else lst2\n}\n",
            "def isMultiplyPrime(a: Int): Boolean = {\n    if (a < 2) return false\n    var cnt = 0\n    for (i <- 2 to math.sqrt(a).toInt) {\n        if (a % i == 0) {\n            while (a % i == 0) {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    cnt == 3\n}\n",
            "def isSimplePower(x: Int, n: Int): Boolean = {\n    if (n < 2) x == n else {\n        var tmp = 1\n        while tmp < x do tmp *= n\n        tmp == x\n    }\n}\n",
            "def isCube(a: Int): Boolean = {\n    val a1 = math.abs(a)\n    val root = math.round(math.pow(a1, 1.0 / 3.0)).toInt\n    root * root * root == a1\n}\n",
            "def hexKey(num: String): Int = {\n    num.count(Set(\"2\", \"3\", \"5\", \"7\", \"B\", \"D\").contains)\n}\n",
            "def decimalToBinary(dec: Int): String = {\n    val binary = Integer.toBinaryString(dec)\n    return \"db\" + binary + \"db\"\n}\n",
            "def isHappy(s: String): Boolean = {\n    if s.length < 3 {\n        return false\n    }\n    for i <- 0 until s.length - 2 {\n        if s(i) == s(i + 1) || s(i) == s(i + 2) || s(i + 1) == s(i + 2) {\n            return false\n        }\n    }\n    true\n}\n",
            "def numericalLetterGrade(grades: Seq[Double]): Seq[String] = {\n    grades.map(g => {\n        if (g == 4.0) \"A+\"\n        else if (g > 3.7) \"A\"\n        else if (g > 3.3) \"A-\"\n        else if (g > 3.0) \"B+\"\n        else if (g > 2.7) \"B\"\n        else if (g > 2.3) \"B-\"\n        else if (g > 2.0) \"C+\"\n        else if (g > 1.7) \"C\"\n        else if (g > 1.3) \"C-\"\n        else if (g > 1.0) \"D+\"\n        else if (g > 0.7) \"D\"\n        else if (g > 0.0) \"D-\"\n        else \"E\"\n    })\n}\n",
            "def primeLength(s: String): Boolean = {\n    val length = s.length\n    if length < 2 {\n        return false\n    }\n    for (i <- 2 to math.sqrt(length).toInt) {\n        if length % i == 0 {\n            return false\n        }\n    }\n    true\n}\n",
            "def startsOneEnds(n: Int): Int = {\n    if (n == 1) return 1\n    var result = 2 * 9 * math.pow(10, n - 2).toInt\n    return result\n}\n",
            "def solve(n: Int): String = {\n    val digitsSum = (n.toString.map(_.asDigit)).sum\n    Integer.toBinaryString(digitsSum)\n}\n",
            "def add(lst: List[Int]): Int = {\n    lst.zipWithIndex.foldLeft(0)((acc, item) => if (item._2 % 2 == 1 && item._1 % 2 == 0) acc + item._1 else acc)\n}\n",
            "def antiShuffle(s: String): String = {\n    val words = s.split(\" \").map(_.toList).map(_.sorted.mkString).toList\n    words.mkString(\" \")\n}\n",
            "def getRow(lst: Seq[Seq[Int]], x: Int): Seq[Seq[Int]] = {\n    val coords = for {\n        i <- 0 until lst.length\n        j <- 0 until lst(i).length if lst(i)(j) == x\n    } yield List(i, j)\n    coords.sortBy(a => (a(0), -a(1)))\n}\n",
            "def sortArray(arr: Seq[Int]): Seq[Int] = {\n    if (arr.isEmpty) {\n        return List()\n    }\n    if ((arr.head + arr.last) % 2 == 0) {\n        return arr.sorted.reverse\n    } else {\n        return arr.sorted\n    }\n}\n",
            "def encrypt(s: String): String = {\n    s.map(ch => {\n        val shifted = ch.toInt + 4\n        if (shifted > 'z'.toInt) {\n            (shifted - 26).toChar\n        } else {\n            shifted.toChar\n        }\n    }).mkString\n}\n",
            "def nextSmallest(lst: Seq[Int]): Option[Int] = {\n    val uniqueList = lst.toSet\n    val sortedList = lst.sorted\n    if (sortedList.length < 2) None else Some(sortedList(1))\n}\n",
            "def isBored(s: String): Int = {\n    val sentences = re.split(\"[.!?]\\\\s*\", s)\n    var count = 0\n    for (sentence <- sentences) {\n        if sentence.length >= 2 && sentence.startsWith(\"I \") {\n            count += 1\n        }\n    }\n    count\n}\n",
            "def anyInt(x: Any, y: Any, z: Any): Boolean = {\n    x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int] && (x.asInstanceOf[Int] + y.asInstanceOf[Int] == z.asInstanceOf[Int] || x.asInstanceOf[Int] + z.asInstanceOf[Int] == y.asInstanceOf[Int] || y.asInstanceOf[Int] + z.asInstanceOf[Int] == x.asInstanceOf[Int])\n}\n",
            "def encode(message: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    message.map(ch => if (ch.isLetter) {\n        val ch1 = if (ch.isLower) ch.toUpper else ch.toLower\n        if (vowels.contains(ch1)) (ch1.toInt + 2).toChar.toString else ch1\n    } else ch.toString).mkString\n}\n",
            "def skjkasdkd(lst: Seq[Int]): Int = {\n    val primes = lst.filter(n => n > 1 && (2 to math.sqrt(n).toInt).forall(n % _ != 0))\n    if (primes.isEmpty) 0 else primes.max.toString.map(_.asDigit).sum\n}\n",
            "def checkDictCase(d: Map[String,String]): Boolean = {\n    if (d.isEmpty) return false\n    var lowerCaseKeys = true\n    var upperCaseKeys = true\n    for (key <- d.keys) {\n        if (!key.forall(_.isLower)) lowerCaseKeys = false\n        if (!key.forall(_.isUpper)) upperCaseKeys = false\n    }\n    lowerCaseKeys || upperCaseKeys\n}\n",
            "def countUpTo(n: Int): Seq[Int] = {\n    var primes = List[Int]()\n    for (num <- 2 to n) {\n        var isPrime = true\n        for (p <- primes) {\n            if (num % p == 0) {\n                isPrime = false\n                break\n            }\n        }\n        if (isPrime) {\n            primes = num :: primes\n        }\n    }\n    primes.reverse\n}\n",
            "def multiply(a: Int, b: Int): Int = {\n    var result = 0\n    for (i <- 0 until math.abs(a) % 10) {\n        result += math.abs(b) % 10\n    }\n    result\n}\n",
            "def countUpper(s: String): Int = {\n    val vowels = \"AEIOU\"\n    var count = 0\n    for (i <- s.indices) {\n        if (i % 2 == 0 && vowels.contains(s(i))) {\n            count += 1\n        }\n    }\n    count\n}\n",
            "def closestInteger(value: String): Int = {\n    val num = value.toFloat\n    if (num >= 0) (num + 0.5).toInt else (num - 0.5).toInt\n}\n",
            "def makeAPile(n: Int): List[Int] = {\n    (0 until n).map(i => n + 2 * i).toList\n}\n",
            "def wordsString(s: String): Seq[String] = {\n    val result = mutable.ListBuffer[String]()\n    for (w <- s.split(Array(\", \", \" \"))) {\n        if (w.length > 0) {\n            result.addOne(w)\n        }\n    }\n    result.toList\n}\n",
            "def chooseNum(x: Int, y: Int): Int = {\n    if (x > y) {\n        -1\n    } else if (y % 2 == 0) {\n        y\n    } else if (x != y) {\n        y - 1\n    } else {\n        -1\n    }\n}\n",
            "def roundedAvg(n: Int, m: Int): Option[String] = {\n    if (n > m) {\n        None\n    } else {\n        val rAvg = (m + n) / 2.0 + 0.5\n        Some(Integer.toBinaryString(rAvg.toInt))\n    }\n}\n",
            "def allDigitsOdd(s: String): Boolean = {\n    s.forall(c => c.toInt % 2 != 0)\n}\ndef uniqueDigits(x: Seq[Int]): Seq[Int] = {\n    x.filter(num => allDigitsOdd(num.toString)).sorted\n}\n",
            "def byLength(arr: Seq[Int]): Seq[String] = {\n    val digitNames = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    val sortedArr = arr.filter(x => x >= 1 && x <= 9).sorted.reverse\n    sortedArr.map(x => digitNames(x - 1))\n}\n",
            "def f(n: Int): Seq[Int] = {\n    val nums = (1 to n).toList\n    val result = nums.zipWithIndex.map { case (i, idx) =>\n        if (idx % 2 != 0) nums.take(idx + 1).sum else nums.take(idx + 1).reduce(_ * _)\n    }\n    result\n}\n",
            "def isPalindrome(txt: String): Boolean = {\n    txt == txt.reverse\n}\ndef evenOddPalindrome(n: Int): Seq[Int] = {\n    val cnt = Array(0, 0)\n    for (i <- 1 to n) {\n        if (isPalindrome(i.toString)) {\n            cnt(i % 2) += 1\n        }\n    }\n    cnt.toList\n}\n",
            "def digitsSum(n: Int): Int = {\n    val nStr = n.toString\n    if (n >= 0) {\n        var sumValue = 0\n        for (d <- nStr) {\n            sumValue += d.asDigit\n        }\n        sumValue\n    } else {\n        nStr.substring(0, 2).toInt * 2 + digitsSum(math.abs(n))\n    }\n}\ndef countNums(arr: Seq[Int]): Int = {\n    var countValue = 0\n    for (n <- arr) {\n        if (digitsSum(n) > 0) {\n            countValue += 1\n        }\n    }\n    countValue\n}\n",
            "def moveOneBall(arr: Seq[Int]): Boolean = {\n    if (arr.isEmpty) return true\n    val sortedArr = arr.sorted\n    for (i <- 0 until arr.length) {\n        if (arr.drop(i) == sortedArr.take(arr.length - i) && arr.take(i) == sortedArr.drop(arr.length - i)) return true\n    }\n    false\n}\n",
            "def canExchange(lst1: Seq[Int], lst2: Seq[Int]): String = {\n    var oddCnt = 0\n    var evenCnt = 0\n    for (num <- lst1) {\n        if num % 2 != 0 then oddCnt += 1\n    }\n    for (num <- lst2) {\n        if num % 2 == 0 then evenCnt += 1\n    }\n    if evenCnt >= oddCnt then \"YES\" else \"NO\"\n}\n",
            "def histogram(test: String): Map[String, Int] = {\n    val freq = test.split(\" \").filter(_.length > 0).groupBy(identity).mapValues(_.length)\n    val maxFreq = freq.values.max\n    freq.filter(_._2 == maxFreq).toMap\n}\n",
            "def reverseDelete(s: String, c: String): Seq[String] = {\n    val s1 = s.filterNot(c.contains(_))\n    Seq(s1, if (s1 == s1.reverse) \"yes\" else \"no\")\n}\n",
            "def oddCount(lst: Seq[String]): Seq[String] = {\n    lst.map(num => {\n        val n = num.foldLeft(0)((acc, d) => if (d % 2 == 1) acc + 1 else acc)\n        \"the number of odd elements in the string \" + n + \" of the input.\"\n    })\n}\n",
            "def minSubArraySum(nums: Seq[Int]): Int = {\n    var minSum = 0\n    var curSum = 0\n    for (n <- nums) {\n        curSum = math.min(curSum + n, 0)\n        minSum = math.min(curSum, minSum)\n    }\n    if (minSum == 0) minSum = nums.min\n    minSum\n}\n",
            "def maxFill(grid: Seq[Seq[Int]], capacity: Int): Int = {\n    grid.map(_.sum).map(ceil(_ / capacity).toInt).sum\n}\n",
            "def countOnes(num: Int): Int = {\n    var count = 0\n    while (num > 0) {\n        if ((num & 1) == 1) {\n            count += 1\n        }\n        num >>= 1\n    }\n    count\n}\ndef sortArray(arr: Seq[Int]): Seq[Int] = {\n    val sortedArr = arr.sorted(Ordering.by((x: Int) => (countOnes(x), x)))\n    sortedArr\n}\n",
            "def selectWords(s: String, n: Int): Seq[String] = {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\".toSet\n    val words = s.split(\" \").filter(_.nonEmpty)\n    words.filter(w => w.count(c => consonants.contains(c.toLower)) == n)\n}\n",
            "def getClosestVowel(word: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    for (i <- word.length - 2 to 0 by -1) {\n        if (vowels.contains(word.charAt(i)) && !vowels.contains(word.charAt(i - 1)) && !vowels.contains(word.charAt(i + 1))) {\n            return word.substring(i, i + 1)\n        }\n    }\n    \"\"\n}\n",
            "def matchParens(lst: Seq[String]): String = {\n    val s1 = lst(0) + lst(1)\n    val s2 = lst(1) + lst(0)\n    if (check(s1) || check(s2)) \"Yes\" else \"No\"\n}\ndef check(s: String): Boolean = {\n    var depth = 0\n    for (ch <- s) {\n        if (ch == '(') depth += 1 else depth -= 1\n        if (depth < 0) return false\n    }\n    depth == 0\n}\n",
            "def maximum(arr: Seq[Int], k: Int): Seq[Int] = {\n    if (k == 0) {\n        return Seq()\n    }\n    val result = mutable.ListBuffer[Int]()\n    for (i <- 0 until arr.length) {\n        result.addOne(arr(i))\n    }\n    result.sortWith((a, b) => a > b)\n    result.toList.takeRight(k)\n}\n",
            "def solution(lst: List[Int]): Int = {\n    lst.zipWithIndex.foldLeft(0)((acc, item) => if (item._2 % 2 == 0 && item._1 % 2 != 0) acc + item._1 else acc)\n}\n",
            "def addElements(arr: Seq[Int], k: Int): Int = {\n    var sumValue = 0\n    for (n <- arr.slice(0, k)) {\n        if (n.toString.length <= 2) {\n            sumValue += n\n        }\n    }\n    sumValue\n}\n",
            "def getOddCollatz(n: Int): Seq[Int] = {\n    var collatz = List(1)\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz = n :: collatz\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    collatz.sorted.reverse\n}\n",
            "def validDate(date: String): Boolean = {\n    if (date.length != 10 || date(2) != '-' || date(5) != '-') return false\n    val m = date.substring(0, 2).toInt\n    val d = date.substring(3, 5).toInt\n    if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n        if (d >= 1 && d <= 31) return true\n    } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n        if (d >= 1 && d <= 30) return true\n    } else if (m == 2) {\n        if (d >= 1 && d <= 29) return true\n    }\n    false\n}\n",
            "def splitWords(txt: String): Seq[String] = {\n    if (txt.contains(\" \")) {\n        txt.split(\" \")\n    } else if (txt.contains(\",\")) {\n        txt.split(\",\")\n    } else {\n        List(txt.filter(c => c.isLower && c.toInt % 2 == 0).length.toString)\n    }\n}\n",
            "def isSorted(lst: Seq[Int]): Boolean = {\n    lst.sliding(2).forall(x => x.size == 1 || x(0) <= x(1)) && lst.groupBy(identity).values.map(_.size).max <= 2\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) return false\n    for (i <- 2 to math.sqrt(n).toInt) {\n        if (n % i == 0) return false\n    }\n    true\n}\ndef intersection(interval1: Seq[Int], interval2: Seq[Int]): String = {\n    val l = math.max(interval1(0), interval2(0))\n    val r = math.min(interval1(1), interval2(1))\n    val length = r - l\n    if (length > 0 && isPrime(length)) \"YES\" else \"NO\"\n}\n",
            "def prodSigns(arr: Seq[Int]): Option[Int] = {\n    if (arr.isEmpty) None else {\n        if (arr.contains(0)) Some(0) else {\n            val sign = if (arr.count(_ < 0) % 2 == 1) -1 else 1\n            Some(sign * arr.map(math.abs).sum)\n        }\n    }\n}\n",
            "def minPath(grid: Seq[Seq[Int]], k: Int): Seq[Int] = {\n    val n = grid.length\n    var minVal = n * n + 1\n    for (i <- 0 until n) {\n        for (j <- 0 until n) {\n            if (grid(i)(j) == 1) {\n                var temp = List[Int]()\n                if (i != 0) {\n                    temp = grid(i - 1)(j) :: temp\n                }\n                if (j != 0) {\n                    temp = grid(i)(j - 1) :: temp\n                }\n                if (i != n - 1) {\n                    temp = grid(i + 1)(j) :: temp\n                }\n                if (j != n - 1) {\n                    temp = grid(i)(j + 1) :: temp\n                }\n                minVal = math.min(temp: _*)\n            }\n        }\n    }\n    val result = (0 until k).map(i => if (i % 2 == 0) 1 else minVal).toList\n    result\n}\n",
            "def tri(n: Int): Seq[Int] = {\n    if (n == 0) return Seq(1)\n    var seq = Seq(1, 3)\n    for (i <- 2 to n) {\n        if (i % 2 == 0) {\n            seq = seq :+ (i / 2 + 1)\n        } else {\n            seq = seq :+ seq(i - 1) + seq(i - 2) + (i + 3) / 2\n        }\n    }\n    seq\n}\n",
            "def digits(n: Int): Int = {\n    val odds = n.toString.filter(_.isDigit).map(_.asDigit).filter(_ % 2 == 1).toList\n    if (odds.isEmpty) 0 else odds.foldLeft(1)(_ * _)\n}\n",
            "def isNested(s: String): Boolean = {\n    val openIdx = s.indices.filter(i => s(i) == '[')\n    val closeIdx = s.indices.filter(i => s(i) == ']').reverse\n    var cnt = 0\n    var i = 0\n    val l = closeIdx.length\n    for (idx <- openIdx) {\n        if (i < l && idx < closeIdx(i)) {\n            cnt += 1\n            i += 1\n        }\n    }\n    cnt >= 2\n}\n",
            "def sumSquares(lst: Seq[Double]): Int = {\n    lst.map(n => math.pow(math.ceil(n), 2).toInt).sum\n}\n",
            "def checkIfLastCharIsALetter(txt: String): Boolean = {\n    if (txt.isEmpty) {\n        return false\n    }\n    val last = txt.substring(txt.lastIndexOf(' ') + 1)\n    last.length == 1 && last.charAt(0).isLetter\n}\n",
            "def canArrange(arr: Seq[Int]): Int = {\n    if (arr.length <= 1) -1 else {\n        val idx = arr.zipWithIndex.filter(_._1 < arr.head).map(_._2)\n        if (idx.isEmpty) -1 else idx.max\n    }\n}\n",
            "def largestSmallestIntegers(lst: Seq[Int]): Seq[Option[Int]] = {\n    var maxNeg: Option[Int] = None\n    var minPos: Option[Int] = None\n    for (i <- lst) {\n        if (i < 0) {\n            if (maxNeg.isEmpty || i > maxNeg.get) {\n                maxNeg = Some(i)\n            }\n        } else if (i > 0) {\n            if (minPos.isEmpty || i < minPos.get) {\n                minPos = Some(i)\n            }\n        }\n    }\n    List(maxNeg, minPos)\n}\n",
            "def anyToReal(o: Any): Double = {\n    o match {\n        case s: String => s.replace(\",\", \".\").toDouble\n        case i: Int => i.toDouble\n        case f: Float => f.toDouble\n        case _ => throw new RuntimeException(\"Type Error\")\n    }\n}\ndef compareOne(a: Any, b: Any): Option[Double] = {\n    val a1 = anyToReal(a)\n    val b1 = anyToReal(b)\n    if (a1 == b1) None else if (a1 > b1) Some(a1) else Some(b1)\n}\n",
            "def isEqualToSumEven(n: Int): Boolean = {\n    n % 2 == 0 && n >= 8\n}\n",
            "def specialFactorial(n: Int): Int = {\n    var result = 1\n    for (i <- 1 to n) {\n        var fact = 1\n        for (j <- 1 to i) {\n            fact *= j\n        }\n        result *= fact\n    }\n    result\n}\n",
            "def fixSpaces(txt: String): String = {\n    re.sub(\"\\\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n}\n",
            "def fileNameCheck(fileName: String): String = {\n    val suf = List(\"txt\", \"exe\", \"dll\")\n    val lst = fileName.split('.')\n    if (lst.length != 2 || !suf.contains(lst(1)) || lst(0).isEmpty || !lst(0).head.isLetter || lst(0).count(_.isDigit) > 3) \"No\" else \"Yes\"\n}\n",
            "def sumSquares(lst: Seq[Int]): Int = {\n    lst.zipWithIndex.foldLeft(0)((acc, item) => {\n        if (item._2 % 3 == 0) acc + pow(item._1, 2) else if (item._2 % 4 == 0) acc + pow(item._1, 3) else acc + item._1\n    })\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) return false\n    for (i <- 2 to math.sqrt(n).toInt) {\n        if (n % i == 0) return false\n    }\n    true\n}\ndef wordsInSentence(sentence: String): String = {\n    val words = sentence.split(\" \")\n    val result = words.filter(w => isPrime(w.length)).mkString(\" \")\n    result\n}\n",
            "def simplify(x: String, n: String): Boolean = {\n    val xs = x.split(\"/\")\n    val ns = n.split(\"/\")\n    val num = xs(0).toInt * ns(0).toInt\n    val den = xs(1).toInt * ns(1).toInt\n    num % den == 0\n}\n",
            "def digitsSum(n: Int): Int = {\n    if (n >= 0) {\n        n.toString.foldLeft(0)((acc, c) => acc + c.asDigit)\n    } else {\n        n.toString.substring(0, 2).toInt * 2 + digitsSum(math.abs(n))\n    }\n}\ndef orderByPoints(nums: Seq[Int]): Seq[Int] = {\n    nums.sorted(Ordering.by(digitsSum))\n}\n",
            "def specialFilter(nums: Seq[Int]): Int = {\n    val odds = Set(1, 3, 5, 7, 9)\n    nums.count(n => n > 10 && n % 2 == 1 && odds.contains(n.toString.head.toInt))\n}\n",
            "def getMaxTriples(n: Int): Int = {\n    val c = Array(0, 0, 0)\n    for (i <- 1 to n) {\n        val a = i * i - i + 1\n        c(a % 3) += 1\n    }\n    c(0) * c(1) * c(2) + (c(0) * (c(0) - 1) * (c(0) - 2) + c(1) * (c(1) - 1) * (c(1) - 2) + c(2) * (c(2) - 1) * (c(2) - 2)) // 6\n}\n",
            "def bf(planet1: String, planet2: String): Seq[String] = {\n    val names = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (!names.contains(planet1) || !names.contains(planet2)) {\n        return List()\n    }\n    val l = names.indexOf(planet1)\n    val r = names.indexOf(planet2)\n    if (l > r) {\n        val temp = l\n        l = r\n        r = temp\n    }\n    if (l == r) {\n        return List()\n    }\n    names.slice(l + 1, r)\n}\n",
            "def sortedListSum(lst: Seq[String]): Seq[String] = {\n    val result = mutable.ListBuffer[String]()\n    for (s <- lst) {\n        if (s.length % 2 == 0) {\n            result.addOne(s)\n        }\n    }\n    result.sortWith((s1, s2) => s1.length < s2.length || (s1.length == s2.length && s1 < s2)).toList\n}\n",
            "def xOrY(n: Int, x: Int, y: Int): Int = {\n    if (n < 2) return y\n    for (i <- 2 to math.sqrt(n).toInt) {\n        if (n % i == 0) return y\n    }\n    x\n}\n",
            "def doubleTheDifference(lst: Seq[Double]): Int = {\n    lst.filter(n => n >= 0 && n % 2 == 1).map(n => n * n).sum.toInt\n}\n",
            "def compare(game: Seq[Int], guess: Seq[Int]): Seq[Int] = {\n    game.zip(guess).map(x => math.abs(x._1 - x._2))\n}\n",
            "def strongestExtension(className: String, extensions: Seq[String]): String = {\n    var maxS = -1.0\n    var maxExt = \"\"\n    for (ext <- extensions) {\n        var upper = 0\n        var lower = 0\n        for (c <- ext) {\n            if (c.isUpper) {\n                upper += 1\n            } else if (c.isLower) {\n                lower += 1\n            }\n        }\n        val s = upper - lower\n        if (s > maxS) {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    s\"$className.$maxExt\"\n}\n",
            "def cycpatternCheck(a: String, b: String): Boolean = {\n    if a.length < b.length {\n        return false\n    }\n    for i <- 0 until b.length {\n        if a.contains(b.substring(i) + b.substring(0, i)) {\n            return true\n        }\n    }\n    return false\n}\n",
            "def evenOddCount(num: Int): Seq[Int] = {\n    val ds = num.abs.toString.toList\n    val even = ds.count(d => d.toInt % 2 == 0)\n    Seq(even, ds.length - even)\n}\n",
            "def intToMiniRoman(num: Int): String = {\n    val values = List(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    val numerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    val res = (0 until values.length).foldLeft(List[String]())((acc, i) => {\n        if (num >= values(i)) {\n            acc ::: List.fill(num / values(i))(numerals(i))\n        } else {\n            acc\n        }\n    })\n    res.mkString\n}\n",
            "def rightAngleTriangle(a: Int, b: Int, c: Int): Boolean = {\n    val s = List(a, b, c).sorted\n    s(0) * s(0) + s(1) * s(1) == s(2) * s(2)\n}\n",
            "def findMax(words: Seq[String]): String = {\n    var maxCnt = 0\n    var maxW = \"\"\n    for (w <- words) {\n        val cnt = w.toSet.size\n        if (cnt > maxCnt) {\n            maxCnt = cnt\n            maxW = w\n        } else if (cnt == maxCnt) {\n            maxW = min(maxW, w)\n        }\n    }\n    maxW\n}\n",
            "def eat(num: Int, need: Int, remaining: Int): Seq[Int] = {\n    if (need <= remaining) Seq(num + need, remaining - need) else Seq(num + remaining, 0)\n}\n",
            "def doAlgebra(operators: Seq[String], operands: Seq[Int]): Int = {\n    var ops = operators.toList\n    var nums = operands.toList\n    var i = ops.length - 1\n    while (i >= 0) {\n        if (ops(i) == \"**\") {\n            nums(i) = math.pow(nums(i), nums(i + 1)).toInt\n            nums = nums.drop(i + 1)\n            ops = ops.drop(i)\n        }\n        i -= 1\n    }\n    i = 0\n    while (i < ops.length) {\n        if (ops(i) == \"*\") {\n            nums(i) = nums(i) * nums(i + 1)\n            nums = nums.drop(i + 1)\n            ops = ops.drop(i)\n            i -= 1\n        } else if (ops(i) == \"//\") {\n            nums(i) = nums(i) / nums(i + 1)\n            nums = nums.drop(i + 1)\n            ops = ops.drop(i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while (i < ops.length) {\n        if (ops(i) == \"+\") {\n            nums(i) = nums(i) + nums(i + 1)\n            nums = nums.drop(i + 1)\n            ops = ops.drop(i)\n            i -= 1\n        } else if (ops(i) == \"-\") {\n            nums(i) = nums(i) - nums(i + 1)\n            nums = nums.drop(i + 1)\n            ops = ops.drop(i)\n            i -= 1\n        }\n        i += 1\n    }\n    nums(0)\n}\n",
            "def solve(s: String): String = {\n    val result = s.foldLeft(List[Char]())((acc, ch) => {\n        if (!ch.isLetter) {\n            ch :: acc\n        } else if (ch.isUpper) {\n            ch.toLower :: acc\n        } else {\n            ch.toUpper :: acc\n        }\n    })\n    if (!result.exists(_.isLetter)) result.reverse.mkString else result.mkString\n}\n",
            "def stringToMd5(txt: String): Option[String] = {\n    if (txt.isEmpty) None else {\n        val md5Hash = java.security.MessageDigest.getInstance(\"MD5\")\n        val txtBytes = txt.getBytes\n        md5Hash.update(txtBytes)\n        val md5Encoded = md5Hash.digest().map(\"%02x\".format(_)).mkString\n        Some(md5Encoded)\n    }\n}\n",
            "def generateIntegers(a: Int, b: Int): Seq[Int] = {\n    val lower = math.max(2, math.min(a, b))\n    val upper = math.min(8, math.max(a, b))\n    (lower to upper).filter(_ % 2 == 0).toList\n}\n"
        ],
        "swift": [
            "func hasCloseElements(_ numbers: [Double], _ threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i + 1..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func separateParenGroups(_ parenString: String) -> [String] {\n    var groups = [String]()\n    var stk = [Character]()\n    var currentGroup = \"\"\n    let parens = parenString.replacingOccurrences(of: \" \", with: \"\")\n    for ch in parens {\n        if ch == \"(\" {\n            stk.append(ch)\n            currentGroup.append(ch)\n        } else if ch == \")\" {\n            stk.removeLast()\n            currentGroup.append(ch)\n            if stk.isEmpty {\n                groups.append(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "func truncateNumber(_ num: Double) -> Double {\n    return num.truncatingRemainder(dividingBy: 1)\n}\n",
            "func belowZero(_ operations: [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func meanAbsoluteDeviation(_ numbers: [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n    let deviation = numbers.map { abs($0 - mean) }.reduce(0, +)\n    return deviation / Double(numbers.count)\n}\n",
            "func intersperse(_ numbers: [Int], _ delimiter: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<numbers.count {\n        if i != 0 {\n            result.append(delimiter)\n        }\n        result.append(numbers[i])\n    }\n    return result\n}\n",
            "func parseNestedParens(_ parenString: String) -> [Int] {\n    var result = [Int]()\n    let parenGroups = parenString.split(separator: \" \")\n    for group in parenGroups {\n        var maxDepth = 0\n        var depth = 0\n        for ch in group {\n            if ch == \"(\" {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if ch == \")\" {\n                depth -= 1\n            }\n        }\n        result.append(maxDepth)\n    }\n    return result\n}\n",
            "func filterBySubstring(_ strs: [String], _ substring: String) -> [String] {\n    var result = [String]()\n    for s in strs {\n        if s.contains(substring) {\n            result.append(s)\n        }\n    }\n    return result\n}\n",
            "func sumProduct(_ numbers: [Int]) -> [Int] {\n    var nSum = 0\n    var nProduct = 1\n    for n in numbers {\n        nSum += n\n        nProduct *= n\n    }\n    return [nSum, nProduct]\n}\n",
            "func rollingMax(_ numbers: [Int]) -> [Int] {\n    var result = [Int]()\n    var maxSoFar = Int.min\n    for num in numbers {\n        if num > maxSoFar {\n            maxSoFar = num\n        }\n        result.append(maxSoFar)\n    }\n    return result\n}\n",
            "func isPalindrome(_ s: String) -> Bool {\n    return s == String(s.reversed())\n}\nfunc makePalindrome(_ s: String) -> String {\n    if isPalindrome(s) {\n        return s\n    }\n    for i in 0..<s.count {\n        if isPalindrome(String(s.suffix(s.count - i))) {\n            return s + String(s.prefix(i).reversed())\n        }\n    }\n    return \"\"\n}\n",
            "func stringXor(_ a: String, _ b: String) -> String {\n    var result = \"\"\n    for i in 0..<min(a.count, b.count) {\n        if a[a.index(a.startIndex, offsetBy: i)] == b[b.index(b.startIndex, offsetBy: i)] {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n    return result\n}\n",
            "func longest(_ strs: [String]) -> String? {\n    if strs.isEmpty {\n        return nil\n    }\n    var longestS = strs[0]\n    for s in strs {\n        if s.count > longestS.count {\n            longestS = s\n        }\n    }\n    return longestS\n}\n",
            "func greatestCommonDivisor(_ a: Int, _ b: Int) -> Int {\n    var a = a\n    var b = b\n    while b != 0 {\n        let temp = b\n        b = a % b\n        a = temp\n    }\n    return a\n}\n",
            "func allPrefixes(_ s: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<s.count {\n        prefixes.append(String(s.prefix(i + 1)))\n    }\n    return prefixes\n}\n",
            "func stringSequence(_ n: Int) -> String {\n    var result = \"\"\n    for i in 0..<n + 1 {\n        result += String(i) + \" \"\n    }\n    return String(result.dropLast())\n}\n",
            "func countDistinctCharacters(_ s: String) -> Int {\n    var distinctCharacters = Set<Character>()\n    for char in s.lowercased() {\n        distinctCharacters.insert(char)\n    }\n    return distinctCharacters.count\n}\n",
            "func parseMusic(_ musicString: String) -> [Int] {\n    let durations: [String: Int] = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    let notes = musicString.split(separator: \" \")\n    var result = [Int]()\n    for note in notes {\n        result.append(durations[String(note)]!)\n    }\n    return result\n}\n",
            "func howManyTimes(_ s: String, _ substring: String) -> Int {\n    var times = 0\n    for i in 0..<s.count - substring.count + 1 {\n        if String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: i + substring.count)]) == substring {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "func sortNumbers(_ numbers: String) -> String {\n    let numDict: [String: Int] = [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    ]\n    let numList = numbers.split(separator: \" \").filter { numDict[$0] != nil }.sorted { numDict[$0]! < numDict[$1]! }\n    return numList.joined(separator: \" \")\n}\n",
            "func findClosestElements(_ numbers: [Double]) -> [Double] {\n    let sortedNumbers = numbers.sorted()\n    var minDiff = Double.infinity\n    var closestPair = [Double]()\n    for i in 1..<sortedNumbers.count {\n        let diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]]\n        }\n    }\n    return closestPair\n}\n",
            "func rescaleToUnit(_ numbers: [Double]) -> [Double] {\n    var minNum = Double.infinity\n    var maxNum = -Double.infinity\n    for num in numbers {\n        if num < minNum {\n            minNum = num\n        }\n        if num > maxNum {\n            maxNum = num\n        }\n    }\n    if minNum == maxNum {\n        return [Double](repeating: 0.0, count: numbers.count)\n    } else {\n        return numbers.map { (num) -> Double in\n            return (num - minNum) / (maxNum - minNum)\n        }\n    }\n}\n",
            "func filterIntegers(_ values: [Any]) -> [Int] {\n    var result = [Int]()\n    for x in values {\n        if let x = x as? Int {\n            result.append(x)\n        }\n    }\n    return result\n}\n",
            "func strLength(_ s: String) -> Int {\n    var length = 0\n    for char in s {\n        length += 1\n    }\n    return length\n}\n",
            "func largestDivisor(_ n: Int) -> Int {\n    for i in 2..<n {\n        if n % i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "func factorize(_ n: Int) -> [Int] {\n    var factors = [Int]()\n    var divisor = 2\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.append(divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "func removeDuplicates(_ numbers: [Int]) -> [Int] {\n    var counts = [Int: Int]()\n    for num in numbers {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    let res = numbers.filter { counts[$0] == 1 }\n    return res\n}\n",
            "func flipCase(_ s: String) -> String {\n    var flipped = \"\"\n    for ch in s {\n        if !ch.isLetter {\n            flipped.append(ch)\n        } else if ch.isLowercase {\n            flipped.append(ch.uppercased())\n        } else if ch.isUppercase {\n            flipped.append(ch.lowercased())\n        }\n    }\n    return flipped\n}\n",
            "func concatenate(_ strs: [String]) -> String {\n    var result = \"\"\n    for s in strs {\n        result += s\n    }\n    return result\n}\n",
            "func filterByPrefix(_ strs: [String], _ prefixStr: String) -> [String] {\n    var result = [String]()\n    for s in strs {\n        if s.hasPrefix(prefixStr) {\n            result.append(s)\n        }\n    }\n    return result\n}\n",
            "func getPositive(_ l: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in l {\n        if num > 0 {\n            result.append(num)\n        }\n    }\n    return result\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func poly(_ xs: [Int], _ x: Double) -> Double {\n    var res: Double = 0.0\n    for i in 0..<xs.count {\n        res += Double(xs[i]) * pow(x, Double(i))\n    }\n    return res\n}\nfunc findZero(_ xs: [Int]) -> Double {\n    var x1: Double = 1.0\n    var x2: Double = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    while abs(x1 - x2) > 1e-10 {\n        let mid: Double = (x1 + x2) / 2\n        if poly(xs, mid) == 0 {\n            return mid\n        } else if poly(xs, mid) * poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "func sortThird(_ l: [Int]) -> [Int] {\n    let sortedThird = l.sorted()\n    var result = [Int]()\n    for i in 0..<l.count {\n        if i % 3 == 0 {\n            result.append(sortedThird[i / 3])\n        } else {\n            result.append(l[i])\n        }\n    }\n    return result\n}\n",
            "func listUnique(_ l: [Int]) -> [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item) {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n}\n",
            "func maxElement(_ l: [Int]) -> Int {\n    var maxValue = Int.min\n    for i in l {\n        if i > maxValue {\n            maxValue = i\n        }\n    }\n    return maxValue\n}\n",
            "func fizzBuzz(_ n: Int) -> Int {\n    var cnt = 0\n    for i in 1...n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += String(i).filter { $0 == \"7\" }.count\n        }\n    }\n    return cnt\n}\n",
            "func sortEven(_ l: [Int]) -> [Int] {\n    let sortedEven = l.filter { $0 % 2 == 0 }.sorted()\n    var result = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            result.append(sortedEven[i / 2])\n        } else {\n            result.append(l[i])\n        }\n    }\n    return result\n}\n",
            "func encodeCyclic(_ s: String) -> String {\n    var result = \"\"\n    for i in stride(from: 0, to: s.count, by: 3) {\n        if i + 3 > s.count {\n            result.append(String(s[i..<s.count]))\n        } else {\n            result.append(String(s[i+1..<i+3]))\n            result.append(String(s[i]))\n        }\n    }\n    return result\n}\nfunc decodeCyclic(_ s: String) -> String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "func isPrime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc primeFib(_ n: Int) -> Int {\n    var f = [0, 1]\n    var cnt = 0\n    while cnt < n {\n        f = [f[1], f[0] + f[1]]\n        if isPrime(f[1]) {\n            cnt += 1\n        }\n    }\n    return f[1]\n}\n",
            "func triplesSumToZero(_ l: [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func carRaceCollision(_ n: Int) -> Int {\n    return Int(pow(Double(n), 2))\n}\n",
            "func incrList(_ l: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l {\n        result.append(i + 1)\n    }\n    return result\n}\n",
            "func pairsSumToZero(_ l: [Int]) -> Bool {\n    var seen = Set<Int>()\n    for num in l {\n        if seen.contains(-num) {\n            return true\n        }\n        seen.insert(num)\n    }\n    return false\n}\n",
            "func changeBase(_ x: Int, _ bas: Int) -> String {\n    if x == 0 {\n        return \"0\"\n    }\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result = String(x % bas) + result\n        x /= bas\n    }\n    return result\n}\n",
            "func triangleArea(_ a: Int, _ h: Int) -> Double {\n    return Double(a) * Double(h) / 2\n}\n",
            "func fib4(_ n: Int) -> Int {\n    var fib = [0, 0, 2, 0]\n    for i in 4..<(n + 1) {\n        fib[i % 4] = fib[i - 1] + fib[i - 2]\n    }\n    return fib[n % 4]\n}\n",
            "func median(_ l: [Double]) -> Double {\n    let sl = l.sorted()\n    if l.count % 2 != 0 {\n        return sl[l.count / 2]\n    } else {\n        return (sl[l.count / 2] + sl[l.count / 2 - 1]) / 2\n    }\n}\n",
            "func isPalindrome(_ txt: String) -> Bool {\n    for i in 0..<txt.count / 2 {\n        if txt[txt.index(txt.startIndex, offsetBy: i)] != txt[txt.index(txt.endIndex, offsetBy: -i - 1)] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func modp(_ n: Int, _ p: Int) -> Int {\n    var ret = 1\n    for _ in 0..<n {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func encodeShift(_ s: String) -> String {\n    var result = \"\"\n    for ch in s {\n        result.append(Character(((ch.unicodeScalars.first!.value - 97 + 5) % 26) + 97))\n    }\n    return result\n}\nfunc decodeShift(_ s: String) -> String {\n    var result = \"\"\n    for ch in s {\n        result.append(Character(((ch.unicodeScalars.first!.value - 97 + 21) % 26) + 97))\n    }\n    return result\n}\n",
            "func removeVowels(_ txt: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for char in txt {\n        if !vowels.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n",
            "func belowThreshold(_ l: [Int], _ t: Int) -> Bool {\n    for x in l {\n        if x >= t {\n            return false\n        }\n    }\n    return true\n}\n",
            "func add(_ x: Int, _ y: Int) -> Int {\n    return x + y\n}\n",
            "func sameChars(_ s0: String, _ s1: String) -> Bool {\n    let s0Set = Set(s0)\n    let s1Set = Set(s1)\n    return s0Set == s1Set\n}\n",
            "func fib(_ n: Int) -> Int {\n    if n <= 1 {\n        return n\n    } else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"<\" {\n            depth += 1\n        } else if b == \">\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func monotonic(_ l: [Int]) -> Bool {\n    let diff = zip(l, l.dropFirst()).map { $0.1 - $0.0 }\n    return diff.allSatisfy { $0 <= 0 } || diff.allSatisfy { $0 >= 0 }\n}\n",
            "func common(_ l1: [Int], _ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n        if l2.contains(i) {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n}\n",
            "func largestPrimeFactor(_ n: Int) -> Int {\n    var i = 2\n    while i * i <= n {\n        if n % i != 0 {\n            i += 1\n        } else {\n            n /= i\n        }\n    }\n    return n\n}\n",
            "func sumToN(_ n: Int) -> Int {\n    var result = 0\n    for i in 0...n {\n        result += i\n    }\n    return result\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"(\" {\n            depth += 1\n        } else if b == \")\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func derivative(_ xs: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(xs[i] * i)\n    }\n    return result\n}\n",
            "func fibfib(_ n: Int) -> Int {\n    if n <= 1 {\n        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 1\n    while n > 2 {\n        a = b\n        b = c\n        c = a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "func vowelsCount(_ s: String) -> Int {\n    let vowels = \"aeiou\"\n    var cnt = 0\n    for i in 0..<s.count {\n        if vowels.contains(s[i].lowercased()) || (i == s.count - 1 && s[i].lowercased() == \"y\") {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "func circularShift(_ x: Int, _ shift: Int) -> String {\n    let xStr = String(x)\n    if shift > xStr.count {\n        return String(xStr.reversed())\n    } else {\n        return String(xStr.suffix(xStr.count - shift)) + String(xStr.prefix(shift))\n    }\n}\n",
            "func digitSum(_ s: String) -> Int {\n    var sumValue = 0\n    for c in s {\n        if c.isUppercase {\n            sumValue += Int(c.unicodeScalars.first!.value)\n        }\n    }\n    return sumValue\n}\n",
            "func fruitDistribution(_ s: String, _ n: Int) -> Int {\n    let words = s.split(separator: \" \")\n    let apples = Int(words[words.firstIndex(of: \"apples\")! - 1])!\n    let oranges = Int(words[words.firstIndex(of: \"oranges\")! - 1])!\n    return n - apples - oranges\n}\n",
            "func pluck(_ arr: [Int]) -> [Int] {\n    let evens = arr.filter { $0 % 2 == 0 }\n    if evens.count == 0 {\n        return []\n    }\n    let minEven = evens.min()!\n    return [minEven, arr.firstIndex(of: minEven)!]\n}\n",
            "func search(_ lst: [Int]) -> Int {\n    var freqs = [Int: Int]()\n    for n in lst {\n        if freqs[n] == nil {\n            freqs[n] = 0\n        }\n        freqs[n]! += 1\n    }\n    let goodVals = freqs.filter { (k, v) in v >= k }.map { $0.key }\n    if goodVals.count > 0 {\n        return goodVals.max()!\n    } else {\n        return -1\n    }\n}\n",
            "func strangeSortList(_ lst: [Int]) -> [Int] {\n    let sl = lst.sorted()\n    var result = [Int]()\n    var left = 0, right = sl.count - 1\n    while left <= right {\n        result.append(sl[left])\n        left += 1\n        if left <= right {\n            result.append(sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "func triangleArea(_ a: Int, _ b: Int, _ c: Int) -> Double {\n    let s = Double((a + b + c)) / 2.0\n    if a + b > c && a + c > b && b + c > a {\n        return sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n    } else {\n        return -1.0\n    }\n}\n",
            "func willItFly(_ q: [Int], _ w: Int) -> Bool {\n    if q.count == 0 {\n        return false\n    }\n    var isPalin = true\n    for i in 0..<q.count {\n        if q[i] != q[q.count - i - 1] {\n            isPalin = false\n        }\n    }\n    var total = 0\n    for i in q {\n        total += i\n    }\n    return isPalin && total <= w\n}\n",
            "func smallestChange(_ arr: [Int]) -> Int {\n    var ans = 0\n    for i in 0..<(arr.count / 2) {\n        if arr[i] != arr[arr.count - i - 1] {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "func totalMatch(_ lst1: [String], _ lst2: [String]) -> [String] {\n    var cnt1 = 0\n    for s in lst1 {\n        cnt1 += s.count\n    }\n    var cnt2 = 0\n    for s in lst2 {\n        cnt2 += s.count\n    }\n    return cnt1 <= cnt2 ? lst1 : lst2\n}\n",
            "func isPrime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc isMultiplyPrime(_ a: Int) -> Bool {\n    var cnt = 0\n    for i in 2...a {\n        if isPrime(n: i) {\n            while a % i == 0 {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "func isSimplePower(_ x: Int, _ n: Int) -> Bool {\n    if n < 2 {\n        return x == n\n    }\n    var tmp = 1\n    while tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "func isCube(_ a: Int) -> Bool {\n    let a = abs(a)\n    let root = Int(round(pow(Double(a), 1.0 / 3.0)))\n    return root * root * root == a\n}\n",
            "func hexKey(_ num: String) -> Int {\n    var count = 0\n    for x in num {\n        if \"2357BD\".contains(x) {\n            count += 1\n        }\n    }\n    return count\n}\n",
            "func decimalToBinary(_ dec: Int) -> String {\n    let binary = String(dec, radix: 2)\n    return \"db\\(binary)db\"\n}\n",
            "func isHappy(_ s: String) -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n        if s[s.index(s.startIndex, offsetBy: i)] == s[s.index(s.startIndex, offsetBy: i + 1)] || s[s.index(s.startIndex, offsetBy: i)] == s[s.index(s.startIndex, offsetBy: i + 2)] || s[s.index(s.startIndex, offsetBy: i + 1)] == s[s.index(s.startIndex, offsetBy: i + 2)] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func numericalLetterGrade(_ grades: [Double]) -> [String] {\n    var result = [String]()\n    for g in grades {\n        if g == 4.0 {\n            result.append(\"A+\")\n        } else if g > 3.7 {\n            result.append(\"A\")\n        } else if g > 3.3 {\n            result.append(\"A-\")\n        } else if g > 3.0 {\n            result.append(\"B+\")\n        } else if g > 2.7 {\n            result.append(\"B\")\n        } else if g > 2.3 {\n            result.append(\"B-\")\n        } else if g > 2.0 {\n            result.append(\"C+\")\n        } else if g > 1.7 {\n            result.append(\"C\")\n        } else if g > 1.3 {\n            result.append(\"C-\")\n        } else if g > 1.0 {\n            result.append(\"D+\")\n        } else if g > 0.7 {\n            result.append(\"D\")\n        } else if g > 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"E\")\n        }\n    }\n    return result\n}\n",
            "func primeLength(_ s: String) -> Bool {\n    let length = s.count\n    if length < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(length))) {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func startsOneEnds(_ n: Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    var result = 2 * 9 * Int(pow(10, Double(n - 2)))\n    return result\n}\n",
            "func solve(_ n: Int) -> String {\n    var digitsSum = 0\n    for d in String(n) {\n        digitsSum += Int(String(d))!\n    }\n    return String(digitsSum, radix: 2)\n}\n",
            "func add(_ lst: [Int]) -> Int {\n    var result = 0\n    for (index, x) in lst.enumerated() {\n        if index % 2 == 1 && x % 2 == 0 {\n            result += x\n        }\n    }\n    return result\n}\n",
            "func antiShuffle(_ s: String) -> String {\n    let words = s.split(separator: \" \").map { String($0) }\n    for i in 0..<words.count {\n        words[i] = String(words[i].sorted())\n    }\n    return words.joined(separator: \" \")\n}\n",
            "func getRow(_ lst: [[Int]], _ x: Int) -> [[Int]] {\n    var coords = [[Int]]()\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            if lst[i][j] == x {\n                coords.append([i, j])\n            }\n        }\n    }\n    return coords.sorted(by: { a, b in a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]) })\n}\n",
            "func sortArray(_ arr: [Int]) -> [Int] {\n    if arr.count == 0 {\n        return []\n    }\n    if (arr[0] + arr[arr.count - 1]) % 2 == 0 {\n        return arr.sorted(by: >)\n    } else {\n        return arr.sorted()\n    }\n}\n",
            "func encrypt(_ s: String) -> String {\n    var result = \"\"\n    for ch in s {\n        var shifted = ch.unicodeScalars.first!.value + 4\n        if shifted > \"z\".unicodeScalars.first!.value {\n            shifted -= 26\n        }\n        result.append(Character(UnicodeScalar(shifted)!))\n    }\n    return result\n}\n",
            "func nextSmallest(_ lst: [Int]) -> Int? {\n    let uniqueList = Set(lst)\n    let sortedList = uniqueList.sorted()\n    if sortedList.count < 2 {\n        return nil\n    }\n    return sortedList[1]\n}\n",
            "func isBored(_ s: String) -> Int {\n    let sentences = s.split(separator: \".\")\n    var count = 0\n    for sentence in sentences {\n        if sentence.count >= 2 && sentence.prefix(2) == \"I \" {\n            count += 1\n        }\n    }\n    return count\n}\n",
            "func anyInt(_ x: Any, _ y: Any, _ z: Any) -> Bool {\n    if let x = x as? Int, let y = y as? Int, let z = z as? Int {\n        return x + y == z || x + z == y || y + z == x\n    }\n    return false\n}\n",
            "func encode(_ message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for ch in message {\n        if ch.isLetter {\n            let ch1 = ch.uppercased()\n            if vowels.contains(ch1) {\n                result.append(String(ch1.unicodeScalars.map {\n                    UnicodeScalar(Int(ch1.unicodeScalars.first!.value) + 2)!\n                }))\n            } else {\n                result.append(ch1)\n            }\n        } else {\n            result.append(String(ch))\n        }\n    }\n    return result\n}\n",
            "func isPrime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc skjkasdkd(_ lst: [Int]) -> Int {\n    let primes = lst.filter(isPrime)\n    if primes.isEmpty {\n        return 0\n    }\n    let largest = String(primes.max()!)\n    return largest.compactMap { Int(String($0)) }.reduce(0, +)\n}\n",
            "func checkDictCase(_ d: [String:String]) -> Bool {\n    if d.isEmpty {\n        return false\n    }\n    var lowerCaseKeys = true\n    var upperCaseKeys = true\n    for key in d.keys {\n        if !key.isLowercased() {\n            lowerCaseKeys = false\n        }\n        if !key.isUppercased() {\n            upperCaseKeys = false\n        }\n    }\n    return lowerCaseKeys || upperCaseKeys\n}\n",
            "func countUpTo(_ n: Int) -> [Int] {\n    var primes = [Int]()\n    for num in 2..<n {\n        var isPrime = true\n        for p in primes {\n            if num % p == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes.append(num)\n        }\n    }\n    return primes\n}\n",
            "func multiply(_ a: Int, _ b: Int) -> Int {\n    var result = 0\n    for i in 0..<abs(a) % 10 {\n        result += abs(b) % 10\n    }\n    return result\n}\n",
            "func countUpper(_ s: String) -> Int {\n    let vowels = \"AEIOU\"\n    var count = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 && vowels.contains(c) {\n            count += 1\n        }\n    }\n    return count\n}\n",
            "func closestInteger(_ value: String) -> Int {\n    let num = Double(value) ?? 0.0\n    return num >= 0.0 ? Int(num + 0.5) : Int(num - 0.5)\n}\n",
            "func makeAPile(_ n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<n {\n        result.append(n + 2 * i)\n    }\n    return result\n}\n",
            "func wordsString(_ s: String) -> [String] {\n    let result = s.split(separator: \",\")\n        .map { String($0) }\n        .filter { !$0.isEmpty }\n    return result\n}\n",
            "func chooseNum(_ x: Int, _ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    if x != y {\n        return y - 1\n    }\n    return -1\n}\n",
            "func roundedAvg(_ n: Int, _ m: Int) -> String? {\n    if n > m {\n        return nil\n    }\n    let rAvg = Int((Double(m + n) / 2.0).rounded(.up))\n    let result = String(rAvg, radix: 2)\n    return result\n}\n",
            "func allDigitsOdd(_ s: String) -> Bool {\n    for digit in s {\n        if Int(String(digit))! % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc uniqueDigits(_ x: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if allDigitsOdd(String(num)) {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n}\n",
            "func byLength(_ arr: [Int]) -> [String] {\n    let digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    let sortedArr = arr.filter({ 1 <= $0 && $0 <= 9 }).sorted(by: >)\n    return sortedArr.map({ digitNames[$0-1] })\n}\n",
            "func f(_ n: Int) -> [Int] {\n    var nums = Array(1...n)\n    var result = [Int]()\n    for i in 0..<nums.count {\n        if i % 2 != 0 {\n            result.append(nums[0...i].reduce(0, +))\n        } else {\n            result.append(nums[0...i].reduce(1, *))\n        }\n    }\n    return result\n}\n",
            "func isPalindrome(_ txt: String) -> Bool {\n    return txt == String(txt.reversed())\n}\nfunc evenOddPalindrome(_ n: Int) -> [Int] {\n    var cnt = [0, 0]\n    for i in 1...n {\n        if isPalindrome(String(i)) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}\n",
            "func digitsSum(_ n: Int) -> Int {\n    let nStr = String(n)\n    if n >= 0 {\n        var sumValue = 0\n        for d in nStr {\n            sumValue += Int(String(d))!\n        }\n        return sumValue\n    } else {\n        return Int(String(nStr.prefix(2)))! * 2 + digitsSum(abs(n))\n    }\n}\nfunc countNums(_ arr: [Int]) -> Int {\n    var countValue = 0\n    for n in arr {\n        if digitsSum(n) > 0 {\n            countValue += 1\n        }\n    }\n    return countValue\n}\n",
            "func moveOneBall(_ arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return true\n    }\n    let sortedArr = arr.sorted()\n    for i in 0..<arr.count {\n        if arr[i..<arr.count] == sortedArr[0..<arr.count - i] && arr[0..<i] == sortedArr[arr.count - i..<arr.count] {\n            return true\n        }\n    }\n    return false\n}\n",
            "func canExchange(_ lst1: [Int], _ lst2: [Int]) -> String {\n    var oddCnt = 0\n    var evenCnt = 0\n    for num in lst1 {\n        if num % 2 != 0 {\n            oddCnt += 1\n        }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n            evenCnt += 1\n        }\n    }\n    return evenCnt >= oddCnt ? \"YES\" : \"NO\"\n}\n",
            "func histogram(_ test: String) -> [String:Int] {\n    var freq = [String:Int]()\n    let words = test.split(separator: \" \").map { String($0) }.filter { !$0.isEmpty }\n    for w in words {\n        freq[w, default: 0] += 1\n    }\n    var result = [String:Int]()\n    if freq.count > 0 {\n        let maxFreq = freq.values.max()!\n        for (k, v) in freq {\n            if v == maxFreq {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "func isPalindrome(_ s: String) -> Bool {\n    return s == String(s.reversed())\n}\nfunc reverseDelete(_ s: String, _ c: String) -> [String] {\n    let s1 = String(s.filter { !c.contains($0) })\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"]\n}\n",
            "func oddCount(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for num in lst {\n        let n = num.filter { Int(String($0))! % 2 == 1 }.count\n        let rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replacingOccurrences(of: \"i\", with: String(n)))\n    }\n    return result\n}\n",
            "func minSubArraySum(_ nums: [Int]) -> Int {\n    var minSum = 0\n    var curSum = 0\n    for n in nums {\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if minSum == 0 {\n        minSum = min(nums) ?? 0\n    }\n    return minSum\n}\n",
            "func maxFill(_ grid: [[Int]], _ capacity: Int) -> Int {\n    var result = 0\n    for arr in grid {\n        let sumArr = arr.reduce(0, +)\n        result += Int(ceil(Double(sumArr) / Double(capacity)))\n    }\n    return result\n}\n",
            "func countOnes(num: Int) -> Int {\n    var count = 0\n    var num = num\n    while num > 0 {\n        if num & 1 == 1 {\n            count += 1\n        }\n        num >>= 1\n    }\n    return count\n}\nfunc sortArray(_ arr: [Int]) -> [Int] {\n    let sortedArr = arr.sorted { countOnes($0) < countOnes($1) }\n    return sortedArr\n}\n",
            "func selectWords(_ s: String, _ n: Int) -> [String] {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let words = s.split(separator: \" \").map { String($0) }.filter { !$0.isEmpty }\n    var result = [String]()\n    for w in words {\n        var count = 0\n        for c in w {\n            if consonants.contains(c.lowercased()) {\n                count += 1\n            }\n        }\n        if count == n {\n            result.append(w)\n        }\n    }\n    return result\n}\n",
            "func getClosestVowel(_ word: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    for i in stride(from: word.count - 2, through: 0, by: -1) {\n        if vowels.contains(word[i]) && !vowels.contains(word[i - 1]) && !vowels.contains(word[i + 1]) {\n            return String(word[i])\n        }\n    }\n    return \"\"\n}\n",
            "func check(_ s: String) -> Bool {\n    var depth = 0\n    for ch in s {\n        if ch == \"(\" {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\nfunc matchParens(_ lst: [String]) -> String {\n    let s1 = lst[0] + lst[1]\n    let s2 = lst[1] + lst[0]\n    if check(s1) || check(s2) {\n        return \"Yes\"\n    }\n    return \"No\"\n}\n",
            "func maximum(_ arr: [Int], _ k: Int) -> [Int] {\n    if k == 0 {\n        return []\n    }\n    var result = arr\n    result.sort()\n    return Array(result.suffix(k))\n}\n",
            "func solution(_ lst: [Int]) -> Int {\n    var sumValue = 0\n    for (i, x) in lst.enumerated() {\n        if i % 2 == 0 && x % 2 != 0 {\n            sumValue += x\n        }\n    }\n    return sumValue\n}\n",
            "func addElements(_ arr: [Int], _ k: Int) -> Int {\n    var sumValue = 0\n    for n in arr[0..<k] {\n        if String(n).count <= 2 {\n            sumValue += n\n        }\n    }\n    return sumValue\n}\n",
            "func getOddCollatz(_ n: Int) -> [Int] {\n    var collatz = [1]\n    while n != 1 {\n        if n % 2 != 0 {\n            collatz.append(n)\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    return collatz.sorted()\n}\n",
            "func validDate(_ date: String) -> Bool {\n    if date.count != 10 || date[date.index(date.startIndex, offsetBy: 2)] != \"-\" || date[date.index(date.startIndex, offsetBy: 5)] != \"-\" {\n        return false\n    }\n    let m = Int(date[..<date.index(date.startIndex, offsetBy: 2)])!\n    let d = Int(date[date.index(date.startIndex, offsetBy: 3)..<date.index(date.startIndex, offsetBy: 5)])!\n    if m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12 {\n        if d >= 1 && d <= 31 {\n            return true\n        }\n    }\n    if m == 4 || m == 6 || m == 9 || m == 11 {\n        if d >= 1 && d <= 30 {\n            return true\n        }\n    }\n    if m == 2 {\n        if d >= 1 && d <= 29 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func splitWords(_ txt: String) -> [String] {\n    if txt.contains(\" \") {\n        return txt.split(separator: \" \").map { String($0) }\n    } else if txt.contains(\",\") {\n        return txt.split(separator: \",\").map { String($0) }\n    } else {\n        return [String(txt.filter { $0.isLowercase && $0.unicodeScalars.first!.value % 2 == 0 }.count)]\n    }\n}\n",
            "func isSorted(_ lst: [Int]) -> Bool {\n    for i in 1..<lst.count {\n        if lst[i-1] > lst[i] {\n            return false\n        }\n    }\n    var freq = [Int: Int]()\n    for i in lst {\n        freq[i] = freq[i, default: 0] + 1\n    }\n    return max(freq.values) <= 2\n}\n",
            "func isPrime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc intersection(_ interval1: [Int], _ interval2: [Int]) -> String {\n    let l = max(interval1[0], interval2[0])\n    let r = min(interval1[1], interval2[1])\n    let length = r - l\n    if length > 0 && isPrime(n: length) {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
            "func prodSigns(_ arr: [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    if arr.contains(0) {\n        return 0\n    }\n    let sign = -1 * (arr.filter { $0 < 0 }.count % 2 == 1 ? 1 : -1)\n    var result = 0\n    for n in arr {\n        result += abs(n)\n    }\n    return sign * result\n}\n",
            "func minPath(_ grid: [[Int]], _ k: Int) -> [Int] {\n    let n = grid.count\n    var minVal = n * n + 1\n    for i in 0..<n {\n        for j in 0..<n {\n            if grid[i][j] == 1 {\n                var temp = [Int]()\n                if i != 0 {\n                    temp.append(grid[i - 1][j])\n                }\n                if j != 0 {\n                    temp.append(grid[i][j - 1])\n                }\n                if i != n - 1 {\n                    temp.append(grid[i + 1][j])\n                }\n                if j != n - 1 {\n                    temp.append(grid[i][j + 1])\n                }\n                minVal = min(temp)\n            }\n        }\n    }\n    var result = [Int]()\n    for i in 0..<k {\n        result.append(1 if i % 2 == 0 else minVal)\n    }\n    return result\n}\n",
            "func tri(_ n: Int) -> [Int] {\n    if n == 0 {\n        return [1]\n    }\n    var seq = [1, 3]\n    for i in 2...n {\n        if i % 2 == 0 {\n            seq.append(i / 2 + 1)\n        } else {\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "func digits(_ n: Int) -> Int {\n    let odds = String(n).compactMap { Int(String($0)) }.filter { $0 % 2 == 1 }\n    var result = 1\n    for d in odds {\n        result *= d\n    }\n    return result == 0 ? 0 : result\n}\n",
            "func isNested(_ s: String) -> Bool {\n    var openIdx = [Int]()\n    var closeIdx = [Int]()\n    for (i, ch) in s.enumerated() {\n        if ch == \"[\" {\n            openIdx.append(i)\n        } else if ch == \"]\" {\n            closeIdx.append(i)\n        }\n    }\n    closeIdx.reverse()\n    var cnt = 0\n    var i = 0\n    let l = closeIdx.count\n    for idx in openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\n",
            "func sumSquares(_ lst: [Double]) -> Int {\n    var result = 0\n    for n in lst {\n        result += Int(pow(ceil(n), 2))\n    }\n    return result\n}\n",
            "func checkIfLastCharIsALetter(_ txt: String) -> Bool {\n    if txt.isEmpty {\n        return false\n    }\n    let last = txt[txt.lastIndex(of: \" \") ?? txt.startIndex ..< txt.endIndex]\n    return last.count == 1 && last[last.startIndex].isLetter\n}\n",
            "func canArrange(_ arr: [Int]) -> Int {\n    if arr.count <= 1 {\n        return -1\n    }\n    var idx = [Int]()\n    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1] {\n            idx.append(i)\n        }\n    }\n    return idx.max() ?? -1\n}\n",
            "func largestSmallestIntegers(_ lst: [Int]) -> [Int?] {\n    var maxNeg = nil as Int?\n    var minPos = nil as Int?\n    for i in lst {\n        if i < 0 {\n            if maxNeg == nil || i > maxNeg! {\n                maxNeg = i\n            }\n        } else if i > 0 {\n            if minPos == nil || i < minPos! {\n                minPos = i\n            }\n        }\n    }\n    return [maxNeg, minPos]\n}\n",
            "func anyToReal(_ o: Any) -> Double {\n    if let s = o as? String {\n        return Double(s.replacingOccurrences(of: \",\", with: \".\")) ?? 0\n    } else if let i = o as? Int {\n        return Double(i)\n    } else if let f = o as? Double {\n        return f\n    }\n    return 0\n}\nfunc compareOne(_ a: Any, _ b: Any) -> Double? {\n    let a1 = anyToReal(a)\n    let b1 = anyToReal(b)\n    if a1 == b1 {\n        return nil\n    } else if a1 > b1 {\n        return a1\n    } else {\n        return b1\n    }\n}\n",
            "func isEqualToSumEven(_ n: Int) -> Bool {\n    return n % 2 == 0 && n >= 8\n}\n",
            "func specialFactorial(_ n: Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        var fact = 1\n        for j in 1...i {\n            fact *= j\n        }\n        result *= fact\n    }\n    return result\n}\n",
            "func fixSpaces(_ txt: String) -> String {\n    return txt.replacingOccurrences(of: \"\\\\s{3,}\", with: \"-\", options: .regularExpression).replacingOccurrences(of: \" \", with: \"_\")\n}\n",
            "func fileNameCheck(_ fileName: String) -> String {\n    let suf = [\"txt\", \"exe\", \"dll\"]\n    let lst = fileName.split(separator: \".\")\n    if lst.count != 2 || !suf.contains(lst[1]) || lst[0].count == 0 || !lst[0].first!.isLetter || lst[0].filter({ $0.isNumber }).count > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "func sumSquares(_ lst: [Int]) -> Int {\n    var result = 0\n    for i in 0..<lst.count {\n        if i % 3 == 0 {\n            result += Int(pow(Double(lst[i]), 2))\n        } else if i % 4 == 0 {\n            result += Int(pow(Double(lst[i]), 3))\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "func isPrime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc wordsInSentence(_ sentence: String) -> String {\n    let words = sentence.split(separator: \" \")\n    var result = [String]()\n    for w in words {\n        if isPrime(n: w.count) {\n            result.append(String(w))\n        }\n    }\n    return result.joined(separator: \" \")\n}\n",
            "func simplify(_ x: String, _ n: String) -> Bool {\n    let xs = x.split(separator: \"/\")\n    let ns = n.split(separator: \"/\")\n    let num = Int(xs[0])! * Int(ns[0])!\n    let den = Int(xs[1])! * Int(ns[1])!\n    return num % den == 0\n}\n",
            "func digitsSum(_ n: Int) -> Int {\n    let nStr = String(n)\n    if n >= 0 {\n        var result = 0\n        for d in nStr {\n            result += Int(String(d))!\n        }\n        return result\n    } else {\n        return Int(String(nStr.prefix(2)))! * 2 + digitsSum(abs(n))\n    }\n}\nfunc orderByPoints(_ nums: [Int]) -> [Int] {\n    var result = nums\n    result.sort { digitsSum($0) < digitsSum($1) }\n    return result\n}\n",
            "func specialFilter(_ nums: [Int]) -> Int {\n    let odds = \"13579\"\n    var count = 0\n    for n in nums {\n        if n > 10 && n % 2 == 1 && odds.contains(String(n)[0]) {\n            count += 1\n        }\n    }\n    return count\n}\n",
            "func getMaxTriples(_ n: Int) -> Int {\n    var c = [0, 0, 0]\n    for i in 1...n {\n        let a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n}\n",
            "func bf(_ planet1: String, _ planet2: String) -> [String] {\n    let names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if !names.contains(planet1) || !names.contains(planet2) {\n        return []\n    }\n    var l = names.firstIndex(of: planet1)!\n    var r = names.firstIndex(of: planet2)!\n    if l > r {\n        l = r\n        r = l\n    }\n    if l == r {\n        return []\n    }\n    return Array(names[l + 1 ..< r])\n}\n",
            "func sortedListSum(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for s in lst {\n        if s.count % 2 == 0 {\n            result.append(s)\n        }\n    }\n    result.sort { (s1, s2) -> Bool in\n        if s1.count == s2.count {\n            return s1 < s2\n        } else {\n            return s1.count < s2.count\n        }\n    }\n    return result\n}\n",
            "func xOrY(_ n: Int, _ x: Int, _ y: Int) -> Int {\n    if n < 2 {\n        return y\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func doubleTheDifference(_ lst: [Double]) -> Int {\n    var result = 0\n    for n in lst {\n        if n >= 0 && n.truncatingRemainder(dividingBy: 2) == 1 {\n            result += Int(n * n)\n        }\n    }\n    return result\n}\n",
            "func compare(_ game: [Int], _ guess: [Int]) -> [Int] {\n    var result = [Int]()\n    for (x, y) in zip(game, guess) {\n        result.append(abs(x - y))\n    }\n    return result\n}\n",
            "func strongestExtension(_ className: String, _ extensions: [String]) -> String {\n    var maxS = -Double.infinity\n    var maxExt = \"\"\n    for ext in extensions {\n        var upper = 0\n        var lower = 0\n        for c in ext {\n            if c.isUppercase {\n                upper += 1\n            } else if c.isLowercase {\n                lower += 1\n            }\n        }\n        let s = Double(upper) - Double(lower)\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return \"\\(className).\\(maxExt)\"\n}\n",
            "func cycpatternCheck(_ a: String, _ b: String) -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    for i in 0..<b.count {\n        if b[b.index(b.startIndex, offsetBy: i)...] + b[..<b.index(b.startIndex, offsetBy: i)] == a {\n            return true\n        }\n    }\n    return false\n}\n",
            "func evenOddCount(_ num: Int) -> [Int] {\n    let ds = String(abs(num))\n    var even = 0\n    for d in ds {\n        if Int(String(d))! % 2 == 0 {\n            even += 1\n        }\n    }\n    return [even, ds.count - even]\n}\n",
            "func intToMiniRoman(_ num: Int) -> String {\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    var res = \"\"\n    for i in 0..<values.count {\n        while num >= values[i] {\n            res += numerals[i]\n            num -= values[i]\n        }\n    }\n    return res\n}\n",
            "func rightAngleTriangle(_ a: Int, _ b: Int, _ c: Int) -> Bool {\n    let s = [a, b, c].sorted()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "func findMax(_ words: [String]) -> String {\n    var maxCnt = 0\n    var maxW = \"\"\n    for w in words {\n        let cnt = Set(w).count\n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        } else if cnt == maxCnt {\n            maxW = min(maxW, w)\n        }\n    }\n    return maxW\n}\n",
            "func eat(_ num: Int, _ need: Int, _ remaining: Int) -> [Int] {\n    if need <= remaining {\n        return [num + need, remaining - need]\n    } else {\n        return [num + remaining, 0]\n    }\n}\n",
            "func doAlgebra(_ operators: [String], _ operands: [Int]) -> Int {\n    var ops = operators.map { $0 }\n    var nums = operands.map { $0 }\n    var i = ops.count - 1\n    while i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = Int(pow(Double(nums[i]), Double(nums[i + 1])))!\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n        }\n        i -= 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "func solve(_ s: String) -> String {\n    var result = [Character]()\n    for ch in s {\n        if !ch.isLetter {\n            result.append(ch)\n        } else if ch.isUppercase {\n            result.append(ch.lowercased())\n        } else if ch.isLowercase {\n            result.append(ch.uppercased())\n        }\n    }\n    if !result.contains(where: { ch in ch.isLetter }) {\n        return String(result.reversed())\n    }\n    return String(result)\n}\n",
            "func stringToMd5(_ txt: String) -> String? {\n    if txt.isEmpty {\n        return nil\n    }\n    let md5_hash = Insecure.MD5.hash(data: txt.data(using: .utf8)!)\n    let md5_encoded = md5_hash.map { String(format: \"%02hhx\", $0) }.joined()\n    return md5_encoded\n}\n",
            "func generateIntegers(_ a: Int, _ b: Int) -> [Int] {\n    let lower = max(2, min(a, b))\n    let upper = min(8, max(a, b))\n    var result = [Int]()\n    for i in lower...upper {\n        if i % 2 == 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n"
        ],
        "typescript": [
            "export const hasCloseElements = (numbers: Array<number>, threshold: number): boolean => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "export const separateParenGroups = (parenString: string): Array<string> => {\n    const groups: Array<string> = [];\n    const stk: Array<string> = [];\n    let currentGroup: string = \"\";\n    const parens: string = parenString.replace(\" \", \"\");\n    for (const ch of parens) {\n        if (ch === \"(\") {\n            stk.push(ch);\n            currentGroup += ch;\n        } else if (ch === \")\") {\n            stk.pop();\n            currentGroup += ch;\n            if (!stk.length) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "export const truncateNumber = (num: number): number => {\n    return num - Math.floor(num);\n}\n",
            "export const belowZero = (operations: Array<number>): boolean => {\n    let balance = 0;\n    for (const op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const meanAbsoluteDeviation = (numbers: Array<number>): number => {\n    const mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    let deviation = 0.0;\n    for (const x of numbers) {\n        deviation += Math.abs(x - mean);\n    }\n    return deviation / numbers.length;\n}\n",
            "export const intersperse = (numbers: Array<number>, delimiter: number): Array<number> => {\n    const result: Array<number> = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i !== 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "export const parseNestedParens = (parenString: string): Array<number> => {\n    const result: Array<number> = [];\n    const parenGroups = parenString.split(\" \");\n    for (const group of parenGroups) {\n        let maxDepth = 0;\n        let depth = 0;\n        for (const ch of group) {\n            if (ch === \"(\") {\n                depth += 1;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch === \")\") {\n                depth -= 1;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}\n",
            "export const filterBySubstring = (strs: Array<string>, substring: string): Array<string> => {\n    const result: Array<string> = [];\n    for (const s of strs) {\n        if (s.includes(substring)) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n",
            "export const sumProduct = (numbers: Array<number>): Array<number> => {\n    let nSum = 0;\n    let nProduct = 1;\n    for (const n of numbers) {\n        nSum += n;\n        nProduct *= n;\n    }\n    return [nSum, nProduct];\n}\n",
            "export const rollingMax = (numbers: Array<number>): Array<number> => {\n    const result: Array<number> = [];\n    let maxSoFar = Number.NEGATIVE_INFINITY;\n    for (const num of numbers) {\n        if (num > maxSoFar) {\n            maxSoFar = num;\n        }\n        result.push(maxSoFar);\n    }\n    return result;\n}\n",
            "export const isPalindrome = (s: string): boolean => {\n    return s === s.split(\"\").reverse().join(\"\");\n}\nexport const makePalindrome = (s: string): string => {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (isPalindrome(s.slice(i))) {\n            return s + s.slice(0, i).split(\"\").reverse().join(\"\");\n        }\n    }\n    return \"\";\n}\n",
            "export const stringXor = (a: string, b: string): string => {\n    let result = \"\";\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n",
            "export const longest = (strs: Array<string>): string | null => {\n    if (!strs.length) {\n        return null;\n    }\n    let longestS = strs[0];\n    for (const s of strs) {\n        if (s.length > longestS.length) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}\n",
            "export const greatestCommonDivisor = (a: number, b: number): number => {\n    while (b !== 0) {\n        [a, b] = [b, a % b];\n    }\n    return a;\n}\n",
            "export const allPrefixes = (s: string): Array<string> => {\n    const prefixes: Array<string> = [];\n    for (let i = 0; i < s.length; i++) {\n        prefixes.push(s.substring(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "export const stringSequence = (n: number): string => {\n    let result = \"\";\n    for (let i = 0; i <= n; i++) {\n        result += `${i} `;\n    }\n    return result.slice(0, -1);\n}\n",
            "export const countDistinctCharacters = (s: string): number => {\n    const distinctCharacters = new Set(s.toLowerCase().split(\"\"));\n    return distinctCharacters.size;\n}\n",
            "export const parseMusic = (musicString: string): Array<number> => {\n    const durations: { [key: string]: number } = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1\n    };\n    const notes = musicString.split(\" \");\n    const result: Array<number> = [];\n    for (const note of notes) {\n        result.push(durations[note]);\n    }\n    return result;\n}\n",
            "export const howManyTimes = (s: string, substring: string): number => {\n    let times = 0;\n    for (let i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.substring(i, i + substring.length) === substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "export const sortNumbers = (numbers: string): string => {\n    const numDict: { [key: string]: number } = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    const numList: Array<string> = numbers.split(\" \").filter(x => x in numDict);\n    numList.sort((a, b) => numDict[a] - numDict[b]);\n    return numList.join(\" \");\n}\n",
            "export const findClosestElements = (numbers: Array<number>): Array<number> => {\n    const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n    let minDiff = Number.POSITIVE_INFINITY;\n    let closestPair: Array<number> = [];\n    for (let i = 1; i < sortedNumbers.length; i++) {\n        const diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "export const rescaleToUnit = (numbers: Array<number>): Array<number> => {\n    let minNum = Number.POSITIVE_INFINITY;\n    let maxNum = Number.NEGATIVE_INFINITY;\n    for (const num of numbers) {\n        if (num < minNum) {\n            minNum = num;\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    if (minNum === maxNum) {\n        return [0.0] * numbers.length;\n    } else {\n        return numbers.map((num) => (num - minNum) / (maxNum - minNum));\n    }\n}\n",
            "export const filterIntegers = (values: Array<any>): Array<number> => {\n    const result: Array<number> = [];\n    for (const x of values) {\n        if (typeof x === \"number\") {\n            result.push(x);\n        }\n    }\n    return result;\n}\n",
            "export const strLength = (s: string): number => {\n    let length = 0;\n    for (const char of s) {\n        length += 1;\n    }\n    return length;\n}\n",
            "export const largestDivisor = (n: number): number => {\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return Math.floor(n / i);\n        }\n    }\n    return 1;\n}\n",
            "export const factorize = (n: number): Array<number> => {\n    let factors: Array<number> = [];\n    let divisor: number = 2;\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n = Math.floor(n / divisor);\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "export const removeDuplicates = (numbers: Array<number>): Array<number> => {\n    const counts: {[key: number]: number} = {};\n    for (const num of numbers) {\n        if (num in counts) {\n            counts[num] += 1;\n        } else {\n            counts[num] = 1;\n        }\n    }\n    const res: Array<number> = numbers.filter((num) => counts[num] === 1);\n    return res;\n}\n",
            "export const flipCase = (s: string): string => {\n    const flipped: string[] = [];\n    for (const ch of s) {\n        if (!ch.match(/[a-zA-Z]/)) {\n            flipped.push(ch);\n        } else if (ch.toLowerCase() === ch) {\n            flipped.push(ch.toUpperCase());\n        } else {\n            flipped.push(ch.toLowerCase());\n        }\n    }\n    return flipped.join(\"\");\n}\n",
            "export const concatenate = (strs: Array<string>): string => {\n    let result = \"\";\n    for (const s of strs) {\n        result += s;\n    }\n    return result;\n}\n",
            "export const filterByPrefix = (strs: Array<string>, prefixStr: string): Array<string> => {\n    return strs.filter((s) => s.startsWith(prefixStr));\n}\n",
            "export const getPositive = (l: Array<number>): Array<number> => {\n    return l.filter(num => num > 0);\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const poly = (xs: Array<number>, x: number): number => {\n    let res = 0.0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n}\nexport const findZero = (xs: Array<number>): number => {\n    let x1 = 1.0;\n    let x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        const mid = (x1 + x2) / 2;\n        if (poly(xs, mid) === 0) {\n            return mid;\n        }\n        else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        }\n        else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "export const sortThird = (l: Array<number>): Array<number> => {\n    const sortedThird = l.filter((_, i) => i % 3 === 0).sort((a, b) => a - b);\n    const result: Array<number> = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            result.push(sortedThird[i / 3]);\n        } else {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n",
            "export const listUnique = (l: Array<number>): Array<number> => {\n    const uniqueList: Array<number> = [];\n    for (const item of l) {\n        if (!uniqueList.includes(item)) {\n            uniqueList.push(item);\n        }\n    }\n    return uniqueList.sort((a, b) => a - b);\n}\n",
            "export const maxElement = (l: Array<number>): number => {\n    let maxValue = Number.NEGATIVE_INFINITY;\n    for (const i of l) {\n        if (i > maxValue) {\n            maxValue = i;\n        }\n    }\n    return maxValue;\n}\n",
            "export const fizzBuzz = (n: number): number => {\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += (i.toString().match(/7/g) || []).length;\n        }\n    }\n    return cnt;\n}\n",
            "export const sortEven = (l: Array<number>): Array<number> => {\n    const sortedEven = l.filter((_, i) => i % 2 === 0).sort((a, b) => a - b);\n    const result: Array<number> = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 2 === 0) {\n            result.push(sortedEven[i / 2]);\n        } else {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n",
            "export const encodeCyclic = (s: string): string => {\n    const result: string[] = [];\n    for (let i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.push(s.substring(i));\n        } else {\n            result.push(s.substring(i + 1, i + 3));\n            result.push(s[i]);\n        }\n    }\n    return result.join(\"\");\n}\nexport const decodeCyclic = (s: string): string => {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const primeFib = (n: number): number => {\n    let f = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\n",
            "export const triplesSumToZero = (l: Array<number>): boolean => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "export const carRaceCollision = (n: number): number => {\n    return n ** 2;\n}\n",
            "export const incrList = (l: Array<number>): Array<number> => {\n    return l.map(i => i + 1);\n}\n",
            "export const pairsSumToZero = (l: Array<number>): boolean => {\n    const seen: Set<number> = new Set();\n    for (const num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "export const changeBase = (x: number, bas: number): string => {\n    if (x === 0) {\n        return \"0\";\n    }\n    let result = \"\";\n    while (x > 0) {\n        result = (x % bas).toString() + result;\n        x = Math.floor(x / bas);\n    }\n    return result;\n}\n",
            "export const triangleArea = (a: number, h: number): number => {\n    return a * h / 2;\n}\n",
            "export const fib4 = (n: number): number => {\n    const fib: Array<number> = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        fib[i % 4] = fib.slice(i - 4, i).reduce((a, b) => a + b);\n    }\n    return fib[n % 4];\n}\n",
            "export const median = (l: Array<number>): number => {\n    const sl = l.slice().sort((a, b) => a - b);\n    if (l.length % 2 !== 0) {\n        return sl[Math.floor(l.length / 2)];\n    } else {\n        return (sl[Math.floor(l.length / 2)] + sl[Math.floor(l.length / 2) - 1]) / 2;\n    }\n}\n",
            "export const isPalindrome = (txt: string): boolean => {\n    for (let i = 0; i < txt.length / 2; i++) {\n        if (txt[i] !== txt[txt.length - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const modp = (n: number, p: number): number => {\n    let ret = 1;\n    for (let _ = 0; _ < n; _++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "export const encodeShift = (s: string): string => {\n    return s.split(\"\").map((ch: string) => String.fromCharCode(((ch.charCodeAt(0) - 97 + 5) % 26) + 97)).join(\"\");\n}\nexport const decodeShift = (s: string): string => {\n    return s.split(\"\").map((ch: string) => String.fromCharCode(((ch.charCodeAt(0) - 97 + 21) % 26) + 97)).join(\"\");\n}\n",
            "export const removeVowels = (txt: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    let result = \"\";\n    for (const char of txt) {\n        if (!vowels.includes(char)) {\n            result += char;\n        }\n    }\n    return result;\n}\n",
            "export const belowThreshold = (l: Array<number>, t: number): boolean => {\n    for (const x of l) {\n        if (x >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const add = (x: number, y: number): number => {\n    return x + y;\n}\n",
            "export const sameChars = (s0: string, s1: string): boolean => {\n    const s0Set = new Set(s0);\n    const s1Set = new Set(s1);\n    return s0Set.size === s1Set.size && [...s0Set].every(c => s1Set.has(c));\n}\n",
            "export const fib = (n: number): number => {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "export const correctBracketing = (brackets: string): boolean => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"<\") {\n            depth += 1;\n        } else if (b === \">\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const monotonic = (l: Array<number>): boolean => {\n    const diff: Array<number> = l.slice(1).map((y, i) => y - l[i]);\n    return diff.every((x) => x <= 0) || diff.every((x) => x >= 0);\n}\n",
            "export const common = (l1: Array<number>, l2: Array<number>): Array<number> => {\n    const result: Array<number> = [];\n    for (const i of l1) {\n        if (l2.includes(i)) {\n            result.push(i);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n",
            "export const largestPrimeFactor = (n: number): number => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i++;\n        } else {\n            n = Math.floor(n / i);\n        }\n    }\n    return n;\n}\n",
            "export const sumToN = (n: number): number => {\n    let result = 0;\n    for (let i = 0; i <= n; i++) {\n        result += i;\n    }\n    return result;\n}\n",
            "export const correctBracketing = (brackets: string): boolean => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"(\") {\n            depth += 1;\n        } else if (b === \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const derivative = (xs: Array<number>): Array<number> => {\n    const result: Array<number> = [];\n    for (let i = 1; i < xs.length; i++) {\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n",
            "export const fibfib = (n: number): number => {\n    if (n <= 1) {\n        return 0;\n    }\n    let a = 0;\n    let b = 0;\n    let c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "export const vowelsCount = (s: string): number => {\n    const vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase()) || (i === s.length - 1 && s[i].toLowerCase() === \"y\")) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n",
            "export const circularShift = (x: number, shift: number): string => {\n    const xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.split(\"\").reverse().join(\"\");\n    } else {\n        return xStr.slice(-shift) + xStr.slice(0, -shift);\n    }\n}\n",
            "export const digitSum = (s: string): number => {\n    let sumValue = 0;\n    for (const c of s) {\n        if (c >= \"A\" && c <= \"Z\") {\n            sumValue += c.charCodeAt(0);\n        }\n    }\n    return sumValue;\n}\n",
            "export const fruitDistribution = (s: string, n: number): number => {\n    const words = s.split(\" \");\n    const apples = parseInt(words[words.indexOf(\"apples\") - 1]);\n    const oranges = parseInt(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "export const pluck = (arr: Array<number>): Array<number> => {\n    const evens = arr.filter(n => n % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n    const minEven = Math.min(...evens);\n    return [minEven, arr.indexOf(minEven)];\n}\n",
            "export const search = (lst: Array<number>): number => {\n    const freqs: { [key: number]: number } = {};\n    for (const n of lst) {\n        if (n in freqs) {\n            freqs[n] += 1;\n        } else {\n            freqs[n] = 1;\n        }\n    }\n    const goodVals: Array<number> = [];\n    for (const [k, v] of Object.entries(freqs)) {\n        if (v >= parseInt(k)) {\n            goodVals.push(parseInt(k));\n        }\n    }\n    if (goodVals.length > 0) {\n        return Math.max(...goodVals);\n    } else {\n        return -1;\n    }\n}\n",
            "export const strangeSortList = (lst: Array<number>): Array<number> => {\n    const sl = lst.slice().sort((a, b) => a - b);\n    const result: Array<number> = [];\n    let left = 0;\n    let right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "export const triangleArea = (a: number, b: number, c: number): number => {\n    const s = (a + b + c) / 2.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "export const willItFly = (q: Array<number>, w: number): boolean => {\n    if (q.length === 0) {\n        return false;\n    }\n    let isPalin = true;\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== q[q.length - i - 1]) {\n            isPalin = false;\n        }\n    }\n    let total = 0;\n    for (let i of q) {\n        total += i;\n    }\n    return isPalin && total <= w;\n}\n",
            "export const smallestChange = (arr: Array<number>): number => {\n    let ans = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i] !== arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "export const totalMatch = (lst1: Array<string>, lst2: Array<string>): Array<string> => {\n    let cnt1 = 0;\n    for (const s of lst1) {\n        cnt1 += s.length;\n    }\n    let cnt2 = 0;\n    for (const s of lst2) {\n        cnt2 += s.length;\n    }\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n",
            "export const isMultiplyPrime = (a: number): boolean => {\n    if (a < 2) {\n        return false;\n    }\n    let cnt = 0;\n    for (let i = 2; i <= Math.floor(Math.sqrt(a)) + 1; i++) {\n        if (a % i === 0) {\n            return false;\n        }\n    }\n    while (a > 1) {\n        if (isPrime(a)) {\n            cnt++;\n        }\n        a = Math.floor(a / 2);\n    }\n    return cnt === 3;\n}\n",
            "export const isSimplePower = (x: number, n: number): boolean => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}\n",
            "export const isCube = (a: number): boolean => {\n    a = Math.abs(a);\n    const root = Math.round(Math.pow(a, 1.0 / 3.0));\n    return root * root * root === a;\n}\n",
            "export const hexKey = (num: string): number => {\n    let count = 0;\n    for (const x of num) {\n        if (\"2357BD\".includes(x)) {\n            count += 1;\n        }\n    }\n    return count;\n}\n",
            "export const decimalToBinary = (dec: number): string => {\n    const binary = dec.toString(2);\n    return `db${binary}db`;\n}\n",
            "export const isHappy = (s: string): boolean => {\n    if (s.length < 3) {\n        return false;\n    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const numericalLetterGrade = (grades: Array<number>): Array<string> => {\n    const result: Array<string> = [];\n    for (const g of grades) {\n        if (g === 4.0) {\n            result.push(\"A+\");\n        } else if (g > 3.7) {\n            result.push(\"A\");\n        } else if (g > 3.3) {\n            result.push(\"A-\");\n        } else if (g > 3.0) {\n            result.push(\"B+\");\n        } else if (g > 2.7) {\n            result.push(\"B\");\n        } else if (g > 2.3) {\n            result.push(\"B-\");\n        } else if (g > 2.0) {\n            result.push(\"C+\");\n        } else if (g > 1.7) {\n            result.push(\"C\");\n        } else if (g > 1.3) {\n            result.push(\"C-\");\n        } else if (g > 1.0) {\n            result.push(\"D+\");\n        } else if (g > 0.7) {\n            result.push(\"D\");\n        } else if (g > 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n",
            "export const primeLength = (s: string): boolean => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(length)) + 1; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const startsOneEnds = (n: number): number => {\n    if (n === 1) {\n        return 1;\n    }\n    let result = 2 * 9 * Math.pow(10, n - 2);\n    return result;\n}\n",
            "export const solve = (n: number): string => {\n    let digitsSum = 0;\n    for (const d of n.toString()) {\n        digitsSum += parseInt(d);\n    }\n    return (digitsSum >>> 0).toString(2);\n}\n",
            "export const add = (lst: Array<number>): number => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1 && lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const antiShuffle = (s: string): string => {\n    const words: string[] = s.split(\" \").map(word => word.split(\"\").sort().join(\"\"));\n    return words.join(\" \");\n}\n",
            "export const getRow = (lst: Array<Array<number>>, x: number): Array<Array<number>> => {\n    const coords: Array<Array<number>> = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    return coords.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n",
            "export const sortArray = (arr: Array<number>): Array<number> => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if (arr[0] + arr[arr.length - 1] % 2 === 0) {\n        return arr.sort((a, b) => b - a);\n    } else {\n        return arr.sort((a, b) => a - b);\n    }\n}\n",
            "export const encrypt = (s: string): string => {\n    let result: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n        let shifted = s.charCodeAt(i) + 4;\n        if (shifted > \"z\".charCodeAt(0)) {\n            shifted -= 26;\n        }\n        result.push(String.fromCharCode(shifted));\n    }\n    return result.join(\"\");\n}\n",
            "export const nextSmallest = (lst: Array<number>): number | null => {\n    const uniqueList = Array.from(new Set(lst));\n    const sortedList = uniqueList.sort((a, b) => a - b);\n    if (sortedList.length < 2) {\n        return null;\n    }\n    return sortedList[1];\n}\n",
            "export const isBored = (s: string): number => {\n    const sentences = s.split(/[.!?]\\s*/);\n    let count = 0;\n    for (const sentence of sentences) {\n        if (sentence.length >= 2 && sentence.startsWith(\"I \")) {\n            count += 1;\n        }\n    }\n    return count;\n}\n",
            "export const anyInt = (x: any, y: any, z: any): boolean => {\n    if (typeof x === \"number\" && typeof y === \"number\" && typeof z === \"number\") {\n        return (x + y === z) || (x + z === y) || (y + z === x);\n    }\n    return false;\n}\n",
            "export const encode = (message: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    const result: string[] = [];\n    for (const ch of message) {\n        if (ch.match(/[a-zA-Z]/)) {\n            const ch1 = ch.toUpperCase() === ch ? ch.toLowerCase() : ch.toUpperCase();\n            if (vowels.includes(ch1)) {\n                result.push(String.fromCharCode(ch1.charCodeAt(0) + 2));\n            } else {\n                result.push(ch1);\n            }\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const skjkasdkd = (lst: Array<number>): number => {\n    const primes: Array<number> = lst.filter(n => isPrime(n));\n    if (primes.length === 0) {\n        return 0;\n    }\n    const largest: string = Math.max(...primes).toString();\n    return largest.split(\"\").reduce((a, b) => a + parseInt(b), 0);\n}\n",
            "export const checkDictCase = (d: Map<string, string>): boolean => {\n    if (!d.size) {\n        return false;\n    }\n    let lowerCaseKeys = true;\n    let upperCaseKeys = true;\n    for (const key of d.keys()) {\n        if (!key.toLowerCase().startsWith(key)) {\n            lowerCaseKeys = false;\n        }\n        if (!key.toUpperCase().startsWith(key)) {\n            upperCaseKeys = false;\n        }\n    }\n    return lowerCaseKeys || upperCaseKeys;\n}\n",
            "export const countUpTo = (n: number): Array<number> => {\n    const primes: Array<number> = [];\n    for (let num = 2; num <= n; num++) {\n        let isPrime = true;\n        for (const p of primes) {\n            if (num % p === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push(num);\n        }\n    }\n    return primes;\n}\n",
            "export const multiply = (a: number, b: number): number => {\n    let result = 0;\n    for (let i = 0; i < Math.abs(a) % 10; i++) {\n        result += Math.abs(b) % 10;\n    }\n    return result;\n}\n",
            "export const countUpper = (s: string): number => {\n    const vowels = \"AEIOU\";\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (i % 2 === 0 && vowels.includes(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "export const closestInteger = (value: string): number => {\n    const num = parseFloat(value);\n    if (num >= 0) {\n        return Math.round(num);\n    } else {\n        return Math.round(num - 0.5);\n    }\n}\n",
            "export const makeAPile = (n: number): Array<number> => {\n    const result: Array<number> = [];\n    for (let i = 0; i < n; i++) {\n        result.push(n + 2 * i);\n    }\n    return result;\n}\n",
            "export const wordsString = (s: string): Array<string> => {\n    const result: Array<string> = [];\n    for (const w of s.split(/[, ]/)) {\n        if (w.length > 0) {\n            result.push(w);\n        }\n    }\n    return result;\n}\n",
            "export const chooseNum = (x: number, y: number): number => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    if (x !== y) {\n        return y - 1;\n    }\n    return -1;\n}\n",
            "export const roundedAvg = (n: number, m: number): string | null => {\n    if (n > m) {\n        return null;\n    }\n    const rAvg = Math.floor((m + n) / 2);\n    const result = rAvg.toString(2);\n    return result;\n}\n",
            "export const allDigitsOdd = (s: string): boolean => {\n    for (const digit of s) {\n        if (digit.charCodeAt(0) % 2 === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const uniqueDigits = (x: Array<number>): Array<number> => {\n    const result: Array<number> = [];\n    for (const num of x) {\n        if (allDigitsOdd(num.toString())) {\n            result.push(num);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n",
            "export const byLength = (arr: Array<number>): Array<string> => {\n    const digitNames: Array<string> = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const sortedArr: Array<number> = arr.filter((x) => x >= 1 && x <= 9).sort((a, b) => b - a);\n    return sortedArr.map((x) => digitNames[x - 1]);\n}\n",
            "export const f = (n: number): Array<number> => {\n    const nums: Array<number> = Array.from({ length: n - 1 }, (_, i) => i + 1);\n    const result: Array<number> = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 !== 0) {\n            result.push(nums.slice(0, i + 1).reduce((a, b) => a + b, 0));\n        } else {\n            result.push(nums.slice(0, i + 1).reduce((a, b) => a * b, 1));\n        }\n    }\n    return result;\n}\n",
            "export const isPalindrome = (txt: string): boolean => {\n    return txt === txt.split(\"\").reverse().join(\"\");\n}\nexport const evenOddPalindrome = (n: number): Array<number> => {\n    const cnt: Array<number> = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const digitsSum = (n: number): number => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        let sumValue = 0;\n        for (const d of nStr) {\n            sumValue += parseInt(d);\n        }\n        return sumValue;\n    } else {\n        return parseInt(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n    }\n}\nexport const countNums = (arr: Array<number>): number => {\n    let countValue = 0;\n    for (const n of arr) {\n        if (digitsSum(n) > 0) {\n            countValue += 1;\n        }\n    }\n    return countValue;\n}\n",
            "export const moveOneBall = (arr: Array<number>): boolean => {\n    if (arr.length === 0) {\n        return true;\n    }\n    const sortedArr = arr.slice().sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.slice(i).join() === sortedArr.slice(0, arr.length - i).join() && arr.slice(0, i).join() === sortedArr.slice(arr.length - i).join()) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const canExchange = (lst1: Array<number>, lst2: Array<number>): string => {\n    let oddCnt = 0;\n    let evenCnt = 0;\n    for (const num of lst1) {\n        if (num % 2 !== 0) {\n            oddCnt += 1;\n        }\n    }\n    for (const num of lst2) {\n        if (num % 2 === 0) {\n            evenCnt += 1;\n        }\n    }\n    return oddCnt >= evenCnt ? \"YES\" : \"NO\";\n}\n",
            "export const histogram = (test: string): Map<string, number> => {\n    const freq: { [key: string]: number } = {};\n    const words: Array<string> = test.split(\" \").filter((w: string) => w.length > 0);\n    for (const w of words) {\n        freq[w] = freq[w] ? freq[w] + 1 : 1;\n    }\n    const result: Map<string, number> = new Map();\n    if (Object.keys(freq).length > 0) {\n        const maxFreq = Math.max(...Object.values(freq));\n        for (const k of Object.keys(freq)) {\n            if (freq[k] === maxFreq) {\n                result.set(k, freq[k]);\n            }\n        }\n    }\n    return result;\n}\n",
            "export const isPalindrome = (s: string): boolean => {\n    return s === s.split(\"\").reverse().join(\"\");\n}\nexport const reverseDelete = (s: string, c: string): Array<string> => {\n    const s1 = s.replace(new RegExp(`[${c}]`, \"g\"), \"\");\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"];\n}\n",
            "export const oddCount = (lst: Array<string>): Array<string> => {\n    const result: Array<string> = [];\n    for (const num of lst) {\n        const n = [...num].reduce((acc, d) => acc + (d.charCodeAt(0) % 2 === 1 ? 1 : 0), 0);\n        const rs = \"the number of odd elements in the string i of the input.\".replace(\"i\", String(n));\n        result.push(rs);\n    }\n    return result;\n}\n",
            "export const minSubArraySum = (nums: Array<number>): number => {\n    let minSum = 0;\n    let curSum = 0;\n    for (const n of nums) {\n        curSum = Math.min(curSum + n, 0);\n        minSum = Math.min(curSum, minSum);\n    }\n    if (minSum === 0) {\n        minSum = Math.min(...nums);\n    }\n    return minSum;\n}\n",
            "export const maxFill = (grid: Array<Array<number>>, capacity: number): number => {\n    let result = 0;\n    for (const arr of grid) {\n        const sumArr = arr.reduce((a, b) => a + b);\n        result += Math.ceil(sumArr / capacity);\n    }\n    return result;\n}\n",
            "export const countOnes = (num: number): number => {\n    let count = 0;\n    while (num > 0) {\n        if (num & 1 === 1) {\n            count += 1;\n        }\n        num >>= 1;\n    }\n    return count;\n}\nexport const sortArray = (arr: Array<number>): Array<number> => {\n    const sortedArr = arr.sort((a, b) => countOnes(a) - countOnes(b) || a - b);\n    return sortedArr;\n}\n",
            "export const selectWords = (s: string, n: number): Array<string> => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = s.split(\" \").filter(w => w.length > 0);\n    const result: Array<string> = [];\n    for (const w of words) {\n        let count = 0;\n        for (const c of w) {\n            if (consonants.includes(c.toLowerCase())) {\n                count += 1;\n            }\n        }\n        if (count === n) {\n            result.push(w);\n        }\n    }\n    return result;\n}\n",
            "export const getClosestVowel = (word: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "export const check = (s: string): boolean => {\n    let depth = 0;\n    for (const ch of s) {\n        if (ch === \"(\") {\n            depth += 1;\n        }\n        else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\nexport const matchParens = (lst: Array<string>): string => {\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    if (check(s1) || check(s2)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n",
            "export const maximum = (arr: Array<number>, k: number): Array<number> => {\n    if (k === 0) {\n        return [];\n    }\n    const result: Array<number> = [];\n    for (let i = 0; i < arr.length; i++) {\n        result.push(arr[i]);\n    }\n    result.sort((a, b) => b - a);\n    return result.slice(-k);\n}\n",
            "export const solution = (lst: Array<number>): number => {\n    let sumValue = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sumValue += lst[i];\n        }\n    }\n    return sumValue;\n}\n",
            "export const addElements = (arr: Array<number>, k: number): number => {\n    let sumValue = 0;\n    for (let i = 0; i < k; i++) {\n        const n = arr[i];\n        if (String(n).length <= 2) {\n            sumValue += n;\n        }\n    }\n    return sumValue;\n}\n",
            "export const getOddCollatz = (n: number): Array<number> => {\n    let collatz: Array<number> = [1];\n    while (n !== 1) {\n        if (n % 2 !== 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = Math.floor(n / 2);\n        }\n    }\n    return collatz.sort((a, b) => a - b);\n}\n",
            "export const validDate = (date: string): boolean => {\n    if (date.length !== 10 || date[2] !== \"-\" || date[5] !== \"-\") {\n        return false;\n    }\n    const m = parseInt(date.substring(0, 2));\n    const d = parseInt(date.substring(3, 5));\n    if (m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31) {\n        return true;\n    }\n    if (m in [4, 6, 9, 11] && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m === 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "export const splitWords = (txt: string): Array<string> => {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [String(txt.split(\"\").filter((c: string) => c.toLowerCase() === c && c.charCodeAt(0) % 2 === 0).length)];\n    }\n}\n",
            "export const isSorted = (lst: Array<number>): boolean => {\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n    const freq: { [key: number]: number } = {};\n    for (const i of lst) {\n        freq[i] = freq[i] ? freq[i] + 1 : 1;\n    }\n    return Math.max(...Object.values(freq)) <= 2;\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const intersection = (interval1: Array<number>, interval2: Array<number>): string => {\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n    if (length > 0 && isPrime(length)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n",
            "export const prodSigns = (arr: Array<number>): number | null => {\n    if (!arr.length) {\n        return null;\n    }\n    if (arr.includes(0)) {\n        return 0;\n    }\n    const sign = arr.filter(n => n < 0).length % 2 === 1 ? -1 : 1;\n    let result = 0;\n    for (const n of arr) {\n        result += Math.abs(n);\n    }\n    return sign * result;\n}\n",
            "export const minPath = (grid: Array<Array<number>>, k: number): Array<number> => {\n    const n = grid.length;\n    let minVal = n * n + 1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                let temp: Array<number> = [];\n                if (i !== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j !== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i !== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j !== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                minVal = Math.min(...temp);\n            }\n        }\n    }\n    const result: Array<number> = [];\n    for (let i = 0; i < k; i++) {\n        result.push(1 if i % 2 == 0 else minVal);\n    }\n    return result;\n}\n",
            "export const tri = (n: number): Array<number> => {\n    if (n === 0) {\n        return [1];\n    }\n    let seq = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(Math.floor(i / 2) + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + Math.floor((i + 3) / 2));\n        }\n    }\n    return seq;\n}\n",
            "export const digits = (n: number): number => {\n    const odds: Array<number> = [...String(n)].map(d => parseInt(d)).filter(d => d % 2 === 1);\n    let result = 1;\n    for (const d of odds) {\n        result *= d;\n    }\n    return result > 0 ? result : 0;\n}\n",
            "export const isNested = (s: string): boolean => {\n    const openIdx: Array<number> = [];\n    const closeIdx: Array<number> = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === \"[\") {\n            openIdx.push(i);\n        } else if (s[i] === \"]\") {\n            closeIdx.push(i);\n        }\n    }\n    closeIdx.reverse();\n    let cnt = 0;\n    let i = 0;\n    const l = closeIdx.length;\n    for (const idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "export const sumSquares = (lst: Array<number>): number => {\n    let result = 0;\n    for (const n of lst) {\n        result += Math.pow(Math.ceil(n), 2);\n    }\n    return result;\n}\n",
            "export const checkIfLastCharIsALetter = (txt: string): boolean => {\n    if (!txt) {\n        return false;\n    }\n    const last = txt.substring(txt.lastIndexOf(\" \") + 1);\n    return last.length === 1 && last[0].isAlpha();\n}\n",
            "export const canArrange = (arr: Array<number>): number => {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    const idx: Array<number> = [];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            idx.push(i);\n        }\n    }\n    return Math.max(...idx, -1);\n}\n",
            "export const largestSmallestIntegers = (lst: Array<number>): Array<number | null> => {\n    let maxNeg: number | null = null;\n    let minPos: number | null = null;\n    for (const i of lst) {\n        if (i < 0) {\n            if (maxNeg === null || i > maxNeg) {\n                maxNeg = i;\n            }\n        } else if (i > 0) {\n            if (minPos === null || i < minPos) {\n                minPos = i;\n            }\n        }\n    }\n    return [maxNeg, minPos];\n}\n",
            "export const anyToReal = (o: any): number => {\n    if (typeof o === \"string\") {\n        return parseFloat(o.replace(\",\", \".\"));\n    } else if (typeof o === \"number\") {\n        return o;\n    } else {\n        throw new Error(\"Type Error\");\n    }\n}\nexport const compareOne = (a: any, b: any): number | null => {\n    const a1 = anyToReal(a);\n    const b1 = anyToReal(b);\n    if (a1 === b1) {\n        return null;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n}\n",
            "export const isEqualToSumEven = (n: number): boolean => {\n    return n % 2 === 0 && n >= 8;\n}\n",
            "export const specialFactorial = (n: number): number => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        let fact = 1;\n        for (let j = 1; j <= i; j++) {\n            fact *= j;\n        }\n        result *= fact;\n    }\n    return result;\n}\n",
            "export const fixSpaces = (txt: string): string => {\n    return txt.replace(/\\s{3,}/g, \"-\").replace(\" \", \"_\");\n}\n",
            "export const fileNameCheck = (fileName: string): string => {\n    const suf = [\"txt\", \"exe\", \"dll\"];\n    const lst = fileName.split(\".\");\n    if (lst.length !== 2 || !suf.includes(lst[1]) || lst[0].length === 0 || !lst[0][0].match(/[a-zA-Z]/) || lst[0].match(/[0-9]/g)?.length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "export const sumSquares = (lst: Array<number>): number => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0) {\n            result += Math.pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const wordsInSentence = (sentence: string): string => {\n    const words = sentence.split(\" \");\n    const result: string[] = [];\n    for (const w of words) {\n        if (isPrime(w.length)) {\n            result.push(w);\n        }\n    }\n    return result.join(\" \");\n}\n",
            "export const simplify = (x: string, n: string): boolean => {\n    const xs = x.split(\"/\");\n    const ns = n.split(\"/\");\n    const num = parseInt(xs[0]) * parseInt(ns[0]);\n    const den = parseInt(xs[1]) * parseInt(ns[1]);\n    return num % den === 0;\n}\n",
            "export const digitsSum = (n: number): number => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        let result = 0;\n        for (const d of nStr) {\n            result += parseInt(d);\n        }\n        return result;\n    } else {\n        return parseInt(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n    }\n}\nexport const orderByPoints = (nums: Array<number>): Array<number> => {\n    const result: Array<number> = [];\n    for (const num of nums) {\n        result.push(num);\n    }\n    result.sort((a, b) => digitsSum(a) - digitsSum(b));\n    return result;\n}\n",
            "export const specialFilter = (nums: Array<number>): number => {\n    const odds = \"13579\";\n    let count = 0;\n    for (const n of nums) {\n        if (n > 10 && n % 2 === 1 && odds.includes(n.toString()[0])) {\n            count += 1;\n        }\n    }\n    return count;\n}\n",
            "export const getMaxTriples = (n: number): number => {\n    const c: Array<number> = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        const a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}\n",
            "export const bf = (planet1: string, planet2: string): Array<string> => {\n    const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.includes(planet1) || !names.includes(planet2)) {\n        return [];\n    }\n    let l = names.indexOf(planet1);\n    let r = names.indexOf(planet2);\n    if (l > r) {\n        [l, r] = [r, l];\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n}\n",
            "export const sortedListSum = (lst: Array<string>): Array<string> => {\n    const result: Array<string> = [];\n    for (const s of lst) {\n        if (s.length % 2 === 0) {\n            result.push(s);\n        }\n    }\n    result.sort((a, b) => a.length === b.length ? a.localeCompare(b) : a.length - b.length);\n    return result;\n}\n",
            "export const xOrY = (n: number, x: number, y: number): number => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "export const doubleTheDifference = (lst: Array<number>): number => {\n    let result = 0;\n    for (const n of lst) {\n        if (n >= 0 && n % 2 === 1) {\n            result += n * n;\n        }\n    }\n    return result;\n}\n",
            "export const compare = (game: Array<number>, guess: Array<number>): Array<number> => {\n    const result: Array<number> = [];\n    for (let i = 0; i < game.length; i++) {\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}\n",
            "export const strongestExtension = (className: string, extensions: Array<string>): string => {\n    let maxS = -Infinity;\n    let maxExt = \"\";\n    for (const ext of extensions) {\n        let upper = 0;\n        let lower = 0;\n        for (const c of ext) {\n            if (c.toUpperCase() === c) {\n                upper += 1;\n            } else {\n                lower += 1;\n            }\n        }\n        const s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return `${className}.${maxExt}`;\n}\n",
            "export const cycpatternCheck = (a: string, b: string): boolean => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; i++) {\n        if (b.slice(i) + b.slice(0, i) === a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const evenOddCount = (num: number): Array<number> => {\n    const ds = Math.abs(num).toString();\n    let even = 0;\n    for (const d of ds) {\n        if (d.charCodeAt(0) % 2 === 0) {\n            even += 1;\n        }\n    }\n    return [even, ds.length - even];\n}\n",
            "export const intToMiniRoman = (num: number): string => {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    const res: string[] = [];\n    for (let i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.push(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join(\"\");\n}\n",
            "export const rightAngleTriangle = (a: number, b: number, c: number): boolean => {\n    const s = [a, b, c].sort((a, b) => a - b);\n    return s[0] * s[0] + s[1] * s[1] === s[2] * s[2];\n}\n",
            "export const findMax = (words: Array<string>): string => {\n    let maxCnt = 0;\n    let maxW = \"\";\n    for (const w of words) {\n        const cnt = new Set(w).size;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt === maxCnt) {\n            maxW = Math.min(maxW, w);\n        }\n    }\n    return maxW;\n}\n",
            "export const eat = (num: number, need: number, remaining: number): Array<number> => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "export const doAlgebra = (operators: Array<string>, operands: Array<number>): number => {\n    let ops = [...operators];\n    let nums = [...operands];\n    let i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] === \"**\") {\n            nums[i] = Math.pow(nums[i], nums[i + 1]);\n            nums.pop();\n            ops.pop();\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.pop();\n            ops.pop();\n            i -= 1;\n        }\n        else if (ops[i] === \"//\") {\n            nums[i] = Math.floor(nums[i] / nums[i + 1]);\n            nums.pop();\n            ops.pop();\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.pop();\n            ops.pop();\n            i -= 1;\n        }\n        else if (ops[i] === \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.pop();\n            ops.pop();\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "export const solve = (s: string): string => {\n    let result: string[] = [];\n    for (let ch of s) {\n        if (!ch.match(/[a-zA-Z]/)) {\n            result.push(ch);\n        } else if (ch.toUpperCase() === ch) {\n            result.push(ch.toLowerCase());\n        } else {\n            result.push(ch.toUpperCase());\n        }\n    }\n    if (!result.some(ch => ch.match(/[a-zA-Z]/))) {\n        return result.reverse().join(\"\");\n    }\n    return result.join(\"\");\n}\n",
            "export const stringToMd5 = (txt: string): string | null => {\n    if (!txt) {\n        return null;\n    }\n    const md5Hash = crypto.createHash(\"md5\");\n    const txtBytes = Buffer.from(txt);\n    md5Hash.update(txtBytes);\n    const md5Encoded = md5Hash.digest(\"hex\");\n    return md5Encoded;\n}\n",
            "export const generateIntegers = (a: number, b: number): Array<number> => {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n    const result: Array<number> = [];\n    for (let i = lower; i <= upper; i++) {\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n"
        ]
    }
}