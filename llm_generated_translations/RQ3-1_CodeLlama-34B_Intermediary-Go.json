{
    "python": {
        "cpp": [
            "bool hasCloseElements(const vector<double>& numbers, double threshold) {\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "vector<string> separateParenGroups(const string& paren_string) {\n    vector<string> groups;\n    string current_group;\n    string parens = paren_string;\n    parens.erase(remove(parens.begin(), parens.end(), ' '), parens.end());\n    for (char ch : parens) {\n        if (ch == '(') {\n            current_group += ch;\n        } else if (ch == ')') {\n            current_group += ch;\n            if (current_group.size() == 2) {\n                groups.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - floor(num);\n}\n",
            "bool belowZero(const vector<int>& operations) {\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(const vector<double>& numbers) {\n    double mean = 0.0;\n    for (double n : numbers) {\n        mean += n;\n    }\n    mean /= numbers.size();\n    double deviation = 0.0;\n    for (double n : numbers) {\n        deviation += abs(n - mean);\n    }\n    return deviation / numbers.size();\n}\n",
            "vector<int> intersperse(const vector<int>& numbers, int delimiter) {\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (i != 0) {\n            result.push_back(delimiter);\n        }\n        result.push_back(numbers[i]);\n    }\n    return result;\n}\n",
            "vector<int> parseNestedParens(const string& paren_string) {\n    vector<int> result;\n    vector<string> paren_groups = split(paren_string, \" \");\n    for (string group : paren_groups) {\n        int max_depth = 0;\n        int depth = 0;\n        for (char ch : group) {\n            if (ch == '(') {\n                depth += 1;\n                max_depth = max(max_depth, depth);\n            } else if (ch == ')') {\n                depth -= 1;\n            }\n        }\n        result.push_back(max_depth);\n    }\n    return result;\n}\n",
            "vector<string> filterBySubstring(const vector<string>& strs, const string& substring) {\n    vector<string> result;\n    for (string s : strs) {\n        if (s.find(substring) != string::npos) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n",
            "vector<int> sumProduct(const vector<int>& numbers) {\n    int nSum = 0;\n    for (int n : numbers) {\n        nSum += n;\n    }\n    int nProduct = 1;\n    for (int n : numbers) {\n        nProduct *= n;\n    }\n    return {nSum, nProduct};\n}\n",
            "vector<int> rollingMax(const vector<int>& numbers) {\n    int max_so_far = numeric_limits<int>::min();\n    vector<int> result;\n    for (int num : numbers) {\n        max_so_far = max(max_so_far, num);\n        result.push_back(max_so_far);\n    }\n    return result;\n}\n",
            "bool isPalindrome(const string& s) {\n    return s == reverse(s);\n}\nstring makePalindrome(const string& s) {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (int i = 0; i < s.size(); i++) {\n        if (isPalindrome(s.substr(i))) {\n            return s + reverse(s.substr(0, i));\n        }\n    }\n    return \"\";\n}\nstring reverse(const string& s) {\n    string result;\n    for (int i = s.size() - 1; i >= 0; i--) {\n        result += s[i];\n    }\n    return result;\n}\n",
            "string stringXor(const string& a, const string& b) {\n    string result;\n    for (int i = 0; i < a.size(); i++) {\n        result += a[i] == b[i] ? '0' : '1';\n    }\n    return result;\n}\n",
            "optional<string> longest(const vector<string>& strs) {\n    if (strs.empty()) {\n        return nullopt;\n    }\n    string longestS = strs[0];\n    for (const string& s : strs) {\n        if (s.size() > longestS.size()) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    }\n    return greatestCommonDivisor(b, a % b);\n}\n",
            "vector<string> allPrefixes(const string& s) {\n    vector<string> prefixes;\n    for (int i = 0; i < s.size(); i++) {\n        prefixes.push_back(s.substr(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "string stringSequence(int n) {\n    stringstream ss;\n    for (int i = 0; i <= n; i++) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\n",
            "int countDistinctCharacters(const string& s) {\n    set<char> distinct_chars;\n    for (char c : s) {\n        distinct_chars.insert(tolower(c));\n    }\n    return distinct_chars.size();\n}\n",
            "vector<int> parseMusic(const string& music_string) {\n    unordered_map<string, int> durations = {\n        {\"o\", 4}, {\"o|\", 2}, {\".|\", 1}\n    };\n    vector<string> notes;\n    string note;\n    for (char c : music_string) {\n        if (c == ' ') {\n            notes.push_back(note);\n            note = \"\";\n        } else {\n            note += c;\n        }\n    }\n    notes.push_back(note);\n    vector<int> result;\n    for (string n : notes) {\n        result.push_back(durations[n]);\n    }\n    return result;\n}\n",
            "int howManyTimes(const string& s, const string& substring) {\n    int times = 0;\n    for (int i = 0; i < s.size() - substring.size() + 1; i++) {\n        if (s.substr(i, substring.size()) == substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "string sortNumbers(const string& numbers) {\n    unordered_map<string, int> num_dict = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9},\n    };\n    vector<string> num_list;\n    for (string e : split(numbers, \" \")) {\n        if (num_dict.find(e) != num_dict.end()) {\n            num_list.push_back(e);\n        }\n    }\n    sort(num_list.begin(), num_list.end(), [&](string a, string b) {\n        return num_dict[a] < num_dict[b];\n    });\n    return join(num_list, \" \");\n}\n",
            "vector<double> findClosestElements(const vector<double>& numbers) {\n    vector<double> sortedNumbers(numbers);\n    sort(sortedNumbers.begin(), sortedNumbers.end());\n    double minDiff = numeric_limits<double>::infinity();\n    vector<double> closestPair;\n    for (int i = 1; i < sortedNumbers.size(); i++) {\n        double diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = {sortedNumbers[i - 1], sortedNumbers[i]};\n        }\n    }\n    return closestPair;\n}\n",
            "vector<double> rescaleToUnit(const vector<double>& numbers) {\n    double min_num = numeric_limits<double>::max();\n    double max_num = -numeric_limits<double>::max();\n    for (double num : numbers) {\n        if (num < min_num) {\n            min_num = num;\n        }\n        if (num > max_num) {\n            max_num = num;\n        }\n    }\n    if (min_num == max_num) {\n        return vector<double>(numbers.size());\n    }\n    vector<double> result;\n    for (double num : numbers) {\n        result.push_back((num - min_num) / (max_num - min_num));\n    }\n    return result;\n}\n",
            "vector<int> filterIntegers(const vector<any>& values) {\n    vector<int> result;\n    for (any x : values) {\n        if (x.type() == typeid(int)) {\n            result.push_back(any_cast<int>(x));\n        }\n    }\n    return result;\n}\n",
            "int strLength(const string& s) {\n    return s.length();\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "vector<int> factorize(int n) {\n    vector<int> factors;\n    int divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.push_back(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "vector<int> removeDuplicates(const vector<int>& numbers) {\n    unordered_map<int, int> counts;\n    for (int num : numbers) {\n        counts[num]++;\n    }\n    vector<int> res;\n    for (int num : numbers) {\n        if (counts[num] == 1) {\n            res.push_back(num);\n        }\n    }\n    return res;\n}\n",
            "string flipCase(const string& s) {\n    vector<char> flipped;\n    for (char ch : s) {\n        if (!isalpha(ch)) {\n            flipped.push_back(ch);\n        } else if (islower(ch)) {\n            flipped.push_back(toupper(ch));\n        } else if (isupper(ch)) {\n            flipped.push_back(tolower(ch));\n        }\n    }\n    return string(flipped.begin(), flipped.end());\n}\n",
            "string concatenate(const vector<string>& strs) {\n    string result;\n    for (string s : strs) {\n        result += s;\n    }\n    return result;\n}\n",
            "vector<string> filterByPrefix(const vector<string>& strs, const string& prefix_str) {\n    vector<string> result;\n    for (string s : strs) {\n        if (s.find(prefix_str) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n",
            "vector<int> getPositive(const vector<int>& l) {\n    vector<int> result;\n    for (int num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "double poly(const vector<int>& xs, double x) {\n    double res = 0;\n    for (int i = 0; i < xs.size(); i++) {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\ndouble findZero(const vector<int>& xs) {\n    double x1 = 1, x2 = -1;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "vector<int> sortThird(const vector<int>& l) {\n    vector<int> sortedThird;\n    for (int i = 0; i < l.size(); i += 3) {\n        sortedThird.push_back(l[i]);\n    }\n    sort(sortedThird.begin(), sortedThird.end());\n    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            result.push_back(sortedThird[i / 3]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n",
            "vector<int> listUnique(const vector<int>& l) {\n    unordered_map<int, bool> m;\n    for (int e : l) {\n        m[e] = true;\n    }\n    vector<int> result;\n    for (auto it = m.begin(); it != m.end(); ++it) {\n        result.push_back(it->first);\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n",
            "int maxElement(const vector<int>& l) {\n    if (l.empty()) {\n        return 0;\n    }\n    int max = l[0];\n    for (int e : l) {\n        if (e > max) {\n            max = e;\n        }\n    }\n    return max;\n}\n",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += count(to_string(i).begin(), to_string(i).end(), '7');\n        }\n    }\n    return cnt;\n}\n",
            "vector<int> sortEven(const vector<int>& l) {\n    vector<int> sortedEven;\n    for (int i = 0; i < l.size(); i += 2) {\n        sortedEven.push_back(l[i]);\n    }\n    sort(sortedEven.begin(), sortedEven.end());\n    vector<int> result(l.size());\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            result[i] = sortedEven[i / 2];\n        } else {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}\n",
            "string encodeCyclic(const string& s) {\n    vector<string> result;\n    for (int i = 0; i < s.size(); i += 3) {\n        if (i + 3 > s.size()) {\n            result.push_back(s.substr(i));\n        } else {\n            result.push_back(s.substr(i + 1, 2));\n            result.push_back(s.substr(i, 1));\n        }\n    }\n    string ret;\n    for (string e : result) {\n        ret += e;\n    }\n    return ret;\n}\nstring decodeCyclic(const string& s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint primeFib(int n) {\n    vector<int> f = {0, 1};\n    int cnt = 0;\n    while (cnt < n) {\n        f = {f[1], f[0] + f[1]};\n        if (isPrime(f[1])) {\n            cnt++;\n        }\n    }\n    return f[1];\n}\n",
            "bool triplesSumToZero(const vector<int>& l) {\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return n * n;\n}\n",
            "vector<int> incrList(const vector<int>& l) {\n    vector<int> result(l.size());\n    for (int i = 0; i < l.size(); i++) {\n        result[i] = l[i] + 1;\n    }\n    return result;\n}\n",
            "bool pairsSumToZero(const vector<int>& l) {\n    unordered_map<int, bool> seen;\n    for (int num : l) {\n        if (seen[-num]) {\n            return true;\n        }\n        seen[num] = true;\n    }\n    return false;\n}\n",
            "string changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    vector<string> digits;\n    while (x > 0) {\n        digits.push_back(to_string(x % bas));\n        x /= bas;\n    }\n    string result;\n    for (int i = digits.size() - 1; i >= 0; i--) {\n        result += digits[i];\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int h) {\n    return double(a) * double(h) / 2;\n}\n",
            "int fib4(int n) {\n    int fib[4] = {0, 0, 2, 0};\n    for (int i = 4; i <= n; i++) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n    }\n    return fib[n % 4];\n}\n",
            "double median(const vector<double>& l) {\n    vector<double> sl(l);\n    sort(sl.begin(), sl.end());\n    if (sl.size() % 2 != 0) {\n        return sl[sl.size() / 2];\n    }\n    return (sl[sl.size() / 2] + sl[sl.size() / 2 - 1]) / 2;\n}\n",
            "bool isPalindrome(const string& txt) {\n    string reversed = txt;\n    reverse(reversed.begin(), reversed.end());\n    return txt == reversed;\n}\n",
            "int modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "string encodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        result += (((ch - 'a' + 5) % 26) + 'a');\n    }\n    return result;\n}\nstring decodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        result += (((ch - 'a' + 21) % 26) + 'a');\n    }\n    return result;\n}\n",
            "string removeVowels(const string& txt) {\n    unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    string result;\n    for (char c : txt) {\n        if (vowels.find(c) == vowels.end()) {\n            result += c;\n        }\n    }\n    return result;\n}\n",
            "bool belowThreshold(const vector<int>& l, int t) {\n    for (int x : l) {\n        if (x >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(const string& s0, const string& s1) {\n    unordered_set<char> s0_set;\n    for (char c : s0) {\n        s0_set.insert(c);\n    }\n    unordered_set<char> s1_set;\n    for (char c : s1) {\n        s1_set.insert(c);\n    }\n    return s0_set == s1_set;\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n",
            "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '<') {\n            depth += 1;\n        } else if (b == '>') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(const vector<int>& l) {\n    vector<int> diff;\n    for (int i = 0; i < l.size() - 1; i++) {\n        diff.push_back(l[i + 1] - l[i]);\n    }\n    bool all_non_positive = true;\n    bool all_non_negative = true;\n    for (int x : diff) {\n        if (x > 0) {\n            all_non_positive = false;\n        }\n        if (x < 0) {\n            all_non_negative = false;\n        }\n    }\n    return all_non_positive || all_non_negative;\n}\n",
            "vector<int> common(const vector<int>& l1, const vector<int>& l2) {\n    set<int> s1(l1.begin(), l1.end());\n    set<int> s2(l2.begin(), l2.end());\n    vector<int> result;\n    set_intersection(s1.begin(), s1.end(), s2.begin(), s2.end(), back_inserter(result));\n    return result;\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    int result = 0;\n    for (int i = 0; i <= n; i++) {\n        result += i;\n    }\n    return result;\n}\n",
            "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '(') {\n            depth += 1;\n        } else if (b == ')') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "vector<int> derivative(const vector<int>& xs) {\n    vector<int> result;\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(const string& s) {\n    string vowels = \"aeiou\";\n    int cnt = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (vowels.find(tolower(s[i])) {\n            cnt++;\n        } else if (i == s.size() - 1 && tolower(s[i]) == 'y') {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n",
            "string circularShift(int x, int shift) {\n    string x_str = to_string(x);\n    if (shift > x_str.size()) {\n        return string(x_str.rbegin(), x_str.rend());\n    } else {\n        return x_str.substr(x_str.size() - shift) + x_str.substr(0, x_str.size() - shift);\n    }\n}\n",
            "int digitSum(const string& s) {\n    int result = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            result += c;\n        }\n    }\n    return result;\n}\n",
            "int fruitDistribution(const string& s, int n) {\n    vector<string> words = split(s, ' ');\n    int apples = stoi(words[find(words.begin(), words.end(), \"apples\") - 1]);\n    int oranges = stoi(words[find(words.begin(), words.end(), \"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "vector<int> pluck(const vector<int>& arr) {\n    vector<int> evens;\n    for (int n : arr) {\n        if (n % 2 == 0) {\n            evens.push_back(n);\n        }\n    }\n    if (evens.empty()) {\n        return vector<int>();\n    }\n    int minEven = evens[0];\n    for (int n : evens) {\n        if (n < minEven) {\n            minEven = n;\n        }\n    }\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == minEven) {\n            return vector<int>{minEven, i};\n        }\n    }\n    return vector<int>();\n}\n",
            "int search(const vector<int>& lst) {\n    unordered_map<int, int> freqs;\n    for (int n : lst) {\n        freqs[n] = freqs[n] + 1;\n    }\n    vector<int> goodVals;\n    for (auto [k, v] : freqs) {\n        if (v >= k) {\n            goodVals.push_back(k);\n        }\n    }\n    if (goodVals.empty()) {\n        return -1;\n    }\n    int maxVal = goodVals[0];\n    for (int v : goodVals) {\n        if (v > maxVal) {\n            maxVal = v;\n        }\n    }\n    return maxVal;\n}\n",
            "vector<int> strangeSortList(const vector<int>& lst) {\n    vector<int> sl(lst);\n    sort(sl.begin(), sl.end());\n    vector<int> result;\n    int left = 0, right = sl.size() - 1;\n    while (left <= right) {\n        result.push_back(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push_back(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        double s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    return -1.0;\n}\n",
            "bool willItFly(const vector<int>& q, int w) {\n    if (q.empty()) {\n        return false;\n    }\n    bool isPalin = true;\n    for (int i = 0; i < q.size(); i++) {\n        if (q[i] != q[q.size() - i - 1]) {\n            isPalin = false;\n            break;\n        }\n    }\n    int total = 0;\n    for (int e : q) {\n        total += e;\n    }\n    return isPalin && total <= w;\n}\n",
            "int smallestChange(const vector<int>& arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.size() / 2; i++) {\n        if (arr[i] != arr[arr.size() - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;\n}\n",
            "vector<string> totalMatch(const vector<string>& lst1, const vector<string>& lst2) {\n    int cnt1 = 0;\n    for (string s : lst1) {\n        cnt1 += s.size();\n    }\n    int cnt2 = 0;\n    for (string s : lst2) {\n        cnt2 += s.size();\n    }\n    if (cnt1 <= cnt2) {\n        return lst1;\n    }\n    return lst2;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= int(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nbool isMultiplyPrime(int a) {\n    int cnt = 0;\n    for (int i = 2; i <= a; i++) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt++;\n                a /= i;\n            }\n        }\n    }\n    return cnt == 3;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    a = abs(a);\n    int root = round(pow(a, 1.0 / 3.0));\n    return root * root * root == a;\n}\n",
            "int hexKey(const string& num) {\n    int result = 0;\n    for (char x : num) {\n        if (x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D') {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "string decimalToBinary(int dec) {\n    stringstream ss;\n    ss << dec;\n    string binary;\n    ss >> binary;\n    return \"db\" + binary + \"db\";\n}\n",
            "bool isHappy(const string& s) {\n    if (s.size() < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "vector<string> numericalLetterGrade(const vector<double>& grades) {\n    vector<string> result;\n    for (double g : grades) {\n        if (g == 4.0) {\n            result.push_back(\"A+\");\n        } else if (g > 3.7) {\n            result.push_back(\"A\");\n        } else if (g > 3.3) {\n            result.push_back(\"A-\");\n        } else if (g > 3.0) {\n            result.push_back(\"B+\");\n        } else if (g > 2.7) {\n            result.push_back(\"B\");\n        } else if (g > 2.3) {\n            result.push_back(\"B-\");\n        } else if (g > 2.0) {\n            result.push_back(\"C+\");\n        } else if (g > 1.7) {\n            result.push_back(\"C\");\n        } else if (g > 1.3) {\n            result.push_back(\"C-\");\n        } else if (g > 1.0) {\n            result.push_back(\"D+\");\n        } else if (g > 0.7) {\n            result.push_back(\"D\");\n        } else if (g > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(const string& s) {\n    int length = s.length();\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(length); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * pow(10, n - 2);\n}\n",
            "string solve(int n) {\n    int digitsSum = 0;\n    stringstream ss;\n    ss << n;\n    string s;\n    while (ss >> s) {\n        digitsSum += s[0] - '0';\n    }\n    return to_string(digitsSum);\n}\n",
            "int add(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "string antiShuffle(const string& s) {\n    vector<string> words;\n    for (const string& word : split(s, \" \")) {\n        vector<char> runes(word.begin(), word.end());\n        sort(runes.begin(), runes.end());\n        words.push_back(string(runes.begin(), runes.end()));\n    }\n    return join(words, \" \");\n}\n",
            "vector<vector<int>> getRow(const vector<vector<int>>& lst, int x) {\n    vector<vector<int>> coords;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                coords.push_back({i, j});\n            }\n        }\n    }\n    sort(coords.begin(), coords.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]);\n    });\n    return coords;\n}\n",
            "vector<int> sortArray(const vector<int>& arr) {\n    if (arr.size() == 0) {\n        return {};\n    }\n    if ((arr[0] + arr[arr.size() - 1]) % 2 == 0) {\n        vector<int> result = arr;\n        sort(result.rbegin(), result.rend());\n        return result;\n    } else {\n        vector<int> result = arr;\n        sort(result.begin(), result.end());\n        return result;\n    }\n}\n",
            "string encrypt(const string& s) {\n    string result;\n    for (char ch : s) {\n        char shifted = ch + 4;\n        if (shifted > 'z') {\n            shifted -= 26;\n        }\n        result.push_back(shifted);\n    }\n    return result;\n}\n",
            "optional<int> nextSmallest(const vector<int>& lst) {\n    vector<int> sl;\n    unordered_map<int, bool> m;\n    for (int e : lst) {\n        if (!m[e]) {\n            sl.push_back(e);\n            m[e] = true;\n        }\n    }\n    sort(sl.begin(), sl.end());\n    if (sl.size() < 2) {\n        return nullopt;\n    }\n    return sl[1];\n}\n",
            "int isBored(const string& s) {\n    regex pattern(R\"([.!?]\\s*)\");\n    vector<string> sentences;\n    copy(sregex_token_iterator(s.begin(), s.end(), pattern, -1), sregex_token_iterator(), back_inserter(sentences));\n    int result = 0;\n    for (string sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.substr(0, 2) == \"I \") {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "bool anyInt(any x, any y, any z) {\n    if (x.type() == typeid(int)) {\n        int x_int = any_cast<int>(x);\n        if (y.type() == typeid(int)) {\n            int y_int = any_cast<int>(y);\n            if (z.type() == typeid(int)) {\n                int z_int = any_cast<int>(z);\n                if ((x_int + y_int == z_int) || (x_int + z_int == y_int) || (y_int + z_int == x_int)) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "string encode(const string& message) {\n    string vowels = \"aeiouAEIOU\";\n    string result;\n    for (char ch : message) {\n        if (isalpha(ch)) {\n            char ch1 = tolower(ch) if isupper(ch) else toupper(ch);\n            if (vowels.find(ch1) != string::npos) {\n                ch1 = ch1 + 2;\n            }\n            result.push_back(ch1);\n        } else {\n            result.push_back(ch);\n        }\n    }\n    return result;\n}\n",
            "int skjkasdkd(const vector<int>& lst) {\n    vector<int> primes;\n    for (int n : lst) {\n        bool is_prime = true;\n        for (int i = 2; i <= sqrt(n); i++) {\n            if (n % i == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(n);\n        }\n    }\n    if (primes.empty()) {\n        return 0;\n    }\n    int largest = *max_element(primes.begin(), primes.end());\n    int sum = 0;\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n    return sum;\n}\n",
            "bool checkDictCase(const unordered_map<string, string>& d) {\n    if (d.empty()) {\n        return false;\n    }\n    bool all_lower = true;\n    bool all_upper = true;\n    for (const auto& [k, v] : d) {\n        all_lower = all_lower && islower(k[0]);\n        all_upper = all_upper && isupper(k[0]);\n    }\n    return all_lower || all_upper;\n}\n",
            "vector<int> countUpTo(int n) {\n    vector<int> primes;\n    for (int num = 2; num < n; num++) {\n        bool is_prime = true;\n        for (int p : primes) {\n            if (num % p == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    return abs(a) % 10 * abs(b) % 10;\n}\n",
            "int countUpper(const string& s) {\n    string vowels = \"AEIOU\";\n    int result = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (i % 2 == 0 && vowels.find(s[i]) != string::npos) {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "int closestInteger(const string& value) {\n    double num = stod(value);\n    if (num >= 0) {\n        return num + 0.5;\n    } else {\n        return num - 0.5;\n    }\n}\n",
            "vector<int> makeAPile(int n) {\n    vector<int> result(n);\n    for (int i = 0; i < n; i++) {\n        result[i] = n + 2 * i;\n    }\n    return result;\n}\n",
            "vector<string> wordsString(const string& s) {\n    vector<string> result;\n    regex re(R\"([, ])\");\n    for (auto it = sregex_token_iterator(s.begin(), s.end(), re, -1); it != sregex_token_iterator(); ++it) {\n        if (it->length() > 0) {\n            result.push_back(*it);\n        }\n    }\n    return result;\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    if (x != y) {\n        return y - 1;\n    }\n    return -1;\n}\n",
            "optional<string> roundedAvg(int n, int m) {\n    if (n > m) {\n        return nullopt;\n    }\n    int r_avg = (m + n) / 2 + 1;\n    return bitset<32>(r_avg).to_string().substr(2);\n}\n",
            "bool allDigitsOdd(const string& s) {\n    for (char r : s) {\n        if (r % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nvector<int> uniqueDigits(const vector<int>& x) {\n    vector<int> result;\n    for (int num : x) {\n        if (allDigitsOdd(to_string(num))) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n",
            "vector<string> byLength(const vector<int>& arr) {\n    vector<string> digit_names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    vector<int> sorted_arr;\n    for (int x : arr) {\n        if (1 <= x && x <= 9) {\n            sorted_arr.push_back(x);\n        }\n    }\n    sort(sorted_arr.begin(), sorted_arr.end(), greater<int>());\n    vector<string> result;\n    for (int x : sorted_arr) {\n        result.push_back(digit_names[x-1]);\n    }\n    return result;\n}\n",
            "vector<int> f(int n) {\n    vector<int> nums(n);\n    iota(nums.begin(), nums.end(), 1);\n    vector<int> result;\n    for (int i = 0; i < n; i++) {\n        if (i % 2 != 0) {\n            result.push_back(accumulate(nums.begin(), nums.begin() + i, 0));\n        } else {\n            result.push_back(accumulate(nums.begin(), nums.begin() + i, 1, multiplies<int>()));\n        }\n    }\n    return result;\n}\n",
            "vector<int> evenOddPalindrome(int n) {\n    vector<int> cnt(2, 0);\n    for (int i = 1; i <= n; i++) {\n        if (isPalindrome(to_string(i))) {\n            cnt[i % 2]++;\n        }\n    }\n    return cnt;\n}\n",
            "int digitsSum(int n) {\n    string n_str = to_string(n);\n    if (n >= 0) {\n        int result = 0;\n        for (char d : n_str) {\n            result += d - '0';\n        }\n        return result;\n    } else {\n        return 2 * (n_str[0] - '0') + digitsSum(abs(n));\n    }\n}\nint countNums(const vector<int>& arr) {\n    int result = 0;\n    for (int n : arr) {\n        if (digitsSum(n) > 0) {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "bool moveOneBall(const vector<int>& arr) {\n    if (arr.empty()) {\n        return true;\n    }\n    vector<int> sortedArr(arr);\n    sort(sortedArr.begin(), sortedArr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (equal(arr.begin() + i, arr.end(), sortedArr.begin()) && equal(arr.begin(), arr.begin() + i, sortedArr.end() - i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "string canExchange(const vector<int>& lst1, const vector<int>& lst2) {\n    int oddCnt = 0;\n    int evenCnt = 0;\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            oddCnt++;\n        }\n    }\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            evenCnt++;\n        }\n    }\n    if (evenCnt >= oddCnt) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n",
            "unordered_map<string, int> histogram(const string& test) {\n    unordered_map<string, int> freq;\n    vector<string> words;\n    for (string w : split(test, \" \")) {\n        if (w.size() > 0) {\n            words.push_back(w);\n        }\n    }\n    for (string w : words) {\n        freq[w] = freq[w] + 1;\n    }\n    unordered_map<string, int> result;\n    if (freq.size() > 0) {\n        int maxFreq = 0;\n        for (auto& p : freq) {\n            if (p.second > maxFreq) {\n                maxFreq = p.second;\n            }\n        }\n        for (auto& p : freq) {\n            if (p.second == maxFreq) {\n                result[p.first] = p.second;\n            }\n        }\n    }\n    return result;\n}\n",
            "vector<string> reverseDelete(const string& s, const string& c) {\n    string s1;\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            s1 += ch;\n        }\n    }\n    return {s1, s1 == string(s1.rbegin(), s1.rend()) ? \"yes\" : \"no\"};\n}\n",
            "vector<string> oddCount(const vector<string>& lst) {\n    vector<string> result;\n    for (string num : lst) {\n        int n = 0;\n        for (char d : num) {\n            n += d % 2 == 1;\n        }\n        string rs = \"the number of odd elements in the string i of the input.\";\n        result.push_back(rs.replace(rs.find(\"i\"), 1, to_string(n)));\n    }\n    return result;\n}\n",
            "int minSubArraySum(const vector<int>& nums) {\n    int min_sum = 0;\n    int cur_sum = 0;\n    for (int n : nums) {\n        cur_sum = min(cur_sum + n, 0);\n        min_sum = min(cur_sum, min_sum);\n    }\n    if (min_sum == 0) {\n        min_sum = *min_element(nums.begin(), nums.end());\n    }\n    return min_sum;\n}\n",
            "int maxFill(const vector<vector<int>>& grid, int capacity) {\n    int result = 0;\n    for (const vector<int>& arr : grid) {\n        result += ceil(accumulate(arr.begin(), arr.end(), 0) / capacity);\n    }\n    return result;\n}\n",
            "int countOnes(int num) {\n    int count = 0;\n    while (num) {\n        count += num & 1;\n        num >>= 1;\n    }\n    return count;\n}\nvector<int> sortArray(const vector<int>& arr) {\n    vector<int> result = arr;\n    sort(result.begin(), result.end(), [](int a, int b) {\n        return make_pair(countOnes(a), a) < make_pair(countOnes(b), b);\n    });\n    return result;\n}\n",
            "vector<string> selectWords(const string& s, int n) {\n    unordered_set<char> consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n    vector<string> words = split(s, ' ');\n    vector<string> result;\n    for (string w : words) {\n        if (w.size() > 0) {\n            int consonantCount = 0;\n            for (char c : w) {\n                if (consonants.find(tolower(c)) != consonants.end()) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.push_back(w);\n            }\n        }\n    }\n    return result;\n}\n",
            "string getClosestVowel(const string& word) {\n    unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    for (int i = word.size() - 2; i > 0; i--) {\n        if (vowels.find(word[i]) != vowels.end() && vowels.find(word[i-1]) == vowels.end() && vowels.find(word[i+1]) == vowels.end()) {\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}\n",
            "bool check(const string& s) {\n    int depth = 0;\n    for (char ch : s) {\n        if (ch == '(') {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\nstring matchParens(const vector<string>& lst) {\n    string s1 = lst[0] + lst[1];\n    string s2 = lst[1] + lst[0];\n    if (check(s1) || check(s2)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n",
            "vector<int> maximum(const vector<int>& arr, int k) {\n    vector<int> result;\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end());\n    for (int i = sorted_arr.size() - k; i < sorted_arr.size(); i++) {\n        result.push_back(sorted_arr[i]);\n    }\n    return result;\n}\n",
            "int solution(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "int addElements(const vector<int>& arr, int k) {\n    int result = 0;\n    for (int n : arr) {\n        if (to_string(n).length() <= 2) {\n            result += n;\n        }\n    }\n    return result;\n}\n",
            "vector<int> getOddCollatz(int n) {\n    vector<int> collatz;\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.push_back(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    sort(collatz.begin(), collatz.end());\n    return collatz;\n}\n",
            "bool validDate(const string& date) {\n    if (date.length() != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n    int m = stoi(date.substr(0, 2));\n    int d = stoi(date.substr(3, 2));\n    if ((m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) && d >= 1 && d <= 31) {\n        return true;\n    }\n    if ((m == 4 || m == 6 || m == 9 || m == 11) && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "vector<string> splitWords(const string& txt) {\n    if (txt.find(\" \") != string::npos) {\n        return split(txt, \" \");\n    } else if (txt.find(\",\") != string::npos) {\n        return split(txt, \",\");\n    } else {\n        vector<string> result;\n        for (char c : txt) {\n            if (islower(c) && c % 2 == 0) {\n                result.push_back(string(1, c));\n            }\n        }\n        return {to_string(result.size())};\n    }\n}\n",
            "bool isSorted(const vector<int>& lst) {\n    if (lst.size() < 2) {\n        return true;\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i-1] > lst[i]) {\n            return false;\n        }\n    }\n    unordered_map<int, int> freq;\n    for (int i : lst) {\n        freq[i] = freq.count(i) + 1;\n    }\n    int max_freq = 0;\n    for (auto it = freq.begin(); it != freq.end(); it++) {\n        max_freq = max(max_freq, it->second);\n    }\n    return max_freq <= 2;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nstring intersection(const vector<int>& interval1, const vector<int>& interval2) {\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n}\n",
            "optional<int> prodSigns(const vector<int>& arr) {\n    if (arr.empty()) {\n        return nullopt;\n    }\n    if (find(arr.begin(), arr.end(), 0) != arr.end()) {\n        return 0;\n    }\n    int sign = count_if(arr.begin(), arr.end(), [](int n) { return n < 0; }) % 2 == 1 ? -1 : 1;\n    return sign * accumulate(arr.begin(), arr.end(), 0, [](int a, int b) { return a + abs(b); });\n}\n",
            "vector<int> minPath(const vector<vector<int>>& grid, int k) {\n    int n = grid.size();\n    int min_val = n * n + 1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                vector<int> temp;\n                if (i != 0) {\n                    temp.push_back(grid[i - 1][j]);\n                }\n                if (j != 0) {\n                    temp.push_back(grid[i][j - 1]);\n                }\n                if (i != n - 1) {\n                    temp.push_back(grid[i + 1][j]);\n                }\n                if (j != n - 1) {\n                    temp.push_back(grid[i][j + 1]);\n                }\n                min_val = min(min_val, *min_element(temp.begin(), temp.end()));\n            }\n        }\n    }\n    vector<int> result;\n    for (int i = 0; i < k; i++) {\n        result.push_back(i % 2 == 0 ? 1 : min_val);\n    }\n    return result;\n}\n",
            "vector<int> tri(int n) {\n    if (n == 0) {\n        return {1};\n    }\n    vector<int> seq = {1, 3};\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq.push_back(i / 2 + 1);\n        } else {\n            seq.push_back(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    string s = to_string(n);\n    vector<int> odds;\n    for (char d : s) {\n        if (d % 2 == 1) {\n            odds.push_back(d);\n        }\n    }\n    if (odds.size() > 0) {\n        int result = 1;\n        for (int o : odds) {\n            result *= o;\n        }\n        return result;\n    }\n    return 0;\n}\n",
            "bool isNested(const string& s) {\n    vector<int> open_idx;\n    vector<int> close_idx;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == '[') {\n            open_idx.push_back(i);\n        } else if (s[i] == ']') {\n            close_idx.push_back(i);\n        }\n    }\n    reverse(close_idx.begin(), close_idx.end());\n    int cnt = 0;\n    int i = 0;\n    int l = close_idx.size();\n    for (int idx : open_idx) {\n        if (i < l && idx < close_idx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "int sumSquares(const vector<double>& lst) {\n    int result = 0;\n    for (double n : lst) {\n        result += pow(ceil(n), 2);\n    }\n    return result;\n}\n",
            "bool checkIfLastCharIsALetter(const string& txt) {\n    if (txt.empty()) {\n        return false;\n    }\n    string last = txt.substr(txt.rfind(' ') + 1);\n    return last.size() == 1 && isalpha(last[0]);\n}\n",
            "int canArrange(const vector<int>& arr) {\n    if (arr.size() <= 1) {\n        return -1;\n    }\n    vector<int> idx;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            idx.push_back(i);\n        }\n    }\n    if (idx.empty()) {\n        return -1;\n    }\n    return idx[idx.size() - 1];\n}\n",
            "vector<optional<int>> largestSmallestIntegers(const vector<int>& lst) {\n    vector<int> neg, pos;\n    for (int i : lst) {\n        if (i < 0) {\n            neg.push_back(i);\n        } else if (i > 0) {\n            pos.push_back(i);\n        }\n    }\n    optional<int> max_neg = neg.empty() ? nullopt : *max_element(neg.begin(), neg.end());\n    optional<int> min_pos = pos.empty() ? nullopt : *min_element(pos.begin(), pos.end());\n    return {max_neg, min_pos};\n}\n",
            "optional<double> compareOne(any a, any b) {\n    double a1 = any_cast<double>(a);\n    double b1 = any_cast<double>(b);\n    if (a1 == b1) {\n        return nullopt;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    int fact = 1;\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "string fixSpaces(const string& txt) {\n    return regex_replace(txt, regex(\"\\\\s{3,}\"), \"-\").replace(\" \", \"_\");\n}\n",
            "bool contains(const vector<string>& s, const string& e) {\n    return find(s.begin(), s.end(), e) != s.end();\n}\nstring fileNameCheck(const string& file_name) {\n    vector<string> suf = {\"txt\", \"exe\", \"dll\"};\n    vector<string> lst = split(file_name, \".\");\n    if (lst.size() != 2 || !contains(suf, lst[1]) || lst[0].size() == 0 || !isalpha(lst[0][0]) || count_if(lst[0].begin(), lst[0].end(), [](char c) { return isdigit(c); }) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "int sumSquares(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        int e = lst[i];\n        if (i % 3 == 0) {\n            result += e * e;\n        } else if (i % 4 == 0) {\n            result += e * e * e;\n        } else {\n            result += e;\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nstring wordsInSentence(const string& sentence) {\n    vector<string> words;\n    string word;\n    for (char c : sentence) {\n        if (c == ' ') {\n            words.push_back(word);\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    words.push_back(word);\n    string result;\n    for (string w : words) {\n        if (isPrime(w.size())) {\n            result += w + \" \";\n        }\n    }\n    return result;\n}\n",
            "bool simplify(const string& x, const string& n) {\n    int num = stoi(x.substr(0, x.find(\"/\"))) * stoi(n.substr(0, n.find(\"/\")));\n    int den = stoi(x.substr(x.find(\"/\") + 1)) * stoi(n.substr(n.find(\"/\") + 1));\n    return num % den == 0;\n}\n",
            "int digitsSum(int n) {\n    string n_str = to_string(n);\n    if (n >= 0) {\n        int result = 0;\n        for (char d : n_str) {\n            result += d - '0';\n        }\n        return result;\n    } else {\n        return (n_str[0] - '0') * 2 + digitsSum(abs(n));\n    }\n}\nvector<int> orderByPoints(const vector<int>& nums) {\n    vector<int> result;\n    for (int n : nums) {\n        result.push_back(n);\n    }\n    sort(result.begin(), result.end(), [](int a, int b) {\n        return digitsSum(a) < digitsSum(b);\n    });\n    return result;\n}\n",
            "int specialFilter(const vector<int>& nums) {\n    string odds = \"13579\";\n    int result = 0;\n    for (int n : nums) {\n        if (n > 10 && n % 2 == 1 && odds.find(to_string(n)[0]) != string::npos) {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "int getMaxTriples(int n) {\n    int c[3] = {0};\n    for (int i = 1; i <= n; i++) {\n        int a = i*i - i + 1;\n        c[a%3]++;\n    }\n    return (c[0]*c[1]*c[2] + (c[0]*(c[0]-1)*(c[0]-2) + c[1]*(c[1]-1)*(c[1]-2) + c[2]*(c[2]-1)*(c[2]-2)) / 6;\n}\n",
            "vector<string> bf(const string& planet1, const string& planet2) {\n    vector<string> names = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    if (find(names.begin(), names.end(), planet1) == names.end() || find(names.begin(), names.end(), planet2) == names.end()) {\n        return {};\n    }\n    int l = distance(names.begin(), find(names.begin(), names.end(), planet1));\n    int r = distance(names.begin(), find(names.begin(), names.end(), planet2));\n    if (l > r) {\n        swap(l, r);\n    }\n    if (l == r) {\n        return {};\n    }\n    return vector<string>(names.begin() + l + 1, names.begin() + r);\n}\n",
            "vector<string> sortedListSum(const vector<string>& lst) {\n    vector<string> result;\n    for (string s : lst) {\n        if (s.size() % 2 == 0) {\n            result.push_back(s);\n        }\n    }\n    sort(result.begin(), result.end(), [](string& a, string& b) {\n        if (a.size() == b.size()) {\n            return a < b;\n        }\n        return a.size() < b.size();\n    });\n    return result;\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(const vector<double>& lst) {\n    int result = 0;\n    for (double n : lst) {\n        if (n >= 0 && fmod(n, 2) == 1) {\n            result += n * n;\n        }\n    }\n    return result;\n}\n",
            "vector<int> compare(const vector<int>& game, const vector<int>& guess) {\n    vector<int> result;\n    for (int i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n",
            "string strongestExtension(const string& class_name, const vector<string>& extensions) {\n    int max_s = -1;\n    string max_ext;\n    for (const string& ext : extensions) {\n        int upper = 0;\n        int lower = 0;\n        for (char c : ext) {\n            if (isupper(c)) {\n                upper++;\n            } else if (islower(c)) {\n                lower++;\n            }\n        }\n        int s = upper - lower;\n        if (s > max_s) {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return class_name + \".\" + max_ext;\n}\n",
            "bool cycpatternCheck(const string& a, const string& b) {\n    if (a.size() < b.size()) {\n        return false;\n    }\n    for (int i = 0; i < b.size(); i++) {\n        if (a.find(b.substr(i) + b.substr(0, i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "vector<int> evenOddCount(int num) {\n    string ds = to_string(abs(num));\n    int even = count_if(ds.begin(), ds.end(), [](char d) { return d % 2 == 0; });\n    return {even, (int)ds.size() - even};\n}\n",
            "string intToMiniRoman(int num) {\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string res;\n    for (int i = 0; i < values.size(); i++) {\n        while (num >= values[i]) {\n            res += numerals[i];\n            num -= values[i];\n        }\n    }\n    return res;\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    int s[] = {a, b, c};\n    sort(s, s + 3);\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}\n",
            "string findMax(const vector<string>& words) {\n    int max_cnt = 0;\n    string max_w;\n    for (string w : words) {\n        set<char> s(w.begin(), w.end());\n        int cnt = s.size();\n        if (cnt > max_cnt) {\n            max_cnt = cnt;\n            max_w = w;\n        } else if (cnt == max_cnt) {\n            max_w = min(max_w, w);\n        }\n    }\n    return max_w;\n}\n",
            "vector<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return {num + need, remaining - need};\n    }\n    return {num + remaining, 0};\n}\n",
            "int doAlgebra(const vector<string>& operators, const vector<int>& operands) {\n    vector<string> ops = operators;\n    vector<int> nums = operands;\n    int i = ops.size() - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]);\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] / nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "string solve(const string& s) {\n    if (s.find_first_of(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") == string::npos) {\n        return reverse(s);\n    }\n    vector<char> result;\n    for (char ch : s) {\n        if (!isalpha(ch)) {\n            result.push_back(ch);\n        } else if (isupper(ch)) {\n            result.push_back(tolower(ch));\n        } else if (islower(ch)) {\n            result.push_back(toupper(ch));\n        }\n    }\n    return string(result.begin(), result.end());\n}\nstring reverse(const string& s) {\n    vector<char> result(s.size());\n    for (int i = 0; i < s.size(); i++) {\n        result[s.size() - 1 - i] = s[i];\n    }\n    return string(result.begin(), result.end());\n}\n",
            "optional<string> stringToMd5(const string& txt) {\n    if (txt.empty()) {\n        return nullopt;\n    }\n    MD5_CTX md5_hash;\n    MD5_Init(&md5_hash);\n    MD5_Update(&md5_hash, txt.c_str(), txt.size());\n    unsigned char md5_encoded[MD5_DIGEST_LENGTH];\n    MD5_Final(md5_encoded, &md5_hash);\n    ostringstream md5_encoded_str;\n    for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n        md5_encoded_str << hex << setw(2) << setfill('0') << (int)md5_encoded[i];\n    }\n    return md5_encoded_str.str();\n}\n",
            "vector<int> generateIntegers(int a, int b) {\n    int lower = max(2, min(a, b));\n    int upper = min(8, max(a, b));\n    vector<int> result;\n    for (int i = lower; i <= upper; i++) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"
        ],
        "csharp": [
            "class Global {\n    public static bool HasCloseElements(IList<double> numbers, double threshold) {\n        for (int i = 0; i < numbers.Count; i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n                if (Math.Abs(numbers[i] - numbers[j]) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<string> SeparateParenGroups(string parenString) {\n        var groups = new List<string>();\n        var stk = new List<char>();\n        var currentGroup = \"\";\n        var parens = parenString.Replace(\" \", \"\");\n        foreach (var ch in parens) {\n            if (ch == '(') {\n                stk.Add(ch);\n                currentGroup += ch;\n            } else if (ch == ')') {\n                stk.RemoveAt(stk.Count - 1);\n                currentGroup += ch;\n                if (stk.Count == 0) {\n                    groups.Add(currentGroup);\n                    currentGroup = \"\";\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double TruncateNumber(double num) {\n        return num - Math.Floor(num);\n    }\n}\n",
            "class Global {\n    public static bool BelowZero(IList<int> operations) {\n        int balance = 0;\n        foreach (var op in operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double MeanAbsoluteDeviation(IList<double> numbers) {\n        double mean = 0.0;\n        foreach (var n in numbers) {\n            mean += n;\n        }\n        mean /= numbers.Count;\n        double deviation = 0.0;\n        foreach (var n in numbers) {\n            deviation += Math.Abs(n - mean);\n        }\n        return deviation / numbers.Count;\n    }\n}\n",
            "class Global {\n    public static IList<int> Intersperse(IList<int> numbers, int delimiter) {\n        var result = new List<int>();\n        for (int i = 0; i < numbers.Count; i++) {\n            if (i != 0) {\n                result.Add(delimiter);\n            }\n            result.Add(numbers[i]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> ParseNestedParens(string parenString) {\n        var result = new List<int>();\n        var parenGroups = parenString.Split(' ');\n        foreach (var group in parenGroups) {\n            int maxDepth = 0;\n            int depth = 0;\n            foreach (var ch in group) {\n                if (ch == '(') {\n                    depth += 1;\n                    maxDepth = Math.Max(maxDepth, depth);\n                } else if (ch == ')') {\n                    depth -= 1;\n                }\n            }\n            result.Add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> FilterBySubstring(IList<string> strs, string substring) {\n        var result = new List<string>();\n        foreach (var s in strs) {\n            if (s.Contains(substring)) {\n                result.Add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> SumProduct(IList<int> numbers) {\n        int nSum = 0;\n        foreach (var n in numbers) {\n            nSum += n;\n        }\n        int nProduct = 1;\n        foreach (var n in numbers) {\n            nProduct *= n;\n        }\n        return new List<int> { nSum, nProduct };\n    }\n}\n",
            "class Global {\n    public static IList<int> RollingMax(IList<int> numbers) {\n        int maxSoFar = int.MinValue;\n        var result = new List<int>();\n        foreach (var num in numbers) {\n            maxSoFar = Math.Max(maxSoFar, num);\n            result.Add(maxSoFar);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool IsPalindrome(string s) {\n        return s == Reverse(s);\n    }\n    public static string MakePalindrome(string s) {\n        if (IsPalindrome(s)) {\n            return s;\n        }\n        for (int i = 0; i < s.Length; i++) {\n            if (IsPalindrome(s.Substring(i))) {\n                return s + Reverse(s.Substring(0, i));\n            }\n        }\n        return \"\";\n    }\n    public static string Reverse(string s) {\n        var runes = s.ToCharArray();\n        for (int i = 0, j = runes.Length - 1; i < j; i++, j--) {\n            var temp = runes[i];\n            runes[i] = runes[j];\n            runes[j] = temp;\n        }\n        return new string(runes);\n    }\n}\n",
            "class Global {\n    public static string StringXor(string a, string b) {\n        var result = \"\";\n        for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                result += \"0\";\n            } else {\n                result += \"1\";\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string? Longest(IList<string> strs) {\n        if (strs.Count == 0) {\n            return null;\n        }\n        string longestS = strs[0];\n        foreach (var s in strs) {\n            if (s.Length > longestS.Length) {\n                longestS = s;\n            }\n        }\n        return longestS;\n    }\n}\n",
            "class Global {\n    public static int GreatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return GreatestCommonDivisor(b, a % b);\n    }\n}\n",
            "class Global {\n    public static IList<string> AllPrefixes(string s) {\n        var prefixes = new List<string>();\n        for (int i = 0; i < s.Length; i++) {\n            prefixes.Add(s.Substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static string StringSequence(int n) {\n        var result = new List<string>();\n        for (int i = 0; i <= n; i++) {\n            result.Add(i.ToString());\n        }\n        return string.Join(\" \", result);\n    }\n}\n",
            "class Global {\n    public static int CountDistinctCharacters(string s) {\n        return new HashSet<char>(s.ToLower()).Count;\n    }\n}\n",
            "class Global {\n    public static IList<int> ParseMusic(string musicString) {\n        var durations = new Dictionary<string, int> {\n            {\"o\", 4},\n            {\"o|\", 2},\n            {\".|\", 1}\n        };\n        var notes = musicString.Split(' ');\n        var result = new List<int>();\n        foreach (var note in notes) {\n            result.Add(durations[note]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int HowManyTimes(string s, string substring) {\n        int times = 0;\n        for (int i = 0; i < s.Length - substring.Length + 1; i++) {\n            if (s.Substring(i, substring.Length) == substring) {\n                times += 1;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static string SortNumbers(string numbers) {\n        var numDict = new Dictionary<string, int>() {\n            { \"zero\", 0 },\n            { \"one\", 1 },\n            { \"two\", 2 },\n            { \"three\", 3 },\n            { \"four\", 4 },\n            { \"five\", 5 },\n            { \"six\", 6 },\n            { \"seven\", 7 },\n            { \"eight\", 8 },\n            { \"nine\", 9 },\n        };\n        var numList = new List<string>();\n        foreach (var e in numbers.Split(' ')) {\n            if (numDict.ContainsKey(e)) {\n                numList.Add(e);\n            }\n        }\n        numList.Sort((a, b) => numDict[a] - numDict[b]);\n        return string.Join(\" \", numList);\n    }\n}\n",
            "class Global {\n    public static IList<double> FindClosestElements(IList<double> numbers) {\n        var sortedNumbers = new List<double>(numbers);\n        sortedNumbers.Sort();\n        double minDiff = double.PositiveInfinity;\n        var closestPair = new List<double>();\n        for (int i = 1; i < sortedNumbers.Count; i++) {\n            double diff = sortedNumbers[i] - sortedNumbers[i - 1];\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = new List<double> { sortedNumbers[i - 1], sortedNumbers[i] };\n            }\n        }\n        return closestPair;\n    }\n}\n",
            "class Global {\n    public static IList<double> RescaleToUnit(IList<double> numbers) {\n        double minNum = double.MaxValue;\n        double maxNum = double.MinValue;\n        foreach (var num in numbers) {\n            if (num < minNum) {\n                minNum = num;\n            }\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n        if (minNum == maxNum) {\n            return new List<double>(numbers.Count);\n        }\n        var result = new List<double>(numbers.Count);\n        for (int i = 0; i < numbers.Count; i++) {\n            result.Add((numbers[i] - minNum) / (maxNum - minNum));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> FilterIntegers(IList<object> values) {\n        var result = new List<int>();\n        foreach (var x in values) {\n            if (x is int) {\n                result.Add((int)x);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int StrLength(string s) {\n        return s.Length;\n    }\n}\n",
            "class Global {\n    public static int LargestDivisor(int n) {\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}\n",
            "class Global {\n    public static IList<int> Factorize(int n) {\n        var factors = new List<int>();\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.Add(divisor);\n                n /= divisor;\n            } else {\n                divisor += 1;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static IList<int> RemoveDuplicates(IList<int> numbers) {\n        var counts = new Dictionary<int, int>();\n        foreach (var num in numbers) {\n            counts[num] = counts.GetValueOrDefault(num) + 1;\n        }\n        var res = new List<int>();\n        foreach (var num in numbers) {\n            if (counts[num] == 1) {\n                res.Add(num);\n            }\n        }\n        return res;\n    }\n}\n",
            "class Global {\n    public static string FlipCase(string s) {\n        var flipped = new List<char>();\n        foreach (var ch in s) {\n            if (!char.IsLetter(ch)) {\n                flipped.Add(ch);\n            } else if (char.IsLower(ch)) {\n                flipped.Add(char.ToUpper(ch));\n            } else if (char.IsUpper(ch)) {\n                flipped.Add(char.ToLower(ch));\n            }\n        }\n        return new string(flipped.ToArray());\n    }\n}\n",
            "class Global {\n    public static string Concatenate(IList<string> strs) {\n        return string.Join(\"\", strs);\n    }\n}\n",
            "class Global {\n    public static IList<string> FilterByPrefix(IList<string> strs, string prefixStr) {\n        var result = new List<string>();\n        foreach (var s in strs) {\n            if (s.StartsWith(prefixStr)) {\n                result.Add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> GetPositive(IList<int> l) {\n        var result = new List<int>();\n        foreach (var num in l) {\n            if (num > 0) {\n                result.Add(num);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= (int)Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static double Poly(IList<int> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.Count; i++) {\n            res += xs[i] * Math.Pow(x, i);\n        }\n        return res;\n    }\n    public static double FindZero(IList<int> xs) {\n        double x1 = 1.0, x2 = -1.0;\n        while (Poly(xs, x1) * Poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.Abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (Poly(xs, mid) == 0) {\n                return mid;\n            } else if (Poly(xs, mid) * Poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortThird(IList<int> l) {\n        var sortedThird = new List<int>();\n        for (var i = 0; i < l.Count; i += 3) {\n            sortedThird.Add(l[i]);\n        }\n        sortedThird.Sort();\n        var result = new List<int>();\n        for (var i = 0; i < l.Count; i++) {\n            if (i % 3 == 0) {\n                result.Add(sortedThird[i / 3]);\n            } else {\n                result.Add(l[i]);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> ListUnique(IList<int> l) {\n        var m = new Dictionary<int, bool>();\n        foreach (var e in l) {\n            m[e] = true;\n        }\n        var result = new List<int>();\n        foreach (var k in m.Keys) {\n            result.Add(k);\n        }\n        result.Sort();\n        return result;\n    }\n}\n",
            "class Global {\n    public static int MaxElement(IList<int> l) {\n        if (l.Count == 0) {\n            return 0;\n        }\n        int max = l[0];\n        foreach (var e in l) {\n            if (e > max) {\n                max = e;\n            }\n        }\n        return max;\n    }\n}\n",
            "class Global {\n    public static int FizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += Count7(i);\n            }\n        }\n        return cnt;\n    }\n    public static int Count7(int n) {\n        int cnt = 0;\n        while (n > 0) {\n            if (n % 10 == 7) {\n                cnt++;\n            }\n            n /= 10;\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortEven(IList<int> l) {\n        var sortedEven = new List<int>();\n        for (var i = 0; i < l.Count; i += 2) {\n            sortedEven.Add(l[i]);\n        }\n        sortedEven.Sort();\n        var result = new List<int>(l);\n        for (var i = 0; i < l.Count; i++) {\n            if (i % 2 == 0) {\n                result[i] = sortedEven[i / 2];\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string EncodeCyclic(string s) {\n        var result = new List<string>();\n        for (var i = 0; i < s.Length; i += 3) {\n            if (i + 3 > s.Length) {\n                result.Add(s.Substring(i));\n            } else {\n                result.Add(s.Substring(i + 1, 2));\n                result.Add(s.Substring(i, 1));\n            }\n        }\n        return string.Join(\"\", result);\n    }\n    public static string DecodeCyclic(string s) {\n        return EncodeCyclic(EncodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static int PrimeFib(int n) {\n        var f = new int[] { 0, 1 };\n        int cnt = 0;\n        while (cnt < n) {\n            f = new int[] { f[1], f[0] + f[1] };\n            if (IsPrime(f[1])) {\n                cnt++;\n            }\n        }\n        return f[1];\n    }\n}\n",
            "class Global {\n    public static bool TriplesSumToZero(IList<int> l) {\n        for (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static int CarRaceCollision(int n) {\n        return n * n;\n    }\n}\n",
            "class Global {\n    public static IList<int> IncrList(IList<int> l) {\n        var result = new List<int>(l.Count);\n        for (var i = 0; i < l.Count; i++) {\n            result.Add(l[i] + 1);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool PairsSumToZero(IList<int> l) {\n        var seen = new Dictionary<int, bool>();\n        foreach (var num in l) {\n            if (seen.ContainsKey(-num)) {\n                return true;\n            }\n            seen[num] = true;\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string ChangeBase(int x, int bas) {\n        if (x == 0) {\n            return \"0\";\n        }\n        var digits = new List<string>();\n        while (x > 0) {\n            digits.Add(x % bas.ToString());\n            x /= bas;\n        }\n        return string.Join(\"\", digits.ToArray()[::-1]);\n    }\n}\n",
            "class Global {\n    public static double TriangleArea(int a, int h) {\n        return (double)a * (double)h / 2;\n    }\n}\n",
            "class Global {\n    public static int Fib4(int n) {\n        var fib = new int[] { 0, 0, 2, 0 };\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = fib.Sum();\n        }\n        return fib[n % 4];\n    }\n}\n",
            "class Global {\n    public static double Median(IList<double> l) {\n        var sl = new List<double>(l);\n        sl.Sort();\n        if (sl.Count % 2 != 0) {\n            return sl[sl.Count / 2];\n        }\n        return (sl[sl.Count / 2] + sl[sl.Count / 2 - 1]) / 2;\n    }\n}\n",
            "class Global {\n    public static bool IsPalindrome(string txt) {\n        return txt == Reverse(txt);\n    }\n    public static string Reverse(string s) {\n        var runes = s.ToCharArray();\n        for (int i = 0, j = runes.Length - 1; i < j; i++, j--) {\n            var tmp = runes[i];\n            runes[i] = runes[j];\n            runes[j] = tmp;\n        }\n        return new string(runes);\n    }\n}\n",
            "class Global {\n    public static int Modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "class Global {\n    public static string EncodeShift(string s) {\n        var result = new List<byte>();\n        foreach (var ch in s) {\n            result.Add((byte)(((ch - 97 + 5) % 26) + 97));\n        }\n        return new string(result.ToArray());\n    }\n    public static string DecodeShift(string s) {\n        var result = new List<byte>();\n        foreach (var ch in s) {\n            result.Add((byte)(((ch - 97 + 21) % 26) + 97));\n        }\n        return new string(result.ToArray());\n    }\n}\n",
            "class Global {\n    public static string RemoveVowels(string txt) {\n        var vowels = \"aeiouAEIOU\";\n        var result = \"\";\n        foreach (var char in txt) {\n            if (!vowels.Contains(char)) {\n                result += char;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool BelowThreshold(IList<int> l, int t) {\n        foreach (var x in l) {\n            if (x >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int Add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static bool SameChars(string s0, string s1) {\n        return new HashSet<char>(s0).SetEquals(new HashSet<char>(s1));\n    }\n}\n",
            "class Global {\n    public static int Fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return Fib(n - 1) + Fib(n - 2);\n    }\n}\n",
            "class Global {\n    public static bool CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach (var b in brackets) {\n            if (b == '<') {\n                depth += 1;\n            } else if (b == '>') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static bool Monotonic(IList<int> l) {\n        var diff = new List<int>();\n        for (int i = 0; i < l.Count - 1; i++) {\n            diff.Add(l[i + 1] - l[i]);\n        }\n        return diff.All(x => x <= 0) || diff.All(x => x >= 0);\n    }\n}\n",
            "class Global {\n    public static IList<int> Common(IList<int> l1, IList<int> l2) {\n        var set1 = new HashSet<int>(l1);\n        var set2 = new HashSet<int>(l2);\n        var result = new List<int>();\n        foreach (var e in set1) {\n            if (set2.Contains(e)) {\n                result.Add(e);\n            }\n        }\n        result.Sort();\n        return result;\n    }\n}\n",
            "class Global {\n    public static int LargestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int SumToN(int n) {\n        var result = 0;\n        for (var i = 0; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach (var b in brackets) {\n            if (b == '(') {\n                depth += 1;\n            } else if (b == ')') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static IList<int> Derivative(IList<int> xs) {\n        var result = new List<int>();\n        for (int i = 1; i < xs.Count; i++) {\n            result.Add(xs[i] * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int Fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n        int a = 0, b = 0, c = 1;\n        while (n > 2) {\n            a = b;\n            b = c;\n            c = a + b + c;\n            n -= 1;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int VowelsCount(string s) {\n        var vowels = \"aeiou\";\n        var cnt = 0;\n        for (var i = 0; i < s.Length; i++) {\n            if (vowels.Contains(s[i].ToString().ToLower()) || (i == s.Length - 1 && s[i].ToString().ToLower() == \"y\")) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static string CircularShift(int x, int shift) {\n        var xStr = x.ToString();\n        if (shift > xStr.Length) {\n            return new string(xStr.ToCharArray().Reverse().ToArray());\n        } else {\n            return xStr.Substring(xStr.Length - shift) + xStr.Substring(0, xStr.Length - shift);\n        }\n    }\n}\n",
            "class Global {\n    public static int DigitSum(string s) {\n        int result = 0;\n        foreach (var c in s) {\n            if (char.IsUpper(c)) {\n                result += (int)c;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int FruitDistribution(string s, int n) {\n        var words = s.Split(' ');\n        var apples = int.Parse(words[Array.IndexOf(words, \"apples\") - 1]);\n        var oranges = int.Parse(words[Array.IndexOf(words, \"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n}\n",
            "class Global {\n    public static IList<int> Pluck(IList<int> arr) {\n        var evens = new List<int>();\n        foreach (var n in arr) {\n            if (n % 2 == 0) {\n                evens.Add(n);\n            }\n        }\n        if (evens.Count == 0) {\n            return new List<int>();\n        }\n        var minEven = evens[0];\n        foreach (var n in evens) {\n            if (n < minEven) {\n                minEven = n;\n            }\n        }\n        for (var i = 0; i < arr.Count; i++) {\n            if (arr[i] == minEven) {\n                return new List<int> { minEven, i };\n            }\n        }\n        return new List<int>();\n    }\n}\n",
            "class Global {\n    public static int Search(IList<int> lst) {\n        var freqs = new Dictionary<int, int>();\n        foreach (var n in lst) {\n            freqs[n] = freqs.ContainsKey(n) ? freqs[n] + 1 : 1;\n        }\n        var goodVals = new List<int>();\n        foreach (var kv in freqs) {\n            if (kv.Value >= kv.Key) {\n                goodVals.Add(kv.Key);\n            }\n        }\n        if (goodVals.Count == 0) {\n            return -1;\n        }\n        var maxVal = goodVals[0];\n        foreach (var v in goodVals) {\n            if (v > maxVal) {\n                maxVal = v;\n            }\n        }\n        return maxVal;\n    }\n}\n",
            "class Global {\n    public static IList<int> StrangeSortList(IList<int> lst) {\n        var sl = new int[lst.Count];\n        Array.Copy(lst.ToArray(), sl, lst.Count);\n        Array.Sort(sl);\n        var result = new List<int>();\n        int left = 0, right = sl.Length - 1;\n        while (left <= right) {\n            result.Add(sl[left]);\n            left += 1;\n            if (left <= right) {\n                result.Add(sl[right]);\n                right -= 1;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double TriangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            var s = (a + b + c) / 2.0;\n            return Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        }\n        return -1.0;\n    }\n}\n",
            "class Global {\n    public static bool WillItFly(IList<int> q, int w) {\n        if (q.Count == 0) {\n            return false;\n        }\n        bool isPalin = true;\n        for (int i = 0; i < q.Count; i++) {\n            if (q[i] != q[q.Count - i - 1]) {\n                isPalin = false;\n                break;\n            }\n        }\n        int total = 0;\n        foreach (var e in q) {\n            total += e;\n        }\n        return isPalin && total <= w;\n    }\n}\n",
            "class Global {\n    public static int SmallestChange(IList<int> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.Count / 2; i++) {\n            if (arr[i] != arr[arr.Count - i - 1]) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static IList<string> TotalMatch(IList<string> lst1, IList<string> lst2) {\n        int cnt1 = 0;\n        foreach (var s in lst1) {\n            cnt1 += s.Length;\n        }\n        int cnt2 = 0;\n        foreach (var s in lst2) {\n            cnt2 += s.Length;\n        }\n        if (cnt1 <= cnt2) {\n            return lst1;\n        }\n        return lst2;\n    }\n}\n",
            "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= (int)Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static bool IsMultiplyPrime(int a) {\n        int cnt = 0;\n        for (int i = 2; i <= a; i++) {\n            if (IsPrime(i)) {\n                while (a % i == 0) {\n                    cnt++;\n                    a /= i;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n}\n",
            "class Global {\n    public static bool IsSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        var tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "class Global {\n    public static bool IsCube(int a) {\n        a = Math.Abs(a);\n        var root = (int)Math.Round(Math.Pow(a, 1.0 / 3.0));\n        return root * root * root == a;\n    }\n}\n",
            "class Global {\n    public static int HexKey(string num) {\n        int result = 0;\n        foreach (var x in num) {\n            if (x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D') {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string DecimalToBinary(int dec) {\n        var binary = Convert.ToString(dec, 2);\n        return $\"db{binary}db\";\n    }\n}\n",
            "class Global {\n    public static bool IsHappy(string s) {\n        if (s.Length < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static IList<string> NumericalLetterGrade(IList<double> grades) {\n        var result = new List<string>();\n        foreach (var g in grades) {\n            if (g == 4.0) {\n                result.Add(\"A+\");\n            } else if (g > 3.7) {\n                result.Add(\"A\");\n            } else if (g > 3.3) {\n                result.Add(\"A-\");\n            } else if (g > 3.0) {\n                result.Add(\"B+\");\n            } else if (g > 2.7) {\n                result.Add(\"B\");\n            } else if (g > 2.3) {\n                result.Add(\"B-\");\n            } else if (g > 2.0) {\n                result.Add(\"C+\");\n            } else if (g > 1.7) {\n                result.Add(\"C\");\n            } else if (g > 1.3) {\n                result.Add(\"C-\");\n            } else if (g > 1.0) {\n                result.Add(\"D+\");\n            } else if (g > 0.7) {\n                result.Add(\"D\");\n            } else if (g > 0.0) {\n                result.Add(\"D-\");\n            } else {\n                result.Add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool PrimeLength(string s) {\n        int length = s.Length;\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(length)) + 1; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int StartsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 2 * 9 * (int)Math.Pow(10, n - 2);\n    }\n}\n",
            "class Global {\n    public static string Solve(int n) {\n        int digitsSum = 0;\n        foreach (var d in n.ToString()) {\n            digitsSum += d - '0';\n        }\n        return Convert.ToString(digitsSum, 2);\n    }\n}\n",
            "class Global {\n    public static int Add(IList<int> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n                result += lst[i];\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string AntiShuffle(string s) {\n        var words = new List<string>();\n        foreach (var word in s.Split(' ')) {\n            var runes = word.ToCharArray();\n            Array.Sort(runes);\n            words.Add(new string(runes));\n        }\n        return string.Join(\" \", words);\n    }\n}\n",
            "class Global {\n    public static IList<IList<int>> GetRow(IList<IList<int>> lst, int x) {\n        var coords = new List<IList<int>>();\n        for (var i = 0; i < lst.Count; i++) {\n            for (var j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    coords.Add(new List<int> { i, j });\n                }\n            }\n        }\n        coords.Sort((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n        return coords;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortArray(IList<int> arr) {\n        if (arr.Count == 0) {\n            return new List<int>();\n        }\n        if ((arr[0] + arr[arr.Count - 1]) % 2 == 0) {\n            var result = new List<int>(arr);\n            result.Sort((a, b) => b.CompareTo(a));\n            return result;\n        } else {\n            var result = new List<int>(arr);\n            result.Sort();\n            return result;\n        }\n    }\n}\n",
            "class Global {\n    public static string Encrypt(string s) {\n        var result = new List<char>();\n        foreach (var ch in s) {\n            var shifted = ch + 4;\n            if (shifted > 'z') {\n                shifted -= 26;\n            }\n            result.Add(shifted);\n        }\n        return new string(result.ToArray());\n    }\n}\n",
            "class Global {\n    public static int? NextSmallest(IList<int> lst) {\n        var sl = new List<int>();\n        var m = new Dictionary<int, bool>();\n        foreach (var e in lst) {\n            if (!m.ContainsKey(e)) {\n                sl.Add(e);\n                m[e] = true;\n            }\n        }\n        sl.Sort();\n        if (sl.Count < 2) {\n            return null;\n        }\n        return sl[1];\n    }\n}\n",
            "class Global {\n    public static int IsBored(string s) {\n        var sentences = Regex.Split(s, @\"[.!?]\\s*\", RegexOptions.Multiline);\n        var result = 0;\n        foreach (var sentence in sentences) {\n            if (sentence.Length >= 2 && sentence.Substring(0, 2) == \"I \") {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool AnyInt(object x, object y, object z) {\n        if (x is int xInt) {\n            if (y is int yInt) {\n                if (z is int zInt) {\n                    if ((xInt + yInt == zInt) || (xInt + zInt == yInt) || (yInt + zInt == xInt)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string Encode(string message) {\n        var vowels = \"aeiouAEIOU\";\n        var result = message.Select(ch => {\n            if (char.IsLetter(ch)) {\n                var ch1 = char.IsLower(ch) ? char.ToUpper(ch) : char.ToLower(ch);\n                if (vowels.Contains(ch1)) {\n                    ch1 = (char)(ch1 + 2);\n                }\n                return ch1;\n            }\n            return ch;\n        }).ToArray();\n        return new string(result);\n    }\n}\n",
            "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static int Skjkasdkd(IList<int> lst) {\n        var primes = new List<int>();\n        foreach (var n in lst) {\n            if (IsPrime(n)) {\n                primes.Add(n);\n            }\n        }\n        if (primes.Count == 0) {\n            return 0;\n        }\n        var largest = new string(primes.Max().ToString().ToCharArray());\n        var result = 0;\n        foreach (var digit in largest) {\n            result += int.Parse(digit.ToString());\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool CheckDictCase(IDictionary<string, string> d) {\n        if (d.Count == 0) {\n            return false;\n        }\n        var keys = d.Keys;\n        return keys.All(c => char.IsLower(c[0])) || keys.All(c => char.IsUpper(c[0]));\n    }\n}\n",
            "class Global {\n    public static IList<int> CountUpTo(int n) {\n        var primes = new List<int>();\n        for (int num = 2; num < n; num++) {\n            bool isPrime = true;\n            foreach (var p in primes) {\n                if (num % p == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.Add(num);\n            }\n        }\n        return primes;\n    }\n}\n",
            "class Global {\n    public static int Multiply(int a, int b) {\n        return Math.Abs(a) % 10 * Math.Abs(b) % 10;\n    }\n}\n",
            "class Global {\n    public static int CountUpper(string s) {\n        var vowels = \"AEIOU\";\n        var result = 0;\n        for (var i = 0; i < s.Length; i++) {\n            if (i % 2 == 0 && vowels.Contains(s[i])) {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int ClosestInteger(string value) {\n        var num = float.Parse(value);\n        if (num >= 0) {\n            return (int)(num + 0.5);\n        } else {\n            return (int)(num - 0.5);\n        }\n    }\n}\n",
            "class Global {\n    public static IList<int> MakeAPile(int n) {\n        var result = new List<int>();\n        for (int i = 0; i < n; i++) {\n            result.Add(n + 2 * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> WordsString(string s) {\n        return Regex.Split(s, \"[, ]\").Where(w => w.Length > 0).ToList();\n    }\n}\n",
            "class Global {\n    public static int ChooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x != y) {\n            return y - 1;\n        }\n        return -1;\n    }\n}\n",
            "class Global {\n    public static string? RoundedAvg(int n, int m) {\n        if (n > m) {\n            return null;\n        }\n        var rAvg = (int)Math.Round((m + n) / 2.0);\n        return Convert.ToString(rAvg, 2);\n    }\n}\n",
            "class Global {\n    public static bool AllDigitsOdd(string s) {\n        foreach (var r in s) {\n            if (r % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static IList<int> UniqueDigits(IList<int> x) {\n        var result = new List<int>();\n        foreach (var num in x) {\n            if (AllDigitsOdd(num.ToString())) {\n                result.Add(num);\n            }\n        }\n        result.Sort();\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> ByLength(IList<int> arr) {\n        var digitNames = new List<string> { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" };\n        var sortedArr = new List<int>();\n        foreach (var x in arr) {\n            if (1 <= x && x <= 9) {\n                sortedArr.Add(x);\n            }\n        }\n        sortedArr.Sort((x, y) => y.CompareTo(x));\n        var result = new List<string>();\n        foreach (var x in sortedArr) {\n            result.Add(digitNames[x - 1]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> F(int n) {\n        var nums = Enumerable.Range(1, n).ToList();\n        return nums.Select((i, index) => index % 2 != 0 ? nums.Take(index).Sum() : nums.Take(index).Aggregate((x, y) => x * y)).ToList();\n    }\n}\n",
            "class Global {\n    public static bool IsPalindrome(string txt) {\n        return txt == Reverse(txt);\n    }\n    public static string Reverse(string txt) {\n        var result = new char[txt.Length];\n        for (int i = 0; i < txt.Length; i++) {\n            result[i] = txt[txt.Length - 1 - i];\n        }\n        return new string(result);\n    }\n    public static IList<int> EvenOddPalindrome(int n) {\n        var cnt = new int[2];\n        for (int i = 1; i <= n; i++) {\n            if (IsPalindrome(i.ToString())) {\n                cnt[i % 2]++;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static int DigitsSum(int n) {\n        var nStr = n.ToString();\n        if (n >= 0) {\n            return nStr.Sum(d => int.Parse(d.ToString()));\n        } else {\n            return int.Parse(nStr.Substring(0, 2)) * 2 + DigitsSum(Math.Abs(n));\n        }\n    }\n    public static int CountNums(IList<int> arr) {\n        return arr.Count(n => DigitsSum(n) > 0);\n    }\n}\n",
            "class Global {\n    public static bool MoveOneBall(IList<int> arr) {\n        if (arr.Count == 0) {\n            return true;\n        }\n        var sortedArr = new List<int>(arr);\n        sortedArr.Sort();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr.GetRange(i, arr.Count - i).SequenceEqual(sortedArr.GetRange(0, arr.Count - i)) && arr.GetRange(0, i).SequenceEqual(sortedArr.GetRange(arr.Count - i, i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string CanExchange(IList<int> lst1, IList<int> lst2) {\n        int oddCnt = 0;\n        int evenCnt = 0;\n        foreach (var num in lst1) {\n            if (num % 2 != 0) {\n                oddCnt++;\n            }\n        }\n        foreach (var num in lst2) {\n            if (num % 2 == 0) {\n                evenCnt++;\n            }\n        }\n        if (evenCnt >= oddCnt) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}\n",
            "class Global {\n    public static IDictionary<string, int> Histogram(string test) {\n        var freq = new Dictionary<string, int>();\n        var words = new List<string>();\n        foreach (var w in test.Split(' ')) {\n            if (w.Length > 0) {\n                words.Add(w);\n            }\n        }\n        foreach (var w in words) {\n            freq[w] = freq.GetValueOrDefault(w) + 1;\n        }\n        var result = new Dictionary<string, int>();\n        if (freq.Count > 0) {\n            var maxFreq = 0;\n            foreach (var v in freq.Values) {\n                if (v > maxFreq) {\n                    maxFreq = v;\n                }\n            }\n            foreach (var kv in freq) {\n                if (kv.Value == maxFreq) {\n                    result[kv.Key] = kv.Value;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> ReverseDelete(string s, string c) {\n        var s1 = string.Join(\"\", s.Where(ch => !c.Contains(ch)));\n        return new List<string> { s1, IsPalindrome(s1) ? \"yes\" : \"no\" };\n    }\n    public static bool IsPalindrome(string s) {\n        return s == string.Join(\"\", s.Reverse());\n    }\n}\n",
            "class Global {\n    public static IList<string> OddCount(IList<string> lst) {\n        var result = new List<string>();\n        foreach (var num in lst) {\n            var n = num.Sum(d => d % 2 == 1 ? 1 : 0);\n            var rs = \"the number of odd elements in the string i of the input.\";\n            result.Add(rs.Replace(\"i\", n.ToString()));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int MinSubArraySum(IList<int> nums) {\n        int minSum = 0;\n        int curSum = 0;\n        foreach (var n in nums) {\n            curSum = Math.Min(curSum + n, 0);\n            minSum = Math.Min(curSum, minSum);\n        }\n        if (minSum == 0) {\n            minSum = nums.Min();\n        }\n        return minSum;\n    }\n}\n",
            "class Global {\n    public static int MaxFill(IList<IList<int>> grid, int capacity) {\n        return grid.Sum(arr => (int)Math.Ceiling(arr.Sum() / (double)capacity));\n    }\n}\n",
            "class Global {\n    public static int CountOnes(int num) {\n        return Convert.ToString(num, 2).Count(c => c == '1');\n    }\n    public static IList<int> SortArray(IList<int> arr) {\n        return arr.OrderBy(x => (CountOnes(x), x).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<string> SelectWords(string s, int n) {\n        var consonants = \"bcdfghjklmnpqrstvwxyz\";\n        var words = s.Split(' ');\n        var result = new List<string>();\n        foreach (var w in words) {\n            if (w.Length > 0) {\n                var consonantCount = 0;\n                foreach (var c in w) {\n                    if (consonants.Contains(c.ToString().ToLower())) {\n                        consonantCount++;\n                    }\n                }\n                if (consonantCount == n) {\n                    result.Add(w);\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string GetClosestVowel(string word) {\n        var vowels = \"aeiouAEIOU\";\n        for (int i = word.Length - 2; i > 0; i--) {\n            if (vowels.Contains(word[i]) && !vowels.Contains(word[i - 1]) && !vowels.Contains(word[i + 1])) {\n                return word[i].ToString();\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static bool Check(string s) {\n        int depth = 0;\n        foreach (var ch in s) {\n            if (ch == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n    public static string MatchParens(IList<string> lst) {\n        string s1 = lst[0] + lst[1];\n        string s2 = lst[1] + lst[0];\n        if (Check(s1) || Check(s2)) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}\n",
            "class Global {\n    public static IList<int> Maximum(IList<int> arr, int k) {\n        if (k == 0) {\n            return new List<int>();\n        }\n        var result = new List<int>(arr);\n        result.Sort();\n        return result.GetRange(result.Count - k, k);\n    }\n}\n",
            "class Global {\n    public static int Solution(IList<int> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 != 0) {\n                result += lst[i];\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int AddElements(IList<int> arr, int k) {\n        int result = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr[i].ToString().Length <= 2) {\n                result += arr[i];\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> GetOddCollatz(int n) {\n        var collatz = new List<int> { 1 };\n        while (n != 1) {\n            if (n % 2 != 0) {\n                collatz.Add(n);\n                n = 3 * n + 1;\n            } else {\n                n = n / 2;\n            }\n        }\n        return collatz.OrderBy(x => x).ToList();\n    }\n}\n",
            "class Global {\n    public static bool ValidDate(string date) {\n        if (date.Length != 10 || date[2] != '-' || date[5] != '-') {\n            return false;\n        }\n        int m = int.Parse(date.Substring(0, 2));\n        int d = int.Parse(date.Substring(3, 2));\n        if (new List<int> { 1, 3, 5, 7, 8, 10, 12 }.Contains(m) && d >= 1 && d <= 31) {\n            return true;\n        }\n        if (new List<int> { 4, 6, 9, 11 }.Contains(m) && d >= 1 && d <= 30) {\n            return true;\n        }\n        if (m == 2 && d >= 1 && d <= 29) {\n            return true;\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<string> SplitWords(string txt) {\n        if (txt.Contains(\" \")) {\n            return txt.Split(\" \");\n        } else if (txt.Contains(\",\")) {\n            return txt.Split(\",\");\n        } else {\n            var result = new List<string>();\n            foreach (var c in txt) {\n                if (char.IsLower(c) && c % 2 == 0) {\n                    result.Add(c.ToString());\n                }\n            }\n            return new List<string> { result.Count.ToString() };\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsSorted(IList<int> lst) {\n        if (lst.Count < 2) {\n            return true;\n        }\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i - 1] > lst[i]) {\n                return false;\n            }\n        }\n        var freq = new Dictionary<int, int>();\n        foreach (var i in lst) {\n            freq[i] = freq.GetValueOrDefault(i, 0) + 1;\n        }\n        return freq.Values.Max() <= 2;\n    }\n}\n",
            "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static string Intersection(IList<int> interval1, IList<int> interval2) {\n        int l = Math.Max(interval1[0], interval2[0]);\n        int r = Math.Min(interval1[1], interval2[1]);\n        int length = r - l;\n        return length > 0 && IsPrime(length) ? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static int? ProdSigns(IList<int> arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n        if (arr.Contains(0)) {\n            return 0;\n        }\n        var sign = arr.Count(n => n < 0) % 2 == 1 ? -1 : 1;\n        return sign * arr.Sum(n => Math.Abs(n));\n    }\n}\n",
            "class Global {\n    public static IList<int> MinPath(IList<IList<int>> grid, int k) {\n        int n = grid.Count;\n        int minVal = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 1) {\n                    var temp = new List<int>();\n                    if (i != 0) {\n                        temp.Add(grid[i - 1][j]);\n                    }\n                    if (j != 0) {\n                        temp.Add(grid[i][j - 1]);\n                    }\n                    if (i != n - 1) {\n                        temp.Add(grid[i + 1][j]);\n                    }\n                    if (j != n - 1) {\n                        temp.Add(grid[i][j + 1]);\n                    }\n                    minVal = Math.Min(temp.ToArray());\n                }\n            }\n        }\n        var result = new List<int>();\n        for (int i = 0; i < k; i++) {\n            result.Add(i % 2 == 0 ? 1 : minVal);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> Tri(int n) {\n        if (n == 0) {\n            return new List<int> { 1 };\n        }\n        var seq = new List<int> { 1, 3 };\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                seq.Add(i / 2 + 1);\n            } else {\n                seq.Add(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int Digits(int n) {\n        var odds = new List<int>();\n        foreach (var d in n.ToString()) {\n            if (int.Parse(d.ToString()) % 2 == 1) {\n                odds.Add(int.Parse(d.ToString()));\n            }\n        }\n        return odds.Count > 0 ? odds.Aggregate((x, y) => x * y) : 0;\n    }\n}\n",
            "class Global {\n    public static bool IsNested(string s) {\n        var openIdx = new List<int>();\n        var closeIdx = new List<int>();\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i] == '[') {\n                openIdx.Add(i);\n            } else if (s[i] == ']') {\n                closeIdx.Add(i);\n            }\n        }\n        closeIdx.Reverse();\n        int cnt = 0;\n        int i = 0;\n        int l = closeIdx.Count;\n        foreach (var idx in openIdx) {\n            if (i < l && idx < closeIdx[i]) {\n                cnt += 1;\n                i += 1;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int SumSquares(IList<double> lst) {\n        int result = 0;\n        foreach (var n in lst) {\n            result += (int)Math.Pow(Math.Ceiling(n), 2);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool CheckIfLastCharIsALetter(string txt) {\n        if (string.IsNullOrEmpty(txt)) {\n            return false;\n        }\n        var last = txt.Substring(txt.LastIndexOf(' ') + 1);\n        return last.Length == 1 && char.IsLetter(last[0]);\n    }\n}\n",
            "class Global {\n    public static int CanArrange(IList<int> arr) {\n        if (arr.Count <= 1) {\n            return -1;\n        }\n        var idx = new List<int>();\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < arr[i - 1]) {\n                idx.Add(i);\n            }\n        }\n        if (idx.Count == 0) {\n            return -1;\n        }\n        return idx[idx.Count - 1];\n    }\n}\n",
            "class Global {\n    public static IList<int?> LargestSmallestIntegers(IList<int> lst) {\n        var neg = new List<int>();\n        var pos = new List<int>();\n        foreach (var i in lst) {\n            if (i < 0) {\n                neg.Add(i);\n            } else if (i > 0) {\n                pos.Add(i);\n            }\n        }\n        var maxNeg = neg.Count > 0 ? neg.Max() : (int?)null;\n        var minPos = pos.Count > 0 ? pos.Min() : (int?)null;\n        return new List<int?> { maxNeg, minPos };\n    }\n}\n",
            "class Global {\n    public static double? CompareOne(object a, object b) {\n        var a1 = AnyToReal(a);\n        var b1 = AnyToReal(b);\n        if (a1 == b1) {\n            return null;\n        } else if (a1 > b1) {\n            return a1;\n        } else {\n            return b1;\n        }\n    }\n    public static double AnyToReal(object o) {\n        if (o is string) {\n            return double.Parse((o as string).Replace(',', '.'));\n        } else if (o is int) {\n            return (double)(int)o;\n        } else if (o is float) {\n            return (double)(float)o;\n        } else {\n            throw new Exception(\"Type Error\");\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int SpecialFactorial(int n) {\n        int fact = 1;\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string FixSpaces(string txt) {\n        return Regex.Replace(txt, @\"\\s{3,}\", \"-\").Replace(\" \", \"_\");\n    }\n}\n",
            "class Global {\n    public static string FileNameCheck(string fileName) {\n        var suf = new List<string> { \"txt\", \"exe\", \"dll\" };\n        var lst = fileName.Split('.');\n        if (lst.Length != 2 || !suf.Contains(lst[1]) || lst[0].Length == 0 || !char.IsLetter(lst[0][0]) || lst[0].Count(char.IsDigit) > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
            "class Global {\n    public static int SumSquares(IList<int> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            int e = lst[i];\n            if (i % 3 == 0) {\n                result += e * e;\n            } else if (i % 4 == 0) {\n                result += e * e * e;\n            } else {\n                result += e;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static string WordsInSentence(string sentence) {\n        var words = sentence.Split(\" \");\n        return string.Join(\" \", words.Where(w => IsPrime(w.Length)));\n    }\n}\n",
            "class Global {\n    public static bool Simplify(string x, string n) {\n        var xs = x.Split('/');\n        var ns = n.Split('/');\n        var num = int.Parse(xs[0]) * int.Parse(ns[0]);\n        var den = int.Parse(xs[1]) * int.Parse(ns[1]);\n        return num % den == 0;\n    }\n}\n",
            "class Global {\n    public static int DigitsSum(int n) {\n        var nStr = n.ToString();\n        if (n >= 0) {\n            return nStr.Sum(d => int.Parse(d.ToString()));\n        } else {\n            return int.Parse(nStr.Substring(0, 2)) * 2 + DigitsSum(Math.Abs(n));\n        }\n    }\n    public static IList<int> OrderByPoints(IList<int> nums) {\n        return nums.OrderBy(n => DigitsSum(n)).ToList();\n    }\n}\n",
            "class Global {\n    public static int SpecialFilter(IList<int> nums) {\n        var odds = \"13579\";\n        var result = 0;\n        foreach (var n in nums) {\n            if (n > 10 && n % 2 == 1 && odds.Contains(n.ToString()[0..1])) {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int GetMaxTriples(int n) {\n        var c = new int[3];\n        for (int i = 1; i <= n; i++) {\n            var a = i * i - i + 1;\n            c[a % 3]++;\n        }\n        return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n    }\n}\n",
            "class Global {\n    public static IList<string> Bf(string planet1, string planet2) {\n        var names = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        if (!names.Contains(planet1) || !names.Contains(planet2)) {\n            return new List<string>();\n        }\n        var l = names.IndexOf(planet1);\n        var r = names.IndexOf(planet2);\n        if (l > r) {\n            l = r;\n            r = l;\n        }\n        if (l == r) {\n            return new List<string>();\n        }\n        return names.GetRange(l + 1, r - l - 1);\n    }\n}\n",
            "class Global {\n    public static IList<string> SortedListSum(IList<string> lst) {\n        var result = new List<string>();\n        foreach (var s in lst) {\n            if (s.Length % 2 == 0) {\n                result.Add(s);\n            }\n        }\n        result.Sort((a, b) => {\n            if (a.Length == b.Length) {\n                return a.CompareTo(b);\n            }\n            return a.Length.CompareTo(b.Length);\n        });\n        return result;\n    }\n}\n",
            "class Global {\n    public static int XOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i <= Math.Floor(Math.Sqrt(n)) + 1; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int DoubleTheDifference(IList<double> lst) {\n        int result = 0;\n        foreach (var n in lst) {\n            if (n >= 0 && n % 2 == 1) {\n                result += (int)(n * n);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> Compare(IList<int> game, IList<int> guess) {\n        var result = new List<int>();\n        for (int i = 0; i < game.Count; i++) {\n            result.Add(Math.Abs(game[i] - guess[i]));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string StrongestExtension(string className, IList<string> extensions) {\n        double maxS = double.NegativeInfinity;\n        string maxExt = \"\";\n        foreach (var ext in extensions) {\n            int upper = ext.Count(c => char.IsUpper(c));\n            int lower = ext.Count(c => char.IsLower(c));\n            double s = upper - lower;\n            if (s > maxS) {\n                maxS = s;\n                maxExt = ext;\n            }\n        }\n        return $\"{className}.{maxExt}\";\n    }\n}\n",
            "class Global {\n    public static bool CycpatternCheck(string a, string b) {\n        if (a.Length < b.Length) {\n            return false;\n        }\n        for (int i = 0; i < b.Length; i++) {\n            if (a.Contains(b.Substring(i) + b.Substring(0, i))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<int> EvenOddCount(int num) {\n        var ds = Math.Abs(num).ToString();\n        var even = ds.Count(d => d % 2 == 0);\n        return new List<int> { even, ds.Length - even };\n    }\n}\n",
            "class Global {\n    public static string IntToMiniRoman(int num) {\n        var values = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        var numerals = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        var res = new List<string>();\n        for (var i = 0; i < values.Length; i++) {\n            while (num >= values[i]) {\n                res.Add(numerals[i]);\n                num -= values[i];\n            }\n        }\n        return string.Join(\"\", res);\n    }\n}\n",
            "class Global {\n    public static bool RightAngleTriangle(int a, int b, int c) {\n        var s = new List<int> { a, b, c };\n        s.Sort();\n        return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n    }\n}\n",
            "class Global {\n    public static string FindMax(IList<string> words) {\n        int maxCnt = 0;\n        string maxW = \"\";\n        foreach (var w in words) {\n            int cnt = new HashSet<char>(w).Count;\n            if (cnt > maxCnt) {\n                maxCnt = cnt;\n                maxW = w;\n            } else if (cnt == maxCnt) {\n                maxW = string.Compare(maxW, w) > 0 ? maxW : w;\n            }\n        }\n        return maxW;\n    }\n}\n",
            "class Global {\n    public static IList<int> Eat(int num, int need, int remaining) {\n        if (need <= remaining) {\n            return new List<int> { num + need, remaining - need };\n        }\n        return new List<int> { num + remaining, 0 };\n    }\n}\n",
            "class Global {\n    public static int DoAlgebra(IList<string> operators, IList<int> operands) {\n        var ops = new List<string>(operators);\n        var nums = new List<int>(operands);\n        int i = ops.Count - 1;\n        while (i >= 0) {\n            if (ops[i] == \"**\") {\n                nums[i] = (int)Math.Pow(nums[i], nums[i + 1]);\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n            }\n            i -= 1;\n        }\n        i = 0;\n        while (i < ops.Count) {\n            if (ops[i] == \"*\") {\n                nums[i] = nums[i] * nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i -= 1;\n            } else if (ops[i] == \"//\") {\n                nums[i] = nums[i] / nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        i = 0;\n        while (i < ops.Count) {\n            if (ops[i] == \"+\") {\n                nums[i] = nums[i] + nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i -= 1;\n            } else if (ops[i] == \"-\") {\n                nums[i] = nums[i] - nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        return nums[0];\n    }\n}\n",
            "class Global {\n    public static string Solve(string s) {\n        if (!s.Any(ch => char.IsLetter(ch))) {\n            return Reverse(s);\n        }\n        var result = new List<char>();\n        foreach (var ch in s) {\n            if (!char.IsLetter(ch)) {\n                result.Add(ch);\n            } else if (char.IsUpper(ch)) {\n                result.Add(char.ToLower(ch));\n            } else if (char.IsLower(ch)) {\n                result.Add(char.ToUpper(ch));\n            }\n        }\n        return new string(result.ToArray());\n    }\n    public static string Reverse(string s) {\n        var result = new char[s.Length];\n        for (int i = 0; i < s.Length; i++) {\n            result[s.Length - 1 - i] = s[i];\n        }\n        return new string(result);\n    }\n}\n",
            "class Global {\n    public static string? StringToMd5(string txt) {\n        if (txt.Length == 0) {\n            return null;\n        }\n        var md5_hash = MD5.Create();\n        var txt_bytes = System.Text.Encoding.UTF8.GetBytes(txt);\n        md5_hash.ComputeHash(txt_bytes);\n        var md5_encoded = md5_hash.Hash;\n        var md5_encoded_str = BitConverter.ToString(md5_encoded).Replace(\"-\", \"\");\n        return md5_encoded_str;\n    }\n}\n",
            "class Global {\n    public static IList<int> GenerateIntegers(int a, int b) {\n        var lower = Math.Max(2, Math.Min(a, b));\n        var upper = Math.Min(8, Math.Max(a, b));\n        var result = new List<int>();\n        for (var i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                result.Add(i);\n            }\n        }\n        return result;\n    }\n}\n"
        ],
        "dart": [
            "bool hasCloseElements(List<double> numbers, double threshold) {\n    for (int i = 0; i < numbers.length; i++) {\n        for (int j = i + 1; j < numbers.length; j++) {\n            if ((numbers[i] - numbers[j]).abs() < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "List<String> separateParenGroups(String parenString) {\n    var groups = <String>[];\n    var stk = <String>[];\n    var currentGroup = \"\";\n    var parens = parenString.replaceAll(\" \", \"\");\n    for (var ch in parens.runes) {\n        if (ch == '('.codeUnitAt(0)) {\n            stk.add(String.fromCharCode(ch));\n            currentGroup += String.fromCharCode(ch);\n        } else if (ch == ')'.codeUnitAt(0)) {\n            stk.removeLast();\n            currentGroup += String.fromCharCode(ch);\n            if (stk.isEmpty) {\n                groups.add(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - num.floor();\n}\n",
            "bool belowZero(List<int> operations) {\n    var balance = 0;\n    for (int op in operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(List<double> numbers) {\n    var mean = 0.0;\n    for (var n in numbers) {\n        mean += n;\n    }\n    mean /= numbers.length;\n    var deviation = 0.0;\n    for (var n in numbers) {\n        deviation += (n - mean).abs();\n    }\n    return deviation / numbers.length;\n}\n",
            "List<int> intersperse(List<int> numbers, int delimiter) {\n    var result = <int>[];\n    for (int i = 0; i < numbers.length; i++) {\n        if (i != 0) {\n            result.add(delimiter);\n        }\n        result.add(numbers[i]);\n    }\n    return result;\n}\n",
            "List<int> parseNestedParens(String parenString) {\n    var result = <int>[];\n    var parenGroups = parenString.split(' ');\n    for (var group in parenGroups) {\n        var maxDepth = 0;\n        var depth = 0;\n        for (var ch in group.runes) {\n            if (ch == '('.codeUnitAt(0)) {\n                depth += 1;\n                maxDepth = max(maxDepth, depth);\n            } else if (ch == ')'.codeUnitAt(0)) {\n                depth -= 1;\n            }\n        }\n        result.add(maxDepth);\n    }\n    return result;\n}\n",
            "List<String> filterBySubstring(List<String> strs, String substring) {\n    var result = <String>[];\n    for (String s in strs) {\n        if (s.contains(substring)) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n",
            "List<int> sumProduct(List<int> numbers) {\n    var nSum = 0;\n    for (var n in numbers) {\n        nSum += n;\n    }\n    var nProduct = 1;\n    for (var n in numbers) {\n        nProduct *= n;\n    }\n    return [nSum, nProduct];\n}\n",
            "List<int> rollingMax(List<int> numbers) {\n    var maxSoFar = double.negativeInfinity;\n    var result = <int>[];\n    for (int num in numbers) {\n        maxSoFar = max(maxSoFar, num);\n        result.add(maxSoFar);\n    }\n    return result;\n}\n",
            "bool isPalindrome(String s) {\n    return s == reverse(s);\n}\nString makePalindrome(String s) {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (int i = 0; i < s.length; i++) {\n        if (isPalindrome(s.substring(i))) {\n            return s + reverse(s.substring(0, i));\n        }\n    }\n    return \"\";\n}\nString reverse(String s) {\n    var runes = s.runes.toList();\n    for (int i = 0, j = runes.length - 1; i < j; i++, j--) {\n        var temp = runes[i];\n        runes[i] = runes[j];\n        runes[j] = temp;\n    }\n    return String.fromCharCodes(runes);\n}\n",
            "String stringXor(String a, String b) {\n    var result = '';\n    for (int i = 0; i < a.length; i++) {\n        if (a[i] == b[i]) {\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n    return result;\n}\n",
            "String? longest(List<String> strs) {\n    if (strs.isEmpty) {\n        return null;\n    }\n    String longestS = strs[0];\n    for (String s in strs) {\n        if (s.length > longestS.length) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    }\n    return greatestCommonDivisor(b, a % b);\n}\n",
            "List<String> allPrefixes(String s) {\n    var prefixes = <String>[];\n    for (int i = 0; i < s.length; i++) {\n        prefixes.add(s.substring(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "String stringSequence(int n) {\n    var result = <String>[];\n    for (int i = 0; i <= n; i++) {\n        result.add(i.toString());\n    }\n    return result.join(' ');\n}\n",
            "int countDistinctCharacters(String s) {\n    return s.toLowerCase().split('').toSet().length;\n}\n",
            "List<int> parseMusic(String musicString) {\n    var durations = {\"o\": 4, \"o|\": 2, \".|\": 1};\n    var notes = musicString.split(\" \");\n    return notes.map((note) => durations[note]).toList();\n}\n",
            "int howManyTimes(String s, String substring) {\n    var times = 0;\n    for (var i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "String sortNumbers(String numbers) {\n    var numDict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    var numList = <String>[];\n    for (var e in numbers.split(\" \")) {\n        if (numDict.containsKey(e)) {\n            numList.add(e);\n        }\n    }\n    numList.sort((a, b) => numDict[a] - numDict[b]);\n    return numList.join(\" \");\n}\n",
            "List<double> findClosestElements(List<double> numbers) {\n    var sortedNumbers = List<double>.from(numbers);\n    sortedNumbers.sort();\n    var minDiff = double.infinity;\n    var closestPair = <double>[];\n    for (var i = 1; i < sortedNumbers.length; i++) {\n        var diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "List<double> rescaleToUnit(List<double> numbers) {\n    var minNum = double.infinity;\n    var maxNum = -double.infinity;\n    for (var num in numbers) {\n        if (num < minNum) {\n            minNum = num;\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    if (minNum == maxNum) {\n        return List.filled(numbers.length, 0.0);\n    }\n    var result = <double>[];\n    for (var i = 0; i < numbers.length; i++) {\n        result.add((numbers[i] - minNum) / (maxNum - minNum));\n    }\n    return result;\n}\n",
            "List<int> filterIntegers(List<Object> values) {\n    var result = <int>[];\n    for (var x in values) {\n        if (x is int) {\n            result.add(x);\n        }\n    }\n    return result;\n}\n",
            "int strLength(String s) {\n    return s.length;\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return n ~/ i;\n        }\n    }\n    return 1;\n}\n",
            "List<int> factorize(int n) {\n    var factors = <int>[];\n    var divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor);\n            n ~/= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "List<int> removeDuplicates(List<int> numbers) {\n    var counts = <int, int>{};\n    for (int num in numbers) {\n        counts[num] = (counts[num] ?? 0) + 1;\n    }\n    var res = <int>[];\n    for (int num in numbers) {\n        if (counts[num] == 1) {\n            res.add(num);\n        }\n    }\n    return res;\n}\n",
            "String flipCase(String s) {\n    var flipped = <int>[];\n    for (int ch in s.runes) {\n        if (!RegExp(r'[a-zA-Z]').hasMatch(String.fromCharCode(ch))) {\n            flipped.add(ch);\n        } else if (RegExp(r'[a-z]').hasMatch(String.fromCharCode(ch))) {\n            flipped.add(ch - 32);\n        } else if (RegExp(r'[A-Z]').hasMatch(String.fromCharCode(ch))) {\n            flipped.add(ch + 32);\n        }\n    }\n    return String.fromCharCodes(flipped);\n}\n",
            "String concatenate(List<String> strs) {\n    return strs.join(\"\");\n}\n",
            "List<String> filterByPrefix(List<String> strs, String prefixStr) {\n    var result = <String>[];\n    for (String s in strs) {\n        if (s.startsWith(prefixStr)) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n",
            "List<int> getPositive(List<int> l) {\n    var result = <int>[];\n    for (int num in l) {\n        if (num > 0) {\n            result.add(num);\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "double poly(List<int> xs, double x) {\n    var res = 0.0;\n    for (int i = 0; i < xs.length; i++) {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\ndouble findZero(List<int> xs) {\n    var x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while ((x1 - x2).abs() > 1e-10) {\n        var mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "List<int> sortThird(List<int> l) {\n    var sortedThird = <int>[];\n    for (int i = 0; i < l.length; i += 3) {\n        sortedThird.add(l[i]);\n    }\n    sortedThird.sort();\n    var result = <int>[];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 == 0) {\n            result.add(sortedThird[i ~/ 3]);\n        } else {\n            result.add(l[i]);\n        }\n    }\n    return result;\n}\n",
            "List<int> listUnique(List<int> l) {\n    var m = <int, bool>{};\n    for (int e in l) {\n        m[e] = true;\n    }\n    var result = <int>[];\n    for (int k in m.keys) {\n        result.add(k);\n    }\n    result.sort();\n    return result;\n}\n",
            "int maxElement(List<int> l) {\n    if (l.isEmpty) {\n        return 0;\n    }\n    var max = l[0];\n    for (int e in l) {\n        if (e > max) {\n            max = e;\n        }\n    }\n    return max;\n}\n",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += RegExp(r'7').allMatches(i.toString()).length;\n        }\n    }\n    return cnt;\n}\n",
            "List<int> sortEven(List<int> l) {\n    var sortedEven = <int>[];\n    for (int i = 0; i < l.length; i += 2) {\n        sortedEven.add(l[i]);\n    }\n    sortedEven.sort();\n    var result = <int>[];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 2 == 0) {\n            result.add(sortedEven[i ~/ 2]);\n        } else {\n            result.add(l[i]);\n        }\n    }\n    return result;\n}\n",
            "String encodeCyclic(String s) {\n    var result = <String>[];\n    for (int i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.add(s.substring(i));\n        } else {\n            result.add(s.substring(i + 1, i + 3));\n            result.add(s.substring(i, i + 1));\n        }\n    }\n    return result.join(\"\");\n}\nString decodeCyclic(String s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).floor(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint primeFib(int n) {\n    var f = [0, 1];\n    var cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt++;\n        }\n    }\n    return f[1];\n}\n",
            "bool triplesSumToZero(List<int> l) {\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return n * n;\n}\n",
            "List<int> incrList(List<int> l) {\n    var result = List<int>.filled(l.length, 0);\n    for (int i = 0; i < l.length; i++) {\n        result[i] = l[i] + 1;\n    }\n    return result;\n}\n",
            "bool pairsSumToZero(List<int> l) {\n    var seen = <int, bool>{};\n    for (int num in l) {\n        if (seen[-num] == true) {\n            return true;\n        }\n        seen[num] = true;\n    }\n    return false;\n}\n",
            "String changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    var digits = <String>[];\n    while (x > 0) {\n        digits.add(x % bas);\n        x ~/= bas;\n    }\n    return digits.reversed.join();\n}\n",
            "double triangleArea(int a, int h) {\n    return a * h / 2;\n}\n",
            "int fib4(int n) {\n    var fib = [0, 0, 2, 0];\n    for (int i = 4; i <= n; i++) {\n        fib[i % 4] = fib.reduce((a, b) => a + b);\n    }\n    return fib[n % 4];\n}\n",
            "double median(List<double> l) {\n    var sl = List<double>.from(l);\n    sl.sort();\n    if (sl.length % 2 != 0) {\n        return sl[sl.length ~/ 2];\n    }\n    return (sl[sl.length ~/ 2] + sl[sl.length ~/ 2 - 1]) / 2;\n}\n",
            "bool isPalindrome(String txt) {\n    return txt == reverse(txt);\n}\nString reverse(String s) {\n    var runes = s.runes.toList();\n    for (var i = 0, j = runes.length - 1; i < j; i++, j--) {\n        var temp = runes[i];\n        runes[i] = runes[j];\n        runes[j] = temp;\n    }\n    return String.fromCharCodes(runes);\n}\n",
            "int modp(int n, int p) {\n    var ret = 1;\n    for (var i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "String encodeShift(String s) {\n    var result = <int>[];\n    for (int ch in s.codeUnits) {\n        result.add(((ch - 97 + 5) % 26) + 97);\n    }\n    return String.fromCharCodes(result);\n}\nString decodeShift(String s) {\n    var result = <int>[];\n    for (int ch in s.codeUnits) {\n        result.add(((ch - 97 + 21) % 26) + 97);\n    }\n    return String.fromCharCodes(result);\n}\n",
            "String removeVowels(String txt) {\n    var vowels = \"aeiouAEIOU\";\n    var result = \"\";\n    for (var char in txt.runes) {\n        if (!vowels.contains(String.fromCharCode(char))) {\n            result += String.fromCharCode(char);\n        }\n    }\n    return result;\n}\n",
            "bool belowThreshold(List<int> l, int t) {\n    for (int x in l) {\n        if (x >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(String s0, String s1) {\n    return s0.split('').toSet().equals(s1.split('').toSet());\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n",
            "bool correctBracketing(String brackets) {\n    var depth = 0;\n    for (var b in brackets.codeUnits) {\n        if (b == '<'.codeUnitAt(0)) {\n            depth += 1;\n        } else if (b == '>'.codeUnitAt(0)) {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(List<int> l) {\n    var diff = <int>[];\n    for (int i = 0; i < l.length - 1; i++) {\n        diff.add(l[i + 1] - l[i]);\n    }\n    return diff.every((x) => x <= 0) || diff.every((x) => x >= 0);\n}\n",
            "List<int> common(List<int> l1, List<int> l2) {\n    return (l1.toSet().intersection(l2.toSet()).toList()..sort());\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n ~/= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    var result = 0;\n    for (var i = 0; i <= n; i++) {\n        result += i;\n    }\n    return result;\n}\n",
            "bool correctBracketing(String brackets) {\n    int depth = 0;\n    for (int i = 0; i < brackets.length; i++) {\n        if (brackets[i] == '(') {\n            depth += 1;\n        } else if (brackets[i] == ')') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "List<int> derivative(List<int> xs) {\n    var result = <int>[];\n    for (int i = 1; i < xs.length; i++) {\n        result.add(xs[i] * i);\n    }\n    return result;\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    var a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(String s) {\n    var vowels = \"aeiou\";\n    var cnt = 0;\n    for (var i = 0; i < s.length; i++) {\n        if (vowels.contains(s[i].toLowerCase()) || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n",
            "String circularShift(int x, int shift) {\n    var xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.split('').reversed.join();\n    } else {\n        return xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift);\n    }\n}\n",
            "int digitSum(String s) {\n    var result = 0;\n    for (var c in s.characters) {\n        if (c.isUppercase) {\n            result += c.codePoint;\n        }\n    }\n    return result;\n}\n",
            "int fruitDistribution(String s, int n) {\n    var words = s.split(' ');\n    var apples = int.parse(words[words.indexOf('apples') - 1]);\n    var oranges = int.parse(words[words.indexOf('oranges') - 1]);\n    return n - apples - oranges;\n}\n",
            "List<int> pluck(List<int> arr) {\n    var evens = <int>[];\n    for (int n in arr) {\n        if (n % 2 == 0) {\n            evens.add(n);\n        }\n    }\n    if (evens.isEmpty) {\n        return [];\n    }\n    var minEven = evens[0];\n    for (int n in evens) {\n        if (n < minEven) {\n            minEven = n;\n        }\n    }\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] == minEven) {\n            return [minEven, i];\n        }\n    }\n    return [];\n}\n",
            "int search(List<int> lst) {\n    var freqs = <int, int>{};\n    for (int n in lst) {\n        freqs[n] = (freqs[n] ?? 0) + 1;\n    }\n    var goodVals = <int>[];\n    for (int k in freqs.keys) {\n        if (freqs[k]! >= k) {\n            goodVals.add(k);\n        }\n    }\n    if (goodVals.isEmpty) {\n        return -1;\n    }\n    var maxVal = goodVals[0];\n    for (int v in goodVals) {\n        if (v > maxVal) {\n            maxVal = v;\n        }\n    }\n    return maxVal;\n}\n",
            "List<int> strangeSortList(List<int> lst) {\n    var sl = List<int>.from(lst);\n    sl.sort();\n    var result = <int>[];\n    var left = 0;\n    var right = sl.length - 1;\n    while (left <= right) {\n        result.add(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.add(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        var s = (a + b + c) / 2.0;\n        return math.sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    return -1.0;\n}\n",
            "bool willItFly(List<int> q, int w) {\n    if (q.isEmpty) {\n        return false;\n    }\n    var isPalin = true;\n    for (int i = 0; i < q.length; i++) {\n        if (q[i] != q[q.length - i - 1]) {\n            isPalin = false;\n            break;\n        }\n    }\n    var total = 0;\n    for (int e in q) {\n        total += e;\n    }\n    return isPalin && total <= w;\n}\n",
            "int smallestChange(List<int> arr) {\n    var ans = 0;\n    for (var i = 0; i < arr.length ~/ 2; i++) {\n        if (arr[i] != arr[arr.length - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;\n}\n",
            "List<String> totalMatch(List<String> lst1, List<String> lst2) {\n    var cnt1 = 0;\n    for (var s in lst1) {\n        cnt1 += s.length;\n    }\n    var cnt2 = 0;\n    for (var s in lst2) {\n        cnt2 += s.length;\n    }\n    if (cnt1 <= cnt2) {\n        return lst1;\n    }\n    return lst2;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= math.sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nbool isMultiplyPrime(int a) {\n    var cnt = 0;\n    for (int i = 2; i <= a; i++) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt++;\n                a ~/= i;\n            }\n        }\n    }\n    return cnt == 3;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    var tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    a = a.abs();\n    var root = (a ^ (1.0 / 3.0)).round();\n    return root * root * root == a;\n}\n",
            "int hexKey(String num) {\n    var result = 0;\n    for (var x in num.split('')) {\n        if (x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D') {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "String decimalToBinary(int dec) {\n    var binary = dec.toRadixString(2);\n    return 'db$binary' 'db';\n}\n",
            "bool isHappy(String s) {\n    if (s.length < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.length - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "List<String> numericalLetterGrade(List<double> grades) {\n    var result = <String>[];\n    for (double g in grades) {\n        if (g == 4.0) {\n            result.add(\"A+\");\n        } else if (g > 3.7) {\n            result.add(\"A\");\n        } else if (g > 3.3) {\n            result.add(\"A-\");\n        } else if (g > 3.0) {\n            result.add(\"B+\");\n        } else if (g > 2.7) {\n            result.add(\"B\");\n        } else if (g > 2.3) {\n            result.add(\"B-\");\n        } else if (g > 2.0) {\n            result.add(\"C+\");\n        } else if (g > 1.7) {\n            result.add(\"C\");\n        } else if (g > 1.3) {\n            result.add(\"C-\");\n        } else if (g > 1.0) {\n            result.add(\"D+\");\n        } else if (g > 0.7) {\n            result.add(\"D\");\n        } else if (g > 0.0) {\n            result.add(\"D-\");\n        } else {\n            result.add(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(String s) {\n    var length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (var i = 2; i <= sqrt(length).floor(); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * pow(10, n - 2).toInt();\n}\n",
            "String solve(int n) {\n    var digitsSum = 0;\n    for (var d in n.toString().split('')) {\n        digitsSum += int.parse(d);\n    }\n    return digitsSum.toRadixString(2);\n}\n",
            "int add(List<int> lst) {\n    var result = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "String antiShuffle(String s) {\n    var words = <String>[];\n    for (var word in s.split(' ')) {\n        var runes = word.runes.toList();\n        runes.sort();\n        words.add(String.fromCharCodes(runes));\n    }\n    return words.join(' ');\n}\n",
            "List<List<int>> getRow(List<List<int>> lst, int x) {\n    var coords = <List<int>>[];\n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                coords.add([i, j]);\n            }\n        }\n    }\n    coords.sort((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n    return coords;\n}\n",
            "List<int> sortArray(List<int> arr) {\n    if (arr.isEmpty) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 == 0) {\n        return arr.reversed.toList();\n    } else {\n        return arr.sorted();\n    }\n}\n",
            "String encrypt(String s) {\n    var result = <int>[];\n    for (int ch in s.codeUnits) {\n        var shifted = ch + 4;\n        if (shifted > 'z'.codeUnitAt(0)) {\n            shifted -= 26;\n        }\n        result.add(shifted);\n    }\n    return String.fromCharCodes(result);\n}\n",
            "int? nextSmallest(List<int> lst) {\n    var sl = <int>[];\n    var m = <int, bool>{};\n    for (int e in lst) {\n        if (!m.containsKey(e)) {\n            sl.add(e);\n            m[e] = true;\n        }\n    }\n    sl.sort();\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}\n",
            "int isBored(String s) {\n    var sentences = RegExp(r'[.!?]\\s*').allMatches(s).map((m) => s.substring(m.start, m.end)).toList();\n    var result = 0;\n    for (var sentence in sentences) {\n        if (sentence.length >= 2 && sentence.substring(0, 2) == \"I \") {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "bool anyInt(Object x, Object y, Object z) {\n    if (x is int) {\n        if (y is int) {\n            if (z is int) {\n                if ((x + y == z) || (x + z == y) || (y + z == x)) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "String encode(String message) {\n    var vowels = \"aeiouAEIOU\";\n    var result = <String>[];\n    for (var ch in message.split('')) {\n        if (ch.contains(RegExp(r'[a-zA-Z]'))) {\n            var ch1 = ch.toUpperCase()\n                if (ch.contains(RegExp(r'[a-z]')))\n                else ch.toLowerCase();\n            if (vowels.contains(ch1)) {\n                ch1 = String.fromCharCode(ch1.codeUnitAt(0) + 2);\n            }\n            result.add(ch1);\n        } else {\n            result.add(ch);\n        }\n    }\n    return result.join('');\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).floor(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint skjkasdkd(List<int> lst) {\n    var primes = lst.where((n) => isPrime(n)).toList();\n    if (primes.isEmpty) {\n        return 0;\n    }\n    var largest = primes.reduce(max).toString();\n    return largest.split('').map((digit) => int.parse(digit)).reduce((a, b) => a + b);\n}\n",
            "bool checkDictCase(Map<String, String> d) {\n    if (d.isEmpty) {\n        return false;\n    }\n    return d.keys.every((c) => c.toLowerCase() == c) || d.keys.every((c) => c.toUpperCase() == c);\n}\n",
            "List<int> countUpTo(int n) {\n    var primes = <int>[];\n    for (int num = 2; num < n; num++) {\n        if (primes.every((p) => num % p != 0)) {\n            primes.add(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    return (a.abs() % 10) * (b.abs() % 10);\n}\n",
            "int countUpper(String s) {\n    var vowels = \"AEIOU\";\n    var result = 0;\n    for (var i = 0; i < s.length; i++) {\n        if (i % 2 == 0 && vowels.contains(s[i])) {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "int closestInteger(String value) {\n    var num = double.parse(value);\n    if (num >= 0) {\n        return num.round();\n    } else {\n        return (num - 0.5).round();\n    }\n}\n",
            "List<int> makeAPile(int n) {\n    var result = List<int>.generate(n, (i) => n + 2 * i);\n    return result;\n}\n",
            "List<String> wordsString(String s) {\n    var re = RegExp(r\"[, ]\");\n    return re.split(s).where((w) => w.length > 0).toList();\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    if (x != y) {\n        return y - 1;\n    }\n    return -1;\n}\n",
            "String? roundedAvg(int n, int m) {\n    if (n > m) {\n        return null;\n    }\n    var rAvg = (m + n) ~/ 2 + 1;\n    return rAvg.toRadixString(2).substring(1);\n}\n",
            "bool allDigitsOdd(String s) {\n    for (int i = 0; i < s.length; i++) {\n        if (int.parse(s[i]) % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nList<int> uniqueDigits(List<int> x) {\n    var result = <int>[];\n    for (int num in x) {\n        if (allDigitsOdd(num.toString())) {\n            result.add(num);\n        }\n    }\n    result.sort();\n    return result;\n}\n",
            "List<String> byLength(List<int> arr) {\n    var digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    var sortedArr = arr.where((x) => 1 <= x && x <= 9).toList()..sort((a, b) => b.compareTo(a));\n    return sortedArr.map((x) => digitNames[x - 1]).toList();\n}\n",
            "List<int> f(int n) {\n    var nums = List<int>.generate(n, (i) => i + 1);\n    return nums.map((i) {\n        if (i % 2 != 0) {\n            return nums.take(i).reduce((x, y) => x + y);\n        } else {\n            return nums.take(i).reduce((x, y) => x * y);\n        }\n    }).toList();\n}\n",
            "bool isPalindrome(String txt) {\n    return txt == txt.split('').reversed.join('');\n}\nList<int> evenOddPalindrome(int n) {\n    var cnt = [0, 0];\n    for (int i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2]++;\n        }\n    }\n    return cnt;\n}\n",
            "int digitsSum(int n) {\n    var nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split('').map((d) => int.parse(d)).reduce((a, b) => a + b);\n    } else {\n        return int.parse(nStr.substring(0, 2)) * 2 + digitsSum(n.abs());\n    }\n}\nint countNums(List<int> arr) {\n    return arr.where((n) => digitsSum(n) > 0).length;\n}\n",
            "bool moveOneBall(List<int> arr) {\n    if (arr.isEmpty) {\n        return true;\n    }\n    var sortedArr = List<int>.from(arr);\n    sortedArr.sort();\n    for (int i = 0; i < arr.length; i++) {\n        if (arr.getRange(i, arr.length).toList() == sortedArr.getRange(0, arr.length - i).toList() && arr.getRange(0, i).toList() == sortedArr.getRange(arr.length - i, arr.length).toList()) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "String canExchange(List<int> lst1, List<int> lst2) {\n    var oddCnt = 0;\n    var evenCnt = 0;\n    for (var num in lst1) {\n        if (num % 2 != 0) {\n            oddCnt++;\n        }\n    }\n    for (var num in lst2) {\n        if (num % 2 == 0) {\n            evenCnt++;\n        }\n    }\n    if (evenCnt >= oddCnt) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n",
            "Map<String,int> histogram(String test) {\n    var freq = <String,int>{};\n    var words = <String>[];\n    for (var w in test.split(\" \")) {\n        if (w.length > 0) {\n            words.add(w);\n        }\n    }\n    for (var w in words) {\n        freq[w] = (freq[w] ?? 0) + 1;\n    }\n    var result = <String,int>{};\n    if (freq.isNotEmpty) {\n        var maxFreq = 0;\n        for (var v in freq.values) {\n            if (v > maxFreq) {\n                maxFreq = v;\n            }\n        }\n        for (var k in freq.keys) {\n            if (freq[k] == maxFreq) {\n                result[k] = freq[k];\n            }\n        }\n    }\n    return result;\n}\n",
            "List<String> reverseDelete(String s, String c) {\n    var s1 = s.split('').where((ch) => !c.contains(ch)).join('');\n    return [s1, isPalindrome(s1) ? 'yes' : 'no'];\n}\nbool isPalindrome(String s) {\n    return s == s.split('').reversed.join('');\n}\n",
            "List<String> oddCount(List<String> lst) {\n    var result = <String>[];\n    for (String num in lst) {\n        var n = num.codeUnits.where((d) => d % 2 == 1).length;\n        var rs = \"the number of odd elements in the string i of the input.\";\n        result.add(rs.replaceAll(\"i\", n.toString()));\n    }\n    return result;\n}\n",
            "int minSubArraySum(List<int> nums) {\n    int minSum = 0;\n    int curSum = 0;\n    for (int n in nums) {\n        curSum = math.min(curSum + n, 0);\n        minSum = math.min(curSum, minSum);\n    }\n    if (minSum == 0) {\n        minSum = nums.reduce(math.min);\n    }\n    return minSum;\n}\n",
            "int maxFill(List<List<int>> grid, int capacity) {\n    return grid.map((arr) => (arr.reduce((a, b) => a + b) / capacity).ceil()).reduce((a, b) => a + b);\n}\n",
            "int countOnes(int num) {\n    return num.toRadixString(2).split('').where((c) => c == '1').length;\n}\nList<int> sortArray(List<int> arr) {\n    return arr.toList()\n        ..sort((a, b) => countOnes(a).compareTo(countOnes(b))\n        ..sort((a, b) => a.compareTo(b));\n}\n",
            "List<String> selectWords(String s, int n) {\n    var consonants = \"bcdfghjklmnpqrstvwxyz\";\n    var words = s.split(\" \");\n    var result = <String>[];\n    for (var w in words) {\n        if (w.isNotEmpty) {\n            var consonantCount = 0;\n            for (var c in w) {\n                if (consonants.contains(c.toLowerCase())) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(w);\n            }\n        }\n    }\n    return result;\n}\n",
            "String getClosestVowel(String word) {\n    var vowels = \"aeiouAEIOU\";\n    for (int i = word.length - 2; i > 0; i--) {\n        if (vowels.contains(word[i]) && !vowels.contains(word[i - 1]) && !vowels.contains(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "bool check(String s) {\n    int depth = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (s[i] == '(') {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\nString matchParens(List<String> lst) {\n    String s1 = lst[0] + lst[1];\n    String s2 = lst[1] + lst[0];\n    if (check(s1) || check(s2)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n",
            "List<int> maximum(List<int> arr, int k) {\n    if (k == 0) {\n        return [];\n    }\n    return arr..sort().sublist(arr.length - k);\n}\n",
            "int solution(List<int> lst) {\n    var result = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "int addElements(List<int> arr, int k) {\n    var result = 0;\n    for (int n in arr.take(k)) {\n        if (n.toString().length <= 2) {\n            result += n;\n        }\n    }\n    return result;\n}\n",
            "List<int> getOddCollatz(int n) {\n    var collatz = <int>[1];\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.add(n);\n            n = 3 * n + 1;\n        } else {\n            n = n ~/ 2;\n        }\n    }\n    return collatz..sort();\n}\n",
            "bool validDate(String date) {\n    if (date.length != 10 || date[2] != \"-\" || date[5] != \"-\") {\n        return false;\n    }\n    var m = int.parse(date.substring(0, 2));\n    var d = int.parse(date.substring(3, 5));\n    if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n        return d >= 1 && d <= 31;\n    }\n    if (m == 4 || m == 6 || m == 9 || m == 11) {\n        return d >= 1 && d <= 30;\n    }\n    if (m == 2) {\n        return d >= 1 && d <= 29;\n    }\n    return false;\n}\n",
            "List<String> splitWords(String txt) {\n    if (txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        var result = <String>[];\n        for (var c in txt.runes) {\n            if (isLowerCase(c) && c % 2 == 0) {\n                result.add(String.fromCharCode(c));\n            }\n        }\n        return [result.length.toString()];\n    }\n}\n",
            "bool isSorted(List<int> lst) {\n    if (!lst.every((i) => lst[i - 1] <= lst[i])) {\n        return false;\n    }\n    var freq = <int, int>{};\n    for (int i in lst) {\n        freq[i] = (freq[i] ?? 0) + 1;\n    }\n    return (freq.values.fold(0, max) ?? 0) <= 2;\n}\n",
            "String intersection(List<int> interval1, List<int> interval2) {\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n}\nbool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).floor(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int? prodSigns(List<int> arr) {\n    if (arr.isEmpty) {\n        return null;\n    }\n    if (arr.contains(0)) {\n        return 0;\n    }\n    var sign = arr.where((n) => n < 0).length % 2 == 1 ? -1 : 1;\n    return sign * arr.map((n) => n.abs()).reduce((a, b) => a + b);\n}\n",
            "List<int> minPath(List<List<int>> grid, int k) {\n    var n = grid.length;\n    var minVal = n * n + 1;\n    for (var i = 0; i < n; i++) {\n        for (var j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                var temp = <int>[];\n                if (i != 0) {\n                    temp.add(grid[i - 1][j]);\n                }\n                if (j != 0) {\n                    temp.add(grid[i][j - 1]);\n                }\n                if (i != n - 1) {\n                    temp.add(grid[i + 1][j]);\n                }\n                if (j != n - 1) {\n                    temp.add(grid[i][j + 1]);\n                }\n                minVal = temp.reduce(min);\n            }\n        }\n    }\n    var result = <int>[];\n    for (var i = 0; i < k; i++) {\n        result.add(i % 2 == 0 ? 1 : minVal);\n    }\n    return result;\n}\n",
            "List<int> tri(int n) {\n    if (n == 0) {\n        return [1];\n    }\n    var seq = [1, 3];\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq.add(i ~/ 2 + 1);\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) ~/ 2);\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    var odds = n.toString().split('').map((d) => int.parse(d)).where((d) => d % 2 == 1).toList();\n    return odds.isNotEmpty ? odds.reduce((x, y) => x * y) : 0;\n}\n",
            "bool isNested(String s) {\n    var openIdx = <int>[];\n    var closeIdx = <int>[];\n    for (int i = 0; i < s.length; i++) {\n        if (s[i] == '[') {\n            openIdx.add(i);\n        } else if (s[i] == ']') {\n            closeIdx.add(i);\n        }\n    }\n    closeIdx = closeIdx.reversed.toList();\n    var cnt = 0;\n    var i = 0;\n    var l = closeIdx.length;\n    for (var idx in openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "int sumSquares(List<double> lst) {\n    var result = 0;\n    for (var n in lst) {\n        result += pow(ceil(n), 2).toInt();\n    }\n    return result;\n}\n",
            "bool checkIfLastCharIsALetter(String txt) {\n    if (txt.isEmpty) {\n        return false;\n    }\n    var last = txt.substring(txt.lastIndexOf(' ') + 1);\n    return last.length == 1 && last.codeUnits.first.isLetter();\n}\n",
            "int canArrange(List<int> arr) {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    var idx = <int>[];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            idx.add(i);\n        }\n    }\n    if (idx.length == 0) {\n        return -1;\n    }\n    return idx[idx.length - 1];\n}\n",
            "List<int?> largestSmallestIntegers(List<int> lst) {\n    var neg = lst.where((i) => i < 0).toList();\n    var pos = lst.where((i) => i > 0).toList();\n    var maxNeg = neg.isNotEmpty ? neg.reduce(max) : null;\n    var minPos = pos.isNotEmpty ? pos.reduce(min) : null;\n    return [maxNeg, minPos];\n}\n",
            "double? compareOne(Object a, Object b) {\n    double? a1 = anyToReal(a);\n    double? b1 = anyToReal(b);\n    if (a1 == b1) {\n        return null;\n    } else if (a1! > b1!) {\n        return a1;\n    } else {\n        return b1;\n    }\n}\ndouble? anyToReal(Object o) {\n    if (o is String) {\n        return double.parse(o.replaceAll(',', '.'));\n    } else if (o is int) {\n        return o.toDouble();\n    } else if (o is double) {\n        return o;\n    } else {\n        throw Exception('Type Error');\n    }\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    var fact = 1;\n    var result = 1;\n    for (var i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "String fixSpaces(String txt) {\n    return txt.replaceAll(RegExp(r\"\\s{3,}\"), \"-\").replaceAll(\" \", \"_\");\n}\n",
            "String fileNameCheck(String fileName) {\n    var suf = [\"txt\", \"exe\", \"dll\"];\n    var lst = fileName.split(\".\");\n    if (lst.length != 2 || !contains(suf, lst[1]) || lst[0].length == 0 || !isLetter(lst[0][0]) || lst[0].replaceAll(RegExp(r'[0-9]'), \"\").length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nbool contains(List<String> s, String e) {\n    for (var a in s) {\n        if (a == e) {\n            return true;\n        }\n    }\n    return false;\n}\nbool isLetter(String s) {\n    return RegExp(r'[a-zA-Z]').hasMatch(s);\n}\n",
            "int sumSquares(List<int> lst) {\n    var result = 0;\n    for (var i = 0; i < lst.length; i++) {\n        var e = lst[i];\n        if (i % 3 == 0) {\n            result += e * e;\n        } else if (i % 4 == 0) {\n            result += e * e * e;\n        } else {\n            result += e;\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).floor(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nString wordsInSentence(String sentence) {\n    var words = sentence.split(\" \");\n    return words.where((w) => isPrime(w.length)).join(\" \");\n}\n",
            "bool simplify(String x, String n) {\n    var xs = x.split(\"/\");\n    var ns = n.split(\"/\");\n    var num = int.parse(xs[0]) * int.parse(ns[0]);\n    var den = int.parse(xs[1]) * int.parse(ns[1]);\n    return num % den == 0;\n}\n",
            "int digitsSum(int n) {\n    var nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split('').map((d) => int.parse(d)).reduce((a, b) => a + b);\n    } else {\n        return int.parse(nStr.substring(0, 2)) * 2 + digitsSum(n.abs());\n    }\n}\nList<int> orderByPoints(List<int> nums) {\n    return nums..sort((a, b) => digitsSum(a).compareTo(digitsSum(b)));\n}\n",
            "int specialFilter(List<int> nums) {\n    var odds = \"13579\";\n    var result = 0;\n    for (var n in nums) {\n        if (n > 10 && n % 2 == 1 && odds.contains(n.toString()[0])) {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "int getMaxTriples(int n) {\n    var c = [3];\n    for (int i = 1; i <= n; i++) {\n        var a = i*i - i + 1;\n        c[a%3]++;\n    }\n    return (c[0]*c[1]*c[2] + (c[0]*(c[0]-1)*(c[0]-2) + c[1]*(c[1]-1)*(c[1]-2) + c[2]*(c[2]-1)*(c[2]-2)) ~/ 6;\n}\n",
            "List<String> bf(String planet1, String planet2) {\n    var names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.contains(planet1) || !names.contains(planet2)) {\n        return [];\n    }\n    var l = names.indexOf(planet1);\n    var r = names.indexOf(planet2);\n    if (l > r) {\n        l = r;\n        r = l;\n    }\n    if (l == r) {\n        return [];\n    }\n    return names.sublist(l + 1, r);\n}\n",
            "List<String> sortedListSum(List<String> lst) {\n    var result = <String>[];\n    for (String s in lst) {\n        if (s.length % 2 == 0) {\n            result.add(s);\n        }\n    }\n    result.sort((a, b) {\n        if (a.length == b.length) {\n            return a.compareTo(b);\n        }\n        return a.length.compareTo(b.length);\n    });\n    return result;\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= sqrt(n).floor(); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(List<double> lst) {\n    var result = 0;\n    for (var n in lst) {\n        if (n >= 0 && n % 2 == 1) {\n            result += n * n;\n        }\n    }\n    return result;\n}\n",
            "List<int> compare(List<int> game, List<int> guess) {\n    return List.generate(game.length, (i) => (game[i] - guess[i]).abs());\n}\n",
            "String strongestExtension(String className, List<String> extensions) {\n    var maxS = double.negativeInfinity;\n    var maxExt = \"\";\n    for (var ext in extensions) {\n        var upper = ext.split(\"\").where((c) => c.toUpperCase() == c).length;\n        var lower = ext.split(\"\").where((c) => c.toLowerCase() == c).length;\n        var s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return \"$className.$maxExt\";\n}\n",
            "bool cycpatternCheck(String a, String b) {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (int i = 0; i < b.length; i++) {\n        if (a.contains(b.substring(i) + b.substring(0, i))) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "List<int> evenOddCount(int num) {\n    var ds = num.abs().toString();\n    var even = ds.split('').where((d) => d.codeUnitAt(0) % 2 == 0).length;\n    return [even, ds.length - even];\n}\n",
            "String intToMiniRoman(int num) {\n    var values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    var numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var res = <String>[];\n    for (var i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.add(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join(\"\");\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    var s = [a, b, c];\n    s.sort();\n    return s[0]*s[0] + s[1]*s[1] == s[2]*s[2];\n}\n",
            "String findMax(List<String> words) {\n    int maxCnt = 0;\n    String maxW = \"\";\n    for (String w in words) {\n        int cnt = w.split(\"\").toSet().length;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt == maxCnt) {\n            maxW = maxW.compareTo(w) > 0 ? maxW : w;\n        }\n    }\n    return maxW;\n}\n",
            "List<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    }\n    return [num + remaining, 0];\n}\n",
            "int doAlgebra(List<String> operators, List<int> operands) {\n    var ops = operators.toList();\n    var nums = operands.toList();\n    var i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]);\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] ~/ nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "String solve(String s) {\n    if (!s.contains(RegExp(r'[a-zA-Z]'))) {\n        return reverse(s);\n    }\n    var result = <int>[];\n    for (var ch in s.runes) {\n        if (!RegExp(r'[a-zA-Z]').hasMatch(String.fromCharCode(ch))) {\n            result.add(ch);\n        } else if (RegExp(r'[A-Z]').hasMatch(String.fromCharCode(ch))) {\n            result.add(ch.toLowerCase());\n        } else if (RegExp(r'[a-z]').hasMatch(String.fromCharCode(ch))) {\n            result.add(ch.toUpperCase());\n        }\n    }\n    return String.fromCharCodes(result);\n}\nString reverse(String s) {\n    var result = <int>[];\n    for (var i = s.length - 1; i >= 0; i--) {\n        result.add(s.codeUnitAt(i));\n    }\n    return String.fromCharCodes(result);\n}\n",
            "String? stringToMd5(String txt) {\n    if (txt.isEmpty) {\n        return null;\n    }\n    var md5_hash = md5.convert(utf8.encode(txt));\n    var md5_encoded_str = md5_hash.toString();\n    return md5_encoded_str;\n}\n",
            "List<int> generateIntegers(int a, int b) {\n    var lower = max(2, min(a, b));\n    var upper = min(8, max(a, b));\n    var result = <int>[];\n    for (var i = lower; i <= upper; i++) {\n        if (i % 2 == 0) {\n            result.add(i);\n        }\n    }\n    return result;\n}\n"
        ],
        "java": [
            "class Global {\n    public static boolean hasCloseElements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<String> separateParenGroups(String parenString) {\n        var groups = new ArrayList<String>();\n        var stk = new ArrayList<Character>();\n        var currentGroup = \"\";\n        var parens = parenString.replace(\" \", \"\");\n        for (char ch : parens.toCharArray()) {\n            if (ch == '(') {\n                stk.add(ch);\n                currentGroup += ch;\n            } else if (ch == ')') {\n                stk.remove(stk.size() - 1);\n                currentGroup += ch;\n                if (stk.size() == 0) {\n                    groups.add(currentGroup);\n                    currentGroup = \"\";\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double truncateNumber(double num) {\n        return num - Math.floor(num);\n    }\n}\n",
            "class Global {\n    public static boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (Integer op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (Double n : numbers) {\n            mean += n;\n        }\n        mean /= numbers.size();\n        double deviation = 0.0;\n        for (Double n : numbers) {\n            deviation += Math.abs(n - mean);\n        }\n        return deviation / numbers.size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i != 0) {\n                result.add(delimiter);\n            }\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseNestedParens(String parenString) {\n        var result = new ArrayList<Integer>();\n        var parenGroups = parenString.split(\" \");\n        for (String group : parenGroups) {\n            int maxDepth = 0;\n            int depth = 0;\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    depth += 1;\n                    maxDepth = Math.max(maxDepth, depth);\n                } else if (ch == ')') {\n                    depth -= 1;\n                }\n            }\n            result.add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> filterBySubstring(List<String> strs, String substring) {\n        var result = new ArrayList<String>();\n        for (String s : strs) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sumProduct(List<Integer> numbers) {\n        int nSum = 0;\n        for (Integer n : numbers) {\n            nSum += n;\n        }\n        int nProduct = 1;\n        for (Integer n : numbers) {\n            nProduct *= n;\n        }\n        return Arrays.asList(nSum, nProduct);\n    }\n}\n",
            "class Global {\n    public static List<Integer> rollingMax(List<Integer> numbers) {\n        int maxSoFar = Integer.MIN_VALUE;\n        var result = new ArrayList<Integer>();\n        for (Integer num : numbers) {\n            maxSoFar = Math.max(maxSoFar, num);\n            result.add(maxSoFar);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isPalindrome(String s) {\n        return s.equals(reverse(s));\n    }\n    public static String makePalindrome(String s) {\n        if (isPalindrome(s)) {\n            return s;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (isPalindrome(s.substring(i))) {\n                return s + reverse(s.substring(0, i));\n            }\n        }\n        return \"\";\n    }\n    public static String reverse(String s) {\n        char[] runes = s.toCharArray();\n        for (int i = 0, j = runes.length - 1; i < j; i++, j--) {\n            char tmp = runes[i];\n            runes[i] = runes[j];\n            runes[j] = tmp;\n        }\n        return new String(runes);\n    }\n}\n",
            "class Global {\n    public static String stringXor(String a, String b) {\n        var result = \"\";\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result += \"0\";\n            } else {\n                result += \"1\";\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static Optional<String> longest(List<String> strs) {\n        if (strs.size() == 0) {\n            return Optional.empty();\n        }\n        String longestS = strs.get(0);\n        for (String s : strs) {\n            if (s.length() > longestS.length()) {\n                longestS = s;\n            }\n        }\n        return Optional.of(longestS);\n    }\n}\n",
            "class Global {\n    public static int greatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "class Global {\n    public static List<String> allPrefixes(String s) {\n        var prefixes = new ArrayList<String>();\n        for (int i = 0; i < s.length(); i++) {\n            prefixes.add(s.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static String stringSequence(int n) {\n        var result = new ArrayList<String>();\n        for (int i = 0; i <= n; i++) {\n            result.add(String.valueOf(i));\n        }\n        return String.join(\" \", result);\n    }\n}\n",
            "class Global {\n    public static int countDistinctCharacters(String s) {\n        return new HashSet<Character>(s.toLowerCase().chars().mapToObj(c -> (char) c).collect(Collectors.toList())).size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseMusic(String musicString) {\n        var durations = new HashMap<String, Integer>();\n        durations.put(\"o\", 4);\n        durations.put(\"o|\", 2);\n        durations.put(\".|\", 1);\n        var notes = musicString.split(\" \");\n        var result = new ArrayList<Integer>();\n        for (String note : notes) {\n            result.add(durations.get(note));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int howManyTimes(String s, String substring) {\n        int times = 0;\n        for (int i = 0; i < s.length() - substring.length() + 1; i++) {\n            if (s.substring(i, i + substring.length()).equals(substring)) {\n                times += 1;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static String sortNumbers(String numbers) {\n        var numDict = new HashMap<String, Integer>();\n        numDict.put(\"zero\", 0);\n        numDict.put(\"one\", 1);\n        numDict.put(\"two\", 2);\n        numDict.put(\"three\", 3);\n        numDict.put(\"four\", 4);\n        numDict.put(\"five\", 5);\n        numDict.put(\"six\", 6);\n        numDict.put(\"seven\", 7);\n        numDict.put(\"eight\", 8);\n        numDict.put(\"nine\", 9);\n        var numList = new ArrayList<String>();\n        for (String e : numbers.split(\" \")) {\n            if (numDict.containsKey(e)) {\n                numList.add(e);\n            }\n        }\n        numList.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return numDict.get(o1) - numDict.get(o2);\n            }\n        });\n        return String.join(\" \", numList);\n    }\n}\n",
            "class Global {\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        var sortedNumbers = new ArrayList<Double>(numbers);\n        Collections.sort(sortedNumbers);\n        double minDiff = Double.POSITIVE_INFINITY;\n        var closestPair = new ArrayList<Double>();\n        for (int i = 1; i < sortedNumbers.size(); i++) {\n            double diff = sortedNumbers.get(i) - sortedNumbers.get(i - 1);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = new ArrayList<Double>(Arrays.asList(sortedNumbers.get(i - 1), sortedNumbers.get(i)));\n            }\n        }\n        return closestPair;\n    }\n}\n",
            "class Global {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        double minNum = Double.MAX_VALUE;\n        double maxNum = -Double.MAX_VALUE;\n        for (Double num : numbers) {\n            if (num < minNum) {\n                minNum = num;\n            }\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n        if (minNum == maxNum) {\n            return new ArrayList<Double>();\n        }\n        var result = new ArrayList<Double>();\n        for (Double num : numbers) {\n            result.add((num - minNum) / (maxNum - minNum));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> filterIntegers(List<Object> values) {\n        var result = new ArrayList<Integer>();\n        for (Object x : values) {\n            if (x instanceof Integer) {\n                result.add((Integer) x);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int strLength(String s) {\n        return s.length();\n    }\n}\n",
            "class Global {\n    public static int largestDivisor(int n) {\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}\n",
            "class Global {\n    public static List<Integer> factorize(int n) {\n        var factors = new ArrayList<Integer>();\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.add(divisor);\n                n /= divisor;\n            } else {\n                divisor += 1;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static List<Integer> removeDuplicates(List<Integer> numbers) {\n        var counts = new HashMap<Integer, Integer>();\n        for (Integer num : numbers) {\n            counts.put(num, counts.getOrDefault(num, 0) + 1);\n        }\n        var res = new ArrayList<Integer>();\n        for (Integer num : numbers) {\n            if (counts.get(num) == 1) {\n                res.add(num);\n            }\n        }\n        return res;\n    }\n}\n",
            "class Global {\n    public static String flipCase(String s) {\n        var flipped = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (!Character.isLetter(ch)) {\n                flipped.append(ch);\n            } else if (Character.isLowerCase(ch)) {\n                flipped.append(Character.toUpperCase(ch));\n            } else if (Character.isUpperCase(ch)) {\n                flipped.append(Character.toLowerCase(ch));\n            }\n        }\n        return flipped.toString();\n    }\n}\n",
            "class Global {\n    public static String concatenate(List<String> strs) {\n        var sb = new StringBuilder();\n        for (String s : strs) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}\n",
            "class Global {\n    public static List<String> filterByPrefix(List<String> strs, String prefixStr) {\n        var result = new ArrayList<String>();\n        for (String s : strs) {\n            if (s.startsWith(prefixStr)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> getPositive(List<Integer> l) {\n        var result = new ArrayList<Integer>();\n        for (Integer num : l) {\n            if (num > 0) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static double poly(List<Integer> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.size(); i++) {\n            res += xs.get(i) * Math.pow(x, i);\n        }\n        return res;\n    }\n    public static double findZero(List<Integer> xs) {\n        double x1 = 1.0, x2 = -1.0;\n        while (poly(xs, x1) * poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (poly(xs, mid) == 0) {\n                return mid;\n            } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortThird(List<Integer> l) {\n        var sortedThird = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i += 3) {\n            sortedThird.add(l.get(i));\n        }\n        Collections.sort(sortedThird);\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(sortedThird.get(i / 3));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> listUnique(List<Integer> l) {\n        var m = new HashMap<Integer, Boolean>();\n        for (Integer e : l) {\n            m.put(e, true);\n        }\n        var result = new ArrayList<Integer>();\n        for (Integer k : m.keySet()) {\n            result.add(k);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n",
            "class Global {\n    public static int maxElement(List<Integer> l) {\n        if (l.size() == 0) {\n            return 0;\n        }\n        int max = l.get(0);\n        for (Integer e : l) {\n            if (e > max) {\n                max = e;\n            }\n        }\n        return max;\n    }\n}\n",
            "class Global {\n    public static int fizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += Integer.toString(i).split(\"7\").length - 1;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortEven(List<Integer> l) {\n        var sortedEven = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i += 2) {\n            sortedEven.add(l.get(i));\n        }\n        Collections.sort(sortedEven);\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(sortedEven.get(i / 2));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String encodeCyclic(String s) {\n        var result = new ArrayList<String>();\n        for (int i = 0; i < s.length(); i += 3) {\n            if (i + 3 > s.length()) {\n                result.add(s.substring(i));\n            } else {\n                result.add(s.substring(i + 1, i + 3));\n                result.add(s.substring(i, i + 1));\n            }\n        }\n        return String.join(\"\", result);\n    }\n    public static String decodeCyclic(String s) {\n        return encodeCyclic(encodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static int primeFib(int n) {\n        var f = new int[]{0, 1};\n        int cnt = 0;\n        while (cnt < n) {\n            f = new int[]{f[1], f[0] + f[1]};\n            if (isPrime(f[1])) {\n                cnt++;\n            }\n        }\n        return f[1];\n    }\n}\n",
            "class Global {\n    public static boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static int carRaceCollision(int n) {\n        return n * n;\n    }\n}\n",
            "class Global {\n    public static List<Integer> incrList(List<Integer> l) {\n        var result = new ArrayList<Integer>();\n        for (Integer e : l) {\n            result.add(e + 1);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean pairsSumToZero(List<Integer> l) {\n        var seen = new HashMap<Integer, Boolean>();\n        for (Integer num : l) {\n            if (seen.containsKey(-num)) {\n                return true;\n            }\n            seen.put(num, true);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String changeBase(int x, int bas) {\n        if (x == 0) {\n            return \"0\";\n        }\n        var digits = new ArrayList<String>();\n        while (x > 0) {\n            digits.add(String.valueOf(x % bas));\n            x /= bas;\n        }\n        return String.join(\"\", digits);\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int h) {\n        return (double) a * (double) h / 2;\n    }\n}\n",
            "class Global {\n    public static int fib4(int n) {\n        var fib = new int[]{0, 0, 2, 0};\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = sum(fib);\n        }\n        return fib[n % 4];\n    }\n    public static int sum(int[] arr) {\n        int result = 0;\n        for (int e : arr) {\n            result += e;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double median(List<Double> l) {\n        var sl = new ArrayList<Double>(l);\n        Collections.sort(sl);\n        if (sl.size() % 2 != 0) {\n            return sl.get(sl.size() / 2);\n        }\n        return (sl.get(sl.size() / 2) + sl.get(sl.size() / 2 - 1)) / 2;\n    }\n}\n",
            "class Global {\n    public static boolean isPalindrome(String txt) {\n        return txt.equals(reverse(txt));\n    }\n    public static String reverse(String s) {\n        var runes = s.toCharArray();\n        for (int i = 0, j = runes.length - 1; i < j; i++, j--) {\n            var tmp = runes[i];\n            runes[i] = runes[j];\n            runes[j] = tmp;\n        }\n        return new String(runes);\n    }\n}\n",
            "class Global {\n    public static int modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "class Global {\n    public static String encodeShift(String s) {\n        var result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            result.append((char) (((ch - 97 + 5) % 26) + 97));\n        }\n        return result.toString();\n    }\n    public static String decodeShift(String s) {\n        var result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            result.append((char) (((ch - 97 + 21) % 26) + 97));\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static String removeVowels(String txt) {\n        var vowels = \"aeiouAEIOU\";\n        var result = \"\";\n        for (char c : txt.toCharArray()) {\n            if (!vowels.contains(String.valueOf(c))) {\n                result += c;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean belowThreshold(List<Integer> l, int t) {\n        for (Integer x : l) {\n            if (x >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static boolean sameChars(String s0, String s1) {\n        return new HashSet<Character>(s0.toCharArray()).equals(new HashSet<Character>(s1.toCharArray()));\n    }\n}\n",
            "class Global {\n    public static int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth += 1;\n            } else if (b == '>') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static boolean monotonic(List<Integer> l) {\n        var diff = new ArrayList<Integer>();\n        for (int i = 0; i < l.size() - 1; i++) {\n            diff.add(l.get(i + 1) - l.get(i));\n        }\n        return diff.stream().allMatch(x -> x <= 0) || diff.stream().allMatch(x -> x >= 0);\n    }\n}\n",
            "class Global {\n    public static List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        var set1 = new HashSet<Integer>(l1);\n        var set2 = new HashSet<Integer>(l2);\n        var result = new ArrayList<Integer>();\n        for (Integer e : set1) {\n            if (set2.contains(e)) {\n                result.add(e);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n",
            "class Global {\n    public static int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int sumToN(int n) {\n        int result = 0;\n        for (int i = 0; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth += 1;\n            } else if (b == ')') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> derivative(List<Integer> xs) {\n        var result = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n        int a = 0, b = 0, c = 1;\n        while (n > 2) {\n            a = b;\n            b = c;\n            c = a + b + c;\n            n -= 1;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int vowelsCount(String s) {\n        String vowels = \"aeiou\";\n        int cnt = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (vowels.contains(s.substring(i, i + 1).toLowerCase()) || (i == s.length() - 1 && s.substring(i, i + 1).toLowerCase().equals(\"y\"))) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static String circularShift(int x, int shift) {\n        String xStr = String.valueOf(x);\n        if (shift > xStr.length()) {\n            return new StringBuilder(xStr).reverse().toString();\n        } else {\n            return xStr.substring(xStr.length() - shift) + xStr.substring(0, xStr.length() - shift);\n        }\n    }\n}\n",
            "class Global {\n    public static int digitSum(String s) {\n        int result = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                result += c;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int fruitDistribution(String s, int n) {\n        var words = s.split(\" \");\n        var apples = Integer.parseInt(words[Arrays.asList(words).indexOf(\"apples\") - 1]);\n        var oranges = Integer.parseInt(words[Arrays.asList(words).indexOf(\"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n}\n",
            "class Global {\n    public static List<Integer> pluck(List<Integer> arr) {\n        var evens = new ArrayList<Integer>();\n        for (Integer n : arr) {\n            if (n % 2 == 0) {\n                evens.add(n);\n            }\n        }\n        if (evens.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        int minEven = evens.get(0);\n        for (Integer n : evens) {\n            if (n < minEven) {\n                minEven = n;\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == minEven) {\n                return Arrays.asList(minEven, i);\n            }\n        }\n        return new ArrayList<Integer>();\n    }\n}\n",
            "class Global {\n    public static int search(List<Integer> lst) {\n        var freqs = new HashMap<Integer, Integer>();\n        for (Integer n : lst) {\n            freqs.put(n, freqs.getOrDefault(n, 0) + 1);\n        }\n        var goodVals = new ArrayList<Integer>();\n        for (Map.Entry<Integer, Integer> entry : freqs.entrySet()) {\n            if (entry.getValue() >= entry.getKey()) {\n                goodVals.add(entry.getKey());\n            }\n        }\n        if (goodVals.size() == 0) {\n            return -1;\n        }\n        var maxVal = goodVals.get(0);\n        for (Integer v : goodVals) {\n            if (v > maxVal) {\n                maxVal = v;\n            }\n        }\n        return maxVal;\n    }\n}\n",
            "class Global {\n    public static List<Integer> strangeSortList(List<Integer> lst) {\n        var sl = new ArrayList<Integer>(lst);\n        Collections.sort(sl);\n        var result = new ArrayList<Integer>();\n        int left = 0, right = sl.size() - 1;\n        while (left <= right) {\n            result.add(sl.get(left));\n            left += 1;\n            if (left <= right) {\n                result.add(sl.get(right));\n                right -= 1;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        }\n        return -1.0;\n    }\n}\n",
            "class Global {\n    public static boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        boolean isPalin = true;\n        for (int i = 0; i < q.size(); i++) {\n            if (q.get(i) != q.get(q.size() - i - 1)) {\n                isPalin = false;\n                break;\n            }\n        }\n        int total = 0;\n        for (Integer e : q) {\n            total += e;\n        }\n        return isPalin && total <= w;\n    }\n}\n",
            "class Global {\n    public static int smallestChange(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (arr.get(i) != arr.get(arr.size() - i - 1)) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int cnt1 = 0;\n        for (String s : lst1) {\n            cnt1 += s.length();\n        }\n        int cnt2 = 0;\n        for (String s : lst2) {\n            cnt2 += s.length();\n        }\n        if (cnt1 <= cnt2) {\n            return lst1;\n        }\n        return lst2;\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= (int) Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static boolean isMultiplyPrime(int a) {\n        int cnt = 0;\n        for (int i = 2; i <= a; i++) {\n            if (isPrime(i)) {\n                while (a % i == 0) {\n                    cnt++;\n                    a /= i;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n}\n",
            "class Global {\n    public static boolean isSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "class Global {\n    public static boolean isCube(int a) {\n        a = Math.abs(a);\n        double root = Math.round(Math.pow(a, 1.0 / 3.0));\n        return root * root * root == a;\n    }\n}\n",
            "class Global {\n    public static int hexKey(String num) {\n        int result = 0;\n        for (char x : num.toCharArray()) {\n            if (x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D') {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String decimalToBinary(int dec) {\n        String binary = Integer.toBinaryString(dec);\n        return String.format(\"db%sdb\", binary);\n    }\n}\n",
            "class Global {\n    public static boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static List<String> numericalLetterGrade(List<Double> grades) {\n        var result = new ArrayList<String>();\n        for (Double g : grades) {\n            if (g == 4.0) {\n                result.add(\"A+\");\n            } else if (g > 3.7) {\n                result.add(\"A\");\n            } else if (g > 3.3) {\n                result.add(\"A-\");\n            } else if (g > 3.0) {\n                result.add(\"B+\");\n            } else if (g > 2.7) {\n                result.add(\"B\");\n            } else if (g > 2.3) {\n                result.add(\"B-\");\n            } else if (g > 2.0) {\n                result.add(\"C+\");\n            } else if (g > 1.7) {\n                result.add(\"C\");\n            } else if (g > 1.3) {\n                result.add(\"C-\");\n            } else if (g > 1.0) {\n                result.add(\"D+\");\n            } else if (g > 0.7) {\n                result.add(\"D\");\n            } else if (g > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean primeLength(String s) {\n        int length = s.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= sqrt(length) + 1; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static int sqrt(int n) {\n        return BigInteger.valueOf(n).sqrt().intValue();\n    }\n}\n",
            "class Global {\n    public static int startsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 2 * 9 * (int) Math.pow(10, n - 2);\n    }\n}\n",
            "class Global {\n    public static String solve(int n) {\n        int digitsSum = 0;\n        for (char d : String.valueOf(n).toCharArray()) {\n            digitsSum += d - '0';\n        }\n        return Integer.toBinaryString(digitsSum);\n    }\n}\n",
            "class Global {\n    public static int add(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String antiShuffle(String s) {\n        var words = new ArrayList<String>();\n        for (String word : s.split(\" \")) {\n            var runes = new ArrayList<Character>();\n            for (char rune : word.toCharArray()) {\n                runes.add(rune);\n            }\n            runes.sort(Character::compare);\n            words.add(String.valueOf(runes.toArray()));\n        }\n        return String.join(\" \", words);\n    }\n}\n",
            "class Global {\n    public static List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        var coords = new ArrayList<List<Integer>>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    coords.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        coords.sort((a, b) -> a.get(0) < b.get(0) || (a.get(0) == b.get(0) && a.get(1) > b.get(1)));\n        return coords;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        if ((arr.get(0) + arr.get(arr.size() - 1)) % 2 == 0) {\n            arr.sort(Comparator.reverseOrder());\n        } else {\n            arr.sort(Comparator.naturalOrder());\n        }\n        return arr;\n    }\n}\n",
            "class Global {\n    public static String encrypt(String s) {\n        var result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            char shifted = (char) (ch + 4);\n            if (shifted > 'z') {\n                shifted -= 26;\n            }\n            result.append(shifted);\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> nextSmallest(List<Integer> lst) {\n        var sl = new ArrayList<Integer>();\n        var m = new HashMap<Integer, Boolean>();\n        for (Integer e : lst) {\n            if (!m.containsKey(e)) {\n                sl.add(e);\n                m.put(e, true);\n            }\n        }\n        Collections.sort(sl);\n        if (sl.size() < 2) {\n            return Optional.empty();\n        }\n        return Optional.of(sl.get(1));\n    }\n}\n",
            "class Global {\n    public static int isBored(String s) {\n        Pattern pattern = Pattern.compile(\"[.!?]\\\\s*\");\n        Matcher matcher = pattern.matcher(s);\n        int result = 0;\n        while (matcher.find()) {\n            String sentence = matcher.group();\n            if (sentence.length() >= 2 && sentence.substring(0, 2).equals(\"I \")) {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int xInt = (int) x;\n            int yInt = (int) y;\n            int zInt = (int) z;\n            if ((xInt + yInt == zInt) || (xInt + zInt == yInt) || (yInt + zInt == xInt)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String encode(String message) {\n        var vowels = \"aeiouAEIOU\";\n        var result = new StringBuilder();\n        for (char ch : message.toCharArray()) {\n            if (Character.isAlphabetic(ch)) {\n                char ch1 = Character.toUpperCase(ch) if Character.isLowerCase(ch) else Character.toLowerCase(ch);\n                if (vowels.indexOf(ch1) != -1) {\n                    ch1 = (char) (ch1 + 2);\n                }\n                result.append(ch1);\n            } else {\n                result.append(ch);\n            }\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static int skjkasdkd(List<Integer> lst) {\n        var primes = new ArrayList<Integer>();\n        for (Integer n : lst) {\n            if (isPrime(n)) {\n                primes.add(n);\n            }\n        }\n        if (primes.size() == 0) {\n            return 0;\n        }\n        var largest = String.valueOf(Collections.max(primes));\n        var result = 0;\n        for (char digit : largest.toCharArray()) {\n            result += Integer.parseInt(String.valueOf(digit));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean checkDictCase(Map<String, String> d) {\n        if (d.isEmpty()) {\n            return false;\n        }\n        var keys = d.keySet();\n        return keys.stream().allMatch(c -> c.toLowerCase().equals(c)) || keys.stream().allMatch(c -> c.toUpperCase().equals(c));\n    }\n}\n",
            "class Global {\n    public static List<Integer> countUpTo(int n) {\n        var primes = new ArrayList<Integer>();\n        for (int num = 2; num < n; num++) {\n            boolean isPrime = true;\n            for (Integer p : primes) {\n                if (num % p == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(num);\n            }\n        }\n        return primes;\n    }\n}\n",
            "class Global {\n    public static int multiply(int a, int b) {\n        return Math.abs(a) % 10 * Math.abs(b) % 10;\n    }\n}\n",
            "class Global {\n    public static int countUpper(String s) {\n        var vowels = \"AEIOU\";\n        int result = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && vowels.contains(String.valueOf(s.charAt(i))) {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int closestInteger(String value) {\n        double num = Double.parseDouble(value);\n        if (num >= 0) {\n            return (int) (num + 0.5);\n        } else {\n            return (int) (num - 0.5);\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> makeAPile(int n) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> wordsString(String s) {\n        var result = new ArrayList<String>();\n        var matcher = Pattern.compile(\"[, ]\").matcher(s);\n        int start = 0;\n        while (matcher.find()) {\n            var w = s.substring(start, matcher.start());\n            if (w.length() > 0) {\n                result.add(w);\n            }\n            start = matcher.end();\n        }\n        var w = s.substring(start);\n        if (w.length() > 0) {\n            result.add(w);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x != y) {\n            return y - 1;\n        }\n        return -1;\n    }\n}\n",
            "class Global {\n    public static Optional<String> roundedAvg(int n, int m) {\n        if (n > m) {\n            return Optional.empty();\n        }\n        int rAvg = (int) Math.round((m + n) / 2.0);\n        return Optional.of(Integer.toBinaryString(rAvg).substring(2));\n    }\n}\n",
            "class Global {\n    public static boolean allDigitsOdd(String s) {\n        for (char r : s.toCharArray()) {\n            if (r % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static List<Integer> uniqueDigits(List<Integer> x) {\n        var result = new ArrayList<Integer>();\n        for (Integer num : x) {\n            if (allDigitsOdd(String.valueOf(num))) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> byLength(List<Integer> arr) {\n        var digitNames = Arrays.asList(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n        var sortedArr = new ArrayList<Integer>(arr);\n        sortedArr.removeIf(x -> !(1 <= x && x <= 9));\n        sortedArr.sort(Comparator.reverseOrder());\n        var result = new ArrayList<String>();\n        for (Integer x : sortedArr) {\n            result.add(digitNames.get(x - 1));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> f(int n) {\n        var nums = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            nums.add(i);\n        }\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n            if (i % 2 != 0) {\n                result.add(sum(nums, i));\n            } else {\n                result.add(reduce(nums, i));\n            }\n        }\n        return result;\n    }\n    public static int sum(List<Integer> nums, int i) {\n        int sum = 0;\n        for (int j = 0; j < i; j++) {\n            sum += nums.get(j);\n        }\n        return sum;\n    }\n    public static int reduce(List<Integer> nums, int i) {\n        int result = 1;\n        for (int j = 0; j < i; j++) {\n            result *= nums.get(j);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isPalindrome(String txt) {\n        return txt.equals(new StringBuilder(txt).reverse().toString());\n    }\n    public static List<Integer> evenOddPalindrome(int n) {\n        var cnt = new int[2];\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(String.valueOf(i))) {\n                cnt[i % 2]++;\n            }\n        }\n        return Arrays.asList(cnt);\n    }\n}\n",
            "class Global {\n    public static int digitsSum(int n) {\n        String nStr = String.valueOf(n);\n        if (n >= 0) {\n            int sum = 0;\n            for (int i = 0; i < nStr.length(); i++) {\n                sum += Integer.parseInt(nStr.substring(i, i + 1));\n            }\n            return sum;\n        } else {\n            return Integer.parseInt(nStr.substring(0, 2)) * 2 + digitsSum(Math.abs(n));\n        }\n    }\n    public static int countNums(List<Integer> arr) {\n        int count = 0;\n        for (Integer n : arr) {\n            if (digitsSum(n) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static boolean moveOneBall(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        var sortedArr = new ArrayList<Integer>(arr);\n        Collections.sort(sortedArr);\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.subList(i, arr.size()).equals(sortedArr.subList(0, arr.size() - i)) && arr.subList(0, i).equals(sortedArr.subList(arr.size() - i, arr.size())) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String canExchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCnt = 0;\n        int evenCnt = 0;\n        for (Integer num : lst1) {\n            if (num % 2 != 0) {\n                oddCnt++;\n            }\n        }\n        for (Integer num : lst2) {\n            if (num % 2 == 0) {\n                evenCnt++;\n            }\n        }\n        if (evenCnt >= oddCnt) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}\n",
            "class Global {\n    public static Map<String, Integer> histogram(String test) {\n        var freq = new HashMap<String, Integer>();\n        var words = new ArrayList<String>();\n        for (String w : test.split(\" \")) {\n            if (w.length() > 0) {\n                words.add(w);\n            }\n        }\n        for (String w : words) {\n            freq.put(w, freq.getOrDefault(w, 0) + 1);\n        }\n        var result = new HashMap<String, Integer>();\n        if (freq.size() > 0) {\n            var maxFreq = 0;\n            for (var v : freq.values()) {\n                if (v > maxFreq) {\n                    maxFreq = v;\n                }\n            }\n            for (var entry : freq.entrySet()) {\n                if (entry.getValue() == maxFreq) {\n                    result.put(entry.getKey(), entry.getValue());\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> reverseDelete(String s, String c) {\n        var s1 = s.chars().filter(ch -> !c.contains(String.valueOf((char) ch))\n                .mapToObj(ch -> String.valueOf((char) ch)).collect(Collectors.joining());\n        return Arrays.asList(s1, isPalindrome(s1) ? \"yes\" : \"no\");\n    }\n    public static boolean isPalindrome(String s) {\n        return s.equals(new StringBuilder(s).reverse().toString());\n    }\n}\n",
            "class Global {\n    public static List<String> oddCount(List<String> lst) {\n        var result = new ArrayList<String>();\n        for (String num : lst) {\n            int n = 0;\n            for (char d : num.toCharArray()) {\n                if (d % 2 == 1) {\n                    n++;\n                }\n            }\n            String rs = \"the number of odd elements in the string i of the input.\";\n            result.add(rs.replace(\"i\", String.valueOf(n)));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int minSubArraySum(List<Integer> nums) {\n        int minSum = 0;\n        int curSum = 0;\n        for (Integer n : nums) {\n            curSum = Math.min(curSum + n, 0);\n            minSum = Math.min(curSum, minSum);\n        }\n        if (minSum == 0) {\n            minSum = Collections.min(nums);\n        }\n        return minSum;\n    }\n}\n",
            "class Global {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        return grid.stream().mapToInt(arr -> (int) Math.ceil(arr.stream().mapToInt(Integer::intValue).sum() / (double) capacity)).sum();\n    }\n}\n",
            "class Global {\n    public static int countOnes(int num) {\n        return Integer.bitCount(num);\n    }\n    public static List<Integer> sortArray(List<Integer> arr) {\n        var result = new ArrayList<Integer>(arr);\n        result.sort(Comparator.comparingInt(Global::countOnes).thenComparingInt(x -> x));\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> selectWords(String s, int n) {\n        var consonants = \"bcdfghjklmnpqrstvwxyz\";\n        var words = s.split(\" \");\n        var result = new ArrayList<String>();\n        for (String w : words) {\n            if (w.length() > 0) {\n                var consonantCount = 0;\n                for (char c : w.toCharArray()) {\n                    if (consonants.contains(Character.toString(c).toLowerCase())) {\n                        consonantCount++;\n                    }\n                }\n                if (consonantCount == n) {\n                    result.add(w);\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.contains(word.substring(i, i + 1)) && !vowels.contains(word.substring(i - 1, i)) && !vowels.contains(word.substring(i + 1, i + 2)) {\n                return word.substring(i, i + 1);\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static boolean check(String s) {\n        int depth = 0;\n        for (char ch : s.toCharArray()) {\n            if (ch == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n    public static String matchParens(List<String> lst) {\n        String s1 = lst.get(0) + lst.get(1);\n        String s2 = lst.get(1) + lst.get(0);\n        if (check(s1) || check(s2)) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}\n",
            "class Global {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return new ArrayList<Integer>();\n        }\n        var sorted = new ArrayList<Integer>(arr);\n        Collections.sort(sorted);\n        return sorted.subList(sorted.size() - k, sorted.size());\n    }\n}\n",
            "class Global {\n    public static int solution(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int addElements(List<Integer> arr, int k) {\n        int result = 0;\n        for (Integer n : arr.subList(0, k)) {\n            if (String.valueOf(n).length() <= 2) {\n                result += n;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> getOddCollatz(int n) {\n        var collatz = new ArrayList<Integer>();\n        while (n != 1) {\n            if (n % 2 != 0) {\n                collatz.add(n);\n                n = 3 * n + 1;\n            } else {\n                n = n / 2;\n            }\n        }\n        collatz.sort(null);\n        return collatz;\n    }\n}\n",
            "class Global {\n    public static boolean validDate(String date) {\n        if (date.length() != 10 || !date.substring(2, 3).equals(\"-\") || !date.substring(5, 6).equals(\"-\")) {\n            return false;\n        }\n        int m = Integer.parseInt(date.substring(0, 2));\n        int d = Integer.parseInt(date.substring(3, 5));\n        if (m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31) {\n            return true;\n        }\n        if (m in [4, 6, 9, 11] && d >= 1 && d <= 30) {\n            return true;\n        }\n        if (m == 2 && d >= 1 && d <= 29) {\n            return true;\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<String> splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            var result = new ArrayList<String>();\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && c % 2 == 0) {\n                    result.add(String.valueOf(c));\n                }\n            }\n            return Arrays.asList(String.valueOf(result.size()));\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isSorted(List<Integer> lst) {\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i - 1) > lst.get(i)) {\n                return false;\n            }\n        }\n        var freq = new HashMap<Integer, Integer>();\n        for (Integer i : lst) {\n            freq.put(i, freq.getOrDefault(i, 0) + 1);\n        }\n        return Collections.max(freq.values(), Comparator.comparingInt(Integer::intValue)).intValue() <= 2;\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int sign = arr.stream().filter(n -> n < 0).count() % 2 == 1 ? -1 : 1;\n        return Optional.of(sign * arr.stream().map(n -> Math.abs(n)).reduce(0, Integer::sum));\n    }\n}\n",
            "class Global {\n    public static List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int minVal = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    var temp = new ArrayList<Integer>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    minVal = Collections.min(temp);\n                }\n            }\n        }\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < k; i++) {\n            result.add(i % 2 == 0 ? 1 : minVal);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> tri(int n) {\n        if (n == 0) {\n            return Arrays.asList(1);\n        }\n        var seq = Arrays.asList(1, 3);\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                seq = append(seq, i / 2 + 1);\n            } else {\n                seq = append(seq, seq.get(i - 1) + seq.get(i - 2) + (i + 3) / 2);\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int digits(int n) {\n        var odds = new ArrayList<Integer>();\n        for (String d : String.valueOf(n).split(\"\")) {\n            if (Integer.parseInt(d) % 2 == 1) {\n                odds.add(Integer.parseInt(d));\n            }\n        }\n        if (odds.size() > 0) {\n            return odds.stream().reduce(1, (x, y) -> x * y);\n        } else {\n            return 0;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isNested(String s) {\n        var openIdx = new ArrayList<Integer>();\n        var closeIdx = new ArrayList<Integer>();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (ch == '[') {\n                openIdx.add(i);\n            } else if (ch == ']') {\n                closeIdx.add(i);\n            }\n        }\n        Collections.reverse(closeIdx);\n        int cnt = 0;\n        int i = 0;\n        int l = closeIdx.size();\n        for (int idx : openIdx) {\n            if (i < l && idx < closeIdx.get(i)) {\n                cnt += 1;\n                i += 1;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Double> lst) {\n        int result = 0;\n        for (Double n : lst) {\n            result += Math.pow(Math.ceil(n), 2);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        String last = txt.substring(txt.lastIndexOf(' ') + 1);\n        return last.length() == 1 && Character.isLetter(last.charAt(0));\n    }\n}\n",
            "class Global {\n    public static int canArrange(List<Integer> arr) {\n        if (arr.size() <= 1) {\n            return -1;\n        }\n        var idx = new ArrayList<Integer>();\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i-1)) {\n                idx.add(i);\n            }\n        }\n        if (idx.size() == 0) {\n            return -1;\n        }\n        return idx.get(idx.size()-1);\n    }\n}\n",
            "class Global {\n    public static List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst) {\n        var neg = new ArrayList<Integer>();\n        var pos = new ArrayList<Integer>();\n        for (Integer i : lst) {\n            if (i < 0) {\n                neg.add(i);\n            } else if (i > 0) {\n                pos.add(i);\n            }\n        }\n        var maxNeg = neg.size() > 0 ? Collections.max(neg) : null;\n        var minPos = pos.size() > 0 ? Collections.min(pos) : null;\n        return Arrays.asList(maxNeg, minPos);\n    }\n}\n",
            "class Global {\n    public static Optional<Double> compareOne(Object a, Object b) {\n        Double a1 = anyToReal(a);\n        Double b1 = anyToReal(b);\n        if (a1.equals(b1)) {\n            return Optional.empty();\n        } else if (a1 > b1) {\n            return Optional.of(a1);\n        } else {\n            return Optional.of(b1);\n        }\n    }\n    public static Double anyToReal(Object o) {\n        if (o instanceof String) {\n            return Double.parseDouble(((String) o).replace(',', '.'));\n        } else if (o instanceof Integer) {\n            return Double.parseDouble(o.toString());\n        } else if (o instanceof Double) {\n            return (Double) o;\n        } else {\n            throw new RuntimeException(\"Type Error\");\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int specialFactorial(int n) {\n        int fact = 1;\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String fixSpaces(String txt) {\n        var pattern = Pattern.compile(\"\\\\s{3,}\");\n        var matcher = pattern.matcher(txt);\n        var result = matcher.replaceAll(\"-\");\n        return result.replace(\" \", \"_\");\n    }\n}\n",
            "class Global {\n    public static String fileNameCheck(String fileName) {\n        String[] suf = {\"txt\", \"exe\", \"dll\"};\n        String[] lst = fileName.split(\"\\\\.\");\n        if (lst.length != 2 || !contains(suf, lst[1]) || lst[0].length() == 0 || !Character.isLetter(lst[0].charAt(0)) || countDigits(lst[0]) > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n    public static boolean contains(String[] s, String e) {\n        for (String a : s) {\n            if (a.equals(e)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static int countDigits(String s) {\n        int count = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isDigit(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int e = lst.get(i);\n            if (i % 3 == 0) {\n                result += e * e;\n            } else if (i % 4 == 0) {\n                result += e * e * e;\n            } else {\n                result += e;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= (int) Math.sqrt(n) + 1; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static String wordsInSentence(String sentence) {\n        var words = sentence.split(\" \");\n        var result = new ArrayList<String>();\n        for (String w : words) {\n            if (isPrime(w.length())) {\n                result.add(w);\n            }\n        }\n        return String.join(\" \", result);\n    }\n}\n",
            "class Global {\n    public static boolean simplify(String x, String n) {\n        var xs = x.split(\"/\");\n        var ns = n.split(\"/\");\n        var num = Integer.parseInt(xs[0]) * Integer.parseInt(ns[0]);\n        var den = Integer.parseInt(xs[1]) * Integer.parseInt(ns[1]);\n        return num % den == 0;\n    }\n}\n",
            "class Global {\n    public static int digitsSum(int n) {\n        String nStr = String.valueOf(n);\n        if (n >= 0) {\n            int result = 0;\n            for (int i = 0; i < nStr.length(); i++) {\n                result += Integer.parseInt(nStr.substring(i, i + 1));\n            }\n            return result;\n        } else {\n            return Integer.parseInt(nStr.substring(0, 2)) * 2 + digitsSum(Math.abs(n));\n        }\n    }\n    public static List<Integer> orderByPoints(List<Integer> nums) {\n        return nums.stream().sorted(Comparator.comparingInt(Global::digitsSum)).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int specialFilter(List<Integer> nums) {\n        String odds = \"13579\";\n        int result = 0;\n        for (Integer n : nums) {\n            if (n > 10 && n % 2 == 1 && odds.contains(String.valueOf(n).substring(0, 1))) {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int getMaxTriples(int n) {\n        var c = new int[3];\n        for (int i = 1; i <= n; i++) {\n            int a = i*i - i + 1;\n            c[a%3]++;\n        }\n        return c[0]*c[1]*c[2] + (c[0]*(c[0]-1)*(c[0]-2) + c[1]*(c[1]-1)*(c[1]-2) + c[2]*(c[2]-1)*(c[2]-2)) / 6;\n    }\n}\n",
            "class Global {\n    public static List<String> bf(String planet1, String planet2) {\n        var names = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!names.contains(planet1) || !names.contains(planet2)) {\n            return new ArrayList<String>();\n        }\n        var l = names.indexOf(planet1);\n        var r = names.indexOf(planet2);\n        if (l > r) {\n            l = r;\n            r = l;\n        }\n        if (l == r) {\n            return new ArrayList<String>();\n        }\n        return names.subList(l + 1, r);\n    }\n}\n",
            "class Global {\n    public static List<String> sortedListSum(List<String> lst) {\n        var result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        result.sort(new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if (s1.length() == s2.length()) {\n                    return s1.compareTo(s2);\n                }\n                return s1.length() - s2.length();\n            }\n        });\n        return result;\n    }\n}\n",
            "class Global {\n    public static int xOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int doubleTheDifference(List<Double> lst) {\n        int result = 0;\n        for (Double n : lst) {\n            if (n >= 0 && n % 2 == 1) {\n                result += n * n;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String strongestExtension(String className, List<String> extensions) {\n        double maxS = Double.NEGATIVE_INFINITY;\n        String maxExt = \"\";\n        for (String ext : extensions) {\n            int upper = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    upper++;\n                }\n            }\n            int lower = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    lower++;\n                }\n            }\n            double s = upper - lower;\n            if (s > maxS) {\n                maxS = s;\n                maxExt = ext;\n            }\n        }\n        return className + \".\" + maxExt;\n    }\n}\n",
            "class Global {\n    public static boolean cycpatternCheck(String a, String b) {\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if (a.contains(b.substring(i) + b.substring(0, i))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<Integer> evenOddCount(int num) {\n        var ds = String.valueOf(Math.abs(num));\n        var even = ds.chars().filter(d -> d % 2 == 0).count();\n        return Arrays.asList(even, ds.length() - even);\n    }\n}\n",
            "class Global {\n    public static String intToMiniRoman(int num) {\n        var values = new int[]{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        var numerals = new String[]{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        var res = new ArrayList<String>();\n        for (int i = 0; i < values.length; i++) {\n            while (num >= values[i]) {\n                res.add(numerals[i]);\n                num -= values[i];\n            }\n        }\n        return String.join(\"\", res);\n    }\n}\n",
            "class Global {\n    public static boolean rightAngleTriangle(int a, int b, int c) {\n        var s = new int[]{a, b, c};\n        Arrays.sort(s);\n        return s[0]*s[0] + s[1]*s[1] == s[2]*s[2];\n    }\n}\n",
            "class Global {\n    public static String findMax(List<String> words) {\n        int maxCnt = 0;\n        String maxW = \"\";\n        for (String w : words) {\n            int cnt = new HashSet<Character>(w).size();\n            if (cnt > maxCnt) {\n                maxCnt = cnt;\n                maxW = w;\n            } else if (cnt == maxCnt) {\n                maxW = maxW.compareTo(w) < 0 ? w : maxW;\n            }\n        }\n        return maxW;\n    }\n}\n",
            "class Global {\n    public static List<Integer> eat(int num, int need, int remaining) {\n        if (need <= remaining) {\n            return Arrays.asList(num + need, remaining - need);\n        }\n        return Arrays.asList(num + remaining, 0);\n    }\n}\n",
            "class Global {\n    public static int doAlgebra(List<String> operators, List<Integer> operands) {\n        var ops = new ArrayList<String>(operators);\n        var nums = new ArrayList<Integer>(operands);\n        int i = ops.size() - 1;\n        while (i >= 0) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.pow(nums.get(i), nums.get(i + 1)));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n            i -= 1;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            } else if (ops.get(i).equals(\"//\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        return nums.get(0);\n    }\n}\n",
            "class Global {\n    public static String solve(String s) {\n        if (!s.matches(\".*[a-zA-Z].*\")) {\n            return reverse(s);\n        }\n        var result = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (!Character.isLetter(ch)) {\n                result.append(ch);\n            } else if (Character.isUpperCase(ch)) {\n                result.append(Character.toLowerCase(ch));\n            } else if (Character.isLowerCase(ch)) {\n                result.append(Character.toUpperCase(ch));\n            }\n        }\n        return result.toString();\n    }\n    public static String reverse(String s) {\n        var result = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--) {\n            result.append(s.charAt(i));\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static Optional<String> stringToMd5(String txt) {\n        if (txt.length() == 0) {\n            return Optional.empty();\n        }\n        try {\n            MessageDigest md5_hash = MessageDigest.getInstance(\"MD5\");\n            byte[] txt_bytes = txt.getBytes();\n            md5_hash.update(txt_bytes);\n            byte[] md5_encoded = md5_hash.digest();\n            String md5_encoded_str = String.format(\"%x\", md5_encoded);\n            return Optional.of(md5_encoded_str);\n        } catch (Exception e) {\n            return Optional.empty();\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> generateIntegers(int a, int b) {\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n        var result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n"
        ],
        "javascript": [
            "export const hasCloseElements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "export const separateParenGroups = (parenString) => {\n    const groups = [];\n    const stk = [];\n    let currentGroup = \"\";\n    const parens = parenString.replace(/ /g, \"\");\n    for (const ch of parens) {\n        if (ch === \"(\") {\n            stk.push(ch);\n            currentGroup += ch;\n        } else if (ch === \")\") {\n            stk.pop();\n            currentGroup += ch;\n            if (stk.length === 0) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n};\n",
            "export const truncateNumber = (num) => {\n    return num - Math.floor(num);\n}\n",
            "export const belowZero = (operations) => {\n    let balance = 0;\n    for (const op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const meanAbsoluteDeviation = (numbers) => {\n    let mean = 0;\n    for (const n of numbers) {\n        mean += n;\n    }\n    mean /= numbers.length;\n    let deviation = 0;\n    for (const n of numbers) {\n        deviation += Math.abs(n - mean);\n    }\n    return deviation / numbers.length;\n}\n",
            "export const intersperse = (numbers, delimiter) => {\n    const result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i !== 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "export const parseNestedParens = (parenString) => {\n    const result = [];\n    const parenGroups = parenString.split(\" \");\n    for (const group of parenGroups) {\n        let maxDepth = 0;\n        let depth = 0;\n        for (const ch of group) {\n            if (ch === \"(\") {\n                depth += 1;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch === \")\") {\n                depth -= 1;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}\n",
            "export const filterBySubstring = (strs, substring) => {\n    const result = [];\n    for (const s of strs) {\n        if (s.includes(substring)) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n",
            "export const sumProduct = (numbers) => {\n    let nSum = 0;\n    for (const n of numbers) {\n        nSum += n;\n    }\n    let nProduct = 1;\n    for (const n of numbers) {\n        nProduct *= n;\n    }\n    return [nSum, nProduct];\n}\n",
            "export const rollingMax = (numbers) => {\n    let maxSoFar = Number.NEGATIVE_INFINITY;\n    const result = [];\n    for (const num of numbers) {\n        maxSoFar = Math.max(maxSoFar, num);\n        result.push(maxSoFar);\n    }\n    return result;\n}\n",
            "export const isPalindrome = (s) => {\n    return s === reverse(s);\n}\nexport const makePalindrome = (s) => {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (isPalindrome(s.slice(i))) {\n            return s + reverse(s.slice(0, i));\n        }\n    }\n    return \"\";\n}\nexport const reverse = (s) => {\n    const runes = [...s];\n    for (let i = 0, j = runes.length - 1; i < j; i++, j--) {\n        [runes[i], runes[j]] = [runes[j], runes[i]];\n    }\n    return runes.join(\"\");\n}\n",
            "export const stringXor = (a, b) => {\n    let result = \"\";\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n",
            "export const longest = (strs) => {\n    if (strs.length === 0) {\n        return null;\n    }\n    let longestS = strs[0];\n    for (const s of strs) {\n        if (s.length > longestS.length) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}\n",
            "export const greatestCommonDivisor = (a, b) => {\n    if (b === 0) {\n        return a;\n    }\n    return greatestCommonDivisor(b, a % b);\n}\n",
            "export const allPrefixes = (s) => {\n    const prefixes = [];\n    for (let i = 0; i < s.length; i++) {\n        prefixes.push(s.slice(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "export const stringSequence = (n) => {\n    const result = [];\n    for (let i = 0; i <= n; i++) {\n        result.push(i.toString());\n    }\n    return result.join(\" \");\n}\n",
            "export const countDistinctCharacters = (s) => {\n    return new Set(s.toLowerCase()).size;\n}\n",
            "export const parseMusic = (musicString) => {\n    const durations = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1\n    };\n    const notes = musicString.split(\" \");\n    return notes.map(note => durations[note]);\n}\n",
            "export const howManyTimes = (s, substring) => {\n    let times = 0;\n    for (let i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.slice(i, i + substring.length) === substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "export const sortNumbers = (numbers) => {\n    const numDict = {\n        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n        nine: 9,\n    };\n    const numList = [];\n    for (const e of numbers.split(\" \")) {\n        if (e in numDict) {\n            numList.push(e);\n        }\n    }\n    numList.sort((a, b) => numDict[a] - numDict[b]);\n    return numList.join(\" \");\n}\n",
            "export const findClosestElements = (numbers) => {\n    const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n    let minDiff = Infinity;\n    let closestPair = [];\n    for (let i = 1; i < sortedNumbers.length; i++) {\n        const diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "export const rescaleToUnit = (numbers) => {\n    let minNum = Number.MAX_VALUE;\n    let maxNum = -Number.MAX_VALUE;\n    for (const num of numbers) {\n        if (num < minNum) {\n            minNum = num;\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    if (minNum === maxNum) {\n        return new Array(numbers.length).fill(0);\n    }\n    const result = [];\n    for (const [i, num] of numbers.entries()) {\n        result[i] = (num - minNum) / (maxNum - minNum);\n    }\n    return result;\n}\n",
            "export const filterIntegers = (values) => {\n    const result = [];\n    for (const x of values) {\n        if (typeof x === \"number\") {\n            result.push(x);\n        }\n    }\n    return result;\n}\n",
            "export const strLength = (s) => {\n    return s.length;\n}\n",
            "export const largestDivisor = (n) => {\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "export const factorize = (n) => {\n    let factors = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "export const removeDuplicates = (numbers) => {\n    const counts = {};\n    for (const num of numbers) {\n        counts[num] = (counts[num] || 0) + 1;\n    }\n    const res = [];\n    for (const num of numbers) {\n        if (counts[num] === 1) {\n            res.push(num);\n        }\n    }\n    return res;\n}\n",
            "export const flipCase = (s) => {\n    const flipped = [];\n    for (const ch of s) {\n        if (!ch.match(/[a-zA-Z]/)) {\n            flipped.push(ch);\n        } else if (ch.match(/[a-z]/)) {\n            flipped.push(ch.toUpperCase());\n        } else if (ch.match(/[A-Z]/)) {\n            flipped.push(ch.toLowerCase());\n        }\n    }\n    return flipped.join(\"\");\n}\n",
            "export const concatenate = (strs) => {\n    return strs.join(\"\");\n}\n",
            "export const filterByPrefix = (strs, prefixStr) => {\n    const result = [];\n    for (const s of strs) {\n        if (s.startsWith(prefixStr)) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n",
            "export const getPositive = (l) => {\n    const result = [];\n    for (const num of l) {\n        if (num > 0) {\n            result.push(num);\n        }\n    }\n    return result;\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const poly = (xs, x) => {\n    let res = 0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n}\nexport const findZero = (xs) => {\n    let x1 = 1, x2 = -1;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        const mid = (x1 + x2) / 2;\n        if (poly(xs, mid) === 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "export const sortThird = (l) => {\n    const sortedThird = [];\n    for (let i = 0; i < l.length; i += 3) {\n        sortedThird.push(l[i]);\n    }\n    sortedThird.sort((a, b) => a - b);\n    const result = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            result.push(sortedThird[i / 3]);\n        } else {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n",
            "export const listUnique = (l) => {\n    const m = {};\n    for (const e of l) {\n        m[e] = true;\n    }\n    const result = [];\n    for (const k in m) {\n        result.push(k);\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}\n",
            "export const maxElement = (l) => {\n    if (l.length === 0) {\n        return 0;\n    }\n    let max = l[0];\n    for (const e of l) {\n        if (e > max) {\n            max = e;\n        }\n    }\n    return max;\n}\n",
            "export const fizzBuzz = (n) => {\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += (i + \"\").split(\"7\").length - 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const sortEven = (l) => {\n    const sortedEven = [];\n    for (let i = 0; i < l.length; i += 2) {\n        sortedEven.push(l[i]);\n    }\n    sortedEven.sort((a, b) => a - b);\n    const result = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 2 === 0) {\n            result[i] = sortedEven[i / 2];\n        } else {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}\n",
            "export const encodeCyclic = (s) => {\n    const result = [];\n    for (let i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.push(s.slice(i));\n        } else {\n            result.push(s.slice(i + 1, i + 3));\n            result.push(s.slice(i, i + 1));\n        }\n    }\n    return result.join(\"\");\n}\nexport const decodeCyclic = (s) => {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const primeFib = (n) => {\n    let f = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt++;\n        }\n    }\n    return f[1];\n}\n",
            "export const triplesSumToZero = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "export const carRaceCollision = (n) => {\n    return n * n;\n}\n",
            "export const incrList = (l) => {\n    const result = [];\n    for (let i = 0; i < l.length; i++) {\n        result.push(l[i] + 1);\n    }\n    return result;\n}\n",
            "export const pairsSumToZero = (l) => {\n    const seen = {};\n    for (const num of l) {\n        if (seen[-num]) {\n            return true;\n        }\n        seen[num] = true;\n    }\n    return false;\n}\n",
            "export const changeBase = (x, bas) => {\n    if (x === 0) {\n        return \"0\";\n    }\n    const digits = [];\n    while (x > 0) {\n        digits.push(x % bas);\n        x = Math.floor(x / bas);\n    }\n    return digits.reverse().join(\"\");\n}\n",
            "export const triangleArea = (a, h) => {\n    return a * h / 2;\n}\n",
            "export const fib4 = (n) => {\n    const fib = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        fib[i % 4] = fib.reduce((a, b) => a + b);\n    }\n    return fib[n % 4];\n}\n",
            "export const median = (l) => {\n    const sl = [...l].sort((a, b) => a - b);\n    if (sl.length % 2 !== 0) {\n        return sl[Math.floor(sl.length / 2)];\n    }\n    return (sl[Math.floor(sl.length / 2)] + sl[Math.floor(sl.length / 2) - 1]) / 2;\n}\n",
            "export const reverse = (s) => {\n    const runes = [...s];\n    for (let i = 0, j = runes.length - 1; i < j; i++, j--) {\n        [runes[i], runes[j]] = [runes[j], runes[i]];\n    }\n    return runes.join(\"\");\n}\nexport const isPalindrome = (txt) => {\n    return txt === reverse(txt);\n}\n",
            "export const modp = (n, p) => {\n    let ret = 1;\n    for (let i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "export const encodeShift = (s) => {\n    const result = [];\n    for (const ch of s) {\n        result.push(String.fromCharCode(((ch.charCodeAt(0) - 97 + 5) % 26) + 97));\n    }\n    return result.join(\"\");\n}\nexport const decodeShift = (s) => {\n    const result = [];\n    for (const ch of s) {\n        result.push(String.fromCharCode(((ch.charCodeAt(0) - 97 + 21) % 26) + 97));\n    }\n    return result.join(\"\");\n}\n",
            "export const removeVowels = (txt) => {\n    const vowels = \"aeiouAEIOU\";\n    let result = \"\";\n    for (const char of txt) {\n        if (!vowels.includes(char)) {\n            result += char;\n        }\n    }\n    return result;\n}\n",
            "export const belowThreshold = (l, t) => {\n    for (const x of l) {\n        if (x >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const add = (x, y) => {\n    return x + y;\n}\n",
            "export const sameChars = (s0, s1) => {\n    return new Set(s0).size === new Set(s1).size;\n}\n",
            "export const fib = (n) => {\n    if (n <= 1) {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n",
            "export const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === '<') {\n            depth += 1;\n        } else if (b === '>') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const monotonic = (l) => {\n    const diff = l.map((x, i) => l[i + 1] - x);\n    return diff.every((x) => x <= 0) || diff.every((x) => x >= 0);\n}\n",
            "export const common = (l1, l2) => {\n    return [...new Set(l1)].filter((x) => l2.includes(x)).sort((a, b) => a - b);\n}\n",
            "export const largestPrimeFactor = (n) => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n",
            "export const sumToN = (n) => {\n    let result = 0;\n    for (let i = 0; i <= n; i++) {\n        result += i;\n    }\n    return result;\n}\n",
            "export const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"(\") {\n            depth += 1;\n        } else if (b === \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const derivative = (xs) => {\n    return xs.map((x, i) => x * i);\n}\n",
            "export const fibfib = (n) => {\n    if (n <= 1) {\n        return 0;\n    }\n    let a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "export const vowelsCount = (s) => {\n    const vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase()) || (i === s.length - 1 && s[i].toLowerCase() === \"y\")) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n",
            "export const circularShift = (x, shift) => {\n    const xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.split(\"\").reverse().join(\"\");\n    } else {\n        return xStr.slice(-shift) + xStr.slice(0, -shift);\n    }\n}\n",
            "export const digitSum = (s) => {\n    let result = 0;\n    for (const c of s) {\n        if (c.toUpperCase() === c) {\n            result += c.charCodeAt(0);\n        }\n    }\n    return result;\n}\n",
            "export const fruitDistribution = (s, n) => {\n    const words = s.split(\" \");\n    const apples = parseInt(words[words.indexOf(\"apples\") - 1]);\n    const oranges = parseInt(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "export const pluck = (arr) => {\n    const evens = [];\n    for (const n of arr) {\n        if (n % 2 === 0) {\n            evens.push(n);\n        }\n    }\n    if (evens.length === 0) {\n        return [];\n    }\n    let minEven = evens[0];\n    for (const n of evens) {\n        if (n < minEven) {\n            minEven = n;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        const n = arr[i];\n        if (n === minEven) {\n            return [minEven, i];\n        }\n    }\n    return [];\n}\n",
            "export const search = (lst) => {\n    const freqs = {};\n    for (const n of lst) {\n        freqs[n] = (freqs[n] || 0) + 1;\n    }\n    const goodVals = [];\n    for (const k in freqs) {\n        const v = freqs[k];\n        if (v >= k) {\n            goodVals.push(k);\n        }\n    }\n    if (goodVals.length === 0) {\n        return -1;\n    }\n    let maxVal = goodVals[0];\n    for (const v of goodVals) {\n        if (v > maxVal) {\n            maxVal = v;\n        }\n    }\n    return maxVal;\n}\n",
            "export const strangeSortList = (lst) => {\n    const sl = [...lst].sort((a, b) => a - b);\n    const result = [];\n    let left = 0, right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "export const triangleArea = (a, b, c) => {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    return -1;\n}\n",
            "export const willItFly = (q, w) => {\n    if (q.length === 0) {\n        return false;\n    }\n    let isPalin = true;\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== q[q.length - i - 1]) {\n            isPalin = false;\n            break;\n        }\n    }\n    let total = 0;\n    for (const e of q) {\n        total += e;\n    }\n    return isPalin && total <= w;\n}\n",
            "export const smallestChange = (arr) => {\n    let ans = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i] !== arr[arr.length - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;\n}\n",
            "export const totalMatch = (lst1, lst2) => {\n    let cnt1 = 0;\n    for (const s of lst1) {\n        cnt1 += s.length;\n    }\n    let cnt2 = 0;\n    for (const s of lst2) {\n        cnt2 += s.length;\n    }\n    if (cnt1 <= cnt2) {\n        return lst1;\n    }\n    return lst2;\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const isMultiplyPrime = (a) => {\n    let cnt = 0;\n    for (let i = 2; i <= a; i++) {\n        if (isPrime(i)) {\n            while (a % i === 0) {\n                cnt++;\n                a /= i;\n            }\n        }\n    }\n    return cnt === 3;\n}\n",
            "export const isSimplePower = (x, n) => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}\n",
            "export const isCube = (a) => {\n    a = Math.abs(a);\n    const root = Math.round(Math.pow(a, 1.0 / 3.0));\n    return root * root * root === a;\n}\n",
            "export const hexKey = (num) => {\n    let result = 0;\n    for (const x of num) {\n        if (x === '2' || x === '3' || x === '5' || x === '7' || x === 'B' || x === 'D') {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "export const decimalToBinary = (dec) => {\n    const binary = dec.toString(2);\n    return `db${binary}db`;\n}\n",
            "export const isHappy = (s) => {\n    if (s.length < 3) {\n        return false;\n    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const numericalLetterGrade = (grades) => {\n    const result = [];\n    for (const g of grades) {\n        if (g === 4.0) {\n            result.push(\"A+\");\n        } else if (g > 3.7) {\n            result.push(\"A\");\n        } else if (g > 3.3) {\n            result.push(\"A-\");\n        } else if (g > 3.0) {\n            result.push(\"B+\");\n        } else if (g > 2.7) {\n            result.push(\"B\");\n        } else if (g > 2.3) {\n            result.push(\"B-\");\n        } else if (g > 2.0) {\n            result.push(\"C+\");\n        } else if (g > 1.7) {\n            result.push(\"C\");\n        } else if (g > 1.3) {\n            result.push(\"C-\");\n        } else if (g > 1.0) {\n            result.push(\"D+\");\n        } else if (g > 0.7) {\n            result.push(\"D\");\n        } else if (g > 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n",
            "export const primeLength = (s) => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(length)) + 1; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const startsOneEnds = (n) => {\n    if (n === 1) {\n        return 1;\n    }\n    return 2 * 9 * Math.pow(10, n - 2);\n}\n",
            "export const solve = (n) => {\n    let digitsSum = 0;\n    for (const d of n.toString()) {\n        digitsSum += parseInt(d);\n    }\n    return digitsSum.toString(2);\n}\n",
            "export const add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1 && lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const antiShuffle = (s) => {\n    const words = [];\n    for (const word of s.split(\" \")) {\n        const runes = [...word];\n        runes.sort((a, b) => a.localeCompare(b));\n        words.push(runes.join(\"\"));\n    }\n    return words.join(\" \");\n}\n",
            "export const getRow = (lst, x) => {\n    const coords = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    coords.sort((a, b) => a[0] < b[0] || (a[0] === b[0] && a[1] > b[1]));\n    return coords;\n}\n",
            "export const sortArray = (arr) => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) {\n        return arr.sort((a, b) => b - a);\n    } else {\n        return arr.sort((a, b) => a - b);\n    }\n}\n",
            "export const encrypt = (s) => {\n    const result = [];\n    for (const ch of s) {\n        let shifted = ch.charCodeAt(0) + 4;\n        if (shifted > \"z\".charCodeAt(0)) {\n            shifted -= 26;\n        }\n        result.push(String.fromCharCode(shifted));\n    }\n    return result.join(\"\");\n}\n",
            "export const nextSmallest = (lst) => {\n    const sl = [];\n    const m = {};\n    for (const e of lst) {\n        if (!m[e]) {\n            sl.push(e);\n            m[e] = true;\n        }\n    }\n    sl.sort((a, b) => a - b);\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}\n",
            "export const isBored = (s) => {\n    const sentences = s.split(/[.!?]\\s*/);\n    let result = 0;\n    for (const sentence of sentences) {\n        match(sentence)\n            .with(\"I \", () => result++)\n            .otherwise(() => {});\n    }\n    return result;\n}\n",
            "export const anyInt = (x, y, z) => {\n    if (typeof x === \"number\" && typeof y === \"number\" && typeof z === \"number\") {\n        if ((x + y === z) || (x + z === y) || (y + z === x)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const encode = (message) => {\n    const vowels = \"aeiouAEIOU\";\n    const result = [];\n    for (const ch of message) {\n        if (ch.match(/[a-zA-Z]/)) {\n            const ch1 = ch.toUpperCase() === ch ? ch.toLowerCase() : ch.toUpperCase();\n            if (vowels.includes(ch1)) {\n                result.push(String.fromCharCode(ch1.charCodeAt(0) + 2));\n            } else {\n                result.push(ch1);\n            }\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const skjkasdkd = (lst) => {\n    const primes = lst.filter((n) => isPrime(n));\n    if (primes.length === 0) {\n        return 0;\n    }\n    const largest = Math.max(...primes).toString();\n    return largest.split(\"\").reduce((acc, digit) => acc + parseInt(digit), 0);\n}\n",
            "export const checkDictCase = (d) => {\n    if (d.size === 0) {\n        return false;\n    }\n    const keys = Array.from(d.keys());\n    return keys.every((c) => c.toLowerCase() === c) || keys.every((c) => c.toUpperCase() === c);\n}\n",
            "export const countUpTo = (n) => {\n    const primes = [];\n    for (let num = 2; num < n; num++) {\n        if (primes.every((p) => num % p !== 0)) {\n            primes.push(num);\n        }\n    }\n    return primes;\n};\n",
            "export const multiply = (a, b) => {\n    return Math.abs(a) % 10 * Math.abs(b) % 10;\n}\n",
            "export const countUpper = (s) => {\n    const vowels = \"AEIOU\";\n    let result = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (i % 2 === 0 && vowels.includes(s[i])) {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "export const closestInteger = (value) => {\n    const num = parseFloat(value);\n    if (num >= 0) {\n        return Math.round(num);\n    } else {\n        return Math.floor(num);\n    }\n}\n",
            "export const makeAPile = (n) => {\n    const result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(n + 2 * i);\n    }\n    return result;\n}\n",
            "export const wordsString = (s) => {\n    return split(s, /[, ]/).filter((w) => w.length > 0);\n};\n",
            "export const chooseNum = (x, y) => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    if (x !== y) {\n        return y - 1;\n    }\n    return -1;\n}\n",
            "export const roundedAvg = (n, m) => {\n    if (n > m) {\n        return null;\n    }\n    const rAvg = Math.round((m + n) / 2.0 + 0.5);\n    return rAvg.toString(2).slice(2);\n}\n",
            "export const allDigitsOdd = (s) => {\n    for (const r of s) {\n        if (r % 2 === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const uniqueDigits = (x) => {\n    const result = [];\n    for (const num of x) {\n        if (allDigitsOdd(num.toString())) {\n            result.push(num);\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}\n",
            "export const byLength = (arr) => {\n    const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const sortedArr = arr.filter((x) => 1 <= x && x <= 9).sort((a, b) => b - a);\n    return sortedArr.map((x) => digitNames[x - 1]);\n};\n",
            "export const f = (n) => {\n    const nums = Array.from({ length: n }, (_, i) => i + 1);\n    return nums.map((e, i) => i % 2 === 0 ? nums.slice(0, i).reduce((a, b) => a + b) : nums.slice(0, i).reduce((a, b) => a * b));\n}\n",
            "export const isPalindrome = (txt) => {\n    return txt === txt.split(\"\").reverse().join(\"\");\n}\nexport const evenOddPalindrome = (n) => {\n    const cnt = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2]++;\n        }\n    }\n    return cnt;\n}\n",
            "export const digitsSum = (n) => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split(\"\").reduce((acc, d) => acc + parseInt(d), 0);\n    } else {\n        return 2 * parseInt(nStr.slice(0, 2)) + digitsSum(Math.abs(n));\n    }\n}\nexport const countNums = (arr) => {\n    return arr.filter((n) => digitsSum(n) > 0).length;\n}\n",
            "export const moveOneBall = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    const sortedArr = [...arr].sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.slice(i).every((e, j) => e === sortedArr[j]) && arr.slice(0, i).every((e, j) => e === sortedArr[arr.length - i + j])) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const canExchange = (lst1, lst2) => {\n    let oddCnt = 0;\n    let evenCnt = 0;\n    for (const num of lst1) {\n        if (num % 2 !== 0) {\n            oddCnt++;\n        }\n    }\n    for (const num of lst2) {\n        if (num % 2 === 0) {\n            evenCnt++;\n        }\n    }\n    if (evenCnt >= oddCnt) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n",
            "export const histogram = (test) => {\n    const freq = {};\n    const words = test.split(\" \").filter(w => w.length > 0);\n    for (const w of words) {\n        freq[w] = (freq[w] || 0) + 1;\n    }\n    const result = {};\n    if (Object.keys(freq).length > 0) {\n        const maxFreq = Math.max(...Object.values(freq));\n        for (const [k, v] of Object.entries(freq)) {\n            if (v === maxFreq) {\n                result[k] = v;\n            }\n        }\n    }\n    return result;\n}\n",
            "export const reverseDelete = (s, c) => {\n    const s1 = s.split(\"\").filter((ch) => !c.includes(ch)).join(\"\");\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"];\n}\nconst isPalindrome = (s) => s === s.split(\"\").reverse().join(\"\");\n",
            "export const oddCount = (lst) => {\n    const result = [];\n    for (const num of lst) {\n        const n = [...num].reduce((acc, d) => acc + (d.charCodeAt(0) % 2 === 1 ? 1 : 0), 0);\n        const rs = \"the number of odd elements in the string i of the input.\";\n        result.push(rs.replace(\"i\", String(n)));\n    }\n    return result;\n}\n",
            "export const minSubArraySum = (nums) => {\n    let minSum = 0;\n    let curSum = 0;\n    for (const n of nums) {\n        curSum = Math.min(curSum + n, 0);\n        minSum = Math.min(curSum, minSum);\n    }\n    if (minSum === 0) {\n        minSum = Math.min(...nums);\n    }\n    return minSum;\n}\n",
            "export const maxFill = (grid, capacity) => {\n    return grid.reduce((acc, arr) => acc + Math.ceil(arr.reduce((acc, e) => acc + e, 0) / capacity), 0);\n}\n",
            "export const countOnes = (num) => {\n    return num.toString(2).split(\"1\").length - 1;\n}\nexport const sortArray = (arr) => {\n    return arr.sort((a, b) => {\n        const aCount = countOnes(a);\n        const bCount = countOnes(b);\n        return aCount === bCount ? a - b : aCount - bCount;\n    });\n}\n",
            "export const selectWords = (s, n) => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = s.split(\" \");\n    const result = [];\n    for (const w of words) {\n        if (w.length > 0) {\n            let consonantCount = 0;\n            for (const c of w) {\n                if (consonants.includes(c.toLowerCase())) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount === n) {\n                result.push(w);\n            }\n        }\n    }\n    return result;\n}\n",
            "export const getClosestVowel = (word) => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "export const check = (s) => {\n    let depth = 0;\n    for (const ch of s) {\n        if (ch === '(') {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\nexport const matchParens = (lst) => {\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    if (check(s1) || check(s2)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n",
            "export const maximum = (arr, k) => {\n    if (k === 0) {\n        return [];\n    }\n    return arr.sort((a, b) => b - a).slice(-k);\n}\n",
            "export const solution = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const addElements = (arr, k) => {\n    let result = 0;\n    for (const n of arr.slice(0, k)) {\n        if (n.toString().length <= 2) {\n            result += n;\n        }\n    }\n    return result;\n}\n",
            "export const getOddCollatz = (n) => {\n    const collatz = [1];\n    while (n !== 1) {\n        if (n % 2 !== 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = Math.floor(n / 2);\n        }\n    }\n    return collatz.sort((a, b) => a - b);\n}\n",
            "export const validDate = (date) => {\n    if (date.length !== 10 || date[2] !== \"-\" || date[5] !== \"-\") {\n        return false;\n    }\n    const m = parseInt(date.slice(0, 2));\n    const d = parseInt(date.slice(3, 5));\n    if (\n        [1, 3, 5, 7, 8, 10, 12].includes(m) &&\n        d >= 1 &&\n        d <= 31\n    ) {\n        return true;\n    }\n    if ([4, 6, 9, 11].includes(m) && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m === 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n};\n",
            "export const splitWords = (txt) => {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        const result = [];\n        for (const c of txt) {\n            if (c.toLowerCase() === c && c.charCodeAt(0) % 2 === 0) {\n                result.push(c);\n            }\n        }\n        return [result.length.toString()];\n    }\n}\n",
            "export const isSorted = (lst) => {\n    if (!lst.every((e, i) => i === 0 || lst[i - 1] <= e)) {\n        return false;\n    }\n    const freq = {};\n    for (const e of lst) {\n        freq[e] = (freq[e] || 0) + 1;\n    }\n    return Math.max(...Object.values(freq), 0) <= 2;\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const intersection = (interval1, interval2) => {\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n}\n",
            "export const prodSigns = (arr) => {\n    if (!arr.length) {\n        return null;\n    }\n    if (arr.includes(0)) {\n        return 0;\n    }\n    const sign = arr.filter((n) => n < 0).length % 2 === 1 ? -1 : 1;\n    return sign * arr.reduce((acc, n) => acc + Math.abs(n), 0);\n};\n",
            "export const minPath = (grid, k) => {\n    const n = grid.length;\n    let minVal = n * n + 1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                const temp = [];\n                if (i !== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j !== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i !== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j !== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                minVal = Math.min(...temp);\n            }\n        }\n    }\n    const result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(i % 2 === 0 ? 1 : minVal);\n    }\n    return result;\n}\n",
            "export const tri = (n) => {\n    if (n === 0) {\n        return [1];\n    }\n    const seq = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "export const digits = (n) => {\n    const odds = [...n.toString()].filter((d) => parseInt(d) % 2 === 1).map((d) => parseInt(d));\n    return odds.length > 0 ? odds.reduce((x, y) => x * y, 1) : 0;\n}\n",
            "export const isNested = (s) => {\n    const openIdx = [];\n    const closeIdx = [];\n    for (let i = 0; i < s.length; i++) {\n        const ch = s[i];\n        if (ch === \"[\") {\n            openIdx.push(i);\n        } else if (ch === \"]\") {\n            closeIdx.push(i);\n        }\n    }\n    closeIdx.reverse();\n    let cnt = 0;\n    let i = 0;\n    const l = closeIdx.length;\n    for (const idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "export const sumSquares = (lst) => {\n    let result = 0;\n    for (const n of lst) {\n        result += Math.pow(Math.ceil(n), 2);\n    }\n    return result;\n}\n",
            "export const checkIfLastCharIsALetter = (txt) => {\n    if (!txt) {\n        return false;\n    }\n    const last = txt.substring(txt.lastIndexOf(\" \") + 1);\n    return last.length === 1 && last[0].match(/[a-zA-Z]/);\n}\n",
            "export const canArrange = (arr) => {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    const idx = [];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            idx.push(i);\n        }\n    }\n    if (idx.length === 0) {\n        return -1;\n    }\n    return idx[idx.length - 1];\n};\n",
            "export const largestSmallestIntegers = (lst) => {\n    const neg = lst.filter((i) => i < 0);\n    const pos = lst.filter((i) => i > 0);\n    const maxNeg = neg.length > 0 ? Math.max(...neg) : null;\n    const minPos = pos.length > 0 ? Math.min(...pos) : null;\n    return [maxNeg, minPos];\n};\n",
            "export const anyToReal = (o) => {\n    if (typeof o === \"string\") {\n        return parseFloat(o.replace(\",\", \".\"));\n    } else if (typeof o === \"number\") {\n        return o;\n    } else {\n        throw new Error(\"Type Error\");\n    }\n};\nexport const compareOne = (a, b) => {\n    const a1 = anyToReal(a);\n    const b1 = anyToReal(b);\n    if (a1 === b1) {\n        return null;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n};\n",
            "export const isEqualToSumEven = (n) => {\n    return n % 2 === 0 && n >= 8;\n}\n",
            "export const specialFactorial = (n) => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "export const fixSpaces = (txt) => {\n    return replace(txt, /\\s{3,}/g, \"-\").replace(\" \", \"_\");\n}\n",
            "export const fileNameCheck = (fileName) => {\n    const suf = [\"txt\", \"exe\", \"dll\"];\n    const lst = fileName.split(\".\");\n    if (lst.length !== 2 || !suf.includes(lst[1]) || lst[0].length === 0 || !/[a-zA-Z]/.test(lst[0][0]) || lst[0].replace(/[^\\d]/g, \"\").length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "export const sumSquares = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        const e = lst[i];\n        if (i % 3 === 0) {\n            result += e * e;\n        } else if (i % 4 === 0) {\n            result += e * e * e;\n        } else {\n            result += e;\n        }\n    }\n    return result;\n}\n",
            "export const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    return words.filter((w) => isPrime(w.length)).join(\" \");\n}\n",
            "export const simplify = (x, n) => {\n    const xs = x.split(\"/\");\n    const ns = n.split(\"/\");\n    const num = parseInt(xs[0]) * parseInt(ns[0]);\n    const den = parseInt(xs[1]) * parseInt(ns[1]);\n    return num % den === 0;\n}\n",
            "export const digitsSum = (n) => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split(\"\").reduce((acc, d) => acc + parseInt(d), 0);\n    } else {\n        return 2 * parseInt(nStr.slice(0, 2)) + digitsSum(Math.abs(n));\n    }\n}\nexport const orderByPoints = (nums) => {\n    return nums.sort((a, b) => digitsSum(a) - digitsSum(b));\n}\n",
            "export const specialFilter = (nums) => {\n    const odds = \"13579\";\n    let result = 0;\n    for (const n of nums) {\n        if (n > 10 && n % 2 === 1 && odds.includes(n.toString()[0])) {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "export const getMaxTriples = (n) => {\n    const c = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        const a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return (c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}\n",
            "export const bf = (planet1, planet2) => {\n    const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.includes(planet1) || !names.includes(planet2)) {\n        return [];\n    }\n    let l = names.indexOf(planet1);\n    let r = names.indexOf(planet2);\n    if (l > r) {\n        [l, r] = [r, l];\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n}\n",
            "export const sortedListSum = (lst) => {\n    const result = [];\n    for (const s of lst) {\n        if (s.length % 2 === 0) {\n            result.push(s);\n        }\n    }\n    result.sort((a, b) => {\n        if (a.length === b.length) {\n            return a < b ? -1 : 1;\n        }\n        return a.length < b.length ? -1 : 1;\n    });\n    return result;\n}\n",
            "export const xOrY = (n, x, y) => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "export const doubleTheDifference = (lst) => {\n    let result = 0;\n    for (const n of lst) {\n        if (n >= 0 && n % 2 === 1) {\n            result += n * n;\n        }\n    }\n    return result;\n}\n",
            "export const compare = (game, guess) => {\n    return game.map((x, i) => Math.abs(x - guess[i]));\n}\n",
            "export const strongestExtension = (className, extensions) => {\n    let maxS = Number.NEGATIVE_INFINITY;\n    let maxExt = \"\";\n    for (const ext of extensions) {\n        const upper = ext.split(\"\").filter((c) => c.toUpperCase() === c).length;\n        const lower = ext.split(\"\").filter((c) => c.toLowerCase() === c).length;\n        const s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return `${className}.${maxExt}`;\n};\n",
            "export const cycpatternCheck = (a, b) => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; i++) {\n        if (a.includes(b.slice(i) + b.slice(0, i))) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const evenOddCount = (num) => {\n    const ds = Math.abs(num).toString();\n    const even = ds.split(\"\").filter((d) => d.charCodeAt(0) % 2 === 0).length;\n    return [even, ds.length - even];\n}\n",
            "export const intToMiniRoman = (num) => {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    const res = [];\n    for (let i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.push(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join(\"\");\n}\n",
            "export const rightAngleTriangle = (a, b, c) => {\n    const s = [a, b, c].sort();\n    return s[0] * s[0] + s[1] * s[1] === s[2] * s[2];\n}\n",
            "export const findMax = (words) => {\n    let maxCnt = 0;\n    let maxW = \"\";\n    for (const w of words) {\n        const cnt = new Set(w).size;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt === maxCnt) {\n            maxW = maxW < w ? maxW : w;\n        }\n    }\n    return maxW;\n}\n",
            "export const eat = (num, need, remaining) => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    }\n    return [num + remaining, 0];\n}\n",
            "export const doAlgebra = (operators, operands) => {\n    const ops = operators.slice();\n    const nums = operands.slice();\n    let i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] === \"**\") {\n            nums[i] = Math.pow(nums[i], nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        } else if (ops[i] === \"//\") {\n            nums[i] = Math.floor(nums[i] / nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        } else if (ops[i] === \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n};\n",
            "export const solve = (s) => {\n    if (!/[a-zA-Z]/.test(s)) {\n        return reverse(s);\n    }\n    const result = [];\n    for (const ch of s) {\n        if (!/[a-zA-Z]/.test(ch)) {\n            result.push(ch);\n        } else if (/[A-Z]/.test(ch)) {\n            result.push(ch.toLowerCase());\n        } else if (/[a-z]/.test(ch)) {\n            result.push(ch.toUpperCase());\n        }\n    }\n    return result.join(\"\");\n};\n",
            "export const stringToMd5 = (txt) => {\n    if (txt.length === 0) {\n        return null;\n    }\n    const md5_encoded = crypto.createHash(\"md5\").update(txt).digest(\"hex\");\n    return md5_encoded;\n}\n",
            "export const generateIntegers = (a, b) => {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n    const result = [];\n    for (let i = lower; i <= upper; i++) {\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n"
        ],
        "kotlin": [
            "fun hasCloseElements(numbers: List<Double>, threshold: Double): Boolean {\n    for (i in numbers.indices) {\n        for (j in i + 1 until numbers.size) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "fun separateParenGroups(parenString: String): List<String> {\n    val groups = mutableListOf<String>()\n    val stk = mutableListOf<Char>()\n    var currentGroup = \"\"\n    val parens = parenString.replace(\" \", \"\")\n    for (ch in parens) {\n        if (ch == '(') {\n            stk.add(ch)\n            currentGroup += ch\n        } else if (ch == ')') {\n            stk.removeAt(stk.size - 1)\n            currentGroup += ch\n            if (stk.size == 0) {\n                groups.add(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "fun truncateNumber(num: Double): Double {\n    return num - floor(num)\n}\n",
            "fun belowZero(operations: List<Int>): Boolean {\n    var balance = 0\n    for (op in operations) {\n        balance += op\n        if (balance < 0) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun meanAbsoluteDeviation(numbers: List<Double>): Double {\n    var mean = 0.0\n    for (n in numbers) {\n        mean += n\n    }\n    mean /= numbers.size.toDouble()\n    var deviation = 0.0\n    for (n in numbers) {\n        deviation += abs(n - mean)\n    }\n    return deviation / numbers.size.toDouble()\n}\n",
            "fun intersperse(numbers: List<Int>, delimiter: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in numbers.indices) {\n        if (i != 0) {\n            result.add(delimiter)\n        }\n        result.add(numbers[i])\n    }\n    return result\n}\n",
            "fun parseNestedParens(parenString: String): List<Int> {\n    val result = mutableListOf<Int>()\n    val parenGroups = parenString.split(\" \")\n    for (group in parenGroups) {\n        var maxDepth = 0\n        var depth = 0\n        for (ch in group) {\n            if (ch == '(') {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if (ch == ')') {\n                depth -= 1\n            }\n        }\n        result.add(maxDepth)\n    }\n    return result\n}\n",
            "fun filterBySubstring(strs: List<String>, substring: String): List<String> {\n    val result = mutableListOf<String>()\n    for (s in strs) {\n        if (s.contains(substring)) {\n            result.add(s)\n        }\n    }\n    return result\n}\n",
            "fun sumProduct(numbers: List<Int>): List<Int> {\n    var nSum = 0\n    for (n in numbers) {\n        nSum += n\n    }\n    var nProduct = 1\n    for (n in numbers) {\n        nProduct *= n\n    }\n    return listOf(nSum, nProduct)\n}\n",
            "fun rollingMax(numbers: List<Int>): List<Int> {\n    var maxSoFar = Int.MIN_VALUE\n    val result = mutableListOf<Int>()\n    for (num in numbers) {\n        maxSoFar = maxOf(maxSoFar, num)\n        result.add(maxSoFar)\n    }\n    return result\n}\n",
            "fun isPalindrome(s: String): Boolean {\n    return s == reverse(s)\n}\nfun makePalindrome(s: String): String {\n    if (isPalindrome(s)) {\n        return s\n    }\n    for (i in 0 until s.length) {\n        if (isPalindrome(s.substring(i))) {\n            return s + reverse(s.substring(0, i))\n        }\n    }\n    return \"\"\n}\nfun reverse(s: String): String {\n    val runes = s.toCharArray()\n    for (i in 0 until runes.size / 2) {\n        val j = runes.size - i - 1\n        val tmp = runes[i]\n        runes[i] = runes[j]\n        runes[j] = tmp\n    }\n    return String(runes)\n}\n",
            "fun stringXor(a: String, b: String): String {\n    val result = StringBuilder()\n    for (i in 0 until a.length) {\n        if (a[i] == b[i]) {\n            result.append('0')\n        } else {\n            result.append('1')\n        }\n    }\n    return result.toString()\n}\n",
            "fun longest(strs: List<String>): String? {\n    if (strs.isEmpty()) {\n        return null\n    }\n    var longestS = strs[0]\n    for (s in strs) {\n        if (s.length > longestS.length) {\n            longestS = s\n        }\n    }\n    return longestS\n}\n",
            "fun greatestCommonDivisor(a: Int, b: Int): Int {\n    if (b == 0) {\n        return a\n    }\n    return greatestCommonDivisor(b, a % b)\n}\n",
            "fun allPrefixes(s: String): List<String> {\n    val prefixes = mutableListOf<String>()\n    for (i in 0 until s.length) {\n        prefixes.add(s.substring(0, i + 1))\n    }\n    return prefixes\n}\n",
            "fun stringSequence(n: Int): String {\n    val result = mutableListOf<String>()\n    for (i in 0..n) {\n        result.add(i.toString())\n    }\n    return result.joinToString(\" \")\n}\n",
            "fun countDistinctCharacters(s: String): Int {\n    return s.toLowerCase().toSet().size\n}\n",
            "fun parseMusic(musicString: String): List<Int> {\n    val durations = mapOf(\"o\" to 4, \"o|\" to 2, \".|\" to 1)\n    val notes = musicString.split(\" \")\n    return notes.map { durations[it]!! }\n}\n",
            "fun howManyTimes(s: String, substring: String): Int {\n    var times = 0\n    for (i in 0 until s.length - substring.length + 1) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "fun sortNumbers(numbers: String): String {\n    val numDict = mapOf(\n        \"zero\" to 0,\n        \"one\" to 1,\n        \"two\" to 2,\n        \"three\" to 3,\n        \"four\" to 4,\n        \"five\" to 5,\n        \"six\" to 6,\n        \"seven\" to 7,\n        \"eight\" to 8,\n        \"nine\" to 9\n    )\n    val numList = mutableListOf<String>()\n    for (e in numbers.split(\" \")) {\n        if (e in numDict) {\n            numList.add(e)\n        }\n    }\n    numList.sortWith(Comparator { a, b -> numDict[a]!! - numDict[b]!! })\n    return numList.joinToString(\" \")\n}\n",
            "fun findClosestElements(numbers: List<Double>): List<Double> {\n    val sortedNumbers = numbers.sorted()\n    var minDiff = Double.MAX_VALUE\n    var closestPair = listOf<Double>()\n    for (i in 1 until sortedNumbers.size) {\n        val diff = abs(sortedNumbers[i] - sortedNumbers[i - 1])\n        if (diff < minDiff) {\n            minDiff = diff\n            closestPair = listOf(sortedNumbers[i - 1], sortedNumbers[i])\n        }\n    }\n    return closestPair\n}\n",
            "fun rescaleToUnit(numbers: List<Double>): List<Double> {\n    var minNum = Double.MAX_VALUE\n    var maxNum = -Double.MAX_VALUE\n    for (num in numbers) {\n        if (num < minNum) {\n            minNum = num\n        }\n        if (num > maxNum) {\n            maxNum = num\n        }\n    }\n    if (minNum == maxNum) {\n        return List(numbers.size) { 0.0 }\n    }\n    val result = mutableListOf<Double>()\n    for (num in numbers) {\n        result.add((num - minNum) / (maxNum - minNum))\n    }\n    return result\n}\n",
            "fun filterIntegers(values: List<Any>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (x in values) {\n        if (x is Int) {\n            result.add(x)\n        }\n    }\n    return result\n}\n",
            "fun strLength(s: String): Int {\n    return s.length\n}\n",
            "fun largestDivisor(n: Int): Int {\n    for (i in 2 until n) {\n        if (n % i == 0) {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "fun factorize(n: Int): List<Int> {\n    val factors = mutableListOf<Int>()\n    var divisor = 2\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "fun removeDuplicates(numbers: List<Int>): List<Int> {\n    val counts = mutableMapOf<Int, Int>()\n    for (num in numbers) {\n        counts[num] = counts.getOrDefault(num, 0) + 1\n    }\n    val res = mutableListOf<Int>()\n    for (num in numbers) {\n        if (counts[num] == 1) {\n            res.add(num)\n        }\n    }\n    return res\n}\n",
            "fun flipCase(s: String): String {\n    val flipped = mutableListOf<Char>()\n    for (ch in s) {\n        if (!Character.isLetter(ch)) {\n            flipped.add(ch)\n        } else if (Character.isLowerCase(ch)) {\n            flipped.add(Character.toUpperCase(ch))\n        } else if (Character.isUpperCase(ch)) {\n            flipped.add(Character.toLowerCase(ch))\n        }\n    }\n    return flipped.joinToString(\"\")\n}\n",
            "fun concatenate(strs: List<String>): String {\n    return strs.joinToString(\"\")\n}\n",
            "fun filterByPrefix(strs: List<String>, prefixStr: String): List<String> {\n    val result = mutableListOf<String>()\n    for (s in strs) {\n        if (s.startsWith(prefixStr)) {\n            result.add(s)\n        }\n    }\n    return result\n}\n",
            "fun getPositive(l: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (num in l) {\n        if (num > 0) {\n            result.add(num)\n        }\n    }\n    return result\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun poly(xs: List<Int>, x: Double): Double {\n    var res = 0.0\n    for (i in xs.indices) {\n        res += xs[i].toDouble() * pow(x, i.toDouble())\n    }\n    return res\n}\nfun findZero(xs: List<Int>): Double {\n    var x1 = 1.0\n    var x2 = -1.0\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2\n        x2 *= 2\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        val mid = (x1 + x2) / 2\n        if (poly(xs, mid) == 0.0) {\n            return mid\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "fun sortThird(l: List<Int>): List<Int> {\n    val sortedThird = l.filterIndexed { index, _ -> index % 3 == 0 }.sorted()\n    val result = mutableListOf<Int>()\n    for (i in l.indices) {\n        if (i % 3 == 0) {\n            result.add(sortedThird[i / 3])\n        } else {\n            result.add(l[i])\n        }\n    }\n    return result\n}\n",
            "fun listUnique(l: List<Int>): List<Int> {\n    val m = mutableMapOf<Int, Boolean>()\n    for (e in l) {\n        m[e] = true\n    }\n    val result = mutableListOf<Int>()\n    for (k in m.keys) {\n        result.add(k)\n    }\n    result.sort()\n    return result\n}\n",
            "fun maxElement(l: List<Int>): Int {\n    if (l.isEmpty()) {\n        return 0\n    }\n    var max = l[0]\n    for (e in l) {\n        if (e > max) {\n            max = e\n        }\n    }\n    return max\n}\n",
            "fun fizzBuzz(n: Int): Int {\n    var cnt = 0\n    for (i in 0 until n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString().count { it == '7' }\n        }\n    }\n    return cnt\n}\n",
            "fun sortEven(l: List<Int>): List<Int> {\n    val sortedEven = l.filterIndexed { index, _ -> index % 2 == 0 }.sorted()\n    val result = mutableListOf<Int>()\n    for (i in l.indices) {\n        if (i % 2 == 0) {\n            result.add(sortedEven[i / 2])\n        } else {\n            result.add(l[i])\n        }\n    }\n    return result\n}\n",
            "fun encodeCyclic(s: String): String {\n    val result = mutableListOf<String>()\n    for (i in 0 until s.length step 3) {\n        if (i + 3 > s.length) {\n            result.add(s.substring(i))\n        } else {\n            result.add(s.substring(i + 1, i + 3))\n            result.add(s.substring(i, i + 1))\n        }\n    }\n    return result.joinToString(\"\")\n}\nfun decodeCyclic(s: String): String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\nfun primeFib(n: Int): Int {\n    val f = intArrayOf(0, 1)\n    var cnt = 0\n    while (cnt < n) {\n        f[0] = f[1]\n        f[1] = f[0] + f[1]\n        if (isPrime(f[1])) {\n            cnt++\n        }\n    }\n    return f[1]\n}\n",
            "fun triplesSumToZero(l: List<Int>): Boolean {\n    for (i in 0 until l.size) {\n        for (j in i + 1 until l.size) {\n            for (k in j + 1 until l.size) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "fun carRaceCollision(n: Int): Int {\n    return n * n\n}\n",
            "fun incrList(l: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (e in l) {\n        result.add(e + 1)\n    }\n    return result\n}\n",
            "fun pairsSumToZero(l: List<Int>): Boolean {\n    val seen = mutableMapOf<Int, Boolean>()\n    for (num in l) {\n        if (seen[-num] == true) {\n            return true\n        }\n        seen[num] = true\n    }\n    return false\n}\n",
            "fun changeBase(x: Int, bas: Int): String {\n    if (x == 0) {\n        return \"0\"\n    }\n    val digits = mutableListOf<String>()\n    while (x > 0) {\n        digits.add(x % bas.toString())\n        x /= bas\n    }\n    return digits.reversed().joinToString(\"\")\n}\n",
            "fun triangleArea(a: Int, h: Int): Double {\n    return a.toDouble() * h.toDouble() / 2\n}\n",
            "fun fib4(n: Int): Int {\n    val fib = intArrayOf(0, 0, 2, 0)\n    for (i in 4 until n + 1) {\n        fib[i % 4] = fib.sum()\n    }\n    return fib[n % 4]\n}\n",
            "fun median(l: List<Double>): Double {\n    val sl = l.toMutableList()\n    sl.sort()\n    return if (sl.size % 2 != 0) sl[sl.size / 2] else (sl[sl.size / 2] + sl[sl.size / 2 - 1]) / 2\n}\n",
            "fun reverse(s: String): String {\n    val runes = s.toCharArray()\n    for (i in 0 until runes.size / 2) {\n        val tmp = runes[i]\n        runes[i] = runes[runes.size - 1 - i]\n        runes[runes.size - 1 - i] = tmp\n    }\n    return String(runes)\n}\nfun isPalindrome(txt: String): Boolean {\n    return txt == reverse(txt)\n}\n",
            "fun modp(n: Int, p: Int): Int {\n    var ret = 1\n    for (i in 0 until n) {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "fun encodeShift(s: String): String {\n    val result = mutableListOf<Byte>()\n    for (ch in s) {\n        result.add(((ch.toInt() - 97 + 5) % 26 + 97).toByte())\n    }\n    return String(result.toByteArray())\n}\nfun decodeShift(s: String): String {\n    val result = mutableListOf<Byte>()\n    for (ch in s) {\n        result.add(((ch.toInt() - 97 + 21) % 26 + 97).toByte())\n    }\n    return String(result.toByteArray())\n}\n",
            "fun removeVowels(txt: String): String {\n    val vowels = \"aeiouAEIOU\"\n    val result = StringBuilder()\n    for (char in txt) {\n        if (!vowels.contains(char)) {\n            result.append(char)\n        }\n    }\n    return result.toString()\n}\n",
            "fun belowThreshold(l: List<Int>, t: Int): Boolean {\n    for (x in l) {\n        if (x >= t) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun add(x: Int, y: Int): Int {\n    return x + y\n}\n",
            "fun sameChars(s0: String, s1: String): Boolean {\n    return s0.toSet() == s1.toSet()\n}\n",
            "fun fib(n: Int): Int {\n    if (n <= 1) {\n        return n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n",
            "fun correctBracketing(brackets: String): Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == '<') {\n            depth += 1\n        } else if (b == '>') {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "fun monotonic(l: List<Int>): Boolean {\n    val diff = l.zip(l.subList(1, l.size)).map { (x, y) -> y - x }\n    return diff.all { x -> x <= 0 } || diff.all { x -> x >= 0 }\n}\n",
            "fun common(l1: List<Int>, l2: List<Int>): List<Int> {\n    return (l1.toSet() intersect l2.toSet()).toList().sorted()\n}\n",
            "fun largestPrimeFactor(n: Int): Int {\n    var i = 2\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i\n        } else {\n            i++\n        }\n    }\n    return n\n}\n",
            "fun sumToN(n: Int): Int {\n    var result = 0\n    for (i in 0..n) {\n        result += i\n    }\n    return result\n}\n",
            "fun correctBracketing(brackets: String): Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == '(') {\n            depth += 1\n        } else if (b == ')') {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "fun derivative(xs: List<Int>): List<Int> {\n    return xs.mapIndexed { i, x -> x * i }\n}\n",
            "fun fibfib(n: Int): Int {\n    if (n <= 1) {\n        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 1\n    while (n > 2) {\n        a = b\n        b = c\n        c = a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "fun vowelsCount(s: String): Int {\n    val vowels = \"aeiou\"\n    var cnt = 0\n    for (i in s.indices) {\n        if (s[i].toLowerCase() in vowels || (i == s.length - 1 && s[i].toLowerCase() == 'y')) {\n            cnt++\n        }\n    }\n    return cnt\n}\n",
            "fun circularShift(x: Int, shift: Int): String {\n    val xStr = x.toString()\n    return if (shift > xStr.length) xStr.reversed() else xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift)\n}\n",
            "fun digitSum(s: String): Int {\n    var result = 0\n    for (c in s) {\n        if (c.isUpperCase()) {\n            result += c.toInt()\n        }\n    }\n    return result\n}\n",
            "fun fruitDistribution(s: String, n: Int): Int {\n    val words = s.split(\" \")\n    val apples = words[words.indexOf(\"apples\") - 1].toInt()\n    val oranges = words[words.indexOf(\"oranges\") - 1].toInt()\n    return n - apples - oranges\n}\n",
            "fun pluck(arr: List<Int>): List<Int> {\n    val evens = mutableListOf<Int>()\n    for (n in arr) {\n        if (n % 2 == 0) {\n            evens.add(n)\n        }\n    }\n    if (evens.isEmpty()) {\n        return listOf()\n    }\n    var minEven = evens[0]\n    for (n in evens) {\n        if (n < minEven) {\n            minEven = n\n        }\n    }\n    for (i in arr.indices) {\n        if (arr[i] == minEven) {\n            return listOf(minEven, i)\n        }\n    }\n    return listOf()\n}\n",
            "fun search(lst: List<Int>): Int {\n    val freqs = mutableMapOf<Int, Int>()\n    for (n in lst) {\n        freqs[n] = freqs.getOrDefault(n, 0) + 1\n    }\n    val goodVals = mutableListOf<Int>()\n    for ((k, v) in freqs) {\n        if (v >= k) {\n            goodVals.add(k)\n        }\n    }\n    if (goodVals.isEmpty()) {\n        return -1\n    }\n    var maxVal = goodVals[0]\n    for (v in goodVals) {\n        if (v > maxVal) {\n            maxVal = v\n        }\n    }\n    return maxVal\n}\n",
            "fun strangeSortList(lst: List<Int>): List<Int> {\n    val sl = lst.toMutableList()\n    sl.sort()\n    val result = mutableListOf<Int>()\n    var left = 0\n    var right = sl.size - 1\n    while (left <= right) {\n        result.add(sl[left])\n        left++\n        if (left <= right) {\n            result.add(sl[right])\n            right--\n        }\n    }\n    return result\n}\n",
            "fun triangleArea(a: Int, b: Int, c: Int): Double {\n    return if (a + b > c && a + c > b && b + c > a) {\n        val s = (a + b + c) / 2.0\n        sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        -1.0\n    }\n}\n",
            "fun willItFly(q: List<Int>, w: Int): Boolean {\n    if (q.isEmpty()) {\n        return false\n    }\n    var isPalin = true\n    for (i in 0 until q.size) {\n        if (q[i] != q[q.size - i - 1]) {\n            isPalin = false\n            break\n        }\n    }\n    var total = 0\n    for (e in q) {\n        total += e\n    }\n    return isPalin && total <= w\n}\n",
            "fun smallestChange(arr: List<Int>): Int {\n    var ans = 0\n    for (i in 0 until arr.size / 2) {\n        if (arr[i] != arr[arr.size - i - 1]) {\n            ans++\n        }\n    }\n    return ans\n}\n",
            "fun totalMatch(lst1: List<String>, lst2: List<String>): List<String> {\n    var cnt1 = 0\n    for (s in lst1) {\n        cnt1 += s.length\n    }\n    var cnt2 = 0\n    for (s in lst2) {\n        cnt2 += s.length\n    }\n    return if (cnt1 <= cnt2) lst1 else lst2\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\nfun isMultiplyPrime(a: Int): Boolean {\n    var cnt = 0\n    for (i in 2..a) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt++\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "fun isSimplePower(x: Int, n: Int): Boolean {\n    if (n < 2) {\n        return x == n\n    }\n    var tmp = 1\n    while (tmp < x) {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "fun isCube(a: Int): Boolean {\n    val a = abs(a)\n    val root = round(pow(a.toDouble(), 1.0 / 3.0))\n    return root * root * root == a\n}\n",
            "fun hexKey(num: String): Int {\n    var result = 0\n    for (x in num) {\n        if (x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D') {\n            result++\n        }\n    }\n    return result\n}\n",
            "fun decimalToBinary(dec: Int): String {\n    val binary = dec.toString(2)\n    return \"db$binary\"\n}\n",
            "fun isHappy(s: String): Boolean {\n    if (s.length < 3) {\n        return false\n    }\n    for (i in 0 until s.length - 2) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun numericalLetterGrade(grades: List<Double>): List<String> {\n    val result = mutableListOf<String>()\n    for (g in grades) {\n        if (g == 4.0) {\n            result.add(\"A+\")\n        } else if (g > 3.7) {\n            result.add(\"A\")\n        } else if (g > 3.3) {\n            result.add(\"A-\")\n        } else if (g > 3.0) {\n            result.add(\"B+\")\n        } else if (g > 2.7) {\n            result.add(\"B\")\n        } else if (g > 2.3) {\n            result.add(\"B-\")\n        } else if (g > 2.0) {\n            result.add(\"C+\")\n        } else if (g > 1.7) {\n            result.add(\"C\")\n        } else if (g > 1.3) {\n            result.add(\"C-\")\n        } else if (g > 1.0) {\n            result.add(\"D+\")\n        } else if (g > 0.7) {\n            result.add(\"D\")\n        } else if (g > 0.0) {\n            result.add(\"D-\")\n        } else {\n            result.add(\"E\")\n        }\n    }\n    return result\n}\n",
            "fun primeLength(s: String): Boolean {\n    val length = s.length\n    if (length < 2) {\n        return false\n    }\n    for (i in 2..sqrt(length.toDouble()).toInt()) {\n        if (length % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun startsOneEnds(n: Int): Int {\n    return if (n == 1) 1 else 2 * 9 * Math.pow(10.0, (n - 2).toDouble()).toInt()\n}\n",
            "fun solve(n: Int): String {\n    var digitsSum = 0\n    for (d in n.toString()) {\n        digitsSum += d.toInt() - '0'.toInt()\n    }\n    return digitsSum.toString(2)\n}\n",
            "fun add(lst: List<Int>): Int {\n    var result = 0\n    for (i in lst.indices) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "fun antiShuffle(s: String): String {\n    val words = mutableListOf<String>()\n    for (word in s.split(\" \")) {\n        val runes = mutableListOf<Char>()\n        for (rune in word) {\n            runes.add(rune)\n        }\n        runes.sort()\n        words.add(runes.joinToString(\"\"))\n    }\n    return words.joinToString(\" \")\n}\n",
            "fun getRow(lst: List<List<Int>>, x: Int): List<List<Int>> {\n    val coords = mutableListOf<List<Int>>()\n    for (i in lst.indices) {\n        for (j in lst[i].indices) {\n            if (lst[i][j] == x) {\n                coords.add(listOf(i, j))\n            }\n        }\n    }\n    coords.sortWith(Comparator { a, b ->\n        if (a[0] < b[0]) {\n            return@Comparator -1\n        }\n        if (a[0] > b[0]) {\n            return@Comparator 1\n        }\n        if (a[1] > b[1]) {\n            return@Comparator -1\n        }\n        if (a[1] < b[1]) {\n            return@Comparator 1\n        }\n        return@Comparator 0\n    })\n    return coords\n}\n",
            "fun sortArray(arr: List<Int>): List<Int> {\n    if (arr.isEmpty()) {\n        return emptyList()\n    }\n    return if ((arr[0] + arr[arr.size - 1]) % 2 == 0) arr.sortedDescending() else arr.sorted()\n}\n",
            "fun encrypt(s: String): String {\n    val result = mutableListOf<Char>()\n    for (ch in s) {\n        val shifted = ch + 4\n        if (shifted > 'z') {\n            result.add(shifted - 26)\n        } else {\n            result.add(shifted)\n        }\n    }\n    return result.joinToString(\"\")\n}\n",
            "fun nextSmallest(lst: List<Int>): Int? {\n    val sl = mutableListOf<Int>()\n    val m = mutableMapOf<Int, Boolean>()\n    for (e in lst) {\n        if (!m.containsKey(e)) {\n            sl.add(e)\n            m[e] = true\n        }\n    }\n    sl.sort()\n    return if (sl.size < 2) null else sl[1]\n}\n",
            "fun isBored(s: String): Int {\n    val sentences = Pattern.compile(\"[.!?]\\\\s*\").split(s, -1)\n    var result = 0\n    for (sentence in sentences) {\n        if (sentence.length >= 2 && sentence.substring(0, 2) == \"I \") {\n            result++\n        }\n    }\n    return result\n}\n",
            "fun anyInt(x: Any, y: Any, z: Any): Boolean {\n    if (x is Int && y is Int && z is Int) {\n        if (x + y == z || x + z == y || y + z == x) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun encode(message: String): String {\n    val vowels = \"aeiouAEIOU\"\n    val result = mutableListOf<Char>()\n    for (ch in message) {\n        if (ch.isLetter()) {\n            val ch1 = if (ch.isLowerCase()) ch.toUpperCase() else ch.toLowerCase()\n            if (ch1 in vowels) {\n                result.add(ch1.plus(2))\n            } else {\n                result.add(ch1)\n            }\n        } else {\n            result.add(ch)\n        }\n    }\n    return result.joinToString(\"\")\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\nfun skjkasdkd(lst: List<Int>): Int {\n    val primes = lst.filter { isPrime(it) }\n    if (primes.isEmpty()) {\n        return 0\n    }\n    val largest = primes.max()!!.toString()\n    return largest.map { it.toString().toInt() }.sum()\n}\n",
            "fun checkDictCase(d: Map<String, String>): Boolean {\n    if (d.isEmpty()) {\n        return false\n    }\n    return d.keys.all { it.all { c -> c.isLowerCase() } } || d.keys.all { it.all { c -> c.isUpperCase() } }\n}\n",
            "fun countUpTo(n: Int): List<Int> {\n    val primes = mutableListOf<Int>()\n    for (num in 2 until n) {\n        if (primes.all { num % it != 0 }) {\n            primes.add(num)\n        }\n    }\n    return primes\n}\n",
            "fun multiply(a: Int, b: Int): Int {\n    return (a.absoluteValue % 10) * (b.absoluteValue % 10)\n}\n",
            "fun countUpper(s: String): Int {\n    val vowels = \"AEIOU\"\n    var result = 0\n    for (i in s.indices) {\n        if (i % 2 == 0 && vowels.contains(s[i])) {\n            result++\n        }\n    }\n    return result\n}\n",
            "fun closestInteger(value: String): Int {\n    val num = value.toFloat()\n    return if (num >= 0) num.toInt() + 0.5.toInt() else num.toInt() - 0.5.toInt()\n}\n",
            "fun makeAPile(n: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in 0 until n) {\n        result.add(n + 2 * i)\n    }\n    return result\n}\n",
            "fun wordsString(s: String): List<String> {\n    val pattern = Pattern.compile(\"[, ]\")\n    return pattern.split(s).filter { it.isNotEmpty() }\n}\n",
            "fun chooseNum(x: Int, y: Int): Int {\n    if (x > y) {\n        return -1\n    }\n    if (y % 2 == 0) {\n        return y\n    }\n    if (x != y) {\n        return y - 1\n    }\n    return -1\n}\n",
            "fun roundedAvg(n: Int, m: Int): String? {\n    if (n > m) {\n        return null\n    }\n    val rAvg = (m + n) / 2.0 + 0.5\n    return Integer.toBinaryString(rAvg.toInt()).substring(2)\n}\n",
            "fun allDigitsOdd(s: String): Boolean {\n    for (r in s) {\n        if (r % 2 == 0) {\n            return false\n        }\n    }\n    return true\n}\nfun uniqueDigits(x: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (num in x) {\n        if (allDigitsOdd(num.toString())) {\n            result.add(num)\n        }\n    }\n    result.sort()\n    return result\n}\n",
            "fun byLength(arr: List<Int>): List<String> {\n    val digitNames = listOf(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    val sortedArr = arr.filter { 1 <= it && it <= 9 }.sortedDescending()\n    return sortedArr.map { digitNames[it - 1] }\n}\n",
            "fun f(n: Int): List<Int> {\n    val nums = (1..n).toList()\n    return nums.mapIndexed { i, _ ->\n        if (i % 2 != 0) nums.subList(0, i).sum() else nums.subList(0, i).reduce { x, y -> x * y }\n    }\n}\n",
            "fun isPalindrome(txt: String): Boolean {\n    return txt == txt.reversed()\n}\nfun evenOddPalindrome(n: Int): List<Int> {\n    val cnt = mutableListOf(0, 0)\n    for (i in 1..n) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}\n",
            "fun digitsSum(n: Int): Int {\n    val nStr = n.toString()\n    return if (n >= 0) nStr.map { it.toString().toInt() }.sum() else 2 * nStr.substring(0, 2).toInt() + digitsSum(n.absoluteValue)\n}\nfun countNums(arr: List<Int>): Int {\n    return arr.filter { digitsSum(it) > 0 }.size\n}\n",
            "fun moveOneBall(arr: List<Int>): Boolean {\n    if (arr.isEmpty()) {\n        return true\n    }\n    val sortedArr = arr.sorted()\n    for (i in 0 until arr.size) {\n        if (arr.subList(i, arr.size) == sortedArr.subList(0, arr.size - i) && arr.subList(0, i) == sortedArr.subList(arr.size - i, arr.size)) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun canExchange(lst1: List<Int>, lst2: List<Int>): String {\n    var oddCnt = 0\n    var evenCnt = 0\n    for (num in lst1) {\n        if (num % 2 != 0) {\n            oddCnt++\n        }\n    }\n    for (num in lst2) {\n        if (num % 2 == 0) {\n            evenCnt++\n        }\n    }\n    return if (evenCnt >= oddCnt) \"YES\" else \"NO\"\n}\n",
            "fun histogram(test: String): Map<String, Int> {\n    val freq = mutableMapOf<String, Int>()\n    val words = mutableListOf<String>()\n    for (w in test.split(\" \")) {\n        if (w.length > 0) {\n            words.add(w)\n        }\n    }\n    for (w in words) {\n        freq[w] = freq.getOrDefault(w, 0) + 1\n    }\n    val result = mutableMapOf<String, Int>()\n    if (freq.isNotEmpty()) {\n        var maxFreq = 0\n        for (v in freq.values) {\n            if (v > maxFreq) {\n                maxFreq = v\n            }\n        }\n        for ((k, v) in freq) {\n            if (v == maxFreq) {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "fun reverseDelete(s: String, c: String): List<String> {\n    val s1 = s.filter { it !in c }.joinToString(\"\")\n    return listOf(s1, if (isPalindrome(s1)) \"yes\" else \"no\")\n}\n",
            "fun oddCount(lst: List<String>): List<String> {\n    val result = mutableListOf<String>()\n    for (num in lst) {\n        val n = num.sumOf { it.toInt().rem(2) == 1 }\n        val rs = \"the number of odd elements in the string i of the input.\"\n        result.add(rs.replace(\"i\", n.toString()))\n    }\n    return result\n}\n",
            "fun minSubArraySum(nums: List<Int>): Int {\n    var minSum = 0\n    var curSum = 0\n    for (n in nums) {\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    }\n    return if (minSum == 0) min(nums) else minSum\n}\n",
            "fun maxFill(grid: List<List<Int>>, capacity: Int): Int {\n    return grid.sumOf { it.sum() / capacity + 1 }\n}\n",
            "fun countOnes(num: Int): Int {\n    return Integer.bitCount(num)\n}\nfun sortArray(arr: List<Int>): List<Int> {\n    return arr.sortedWith(compareBy({ countOnes(it) }, { it })\n}\n",
            "fun selectWords(s: String, n: Int): List<String> {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\"\n    val words = s.split(\" \")\n    val result = mutableListOf<String>()\n    for (w in words) {\n        if (w.isNotEmpty()) {\n            var consonantCount = 0\n            for (c in w) {\n                if (consonants.contains(c.toLowerCase())) {\n                    consonantCount++\n                }\n            }\n            if (consonantCount == n) {\n                result.add(w)\n            }\n        }\n    }\n    return result\n}\n",
            "fun getClosestVowel(word: String): String {\n    val vowels = \"aeiouAEIOU\"\n    for (i in word.length - 2 downTo 1) {\n        if (vowels.contains(word[i]) && !vowels.contains(word[i - 1]) && !vowels.contains(word[i + 1])) {\n            return word[i]\n        }\n    }\n    return \"\"\n}\n",
            "fun check(s: String): Boolean {\n    var depth = 0\n    for (ch in s) {\n        if (ch == '(') {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\nfun matchParens(lst: List<String>): String {\n    val s1 = lst[0] + lst[1]\n    val s2 = lst[1] + lst[0]\n    return if (check(s1) || check(s2)) \"Yes\" else \"No\"\n}\n",
            "fun maximum(arr: List<Int>, k: Int): List<Int> {\n    if (k == 0) {\n        return emptyList()\n    }\n    return arr.sortedDescending().takeLast(k)\n}\n",
            "fun solution(lst: List<Int>): Int {\n    var result = 0\n    for (i in lst.indices) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "fun addElements(arr: List<Int>, k: Int): Int {\n    var result = 0\n    for (n in arr.subList(0, k)) {\n        if (n.toString().length <= 2) {\n            result += n\n        }\n    }\n    return result\n}\n",
            "fun getOddCollatz(n: Int): List<Int> {\n    val collatz = mutableListOf(1)\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.add(n)\n            n = 3 * n + 1\n        } else {\n            n /= 2\n        }\n    }\n    return collatz.sorted()\n}\n",
            "fun validDate(date: String): Boolean {\n    if (date.length != 10 || date[2] != '-' || date[5] != '-') {\n        return false\n    }\n    val m = date.substring(0, 2).toInt()\n    val d = date.substring(3, 5).toInt()\n    if (m in listOf(1, 3, 5, 7, 8, 10, 12) && d in 1..31) {\n        return true\n    }\n    if (m in listOf(4, 6, 9, 11) && d in 1..30) {\n        return true\n    }\n    if (m == 2 && d in 1..29) {\n        return true\n    }\n    return false\n}\n",
            "fun splitWords(txt: String): List<String> {\n    val pattern = Pattern.compile(\"\\\\s+\")\n    if (pattern.matcher(txt).find()) {\n        return txt.split(pattern)\n    } else if (pattern.matcher(\",\").find()) {\n        return txt.split(pattern)\n    } else {\n        val result = mutableListOf<String>()\n        for (c in txt) {\n            if (Character.isLowerCase(c) && c.toInt() % 2 == 0) {\n                result.add(c.toString())\n            }\n        }\n        return listOf(result.size.toString())\n    }\n}\n",
            "fun isSorted(lst: List<Int>): Boolean {\n    if (!lst.all { i -> lst[i - 1] <= lst[i] }) {\n        return false\n    }\n    val freq = mutableMapOf<Int, Int>()\n    for (i in lst) {\n        freq[i] = freq.getOrDefault(i, 0) + 1\n    }\n    return freq.values.maxOrNull() ?: 0 <= 2\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\nfun intersection(interval1: List<Int>, interval2: List<Int>): String {\n    val l = max(interval1[0], interval2[0])\n    val r = min(interval1[1], interval2[1])\n    val length = r - l\n    return if (length > 0 && isPrime(length)) \"YES\" else \"NO\"\n}\n",
            "fun prodSigns(arr: List<Int>): Int? {\n    if (arr.isEmpty()) {\n        return null\n    }\n    val sign = if (arr.count { it < 0 } % 2 == 1) -1 else 1\n    return sign * arr.sumOf { it.absoluteValue }\n}\n",
            "fun minPath(grid: List<List<Int>>, k: Int): List<Int> {\n    val n = grid.size\n    var minVal = n * n + 1\n    for (i in 0 until n) {\n        for (j in 0 until n) {\n            if (grid[i][j] == 1) {\n                val temp = mutableListOf<Int>()\n                if (i != 0) {\n                    temp.add(grid[i - 1][j])\n                }\n                if (j != 0) {\n                    temp.add(grid[i][j - 1])\n                }\n                if (i != n - 1) {\n                    temp.add(grid[i + 1][j])\n                }\n                if (j != n - 1) {\n                    temp.add(grid[i][j + 1])\n                }\n                minVal = temp.min() ?: minVal\n            }\n        }\n    }\n    val result = mutableListOf<Int>()\n    for (i in 0 until k) {\n        result.add(if (i % 2 == 0) 1 else minVal)\n    }\n    return result\n}\n",
            "fun tri(n: Int): List<Int> {\n    if (n == 0) {\n        return listOf(1)\n    }\n    val seq = mutableListOf(1, 3)\n    for (i in 2..n) {\n        if (i % 2 == 0) {\n            seq.add(i / 2 + 1)\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "fun digits(n: Int): Int {\n    val odds = n.toString().filter { it.toInt() % 2 == 1 }.map { it.toString().toInt() }\n    return odds.reduce { acc, i -> acc * i }\n}\n",
            "fun isNested(s: String): Boolean {\n    val openIdx = mutableListOf<Int>()\n    val closeIdx = mutableListOf<Int>()\n    for (i in s.indices) {\n        val ch = s[i]\n        if (ch == '[') {\n            openIdx.add(i)\n        } else if (ch == ']') {\n            closeIdx.add(i)\n        }\n    }\n    closeIdx.reverse()\n    var cnt = 0\n    var i = 0\n    val l = closeIdx.size\n    for (idx in openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\n",
            "fun sumSquares(lst: List<Double>): Int {\n    var result = 0\n    for (n in lst) {\n        result += ceil(n).toInt().pow(2)\n    }\n    return result\n}\n",
            "fun checkIfLastCharIsALetter(txt: String): Boolean {\n    if (txt.isEmpty()) {\n        return false\n    }\n    val last = txt.substring(txt.lastIndexOf(' ') + 1)\n    return last.length == 1 && last[0].isLetter()\n}\n",
            "fun canArrange(arr: List<Int>): Int {\n    if (arr.size <= 1) {\n        return -1\n    }\n    val idx = mutableListOf<Int>()\n    for (i in 1 until arr.size) {\n        if (arr[i] < arr[i - 1]) {\n            idx.add(i)\n        }\n    }\n    if (idx.size == 0) {\n        return -1\n    }\n    return idx[idx.size - 1]\n}\n",
            "fun largestSmallestIntegers(lst: List<Int>): List<Int?> {\n    val neg = lst.filter { it < 0 }\n    val pos = lst.filter { it > 0 }\n    val maxNeg = if (neg.isNotEmpty()) neg.max() else null\n    val minPos = if (pos.isNotEmpty()) pos.min() else null\n    return listOf(maxNeg, minPos)\n}\n",
            "fun compareOne(a: Any, b: Any): Double? {\n    val a1 = anyToReal(a)\n    val b1 = anyToReal(b)\n    return if (a1 == b1) null else if (a1 > b1) a1 else b1\n}\nfun anyToReal(o: Any): Double {\n    return when (o) {\n        is String -> o.replace(',', '.').toDouble()\n        is Int -> o.toDouble()\n        is Float -> o.toDouble()\n        else -> throw RuntimeException(\"Type Error\")\n    }\n}\n",
            "fun isEqualToSumEven(n: Int): Boolean {\n    return n % 2 == 0 && n >= 8\n}\n",
            "fun specialFactorial(n: Int): Int {\n    var fact = 1\n    var result = 1\n    for (i in 1..n) {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "fun fixSpaces(txt: String): String {\n    return Pattern.compile(\"\\\\s{3,}\").matcher(txt).replaceAll(\"-\").replace(\" \", \"_\")\n}\n",
            "fun fileNameCheck(fileName: String): String {\n    val suf = listOf(\"txt\", \"exe\", \"dll\")\n    val lst = fileName.split(\".\")\n    if (lst.size != 2 || !contains(suf, lst[1]) || lst[0].isEmpty() || !lst[0][0].isLetter() || lst[0].filter { it.isDigit() }.length > 3) {\n        return \"No\"\n    }\n    return \"Yes\"\n}\nfun contains(s: List<String>, e: String): Boolean {\n    for (a in s) {\n        if (a == e) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun sumSquares(lst: List<Int>): Int {\n    var result = 0\n    for (i in lst.indices) {\n        val e = lst[i]\n        if (i % 3 == 0) {\n            result += e * e\n        } else if (i % 4 == 0) {\n            result += e * e * e\n        } else {\n            result += e\n        }\n    }\n    return result\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\nfun wordsInSentence(sentence: String): String {\n    val words = sentence.split(\" \")\n    return words.filter { isPrime(it.length) }.joinToString(\" \")\n}\n",
            "fun simplify(x: String, n: String): Boolean {\n    val xs = x.split(\"/\")\n    val ns = n.split(\"/\")\n    val num = xs[0].toInt() * ns[0].toInt()\n    val den = xs[1].toInt() * ns[1].toInt()\n    return num % den == 0\n}\n",
            "fun digitsSum(n: Int): Int {\n    val nStr = n.toString()\n    return if (n >= 0) nStr.map { it.toInt() }.sum() else 2 * nStr.substring(0, 2).toInt() + digitsSum(nStr.toInt())\n}\nfun orderByPoints(nums: List<Int>): List<Int> {\n    return nums.sortedBy { digitsSum(it) }\n}\n",
            "fun specialFilter(nums: List<Int>): Int {\n    val odds = \"13579\"\n    var result = 0\n    for (n in nums) {\n        if (n > 10 && n % 2 == 1 && odds.contains(n.toString()[0..0])) {\n            result++\n        }\n    }\n    return result\n}\n",
            "fun getMaxTriples(n: Int): Int {\n    val c = IntArray(3)\n    for (i in 1..n) {\n        val a = i*i - i + 1\n        c[a%3]++\n    }\n    return c[0]*c[1]*c[2] + (c[0]*(c[0]-1)*(c[0]-2) + c[1]*(c[1]-1)*(c[1]-2) + c[2]*(c[2]-1)*(c[2]-2)) / 6\n}\n",
            "fun bf(planet1: String, planet2: String): List<String> {\n    val names = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (!names.contains(planet1) || !names.contains(planet2)) {\n        return emptyList()\n    }\n    val l = names.indexOf(planet1)\n    val r = names.indexOf(planet2)\n    if (l > r) {\n        return names.subList(r + 1, l)\n    }\n    return if (l == r) emptyList() else names.subList(l + 1, r)\n}\n",
            "fun sortedListSum(lst: List<String>): List<String> {\n    val result = mutableListOf<String>()\n    for (s in lst) {\n        if (s.length % 2 == 0) {\n            result.add(s)\n        }\n    }\n    result.sortWith(Comparator { a, b ->\n        if (a.length == b.length) {\n            a < b\n        } else {\n            a.length < b.length\n        }\n    })\n    return result\n}\n",
            "fun xOrY(n: Int, x: Int, y: Int): Int {\n    if (n < 2) {\n        return y\n    }\n    for (i in 2..sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) {\n            return y\n        }\n    }\n    return x\n}\n",
            "fun doubleTheDifference(lst: List<Double>): Int {\n    var result = 0\n    for (n in lst) {\n        if (n >= 0 && abs(n) % 2 == 1) {\n            result += n * n\n        }\n    }\n    return result\n}\n",
            "fun compare(game: List<Int>, guess: List<Int>): List<Int> {\n    return game.zip(guess).map { abs(it.first - it.second) }\n}\n",
            "fun strongestExtension(className: String, extensions: List<String>): String {\n    var maxS = Float.NEGATIVE_INFINITY\n    var maxExt = \"\"\n    for (ext in extensions) {\n        val upper = ext.count { it.isUpperCase() }\n        val lower = ext.count { it.isLowerCase() }\n        val s = upper - lower\n        if (s > maxS) {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return \"$className.$maxExt\"\n}\n",
            "fun cycpatternCheck(a: String, b: String): Boolean {\n    if (a.length < b.length) {\n        return false\n    }\n    for (i in 0 until b.length) {\n        if (a.contains(b.substring(i) + b.substring(0, i))) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun evenOddCount(num: Int): List<Int> {\n    val ds = abs(num).toString()\n    val even = ds.count { it.toInt() % 2 == 0 }\n    return listOf(even, ds.length - even)\n}\n",
            "fun intToMiniRoman(num: Int): String {\n    val values = listOf(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    val numerals = listOf(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    val res = mutableListOf<String>()\n    for (i in values.indices) {\n        while (num >= values[i]) {\n            res.add(numerals[i])\n            num -= values[i]\n        }\n    }\n    return res.joinToString(\"\")\n}\n",
            "fun rightAngleTriangle(a: Int, b: Int, c: Int): Boolean {\n    val s = listOf(a, b, c).sorted()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "fun findMax(words: List<String>): String {\n    var maxCnt = 0\n    var maxW = \"\"\n    for (w in words) {\n        val cnt = w.toSet().size\n        if (cnt > maxCnt) {\n            maxCnt = cnt\n            maxW = w\n        } else if (cnt == maxCnt) {\n            maxW = minOf(maxW, w)\n        }\n    }\n    return maxW\n}\n",
            "fun eat(num: Int, need: Int, remaining: Int): List<Int> {\n    return if (need <= remaining) listOf(num + need, remaining - need) else listOf(num + remaining, 0)\n}\n",
            "fun doAlgebra(operators: List<String>, operands: List<Int>): Int {\n    val ops = operators.toMutableList()\n    val nums = operands.toMutableList()\n    var i = ops.size - 1\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = Math.pow(nums[i].toDouble(), nums[i + 1].toDouble()).toInt()\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n        }\n        i -= 1\n    }\n    i = 0\n    while (i < ops.size) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] / nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while (i < ops.size) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "fun solve(s: String): String {\n    if (!s.contains(Regex(\"[a-zA-Z]\"))) {\n        return reverse(s)\n    }\n    val result = mutableListOf<Char>()\n    for (ch in s) {\n        if (!ch.isLetter()) {\n            result.add(ch)\n        } else if (ch.isUpperCase()) {\n            result.add(ch.toLowerCase())\n        } else if (ch.isLowerCase()) {\n            result.add(ch.toUpperCase())\n        }\n    }\n    return result.joinToString(\"\")\n}\nfun reverse(s: String): String {\n    val result = mutableListOf<Char>()\n    for (i in s.indices.reversed()) {\n        result.add(s[i])\n    }\n    return result.joinToString(\"\")\n}\n",
            "fun stringToMd5(txt: String): String? {\n    if (txt.isEmpty()) {\n        return null\n    }\n    val md5_hash = MessageDigest.getInstance(\"MD5\")\n    val txt_bytes = txt.toByteArray()\n    md5_hash.update(txt_bytes)\n    val md5_encoded = md5_hash.digest()\n    val md5_encoded_str = BigInteger(1, md5_encoded).toString(16)\n    return md5_encoded_str\n}\n",
            "fun generateIntegers(a: Int, b: Int): List<Int> {\n    val lower = maxOf(2, minOf(a, b))\n    val upper = minOf(8, maxOf(a, b))\n    val result = mutableListOf<Int>()\n    for (i in lower..upper) {\n        if (i % 2 == 0) {\n            result.add(i)\n        }\n    }\n    return result\n}\n"
        ],
        "php": [
            "function hasCloseElements ($numbers, $threshold) {\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "function separateParenGroups ($parenString) {\n    $groups = [];\n    $stk = [];\n    $currentGroup = \"\";\n    $parens = str_replace(\" \", \"\", $parenString);\n    for ($i = 0; $i < strlen($parens); $i++) {\n        $ch = $parens[$i];\n        if ($ch == '(') {\n            $stk[] = $ch;\n            $currentGroup .= $ch;\n        } else if ($ch == ')') {\n            array_pop($stk);\n            $currentGroup .= $ch;\n            if (count($stk) == 0) {\n                $groups[] = $currentGroup;\n                $currentGroup = \"\";\n            }\n        }\n    }\n    return $groups;\n}\n",
            "function truncateNumber ($num) {\n    return $num - floor($num);\n}\n",
            "function belowZero ($operations) {\n    $balance = 0;\n    foreach ($operations as $op) {\n        $balance += $op;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function meanAbsoluteDeviation ($numbers) {\n    $mean = 0.0;\n    foreach ($numbers as $n) {\n        $mean += $n;\n    }\n    $mean /= count($numbers);\n    $deviation = 0.0;\n    foreach ($numbers as $n) {\n        $deviation += abs($n - $mean);\n    }\n    return $deviation / count($numbers);\n}\n",
            "function intersperse ($numbers, $delimiter) {\n    $result = [];\n    foreach ($numbers as $i => $e) {\n        if ($i != 0) {\n            $result[] = $delimiter;\n        }\n        $result[] = $e;\n    }\n    return $result;\n}\n",
            "function parseNestedParens ($parenString) {\n    $result = [];\n    $parenGroups = explode(\" \", $parenString);\n    foreach ($parenGroups as $group) {\n        $maxDepth = 0;\n        $depth = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            $ch = $group[$i];\n            if ($ch == '(') {\n                $depth += 1;\n                $maxDepth = max($maxDepth, $depth);\n            } else if ($ch == ')') {\n                $depth -= 1;\n            }\n        }\n        $result[] = $maxDepth;\n    }\n    return $result;\n}\n",
            "function filterBySubstring ($strs, $substring) {\n    $result = [];\n    foreach ($strs as $s) {\n        if (strpos($s, $substring) !== false) {\n            $result[] = $s;\n        }\n    }\n    return $result;\n}\n",
            "function sumProduct ($numbers) {\n    $nSum = 0;\n    foreach ($numbers as $n) {\n        $nSum += $n;\n    }\n    $nProduct = 1;\n    foreach ($numbers as $n) {\n        $nProduct *= $n;\n    }\n    return [$nSum, $nProduct];\n}\n",
            "function rollingMax ($numbers) {\n    $maxSoFar = -INF;\n    $result = [];\n    foreach ($numbers as $num) {\n        $maxSoFar = max($maxSoFar, $num);\n        $result[] = $maxSoFar;\n    }\n    return $result;\n}\n",
            "function isPalindrome($s) {\n    return $s == strrev($s);\n}\nfunction makePalindrome($s) {\n    if (isPalindrome($s)) {\n        return $s;\n    }\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (isPalindrome(substr($s, $i))) {\n            return $s . strrev(substr($s, 0, $i));\n        }\n    }\n    return \"\";\n}\nfunction strrev($s) {\n    return implode(\"\", array_reverse(str_split($s)));\n}\n",
            "function stringXor ($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        if ($a[$i] == $b[$i]) {\n            $result .= \"0\";\n        } else {\n            $result .= \"1\";\n        }\n    }\n    return $result;\n}\n",
            "function longest ($strs) {\n    if (count($strs) == 0) {\n        return null;\n    }\n    $longestS = $strs[0];\n    foreach ($strs as $s) {\n        if (strlen($s) > strlen($longestS)) {\n            $longestS = $s;\n        }\n    }\n    return $longestS;\n}\n",
            "function greatestCommonDivisor ($a, $b) {\n    if ($b == 0) {\n        return $a;\n    }\n    return greatestCommonDivisor($b, $a % $b);\n}\n",
            "function allPrefixes ($s) {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $prefixes[] = substr($s, 0, $i + 1);\n    }\n    return $prefixes;\n}\n",
            "function stringSequence ($n) {\n    $result = [];\n    for ($i = 0; $i <= $n; $i++) {\n        $result[] = strval($i);\n    }\n    return implode(' ', $result);\n}\n",
            "function countDistinctCharacters ($s) {\n    return count(array_unique(str_split(strtolower($s)));\n}\n",
            "function parseMusic ($musicString) {\n    $durations = [\"o\" => 4, \"o|\" => 2, \".|\" => 1];\n    $notes = explode(\" \", $musicString);\n    return array_map(function ($note) use ($durations) {\n        return $durations[$note];\n    }, $notes);\n}\n",
            "function howManyTimes ($s, $substring) {\n    $times = 0;\n    for ($i = 0; $i < strlen($s) - strlen($substring) + 1; $i++) {\n        if (substr($s, $i, strlen($substring)) == $substring) {\n            $times += 1;\n        }\n    }\n    return $times;\n}\n",
            "function sortNumbers ($numbers) {\n    $numDict = [\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n    ];\n    $numList = [];\n    foreach (explode(\" \", $numbers) as $e) {\n        if (isset($numDict[$e])) {\n            $numList[] = $e;\n        }\n    }\n    usort($numList, function ($a, $b) use ($numDict) {\n        return $numDict[$a] < $numDict[$b];\n    });\n    return implode(\" \", $numList);\n}\n",
            "function findClosestElements ($numbers) {\n    $sortedNumbers = $numbers;\n    sort($sortedNumbers);\n    $minDiff = INF;\n    $closestPair = [];\n    for ($i = 1; $i < count($sortedNumbers); $i++) {\n        $diff = $sortedNumbers[$i] - $sortedNumbers[$i - 1];\n        if ($diff < $minDiff) {\n            $minDiff = $diff;\n            $closestPair = [$sortedNumbers[$i - 1], $sortedNumbers[$i]];\n        }\n    }\n    return $closestPair;\n}\n",
            "function rescaleToUnit ($numbers) {\n    $minNum = INF;\n    $maxNum = -INF;\n    foreach ($numbers as $num) {\n        if ($num < $minNum) {\n            $minNum = $num;\n        }\n        if ($num > $maxNum) {\n            $maxNum = $num;\n        }\n    }\n    if ($minNum == $maxNum) {\n        return array_fill(0, count($numbers), 0);\n    }\n    $result = [];\n    foreach ($numbers as $i => $num) {\n        $result[$i] = ($num - $minNum) / ($maxNum - $minNum);\n    }\n    return $result;\n}\n",
            "function filterIntegers ($values) {\n    $result = [];\n    foreach ($values as $x) {\n        if (is_int($x)) {\n            $result[] = $x;\n        }\n    }\n    return $result;\n}\n",
            "function strLength ($s) {\n    return strlen($s);\n}\n",
            "function largestDivisor ($n) {\n    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            return $n / $i;\n        }\n    }\n    return 1;\n}\n",
            "function factorize ($n) {\n    $factors = [];\n    $divisor = 2;\n    while ($divisor <= $n) {\n        if ($n % $divisor == 0) {\n            $factors[] = $divisor;\n            $n /= $divisor;\n        } else {\n            $divisor += 1;\n        }\n    }\n    return $factors;\n}\n",
            "function removeDuplicates ($numbers) {\n    $counts = [];\n    foreach ($numbers as $num) {\n        $counts[$num] = $counts[$num] + 1;\n    }\n    $res = [];\n    foreach ($numbers as $num) {\n        if ($counts[$num] == 1) {\n            $res[] = $num;\n        }\n    }\n    return $res;\n}\n",
            "function flipCase ($s) {\n    $flipped = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if (!ctype_alpha($ch)) {\n            $flipped[] = $ch;\n        } else if (ctype_lower($ch)) {\n            $flipped[] = strtoupper($ch);\n        } else if (ctype_upper($ch)) {\n            $flipped[] = strtolower($ch);\n        }\n    }\n    return implode('', $flipped);\n}\n",
            "function concatenate ($strs) {\n    return implode(\"\", $strs);\n}\n",
            "function filterByPrefix ($strs, $prefixStr) {\n    $result = [];\n    foreach ($strs as $s) {\n        if (strpos($s, $prefixStr) === 0) {\n            $result[] = $s;\n        }\n    }\n    return $result;\n}\n",
            "function getPositive ($l) {\n    $result = [];\n    foreach ($l as $num) {\n        if ($num > 0) {\n            $result[] = $num;\n        }\n    }\n    return $result;\n}\n",
            "function isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= intval(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function poly ($xs, $x) {\n    $res = 0.0;\n    foreach ($xs as $i => $x) {\n        $res += floatval($x) * pow($x, $i);\n    }\n    return $res;\n}\nfunction findZero ($xs) {\n    $x1 = 1.0;\n    $x2 = -1.0;\n    while (poly($xs, $x1) * poly($xs, $x2) > 0) {\n        $x1 *= 2;\n        $x2 *= 2;\n    }\n    while (abs($x1 - $x2) > 1e-10) {\n        $mid = ($x1 + $x2) / 2;\n        if (poly($xs, $mid) == 0) {\n            return $mid;\n        } else if (poly($xs, $mid) * poly($xs, $x1) < 0) {\n            $x2 = $mid;\n        } else {\n            $x1 = $mid;\n        }\n    }\n    return ($x1 + $x2) / 2;\n}\n",
            "function sortThird ($l) {\n    $sortedThird = [];\n    for ($i = 0; $i < count($l); $i += 3) {\n        $sortedThird[] = $l[$i];\n    }\n    sort($sortedThird);\n    $result = [];\n    for ($i = 0; $i < count($l); $i++) {\n        if ($i % 3 == 0) {\n            $result[] = $sortedThird[$i/3];\n        } else {\n            $result[] = $l[$i];\n        }\n    }\n    return $result;\n}\n",
            "function listUnique ($l) {\n    $m = [];\n    foreach ($l as $e) {\n        $m[$e] = true;\n    }\n    $result = array_keys($m);\n    sort($result);\n    return $result;\n}\n",
            "function maxElement ($l) {\n    if (count($l) == 0) {\n        return 0;\n    }\n    $max = $l[0];\n    foreach ($l as $e) {\n        if ($e > $max) {\n            $max = $e;\n        }\n    }\n    return $max;\n}\n",
            "function fizzBuzz ($n) {\n    $cnt = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            $cnt += substr_count(strval($i), \"7\");\n        }\n    }\n    return $cnt;\n}\n",
            "function sortEven ($l) {\n    $sortedEven = [];\n    for ($i = 0; $i < count($l); $i += 2) {\n        $sortedEven[] = $l[$i];\n    }\n    sort($sortedEven);\n    $result = [];\n    for ($i = 0; $i < count($l); $i++) {\n        if ($i % 2 == 0) {\n            $result[$i] = $sortedEven[$i / 2];\n        } else {\n            $result[$i] = $l[$i];\n        }\n    }\n    return $result;\n}\n",
            "function encodeCyclic ($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i += 3) {\n        if ($i + 3 > strlen($s)) {\n            $result[] = substr($s, $i);\n        } else {\n            $result[] = substr($s, $i + 1, 2);\n            $result[] = substr($s, $i, 1);\n        }\n    }\n    return implode(\"\", $result);\n}\nfunction decodeCyclic ($s) {\n    return encodeCyclic(encodeCyclic($s));\n}\n",
            "function isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction primeFib ($n) {\n    $f = [0, 1];\n    $cnt = 0;\n    while ($cnt < $n) {\n        $f = [$f[1], $f[0] + $f[1]];\n        if (isPrime($f[1])) {\n            $cnt++;\n        }\n    }\n    return $f[1];\n}\n",
            "function triplesSumToZero ($l) {\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            for ($k = $j + 1; $k < count($l); $k++) {\n                if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "function carRaceCollision ($n) {\n    return $n * $n;\n}\n",
            "function incrList ($l) {\n    $result = [];\n    foreach ($l as $e) {\n        $result[] = $e + 1;\n    }\n    return $result;\n}\n",
            "function pairsSumToZero ($l) {\n    $seen = [];\n    foreach ($l as $num) {\n        if (isset($seen[-$num])) {\n            return true;\n        }\n        $seen[$num] = true;\n    }\n    return false;\n}\n",
            "function changeBase ($x, $bas) {\n    if ($x == 0) {\n        return \"0\";\n    }\n    $digits = [];\n    while ($x > 0) {\n        $digits[] = strval($x % $bas);\n        $x = intdiv($x, $bas);\n    }\n    return implode(\"\", array_reverse($digits));\n}\n",
            "function triangleArea ($a, $h) {\n    return $a * $h / 2;\n}\n",
            "function fib4 ($n) {\n    $fib = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib[$i % 4] = array_sum($fib);\n    }\n    return $fib[$n % 4];\n}\n",
            "function median ($l) {\n    $sl = $l;\n    sort($sl);\n    if (count($l) % 2 != 0) {\n        return $sl[count($l) / 2];\n    }\n    return ($sl[count($l) / 2] + $sl[count($l) / 2 - 1]) / 2;\n}\n",
            "function isPalindrome ($txt) {\n    return $txt == reverse($txt);\n}\nfunction reverse ($s) {\n    $runes = str_split($s);\n    for ($i = 0, $j = count($runes) - 1; $i < $j; $i++, $j--) {\n        $tmp = $runes[$i];\n        $runes[$i] = $runes[$j];\n        $runes[$j] = $tmp;\n    }\n    return implode('', $runes);\n}\n",
            "function modp ($n, $p) {\n    $ret = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $ret = ($ret * 2) % $p;\n    }\n    return $ret;\n}\n",
            "function encodeShift ($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $result .= chr(((ord($s[$i]) - 97 + 5) % 26) + 97);\n    }\n    return $result;\n}\nfunction decodeShift ($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $result .= chr(((ord($s[$i]) - 97 + 21) % 26) + 97);\n    }\n    return $result;\n}\n",
            "function removeVowels ($txt) {\n    $vowels = \"aeiouAEIOU\";\n    $result = \"\";\n    for ($i = 0; $i < strlen($txt); $i++) {\n        $char = $txt[$i];\n        if (strpos($vowels, $char) === false) {\n            $result .= $char;\n        }\n    }\n    return $result;\n}\n",
            "function belowThreshold ($l, $t) {\n    foreach ($l as $x) {\n        if ($x >= $t) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function add ($x, $y) {\n    return $x + $y;\n}\n",
            "function sameChars ($s0, $s1) {\n    return count_chars($s0, 1) === count_chars($s1, 1);\n}\n",
            "function fib ($n) {\n    if ($n <= 1) {\n        return $n;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n",
            "function correctBracketing ($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        $b = $brackets[$i];\n        if ($b == '<') {\n            $depth += 1;\n        } else if ($b == '>') {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "function monotonic ($l) {\n    $diff = array_map(function ($x, $y) {\n        return $y - $x;\n    }, $l, array_slice($l, 1));\n    return array_reduce($diff, function ($carry, $x) {\n        return $carry && $x <= 0;\n    }, true) || array_reduce($diff, function ($carry, $x) {\n        return $carry && $x >= 0;\n    }, true);\n}\n",
            "function common ($l1, $l2) {\n    return array_values(array_intersect($l1, $l2));\n}\n",
            "function largestPrimeFactor ($n) {\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n    return $n;\n}\n",
            "function sumToN ($n) {\n    $result = 0;\n    for ($i = 0; $i <= $n; $i++) {\n        $result += $i;\n    }\n    return $result;\n}\n",
            "function correctBracketing ($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        $b = $brackets[$i];\n        if ($b == '(') {\n            $depth += 1;\n        } else if ($b == ')') {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "function derivative ($xs) {\n    $result = [];\n    for ($i = 1; $i < count($xs); $i++) {\n        $result[] = $xs[$i] * $i;\n    }\n    return $result;\n}\n",
            "function fibfib ($n) {\n    if ($n <= 1) {\n        return 0;\n    }\n    $a = $b = $c = 1;\n    while ($n > 2) {\n        $a = $b;\n        $b = $c;\n        $c = $a + $b + $c;\n        $n -= 1;\n    }\n    return $c;\n}\n",
            "function vowelsCount ($s) {\n    $vowels = \"aeiou\";\n    $cnt = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($vowels, strtolower($s[$i])) !== false || ($i == strlen($s) - 1 && strtolower($s[$i]) == \"y\")) {\n            $cnt++;\n        }\n    }\n    return $cnt;\n}\n",
            "function circularShift ($x, $shift) {\n    $x_str = strval($x);\n    if ($shift > strlen($x_str)) {\n        return strrev($x_str);\n    } else {\n        return substr($x_str, -$shift) . substr($x_str, 0, -$shift);\n    }\n}\n",
            "function digitSum ($s) {\n    $result = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $c = $s[$i];\n        if (ctype_upper($c)) {\n            $result += ord($c);\n        }\n    }\n    return $result;\n}\n",
            "function fruitDistribution ($s, $n) {\n    $words = explode(' ', $s);\n    $apples = intval($words[array_search('apples', $words) - 1]);\n    $oranges = intval($words[array_search('oranges', $words) - 1]);\n    return $n - $apples - $oranges;\n}\n",
            "function pluck ($arr) {\n    $evens = [];\n    foreach ($arr as $n) {\n        if ($n % 2 == 0) {\n            $evens[] = $n;\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n    $minEven = $evens[0];\n    foreach ($evens as $n) {\n        if ($n < $minEven) {\n            $minEven = $n;\n        }\n    }\n    foreach ($arr as $i => $n) {\n        if ($n == $minEven) {\n            return [$minEven, $i];\n        }\n    }\n    return [];\n}\n",
            "function search ($lst) {\n    $freqs = [];\n    foreach ($lst as $n) {\n        $freqs[$n] = $freqs[$n] + 1;\n    }\n    $goodVals = [];\n    foreach ($freqs as $k => $v) {\n        if ($v >= $k) {\n            $goodVals[] = $k;\n        }\n    }\n    if (count($goodVals) == 0) {\n        return -1;\n    }\n    $maxVal = $goodVals[0];\n    foreach ($goodVals as $v) {\n        if ($v > $maxVal) {\n            $maxVal = $v;\n        }\n    }\n    return $maxVal;\n}\n",
            "function strangeSortList ($lst) {\n    $sl = $lst;\n    sort($sl);\n    $result = [];\n    $left = 0;\n    $right = count($sl) - 1;\n    while ($left <= $right) {\n        $result[] = $sl[$left];\n        $left += 1;\n        if ($left <= $right) {\n            $result[] = $sl[$right];\n            $right -= 1;\n        }\n    }\n    return $result;\n}\n",
            "function triangleArea ($a, $b, $c) {\n    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $s = ($a + $b + $c) / 2.0;\n        return sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    }\n    return -1.0;\n}\n",
            "function willItFly ($q, $w) {\n    if (count($q) == 0) {\n        return false;\n    }\n    $isPalin = true;\n    for ($i = 0; $i < count($q); $i++) {\n        if ($q[$i] != $q[count($q)-$i-1]) {\n            $isPalin = false;\n            break;\n        }\n    }\n    $total = 0;\n    foreach ($q as $e) {\n        $total += $e;\n    }\n    return $isPalin && $total <= $w;\n}\n",
            "function smallestChange ($arr) {\n    $ans = 0;\n    for ($i = 0; $i < count($arr)/2; $i++) {\n        if ($arr[$i] != $arr[count($arr)-$i-1]) {\n            $ans++;\n        }\n    }\n    return $ans;\n}\n",
            "function totalMatch ($lst1, $lst2) {\n    $cnt1 = 0;\n    foreach ($lst1 as $s) {\n        $cnt1 += strlen($s);\n    }\n    $cnt2 = 0;\n    foreach ($lst2 as $s) {\n        $cnt2 += strlen($s);\n    }\n    if ($cnt1 <= $cnt2) {\n        return $lst1;\n    }\n    return $lst2;\n}\n",
            "function isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= intval(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isMultiplyPrime ($a) {\n    $cnt = 0;\n    for ($i = 2; $i <= $a; $i++) {\n        if (isPrime($i)) {\n            while ($a % $i == 0) {\n                $cnt++;\n                $a /= $i;\n            }\n        }\n    }\n    return $cnt == 3;\n}\n",
            "function isSimplePower ($x, $n) {\n    if ($n < 2) {\n        return $x == $n;\n    }\n    $tmp = 1;\n    while ($tmp < $x) {\n        $tmp *= $n;\n    }\n    return $tmp == $x;\n}\n",
            "function isCube ($a) {\n    $a = abs($a);\n    $root = round(pow($a, 1.0 / 3.0));\n    return $root * $root * $root == $a;\n}\n",
            "function hexKey ($num) {\n    $result = 0;\n    foreach (str_split($num) as $x) {\n        if ($x == '2' || $x == '3' || $x == '5' || $x == '7' || $x == 'B' || $x == 'D') {\n            $result++;\n        }\n    }\n    return $result;\n}\n",
            "function decimalToBinary ($dec) {\n    $binary = decbin($dec);\n    return \"db\" . $binary . \"db\";\n}\n",
            "function isHappy ($s) {\n    if (strlen($s) < 3) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($s) - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function numericalLetterGrade ($grades) {\n    $result = [];\n    foreach ($grades as $g) {\n        if ($g == 4.0) {\n            $result[] = \"A+\";\n        } else if ($g > 3.7) {\n            $result[] = \"A\";\n        } else if ($g > 3.3) {\n            $result[] = \"A-\";\n        } else if ($g > 3.0) {\n            $result[] = \"B+\";\n        } else if ($g > 2.7) {\n            $result[] = \"B\";\n        } else if ($g > 2.3) {\n            $result[] = \"B-\";\n        } else if ($g > 2.0) {\n            $result[] = \"C+\";\n        } else if ($g > 1.7) {\n            $result[] = \"C\";\n        } else if ($g > 1.3) {\n            $result[] = \"C-\";\n        } else if ($g > 1.0) {\n            $result[] = \"D+\";\n        } else if ($g > 0.7) {\n            $result[] = \"D\";\n        } else if ($g > 0.0) {\n            $result[] = \"D-\";\n        } else {\n            $result[] = \"E\";\n        }\n    }\n    return $result;\n}\n",
            "function primeLength ($s) {\n    $length = strlen($s);\n    if ($length < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($length)) + 1; $i++) {\n        if ($length % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function startsOneEnds ($n) {\n    if ($n == 1) {\n        return 1;\n    }\n    return 2 * 9 * pow(10, $n-2);\n}\n",
            "function solve ($n) {\n    $digitsSum = 0;\n    foreach (str_split($n) as $d) {\n        $digitsSum += intval($d);\n    }\n    return decbin($digitsSum);\n}\n",
            "function add ($lst) {\n    $result = 0;\n    foreach ($lst as $i => $x) {\n        if ($i % 2 == 1 && $x % 2 == 0) {\n            $result += $x;\n        }\n    }\n    return $result;\n}\n",
            "function antiShuffle ($s) {\n    $words = [];\n    foreach (explode(\" \", $s) as $word) {\n        $runes = str_split($word);\n        usort($runes, function ($a, $b) { return $a < $b; });\n        $words[] = implode(\"\", $runes);\n    }\n    return implode(\" \", $words);\n}\n",
            "function getRow ($lst, $x) {\n    $coords = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $e) {\n            if ($e == $x) {\n                $coords[] = [$i, $j];\n            }\n        }\n    }\n    usort($coords, function ($a, $b) {\n        return $a[0] < $b[0] || ($a[0] == $b[0] && $a[1] > $b[1]);\n    });\n    return $coords;\n}\n",
            "function sortArray ($arr) {\n    if (count($arr) == 0) {\n        return [];\n    }\n    if (($arr[0] + $arr[count($arr) - 1]) % 2 == 0) {\n        rsort($arr);\n    } else {\n        sort($arr);\n    }\n    return $arr;\n}\n",
            "function encrypt ($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        $shifted = ord($ch) + 4;\n        if ($shifted > ord('z')) {\n            $shifted -= 26;\n        }\n        $result .= chr($shifted);\n    }\n    return $result;\n}\n",
            "function nextSmallest ($lst) {\n    $sl = [];\n    $m = [];\n    foreach ($lst as $e) {\n        if (!isset($m[$e])) {\n            $sl[] = $e;\n            $m[$e] = true;\n        }\n    }\n    sort($sl);\n    if (count($sl) < 2) {\n        return null;\n    }\n    return $sl[1];\n}\n",
            "function isBored ($s) {\n    $sentences = preg_split('/\\.!?\\s*/', $s);\n    $result = 0;\n    foreach ($sentences as $sentence) {\n        if (strlen($sentence) >= 2 && substr($sentence, 0, 2) == 'I ') {\n            $result++;\n        }\n    }\n    return $result;\n}\n",
            "function anyInt ($x, $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function encode ($message) {\n    $vowels = \"aeiouAEIOU\";\n    $result = [];\n    for ($i = 0; $i < strlen($message); $i++) {\n        $ch = $message[$i];\n        if (ctype_alpha($ch)) {\n            $ch1 = strtoupper($ch) if ctype_lower($ch) else strtolower($ch);\n            if (strpos($vowels, $ch1) !== false) {\n                $ch1 = chr(ord($ch1) + 2);\n            }\n            $result[] = $ch1;\n        } else {\n            $result[] = $ch;\n        }\n    }\n    return implode(\"\", $result);\n}\n",
            "function isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction skjkasdkd ($lst) {\n    $primes = array_filter($lst, function ($n) {\n        return isPrime($n);\n    });\n    if (count($primes) == 0) {\n        return 0;\n    }\n    $largest = max($primes);\n    $sum = 0;\n    foreach (str_split($largest) as $digit) {\n        $sum += intval($digit);\n    }\n    return $sum;\n}\n",
            "function checkDictCase ($d) {\n    if (empty($d)) {\n        return false;\n    }\n    $keys = array_keys($d);\n    return count(array_filter($keys, function ($c) {\n        return ctype_lower($c);\n    })) == count($keys) || count(array_filter($keys, function ($c) {\n        return ctype_upper($c);\n    })) == count($keys);\n}\n",
            "function countUpTo ($n) {\n    $primes = [];\n    for ($num = 2; $num < $n; $num++) {\n        $isPrime = true;\n        foreach ($primes as $p) {\n            if ($num % $p == 0) {\n                $isPrime = false;\n                break;\n            }\n        }\n        if ($isPrime) {\n            $primes[] = $num;\n        }\n    }\n    return $primes;\n}\n",
            "function multiply ($a, $b) {\n    return abs($a) % 10 * abs($b) % 10;\n}\n",
            "function countUpper ($s) {\n    $vowels = \"AEIOU\";\n    $result = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $c = $s[$i];\n        if ($i % 2 == 0 && strpos($vowels, $c) !== false) {\n            $result++;\n        }\n    }\n    return $result;\n}\n",
            "function closestInteger ($value) {\n    $num = floatval($value);\n    if ($num >= 0) {\n        return intval($num + 0.5);\n    } else {\n        return intval($num - 0.5);\n    }\n}\n",
            "function makeAPile ($n) {\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n + 2 * $i;\n    }\n    return $result;\n}\n",
            "function wordsString ($s) {\n    return preg_split(\"/[, ]/\", $s);\n}\n",
            "function chooseNum ($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    if ($y % 2 == 0) {\n        return $y;\n    }\n    if ($x != $y) {\n        return $y - 1;\n    }\n    return -1;\n}\n",
            "function roundedAvg ($n, $m) {\n    if ($n > $m) {\n        return null;\n    }\n    $rAvg = intdiv(($m + $n), 2) + 0.5;\n    return decbin($rAvg)[2:];\n}\n",
            "function allDigitsOdd($s) {\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction uniqueDigits($x) {\n    $result = [];\n    foreach ($x as $num) {\n        if (allDigitsOdd(strval($num))) {\n            $result[] = $num;\n        }\n    }\n    sort($result);\n    return $result;\n}\n",
            "function byLength ($arr) {\n    $digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    $sortedArr = array_map(function ($x) {\n        return $x - 1;\n    }, array_filter($arr, function ($x) {\n        return $x >= 1 && $x <= 9;\n    }));\n    rsort($sortedArr);\n    return array_map(function ($x) use ($digitNames) {\n        return $digitNames[$x];\n    }, $sortedArr);\n}\n",
            "function f ($n) {\n    $nums = range(1, $n + 1);\n    return array_map(function ($i) use ($nums) {\n        return $i % 2 != 0 ? array_sum(array_slice($nums, 0, $i)) : array_reduce($nums, function ($x, $y) {\n            return $x * $y;\n        }, 1);\n    }, $nums);\n}\n",
            "function isPalindrome($txt) {\n    return $txt == strrev($txt);\n}\nfunction evenOddPalindrome($n) {\n    $cnt = [0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        if (isPalindrome(strval($i))) {\n            $cnt[$i % 2]++;\n        }\n    }\n    return $cnt;\n}\n",
            "function digitsSum($n) {\n    $nStr = strval($n);\n    if ($n >= 0) {\n        $result = 0;\n        foreach (str_split($nStr) as $d) {\n            $result += intval($d);\n        }\n        return $result;\n    } else {\n        return intval($nStr[0]) * 2 + digitsSum(abs($n));\n    }\n}\nfunction countNums ($arr) {\n    $result = [];\n    foreach ($arr as $n) {\n        if (digitsSum($n) > 0) {\n            $result[] = $n;\n        }\n    }\n    return count($result);\n}\n",
            "function moveOneBall ($arr) {\n    if (count($arr) == 0) {\n        return true;\n    }\n    $sortedArr = $arr;\n    sort($sortedArr);\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i:] == $sortedArr[0:count($arr)-$i] && $arr[0:$i] == $sortedArr[count($arr)-$i:]) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function canExchange ($lst1, $lst2) {\n    $oddCnt = 0;\n    $evenCnt = 0;\n    foreach ($lst1 as $num) {\n        if ($num % 2 != 0) {\n            $oddCnt++;\n        }\n    }\n    foreach ($lst2 as $num) {\n        if ($num % 2 == 0) {\n            $evenCnt++;\n        }\n    }\n    if ($evenCnt >= $oddCnt) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n",
            "function histogram ($test) {\n    $freq = [];\n    $words = explode(\" \", $test);\n    foreach ($words as $w) {\n        if (strlen($w) > 0) {\n            $freq[$w] = $freq[$w] + 1;\n        }\n    }\n    $result = [];\n    if (count($freq) > 0) {\n        $maxFreq = 0;\n        foreach ($freq as $v) {\n            if ($v > $maxFreq) {\n                $maxFreq = $v;\n            }\n        }\n        foreach ($freq as $k => $v) {\n            if ($v == $maxFreq) {\n                $result[$k] = $v;\n            }\n        }\n    }\n    return $result;\n}\n",
            "function reverseDelete ($s, $c) {\n    $s1 = implode(\"\", array_filter(str_split($s), function ($ch) use ($c) {\n        return !in_array($ch, str_split($c));\n    }));\n    return [$s1, is_palindrome($s1) ? \"yes\" : \"no\"];\n}\nfunction is_palindrome($s) {\n    return $s == strrev($s);\n}\n",
            "function oddCount ($lst) {\n    $result = [];\n    foreach ($lst as $num) {\n        $n = array_sum(array_map(function ($d) {\n            return ord($d) % 2 == 1;\n        }, str_split($num)));\n        $rs = \"the number of odd elements in the string i of the input.\";\n        $result[] = str_replace(\"i\", str($n), $rs);\n    }\n    return $result;\n}\n",
            "function minSubArraySum ($nums) {\n    $minSum = 0;\n    $curSum = 0;\n    foreach ($nums as $n) {\n        $curSum = min($curSum + $n, 0);\n        $minSum = min($curSum, $minSum);\n    }\n    if ($minSum == 0) {\n        $minSum = min($nums);\n    }\n    return $minSum;\n}\n",
            "function maxFill ($grid, $capacity) {\n    return array_sum(array_map(function ($arr) use ($capacity) {\n        return ceil(array_sum($arr) / $capacity);\n    }, $grid));\n}\n",
            "function countOnes($num) {\n    return substr_count(decbin($num), \"1\");\n}\nfunction sortArray ($arr) {\n    usort($arr, function ($a, $b) {\n        return countOnes($a) == countOnes($b) ? $a - $b : countOnes($a) - countOnes($b);\n    });\n    return $arr;\n}\n",
            "function selectWords ($s, $n) {\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $words = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $w) {\n        if (strlen($w) > 0) {\n            $consonantCount = 0;\n            for ($i = 0; $i < strlen($w); $i++) {\n                if (strpos($consonants, strtolower($w[$i])) !== false) {\n                    $consonantCount++;\n                }\n            }\n            if ($consonantCount == $n) {\n                $result[] = $w;\n            }\n        }\n    }\n    return $result;\n}\n",
            "function getClosestVowel ($word) {\n    $vowels = \"aeiouAEIOU\";\n    for ($i = strlen($word) - 2; $i > 0; $i--) {\n        if (strpos($vowels, $word[$i]) !== false && strpos($vowels, $word[$i-1]) === false && strpos($vowels, $word[$i+1]) === false) {\n            return $word[$i];\n        }\n    }\n    return \"\";\n}\n",
            "function check ($s) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if ($ch == '(') {\n            $depth += 1;\n        } else {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\nfunction matchParens ($lst) {\n    $s1 = $lst[0] . $lst[1];\n    $s2 = $lst[1] . $lst[0];\n    if (check($s1) || check($s2)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n",
            "function maximum ($arr, $k) {\n    if ($k == 0) {\n        return [];\n    }\n    return array_slice(array_values(array_unique(array_reverse(array_merge(array_diff($arr, array_diff_assoc($arr, array_unique($arr))), array_diff_assoc($arr, array_unique($arr)))));\n}\n",
            "function solution ($lst) {\n    $result = 0;\n    foreach ($lst as $i => $x) {\n        if ($i % 2 == 0 && $x % 2 != 0) {\n            $result += $x;\n        }\n    }\n    return $result;\n}\n",
            "function addElements ($arr, $k) {\n    $result = 0;\n    foreach ($arr as $n) {\n        if (strlen((string)$n) <= 2) {\n            $result += $n;\n        }\n    }\n    return $result;\n}\n",
            "function getOddCollatz ($n) {\n    $collatz = [1];\n    while ($n != 1) {\n        if ($n % 2 != 0) {\n            $collatz[] = $n;\n            $n = 3 * $n + 1;\n        } else {\n            $n = $n / 2;\n        }\n    }\n    return $collatz;\n}\n",
            "function validDate ($date) {\n    if (strlen($date) != 10 || $date[2] != \"-\" || $date[5] != \"-\") {\n        return false;\n    }\n    $m = intval(substr($date, 0, 2));\n    $d = intval(substr($date, 3, 2));\n    if (in_array($m, [1, 3, 5, 7, 8, 10, 12]) && $d >= 1 && $d <= 31) {\n        return true;\n    }\n    if (in_array($m, [4, 6, 9, 11]) && $d >= 1 && $d <= 30) {\n        return true;\n    }\n    if ($m == 2 && $d >= 1 && $d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "function splitWords ($txt) {\n    if (strpos($txt, \" \") !== false) {\n        return explode(\" \", $txt);\n    } else if (strpos($txt, \",\") !== false) {\n        return explode(\",\", $txt);\n    } else {\n        $result = [];\n        for ($i = 0; $i < strlen($txt); $i++) {\n            $c = $txt[$i];\n            if (ctype_lower($c) && ord($c) % 2 == 0) {\n                $result[] = $c;\n            }\n        }\n        return [strval(count($result))];\n    }\n}\n",
            "function isSorted ($lst) {\n    if (!array_reduce(array_keys($lst), function ($carry, $i) use ($lst) {\n        return $carry && $lst[$i-1] <= $lst[$i];\n    }, true)) {\n        return false;\n    }\n    $freq = [];\n    foreach ($lst as $i) {\n        $freq[$i] = $freq[$i] ?? 0;\n        $freq[$i]++;\n    }\n    return max($freq) <= 2;\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction intersection ($interval1, $interval2) {\n    $l = max($interval1[0], $interval2[0]);\n    $r = min($interval1[1], $interval2[1]);\n    $length = $r - $l;\n    return $length > 0 && isPrime($length) ? \"YES\" : \"NO\";\n}\n",
            "function prodSigns ($arr) {\n    if (empty($arr)) {\n        return null;\n    }\n    if (in_array(0, $arr)) {\n        return 0;\n    }\n    $sign = count(array_filter($arr, function ($n) { return $n < 0; })) % 2 == 1 ? -1 : 1;\n    return $sign * array_sum(array_map(function ($n) { return abs($n); }, $arr));\n}\n",
            "function minPath ($grid, $k) {\n    $n = count($grid);\n    $minVal = $n * $n + 1;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $temp = [];\n                if ($i != 0) {\n                    $temp[] = $grid[$i - 1][$j];\n                }\n                if ($j != 0) {\n                    $temp[] = $grid[$i][$j - 1];\n                }\n                if ($i != $n - 1) {\n                    $temp[] = $grid[$i + 1][$j];\n                }\n                if ($j != $n - 1) {\n                    $temp[] = $grid[$i][$j + 1];\n                }\n                $minVal = min($temp);\n            }\n        }\n    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $i % 2 == 0 ? 1 : $minVal;\n    }\n    return $result;\n}\n",
            "function tri ($n) {\n    if ($n == 0) {\n        return [1];\n    }\n    $seq = [1, 3];\n    for ($i = 2; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $seq[] = $i / 2 + 1;\n        } else {\n            $seq[] = $seq[$i - 1] + $seq[$i - 2] + ($i + 3) / 2;\n        }\n    }\n    return $seq;\n}\n",
            "function digits ($n) {\n    $odds = array_filter(str_split($n), function ($d) {\n        return intval($d) % 2 == 1;\n    });\n    return array_reduce($odds, function ($x, $y) {\n        return $x * $y;\n    }, 1) ?: 0;\n}\n",
            "function isNested ($s) {\n    $openIdx = [];\n    $closeIdx = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if ($ch == '[') {\n            $openIdx[] = $i;\n        } else if ($ch == ']') {\n            $closeIdx[] = $i;\n        }\n    }\n    $closeIdx = array_reverse($closeIdx);\n    $cnt = 0;\n    $i = 0;\n    $l = count($closeIdx);\n    foreach ($openIdx as $idx) {\n        if ($i < $l && $idx < $closeIdx[$i]) {\n            $cnt += 1;\n            $i += 1;\n        }\n    }\n    return $cnt >= 2;\n}\n",
            "function sumSquares ($lst) {\n    $result = 0;\n    foreach ($lst as $n) {\n        $result += pow(ceil($n), 2);\n    }\n    return $result;\n}\n",
            "function checkIfLastCharIsALetter ($txt) {\n    if (!$txt) {\n        return false;\n    }\n    $last = substr($txt, strrpos($txt, ' ') + 1);\n    return strlen($last) == 1 && ctype_alpha($last[0]);\n}\n",
            "function canArrange ($arr) {\n    if (count($arr) <= 1) {\n        return -1;\n    }\n    $idx = [];\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $arr[$i-1]) {\n            $idx[] = $i;\n        }\n    }\n    if (count($idx) == 0) {\n        return -1;\n    }\n    return $idx[count($idx)-1];\n}\n",
            "function largestSmallestIntegers ($lst) {\n    $neg = array_filter($lst, function ($i) {\n        return $i < 0;\n    });\n    $pos = array_filter($lst, function ($i) {\n        return $i > 0;\n    });\n    $max_neg = count($neg) > 0 ? max($neg) : null;\n    $min_pos = count($pos) > 0 ? min($pos) : null;\n    return [$max_neg, $min_pos];\n}\n",
            "function anyToReal($o) {\n    if (is_string($o)) {\n        return floatval(str_replace(',', '.', $o));\n    } elseif (is_int($o)) {\n        return floatval($o);\n    } elseif (is_float($o)) {\n        return $o;\n    }\n    throw new RuntimeException(\"Type Error\");\n}\nfunction compareOne ($a, $b) {\n    $a1 = anyToReal($a);\n    $b1 = anyToReal($b);\n    if ($a1 == $b1) {\n        return null;\n    } elseif ($a1 > $b1) {\n        return $a1;\n    } else {\n        return $b1;\n    }\n}\n",
            "function isEqualToSumEven ($n) {\n    return $n % 2 == 0 && $n >= 8;\n}\n",
            "function specialFactorial ($n) {\n    $fact = 1;\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $fact *= $i;\n        $result *= $fact;\n    }\n    return $result;\n}\n",
            "function fixSpaces ($txt) {\n    return preg_replace([\"/\\s{3,}/\", \"/\\s/\"], [\"-\", \"_\"], $txt);\n}\n",
            "function fileNameCheck ($fileName) {\n    $suf = [\"txt\", \"exe\", \"dll\"];\n    $lst = explode(\".\", $fileName);\n    if (count($lst) != 2 || !in_array($lst[1], $suf) || strlen($lst[0]) == 0 || !ctype_alpha($lst[0][0]) || strlen(preg_replace(\"/[^0-9]/\", \"\", $lst[0])) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "function sumSquares ($lst) {\n    $result = 0;\n    foreach ($lst as $i => $e) {\n        if ($i % 3 == 0) {\n            $result += $e * $e;\n        } else if ($i % 4 == 0) {\n            $result += $e * $e * $e;\n        } else {\n            $result += $e;\n        }\n    }\n    return $result;\n}\n",
            "function isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction wordsInSentence ($sentence) {\n    $words = explode(\" \", $sentence);\n    return implode(\" \", array_filter($words, function ($w) {\n        return isPrime(strlen($w));\n    }));\n}\n",
            "function simplify ($x, $n) {\n    $xs = explode(\"/\", $x);\n    $ns = explode(\"/\", $n);\n    $num = intval($xs[0]) * intval($ns[0]);\n    $den = intval($xs[1]) * intval($ns[1]);\n    return $num % $den == 0;\n}\n",
            "function digitsSum($n) {\n    $nStr = strval($n);\n    if ($n >= 0) {\n        $result = 0;\n        foreach (str_split($nStr) as $d) {\n            $result += intval($d);\n        }\n        return $result;\n    } else {\n        return intval($nStr[0]) * 2 + digitsSum(abs($n));\n    }\n}\nfunction orderByPoints ($nums) {\n    return usort($nums, function ($a, $b) {\n        return digitsSum($a) - digitsSum($b);\n    });\n}\n",
            "function specialFilter ($nums) {\n    $odds = \"13579\";\n    $result = 0;\n    foreach ($nums as $n) {\n        if ($n > 10 && $n % 2 == 1 && strpos($odds, substr(strval($n), 0, 1)) {\n            $result++;\n        }\n    }\n    return $result;\n}\n",
            "function getMaxTriples ($n) {\n    $c = [0, 0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        $a = $i * $i - $i + 1;\n        $c[$a % 3]++;\n    }\n    return ($c[0] * $c[1] * $c[2] + ($c[0] * ($c[0] - 1) * ($c[0] - 2) + $c[1] * ($c[1] - 1) * ($c[1] - 2) + $c[2] * ($c[2] - 1) * ($c[2] - 2))) / 6;\n}\n",
            "function bf ($planet1, $planet2) {\n    $names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!in_array($planet1, $names) || !in_array($planet2, $names)) {\n        return [];\n    }\n    $l = array_search($planet1, $names);\n    $r = array_search($planet2, $names);\n    if ($l > $r) {\n        $l = $r;\n        $r = $l;\n    }\n    if ($l == $r) {\n        return [];\n    }\n    return array_slice($names, $l + 1, $r - $l - 1);\n}\n",
            "function sortedListSum ($lst) {\n    $result = [];\n    foreach ($lst as $s) {\n        if (strlen($s) % 2 == 0) {\n            $result[] = $s;\n        }\n    }\n    usort($result, function ($a, $b) {\n        if (strlen($a) == strlen($b)) {\n            return $a < $b;\n        }\n        return strlen($a) < strlen($b);\n    });\n    return $result;\n}\n",
            "function xOrY ($n, $x, $y) {\n    if ($n < 2) {\n        return $y;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)) + 1; $i++) {\n        if ($n % $i == 0) {\n            return $y;\n        }\n    }\n    return $x;\n}\n",
            "function doubleTheDifference ($lst) {\n    $result = 0;\n    foreach ($lst as $n) {\n        if ($n >= 0 && fmod($n, 2) == 1) {\n            $result += intval($n * $n);\n        }\n    }\n    return $result;\n}\n",
            "function compare ($game, $guess) {\n    return array_map(function ($x, $y) {\n        return abs($x - $y);\n    }, $game, $guess);\n}\n",
            "function strongestExtension ($className, $extensions) {\n    $maxS = -INF;\n    $maxExt = \"\";\n    foreach ($extensions as $ext) {\n        $upper = count(array_filter(str_split($ext), function ($c) {\n            return ctype_upper($c);\n        }));\n        $lower = count(array_filter(str_split($ext), function ($c) {\n            return ctype_lower($c);\n        }));\n        $s = $upper - $lower;\n        if ($s > $maxS) {\n            $maxS = $s;\n            $maxExt = $ext;\n        }\n    }\n    return $className . \".\" . $maxExt;\n}\n",
            "function cycpatternCheck ($a, $b) {\n    if (strlen($a) < strlen($b)) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($b); $i++) {\n        if (strpos($a, $b[$i] . substr($b, 0, $i)) !== false) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function evenOddCount ($num) {\n    $ds = strval(abs($num));\n    $even = count(array_filter($ds, function ($d) {\n        return ord($d) % 2 == 0;\n    }));\n    return [$even, strlen($ds) - $even];\n}\n",
            "function intToMiniRoman ($num) {\n    $values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    $res = [];\n    for ($i = 0; $i < count($values); $i++) {\n        while ($num >= $values[$i]) {\n            $res[] = $numerals[$i];\n            $num -= $values[$i];\n        }\n    }\n    return implode(\"\", $res);\n}\n",
            "function rightAngleTriangle ($a, $b, $c) {\n    $s = [$a, $b, $c];\n    sort($s);\n    return $s[0]*$s[0] + $s[1]*$s[1] == $s[2]*$s[2];\n}\n",
            "function findMax ($words) {\n    $maxCnt = 0;\n    $maxW = \"\";\n    foreach ($words as $w) {\n        $cnt = count(array_unique(str_split($w));\n        if ($cnt > $maxCnt) {\n            $maxCnt = $cnt;\n            $maxW = $w;\n        } else if ($cnt == $maxCnt) {\n            $maxW = min($maxW, $w);\n        }\n    }\n    return $maxW;\n}\n",
            "function eat ($num, $need, $remaining) {\n    if ($need <= $remaining) {\n        return [$num + $need, $remaining - $need];\n    }\n    return [$num + $remaining, 0];\n}\n",
            "function doAlgebra ($operators, $operands) {\n    $ops = $operators;\n    $nums = $operands;\n    $i = count($ops) - 1;\n    while ($i >= 0) {\n        if ($ops[$i] == \"**\") {\n            $nums[$i] = pow($nums[$i], $nums[$i + 1]);\n            array_pop($nums, $i + 1);\n            array_pop($ops, $i);\n        }\n        $i -= 1;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"*\") {\n            $nums[$i] = $nums[$i] * $nums[$i + 1];\n            array_pop($nums, $i + 1);\n            array_pop($ops, $i);\n            $i -= 1;\n        } elseif ($ops[$i] == \"//\") {\n            $nums[$i] = $nums[$i] / $nums[$i + 1];\n            array_pop($nums, $i + 1);\n            array_pop($ops, $i);\n            $i -= 1;\n        }\n        $i += 1;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"+\") {\n            $nums[$i] = $nums[$i] + $nums[$i + 1];\n            array_pop($nums, $i + 1);\n            array_pop($ops, $i);\n            $i -= 1;\n        } elseif ($ops[$i] == \"-\") {\n            $nums[$i] = $nums[$i] - $nums[$i + 1];\n            array_pop($nums, $i + 1);\n            array_pop($ops, $i);\n            $i -= 1;\n        }\n        $i += 1;\n    }\n    return $nums[0];\n}\n",
            "function solve ($s) {\n    if (!preg_match('/[a-zA-Z]/', $s)) {\n        return strrev($s);\n    }\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if (!ctype_alpha($ch)) {\n            $result[] = $ch;\n        } else if (ctype_upper($ch)) {\n            $result[] = strtolower($ch);\n        } else if (ctype_lower($ch)) {\n            $result[] = strtoupper($ch);\n        }\n    }\n    return implode('', $result);\n}\n",
            "function stringToMd5 ($txt) {\n    if (strlen($txt) == 0) {\n        return null;\n    }\n    $md5_hash = md5($txt);\n    return $md5_hash;\n}\n",
            "function generateIntegers ($a, $b) {\n    $lower = max(2, min($a, $b));\n    $upper = min(8, max($a, $b));\n    $result = [];\n    for ($i = $lower; $i <= $upper; $i++) {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n"
        ],
        "ruby": [
            "def has_close_elements(numbers, threshold)\n    for i in 0...numbers.length\n        for j in i+1...numbers.length\n            return true if (numbers[i] - numbers[j]).abs < threshold\n        end\n    end\n    return false\nend\n",
            "def separate_paren_groups(paren_string)\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.gsub(\" \", \"\")\n    for ch in parens.chars\n        if ch == \"(\"\n            stk.push(ch)\n            current_group += ch\n        elsif ch == \")\"\n            stk.pop\n            current_group += ch\n            if stk.empty?\n                groups.push(current_group)\n                current_group = \"\"\n            end\n        end\n    end\n    return groups\nend\n",
            "def truncate_number(num)\n    num - num.floor\nend\n",
            "def below_zero(operations)\n    balance = 0\n    for op in operations\n        balance += op\n        return true if balance < 0\n    end\n    return false\nend\n",
            "def mean_absolute_deviation(numbers)\n    mean = 0.0\n    for n in numbers\n        mean += n\n    end\n    mean /= numbers.length\n    deviation = 0.0\n    for n in numbers\n        deviation += (n - mean).abs\n    end\n    return deviation / numbers.length\nend\n",
            "def intersperse(numbers, delimiter)\n    result = []\n    for i, e in numbers.each_with_index\n        result << delimiter if i != 0\n        result << e\n    end\n    return result\nend\n",
            "def parse_nested_parens(paren_string)\n    result = []\n    paren_groups = paren_string.split(\" \")\n    for group in paren_groups\n        max_depth = 0\n        depth = 0\n        for ch in group.chars\n            if ch == '('\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elsif ch == ')'\n                depth -= 1\n            end\n        end\n        result << max_depth\n    end\n    return result\nend\n",
            "def filter_by_substring(strs, substring)\n    result = []\n    for s in strs\n        if s.include?(substring)\n            result.append(s)\n        end\n    end\n    return result\nend\n",
            "def sum_product(numbers)\n    n_sum = 0\n    for n in numbers\n        n_sum += n\n    end\n    n_product = 1\n    for n in numbers\n        n_product *= n\n    end\n    return [n_sum, n_product]\nend\n",
            "def rolling_max(numbers)\n    max_so_far = -Float::INFINITY\n    result = []\n    for num in numbers\n        max_so_far = [max_so_far, num].max\n        result.append(max_so_far)\n    end\n    return result\nend\n",
            "def is_palindrome(s)\n    s == reverse(s)\nend\ndef make_palindrome(s)\n    if is_palindrome(s)\n        return s\n    end\n    for i in 0...s.length\n        if is_palindrome(s[i..-1])\n            return s + reverse(s[0...i])\n        end\n    end\n    return \"\"\nend\ndef reverse(s)\n    s.reverse\nend\n",
            "def string_xor(a, b)\n    result = \"\"\n    for i in 0..a.length\n        if a[i] == b[i]\n            result += \"0\"\n        else\n            result += \"1\"\n        end\n    end\n    return result\nend\n",
            "def longest(strs)\n    return nil if strs.empty?\n    longest_s = strs[0]\n    for s in strs\n        longest_s = s if s.length > longest_s.length\n    end\n    longest_s\nend\n",
            "def greatest_common_divisor(a, b)\n    if b == 0\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend\n",
            "def all_prefixes(s)\n    prefixes = []\n    for i in 0..s.length\n        prefixes << s[0..i]\n    end\n    return prefixes\nend\n",
            "def string_sequence(n)\n    result = []\n    for i in 0..n\n        result << i.to_s\n    end\n    result.join(\" \")\nend\n",
            "def count_distinct_characters(s)\n    s.downcase.chars.uniq.length\nend\n",
            "def parse_music(music_string)\n    durations = {\"o\" => 4, \"o|\" => 2, \".|\" => 1}\n    notes = music_string.split()\n    return notes.map {|note| durations[note]}\nend\n",
            "def how_many_times(s, substring)\n    times = 0\n    for i in 0..s.length - substring.length\n        if s[i, substring.length] == substring\n            times += 1\n        end\n    end\n    return times\nend\n",
            "def sort_numbers(numbers)\n    num_dict = {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n    }\n    num_list = []\n    for e in numbers.split(\" \")\n        if num_dict.has_key?(e)\n            num_list << e\n        end\n    end\n    num_list.sort! {|a, b| num_dict[a] < num_dict[b]}\n    return num_list.join(\" \")\nend\n",
            "def find_closest_elements(numbers)\n    sorted_numbers = numbers.sort\n    min_diff = Float::INFINITY\n    closest_pair = []\n    for i in 1..sorted_numbers.length - 1\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n        end\n    end\n    return closest_pair\nend\n",
            "def rescale_to_unit(numbers)\n    min_num = Float::INFINITY\n    max_num = -Float::INFINITY\n    for num in numbers\n        if num < min_num\n            min_num = num\n        end\n        if num > max_num\n            max_num = num\n        end\n    end\n    if min_num == max_num\n        return Array.new(numbers.length, 0.0)\n    end\n    result = []\n    for i, num in numbers.each_with_index\n        result[i] = (num - min_num) / (max_num - min_num)\n    end\n    return result\nend\n",
            "def filter_integers(values)\n    result = []\n    for x in values\n        if x.is_a? Integer\n            result << x\n        end\n    end\n    return result\nend\n",
            "def str_length(s)\n    s.length\nend\n",
            "def largest_divisor(n)\n    for i in 2..n\n        if n % i == 0\n            return n / i\n        end\n    end\n    return 1\nend\n",
            "def factorize(n)\n    factors = []\n    divisor = 2\n    while divisor <= n\n        if n % divisor == 0\n            factors << divisor\n            n /= divisor\n        else\n            divisor += 1\n        end\n    end\n    return factors\nend\n",
            "def remove_duplicates(numbers)\n    counts = {}\n    numbers.each do |num|\n        counts[num] = counts[num] + 1\n    end\n    res = []\n    numbers.each do |num|\n        res << num if counts[num] == 1\n    end\n    return res\nend\n",
            "def flip_case(s)\n    flipped = []\n    for ch in s.chars\n        if not ch.match(/[a-zA-Z]/)\n            flipped << ch\n        elsif ch.match(/[a-z]/)\n            flipped << ch.upcase\n        elsif ch.match(/[A-Z]/)\n            flipped << ch.downcase\n        end\n    end\n    return flipped.join\nend\n",
            "def concatenate(strs)\n    strs.join(\"\")\nend\n",
            "def filter_by_prefix(strs, prefix_str)\n    result = []\n    for s in strs\n        if s.start_with?(prefix_str)\n            result.append(s)\n        end\n    end\n    return result\nend\n",
            "def get_positive(l)\n    result = []\n    for num in l\n        if num > 0\n            result << num\n        end\n    end\n    return result\nend\n",
            "def is_prime(n)\n    if n < 2\n        return false\n    end\n    for i in 2..Math.sqrt(n)\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\n",
            "def poly(xs, x)\n    res = 0.0\n    for i in 0..xs.length-1\n        res += xs[i] * Math.pow(x, i)\n    end\n    return res\nend\ndef find_zero(xs)\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1)*poly(xs, x2) > 0\n        x1 *= 2\n        x2 *= 2\n    end\n    while (x1-x2).abs > 1e-10\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0\n            return mid\n        elsif poly(xs, mid)*poly(xs, x1) < 0\n            x2 = mid\n        else\n            x1 = mid\n        end\n    end\n    return (x1 + x2) / 2\nend\n",
            "def sort_third(l)\n    sorted_third = []\n    for i in 0..l.length-1\n        sorted_third << l[i] if i % 3 == 0\n    end\n    sorted_third.sort!\n    result = []\n    for i in 0..l.length-1\n        result << sorted_third[i/3] if i % 3 == 0\n        result << l[i] if i % 3 != 0\n    end\n    return result\nend\n",
            "def list_unique(l)\n    m = {}\n    for e in l\n        m[e] = true\n    end\n    result = []\n    for k in m.keys\n        result.append(k)\n    end\n    result.sort!\n    return result\nend\n",
            "def max_element(l)\n    if l.empty?\n        return 0\n    end\n    max = l[0]\n    for e in l\n        if e > max\n            max = e\n        end\n    end\n    return max\nend\n",
            "def fizz_buzz(n)\n    cnt = 0\n    for i in 0..n-1\n        if i % 11 == 0 || i % 13 == 0\n            cnt += i.to_s.count(\"7\")\n        end\n    end\n    return cnt\nend\n",
            "def sort_even(l)\n    sorted_even = []\n    for i in 0...l.length\n        sorted_even << l[i] if i % 2 == 0\n    end\n    sorted_even.sort!\n    result = []\n    for i in 0...l.length\n        if i % 2 == 0\n            result[i] = sorted_even[i / 2]\n        else\n            result[i] = l[i]\n        end\n    end\n    return result\nend\n",
            "def encode_cyclic(s)\n    result = []\n    for i in 0...s.length\n        if i + 3 > s.length\n            result << s[i..-1]\n        else\n            result << s[i+1..i+2]\n            result << s[i]\n        end\n    end\n    result.join(\"\")\nend\ndef decode_cyclic(s)\n    encode_cyclic(encode_cyclic(s))\nend\n",
            "def is_prime(n)\n    if n < 2\n        return false\n    end\n    for i in 2..Math.sqrt(n).floor\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\ndef prime_fib(n)\n    f = [0, 1]\n    cnt = 0\n    while cnt < n\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1])\n            cnt += 1\n        end\n    end\n    return f[1]\nend\n",
            "def triples_sum_to_zero(l)\n    for i in 0..l.length\n        for j in i+1..l.length\n            for k in j+1..l.length\n                if l[i] + l[j] + l[k] == 0\n                    return true\n                end\n            end\n        end\n    end\n    return false\nend\n",
            "def car_race_collision(n)\n    n * n\nend\n",
            "def incr_list(l)\n    result = []\n    for i, e in l.each_with_index\n        result[i] = e + 1\n    end\n    return result\nend\n",
            "def pairs_sum_to_zero(l)\n    seen = {}\n    for num in l\n        if seen[-num]\n            return true\n        end\n        seen[num] = true\n    end\n    return false\nend\n",
            "def change_base(x, bas)\n    if x == 0\n        return \"0\"\n    end\n    digits = []\n    while x > 0\n        digits.append(x % bas)\n        x /= bas\n    end\n    return digits.reverse.join\nend\n",
            "def triangle_area(a, h)\n    a.to_f * h.to_f / 2\nend\n",
            "def fib4(n)\n    fib = [0, 0, 2, 0]\n    for i in 4..n\n        fib[i % 4] = fib.sum\n    end\n    return fib[n % 4]\nend\n",
            "def median(l)\n    sl = l.sort\n    if l.length % 2 != 0\n        return sl[l.length / 2]\n    end\n    return (sl[l.length / 2] + sl[l.length / 2 - 1]) / 2\nend\n",
            "def reverse(s)\n    s.reverse\nend\ndef is_palindrome(txt)\n    txt == reverse(txt)\nend\n",
            "def modp(n, p)\n    ret = 1\n    for i in 0..n\n        ret = (ret * 2) % p\n    end\n    return ret\nend\n",
            "def encode_shift(s)\n    result = []\n    for ch in s.chars\n        result << ((ch.ord - 97 + 5) % 26) + 97\n    end\n    result.pack('c*')\nend\ndef decode_shift(s)\n    result = []\n    for ch in s.chars\n        result << ((ch.ord - 97 + 21) % 26) + 97\n    end\n    result.pack('c*')\nend\n",
            "def remove_vowels(txt)\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in txt.chars\n        result += char unless vowels.include?(char)\n    end\n    return result\nend\n",
            "def below_threshold(l, t)\n    l.each do |x|\n        return false if x >= t\n    end\n    return true\nend\n",
            "def add(x, y)\n    x + y\nend\n",
            "def same_chars(s0, s1)\n    s0.chars.sort == s1.chars.sort\nend\n",
            "def fib(n)\n    if n <= 1\n        return n\n    end\n    fib(n - 1) + fib(n - 2)\nend\n",
            "def correct_bracketing(brackets)\n    depth = 0\n    for b in brackets\n        if b == '<'\n            depth += 1\n        elsif b == '>'\n            depth -= 1\n        end\n        return false if depth < 0\n    end\n    return depth == 0\nend\n",
            "def monotonic(l)\n    diff = l.each_cons(2).map {|x, y| y - x}\n    return diff.all? {|x| x <= 0} || diff.all? {|x| x >= 0}\nend\n",
            "def common(l1, l2)\n    (l1 & l2).sort\nend\n",
            "def largest_prime_factor(n)\n    i = 2\n    while i * i <= n\n        if n % i == 0\n            n /= i\n        else\n            i += 1\n        end\n    end\n    return n\nend\n",
            "def sum_to_n(n)\n    result = 0\n    for i in 0..n\n        result += i\n    end\n    return result\nend\n",
            "def correct_bracketing(brackets)\n    depth = 0\n    for b in brackets\n        if b == '('\n            depth += 1\n        elsif b == ')'\n            depth -= 1\n        end\n        return false if depth < 0\n    end\n    return depth == 0\nend\n",
            "def derivative(xs)\n    xs.each_with_index.map {|x, i| x * i}\nend\n",
            "def fibfib(n)\n    if n <= 1\n        return 0\n    end\n    a, b, c = 0, 0, 1\n    while n > 2\n        a, b, c = b, c, a + b + c\n        n -= 1\n    end\n    return c\nend\n",
            "def vowels_count(s)\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in 0..s.length\n        if s[i].downcase.include?(vowels) or (i == s.length - 1 and s[i].downcase == \"y\")\n            cnt += 1\n        end\n    end\n    return cnt\nend\n",
            "def circular_shift(x, shift)\n    x_str = x.to_s\n    if shift > x_str.length\n        return x_str.reverse\n    else\n        return x_str[-shift..-1] + x_str[0..-shift-1]\n    end\nend\n",
            "def digit_sum(s)\n    result = 0\n    for c in s.chars\n        if c.upcase == c\n            result += c.ord\n        end\n    end\n    return result\nend\n",
            "def fruit_distribution(s, n)\n    words = s.split(' ')\n    apples = words[words.index(\"apples\") - 1].to_i\n    oranges = words[words.index(\"oranges\") - 1].to_i\n    return n - apples - oranges\nend\n",
            "def pluck(arr)\n    evens = []\n    for n in arr\n        if n % 2 == 0\n            evens << n\n        end\n    end\n    if evens.empty?\n        return []\n    end\n    min_even = evens[0]\n    for n in evens\n        if n < min_even\n            min_even = n\n        end\n    end\n    for i in 0...arr.length\n        if arr[i] == min_even\n            return [min_even, i]\n        end\n    end\n    return []\nend\n",
            "def search(lst)\n    freqs = {}\n    for n in lst\n        freqs[n] = freqs[n] + 1\n    end\n    good_vals = []\n    for k, v in freqs\n        if v >= k\n            good_vals.append(k)\n        end\n    end\n    if good_vals.length == 0\n        return -1\n    end\n    max_val = good_vals[0]\n    for v in good_vals\n        if v > max_val\n            max_val = v\n        end\n    end\n    return max_val\nend\n",
            "def strange_sort_list(lst)\n    sl = lst.clone\n    sl.sort!\n    result = []\n    left, right = 0, sl.length - 1\n    while left <= right\n        result << sl[left]\n        left += 1\n        if left <= right\n            result << sl[right]\n            right -= 1\n        end\n    end\n    return result\nend\n",
            "def triangle_area(a, b, c)\n    if a + b > c && a + c > b && b + c > a\n        s = (a + b + c) / 2.0\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n    end\n    return -1.0\nend\n",
            "def will_it_fly(q, w)\n    return false if q.empty?\n    is_palin = true\n    for i in 0...q.length\n        if q[i] != q[q.length - i - 1]\n            is_palin = false\n            break\n        end\n    end\n    total = 0\n    for e in q\n        total += e\n    end\n    return is_palin && total <= w\nend\n",
            "def smallest_change(arr)\n    ans = 0\n    for i in 0..(arr.length/2)\n        if arr[i] != arr[arr.length-i-1]\n            ans += 1\n        end\n    end\n    return ans\nend\n",
            "def total_match(lst1, lst2)\n    cnt1 = 0\n    for s in lst1\n        cnt1 += s.length\n    end\n    cnt2 = 0\n    for s in lst2\n        cnt2 += s.length\n    end\n    if cnt1 <= cnt2\n        return lst1\n    end\n    return lst2\nend\n",
            "def is_prime(n)\n    if n < 2\n        return false\n    end\n    for i in 2..Math.sqrt(n)\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\ndef is_multiply_prime(a)\n    cnt = 0\n    for i in 2..a\n        if is_prime(i)\n            while a % i == 0\n                cnt += 1\n                a /= i\n            end\n        end\n    end\n    return cnt == 3\nend\n",
            "def is_simple_power(x, n)\n    if n < 2\n        return x == n\n    end\n    tmp = 1\n    while tmp < x\n        tmp *= n\n    end\n    return tmp == x\nend\n",
            "def is_cube(a)\n    a = a.abs\n    root = Math.sqrt(a).round\n    return root * root * root == a\nend\n",
            "def hex_key(num)\n    result = 0\n    for x in num\n        if x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D'\n            result += 1\n        end\n    end\n    return result\nend\n",
            "def decimal_to_binary(dec)\n    binary = dec.to_s(2)\n    return \"db#{binary}db\"\nend\n",
            "def is_happy(s)\n    return false if s.length < 3\n    for i in 0..s.length-3\n        return false if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n    end\n    return true\nend\n",
            "def numerical_letter_grade(grades)\n    result = []\n    for g in grades\n        if g == 4.0\n            result << \"A+\"\n        elsif g > 3.7\n            result << \"A\"\n        elsif g > 3.3\n            result << \"A-\"\n        elsif g > 3.0\n            result << \"B+\"\n        elsif g > 2.7\n            result << \"B\"\n        elsif g > 2.3\n            result << \"B-\"\n        elsif g > 2.0\n            result << \"C+\"\n        elsif g > 1.7\n            result << \"C\"\n        elsif g > 1.3\n            result << \"C-\"\n        elsif g > 1.0\n            result << \"D+\"\n        elsif g > 0.7\n            result << \"D\"\n        elsif g > 0.0\n            result << \"D-\"\n        else\n            result << \"E\"\n        end\n    end\n    return result\nend\n",
            "def prime_length(s)\n    length = s.length\n    if length < 2\n        return false\n    end\n    for i in 2..sqrt(length).floor\n        if length % i == 0\n            return false\n        end\n    end\n    return true\nend\n",
            "def starts_one_ends(n)\n    if n == 1\n        return 1\n    end\n    return 2 * 9 * 10 ** (n - 2)\nend\n",
            "def solve(n)\n    digits_sum = 0\n    n.to_s.each_char do |d|\n        digits_sum += d.to_i\n    end\n    digits_sum.to_s(2)\nend\n",
            "def add(lst)\n    result = 0\n    lst.each_with_index do |x, i|\n        result += x if i % 2 == 1 && x % 2 == 0\n    end\n    result\nend\n",
            "def anti_shuffle(s)\n    words = []\n    for word in s.split(\" \")\n        runes = word.chars\n        runes.sort!\n        words.append(runes.join)\n    end\n    return words.join(\" \")\nend\n",
            "def get_row(lst, x)\n    coords = []\n    for i in 0..lst.length-1\n        for j in 0..lst[i].length-1\n            if lst[i][j] == x\n                coords << [i, j]\n            end\n        end\n    end\n    coords.sort! do |a, b|\n        a[0] < b[0] || (a[0] == b[0] && a[1] > b[1])\n    end\n    return coords\nend\n",
            "def sort_array(arr)\n    if arr.length == 0\n        return []\n    elsif (arr[0] + arr[-1]) % 2 == 0\n        return arr.sort.reverse\n    else\n        return arr.sort\n    end\nend\n",
            "def encrypt(s)\n    result = []\n    for ch in s.chars\n        shifted = ch.ord + 4\n        if shifted > 'z'.ord\n            shifted -= 26\n        end\n        result << shifted.chr\n    end\n    return result.join\nend\n",
            "def next_smallest(lst)\n    sl = []\n    m = {}\n    for e in lst\n        if not m[e]\n            sl << e\n            m[e] = true\n        end\n    end\n    sl.sort!\n    if sl.size < 2\n        return nil\n    end\n    return sl[1]\nend\n",
            "def is_bored(s)\n    sentences = s.split(/[.!?]\\s*/)\n    result = 0\n    for sentence in sentences\n        if sentence.length >= 2 && sentence[0..1] == \"I \"\n            result += 1\n        end\n    end\n    return result\nend\n",
            "def any_int(x, y, z)\n    if x.is_a?(Integer)\n        if y.is_a?(Integer)\n            if z.is_a?(Integer)\n                if (x + y == z) || (x + z == y) || (y + z == x)\n                    return true\n                end\n            end\n        end\n    end\n    return false\nend\n",
            "def encode(message)\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message.chars\n        if ch.match?(/[a-zA-Z]/)\n            ch1 = ch.upcase if ch.match?(/[a-z]/) else ch.downcase\n            if vowels.include?(ch1)\n                ch1 = (ch1.ord + 2).chr\n            end\n            result << ch1\n        else\n            result << ch\n        end\n    end\n    return result.join\nend\n",
            "def is_prime(n)\n    if n < 2\n        return false\n    end\n    for i in 2..Math.sqrt(n).floor\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\ndef skjkasdkd(lst)\n    primes = lst.select {|n| is_prime(n)}\n    if primes.empty?\n        return 0\n    end\n    largest = primes.max.to_s\n    return largest.chars.map(&:to_i).reduce(:+)\nend\n",
            "def check_dict_case(d)\n    return false if d.empty?\n    return d.keys.all? {|c| c.downcase == c} || d.keys.all? {|c| c.upcase == c}\nend\n",
            "def count_up_to(n)\n    primes = []\n    for num in 2..n\n        if primes.all? {|p| num % p != 0}\n            primes.append(num)\n        end\n    end\n    return primes\nend\n",
            "def multiply(a, b)\n    (a.abs % 10) * (b.abs % 10)\nend\n",
            "def count_upper(s)\n    vowels = \"AEIOU\"\n    result = 0\n    for i, c in s.chars.each_with_index\n        if i % 2 == 0 && vowels.include?(c)\n            result += 1\n        end\n    end\n    return result\nend\n",
            "def closest_integer(value)\n    num = value.to_f\n    if num >= 0\n        return (num + 0.5).to_i\n    else\n        return (num - 0.5).to_i\n    end\nend\n",
            "def make_a_pile(n)\n    result = []\n    for i in 0..n-1\n        result[i] = n + 2 * i\n    end\n    return result\nend\n",
            "def words_string(s)\n    s.split(/[, ]/).select {|w| w.length > 0}\nend\n",
            "def choose_num(x, y)\n    if x > y\n        return -1\n    end\n    if y % 2 == 0\n        return y\n    end\n    if x != y\n        return y - 1\n    end\n    return -1\nend\n",
            "def rounded_avg(n, m)\n    return nil if n > m\n    r_avg = (m + n) / 2.0 + 0.5\n    return r_avg.to_s(2)[2..-1]\nend\n",
            "def all_digits_odd(s)\n    for r in s\n        return false if r % 2 == 0\n    end\n    return true\nend\ndef unique_digits(x)\n    result = []\n    for num in x\n        result << num if all_digits_odd(num.to_s)\n    end\n    result.sort\nend\n",
            "def by_length(arr)\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = arr.select {|x| 1 <= x && x <= 9}.sort.reverse\n    sorted_arr.map {|x| digit_names[x-1]}\nend\n",
            "def f(n)\n    nums = (1..n).to_a\n    nums.map.with_index do |_, i|\n        i.odd? ? nums[0..i].reduce(:+) : nums[0..i].reduce(:*)\n    end\nend\n",
            "def is_palindrome(txt)\n    txt == txt.reverse\nend\ndef even_odd_palindrome(n)\n    cnt = [0, 0]\n    for i in 1..n\n        if is_palindrome(i.to_s)\n            cnt[i % 2] += 1\n        end\n    end\n    return cnt\nend\n",
            "def digits_sum(n)\n    n_str = n.to_s\n    if n >= 0\n        n_str.chars.map(&:to_i).reduce(:+)\n    else\n        n_str[0..1].to_i * 2 + digits_sum(n_str.to_i)\n    end\nend\ndef count_nums(arr)\n    arr.count {|n| digits_sum(n) > 0}\nend\n",
            "def move_one_ball(arr)\n    if arr.empty?\n        return true\n    end\n    sorted_arr = arr.sort\n    for i in 0..arr.length\n        if arr[i..-1] == sorted_arr[0..arr.length-i] && arr[0..i] == sorted_arr[arr.length-i..-1]\n            return true\n        end\n    end\n    return false\nend\n",
            "def can_exchange(lst1, lst2)\n    odd_cnt = 0\n    even_cnt = 0\n    for num in lst1\n        odd_cnt += 1 if num % 2 != 0\n    end\n    for num in lst2\n        even_cnt += 1 if num % 2 == 0\n    end\n    return \"YES\" if even_cnt >= odd_cnt\n    return \"NO\"\nend\n",
            "def histogram(test)\n    freq = {}\n    words = []\n    for w in test.split(\" \")\n        if w.length > 0\n            words << w\n        end\n    end\n    for w in words\n        freq[w] = freq[w] + 1\n    end\n    result = {}\n    if freq.length > 0\n        max_freq = 0\n        for v in freq.values\n            if v > max_freq\n                max_freq = v\n            end\n        end\n        for k, v in freq\n            if v == max_freq\n                result[k] = v\n            end\n        end\n    end\n    return result\nend\n",
            "def is_palindrome(s)\n    s == s.reverse\nend\ndef reverse_delete(s, c)\n    s1 = s.delete(c)\n    [s1, is_palindrome(s1) ? \"yes\" : \"no\"]\nend\n",
            "def odd_count(lst)\n    result = []\n    for num in lst\n        n = num.chars.count {|d| d.ord % 2 == 1}\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.gsub(\"i\", n.to_s))\n    end\n    return result\nend\n",
            "def min_sub_array_sum(nums)\n    min_sum = 0\n    cur_sum = 0\n    for n in nums\n        cur_sum = [cur_sum + n, 0].min\n        min_sum = [cur_sum, min_sum].min\n    end\n    if min_sum == 0\n        min_sum = nums.min\n    end\n    return min_sum\nend\n",
            "def max_fill(grid, capacity)\n    grid.map {|arr| (arr.sum / capacity).ceil}.sum\nend\n",
            "def count_ones(num)\n    num.to_s(2).count(\"1\")\nend\ndef sort_array(arr)\n    arr.sort_by {|x| [count_ones(x), x]}\nend\n",
            "def select_words(s, n)\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    result = []\n    for w in words\n        if w.length > 0\n            consonant_count = 0\n            for c in w\n                if consonants.include?(c.downcase)\n                    consonant_count += 1\n                end\n            end\n            if consonant_count == n\n                result << w\n            end\n        end\n    end\n    return result\nend\n",
            "def get_closest_vowel(word)\n    vowels = \"aeiouAEIOU\"\n    for i in (word.length - 2).downto(0)\n        if vowels.include?(word[i]) && !vowels.include?(word[i-1]) && !vowels.include?(word[i+1])\n            return word[i]\n        end\n    end\n    return \"\"\nend\n",
            "def check(s)\n    depth = 0\n    for ch in s\n        if ch == '('\n            depth += 1\n        else\n            depth -= 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    return depth == 0\nend\ndef match_parens(lst)\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    if check(s1) || check(s2)\n        return \"Yes\"\n    end\n    return \"No\"\nend\n",
            "def maximum(arr, k)\n    if k == 0\n        return []\n    end\n    return arr.sort.reverse[0..k-1]\nend\n",
            "def solution(lst)\n    result = 0\n    for i, x in lst.each_with_index\n        if i % 2 == 0 && x % 2 != 0\n            result += x\n        end\n    end\n    return result\nend\n",
            "def add_elements(arr, k)\n    result = 0\n    for n in arr[0...k]\n        if n.to_s.length <= 2\n            result += n\n        end\n    end\n    return result\nend\n",
            "def get_odd_collatz(n)\n    collatz = [1]\n    while n != 1\n        if n % 2 != 0\n            collatz.append(n)\n            n = 3 * n + 1\n        else\n            n = n / 2\n        end\n    end\n    return collatz.sort\nend\n",
            "def valid_date(date)\n    return false if not date.length == 10 or not date[2] == \"-\" or not date[5] == \"-\"\n    m = date[0..1].to_i\n    d = date[3..4].to_i\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31\n        return true\n    end\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30\n        return true\n    end\n    if m == 2 and d >= 1 and d <= 29\n        return true\n    end\n    return false\nend\n",
            "def split_words(txt)\n    if txt.include?(\" \")\n        return txt.split(\" \")\n    elsif txt.include?(\",\")\n        return txt.split(\",\")\n    else\n        result = []\n        for c in txt.chars\n            if c.downcase == c && c.ord % 2 == 0\n                result << c\n            end\n        end\n        return [result.length.to_s]\n    end\nend\n",
            "def is_sorted(lst)\n    if not lst.each_cons(2).all? {|a, b| a <= b}\n        return false\n    end\n    freq = {}\n    for i in lst\n        freq[i] = freq.get(i, 0) + 1\n    end\n    return freq.values.max(0) <= 2\nend\n",
            "def is_prime(n)\n    if n < 2\n        return false\n    end\n    for i in 2..Math.sqrt(n).floor\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\ndef intersection(interval1, interval2)\n    l = [interval1[0], interval2[0]].max\n    r = [interval1[1], interval2[1]].min\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\nend\n",
            "def prod_signs(arr)\n    return nil if arr.empty?\n    sign = -1 if arr.count {|n| n < 0} % 2 == 1\n    sign * arr.map {|n| n.abs}.sum\nend\n",
            "def min_path(grid, k)\n    n = grid.length\n    min_val = n * n + 1\n    for i in 0...n\n        for j in 0...n\n            if grid[i][j] == 1\n                temp = []\n                if i != 0\n                    temp.append(grid[i - 1][j])\n                end\n                if j != 0\n                    temp.append(grid[i][j - 1])\n                end\n                if i != n - 1\n                    temp.append(grid[i + 1][j])\n                end\n                if j != n - 1\n                    temp.append(grid[i][j + 1])\n                end\n                min_val = temp.min\n            end\n        end\n    end\n    result = []\n    for i in 0...k\n        result.append(1 if i % 2 == 0 else min_val)\n    end\n    return result\nend\n",
            "def tri(n)\n    if n == 0\n        return [1]\n    end\n    seq = [1, 3]\n    for i in 2..n\n        if i % 2 == 0\n            seq << i / 2 + 1\n        else\n            seq << seq[i - 1] + seq[i - 2] + (i + 3) / 2\n        end\n    end\n    return seq\nend\n",
            "def digits(n)\n    odds = n.to_s.chars.map(&:to_i).select {|d| d % 2 == 1}\n    odds.reduce(1) {|x, y| x * y} if odds.length > 0 else 0\nend\n",
            "def reverse(a)\n    (0...a.length/2).each do |i|\n        a[i], a[a.length-1-i] = a[a.length-1-i], a[i]\n    end\n    a\nend\ndef is_nested(s)\n    open_idx = []\n    close_idx = []\n    s.each_char.with_index do |ch, i|\n        if ch == '['\n            open_idx << i\n        elsif ch == ']'\n            close_idx << i\n        end\n    end\n    close_idx = reverse(close_idx)\n    cnt = 0\n    i = 0\n    l = close_idx.length\n    open_idx.each do |idx|\n        if i < l && idx < close_idx[i]\n            cnt += 1\n            i += 1\n        end\n    end\n    return cnt >= 2\nend\n",
            "def sum_squares(lst)\n    result = 0\n    for n in lst\n        result += (n.ceil ** 2).to_i\n    end\n    return result\nend\n",
            "def check_if_last_char_is_a_letter(txt)\n    return false if txt.empty?\n    last = txt[txt.rindex(' ') + 1..-1]\n    return last.length == 1 && last[0].alpha?\nend\n",
            "def can_arrange(arr)\n    if arr.length <= 1\n        return -1\n    end\n    idx = []\n    for i in 1..arr.length-1\n        if arr[i] < arr[i-1]\n            idx << i\n        end\n    end\n    if idx.length == 0\n        return -1\n    end\n    return idx[idx.length-1]\nend\n",
            "def largest_smallest_integers(lst)\n    neg = lst.select {|i| i < 0}\n    pos = lst.select {|i| i > 0}\n    max_neg = neg.max if neg.length > 0\n    min_pos = pos.min if pos.length > 0\n    return [max_neg, min_pos]\nend\n",
            "def any_to_real(o)\n    if o.is_a?(String)\n        o.gsub(',','.').to_f\n    elsif o.is_a?(Integer)\n        o.to_f\n    elsif o.is_a?(Float)\n        o\n    else\n        raise RuntimeError.new(\"Type Error\")\n    end\nend\ndef compare_one(a, b)\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1\n        return nil\n    elsif a1 > b1\n        return a1\n    else\n        return b1\n    end\nend\n",
            "def is_equal_to_sum_even(n)\n    n % 2 == 0 && n >= 8\nend\n",
            "def special_factorial(n)\n    fact = 1\n    result = 1\n    for i in 1..n\n        fact *= i\n        result *= fact\n    end\n    return result\nend\n",
            "def fix_spaces(txt)\n    txt.gsub(/\\s{3,}/, \"-\").gsub(\" \", \"_\")\nend\n",
            "def file_name_check(file_name)\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if lst.length != 2 || !suf.include?(lst[1]) || lst[0].length == 0 || !lst[0][0].match(/[a-zA-Z]/) || lst[0].gsub(/[0-9]/, \"\").length > 3\n        return \"No\"\n    end\n    return \"Yes\"\nend\n",
            "def sum_squares(lst)\n    result = 0\n    for i, e in lst.each_with_index\n        if i % 3 == 0\n            result += e * e\n        elsif i % 4 == 0\n            result += e * e * e\n        else\n            result += e\n        end\n    end\n    return result\nend\n",
            "def is_prime(n)\n    if n < 2\n        return false\n    end\n    for i in 2..Math.sqrt(n).floor\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\ndef words_in_sentence(sentence)\n    words = sentence.split(\" \")\n    return words.select {|w| is_prime(w.length)}.join(\" \")\nend\n",
            "def simplify(x, n)\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = xs[0].to_i * ns[0].to_i\n    den = xs[1].to_i * ns[1].to_i\n    return num % den == 0\nend\n",
            "def digits_sum(n)\n    n_str = n.to_s\n    if n >= 0\n        n_str.chars.map(&:to_i).reduce(:+)\n    else\n        (n_str[0..1].to_i * 2) + digits_sum(n_str[1..-1].to_i)\n    end\nend\ndef order_by_points(nums)\n    nums.sort_by {|n| digits_sum(n)}\nend\n",
            "def special_filter(nums)\n    odds = \"13579\"\n    result = 0\n    for n in nums\n        if n > 10 && n % 2 == 1 && odds.include?(n.to_s[0])\n            result += 1\n        end\n    end\n    return result\nend\n",
            "def get_max_triples(n)\n    c = [0, 0, 0]\n    for i in 1..n\n        a = i*i - i + 1\n        c[a % 3] += 1\n    end\n    return (c[0]*c[1]*c[2] + (c[0]*(c[0]-1)*(c[0]-2) + c[1]*(c[1]-1)*(c[1]-2) + c[2]*(c[2]-1)*(c[2]-2)) / 6\nend\n",
            "def bf(planet1, planet2)\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if not names.include?(planet1) or not names.include?(planet2)\n        return []\n    end\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r\n        l, r = r, l\n    end\n    if l == r\n        return []\n    end\n    return names[l + 1 .. r - 1]\nend\n",
            "def sorted_list_sum(lst)\n    result = []\n    for s in lst\n        if s.length % 2 == 0\n            result << s\n        end\n    end\n    result.sort_by do |a, b|\n        if a.length == b.length\n            a <=> b\n        else\n            a.length <=> b.length\n        end\n    end\nend\n",
            "def x_or_y(n, x, y)\n    if n < 2\n        return y\n    end\n    for i in 2..Math.sqrt(n).floor\n        if n % i == 0\n            return y\n        end\n    end\n    return x\nend\n",
            "def double_the_difference(lst)\n    result = 0\n    for n in lst\n        if n >= 0 && n % 2 == 1\n            result += n * n\n        end\n    end\n    return result\nend\n",
            "def compare(game, guess)\n    game.zip(guess).map {|x, y| (x - y).abs}\nend\n",
            "def strongest_extension(class_name, extensions)\n    max_s = -Float::INFINITY\n    max_ext = \"\"\n    for ext in extensions\n        upper = ext.count {|c| c.upcase == c}\n        lower = ext.count {|c| c.downcase == c}\n        s = upper - lower\n        if s > max_s\n            max_s = s\n            max_ext = ext\n        end\n    end\n    return \"#{class_name}.#{max_ext}\"\nend\n",
            "def cycpattern_check(a, b)\n    if a.length < b.length\n        return false\n    end\n    for i in 0..b.length\n        if a.include?(b[i..-1] + b[0..i])\n            return true\n        end\n    end\n    return false\nend\n",
            "def even_odd_count(num)\n    ds = num.abs.to_s.chars\n    even = ds.count {|d| d.ord % 2 == 0}\n    return [even, ds.size - even]\nend\n",
            "def int_to_mini_roman(num)\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i in 0..values.length\n        while num >= values[i]\n            res << numerals[i]\n            num -= values[i]\n        end\n    end\n    return res.join(\"\")\nend\n",
            "def right_angle_triangle(a, b, c)\n    s = [a, b, c]\n    s.sort!\n    s[0]**2 + s[1]**2 == s[2]**2\nend\n",
            "def find_max(words)\n    max_cnt = 0\n    max_w = \"\"\n    for w in words\n        cnt = w.chars.uniq.count\n        if cnt > max_cnt\n            max_cnt = cnt\n            max_w = w\n        elsif cnt == max_cnt\n            max_w = [max_w, w].min\n        end\n    end\n    return max_w\nend\n",
            "def eat(num, need, remaining)\n    if need <= remaining\n        return [num + need, remaining - need]\n    end\n    return [num + remaining, 0]\nend\n",
            "def do_algebra(operators, operands)\n    ops = operators.dup\n    nums = operands.dup\n    i = ops.length - 1\n    while i >= 0\n        if ops[i] == \"**\"\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        end\n        i -= 1\n    end\n    i = 0\n    while i < ops.length\n        if ops[i] == \"*\"\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elsif ops[i] == \"//\"\n            nums[i] = nums[i] / nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        end\n        i += 1\n    end\n    i = 0\n    while i < ops.length\n        if ops[i] == \"+\"\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elsif ops[i] == \"-\"\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        end\n        i += 1\n    end\n    return nums[0]\nend\n",
            "def solve(s)\n    if not s.match(/[a-zA-Z]/)\n        return reverse(s)\n    end\n    result = []\n    for ch in s.chars\n        if not ch.match(/[a-zA-Z]/)\n            result << ch\n        elsif ch.match(/[A-Z]/)\n            result << ch.downcase\n        elsif ch.match(/[a-z]/)\n            result << ch.upcase\n        end\n    end\n    return result.join\nend\ndef reverse(s)\n    result = []\n    for i in 0..s.length-1\n        result[s.length-1-i] = s[i]\n    end\n    return result.join\nend\n",
            "def string_to_md5(txt)\n    if txt.length == 0\n        return nil\n    end\n    md5_encoded = Digest::MD5.hexdigest(txt)\n    return md5_encoded\nend\n",
            "def generate_integers(a, b)\n    lower = [2, a, b].max\n    upper = [8, a, b].min\n    result = []\n    for i in lower..upper\n        if i % 2 == 0\n            result << i\n        end\n    end\n    return result\nend\n"
        ],
        "rust": [
            "pub fn has_close_elements(numbers: &Vec<f64>, threshold: f64) -> bool {\n    for i in 0..numbers.len() {\n        for j in i+1..numbers.len() {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n                return true;\n            }\n        }\n    }\n    false\n}\n",
            "pub fn separate_paren_groups(paren_string: &String) -> Vec<String> {\n    let mut groups = Vec::new();\n    let mut stk = Vec::new();\n    let mut current_group = String::new();\n    let parens = paren_string.replace(\" \", \"\");\n    for ch in parens.chars() {\n        if ch == '(' {\n            stk.push(ch);\n            current_group.push(ch);\n        } else if ch == ')' {\n            stk.pop();\n            current_group.push(ch);\n            if stk.len() == 0 {\n                groups.push(current_group);\n                current_group = String::new();\n            }\n        }\n    }\n    groups\n}\n",
            "pub fn truncate_number(num: f64) -> f64 {\n    num - num.floor()\n}\n",
            "pub fn below_zero(operations: &Vec<i32>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n        balance += op;\n        if balance < 0 {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn mean_absolute_deviation(numbers: &Vec<f64>) -> f64 {\n    let mut mean = 0.0;\n    for n in numbers {\n        mean += n;\n    }\n    mean /= numbers.len() as f64;\n    let mut deviation = 0.0;\n    for n in numbers {\n        deviation += (n - mean).abs();\n    }\n    deviation / numbers.len() as f64\n}\n",
            "pub fn intersperse(numbers: &Vec<i32>, delimiter: i32) -> Vec<i32> {\n    let mut result = Vec::new();\n    for (i, e) in numbers.iter().enumerate() {\n        if i != 0 {\n            result.push(delimiter);\n        }\n        result.push(*e);\n    }\n    result\n}\n",
            "pub fn parse_nested_parens(paren_string: &String) -> Vec<i32> {\n    let mut result = Vec::new();\n    for group in paren_string.split(\" \") {\n        let mut max_depth = 0;\n        let mut depth = 0;\n        for ch in group.chars() {\n            if ch == '(' {\n                depth += 1;\n                max_depth = max(max_depth, depth);\n            } else if ch == ')' {\n                depth -= 1;\n            }\n        }\n        result.push(max_depth);\n    }\n    result\n}\n",
            "pub fn filter_by_substring(strs: &Vec<String>, substring: &String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strs {\n        if s.contains(substring) {\n            result.push(s.clone());\n        }\n    }\n    result\n}\n",
            "pub fn sum_product(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut n_sum = 0;\n    for n in numbers {\n        n_sum += n;\n    }\n    let mut n_product = 1;\n    for n in numbers {\n        n_product *= n;\n    }\n    vec![n_sum, n_product]\n}\n",
            "pub fn rolling_max(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut max_so_far = i32::min_value();\n    let mut result = vec![];\n    for num in numbers {\n        max_so_far = max_so_far.max(*num);\n        result.push(max_so_far);\n    }\n    result\n}\n",
            "pub fn make_palindrome(s: &String) -> String {\n    if is_palindrome(s) {\n        return s.clone();\n    }\n    for i in 0..s.len() {\n        if is_palindrome(&s[i..]) {\n            return s[i..].to_string() + &reverse(&s[..i]);\n        }\n    }\n    \"\".to_string()\n}\nfn is_palindrome(s: &String) -> bool {\n    s == &reverse(s)\n}\nfn reverse(s: &String) -> String {\n    let mut runes = s.chars().collect::<Vec<char>>();\n    for i in 0..runes.len() / 2 {\n        runes.swap(i, runes.len() - i - 1);\n    }\n    runes.into_iter().collect::<String>()\n}\n",
            "pub fn string_xor(a: &String, b: &String) -> String {\n    let mut result = String::new();\n    for i in 0..a.len() {\n        if a.chars().nth(i).unwrap() == b.chars().nth(i).unwrap() {\n            result.push('0');\n        } else {\n            result.push('1');\n        }\n    }\n    result\n}\n",
            "pub fn longest(strs: &Vec<String>) -> Option<String> {\n    if strs.len() == 0 {\n        return None;\n    }\n    let mut longest_s = strs[0].clone();\n    for s in strs {\n        if s.len() > longest_s.len() {\n            longest_s = s.clone();\n        }\n    }\n    Some(longest_s)\n}\n",
            "pub fn greatest_common_divisor(a: i32, b: i32) -> i32 {\n    if b == 0 { a } else { greatest_common_divisor(b, a % b) }\n}\n",
            "pub fn all_prefixes(s: &String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..s.len() {\n        prefixes.push(s[0..i+1].to_string());\n    }\n    prefixes\n}\n",
            "pub fn string_sequence(n: i32) -> String {\n    let mut result = Vec::new();\n    for i in 0..=n {\n        result.push(i.to_string());\n    }\n    result.join(\" \")\n}\n",
            "pub fn count_distinct_characters(s: &String) -> i32 {\n    s.chars().collect::<std::collections::HashSet<char>>().len() as i32\n}\n",
            "pub fn parse_music(music_string: &String) -> Vec<i32> {\n    let durations = {\n        let mut map = HashMap::new();\n        map.insert(\"o\", 4);\n        map.insert(\"o|\", 2);\n        map.insert(\".|\", 1);\n        map\n    };\n    let notes = music_string.split_whitespace();\n    let mut result = Vec::new();\n    for note in notes {\n        result.push(durations[note]);\n    }\n    result\n}\n",
            "pub fn how_many_times(s: &String, substring: &String) -> i32 {\n    let mut times = 0;\n    for i in 0..s.len()-substring.len()+1 {\n        if &s[i..i+substring.len()] == substring {\n            times += 1;\n        }\n    }\n    times\n}\n",
            "pub fn sort_numbers(numbers: &String) -> String {\n    let num_dict = [\n        (\"zero\", 0),\n        (\"one\", 1),\n        (\"two\", 2),\n        (\"three\", 3),\n        (\"four\", 4),\n        (\"five\", 5),\n        (\"six\", 6),\n        (\"seven\", 7),\n        (\"eight\", 8),\n        (\"nine\", 9),\n    ];\n    let mut num_list = Vec::new();\n    for e in numbers.split(\" \") {\n        if num_dict.iter().any(|(k, _)| k == e) {\n            num_list.push(e);\n        }\n    }\n    num_list.sort_by(|a, b| num_dict.iter().find(|(k, _)| k == a).unwrap().1.cmp(&num_dict.iter().find(|(k, _)| k == b).unwrap().1));\n    num_list.join(\" \")\n}\n",
            "pub fn find_closest_elements(numbers: &Vec<f64>) -> Vec<f64> {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    let mut min_diff = f64::INFINITY;\n    let mut closest_pair = vec![];\n    for i in 1..sorted_numbers.len() {\n        let diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if diff < min_diff {\n            min_diff = diff;\n            closest_pair = vec![sorted_numbers[i - 1], sorted_numbers[i]];\n        }\n    }\n    closest_pair\n}\n",
            "pub fn rescale_to_unit(numbers: &Vec<f64>) -> Vec<f64> {\n    let mut min_num = f64::MAX;\n    let mut max_num = f64::MIN;\n    for num in numbers {\n        if *num < min_num {\n            min_num = *num;\n        }\n        if *num > max_num {\n            max_num = *num;\n        }\n    }\n    if min_num == max_num {\n        return vec![0.0; numbers.len()];\n    }\n    let mut result = vec![0.0; numbers.len()];\n    for (i, num) in numbers.iter().enumerate() {\n        result[i] = (*num - min_num) / (max_num - min_num);\n    }\n    result\n}\n",
            "pub fn filter_integers(values: &Vec<Box<dyn Any>>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for x in values {\n        if let Some(x) = x.downcast_ref::<i32>() {\n            result.push(*x);\n        }\n    }\n    result\n}\n",
            "pub fn str_length(s: &String) -> i32 {\n    s.len() as i32\n}\n",
            "pub fn largest_divisor(n: i32) -> i32 {\n    for i in 2..n {\n        if n % i == 0 {\n            return n / i;\n        }\n    }\n    1\n}\n",
            "pub fn factorize(n: i32) -> Vec<i32> {\n    let mut factors = vec![];\n    let mut divisor = 2;\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    factors\n}\n",
            "pub fn remove_duplicates(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut counts = HashMap::new();\n    for num in numbers {\n        let count = counts.entry(num).or_insert(0);\n        *count += 1;\n    }\n    let mut res = Vec::new();\n    for num in numbers {\n        if counts[num] == 1 {\n            res.push(*num);\n        }\n    }\n    res\n}\n",
            "pub fn flip_case(s: &String) -> String {\n    let mut flipped = String::new();\n    for ch in s.chars() {\n        if !ch.is_alphabetic() {\n            flipped.push(ch);\n        } else if ch.is_lowercase() {\n            flipped.push(ch.to_uppercase().next().unwrap());\n        } else if ch.is_uppercase() {\n            flipped.push(ch.to_lowercase().next().unwrap());\n        }\n    }\n    flipped\n}\n",
            "pub fn concatenate(strs: &Vec<String>) -> String {\n    strs.join(\"\")\n}\n",
            "pub fn filter_by_prefix(strs: &Vec<String>, prefix_str: &String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strs {\n        if s.starts_with(prefix_str) {\n            result.push(s.clone());\n        }\n    }\n    result\n}\n",
            "pub fn get_positive(l: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for num in l {\n        if *num > 0 {\n            result.push(*num);\n        }\n    }\n    result\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn poly(xs: &Vec<i32>, x: f64) -> f64 {\n    let mut res = 0.0;\n    for i in 0..xs.len() {\n        res += xs[i] as f64 * x.powi(i as i32);\n    }\n    res\n}\npub fn find_zero(xs: &Vec<i32>) -> f64 {\n    let mut x1 = 1.0;\n    let mut x2 = -1.0;\n    while poly(xs, x1) * poly(xs, x2) > 0.0 {\n        x1 *= 2.0;\n        x2 *= 2.0;\n    }\n    while (x1 - x2).abs() > 1e-10 {\n        let mid = (x1 + x2) / 2.0;\n        if poly(xs, mid) == 0.0 {\n            return mid;\n        } else if poly(xs, mid) * poly(xs, x1) < 0.0 {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    (x1 + x2) / 2.0\n}\n",
            "pub fn sort_third(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_third = Vec::new();\n    for i in 0..l.len() {\n        if i % 3 == 0 {\n            sorted_third.push(l[i]);\n        }\n    }\n    sorted_third.sort();\n    let mut result = Vec::new();\n    for i in 0..l.len() {\n        if i % 3 == 0 {\n            result.push(sorted_third[i / 3]);\n        } else {\n            result.push(l[i]);\n        }\n    }\n    result\n}\n",
            "pub fn list_unique(l: &Vec<i32>) -> Vec<i32> {\n    let mut m = std::collections::HashMap::new();\n    for e in l {\n        m.insert(*e, true);\n    }\n    let mut result = Vec::new();\n    for k in m.keys() {\n        result.push(*k);\n    }\n    result.sort();\n    result\n}\n",
            "pub fn max_element(l: &Vec<i32>) -> i32 {\n    if l.len() == 0 {\n        return 0;\n    }\n    let mut max = l[0];\n    for e in l {\n        if e > &max {\n            max = *e;\n        }\n    }\n    max\n}\n",
            "pub fn fizz_buzz(n: i32) -> i32 {\n    let mut cnt = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += i.to_string().matches(\"7\").count();\n        }\n    }\n    cnt\n}\n",
            "pub fn sort_even(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_even = Vec::new();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n            sorted_even.push(l[i]);\n        }\n    }\n    sorted_even.sort();\n    let mut result = Vec::new();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n            result.push(sorted_even[i / 2]);\n        } else {\n            result.push(l[i]);\n        }\n    }\n    result\n}\n",
            "pub fn encode_cyclic(s: &String) -> String {\n    let mut result = Vec::new();\n    for i in 0..s.len() {\n        if i + 3 > s.len() {\n            result.push(&s[i..]);\n        } else {\n            result.push(&s[i+1..i+3]);\n            result.push(&s[i..i+1]);\n        }\n    }\n    result.join(\"\")\n}\npub fn decode_cyclic(s: &String) -> String {\n    encode_cyclic(&encode_cyclic(s))\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn prime_fib(n: i32) -> i32 {\n    let mut f = [0, 1];\n    let mut cnt = 0;\n    while cnt < n {\n        f = [f[1], f[0] + f[1]];\n        if is_prime(f[1]) {\n            cnt += 1;\n        }\n    }\n    f[1]\n}\n",
            "pub fn triples_sum_to_zero(l: &Vec<i32>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len() {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true;\n                }\n            }\n        }\n    }\n    false\n}\n",
            "pub fn car_race_collision(n: i32) -> i32 {\n    n * n\n}\n",
            "pub fn incr_list(l: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for e in l {\n        result.push(e + 1);\n    }\n    result\n}\n",
            "pub fn pairs_sum_to_zero(l: &Vec<i32>) -> bool {\n    let mut seen = HashMap::new();\n    for num in l {\n        if seen.contains_key(&(-num)) {\n            return true;\n        }\n        seen.insert(num, true);\n    }\n    false\n}\n",
            "pub fn change_base(x: i32, bas: i32) -> String {\n    if x == 0 {\n        return \"0\".to_string();\n    }\n    let mut digits = vec![];\n    let mut x = x;\n    while x > 0 {\n        digits.push(x % bas);\n        x /= bas;\n    }\n    digits.iter().rev().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\")\n}\n",
            "pub fn triangle_area(a: i32, h: i32) -> f64 {\n    (a as f64) * (h as f64) / 2.0\n}\n",
            "pub fn fib4(n: i32) -> i32 {\n    let mut fib = [0, 0, 2, 0];\n    for i in 4..=n {\n        fib[i % 4] = fib.iter().sum();\n    }\n    fib[n % 4]\n}\n",
            "pub fn median(l: &Vec<f64>) -> f64 {\n    let mut sl = l.clone();\n    sl.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    if l.len() % 2 != 0 {\n        sl[l.len() / 2]\n    } else {\n        (sl[l.len() / 2] + sl[l.len() / 2 - 1]) / 2.0\n    }\n}\n",
            "pub fn is_palindrome(txt: &String) -> bool {\n    let mut runes = txt.chars().collect::<Vec<char>>();\n    for i in 0..runes.len()/2 {\n        runes.swap(i, runes.len()-1-i);\n    }\n    txt == runes.into_iter().collect::<String>()\n}\n",
            "pub fn modp(n: i32, p: i32) -> i32 {\n    let mut ret = 1;\n    for _ in 0..n {\n        ret = (ret * 2) % p;\n    }\n    ret\n}\n",
            "pub fn encode_shift(s: &String) -> String {\n    let mut result = Vec::new();\n    for ch in s.chars() {\n        result.push(((ch as i32 - 97 + 5) % 26) as u8 + 97);\n    }\n    String::from_utf8(result).unwrap()\n}\npub fn decode_shift(s: &String) -> String {\n    let mut result = Vec::new();\n    for ch in s.chars() {\n        result.push(((ch as i32 - 97 + 21) % 26) as u8 + 97);\n    }\n    String::from_utf8(result).unwrap()\n}\n",
            "pub fn remove_vowels(txt: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    let mut result = String::new();\n    for char in txt.chars() {\n        if !vowels.contains(char) {\n            result.push(char);\n        }\n    }\n    result\n}\n",
            "pub fn below_threshold(l: &Vec<i32>, t: i32) -> bool {\n    for x in l {\n        if *x >= t {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn add(x: i32, y: i32) -> i32 {\n    x + y\n}\n",
            "pub fn same_chars(s0: &String, s1: &String) -> bool {\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s1_chars.sort();\n    s0_chars == s1_chars\n}\n",
            "pub fn fib(n: i32) -> i32 {\n    if n <= 1 {\n        return n;\n    }\n    fib(n - 1) + fib(n - 2)\n}\n",
            "pub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '<' {\n            depth += 1;\n        } else if b == '>' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn monotonic(l: &Vec<i32>) -> bool {\n    let diff = l.iter().zip(l.iter().skip(1)).map(|(x, y)| y - x);\n    diff.all(|x| x <= 0) || diff.all(|x| x >= 0)\n}\n",
            "pub fn common(l1: &Vec<i32>, l2: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for e in l1 {\n        if l2.contains(e) {\n            result.push(*e);\n        }\n    }\n    result.sort();\n    result\n}\n",
            "pub fn largest_prime_factor(n: i32) -> i32 {\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    n\n}\n",
            "pub fn sum_to_n(n: i32) -> i32 {\n    let mut result = 0;\n    for i in 0..=n {\n        result += i;\n    }\n    result\n}\n",
            "pub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '(' {\n            depth += 1;\n        } else if b == ')' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn derivative(xs: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i] * i as i32);\n    }\n    result\n}\n",
            "pub fn fibfib(n: i32) -> i32 {\n    if n <= 1 { return 0 }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    while n > 2 {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    c\n}\n",
            "pub fn vowels_count(s: &String) -> i32 {\n    let vowels = \"aeiou\";\n    let mut cnt = 0;\n    for i in 0..s.len() {\n        if vowels.contains(s[i..i+1].to_lowercase().as_str()) || (i == s.len() - 1 && s[i..i+1].to_lowercase() == \"y\") {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n",
            "pub fn circular_shift(x: i32, shift: i32) -> String {\n    let x_str = x.to_string();\n    if shift > x_str.len() as i32 {\n        return x_str.chars().rev().collect();\n    } else {\n        return x_str[x_str.len() - shift as usize..].to_string() + &x_str[..x_str.len() - shift as usize];\n    }\n}\n",
            "pub fn digit_sum(s: &String) -> i32 {\n    let mut result = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n            result += c as i32;\n        }\n    }\n    result\n}\n",
            "pub fn fruit_distribution(s: &String, n: i32) -> i32 {\n    let words = s.split(' ').collect::<Vec<&str>>();\n    let apples = words[words.iter().position(|&x| x == \"apples\").unwrap() - 1].parse::<i32>().unwrap();\n    let oranges = words[words.iter().position(|&x| x == \"oranges\").unwrap() - 1].parse::<i32>().unwrap();\n    n - apples - oranges\n}\n",
            "pub fn pluck(arr: &Vec<i32>) -> Vec<i32> {\n    let evens = arr.iter().filter(|&&n| n % 2 == 0).collect::<Vec<_>>();\n    if evens.is_empty() {\n        return vec![];\n    }\n    let min_even = evens.iter().min().unwrap();\n    for (i, &n) in arr.iter().enumerate() {\n        if n == *min_even {\n            return vec![*min_even, i as i32];\n        }\n    }\n    vec![]\n}\n",
            "pub fn search(lst: &Vec<i32>) -> i32 {\n    let mut freqs = HashMap::new();\n    for n in lst {\n        let count = freqs.entry(n).or_insert(0);\n        *count += 1;\n    }\n    let mut good_vals = Vec::new();\n    for (k, v) in freqs {\n        if v >= k {\n            good_vals.push(k);\n        }\n    }\n    if good_vals.len() == 0 {\n        return -1;\n    }\n    let mut max_val = good_vals[0];\n    for v in good_vals {\n        if v > max_val {\n            max_val = v;\n        }\n    }\n    max_val\n}\n",
            "pub fn strange_sort_list(lst: &Vec<i32>) -> Vec<i32> {\n    let mut sl = lst.clone();\n    sl.sort();\n    let mut result = Vec::new();\n    let mut left = 0;\n    let mut right = sl.len() - 1;\n    while left <= right {\n        result.push(sl[left]);\n        left += 1;\n        if left <= right {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    result\n}\n",
            "pub fn triangle_area(a: i32, b: i32, c: i32) -> f64 {\n    if a + b > c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n        return (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt();\n    }\n    -1.0\n}\n",
            "pub fn will_it_fly(q: &Vec<i32>, w: i32) -> bool {\n    if q.len() == 0 {\n        return false;\n    }\n    let mut is_palin = true;\n    for i in 0..q.len() {\n        if q[i] != q[q.len()-i-1] {\n            is_palin = false;\n            break;\n        }\n    }\n    let mut total = 0;\n    for e in q {\n        total += e;\n    }\n    is_palin && total <= w\n}\n",
            "pub fn smallest_change(arr: &Vec<i32>) -> i32 {\n    let mut ans = 0;\n    for i in 0..arr.len()/2 {\n        if arr[i] != arr[arr.len()-i-1] {\n            ans += 1;\n        }\n    }\n    ans\n}\n",
            "pub fn total_match(lst1: &Vec<String>, lst2: &Vec<String>) -> Vec<String> {\n    let mut cnt1 = 0;\n    for s in lst1 {\n        cnt1 += s.len();\n    }\n    let mut cnt2 = 0;\n    for s in lst2 {\n        cnt2 += s.len();\n    }\n    if cnt1 <= cnt2 {\n        return lst1.clone();\n    }\n    lst2.clone()\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn is_multiply_prime(a: i32) -> bool {\n    let mut cnt = 0;\n    for i in 2..=a {\n        if is_prime(i) {\n            while a % i == 0 {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    cnt == 3\n}\n",
            "pub fn is_simple_power(x: i32, n: i32) -> bool {\n    if n < 2 {\n        return x == n;\n    }\n    let mut tmp = 1;\n    while tmp < x {\n        tmp *= n;\n    }\n    tmp == x\n}\n",
            "pub fn is_cube(a: i32) -> bool {\n    let a = a.abs();\n    let root = (a as f64).powf(1.0 / 3.0).round() as i32;\n    root * root * root == a\n}\n",
            "pub fn hex_key(num: &String) -> i32 {\n    let mut result = 0;\n    for x in num.chars() {\n        if x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D' {\n            result += 1;\n        }\n    }\n    result\n}\n",
            "pub fn decimal_to_binary(dec: i32) -> String {\n    let binary = format!(\"{:b}\", dec);\n    format!(\"db{}db\", binary)\n}\n",
            "pub fn is_happy(s: &String) -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    for i in 0..s.len()-2 {\n        if s.chars().nth(i).unwrap() == s.chars().nth(i+1).unwrap() ||\n            s.chars().nth(i).unwrap() == s.chars().nth(i+2).unwrap() ||\n            s.chars().nth(i+1).unwrap() == s.chars().nth(i+2).unwrap() {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn numerical_letter_grade(grades: &Vec<f64>) -> Vec<String> {\n    let mut result = Vec::new();\n    for g in grades {\n        if *g == 4.0 {\n            result.push(\"A+\".to_string());\n        } else if *g > 3.7 {\n            result.push(\"A\".to_string());\n        } else if *g > 3.3 {\n            result.push(\"A-\".to_string());\n        } else if *g > 3.0 {\n            result.push(\"B+\".to_string());\n        } else if *g > 2.7 {\n            result.push(\"B\".to_string());\n        } else if *g > 2.3 {\n            result.push(\"B-\".to_string());\n        } else if *g > 2.0 {\n            result.push(\"C+\".to_string());\n        } else if *g > 1.7 {\n            result.push(\"C\".to_string());\n        } else if *g > 1.3 {\n            result.push(\"C-\".to_string());\n        } else if *g > 1.0 {\n            result.push(\"D+\".to_string());\n        } else if *g > 0.7 {\n            result.push(\"D\".to_string());\n        } else if *g > 0.0 {\n            result.push(\"D-\".to_string());\n        } else {\n            result.push(\"E\".to_string());\n        }\n    }\n    result\n}\n",
            "pub fn prime_length(s: &String) -> bool {\n    let length = s.len();\n    if length < 2 {\n        return false;\n    }\n    for i in 2..=((length as f64).sqrt() as i32) {\n        if length % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn starts_one_ends(n: i32) -> i32 {\n    if n == 1 { 1 } else { 2 * 9 * 10i32.pow(n - 2) }\n}\n",
            "pub fn solve(n: i32) -> String {\n    let mut digits_sum = 0;\n    for d in n.to_string().chars() {\n        digits_sum += d.to_digit(10).unwrap();\n    }\n    format!(\"{:b}\", digits_sum)\n}\n",
            "pub fn add(lst: &Vec<i32>) -> i32 {\n    let mut result = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 1 && x % 2 == 0 {\n            result += x;\n        }\n    }\n    result\n}\n",
            "pub fn anti_shuffle(s: &String) -> String {\n    let mut words = vec![];\n    for word in s.split(\" \") {\n        let mut runes = word.chars().collect::<Vec<char>>();\n        runes.sort();\n        words.push(runes.into_iter().collect::<String>());\n    }\n    words.join(\" \")\n}\n",
            "pub fn get_row(lst: &Vec<Vec<i32>>, x: i32) -> Vec<Vec<i32>> {\n    let mut coords = Vec::new();\n    for i in 0..lst.len() {\n        for j in 0..lst[i].len() {\n            if lst[i][j] == x {\n                coords.push(vec![i as i32, j as i32]);\n            }\n        }\n    }\n    coords.sort_by(|a, b| {\n        if a[0] < b[0] {\n            return std::cmp::Ordering::Less;\n        } else if a[0] == b[0] && a[1] > b[1] {\n            return std::cmp::Ordering::Greater;\n        }\n        std::cmp::Ordering::Equal\n    });\n    coords\n}\n",
            "pub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    if arr.len() == 0 {\n        return vec![];\n    }\n    if (arr[0] + arr[arr.len() - 1]) % 2 == 0 {\n        arr.iter().rev().cloned().collect()\n    } else {\n        arr.iter().cloned().collect()\n    }\n}\n",
            "pub fn encrypt(s: &String) -> String {\n    let mut result = Vec::new();\n    for ch in s.chars() {\n        let shifted = ch as u8 + 4;\n        if shifted > 'z' as u8 {\n            result.push(shifted - 26);\n        } else {\n            result.push(shifted);\n        }\n    }\n    String::from_utf8(result).unwrap()\n}\n",
            "pub fn next_smallest(lst: &Vec<i32>) -> Option<i32> {\n    let mut sl = Vec::new();\n    let mut m = HashMap::new();\n    for e in lst {\n        if !m.contains_key(e) {\n            sl.push(*e);\n            m.insert(*e, true);\n        }\n    }\n    sl.sort();\n    if sl.len() < 2 {\n        return None;\n    }\n    Some(sl[1])\n}\n",
            "pub fn is_bored(s: &String) -> i32 {\n    let sentences = Regex::new(r\"[.!?]\\s*\").unwrap().split(s).collect::<Vec<_>>();\n    let mut result = 0;\n    for sentence in sentences {\n        if sentence.len() >= 2 && sentence[..2] == \"I \" {\n            result += 1;\n        }\n    }\n    result\n}\n",
            "pub fn any_int(x: &Box<dyn Any>, y: &Box<dyn Any>, z: &Box<dyn Any>) -> bool {\n    if let Some(x) = x.downcast_ref::<i32>() {\n        if let Some(y) = y.downcast_ref::<i32>() {\n            if let Some(z) = z.downcast_ref::<i32>() {\n                if (x + y == *z) || (x + z == *y) || (y + z == *x) {\n                    return true;\n                }\n            }\n        }\n    }\n    false\n}\n",
            "pub fn encode(message: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    let mut result = String::new();\n    for ch in message.chars() {\n        if ch.is_alphabetic() {\n            let ch1 = ch.to_ascii_uppercase() if ch.is_lowercase() else ch.to_ascii_lowercase();\n            if vowels.contains(ch1) {\n                result.push((ch1 as u8 + 2) as char);\n            } else {\n                result.push(ch1);\n            }\n        } else {\n            result.push(ch);\n        }\n    }\n    result\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn skjkasdkd(lst: &Vec<i32>) -> i32 {\n    let primes = lst.iter().filter(|&&n| is_prime(n)).collect::<Vec<_>>();\n    if primes.is_empty() {\n        return 0;\n    }\n    let largest = primes.iter().max().unwrap().to_string();\n    largest.chars().map(|c| c.to_digit(10).unwrap()).sum()\n}\n",
            "pub fn check_dict_case(d: &HashMap<String,String>) -> bool {\n    if d.is_empty() {\n        return false;\n    }\n    let mut all_lower = true;\n    let mut all_upper = true;\n    for k in d.keys() {\n        for c in k.chars() {\n            if c.is_lowercase() {\n                all_upper = false;\n            } else if c.is_uppercase() {\n                all_lower = false;\n            } else {\n                all_lower = false;\n                all_upper = false;\n                break;\n            }\n        }\n        if !all_lower && !all_upper {\n            break;\n        }\n    }\n    all_lower || all_upper\n}\n",
            "pub fn count_up_to(n: i32) -> Vec<i32> {\n    let mut primes = Vec::new();\n    for num in 2..n {\n        if primes.iter().all(|p| num % p != 0) {\n            primes.push(num);\n        }\n    }\n    primes\n}\n",
            "pub fn multiply(a: i32, b: i32) -> i32 {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n",
            "pub fn count_upper(s: &String) -> i32 {\n    let vowels = \"AEIOU\";\n    let mut result = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(c) {\n            result += 1;\n        }\n    }\n    result\n}\n",
            "pub fn closest_integer(value: &String) -> i32 {\n    let num = value.parse::<f64>().unwrap();\n    if num >= 0.0 {\n        (num + 0.5) as i32\n    } else {\n        (num - 0.5) as i32\n    }\n}\n",
            "pub fn make_a_pile(n: i32) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in 0..n {\n        result.push(n + 2 * i);\n    }\n    result\n}\n",
            "pub fn words_string(s: &String) -> Vec<String> {\n    let re = Regex::new(r\"[, ]\").unwrap();\n    re.split(s).filter(|w| w.len() > 0).map(|w| w.to_string()).collect()\n}\n",
            "pub fn choose_num(x: i32, y: i32) -> i32 {\n    if x > y { -1 } else if y % 2 == 0 { y } else if x != y { y - 1 } else { -1 }\n}\n",
            "pub fn rounded_avg(n: i32, m: i32) -> Option<String> {\n    if n > m {\n        return None;\n    }\n    let r_avg = (m + n) / 2 + 1;\n    Some(format!(\"{:b}\", r_avg))\n}\n",
            "pub fn all_digits_odd(s: &str) -> bool {\n    for c in s.chars() {\n        if c.to_digit(10).unwrap() % 2 == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn unique_digits(x: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for num in x {\n        if all_digits_odd(&num.to_string()) {\n            result.push(*num);\n        }\n    }\n    result.sort();\n    result\n}\n",
            "pub fn by_length(arr: &Vec<i32>) -> Vec<String> {\n    let digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let sorted_arr = arr.iter().filter(|x| 1 <= **x && **x <= 9).collect::<Vec<_>>();\n    sorted_arr.sort_by(|a, b| b.cmp(a));\n    sorted_arr.iter().map(|x| digit_names[*x as usize - 1].to_string()).collect()\n}\n",
            "pub fn f(n: i32) -> Vec<i32> {\n    let nums = (1..=n).collect::<Vec<i32>>();\n    nums.iter().map(|i| {\n        if i % 2 != 0 {\n            nums[0..*i as usize].iter().sum()\n        } else {\n            nums[0..*i as usize].iter().product()\n        }\n    }).collect::<Vec<i32>>()\n}\n",
            "pub fn even_odd_palindrome(n: i32) -> Vec<i32> {\n    let mut cnt = [0, 0];\n    for i in 1..=n {\n        if is_palindrome(i.to_string()) {\n            cnt[i % 2] += 1;\n        }\n    }\n    cnt.to_vec()\n}\nfn is_palindrome(txt: String) -> bool {\n    txt == txt.chars().rev().collect::<String>()\n}\n",
            "pub fn digits_sum(n: i32) -> i32 {\n    let n_str = n.to_string();\n    if n >= 0 {\n        n_str.chars().map(|c| c.to_digit(10).unwrap()).sum()\n    } else {\n        let n_str = n_str.as_str();\n        let n_str = &n_str[0..2];\n        let n_str = n_str.parse::<i32>().unwrap();\n        n_str * 2 + digits_sum(n_str.abs())\n    }\n}\npub fn count_nums(arr: &Vec<i32>) -> i32 {\n    let mut result = 0;\n    for n in arr {\n        if digits_sum(*n) > 0 {\n            result += 1;\n        }\n    }\n    result\n}\n",
            "pub fn move_one_ball(arr: &Vec<i32>) -> bool {\n    if arr.len() == 0 {\n        return true;\n    }\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort();\n    for i in 0..arr.len() {\n        if arr[i..].eq(&sorted_arr[..arr.len()-i]) && arr[..i].eq(&sorted_arr[arr.len()-i..]) {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn can_exchange(lst1: &Vec<i32>, lst2: &Vec<i32>) -> String {\n    let mut odd_cnt = 0;\n    let mut even_cnt = 0;\n    for num in lst1 {\n        if num % 2 != 0 {\n            odd_cnt += 1;\n        }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n            even_cnt += 1;\n        }\n    }\n    if even_cnt >= odd_cnt {\n        return \"YES\".to_string();\n    }\n    return \"NO\".to_string();\n}\n",
            "pub fn histogram(test: &String) -> HashMap<String,i32> {\n    let mut freq = HashMap::new();\n    let words = test.split(\" \").filter(|w| w.len() > 0).collect::<Vec<&str>>();\n    for w in words {\n        *freq.entry(w.to_string()).or_insert(0) += 1;\n    }\n    let mut result = HashMap::new();\n    if freq.len() > 0 {\n        let mut max_freq = 0;\n        for (_, v) in &freq {\n            if *v > max_freq {\n                max_freq = *v;\n            }\n        }\n        for (k, v) in &freq {\n            if *v == max_freq {\n                result.insert(k.to_string(), *v);\n            }\n        }\n    }\n    result\n}\n",
            "pub fn reverse_delete(s: &String, c: &String) -> Vec<String> {\n    let s1 = s.chars().filter(|ch| !c.contains(ch)).collect::<String>();\n    let result = vec![s1, if s1.chars().rev().collect::<String>() == s1 { \"yes\".to_string() } else { \"no\".to_string() }];\n    result\n}\n",
            "pub fn odd_count(lst: &Vec<String>) -> Vec<String> {\n    let mut result = Vec::new();\n    for num in lst {\n        let n = num.chars().map(|d| d as u8).filter(|&d| d % 2 == 1).count();\n        let rs = \"the number of odd elements in the string i of the input.\";\n        result.push(rs.replace(\"i\", &n.to_string()));\n    }\n    result\n}\n",
            "pub fn min_sub_array_sum(nums: &Vec<i32>) -> i32 {\n    let mut min_sum = 0;\n    let mut cur_sum = 0;\n    for n in nums {\n        cur_sum = cur_sum.min(cur_sum + n);\n        min_sum = min_sum.min(cur_sum);\n    }\n    if min_sum == 0 {\n        min_sum = nums.iter().min().unwrap();\n    }\n    min_sum\n}\n",
            "pub fn max_fill(grid: &Vec<Vec<i32>>, capacity: i32) -> i32 {\n    grid.iter().map(|arr| (arr.iter().sum::<i32>() as f32 / capacity as f32).ceil() as i32).sum()\n}\n",
            "pub fn count_ones(num: i32) -> i32 {\n    let mut count = 0;\n    let mut n = num;\n    while n > 0 {\n        if n & 1 == 1 {\n            count += 1;\n        }\n        n >>= 1;\n    }\n    count\n}\npub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    let mut arr = arr.clone();\n    arr.sort_by(|a, b| {\n        let a_ones = count_ones(*a);\n        let b_ones = count_ones(*b);\n        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n}\n",
            "pub fn select_words(s: &String, n: i32) -> Vec<String> {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let words = s.split(\" \");\n    let mut result = Vec::new();\n    for w in words {\n        if w.len() > 0 {\n            let mut consonant_count = 0;\n            for c in w.chars() {\n                if consonants.contains(c.to_lowercase().to_string().as_str()) {\n                    consonant_count += 1;\n                }\n            }\n            if consonant_count == n {\n                result.push(w.to_string());\n            }\n        }\n    }\n    result\n}\n",
            "pub fn get_closest_vowel(word: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    for i in (0..word.len() - 2).rev() {\n        if vowels.contains(&word[i..i+1]) && !vowels.contains(&word[i-1..i]) && !vowels.contains(&word[i+1..i+2]) {\n            return word[i..i+1].to_string();\n        }\n    }\n    \"\".to_string()\n}\n",
            "pub fn check(s: &str) -> bool {\n    let mut depth = 0;\n    for ch in s.chars() {\n        if ch == '(' {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\npub fn match_parens(lst: &Vec<String>) -> String {\n    let s1 = &lst[0] + &lst[1];\n    let s2 = &lst[1] + &lst[0];\n    if check(s1) || check(s2) {\n        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n    }\n}\n",
            "pub fn maximum(arr: &Vec<i32>, k: i32) -> Vec<i32> {\n    let mut arr = arr.clone();\n    arr.sort();\n    arr[arr.len() - k as usize..].to_vec()\n}\n",
            "pub fn solution(lst: &Vec<i32>) -> i32 {\n    let mut result = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n            result += x;\n        }\n    }\n    result\n}\n",
            "pub fn add_elements(arr: &Vec<i32>, k: i32) -> i32 {\n    let mut result = 0;\n    for n in &arr[..k as usize] {\n        if n.to_string().len() <= 2 {\n            result += n;\n        }\n    }\n    result\n}\n",
            "pub fn get_odd_collatz(n: i32) -> Vec<i32> {\n    let mut collatz = vec![1];\n    while n != 1 {\n        if n % 2 != 0 {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    collatz.sort();\n    collatz\n}\n",
            "pub fn valid_date(date: &String) -> bool {\n    if date.len() != 10 || date.chars().nth(2).unwrap() != '-' || date.chars().nth(5).unwrap() != '-' {\n        return false;\n    }\n    let m = date[..2].parse::<i32>().unwrap();\n    let d = date[3..5].parse::<i32>().unwrap();\n    if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) && d >= 1 && d <= 31 {\n        return true;\n    }\n    if (m == 4 || m == 6 || m == 9 || m == 11) && d >= 1 && d <= 30 {\n        return true;\n    }\n    if m == 2 && d >= 1 && d <= 29 {\n        return true;\n    }\n    false\n}\n",
            "pub fn split_words(txt: &String) -> Vec<String> {\n    let mut result = Vec::new();\n    if txt.contains(\" \") {\n        result = txt.split(\" \").map(|s| s.to_string()).collect();\n    } else if txt.contains(\",\") {\n        result = txt.split(\",\").map(|s| s.to_string()).collect();\n    } else {\n        let mut set = HashSet::new();\n        for c in txt.chars() {\n            if c.is_lowercase() && c as i32 % 2 == 0 {\n                set.insert(c);\n            }\n        }\n        result.push(set.len().to_string());\n    }\n    result\n}\n",
            "pub fn is_sorted(lst: &Vec<i32>) -> bool {\n    if !lst.windows(2).all(|w| w[0] <= w[1]) {\n        return false;\n    }\n    let mut freq = std::collections::HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    freq.values().max().unwrap_or(&0) <= &2\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn intersection(interval1: &Vec<i32>, interval2: &Vec<i32>) -> String {\n    let l = std::cmp::max(interval1[0], interval2[0]);\n    let r = std::cmp::min(interval1[1], interval2[1]);\n    let length = r - l;\n    if length > 0 && is_prime(length) {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}\n",
            "pub fn prod_signs(arr: &Vec<i32>) -> Option<i32> {\n    if arr.is_empty() {\n        return None;\n    }\n    let mut sign = 1;\n    if arr.iter().filter(|n| **n < 0).count() % 2 == 1 {\n        sign = -1;\n    }\n    Some(sign * arr.iter().map(|n| n.abs()).sum())\n}\n",
            "pub fn min_path(grid: &Vec<Vec<i32>>, k: i32) -> Vec<i32> {\n    let n = grid.len();\n    let mut min_val = n * n + 1;\n    for i in 0..n {\n        for j in 0..n {\n            if grid[i][j] == 1 {\n                let mut temp = Vec::new();\n                if i != 0 {\n                    temp.push(grid[i - 1][j]);\n                }\n                if j != 0 {\n                    temp.push(grid[i][j - 1]);\n                }\n                if i != n - 1 {\n                    temp.push(grid[i + 1][j]);\n                }\n                if j != n - 1 {\n                    temp.push(grid[i][j + 1]);\n                }\n                min_val = temp.iter().min().unwrap().clone();\n            }\n        }\n    }\n    let mut result = Vec::new();\n    for i in 0..k {\n        result.push(if i % 2 == 0 { 1 } else { min_val });\n    }\n    result\n}\n",
            "pub fn tri(n: i32) -> Vec<i32> {\n    let mut seq = vec![1, 3];\n    for i in 2..=n {\n        if i % 2 == 0 {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i as usize - 1] + seq[i as usize - 2] + (i + 3) / 2);\n        }\n    }\n    seq\n}\n",
            "pub fn digits(n: i32) -> i32 {\n    let mut odds = Vec::new();\n    for d in n.to_string().chars() {\n        if d.to_digit(10).unwrap() % 2 == 1 {\n            odds.push(d.to_digit(10).unwrap());\n        }\n    }\n    if odds.len() > 0 {\n        odds.iter().product()\n    } else {\n        0\n    }\n}\n",
            "pub fn is_nested(s: &String) -> bool {\n    let mut open_idx = vec![];\n    let mut close_idx = vec![];\n    for (i, ch) in s.chars().enumerate() {\n        if ch == '[' {\n            open_idx.push(i);\n        } else if ch == ']' {\n            close_idx.push(i);\n        }\n    }\n    close_idx.reverse();\n    let mut cnt = 0;\n    let mut i = 0;\n    let l = close_idx.len();\n    for idx in open_idx {\n        if i < l && idx < close_idx[i] {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    cnt >= 2\n}\n",
            "pub fn sum_squares(lst: &Vec<f64>) -> i32 {\n    let mut result = 0;\n    for n in lst {\n        result += (n.ceil() as i32).pow(2);\n    }\n    result\n}\n",
            "pub fn check_if_last_char_is_a_letter(txt: &String) -> bool {\n    if txt.is_empty() {\n        return false;\n    }\n    let last = &txt[txt.rfind(' ').unwrap() + 1..];\n    last.len() == 1 && last.chars().next().unwrap().is_alphabetic()\n}\n",
            "pub fn can_arrange(arr: &Vec<i32>) -> i32 {\n    if arr.len() <= 1 {\n        return -1;\n    }\n    let mut idx = vec![];\n    for i in 1..arr.len() {\n        if arr[i] < arr[i-1] {\n            idx.push(i);\n        }\n    }\n    if idx.len() == 0 {\n        return -1;\n    }\n    idx[idx.len()-1] as i32\n}\n",
            "pub fn largest_smallest_integers(lst: &Vec<i32>) -> Vec<Option<i32>> {\n    let neg = lst.iter().filter(|&&x| x < 0).collect::<Vec<_>>();\n    let pos = lst.iter().filter(|&&x| x > 0).collect::<Vec<_>>();\n    let max_neg = neg.iter().max().cloned();\n    let min_pos = pos.iter().min().cloned();\n    vec![max_neg, min_pos]\n}\n",
            "pub fn compare_one(a: &Box<dyn Any>, b: &Box<dyn Any>) -> Option<f64> {\n    let a1 = any_to_real(a);\n    let b1 = any_to_real(b);\n    if a1 == b1 {\n        None\n    } else if a1 > b1 {\n        Some(a1)\n    } else {\n        Some(b1)\n    }\n}\nfn any_to_real(o: &Box<dyn Any>) -> f64 {\n    if let Some(s) = o.downcast_ref::<String>() {\n        s.replace(',', \".\").parse().unwrap()\n    } else if let Some(i) = o.downcast_ref::<i32>() {\n        *i as f64\n    } else if let Some(f) = o.downcast_ref::<f64>() {\n        *f\n    } else {\n        panic!(\"Type Error\")\n    }\n}\n",
            "pub fn is_equal_to_sum_even(n: i32) -> bool {\n    n % 2 == 0 && n >= 8\n}\n",
            "pub fn special_factorial(n: i32) -> i32 {\n    let mut fact = 1;\n    let mut result = 1;\n    for i in 1..=n {\n        fact *= i;\n        result *= fact;\n    }\n    result\n}\n",
            "pub fn fix_spaces(txt: &String) -> String {\n    let re = Regex::new(r\"\\s{3,}\").unwrap();\n    re.replace_all(txt, \"-\").replace(\" \", \"_\")\n}\n",
            "pub fn file_name_check(file_name: &String) -> String {\n    let suf = vec![\"txt\", \"exe\", \"dll\"];\n    let lst = file_name.split(\".\").collect::<Vec<&str>>();\n    if lst.len() != 2 || !suf.contains(&lst[1]) || lst[0].len() == 0 || !lst[0].chars().next().unwrap().is_alphabetic() || lst[0].chars().filter(|&c| c.is_digit(10)).count() > 3 {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()\n}\n",
            "pub fn sum_squares(lst: &Vec<i32>) -> i32 {\n    let mut result = 0;\n    for (i, e) in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            result += e * e;\n        } else if i % 4 == 0 {\n            result += e * e * e;\n        } else {\n            result += e;\n        }\n    }\n    result\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..((n as f64).sqrt() as i32 + 1) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn words_in_sentence(sentence: &String) -> String {\n    sentence.split(\" \").filter(|w| is_prime(w.len() as i32)).collect::<Vec<&str>>().join(\" \")\n}\n",
            "pub fn simplify(x: &String, n: &String) -> bool {\n    let xs: Vec<&str> = x.split(\"/\").collect();\n    let ns: Vec<&str> = n.split(\"/\").collect();\n    let num = xs[0].parse::<i32>().unwrap() * ns[0].parse::<i32>().unwrap();\n    let den = xs[1].parse::<i32>().unwrap() * ns[1].parse::<i32>().unwrap();\n    num % den == 0\n}\n",
            "pub fn digits_sum(n: i32) -> i32 {\n    let n_str = n.to_string();\n    if n >= 0 {\n        n_str.chars().map(|c| c.to_digit(10).unwrap()).sum()\n    } else {\n        let n_str = n_str.as_str();\n        let n_str = &n_str[2..];\n        let n_str = n_str.parse::<i32>().unwrap();\n        n_str * 2 + digits_sum(n_str.abs())\n    }\n}\npub fn order_by_points(nums: &Vec<i32>) -> Vec<i32> {\n    let mut nums = nums.clone();\n    nums.sort_by_key(|&n| digits_sum(n));\n    nums\n}\n",
            "pub fn special_filter(nums: &Vec<i32>) -> i32 {\n    let odds = \"13579\";\n    let mut result = 0;\n    for n in nums {\n        if *n > 10 && *n % 2 == 1 && odds.contains(&n.to_string()[0..1]) {\n            result += 1;\n        }\n    }\n    result\n}\n",
            "pub fn get_max_triples(n: i32) -> i32 {\n    let mut c = [0; 3];\n    for i in 1..=n {\n        let a = i*i - i + 1;\n        c[(a % 3) as usize] += 1;\n    }\n    let mut result = c[0] * c[1] * c[2];\n    for i in 0..3 {\n        result += c[i] * (c[i] - 1) * (c[i] - 2) / 6;\n    }\n    result\n}\n",
            "pub fn bf(planet1: &String, planet2: &String) -> Vec<String> {\n    let names = vec![\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let l = names.iter().position(|&x| x == *planet1).unwrap();\n    let r = names.iter().position(|&x| x == *planet2).unwrap();\n    if l > r {\n        let l = r;\n        let r = l;\n    }\n    if l == r {\n        return vec![];\n    }\n    names[l + 1..r].to_vec()\n}\n",
            "pub fn sorted_list_sum(lst: &Vec<String>) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in lst {\n        if s.len() % 2 == 0 {\n            result.push(s.clone());\n        }\n    }\n    result.sort_by(|a, b| {\n        if a.len() == b.len() {\n            a.cmp(b)\n        } else {\n            a.len().cmp(&b.len())\n        }\n    });\n    result\n}\n",
            "pub fn x_or_y(n: i32, x: i32, y: i32) -> i32 {\n    if n < 2 {\n        return y;\n    }\n    for i in 2..((n as f64).sqrt() as i32 + 1) {\n        if n % i == 0 {\n            return y;\n        }\n    }\n    x\n}\n",
            "pub fn double_the_difference(lst: &Vec<f64>) -> i32 {\n    let mut result = 0;\n    for n in lst {\n        if *n >= 0.0 && n.fract() == 0.5 {\n            result += (*n * *n) as i32;\n        }\n    }\n    result\n}\n",
            "pub fn compare(game: &Vec<i32>, guess: &Vec<i32>) -> Vec<i32> {\n    game.iter().zip(guess).map(|(x, y)| (x - y).abs()).collect()\n}\n",
            "pub fn strongest_extension(class_name: &String, extensions: &Vec<String>) -> String {\n    let mut max_s = std::f32::MIN;\n    let mut max_ext = \"\".to_string();\n    for ext in extensions {\n        let upper = ext.chars().filter(|c| c.is_uppercase()).count();\n        let lower = ext.chars().filter(|c| c.is_lowercase()).count();\n        let s = upper as f32 - lower as f32;\n        if s > max_s {\n            max_s = s;\n            max_ext = ext.clone();\n        }\n    }\n    format!(\"{}.{}\", class_name, max_ext)\n}\n",
            "pub fn cycpattern_check(a: &String, b: &String) -> bool {\n    if a.len() < b.len() {\n        return false;\n    }\n    for i in 0..b.len() {\n        if a.contains(&b[i..] + &b[..i]) {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn even_odd_count(num: i32) -> Vec<i32> {\n    let ds = num.abs().to_string();\n    let even = ds.chars().filter(|&d| d.is_digit(10) && d.to_digit(10) % 2 == 0).count();\n    vec![even, ds.len() - even]\n}\n",
            "pub fn int_to_mini_roman(num: i32) -> String {\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let mut res = Vec::new();\n    for i in 0..values.len() {\n        while num >= values[i] {\n            res.push(numerals[i]);\n            num -= values[i];\n        }\n    }\n    res.join(\"\")\n}\n",
            "pub fn right_angle_triangle(a: i32, b: i32, c: i32) -> bool {\n    let mut s = vec![a, b, c];\n    s.sort();\n    s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "pub fn find_max(words: &Vec<String>) -> String {\n    let mut max_cnt = 0;\n    let mut max_w = String::new();\n    for w in words {\n        let cnt = w.chars().collect::<HashSet<char>>().len();\n        if cnt > max_cnt {\n            max_cnt = cnt;\n            max_w = w.clone();\n        } else if cnt == max_cnt {\n            max_w = min(max_w, w);\n        }\n    }\n    max_w\n}\n",
            "pub fn eat(num: i32, need: i32, remaining: i32) -> Vec<i32> {\n    if need <= remaining {\n        vec![num + need, remaining - need]\n    } else {\n        vec![num + remaining, 0]\n    }\n}\n",
            "pub fn do_algebra(operators: &Vec<String>, operands: &Vec<i32>) -> i32 {\n    let mut ops = operators.clone();\n    let mut nums = operands.clone();\n    let mut i = ops.len() - 1;\n    while i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = nums[i].pow(nums[i + 1] as u32);\n            nums.remove(i + 1);\n            ops.remove(i);\n        }\n        i -= 1;\n    }\n    let mut i = 0;\n    while i < ops.len() {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    let mut i = 0;\n    while i < ops.len() {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    nums[0]\n}\n",
            "pub fn solve(s: &String) -> String {\n    if !s.contains(char::is_alphabetic) {\n        return reverse(s)\n    }\n    let mut result = Vec::new();\n    for ch in s.chars() {\n        if !ch.is_alphabetic() {\n            result.push(ch);\n        } else if ch.is_uppercase() {\n            result.push(ch.to_lowercase().next().unwrap());\n        } else if ch.is_lowercase() {\n            result.push(ch.to_uppercase().next().unwrap());\n        }\n    }\n    result.into_iter().collect()\n}\npub fn reverse(s: &String) -> String {\n    let mut result = Vec::new();\n    for ch in s.chars().rev() {\n        result.push(ch);\n    }\n    result.into_iter().collect()\n}\n",
            "pub fn string_to_md5(txt: &String) -> Option<String> {\n    if txt.len() == 0 {\n        return None;\n    }\n    let mut md5_hash = Md5::new();\n    md5_hash.update(txt.as_bytes());\n    let md5_encoded = md5_hash.finalize();\n    let md5_encoded_str = format!(\"{:x}\", md5_encoded);\n    Some(md5_encoded_str)\n}\n",
            "pub fn generate_integers(a: i32, b: i32) -> Vec<i32> {\n    let lower = max(2, min(a, b));\n    let upper = min(8, max(a, b));\n    let mut result = Vec::new();\n    for i in lower..=upper {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n"
        ],
        "scala": [
            "def hasCloseElements(numbers: Seq[Double], threshold: Double): Boolean = {\n    val set = mutable.Set[Double]()\n    for (n <- numbers) {\n        if (set.exists(x => math.abs(x - n) < threshold)) {\n            return true\n        }\n        set.add(n)\n    }\n    false\n}\n",
            "def separateParenGroups(parenString: String): Seq[String] = {\n    val groups = mutable.ListBuffer[String]()\n    var stk = mutable.ListBuffer[Char]()\n    var currentGroup = \"\"\n    val parens = parenString.replace(\" \", \"\")\n    for (ch <- parens) {\n        if (ch == '(') {\n            stk += ch\n            currentGroup += ch\n        } else if (ch == ')') {\n            stk = stk.dropRight(1)\n            currentGroup += ch\n            if (stk.isEmpty) {\n                groups += currentGroup\n                currentGroup = \"\"\n            }\n        }\n    }\n    groups.toList\n}\n",
            "def truncateNumber(num: Double): Double = {\n    num - floor(num)\n}\n",
            "def belowZero(operations: Seq[Int]): Boolean = {\n    var balance = 0\n    for (op <- operations) {\n        balance += op\n        if (balance < 0) {\n            return true\n        }\n    }\n    false\n}\n",
            "def meanAbsoluteDeviation(numbers: Seq[Double]): Double = {\n    val mean = numbers.sum / numbers.length\n    numbers.map(n => math.abs(n - mean)).sum / numbers.length\n}\n",
            "def intersperse(numbers: Seq[Int], delimiter: Int): Seq[Int] = {\n    numbers.flatMap(e => Seq(delimiter, e)).drop(1)\n}\n",
            "def parseNestedParens(parenString: String): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    for (group <- parenString.split(\" \")) {\n        var maxDepth = 0\n        var depth = 0\n        for (ch <- group) {\n            if (ch == '(') {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if (ch == ')') {\n                depth -= 1\n            }\n        }\n        result += maxDepth\n    }\n    result.toList\n}\n",
            "def filterBySubstring(strs: Seq[String], substring: String): Seq[String] = {\n    strs.filter(_.contains(substring))\n}\n",
            "def sumProduct(numbers: Seq[Int]): Seq[Int] = {\n    var nSum = 0\n    for (n <- numbers) {\n        nSum += n\n    }\n    var nProduct = 1\n    for (n <- numbers) {\n        nProduct *= n\n    }\n    Seq(nSum, nProduct)\n}\n",
            "def rollingMax(numbers: Seq[Int]): Seq[Int] = {\n    var maxSoFar = Int.MinValue\n    var result = mutable.ListBuffer[Int]()\n    for (num <- numbers) {\n        maxSoFar = maxSoFar max num\n        result += maxSoFar\n    }\n    result.toList\n}\n",
            "def isPalindrome(s: String): Boolean = {\n    s == reverse(s)\n}\ndef makePalindrome(s: String): String = {\n    if (isPalindrome(s)) s else {\n        for (i <- 0 until s.length) {\n            if (isPalindrome(s.substring(i))) {\n                return s + reverse(s.substring(0, i))\n            }\n        }\n        \"\"\n    }\n}\ndef reverse(s: String): String = {\n    val runes = s.toArray\n    for (i <- 0 until runes.length / 2) {\n        val tmp = runes(i)\n        runes(i) = runes(runes.length - 1 - i)\n        runes(runes.length - 1 - i) = tmp\n    }\n    new String(runes)\n}\n",
            "def stringXor(a: String, b: String): String = {\n    val result = new StringBuilder()\n    for (i <- 0 until a.length) {\n        if (a(i) == b(i)) {\n            result.append(\"0\")\n        } else {\n            result.append(\"1\")\n        }\n    }\n    result.toString\n}\n",
            "def longest(strs: Seq[String]): Option[String] = {\n    if (strs.isEmpty) None else Some(strs.maxBy(_.length))\n}\n",
            "def greatestCommonDivisor(a: Int, b: Int): Int = {\n    if (b == 0) a else greatestCommonDivisor(b, a % b)\n}\n",
            "def allPrefixes(s: String): Seq[String] = {\n    (0 until s.length).map(i => s.substring(0, i + 1))\n}\n",
            "def stringSequence(n: Int): String = {\n    (0 to n).map(_.toString).mkString(\" \")\n}\n",
            "def countDistinctCharacters(s: String): Int = {\n    s.toLowerCase.toSet.size\n}\n",
            "def parseMusic(musicString: String): Seq[Int] = {\n    val durations = Map(\"o\" -> 4, \"o|\" -> 2, \".|\" -> 1)\n    musicString.split(\" \").map(durations)\n}\n",
            "def howManyTimes(s: String, substring: String): Int = {\n    var times = 0\n    for (i <- 0 until s.length - substring.length + 1) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1\n        }\n    }\n    times\n}\n",
            "def sortNumbers(numbers: String): String = {\n    val numDict = Map(\n        \"zero\" -> 0,\n        \"one\" -> 1,\n        \"two\" -> 2,\n        \"three\" -> 3,\n        \"four\" -> 4,\n        \"five\" -> 5,\n        \"six\" -> 6,\n        \"seven\" -> 7,\n        \"eight\" -> 8,\n        \"nine\" -> 9\n    )\n    val numList = numbers.split(\" \").filter(numDict.contains).toList\n    numList.sortWith((a, b) => numDict(a) < numDict(b))\n    numList.mkString(\" \")\n}\n",
            "def findClosestElements(numbers: Seq[Double]): Seq[Double] = {\n    val sortedNumbers = numbers.sorted\n    var minDiff = Double.PositiveInfinity\n    var closestPair = Seq[Double]()\n    for (i <- 1 until sortedNumbers.length) {\n        val diff = sortedNumbers(i) - sortedNumbers(i - 1)\n        if (diff < minDiff) {\n            minDiff = diff\n            closestPair = Seq(sortedNumbers(i - 1), sortedNumbers(i))\n        }\n    }\n    closestPair\n}\n",
            "def rescaleToUnit(numbers: Seq[Double]): Seq[Double] = {\n    var minNum = Double.MaxValue\n    var maxNum = -Double.MaxValue\n    for (num <- numbers) {\n        if (num < minNum) minNum = num\n        if (num > maxNum) maxNum = num\n    }\n    if (minNum == maxNum) return Seq.fill(numbers.size)(0.0)\n    for (num <- numbers) yield (num - minNum) / (maxNum - minNum)\n}\n",
            "def filterIntegers(values: Seq[Any]): Seq[Int] = {\n    values.collect { case x: Int => x }\n}\n",
            "def strLength(s: String): Int = {\n    s.length\n}\n",
            "def largestDivisor(n: Int): Int = {\n    for (i <- 2 until n) {\n        if (n % i == 0) return n / i\n    }\n    1\n}\n",
            "def factorize(n: Int): Seq[Int] = {\n    var factors = Seq[Int]()\n    var divisor = 2\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors = factors :+ divisor\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    factors\n}\n",
            "def removeDuplicates(numbers: Seq[Int]): Seq[Int] = {\n    val counts = mutable.Map[Int, Int]()\n    for (num <- numbers) {\n        counts(num) = counts.getOrElse(num, 0) + 1\n    }\n    val res = mutable.ListBuffer[Int]()\n    for (num <- numbers) {\n        if (counts(num) == 1) {\n            res += num\n        }\n    }\n    res.toList\n}\n",
            "def flipCase(s: String): String = {\n    val flipped = mutable.ListBuffer[Char]()\n    for (ch <- s) {\n        if (!ch.isLetter) {\n            flipped += ch\n        } else if (ch.isLower) {\n            flipped += ch.toUpper\n        } else if (ch.isUpper) {\n            flipped += ch.toLower\n        }\n    }\n    flipped.mkString\n}\n",
            "def concatenate(strs: Seq[String]): String = {\n    strs.mkString\n}\n",
            "def filterByPrefix(strs: Seq[String], prefixStr: String): Seq[String] = {\n    strs.filter(_.startsWith(prefixStr))\n}\n",
            "def getPositive(l: Seq[Int]): Seq[Int] = {\n    l.filter(_ > 0)\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) false else {\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return false\n        }\n        true\n    }\n}\n",
            "def poly(xs: Seq[Int], x: Double): Double = {\n    var res = 0.0\n    for (i <- xs.indices) {\n        res += xs(i) * pow(x, i)\n    }\n    res\n}\ndef findZero(xs: Seq[Int]): Double = {\n    var x1, x2 = 1.0\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2\n        x2 *= 2\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        val mid = (x1 + x2) / 2\n        if (poly(xs, mid) == 0) return mid\n        else if (poly(xs, mid) * poly(xs, x1) < 0) x2 = mid\n        else x1 = mid\n    }\n    (x1 + x2) / 2\n}\n",
            "def sortThird(l: Seq[Int]): Seq[Int] = {\n    val sortedThird = l.filter(_ % 3 == 0).sorted\n    l.zipWithIndex.map { case (e, i) =>\n        if (i % 3 == 0) sortedThird(i / 3) else e\n    }\n}\n",
            "def listUnique(l: Seq[Int]): Seq[Int] = {\n    val m = mutable.Map[Int, Boolean]()\n    for (e <- l) {\n        m(e) = true\n    }\n    val result = mutable.ListBuffer[Int]()\n    for (k <- m.keys) {\n        result += k\n    }\n    result.toList.sorted\n}\n",
            "def maxElement(l: Seq[Int]): Int = {\n    if (l.isEmpty) 0 else l.max\n}\n",
            "def fizzBuzz(n: Int): Int = {\n    var cnt = 0\n    for (i <- 0 until n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString.count(_ == '7')\n        }\n    }\n    cnt\n}\n",
            "def sortEven(l: Seq[Int]): Seq[Int] = {\n    val sortedEven = l.zipWithIndex.filter(_._2 % 2 == 0).sortBy(_._1).map(_._1)\n    l.zipWithIndex.map { case (e, i) => if (i % 2 == 0) sortedEven(i / 2) else e }\n}\n",
            "def encodeCyclic(s: String): String = {\n    val result = mutable.ListBuffer[String]()\n    for (i <- 0 until s.length by 3) {\n        if (i + 3 > s.length) {\n            result += s.substring(i)\n        } else {\n            result += s.substring(i + 1, i + 3)\n            result += s.substring(i, i + 1)\n        }\n    }\n    result.mkString(\"\")\n}\ndef decodeCyclic(s: String): String = {\n    encodeCyclic(encodeCyclic(s))\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) false else {\n        for (i <- 2 to math.sqrt(n).toInt) {\n            if (n % i == 0) return false\n        }\n        true\n    }\n}\ndef primeFib(n: Int): Int = {\n    var f = Array(0, 1)\n    var cnt = 0\n    while (cnt < n) {\n        f = Array(f(1), f(0) + f(1))\n        if (isPrime(f(1))) cnt += 1\n    }\n    f(1)\n}\n",
            "def triplesSumToZero(l: Seq[Int]): Boolean = {\n    for (i <- 0 until l.size) {\n        for (j <- (i + 1) until l.size) {\n            for (k <- (j + 1) until l.size) {\n                if (l(i) + l(j) + l(k) == 0) {\n                    return true\n                }\n            }\n        }\n    }\n    false\n}\n",
            "def carRaceCollision(n: Int): Int = {\n    n * n\n}\n",
            "def incrList(l: Seq[Int]): Seq[Int] = {\n    l.map(_ + 1)\n}\n",
            "def pairsSumToZero(l: Seq[Int]): Boolean = {\n    val seen = mutable.Map[Int, Boolean]()\n    for (num <- l) {\n        if (seen.contains(-num)) {\n            return true\n        }\n        seen.addOne(num, true)\n    }\n    false\n}\n",
            "def changeBase(x: Int, bas: Int): String = {\n    if (x == 0) return \"0\"\n    val digits = mutable.ListBuffer[String]()\n    var x_ = x\n    while (x_ > 0) {\n        digits += (x_ % bas).toString\n        x_ /= bas\n    }\n    digits.reverse.mkString\n}\n",
            "def triangleArea(a: Int, h: Int): Double = {\n    a.toDouble * h.toDouble / 2\n}\n",
            "def fib4(n: Int): Int = {\n    var fib = Array(0, 0, 2, 0)\n    for (i <- 4 until n + 1) {\n        fib(i % 4) = fib.sum\n    }\n    fib(n % 4)\n}\n",
            "def median(l: Seq[Double]): Double = {\n    val sl = l.sorted\n    if (sl.size % 2 != 0) sl(sl.size / 2) else (sl(sl.size / 2) + sl(sl.size / 2 - 1)) / 2\n}\n",
            "def isPalindrome(txt: String): Boolean = {\n    txt == txt.reverse\n}\n",
            "def modp(n: Int, p: Int): Int = {\n    var ret = 1\n    for (i <- 0 until n) {\n        ret = (ret * 2) % p\n    }\n    ret\n}\n",
            "def encodeShift(s: String): String = {\n    s.map(ch => ((ch - 'a' + 5) % 26 + 'a').toChar)\n}\ndef decodeShift(s: String): String = {\n    s.map(ch => ((ch - 'a' + 21) % 26 + 'a').toChar)\n}\n",
            "def removeVowels(txt: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    txt.filter(c => !vowels.contains(c))\n}\n",
            "def belowThreshold(l: Seq[Int], t: Int): Boolean = {\n    l.forall(_ < t)\n}\n",
            "def add(x: Int, y: Int): Int = {\n    x + y\n}\n",
            "def sameChars(s0: String, s1: String): Boolean = {\n    s0.toSet == s1.toSet\n}\n",
            "def fib(n: Int): Int = {\n    @tailrec\n    def loop(n: Int, a: Int, b: Int): Int = {\n        if (n == 0) a else loop(n - 1, b, a + b)\n    }\n    loop(n, 0, 1)\n}\n",
            "def correctBracketing(brackets: String): Boolean = {\n    var depth = 0\n    for (b <- brackets) {\n        if (b == '<') {\n            depth += 1\n        } else if (b == '>') {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    depth == 0\n}\n",
            "def monotonic(l: Seq[Int]): Boolean = {\n    val diff = l.zip(l.tail).map(x => x._2 - x._1)\n    diff.forall(_ <= 0) || diff.forall(_ >= 0)\n}\n",
            "def common(l1: Seq[Int], l2: Seq[Int]): Seq[Int] = {\n    (l1.toSet & l2.toSet).toSeq.sorted\n}\n",
            "def largestPrimeFactor(n: Int): Int = {\n    var i = 2\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i\n        } else {\n            i += 1\n        }\n    }\n    n\n}\n",
            "def sumToN(n: Int): Int = {\n    var result = 0\n    for (i <- 0 to n) {\n        result += i\n    }\n    result\n}\n",
            "def correctBracketing(brackets: String): Boolean = {\n    var depth = 0\n    for (b <- brackets) {\n        if (b == '(') {\n            depth += 1\n        } else if (b == ')') {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    depth == 0\n}\n",
            "def derivative(xs: Seq[Int]): Seq[Int] = {\n    xs.zipWithIndex.map { case (x, i) => x * i }\n}\n",
            "def fibfib(n: Int): Int = {\n    var a = 0\n    var b = 0\n    var c = 1\n    while (n > 2) {\n        a = b\n        b = c\n        c = a + b + c\n        n -= 1\n    }\n    c\n}\n",
            "def vowelsCount(s: String): Int = {\n    val vowels = \"aeiou\"\n    var cnt = 0\n    for (i <- 0 until s.length) {\n        if (vowels.contains(s(i).toLower) || (i == s.length - 1 && s(i).toLower == 'y')) {\n            cnt += 1\n        }\n    }\n    cnt\n}\n",
            "def circularShift(x: Int, shift: Int): String = {\n    val xStr = x.toString\n    if (shift > xStr.length) xStr.reverse else xStr.takeRight(shift) + xStr.dropRight(shift)\n}\n",
            "def digitSum(s: String): Int = {\n    var result = 0\n    for (c <- s) {\n        if (c.isUpper) {\n            result += c.toInt\n        }\n    }\n    result\n}\n",
            "def fruitDistribution(s: String, n: Int): Int = {\n    val words = s.split(\" \")\n    val apples = words(words.indexOf(\"apples\") - 1).toInt\n    val oranges = words(words.indexOf(\"oranges\") - 1).toInt\n    n - apples - oranges\n}\n",
            "def pluck(arr: Seq[Int]): Seq[Int] = {\n    val evens = arr.filter(_ % 2 == 0)\n    if (evens.isEmpty) {\n        return Seq.empty\n    }\n    val minEven = evens.min\n    val index = arr.indexOf(minEven)\n    Seq(minEven, index)\n}\n",
            "def search(lst: Seq[Int]): Int = {\n    val freqs = mutable.Map[Int, Int]()\n    for (n <- lst) {\n        freqs(n) = freqs.getOrElse(n, 0) + 1\n    }\n    val goodVals = mutable.ListBuffer[Int]()\n    for ((k, v) <- freqs) {\n        if (v >= k) {\n            goodVals += k\n        }\n    }\n    if (goodVals.isEmpty) {\n        -1\n    } else {\n        goodVals.max\n    }\n}\n",
            "def strangeSortList(lst: Seq[Int]): Seq[Int] = {\n    val sl = lst.sorted\n    val result = mutable.ListBuffer[Int]()\n    var left, right = 0\n    while (left <= right) {\n        result += sl(left)\n        left += 1\n        if (left <= right) {\n            result += sl(right)\n            right -= 1\n        }\n    }\n    result.toList\n}\n",
            "def triangleArea(a: Int, b: Int, c: Int): Double = {\n    if (a + b > c && a + c > b && b + c > a) {\n        val s = (a + b + c) / 2.0\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    }\n    return -1.0\n}\n",
            "def willItFly(q: Seq[Int], w: Int): Boolean = {\n    if (q.isEmpty) false else {\n        val isPalin = q.zip(q.reverse).forall(p => p._1 == p._2)\n        val total = q.sum\n        isPalin && total <= w\n    }\n}\n",
            "def smallestChange(arr: Seq[Int]): Int = {\n    var ans = 0\n    for (i <- 0 until arr.length/2) {\n        if (arr(i) != arr(arr.length-i-1)) {\n            ans += 1\n        }\n    }\n    ans\n}\n",
            "def totalMatch(lst1: Seq[String], lst2: Seq[String]): Seq[String] = {\n    val cnt1 = lst1.map(_.length).sum\n    val cnt2 = lst2.map(_.length).sum\n    if (cnt1 <= cnt2) lst1 else lst2\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) false else {\n        for (i <- 2 to math.sqrt(n).toInt) {\n            if (n % i == 0) return false\n        }\n        true\n    }\n}\ndef isMultiplyPrime(a: Int): Boolean = {\n    var cnt = 0\n    for (i <- 2 to a) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    cnt == 3\n}\n",
            "def isSimplePower(x: Int, n: Int): Boolean = {\n    if (n < 2) return x == n\n    var tmp = 1\n    while (tmp < x) {\n        tmp *= n\n    }\n    tmp == x\n}\n",
            "def isCube(a: Int): Boolean = {\n    val a = math.abs(a)\n    val root = round(pow(a, 1.0 / 3.0))\n    root * root * root == a\n}\n",
            "def hexKey(num: String): Int = {\n    var result = 0\n    for (x <- num) {\n        if (x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D') {\n            result += 1\n        }\n    }\n    result\n}\n",
            "def decimalToBinary(dec: Int): String = {\n    val binary = dec.toBinaryString\n    s\"db$binary\"\n}\n",
            "def isHappy(s: String): Boolean = {\n    if (s.length < 3) return false\n    for (i <- 0 until s.length - 2) {\n        if (s(i) == s(i + 1) || s(i) == s(i + 2) || s(i + 1) == s(i + 2)) {\n            return false\n        }\n    }\n    true\n}\n",
            "def numericalLetterGrade(grades: Seq[Double]): Seq[String] = {\n    grades.map {\n        case g if g == 4.0 => \"A+\"\n        case g if g > 3.7 => \"A\"\n        case g if g > 3.3 => \"A-\"\n        case g if g > 3.0 => \"B+\"\n        case g if g > 2.7 => \"B\"\n        case g if g > 2.3 => \"B-\"\n        case g if g > 2.0 => \"C+\"\n        case g if g > 1.7 => \"C\"\n        case g if g > 1.3 => \"C-\"\n        case g if g > 1.0 => \"D+\"\n        case g if g > 0.7 => \"D\"\n        case g if g > 0.0 => \"D-\"\n        case _ => \"E\"\n    }\n}\n",
            "def primeLength(s: String): Boolean = {\n    val length = s.length\n    if (length < 2) return false\n    for (i <- 2 to math.sqrt(length).toInt) {\n        if (length % i == 0) return false\n    }\n    true\n}\n",
            "def startsOneEnds(n: Int): Int = {\n    if (n == 1) 1 else 2 * 9 * math.pow(10, n - 2).toInt\n}\n",
            "def solve(n: Int): String = {\n    val digitsSum = n.toString.map(_.asDigit).sum\n    digitsSum.toBinaryString\n}\n",
            "def add(lst: Seq[Int]): Int = {\n    var result = 0\n    for (i <- lst.indices) {\n        if (i % 2 == 1 && lst(i) % 2 == 0) {\n            result += lst(i)\n        }\n    }\n    result\n}\n",
            "def antiShuffle(s: String): String = {\n    val words = s.split(\" \").map(_.toSeq.sorted.mkString)\n    words.mkString(\" \")\n}\n",
            "def getRow(lst: Seq[Seq[Int]], x: Int): Seq[Seq[Int]] = {\n    val coords = mutable.ListBuffer[Seq[Int]]()\n    for (i <- lst.indices) {\n        for (j <- lst(i).indices) {\n            if (lst(i)(j) == x) {\n                coords += Seq(i, j)\n            }\n        }\n    }\n    coords.sortWith((a, b) => a(0) < b(0) || (a(0) == b(0) && a(1) > b(1)))\n    coords.toList\n}\n",
            "def sortArray(arr: Seq[Int]): Seq[Int] = {\n    if (arr.isEmpty) return Seq.empty\n    if ((arr.head + arr.last) % 2 == 0) arr.reverse else arr.sorted\n}\n",
            "def encrypt(s: String): String = {\n    val result = mutable.ListBuffer[Byte]()\n    for (ch <- s) {\n        val shifted = ch + 4\n        if (shifted > 'z') {\n            result += (shifted - 26).toByte\n        } else {\n            result += shifted.toByte\n        }\n    }\n    result.map(_.toChar).mkString\n}\n",
            "def nextSmallest(lst: Seq[Int]): Option[Int] = {\n    val sl = lst.distinct.sorted\n    if (sl.size < 2) None else Some(sl(1))\n}\n",
            "def isBored(s: String): Int = {\n    val sentences = new Regex(\"[.!?]\\\\s*\").split(s).toList\n    var result = 0\n    for (sentence <- sentences) {\n        if (sentence.length >= 2 && sentence.substring(0, 2) == \"I \") {\n            result += 1\n        }\n    }\n    result\n}\n",
            "def anyInt(x: Any, y: Any, z: Any): Boolean = {\n    x match {\n        case x: Int =>\n            y match {\n                case y: Int =>\n                    z match {\n                        case z: Int =>\n                            (x + y == z) || (x + z == y) || (y + z == x)\n                        case _ => false\n                    }\n                case _ => false\n            }\n        case _ => false\n    }\n}\n",
            "def encode(message: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    val result = message.map {\n        case ch if ch.isLetter =>\n            val ch1 = if (ch.isLower) ch.toUpper else ch.toLower\n            if (vowels.contains(ch1)) (ch1.toInt + 2).toChar else ch1\n        case ch => ch\n    }\n    result.mkString\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) false else {\n        val sqrt = math.sqrt(n).toInt\n        !(2 to sqrt).exists(n % _ == 0)\n    }\n}\ndef skjkasdkd(lst: Seq[Int]): Int = {\n    val primes = lst.filter(isPrime)\n    if (primes.isEmpty) 0 else {\n        val largest = primes.max.toString\n        largest.map(_.asDigit).sum\n    }\n}\n",
            "def checkDictCase(d: Map[String, String]): Boolean = {\n    if (d.isEmpty) return false\n    val keys = d.keys\n    keys.forall(_.forall(_.isLower)) || keys.forall(_.forall(_.isUpper))\n}\n",
            "def countUpTo(n: Int): Seq[Int] = {\n    var primes = Seq[Int]()\n    for (num <- 2 until n) {\n        if (primes.forall(p => num % p != 0)) {\n            primes = primes :+ num\n        }\n    }\n    primes\n}\n",
            "def multiply(a: Int, b: Int): Int = {\n    (math.abs(a) % 10) * (math.abs(b) % 10)\n}\n",
            "def countUpper(s: String): Int = {\n    val vowels = \"AEIOU\"\n    var result = 0\n    for (i <- 0 until s.length) {\n        if (i % 2 == 0 && vowels.contains(s(i))) {\n            result += 1\n        }\n    }\n    result\n}\n",
            "def closestInteger(value: String): Int = {\n    val num = value.toDouble\n    if (num >= 0) num.toInt + 0.5 else num.toInt - 0.5\n}\n",
            "def makeAPile(n: Int): Seq[Int] = {\n    (0 until n).map(i => n + 2 * i)\n}\n",
            "def wordsString(s: String): Seq[String] = {\n    val regex = new Regex(\", | \")\n    regex.split(s).filter(_.length > 0)\n}\n",
            "def chooseNum(x: Int, y: Int): Int = {\n    if (x > y) -1 else if (y % 2 == 0) y else if (x != y) y - 1 else -1\n}\n",
            "def roundedAvg(n: Int, m: Int): Option[String] = {\n    if (n > m) return None\n    val rAvg = (m + n) / 2.0 + 0.5\n    Some(Integer.toBinaryString(rAvg.toInt).drop(2))\n}\n",
            "def allDigitsOdd(s: String): Boolean = {\n    s.forall(_.isDigit && _.asDigit % 2 == 1)\n}\ndef uniqueDigits(x: Seq[Int]): Seq[Int] = {\n    x.filter(allDigitsOdd(_.toString)).sorted\n}\n",
            "def byLength(arr: Seq[Int]): Seq[String] = {\n    val digitNames = Seq(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    val sortedArr = arr.filter(x => 1 <= x && x <= 9).sorted.reverse\n    sortedArr.map(x => digitNames(x - 1))\n}\n",
            "def f(n: Int): Seq[Int] = {\n    val nums = (1 to n).toList\n    nums.map { i =>\n        if (i % 2 != 0) nums.take(i).sum else nums.take(i).reduce(_ * _)\n    }\n}\n",
            "def isPalindrome(txt: String): Boolean = {\n    txt == txt.reverse\n}\ndef evenOddPalindrome(n: Int): Seq[Int] = {\n    val cnt = Array.fill(2)(0)\n    for (i <- 1 to n) {\n        if (isPalindrome(i.toString)) {\n            cnt(i % 2) += 1\n        }\n    }\n    cnt.toSeq\n}\n",
            "def digitsSum(n: Int): Int = {\n    val nStr = n.toString\n    if (n >= 0) nStr.map(_.asDigit).sum else nStr.take(2).toInt * 2 + digitsSum(n.abs)\n}\ndef countNums(arr: Seq[Int]): Int = {\n    arr.count(digitsSum(_) > 0)\n}\n",
            "def moveOneBall(arr: Seq[Int]): Boolean = {\n    if (arr.isEmpty) true else {\n        val sortedArr = arr.sorted\n        for (i <- 0 until arr.length) {\n            if (arr.slice(i, arr.length) == sortedArr.slice(0, arr.length - i) && arr.slice(0, i) == sortedArr.slice(arr.length - i, arr.length)) {\n                return true\n            }\n        }\n        false\n    }\n}\n",
            "def canExchange(lst1: Seq[Int], lst2: Seq[Int]): String = {\n    var oddCnt = 0\n    var evenCnt = 0\n    for (num <- lst1) {\n        if (num % 2 != 0) {\n            oddCnt += 1\n        }\n    }\n    for (num <- lst2) {\n        if (num % 2 == 0) {\n            evenCnt += 1\n        }\n    }\n    if (evenCnt >= oddCnt) \"YES\" else \"NO\"\n}\n",
            "def histogram(test: String): Map[String,Int] = {\n    val freq = mutable.Map[String,Int]()\n    val words = test.split(\" \").filter(_.length > 0)\n    for (w <- words) {\n        freq(w) = freq.getOrElse(w, 0) + 1\n    }\n    val result = mutable.Map[String,Int]()\n    if (freq.size > 0) {\n        val maxFreq = freq.values.max\n        for (k <- freq.keys) {\n            if (freq(k) == maxFreq) {\n                result(k) = maxFreq\n            }\n        }\n    }\n    result.toMap\n}\n",
            "def reverseDelete(s: String, c: String): Seq[String] = {\n    val s1 = s.filterNot(c.contains(_))\n    Seq(s1, if (s1.reverse == s1) \"yes\" else \"no\")\n}\n",
            "def oddCount(lst: Seq[String]): Seq[String] = {\n    val result = mutable.ListBuffer[String]()\n    for (num <- lst) {\n        val n = num.map(d => d.toInt % 2 == 1).sum\n        val rs = \"the number of odd elements in the string i of the input.\"\n        result += rs.replace(\"i\", n.toString)\n    }\n    result.toList\n}\n",
            "def minSubArraySum(nums: Seq[Int]): Int = {\n    var minSum = 0\n    var curSum = 0\n    for (n <- nums) {\n        curSum = math.min(curSum + n, 0)\n        minSum = math.min(curSum, minSum)\n    }\n    if (minSum == 0) minSum = nums.min\n    minSum\n}\n",
            "def maxFill(grid: Seq[Seq[Int]], capacity: Int): Int = {\n    grid.map(_.sum / capacity).map(ceil).sum\n}\n",
            "def countOnes(num: Int): Int = {\n    num.toBinaryString.count(_ == '1')\n}\ndef sortArray(arr: Seq[Int]): Seq[Int] = {\n    arr.sortBy(x => (countOnes(x), x))\n}\n",
            "def selectWords(s: String, n: Int): Seq[String] = {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\"\n    val words = s.split(\" \")\n    val result = mutable.ListBuffer[String]()\n    for (w <- words) {\n        if (w.length > 0) {\n            var consonantCount = 0\n            for (c <- w) {\n                if (consonants.contains(c.toLower)) {\n                    consonantCount += 1\n                }\n            }\n            if (consonantCount == n) {\n                result += w\n            }\n        }\n    }\n    result.toList\n}\n",
            "def getClosestVowel(word: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    for (i <- word.length - 2 to 1 by -1) {\n        if (vowels.contains(word(i)) && !vowels.contains(word(i - 1)) && !vowels.contains(word(i + 1)) {\n            return word(i).toString\n        }\n    }\n    \"\"\n}\n",
            "def check(s: String): Boolean = {\n    var depth = 0\n    for (ch <- s) {\n        if (ch == '(') {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    depth == 0\n}\ndef matchParens(lst: Seq[String]): String = {\n    val s1 = lst(0) + lst(1)\n    val s2 = lst(1) + lst(0)\n    if (check(s1) || check(s2)) \"Yes\" else \"No\"\n}\n",
            "def maximum(arr: Seq[Int], k: Int): Seq[Int] = {\n    if (k == 0) return Seq.empty[Int]\n    arr.sorted.takeRight(k)\n}\n",
            "def solution(lst: Seq[Int]): Int = {\n    var result = 0\n    for (i <- lst.indices) {\n        if (i % 2 == 0 && lst(i) % 2 != 0) {\n            result += lst(i)\n        }\n    }\n    result\n}\n",
            "def addElements(arr: Seq[Int], k: Int): Int = {\n    var result = 0\n    for (n <- arr.take(k)) {\n        if (n.toString.length <= 2) {\n            result += n\n        }\n    }\n    result\n}\n",
            "def getOddCollatz(n: Int): Seq[Int] = {\n    var collatz = Seq(1)\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz = collatz :+ n\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    collatz.sorted\n}\n",
            "def validDate(date: String): Boolean = {\n    if (date.length != 10 || date(2) != '-' || date(5) != '-') {\n        return false\n    }\n    val m = date.substring(0, 2).toInt\n    val d = date.substring(3, 5).toInt\n    if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n        if (d >= 1 && d <= 31) {\n            return true\n        }\n    }\n    if (m == 4 || m == 6 || m == 9 || m == 11) {\n        if (d >= 1 && d <= 30) {\n            return true\n        }\n    }\n    if (m == 2) {\n        if (d >= 1 && d <= 29) {\n            return true\n        }\n    }\n    false\n}\n",
            "def splitWords(txt: String): Seq[String] = {\n    if (txt.contains(\" \")) {\n        txt.split(\" \")\n    } else if (txt.contains(\",\")) {\n        txt.split(\",\")\n    } else {\n        val result = mutable.ListBuffer[String]()\n        for (c <- txt) {\n            if (c.isLower && c.toInt % 2 == 0) {\n                result += c.toString\n            }\n        }\n        Seq(result.size.toString)\n    }\n}\n",
            "def isSorted(lst: Seq[Int]): Boolean = {\n    if (!lst.sliding(2).forall(pair => pair(0) <= pair(1))) {\n        return false\n    }\n    val freq = mutable.Map[Int, Int]()\n    for (i <- lst) {\n        freq(i) = freq.getOrElse(i, 0) + 1\n    }\n    return freq.values.max <= 2\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) false else (2 until math.sqrt(n).toInt + 1).forall(n % _ != 0)\n}\ndef intersection(interval1: Seq[Int], interval2: Seq[Int]): String = {\n    val l = math.max(interval1(0), interval2(0))\n    val r = math.min(interval1(1), interval2(1))\n    val length = r - l\n    if (length > 0 && isPrime(length)) \"YES\" else \"NO\"\n}\n",
            "def prodSigns(arr: Seq[Int]): Option[Int] = {\n    if (arr.isEmpty) None\n    else {\n        val sign = if (arr.count(_ < 0) % 2 == 1) -1 else 1\n        Some(sign * arr.map(math.abs).sum)\n    }\n}\n",
            "def minPath(grid: Seq[Seq[Int]], k: Int): Seq[Int] = {\n    val n = grid.length\n    var minVal = n * n + 1\n    for (i <- 0 until n) {\n        for (j <- 0 until n) {\n            if (grid(i)(j) == 1) {\n                val temp = mutable.ListBuffer[Int]()\n                if (i != 0) {\n                    temp.addOne(grid(i - 1)(j))\n                }\n                if (j != 0) {\n                    temp.addOne(grid(i)(j - 1))\n                }\n                if (i != n - 1) {\n                    temp.addOne(grid(i + 1)(j))\n                }\n                if (j != n - 1) {\n                    temp.addOne(grid(i)(j + 1))\n                }\n                minVal = temp.min\n            }\n        }\n    }\n    val result = mutable.ListBuffer[Int]()\n    for (i <- 0 until k) {\n        result.addOne(if (i % 2 == 0) 1 else minVal)\n    }\n    result.toList\n}\n",
            "def tri(n: Int): Seq[Int] = {\n    if (n == 0) return Seq(1)\n    var seq = Seq(1, 3)\n    for (i <- 2 to n) {\n        if (i % 2 == 0) {\n            seq = seq :+ (i / 2 + 1)\n        } else {\n            seq = seq :+ (seq(i - 1) + seq(i - 2) + (i + 3) / 2)\n        }\n    }\n    seq\n}\n",
            "def digits(n: Int): Int = {\n    val odds = n.toString.filter(_.toInt % 2 == 1).map(_.toInt)\n    odds.reduce(_ * _)\n}\n",
            "def isNested(s: String): Boolean = {\n    val openIdx = mutable.ListBuffer[Int]()\n    val closeIdx = mutable.ListBuffer[Int]()\n    for (i <- s.indices) {\n        if (s(i) == '[') {\n            openIdx += i\n        } else if (s(i) == ']') {\n            closeIdx += i\n        }\n    }\n    closeIdx.reverse\n    var cnt = 0\n    var i = 0\n    val l = closeIdx.length\n    for (idx <- openIdx) {\n        if (i < l && idx < closeIdx(i)) {\n            cnt += 1\n            i += 1\n        }\n    }\n    cnt >= 2\n}\n",
            "def sumSquares(lst: Seq[Double]): Int = {\n    var result = 0\n    for (n <- lst) {\n        result += pow(ceil(n), 2).toInt\n    }\n    result\n}\n",
            "def checkIfLastCharIsALetter(txt: String): Boolean = {\n    if (txt.isEmpty) false\n    else {\n        val last = txt.substring(txt.lastIndexOf(' ') + 1)\n        last.length == 1 && last.head.isLetter\n    }\n}\n",
            "def canArrange(arr: Seq[Int]): Int = {\n    if (arr.length <= 1) -1\n    else {\n        val idx = mutable.ListBuffer[Int]()\n        for (i <- 1 until arr.length) {\n            if (arr(i) < arr(i-1)) {\n                idx += i\n            }\n        }\n        if (idx.isEmpty) -1 else idx.last\n    }\n}\n",
            "def largestSmallestIntegers(lst: Seq[Int]): Seq[Option[Int]] = {\n    val neg = lst.filter(_ < 0)\n    val pos = lst.filter(_ > 0)\n    val maxNeg = if (neg.nonEmpty) neg.max else None\n    val minPos = if (pos.nonEmpty) pos.min else None\n    Seq(maxNeg, minPos)\n}\n",
            "def anyToReal(o: Any): Double = {\n    o match {\n        case s: String => s.replace(',', '.').toDouble\n        case i: Int => i.toDouble\n        case f: Float => f.toDouble\n        case _ => throw new RuntimeException(\"Type Error\")\n    }\n}\ndef compareOne(a: Any, b: Any): Option[Double] = {\n    val a1 = anyToReal(a)\n    val b1 = anyToReal(b)\n    if (a1 == b1) None else if (a1 > b1) Some(a1) else Some(b1)\n}\n",
            "def isEqualToSumEven(n: Int): Boolean = {\n    n % 2 == 0 && n >= 8\n}\n",
            "def specialFactorial(n: Int): Int = {\n    var fact = 1\n    var result = 1\n    for (i <- 1 to n) {\n        fact *= i\n        result *= fact\n    }\n    result\n}\n",
            "def fixSpaces(txt: String): String = {\n    val regex = new Regex(\"\\\\s{3,}\")\n    regex.replaceAllIn(txt, \"-\").replace(\" \", \"_\")\n}\n",
            "def fileNameCheck(fileName: String): String = {\n    val suf = Array(\"txt\", \"exe\", \"dll\")\n    val lst = fileName.split('.')\n    if (lst.length != 2 || !suf.contains(lst(1)) || lst(0).length == 0 || !lst(0)(0).isLetter || lst(0).map(c => if (c.isDigit) c else -1).filter(_ != -1).length > 3) {\n        \"No\"\n    } else {\n        \"Yes\"\n    }\n}\n",
            "def sumSquares(lst: Seq[Int]): Int = {\n    var result = 0\n    for (i <- lst.indices) {\n        if (i % 3 == 0) {\n            result += lst(i) * lst(i)\n        } else if (i % 4 == 0) {\n            result += lst(i) * lst(i) * lst(i)\n        } else {\n            result += lst(i)\n        }\n    }\n    result\n}\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) false\n    else {\n        val sqrtN = math.sqrt(n).toInt\n        !(2 until sqrtN + 1).exists(n % _ == 0)\n    }\n}\ndef wordsInSentence(sentence: String): String = {\n    sentence.split(\" \").filter(w => isPrime(w.length)).mkString(\" \")\n}\n",
            "def simplify(x: String, n: String): Boolean = {\n    val xs = x.split(\"/\")\n    val ns = n.split(\"/\")\n    val num = xs(0).toInt * ns(0).toInt\n    val den = xs(1).toInt * ns(1).toInt\n    num % den == 0\n}\n",
            "def digitsSum(n: Int): Int = {\n    val nStr = n.toString\n    if (n >= 0) nStr.map(_.asDigit).sum else nStr.take(2).toInt * 2 + digitsSum(n.abs)\n}\ndef orderByPoints(nums: Seq[Int]): Seq[Int] = {\n    nums.sortBy(digitsSum)\n}\n",
            "def specialFilter(nums: Seq[Int]): Int = {\n    val odds = \"13579\"\n    var result = 0\n    for (n <- nums) {\n        if (n > 10 && n % 2 == 1 && odds.contains(n.toString.substring(0, 1))) {\n            result += 1\n        }\n    }\n    result\n}\n",
            "def getMaxTriples(n: Int): Int = {\n    val c = Array.fill(3)(0)\n    for (i <- 1 to n) {\n        val a = i*i - i + 1\n        c(a%3) += 1\n    }\n    c(0)*c(1)*c(2) + (c(0)*(c(0)-1)*(c(0)-2) + c(1)*(c(1)-1)*(c(1)-2) + c(2)*(c(2)-1)*(c(2)-2)) / 6\n}\n",
            "def bf(planet1: String, planet2: String): Seq[String] = {\n    val names = Seq(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (!names.contains(planet1) || !names.contains(planet2)) {\n        Seq.empty[String]\n    } else {\n        val l = names.indexOf(planet1)\n        val r = names.indexOf(planet2)\n        if (l > r) {\n            names.slice(r + 1, l)\n        } else if (l == r) {\n            Seq.empty[String]\n        } else {\n            names.slice(l + 1, r)\n        }\n    }\n}\n",
            "def sortedListSum(lst: Seq[String]): Seq[String] = {\n    val result = lst.filter(_.length % 2 == 0).sortWith {\n        case (a, b) =>\n            if (a.length == b.length) a < b else a.length < b.length\n    }\n    result\n}\n",
            "def xOrY(n: Int, x: Int, y: Int): Int = {\n    if (n < 2) y\n    else {\n        val sqrt = math.sqrt(n).toInt\n        for (i <- 2 to sqrt) {\n            if (n % i == 0) return y\n        }\n        x\n    }\n}\n",
            "def doubleTheDifference(lst: Seq[Double]): Int = {\n    var result = 0\n    for (n <- lst) {\n        if (n >= 0 && sqrt(n) % 2 == 1) {\n            result += pow(n, 2).toInt\n        }\n    }\n    result\n}\n",
            "def compare(game: Seq[Int], guess: Seq[Int]): Seq[Int] = {\n    game.zip(guess).map { case (x, y) => Math.abs(x - y) }\n}\n",
            "def strongestExtension(className: String, extensions: Seq[String]): String = {\n    var maxS = Double.NegativeInfinity\n    var maxExt = \"\"\n    for (ext <- extensions) {\n        val upper = ext.count(_.isUpper)\n        val lower = ext.count(_.isLower)\n        val s = upper - lower\n        if (s > maxS) {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    s\"$className.$maxExt\"\n}\n",
            "def cycpatternCheck(a: String, b: String): Boolean = {\n    if (a.length < b.length) return false\n    for (i <- 0 until b.length) {\n        if (a.contains(b.substring(i) + b.substring(0, i))) return true\n    }\n    false\n}\n",
            "def evenOddCount(num: Int): Seq[Int] = {\n    val ds = Math.abs(num).toString\n    val even = ds.count(d => d.toInt % 2 == 0)\n    Seq(even, ds.length - even)\n}\n",
            "def intToMiniRoman(num: Int): String = {\n    val values = Array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    val numerals = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    val res = mutable.ListBuffer[String]()\n    for (i <- 0 until values.length) {\n        while (num >= values(i)) {\n            res += numerals(i)\n            num -= values(i)\n        }\n    }\n    res.mkString(\"\")\n}\n",
            "def rightAngleTriangle(a: Int, b: Int, c: Int): Boolean = {\n    val s = mutable.ListBuffer[Int](a, b, c)\n    s.sortInPlace()\n    s(0)*s(0) + s(1)*s(1) == s(2)*s(2)\n}\n",
            "def findMax(words: Seq[String]): String = {\n    var maxCnt = 0\n    var maxW = \"\"\n    for (w <- words) {\n        val cnt = w.toSet.size\n        if (cnt > maxCnt) {\n            maxCnt = cnt\n            maxW = w\n        } else if (cnt == maxCnt) {\n            maxW = maxW.min(w)\n        }\n    }\n    maxW\n}\n",
            "def eat(num: Int, need: Int, remaining: Int): Seq[Int] = {\n    if (need <= remaining) {\n        return Seq(num + need, remaining - need)\n    }\n    return Seq(num + remaining, 0)\n}\n",
            "def doAlgebra(operators: Seq[String], operands: Seq[Int]): Int = {\n    var ops = operators.toList\n    var nums = operands.toList\n    var i = ops.length - 1\n    while (i >= 0) {\n        if (ops(i) == \"**\") {\n            nums = nums.updated(i, math.pow(nums(i), nums(i + 1)).drop(i + 1)\n            ops = ops.drop(i)\n        }\n        i -= 1\n    }\n    i = 0\n    while (i < ops.length) {\n        if (ops(i) == \"*\") {\n            nums = nums.updated(i, nums(i) * nums(i + 1)).drop(i + 1)\n            ops = ops.drop(i)\n            i -= 1\n        } else if (ops(i) == \"//\") {\n            nums = nums.updated(i, nums(i) / nums(i + 1)).drop(i + 1)\n            ops = ops.drop(i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while (i < ops.length) {\n        if (ops(i) == \"+\") {\n            nums = nums.updated(i, nums(i) + nums(i + 1)).drop(i + 1)\n            ops = ops.drop(i)\n            i -= 1\n        } else if (ops(i) == \"-\") {\n            nums = nums.updated(i, nums(i) - nums(i + 1)).drop(i + 1)\n            ops = ops.drop(i)\n            i -= 1\n        }\n        i += 1\n    }\n    nums(0)\n}\n",
            "def solve(s: String): String = {\n    if (!s.exists(c => c.isLetter)) {\n        reverse(s)\n    } else {\n        val result = mutable.ListBuffer[Char]()\n        for (ch <- s) {\n            if (!ch.isLetter) {\n                result += ch\n            } else if (ch.isUpper) {\n                result += ch.toLower\n            } else if (ch.isLower) {\n                result += ch.toUpper\n            }\n        }\n        result.mkString\n    }\n}\ndef reverse(s: String): String = {\n    val result = mutable.ListBuffer[Char]()\n    for (i <- s.length - 1 to 0 by -1) {\n        result += s(i)\n    }\n    result.mkString\n}\n",
            "def stringToMd5(txt: String): Option[String] = {\n    if (txt.isEmpty) None else {\n        val md5_hash = MessageDigest.getInstance(\"MD5\")\n        val txt_bytes = txt.getBytes\n        md5_hash.update(txt_bytes)\n        val md5_encoded = md5_hash.digest\n        val md5_encoded_str = md5_encoded.map(\"%02x\".format(_)).mkString\n        Some(md5_encoded_str)\n    }\n}\n",
            "def generateIntegers(a: Int, b: Int): Seq[Int] = {\n    val lower = math.max(2, math.min(a, b))\n    val upper = math.min(8, math.max(a, b))\n    val result = mutable.ListBuffer[Int]()\n    for (i <- lower to upper) {\n        if (i % 2 == 0) {\n            result += i\n        }\n    }\n    result.toList\n}\n"
        ],
        "swift": [
            "func hasCloseElements(_ numbers: [Double], _ threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func separateParenGroups(_ parenString: String) -> [String] {\n    var groups = [String]()\n    var stk = [Character]()\n    var currentGroup = \"\"\n    let parens = parenString.replacingOccurrences(of: \" \", with: \"\")\n    for ch in parens {\n        if ch == \"(\" {\n            stk.append(ch)\n            currentGroup.append(ch)\n        } else if ch == \")\" {\n            stk.removeLast()\n            currentGroup.append(ch)\n            if stk.isEmpty {\n                groups.append(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "func truncateNumber(_ num: Double) -> Double {\n    return num - floor(num)\n}\n",
            "func belowZero(_ operations: [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func meanAbsoluteDeviation(_ numbers: [Double]) -> Double {\n    var mean: Double = 0\n    for n in numbers {\n        mean += n\n    }\n    mean /= Double(numbers.count)\n    var deviation: Double = 0\n    for n in numbers {\n        deviation += abs(n - mean)\n    }\n    return deviation / Double(numbers.count)\n}\n",
            "func intersperse(_ numbers: [Int], _ delimiter: Int) -> [Int] {\n    var result = [Int]()\n    for (i, e) in numbers.enumerated() {\n        if i != 0 {\n            result.append(delimiter)\n        }\n        result.append(e)\n    }\n    return result\n}\n",
            "func parseNestedParens(_ parenString: String) -> [Int] {\n    var result = [Int]()\n    let parenGroups = parenString.split(separator: \" \")\n    for group in parenGroups {\n        var maxDepth = 0\n        var depth = 0\n        for ch in group {\n            if ch == \"(\" {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if ch == \")\" {\n                depth -= 1\n            }\n        }\n        result.append(maxDepth)\n    }\n    return result\n}\n",
            "func filterBySubstring(_ strs: [String], _ substring: String) -> [String] {\n    var result = [String]()\n    for s in strs {\n        if s.contains(substring) {\n            result.append(s)\n        }\n    }\n    return result\n}\n",
            "func sumProduct(_ numbers: [Int]) -> [Int] {\n    var nSum = 0\n    for n in numbers {\n        nSum += n\n    }\n    var nProduct = 1\n    for n in numbers {\n        nProduct *= n\n    }\n    return [nSum, nProduct]\n}\n",
            "func rollingMax(_ numbers: [Int]) -> [Int] {\n    var maxSoFar = Int.min\n    var result = [Int]()\n    for num in numbers {\n        maxSoFar = max(maxSoFar, num)\n        result.append(maxSoFar)\n    }\n    return result\n}\n",
            "func isPalindrome(_ s: String) -> Bool {\n    return s == reverse(s)\n}\nfunc makePalindrome(_ s: String) -> String {\n    if isPalindrome(s) {\n        return s\n    }\n    for i in 0..<s.count {\n        if isPalindrome(String(s[s.index(s.startIndex, offsetBy: i)...])) {\n            return s + reverse(String(s[..<s.index(s.startIndex, offsetBy: i)]))\n        }\n    }\n    return \"\"\n}\nfunc reverse(_ s: String) -> String {\n    var runes = Array(s.unicodeScalars)\n    for i in 0..<runes.count/2 {\n        runes.swapAt(i, runes.count-i-1)\n    }\n    return String(runes)\n}\n",
            "func stringXor(_ a: String, _ b: String) -> String {\n    var result = \"\"\n    for i in 0..<a.count {\n        if a[a.index(a.startIndex, offsetBy: i)] == b[b.index(b.startIndex, offsetBy: i)] {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n    return result\n}\n",
            "func longest(_ strs: [String]) -> String? {\n    if strs.count == 0 {\n        return nil\n    }\n    var longestS = strs[0]\n    for s in strs {\n        if s.count > longestS.count {\n            longestS = s\n        }\n    }\n    return longestS\n}\n",
            "func greatestCommonDivisor(_ a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    }\n    return greatestCommonDivisor(b, a % b)\n}\n",
            "func allPrefixes(_ s: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<s.count {\n        prefixes.append(String(s.prefix(i + 1)))\n    }\n    return prefixes\n}\n",
            "func stringSequence(_ n: Int) -> String {\n    var result = [String]()\n    for i in 0...n {\n        result.append(String(i))\n    }\n    return result.joined(separator: \" \")\n}\n",
            "func countDistinctCharacters(_ s: String) -> Int {\n    return Set(s.lowercased()).count\n}\n",
            "func parseMusic(_ musicString: String) -> [Int] {\n    let durations = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    let notes = musicString.split(separator: \" \")\n    return notes.map { durations[$0]! }\n}\n",
            "func howManyTimes(_ s: String, _ substring: String) -> Int {\n    var times = 0\n    for i in 0..<s.count-substring.count+1 {\n        if s[i..<i+substring.count] == substring {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "func sortNumbers(_ numbers: String) -> String {\n    let numDict = [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    ]\n    var numList = [String]()\n    for e in numbers.split(separator: \" \") {\n        if let _ = numDict[String(e)] {\n            numList.append(String(e))\n        }\n    }\n    numList.sort {\n        numDict[$0]! < numDict[$1]!\n    }\n    return numList.joined(separator: \" \")\n}\n",
            "func findClosestElements(_ numbers: [Double]) -> [Double] {\n    var sortedNumbers = numbers\n    sortedNumbers.sort()\n    var minDiff = Double.infinity\n    var closestPair = [Double]()\n    for i in 1..<sortedNumbers.count {\n        let diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]]\n        }\n    }\n    return closestPair\n}\n",
            "func rescaleToUnit(_ numbers: [Double]) -> [Double] {\n    var minNum = Double.greatestFiniteMagnitude\n    var maxNum = -Double.greatestFiniteMagnitude\n    for num in numbers {\n        if num < minNum {\n            minNum = num\n        }\n        if num > maxNum {\n            maxNum = num\n        }\n    }\n    if minNum == maxNum {\n        return Array(repeating: 0.0, count: numbers.count)\n    }\n    var result = [Double]()\n    for num in numbers {\n        result.append((num - minNum) / (maxNum - minNum))\n    }\n    return result\n}\n",
            "func filterIntegers(_ values: [Any]) -> [Int] {\n    var result = [Int]()\n    for x in values {\n        if let x = x as? Int {\n            result.append(x)\n        }\n    }\n    return result\n}\n",
            "func strLength(_ s: String) -> Int {\n    return s.count\n}\n",
            "func largestDivisor(_ n: Int) -> Int {\n    for i in 2..<n {\n        if n % i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "func factorize(_ n: Int) -> [Int] {\n    var factors = [Int]()\n    var divisor = 2\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.append(divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "func removeDuplicates(_ numbers: [Int]) -> [Int] {\n    var counts = [Int: Int]()\n    for num in numbers {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    var res = [Int]()\n    for num in numbers {\n        if counts[num] == 1 {\n            res.append(num)\n        }\n    }\n    return res\n}\n",
            "func flipCase(_ s: String) -> String {\n    var flipped = \"\"\n    for ch in s.unicodeScalars {\n        if !CharacterSet.letters.contains(ch) {\n            flipped.append(String(ch))\n        } else if ch.isLowercase {\n            flipped.append(String(ch).uppercased())\n        } else if ch.isUppercase {\n            flipped.append(String(ch).lowercased())\n        }\n    }\n    return flipped\n}\n",
            "func concatenate(_ strs: [String]) -> String {\n    return strs.joined()\n}\n",
            "func filterByPrefix(_ strs: [String], _ prefixStr: String) -> [String] {\n    var result = [String]()\n    for s in strs {\n        if s.hasPrefix(prefixStr) {\n            result.append(s)\n        }\n    }\n    return result\n}\n",
            "func getPositive(_ l: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in l {\n        if num > 0 {\n            result.append(num)\n        }\n    }\n    return result\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func poly(_ xs: [Int], _ x: Double) -> Double {\n    var res: Double = 0\n    for i in 0..<xs.count {\n        res += Double(xs[i]) * pow(x, Double(i))\n    }\n    return res\n}\nfunc findZero(_ xs: [Int]) -> Double {\n    var x1: Double = 1\n    var x2: Double = -1\n    while poly(xs, x1) * poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    while abs(x1 - x2) > 1e-10 {\n        let mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0 {\n            return mid\n        } else if poly(xs, mid) * poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "func sortThird(_ l: [Int]) -> [Int] {\n    var sortedThird = [Int]()\n    for i in stride(from: 0, to: l.count, by: 3) {\n        sortedThird.append(l[i])\n    }\n    sortedThird.sort()\n    var result = [Int]()\n    for i in 0..<l.count {\n        if i % 3 == 0 {\n            result.append(sortedThird[i/3])\n        } else {\n            result.append(l[i])\n        }\n    }\n    return result\n}\n",
            "func listUnique(_ l: [Int]) -> [Int] {\n    var m = [Int: Bool]()\n    for e in l {\n        m[e] = true\n    }\n    var result = [Int]()\n    for k in m.keys {\n        result.append(k)\n    }\n    result.sort()\n    return result\n}\n",
            "func maxElement(_ l: [Int]) -> Int {\n    if l.isEmpty {\n        return 0\n    }\n    var max = l[0]\n    for e in l {\n        if e > max {\n            max = e\n        }\n    }\n    return max\n}\n",
            "func fizzBuzz(_ n: Int) -> Int {\n    var cnt = 0\n    for i in 0..<n {\n        if i%11 == 0 || i%13 == 0 {\n            cnt += String(i).filter { $0 == \"7\" }.count\n        }\n    }\n    return cnt\n}\n",
            "func sortEven(_ l: [Int]) -> [Int] {\n    var sortedEven = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n        sortedEven.append(l[i])\n    }\n    sortedEven.sort()\n    var result = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            result.append(sortedEven[i / 2])\n        } else {\n            result.append(l[i])\n        }\n    }\n    return result\n}\n",
            "func encodeCyclic(_ s: String) -> String {\n    var result = [String]()\n    for i in stride(from: 0, to: s.count, by: 3) {\n        if i + 3 > s.count {\n            result.append(String(s[s.index(s.startIndex, offsetBy: i)...]))\n        } else {\n            result.append(String(s[s.index(s.startIndex, offsetBy: i + 1)...s.index(s.startIndex, offsetBy: i + 3)]))\n            result.append(String(s[s.index(s.startIndex, offsetBy: i)...s.index(s.startIndex, offsetBy: i + 1)]))\n        }\n    }\n    return result.joined(separator: \"\")\n}\nfunc decodeCyclic(_ s: String) -> String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) + 1 {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc primeFib(_ n: Int) -> Int {\n    var f = [0, 1]\n    var cnt = 0\n    while cnt < n {\n        f = [f[1], f[0] + f[1]]\n        if isPrime(f[1]) {\n            cnt += 1\n        }\n    }\n    return f[1]\n}\n",
            "func triplesSumToZero(_ l: [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func carRaceCollision(_ n: Int) -> Int {\n    return n * n\n}\n",
            "func incrList(_ l: [Int]) -> [Int] {\n    var result = [Int]()\n    for e in l {\n        result.append(e + 1)\n    }\n    return result\n}\n",
            "func pairsSumToZero(_ l: [Int]) -> Bool {\n    var seen = [Int: Bool]()\n    for num in l {\n        if seen[-num] != nil {\n            return true\n        }\n        seen[num] = true\n    }\n    return false\n}\n",
            "func changeBase(_ x: Int, _ bas: Int) -> String {\n    if x == 0 {\n        return \"0\"\n    }\n    var digits = [String]()\n    var x = x\n    while x > 0 {\n        digits.append(String(x % bas))\n        x /= bas\n    }\n    return digits.reversed().joined()\n}\n",
            "func triangleArea(_ a: Int, _ h: Int) -> Double {\n    return Double(a) * Double(h) / 2\n}\n",
            "func fib4(_ n: Int) -> Int {\n    var fib = [0, 0, 2, 0]\n    for i in 4..<n + 1 {\n        fib[i % 4] = fib.reduce(0, +)\n    }\n    return fib[n % 4]\n}\n",
            "func median(_ l: [Double]) -> Double {\n    var sl = l\n    sl.sort()\n    if sl.count % 2 != 0 {\n        return sl[sl.count / 2]\n    }\n    return (sl[sl.count / 2] + sl[sl.count / 2 - 1]) / 2\n}\n",
            "func reverse(_ s: String) -> String {\n    return String(s.reversed())\n}\nfunc isPalindrome(_ txt: String) -> Bool {\n    return txt == reverse(txt)\n}\n",
            "func modp(_ n: Int, _ p: Int) -> Int {\n    var ret = 1\n    for i in 0..<n {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func encodeShift(_ s: String) -> String {\n    var result = [Character]()\n    for ch in s {\n        result.append(Character(UnicodeScalar(Int(ch.unicodeScalars.first!.value - 97 + 5) % 26 + 97))\n    }\n    return String(result)\n}\nfunc decodeShift(_ s: String) -> String {\n    var result = [Character]()\n    for ch in s {\n        result.append(Character(UnicodeScalar(Int(ch.unicodeScalars.first!.value - 97 + 21) % 26 + 97))\n    }\n    return String(result)\n}\n",
            "func removeVowels(_ txt: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for char in txt {\n        if !vowels.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n",
            "func belowThreshold(_ l: [Int], _ t: Int) -> Bool {\n    for x in l {\n        if x >= t {\n            return false\n        }\n    }\n    return true\n}\n",
            "func add(_ x: Int, _ y: Int) -> Int {\n    return x + y\n}\n",
            "func sameChars(_ s0: String, _ s1: String) -> Bool {\n    return Set(s0) == Set(s1)\n}\n",
            "func fib(_ n: Int) -> Int {\n    if n <= 1 {\n        return n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"<\" {\n            depth += 1\n        } else if b == \">\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func monotonic(_ l: [Int]) -> Bool {\n    let diff = zip(l, l.dropFirst()).map { $0.1 - $0.0 }\n    return diff.allSatisfy { $0 <= 0 } || diff.allSatisfy { $0 >= 0 }\n}\n",
            "func common(_ l1: [Int], _ l2: [Int]) -> [Int] {\n    return Array(Set(l1).intersection(Set(l2)).sorted()\n}\n",
            "func largestPrimeFactor(_ n: Int) -> Int {\n    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i\n        } else {\n            i += 1\n        }\n    }\n    return n\n}\n",
            "func sumToN(_ n: Int) -> Int {\n    var result = 0\n    for i in 0...n {\n        result += i\n    }\n    return result\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"(\" {\n            depth += 1\n        } else if b == \")\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func derivative(_ xs: [Int]) -> [Int] {\n    return (1..<xs.count).map { xs[$0] * $0 }\n}\n",
            "func fibfib(_ n: Int) -> Int {\n    if n <= 1 {\n        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 1\n    while n > 2 {\n        a = b\n        b = c\n        c = a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "func vowelsCount(_ s: String) -> Int {\n    let vowels = \"aeiou\"\n    var cnt = 0\n    for i in 0..<s.count {\n        if vowels.contains(s[i].lowercased()) || (i == s.count - 1 && s[i].lowercased() == \"y\") {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "func circularShift(_ x: Int, _ shift: Int) -> String {\n    let xStr = String(x)\n    if shift > xStr.count {\n        return String(xStr.reversed())\n    } else {\n        return String(xStr.suffix(shift)) + String(xStr.prefix(xStr.count - shift))\n    }\n}\n",
            "func digitSum(_ s: String) -> Int {\n    var result = 0\n    for c in s.unicodeScalars {\n        if CharacterSet.uppercaseLetters.contains(c) {\n            result += Int(c.value)\n        }\n    }\n    return result\n}\n",
            "func fruitDistribution(_ s: String, _ n: Int) -> Int {\n    let words = s.split(separator: \" \")\n    let apples = Int(words[words.firstIndex(of: \"apples\")! - 1])!\n    let oranges = Int(words[words.firstIndex(of: \"oranges\")! - 1])!\n    return n - apples - oranges\n}\n",
            "func pluck(_ arr: [Int]) -> [Int] {\n    var evens = [Int]()\n    for n in arr {\n        if n % 2 == 0 {\n            evens.append(n)\n        }\n    }\n    if evens.count == 0 {\n        return []\n    }\n    var minEven = evens[0]\n    for n in evens {\n        if n < minEven {\n            minEven = n\n        }\n    }\n    for (i, n) in arr.enumerated() {\n        if n == minEven {\n            return [minEven, i]\n        }\n    }\n    return []\n}\n",
            "func search(_ lst: [Int]) -> Int {\n    var freqs = [Int: Int]()\n    for n in lst {\n        freqs[n] = (freqs[n] ?? 0) + 1\n    }\n    var goodVals = [Int]()\n    for (k, v) in freqs {\n        if v >= k {\n            goodVals.append(k)\n        }\n    }\n    if goodVals.count == 0 {\n        return -1\n    }\n    var maxVal = goodVals[0]\n    for v in goodVals {\n        if v > maxVal {\n            maxVal = v\n        }\n    }\n    return maxVal\n}\n",
            "func strangeSortList(_ lst: [Int]) -> [Int] {\n    var sl = lst\n    sl.sort()\n    var result = [Int]()\n    var left = 0\n    var right = sl.count - 1\n    while left <= right {\n        result.append(sl[left])\n        left += 1\n        if left <= right {\n            result.append(sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "func triangleArea(_ a: Int, _ b: Int, _ c: Int) -> Double {\n    if a + b > c && a + c > b && b + c > a {\n        let s = Double(a + b + c) / 2.0\n        return sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n    }\n    return -1.0\n}\n",
            "func willItFly(_ q: [Int], _ w: Int) -> Bool {\n    if q.count == 0 {\n        return false\n    }\n    var isPalin = true\n    for i in 0..<q.count {\n        if q[i] != q[q.count-i-1] {\n            isPalin = false\n            break\n        }\n    }\n    var total = 0\n    for e in q {\n        total += e\n    }\n    return isPalin && total <= w\n}\n",
            "func smallestChange(_ arr: [Int]) -> Int {\n    var ans = 0\n    for i in 0..<arr.count/2 {\n        if arr[i] != arr[arr.count-i-1] {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "func totalMatch(_ lst1: [String], _ lst2: [String]) -> [String] {\n    var cnt1 = 0\n    for s in lst1 {\n        cnt1 += s.count\n    }\n    var cnt2 = 0\n    for s in lst2 {\n        cnt2 += s.count\n    }\n    if cnt1 <= cnt2 {\n        return lst1\n    }\n    return lst2\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc isMultiplyPrime(_ a: Int) -> Bool {\n    var cnt = 0\n    for i in 2...a {\n        if isPrime(i) {\n            while a % i == 0 {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "func isSimplePower(_ x: Int, _ n: Int) -> Bool {\n    if n < 2 {\n        return x == n\n    }\n    var tmp = 1\n    while tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "func isCube(_ a: Int) -> Bool {\n    let a = abs(a)\n    let root = Int(round(pow(Double(a), 1.0 / 3.0)))\n    return root * root * root == a\n}\n",
            "func hexKey(_ num: String) -> Int {\n    var result = 0\n    for x in num {\n        if x == \"2\" || x == \"3\" || x == \"5\" || x == \"7\" || x == \"B\" || x == \"D\" {\n            result += 1\n        }\n    }\n    return result\n}\n",
            "func decimalToBinary(_ dec: Int) -> String {\n    let binary = String(dec, radix: 2)\n    return \"db\\(binary)db\"\n}\n",
            "func isHappy(_ s: String) -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2 {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func numericalLetterGrade(_ grades: [Double]) -> [String] {\n    var result = [String]()\n    for g in grades {\n        if g == 4.0 {\n            result.append(\"A+\")\n        } else if g > 3.7 {\n            result.append(\"A\")\n        } else if g > 3.3 {\n            result.append(\"A-\")\n        } else if g > 3.0 {\n            result.append(\"B+\")\n        } else if g > 2.7 {\n            result.append(\"B\")\n        } else if g > 2.3 {\n            result.append(\"B-\")\n        } else if g > 2.0 {\n            result.append(\"C+\")\n        } else if g > 1.7 {\n            result.append(\"C\")\n        } else if g > 1.3 {\n            result.append(\"C-\")\n        } else if g > 1.0 {\n            result.append(\"D+\")\n        } else if g > 0.7 {\n            result.append(\"D\")\n        } else if g > 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"E\")\n        }\n    }\n    return result\n}\n",
            "func primeLength(_ s: String) -> Bool {\n    let length = s.count\n    if length < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(length))) {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func startsOneEnds(_ n: Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * Int(pow(10, Double(n-2)))\n}\n",
            "func solve(_ n: Int) -> String {\n    var digitsSum = 0\n    for d in String(n) {\n        digitsSum += Int(String(d))!\n    }\n    return String(digitsSum, radix: 2)\n}\n",
            "func add(_ lst: [Int]) -> Int {\n    var result = 0\n    for (i, x) in lst.enumerated() {\n        if i % 2 == 1 && x % 2 == 0 {\n            result += x\n        }\n    }\n    return result\n}\n",
            "func antiShuffle(_ s: String) -> String {\n    var words = [String]()\n    for word in s.split(separator: \" \") {\n        var runes = Array(word)\n        runes.sort()\n        words.append(String(runes))\n    }\n    return words.joined(separator: \" \")\n}\n",
            "func getRow(_ lst: [[Int]], _ x: Int) -> [[Int]] {\n    var coords = [[Int]]()\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            if lst[i][j] == x {\n                coords.append([i, j])\n            }\n        }\n    }\n    coords.sort { (a, b) -> Bool in\n        return a[0] < b[0] || (a[0] == b[0] && a[1] > b[1])\n    }\n    return coords\n}\n",
            "func sortArray(_ arr: [Int]) -> [Int] {\n    if arr.count == 0 {\n        return []\n    }\n    if (arr[0] + arr[arr.count - 1]) % 2 == 0 {\n        return arr.sorted(by: >)\n    } else {\n        return arr.sorted(by: <)\n    }\n}\n",
            "func encrypt(_ s: String) -> String {\n    var result = [Character]()\n    for ch in s {\n        var shifted = ch.asciiValue! + 4\n        if shifted > 122 {\n            shifted -= 26\n        }\n        result.append(Character(UnicodeScalar(shifted)!)\n    }\n    return String(result)\n}\n",
            "func nextSmallest(_ lst: [Int]) -> Int? {\n    var sl = [Int]()\n    var m = [Int: Bool]()\n    for e in lst {\n        if m[e] == nil {\n            sl.append(e)\n            m[e] = true\n        }\n    }\n    sl.sort()\n    if sl.count < 2 {\n        return nil\n    }\n    return sl[1]\n}\n",
            "func isBored(_ s: String) -> Int {\n    let sentences = s.split(separator: \".!?\")\n    var result = 0\n    for sentence in sentences {\n        if sentence.count >= 2 && sentence.prefix(2) == \"I \" {\n            result += 1\n        }\n    }\n    return result\n}\n",
            "func anyInt(_ x: Any, _ y: Any, _ z: Any) -> Bool {\n    if let x = x as? Int, let y = y as? Int, let z = z as? Int {\n        if (x + y == z) || (x + z == y) || (y + z == x) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func encode(_ message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = [Character]()\n    for ch in message {\n        if ch.isLetter {\n            let ch1 = ch.lowercased()\n            if vowels.contains(ch1) {\n                result.append(Character(UnicodeScalar(ch1.unicodeScalars.first!.value + 2)!)\n            } else {\n                result.append(ch1)\n            }\n        } else {\n            result.append(ch)\n        }\n    }\n    return String(result)\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) + 1 {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc skjkasdkd(_ lst: [Int]) -> Int {\n    let primes = lst.filter { isPrime($0) }\n    if primes.count == 0 {\n        return 0\n    }\n    let largest = String(primes.max()!)\n    return largest.compactMap { Int(String($0)) }.reduce(0, +)\n}\n",
            "func checkDictCase(_ d: [String:String]) -> Bool {\n    if d.isEmpty {\n        return false\n    }\n    return d.keys.allSatisfy { $0.allSatisfy { $0.isLowercase } } || d.keys.allSatisfy { $0.allSatisfy { $0.isUppercase } }\n}\n",
            "func countUpTo(_ n: Int) -> [Int] {\n    var primes = [Int]()\n    for num in 2..<n {\n        if primes.allSatisfy({ num % $0 != 0 }) {\n            primes.append(num)\n        }\n    }\n    return primes\n}\n",
            "func multiply(_ a: Int, _ b: Int) -> Int {\n    return (abs(a) % 10) * (abs(b) % 10)\n}\n",
            "func countUpper(_ s: String) -> Int {\n    let vowels = \"AEIOU\"\n    var result = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 && vowels.contains(String(c)) {\n            result += 1\n        }\n    }\n    return result\n}\n",
            "func closestInteger(_ value: String) -> Int {\n    let num = Double(value)!\n    if num >= 0 {\n        return Int(num + 0.5)\n    } else {\n        return Int(num - 0.5)\n    }\n}\n",
            "func makeAPile(_ n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<n {\n        result.append(n + 2 * i)\n    }\n    return result\n}\n",
            "func wordsString(_ s: String) -> [String] {\n    return s.split(separator: \", \").filter { $0.count > 0 }\n}\n",
            "func chooseNum(_ x: Int, _ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    if x != y {\n        return y - 1\n    }\n    return -1\n}\n",
            "func roundedAvg(_ n: Int, _ m: Int) -> String? {\n    if n > m {\n        return nil\n    }\n    let rAvg = Int((Double(m + n) / 2.0 + 0.5))\n    return String(rAvg, radix: 2)\n}\n",
            "func allDigitsOdd(_ s: String) -> Bool {\n    for c in s {\n        if Int(String(c))! % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc uniqueDigits(_ x: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in x {\n        if allDigitsOdd(String(num)) {\n            result.append(num)\n        }\n    }\n    result.sort()\n    return result\n}\n",
            "func byLength(_ arr: [Int]) -> [String] {\n    let digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    let sortedArr = arr.filter { 1...9 ~= $0 }.sorted { $0 > $1 }\n    return sortedArr.map { digitNames[$0 - 1] }\n}\n",
            "func f(_ n: Int) -> [Int] {\n    let nums = Array(1...n)\n    return nums.map {\n        $0 % 2 != 0 ? nums.prefix($0).reduce(0, +) : nums.prefix($0).reduce(1, *)\n    }\n}\n",
            "func isPalindrome(_ txt: String) -> Bool {\n    return txt == String(txt.reversed())\n}\nfunc evenOddPalindrome(_ n: Int) -> [Int] {\n    var cnt = [0, 0]\n    for i in 1...n {\n        if isPalindrome(String(i)) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}\n",
            "func digitsSum(_ n: Int) -> Int {\n    let nStr = String(n)\n    if n >= 0 {\n        return nStr.reduce(0) { $0 + Int($1.wholeNumberValue ?? 0) }\n    } else {\n        return Int(nStr[nStr.startIndex..<nStr.index(nStr.startIndex, offsetBy: 2)])! * 2 + digitsSum(abs(n))\n    }\n}\nfunc countNums(_ arr: [Int]) -> Int {\n    return arr.filter { digitsSum($0) > 0 }.count\n}\n",
            "func moveOneBall(_ arr: [Int]) -> Bool {\n    if arr.isEmpty {\n        return true\n    }\n    var sortedArr = arr\n    sortedArr.sort()\n    for i in 0..<arr.count {\n        if arr[i..<arr.count] == sortedArr[..<arr.count-i] && arr[..<i] == sortedArr[arr.count-i...] {\n            return true\n        }\n    }\n    return false\n}\n",
            "func canExchange(_ lst1: [Int], _ lst2: [Int]) -> String {\n    var oddCnt = 0\n    var evenCnt = 0\n    for num in lst1 {\n        if num % 2 != 0 {\n            oddCnt += 1\n        }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n            evenCnt += 1\n        }\n    }\n    if evenCnt >= oddCnt {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
            "func histogram(_ test: String) -> [String:Int] {\n    var freq = [String:Int]()\n    var words = [String]()\n    for w in test.split(separator: \" \") {\n        if w.count > 0 {\n            words.append(String(w))\n        }\n    }\n    for w in words {\n        freq[w] = (freq[w] ?? 0) + 1\n    }\n    var result = [String:Int]()\n    if freq.count > 0 {\n        var maxFreq = 0\n        for _, v in freq {\n            if v > maxFreq {\n                maxFreq = v\n            }\n        }\n        for (k, v) in freq {\n            if v == maxFreq {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "func reverseDelete(_ s: String, _ c: String) -> [String] {\n    let s1 = s.filter { !c.contains($0) }\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"]\n}\n",
            "func oddCount(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for num in lst {\n        let n = num.reduce(0) { $0 + ($1.asciiValue! % 2 == 1 ? 1 : 0) }\n        let rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replacingOccurrences(of: \"i\", with: String(n)))\n    }\n    return result\n}\n",
            "func minSubArraySum(_ nums: [Int]) -> Int {\n    var minSum = 0\n    var curSum = 0\n    for n in nums {\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if minSum == 0 {\n        minSum = nums.min()!\n    }\n    return minSum\n}\n",
            "func maxFill(_ grid: [[Int]], _ capacity: Int) -> Int {\n    return grid.map { $0.reduce(0, +) / capacity }.reduce(0, +)\n}\n",
            "func countOnes(_ num: Int) -> Int {\n    return String(num, radix: 2).filter { $0 == \"1\" }.count\n}\nfunc sortArray(_ arr: [Int]) -> [Int] {\n    return arr.sorted { countOnes($0) < countOnes($1) || ($0 < $1 && countOnes($0) == countOnes($1)) }\n}\n",
            "func selectWords(_ s: String, _ n: Int) -> [String] {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let words = s.split(separator: \" \")\n    var result = [String]()\n    for w in words {\n        if w.count > 0 {\n            var consonantCount = 0\n            for c in w {\n                if consonants.contains(String(c).lowercased()) {\n                    consonantCount += 1\n                }\n            }\n            if consonantCount == n {\n                result.append(w)\n            }\n        }\n    }\n    return result\n}\n",
            "func getClosestVowel(_ word: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    for i in stride(from: word.count - 2, through: 0, by: -1) {\n        if vowels.contains(word[i]) && !vowels.contains(word[i - 1]) && !vowels.contains(word[i + 1]) {\n            return String(word[i])\n        }\n    }\n    return \"\"\n}\n",
            "func check(_ s: String) -> Bool {\n    var depth = 0\n    for ch in s {\n        if ch == \"(\" {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\nfunc matchParens(_ lst: [String]) -> String {\n    let s1 = lst[0] + lst[1]\n    let s2 = lst[1] + lst[0]\n    if check(s1) || check(s2) {\n        return \"Yes\"\n    }\n    return \"No\"\n}\n",
            "func maximum(_ arr: [Int], _ k: Int) -> [Int] {\n    return Array(arr.sorted().suffix(k))\n}\n",
            "func solution(_ lst: [Int]) -> Int {\n    var result = 0\n    for (i, x) in lst.enumerated() {\n        if i % 2 == 0 && x % 2 != 0 {\n            result += x\n        }\n    }\n    return result\n}\n",
            "func addElements(_ arr: [Int], _ k: Int) -> Int {\n    var result = 0\n    for n in arr[0..<k] {\n        if String(n).count <= 2 {\n            result += n\n        }\n    }\n    return result\n}\n",
            "func getOddCollatz(_ n: Int) -> [Int] {\n    var collatz = [1]\n    while n != 1 {\n        if n % 2 != 0 {\n            collatz.append(n)\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    return collatz.sorted()\n}\n",
            "func validDate(_ date: String) -> Bool {\n    if date.count != 10 || date[date.index(date.startIndex, offsetBy: 2)] != \"-\" || date[date.index(date.startIndex, offsetBy: 5)] != \"-\" {\n        return false\n    }\n    let m = Int(date[..<date.index(date.startIndex, offsetBy: 2)])!\n    let d = Int(date[date.index(date.startIndex, offsetBy: 3)..<date.index(date.startIndex, offsetBy: 5)])!\n    if [1, 3, 5, 7, 8, 10, 12].contains(m) && d >= 1 && d <= 31 {\n        return true\n    }\n    if [4, 6, 9, 11].contains(m) && d >= 1 && d <= 30 {\n        return true\n    }\n    if m == 2 && d >= 1 && d <= 29 {\n        return true\n    }\n    return false\n}\n",
            "func splitWords(_ txt: String) -> [String] {\n    if txt.contains(\" \") {\n        return txt.split(separator: \" \")\n    } else if txt.contains(\",\") {\n        return txt.split(separator: \",\")\n    } else {\n        var result = [String]()\n        for c in txt {\n            if c.isLowercase && Int(c.unicodeScalars.first!.value) % 2 == 0 {\n                result.append(String(c))\n            }\n        }\n        return [String(result.count)]\n    }\n}\n",
            "func isSorted(_ lst: [Int]) -> Bool {\n    if !lst.dropFirst().enumerated().all({ $0.element >= lst[$0.offset] }) {\n        return false\n    }\n    var freq = [Int: Int]()\n    for i in lst {\n        freq[i, default: 0] += 1\n    }\n    return freq.values.max() ?? 0 <= 2\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) + 1 {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc intersection(_ interval1: [Int], _ interval2: [Int]) -> String {\n    let l = max(interval1[0], interval2[0])\n    let r = min(interval1[1], interval2[1])\n    let length = r - l\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\"\n}\n",
            "func prodSigns(_ arr: [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    if arr.contains(0) {\n        return 0\n    }\n    let sign = arr.filter { $0 < 0 }.count % 2 == 1 ? -1 : 1\n    return sign * arr.map { abs($0) }.reduce(0, +)\n}\n",
            "func minPath(_ grid: [[Int]], _ k: Int) -> [Int] {\n    let n = grid.count\n    var minVal = n * n + 1\n    for i in 0..<n {\n        for j in 0..<n {\n            if grid[i][j] == 1 {\n                var temp = [Int]()\n                if i != 0 {\n                    temp.append(grid[i - 1][j])\n                }\n                if j != 0 {\n                    temp.append(grid[i][j - 1])\n                }\n                if i != n - 1 {\n                    temp.append(grid[i + 1][j])\n                }\n                if j != n - 1 {\n                    temp.append(grid[i][j + 1])\n                }\n                minVal = min(temp)\n            }\n        }\n    }\n    var result = [Int]()\n    for i in 0..<k {\n        result.append(1)\n        if i % 2 == 0 {\n            result.append(minVal)\n        }\n    }\n    return result\n}\n",
            "func tri(_ n: Int) -> [Int] {\n    if n == 0 {\n        return [1]\n    }\n    var seq = [1, 3]\n    for i in 2...n {\n        if i % 2 == 0 {\n            seq.append(i / 2 + 1)\n        } else {\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "func digits(_ n: Int) -> Int {\n    let odds = String(n).compactMap { Int(String($0)) }.filter { $0 % 2 == 1 }\n    return odds.reduce(1, *)\n}\n",
            "func isNested(_ s: String) -> Bool {\n    var openIdx = [Int]()\n    var closeIdx = [Int]()\n    for (i, ch) in s.enumerated() {\n        if ch == \"[\" {\n            openIdx.append(i)\n        } else if ch == \"]\" {\n            closeIdx.append(i)\n        }\n    }\n    closeIdx = closeIdx.reversed()\n    var cnt = 0\n    var i = 0\n    let l = closeIdx.count\n    for idx in openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\n",
            "func sumSquares(_ lst: [Double]) -> Int {\n    var result = 0\n    for n in lst {\n        result += Int(pow(ceil(n), 2))\n    }\n    return result\n}\n",
            "func checkIfLastCharIsALetter(_ txt: String) -> Bool {\n    if txt.isEmpty {\n        return false\n    }\n    let last = txt.split(separator: \" \").last!\n    return last.count == 1 && last.first!.isLetter\n}\n",
            "func canArrange(_ arr: [Int]) -> Int {\n    if arr.count <= 1 {\n        return -1\n    }\n    var idx = [Int]()\n    for i in 1..<arr.count {\n        if arr[i] < arr[i-1] {\n            idx.append(i)\n        }\n    }\n    if idx.count == 0 {\n        return -1\n    }\n    return idx[idx.count-1]\n}\n",
            "func largestSmallestIntegers(_ lst: [Int]) -> [Int?] {\n    let neg = lst.filter { $0 < 0 }\n    let pos = lst.filter { $0 > 0 }\n    let maxNeg = neg.max()\n    let minPos = pos.min()\n    return [maxNeg, minPos]\n}\n",
            "func compareOne(_ a: Any, _ b: Any) -> Double? {\n    let a1 = anyToReal(a)\n    let b1 = anyToReal(b)\n    if a1 == b1 {\n        return nil\n    } else if a1 > b1 {\n        return a1\n    } else {\n        return b1\n    }\n}\nfunc anyToReal(_ o: Any) -> Double {\n    if let o = o as? String {\n        return Double(o.replacingOccurrences(of: \",\", with: \".\"))!\n    } else if let o = o as? Int {\n        return Double(o)\n    } else if let o = o as? Double {\n        return o\n    } else {\n        fatalError(\"Type Error\")\n    }\n}\n",
            "func isEqualToSumEven(_ n: Int) -> Bool {\n    return n % 2 == 0 && n >= 8\n}\n",
            "func specialFactorial(_ n: Int) -> Int {\n    var fact = 1\n    var result = 1\n    for i in 1...n {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "func fixSpaces(_ txt: String) -> String {\n    return txt.replacingOccurrences(of: \"\\\\s{3,}\", with: \"-\").replacingOccurrences(of: \" \", with: \"_\")\n}\n",
            "func fileNameCheck(_ fileName: String) -> String {\n    let suf = [\"txt\", \"exe\", \"dll\"]\n    let lst = fileName.split(separator: \".\")\n    if lst.count != 2 || !suf.contains(lst[1]) || lst[0].isEmpty || !lst[0].first!.isLetter || lst[0].filter { $0.isNumber }.count > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "func sumSquares(_ lst: [Int]) -> Int {\n    var result = 0\n    for (i, e) in lst.enumerated() {\n        if i % 3 == 0 {\n            result += e * e\n        } else if i % 4 == 0 {\n            result += e * e * e\n        } else {\n            result += e\n        }\n    }\n    return result\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc wordsInSentence(_ sentence: String) -> String {\n    let words = sentence.split(separator: \" \")\n    return words.filter { isPrime($0.count) }.joined(separator: \" \")\n}\n",
            "func simplify(_ x: String, _ n: String) -> Bool {\n    let xs = x.split(separator: \"/\")\n    let ns = n.split(separator: \"/\")\n    let num = Int(xs[0])! * Int(ns[0])!\n    let den = Int(xs[1])! * Int(ns[1])!\n    return num % den == 0\n}\n",
            "func digitsSum(_ n: Int) -> Int {\n    let nStr = String(n)\n    if n >= 0 {\n        return nStr.reduce(0) { $0 + Int($1.wholeNumberValue ?? 0) }\n    } else {\n        return Int(nStr[nStr.startIndex..<nStr.index(nStr.startIndex, offsetBy: 2)])! * 2 + digitsSum(abs(n))\n    }\n}\nfunc orderByPoints(_ nums: [Int]) -> [Int] {\n    return nums.sorted { digitsSum($0) < digitsSum($1) }\n}\n",
            "func specialFilter(_ nums: [Int]) -> Int {\n    let odds = \"13579\"\n    var result = 0\n    for n in nums {\n        if n > 10 && n % 2 == 1 && odds.contains(String(n / 10)) {\n            result += 1\n        }\n    }\n    return result\n}\n",
            "func getMaxTriples(_ n: Int) -> Int {\n    var c = [3]Int()\n    for i in 1...n {\n        let a = i*i - i + 1\n        c[a%3] += 1\n    }\n    return c[0]*c[1]*c[2] + (c[0]*(c[0]-1)*(c[0]-2) + c[1]*(c[1]-1)*(c[1]-2) + c[2]*(c[2]-1)*(c[2]-2)) / 6\n}\n",
            "func bf(_ planet1: String, _ planet2: String) -> [String] {\n    let names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let l = names.firstIndex(of: planet1), let r = names.firstIndex(of: planet2) else {\n        return []\n    }\n    if l > r {\n        return []\n    }\n    if l == r {\n        return []\n    }\n    return Array(names[l + 1 ..< r])\n}\n",
            "func sortedListSum(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for s in lst {\n        if s.count % 2 == 0 {\n            result.append(s)\n        }\n    }\n    result.sort { (s1, s2) -> Bool in\n        if s1.count == s2.count {\n            return s1 < s2\n        }\n        return s1.count < s2.count\n    }\n    return result\n}\n",
            "func xOrY(_ n: Int, _ x: Int, _ y: Int) -> Int {\n    if n < 2 {\n        return y\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func doubleTheDifference(_ lst: [Double]) -> Int {\n    var result = 0\n    for n in lst {\n        if n >= 0 && n.truncatingRemainder(dividingBy: 2) == 1 {\n            result += Int(n * n)\n        }\n    }\n    return result\n}\n",
            "func compare(_ game: [Int], _ guess: [Int]) -> [Int] {\n    return zip(game, guess).map { abs($0 - $1) }\n}\n",
            "func strongestExtension(_ className: String, _ extensions: [String]) -> String {\n    var maxS = Float.leastNormalMagnitude\n    var maxExt = \"\"\n    for ext in extensions {\n        let upper = ext.filter { $0.isUppercase }.count\n        let lower = ext.filter { $0.isLowercase }.count\n        let s = Float(upper - lower)\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return \"\\(className).\\(maxExt)\"\n}\n",
            "func cycpatternCheck(_ a: String, _ b: String) -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    for i in 0..<b.count {\n        if a.contains(b[i...] + b[..<i]) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func evenOddCount(_ num: Int) -> [Int] {\n    let ds = String(abs(num))\n    let even = ds.filter { Int(String($0))! % 2 == 0 }.count\n    return [even, ds.count - even]\n}\n",
            "func intToMiniRoman(_ num: Int) -> String {\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    var res = [String]()\n    for i in 0..<values.count {\n        while num >= values[i] {\n            res.append(numerals[i])\n            num -= values[i]\n        }\n    }\n    return res.joined()\n}\n",
            "func rightAngleTriangle(_ a: Int, _ b: Int, _ c: Int) -> Bool {\n    var s = [a, b, c]\n    s.sort()\n    return s[0]*s[0] + s[1]*s[1] == s[2]*s[2]\n}\n",
            "func findMax(_ words: [String]) -> String {\n    var maxCnt = 0\n    var maxW = \"\"\n    for w in words {\n        let cnt = Set(w).count\n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        } else if cnt == maxCnt {\n            maxW = min(maxW, w)\n        }\n    }\n    return maxW\n}\n",
            "func eat(_ num: Int, _ need: Int, _ remaining: Int) -> [Int] {\n    if need <= remaining {\n        return [num + need, remaining - need]\n    }\n    return [num + remaining, 0]\n}\n",
            "func doAlgebra(_ operators: [String], _ operands: [Int]) -> Int {\n    var ops = operators\n    var nums = operands\n    var i = ops.count - 1\n    while i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = Int(pow(Double(nums[i]), Double(nums[i + 1])))\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n        }\n        i -= 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "func solve(_ s: String) -> String {\n    if !s.contains(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") {\n        return reverse(s)\n    }\n    var result = [Character]()\n    for ch in s {\n        if !CharacterSet.letters.contains(ch) {\n            result.append(ch)\n        } else if ch.isUppercase {\n            result.append(ch.lowercased())\n        } else if ch.isLowercase {\n            result.append(ch.uppercased())\n        }\n    }\n    return String(result)\n}\nfunc reverse(_ s: String) -> String {\n    var result = [Character]()\n    for ch in s {\n        result.insert(ch, at: 0)\n    }\n    return String(result)\n}\n",
            "func stringToMd5(_ txt: String) -> String? {\n    if txt.isEmpty {\n        return nil\n    }\n    let md5_encoded = txt.md5()\n    return md5_encoded\n}\n",
            "func generateIntegers(_ a: Int, _ b: Int) -> [Int] {\n    let lower = max(2, min(a, b))\n    let upper = min(8, max(a, b))\n    var result = [Int]()\n    for i in lower...upper {\n        if i % 2 == 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n"
        ],
        "typescript": [
            "export const hasCloseElements = (numbers: Array<number>, threshold: number): boolean => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "export const separateParenGroups = (parenString: string): Array<string> => {\n    const groups: Array<string> = [];\n    const stk: Array<string> = [];\n    let currentGroup: string = \"\";\n    const parens: string = parenString.replace(\" \", \"\");\n    for (const ch of parens) {\n        if (ch === \"(\") {\n            stk.push(ch);\n            currentGroup += ch;\n        } else if (ch === \")\") {\n            stk.pop();\n            currentGroup += ch;\n            if (stk.length === 0) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n};\n",
            "export const truncateNumber = (num: number): number => {\n    return num - Math.floor(num);\n}\n",
            "export const belowZero = (operations: Array<number>): boolean => {\n    let balance = 0;\n    for (const op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const meanAbsoluteDeviation = (numbers: Array<number>): number => {\n    let mean = 0;\n    for (const n of numbers) {\n        mean += n;\n    }\n    mean /= numbers.length;\n    let deviation = 0;\n    for (const n of numbers) {\n        deviation += Math.abs(n - mean);\n    }\n    return deviation / numbers.length;\n}\n",
            "export const intersperse = (numbers: Array<number>, delimiter: number): Array<number> => {\n    const result: Array<number> = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i !== 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "export const parseNestedParens = (parenString: string): Array<number> => {\n    const result: Array<number> = [];\n    const parenGroups = parenString.split(\" \");\n    for (const group of parenGroups) {\n        let maxDepth = 0;\n        let depth = 0;\n        for (const ch of group) {\n            if (ch === \"(\") {\n                depth += 1;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch === \")\") {\n                depth -= 1;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n};\n",
            "export const filterBySubstring = (strs: Array<string>, substring: string): Array<string> => {\n    const result: Array<string> = [];\n    for (const s of strs) {\n        if (s.includes(substring)) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n",
            "export const sumProduct = (numbers: Array<number>): Array<number> => {\n    let nSum = 0;\n    for (const n of numbers) {\n        nSum += n;\n    }\n    let nProduct = 1;\n    for (const n of numbers) {\n        nProduct *= n;\n    }\n    return [nSum, nProduct];\n};\n",
            "export const rollingMax = (numbers: Array<number>): Array<number> => {\n    let maxSoFar = Number.NEGATIVE_INFINITY;\n    const result: Array<number> = [];\n    for (const num of numbers) {\n        maxSoFar = Math.max(maxSoFar, num);\n        result.push(maxSoFar);\n    }\n    return result;\n}\n",
            "export const makePalindrome = (s: string): string => {\n    return s === reverse(s) ? s : reverse(s) + makePalindrome(reverse(s.slice(0, s.length - 1)));\n}\nexport const reverse = (s: string): string => {\n    const runes = [...s];\n    for (let i = 0, j = runes.length - 1; i < j; i++, j--) {\n        [runes[i], runes[j]] = [runes[j], runes[i]];\n    }\n    return runes.join(\"\");\n}\n",
            "export const stringXor = (a: string, b: string): string => {\n    let result = \"\";\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n};\n",
            "export const longest = (strs: Array<string>): string | null => {\n    if (strs.length === 0) {\n        return null;\n    }\n    let longestS = strs[0];\n    for (const s of strs) {\n        if (s.length > longestS.length) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}\n",
            "export const greatestCommonDivisor = (a: number, b: number): number => {\n    if (b === 0) {\n        return a;\n    }\n    return greatestCommonDivisor(b, a % b);\n}\n",
            "export const allPrefixes = (s: string): Array<string> => {\n    const prefixes: Array<string> = [];\n    for (let i = 0; i < s.length; i++) {\n        prefixes.push(s.slice(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "export const stringSequence = (n: number): string => {\n    const result: Array<string> = [];\n    for (let i = 0; i <= n; i++) {\n        result.push(i.toString());\n    }\n    return result.join(\" \");\n}\n",
            "export const countDistinctCharacters = (s: string): number => {\n    return new Set(s.toLowerCase()).size;\n}\n",
            "export const parseMusic = (musicString: string): Array<number> => {\n    const durations = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1\n    };\n    const notes = musicString.split(\" \");\n    return notes.map(note => durations[note]);\n}\n",
            "export const howManyTimes = (s: string, substring: string): number => {\n    let times = 0;\n    for (let i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.slice(i, i + substring.length) === substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "export const sortNumbers = (numbers: string): string => {\n    const numDict = {\n        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n        nine: 9,\n    };\n    const numList = [];\n    for (const e of numbers.split(\" \")) {\n        if (e in numDict) {\n            numList.push(e);\n        }\n    }\n    numList.sort((a, b) => numDict[a] - numDict[b]);\n    return numList.join(\" \");\n};\n",
            "export const findClosestElements = (numbers: Array<number>): Array<number> => {\n    const sortedNumbers = [...numbers].sort((a, b) => a - b);\n    let minDiff = Number.POSITIVE_INFINITY;\n    let closestPair: Array<number> = [];\n    for (let i = 1; i < sortedNumbers.length; i++) {\n        const diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n};\n",
            "export const rescaleToUnit = (numbers: Array<number>): Array<number> => {\n    let minNum = Number.MAX_VALUE;\n    let maxNum = -Number.MAX_VALUE;\n    for (const num of numbers) {\n        if (num < minNum) {\n            minNum = num;\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    if (minNum === maxNum) {\n        return new Array(numbers.length);\n    }\n    const result: Array<number> = [];\n    for (let i = 0; i < numbers.length; i++) {\n        result[i] = (numbers[i] - minNum) / (maxNum - minNum);\n    }\n    return result;\n}\n",
            "export const filterIntegers = (values: Array<any>): Array<number> => {\n    const result: Array<number> = [];\n    for (const x of values) {\n        if (typeof x === \"number\") {\n            result.push(x);\n        }\n    }\n    return result;\n}\n",
            "export const strLength = (s: string): number => {\n    return s.length;\n}\n",
            "export const largestDivisor = (n: number): number => {\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "export const factorize = (n: number): Array<number> => {\n    let factors: Array<number> = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "export const removeDuplicates = (numbers: Array<number>): Array<number> => {\n    const counts: { [key: number]: number } = {};\n    for (const num of numbers) {\n        counts[num] = (counts[num] || 0) + 1;\n    }\n    const res: Array<number> = [];\n    for (const num of numbers) {\n        if (counts[num] === 1) {\n            res.push(num);\n        }\n    }\n    return res;\n};\n",
            "export const flipCase = (s: string): string => {\n    const flipped: Array<string> = [];\n    for (const ch of s) {\n        if (!ch.match(/[a-zA-Z]/)) {\n            flipped.push(ch);\n        } else if (ch.match(/[a-z]/)) {\n            flipped.push(ch.toUpperCase());\n        } else if (ch.match(/[A-Z]/)) {\n            flipped.push(ch.toLowerCase());\n        }\n    }\n    return flipped.join(\"\");\n}\n",
            "export const concatenate = (strs: Array<string>): string => {\n    return strs.join(\"\");\n}\n",
            "export const filterByPrefix = (strs: Array<string>, prefixStr: string): Array<string> => {\n    const result: Array<string> = [];\n    for (const s of strs) {\n        if (s.startsWith(prefixStr)) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n",
            "export const getPositive = (l: Array<number>): Array<number> => {\n    const result: Array<number> = [];\n    for (const num of l) {\n        if (num > 0) {\n            result.push(num);\n        }\n    }\n    return result;\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n",
            "export const poly = (xs: Array<number>, x: number): number => {\n    let res = 0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n};\nexport const findZero = (xs: Array<number>): number => {\n    let x1 = 1,\n        x2 = -1;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        const mid = (x1 + x2) / 2;\n        if (poly(xs, mid) === 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n};\n",
            "export const sortThird = (l: Array<number>): Array<number> => {\n    const sortedThird: Array<number> = [];\n    for (let i = 0; i < l.length; i += 3) {\n        sortedThird.push(l[i]);\n    }\n    sortedThird.sort((a, b) => a - b);\n    const result: Array<number> = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            result.push(sortedThird[i / 3]);\n        } else {\n            result.push(l[i]);\n        }\n    }\n    return result;\n};\n",
            "export const listUnique = (l: Array<number>): Array<number> => {\n    const m: { [key: number]: boolean } = {};\n    for (const e of l) {\n        m[e] = true;\n    }\n    const result: Array<number> = [];\n    for (const k in m) {\n        result.push(parseInt(k));\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}\n",
            "export const maxElement = (l: Array<number>): number => {\n    if (l.length === 0) {\n        return 0;\n    }\n    let max = l[0];\n    for (const e of l) {\n        if (e > max) {\n            max = e;\n        }\n    }\n    return max;\n}\n",
            "export const fizzBuzz = (n: number): number => {\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += (i + \"\").split(\"7\").length - 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const sortEven = (l: Array<number>): Array<number> => {\n    const sortedEven = l.filter((_, i) => i % 2 === 0).sort((a, b) => a - b);\n    const result = l.map((e, i) => (i % 2 === 0 ? sortedEven[i / 2] : e));\n    return result;\n};\n",
            "export const encodeCyclic = (s: string): string => {\n    const result: Array<string> = [];\n    for (let i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.push(s.slice(i));\n        } else {\n            result.push(s.slice(i + 1, i + 3));\n            result.push(s.slice(i, i + 1));\n        }\n    }\n    return result.join(\"\");\n}\nexport const decodeCyclic = (s: string): string => {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "export const primeFib = (n: number): number => {\n    const f = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        f[0] = f[1];\n        f[1] = f[0] + f[1];\n        if (isPrime(f[1])) {\n            cnt++;\n        }\n    }\n    return f[1];\n};\nconst isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n",
            "export const triplesSumToZero = (l: Array<number>): boolean => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n};\n",
            "export const carRaceCollision = (n: number): number => {\n    return n * n;\n}\n",
            "export const incrList = (l: Array<number>): Array<number> => {\n    const result: Array<number> = [];\n    for (let i = 0; i < l.length; i++) {\n        result.push(l[i] + 1);\n    }\n    return result;\n}\n",
            "export const pairsSumToZero = (l: Array<number>): boolean => {\n    const seen = new Map<number, boolean>();\n    for (const num of l) {\n        if (seen.get(-num)) {\n            return true;\n        }\n        seen.set(num, true);\n    }\n    return false;\n}\n",
            "export const changeBase = (x: number, bas: number): string => {\n    if (x === 0) {\n        return \"0\";\n    }\n    const digits: Array<string> = [];\n    while (x > 0) {\n        digits.push(String(x % bas));\n        x = Math.floor(x / bas);\n    }\n    return digits.reverse().join(\"\");\n}\n",
            "export const triangleArea = (a: number, h: number): number => {\n    return a * h / 2;\n}\n",
            "export const fib4 = (n: number): number => {\n    const fib = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        fib[i % 4] = fib.reduce((a, b) => a + b);\n    }\n    return fib[n % 4];\n}\n",
            "export const median = (l: Array<number>): number => {\n    const sl = [...l];\n    sl.sort((a, b) => a - b);\n    if (sl.length % 2 !== 0) {\n        return sl[Math.floor(sl.length / 2)];\n    }\n    return (sl[Math.floor(sl.length / 2)] + sl[Math.floor(sl.length / 2) - 1]) / 2;\n}\n",
            "export const isPalindrome = (txt: string): boolean => {\n    return txt === reverse(txt);\n}\nexport const reverse = (s: string): string => {\n    const runes = Array.from(s);\n    for (let i = 0, j = runes.length - 1; i < j; i++, j--) {\n        [runes[i], runes[j]] = [runes[j], runes[i]];\n    }\n    return runes.join(\"\");\n}\n",
            "export const modp = (n: number, p: number): number => {\n    let ret = 1;\n    for (let i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "export const encodeShift = (s: string): string => {\n    let result: Array<string> = [];\n    for (let ch of s) {\n        result.push(String.fromCharCode(((ch.charCodeAt(0) - 97 + 5) % 26) + 97));\n    }\n    return result.join(\"\");\n}\nexport const decodeShift = (s: string): string => {\n    let result: Array<string> = [];\n    for (let ch of s) {\n        result.push(String.fromCharCode(((ch.charCodeAt(0) - 97 + 21) % 26) + 97));\n    }\n    return result.join(\"\");\n}\n",
            "export const removeVowels = (txt: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    let result = \"\";\n    for (const char of txt) {\n        if (!vowels.includes(char)) {\n            result += char;\n        }\n    }\n    return result;\n}\n",
            "export const belowThreshold = (l: Array<number>, t: number): boolean => {\n    for (const x of l) {\n        if (x >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const add = (x: number, y: number): number => {\n    return x + y;\n}\n",
            "export const sameChars = (s0: string, s1: string): boolean => {\n    return new Set(s0).size === new Set(s1).size;\n}\n",
            "export const fib = (n: number): number => {\n    if (n <= 1) {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n",
            "export const correctBracketing = (brackets: string): boolean => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"<\") {\n            depth += 1;\n        } else if (b === \">\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n};\n",
            "export const monotonic = (l: Array<number>): boolean => {\n    const diff = l.map((x, i) => l[i + 1] - x);\n    return diff.every((x) => x <= 0) || diff.every((x) => x >= 0);\n};\n",
            "export const common = (l1: Array<number>, l2: Array<number>): Array<number> => {\n    return [...new Set(l1.filter((e) => l2.includes(e)))].sort((a, b) => a - b);\n}\n",
            "export const largestPrimeFactor = (n: number): number => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n",
            "export const sumToN = (n: number): number => {\n    let result = 0;\n    for (let i = 0; i <= n; i++) {\n        result += i;\n    }\n    return result;\n}\n",
            "export const correctBracketing = (brackets: string): boolean => {\n    let depth = 0;\n    for (const b of brackets) {\n        if (b === \"(\") {\n            depth += 1;\n        } else if (b === \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n};\n",
            "export const derivative = (xs: Array<number>): Array<number> => {\n    return xs.map((x, i) => x * i);\n}\n",
            "export const fibfib = (n: number): number => {\n    if (n <= 1) {\n        return 0;\n    }\n    let a = 0;\n    let b = 0;\n    let c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n};\n",
            "export const vowelsCount = (s: string): number => {\n    const vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase()) || (i === s.length - 1 && s[i].toLowerCase() === \"y\")) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n",
            "export const circularShift = (x: number, shift: number): string => {\n    const xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.split(\"\").reverse().join(\"\");\n    } else {\n        return xStr.slice(-shift) + xStr.slice(0, -shift);\n    }\n}\n",
            "export const digitSum = (s: string): number => {\n    let result = 0;\n    for (const c of s) {\n        if (c.match(/[A-Z]/)) {\n            result += c.charCodeAt(0);\n        }\n    }\n    return result;\n}\n",
            "export const fruitDistribution = (s: string, n: number): number => {\n    const words = s.split(\" \");\n    const apples = parseInt(words[words.indexOf(\"apples\") - 1]);\n    const oranges = parseInt(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "export const pluck = (arr: Array<number>): Array<number> => {\n    const evens: Array<number> = [];\n    for (const n of arr) {\n        if (n % 2 === 0) {\n            evens.push(n);\n        }\n    }\n    if (evens.length === 0) {\n        return [];\n    }\n    let minEven = evens[0];\n    for (const n of evens) {\n        if (n < minEven) {\n            minEven = n;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        const n = arr[i];\n        if (n === minEven) {\n            return [minEven, i];\n        }\n    }\n    return [];\n};\n",
            "export const search = (lst: Array<number>): number => {\n    const freqs: { [key: number]: number } = {};\n    for (const n of lst) {\n        freqs[n] = (freqs[n] || 0) + 1;\n    }\n    const goodVals: Array<number> = [];\n    for (const k in freqs) {\n        const v = freqs[k];\n        if (v >= k) {\n            goodVals.push(k);\n        }\n    }\n    if (goodVals.length === 0) {\n        return -1;\n    }\n    let maxVal = goodVals[0];\n    for (const v of goodVals) {\n        if (v > maxVal) {\n            maxVal = v;\n        }\n    }\n    return maxVal;\n};\n",
            "export const strangeSortList = (lst: Array<number>): Array<number> => {\n    const sl = [...lst];\n    sl.sort((a, b) => a - b);\n    const result: Array<number> = [];\n    let left = 0;\n    let right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "export const triangleArea = (a: number, b: number, c: number): number => {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2.0;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    return -1.0;\n}\n",
            "export const willItFly = (q: Array<number>, w: number): boolean => {\n    if (q.length === 0) {\n        return false;\n    }\n    let isPalin = true;\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== q[q.length - i - 1]) {\n            isPalin = false;\n            break;\n        }\n    }\n    let total = 0;\n    for (const e of q) {\n        total += e;\n    }\n    return isPalin && total <= w;\n};\n",
            "export const smallestChange = (arr: Array<number>): number => {\n    let ans = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i] !== arr[arr.length - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;\n}\n",
            "export const totalMatch = (lst1: Array<string>, lst2: Array<string>): Array<string> => {\n    let cnt1 = 0;\n    for (const s of lst1) {\n        cnt1 += s.length;\n    }\n    let cnt2 = 0;\n    for (const s of lst2) {\n        cnt2 += s.length;\n    }\n    if (cnt1 <= cnt2) {\n        return lst1;\n    }\n    return lst2;\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const isMultiplyPrime = (a: number): boolean => {\n    let cnt = 0;\n    for (let i = 2; i <= a; i++) {\n        if (isPrime(i)) {\n            while (a % i === 0) {\n                cnt++;\n                a /= i;\n            }\n        }\n    }\n    return cnt === 3;\n}\n",
            "export const isSimplePower = (x: number, n: number): boolean => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}\n",
            "export const isCube = (a: number): boolean => {\n    a = Math.abs(a);\n    const root = Math.round(Math.pow(a, 1.0 / 3.0));\n    return root * root * root == a;\n}\n",
            "export const hexKey = (num: string): number => {\n    let result = 0;\n    for (const x of num) {\n        if (x === \"2\" || x === \"3\" || x === \"5\" || x === \"7\" || x === \"B\" || x === \"D\") {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "export const decimalToBinary = (dec: number): string => {\n    const binary = dec.toString(2);\n    return `db${binary}db`;\n}\n",
            "export const isHappy = (s: string): boolean => {\n    if (s.length < 3) {\n        return false;\n    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n};\n",
            "export const numericalLetterGrade = (grades: Array<number>): Array<string> => {\n    const result: Array<string> = [];\n    for (const g of grades) {\n        if (g === 4.0) {\n            result.push(\"A+\");\n        } else if (g > 3.7) {\n            result.push(\"A\");\n        } else if (g > 3.3) {\n            result.push(\"A-\");\n        } else if (g > 3.0) {\n            result.push(\"B+\");\n        } else if (g > 2.7) {\n            result.push(\"B\");\n        } else if (g > 2.3) {\n            result.push(\"B-\");\n        } else if (g > 2.0) {\n            result.push(\"C+\");\n        } else if (g > 1.7) {\n            result.push(\"C\");\n        } else if (g > 1.3) {\n            result.push(\"C-\");\n        } else if (g > 1.0) {\n            result.push(\"D+\");\n        } else if (g > 0.7) {\n            result.push(\"D\");\n        } else if (g > 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n};\n",
            "export const primeLength = (s: string): boolean => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(length)) + 1; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const startsOneEnds = (n: number): number => {\n    if (n === 1) {\n        return 1;\n    }\n    return 2 * 9 * Math.pow(10, n - 2);\n}\n",
            "export const solve = (n: number): string => {\n    let digitsSum = 0;\n    for (const d of n.toString()) {\n        digitsSum += parseInt(d);\n    }\n    return digitsSum.toString(2);\n}\n",
            "export const add = (lst: Array<number>): number => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1 && lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const antiShuffle = (s: string): string => {\n    const words: Array<string> = [];\n    for (const word of s.split(\" \")) {\n        const runes: Array<string> = Array.from(word);\n        runes.sort((a, b) => a.localeCompare(b));\n        words.push(runes.join(\"\"));\n    }\n    return words.join(\" \");\n}\n",
            "export const getRow = (lst: Array<Array<number>>, x: number): Array<Array<number>> => {\n    const coords: Array<Array<number>> = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    coords.sort((a, b) => a[0] < b[0] || (a[0] === b[0] && a[1] > b[1]));\n    return coords;\n}\n",
            "export const sortArray = (arr: Array<number>): Array<number> => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) {\n        return arr.sort((a, b) => b - a);\n    }\n    else {\n        return arr.sort((a, b) => a - b);\n    }\n}\n",
            "export const encrypt = (s: string): string => {\n    const result: Array<string> = [];\n    for (const ch of s) {\n        const shifted = ch.charCodeAt(0) + 4;\n        if (shifted > \"z\".charCodeAt(0)) {\n            result.push(String.fromCharCode(shifted - 26));\n        } else {\n            result.push(String.fromCharCode(shifted));\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const nextSmallest = (lst: Array<number>): number | null => {\n    const sl: Array<number> = [];\n    const m: { [key: number]: boolean } = {};\n    for (const e of lst) {\n        if (!m[e]) {\n            sl.push(e);\n            m[e] = true;\n        }\n    }\n    sl.sort((a, b) => a - b);\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n};\n",
            "export const isBored = (s: string): number => {\n    const sentences = split(s, /[.!?]\\s*/);\n    let result = 0;\n    for (const sentence of sentences) {\n        if (sentence.length >= 2 && sentence.slice(0, 2) === \"I \") {\n            result++;\n        }\n    }\n    return result;\n};\n",
            "export const anyInt = (x: any, y: any, z: any): boolean => {\n    if (typeof x === \"number\" && typeof y === \"number\" && typeof z === \"number\") {\n        if ((x + y === z) || (x + z === y) || (y + z === x)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const encode = (message: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    const result: Array<string> = [];\n    for (const ch of message) {\n        if (ch.match(/[a-zA-Z]/)) {\n            const ch1 = ch.toUpperCase() === ch ? ch.toLowerCase() : ch.toUpperCase();\n            if (vowels.includes(ch1)) {\n                result.push(String.fromCharCode(ch1.charCodeAt(0) + 2));\n            } else {\n                result.push(ch1);\n            }\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\nexport const skjkasdkd = (lst: Array<number>): number => {\n    const primes = lst.filter((n) => isPrime(n));\n    if (primes.length === 0) {\n        return 0;\n    }\n    const largest = Math.max(...primes).toString();\n    return largest.split(\"\").reduce((acc, digit) => acc + parseInt(digit), 0);\n};\n",
            "export const checkDictCase = (d: Map<string, string>): boolean => {\n    if (d.size === 0) {\n        return false;\n    }\n    const keys = Array.from(d.keys());\n    return keys.every((c) => c.toLowerCase() === c) || keys.every((c) => c.toUpperCase() === c);\n};\n",
            "export const countUpTo = (n: number): Array<number> => {\n    const primes: Array<number> = [];\n    for (let num = 2; num < n; num++) {\n        if (primes.every((p) => num % p !== 0)) {\n            primes.push(num);\n        }\n    }\n    return primes;\n};\n",
            "export const multiply = (a: number, b: number): number => {\n    return Math.abs(a) % 10 * Math.abs(b) % 10;\n}\n",
            "export const countUpper = (s: string): number => {\n    const vowels = \"AEIOU\";\n    let result = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (i % 2 === 0 && vowels.includes(s[i])) {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "export const closestInteger = (value: string): number => {\n    const num = parseFloat(value);\n    if (num >= 0) {\n        return Math.floor(num + 0.5);\n    } else {\n        return Math.ceil(num - 0.5);\n    }\n}\n",
            "export const makeAPile = (n: number): Array<number> => {\n    const result: Array<number> = [];\n    for (let i = 0; i < n; i++) {\n        result.push(n + 2 * i);\n    }\n    return result;\n}\n",
            "export const wordsString = (s: string): Array<string> => {\n    return s.split(re.compile(\",| \")).filter((w) => w.length > 0);\n};\n",
            "export const chooseNum = (x: number, y: number): number => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    if (x !== y) {\n        return y - 1;\n    }\n    return -1;\n};\n",
            "export const roundedAvg = (n: number, m: number): string | null => {\n    if (n > m) {\n        return null;\n    }\n    const rAvg = Math.round((m + n) / 2);\n    return rAvg.toString(2).slice(1);\n}\n",
            "export const uniqueDigits = (x: Array<number>): Array<number> => {\n    const result: Array<number> = [];\n    for (const num of x) {\n        if (allDigitsOdd(num.toString())) {\n            result.push(num);\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}\nexport const allDigitsOdd = (s: string): boolean => {\n    for (const r of s) {\n        if (r % 2 === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const byLength = (arr: Array<number>): Array<string> => {\n    const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const sortedArr = arr.filter((x) => 1 <= x && x <= 9).sort((a, b) => b - a);\n    return sortedArr.map((x) => digitNames[x - 1]);\n};\n",
            "export const f = (n: number): Array<number> => {\n    const nums = Array.from({ length: n }, (_, i) => i + 1);\n    return nums.map((i) => (i % 2 !== 0 ? nums.slice(0, i).reduce((a, b) => a + b) : nums.slice(0, i).reduce((a, b) => a * b)));\n}\n",
            "export const isPalindrome = (txt: string): boolean => {\n    return txt === txt.split(\"\").reverse().join(\"\");\n}\nexport const evenOddPalindrome = (n: number): Array<number> => {\n    const cnt = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2]++;\n        }\n    }\n    return cnt;\n}\n",
            "export const digitsSum = (n: number): number => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split(\"\").reduce((acc, cur) => acc + parseInt(cur), 0);\n    } else {\n        return 2 * parseInt(nStr.slice(0, 2)) + digitsSum(Math.abs(n));\n    }\n}\nexport const countNums = (arr: Array<number>): number => {\n    return arr.filter((n) => digitsSum(n) > 0).length;\n}\n",
            "export const moveOneBall = (arr: Array<number>): boolean => {\n    if (arr.length === 0) {\n        return true;\n    }\n    const sortedArr = [...arr].sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.slice(i).every((v, j) => v === sortedArr[j]) && arr.slice(0, i).every((v, j) => v === sortedArr[arr.length - i + j])) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const canExchange = (lst1: Array<number>, lst2: Array<number>): string => {\n    let oddCnt = 0;\n    let evenCnt = 0;\n    for (const num of lst1) {\n        if (num % 2 !== 0) {\n            oddCnt++;\n        }\n    }\n    for (const num of lst2) {\n        if (num % 2 === 0) {\n            evenCnt++;\n        }\n    }\n    if (evenCnt >= oddCnt) {\n        return \"YES\";\n    }\n    return \"NO\";\n};\n",
            "export const histogram = (test: string): Map<string, number> => {\n    const freq = new Map<string, number>();\n    const words = test.split(\" \").filter((w) => w.length > 0);\n    for (const w of words) {\n        freq.set(w, (freq.get(w) || 0) + 1);\n    }\n    const result = new Map<string, number>();\n    if (freq.size > 0) {\n        let maxFreq = 0;\n        for (const v of freq.values()) {\n            if (v > maxFreq) {\n                maxFreq = v;\n            }\n        }\n        for (const [k, v] of freq.entries()) {\n            if (v === maxFreq) {\n                result.set(k, v);\n            }\n        }\n    }\n    return result;\n};\n",
            "export const reverseDelete = (s: string, c: string): Array<string> => {\n    const s1 = s.split(\"\").filter((ch) => !c.includes(ch)).join(\"\");\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"];\n}\n",
            "export const oddCount = (lst: Array<string>): Array<string> => {\n    const result: Array<string> = [];\n    for (const num of lst) {\n        const n = num.split(\"\").reduce((acc, d) => acc + (d.charCodeAt(0) % 2 === 1 ? 1 : 0), 0);\n        const rs = \"the number of odd elements in the string i of the input.\";\n        result.push(rs.replace(\"i\", String(n)));\n    }\n    return result;\n}\n",
            "export const minSubArraySum = (nums: Array<number>): number => {\n    let minSum = 0;\n    let curSum = 0;\n    for (const n of nums) {\n        curSum = Math.min(curSum + n, 0);\n        minSum = Math.min(curSum, minSum);\n    }\n    if (minSum === 0) {\n        minSum = Math.min(...nums);\n    }\n    return minSum;\n}\n",
            "export const maxFill = (grid: Array<Array<number>>, capacity: number): number => {\n    return grid.reduce((acc, arr) => acc + Math.ceil(arr.reduce((acc, num) => acc + num, 0) / capacity), 0);\n}\n",
            "export const countOnes = (num: number): number => {\n    return num.toString(2).split(\"1\").length - 1;\n}\nexport const sortArray = (arr: Array<number>): Array<number> => {\n    return arr.sort((a, b) => countOnes(a) - countOnes(b) || a - b);\n}\n",
            "export const selectWords = (s: string, n: number): Array<string> => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = s.split(\" \");\n    const result: Array<string> = [];\n    for (const w of words) {\n        if (w.length > 0) {\n            let consonantCount = 0;\n            for (const c of w) {\n                if (consonants.includes(c.toLowerCase())) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount === n) {\n                result.push(w);\n            }\n        }\n    }\n    return result;\n}\n",
            "export const getClosestVowel = (word: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n};\n",
            "export const matchParens = (lst: Array<string>): string => {\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    if (check(s1) || check(s2)) {\n        return \"Yes\";\n    }\n    return \"No\";\n};\nconst check = (s: string): boolean => {\n    let depth = 0;\n    for (const ch of s) {\n        if (ch === \"(\") {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n};\n",
            "export const maximum = (arr: Array<number>, k: number): Array<number> => {\n    if (k === 0) {\n        return [];\n    }\n    return arr.sort((a, b) => b - a).slice(-k);\n}\n",
            "export const solution = (lst: Array<number>): number => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const addElements = (arr: Array<number>, k: number): number => {\n    let result = 0;\n    for (const n of arr.slice(0, k)) {\n        if (n.toString().length <= 2) {\n            result += n;\n        }\n    }\n    return result;\n}\n",
            "export const getOddCollatz = (n: number): Array<number> => {\n    const collatz: Array<number> = [1];\n    while (n !== 1) {\n        if (n % 2 !== 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = Math.floor(n / 2);\n        }\n    }\n    return collatz.sort((a, b) => a - b);\n}\n",
            "export const validDate = (date: string): boolean => {\n    if (date.length !== 10 || date[2] !== \"-\" || date[5] !== \"-\") {\n        return false;\n    }\n    const m = parseInt(date.slice(0, 2));\n    const d = parseInt(date.slice(3, 5));\n    if (m in [1, 3, 5, 7, 8, 10, 12] && d >= 1 && d <= 31) {\n        return true;\n    }\n    if (m in [4, 6, 9, 11] && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m === 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "export const splitWords = (txt: string): Array<string> => {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        const result: Array<string> = [];\n        for (const c of txt) {\n            if (c.toLowerCase() === c && c.charCodeAt(0) % 2 === 0) {\n                result.push(c);\n            }\n        }\n        return [result.length.toString()];\n    }\n};\n",
            "export const isSorted = (lst: Array<number>): boolean => {\n    if (!lst.every((x, i) => i === 0 || lst[i - 1] <= x)) {\n        return false;\n    }\n    const freq = {};\n    for (const i of lst) {\n        freq[i] = (freq[i] || 0) + 1;\n    }\n    return Math.max(...Object.values(freq), 0) <= 2;\n};\n",
            "export const intersection = (interval1: Array<number>, interval2: Array<number>): string => {\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n}\n",
            "export const prodSigns = (arr: Array<number>): number | null => {\n    if (arr.length === 0) {\n        return null;\n    }\n    if (arr.includes(0)) {\n        return 0;\n    }\n    const sign = arr.filter((n) => n < 0).length % 2 === 1 ? -1 : 1;\n    return sign * arr.reduce((acc, n) => acc + Math.abs(n), 0);\n};\n",
            "export const minPath = (grid: Array<Array<number>>, k: number): Array<number> => {\n    const n = grid.length;\n    let minVal = n * n + 1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                const temp: Array<number> = [];\n                if (i !== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j !== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i !== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j !== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                minVal = Math.min(...temp);\n            }\n        }\n    }\n    const result: Array<number> = [];\n    for (let i = 0; i < k; i++) {\n        result.push(i % 2 === 0 ? 1 : minVal);\n    }\n    return result;\n}\n",
            "export const tri = (n: number): Array<number> => {\n    if (n === 0) {\n        return [1];\n    }\n    const seq: Array<number> = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "export const digits = (n: number): number => {\n    const odds = [...n.toString()].filter((d) => parseInt(d) % 2 === 1).map((d) => parseInt(d));\n    return odds.reduce((x, y) => x * y, 1) || 0;\n}\n",
            "export const isNested = (s: string): boolean => {\n    const openIdx: Array<number> = [];\n    const closeIdx: Array<number> = [];\n    for (let i = 0; i < s.length; i++) {\n        const ch = s[i];\n        if (ch === '[') {\n            openIdx.push(i);\n        } else if (ch === ']') {\n            closeIdx.push(i);\n        }\n    }\n    closeIdx.reverse();\n    let cnt = 0;\n    let i = 0;\n    const l = closeIdx.length;\n    for (const idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "export const sumSquares = (lst: Array<number>): number => {\n    let result = 0;\n    for (const n of lst) {\n        result += Math.pow(Math.ceil(n), 2);\n    }\n    return result;\n}\n",
            "export const checkIfLastCharIsALetter = (txt: string): boolean => {\n    if (!txt) {\n        return false;\n    }\n    const last = txt.substring(txt.lastIndexOf(\" \") + 1);\n    return last.length === 1 && last[0].match(/[a-zA-Z]/);\n};\n",
            "export const canArrange = (arr: Array<number>): number => {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    const idx: Array<number> = [];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            idx.push(i);\n        }\n    }\n    if (idx.length === 0) {\n        return -1;\n    }\n    return idx[idx.length - 1];\n}\n",
            "export const largestSmallestIntegers = (lst: Array<number>): Array<number | null> => {\n    const neg = lst.filter((i) => i < 0);\n    const pos = lst.filter((i) => i > 0);\n    const maxNeg = neg.length > 0 ? Math.max(...neg) : null;\n    const minPos = pos.length > 0 ? Math.min(...pos) : null;\n    return [maxNeg, minPos];\n};\n",
            "export const compareOne = (a: any, b: any): number | null => {\n    const a1 = anyToReal(a);\n    const b1 = anyToReal(b);\n    if (a1 === b1) {\n        return null;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n};\nconst anyToReal = (o: any): number => {\n    if (typeof o === \"string\") {\n        return parseFloat(o.replace(\",\", \".\"));\n    } else if (typeof o === \"number\") {\n        return o;\n    } else {\n        throw new Error(\"Type Error\");\n    }\n};\n",
            "export const isEqualToSumEven = (n: number): boolean => {\n    return n % 2 === 0 && n >= 8;\n}\n",
            "export const specialFactorial = (n: number): number => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "export const fixSpaces = (txt: string): string => {\n    return re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\");\n}\n",
            "export const fileNameCheck = (fileName: string): string => {\n    const suf = [\"txt\", \"exe\", \"dll\"];\n    const lst = fileName.split(\".\");\n    if (lst.length !== 2 || !contains(suf, lst[1]) || lst[0].length === 0 || !isLetter(lst[0][0]) || countDigits(lst[0]) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n};\nconst contains = (s: Array<string>, e: string): boolean => {\n    for (const a of s) {\n        if (a === e) {\n            return true;\n        }\n    }\n    return false;\n};\nconst isLetter = (c: string): boolean => {\n    return c.charCodeAt(0) >= \"a\".charCodeAt(0) && c.charCodeAt(0) <= \"z\".charCodeAt(0);\n};\nconst countDigits = (s: string): number => {\n    return s.split(\"\").filter((c) => c >= \"0\" && c <= \"9\").length;\n};\n",
            "export const sumSquares = (lst: Array<number>): number => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        const e = lst[i];\n        if (i % 3 === 0) {\n            result += e * e;\n        } else if (i % 4 === 0) {\n            result += e * e * e;\n        } else {\n            result += e;\n        }\n    }\n    return result;\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const wordsInSentence = (sentence: string): string => {\n    const words = sentence.split(\" \");\n    return words.filter((w) => isPrime(w.length)).join(\" \");\n};\n",
            "export const simplify = (x: string, n: string): boolean => {\n    const xs = x.split(\"/\");\n    const ns = n.split(\"/\");\n    const num = parseInt(xs[0]) * parseInt(ns[0]);\n    const den = parseInt(xs[1]) * parseInt(ns[1]);\n    return num % den === 0;\n}\n",
            "export const digitsSum = (n: number): number => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split(\"\").reduce((acc, cur) => acc + parseInt(cur), 0);\n    } else {\n        return 2 * parseInt(nStr.slice(0, 2)) + digitsSum(Math.abs(n));\n    }\n}\nexport const orderByPoints = (nums: Array<number>): Array<number> => {\n    return nums.sort((a, b) => digitsSum(a) - digitsSum(b));\n}\n",
            "export const specialFilter = (nums: Array<number>): number => {\n    const odds = \"13579\";\n    let result = 0;\n    for (const n of nums) {\n        if (n > 10 && n % 2 === 1 && odds.includes(n.toString()[0])) {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "export const getMaxTriples = (n: number): number => {\n    const c = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        const a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return (\n        c[0] * c[1] * c[2] +\n        (c[0] * (c[0] - 1) * (c[0] - 2) +\n            c[1] * (c[1] - 1) * (c[1] - 2) +\n            c[2] * (c[2] - 1) * (c[2] - 2)) /\n            6\n    );\n};\n",
            "export const bf = (planet1: string, planet2: string): Array<string> => {\n    const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.includes(planet1) || !names.includes(planet2)) {\n        return [];\n    }\n    let l = names.indexOf(planet1);\n    let r = names.indexOf(planet2);\n    if (l > r) {\n        l = r;\n        r = l;\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n};\n",
            "export const sortedListSum = (lst: Array<string>): Array<string> => {\n    const result: Array<string> = [];\n    for (const s of lst) {\n        if (s.length % 2 === 0) {\n            result.push(s);\n        }\n    }\n    result.sort((a, b) => {\n        if (a.length === b.length) {\n            return a < b ? -1 : 1;\n        }\n        return a.length < b.length ? -1 : 1;\n    });\n    return result;\n}\n",
            "export const xOrY = (n: number, x: number, y: number): number => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)) + 1; i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n};\n",
            "export const doubleTheDifference = (lst: Array<number>): number => {\n    let result = 0;\n    for (const n of lst) {\n        if (n >= 0 && n % 2 === 1) {\n            result += n * n;\n        }\n    }\n    return result;\n}\n",
            "export const compare = (game: Array<number>, guess: Array<number>): Array<number> => {\n    return game.map((x, i) => Math.abs(x - guess[i]));\n}\n",
            "export const strongestExtension = (className: string, extensions: Array<string>): string => {\n    let maxS = Number.NEGATIVE_INFINITY;\n    let maxExt = \"\";\n    for (const ext of extensions) {\n        const upper = ext.split(\"\").filter((c) => c.toUpperCase() === c).length;\n        const lower = ext.split(\"\").filter((c) => c.toLowerCase() === c).length;\n        const s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return `${className}.${maxExt}`;\n};\n",
            "export const cycpatternCheck = (a: string, b: string): boolean => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; i++) {\n        if (a.includes(b.slice(i) + b.slice(0, i))) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const evenOddCount = (num: number): Array<number> => {\n    const ds = Math.abs(num).toString();\n    const even = ds.split(\"\").filter((d) => d.charCodeAt(0) % 2 === 0).length;\n    return [even, ds.length - even];\n};\n",
            "export const intToMiniRoman = (num: number): string => {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    const res: Array<string> = [];\n    for (let i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.push(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join(\"\");\n}\n",
            "export const rightAngleTriangle = (a: number, b: number, c: number): boolean => {\n    const s = [a, b, c].sort();\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}\n",
            "export const findMax = (words: Array<string>): string => {\n    let maxCnt = 0;\n    let maxW = \"\";\n    for (const w of words) {\n        const cnt = new Set(w).size;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt === maxCnt) {\n            maxW = w < maxW ? w : maxW;\n        }\n    }\n    return maxW;\n};\n",
            "export const eat = (num: number, need: number, remaining: number): Array<number> => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    }\n    return [num + remaining, 0];\n}\n",
            "export const doAlgebra = (operators: Array<string>, operands: Array<number>): number => {\n    const ops = operators.slice();\n    const nums = operands.slice();\n    let i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] === \"**\") {\n            nums[i] = Math.pow(nums[i], nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        } else if (ops[i] === \"//\") {\n            nums[i] = Math.floor(nums[i] / nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        } else if (ops[i] === \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n};\n",
            "export const solve = (s: string): string => {\n    if (!s.match(/[a-zA-Z]/)) {\n        return reverse(s);\n    }\n    const result: Array<string> = [];\n    for (const ch of s) {\n        if (!ch.match(/[a-zA-Z]/)) {\n            result.push(ch);\n        } else if (ch.match(/[A-Z]/)) {\n            result.push(ch.toLowerCase());\n        } else if (ch.match(/[a-z]/)) {\n            result.push(ch.toUpperCase());\n        }\n    }\n    return result.join(\"\");\n}\nexport const reverse = (s: string): string => {\n    const result: Array<string> = [];\n    for (let i = s.length - 1; i >= 0; i--) {\n        result.push(s[i]);\n    }\n    return result.join(\"\");\n}\n",
            "export const stringToMd5 = (txt: string): string | null => {\n    if (txt.length === 0) {\n        return null;\n    }\n    const md5_encoded = crypto.createHash(\"md5\").update(txt).digest(\"hex\");\n    return md5_encoded;\n};\n",
            "export const generateIntegers = (a: number, b: number): Array<number> => {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n    const result: Array<number> = [];\n    for (let i = lower; i <= upper; i++) {\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n"
        ]
    }
}