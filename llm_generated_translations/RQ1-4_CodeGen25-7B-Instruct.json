{
    "cpp": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    for ch in paren_string:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split('(')\n    for group in paren_groups:\n        if group:\n            depth = 0\n            for ch in group:\n                if ch == '(':\n                    depth += 1\n                elif ch == ')':\n                    depth -= 1\n            result.append(depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    result = []\n    for s in strs:\n        if substring in s:\n            result.append(s)\n    return result\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = reduce(lambda x, y: x * y, numbers)\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = 0\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(max(len(a), len(b))):\n        a_bit = a[i] if i < len(a) else '0'\n        b_bit = b[i] if i < len(b) else '0'\n        result += str(int(a_bit) ^ int(b_bit))\n    return result\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    a = list(range(n + 1))\n    return accumulate(a, lambda s, i: str(s) + (\" \" if s else \"\") + str(i))\n",
            "def count_distinct_characters(s: str) -> int:\n    dc = set()\n    for c in s.lower():\n        dc.add(c)\n    return len(dc)\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1\n    }\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        result.append(durations[note])\n    return result\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = defaultdict(int)\n    for i, word in enumerate([\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]):\n        num_dict[word] = i\n    num_list = [num for num in numbers.split() if num in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = inf\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = reduce(lambda a, b: min(a, b), numbers)\n    max_num = reduce(lambda a, b: max(a, b), numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    filtered_values = []\n    for value in values:\n        try:\n            int_value = int(value)\n            filtered_values.append(int_value)\n        except (ValueError, TypeError):\n            continue\n    return filtered_values\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = defaultdict(int)\n    for num in numbers:\n        counts[num] += 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return reduce(lambda x, y: x + y, strs, '')\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    filtered = []\n    for s in strs:\n        if s.startswith(prefix_str):\n            filtered.append(s)\n    return filtered\n",
            "def get_positive(l: List[int]) -> List[int]:\n    result = []\n    for e in l:\n        if e > 0:\n            result.append(e)\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(floor(sqrt(n))) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = []\n    for i in range(0, len(l), 3):\n        sorted_third.append(l[i])\n    sorted_third.sort()\n    result = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(sorted_third[i // 3])\n        else:\n            result.append(l[i])\n    return result\n",
            "def list_unique(l: List[int]) -> List[int]:\n    result = l[:]\n    result.sort()\n    result = list(set(result))\n    return result\n",
            "def max_element(l: List[int]) -> int:\n    if not l:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count('7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = [l[i] for i in range(0, len(l), 2)]\n    sort(sorted_even)\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(sorted_even[i // 2])\n        else:\n            result.append(l[i])\n    return result\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 <= len(s):\n            result += s[i + 1:i + 3] + s[i]\n        else:\n            result += s[i:]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    result = []\n    for i in l:\n        result.append(i + 1)\n    return result\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    counter = Counter(l)\n    for num, freq in counter.items():\n        if counter.get(-num) is not None and freq > 1:\n            return True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return float(a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(accumulate(fib))\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = l[:]\n    sl.sort()\n    if len(sl) % 2 != 0:\n        return sl[len(sl) // 2]\n    else:\n        return (sl[len(sl) // 2] + sl[len(sl) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            result += chr((ord(ch) - 97 + 5) % 26 + 97)\n        else:\n            result += ch\n    return result\ndef decode_shift(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            result += chr((ord(ch) - 97 + 21) % 26 + 97)\n        else:\n            result += ch\n    return result\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in txt:\n        if ch not in vowels:\n            result += ch\n    return result\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "@lru_cache(maxsize=None)\ndef fib(n: int) -> int:\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i + 1] - l[i] for i in range(len(l) - 1)]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    s1 = set(l1)\n    s2 = set(l2)\n    return list(s1.intersection(s2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n /= i\n        else:\n            i += 1\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    result = 0\n    for i in range(n + 1):\n        result += i\n    return result\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] in vowels or (i == len(s) - 1 and s[i].lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) if c.isdigit() else 0 for c in s)\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split()\n    apples = int(words[words.index(\"apples\") + 1])\n    oranges = int(words[words.index(\"oranges\") + 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = list(filter(lambda n: n % 2 == 0, arr))\n    if not evens:\n        return []\n    min_even = reduce(lambda a, b: a if a < b else b, evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = defaultdict(int)\n    for n in lst:\n        freqs[n] += 1\n    good_vals = []\n    for n, count in freqs.items():\n        if count >= n:\n            good_vals.append(n)\n    if not good_vals:\n        return -1\n    return max(good_vals)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst\n    sl.sort()\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    idxs = list(range(len(q)))\n    is_palin = all(q[i] == q[-i - 1] for i in idxs)\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = reduce(lambda acc, s: acc + len(s), lst1, 0)\n    cnt2 = reduce(lambda acc, s: acc + len(s), lst2, 0)\n    return cnt1 <= cnt2 and lst1 or lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a+1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = round(pow(a, 1.0 / 3))\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)[2:]\n    binary = binary.rstrip('0')\n    return f\"db{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append(\"A+\")\n        elif grade > 3.7:\n            result.append(\"A\")\n        elif grade > 3.3:\n            result.append(\"A-\")\n        elif grade > 3.0:\n            result.append(\"B+\")\n        elif grade > 2.7:\n            result.append(\"B\")\n        elif grade > 2.3:\n            result.append(\"B-\")\n        elif grade > 2.0:\n            result.append(\"C+\")\n        elif grade > 1.7:\n            result.append(\"C\")\n        elif grade > 1.3:\n            result.append(\"C-\")\n        elif grade > 1.0:\n            result.append(\"D+\")\n        elif grade > 0.7:\n            result.append(\"D\")\n        elif grade > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(floor(sqrt(length))) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * pow(10, n - 2)\n",
            "def solve(n: int) -> str:\n    n_str = str(n)\n    digits_sum = sum(int(d) for d in n_str)\n    binary = bin(digits_sum)[2:]\n    binary = binary.lstrip('0')\n    return binary\n",
            "def add(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split()\n    for word in words:\n        word.sort()\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda a: (a[0], a[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    result = arr.copy()\n    if ((arr[0] + arr[-1]) % 2 == 0):\n        result.sort(reverse=True)\n    else:\n        result.sort()\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ch + 4\n        if shifted > 'z':\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = list(lst)\n    sl.sort()\n    sl = list(set(sl))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    re_str = r\"[.!?]\\s*\"\n    sentences = re.findall(re_str, s)\n    return sum(1 for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \")\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if x.__class__.__name__ == 'int' and y.__class__.__name__ == 'int' and z.__class__.__name__ == 'int':\n        int_x = x\n        int_y = y\n        int_z = z\n        if ((int_x + int_y == int_z) or (int_x + int_z == int_y) or (int_y + int_z == int_x)):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower()\n            if ch1 in vowels:\n                ch1 = ch1 + 2\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = str(max(primes))\n    return sum(int(d) for d in largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if d.empty():\n        return False\n    return all(all(c.islower() for c in k) for k, v in d.items()) or all(all(c.isupper() for c in k) for k, v in d.items())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * abs(b) % 10\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    pile = []\n    for i in range(n):\n        pile.append(n + 2 * i)\n    return pile\n",
            "def words_string(s: str) -> List[str]:\n    re_str = r\"[, ]\"\n    words = re.split(re_str, s)\n    return [w for w in words if w]\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y - 1 if y != x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) // 2 + (n + m) % 2\n    return format(r_avg, 'b').zfill(32)\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(int(digit) % 2 != 0 for digit in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    result = []\n    for num in x:\n        if all_digits_odd(str(num)):\n            result.append(num)\n    result.sort()\n    return result\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [num for num in arr if 1 <= num and num <= 9]\n    sorted_arr.sort(reverse=True)\n    result = [digit_names[num-1] for num in sorted_arr]\n    return result\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 != 0:\n            result.append(accumulate(nums[:i]))\n        else:\n            result.append(accumulate(nums[:i], initial=1, func=lambda x, y: x * y))\n    return result\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    if n >= 0:\n        return sum(int(d) for d in str(n))\n    else:\n        return (digits_sum(abs(n) // 10) + abs(n) % 10) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if digits_sum(n) > 0])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    counter = Counter(arr)\n    for i in range(len(arr)):\n        if counter[arr[i]] == 1:\n            if all(arr[j] > arr[i] for j in range(i)) and all(arr[j] < arr[i] for j in range(i + 1, len(arr))):\n                return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2 != 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = defaultdict(int)\n    for c in test:\n        freq[c] += 1\n    result = {}\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = s.replace(c, '')\n    return [s1, \"yes\" if s1 == s1[::-1] else \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(int(c) for c in num)\n        rs = \"the number of odd elements in the string \" + num + \" of the input.\"\n        rs = rs.replace(\"i\", str(n)[0])\n        result.append(rs)\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(sum(ceil(sum(row) / capacity) for row in grid))\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count('1')\ndef sort_array(arr: List[int]) -> List[int]:\n    result = arr.copy()\n    result.sort(key=lambda x: count_ones(x))\n    return result\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    result = []\n    for word in words:\n        if sum(c in consonants for c in word.lower()) == n:\n            result.append(word)\n    return result\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if vowels.find(word[i]) != -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    def check(s: str) -> bool:\n        depth = 0\n        for ch in s:\n            if ch == '(':\n                depth += 1\n            elif ch == ')':\n                depth -= 1\n            if depth < 0:\n                return False\n        return depth == 0\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return 'Yes' if check(s1) or check(s2) else 'No'\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = arr[:]\n    sorted_arr.sort()\n    ans = []\n    for i in range(len(arr) - k, len(arr)):\n        ans.append(sorted_arr[i])\n    return ans\n",
            "def solution(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            result += lst[i]\n    return result\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return reduce(lambda x, y: x + (y <= 2 and y or 0), arr[:k], 0)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12:\n        return d >= 1 and d <= 31\n    if m == 4 or m == 6 or m == 9 or m == 11:\n        return d >= 1 and d <= 30\n    if m == 2:\n        return d >= 1 and d <= 29\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if txt.find(\" \") != -1:\n        return txt.split()\n    elif txt.find(\",\") != -1:\n        return txt.split(\",\")\n    else:\n        return [str(sum(1 for c in txt if c.islower() and c % 2 == 0))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not is_sorted(lst):\n        return False\n    freq = defaultdict(int)\n    for i in lst:\n        freq[i] += 1\n    return len(lst) == 0 or max(freq.values()) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = sum(filter(lambda n: n < 0, arr)) % 2 == 1 and -1 or 1\n    return sign * reduce(lambda a, b: a + abs(b), arr, 0)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = reduce(lambda x, y: min(x, y), temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 and 1 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = []\n    for c in str(n):\n        d = int(c) - int('0')\n        if d % 2 == 1:\n            odds.append(d)\n    return len(odds) * sum(odds) if odds else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i in range(len(s)):\n        if s[i] == '[':\n            open_idx.append(i)\n        elif s[i] == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return reduce(lambda acc, n: acc + pow(int(n + 0.5), 2), lst, 0)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if txt.empty():\n        return False\n    last = txt[txt.rfind(\" \") + 1:]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = []\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            idx.append(i)\n    return idx[-1] if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if a.type() == 'string' or b.type() == 'string':\n        a_str = a.cast('double')\n        b_str = b.cast('double')\n        if a_str == b_str:\n            return None\n        elif a_str > b_str:\n            return a_str\n        else:\n            return b_str\n    else:\n        a_num = a.cast('double')\n        b_num = b.cast('double')\n        if a_num == b_num:\n            return None\n        elif a_num > b_num:\n            return a_num\n        else:\n            return b_num\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    result = 1\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    result = txt\n    result = re.sub(r\"\\s{3,}\", \"-\", result)\n    result = re.sub(r\"\\s\", \"_\", result)\n    return result\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = []\n    for token in file_name.split('.'):\n        if token in suf:\n            lst.append(token)\n        else:\n            break\n    if len(lst) != 2 or not lst[1] in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or len(list(filter(lambda c: c.isdigit(), lst[0]))) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    words = [w for w in words if is_prime(len(w))]\n    return \" \".join(words)\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    if n >= 0:\n        return sum(int(d) for d in str(n))\n    else:\n        return (digits_sum(abs(n) // 100) + 1) * 2 + digits_sum(abs(n) % 100)\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(1 for n in nums if n > 10 and n % 2 == 1 and odds.find(str(n)[0]) != -1)\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l+1:r+1]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        if len(s) % 2 == 0:\n            result.append(s)\n    result.sort(key=lambda s: (len(s), s))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(floor(n**0.5)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n if n >= 0 and n % 2 == 1 else 0 for n in lst)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    result = []\n    for i in range(len(game)):\n        result.append(abs(game[i] - guess[i]))\n    return result\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = float('-inf')\n    max_ext = ''\n    for ext in extensions:\n        upper = sum(1 for c in ext if c in ascii_uppercase)\n        lower = sum(1 for c in ext if c in ascii_lowercase)\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i]) != -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 ,5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] ** 2 + s[1] ** 2 == s[2] ** 2\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators\n    nums = operands\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = \"\"\n    for c in s:\n        if not c.isalpha():\n            result += c\n        elif c.isupper():\n            result += c.lower()\n        else:\n            result += c.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    md5 = hashlib.md5(txt.encode()).hexdigest()\n    return md5\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    numbers = []\n    for n in range(lower, upper + 1):\n        if n % 2 == 0:\n            numbers.append(n)\n    return numbers\n"
        ]
    },
    "csharp": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \")\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for e in numbers:\n        n_product *= e\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(['1' if a[i] != b[i] else '0' for i in range(len(a))])\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if len(strs) == 0:\n        return None\n    longestS = strs[0]\n    for s in strs:\n        if len(s) > len(longestS):\n            longestS = s\n    return longestS\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = defaultdict(int)\n    durations[\"o\"] = 4\n    durations[\"o|\"] = 2\n    durations[\".|\"] = 1\n    notes = music_string.split(\" \")\n    return [durations[note] for note in notes if note]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = defaultdict(int)\n    for word, num in [(\"zero\", 0), (\"one\", 1), (\"two\", 2), (\"three\", 3), (\"four\", 4), (\"five\", 5), (\"six\", 6), (\"seven\", 7), (\"eight\", 8), (\"nine\", 9)]:\n        num_dict[word] = num\n    num_list = numbers.split(\" \")\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0] * len(numbers)\n    else:\n        return [float(num - min_num) / float(max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = defaultdict(int)\n    for num in numbers:\n        counts[num] += 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return ''.join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filterfalse(lambda x: x <= 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * math.pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while math.fabs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l, key=lambda x: x if x % 3 == 0 else reduce(lambda a, b: a + b, l[x::3]))\n    return [sorted_third[i] if i % 3 == 0 else l[i] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return list(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    if len(l) == 0:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += i.count('7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    def compare(a, b):\n        if a % 2 == 0 and b % 2 == 0:\n            return a - b\n        elif a % 2 == 0:\n            return -1\n        elif b % 2 == 0:\n            return 1\n        else:\n            return a - b\n    return sorted(l, key=cmp_to_key(compare))\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n            break\n        result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return int(pow(n, 2))\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = HashSet()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    digits.reverse()\n    return \"\".join(digits)\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    if n <= 1:\n        return n\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = fib[0] + fib[1] + fib[2]\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = SortedList(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        if ch.isalpha():\n            result.append(chr((ord(ch) - 97 + 5) % 26 + 97))\n        else:\n            result.append(ch)\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        if ch.isalpha():\n            result.append(chr((ord(ch) - 97 + 21) % 26 + 97))\n        else:\n            result.append(ch)\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([c for c in txt if c not in vowels])\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            c = a + b\n            a, b = b, c\n        return b\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = zip(l, l[1:])\n    return all(y - x <= 0 for x, y in diff) or all(y - x >= 0 for x, y in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return list(set(l1).intersection(set(l2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i <= sqrt(n):\n        if n % i == 0:\n            while n % i == 0:\n                n = n / i\n        i += 1\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [i for i in range(1, len(xs))]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        (a, b, c) = (b, c, a + b + c)\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1].lower()\n    else:\n        return x_str[len(x_str) - shift:].lower() + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = list(filter(lambda n: n % 2 == 0, arr))\n    if len(evens) == 0:\n        return []\n    min_even = reduce(lambda a, b: a if a < b else b, evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = defaultdict(int)\n    for n in lst:\n        freqs[n] += 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[-i-1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n        if cnt == 3:\n            return True\n    return False\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = int(pow(a, 1.0 / 3.0))\n    return root ** 3 == a\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)[2:]\n    return f\"db{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    digits = []\n    while n > 0:\n        digits.append(n % 2)\n        n //= 2\n    digits.reverse()\n    digits_sum = sum(map(lambda x: int(x.ToString()), digits))\n    return digits_sum.ToString(2)\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for x, i in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda x: (x[0], x[1]), reverse=True)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if ((arr[0] + arr[-1]) % 2 == 0):\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        index = ascii_lowercase.index(ch)\n        shifted = index + 4\n        if shifted > len(ascii_lowercase) - 1:\n            shifted -= len(ascii_lowercase)\n        result += ascii_lowercase[shifted]\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = list(set(lst))\n    sl.sort()\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r'[.!?]\\s*', s)\n    return sum(1 for s in sentences if s.startswith('I ') and len(s) >= 2)\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if type(x) == int and type(y) == int and type(z) == int:\n        int_x = x\n        int_y = y\n        int_z = z\n        if int_x + int_y == int_z or int_x + int_z == int_y or int_y + int_z == int_x:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower() if ch.lower() in vowels else ch.upper()\n            ch1 = ch1 + 2 if ch1 in vowels else ch1\n            ch1 = ch1.upper() if ch.lower() in ascii_lowercase else ch1\n            ch1 = ch1.lower() if ch.lower() in ascii_lowercase else ch1\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = str(max(primes))\n    return sum(int(d) for d in largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    return all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return list(range(n))\n",
            "def words_string(s: str) -> List[str]:\n    return re.split(r'[,\\s]', s)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y - 1 if y != x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = round((m + n) / 2.0)\n    return str(r_avg)\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [x for x in arr if 1 <= x and x <= 9]\n    sorted_arr.sort(reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [nums[i] if i % 2 != 0 else sum(nums[:i]) for i in range(n)]\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if digits_sum(n) > 0])\ndef digits_sum(n: int) -> int:\n    if n >= 0:\n        return sum(int(d) for d in str(n))\n    else:\n        return int(str(n)[:2]) * 2 + digits_sum(abs(n))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[len(arr) - i:]:\n            return True\n        elif arr[:i] == sorted_arr[:len(arr) - i]:\n            return False\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2 != 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = defaultdict(int)\n    words = test.split(\" \")\n    for w in words:\n        freq[w] += 1\n    result = Counter(freq)\n    if len(result) > 0:\n        max_freq = max(result.values())\n        result = {k: v for k, v in result.items() if v == max_freq}\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(filter(lambda ch: not c.__contains__(ch), s))\n    return [s1, 'yes' if Global.IsPalindrome(s1) else 'no']\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for d in num if int(d) % 2 == 1)\n        rs = \"the number of odd elements in the string \" + n.__str__() + \" of the input.\"\n        result.append(rs)\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: int(math.ceil(sum(arr) / capacity)), grid))\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count('1')\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: count_ones(x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(' ')\n    words = [w for w in words if w]\n    return [w for w in words if w.count(c) == n] for c in consonants]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if vowels.find(word[i]) != -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    if check(s1) or check(s2):\n        return \"Yes\"\n    return \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return sorted(arr)[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(i for i, (x, i) in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(islice(n for n in arr if len(str(n)) <= 2, k))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 0))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not lst or len(lst) == 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    freq = defaultdict(int)\n    for i in lst:\n        freq[i] += 1\n    return all(v <= 2 for v in freq.values())\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = arr.count(-1) % 2 == 1 and -1 or 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    digits = [int(d) for d in str(n)]\n    odds = [d for d in digits if d % 2 == 1]\n    return reduce((lambda x, y: x * y), odds) if len(odds) > 0 else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i in range(len(s)):\n        if s[i] == '[':\n            open_idx.append(i)\n        elif s[i] == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i0 = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i0 < l and idx < close_idx[i0]:\n            cnt += 1\n            i0 += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(int(math.pow(math.ceil(n), 2)) for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt or not txt.strip():\n        return False\n    last = txt[txt.rfind(' ') + 1:].strip()\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = float(str(a).replace(\",\", \".\"))\n    b1 = float(str(b).replace(\",\", \".\"))\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split('.')\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or lst[0].count(x for x in lst[0] if x.isdigit()) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join([w for w in words if is_prime(len(w))])\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    if n >= 0:\n        return sum(int(d) for d in str(n))\n    else:\n        return int(str(n)[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=lambda n: digits_sum(n))\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and odds.startswith(str(n)[0])])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if not (planet1 in names and planet2 in names):\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        (l, r) = (r, l)\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda s: (len(s), s))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i]) != -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = abs(num)\n    even = sum(1 for d in str(ds) if d % 2 == 0)\n    return [even, len(str(ds)) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0]**2 + s[1]**2 == s[2]**2\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = w if w < max_w else max_w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    while \"**\" in ops:\n        index = ops.index(\"**\")\n        nums[index] = nums[index] ** nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    while \"*\" in ops:\n        index = ops.index(\"*\")\n        nums[index] = nums[index] * nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    while \"//\" in ops:\n        index = ops.index(\"//\")\n        nums[index] = nums[index] // nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    while \"+\" in ops:\n        index = ops.index(\"+\")\n        nums[index] = nums[index] + nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    while \"-\" in ops:\n        index = ops.index(\"-\")\n        nums[index] = nums[index] - nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = []\n    for c in s:\n        if not c.isalpha():\n            result.append(c)\n        elif c.isupper():\n            result.append(c.lower())\n        else:\n            result.append(c.upper())\n    return ''.join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    txt_bytes = txt.encode(\"utf-8\")\n    md5_hash = md5(txt_bytes)\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [n for n in range(lower, upper + 1) if n % 2 == 0]\n"
        ]
    },
    "dart": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.remove(\"(\")\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num // 1\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \")\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for num in numbers:\n        n_product *= num\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = -float('inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[:i]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join([\"1\" if a[i] != b[i] else \"0\" for i in range(max(len(a), len(b)))])\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \")\n    return [durations[note] for note in notes if note.strip()]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [num for num in numbers.split(\" \") if num_dict.keys().__contains__(num)]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    numbers = numbers[:]\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [numbers[i - 1], numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    result = \"\"\n    for ch in re.split('\\s', s):\n        if not re.search('[a-zA-Z]', ch):\n            result += ch\n        elif re.search('[a-z]', ch):\n            result += ch.upper()\n        elif re.search('[A-Z]', ch):\n            result += ch.lower()\n    return result\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l[i] for i in range(len(l)) if i % 3 == 0)\n    return [l[i] if i % 3 != 0 else sorted_third[i//3] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    if not l:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    evens = [l[i] for i in range(len(l)) if i % 2 == 0]\n    evens.sort()\n    return [evens[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i+1:i+3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return pow(n, 2)\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == ''.join(txt.split())[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr((ord(ch) - 97 + 5) % 26 + 97))\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr((ord(ch) - 97 - 5) % 26 + 97))\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return ''.join([c for c in txt if c not in vowels])\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            c = a + b\n            a, b = b, c\n        return b\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diffs = [y - x for x, y in zip(l, l[1:])]\n    return all(d <= 0 for d in diffs) or all(d >= 0 for d in diffs)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1).intersection(set(l2))))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(List(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return xs[1:].map(lambda x, i: x * i).toList()\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    for _ in range(2, n + 1):\n        (a, b, c) = (b, c, a + b + c)\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or i == len(s) - 1 and s[i].lower() == \"y\":\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1].join(x_str)\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if re.search(r'[A-Z]', c))\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [n for n, freq in freqs.items() if freq >= n]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst.copy()\n    sl.sort()\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[-i-1] for i in range(len(q) // 2))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    if a < 2:\n        return False\n    cnt = 0\n    for i in range(2, int(sqrt(a)) + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = pow(a, 1 / 3)\n    return root * root * root == a\n",
            "def hex_key(num: str) -> int:\n    return len([char for char in num if char in '2357BD'])\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)[2:]\n    return f\"db{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * pow(10, n - 2)\n",
            "def solve(n: int) -> str:\n    digits = [int(d) for d in str(n)]\n    return sum(digits).to_radix_string(2)\n",
            "def add(lst: List[int]) -> int:\n    return sum(e for i, e in enumerate(lst) if i % 2 == 1 and e % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(' ')\n    words = [''.join(sorted(list(word))) for word in words]\n    return ' '.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda x: x[0] if x[0] == x[1] else x[0] - x[1])\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if ((arr[0] + arr[-1]) % 2 == 0):\n        return sorted(arr)\n    else:\n        return arr[::-1]\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = list(set(lst))\n    sl.sort()\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r\"[.!?]\\s*\", s)\n    return sum(1 for i in range(len(sentences)) if sentences[i].startswith(\"I \") and len(sentences[i]) >= 2)\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if type(x) == int and type(y) == int and type(z) == int:\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in re.split('\\s', message):\n        if re.search(r'[a-zA-Z]', ch):\n            ch1 = ch.upper() == ch and ch or ch.lower()\n            if vowels.find(ch1[0]) != -1:\n                ch1 = ch1[0] + chr(ord(ch1[0]) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = max(primes)\n    return int(\"\".join(map(str, [int(d) for d in str(largest)])))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return bool(re.match(r'^[A-Z]+$', list(d.keys())[0])) or bool(re.match(r'^[a-z]+$', list(d.keys())[0]))\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * abs(b) % 10\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return re.split(r\"[, ]\", s)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y != x ? y - 1 : -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = ((m + n) // 2 + 1).to_bytes((m + n).bit_length() // 8, byteorder='big').decode()\n    return r_avg\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return [int(num) for num in set(str(num) for num in x) if sum(int(digit) for digit in num) % 2 == 0]\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(list(filter(lambda x: 1 <= x and x <= 9, arr)))\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = [i + 1 for i in range(n)]\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 != 0:\n            result.append(sum(nums[:i]))\n        else:\n            result.append(functools.reduce(lambda x, y: x * y, nums[:i]))\n    return result\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    if n >= 0:\n        return sum(int(d) for d in str(n))\n    else:\n        return (abs(n) // 10) * 2 + digits_sum(n.__abs__())\ndef count_nums(arr: List[int]) -> int:\n    return len(list(filter(lambda n: digits_sum(n) > 0, arr)))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[:i] + arr[i+1:] == sorted_arr[:len(arr)-i] + sorted_arr[len(arr)-i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for num in lst1 if num % 2 != 0)\n    even_cnt = sum(1 for num in lst2 if num % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(list(filter(lambda x: x != c, s)))\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"]\ndef is_palindrome(s: str) -> bool:\n    return s == s[::-1]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([d for d in num if int(d) % 2 == 1])\n        rs = \"the number of odd elements in the string {} of the input.\".format(n)\n        result.append(rs)\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = nums.count(min(nums))\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda x: sum(x) // capacity, grid))\n",
            "def count_ones(num: int) -> int:\n    return \"1\".count(str(num))\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    words = [w for w in words if len(w) > 0]\n    return [w for w in words if len([c for c in w if c.lower() in consonants]) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if vowels.find(word[i]) != -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        elif ch == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    result = arr[-k:]\n    result.sort()\n    return result\n",
            "def solution(lst: List[int]) -> int:\n    return sum(i for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(e for e in arr[:k] if len(str(e)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != \"-\" or date[5] != \"-\":\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [txt.replace(\"\", \"\").split(\"\").__filter__(lambda c: c.__contains__(RegExp(r\"[a-z]\")) and ord(c[0]) % 2 == 0).__len__().__str__()]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not lst:\n        return True\n    if lst == sorted(lst):\n        return True\n    return False\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = arr.count(n for n in arr if n < 0) % 2 == 1 and -1 or 1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n):\n        if i % 2 == 0:\n            seq.append((i // 2 + 1))\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + ((i + 3) // 2))\n    return seq\n",
            "def digits(n: int) -> int:\n    if n < 0:\n        n = -n\n    if n == 0:\n        return 0\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    odds = [d for d in digits if d % 2 == 1]\n    return reduce((x, y), odds) if len(odds) > 0 else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx = close_idx[::-1]\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum([int(pow(n, 2)) for n in lst])\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rfind(' ') + 1:]\n    return len(last) == 1 and re_compile(r'[a-z]', flags=re_compile.IGNORECASE).search(last[0]) is not None\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(len(arr) - 1, 0, -1) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = None if not neg else max(neg)\n    min_pos = None if not pos else min(pos)\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\ndef any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(',', '.'))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    else:\n        raise TypeError(\"Type Error\")\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    result = 1\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    pattern = re_compile(r\"\\s{3,}\")\n    return pattern.sub(\"-\", txt).replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not re.search(r'[a-z]', lst[0][0], re.IGNORECASE):\n        return \"No\"\n    if len(re.findall(r'\\d', lst[0])) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(w for w in words if is_prime(len(w)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    if n >= 0:\n        return sum(int(d) for d in str(n))\n    else:\n        return (abs(n) // 10) * 2 + digits_sum(n % 10)\ndef order_by_points(nums: List[int]) -> List[int]:\n    result = nums.copy()\n    merge_sort(result, digits_sum)\n    return result\ndef merge_sort(arr, compare):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        merge_sort(left, compare)\n        merge_sort(right, compare)\n        merge(arr, left, right, compare)\ndef merge(arr, left, right, compare):\n    i = j = k = 0\n    while i < len(left) and j < len(right):\n        if compare(left[i], right[j]):\n            arr[k] = left[i]\n            i += 1\n        else:\n            arr[k] = right[j]\n            j += 1\n        k += 1\n    while i < len(left):\n        arr[k] = left[i]\n        i += 1\n        k += 1\n    while j < len(right):\n        arr[k] = right[j]\n        j += 1\n        k += 1\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len(list(filter(lambda n: n > 10 and n % 2 == 1 and odds.startswith(str(n)[0]), nums)))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        [l, r] = [r, l]\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [item for item in lst if len(item) % 2 == 0]\n    return sorted(result)\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x[0] - x[1]) for x in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -float('inf')\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c == c.upper())\n        lower = sum(1 for c in ext if c == c.lower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b in a[i:]:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = abs(num)\n    even = sum(1 for d in str(ds) if int(d) % 2 == 0)\n    return [even, len(str(ds)) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 , 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] ** 2 + s[1] ** 2 == s[2] ** 2\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = w if w < max_w else max_w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = list(operators)\n    nums = list(operands)\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.remove(nums[i + 1])\n            ops.remove(ops[i])\n            i -= 1\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(nums[i + 1])\n            ops.remove(ops[i])\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.remove(nums[i + 1])\n            ops.remove(ops[i])\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(nums[i + 1])\n            ops.remove(ops[i])\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(nums[i + 1])\n            ops.remove(ops[i])\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = \"\"\n    for ch in s.split():\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    txt_bytes = txt.encode('utf-8')\n    md5_encoded = md5(txt_bytes).hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "go": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        if i != 0:\n            result.append(delimiter)\n        result.append(num)\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \")\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    result = []\n    for s in strs:\n        if substring in s:\n            result.append(s)\n    return result\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for n in numbers:\n        n_product *= n\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    runes = list(s)\n    for i in range(len(runes)//2):\n        if runes[i] != runes[len(runes)-1-i]:\n            return False\n    return True\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[:i]):\n            runes = list(s[:i])\n            for i, j in zip(range(len(runes)), reversed(range(len(runes)))):\n                runes[i], runes[j] = runes[j], runes[i]\n            return s + ''.join(runes)\n    return ''\n",
            "def string_xor(a: str, b: str) -> str:\n    result = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result.append(\"0\")\n        else:\n            result.append(\"1\")\n    return \"\".join(result)\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if len(strs) == 0:\n        return None\n    longestS = strs[0]\n    for s in strs:\n        if len(s) > len(longestS):\n            longestS = s\n    return longestS\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i+1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    result = []\n    for i in range(n):\n        result.append(str(i))\n    return \" \".join(result)\n",
            "def count_distinct_characters(s: str) -> int:\n    dc: Dict[str, bool] = {}\n    for ch in s.lower():\n        dc[ch] = True\n    return len(dc)\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    }\n    notes = music_string.split(\" \")\n    result = []\n    for note in notes:\n        if note != \"\":\n            result.append(durations[note])\n    return result\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "from\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\nfrom\n\\\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = copy.deepcopy(numbers)\n    sort.Float64s(sorted_numbers)\n    min_diff = math.inf\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = float('inf')\n    max_num = float('-inf')\n    for num in numbers:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n    if min_num == max_num:\n        return []\n    res = []\n    for num in numbers:\n        res.append((num - min_num) / (max_num - min_num))\n    return res\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        if num not in counts:\n            counts[num] = 1\n    return list(counts.keys())\n",
            "def flip_case(s: str) -> str:\n    return s.swapcase()\n",
            "def concatenate(strs: List[str]) -> str:\n    return join(\"\", strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    filtered = []\n    for str in strs:\n        if str.startswith(prefix_str):\n            filtered.append(str)\n    return filtered\n",
            "def get_positive(l: List[int]) -> List[int]:\n    result = []\n    for num in l:\n        if num > 0:\n            result.append(num)\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * math.pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while math.fabs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = []\n    for i, x in enumerate(l):\n        if i % 3 == 0:\n            sorted_third.append(x)\n    Ints(sorted_third)\n    result = []\n    for i, x in enumerate(l):\n        if i % 3 == 0:\n            result.append(sorted_third[i // 3])\n        else:\n            result.append(x)\n    return result\n",
            "def list_unique(l: List[int]) -> List[int]:\n    keys = {}\n    result = []\n    for x in l:\n        if x not in keys:\n            keys[x] = True\n            result.append(x)\n    result.sort()\n    return result\n",
            "def max_element(l: List[int]) -> int:\n    if len(l) == 0:\n        return 0\n    max_ = l[0]\n    for e in l:\n        if e > max_:\n            max_ = e\n    return max_\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i%11 == 0 or i%13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    evens = [x for i, x in enumerate(l) if i % 2 == 0]\n    evens.sort()\n    result = []\n    for i, x in enumerate(l):\n        if i % 2 == 0:\n            result.append(evens[i//2])\n        else:\n            result.append(x)\n    return result\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i+1:i+3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return int(pow(n, 2))\n",
            "def incr_list(l: List[int]) -> List[int]:\n    result = []\n    for e in l:\n        result.append(e + 1)\n    return result\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = {}\n    for num in l:\n        if -num in seen:\n            return True\n        seen[num] = True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits)\n",
            "def triangle_area(a: int, h: int) -> float:\n    return float(a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib.append(fib[0] + fib[1] + fib[2] + fib[3])\n        fib = fib[1:]\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    return statistics.median(l)\n",
            "def is_palindrome(txt: str) -> bool:\n    runes = list(txt)\n    for i in range(0, len(runes)//2):\n        if runes[i] != runes[len(runes)-1-i]:\n            return False\n    return True\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append((ord(ch) - 97 + 5) % 26 + 97)\n    return ''.join(map(chr, result))\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append((ord(ch) - 97 + 21) % 26 + 97)\n    return ''.join(map(chr, result))\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in txt if char not in vowels])\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    for x in l:\n        if x >= t:\n            return False\n    return True\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    set0 = {}\n    set1 = {}\n    for char in s0:\n        set0[char] = True\n    for char in s1:\n        set1[char] = True\n    return set0 == set1\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i + 1] - l[i] for i in range(len(l) - 1)]\n    return all(x > 0 for x in diff) or all(x < 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    s1 = {}\n    for num in l1:\n        s1[num] = True\n    result = []\n    for num in l2:\n        if num in s1 and s1[num]:\n            result.append(num)\n            s1[num] = False\n    result.sort()\n    return result\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i <= sqrt(n):\n        if n % i == 0:\n            while n % i == 0:\n                n = n // i\n        i += 1\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    result = 0\n    for i in range(n+1):\n        result += i\n    return result\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    for _ in range(n-2):\n        a, b, c = b, c, a + b + c\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        runes = list(x_str)\n        for i, j in zip(range(len(runes)-1), range(len(runes)-1, 0, -1)):\n            runes[i], runes[j] = runes[j], runes[i]\n        return ''.join(runes)\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    a = 0\n    for c in s:\n        if c.isupper():\n            a += int(c)\n    return a\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = 0\n    oranges = 0\n    for i, word in enumerate(words):\n        if word == \"apples\":\n            apples = int(words[i - 1])\n        if word == \"oranges\":\n            oranges = int(words[i - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    min_even = float('inf')\n    min_idx = -1\n    for i, n in enumerate(arr):\n        if n % 2 == 0 and n < min_even:\n            min_even = n\n            min_idx = i\n    if min_idx == -1:\n        return []\n    return [min_even, min_idx]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        if n in freqs:\n            freqs[n] += 1\n        else:\n            freqs[n] = 1\n    maxVal = float('-inf')\n    for k, v in freqs.items():\n        if v >= k and k > maxVal:\n            maxVal = k\n    if maxVal == float('-inf'):\n        return -1\n    return maxVal\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = copy(lst)\n    Ints(sl)\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = True\n    for i in range(len(q)):\n        if q[i] != q[len(q) - i - 1]:\n            is_palin = False\n            break\n    total = 0\n    for i in range(len(q)):\n        total += q[i]\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(b) for b in lst1)\n    cnt2 = sum(len(b) for b in lst2)\n    if cnt1 <= cnt2:\n        return lst1\n    else:\n        return lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = round(a**(1/3))\n    return root**3 == a\n",
            "def hex_key(num: str) -> int:\n    result = 0\n    for x in num:\n        if x in \"2357BD\":\n            result += 1\n    return result\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(int(dec))[2:]\n    return f\"db{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5)+1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * int(pow(9, n-1))\n",
            "def solve(n: int) -> str:\n    digits_sum = 0\n    for digit in str(n):\n        digits_sum += int(digit)\n    return str(digits_sum)\n",
            "def add(lst: List[int]) -> int:\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 2 == 1 and x % 2 == 0:\n            result += x\n    return result\n",
            "fromty\nAntiShuffle\ntyping\ntyping\ntyping\ntyping\ntyping\nty\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\nty\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\ntyping\nty\ntyping\ntyping\nty\ntyping\ntyping\ntyping\\typing\\typing\ntyping\ntyping\nty\nty\nty\nty\ntyping\ntyping\ntyping\\typing\\ty\ntyping\\typing\\typing\\typing\\typing\\typing\\typing\\ty\\typing\\typing\\typing\\ty\\typing\\typing\\ty\\typing\\typing\\ty\\typing\\ty\\typing\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    sort.Slice(coords, lambda i, j: coords[i][0] < coords[j][0] or (coords[i][0] == coords[j][0] and coords[i][1] > coords[j][1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    result = copy(arr)\n    if (arr[0] + arr[-1]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        SortedList(result)\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    tmp = lst.copy()\n    tmp.sort()\n    sl = []\n    for i in range(len(tmp)):\n        if i == 0 or tmp[i] != tmp[i - 1]:\n            sl.append(tmp[i])\n    if len(sl) < 2:\n        return None\n    return cast(int, sl[1])\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r'[.!?]\\s*', s)\n    cnt = 0\n    for sentence in sentences:\n        if len(sentence) >= 2 and sentence[:2] == \"I \":\n            cnt += 1\n    return cnt\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x+y == z) or (x+z == y) or (y+z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            if ch.islower():\n                ch = ch.upper()\n            if ch in vowels:\n                ch = chr(ord(ch) + 2)\n            result += ch\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    max_prime = 0\n    for n in lst:\n        if is_prime(n) and n > max_prime:\n            max_prime = n\n    if max_prime == 0:\n        return 0\n    largest = str(max_prime)\n    result = 0\n    for d in largest:\n        result += int(d)\n    return result\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    lower, upper = True, True\n    for k, v in d.items():\n        for r in k:\n            if not r.islower():\n                lower = False\n            if not r.isupper():\n                upper = False\n        for r in v:\n            if not r.islower():\n                lower = False\n            if not r.isupper():\n                upper = False\n    return lower or upper\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        flag = True\n        for p in primes:\n            if num % p == 0:\n                flag = False\n                break\n        if flag:\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (a % 10) * (b % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    count = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c in vowels:\n            count += 1\n    return count\n",
            "def closest_integer(value: str) -> int:\n    num, _ = str(value).split('.')\n    if int(num) >= 0:\n        return int(num)\n    else:\n        return int(num)\n",
            "def make_a_pile(n: int) -> List[int]:\n    result = []\n    for i in range(n):\n        result.append(n + 2 * i)\n    return result\n",
            "def words_string(s: str) -> List[str]:\n    words = re.split(r'[, ]', s)\n    result = []\n    for w in words:\n        if len(w) > 0:\n            result.append(w)\n    return result\n",
            "def choose_num(x: int, y: int) -> int:\n    if (y % 2 == 0):\n        return y\n    if (y != x):\n        return y - 1\n    return -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = int((n + m) / 2)\n    return f\"{r_avg:02}\"\n",
            "def all_odd_digits(s: str) -> bool:\n    for digit in s:\n        if int(digit) % 2 == 0:\n            return False\n    return True\ndef unique_digits(x: List[int]) -> List[int]:\n    result = []\n    for num in x:\n        if all_odd_digits(str(num)):\n            result.append(num)\n    result.sort()\n    return result\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = []\n    for x in arr:\n        if 1 <= x and x <= 9:\n            sorted_arr.append(x)\n    sorted_arr.sort()\n    result = []\n    for x in sorted_arr:\n        result.append(digit_names[x - 1])\n    return result\n",
            "def f(n: int) -> List[int]:\n    nums = [i + 1 for i in range(n)]\n    result = []\n    for i in range(n):\n        if i % 2 != 0:\n            sum = 0\n            for j in range(i):\n                sum += nums[j]\n            result.append(sum)\n        else:\n            product = 1\n            for j in range(i):\n                product *= nums[j]\n            result.append(product)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    runes = list(s)\n    for i in range(len(runes)//2):\n        if runes[i] != runes[len(runes)-1-i]:\n            return False\n    return True\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n+1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        acc = 0\n        for char in n_str:\n            acc += int(char)\n        return acc\n    else:\n        neg = int(n_str[0:2])\n        return neg * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    cnt = 0\n    for num in arr:\n        if digits_sum(num) > 0:\n            cnt += 1\n    return cnt\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = SortedList(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = 0\n    even_cnt = 0\n    for num in lst1:\n        if num % 2 != 0:\n            odd_cnt += 1\n    for num in lst2:\n        if num % 2 == 0:\n            even_cnt += 1\n    if even_cnt >= odd_cnt:\n        return \"YES\"\n    return \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        if len(w) > 0:\n            if w in freq:\n                freq[w] += 1\n            else:\n                freq[w] = 1\n    result = {}\n    if len(freq) > 0:\n        max_freq = 0\n        for k, v in freq.items():\n            if v > max_freq:\n                max_freq = v\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = \"\"\n    for ch in s:\n        if ch.lower() not in c:\n            s1 += ch\n    check = \"no\"\n    if s1 == \"\":\n        check = \"yes\"\n    elif is_palindrome(s1):\n        check = \"yes\"\n    return [s1, check]\ndef is_palindrome(s: str) -> bool:\n    return s == s[::-1]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = 0\n        for d in num:\n            if int(d) % 2 == 1:\n                n += 1\n        result.append(f\"the number of odd elements in the string {n} of the input\")\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        if cur_sum + n > 0:\n            cur_sum = 0\n        else:\n            cur_sum += n\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n    if min_sum == 0:\n        min_sum = float('inf')\n        for n in nums:\n            if n < min_sum:\n                min_sum = n\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    result = 0\n    for row in grid:\n        total = sum(row)\n        result += int(ceil(total / capacity))\n    return result\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    result = arr.copy()\n    result.sort(key=lambda x: (bin(x).count('1'), x))\n    return result\n",
            "def select_words(s: str, n: int) -> List[str]:\n    strs = s.split(\" \")\n    words = []\n    for w in strs:\n        if len(w) > 0:\n            words.append(w)\n    result = []\n    for w in words:\n        count = 0\n        for c in w:\n            if c in ascii_lowercase[:5]:\n                count += 1\n        if count == n:\n            result.append(w)\n    return result\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        elif ch == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    if check(s1) or check(s2):\n        return \"Yes\"\n    return \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    result = []\n    copy(result, arr)\n    Ints(result)\n    return result[len(arr)-k:]\n",
            "def solution(lst: List[int]) -> int:\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 2 == 0 and x % 2 != 0:\n            result += x\n    return result\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    result = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            result += arr[i]\n    return result\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    try:\n        datetime.datetime.strptime(date, '%Y-%m-%d')\n        return True\n    }\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        cnt = 0\n        for c in txt:\n            if c.islower() and ord(c) % 2 == 0:\n                cnt += 1\n        return [str(cnt)]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    max_freq = 0\n    for i in freq:\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n    return len(lst) == 0 or max_freq <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    result = 0\n    sign = 1\n    for n in arr:\n        if n == 0:\n            return result\n        if n < 0:\n            sign *= -1\n        result += abs(n)\n    result *= sign\n    return result\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = temp[0]\n                for v in temp:\n                    if v < min_val:\n                        min_val = v\n    result = []\n    for i in range(k):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    if n == 0:\n        return 0\n    odds = []\n    while n > 0:\n        d = n % 10\n        if d % 2 == 1:\n            odds.append(d)\n        n = n // 10\n    result = 1\n    for d in odds:\n        result *= d\n    return result\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    result = 0\n    for n in lst:\n        result += int(n**2)\n    return result\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if len(txt) == 0:\n        return False\n    last = txt[len(txt)-1:]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = []\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            idx.append(i)\n    if len(idx) == 0:\n        return -1\n    max_idx = idx[0]\n    for i in idx:\n        if i > max_idx:\n            max_idx = i\n    return max_idx\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    max_neg = None\n    min_pos = None\n    for n in lst:\n        if n < 0:\n            if max_neg is None:\n                max_neg = n\n            elif n > max_neg:\n                max_neg = n\n        if n > 0:\n            if min_pos is None:\n                min_pos = n\n            elif n < min_pos:\n                min_pos = n\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str):\n        a = a.replace(\",\", \".\")\n        a = float(a)\n    if isinstance(b, str):\n        b = b.replace(\",\", \".\")\n        b = float(b)\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    nums = [i for i in range(1, n+1)]\n    result = reduce(lambda x, y: x*y, nums)\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r'\\s{3,}', '_', txt)\n",
            "def file_name_check(file_name: str) -> str:\n    suffixes = [\"txt\", \"exe\", \"dll\"]\n    file_name_parts = file_name.split(\".\")\n    if len(file_name_parts) != 2 or len(file_name_parts[0]) == 0 or not file_name_parts[0][0].isalpha():\n        return \"No\"\n    if file_name_parts[1] not in suffixes:\n        return \"No\"\n    digit_count = 0\n    for ch in file_name_parts[0]:\n        if ch.isdigit():\n            digit_count += 1\n    if digit_count > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    strs = sentence.split(\" \")\n    words = []\n    for word in strs:\n        if is_prime(len(word)):\n            words.append(word)\n    return \" \".join(words)\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num0 = int(xs[0])\n    den0 = int(xs[1])\n    num1 = int(ns[0])\n    den1 = int(ns[1])\n    return (num0 * num1) % (den0 * den1) == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        acc = 0\n        for char in n_str:\n            acc += int(char)\n        return acc\n    else:\n        neg = int(n_str[0:2])\n        return neg * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    result = nums.copy()\n    result.sort(key=digits_sum)\n    return result\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    cnt = 0\n    for n in nums:\n        if n > 10 and n % 2 == 1 and str(n)[0] in odds:\n            cnt += 1\n    return cnt\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n+1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    l, r = -1, -1\n    for i, name in enumerate(names):\n        if name == planet1:\n            l = i\n        if name == planet2:\n            r = i\n    if l == -1 or r == -1:\n        return []\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1 : r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = []\n    sl = SortedList(lst)\n    for s in lst:\n        if len(s) % 2 == 0:\n            result.append(s)\n    return list(sl)\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    acc = 0\n    for n in lst:\n        if n >= 0 and n % 2 == 1:\n            acc += int(n * n)\n    return acc\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    result = []\n    for i, g in enumerate(guess):\n        result.append(abs(game[i] - g))\n    return result\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -float('inf')\n    max_ext = \"\"\n    for ext in extensions:\n        s = sum(c.islower() for c in ext) - sum(c.isupper() for c in ext)\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:]+b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = 0\n    for d in ds:\n        if int(d) % 2 == 0:\n            even += 1\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0]**2 + s[1]**2 == s[2]**2\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = 0\n        freq = {}\n        for c in w:\n            if c not in freq:\n                freq[c] = True\n                cnt += 1\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = int(pow(nums[i], nums[i + 1]))\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n            i -= 1\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums = nums[:i + 1] + nums[i + 2:]\n            ops = ops[:i] + ops[i + 1:]\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(unicodedata.category(c).startswith('L') for c in s):\n        return s[::-1]\n    result = string.ascii_lowercase\n    for c in s:\n        if unicodedata.category(c).startswith('L'):\n            result = result.replace(c.lower(), c.upper())\n        else:\n            result += c\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    md5_hash = hashlib.md5(txt.encode()).hexdigest()\n    return md5_hash\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = int(max(2, min(a, b)))\n    upper = int(min(8, max(a, b)))\n    numbers = []\n    for i in range(lower, upper+1):\n        if i % 2 == 0:\n            numbers.append(i)\n    return numbers\n"
        ]
    },
    "java": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == '(':\n            stk.append(ch)\n            current_group += ch\n        elif ch == ')':\n            stk.remove(stk[-1])\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - math.floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(n - mean) for n in numbers]\n    return sum(deviations) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \")\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for num in numbers:\n        n_product *= num\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[:i+1]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    sb = StringIO()\n    for i in range(len(a)):\n        sb.write('1' if a[i] != b[i] else '0')\n    return sb.getvalue()\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longestS = strs[0]\n    for s in strs:\n        if len(s) > len(longestS):\n            longestS = s\n    return longestS\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "fromtyped\nfromtyped\nfromtyped\nfromtyped\nfromtyped\nfromtyped\nfromtyped\nfromtyped\nfromtyped\ntyped\ntyped\ntyped\ntyped\ntyped\ntyped\ntyped\ntyped\ntyped\ntyped\ntyped\ntyped\ntyped\ntyped\ntyped\ntyped\ntyped\ntyped\ntyped\ntyped\ntyped\ntyped\ntyped\ntyped\ntyped\ntyped\\typed\\typed\\typed\ntyped\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\ty\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\typed\\ty\\typed\\typed\\ty\\ty\\typed\\ty\\ty\\typed\\typed\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty\\ty",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = defaultdict(lambda: 4)\n    durations.update({\"o\": 4, \"o|\": 2, \".|\": 1})\n    notes = [note for note in music_string.split(\" \") if len(note) > 0]\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = defaultdict(int)\n    num_dict.update({\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    })\n    num_list = [num for num in numbers.split(\" \") if num in num_dict]\n    num_list.sort(key=lambda x: num_dict[x], reverse=True)\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = defaultdict(int)\n    for num in numbers:\n        counts[num] += 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.islower():\n            result += ch.upper()\n        elif ch.isupper():\n            result += ch.lower()\n    return result\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while math.fabs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = IntStream.range(0, len(l)).filter(lambda i: i % 3 == 0).map(l::__getitem__).sorted().to_list()\n    return IntStream.range(0, len(l)).map(lambda i: i % 3 == 0 and sorted_third[i//3] or l[i]).to_list()\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count('7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    evens = [l[i] for i in range(len(l)) if i % 2 == 0]\n    return [l[i] if i % 2 == 0 else evens[i//2] for i in range(len(l))]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 <= len(s):\n            result += s[i + 1:i + 3] + s[i]\n        else:\n            result += s[i:]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return int(pow(n, 2))\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [e + 1 for e in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = HashSet()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(sum(fib[i - 4:i]))\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    sb = txt[::-1]\n    return txt == sb\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for c in s:\n        result.append(chr((ord(c) - 97 + 5) % 26 + 97))\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for c in s:\n        result.append(chr((ord(c) - 97 + 21) % 26 + 97))\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    queue = deque(txt)\n    while queue and queue[0] in vowels:\n        queue.popleft()\n    while queue and queue[-1] in vowels:\n        queue.pop()\n    return \"\".join(queue)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    c0 = Counter(s0)\n    c1 = Counter(s1)\n    return c0 == c1\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for i in range(len(brackets)):\n        b = brackets[i]\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = IntStream.range(0, len(l) - 1).map(lambda i: l[i + 1] - l[i]).to_list()\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return list(set(l1).intersection(set(l2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for i in range(len(brackets)):\n        b = brackets[i]\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [i * x for i, x in enumerate(xs, 1)]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        tmp = a + b + c\n        a, b, c = b, c, tmp\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] in vowels or (i == len(s) - 1 and s[i].lower() == 'y'):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = defaultdict(int)\n    for n in lst:\n        freqs[n] += 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    if not good_vals:\n        return -1\n    return max(good_vals)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[-i-1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(map(len, lst1))\n    cnt2 = sum(map(len, lst2))\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n        if cnt == 3:\n            return True\n    return False\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = int(round(a**(1.0/3.0)))\n    return root**3 == a\n",
            "def hex_key(num: str) -> int:\n    return list(num).count('7') + list(num).count('D')\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)[2:]\n    return f\"db{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append(\"A+\")\n        elif grade > 3.7:\n            result.append(\"A\")\n        elif grade > 3.3:\n            result.append(\"A-\")\n        elif grade > 3.0:\n            result.append(\"B+\")\n        elif grade > 2.7:\n            result.append(\"B\")\n        elif grade > 2.3:\n            result.append(\"B-\")\n        elif grade > 2.0:\n            result.append(\"C+\")\n        elif grade > 1.7:\n            result.append(\"C\")\n        elif grade > 1.3:\n            result.append(\"C-\")\n        elif grade > 1.0:\n            result.append(\"D+\")\n        elif grade > 0.7:\n            result.append(\"D\")\n        elif grade > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * (10 ** (n - 2))\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(c) for c in str(n))\n    return bin(digits_sum)[2:]\n",
            "def add(lst: List[int]) -> int:\n    return Stream(lst).filter(lambda i: i % 2 == 1 and lst[i] % 2 == 0).sum()\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    char_counts = defaultdict(int)\n    for word in words:\n        for char in word:\n            char_counts[char] += 1\n    sorted_chars = sorted(char_counts.keys(), key=lambda c: (-char_counts[c], c))\n    result = []\n    for word in words:\n        word_chars = list(word)\n        sorted_chars_index = 0\n        for i in range(len(word_chars)):\n            if char_counts[word_chars[i]] == 1:\n                char_counts[word_chars[i]] -= 1\n                word_chars[i] = sorted_chars[sorted_chars_index]\n                sorted_chars_index += 1\n        result.append(\"\".join(word_chars))\n    return \" \".join(result)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda x: x[0] if x[0] == coords[0][0] else x[1] - coords[0][1])\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if ((arr[0] + arr[-1]) % 2 == 0):\n        return sorted(arr)\n    else:\n        return sorted(arr, reverse=True)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for c in s:\n        shifted = ord(c) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = list(set(lst))\n    sl.sort()\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\"[.!?]\\\\s*\")\n    return len(list(filter(lambda x: x.startswith(\"I \") and len(x) >= 2, sentences)))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        int_x = x\n        int_y = y\n        int_z = z\n        if int_x + int_y == int_z or int_x + int_z == int_y or int_y + int_z == int_x:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower()\n            if vowels.find(ch1) != -1:\n                ch1 = ch1.upper()\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = str(max(primes))\n    return sum(int(c) for c in largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for div in range(2, num):\n            if num % div == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i in count(0) if i % 2 == 0 and vowels.find(s[i]) != -1)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return IntStream.range(0, n).map(lambda i: n + 2 * i).to_list()\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(\",\")\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y - 1 if y != x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (m + n) // 2\n    return bin(r_avg)\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return [num for num in x if Global.allDigitsOdd(str(num))]\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = [x for x in arr if 1 <= x and x <= 9]\n    sorted_arr.sort(reverse=True)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    return Arrays.asList(IntStream.rangeClosed(1, n).boxed().collect(Collectors.toList()))\n",
            "def even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\ndef is_palindrome(s: str) -> bool:\n    return s == s[::-1]\n",
            "def digits_sum(n: int) -> int:\n    if n >= 0:\n        return sum(int(c) for c in str(n))\n    else:\n        return (int(str(n)[:2]) * 2 + digits_sum(abs(n)))\ndef count_nums(arr: List[int]) -> int:\n    return len(list(filter(lambda n: digits_sum(n) > 0, arr)))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[len(arr) - i:]:\n            if arr[:i] == sorted_arr[:len(arr) - i]:\n                return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2 != 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = defaultdict(int)\n    words = [w for w in test.split(\" \") if len(w) > 0]\n    for w in words:\n        freq[w] += 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join([c for c in s if c != c.lower()])\n    return [s1, \"yes\" if Global.is_palindrome(s1) else \"no\"]\ndef is_palindrome(s: str) -> bool:\n    return s == s[::-1]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for c in num if c % 2 == 1)\n        rs = f\"the number of odd elements in the string {n} of the input.\"\n        result.append(rs)\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda x: int(math.ceil(sum(x) / capacity)), grid))\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count('1')\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: count_ones(x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if len(w) > 0 and sum(1 for c in w if c.lower() in consonants) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if vowels.find(word[i]) != -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    if check(s1) or check(s2):\n        return \"Yes\"\n    return \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        elif ch == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return arr[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return Stream(lst).filter(lambda i: i % 2 == 0 and lst[i] % 2 != 0).map(lambda i: lst[i]).sum()\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda n: len(str(n)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(sum(c.isdigit() and int(c) % 2 == 0 for c in txt.lower()))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    freq = defaultdict(int)\n    for i in lst:\n        freq[i] += 1\n    max_freq = max(freq.values(), default=0)\n    return max_freq <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = sum(1 for n in arr if n < 0) % 2 == 1 and -1 or 1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 and 1 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(c) for c in str(n) if int(c) % 2 == 1]\n    return reduce((lambda x, y: x * y), odds) if len(odds) > 0 else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx = deque()\n    close_idx = deque()\n    for i in range(len(s)):\n        if s[i] == '[':\n            open_idx.append(i)\n        elif s[i] == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(int(math.pow(math.ceil(n), 2)) for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if txt == \"\":\n        return False\n    last = txt[txt.rfind(\" \") + 1:]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = IntStream.range(1, len(arr)).filter(lambda i: arr[i] < arr[i - 1])\n    return idx.max().or_else(-1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg, key=cmp_to_key(lambda a, b: a - b)) if neg else None\n    min_pos = min(pos, key=cmp_to_key(lambda a, b: a - b)) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = float(str(a).replace(\",\", \".\"))\n    b1 = float(str(b).replace(\",\", \".\"))\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = [1] * (n + 1)\n    result = 1\n    for i in range(1, n + 1):\n        fact[i] = fact[i - 1] * i\n        result *= fact[i]\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\" \", \"_\").replace(\"___\", \"-\").replace(\"__\", \"-\")\n",
            "def file_name_check(file_name: str) -> str:\n    suffixes = [\"txt\", \"exe\", \"dll\"]\n    parts = file_name.split(\".\")\n    if len(parts) != 2 or parts[1] not in suffixes or len(parts[0]) == 0 or not parts[0].startswith(\"AC\") or any(c.isdigit() for c in parts[0]):\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> List[str]:\n    words = sentence.split(\" \")\n    return [word for word in words if is_prime(len(word))]\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    if n >= 0:\n        return sum(int(c) for c in str(n))\n    else:\n        return int(str(n)[0:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and odds.startswith(str(n)[0])])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    result.sort(key=len)\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(g - gs) for g, gs in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = float('-inf')\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for c in ds if int(c) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w.split(\"\")))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w if max_w < w else w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    while \"**\" in ops:\n        index = ops.index(\"**\")\n        nums[index] = nums[index] ** nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    while \"*\" in ops:\n        index = ops.index(\"*\")\n        nums[index] = nums[index] * nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    while \"//\" in ops:\n        index = ops.index(\"//\")\n        nums[index] = nums[index] // nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    while \"+\" in ops:\n        index = ops.index(\"+\")\n        nums[index] = nums[index] + nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    while \"-\" in ops:\n        index = ops.index(\"-\")\n        nums[index] = nums[index] - nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = []\n    for c in s:\n        if not c.isalpha():\n            result.append(c)\n        elif c.isupper():\n            result.append(c.lower())\n        else:\n            result.append(c.upper())\n    return ''.join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if txt == \"\":\n        return None\n    try:\n        md5_hash = md5(txt.encode()).hexdigest()\n        return md5_hash\n    except:\n        return None\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return list(range(lower, upper, 2))\n"
        ]
    },
    "javascript": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for num in numbers]\n    return sum(deviations) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \")\n    paren_groups = list(filter(lambda s: len(s) > 0, paren_groups))\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = functools.reduce(lambda a, b: a * b, numbers, 1)\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(['0' if c == b[i] else '1' for i, c in enumerate(a)])\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(map(str, range(n + 1)))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = { \"o\": 4, \"o|\": 2, \".|\": 1 }\n    notes = music_string.split(\" \")\n    return [durations[n] for n in notes if len(n) > 0]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [num for num in numbers.split(\" \") if num in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [((num - min_num) / (max_num - min_num)) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int) and v.bit_length() == v]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = defaultdict(int)\n    for num in numbers:\n        counts[num] += 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    result = []\n    for ch in s:\n        if ch.isalnum():\n            result.append(ch.lower() if ch.isupper() else ch.upper())\n        else:\n            result.append(ch)\n    return ''.join(result)\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda x: x > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    third = sorted([e for e in l if e % 3 == 0])\n    return [third[i // 3] if i % 3 == 0 else e for i, e in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count('7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    even = [x for x in l if x % 2 == 0]\n    even.sort()\n    return [x if x % 2 != 0 else even.pop(0) for x in l]\n",
            "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 <= len(s):\n            result.append(s[i+1:i+3])\n            result.append(s[i])\n        else:\n            result.append(s[i:])\n    return ''.join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3])\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr(ord(ch) + 5))\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr(ord(ch) - 5))\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in txt if char not in vowels])\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i] - l[i - 1] for i in range(1, len(l))]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1).intersection(set(l2))))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n /= i\n        else:\n            i += 1\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs)][1:]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or i == len(s) - 1 and s[i].lower() == \"y\":\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return ''.join(list(reversed(x_str)))\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isalpha())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [v for v in freqs.values() if v >= v]\n    if not good_vals:\n        return -1\n    return max(good_vals)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst[:]\n    sl.sort(key=lambda x: -x)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[-i - 1] for i in range(len(q) // 2))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = round(a ** (1.0 / 3.0))\n    return root ** 3 == a\n",
            "def hex_key(num: str) -> int:\n    return list(num).count('7')\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)[2:]\n    return f\"db{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * 10 ** (n - 2)\n",
            "def solve(n: int) -> str:\n    digits = [int(d) for d in str(n)]\n    digits_sum = sum(digits)\n    return bin(digits_sum)[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum([x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0])\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(' ')\n    for i in range(len(words)):\n        words[i] = ''.join(sorted(words[i]))\n    return ' '.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda a: a[0] == a[1])\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if ((arr[0] + arr[-1]) % 2 == 0):\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result.append(chr(shifted))\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = list(set(lst))\n    sl.sort()\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\".!?\")\n    return len([sentence for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \"])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower() if ch.isupper() else ch.upper()\n            if ch1 in vowels:\n                ch1 = ch1.lower() if ch1 in 'aeiou' else ch1.upper()\n                ch1 = chr(ord(ch1) + 2)\n            result.append(ch1)\n        else:\n            result.append(ch)\n    return ''.join(result)\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = str(max(primes))\n    return sum(int(c) for c in largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    return all(k.isupper() for k in d.keys()) or all(k.islower() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and vowels.find(c) >= 0)\n",
            "def closest_integer(value: Union[int, float, str]) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(',')\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y - 1 if y != x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) // 2\n    return bin(r_avg)[2:]\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(int(c) % 2 != 0 for c in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted([num for num in x if all_digits_odd(str(num))])\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x and x <= 9, arr))\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = [i + 1 for i in range(n)]\n    return [i if i % 2 != 0 else sum(nums[:i]) for i in range(n)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return (int(n_str[:2]) * 2 + digits_sum(abs(n)))\ndef count_nums(arr: List[int]) -> int:\n    return len(list(filter(lambda n: digits_sum(n) > 0, arr)))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[:i] == sorted_arr[:i] and arr[i:] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2 != 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        if w in freq:\n            freq[w] += 1\n        else:\n            freq[w] = 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join([c for c in s if c not in c])\n    return [s1, 'yes' if is_palindrome(s1) else 'no']\ndef is_palindrome(s: str) -> bool:\n    return s == s[::-1]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = [d for d in num if ord(d) % 2 == 1]\n        rs = \"the number of odd elements in the string {} of the input.\"\n        result.append(rs.format(len(n)))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(sum(math.ceil(n / capacity) for n in row) for row in grid)\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count('1')\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if len(w) > 0 and [c for c in w if c.lower() in consonants]]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if vowels.find(word[i]) != -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = \"\".join(lst[0:2])\n    s2 = \"\".join(lst[1:3])\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return arr[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != \"-\" or date[5] != \"-\":\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if [1, 3, 5, 7, 8, 10, 12].count(m) and d >= 1 and d <= 31:\n        return True\n    if [4, 6, 9, 11].count(m) and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [''.join(c for c in txt if c.isalpha() and ord(c) % 2 == 0)]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not lst or len(lst) == 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    return is_sorted(lst[1:])\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(-1) % 2 == 1 else 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 and 1 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return 0 if len(odds) == 0 else reduce(lambda a, b: a * b, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda n: int(pow(ceil(n), 2)), lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rfind(\" \") + 1:]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = None if not neg else max(neg)\n    min_pos = None if not pos else min(pos)\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    result = 1\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"   \", \"-\").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split('.')\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha():\n        return \"No\"\n    if [c for c in lst[0] if c.isdigit() and int(c) > 3]:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(w for w in words if is_prime(len(w)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return list(filter(lambda x: x > 10 and x % 2 == 1 and odds.startswith(str(x)[0]), nums))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        [l, r] = [r, l]\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [e for e in lst if e.length % 2 == 0]\n    return sorted(result, key=lambda x: (len(x), x))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n ** 2 for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i]) >= 0:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = abs(num)\n    even = sum(int(d) for d in str(ds) if int(d) % 2 == 0)\n    return [even, len(str(ds)) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 , 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\" , \"v\", \"iv\", \"i\"]\n    res = []\n    for i in range(len(values)):\n        while num >= values[i]:\n            res.append(numerals[i])\n            num -= values[i]\n    return \"\".join(res)\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return s[0] ** 2 + s[1] ** 2 == s[2] ** 2\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w if max_w < w else w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    while \"**\" in ops:\n        index = ops.index(\"**\")\n        nums[index] = nums[index] ** nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    while \"*\" in ops:\n        index = ops.index(\"*\")\n        nums[index] = nums[index] * nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    while \"//\" in ops:\n        index = ops.index(\"//\")\n        nums[index] = int(nums[index] / nums[index + 1])\n        nums.pop(index + 1)\n        ops.pop(index)\n    while \"+\" in ops:\n        index = ops.index(\"+\")\n        nums[index] = nums[index] + nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    while \"-\" in ops:\n        index = ops.index(\"-\")\n        nums[index] = nums[index] - nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = []\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                result.append(c.lower())\n            else:\n                result.append(c.upper())\n        else:\n            result.append(c)\n    return ''.join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = md5()\n    md5_hash.update(txt.encode())\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "kotlin": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    stk = []\n    groups = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == '(':\n            stk.append(ch)\n            current_group += ch\n        elif ch == ')':\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \")\n    paren_groups = [pg for pg in paren_groups if pg]\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for num in numbers:\n        n_product *= num\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for x, y in zip(a, b):\n        if x == y:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return str(list(range(n)))\n",
            "def count_distinct_characters(s: str) -> int:\n    return list(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \")\n    notes = list(filter(None, notes))\n    return list(map(lambda x: durations[x] if x in durations else 0, notes))\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = numbers.split(\" \")\n    num_list = [n for n in num_list if n in num_dict]\n    num_list.sort(key=lambda n: num_dict[n])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers) if len(numbers) > 0 else 0.0\n    max_num = max(numbers) if len(numbers) > 0 else 0.0\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [((num - min_num) / (max_num - min_num)) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    num = n\n    while divisor <= num:\n        if num % divisor == 0:\n            factors.append(divisor)\n            num /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = [num for num in numbers if counts[num] == 1]\n    return res\n",
            "def flip_case(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        else:\n            if ch.islower():\n                result += ch.upper()\n            else:\n                result += ch.lower()\n    return result\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0.0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l[i] for i in range(len(l)) if i % 3 == 0)\n    return [sorted_third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    if not l:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count('7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    evens = [l[i] for i in range(len(l)) if i % 2 == 0]\n    evens_sorted = sorted(evens)\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(evens_sorted[i // 2])\n        else:\n            result.append(l[i])\n    return result\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [e + 1 for e in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3])\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            result += chr((ord(c) - 97 + 5) % 26 + 97)\n        else:\n            result += c\n    return result\ndef decode_shift(s: str) -> str:\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            result += chr((ord(c) - 97 + 21) % 26 + 97)\n        else:\n            result += c\n    return result\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in txt if char not in vowels])\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(e < t for e in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        first = 0\n        second = 1\n        for _ in range(2, n + 1):\n            third = first + second\n            first = second\n            second = third\n        return second\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i] - l[i - 1] for i in range(1, len(l))]\n    return all(d <= 0 for d in diff) or all(d >= 0 for d in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return list(set(l1).intersection(set(l2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n /= i\n        else:\n            i += 1\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return xs.index(x) * xs[xs.index(x) + 1] for x in xs[1:-1]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or i == len(s) - 1 and s[i].lower() == 'y':\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [num for num in arr if num % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst.copy()\n    sl.sort()\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[-i - 1] for i in range(len(q) // 2))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(x) for x in lst1)\n    cnt2 = sum(len(x) for x in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    a = a\n    for i in range(2, int(sqrt(a)) + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    root = abs(a) ** (1.0 / 3.0)\n    return root % 1 == 0 and round(root) ** 3 == abs(a)\n",
            "def hex_key(num: str) -> int:\n    return len([c for c in num if c in \"2357BD\"])\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)[2:]\n    return f\"db{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * (10 ** (n - 2))\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(map(int, str(n)))\n    return str(digits_sum)\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    result = []\n    for word in words:\n        result.append(\"\".join(sorted(word)))\n    return \" \".join(result)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda x: (x[0], x[1]), reverse=True)\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if not arr:\n        return []\n    if ((arr[0] + arr[-1]) % 2 == 0):\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = set(lst)\n    if len(sl) < 2:\n        return None\n    sl = sorted(sl)\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = re.split(r'[.!?]\\s*', s)\n    return sum(1 for s in sentences if s.startswith('I ') and len(s) >= 2)\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if type(x) == int and type(y) == int and type(z) == int:\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower()\n            if ch1 in vowels:\n                ch1 = ch1.upper()\n                ch1 = chr((ord(ch1) - 97 + 2) % 26 + 97)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = str(max(primes))\n    return sum(int(c) for c in largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n + 1):\n        is_prime = True\n        for p in primes:\n            if num % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * abs(b) % 10\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    return int(num >= 0) * (num + 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(\",| |\")\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y - 1 if y != x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = ((n + m) // 2 + 1) >> 1\n    return format(r_avg, 'b')\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(int(c) % 2 != 0 for c in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted([d for d in x if all_digits_odd(str(d))])\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted([num for num in arr if 1 <= num and num <= 9], reverse=True)\n    return [digit_names[num - 1] for num in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = [i for i in range(1, n + 1)]\n    result = []\n    for i in range(n):\n        if i % 2 != 0:\n            result.append(nums[:i + 1].sum())\n        else:\n            result.append(functools.reduce(lambda x, y: x * y, nums[:i + 1]))\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return sum(1 for num in arr if digits_sum(num) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for num in lst1 if num % 2 != 0)\n    even_cnt = sum(1 for num in lst2 if num % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        if w in freq:\n            freq[w] += 1\n        else:\n            freq[w] = 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join([c for c in s if c not in c])\n    return [s1, 'yes' if is_palindrome(s1) else 'no']\ndef is_palindrome(s: str) -> bool:\n    return s == s[::-1]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len(list(filter(lambda x: int(x) % 2 == 1, num)))\n        rs = \"the number of odd elements in the string \" + str(n) + \" of the input.\"\n        result.append(rs)\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum([ceil(sum(row) / capacity) for row in grid])\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count('1')\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=count_ones)\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if sum(1 for c in w if c.lower() in consonants) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    if '(' in s1 and ')' in s1 or '(' in s2 and ')' in s2:\n        return \"Yes\"\n    return \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return arr.copy() if k == 0 else arr.copy().sort()[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(i for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(e for e in arr[:k] if len(str(e)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    month = int(date[0:2])\n    day = int(date[3:5])\n    if month in [1, 3, 5, 7, 8, 10, 12] and day >= 1 and day <= 31:\n        return True\n    if month in [4, 6, 9, 11] and day >= 1 and day <= 30:\n        return True\n    if month == 2 and day >= 1 and day <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [txt.count(\"a\") if txt.count(\"a\") % 2 == 0 else \"0\"]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not lst or len(lst) == 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    return is_sorted(lst[1:])\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(x) % 2 == 1 else 1\n    return sign * sum(abs(x) for x in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = [1 if i % 2 == 0 else min_val for i in range(k)]\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    s = str(n)\n    odds = [int(c) for c in s if int(c) % 2 == 1]\n    return 0 if len(odds) == 0 else reduce(lambda x, y: x * y, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda x: int(x ** 2), lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if txt.strip() == \"\":\n        return False\n    last = txt.split(\" \")[-1]\n    return len(last) == 1 and last[0].isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [n for n in lst if n < 0]\n    pos = [p for p in lst if p > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    if isinstance(a, str) and isinstance(b, str):\n        a = a.replace(\",\", \".\")\n        b = b.replace(\",\", \".\")\n        a = float(a)\n        b = float(b)\n    elif isinstance(a, int) and isinstance(b, int):\n        a = float(a)\n        b = float(b)\n    elif isinstance(a, float) and isinstance(b, float):\n        pass\n    else:\n        raise Exception(\"Unknown type\")\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    result = 1\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or lst[0].count(\"0\") > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    if n >= 0:\n        return sum(int(d) for d in str(n))\n    else:\n        return (abs(n) // 10) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([num for num in nums if num > 10 and num % 2 == 1 and odds.startswith(str(num))])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [e for e in lst if len(e) % 2 == 0]\n    return sorted(result, key=lambda x: len(x))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, floor(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(num * num for num in lst if num >= 0 and num % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if (b[i:] + b[:i]) in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = abs(num)\n    even = sum(1 for i in str(ds) if i.isdigit() and int(i) % 2 == 0)\n    return [even, len(str(ds)) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 ,5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    return True\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    while \"**\" in ops:\n        index = ops.index(\"**\")\n        nums[index] = nums[index] ** nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    while \"*\" in ops:\n        index = ops.index(\"*\")\n        nums[index] = nums[index] * nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    while \"//\" in ops:\n        index = ops.index(\"//\")\n        nums[index] = nums[index] // nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    while \"+\" in ops:\n        index = ops.index(\"+\")\n        nums[index] = nums[index] + nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    while \"-\" in ops:\n        index = ops.index(\"-\")\n        nums[index] = nums[index] - nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                result += c.lower()\n            else:\n                result += c.upper()\n        else:\n            result += c\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = md5()\n    md5_hash.update(txt.encode())\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [x for x in range(lower, upper + 1) if x % 2 == 0]\n"
        ]
    },
    "php": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if len(stk) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        if i != 0:\n            result.append(delimiter)\n        result.append(num)\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = list(filter(lambda s: len(s) > 0, paren_string.split(\" \")))\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strs))\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = reduce(lambda x, y: x * y, numbers)\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(['1' if a[i] != b[i] else '0' for i in range(len(a))])\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    }\n    notes = [note for note in music_string.split(\" \") if note]\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = [num for num in numbers.split(\" \") if num in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "INF = float('inf')\ndef find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = numbers\n    sorted_numbers.sort()\n    min_diff = INF\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [((num - min_num) / (max_num - min_num)) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: isinstance(x, int), values))\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.islower():\n            result += ch.upper()\n        elif ch.isupper():\n            result += ch.lower()\n    return result\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return list(filter(lambda s: s.startswith(prefix_str), strs))\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda x: x > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = [x for x in l if x % 3 == 0]\n    sorted_third.sort()\n    return [sorted_third[i / 3] if i % 3 == 0 else x for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    result = list(set(l))\n    result.sort()\n    return result\n",
            "def max_element(l: List[int]) -> int:\n    if not l:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    evens = [x for i, x in enumerate(l) if i % 2 == 0]\n    evens.sort()\n    return [x if i % 2 == 0 else evens[i // 2] for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return pow(n, 2)\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = {}\n    for num in l:\n        if -num in seen:\n            return True\n        seen[num] = True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = l[:]\n    sl.sort()\n    count = len(l)\n    if count % 2 == 0:\n        return (sl[count // 2] + sl[count // 2 - 1]) / 2\n    else:\n        return sl[count // 2]\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr(((ord(ch) - 97 + 5) % 26) + 97))\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr(((ord(ch) - 97 + 21) % 26) + 97))\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(filter(lambda c: vowels.find(c) == -1, txt))\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return len(list(filter(lambda x: x < t, l))) == len(l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    set0 = list(set(s0))\n    set1 = list(set(s1))\n    set0.sort()\n    set1.sort()\n    return set0 == set1\n",
            "@lru_cache(maxsize=None)\ndef fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i] - l[i-1] for i in range(1, len(l))]\n    return diff.count(0) + diff.count(0) == len(diff) or diff.count(1) + diff.count(-1) == len(diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    result = list(set(l1) & set(l2))\n    result.sort()\n    return result\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return xs[1:]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] in vowels or i == len(s) - 1 and s[i].lower() == \"y\":\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: Union[int, float, str], shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = {k: v for k, v in freqs.items() if v >= k}\n    return max(good_vals.keys(), default=-1)\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst\n    sl.sort()\n    result = []\n    [left, right] = [0, len(sl) - 1]\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = sum(1 for i in range(len(q)) if q[i] == q[len(q) - i - 1]) == len(q)\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_multiply_prime(a: int) -> bool:\n    if a < 2:\n        return False\n    cnt = 0\n    for i in range(2, int(sqrt(a)) + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = int(round(a ** (1.0 / 3.0)))\n    return root ** 3 == a\n",
            "def hex_key(num: str) -> int:\n    return len(list(set(num).intersection(\"2357BD\")))\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = decbin(dec)\n    return f\"db{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * pow(10, n - 2)\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(digit) for digit in str(n))\n    return decbin(digits_sum)\ndef decbin(n: int) -> str:\n    if n == 0:\n        return '0'\n    result = ''\n    while n > 0:\n        result = str(n % 2) + result\n        n //= 2\n    return result\n",
            "def add(lst: List[int]) -> int:\n    return sum(v for i, v in enumerate(lst) if i % 2 == 1 and v % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = [word[::-1] for word in s.split()]\n    return ' '.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coords.append([i, j])\n    coords.sort(key=lambda c: (c[0], c[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    result = arr\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        result.sort()\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = list(set(lst))\n    sl.sort()\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split('. ')\n    return len(list(filter(lambda x: len(x) >= 2 and x[:2] == \"I \", sentences)))\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower() if ch.islower() else ch.upper()\n            if ch1 in vowels:\n                ch1 = ch1.translate({ord(c): ord(c) + 2 for c in vowels})\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = max(primes)\n    return sum(int(digit) for digit in str(largest))\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    return len(list(filter(lambda k: k.islower(), d.keys()))) == len(d) or len(list(filter(lambda k: k.isupper(), d.keys()))) == len(d)\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * abs(b) % 10\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return len(list(filter(lambda c: c in vowels, s)))\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split()\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y - 1 if y != x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) // 2\n    return bin(r_avg)[2:]\n",
            "def all_digits_odd(s: str) -> bool:\n    return sum(1 for c in s if int(c) % 2 != 0) == len(s)\ndef unique_digits(x: List[int]) -> List[int]:\n    result = [d for d in x if all_digits_odd(str(d))]\n    result.sort()\n    return result\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = list(filter(lambda x: 1 <= x and x <= 9, arr))\n    sorted_arr.sort(reverse=True)\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 != 0:\n            result.append(sum(nums[:i]))\n        else:\n            result.append(functools.reduce(lambda x, y: x * y, nums[:i], 1))\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return 2 * int(n_str[:2]) + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len(list(filter(lambda n: digits_sum(n) > 0, arr)))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = arr.copy()\n    sorted(sorted_arr)\n    for i in range(len(arr)):\n        if arr[:i] == sorted_arr[:i] and arr[i:] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2 != 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = [w for w in test.split() if len(w) > 0]\n    for w in words:\n        freq[w] = (freq[w] if w in freq else 0) + 1\n    result = {}\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join(filter(lambda ch: c not in ch, s.split()))\n    return [s1, \"yes\" if s1 == s[::-1] else \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for c in num if ord(c) % 2 == 1)\n        result.append(f\"the number of odd elements in the string {n} of the input.\")\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(ceil(sum(row) / capacity) for row in grid)\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count('1')\ndef sort_array(arr: List[int]) -> List[int]:\n    result = arr\n    result.sort(key=lambda x: (count_ones(x), x))\n    return result\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = [w for w in s.split() if len(w) > 0]\n    return [w for w in words if sum(c in consonants for c in w.lower()) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if vowels.find(word[i]) != -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        elif ch == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    result = arr\n    result.sort()\n    return result[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(filter(lambda x: x % 2 != 0, lst))\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(filter(lambda n: len(str(n)) <= 2, arr[:k]))\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != \"-\" or date[5] != \"-\":\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(sum(1 for c in txt if c.lower() in \"aeiou\" and ord(c) % 2 == 0))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)):\n        return False\n    freq = dict()\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    return len(lst) == 0 or max(freq.values()) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = len(list(filter(lambda x: x < 0, arr))) % 2 == 1 and -1 or 1\n    return sign * sum(arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 and 1 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(x) for x in str(n) if int(x) % 2 == 1]\n    return 0 if len(odds) == 0 else reduce(lambda x, y: x * y, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx = list(reversed(close_idx))\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda x: int(pow(ceil(x), 2)), lst))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt.split(' ')[-1]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr) - 1) if arr[i] < arr[i - 1]]\n    return max(idx + [-1])\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if len(neg) > 0 else None\n    min_pos = min(pos) if len(pos) > 0 else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = [1] * (n + 1)\n    result = 1\n    for i in range(1, n + 1):\n        fact[i] = fact[i - 1] * i\n        result *= fact[i]\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\" \", \"_\").replace(\"-\", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suffixes = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suffixes or len(lst[0]) == 0 or not lst[0][0].isalpha() or len(list(filter(str.isdigit, lst[0]))) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    return \" \".join(word for word in words if is_prime(len(word)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(digit) for digit in n_str)\n    else:\n        return 2 * int(n_str[:2]) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    result = nums\n    result.sort(key=lambda x: digits_sum(x), reverse=True)\n    return result\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len(list(filter(lambda n: n > 10 and n % 2 == 1 and odds.find(str(n)[0]) != -1, nums)))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        [l, r] = [r, l]\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = list(filter(lambda x: len(x) % 2 == 0, lst))\n    result.sort(key=lambda x: len(x), reverse=True)\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -float('inf')\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i]) != -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 , 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] ** 2 + s[1] ** 2 == s[2] ** 2\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w.split()))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators\n    nums = operands\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            del nums[i + 1]\n            del ops[i]\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not bool(list(filter(str.isalpha, s))):\n        return s[::-1]\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.isupper():\n                result += ch.lower()\n            else:\n                result += ch.upper()\n        else:\n            result += ch\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5 = hashlib.md5(txt.encode('utf-8'))\n    return md5.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    },
    "python": {
        "cpp": [
            "#",
            "#",
            "double truncateNumber(double num) {\n    return num - floor(num);\n}\n",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    }\n    return greatestCommonDivisor(b, a % b);\n}\n",
            "#",
            "#",
            "#",
            "#",
            "int howManyTimes(const string& s, const string& substring) {\n    int times = 0;\n    for (int i = 0; i < s.length() - substring.length() + 1; i++) {\n        if (s.substr(i, substring.length()) == substring) {\n            times++;\n        }\n    }\n    return times;\n}\n",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += strlen(to_string(i).c_str());\n        }\n    }\n    return cnt;\n}\n",
            "#",
            "string encodeCyclic(const string& s) {\n    string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (i + 2 < s.size()) {\n            result += s.substr(i+1, 2);\n            result += s[i];\n        } else {\n            result += s.substr(i, 1 + (s.size() - i));\n        }\n    }\n    return result;\n}\nstring decodeCyclic(const string& s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "#",
            "#",
            "int carRaceCollision(int n) {\n    return n * n;\n}\n",
            "#",
            "#",
            "#",
            "#",
            "int fib4(int n) {\n    int a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d = c;\n        c = sum(a, b);\n        a = b;\n        b = d;\n    }\n    return c;\n}\n",
            "#",
            "#",
            "int modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "#",
            "#",
            "#",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "int sumToN(int n) {\n    return n * (n + 1) / 2;\n}\n",
            "#",
            "#",
            "#",
            "int vowelsCount(const string& s) {\n    string vowels = \"aeiou\";\n    int cnt = 0;\n    for (char c : s) {\n        if (find(vowels.begin(), vowels.end(), c) != vowels.end()) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n",
            "string circularShift(int x, int shift) {\n    string x_str = to_string(x);\n    if (shift > x_str.length()) {\n        return x_str.substr(x_str.length() - 1);\n    }\n    else {\n        string reversed = x_str.substr(x_str.length() - shift, x_str.length() - shift);\n        reversed += x_str.substr(0, x_str.length() - shift);\n        return reversed;\n    }\n}\n",
            "int digitSum(const string& s) {\n    int result = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            result += ord(c) - ord('A');\n        }\n    }\n    return result;\n}\n",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "int smallestChange(const vector<int>& arr) {\n    int n = arr.size();\n    int ans = 0;\n    for (int i = 0; i < n // 2; i++) {\n        if (arr[i] != arr[n - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "#",
            "#",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "#",
            "int hexKey(const string& num) {\n    int result = 0;\n    for (char c : num) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "#",
            "#",
            "#",
            "#",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * (10 * n - 1);\n}\n",
            "#",
            "int add(const vector<int>& lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n",
            "#",
            "vector<vector<int>> getRow(const vector<vector<int>>& lst, int x) {\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    return sorted(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] != b[0]) {\n            return a[0] < b[0];\n        }\n        return -a[1] > b[1];\n    });\n}\n",
            "#",
            "#",
            "#",
            "int isBored(const string& s) {\n    int count = 0;\n    string::const_iterator it = s.begin();\n    while (it != s.end()) {\n        if (*it == '.' || *it == '?' || *it == '!') {\n            string sentence = s.substr(0, it - s.begin());\n            if (sentence.length() >= 2 && sentence.substr(0, 2) == \"I \") {\n                count++;\n            }\n            it += 1;\n        } else {\n            it += 1;\n        }\n    }\n    return count;\n}\n",
            "bool anyInt(any x, any y, any z) {\n    if (x.type() == typeid(int) && y.type() == typeid(int) && z.type() == typeid(int)) {\n        if (x.cast<int>() + y.cast<int>() == z.cast<int>()) {\n            return true;\n        }\n        if (x.cast<int>() + z.cast<int>() == y.cast<int>()) {\n            return true;\n        }\n        if (y.cast<int>() + z.cast<int>() == x.cast<int>()) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "#",
            "#",
            "#",
            "#",
            "int multiply(int a, int b) {\n    int result = abs(a) % 10 * abs(b) % 10;\n    if (a < 0) {\n        result = -result;\n    }\n    return result;\n}\n",
            "int countUpper(const string& s) {\n    int count = 0;\n    for (char c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "int solution(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "int addElements(const vector<int>& arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k && i < arr.size(); i++) {\n        if (strlen(to_string(arr[i]).c_str()) <= 2) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "int specialFilter(const vector<int>& nums) {\n    int count = 0;\n    for (int n : nums) {\n        if (n > 10 && n % 2 == 1 && (n < 100 || n > 1000) && (str(n)[0] == '1' || str(n)[0] == '3' || str(n)[0] == '5' || str(n)[0] == '7' || str(n)[0] == '9')) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "#",
            "#",
            "#",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    int i;\n    for (i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#"
        ],
        "csharp": [
            "class Global {\n    public static bool HasCloseElements(IList<double> numbers, double threshold) {\n        foreach (var i in numbers) {\n            foreach (var j in numbers) {\n                if (i != j && Math.Abs(i - j) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<string> SeparateParenGroups(string parenString) {\n        var groups = new List<string>();\n        var stk = new Stack<char>();\n        var currentGroup = \"\";\n        var parens = parenString.Replace(\" \", \"\");\n        foreach (var ch in parens) {\n            if (ch == '(') {\n                stk.Push(ch);\n                currentGroup += ch;\n            }\n            else if (ch == ')') {\n                stk.Pop();\n                currentGroup += ch;\n                if (stk.Count == 0) {\n                    groups.Add(currentGroup);\n                    currentGroup = \"\";\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double TruncateNumber(double num) {\n        return num - (int)num;\n    }\n}\n",
            "class Global {\n    public static bool BelowZero(IList<int> operations) {\n        var balance = 0;\n        foreach (var op in operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double MeanAbsoluteDeviation(IList<double> numbers) {\n        double mean = numbers.Average();\n        double deviation = numbers.Select(x => Math.Abs(x - mean)).Average();\n        return deviation;\n    }\n}\n",
            "class Global {\n    public static IList<int> Intersperse(IList<int> numbers, int delimiter) {\n        var result = new List<int>();\n        for (int i = 0; i < numbers.Count; i++) {\n            if (i != 0) {\n                result.Add(delimiter);\n            }\n            result.Add(numbers[i]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> ParseNestedParens(string parenString) {\n        var result = new List<int>();\n        var parenGroups = parenString.Split();\n        foreach (var group in parenGroups) {\n            var maxDepth = 0;\n            var depth = 0;\n            foreach (var ch in group) {\n                if (ch == \"(\") {\n                    depth++;\n                    maxDepth = Math.Max(maxDepth, depth);\n                }\n                else if (ch == \")\") {\n                    depth--;\n                }\n            }\n            result.Add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> FilterBySubstring(IList<string> strs, string substring) {\n        return strs.Where(s => s.Contains(substring)).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<int> SumProduct(IList<int> numbers) {\n        var nSum = numbers.Sum();\n        var nProduct = numbers.Aggregate((x, y) => x * y, 1);\n        return new List<int> { nSum, nProduct };\n    }\n}\n",
            "class Global {\n    public static IList<int> RollingMax(IList<int> numbers) {\n        var maxSoFar = float.MinValue;\n        var result = new List<int>();\n        foreach (var num in numbers) {\n            maxSoFar = Math.Max(maxSoFar, num);\n            result.Add(maxSoFar);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool IsPalindrome(string s) {\n        int n = s.Length;\n        for (int i = 0; i < n / 2; i++) {\n            if (s[i] != s[n - i - 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static string MakePalindrome(string s) {\n        if (IsPalindrome(s)) {\n            return s;\n        }\n        for (int i = 0; i < s.Length; i++) {\n            if (IsPalindrome(s.Substring(0, i + 1))) {\n                return s.Substring(s.Length - i - 1, i + 1);\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n            throw new ArgumentException(\"Strings must be of equal length\");\n        }\n        var result = new StringBuilder();\n        for (int i = 0; i < a.Length; i++) {\n            result.Append(0 if (a[i] == b[i]) else 1);\n        }\n        return result.ToString();\n    }\n}\n",
            "class Global {\n    public static string? Longest(IList<string> strs) {\n        if (strs == null || strs.Count == 0) {\n            return null;\n        }\n        var longest_s = strs[0];\n        foreach (var s in strs) {\n            if (s.Length > longest_s.Length) {\n                longest_s = s;\n            }\n        }\n        return longest_s;\n    }\n}\n",
            "class Global {\n    public static int GreatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return GreatestCommonDivisor(b, a % b);\n    }\n}\n",
            "class Global {\n    public static IList<string> AllPrefixes(string s) {\n        var prefixes = new List<string>();\n        for (int i = 0; i <= s.Length; i++) {\n            prefixes.Add(s.Substring(0, i));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static string StringSequence(int n) {\n        return string.Join(\" \", Enumerable.Range(1, n + 1));\n    }\n}\n",
            "class Global {\n    public static int CountDistinctCharacters(string s) {\n        var s = s.ToLower();\n        var charCount = new Dictionary<char, int>();\n        foreach (var c in s) {\n            if (!charCount.ContainsKey(c)) {\n                charCount[c] = 1;\n            } else {\n                charCount[c]++;\n            }\n        }\n        return charCount.Values.Sum();\n    }\n}\n",
            "class Global {\n    public static IList<int> ParseMusic(string musicString) {\n        var durations = new Dictionary<string, int>() {\n            {\"o\", 4},\n            {\"o|\", 2},\n            {\".|\", 1}\n        };\n        var notes = musicString.Split(' ');\n        return notes.Select(n => durations[n]).ToList();\n    }\n}\n",
            "class Global {\n    public static int HowManyTimes(string s, string substring) {\n        int times = 0;\n        for (int i = 0; i < s.Length - substring.Length + 1; i++) {\n            if (s.Substring(i, substring.Length) == substring) {\n                times++;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static string SortNumbers(string numbers) {\n        var numDict = new Dictionary<string, int>() {\n            { \"zero\", 0 },\n            { \"one\", 1 },\n            { \"two\", 2 },\n            { \"three\", 3 },\n            { \"four\", 4 },\n            { \"five\", 5 },\n            { \"six\", 6 },\n            { \"seven\", 7 },\n            { \"eight\", 8 },\n            { \"nine\", 9 },\n        };\n        var numList = numbers.Split(\" \").ToList();\n        numList.Sort((a, b) => numDict[a].CompareTo(numDict[b]));\n        return string.Join(\" \", numList);\n    }\n}\n",
            "class Global {\n    public static IList<double> FindClosestElements(IList<double> numbers) {\n        var sortedNumbers = numbers.OrderBy(n => n).ToList();\n        var minDiff = double.MaxValue;\n        var closestPair = new List<double>();\n        for (int i = 1; i < sortedNumbers.Count; i++) {\n            var diff = Math.Abs(sortedNumbers[i] - sortedNumbers[i - 1]);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = new List<double>() { sortedNumbers[i - 1], sortedNumbers[i] };\n            }\n        }\n        return closestPair;\n    }\n}\n",
            "class Global {\n    public static IList<double> RescaleToUnit(IList<double> numbers) {\n        if (numbers.Count == 0) {\n            return new List<double>();\n        }\n        double minNum = numbers[0];\n        double maxNum = numbers[0];\n        foreach (var num in numbers) {\n            if (num < minNum) {\n                minNum = num;\n            }\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n        if (minNum == maxNum) {\n            return new List<double>() { 0.0 };\n        }\n        var result = new List<double>();\n        foreach (var num in numbers) {\n            result.Add((num - minNum) / (maxNum - minNum));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> FilterIntegers(IList<object> values) {\n        return values.OfType<int>().ToList();\n    }\n}\n",
            "class Global {\n    public static int StrLength(string s) {\n        return s.Length;\n    }\n}\n",
            "class Global {\n    public static int LargestDivisor(int n) {\n        int largestDivisor = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largestDivisor = n / i;\n            }\n        }\n        return largestDivisor;\n    }\n}\n",
            "class Global {\n    public static IList<int> Factorize(int n) {\n        var factors = new List<int>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.Add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static IList<int> RemoveDuplicates(IList<int> numbers) {\n        var counts = new Dictionary<int, int>();\n        var res = new List<int>();\n        foreach (var num in numbers) {\n            counts[num] = counts.TryAdd(num, 0) ?? 0 + 1;\n        }\n        foreach (var num in numbers) {\n            if (counts[num] == 1) {\n                res.Add(num);\n            }\n        }\n        return res;\n    }\n}\n",
            "class Global {\n    public static string FlipCase(string s) {\n        var result = new StringBuilder();\n        for (int i = 0; i < s.Length; i++) {\n            var ch = s[i];\n            if (char.IsLetter(ch)) {\n                if (char.IsUpper(ch)) {\n                    result.Append(char.ToLower(ch));\n                }\n                else {\n                    result.Append(char.ToUpper(ch));\n                }\n            }\n            else {\n                result.Append(ch);\n            }\n        }\n        return result.ToString();\n    }\n}\n",
            "class Global {\n    public static string Concatenate(List<string> strs) {\n        return string.Join(\"\", strs);\n    }\n}\n",
            "class Global {\n    public static IList<string> FilterByPrefix(IList<string> strs, string prefixStr) {\n        var result = new List<string>();\n        foreach (var s in strs) {\n            if (s.StartsWith(prefixStr)) {\n                result.Add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> GetPositive(IList<int> l) {\n        var result = new List<int>();\n        foreach (var num in l) {\n            if (num > 0) {\n                result.Add(num);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static double Poly(IList<int> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.Count; i++) {\n            res += xs[i] * Math.Pow(x, i);\n        }\n        return res;\n    }\n    public static double FindZero(IList<int> xs) {\n        double x1 = 1.0, x2 = -1.0;\n        while (Poly(xs, x1) * Poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.Abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (Poly(xs, mid) == 0) {\n                return mid;\n            }\n            if (Poly(xs, mid) * Poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortThird(IList<int> l) {\n        var sortedThird = l[::3].Sort();\n        var result = new List<int>(l);\n        for (int i = 0; i < l.Count; i++) {\n            if (i % 3 == 0) {\n                result[i] = sortedThird[i / 3];\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> ListUnique(IList<int> l) {\n        var seen = new HashSet<int>();\n        var result = new List<int>();\n        foreach (var item in l) {\n            if (!seen.Contains(item)) {\n                seen.Add(item);\n                result.Add(item);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int MaxElement(IList<int> l) {\n        if (l.Count == 0) {\n            return 0;\n        }\n        return l.Max();\n    }\n}\n",
            "class Global {\n    public static int FizzBuzz(int n) {\n        var cnt = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += str(i).Count(\"7\");\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static IList<int> SortEven(IList<int> l) {\n        var sortedEven = new List<int>(l[::2]);\n        sortedEven.Sort();\n        var result = new List<int>(l);\n        for (int i = 0; i < result.Count; i++) {\n            if (i % 2 == 0) {\n                result[i] = sortedEven[i / 2];\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string EncodeCyclic(string s) {\n        var result = new StringBuilder();\n        for (int i = 0; i < s.Length; i += 3) {\n            if (i + 3 > s.Length) {\n                result.Append(s.Substring(i));\n            } else {\n                result.Append(s.Substring(i+1, 2));\n                result.Append(s.Substring(i, 1));\n            }\n        }\n        return result.ToString();\n    }\n    public static string DecodeCyclic(string s) {\n        return EncodeCyclic(EncodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static int PrimeFib(int n) {\n        var f = new List<int>();\n        f.Add(0);\n        f.Add(1);\n        var cnt = 0;\n        while (cnt < n) {\n            var next = f[f.Count - 1] + f[f.Count - 2];\n            if (IsPrime(next)) {\n                cnt++;\n            }\n            f.Add(next);\n        }\n        return f[f.Count - 1];\n    }\n}\n",
            "class Global {\n    public static bool TriplesSumToZero(IList<int> l) {\n        for (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static int CarRaceCollision(int n) {\n        return n * n;\n    }\n}\n",
            "class Global {\n    public static IList<int> IncrList(IList<int> l) {\n        var result = new List<int>();\n        foreach (var i in l) {\n            result.Add(i + 1);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool PairsSumToZero(IList<int> l) {\n        var seen = new HashSet<int>();\n        for (int i = 0; i < l.Count; i++) {\n            if (seen.Contains(-l[i])) {\n                return true;\n            }\n            seen.Add(l[i]);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string ChangeBase(int x, int bas) {\n        var digits = new List<char>();\n        while (x > 0) {\n            digits.Add((char)(x % bas));\n            x /= bas;\n        }\n        return string.Join(\"\", digits.Reverse().ToArray());\n    }\n}\n",
            "class Global {\n    public static double TriangleArea(int a, int h) {\n        return (double)a * h / 2;\n    }\n}\n",
            "class Global {\n    public static int Fib4(int n) {\n        int[] fib = {0, 0, 2, 0};\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = fib[0] + fib[1] + fib[2];\n        }\n        return fib[n % 4];\n    }\n}\n",
            "class Global {\n    public static double Median(IList<double> l) {\n        l.Sort();\n        if (l.Count % 2 != 0) {\n            return l[l.Count / 2];\n        } else {\n            return (l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0;\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsPalindrome(string txt) {\n        var sb = new StringBuilder(txt.ToLower());\n        var sbReverse = new StringBuilder();\n        while (sb.Length > 1) {\n            char c = sb.Remove(sb.Length - 1, 1).ToCharArray()[0];\n            sbReverse.Append(c);\n        }\n        return txt.ToLower() == sbReverse.ToString();\n    }\n}\n",
            "class Global {\n    public static int Modp(int n, int p) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "class Global {\n    public static string EncodeShift(string s) {\n        string result = \"\";\n        foreach (char ch in s) {\n            char shifted = (char)(((ch - 'a' + 5) % 26) + 'a');\n            result += shifted;\n        }\n        return result;\n    }\n    public static string DecodeShift(string s) {\n        string result = \"\";\n        foreach (char ch in s) {\n            char shifted = (char)(((ch - 'a' + 21) % 26) + 'a');\n            result += shifted;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string RemoveVowels(string txt) {\n        var vowels = \"aeiouAEIOU\";\n        return new string(txt.Where(c => vowels.IndexOf(c) == -1).ToArray());\n    }\n}\n",
            "class Global {\n    public static bool BelowThreshold(IList<int> l, int t) {\n        return l.All(x => x < t);\n    }\n}\n",
            "class Global {\n    public static int Add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static bool SameChars(string s0, string s1) {\n        return Set(s0).Equals(Set(s1));\n    }\n    private static HashSet<char> Set(string s) {\n        var result = new HashSet<char>();\n        foreach (var c in s) {\n            result.Add(c);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int Fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}\n",
            "class Global {\n    public static bool CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach (char b in brackets) {\n            if (b == '<') {\n                depth++;\n            }\n            else if (b == '>') {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static bool Monotonic(IList<int> l) {\n        var diff = new List<int>();\n        for (int i = 0; i < l.Count - 1; i++) {\n            diff.Add(l[i + 1] - l[i]);\n        }\n        return all(x <= 0 for x in diff) || all(x >= 0 for x in diff);\n    }\n}\n",
            "class Global {\n    public static IList<int> Common(IList<int> l1, IList<int> l2) {\n        var set1 = new HashSet<int>(l1);\n        var set2 = new HashSet<int>(l2);\n        var result = new List<int>();\n        foreach (var x in set1) {\n            if (set2.Contains(x)) {\n                result.Add(x);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int LargestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int SumToN(int n) {\n        return n * (n + 1) / 2;\n    }\n}\n",
            "class Global {\n    public static bool CorrectBracketing(string brackets) {\n        int depth = 0;\n        foreach (var b in brackets) {\n            if (b == \"(\") {\n                depth++;\n            }\n            else if (b == \")\") {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static IList<int> Derivative(IList<int> xs) {\n        var result = new List<int>();\n        for (int i = 1; i < xs.Count; i++) {\n            result.Add(xs[i] * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int Fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n        int a = 0, b = 0, c = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = c;\n            c = a + b + c;\n            a = b;\n            b = temp;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int VowelsCount(string s) {\n        var vowels = \"aeiou\";\n        var cnt = 0;\n        for (int i = 0; i < s.Length; i++) {\n            string ch = s[i];\n            if (vowels.Contains(ch.ToLower())) {\n                cnt++;\n            } else if (i == s.Length - 1 && ch.ToLower() == \"y\") {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static string CircularShift(int x, int shift) {\n        string xStr = Convert.ToString(x);\n        if (shift > xStr.Length) {\n            return xStr.Reverse();\n        }\n        else {\n            return xStr.Substring(xStr.Length - shift) + xStr.Substring(0, xStr.Length - shift);\n        }\n    }\n}\n",
            "class Global {\n    public static int DigitSum(string s) {\n        return s.Where(c => c.IsUpper).Sum(c => ord(c));\n    }\n}\n",
            "class Global {\n    public static int FruitDistribution(string s, int n) {\n        var words = s.Split(' ');\n        var apples = int.Parse(words[words.IndexOf(\"apples\") - 1]);\n        var oranges = int.Parse(words[words.IndexOf(\"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n}\n",
            "class Global {\n    public static IList<int> Pluck(IList<int> arr) {\n        var evens = arr.Where(n => n % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return new List<int>();\n        }\n        var minEven = evens.Min();\n        return new List<int>() { minEven, arr.Index(minEven) };\n    }\n}\n",
            "class Global {\n    public static int Search(IList<int> lst) {\n        var freqs = new Dictionary<int, int>();\n        foreach (var n in lst) {\n            if (!freqs.ContainsKey(n)) {\n                freqs[n] = 0;\n            }\n            freqs[n]++;\n        }\n        var goodVals = freqs.Keys.Where(k => freqs[k] >= k).ToList();\n        return goodVals.Max(defaultValue: -1);\n    }\n}\n",
            "class Global {\n    public static IList<int> StrangeSortList(IList<int> lst) {\n        var sl = lst.OrderBy(x => x).ToList();\n        var result = new List<int>();\n        var left = 0;\n        var right = sl.Count - 1;\n        while (left <= right) {\n            result.Add(sl[left]);\n            left++;\n            if (left <= right) {\n                result.Add(sl[right]);\n                right--;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double TriangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (double)(a + b + c) / 2.0;\n            return Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}\n",
            "class Global {\n    public static bool WillItFly(IList<int> q, int w) {\n        if (q.Count == 0) {\n            return false;\n        }\n        var isPalin = true;\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count - i - 1]) {\n                isPalin = false;\n                break;\n            }\n        }\n        var total = q.Sum();\n        return isPalin && total <= w;\n    }\n}\n",
            "class Global {\n    public static int SmallestChange(IList<int> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.Count / 2; i++) {\n            if (arr[i] != arr[arr.Count - i - 1]) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static IList<string> TotalMatch(IList<string> lst1, IList<string> lst2) {\n        var cnt1 = lst1.Count * lst1.AverageLength;\n        var cnt2 = lst2.Count * lst2.AverageLength;\n        return lst1.Count > lst2.Count ? lst1 : lst2;\n    }\n}\n",
            "class Global {\n    public static bool IsMultiplyPrime(int a) {\n        if (a < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(a); i++) {\n            if (a % i == 0) {\n                int cnt = 0;\n                while (a % i == 0) {\n                    cnt++;\n                    a /= i;\n                }\n                if (cnt == 3) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static bool IsSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "class Global {\n    public static bool IsCube(int a) {\n        a = Math.Abs(a);\n        int root = (int)Math.Pow(a, 1.0 / 3.0);\n        return root * root * root == a;\n    }\n}\n",
            "class Global {\n    public static int HexKey(string num) {\n        var count = 0;\n        foreach (var c in num) {\n            if (\"2357BD\".Contains(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static string DecimalToBinary(int dec) {\n        string binary = string.Format(\"{0:b}\", dec);\n        return string.Format(\"db{0}db\", binary);\n    }\n}\n",
            "class Global {\n    public static bool IsHappy(string s) {\n        if (s.Length < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static IList<string> NumericalLetterGrade(IList<double> grades) {\n        var result = new List<string>();\n        foreach (var g in grades) {\n            if (g == 4.0) {\n                result.Add(\"A+\");\n            }\n            else if (g > 3.7) {\n                result.Add(\"A\");\n            }\n            else if (g > 3.3) {\n                result.Add(\"A-\");\n            }\n            else if (g > 3.0) {\n                result.Add(\"B+\");\n            }\n            else if (g > 2.7) {\n                result.Add(\"B\");\n            }\n            else if (g > 2.3) {\n                result.Add(\"B-\");\n            }\n            else if (g > 2.0) {\n                result.Add(\"C+\");\n            }\n            else if (g > 1.7) {\n                result.Add(\"C\");\n            }\n            else if (g > 1.3) {\n                result.Add(\"C-\");\n            }\n            else if (g > 1.0) {\n                result.Add(\"D+\");\n            }\n            else if (g > 0.7) {\n                result.Add(\"D\");\n            }\n            else if (g > 0.0) {\n                result.Add(\"D-\");\n            }\n            else {\n                result.Add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool PrimeLength(string s) {\n        int length = s.Length;\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int StartsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 2 * 9 * (10 * n - 1);\n    }\n}\n",
            "class Global {\n    public static string Solve(int n) {\n        var digitsSum = 0;\n        var nStr = n.ToString();\n        for (int i = 0; i < nStr.Length; i++) {\n            digitsSum += int.Parse(nStr[i]);\n        }\n        return Convert.ToString(digitsSum, 2);\n    }\n}\n",
            "class Global {\n    public static int Add(List<int> lst) {\n        return lst.Count(x => i % 2 == 1 && x % 2 == 0);\n    }\n}\n",
            "class Global {\n    public static string AntiShuffle(string s) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n        foreach (var word in words) {\n            result.Add(\"\".Join(sorted(word)));\n        }\n        return string.Join(\" \", result);\n    }\n}\n",
            "class Global {\n    public static IList<IList<int>> GetRow(IList<IList<int>> lst, int x) {\n        var coords = new List<List<int>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    coords.Add(new List<int>() { i, j });\n                }\n            }\n        }\n        return coords.OrderBy(a => new Tuple<int, int>(a[0], -a[1])).ToList();\n    }\n}\n",
            "class Global {\n    public static IList<int> SortArray(IList<int> arr) {\n        if (arr.Count == 0) {\n            return new List<int>();\n        }\n        if ((arr[0] + arr[arr.Count - 1]) % 2 == 0) {\n            return arr.OrderByDescending(x => x).ToList();\n        }\n        return arr.OrderBy(x => x).ToList();\n    }\n}\n",
            "class Global {\n    public static string Encrypt(string s) {\n        var result = new StringBuilder();\n        foreach (var ch in s) {\n            var shifted = (char)((int)ch + 4);\n            if (shifted > 'z') {\n                shifted -= 26;\n            }\n            result.Append(shifted);\n        }\n        return result.ToString();\n    }\n}\n",
            "class Global {\n    public static int? NextSmallest(IList<int> lst) {\n        var sl = lst.OrderBy(x => x).GroupBy(x => x).Select(g => g.OrderBy(x => x).FirstOrDefault()).ToList();\n        if (sl.Count < 2) {\n            return null;\n        }\n        return sl[1];\n    }\n}\n",
            "class Global {\n    public static int IsBored(string s) {\n        var sentences = Regex.Split(s, @\"[.!?]\\s*\");\n        return sentences.Count(sentence =>\n            sentence.Length >= 2 && sentence[0] == 'I' && sentence[1] == ' ');\n    }\n}\n",
            "class Global {\n    public static bool AnyInt(object x, object y, object z) {\n        if (x is int && y is int && z is int) {\n            int sum = (int)x + (int)y + (int)z;\n            if (sum == ((int)x + (int)y == (int)z) ||\n                sum == ((int)x + (int)z == (int)y) ||\n                sum == ((int)y + (int)z == (int)x)) {\n                    return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string Encode(string message) {\n        var vowels = new string{\"aeiou\", \"AEIOU\"};\n        var result = new StringBuilder();\n        for (int i = 0; i < message.Length; i++) {\n            var ch = message[i];\n            if (char.IsLetter(ch)) {\n                var ch1 = ch.ToUpper() if char.IsLower(ch) else ch.ToLower();\n                if (vowels.Contains(ch1.ToString())) {\n                    ch1 = (char)((char)ch1 + 2);\n                }\n                result.Append(ch1);\n            } else {\n                result.Append(ch);\n            }\n        }\n        return result.ToString();\n    }\n}\n",
            "class Global {\n    public static int Skjkasdkd(IList<int> lst) {\n        var primes = lst.Where(isPrime).ToList();\n        if (primes.Count == 0) {\n            return 0;\n        }\n        var largest = primes.Max(n => Convert.ToString(n));\n        return primes.Where(n => Convert.ToString(n).Length == largest.Length)\n                      .Select(n => Convert.ToInt32(Convert.ToString(n).Replace(new char[] { '0' }, new char[] { })))\n                      .Sum();\n    }\n    private static bool isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static bool CheckDictCase(IDictionary<string, string> d) {\n        if (d == null || d.Count == 0) {\n            return false;\n        }\n        return all(c.IsLower() for c in d.Keys) || all(c.IsUpper() for c in d.Keys);\n    }\n}\n",
            "class Global {\n    public static IList<int> CountUpTo(int n) {\n        var primes = new List<int>();\n        for (int num = 2; num < n; num++) {\n            if (all(num % p != 0 for p in primes)) {\n                primes.Add(num);\n            }\n        }\n        return primes;\n    }\n}\n",
            "class Global {\n    public static int Multiply(int a, int b) {\n        int result = abs(a) % 10 * abs(b) % 10;\n        if (a < 0 || b < 0) {\n            result = -result;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int CountUpper(string s) {\n        var vowels = \"AEIOU\";\n        return s.Count(c => i % 2 == 0 && vowels.Contains(c));\n    }\n}\n",
            "class Global {\n    public static int ClosestInteger(string value) {\n        double num = double.Parse(value);\n        if (num >= 0) {\n            return (int)(num + 0.5);\n        } else {\n            return (int)(num - 0.5);\n        }\n    }\n}\n",
            "class Global {\n    public static IList<int> MakeAPile(int n) {\n        var result = new List<int>();\n        for (int i = 0; i < n; i++) {\n            result.Add(n + 2 * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> WordsString(string s) {\n        var result = new List<string>();\n        foreach (var w in s.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries)) {\n            result.Add(w);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int ChooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        return y - 1 if (x != y) else -1;\n    }\n}\n",
            "class Global {\n    public static string? RoundedAvg(int n, int m) {\n        if (n > m) {\n            return null;\n        }\n        int rAvg = (m + n) / 2 + (m + n) % 2 > m ? 1 : 0;\n        string result = Convert.ToString(rAvg, 2);\n        while (result.Length < rAvg.BitLength()) {\n            result = \"0\" + result;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool AllDigitsOdd(string s) {\n        return all(ord(digit) % 2 != 0 for digit in s);\n    }\n    public static IList<int> UniqueDigits(IList<int> x) {\n        var seen = new HashSet<int>();\n        var result = new List<int>();\n        foreach (var num in x) {\n            if (allDigitsOdd(num.ToString()) && !seen.Contains(num)) {\n                seen.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> ByLength(IList<int> arr) {\n        var digitNames = new List<string>() { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" };\n        var sortedArr = arr.Where(x => 1 <= x && x <= 9).ToList();\n        var result = new List<string>();\n        foreach (var x in sortedArr) {\n            result.Add(digitNames[x - 1]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> F(int n) {\n        var nums = new List<int>(n);\n        for (int i = 0; i < n; i++) {\n            nums[i] = i + 1;\n        }\n        var result = new List<int>(n);\n        for (int i = 0; i < n; i++) {\n            if (i % 2 != 0) {\n                result[i] = nums[0];\n                for (int j = 1; j < i; j++) {\n                    result[i] += nums[j];\n                }\n            } else {\n                result[i] = reduce(nums[0], nums.Skip(1).ToArray(), 1);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool IsPalindrome(string txt) {\n        int n = txt.Length;\n        for (int i = 0; i < n / 2; i++) {\n            if (txt[i] != txt[n - i - 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static IList<int> EvenOddPalindrome(int n) {\n        var cnt = new List<int>();\n        for (int i = 1; i <= n; i++) {\n            if (IsPalindrome(i.ToString())) {\n                cnt.Add(i % 2);\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static int CountNums(IList<int> arr) {\n        return arr.Count(n => digits_sum(n) > 0);\n    }\n}\n",
            "class Global {\n    public static bool MoveOneBall(IList<int> arr) {\n        if (arr.Count == 0) {\n            return true;\n        }\n        var sortedArr = arr.OrderBy(x => x).ToList();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr.OrderBy(x => x).Skip(i).SequenceEqual(sortedArr.Skip(arr.Count - i).Take(arr.Count - i)) &&\n                arr.OrderBy(x => x).Take(arr.Count - i).SequenceEqual(sortedArr.Skip(i).Take(arr.Count - i))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string CanExchange(IList<int> lst1, IList<int> lst2) {\n        var oddCnt = 0;\n        foreach (var num in lst1) {\n            if (num % 2 != 0) {\n                oddCnt++;\n            }\n        }\n        var evenCnt = 0;\n        foreach (var num in lst2) {\n            if (num % 2 == 0) {\n                evenCnt++;\n            }\n        }\n        return evenCnt >= oddCnt ? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static IDictionary<string, int> Histogram(string test) {\n        var freq = new Dictionary<string, int>();\n        var words = test.Split(' ');\n        foreach (var w in words) {\n            if (w.Length > 0) {\n                freq[w] = freq.ContainsKey(w) ? freq[w] + 1 : 1;\n            }\n        }\n        var result = new Dictionary<string, int>();\n        if (freq.Count > 0) {\n            var maxFreq = freq.Values.Max();\n            foreach (var kvp in freq) {\n                if (kvp.Value == maxFreq) {\n                    result[kvp.Key] = kvp.Value;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> ReverseDelete(string s, string c) {\n        var s1 = new string(s.Where(c.Contains).ToArray());\n        return new List<string> { s1, (s1 == s1.Reverse() ? \"yes\" : \"no\") };\n    }\n}\n",
            "class Global {\n    public static IList<string> OddCount(IList<string> lst) {\n        var result = new List<string>();\n        foreach (var s in lst) {\n            var n = s.Count(c => (int)c % 2 == 1);\n            var rs = \"the number of odd elements in the string \" + n + \" i of the input.\";\n            result.Add(rs.Replace(\"i\", s.Length.ToString()));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int MinSubArraySum(IList<int> nums) {\n        int min_sum = 0;\n        int cur_sum = 0;\n        foreach (int n in nums) {\n            cur_sum = Math.Min(cur_sum + n, 0);\n            min_sum = Math.Min(cur_sum, min_sum);\n        }\n        if (min_sum == 0) {\n            min_sum = nums.Min();\n        }\n        return min_sum;\n    }\n}\n",
            "class Global {\n    public static int MaxFill(IList<IList<int>> grid, int capacity) {\n        var rows = grid.Count;\n        var cols = grid[0].Count;\n        var result = 0;\n        for (int i = 0; i < rows; i++) {\n            var total = 0;\n            for (int j = 0; j < cols; j++) {\n                total += grid[i][j];\n            }\n            result += Math.Ceiling(total / capacity);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int CountOnes(int num) {\n        return Convert.ToString(num).Count(BitConverter.GetBytes(num).First().ToInt32(BitConverter.LittleEndian));\n    }\n    public static IList<int> SortArray(IList<int> arr) {\n        var result = new List<int>();\n        foreach (var num in arr) {\n            result.Add(num);\n        }\n        for (int i = 0; i < result.Count - 1; i++) {\n            var minIndex = i;\n            for (int j = i + 1; j < result.Count; j++) {\n                if (CountOnes(result[j]) < CountOnes(result[minIndex])) {\n                    minIndex = j;\n                }\n            }\n            var temp = result[i];\n            result[i] = result[minIndex];\n            result[minIndex] = temp;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<string> SelectWords(string s, int n) {\n        var consonants = \"bcdfghjklmnpqrstvwxyz\";\n        var words = s.Split(' ');\n        var result = new List<string>();\n        foreach (var w in words) {\n            if (w.Length == 0) {\n                continue;\n            }\n            var hasNConsonants = (from c in consonants where w.ToLower().Contains(c) select c).Count == n;\n            if (hasNConsonants) {\n                result.Add(w);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string GetClosestVowel(string word) {\n        var vowels = \"aeiouAEIOU\";\n        var closestVowel = \"\";\n        var minDistance = int.MaxValue;\n        for (int i = 0; i < word.Length - 1; i++) {\n            if (vowels.Contains(word[i])) {\n                for (int j = i - 1; j >= 0 && !closestVowel.Length; j--) {\n                    if (vowels.Contains(word[j])) {\n                        var distance = Math.Abs(i - j);\n                        if (distance < minDistance) {\n                            closestVowel = word[j];\n                            minDistance = distance;\n                        }\n                        break;\n                    }\n                }\n                for (int j = i + 1; j < word.Length && !closestVowel.Length; j++) {\n                    if (vowels.Contains(word[j])) {\n                        var distance = Math.Abs(i - j);\n                        if (distance < minDistance) {\n                            closestVowel = word[j];\n                            minDistance = distance;\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n        return closestVowel;\n    }\n}\n",
            "class Global {\n    public static string MatchParens(IList<string> lst) {\n        var s1 = lst[0] + lst[1];\n        var s2 = lst[1] + lst[0];\n        if (check(s1) || check(s2)) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n    private static bool check(string s) {\n        var depth = 0;\n        foreach (var ch in s) {\n            if (ch == \"(\") {\n                depth++;\n            }\n            else {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static IList<int> Maximum(IList<int> arr, int k) {\n        if (k == 0) {\n            return new List<int>();\n        }\n        return arr.OrderByDescending(x => x).Take(k).ToList();\n    }\n}\n",
            "class Global {\n    public static int Solution(IList<int> lst) {\n        var result = 0;\n        foreach (var i in lst) {\n            if (i % 2 == 0 && i % 2 != 0) {\n                result += i;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int AddElements(IList<int> arr, int k) {\n        var result = 0;\n        for (int i = 0; i < k; i++) {\n            result += arr[i] % 100;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> GetOddCollatz(int n) {\n        var collatz = new List<int>();\n        var num = 1;\n        while (num != n) {\n            var nextNum = n;\n            var count = 1;\n            while (nextNum != 1) {\n                if (nextNum % 2 != 0) {\n                    collatz.Add(nextNum);\n                    nextNum = 3 * nextNum + 1;\n                } else {\n                    nextNum = nextNum / 2;\n                }\n                count++;\n            }\n            num = count;\n        }\n        collatz.Add(n);\n        return collatz.OrderBy(x => x).ToList();\n    }\n}\n",
            "class Global {\n    public static bool ValidDate(string date) {\n        if (date.Length != 10 || date[2] != '-' || date[5] != '-') {\n            return false;\n        }\n        int m = int.Parse(date.Substring(0, 2));\n        int d = int.Parse(date.Substring(3, 2));\n        if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12 && (d >= 1 && d <= 31)) {\n            return true;\n        }\n        if (m == 4 || m == 6 || m == 9 || m == 11 && (d >= 1 && d <= 30)) {\n            return true;\n        }\n        if (m == 2 && (d >= 1 && d <= 29)) {\n            return true;\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<string> SplitWords(string txt) {\n        if (string.IsNullOrWhiteSpace(txt)) {\n            return new List<string>();\n        }\n        var words = new List<string>();\n        var current = \"\";\n        foreach (var c in txt) {\n            if (c == ' ' || c == ',') {\n                words.Add(current);\n                current = \"\";\n            } else {\n                current += c;\n            }\n        }\n        words.Add(current);\n        var result = new List<string>();\n        foreach (var w in words) {\n            if (w.Length == 1) {\n                result.Add(w);\n            } else {\n                int count = 0;\n                foreach (var c in w) {\n                    if (c.IsLower() && (int)c % 2 == 0) {\n                        count++;\n                    }\n                }\n                result.Add(count.ToString());\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static bool IsSorted(IList<int> lst) {\n        if (lst.Count <= 1) {\n            return true;\n        }\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i-1] > lst[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static bool IsPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static string Intersection(IList<int> interval1, IList<int> interval2) {\n        int l = Math.Max(interval1[0], interval2[0]);\n        int r = Math.Min(interval1[1], interval2[1]);\n        int length = r - l;\n        return length > 0 && IsPrime(length) ? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static int? ProdSigns(IList<int> arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n        if (arr.Count == 1) {\n            return arr[0];\n        }\n        if (arr.Count == 2) {\n            return arr[0] * arr[1] * arr[1];\n        }\n        if (arr.Count > 2) {\n            if (arr.Count % 2 == 0) {\n                return 0;\n            }\n            int sign = arr.Count % 2 == 1 ? -1 : 1;\n            return sign * arr.Sum(n => n.Abs());\n        }\n        return null;\n    }\n}\n",
            "class Global {\n    public static IList<int> MinPath(IList<IList<int>> grid, int k) {\n        var n = grid.Count;\n        var minVal = n * n + 1;\n        var result = new List<int>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 1) {\n                    minVal = 1;\n                    break;\n                }\n            }\n            if (minVal == 1) {\n                break;\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                result.Add(minVal);\n            } else {\n                result.Add(minVal + 1);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> Tri(int n) {\n        if (n == 0) {\n            return new List<int>() { 1 };\n        }\n        var seq = new List<int>();\n        seq.Add(1);\n        seq.Add(3);\n        for (int i = 2; i < n; i++) {\n            if (i % 2 == 0) {\n                seq.Add((int) (i / 2 + 1));\n            } else {\n                seq.Add((int) (seq[i - 1] + seq[i - 2] + (i + 3) / 2));\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int Digits(int n) {\n        var odds = n.ToString().Split('-')\n            .Select(c => int.Parse(c))\n            .Where(c => c % 2 == 1)\n            .ToList();\n        return odds.Length > 0 ? int.Parse(odds.ToString().Join(\"\")) : 0;\n    }\n}\n",
            "class Global {\n    public static bool IsNested(string s) {\n        var open_idx = new List<int>();\n        var close_idx = new List<int>();\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i] == '[' || s[i] == '{' || s[i] == '(') {\n                open_idx.Add(i);\n            }\n            else if (s[i] == ']' || s[i] == '}' || s[i] == ')') {\n                close_idx.Add(i);\n            }\n        }\n        var close_idx_count = close_idx.Count;\n        var close_idx_reverse = close_idx.Reverse();\n        var cnt = 0;\n        var i = 0;\n        for (int j = 0; j < open_idx.Count; j++) {\n            if (i < close_idx_count && open_idx[j] < close_idx_reverse[i]) {\n                cnt++;\n                i++;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int SumSquares(IList<double> lst) {\n        return lst.Count == 0 ? 0 : lst.Count == 1 ? lst[0] : lst.Count == 2 ? lst[0] * lst[1] : lst.Count == 3 ? lst[0] * (lst[1] * lst[2] + lst[0] * lst[1]) + lst[2] * (lst[0] * lst[1] + lst[1] * lst[2]) + lst[0] * lst[2] * (lst[0] + lst[1] + lst[2]) : lst[0] * (lst[1] * lst[2] + lst[0] * lst[1]) * (lst[0] * lst[1] + lst[1] * lst[2]) * (lst[0] + lst[1] + lst[2]) + lst[2] * (lst[0] * lst[1] + lst[1] * lst[2]) * (lst[0] + lst[1] + lst[2]) + lst[0] * lst[1] * (lst[0] + lst[1] + lst[2]) * (lst[0] + lst[1] + lst[2]) + lst[0] * lst[2] * (lst[0] + lst[1] + lst[2]) * (lst[0] + lst[1] + lst[2]);\n    }\n}\n",
            "class Global {\n    public static bool CheckIfLastCharIsALetter(string txt) {\n        if (string.IsNullOrEmpty(txt)) {\n            return false;\n        }\n        int last = txt.LastIndexOf(' ') + 1;\n        if (last < 0) {\n            return false;\n        }\n        char lastChar = txt[last];\n        return lastChar.IsLetter();\n    }\n}\n",
            "class Global {\n    public static int CanArrange(IList<int> arr) {\n        if (arr.Count <= 1) {\n            return -1;\n        }\n        var idx = new List<int>();\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < arr[i - 1]) {\n                idx.Add(i);\n            }\n        }\n        return idx.Max(i => i);\n    }\n}\n",
            "class Global {\n    public static IList<int?> LargestSmallestIntegers(IList<int> lst) {\n        var neg = lst.Where(i => i < 0).ToArray();\n        var pos = lst.Where(i => i > 0).ToArray();\n        var maxNeg = neg.Length > 0 ? neg.Max() : null;\n        var minPos = pos.Length > 0 ? pos.Min() : null;\n        return new List<int?> { maxNeg, minPos };\n    }\n}\n",
            "class Global {\n    public static double? CompareOne(object a, object b) {\n        double a1, b1;\n        if (a is string) {\n            a1 = double.Parse(a.Replace(\",\", \".\"));\n        }\n        else if (a is int) {\n            a1 = (double)a;\n        }\n        else if (a is float) {\n            a1 = a;\n        }\n        if (b is string) {\n            b1 = double.Parse(b.Replace(\",\", \".\"));\n        }\n        else if (b is int) {\n            b1 = (double)b;\n        }\n        else if (b is float) {\n            b1 = b;\n        }\n        if (a1 == b1) {\n            return null;\n        }\n        else if (a1 > b1) {\n            return a1;\n        }\n        else {\n            return b1;\n        }\n    }\n}\n",
            "class Global {\n    public static bool IsEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int SpecialFactorial(int n) {\n        var fact = 1;\n        var result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string FixSpaces(string txt) {\n        return Regex.Replace(txt, @\"\\s{3,}\", \"-\").Replace(\" \", \"_\");\n    }\n}\n",
            "class Global {\n    public static string FileNameCheck(string fileName) {\n        string[] lst = fileName.Split('.');\n        if (lst.Length != 2 || !(lst[1] == \"txt\" || lst[1] == \"exe\" || lst[1] == \"dll\") || lst[0].Length == 0 || !(lst[0][0].IsLetter()) || lst[0].Count(c => c.IsDigit()) > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
            "class Global {\n    public static int SumSquares(IList<int> lst) {\n        var result = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 3 == 0) {\n                result += Math.Pow(lst[i], 2);\n            }\n            else if (i % 4 == 0) {\n                result += Math.Pow(lst[i], 3);\n            }\n            else {\n                result += lst[i];\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string WordsInSentence(string sentence) {\n        var words = sentence.Split(' ');\n        return string.Join(\" \", words.Where(w => isPrime(w.Length)));\n    }\n    private static bool isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static bool Simplify(string x, string n) {\n        string[] xs = x.Split(\"/\");\n        string[] ns = n.Split(\"/\");\n        int num = int.Parse(xs[0]) * int.Parse(ns[0]);\n        int den = int.Parse(xs[1]) * int.Parse(ns[1]);\n        return num % den == 0;\n    }\n}\n",
            "class Global {\n    public static int DigitsSum(int n) {\n        string n_str = n.ToString();\n        if (n >= 0) {\n            return Enumerable.FromList(n_str).Select(c => (int)c).Sum();\n        } else {\n            string first_two = n_str.Substring(0, 2);\n            int second_sum = Global.DigitsSum(n * -1);\n            return int.Parse(first_two) * 2 + second_sum;\n        }\n    }\n    public static List<int> OrderByPoints(List<int> nums) {\n        return nums.OrderBy(Global.DigitsSum).ToList();\n    }\n}\n",
            "class Global {\n    public static int SpecialFilter(IList<int> nums) {\n        var odds = new List<int>() { 13, 5, 7, 9, 1, 3, 5, 7, 9 };\n        return nums.Count(n =>\n            n > 10 &&\n            n % 2 == 1 &&\n            odds.Contains(n.ToString()[0]));\n    }\n}\n",
            "class Global {\n    public static int GetMaxTriples(int n) {\n        int[] c = {0, 0, 0};\n        for (int i = 1; i <= n; i++) {\n            int a = i * i - i + 1;\n            c[a % 3]++;\n        }\n        return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n    }\n}\n",
            "class Global {\n    public static IList<string> Bf(string planet1, string planet2) {\n        var names = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        if (!names.Contains(planet1) || !names.Contains(planet2)) {\n            return new List<string>();\n        }\n        var l = names.IndexOf(planet1);\n        var r = names.IndexOf(planet2);\n        if (l > r) {\n            l, r = r, l;\n        }\n        if (l == r) {\n            return new List<string>();\n        }\n        return names.GetRange(l + 1, r - l);\n    }\n}\n",
            "class Global {\n    public static IList<string> SortedListSum(IList<string> lst) {\n        var result = new List<string>();\n        foreach (var s in lst) {\n            if (s.Length % 2 == 0) {\n                result.Add(s);\n            }\n        }\n        return sorted(result, (a, b) => (a.Length.CompareTo(b.Length), a.CompareTo(b)));\n    }\n}\n",
            "class Global {\n    public static int XOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int DoubleTheDifference(IList<double> lst) {\n        var result = 0;\n        foreach (var num in lst) {\n            if (num >= 0 && num % 2 == 1) {\n                result += num * num;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static IList<int> Compare(IList<int> game, IList<int> guess) {\n        if (game.Count != guess.Count) {\n            throw new ArgumentException(\"Lists must be of equal length\");\n        }\n        var result = new List<int>();\n        for (int i = 0; i < game.Count; i++) {\n            result.Add(Math.Abs(game[i] - guess[i]));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string StrongestExtension(string className, IList<string> extensions) {\n        var maxS = float.MinValue;\n        var maxExt = \"\";\n        foreach (var ext in extensions) {\n            var upper = 0;\n            var lower = 0;\n            foreach (var c in ext) {\n                if (c.IsUpper) {\n                    upper++;\n                } else if (c.IsLower) {\n                    lower++;\n                }\n            }\n            var s = upper - lower;\n            if (s > maxS) {\n                maxS = s;\n                maxExt = ext;\n            }\n        }\n        return $\"{className}.{maxExt}\";\n    }\n}\n",
            "class Global {\n    public static bool CycpatternCheck(string a, string b) {\n        if (a.Length < b.Length) {\n            return false;\n        }\n        for (int i = 0; i < b.Length; i++) {\n            if (a.Contains(b.Substring(i, b.Length - i) + b.Substring(0, i))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static IList<int> EvenOddCount(int num) {\n        var ds = abs(num).ToString();\n        var even = ds.Count(d => int.Parse(d) % 2 == 0);\n        return new List<int>(new[] { even, ds.Length - even });\n    }\n}\n",
            "class Global {\n    public static string IntToMiniRoman(int num) {\n        var values = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        var numerals = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        var res = new StringBuilder();\n        for (int i = 0; i < values.Length; i++) {\n            while (num >= values[i]) {\n                res.Append(numerals[i]);\n                num -= values[i];\n            }\n        }\n        return res.ToString();\n    }\n}\n",
            "class Global {\n    public static bool RightAngleTriangle(int a, int b, int c) {\n        var s = new List<int>(a, b, c);\n        s.Sort();\n        return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n    }\n}\n",
            "class Global {\n    public static string FindMax(IList<string> words) {\n        var maxCnt = 0;\n        var maxW = \"\";\n        foreach (var w in words) {\n            var cnt = w.Length - w.Distinct().Count();\n            if (cnt > maxCnt) {\n                maxCnt = cnt;\n                maxW = w;\n            }\n            else if (cnt == maxCnt) {\n                maxW = Math.Min(maxW, w);\n            }\n        }\n        return maxW;\n    }\n}\n",
            "class Global {\n    public static IList<int> Eat(int num, int need, int remaining) {\n        if (need <= remaining) {\n            return new List<int> { num + need, remaining - need };\n        } else {\n            return new List<int> { num + remaining, 0 };\n        }\n    }\n}\n",
            "class Global {\n    public static int DoAlgebra(List<string> operators, List<int> operands) {\n        var ops = operators.ToList();\n        var nums = operands.ToList();\n        int i = ops.Count - 1;\n        while (i >= 0) {\n            if (ops[i] == \"*\") {\n                int product = nums[i] * nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                nums[i] = product;\n                i -= 1;\n            }\n            else if (ops[i] == \"/\") {\n                int quotient = nums[i] / nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                nums[i] = quotient;\n                i -= 1;\n            }\n            else if (ops[i] == \"//\") {\n                int quotient = nums[i] % nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                nums[i] = quotient;\n                i -= 1;\n            }\n            else if (ops[i] == \"%\") {\n                int remainder = nums[i] % nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                nums[i] = remainder;\n                i -= 1;\n            }\n            else if (ops[i] == \"+\") {\n                int sum = nums[i] + nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                nums[i] = sum;\n                i -= 1;\n            }\n            else if (ops[i] == \"-\") {\n                int difference = nums[i] - nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                nums[i] = difference;\n                i -= 1;\n            }\n            else if (ops[i] == \"**\") {\n                int exponent = nums[i] ^ nums[i + 1];\n                nums.RemoveAt(i + 1);\n                ops.RemoveAt(i);\n                nums[i] = exponent;\n                i -= 1;\n            }\n            i--;\n        }\n        int result = nums[0];\n        i = 0;\n        while (i < ops.Count) {\n            if (ops[i] == \"+\") {\n                result += nums[i + 1];\n                i++;\n            }\n            else if (ops[i] == \"-\") {\n                result -= nums[i + 1];\n                i++;\n            }\n            i++;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static string Solve(string s) {\n        if (!AnyAlpha(s)) {\n            return new string(s.Reverse().ToArray());\n        }\n        var result = new StringBuilder();\n        foreach (var ch in s) {\n            if (ch.IsLetter) {\n                if (ch.IsUpper) {\n                    result.Append(ch.ToLower());\n                }\n                else {\n                    result.Append(ch.ToUpper());\n                }\n            }\n            else {\n                result.Append(ch);\n            }\n        }\n        return result.ToString();\n    }\n    private static bool AnyAlpha(string s) {\n        foreach (var ch in s) {\n            if (ch.IsLetter) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static string? StringToMd5(string txt) {\n        if (string.IsNullOrWhiteSpace(txt)) {\n            return null;\n        }\n        var md5_hash = System.Security.Cryptography.MD5.Create();\n        var txt_bytes = Encoding.UTF8.GetBytes(txt);\n        var md5_hash_bytes = md5_hash.ComputeHash(txt_bytes);\n        var md5_encoded = Convert.ToBase64String(md5_hash_bytes);\n        return md5_encoded;\n    }\n}\n",
            "class Global {\n    public static IList<int> GenerateIntegers(int a, int b) {\n        int lower = Math.Max(2, Math.Min(a, b));\n        int upper = Math.Min(8, Math.Max(a, b));\n        return new List<int>(i => i % 2 == 0 for i in range(lower, upper + 1));\n    }\n}\n"
        ],
        "dart": [
            "bool hasCloseElements(List<double> numbers, double threshold) {\n    for (int i = 0; i < numbers.length; i++) {\n        for (int j = i + 1; j < numbers.length; j++) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "List<String> separateParenGroups(String parenString) {\n    List<String> groups = [];\n    List<int> openParenCounts = [];\n    int openParenIndex = -1;\n    for (int i = 0; i < parenString.length; i++) {\n        char ch = parenString[i];\n        if (ch == '(') {\n            openParenIndex = i;\n            openParenCounts.add(1);\n        } else if (ch == ')') {\n            if (openParenCounts.length > 0) {\n                openParenCounts.removeLast();\n                if (openParenCounts.isEmpty) {\n                    groups.add(parenString.substring(openParenIndex + 1, i));\n                }\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - floor(num);\n}\n",
            "bool belowZero(List<int> operations) {\n    int balance = 0;\n    for (int op in operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(List<double> numbers) {\n    double mean = numbers.sum / numbers.length;\n    double deviation = numbers.map(abs).sum / numbers.length;\n    return deviation;\n}\n",
            "List<int> intersperse(List<int> numbers, int delimiter) {\n    var result = <int>[];\n    for (int i = 0; i < numbers.length; i++) {\n        if (i != 0) {\n            result.append(delimiter);\n        }\n        result.append(numbers[i]);\n    }\n    return result;\n}\n",
            "List<int> parseNestedParens(String parenString) {\n    List<int> result = [];\n    List<int> parenGroups = parenString.split().toList();\n    for (int i = 0; i < parenGroups.length; i++) {\n        int maxDepth = 0;\n        int depth = 0;\n        for (char ch : parenGroups[i].toCharArray()) {\n            if (ch == '(') {\n                depth++;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch == ')') {\n                depth--;\n            }\n        }\n        result.add(maxDepth);\n    }\n    return result;\n}\n",
            "List<String> filterBySubstring(List<String> strs, String substring) {\n    return strs.filter((s) => s.contains(substring));\n}\n",
            "int sum(List<int> numbers) {\n    return numbers.map((x) => x).reduce((a, b) => a + b);\n}\nint product(List<int> numbers) {\n    return numbers.reduce((a, b) => a * b);\n}\nList<int> sumProduct(List<int> numbers) {\n    return [sum(numbers), product(numbers)];\n}\n",
            "List<int> rollingMax(List<int> numbers) {\n    var maxSoFar = Int.minValue;\n    var result = List<int>();\n    for (int num : numbers) {\n        maxSoFar = Math.max(maxSoFar, num);\n        result.add(maxSoFar);\n    }\n    return result;\n}\n",
            "bool isPalindrome(String s) {\n    return s == s.reverse();\n}\nString makePalindrome(String s) {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (int i = 0; i < s.length; i++) {\n        if (isPalindrome(s.substring(i))) {\n            return s + s.substring(0, i).reverse();\n        }\n    }\n    return \"\";\n}\n",
            "String stringXor(String a, String b) {\n    if (a.length != b.length) {\n        throw Exception('Strings must be of equal length.');\n    }\n    var result = '';\n    for (int i = 0; i < a.length; i++) {\n        result += a[i] == b[i] ? '0' : '1';\n    }\n    return result;\n}\n",
            "String longest(List<String> strs) {\n    if (strs.isEmpty) {\n        return null;\n    }\n    String longestS = strs[0];\n    for (int i = 1; i < strs.length; i++) {\n        if (strs[i].length > longestS.length) {\n            longestS = strs[i];\n        }\n    }\n    return longestS;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "List<String> allPrefixes(String s) {\n    List<String> prefixes = [];\n    for (int i = 0; i <= s.length; i++) {\n        prefixes.add(s.substring(0, i));\n    }\n    return prefixes;\n}\n",
            "String stringSequence(int n) {\n    return n == 0 ? \"\" : \"${n} ${stringSequence(n - 1)}\";\n}\n",
            "int countDistinctCharacters(String s) {\n    return s.length;\n}\n",
            "List<int> parseMusic(String musicString) {\n    var durations = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    };\n    var notes = musicString.split().toList();\n    return notes.map((note) => durations[note]);\n}\n",
            "int howManyTimes(String s, String substring) {\n    int times = 0;\n    for (int i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times++;\n        }\n    }\n    return times;\n}\n",
            "String sortNumbers(String numbers) {\n    final numDict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    final numList = numbers.split(\" \").toList.filter(\n        (x) => numDict.containsKey(x)).sorted(compare: (a, b) => numDict[b].compareTo(numDict[a]));\n    return \" \".join(numList);\n}\n",
            "List<double> findClosestElements(List<double> numbers) {\n    List<double> sortedNumbers = numbers.sorted();\n    double minDiff = double.infinity;\n    List<double> closestPair = [];\n    for (int i = 1; i < sortedNumbers.length; i++) {\n        double diff = Math.abs(sortedNumbers[i] - sortedNumbers[i - 1]);\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "List<double> rescaleToUnit(List<double> numbers) {\n    double minNum = numbers.min();\n    double maxNum = numbers.max();\n    if (minNum == maxNum) {\n        return List<double>.repeat(numbers.length, lambda: 0.0);\n    }\n    return List<double>.generate(numbers.length, (index) {\n        return (numbers[index] - minNum) / (maxNum - minNum);\n    });\n}\n",
            "List<int> filterIntegers(List<Object> values) {\n    return values.filter((x) => x is int);\n}\n",
            "int strLength(String s) {\n    return s.length;\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "List<int> factorize(int n) {\n    List<int> factors = [];\n    for (int divisor = 2; divisor <= n; divisor++) {\n        while (n % divisor == 0) {\n            factors.add(divisor);\n            n /= divisor;\n        }\n    }\n    return factors;\n}\n",
            "List<int> removeDuplicates(List<int> numbers) {\n    var counts = new Map<int, int>();\n    for (int num in numbers) {\n        counts[num] = (counts.contains(num) ? counts[num] + 1 : 1);\n    }\n    return numbers.filter((num) => counts[num] == 1);\n}\n",
            "String flipCase(String s) {\n    var result = '';\n    for (int i = 0; i < s.length; i++) {\n        if (!s[i].isLetter) {\n            result += s[i];\n        } else if (s[i].isUpper) {\n            result += s[i].lowercase;\n        } else {\n            result += s[i].uppercase;\n        }\n    }\n    return result;\n}\n",
            "String concatenate(List<String> strs) {\n    return strs.join('');\n}\n",
            "List<String> filterByPrefix(List<String> strs, String prefixStr) {\n    return strs.filter(\n        (String s) => s.startsWith(prefixStr));\n}\n",
            "List<int> getPositive(List<int> l) {\n    return l.filter((num) => num > 0);\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "List<int> findZero(List<int> xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "List<int> sortThird(List<int> l) {\n    List<int> sortedThird = l.subList(0, l.length, 3).sort();\n    var result = new List<int>(l);\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 == 0) {\n            result[i] = sortedThird[i / 3];\n        }\n    }\n    return result;\n}\n",
            "List<int> listUnique(List<int> l) {\n    return l.sort((a, b) => a - b);\n}\n",
            "int maxElement(List<int> l) {\n    if (l.isEmpty) {\n        return 0;\n    }\n    return l.max();\n}\n",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString().contains(\"7\");\n        }\n    }\n    return cnt;\n}\n",
            "List<int> sortEven(List<int> l) {\n    List<int> sortedEven = l.subList(0..l.length - 1)\n        .partition( (e) => e % 2 == 0);\n    return [sortedEven[i // 2] if (i % 2 == 0) else l[i] for i in range(l.length)]\n        .sorted(compare: (a, b) => a % 2 == 0 ? -1 : b % 2 == 0 ? 1 : a < b ? -1 : b);\n}\n",
            "String encodeCyclic(String s) {\n    StringBuilder result = StringBuilder();\n    for (int i = 0; i < s.length; i++) {\n        if (i + 2 < s.length) {\n            result.append(s.substring(i + 1, i + 3));\n            result.append(s.substring(i));\n        } else {\n            result.append(s.substring(i));\n        }\n    }\n    return result.toString();\n}\nString decodeCyclic(String s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= n - 1; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint primeFib(int n) {\n    List<int> fib = [0, 1];\n    int cnt = 0;\n    while (cnt < n) {\n        fib = [fib[1], fib[0] + fib[1]];\n        if (isPrime(fib[1])) {\n            cnt++;\n        }\n    }\n    return fib[1];\n}\n",
            "bool triplesSumToZero(List<int> l) {\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return n * n;\n}\n",
            "List<int> incrList(List<int> l) {\n    return l.map((i) => i + 1);\n}\n",
            "bool pairsSumToZero(List<int> l) {\n    var seen = new Set<int>();\n    for (int num in l) {\n        if (seen.contains(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "String changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    List<char> digits = List<char>();\n    while (x > 0) {\n        digits.add(x % bas + '0'.charAt(0));\n        x //= bas;\n    }\n    return digits.reverse().join(\"\");\n}\n",
            "double triangleArea(int a, int h) {\n    return a * h / 2;\n}\n",
            "int fib4(int n) {\n    var fib = [0, 0, 2, 0];\n    for (int i = 4; i <= n; i++) {\n        fib[i % 4] = fib.sum();\n    }\n    return fib[n % 4];\n}\n",
            "double median(List<double> l) {\n    l.sort();\n    if (l.length % 2 == 0) {\n        return (l[l.length / 2] + l[l.length / 2 - 1]) / 2;\n    } else {\n        return l[l.length / 2];\n    }\n}\n",
            "bool isPalindrome(String txt) {\n    return txt.length <= 1;\n}\n",
            "int modp(int n, int p) {\n    var ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "String encodeShift(String s) {\n    String result = \"\";\n    for (int i = 0; i < s.length; i++) {\n        int code = s.codeUnified(i);\n        int newCode = (code + 5) % 26 + 97;\n        result += String.charAt(newCode);\n    }\n    return result;\n}\nString decodeShift(String s) {\n    String result = \"\";\n    for (int i = 0; i < s.length; i++) {\n        int code = s.codeUnified(i);\n        int newCode = (code - 5) % 26 + 97;\n        result += String.charAt(newCode);\n    }\n    return result;\n}\n",
            "String removeVowels(String txt) {\n    final vowels = 'aeiouAEIOU';\n    return txt.skip(txt.length)\n        .expandReplacements(pattern: vowels)\n        .replaceAll('');\n}\n",
            "bool belowThreshold(List<int> l, int t) {\n    return l.every((x) => x < t);\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(String s0, String s1) {\n    return Set<String>(s0) == Set<String>(s1);\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n",
            "bool correctBracketing(String brackets) {\n    var depth = 0;\n    for (int i = 0; i < brackets.length; i++) {\n        if (brackets[i] == '<') {\n            depth++;\n        } else if (brackets[i] == '>') {\n            depth--;\n            if (depth < 0) {\n                return false;\n            }\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(List<int> l) {\n    bool isIncreasing = l.isFinite && l.length > 1 && l.reduce((a, b) => a - b) >= 0;\n    bool isDecreasing = l.isFinite && l.length > 1 && l.reduce((a, b) => a - b) <= 0;\n    return isIncreasing || isDecreasing;\n}\n",
            "List<int> common(List<int> l1, List<int> l2) {\n    return l1.subsetOf(l2) ? l1 : l2.subsetOf(l1) ? l2 : l1.intersect(l2);\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    return n * (n + 1) / 2;\n}\n",
            "bool correctBracketing(String brackets) {\n    var depth = 0;\n    for (int i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"(\") {\n            depth++;\n        } else if (brackets[i] == \")\") {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "List<int> derivative(List<int> xs) {\n    var result = <int>[];\n    for (int i = 1; i < xs.length; i++) {\n        result.add(xs[i] * i);\n    }\n    return result;\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    var a = 0;\n    var b = 0;\n    var c = 1;\n    for (int i = 2; i <= n; i++) {\n        a = b;\n        b = c;\n        c = a + b;\n    }\n    return c;\n}\n",
            "int vowelsCount(String s) {\n    final vowels = \"aeiou\";\n    int cnt = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (vowels.contains(s[i].lowercase)) {\n            cnt++;\n        } else if (i == s.length - 1 && s[i].lowercase == \"y\") {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n",
            "String circularShift(int x, int shift) {\n    if (shift > String(x).length) {\n        return String(x).reverse().toString();\n    } else {\n        String xStr = String(x);\n        return (xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift)).toString();\n    }\n}\n",
            "int digitSum(String s) {\n    return s.codePoints.where((code) => CharCharacterGroups.isUppercase(Char.charAt(code))).sum();\n}\n",
            "int fruitDistribution(String s, int n) {\n    List<int> words = s.split(' ').toList();\n    int apples = int.parse(words[words.indexOf(\"apples\") - 1]);\n    int oranges = int.parse(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "List<int> pluck(List<int> arr) {\n    List<int> evens = arr.filter((n) => n % 2 == 0);\n    if (evens.isEmpty) {\n        return [];\n    }\n    int minEven = evens.min();\n    return [minEven, arr.indexOf(minEven)];\n}\n",
            "int search(List<int> lst) {\n    var freqs = new Map<int, int>();\n    for (int n in lst) {\n        freqs[n] = (freqs.contains(n) ? freqs[n] + 1 : 1);\n    }\n    var goodVals = freqs.keys.filter((k) {\n        return freqs[k] >= k;\n    }).toList();\n    return goodVals.isNotEmpty ? goodVals.first : -1;\n}\n",
            "List<int> strangeSortList(List<int> lst) {\n    List<int> sl = lst.sort();\n    List<int> result = [];\n    for (int i = 0; i < sl.length; i++) {\n        result.add(sl[i]);\n        if (i < sl.length - 1) {\n            result.add(sl[sl.length - 1 - i]);\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        final s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(List<int> q, int w) {\n    if (q.length == 0) {\n        return false;\n    }\n    bool isPalin = true;\n    for (int i = 0; i < q.length / 2; i++) {\n        if (q[i] != q[q.length - i - 1]) {\n            isPalin = false;\n            break;\n        }\n    }\n    int total = q.reduce((acc, curr) => acc + curr);\n    return isPalin && total <= w;\n}\n",
            "int smallestChange(List<int> arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.length / 2; i++) {\n        if (arr[i] != arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "List<String> totalMatch(List<String> lst1, List<String> lst2) {\n    int cnt1 = lst1.map((str) => str.length).toList().reduce(0, (a, b) => a + b);\n    int cnt2 = lst2.map((str) => str.length).toList().reduce(0, (a, b) => a + b);\n    return lst1.length <= lst2.length ? lst1 : lst2;\n}\n",
            "bool isMultiplyPrime(int a) {\n    if (a < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(a).toInt; i++) {\n        if (a % i == 0 && isPrime(i)) {\n            int cnt = 0;\n            while (a % i == 0) {\n                cnt++;\n                a /= i;\n            }\n            if (cnt == 3) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nbool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    a = a.abs;\n    final root = a.sqrt().round();\n    return root * root * root == a;\n}\n",
            "int hexKey(String num) {\n    return num.codePointsMatching(r'^[2357BD]$').length;\n}\n",
            "String decimalToBinary(int dec) {\n    var binary = dec.toString(radix: 2);\n    return \"db\" + binary + \"db\";\n}\n",
            "bool isHappy(String s) {\n    if (s.length < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.length - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "List<String> numericalLetterGrade(List<double> grades) {\n    var result = <String>[];\n    for (int i = 0; i < grades.length; i++) {\n        double g = grades[i];\n        if (g == 4.0) {\n            result.add(\"A+\");\n        } else if (g > 3.7) {\n            result.add(\"A\");\n        } else if (g > 3.3) {\n            result.add(\"A-\");\n        } else if (g > 3.0) {\n            result.add(\"B+\");\n        } else if (g > 2.7) {\n            result.add(\"B\");\n        } else if (g > 2.3) {\n            result.add(\"B-\");\n        } else if (g > 2.0) {\n            result.add(\"C+\");\n        } else if (g > 1.7) {\n            result.add(\"C\");\n        } else if (g > 1.3) {\n            result.add(\"C-\");\n        } else if (g > 1.0) {\n            result.add(\"D+\");\n        } else if (g > 0.7) {\n            result.add(\"D\");\n        } else if (g > 0.0) {\n            result.add(\"D-\");\n        } else {\n            result.add(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(String s) {\n    int length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(length); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * (10 ** (n - 2));\n}\n",
            "String solve(int n) {\n    int digitsSum = n.toString.length;\n    String binarySum = Integer.toBinaryString(digitsSum);\n    return binarySum.substring(2);\n}\n",
            "int add(List<int> lst) {\n    return lst.map((i, x) => i % 2 == 1 && x % 2 == 0 ? x : 0).sum;\n}\n",
            "String antiShuffle(String s) {\n    List<String> words = s.split(' ');\n    List<String> sortedWords = words.map((word) {\n        return \"\".sort(compare: (a, b) {\n            return b.compare(a);\n        });\n    });\n    return sortedWords.join(' ');\n}\n",
            "List<List<int>> getRow(List<List<int>> lst, int x) {\n    List<List<int>> result = [];\n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result.add([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => a[0] < b[0] || (a[0] == b[0] && -a[1] > b[1]));\n}\n",
            "List<int> sortArray(List<int> arr) {\n    if (arr.length == 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 == 0) {\n        return arr.sort();\n    } else {\n        return arr.sort(compare: ((a, b) => b - a));\n    }\n}\n",
            "String encrypt(String s) {\n    var result = \"\";\n    for (int i = 0; i < s.length; i++) {\n        int shifted = s.codeOffset + 4;\n        if (shifted > s.utf8Offset(s.length - 1)) {\n            shifted -= s.codeUnits.length;\n        }\n        result += String.fromCharCode(shifted);\n    }\n    return result;\n}\n",
            "int nextSmallest(List<int> lst) {\n    final sortedList = lst.sorted();\n    if (sortedList.length < 2) {\n        return null;\n    }\n    final set = Set<int>();\n    for (int item in sortedList) {\n        set.add(item);\n    }\n    if (set.length < 2) {\n        return null;\n    }\n    final smallestIndex = lst.indexOf(set.differenceFirst());\n    return lst[smallestIndex];\n}\n",
            "int isBored(String s) {\n    List<String> sentences = s.split('').skip(1).map((s) => s.trim());\n    return sentences\n        .filter((s) => s.length >= 2)\n        .map((s) => s.substring(0, 2))\n        .filter((s) => s == \"I \")\n        .length;\n}\n",
            "bool anyInt(dynamic x, dynamic y, dynamic z) {\n    if (x is int && y is int && z is int) {\n        if (x + y == z || x + z == y || y + z == x) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "String encode(String message) {\n    final vowels = \"aeiouAEIOU\";\n    final result = StringChar.characters(message.codePointLength);\n    for (int i = 0; i < message.length; i++) {\n        final ch = message.codePointAt(i);\n        if (ch.isLetter) {\n            final ch1 = ch.isUpper ? ch.lowercaseDifference(2) : ch.uppercaseDifference(2);\n            if (vowels.contains(ch1)) {\n                ch1 = ch1.codePointAt(0).charWrap;\n            }\n            result.replace(Range(i, 1), ch1);\n        } else {\n            result.replace(Range(i, 1), ch);\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= n - 1; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint skjkasdkd(List<int> lst) {\n    List<int> primes = lst.filter((n) => isPrime(n)).toList();\n    if (primes.isEmpty) {\n        return 0;\n    }\n    String largest = primes.map((n) => String(n)).reduce((a, b) => a + b);\n    return largest.characters.filter((char) => char.isDigit()).map((char) => int.parse(char.toString())).sum();\n}\n",
            "bool checkDictCase(Map<String, String> d) {\n    if (d.isEmpty) {\n        return false;\n    }\n    return d.keys.all.any((c) => c.isUpperCase || c.isLowerCase);\n}\n",
            "List<int> countUpTo(int n) {\n    List<int> primes = [];\n    for (int num = 2; num < n; num++) {\n        bool isPrime = true;\n        for (int p = 2; p < num; p++) {\n            if (num % p == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.add(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    int absA = a < 0 ? -a : a;\n    int absB = b < 0 ? -b : b;\n    return absA % 10 * absB % 10;\n}\n",
            "int countUpper(String s) {\n    final vowels = \"AEIOU\";\n    return s.chars.mapMatches(vowels).count;\n}\n",
            "int closestInteger(String value) {\n    double num = double.parse(value);\n    if (num >= 0) {\n        return num.toInt();\n    } else {\n        return num.toNegativeInfinity();\n    }\n}\n",
            "List<int> makeAPile(int n) {\n    return List<int>.generate(0, () => n + 2 * $index);\n}\n",
            "List<String> wordsString(String s) {\n    List<String> words = s.split(',| ').toList();\n    return words.filter((w) => w.length > 0);\n}\n",
            "int chooseNum(int x, int y) {\n    if (y % 2 == 0) {\n        return y;\n    }\n    return y - 1 if (x != y);\n}\n",
            "String? roundedAvg(int n, int m) {\n    int rAvg = (m + n) / 2;\n    return rAvg.toString(base: 2);\n}\n",
            "bool allDigitsOdd(String s) {\n    return s.length == s.scan(int).filter((num) => num % 2 != 0).length == s.length;\n}\nList<int> uniqueDigits(List<int> x) {\n    return x.subsetOf(Set<int>.of(x)).map((num) {\n        int temp = num;\n        int sum = 0;\n        while (temp != 0) {\n            int digit = temp % 10;\n            if (digit % 2 != 0) {\n                sum += digit;\n            }\n            temp /= 10;\n        }\n        return sum;\n    });\n}\n",
            "List<String> byLength(List<int> arr) {\n    List<int> sortedArr = arr.where((x) => 1 <= x && x <= 9).sort((a, b) => b - a);\n    List<String> result = [];\n    for (int i = 0; i < sortedArr.length; i++) {\n        String digitName = i + 1 == 1 ? \"One\" : i + 1 == 2 ? \"Two\" : i + 1 == 3 ? \"Three\" : i + 1 == 4 ? \"Four\" : i + 1 == 5 ? \"Five\" : i + 1 == 6 ? \"Six\" : i + 1 == 7 ? \"Seven\" : i + 1 == 8 ? \"Eight\" : \"Nine\";\n        result.add(digitName);\n    }\n    return result;\n}\n",
            "List<int> f(int n) {\n    List<int> result = List<int>.length(n);\n    List<int> nums = List<int>.range(1, n + 1);\n    for (int i = 0; i < n; i++) {\n        if (i % 2 != 0) {\n            result[i] = nums.sublist(0, i + 1).reduce(0, (x, y) => x + y);\n        } else {\n            result[i] = Utils.multiply(nums.sublist(0, i + 1));\n        }\n    }\n    return result;\n}\n",
            "bool isPalindrome(String txt) {\n    return txt.reverse().toString() == txt;\n}\nList<int> evenOddPalindrome(int n) {\n    var cnt = [0, 0];\n    for (int i = 1; i <= n; i++) {\n        if (isPalindrome(String.fromInt(i))) {\n            cnt[i % 2]++;\n        }\n    }\n    return cnt;\n}\n",
            "int countNums(List<int> arr) {\n    return arr.filter((n) => digitsSum(n) > 0).length;\n}\nint digitsSum(int n) {\n    String nStr = n.toString();\n    if (n >= 0) {\n        return nStr.characters.filter((c) => c.isDigit()).map((c) => int.parse(c)).sum();\n    } else {\n        String firstTwo = nStr.substring(0, 2);\n        return int.parse(firstTwo) * 2 + digitsSum(abs(n));\n    }\n}\n",
            "bool moveOneBall(List<int> arr) {\n    if (arr.length == 0) {\n        return true;\n    }\n    List<int> sortedArr = arr.sort();\n    for (int i = 0; i < arr.length; i++) {\n        if (arr.sublist(i) == sortedArr.sublist(0, arr.length - i) &&\n            arr.sublist(0, i) == sortedArr.sublist(arr.length - i, arr.length)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "String canExchange(List<int> lst1, List<int> lst2) {\n    int oddCount = lst1.filter((num) => num % 2 != 0).length;\n    int evenCount = lst2.filter((num) => num % 2 == 0).length;\n    return evenCount >= oddCount ? \"YES\" : \"NO\";\n}\n",
            "Map<String, int> histogram(String test) {\n    var freq = new HashMap<String, int>();\n    var words = test.split(\" \").where((w) => w.length > 0).toList();\n    for (var w in words) {\n        freq[w] = freq.get(w, 0) + 1;\n    }\n    var result = new HashMap<String, int>();\n    if (freq.isNotEmpty) {\n        var maxFreq = freq.values.reduce(0, (a, b) => a < b ? a : b);\n        for (var k = freq.keys.first; k != null; k = freq.keys.skip(1)) {\n            if (freq[k] == maxFreq) {\n                result[k] = freq[k];\n            }\n        }\n    }\n    return result;\n}\n",
            "String reverse(String s) {\n    return s.length == 0 ? s : reverse(s.substring(1)) + s.charAt(0);\n}\nList<String> reverseDelete(String s, String c) {\n    var s1 = s.where((char) => s.indexOf(char) != c.codePointAt(0)).toString();\n    var isPalindrome = s1.toLowerCase() == reverse(s1.toLowerCase());\n    return [s1, isPalindrome ? \"yes\" : \"no\"];\n}\n",
            "List<String> oddCount(List<String> lst) {\n    List<int> oddCounts = lst.map((str) => sum(str.code.map((code) => code % 2 == 1 ? code : 0))).toList();\n    return oddCounts.map((count) => \"the number of odd elements in the string $count of the input.\".replaceAll(r'\\$count', count.toString()));\n}\n",
            "int minSubArraySum(List<int> nums) {\n    int minSum = 0;\n    int curSum = 0;\n    for (int n in nums) {\n        curSum = Math.min(curSum + n, 0);\n        minSum = Math.min(curSum, minSum);\n    }\n    if (minSum == 0) {\n        minSum = Math.min(nums);\n    }\n    return minSum;\n}\n",
            "int maxFill(List<List<int>> grid, int capacity) {\n    var count = 0;\n    for (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[i].length; j++) {\n            count += ceil(grid[i][j] / capacity);\n        }\n    }\n    return count;\n}\n",
            "int countOnes(int num) {\n    var binary = \"$num\";\n    return binary.codeUnits.where((char) => char.isDigit()).toList().map: (char) => int.parse(char.toString());\n}\nList<int> sortArray(List<int> arr) {\n    return arr.sorted(compare: (a, b) {\n        int onesA = countOnes(a);\n        int onesB = countOnes(b);\n        return onesA < onesB ? -1 : onesA > onesB ? 1 : a - b;\n    });\n}\n",
            "List<String> selectWords(String s, int n) {\n    String consonants = \"bcdfghjklmnpqrstvwxyz\";\n    List<String> words = s.split(' ').toList();\n    return words\n        .filter((w) => w.length > 0)\n        .filter((w) => w.length == w.characters.intersect(consonants).length)\n        .toList();\n}\n",
            "String getClosestVowel(String word) {\n    String vowels = 'aeiouAEIOU';\n    int index = -1;\n    double minDistance = double.infinity;\n    for (int i = 0; i < word.length - 1; i++) {\n        if (vowels.contains(word.charAt(i))) {\n            int distance = i;\n            if (index == -1 || distance < minDistance) {\n                index = i;\n                minDistance = distance;\n            }\n        }\n    }\n    return index != -1 ? word.substring(index) : \"\";\n}\n",
            "bool check(String s) {\n    int depth = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (s[i] == \"(\") {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\nString matchParens(List<String> lst) {\n    String s1 = lst[0] + lst[1];\n    String s2 = lst[1] + lst[0];\n    if (check(s1) || check(s2)) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n",
            "List<int> maximum(List<int> arr, int k) {\n    if (k == 0) {\n        return [];\n    }\n    List<int> sortedArr = arr.sorted(compare: (a, b) => b - a);\n    return sortedArr.sublist(0, k);\n}\n",
            "int solution(List<int> lst) {\n    var result = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            result++;\n        }\n    }\n    return result;\n}\n",
            "int addElements(List<int> arr, int k) {\n    return arr.sublist(0, k).map((n) => n % 100 <= 99 ? n : n / 100).sum();\n}\n",
            "List<int> getOddCollatz(int n) {\n    List<int> collatz = [];\n    int num = 1;\n    while (num != n) {\n        if (n % 2 != 0) {\n            collatz.add(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n        if (n == num) {\n            collatz.add(n);\n            break;\n        }\n    }\n    return collatz.sort();\n}\n",
            "bool validDate(String date) {\n    if (date.length != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n    int m = int.parse(date.substring(0, 2));\n    int d = int.parse(date.substring(3, 5));\n    if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n        return d >= 1 && d <= 31;\n    } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n        return d >= 1 && d <= 30;\n    } else if (m == 2) {\n        return d >= 1 && d <= 29;\n    }\n    return false;\n}\n",
            "List<String> splitWords(String txt) {\n    if (txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [\"${txt.count(c)}\" where: c.isLower && ord(c) % 2 == 0];\n    }\n}\n",
            "bool isSorted(List<int> lst) {\n    if (lst.length <= 1) {\n        return true;\n    }\n    return lst.compareAt(0, lst.last) != -1;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nString intersection(List<int> interval1, List<int> interval2) {\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    return (length > 0 && isPrime(length)) ? \"YES\" : \"NO\";\n}\n",
            "int? prodSigns(List<int> arr) {\n    if (arr.isEmpty) {\n        return null;\n    }\n    if (arr.contains(0)) {\n        return 0;\n    }\n    int sign = arr.map((e) => e < 0 ? -1 : 1).reduce((acc, e) => acc * e);\n    return sign * arr.abs().reduce((acc, e) => acc + e);\n}\n",
            "List<int> minPath(List<List<int>> grid, int k) {\n    int n = grid.length;\n    int minVal = n * n + 1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                List<int> temp = [];\n                if (i != 0) {\n                    temp.add(grid[i - 1][j]);\n                }\n                if (j != 0) {\n                    temp.add(grid[i][j - 1]);\n                }\n                if (i != n - 1) {\n                    temp.add(grid[i + 1][j]);\n                }\n                if (j != n - 1) {\n                    temp.add(grid[i][j + 1]);\n                }\n                minVal = min(temp);\n            }\n        }\n    }\n    List<int> result = [];\n    for (int i = 0; i < k; i++) {\n        result.add(i % 2 == 0 ? 1 : minVal);\n    }\n    return result;\n}\n",
            "List<int> tri(int n) {\n    if (n == 0) {\n        return [1];\n    }\n    var seq = [1, 3];\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq.add(i / 2 + 1);\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    if (n < 0) {\n        n = -n;\n    }\n    int count = 0;\n    while (n > 0) {\n        count++;\n        n = n % 10;\n        n = n >> 1;\n    }\n    return count;\n}\n",
            "bool isNested(String s) {\n    var openIdx = [];\n    var closeIdx = [];\n    for (int i = 0; i < s.length; i++) {\n        if (s[i] == ']') {\n            closeIdx.add(i);\n        } else if (s[i] == '[') {\n            openIdx.add(i);\n        }\n    }\n    closeIdx.reverse();\n    var cnt = 0;\n    var i = 0;\n    for (int idx in openIdx) {\n        if (i < closeIdx.length && idx < closeIdx[i]) {\n            cnt++;\n            i++;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "int sumSquares(List<double> lst) {\n    return lst.map((double n) => pow(ceil(n), 2)).sum();\n}\n",
            "bool checkIfLastCharIsALetter(String txt) {\n    if (txt.length == 0) {\n        return false;\n    }\n    int lastIndex = txt.lastIndexOf(' ') + 1;\n    if (lastIndex < 0) {\n        return false;\n    }\n    String last = txt.substring(lastIndex);\n    return last.length == 1 && last.charAt(0).isLetter;\n}\n",
            "int canArrange(List<int> arr) {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    var idx = arr.map.indexWhere((e) => e < arr[0]);\n    return idx.isEmpty ? -1 : idx.first;\n}\n",
            "List<int?> largestSmallestIntegers(List<int> lst) {\n    var neg = lst.filter((i) => i < 0).toList();\n    var pos = lst.filter((i) => i > 0).toList();\n    var maxNeg = neg.isEmpty ? null : neg.max();\n    var minPos = pos.isEmpty ? null : pos.min();\n    return [maxNeg, minPos];\n}\n",
            "double? compareOne(Object a, Object b) {\n    double a1 = a is String ? double.parse(a) : a is int ? double(a) : double(a.toString())\n                 : double(a.toString());\n    double b1 = b is String ? double.parse(b) : b is int ? double(b) : double(b.toString())\n                 : double(b.toString());\n    if (a1 == b1) {\n        return null;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    var fact = 1;\n    var result = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "String fixSpaces(String txt) {\n    return RegExp(r\"\\s{3,}\").replaceAll(txt, (match) => \"_\");\n}\n",
            "String fileNameCheck(String fileName) {\n    List<String> lst = fileName.split(\".\");\n    if (lst.length != 2 || !lst[1].matches('(txt|exe|dll)$')) {\n        return \"No\";\n    }\n    if (lst[0].isEmpty || !lst[0].first.isAlpha || lst[0].contains(\"__\")) {\n        return \"No\";\n    }\n    if (lst[0].contains(\"__\") || lst[0].contains(\"^\\\\d+$\") || lst[0].length > 4) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "int sumSquares(List<int> lst) {\n    var result = 0;\n    for (int i in 0..<lst.length) {\n        if (i % 3 == 0) {\n            result += pow(lst[i], 2);\n        } else if (i % 4 == 0) {\n            result += pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nString wordsInSentence(String sentence) {\n    List<String> words = sentence.split(' ').toList();\n    return words.where((w) => isPrime(w.length)).joinedWith(' ');\n}\n",
            "bool simplify(String x, String n) {\n    List<int> xs = x.split('/').toList()!.map: (str) => int(str);\n    List<int> ns = n.split('/').toList()!.map: (str) => int(str);\n    int num = xs[0] * ns[0];\n    int den = xs[1] * ns[1];\n    return num % den == 0;\n}\n",
            "int digitsSum(int n) {\n    final strN = n.toString();\n    if (n >= 0) {\n        return strN.codePointCount - 1;\n    } else {\n        return 2 * strN.codePointCount - 3;\n    }\n}\nList<int> orderByPoints(List<int> nums) {\n    return nums.sort((a, b) {\n        int sumA = digitsSum(a);\n        int sumB = digitsSum(b);\n        return sumA - sumB;\n    });\n}\n",
            "int specialFilter(List<int> nums) {\n    final odds = '13579';\n    return nums.firstWhere((n) => n > 10 && n % 2 == 1 && odds.contains(String.charAt(n)));\n}\n",
            "int getMaxTriples(int n) {\n    int[] c = new int[3];\n    for (int i = 1; i <= n; i++) {\n        int a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6;\n}\n",
            "List<String> bf(String planet1, String planet2) {\n    List<String> names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.contains(planet1) || !names.contains(planet2)) {\n        return [];\n    }\n    int l = names.indexOf(planet1);\n    int r = names.indexOf(planet2);\n    if (l > r) {\n        l, r = r, l;\n    }\n    if (l == r) {\n        return [];\n    }\n    return names.sublist(l + 1, r);\n}\n",
            "List<String> sortedListSum(List<String> lst) {\n    List<String> result = lst.filter((s) => s.length % 2 == 0).toList();\n    result.sort((a, b) {\n        int aLen = a.length, bLen = b.length;\n        return aLen == bLen ? a.compareTo(b) : aLen - bLen;\n    });\n    return result;\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= n.sqrt().intDiv(2); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(List<double> lst) {\n    return lst.filter((n) => n >= 0 && n % 2 == 1).map((n) => n * n).sum();\n}\n",
            "List<int> compare(List<int> game, List<int> guess) {\n    if (game.length != guess.length) {\n        throw Exception('Lists must be of equal length.');\n    }\n    var result = <int>[];\n    for (int i = 0; i < game.length; i++) {\n        result.add(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}\n",
            "String strongestExtension(String className, List<String> extensions) {\n    String maxExt = extensions.first;\n    double maxS = 0;\n    for (String ext : extensions) {\n        int upper = 0, lower = 0;\n        for (int i = 0; i < ext.length; i++) {\n            if (ext[i].isUpper()) {\n                upper++;\n            } else if (ext[i].isLower()) {\n                lower++;\n            }\n        }\n        double s = (double)upper - (double)lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return className + \".\" + maxExt;\n}\n",
            "bool cycpatternCheck(String a, String b) {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (int i = 0; i < b.length; i++) {\n        String cycle = b.substring(i) + b.substring(0, i);\n        if (cycle in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "int abs(int num) {\n  return num < 0 ? -num : num;\n}\nList<int> evenOddCount(int num) {\n  var ds = num.toString();\n  var even = ds.length - ds.lastIndexOf('0') - 1;\n  return [even, ds.length - even];\n}\n",
            "String intToMiniRoman(int num) {\n    final values = <int>[1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    final numerals = <String>[\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    StringBuilder result = new StringBuilder();\n    for (int i = 0; i < numerals.length; i++) {\n        Int32Field value = num.div(values[i]);\n        num -= value * values[i];\n        result.append(value.hasValue() ? numerals[i] : \"\");\n    }\n    return result.toString();\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    int s = a + b + c;\n    return s * s - a * a - b * b + c * c == 0;\n}\n",
            "String findMax(List<String> words) {\n    var maxCnt = 0;\n    var maxW = \"\";\n    for (var w in words) {\n        var cnt = w.length;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt == maxCnt) {\n            maxW = min(maxW, w);\n        }\n    }\n    return maxW;\n}\n",
            "int nextNumber(int lastNumber) {\n    return lastNumber % 2 == 0 ? lastNumber + 1 : lastNumber * 3 + 1;\n}\nList<int> genUntilMax(int maxNum) {\n    int last = 1;\n    var result = <int>[];\n    while (last <= maxNum) {\n        result.add(last);\n        last = nextNumber(last);\n    }\n    return result;\n}\nint topKElements(List<int> allElements, int kCount) {\n    var pq = PriorityQueue<int>();\n    for (int e in allElements) {\n        pq.add(e);\n        if (pq.length > kCount) {\n            pq.removeFirst();\n        }\n    }\n    var result = <int>[];\n    while (pq.isNotEmpty) {\n        result.add(pq.removeFirst());\n    }\n    return result;\n}\nList<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "int doAlgebra(List<String> operators, List<int> operands) {\n    var ops = operators.toList();\n    var nums = operands.toList();\n    var i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] == \"*\") {\n            nums[i] *= nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"/\") {\n            nums[i] /= nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] / nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"%\") {\n            nums[i] = nums[i] % nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"+\") {\n            nums[i] += nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"-\") {\n            nums[i] -= nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]);\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i--;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"+\") {\n            nums[i] += nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"-\") {\n            nums[i] -= nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i++;\n    }\n    return nums[0];\n}\n",
            "String solve(String s) {\n    if (!s.containsOnly((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || ch == ' ')) {\n        return s.reverse;\n    }\n    var result = '';\n    for (var ch in s) {\n        if (!(ch >= 'a' && ch <= 'z')) {\n            result += ch;\n        } else if (ch >= 'A' && ch <= 'Z') {\n            result += ch.lowercase;\n        } else {\n            result += ch.uppercase;\n        }\n    }\n    return result;\n}\n",
            "String? stringToMd5(String txt) async {\n    if (txt == null) {\n        return null;\n    }\n    final md5 = new List<int>();\n    for (int i = 0; i < txt.length; i++) {\n        int b = txt.codeUnits[i].code;\n        md5.add(b);\n    }\n    final md5_hash = List<int>.of(md5);\n    final md5_encoded = md5_hash.map((b) => '$b').join('');\n    return md5_encoded;\n}\n",
            "int max(int a, int b) => a > b ? a : b;\nint min(int a, int b) => a < b ? a : b;\nList<int> generateIntegers(int a, int b) {\n    int lower = max(2, min(a, b));\n    int upper = min(8, max(a, b));\n    return [i for i in range(lower, upper + 1) if i % 2 == 0];\n}\n"
        ],
        "go": [
            "func HasCloseElements(numbers []float64, threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func SeparateParenGroups(parenString string) []string {\n    groups := []string{}\n    stk := []byte{}\n    currentGroup := \"\"\n    parens := parenString.Replace(\" \", \"\")\n    for _, ch := range parens {\n        if ch == byte('(') {\n            stk = append(stk, ch)\n            currentGroup += string(ch)\n        } else if ch == byte(')') {\n            for i, v := range stk {\n                if v == byte('(') {\n                    stk = stk[:i]\n                    currentGroup += string(ch)\n                    if len(stk) == 0 {\n                        groups = append(groups, currentGroup)\n                        currentGroup = \"\"\n                    }\n                    break\n                }\n            }\n        }\n    }\n    return groups\n}\n",
            "func TruncateNumber(num float64) float64 {\n    return num - math.Floor(num)\n}\n",
            "func BelowZero(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func MeanAbsoluteDeviation(numbers []float64) float64 {\n    mean := sum(numbers) / float64(len(numbers))\n    var deviation float64\n    for _, num := range numbers {\n        deviation += abs(num - mean)\n    }\n    return deviation / float64(len(numbers))\n}\n",
            "func Intersperse(numbers []int, delimiter int) []int {\n    result := []int{}\n    for i, num := range numbers {\n        if i != 0 {\n            result = append(result, delimiter)\n        }\n        result = append(result, num)\n    }\n    return result\n}\n",
            "func ParseNestedParens(parenString string) []int {\n    result := make([]int, 0)\n    parenGroups := strings.Fields(parenString)\n    for _, group := range parenGroups {\n        maxDepth := 0\n        depth := 0\n        for _, ch := range group {\n            if ch == \"(\" {\n                depth++\n                maxDepth = max(maxDepth, depth)\n            } else if ch == \")\" {\n                depth--\n            }\n        }\n        result = append(result, maxDepth)\n    }\n    return result\n}\n",
            "func FilterBySubstring(strs []string, substring string) []string {\n    var result []string\n    for _, s := range strs {\n        if strings.Contains(s, substring) {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
            "func SumProduct(numbers []int) []int {\n    nSum := 0\n    nProduct := 1\n    for _, n := range numbers {\n        nSum += n\n        nProduct *= n\n    }\n    return []int{nSum, nProduct}\n}\n",
            "func RollingMax(numbers []int) []int {\n    result := make([]int, len(numbers))\n    maxSoFar := float64(-inf)\n    for i := 0; i < len(numbers); i++ {\n        maxSoFar = max(maxSoFar, numbers[i])\n        result[i] = int(maxSoFar)\n    }\n    return result\n}\n",
            "func IsPalindrome(s string) bool {\n    for i := 0; i < len(s)/2; i++ {\n        if s[i] != s[len(s)-i-1] {\n            return false\n        }\n    }\n    return true\n}\nfunc MakePalindrome(s string) string {\n    if IsPalindrome(s) {\n        return s\n    }\n    for i := 0; i < len(s); i++ {\n        if IsPalindrome(s[i:]) {\n            return s + s[:i][::-1]\n        }\n    }\n    return \"\"\n}\n",
            "func StringXor(a, b string) string {\n    result := make([]byte, 0)\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result = append(result, []byte(\"0\"))\n        } else {\n            result = append(result, []byte(\"1\"))\n        }\n    }\n    return string(result)\n}\n",
            "func Longest(strs []string) *string {\n    if len(strs) == 0 {\n        return nil\n    }\n    longest := strs[0]\n    for _, s := range strs {\n        if len(s) > len(longest) {\n            longest = s\n        }\n    }\n    return &longest\n}\n",
            "func GreatestCommonDivisor(a, b int) int {\n    if b == 0 {\n        return a\n    }\n    return greatestCommonDivisor(b, a%b)\n}\n",
            "func AllPrefixes(s string) []string {\n    prefixes := make([]string, 0)\n    for i := 0; i <= len(s); i++ {\n        prefix := s[:i]\n        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n}\n",
            "func StringSequence(n int) string {\n    result := \"\"\n    for i := 1; i <= n+1; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
            "func CountDistinctCharacters(s string) int {\n    s = strings.ToLower(s)\n    unique := make(map[string]bool)\n    for _, c := range s {\n        if _, ok := unique[c]; !ok {\n            unique[c] = true\n        }\n    }\n    return len(unique)\n}\n",
            "func ParseMusic(musicString string) []int {\n    durations := map[string]int{\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    }\n    notes := strings.Fields(musicString)\n    result := make([]int, len(notes))\n    for i, note := range notes {\n        result[i] = durations[note]\n    }\n    return result\n}\n",
            "func HowManyTimes(s string, substring string) int {\n    times := 0\n    for i := 0; i < len(s)-len(substring)+1; i++ {\n        if s[i:i+len(substring)] == substring {\n            times++\n        }\n    }\n    return times\n}\n",
            "func SortNumbers(numbers string) string {\n    numDict := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    numList := strings.Fields(numbers)\n    numList.Sort()\n    numList = append(numList, [][]string{})\n    for i, num := range numList {\n        numList[i] = [0]string{num, fmt.Sprintf(\"%d\", numDict[num])}\n    }\n    numList = append(numList[:len(numList)-1], numList[len(numList)-1][0])\n    return strings.Join(numList, \" \")\n}\nfunc main() {\n    numbers := \"six seven eight nine five\"\n    fmt.Println(SortNumbers(numbers))\n}\n",
            "func FindClosestElements(numbers []float64) []float64 {\n    sort.Float64s(numbers)\n    minDiff := math.Inf(1)\n    closestPair := make([]float64, 2)\n    for i := 1; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[i-1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair[0] = numbers[i-1]\n            closestPair[1] = numbers[i]\n        }\n    }\n    return closestPair\n}\n",
            "func RescaleToUnit(numbers []float64) []float64 {\n    if len(numbers) == 0 {\n        return []float64{}\n    }\n    minNum := numbers[0]\n    maxNum := numbers[0]\n    for _, num := range numbers {\n        if num < minNum {\n            minNum = num\n        }\n        if num > maxNum {\n            maxNum = num\n        }\n    }\n    if minNum == maxNum {\n        return []float64{0.0} * len(numbers)\n    }\n    result := make([]float64, len(numbers))\n    for i, num := range numbers {\n        result[i] = (num - minNum) / (maxNum - minNum)\n    }\n    return result\n}\n",
            "func FilterIntegers(values []interface{}) []int {\n    result := make([]int, 0)\n    for _, v := range values {\n        if v.(int) > 0 {\n            result = append(result, v.(int))\n        }\n    }\n    return result\n}\n",
            "func StrLength(s string) int {\n    return len(s)\n}\n",
            "func LargestDivisor(n int) int {\n    for i := 2; n%i == 0; i++ {\n        if n/i < i {\n            return n/i\n        }\n    }\n    return 1\n}\n",
            "func Factorize(n int) []int {\n    factors := make([]int, 0)\n    divisor := 2\n    for n > 1 {\n        if n%divisor == 0 {\n            factors = append(factors, divisor)\n            n /= divisor\n            continue\n        }\n        divisor++\n    }\n    factors = append(factors, n)\n    return factors\n}\n",
            "func RemoveDuplicates(numbers []int) []int {\n    counts := make(map[int]int)\n    for _, num := range numbers {\n        counts[num]++\n    }\n    res := []int{}\n    for num, count := range counts {\n        if count == 1 {\n            res = append(res, num)\n        }\n    }\n    return res\n}\n",
            "func FlipCase(s string) string {\n    var result []byte\n    for _, ch := range s {\n        if unicode.IsLetter(ch) {\n            if unicode.IsUpper(ch) {\n                result = append(result, string(unicode.ToLower(ch)))\n            } else {\n                result = append(result, string(unicode.ToUpper(ch)))\n            }\n        } else {\n            result = append(result, string(ch))\n        }\n    }\n    return string(result)\n}\n",
            "func Concatenate(strs []string) string {\n    return strings.Join(strs, \"\")\n}\n",
            "func FilterByPrefix(strs []string, prefixStr string) []string {\n    var result []string\n    for _, s := range strs {\n        if strings.HasPrefix(s, prefixStr) {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
            "func GetPositive(l []int) []int {\n    var result []int\n    for _, num := range l {\n        if num > 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n)))+1; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc main() {\n    fmt.Println(IsPrime(7)) // Output: true\n    fmt.Println(IsPrime(8)) // Output: false\n}\n",
            "func Poly(xs []int, x float64) float64 {\n    res := 0.0\n    for i, xi := range xs {\n        res += float64(xi) * x ** float64(i)\n    }\n    return res\n}\nfunc FindZero(xs []int) float64 {\n    x1, x2 := 1.0, -1.0\n    for poly(xs, x1) * poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    for {\n        mid := (x1 + x2) / 2\n        if poly(xs, mid) == 0 {\n            return mid\n        }\n        if poly(xs, mid) * poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n        if abs(x1 - x2) < 1e-10 {\n            return (x1 + x2) / 2\n        }\n    }\n}\nfunc main() {\n    xs := []int{1, 2, 3}\n    fmt.Printf(\"Polynomial value at x=2: %f\\n\", Poly(xs, 2))\n    fmt.Printf(\"Zero point of polynomial: %f\\n\", FindZero(xs))\n}\n",
            "func SortThird(l []int) []int {\n    sortedThird := sort.Slice(l[::3], func(i, j int) bool {\n        return l[i] < l[j]\n    })\n    return append([]int{}, sortedThird...l[3::3])\n}\n",
            "func ListUnique(l []int) []int {\n    seen := make(map[int]bool)\n    result := []int{}\n    for _, e := range l {\n        if seen[e] {\n            continue\n        }\n        seen[e] = true\n        result = append(result, e)\n    }\n    return sort.Ints(result)\n}\n",
            "func MaxElement(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n    return max(l)\n}\n",
            "func FizzBuzz(n int) int {\n    cnt := 0\n    for i := 0; i < n; i++ {\n        if i%11 == 0 || i%13 == 0 {\n            cnt++\n        }\n        if i%3 == 0 && i%5 == 0 {\n            cnt++\n        }\n        if i%3 == 0 {\n            cnt++\n        }\n        if i%5 == 0 {\n            cnt++\n        }\n    }\n    return cnt\n}\n",
            "func SortEven(l []int) []int {\n    sortedEven := sort.Slice(l[::2], func(i, j int) bool { return l[i] < l[j] })\n    return append([]int{}, sortedEven...l[1::2])\n}\n",
            "func EncodeCyclic(s string) string {\n    result := make([]byte, len(s))\n    for i := 0; i < len(s); i += 3 {\n        if i+2 > len(s)-1 {\n            result[i:] = s[i:]\n            break\n        }\n        result[i+1] = s[i+2]\n        result[i+2] = s[i+1]\n        result[i] = s[i+0]\n    }\n    return string(result)\n}\nfunc DecodeCyclic(s string) string {\n    return EncodeCyclic(EncodeCyclic(s))\n}\n",
            "func PrimeFib(n int) int {\n    f := [2]int{0, 1}\n    cnt := 0\n    for cnt < n {\n        f = append(f, f[len(f)-1] + f[len(f)-2])\n        if isPrime(f[len(f)-1]) {\n            cnt++\n        }\n    }\n    return f[len(f)-1]\n}\nfunc isPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc main() {\n    fmt.Println(PrimeFib(10))\n}\n",
            "func TriplesSumToZero(l []int) bool {\n    for i := 0; i < len(l)-2; i++ {\n        for j := i + 1; j < len(l)-1; j++ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func CarRaceCollision(n int) int {\n    return n * n\n}\n",
            "func IncrList(l []int) []int {\n    result := make([]int, len(l))\n    for i := range l {\n        result[i] = l[i] + 1\n    }\n    return result\n}\n",
            "func PairsSumToZero(l []int) bool {\n    seen := make(map[int]bool)\n    for _, num := range l {\n        if seen[-num] {\n            return true\n        }\n        seen[num] = true\n    }\n    return false\n}\n",
            "func ChangeBase(x int, bas int) string {\n    digits := []byte(\"0123456789ABCDEF\")\n    if x < 0 {\n        return \"-\" + changeBase(x*-1, bas)\n    }\n    result := make([]byte, 0)\n    for x > 0 {\n        result = append([]byte{digits[x%bas]}, result)\n        x /= bas\n    }\n    return string(result)\n}\n",
            "func TriangleArea(a int, h int) float64 {\n    return float64(a) * float64(h) / 2\n}\n",
            "func Fib4(n int) int {\n    fib := [4]int{0, 0, 2, 0}\n    for i := 4; i <= n; i++ {\n        fib[i%4] = fib[(i - 1)%4] + fib[(i - 2)%4] + fib[(i - 3)%4]\n    }\n    return fib[n%4]\n}\n",
            "func Median(l []float64) float64 {\n    n := len(l)\n    if n % 2 != 0 {\n        return l[n/2]\n    }\n    return (l[n/2] + l[n/2-1]) / 2.0\n}\n",
            "func IsPalindrome(txt string) bool {\n    for i, j := 0, len(txt)-1; i < len(txt)/2 {\n        if txt[i] != txt[j] {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n",
            "func Modp(n int, p int) int {\n    var ret int = 1\n    for i := 0; i < n; i++ {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func EncodeShift(s string) string {\n    result := \"\"\n    for _, ch := range s {\n        result += string(encode.Encode(ch, 5))\n    }\n    return result\n}\nfunc DecodeShift(s string) string {\n    result := \"\"\n    for _, ch := range s {\n        result += string(encode.Decode(ch, 21))\n    }\n    return result\n}\n",
            "func RemoveVowels(txt string) string {\n    vowels := \"aeiouAEIOU\"\n    chars := strings.Builder()\n    for _, char := range txt {\n        if !strings.ContainsRune(vowels, char) {\n            chars.WriteRune(char)\n        }\n    }\n    return chars.String()\n}\nfunc main() {\n    txt := \"Hello World\"\n    fmt.Println(RemoveVowels(txt)) // Output: \"Hll Wrld\"\n}\n",
            "func BelowThreshold(l []int, t int) bool {\n    for _, x := range l {\n        if x >= t {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Add(x int, y int) int {\n    return x + y\n}\n",
            "func SameChars(s0, s1 string) bool {\n    return len(s0) == len(s1) && len(set(s0)) == len(set(s1)) && sort.IsEqual([]int(len(s0)), []int(len(s1)))\n}\n",
            "func Fib(n int) int {\n    a, b := 0, 1\n    for n > 0 {\n        if n%2 == 1 {\n            return fib(n-1) + fib(n-2)\n        }\n        return fib(n/2) * (fib(n/2) + fib(n/2+1))\n    }\n    return a\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '<' {\n            depth++\n        } else if b == '>' {\n            depth--\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Monotonic(l []int) bool {\n    diff := make([]int, len(l)-1)\n    for i := 0; i < len(l)-1; i++ {\n        diff[i] = l[i+1] - l[i]\n    }\n    return all(x <= 0 for x in diff) || all(x >= 0 for x in diff)\n}\n",
            "func Common(l1 []int, l2 []int) []int {\n    l1Set := make(map[int]bool)\n    for _, e := range l1 {\n        l1Set[e] = true\n    }\n    result := make([]int, 0)\n    for _, e := range l2 {\n        if l1Set[e] {\n            result = append(result, e)\n        }\n    }\n    return sort.Slice(result, func(i, j int) bool { return result[i] < result[j] })\n}\n",
            "func LargestPrimeFactor(n int) int {\n    var result int\n    for i := 2; i*i <= n; i++ {\n        for n%i == 0 {\n            result = i\n            break\n        }\n    }\n    if n > 1 {\n        result = n\n    }\n    return result\n}\n",
            "func SumToN(n int) int {\n    var result int\n    for i := 1; i <= n; i++ {\n        result += i\n    }\n    return result\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '(' {\n            depth++\n        } else if b == ')' {\n            depth--\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Derivative(xs []int) []int {\n    result := make([]int, len(xs)-1)\n    for i := 1; i < len(xs); i++ {\n        result[i-1] = xs[i] * i\n    }\n    return result\n}\n",
            "func Fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    }\n    a, b, c := 0, 0, 1\n    for n > 2 {\n        a, b, c = b, c, a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "func VowelsCount(s string) int {\n    vowels := \"aeiou\"\n    cnt := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || (s[i] == 'y' && i == len(s)-1) {\n            cnt++\n        }\n    }\n    return cnt\n}\n",
            "func CircularShift(x int, shift int) string {\n    x_str := strconv.Itoa(x)\n    if shift > len(x_str) {\n        return strings.Reverse(x_str)\n    }\n    shift = shift % len(x_str)\n    return x_str[len(x_str)-shift:] + x_str[:len(x_str)-shift]\n}\n",
            "func DigitSum(s string) int {\n    var result int\n    for _, c := range s {\n        if 'A' <= c && c <= 'Z' {\n            result += int(string(c))\n        }\n    }\n    return result\n}\n",
            "func FruitDistribution(s string, n int) int {\n    words := strings.Split(s, \" \")\n    apples := int(words[len(words)-6])\n    oranges := int(words[len(words)-2])\n    return n - apples - oranges\n}\n",
            "func Pluck(arr []int) []int {\n    evens := []int{}\n    for _, n := range arr {\n        if n%2 == 0 {\n            evens = append(evens, n)\n        }\n    }\n    if len(evens) == 0 {\n        return []int{}\n    }\n    minEven := min(evens)\n    return []int{minEven, arr.Index(minEven)}\n}\n",
            "func Search(lst []int) int {\n    freqs := make(map[int]int)\n    for _, n := range lst {\n        freqs[n]++\n    }\n    goodVals := make([]int, 0)\n    for k, v := range freqs {\n        if v >= k {\n            goodVals = append(goodVals, k)\n        }\n    }\n    if len(goodVals) == 0 {\n        return -1\n    }\n    return goodVals[len(goodVals)-1]\n}\n",
            "func StrangeSortList(lst []int) []int {\n    sl := sort.Ints(lst)\n    result := make([]int, len(lst))\n    left, right := 0, len(sl) - 1\n    for left <= right {\n        result[left] = sl[left]\n        left++\n        if left <= right {\n            result[right] = sl[right]\n            right--\n        }\n    }\n    return result\n}\n",
            "func TriangleArea(a, b, c int) float64 {\n    if a < 0 || b < 0 || c < 0 {\n        return -1.0\n    }\n    if a == b || b == c || a == c {\n        return -1.0\n    }\n    s := (a + b + c) / 2.0\n    area := sqrt(s * (s - a) * (s - b) * (s - c))\n    return area\n}\n",
            "func WillItFly(q []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n    isPalin := true\n    for i := 0; i < len(q); i++ {\n        if q[i] != q[len(q)-i-1] {\n            isPalin = false\n            break\n        }\n    }\n    total := 0\n    for _, num := range q {\n        total += num\n    }\n    return isPalin && total <= w\n}\n",
            "func SmallestChange(arr []int) int {\n    ans := 0\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] != arr[len(arr)-i-1] {\n            ans++\n        }\n    }\n    return ans\n}\n",
            "func TotalMatch(lst1 []string, lst2 []string) []string {\n    cnt1 := 0\n    cnt2 := 0\n    for _, s := range lst1 {\n        cnt1 += len(s)\n    }\n    for _, s := range lst2 {\n        cnt2 += len(s)\n    }\n    if cnt1 <= cnt2 {\n        return lst1\n    }\n    return lst2\n}\n",
            "func IsMultiplyPrime(a int) bool {\n    if a < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(a))); i++ {\n        if isPrime(i) {\n            var j int\n            for j = 1; a%i == 0; j++ {\n                a /= i\n            }\n            if j == 3 {\n                return true\n            }\n        }\n    }\n    return false\n}\nfunc isPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc main() {\n    fmt.Println(isMultiplyPrime(24)) // Output: true\n    fmt.Println(isMultiplyPrime(25)) // Output: false\n}\n",
            "func IsSimplePower(x int, n int) bool {\n    if n < 2 {\n        return x == n\n    }\n    tmp := 1\n    for tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "func IsCube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n    root := int(math.Sqrt(float64(a)))\n    return root*root*root == a\n}\n",
            "func HexKey(num string) int {\n    count := 0\n    for _, c := range num {\n        if c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' {\n            count++\n        }\n    }\n    return count\n}\n",
            "func DecimalToBinary(dec int) string {\n    binary := \"\"\n    for dec > 0 {\n        remainder := dec % 2\n        dec = dec / 2\n        binary = fmt.Sprintf(\"%s%d\", string(remainder), dec)\n    }\n    return fmt.Sprintf(\"db%sdb\", binary)\n}\nfunc main() {\n    dec := 10\n    binary := DecimalToBinary(dec)\n    fmt.Printf(\"%d in binary is %s\\n\", dec, binary)\n}\n",
            "func IsHappy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func NumericalLetterGrade(grades []float64) []string {\n    result := make([]string, 0)\n    for _, g := range grades {\n        if g == 4.0 {\n            result = append(result, \"A+\")\n        } else if g > 3.7 {\n            result = append(result, \"A\")\n        } else if g > 3.3 {\n            result = append(result, \"A-\")\n        } else if g > 3.0 {\n            result = append(result, \"B+\")\n        } else if g > 2.7 {\n            result = append(result, \"B\")\n        } else if g > 2.3 {\n            result = append(result, \"B-\")\n        } else if g > 2.0 {\n            result = append(result, \"C+\")\n        } else if g > 1.7 {\n            result = append(result, \"C\")\n        } else if g > 1.3 {\n            result = append(result, \"C-\")\n        } else if g > 1.0 {\n            result = append(result, \"D+\")\n        } else if g > 0.7 {\n            result = append(result, \"D\")\n        } else if g > 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n",
            "func PrimeLength(s string) bool {\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i <= int(sqrt(float64(length)))+1; i++ {\n        if length%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func StartsOneEnds(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * (10 << (n - 2))\n}\n",
            "func Solve(n int) string {\n    digitsSum := 0\n    for _, digit := range strconv.Itoa(n) {\n        digitsSum += int(digit)\n    }\n    return fmt.Sprintf(\"%s\", bin(digitsSum))[2:]\n}\n",
            "func Add(lst []int) int {\n    var result int\n    for i, x := range lst {\n        if i%2 == 1 && x%2 == 0 {\n            result += x\n        }\n    }\n    return result\n}\n",
            "func AntiShuffle(s string) string {\n    words := strings.Fields(s)\n    antiShuffledWords := make([]string, len(words))\n    for i, word := range words {\n        antiShuffledWords[i] = strings.Join(sort.Slice([]string(word), func(i, j int) bool {\n            return i < j\n        }), \"\")\n    }\n    return strings.Join(antiShuffledWords, \" \")\n}\n",
            "func GetRow(lst [][]int, x int) [][]int {\n    coords := make([][]int, 0)\n    for i := range lst {\n        for j := range lst[i] {\n            if lst[i][j] == x {\n                coords = append(coords, [2]int{i, j})\n            }\n        }\n    }\n    return sort.Slice(coords, func(i, j int) bool {\n        return coords[i][0] < coords[j][0] || (coords[i][0] == coords[j][0] && -coords[i][1] > coords[j][1])\n    })\n}\n",
            "func SortArray(arr []int) []int {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    if (arr[0] + arr[len(arr)-1]) % 2 == 0 {\n        return sort.Slice(arr, func(i, j int) bool { return arr[i] > arr[j] })\n    }\n    return sort.Slice(arr, func(i, j int) bool { return arr[i] < arr[j] })\n}\n",
            "func Encrypt(s string) string {\n    result := \"\"\n    for _, ch := range s {\n        shifted := strings.ToLower(string(ch))\n        shifted = string(ord(shifted) + 4)\n        if ord(shifted) > ord('z') {\n            shifted = string(ord(shifted) - 26)\n        }\n        result += shifted\n    }\n    return result\n}\nfunc ord(s string) string {\n    return string(ord(s[0]))\n}\nfunc main() {\n    s := \"hello world\"\n    fmt.Println(Encrypt(s)) // prints \"mmgh kowr l8lr\"\n}\n",
            "func NextSmallest(lst []int) *int {\n    sl := make([]int, len(lst))\n    copy(sl, lst)\n    sort.Ints(sl)\n    if len(sl) < 2 {\n        return nil\n    }\n    return &sl[1]\n}\n",
            "func IsBored(s string) int {\n    re := regexp.MustCompile(`(?i)i\\s+(\\w+)`)\n    matches := re.FindAllString(s, -1)\n    return len(matches)\n}\n",
            "func AnyInt(x interface{}, y interface{}, z interface{}) bool {\n    if x.(int) + y.(int) == z.(int) || x.(int) + z.(int) == y.(int) || y.(int) + z.(int) == x.(int) {\n        return true\n    }\n    return false\n}\n",
            "func Encode(message string) string {\n    vowels := \"aeiouAEIOU\"\n    result := \"\"\n    for _, ch := range message {\n        if unicode.IsLetter(ch) {\n            ch1 := string(ch)\n            if ch1 == string(ch.Upper()) && unicode.IsLetter(ch.Lower()) {\n                ch1 = string(unicode.ToLower(ch.Upper() - 'A' + 2))\n            } else if unicode.IsLetter(ch) && ch1[0] in []string{vowels[0], vowels[1]} {\n                ch1 = string(unicode.ToUpper(ch.Lower() - 'a' - 2))\n            }\n            result += ch1\n        } else {\n            result += string(ch)\n        }\n    }\n    return result\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc Skjkasdkd(lst []int) int {\n    primes := make([]int, 0)\n    for _, n := range lst {\n        if IsPrime(n) {\n            primes = append(primes, n)\n        }\n    }\n    if len(primes) == 0 {\n        return 0\n    }\n    largest := strconv.Itoa(max(primes))\n    sum := 0\n    for _, digit := range largest {\n        sum += int(digit)\n    }\n    return sum\n}\nfunc main() {\n    lst := []int{3, 4, 5, 6, 7, 8, 9, 10, 11}\n    fmt.Println(Skjkasdkd(lst))\n}\n",
            "func CheckDictCase(d map[string]string) bool {\n    if len(d) == 0 {\n        return false\n    }\n    return all(c.IsLower() for c in d.Keys()) || all(c.IsUpper() for c in d.Keys())\n}\n",
            "func CountUpTo(n int) []int {\n    primes := make([]int, 0)\n    for i := 2; i < n; i++ {\n        isPrime := true\n        for j := 2; j*j <= i; j++ {\n            if i%j == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes = append(primes, i)\n        }\n    }\n    return primes\n}\n",
            "func Multiply(a int, b int) int {\n    if b < 0 {\n        return -Multiply(-a, -b)\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a < 0 {\n        return -((-a) % 10 * b)\n    }\n    return a % 10 * b\n}\n",
            "func CountUpper(s string) int {\n    vowels := \"AEIOU\"\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if i%2 == 0 && s[i] >= 'A' && s[i] <= 'E' {\n            count++\n        }\n    }\n    return count\n}\n",
            "func ClosestInteger(value string) int {\n    num, _ := strconv.ParseFloat(value, 64)\n    if num >= 0 {\n        return int(num + 0.5)\n    }\n    return int(num - 0.5)\n}\nfunc main() {\n    fmt.Println(ClosestInteger(\"-1.3\")) // -1\n    fmt.Println(ClosestInteger(\"0.6\")) // 0\n    fmt.Println(ClosestInteger(\"1.4\")) // 1\n}\n",
            "func MakeAPile(n int) []int {\n    pile := make([]int, n)\n    for i := 0; i < n; i++ {\n        pile[i] = n + 2 * i\n    }\n    return pile\n}\n",
            "func WordsString(s string) []string {\n    re := regexp.MustCompile(`[, ]`)\n    return re.FindStringAll(s, 0)\n}\n",
            "func ChooseNum(x int, y int) int {\n    if y > x {\n        return -1\n    }\n    if y%2 == 0 {\n        return y\n    }\n    if x != y {\n        return y - 1\n    }\n    return -1\n}\n",
            "func RoundedAvg(n int, m int) *string {\n    rAvg := int((float64(m) + float64(n) + 0.5))\n    return fmt.Sprintf(\"%b\", rAvg)\n}\n",
            "func UniqueDigits(x []int) []int {\n    var result []int\n    seen := make(map[int]bool)\n    for _, num := range x {\n        str := strconv.Itoa(num)\n        for _, digit := range str {\n            digit, _ := strconv.Atoi(string(rune(digit)))\n            if seen[digit] {\n                continue\n            }\n            seen[digit] = true\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\nfunc isOdd(rune rune) bool {\n    switch rune {\n    case '0', '2', '4', '6', '8', '1', '3', '5', '7', '9':\n        return true\n    default:\n        return false\n    }\n}\nfunc isEven(rune rune) bool {\n    return !isOdd(rune)\n",
            "func ByLength(arr []int) []string {\n    digitNames := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    sortedArr := make([]int, 0)\n    for _, x := range arr {\n        if x >= 1 && x <= 9 {\n            sortedArr = append(sortedArr, x)\n        }\n    }\n    sortedArr = sort.Ints(sortedArr)\n    sortedArr = sort.Reverse(sortedArr)\n    result := make([]string, 0)\n    for _, i := range sortedArr {\n        result = append(result, digitNames[i-1])\n    }\n    return result\n}\n",
            "func F(n int) []int {\n    nums := make([]int, n)\n    for i := 0; i < n; i++ {\n        nums[i] = i + 1\n    }\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i % 2 != 0 {\n            result[i] = sum(nums[:i])\n        } else {\n            result[i] = product(nums[:i], 1)\n        }\n    }\n    return result\n}\nfunc sum(nums []int) int {\n    var result int\n    for _, num := range nums {\n        result += num\n    }\n    return result\n}\nfunc product(nums []int, init int) int {\n    var result int\n    for _, num := range nums {\n        result *= num\n    }\n    return result\n}\n",
            "func EvenOddPalindrome(n int) []int {\n    cnt := [2]int{0, 0}\n    for i := 1; i <= n; i++ {\n        if isPalindrome(strconv.Itoa(i)) {\n            cnt[i%2]++\n        }\n    }\n    return cnt\n}\nfunc isPalindrome(s string) bool {\n    for i := 0; i < len(s)/2; i++ {\n        if s[i] != s[len(s)-i-1] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func CountNums(arr []int) int {\n    return len(filter(arr, func(n int) bool { return digitsSum(n) > 0 }))\n}\nfunc digitsSum(n int) int {\n    s := strconv.Itoa(n)\n    if n >= 0 {\n        return sum(s)\n    } else {\n        return sum(s[:2]) * 2 + digitsSum(abs(n))\n    }\n}\nfunc sum(s string) int {\n    sum := 0\n    for _, c := range s {\n        sum += int(c)\n    }\n    return sum\n}\n",
            "func MoveOneBall(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    sortedArr := sort.Slice(arr, func(i, j int) bool {\n        return arr[i] < arr[j]\n    })\n    for i := 0; i < len(arr); i++ {\n        if arr[i:] == sortedArr[:len(arr)-i] && arr[:i] == sortedArr[len(arr)-i:] {\n            return true\n        }\n    }\n    return false\n}\n",
            "func CanExchange(lst1 []int, lst2 []int) string {\n    oddCnt := 0\n    for _, num := range lst1 {\n        if num%2 != 0 {\n            oddCnt++\n        }\n    }\n    evenCnt := 0\n    for _, num := range lst2 {\n        if num%2 == 0 {\n            evenCnt++\n        }\n    }\n    if evenCnt >= oddCnt {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
            "func Histogram(test string) map[string]int {\n    freq := make(map[string]int)\n    words := strings.Fields(test)\n    for _, w := range words {\n        freq[w]++\n    }\n    maxFreq := 0\n    for f := range freq {\n        if freq[f] > maxFreq {\n            maxFreq = freq[f]\n        }\n    }\n    result := make(map[string]int)\n    for f, c := range freq {\n        if freq[f] == maxFreq {\n            result[f] = c\n        }\n    }\n    sort.Strings(result)\n    return result\n}\n",
            "func ReverseDelete(s string, c string) []string {\n    s1 := \"\"\n    for _, ch := range s {\n        if !contains(c, string(ch)) {\n            s1 += string(ch)\n        }\n    }\n    yes := \"yes\"\n    if isPalindrome(s1) {\n        yes = \"no\"\n    }\n    return []string{s1, yes}\n}\nfunc contains(s string, ch string) bool {\n    for _, c := range s {\n        if c == ch[0] {\n            return true\n        }\n    }\n    return false\n}\nfunc isPalindrome(s string) bool {\n    for i := 0; i < len(s)/2; i++ {\n        if s[i] != s[len(s)-i-1] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func OddCount(lst []string) []string {\n    result := make([]string, 0)\n    for _, s := range lst {\n        n := 0\n        for _, c := range s {\n            if (n%2 == 0 && unicode.IsLetter(c)) || (n%2 == 1 && unicode.IsNumber(c)) {\n                n++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"the number of odd elements in the string %d of the input.\", n))\n    }\n    return result\n}\n",
            "func MinSubArraySum(nums []int) int {\n    minSum := math.MaxInt32\n    curSum := 0\n    for i := 0; i < len(nums); i++ {\n        curSum += nums[i]\n        for curSum < 0 {\n            curSum = 0\n        }\n        minSum = min(curSum, minSum)\n    }\n    return minSum\n}\n",
            "func MaxFill(grid [][]int, capacity int) int {\n    rows, cols := len(grid), len(grid[0])\n    var maxCount int\n    for i := 0; i < rows; i++ {\n        for j := 0; j < cols; j++ {\n            count := math.Ceil(float64(sum(grid[i]))/float64(capacity))\n            maxCount = max(maxCount, count)\n        }\n    }\n    return maxCount\n}\nfunc sum(arr []int) int {\n    var result int\n    for _, e := range arr {\n        result += e\n    }\n    return result\n}\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n",
            "func CountOnes(num int) int {\n    return count_ones(num)\n}\nfunc SortArray(arr []int) []int {\n    sort.Sort(sort.LessInts(arr, func(i, j int) bool {\n        if count_ones(arr[i]) == count_ones(arr[j]) {\n            return arr[i] < arr[j]\n        }\n        return count_ones(arr[i]) < count_ones(arr[j])\n    }))\n    return arr\n}\nfunc count_ones(num int) int {\n    count := 0\n    for _, digit := range strconv.Itoa(num) {\n        if digit == \"1\" {\n            count++\n        }\n    }\n    return count\n}\nfunc main() {\n    arr := []int{1, 0, 2, 3, 4, 5, 6, 7, 8, 9}\n    fmt.Println(SortArray(arr))\n}\n",
            "func SelectWords(s string, n int) []string {\n    consonants := \"bcdfghjklmnpqrstvwxyz\"\n    words := strings.Fields(s)\n    result := []string{}\n    for _, w := range words {\n        if len(w) > 0 && len([c for c in strings.ToLower(w) if c in consonants]) == n {\n            result = append(result, w)\n        }\n    }\n    return result\n}\n",
            "func GetClosestVowel(word string) string {\n    vowels := []rune(\"aeiouAEIOU\")\n    closestVowel := \"\"\n    minDistance := len(word)\n    for i := range word {\n        for _, vowel := range vowels {\n            if strings.IndexRune(word[:i], vowel) > -1 && strings.IndexRune(word[i+1:], vowel) == -1 {\n                distance := strings.IndexRune(word[:i], vowel)\n                if distance < minDistance {\n                    closestVowel = string(vowel)\n                    minDistance = distance\n                }\n            }\n        }\n    }\n    return closestVowel\n}\nfunc main() {\n    word := \"apple\"\n    closestVowel := GetClosestVowel(word)\n    fmt.Println(closestVowel) // Output: l\n}\n",
            "func MatchParens(lst []string) string {\n    s1 := lst[0] + lst[1]\n    s2 := lst[1] + lst[0]\n    if check(s1) || check(s2) {\n        return \"Yes\"\n    }\n    return \"No\"\n}\nfunc check(s string) bool {\n    depth := 0\n    for _, ch := range s {\n        if ch == \"(\" {\n            depth++\n        } else {\n            depth--\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Maximum(arr []int, k int) []int {\n    if k == 0 {\n        return nil\n    }\n    return arr[len(arr)-k:]\n}\n",
            "func Solution(lst []int) int {\n    result := 0\n    for i, x := range lst {\n        if i%2 == 0 && x%2 != 0 {\n            result += x\n        }\n    }\n    return result\n}\n",
            "func AddElements(arr []int, k int) int {\n    var result int\n    for i := 0; i < k; i++ {\n        if len(str(arr[i])) <= 2 {\n            result += arr[i]\n        }\n    }\n    return result\n}\n",
            "func GetOddCollatz(n int) []int {\n    collatz := []int{1}\n    for n != 1 {\n        if n%2 == 0 {\n            n = n/2\n        } else {\n            n = 3*n + 1\n        }\n        collatz = append(collatz, n)\n    }\n    return sort.Ints(collatz)\n}\n",
            "func ValidDate(date string) bool {\n    if len(date) != 10 {\n        return false\n    }\n    if date[2] != \"-\" || date[5] != \"-\":\n        return false\n    m := int(date[0:2])\n    d := int(date[3:5])\n    if m == 2 && d > 29 {\n        return false\n    } else if m == 4 && m == 6 && m == 9 && m == 11 && d > 30 {\n        return false\n    } else if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) && d > 31 {\n        return false\n    }\n    return true\n}\n",
            "func SplitWords(txt string) []string {\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        return []string{strconv.Itoa(len(strings.Where(func(c byte) bool { return c == \"a\" || c == \"e\" || c == \"i\" || c == \"o\" || c == \"u\" || c == \"A\" || c == \"E\" || c == \"I\" || c == \"O\" || c == \"U\" }([]byte(txt[i]))))}\n    }\n}\n",
            "func IsSorted(lst []int) bool {\n    for i := 1; i < len(lst); i++ {\n        if lst[i-1] > lst[i] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc Intersection(interval1 []int, interval2 []int) string {\n    l := max(interval1[0], interval2[0])\n    r := min(interval1[1], interval2[1])\n    length := r - l\n    if length > 0 && IsPrime(length) {\n        return \"YES\"\n    }\n    return \"NO\"\n}\nfunc main() {\n    interval1 := [2]int{1, 5}\n    interval2 := [2]int{3, 7}\n    result := Intersection(interval1, interval2)\n    fmt.Println(result)\n}\n",
            "func ProdSigns(arr []int) *int {\n    if len(arr) == 0 {\n        return nil\n    }\n    if 0 == count_occurrences(arr, 0) {\n        return new(int, 1)\n    }\n    sign := -1 if count_occurrences(arr, func(n int) bool{n < 0}) % 2 == 1 else 1\n    return new(int, sign * sum(arr, func(n int) int{return abs(n)}))\n}\nfunc count_occurrences(arr []int, predicate func(int) bool) int {\n    count := 0\n    for _, n := range arr {\n        if predicate(n) {\n            count++\n        }\n    }\n    return count\n}\n",
            "func MinPath(grid [][]int, k int) []int {\n    n := len(grid)\n    minVal := n * n + 1\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if grid[i][j] == 1 {\n                temp := []int{}\n                if i > 0 {\n                    temp = append(temp, grid[i-1][j])\n                }\n                if j > 0 {\n                    temp = append(temp, grid[i][j-1])\n                }\n                if i < n-1 {\n                    temp = append(temp, grid[i+1][j])\n                }\n                if j < n-1 {\n                    temp = append(temp, grid[i][j+1])\n                }\n                minVal = min(temp)\n            }\n        }\n    }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        if i % 2 == 0 {\n            result[i] = 1\n        } else {\n            result[i] = minVal\n        }\n    }\n    fmt.Println(result)\n    return result\n}\nfunc min(a []int) int {\n    minVal := a[0]\n    for _, v := range a {\n        if v < minVal {\n            minVal = v\n        }\n    }\n    return minVal\n}\n",
            "func Tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n    }\n    seq := []int{1, 3}\n    for i := 1; i < n; i++ {\n        if i%2 == 0 {\n            seq = append(seq, i/2+1)\n        } else {\n            next := seq[i-1] + seq[i-2] + (i+3) / 2\n            seq = append(seq, int(next))\n        }\n    }\n    return seq\n}\n",
            "func Digits(n int) int {\n    odds := make([]int, 0)\n    str := strconv.Itoa(n)\n    for _, c := range str {\n        d, _ := strconv.Atoi(string(c))\n        if d%2 == 1 {\n            odds = append(odds, d)\n        }\n    }\n    if len(odds) == 0 {\n        return 0\n    }\n    heap.Init(&heap.LessInt{})\n    for _, o := range odds {\n        heap.Enqueue(&heap.Value{o, o})\n    }\n    product := 1\n    for h := range heap.Data {\n        product *= h.Value\n    }\n    return product\n}\n",
            "func IsNested(s string) bool {\n    openIdx := []int{}\n    closeIdx := []int{}\n    for i, ch := range s {\n        if ch == '[' {\n            openIdx = append(openIdx, i)\n        } else if ch == ']' {\n            closeIdx = append(closeIdx, i)\n        }\n    }\n    closeIdx.reverse()\n    cnt := 0\n    i := 0\n    l := len(closeIdx)\n    for j := range openIdx {\n        if i < l && openIdx[j] < closeIdx[i] {\n            cnt++\n            i++\n        }\n    }\n    return cnt >= 2\n}\n",
            "func SumSquares(lst []float64) int {\n    return sum(map[]float64{ceil(float64(n)) * float64(n) for n := range lst})\n}\nfunc sum(nums []float64) float64 {\n    var result float64\n    for _, num := range nums {\n        result += num\n    }\n    return result\n}\n",
            "func CheckIfLastCharIsALetter(txt string) bool {\n    if txt == \"\" {\n        return false\n    }\n    last := txt[len(txt)-1]\n    return len(last) == 1 && unicode.IsLetter(last[0])\n}\n",
            "func CanArrange(arr []int) int {\n    if len(arr) <= 1 {\n        return -1\n    }\n    idx := []int{}\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i-1] {\n            idx = append(idx, i)\n        }\n    }\n    return max(idx, -1)\n}\n",
            "func LargestSmallestIntegers(lst []int) []*int {\n    neg := []int{}\n    pos := []int{}\n    for _, e := range lst {\n        if e < 0 {\n            neg = append(neg, e)\n        } else if e > 0 {\n            pos = append(pos, e)\n        }\n    }\n    maxNeg, _ := max(neg)\n    minPos, _ := min(pos)\n    result := []*int{maxNeg, minPos}\n    for i := range result {\n        if result[i] == nil {\n            result[i] = &0\n        }\n    }\n    return result\n}\n",
            "func anyToReal(o interface{}) float64 {\n    switch o.(type) {\n    case string:\n        return float64(o.(string).Replace(',', '.'))\n    case int:\n        return float64(o.(int))\n    case float64:\n        return o.(float64)\n    default:\n        panic(\"Type Error\")\n    }\n}\nfunc CompareOne(a interface{}, b interface{}) *float64 {\n    a1 := anyToReal(a)\n    b1 := anyToReal(b)\n    if a1 == b1 {\n        return nil\n    }\n    if a1 > b1 {\n        return &a1\n    }\n    return &b1\n}\n",
            "func IsEqualToSumEven(n int) bool {\n    return n%2 == 0 && n >= 8\n}\n",
            "func SpecialFactorial(n int) int {\n    var result int\n    fact := 1\n    for i := 1; i <= n; i++ {\n        fact *= i\n    }\n    for i := 1; i <= n; i++ {\n        result *= fact\n    }\n    return result\n}\n",
            "func FixSpaces(txt string) string {\n    return regexp.ReplaceAllString(txt, \"_\", \" \")\n}\n",
            "func FileNameCheck(fileName string) string {\n    lst := strings.Split(fileName, \".\")\n    if len(lst) != 2 {\n        return \"No\"\n    }\n    if lst[1] != \"txt\" && lst[1] != \"exe\" && lst[1] != \"dll\" {\n        return \"No\"\n    }\n    if len(lst[0]) == 0 || !strings.Printable(lst[0][0]) || len(strings.FindAllStr(lst[0], \"[0-9]\")) > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "func SumSquares(lst []int) int {\n    result := 0\n    for i := 0; i < len(lst); i++ {\n        if i%3 == 0 {\n            result += pow(lst[i], 2)\n        } else if i%4 == 0 {\n            result += pow(lst[i], 3)\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc WordsInSentence(sentence string) string {\n    words := strings.Fields(sentence)\n    var result []string\n    for _, word := range words {\n        if IsPrime(len(word)) {\n            result = append(result, word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n",
            "func Simplify(x string, n string) bool {\n    xs := strings.Split(x, \"/\")\n    ns := strings.Split(n, \"/\")\n    num := int(xs[0]) * int(ns[0])\n    den := int(xs[1]) * int(ns[1])\n    return num % den == 0\n}\n",
            "func digitsSum(n int) int {\n    s := strconv.Itoa(n)\n    if n >= 0 {\n        return sum(s)\n    } else {\n        return sum(s[:2]) * 2 + digitsSum(abs(n))\n    }\n}\nfunc sum(s string) int {\n    return sum(s[1:]) + int(s[0])\n}\nfunc orderByPoints(nums []int) []int {\n    return sort.Slice(nums, func(i, j int) bool {\n        return digitsSum(nums[i]) > digitsSum(nums[j])\n    })\n}\nfunc main() {\n    nums := []int{-12345, 123456, -908000}\n    ordered := orderByPoints(nums)\n    fmt.Println(ordered)\n}\n",
            "func SpecialFilter(nums []int) int {\n    odds := \"13579\"\n    count := 0\n    for _, n := range nums {\n        if n > 10 && n%2 == 1 && string(n)[0] in odds {\n            count++\n        }\n    }\n    return count\n}\n",
            "func GetMaxTriples(n int) int {\n    c := [3]int{0, 0, 0}\n    for i := 1; i <= n; i++ {\n        a := i * i - i + 1\n        c[a%3]++\n    }\n    return c[0]*c[1]*c[2] + (c[0]*(c[0]-1)*(c[0]-2) + c[1]*(c[1]-1)*(c[1]-2) + c[2]*(c[2]-1)*(c[2]-2))/6\n}\n",
            "func Bf(planet1 string, planet2 string) []string {\n    names := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    if !(planet1In := contains(names, planet1)) || !(planet2In := contains(names, planet2)) {\n        return nil\n    }\n    l := indexOf(names, planet1)\n    r := indexOf(names, planet2)\n    if l > r {\n        l, r = r, l\n    }\n    if l == r {\n        return nil\n    }\n    return names[l+1:r]\n}\nfunc contains(names []string, name string) bool {\n    for _, n := range names {\n        if n == name {\n            return true\n        }\n    }\n    return false\n}\nfunc indexOf(names []string, name string) int {\n    for i, n := range names {\n        if n == name {\n            return i\n        }\n    }\n    return -1\n}\n",
            "func SortedListSum(lst []string) []string {\n    result := []string{}\n    for _, s := range lst {\n        if len(s)%2 == 0 {\n            result = append(result, s)\n        }\n    }\n    return sort.Strings(result)\n}\n",
            "func XOrY(n int, x int, y int) int {\n    if n < 2 {\n        return y\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func DoubleTheDifference(lst []float64) int {\n    var result int\n    for _, n := range lst {\n        if n >= 0 && n%2 == 1 {\n            result += n * n\n        }\n    }\n    return result\n}\n",
            "func Compare(game []int, guess []int) []int {\n    if len(game) != len(guess) {\n        return nil\n    }\n    result := make([]int, 0)\n    for i := 0; i < len(game); i++ {\n        result = append(result, abs(game[i]-guess[i]))\n    }\n    return result\n}\n",
            "func StrongestExtension(className string, extensions []string) string {\n    maxS := -999999\n    maxExt := \"\"\n    for _, ext := range extensions {\n        upper := 0\n        lower := 0\n        for _, c := range ext {\n            if strings.ToUpper(string(c)) == c {\n                upper++\n            } else {\n                lower++\n            }\n        }\n        s := upper - lower\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", className, maxExt)\n}\n",
            "func CycpatternCheck(a, b string) bool {\n    if len(a) < len(b) {\n        return false\n    }\n    for i := range b {\n        if b[i:]+b[:i] >= a {\n            return true\n        }\n    }\n    return false\n}\n",
            "func EvenOddCount(num int) []int {\n    ds := abs(num)\n    even := 0\n    for _, d := range ds {\n        if d % 2 == 0 {\n            even++\n        }\n    }\n    return [2]int{even, len(ds) - even}\n}\n",
            "func IntToMiniRoman(num int) string {\n    values := [14]string{\n        \"\",  // 0\n        \"I\", // 1\n        \"II\", // 2\n        \"III\", // 3\n        \"IV\", // 4\n        \"V\", // 5\n        \"VI\", // 6\n        \"VII\", // 7\n        \"VIII\", // 8\n        \"IX\", // 9\n        \"X\", // 10\n        \"XI\", // 11\n        \"XII\", // 12\n        \"XIII\", // 13\n    }\n    numerals := [14]string{\n        \"\",   // 0\n        \"I\",  // 1\n        \"II\", // 2\n        \"III\", // 3\n        \"IV\", // 4\n        \"V\",  // 5\n        \"VI\", // 6\n        \"VII\", // 7\n        \"VIII\", // 8\n        \"IX\", // 9\n        \"X\",  // 10\n        \"XI\", // 11\n        \"XII\", // 12\n        \"XIII\", // 13\n    }\n    res := []string{}\n    for i := 0; i < len(values); i++ {\n        count := num / int64(values[i])\n        num -= count * int64(values[i])\n        for j := 0; j < count; j++ {\n            res = append(res, numerals[i])\n        }\n    }\n    return string([]byte(res))\n}\nfunc main() {\n    fmt.Println(IntToMiniRoman(58)) // LVIII\n}\n",
            "func RightAngleTriangle(a, b, c int) bool {\n    s := sort.Ints(a, b, c)\n    return math.Pow(float64(s[0]), 2) + math.Pow(float64(s[1]), 2) == math.Pow(float64(s[2]), 2)\n}\n",
            "func FindMax(words []string) string {\n    maxCnt := 0\n    maxW := \"\"\n    for _, w := range words {\n        cnt := len(uniqueChars(w))\n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        } else if cnt == maxCnt {\n            maxW = min(maxW, w)\n        }\n    }\n    return maxW\n}\nfunc uniqueChars(s string) []string {\n    seen := make(map[string]bool)\n    result := make([]string, 0)\n    for _, c := range s {\n        if seen[c] {\n            continue\n        }\n        seen[c] = true\n        result = append(result, c)\n    }\n    return result\n}\n",
            "func Eat(num int, need int, remaining int) []int {\n    if need <= remaining {\n        return []int{num + need, remaining - need}\n    } else {\n        return []int{num + remaining, 0}\n    }\n}\n",
            "func DoAlgebra(operators []string, operands []int) int {\n    ops := operators\n    nums := operands\n    i := len(ops) - 1\n    for i >= 0 {\n        if ops[i] == \"^\" {\n            nums[i] = math.Pow(nums[i], nums[i+1])\n            nums = append(nums[:i], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n            i--\n        }\n        i--\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i+1]\n            nums = append(nums[:i], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n            i--\n        } else if ops[i] == \"/\" {\n            nums[i] = nums[i] / nums[i+1]\n            nums = append(nums[:i], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n            i--\n        }\n        i++\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i+1]\n            nums = append(nums[:i], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n            i--\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i+1]\n            nums = append(nums[:i], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n            i--\n        }\n        i++\n    }\n    return nums[0]\n}\n",
            "func Solve(s string) string {\n    if !hasAlpha(s) {\n        return reverse(s)\n    }\n    result := []byte(len(s))\n    i, j := 0, len(s)-1\n    for i < j {\n        if !isAlpha(s[i]) {\n            result[i] = s[i]\n            i++\n        }\n        if !isAlpha(s[j]) {\n            result[j] = s[j]\n            j--\n        }\n        if isAlpha(s[i]) && isAlpha(s[j]) {\n            result[i] = toLower(s[i])\n            result[j] = toLower(s[j])\n            i++\n            j--\n        }\n    }\n    return string(result)\n}\nfunc hasAlpha(s string) bool {\n    for _, ch := range s {\n        if isAlpha(ch) {\n            return true\n        }\n    }\n    return false\n}\nfunc isAlpha(ch byte) bool {\n    return strings.ToLower(string(ch)) == string(ch)\n}\nfunc reverse(s string) string {\n    b := []byte(len(s))\n    for i, ch := range s {\n        b[i] = ch\n    }\n    for i, j := 0, len(s)-1; i < j; i, j = i+1, j-1 {\n        b[i], b[j] = b[j], b[i]\n    }\n    return string(b)\n}\n",
            "func StringToMd5(txt string) *string {\n    md5Sum := md5.New()\n    txtBytes, err := ioutil.ReadAll(strings.NewReader(txt))\n    if err != nil {\n        log.Println(err)\n        return nil\n    }\n    md5Sum.Write(txtBytes)\n    md5SumHex := fmt.Sprintf(\"%x\", md5Sum.Sum())\n    return &md5SumHex\n}\n",
            "func GenerateIntegers(a, b int) []int {\n    lower := max(2, min(a, b))\n    upper := min(8, max(a, b))\n    return make([]int, upper-lower+1)\n    for i := range result {\n        result[i] = lower + i\n    }\n    for i, v := range result {\n        if v%2 == 0 {\n            result[i] = v\n        }\n    }\n    return result\n}\n"
        ],
        "java": [
            "class Global {\n    public static boolean hasCloseElements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<String> separateParenGroups(String parenString) {\n        var groups = new ArrayList<String>();\n        var stk = new ArrayList<Character>();\n        var currentGroup = \"\";\n        var parens = parenString.replaceAll(\" \", \"\");\n        for (char ch : parens.toCharArray()) {\n            if (ch == '(') {\n                stk.add(ch);\n                currentGroup += ch;\n            } else if (ch == ')') {\n                stk.remove(stk.size() - 1);\n                currentGroup += ch;\n                if (stk.isEmpty()) {\n                    groups.add(currentGroup);\n                    currentGroup = \"\";\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double truncateNumber(double num) {\n        return num - Math.floor(num);\n    }\n}\n",
            "class Global {\n    public static boolean belowZero(List<Integer> operations) {\n        var balance = 0;\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        double sum = 0.0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        mean = sum / numbers.size();\n        double deviation = 0.0;\n        for (double num : numbers) {\n            deviation += Math.abs(num - mean);\n        }\n        return deviation / numbers.size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i != 0) {\n                result.add(delimiter);\n            }\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseNestedParens(String parenString) {\n        var result = new ArrayList<Integer>();\n        var parenGroups = parenString.split(\"\\\\s+\");\n        for (String group : parenGroups) {\n            int maxDepth = 0;\n            int depth = 0;\n            for (String ch : group) {\n                if (ch.equals(\"(\")) {\n                    depth++;\n                    maxDepth = Math.max(maxDepth, depth);\n                } else if (ch.equals(\")\")) {\n                    depth--;\n                }\n            }\n            result.add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> filterBySubstring(List<String> strs, String substring) {\n        var result = new ArrayList<String>();\n        for (String s : strs) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sumProduct(List<Integer> numbers) {\n        int nSum = 0;\n        int nProduct = 1;\n        for (int n : numbers) {\n            nSum += n;\n            nProduct *= n;\n        }\n        return new ArrayList<Integer>(Arrays.asList(nSum, nProduct));\n    }\n}\n",
            "class Global {\n    public static List<Integer> rollingMax(List<Integer> numbers) {\n        var maxSoFar = Integer.MIN_VALUE;\n        var result = new ArrayList<Integer>();\n        for (Integer num : numbers) {\n            maxSoFar = Math.max(maxSoFar, num);\n            result.add(maxSoFar);\n        }\n        return result;\n    }\n}\n",
            "public class Global {\n    public static String makePalindrome(String s) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        String reversed = new StringBuilder(s).reverse().toString();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == reversed.charAt(i)) {\n                continue;\n            }\n            return s.substring(0, i) + reversed + s.substring(i);\n        }\n        return s + reversed;\n    }\n}\n",
            "public class Global {\n    public static String stringXor(String a, String b) {\n        if (a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Strings must be of equal length\");\n        }\n        var result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i) ^ b.charAt(i)).toString();\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static Optional<String> longest(List<String> strs) {\n        if (strs == null || strs.size() == 0) {\n            return Optional.empty();\n        }\n        String longest_s = strs.get(0);\n        for (int i = 1; i < strs.size(); i++) {\n            String s = strs.get(i);\n            if (s.length() > longest_s.length()) {\n                longest_s = s;\n            }\n        }\n        return Optional.of(longest_s);\n    }\n}\n",
            "public class Global {\n    public static int greatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}\n",
            "public class Global {\n    public static List<String> allPrefixes(String s) {\n        var prefixes = new ArrayList<String>();\n        for (int i = 0; i < s.length(); i++) {\n            prefixes.add(s.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "public class Global {\n    public static String stringSequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i).append(\" \");\n        }\n        return sb.toString();\n    }\n}\n",
            "class Global {\n    public static int countDistinctCharacters(String s) {\n        Set<Character> set = new HashSet<Character>();\n        for (char c : s.toCharArray()) {\n            set.add(c);\n        }\n        return set.size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseMusic(String musicString) {\n        var durations = new HashMap<>();\n        durations.put(\"o\", 4);\n        durations.put(\"o|\", 2);\n        durations.put(\".|\", 1);\n        var notes = musicString.split(\" \");\n        var result = new ArrayList<Integer>();\n        for (String note : notes) {\n            result.add(durations.get(note));\n        }\n        return result;\n    }\n}\n",
            "public class Global {\n    public static int howManyTimes(String s, String substring) {\n        int times = 0;\n        for (int i = 0; i < s.length() - substring.length() + 1; i++) {\n            if (s.substring(i, i + substring.length()).equals(substring)) {\n                times++;\n            }\n        }\n        return times;\n    }\n}\n",
            "public static String sortNumbers(String numbers) {\n    Map<String, Integer> numDict = new HashMap<>();\n    numDict.put(\"zero\", 0);\n    numDict.put(\"one\", 1);\n    numDict.put(\"two\", 2);\n    numDict.put(\"three\", 3);\n    numDict.put(\"four\", 4);\n    numDict.put(\"five\", 5);\n    numDict.put(\"six\", 6);\n    numDict.put(\"seven\", 7);\n    numDict.put(\"eight\", 8);\n    numDict.put(\"nine\", 9);\n    String[] numList = numbers.split(\" \");\n    List<String> sortedList = new ArrayList<>(Arrays.asList(numList));\n    Collections.sort(sortedList, (a, b) -> numDict.get(b) - numDict.get(a));\n    return String.join(\" \", sortedList);\n}\n",
            "class Global {\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        var sortedNumbers = new ArrayList<Double>(numbers);\n        sortedNumbers.sort(new Comparator<Double>() {\n            @Override\n            public int compare(Double num1, Double num2) {\n                return Double.compare(num1, num2);\n            }\n        });\n        var minDiff = Double.POSITIVE_INFINITY;\n        var closestPair = new ArrayList<Double>();\n        for (int i = 1; i < sortedNumbers.size(); i++) {\n            double diff = Math.abs(sortedNumbers.get(i) - sortedNumbers.get(i - 1));\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = new ArrayList<Double>();\n                closestPair.add(sortedNumbers.get(i - 1));\n                closestPair.add(sortedNumbers.get(i));\n            }\n        }\n        return closestPair;\n    }\n}\n",
            "class Global {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        double minNum = Double.MAX_VALUE;\n        double maxNum = Double.MIN_VALUE;\n        for (double num : numbers) {\n            minNum = Math.min(minNum, num);\n            maxNum = Math.max(maxNum, num);\n        }\n        if (minNum == maxNum) {\n            return new ArrayList<Double>(numbers.stream().mapToDouble(Double::doubleValue).toArray());\n        }\n        double range = maxNum - minNum;\n        return numbers.stream()\n                .mapToDouble(num -> (num - minNum) / range)\n                .mapToDouble(num -> num * 2 - 1)\n                .toArray();\n    }\n}\n",
            "class Global {\n    public static List<Integer> filterIntegers(List<Object> values) {\n        var result = new ArrayList<Integer>();\n        for (Object x : values) {\n            if (x instanceof Integer) {\n                result.add(((Integer) x).intValue());\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int strLength(String s) {\n        return s.length();\n    }\n}\n",
            "public class Global {\n    public static int largestDivisor(int n) {\n        int largest = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest = n / i;\n            }\n        }\n        return largest;\n    }\n}\n",
            "class Global {\n    public static List<Integer> factorize(int n) {\n        var factors = new ArrayList<Integer>();\n        for (int divisor = 2; divisor <= n; divisor++) {\n            while (n % divisor == 0) {\n                factors.add(divisor);\n                n /= divisor;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static List<Integer> removeDuplicates(List<Integer> numbers) {\n        var counts = new HashMap<Integer, Integer>();\n        for (int num : numbers) {\n            counts.put(num, counts.getOrDefault(num, 0) + 1);\n        }\n        var res = new ArrayList<Integer>();\n        for (int num : numbers) {\n            if (counts.get(num) == 1) {\n                res.add(num);\n            }\n        }\n        return res;\n    }\n}\n",
            "public class Global {\n    public static String flipCase(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n                } else {\n                    sb.append(Character.toUpperCase(c));\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}\n",
            "class Global {\n    public static String concatenate(List<String> strs) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strs) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}\n",
            "class Global {\n    public static List<String> filterByPrefix(List<String> strs, String prefixStr) {\n        return strs.stream()\n                .filter(s -> s.startsWith(prefixStr))\n                .collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<Integer> getPositive(List<Integer> l) {\n        var result = new ArrayList<Integer>();\n        for (Integer num : l) {\n            if (num > 0) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static double poly(List<Integer> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.size(); i++) {\n            res += xs.get(i) * Math.pow(x, i);\n        }\n        return res;\n    }\n    public static double findZero(List<Integer> xs) {\n        double x1 = 1.0;\n        double x2 = -1.0;\n        while (poly(xs, x1) * poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (poly(xs, mid) == 0) {\n                return mid;\n            } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortThird(List<Integer> l) {\n        List<Integer> sortedThird = new ArrayList<Integer>(Collections.reverseOrder());\n        sortedThird.addAll(l.subList(0, l.size() // 3));\n        sortedThird.sort(Collections.reverseOrder());\n        var result = new ArrayList<Integer>(l.size());\n        for (int i = 0, j = 0, k = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(sortedThird.get(j++));\n            } else if (i % 3 == 1) {\n                result.add(l.get(k++));\n            } else {\n                result.add(sortedThird.get(j++));\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> listUnique(List<Integer> l) {\n        var result = new ArrayList<Integer>();\n        var set = new HashSet<Integer>(l);\n        for (int i : set) {\n            result.add(i);\n        }\n        return Collections.sort(result);\n    }\n}\n",
            "class Global {\n    public static int maxElement(List<Integer> l) {\n        if (l == null || l.size() == 0) {\n            return 0;\n        }\n        return l.stream().mapToInt(Integer::intValue).max();\n    }\n}\n",
            "public class Global {\n    public static int fizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += i.toString().contains(\"7\");\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortEven(List<Integer> l) {\n        List<Integer> sortedEven = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                sortedEven.add(l.get(i));\n            }\n        }\n        sortedEven = sorted(sortedEven);\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 != 0) {\n                result.add(l.get(i));\n            }\n            else {\n                result.add(sortedEven.get(i / 2));\n            }\n        }\n        return result;\n    }\n}\n",
            "public class Global {\n    public static String encodeCyclic(String s) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (i + 2 < s.length()) {\n                result.append(s.charAt(i + 1));\n                result.append(s.charAt(i + 2));\n                result.append(s.charAt(i));\n            } else {\n                result.append(s.substring(i));\n            }\n        }\n        return result.toString();\n    }\n    public static String decodeCyclic(String s) {\n        return encodeCyclic(encodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static int isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static int primeFib(int n) {\n        int[] f = {0, 1};\n        int cnt = 0;\n        while (cnt < n) {\n            int[] next = {f[1], f[0] + f[1]};\n            if (isPrime(next[1])) {\n                cnt++;\n            }\n            f = next;\n        }\n        return f[1];\n    }\n}\n",
            "class Global {\n    public static boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "public class Global {\n    public static int carRaceCollision(int n) {\n        return n * n;\n    }\n}\n",
            "class Global {\n    public static List<Integer> incrList(List<Integer> l) {\n        var result = new ArrayList<Integer>();\n        for (int i : l) {\n            result.add(i + 1);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean pairsSumToZero(List<Integer> l) {\n        var seen = new HashSet<Integer>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}\n",
            "public class Global {\n    public static String changeBase(int x, int bas) {\n        if (x == 0) {\n            return \"0\";\n        }\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            sb.append(x % bas);\n            x /= bas;\n        }\n        return sb.reverse().toString();\n    }\n}\n",
            "public class Global {\n    public static double triangleArea(int a, int h) {\n        return (double) a * h / 2;\n    }\n}\n",
            "class Global {\n    public static int fib4(int n) {\n        int[] fib = {0, 0, 2, 0};\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = sum(fib);\n        }\n        return fib[n % 4];\n    }\n    public static int sum(int[] fib) {\n        int sum = 0;\n        for (int num : fib) {\n            sum += num;\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static double median(List<Double> l) {\n        var sl = new ArrayList<Double>(l);\n        sl.sort(null);\n        if (l.size() % 2 != 0) {\n            return sl.get(l.size() / 2);\n        } else {\n            return (sl.get(l.size() / 2) + sl.get(l.size() / 2 - 1)) / 2.0;\n        }\n    }\n}\n",
            "public static boolean isPalindrome(String txt) {\n    int i = 0, j = txt.length() - 1;\n    while (i < j) {\n        while (i < j && !Character.isAlphannumeric(txt.charAt(i))) i++;\n        while (i < j && !Character.isAlphannumeric(txt.charAt(j))) j--;\n        if (i < j && Character.toLowerCase(txt.charAt(i)) != Character.toLowerCase(txt.charAt(j))) return false;\n        i++;\n        j--;\n    }\n    return true;\n}\n",
            "public class Global {\n    public static int modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "public class Global {\n    public static String encodeShift(String s) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (Character.isLetter(ch)) {\n                char shifted = (char) ((ch + 5) % 26 + 'a');\n                result.append(shifted);\n            } else {\n                result.append(ch);\n            }\n        }\n        return result.toString();\n    }\n    public static String decodeShift(String s) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (Character.isLetter(ch)) {\n                char shifted = (char) ((ch + 21) % 26 + 'a');\n                result.append(shifted);\n            } else {\n                result.append(ch);\n            }\n        }\n        return result.toString();\n    }\n}\n",
            "public class Global {\n    public static String removeVowels(String txt) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < txt.length(); i++) {\n            char c = txt.charAt(i);\n            if (!vowels.contains(c)) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}\n",
            "class Global {\n    public static boolean belowThreshold(List<Integer> l, int t) {\n        for (int x : l) {\n            if (x >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static boolean sameChars(String s0, String s1) {\n        Set<Character> set0 = new HashSet<Character>();\n        Set<Character> set1 = new HashSet<Character>();\n        for (int i = 0; i < s0.length(); i++) {\n            set0.add(s0.charAt(i));\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            set1.add(s1.charAt(i));\n        }\n        return set0.equals(set1);\n    }\n}\n",
            "public class Global {\n    public static int fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                depth++;\n            } else if (brackets.charAt(i) == '>') {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "public class Global {\n    public static boolean monotonic(List<Integer> l) {\n        var diff = new ArrayList<Integer>();\n        for (int i = 0; i < l.size() - 1; i++) {\n            diff.add(l.get(i + 1) - l.get(i));\n        }\n        return all(x <= 0 for x in diff.list()) || all(x >= 0 for x in diff.list());\n    }\n}\n",
            "class Global {\n    public static List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        var s1 = new HashSet<Integer>(l1);\n        var s2 = new HashSet<Integer>(l2);\n        var result = new ArrayList<Integer>();\n        for (Integer e : s1) {\n            if (s2.contains(e)) {\n                result.add(e);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n",
            "public class Global {\n    public static int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int sumToN(int n) {\n        return n * (n + 1) / 2;\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        var depth = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                depth++;\n            } else if (brackets.charAt(i) == ')') {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> derivative(List<Integer> xs) {\n        var result = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n        int a = 0, b = 0, c = 1;\n        while (n > 2) {\n            a = b;\n            b = c;\n            c = a + b + c;\n            n--;\n        }\n        return c;\n    }\n}\n",
            "public class Global {\n    public static int vowelsCount(String s) {\n        String vowels = \"aeiou\";\n        int cnt = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (vowels.indexOf(c) != -1) {\n                cnt++;\n            } else if (i == s.length() - 1 && vowels.indexOf(c) == -1) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "public class Global {\n    public static String circularShift(int x, int shift) {\n        String xStr = Integer.toString(x);\n        if (shift > xStr.length()) {\n            return xStr.substring(xStr.length() - 1);\n        } else {\n            return new StringBuilder(xStr).deleteCharAt(0).appendStrings(xStr.substring(shift)).toString();\n        }\n    }\n}\n",
            "class Global {\n    public static int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int)c;\n            }\n        }\n        return sum;\n    }\n}\n",
            "public class Global {\n    public static int fruitDistribution(String s, int n) {\n        String[] words = s.split(\" \");\n        int apples = Integer.parseInt(words[words.length - 4]);\n        int oranges = Integer.parseInt(words[words.length - 2]);\n        return n - apples - oranges;\n    }\n}\n",
            "class Global {\n    public static List<Integer> pluck(List<Integer> arr) {\n        var evens = arr.stream().filter(n -> n % 2 == 0).toArray(Integer[]::new);\n        if (evens.length == 0) {\n            return new ArrayList<Integer>();\n        }\n        int minEven = Arrays.stream(evens).min();\n        int index = arr.indexOf(minEven);\n        return new ArrayList<Integer>(new int[]{minEven, index});\n    }\n}\n",
            "class Global {\n    public static int search(List<Integer> lst) {\n        var freqs = new HashMap<Integer, Integer>();\n        for (int n : lst) {\n            freqs.put(n, freqs.getOrDefault(n, 0) + 1);\n        }\n        var goodVals = new ArrayList<Integer>();\n        for (int k : freqs.keySet()) {\n            if (freqs.get(k) >= k) {\n                goodVals.add(k);\n            }\n        }\n        return goodVals.isEmpty() ? -1 : Collections.max(goodVals);\n    }\n}\n",
            "class Global {\n    public static List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> sl = new ArrayList<Integer>(lst);\n        Collections.sort(sl);\n        List<Integer> result = new ArrayList<Integer>();\n        int left = 0;\n        int right = sl.size() - 1;\n        while (left <= right) {\n            result.add(sl.get(left));\n            left++;\n            if (left <= right) {\n                result.add(sl.get(right));\n                right--;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (double) (a + b + c) / 2.0;\n            return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}\n",
            "public class Global {\n    public static boolean willItFly(List<Integer> q, int w) {\n        if (q == null || q.size() == 0) {\n            return false;\n        }\n        int total = 0;\n        boolean isPalin = true;\n        for (int i = 0; i < q.size(); i++) {\n            total += q.get(i);\n            for (int j = i + 1; j < q.size(); j++) {\n                if (q.get(i) == q.get(j)) {\n                    isPalin = false;\n                }\n            }\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i) != q.get(q.size() - i - 1)) {\n                isPalin = false;\n            }\n        }\n        return isPalin && total <= w;\n    }\n}\n",
            "class Global {\n    public static int smallestChange(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (arr.get(i) != arr.get(arr.size() - i - 1)) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int cnt1 = 0;\n        int cnt2 = 0;\n        for (String s : lst1) {\n            cnt1 += s.length();\n        }\n        for (String s : lst2) {\n            cnt2 += s.length();\n        }\n        return lst1.size() <= lst2.size() ? lst1 : lst2;\n    }\n}\n",
            "class Global {\n    public static boolean isMultiplyPrime(int a) {\n        if (a < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            if (a % i == 0) {\n                int cnt = 0;\n                while (a % i == 0) {\n                    cnt++;\n                    a /= i;\n                }\n                if (cnt == 3) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static boolean isSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "public class Global {\n    public static boolean isCube(int a) {\n        a = Math.abs(a);\n        int root = (int) Math.pow(a, 1.0 / 3.0);\n        return root * root * root == a;\n    }\n}\n",
            "public static int hexKey(String num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        char c = num.charAt(i);\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "public class Global {\n    public static String decimalToBinary(int dec) {\n        String binary = Integer.toBinaryString(dec);\n        return \"db\" + binary + \"db\";\n    }\n}\n",
            "public class Global {\n    public static boolean isHappy(String s) {\n        // Implementation here\n    }\n}\n",
            "public static List<String> numericalLetterGrade(List<Double> grades) {\n    List<String> result = new ArrayList<String>();\n    for (Double g : grades) {\n        String letterGrade;\n        if (g == 4.0) {\n            letterGrade = \"A+\";\n        } else if (g > 3.7) {\n            letterGrade = \"A\";\n        } else if (g > 3.3) {\n            letterGrade = \"A-\";\n        } else if (g > 3.0) {\n            letterGrade = \"B+\";\n        } else if (g > 2.7) {\n            letterGrade = \"B\";\n        } else if (g > 2.3) {\n            letterGrade = \"B-\";\n        } else if (g > 2.0) {\n            letterGrade = \"C+\";\n        } else if (g > 1.7) {\n            letterGrade = \"C\";\n        } else if (g > 1.3) {\n            letterGrade = \"C-\";\n        } else if (g > 1.0) {\n            letterGrade = \"D+\";\n        } else if (g > 0.7) {\n            letterGrade = \"D\";\n        } else if (g > 0.0) {\n            letterGrade = \"D-\";\n        } else {\n            letterGrade = \"E\";\n        }\n        result.add(letterGrade);\n    }\n    return result;\n}\n",
            "class Global {\n    public static boolean primeLength(String s) {\n        int length = s.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "public class Global {\n    public static int startsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 2 * 9 * (10 * n - 1);\n    }\n}\n",
            "public class Global {\n    public static String solve(int n) {\n        int digitsSum = 0;\n        for (char c : Integer.toString(n).toCharArray()) {\n            digitsSum += Integer.parseInt(c.toString());\n        }\n        return Integer.toBinaryString(digitsSum);\n    }\n}\n",
            "class Global {\n    public static int add(List<Integer> lst) {\n        var result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "public class Global {\n    public static String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] antiWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            antiWords[i] = \"\".join(Arrays.sort(words[i].toCharArray()));\n        }\n        return String.join(\" \", antiWords);\n    }\n}\n",
            "public static List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n    List<List<Integer>> result = new ArrayList<List<Integer>>();\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst.get(i).size(); j++) {\n            if (lst.get(i).get(j) == x) {\n                result.add(new ArrayList<Integer>());\n                result.get(result.size() - 1).add(i);\n                result.get(result.size() - 1).add(j);\n            }\n        }\n    }\n    if (result.size() == 0) {\n        return null;\n    }\n    return sorted(result, (a, b) -> {\n        if (a.get(0) == b.get(0)) {\n            return b.get(1) - a.get(1);\n        } else {\n            return a.get(0) - b.get(0);\n        }\n    });\n}\n",
            "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        if (arr == null || arr.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        if ((arr.get(0) + arr.get(arr.size() - 1)) % 2 == 0) {\n            return Collections.reverse(Collections.sort(arr));\n        } else {\n            return Collections.sort(arr);\n        }\n    }\n}\n",
            "public static String encrypt(String s) {\n    char[] result = new char[s.length()];\n    for (int i = 0; i < s.length(); i++) {\n        char ch = s.charAt(i);\n        int shifted = ch + 4;\n        if (shifted > 'z') {\n            shifted -= 26;\n        }\n        result[i] = (char) shifted;\n    }\n    return String.valueOf(result);\n}\n",
            "class Global {\n    public static Optional<Integer> nextSmallest(List<Integer> lst) {\n        var sl = new ArrayList<Integer>(set(lst.toArray(new Integer[0])));\n        sl.sort();\n        if (sl.size() < 2) {\n            return null;\n        }\n        return Optional.of(sl.get(1));\n    }\n}\n",
            "class Global {\n    public static int isBored(String s) {\n        String[] sentences = re.split(r\"[.!?]\\s*\", s);\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.length() >= 2 && sentence.startsWith(\"I \")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "public class Global {\n    public static boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int xInt = (Integer) x;\n            int yInt = (Integer) y;\n            int zInt = (Integer) z;\n            if (xInt + yInt == zInt) {\n                return true;\n            }\n            if (xInt + zInt == yInt) {\n                return true;\n            }\n            if (yInt + zInt == xInt) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "public static String encode(String message) {\n    String vowels = \"aeiouAEIOU\";\n    StringBuilder result = new StringBuilder();\n    for (int i = 0; i < message.length(); i++) {\n        char ch = message.charAt(i);\n        if (Character.isLetter(ch)) {\n            char ch1 = Character.isUpperCase(ch) ? (char) (ch + 2) : (char) (ch - 2);\n            if (vowels.indexOf(Character.toLowerCase(ch1)) != -1) {\n                ch1 = (char) Math.min(ch1, 'z');\n            } else {\n                ch1 = (char) Math.max(ch1, 'a');\n            }\n            result.append(ch1);\n        } else {\n            result.append(ch);\n        }\n    }\n    return result.toString();\n}\n",
            "class Global {\n    public static int skjkasdkd(List<Integer> lst) {\n        var primes = lst.stream()\n                .filter(n -> isPrime(n))\n                .toArray(Int[]::new);\n        if (primes.length == 0) {\n            return 0;\n        }\n        var largest = primes.stream().mapToInt(Integer::intValue).max();\n        var largestStr = String.valueOf(largest);\n        return largestStr.chars().mapToInt(c -> c - '0').toArray()[0];\n    }\n    private static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean checkDictCase(Map<String, String> d) {\n        if (d == null || d.size() == 0) {\n            return false;\n        }\n        for (String key : d.keySet()) {\n            if (key.isLowerCase() || key.isUpperCase()) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static List<Integer> countUpTo(int n) {\n        var primes = new ArrayList<Integer>();\n        for (int num = 2; num < n; num++) {\n            if (allPrimes(num, primes)) {\n                primes.add(num);\n            }\n        }\n        return primes;\n    }\n    private static boolean allPrimes(int num, List<Integer> primes) {\n        for (int p : primes) {\n            if (num % p == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int multiply(int a, int b) {\n        int absA = Math.abs(a);\n        int absB = Math.abs(b);\n        return (absA % 10) * (absB % 10);\n    }\n}\n",
            "public class Global {\n    public static int countUpper(String s) {\n        String vowels = \"AEIOU\";\n        return s.substring(0, ((s.length() - 1) / 2)).matches(\"[\" + vowels + \"]*\");\n    }\n}\n",
            "class Global {\n    public static int closestInteger(String value) {\n        double num = Double.parseDouble(value);\n        if (num >= 0) {\n            return (int) Math.round(num);\n        } else {\n            return (int) Math.round(num - 0.5);\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> wordsString(String s) {\n        return Arrays.asList(s.split(\", \"));\n    }\n}\n",
            "public class Global {\n    public static int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x != y) {\n            return y - 1;\n        }\n        return -1;\n    }\n}\n",
            "class Global {\n    public static Optional<String> roundedAvg(int n, int m) {\n        if (n > m) {\n            return Optional.none();\n        }\n        BigDecimal rAvg = new BigDecimal(m + n).setScale(0, RoundingMode.CEILING).toInt();\n        return Optional.of(Integer.toBinaryString(rAvg));\n    }\n}\n",
            "class Global {\n    public static List<Integer> uniqueDigits(List<Integer> x) {\n        var result = new ArrayList<Integer>();\n        for (int num : x) {\n            if (allDigitsOdd(num)) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n    private static boolean allDigitsOdd(int num) {\n        var digits = String.valueOf(num).split(\"\");\n        for (digit : digits) {\n            if (digit.charAt(0) % 2 != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static List<String> byLength(List<Integer> arr) {\n        var digitNames = new ArrayList<String>();\n        for (int i = 0; i < 9; i++) {\n            digitNames.add(i + 1 + \"\");\n        }\n        var sortedArr = new ArrayList<Integer>();\n        for (Integer i : arr) {\n            if (1 <= i && i <= 9) {\n                sortedArr.add(i);\n            }\n        }\n        sortedArr = new ArrayList<Integer>(sortedArr);\n        Collections.sort(sortedArr, new Comparator<Integer>() {\n            public int compare(Integer i1, Integer i2) {\n                return i2.toString().length() - i1.toString().length();\n            }\n        });\n        var result = new ArrayList<String>();\n        for (Integer i : sortedArr) {\n            result.add(digitNames[i-1]);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> f(int n) {\n        var nums = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            nums.add(i);\n        }\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n            if (i % 2 != 0) {\n                result.add(sum(nums.subList(0, i + 1)));\n            } else {\n                result.add(reduce(nums.subList(0, i + 1), 1));\n            }\n        }\n        return result;\n    }\n    public static int sum(List<Integer> nums) {\n        var sum = 0;\n        for (int num : nums) {\n            sum += num;\n        }\n        return sum;\n    }\n    public static int reduce(List<Integer> nums, int init) {\n        return Stream.of(nums).reduce(init, (a, b) -> a * b);\n    }\n}\n",
            "class Global {\n    public static List<Integer> evenOddPalindrome(int n) {\n        var cnt = new ArrayList<>(2);\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                cnt.set(i % 2, cnt.get(i % 2) + 1);\n            }\n        }\n        return cnt;\n    }\n    private static boolean isPalindrome(int num) {\n        var sb = new StringBuilder(num).reverse().toString();\n        return sb.equalsIgnoreCase(String.valueOf(num));\n    }\n}\n",
            "public static int countNums(List<Integer> arr) {\n    return arr.stream()\n        .filter(n -> digitsSum(n) > 0)\n        .count();\n}\nprivate static int digitsSum(int n) {\n    String nStr = String.valueOf(n);\n    if (n >= 0) {\n        return nStr.chars().stream().mapToInt(Char::charValue).sum();\n    } else {\n        StringBuilder sb = new StringBuilder(nStr.substring(1));\n        sb.append(digitsSum(abs(n)));\n        return Integer.parseInt(sb);\n    }\n}\n",
            "class Global {\n    public static boolean moveOneBall(List<Integer> arr) {\n        if (arr == null || arr.size() == 0) {\n            return false;\n        }\n        Arrays.sort(arr);\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                return false;\n            }\n        }\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static String canExchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCnt = 0;\n        for (Integer num : lst1) {\n            if (num % 2 != 0) {\n                oddCnt++;\n            }\n        }\n        int evenCnt = 0;\n        for (Integer num : lst2) {\n            if (num % 2 == 0) {\n                evenCnt++;\n            }\n        }\n        return evenCnt >= oddCnt ? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static Map<String, Integer> histogram(String test) {\n        var freq = new HashMap<String, Integer>();\n        var words = test.split(\"\\\\s+\");\n        for (String w : words) {\n            if (w.length() > 0) {\n                freq.put(w, freq.getOrDefault(w, 0) + 1);\n            }\n        }\n        var result = new HashMap<String, Integer>();\n        if (freq.size() > 0) {\n            var maxFreq = freq.values().stream().max().getAsLong();\n            for (Map.Entry<String, Integer> entry : freq.entrySet()) {\n                if (entry.getValue() == maxFreq) {\n                    result.put(entry.getKey(), entry.getValue());\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "public class Global {\n    public static List<String> reverseDelete(String s, String c) {\n        String s1 = \"\";\n        for (char ch : s.toCharArray()) {\n            if (!c.contains(ch + \"\")) {\n                s1 += ch;\n            }\n        }\n        return Arrays.asList(s1, isPalindrome(s1) ? \"yes\" : \"no\");\n    }\n    public static boolean isPalindrome(String s) {\n        int n = s.length();\n        for (int i = 0, j = n - 1; i < j; i++, j--) {\n            if (s.charAt(i) != s.charAt(j)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static List<String> oddCount(List<String> lst) {\n        var result = new ArrayList<String>();\n        for (String s : lst) {\n            var n = 0;\n            for (char c : s.toCharArray()) {\n                if (c % 2 == 1) {\n                    n++;\n                }\n            }\n            result.add(\"the number of odd elements in the string \" + n + \" in the input.\");\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int curSum = 0;\n        for (int n : nums) {\n            curSum = Math.min(curSum + n, 0);\n            minSum = Math.min(curSum, minSum);\n        }\n        if (minSum == 0) {\n            minSum = nums.get(0);\n        }\n        return minSum;\n    }\n}\n",
            "class Global {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        var result = 0;\n        for (List<Integer> row : grid) {\n            var total = 0;\n            for (int num : row) {\n                total += num;\n            }\n            result += Math.ceil(total / capacity);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        // Implementation here\n    }\n}\n",
            "class Global {\n    public static List<String> selectWords(String s, int n) {\n        String consonants = \"bcdfghjklmnpqrstvwxyz\";\n        List<String> words = Arrays.asList(\"apple\", \"banana\", \"carrot\", \"donut\", \"elephant\", \"frog\", \"grape\", \"horse\", \"ice cream\", \"jacket\", \"jelly\", \"kangaroo\", \"lemon\", \"orange\", \"pear\", \"quilt\", \"rabbit\", \"snake\", \"tiger\", \"umbrella\", \"violin\", \"watermelon\", \"xylophone\", \"yogurt\", \"zebra\");\n        List<String> result = new ArrayList<String>();\n        for (String w : words) {\n            int count = 0;\n            for (char c : w.toCharArray()) {\n                if (consonants.indexOf(c) != -1) {\n                    count++;\n                }\n            }\n            if (count == n) {\n                result.add(w);\n            }\n        }\n        return result;\n    }\n}\n",
            "public class Global {\n    public static String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        for (int i = len(word) - 2; i > 0; i--) {\n            if (word.charAt(i) in vowels && word.charAt(i - 1) not in vowels && word.charAt(i + 1) not in vowels) {\n                return word.charAt(i);\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static String matchParens(List<String> lst) {\n        String s1 = lst.get(0) + lst.get(1);\n        String s2 = lst.get(1) + lst.get(0);\n        if (check(s1) || check(s2)) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n    private static boolean check(String s) {\n        int depth = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(') {\n                depth++;\n            } else {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return new ArrayList<Integer>();\n        }\n        return Arrays.stream(arr).sorted().skip(arr.size() - k).collect(Collectors.toList());\n    }\n}\n",
            "public class Global {\n    public static int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static int addElements(List<Integer> arr, int k) {\n        var result = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) < 100) {\n                result += arr.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> getOddCollatz(int n) {\n        var collatz = new ArrayList<Integer>();\n        collatz.add(1);\n        while (n != 1) {\n            if (n % 2 != 0) {\n                collatz.add(n);\n                n = 3 * n + 1;\n            } else {\n                n = n / 2;\n            }\n        }\n        return Collections.sort(collatz);\n    }\n}\n",
            "public static boolean validDate(String date) {\n    if (date == null || date.length() != 10) {\n        return false;\n    }\n    int m = Integer.parseInt(date.substring(0, 2));\n    int d = Integer.parseInt(date.substring(6, 8));\n    if (m < 1 || m > 12) {\n        return false;\n    }\n    if (m == 2) {\n        if (d < 1 || d > 29) {\n            return false;\n        }\n    } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n        if (d < 1 || d > 30) {\n            return false;\n        }\n    } else {\n        if (d < 1 || d > 31) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "public static List<String> splitWords(String txt) {\n    if (txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for (char c : txt.toCharArray()) {\n            if (c.isLowerCase() && (ord(c) % 2) == 0) {\n                count++;\n            }\n        }\n        return new ArrayList<String>(Arrays.asList(String.valueOf(count)));\n    }\n}\n",
            "class Global {\n    public static boolean isSorted(List<Integer> lst) {\n        if (lst == null || lst.size() < 2) {\n            return true;\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i-1) > lst.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        if (length <= 0) {\n            return \"NO\";\n        }\n        return isPrime(length) ? \"YES\" : \"NO\";\n    }\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr == null || arr.size() == 0) {\n            return null;\n        }\n        if (arr.stream().filter(n -> n == 0).findFirst().isPresent()) {\n            return 0;\n        }\n        int sign = arr.stream().mapToInt(n -> n < 0 ? -1 : 1).sum();\n        if (sign == 0) {\n            return null;\n        }\n        return Optional.of(sign * arr.stream().mapToInt(n -> Math.abs(n)).sum());\n    }\n}\n",
            "class Global {\n    public static List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int minVal = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    int[] temp = new int[4];\n                    if (i != 0) {\n                        temp[0] = grid.get(i - 1).get(j);\n                    }\n                    if (j != 0) {\n                        temp[1] = grid.get(i).get(j - 1);\n                    }\n                    if (i != n - 1) {\n                        temp[2] = grid.get(i + 1).get(j);\n                    }\n                    if (j != n - 1) {\n                        temp[3] = grid.get(i).get(j + 1);\n                    }\n                    minVal = Math.min(temp);\n                }\n            }\n        }\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < k; i++) {\n            result.add(i % 2 == 0 ? 1 : minVal);\n        }\n        return result;\n    }\n}\n",
            "public class Global {\n    public static List<Integer> tri(int n) {\n        if (n == 0) {\n            return new ArrayList<>(Arrays.asList(1));\n        }\n        var seq = new ArrayList<>(Arrays.asList(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                seq.add((int) Math.round(i / 2 + 1));\n            } else {\n                int prev = seq.get(i - 1);\n                int prevPrev = seq.get(i - 2);\n                seq.add((int) Math.round(prev + prevPrev + (i + 3) / 2));\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int digits(int n) {\n        if (n < 0) {\n            n = -n;\n        }\n        int result = 0;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                result = result * digit;\n            }\n            n = n / 10;\n        }\n        if (n % 2 == 1) {\n            result = 0;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isNested(String s) {\n        int[] openIdx = new int[s.length()];\n        int[] closeIdx = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '[') {\n                openIdx[i] = 1;\n            }\n            if (s.charAt(i) == ']') {\n                closeIdx[i] = 1;\n            }\n        }\n        int[] closeIdxReverse = new int[closeIdx.length];\n        for (int i = closeIdx.length - 1; i >= 0; i--) {\n            closeIdxReverse[i] = closeIdx[i];\n        }\n        int cnt = 0;\n        int i = 0;\n        int l = closeIdx.length;\n        for (int idx : openIdx) {\n            if (i < l && idx < closeIdxReverse[i]) {\n                cnt++;\n                i++;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Double> lst) {\n        var result = 0;\n        for (Double n : lst) {\n            result += Math.pow(Math.ceil(n), 2);\n        }\n        return result;\n    }\n}\n",
            "public class Global {\n    public static boolean checkIfLastCharIsALetter(String txt) {\n        if (txt == null || txt.length() == 0) {\n            return false;\n        }\n        int lastIndex = txt.lastIndexOf(' ') + 1;\n        if (lastIndex == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(lastIndex);\n        return lastChar >= 'A' && lastChar <= 'Z';\n    }\n}\n",
            "class Global {\n    public static int canArrange(List<Integer> arr) {\n        if (arr == null || arr.size() <= 1) {\n            return -1;\n        }\n        int[] idx = new int[arr.size() - 1];\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                idx[i - 1] = i;\n            }\n        }\n        return Arrays.stream(idx).max().getAsLong();\n    }\n}\n",
            "class Global {\n    public static List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst) {\n        var neg = lst.stream().filter(i -> i < 0).collect(Collectors.toList());\n        var pos = lst.stream().filter(i -> i > 0).collect(Collectors.toList());\n        var maxNeg = neg.size() == 0 ? null : Collections.max(neg);\n        var minPos = pos.size() == 0 ? null : Collections.min(pos);\n        return new ArrayList<>(Arrays.asList(Optional.of(maxNeg), Optional.of(minPos)));\n    }\n}\n",
            "class Global {\n    public static Optional<Double> compareOne(Object a, Object b) {\n        double a1 = anyToReal(a);\n        double b1 = anyToReal(b);\n        if (a1 == b1) {\n            return null;\n        } else if (a1 > b1) {\n            return a1;\n        } else {\n            return b1;\n        }\n    }\n    private static double anyToReal(Object o) {\n        if (o instanceof String) {\n            return Double.parseDouble(o.replaceAll(\",\", \".\"));\n        } else if (o instanceof Integer) {\n            return (double) o;\n        } else if (o instanceof Double) {\n            return o;\n        } else {\n            throw new RuntimeException(\"Type Error\");\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int specialFactorial(int n) {\n        int fact = 1;\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String fixSpaces(String txt) {\n        return txt.replaceAll(\"\\\\s{2,}\", \"-\").replaceAll(\"\\\\s\", \"_\");\n    }\n}\n",
            "public class Global {\n    public static String fileNameCheck(String fileName) {\n        String[] lst = fileName.split(\".\");\n        if (lst.length != 2 || !isSuffixValid(lst[1])) {\n            return \"No\";\n        }\n        if (lst[0].isEmpty() || !lst[0].charAt(0).isAlphabetic()) {\n            return \"No\";\n        }\n        if (lst[0].matches(\".*[0-9]{1,4}.*\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n    private static boolean isSuffixValid(String suffix) {\n        String lowerSuffix = suffix.toLowerCase();\n        return lowerSuffix.equals(\"txt\") || lowerSuffix.equals(\"exe\") || lowerSuffix.equals(\"dll\");\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Integer> lst) {\n        var result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result += Math.pow(lst.get(i), 2);\n            } else if (i % 4 == 0) {\n                result += Math.pow(lst.get(i), 3);\n            } else {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        return String.join(\" \", Arrays.asList(words).stream()\n                .filter(w -> isPrime(w.length()))\n                .map(w -> w.toString())\n                .toArray(String[]::new));\n    }\n    private static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "public class Global {\n    public static boolean simplify(String x, String n) {\n        String[] xs = x.split(\"/\");\n        String[] ns = n.split(\"/\");\n        int num = Integer.parseInt(xs[0]) * Integer.parseInt(ns[0]);\n        int den = Integer.parseInt(xs[1]) * Integer.parseInt(ns[1]);\n        return num % den == 0;\n    }\n}\n",
            "class Global {\n    public static int digitsSum(int n) {\n        String nStr = String.valueOf(n);\n        if (n >= 0) {\n            return IntStream.of(nStr).mapToInt(Integer::intValue).sum();\n        } else {\n            String s = nStr.substring(1);\n            int d2 = Integer.parseInt(s.substring(0, 1));\n            int d1 = Integer.parseInt(s.substring(1));\n            return d2 * 2 + digitsSum(abs(n));\n        }\n    }\n    public static List<Integer> orderByPoints(List<Integer> nums) {\n        return nums.stream().sorted((a, b) -> digitsSum(b) - digitsSum(a)).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int specialFilter(List<Integer> nums) {\n        String odds = \"13579\";\n        return nums.stream()\n                .filter(n -> n > 10 && n % 2 == 1 && String.charAt(n) - '0' < odds.indexOf(String.charAt(n)) + 1)\n                .count();\n    }\n}\n",
            "public class Global {\n    public static int getMaxTriples(int n) {\n        int[] c = new int[3];\n        for (int i = 1; i <= n; i++) {\n            int a = i * i - i + 1;\n            c[a % 3]++;\n        }\n        return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n    }\n}\n",
            "public class Global {\n    public static List<String> bf(String planet1, String planet2) {\n        String[] names = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        if (!contains(names, planet1) || !contains(names, planet2)) {\n            return new ArrayList<String>();\n        }\n        int l = indexOf(names, planet1);\n        int r = indexOf(names, planet2);\n        if (l > r) {\n            int temp = l;\n            l = r;\n            r = temp;\n        }\n        if (l == r) {\n            return new ArrayList<String>();\n        }\n        return subList(l + 1, r);\n    }\n    private static int indexOf(String[] names, String planet) {\n        for (int i = 0; i < names.length; i++) {\n            if (names[i].equals(planet)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    private static boolean contains(String[] names, String planet) {\n        for (String name : names) {\n            if (name.equals(planet)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<String> sortedListSum(List<String> lst) {\n        var result = new ArrayList<String>();\n        var temp = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            } else {\n                temp.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                int len1 = s1.length();\n                int len2 = s2.length();\n                if (len1 == len2) {\n                    return s1.compareTo(s2);\n                } else if (len1 < len2) {\n                    return -1;\n                } else {\n                    return 1;\n                }\n            }\n        });\n        Collections.sort(temp, new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                int len1 = s1.length();\n                int len2 = s2.length();\n                if (len1 == len2) {\n                    return s1.compareTo(s2);\n                } else if (len1 < len2) {\n                    return -1;\n                } else {\n                    return 1;\n                }\n            }\n        });\n        result.addAll(temp);\n        return result;\n    }\n}\n",
            "public class Global {\n    public static int xOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        int i;\n        for (i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int doubleTheDifference(List<Double> lst) {\n        var result = 0;\n        for (Double d : lst) {\n            if (d >= 0 && d % 2 == 1) {\n                result += Math.pow(d, 2);\n            }\n        }\n        return (int) result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}\n",
            "public class Global {\n    public static String strongestExtension(String className, List<String> extensions) {\n        String maxExt = extensions.get(0);\n        int maxS = Integer.parseInt(maxExt.substring(maxExt.indexOf(\".\") + 1));\n        for (int i = 1; i < extensions.size(); i++) {\n            String ext = extensions.get(i);\n            int s = countUppercase(ext);\n            if (s > maxS) {\n                maxS = s;\n                maxExt = ext;\n            }\n        }\n        return className + \".\" + maxExt;\n    }\n    private int countUppercase(String str) {\n        int count = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (Character.isUpperCase(str.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "public class Global {\n    public static boolean cycpatternCheck(String a, String b) {\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if (cycpatternCheck(a, b, i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static boolean cycpatternCheck(String a, String b, int index) {\n        String prefix = a.substring(0, index);\n        String suffix = a.substring(a.length() - index);\n        String pattern = b + suffix + b + prefix;\n        return pattern.matches(a);\n    }\n}\n",
            "class Global {\n    public static List<Integer> evenOddCount(int num) {\n        var ds = String.valueOf(Math.abs(num));\n        var even = ds.matcher(\"[02468]*\").group().length();\n        return new ArrayList<Integer>(Arrays.asList(even, ds.length() - even));\n    }\n}\n",
            "public class Global {\n    public static String intToMiniRoman(int num) {\n        StringBuilder sb = new StringBuilder();\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] numerals = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        for (int i = 0; i < values.length; i++) {\n            int count = num / values[i];\n            while (count > 0) {\n                sb.append(numerals[i]);\n                num -= values[i];\n                count--;\n            }\n        }\n        return sb.toString();\n    }\n}\n",
            "public class Global {\n    public static boolean rightAngleTriangle(int a, int b, int c) {\n        int s = sorted(a, b, c);\n        return s * s == a * a + b * b;\n    }\n    private static int sorted(int a, int b, int c) {\n        int[] arr = {a, b, c};\n        Arrays.sort(arr);\n        return arr[0];\n    }\n}\n",
            "class Global {\n    public static String findMax(List<String> words) {\n        var maxCnt = 0;\n        var maxW = \"\";\n        for (String w : words) {\n            var cnt = w.length();\n            if (cnt > maxCnt) {\n                maxCnt = cnt;\n                maxW = w;\n            }\n            else if (cnt == maxCnt) {\n                maxW = Math.min(maxW, w);\n            }\n        }\n        return maxW;\n    }\n}\n",
            "public class Global {\n    public static List<Integer> eat(int num, int need, int remaining) {\n        if (need <= remaining) {\n            return new ArrayList<Integer>() {{ add(num + need); add(remaining - need); }};\n        } else {\n            return new ArrayList<Integer>() {{ add(num + remaining); add(0); }};\n        }\n    }\n}\n",
            "class Global {\n    public static int doAlgebra(List<String> operators, List<Integer> operands) {\n        List<Integer> ops = new ArrayList<Integer>();\n        List<Integer> nums = new ArrayList<Integer>();\n        for (int i = 0; i < operators.size(); i++) {\n            if (operators.get(i) == \"**\") {\n                int right = nums.get(i + 1);\n                nums.remove(i + 1);\n                int left = nums.get(i - 1);\n                nums.remove(i - 1);\n                nums.add(left * right);\n            } else if (operators.get(i) == \"*\") {\n                int right = nums.get(i + 1);\n                nums.remove(i + 1);\n                int left = nums.get(i - 1);\n                nums.remove(i - 1);\n                nums.add(left * right);\n            } else if (operators.get(i) == \"//\") {\n                int right = nums.get(i + 1);\n                nums.remove(i + 1);\n                int left = nums.get(i - 1);\n                nums.remove(i - 1);\n                nums.add(left / right);\n            } else if (operators.get(i) == \"+\") {\n                int right = nums.get(i + 1);\n                nums.remove(i + 1);\n                int left = nums.get(i - 1);\n                nums.remove(i - 1);\n                nums.add(left + right);\n            } else if (operators.get(i) == \"-\") {\n                int right = nums.get(i + 1);\n                nums.remove(i + 1);\n                int left = nums.get(i - 1);\n                nums.remove(i - 1);\n                nums.add(left - right);\n            }\n        }\n        return nums.get(0);\n    }\n}\n",
            "public class Global {\n    public static String solve(String s) {\n        if (!hasAlpha(s)) {\n            return reverse(s);\n        }\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (!Character.isLetter(ch)) {\n                result.append(ch);\n            } else if (Character.isUpperCase(ch)) {\n                result.append(Character.toLowerCase(ch));\n            } else if (Character.isLowerCase(ch)) {\n                result.append(Character.toUpperCase(ch));\n            }\n        }\n        return result.toString();\n    }\n    private static boolean hasAlpha(String s) {\n        for (char ch : s.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    private static String reverse(String s) {\n        char[] chars = s.toCharArray();\n        int left = 0;\n        int right = chars.length - 1;\n        while (left < right) {\n            char temp = chars[left];\n            chars[left] = chars[right];\n            chars[right] = temp;\n            left++;\n            right--;\n        }\n        return new String(chars);\n    }\n}\n",
            "class Global {\n    public static Optional<String> stringToMd5(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return Optional.empty();\n        }\n        String md5Hex = java.security.MessageDigest.getInstance(\"SHA-1\").digestToString(txt.getBytes()).substring(0, 8);\n        return Optional.of(md5Hex);\n    }\n}\n",
            "class Global {\n    public static List<Integer> generateIntegers(int a, int b) {\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n        return Arrays.asList(2, lower, upper, 2 * lower, 2 * upper, (lower + upper) / 2, lower + 2, upper - 1, lower + upper);\n    }\n}\n"
        ],
        "javascript": [
            "export const hasCloseElements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {string} parenString\n * @returns {Array<string>}\n */\nexport const separateParenGroups = (parenString) => {\n    const groups = [];\n    const stk = [];\n    const currentGroup = \"\";\n    for (let i = 0; i < parenString.length; i++) {\n        const ch = parenString[i];\n        if (ch === \"(\") {\n            stk.push(ch);\n            currentGroup += ch;\n        } else if (ch === \")\") {\n            stk.pop();\n            currentGroup += ch;\n            if (!stk.length) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "export const truncateNumber = (num) => {\n    return num - Math.floor(num);\n}\n",
            "export const belowZero = (operations) => {\n    let balance = 0;\n    for (const op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @returns {number}\n */\nexport const meanAbsoluteDeviation = (numbers) => {\n    const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    const deviations = numbers.map(x => Math.abs(x - mean));\n    const deviation = deviations.reduce((a, b) => a + b, 0);\n    return deviation / numbers.length;\n}\n",
            "export const intersperse = (numbers, delimiter) => {\n    const result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i !== 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "export const parseNestedParens = (parenString) => {\n    const result = [];\n    const parenGroups = parenString.split(\" \");\n    for (const group of parenGroups) {\n        let maxDepth = 0;\n        let depth = 0;\n        for (const ch of group) {\n            if (ch === \"(\") {\n                depth++;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch === \")\") {\n                depth--;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}\n",
            "export const filterBySubstring = (strs, substring) => {\n    return strs.filter(s => s.includes(substring));\n};\n",
            "export const sumProduct = (numbers) => {\n    const nSum = numbers.reduce((acc, curr) => acc + curr, 0);\n    const nProduct = numbers.reduce((acc, curr) => acc * curr, 1);\n    return [nSum, nProduct];\n}\n",
            "export const rollingMax = (numbers) => {\n    const result = [];\n    let maxSoFar = Number.MIN_SAFE_INTEGER;\n    for (const num of numbers) {\n        maxSoFar = Math.max(maxSoFar, num);\n        result.push(maxSoFar);\n    }\n    return result;\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const makePalindrome = (s) => {\n    if (s === s.reverse()) {\n        return s;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (s.slice(i) === s.slice(i).reverse()) {\n            return s + s.slice(i).reverse();\n        }\n    }\n    return \"\";\n}\n",
            "export const stringXor = (a, b) => {\n    const aChars = a.split(\"\");\n    const bChars = b.split(\"\");\n    const result = [];\n    for (let i = 0; i < aChars.length; i++) {\n        const x = parseInt(aChars[i]);\n        const y = parseInt(bChars[i]);\n        result.push((x + y) % 2);\n    }\n    return result.join(\"\");\n}\n",
            "/**\n * @param {Array<string>} strs\n * @returns {?string}\n */\nexport const longest = (strs) => {\n    if (!strs) {\n        return null;\n    }\n    let longest = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        if (strs[i].length > longest.length) {\n            longest = strs[i];\n        }\n    }\n    return longest;\n}\n",
            "/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nexport const greatestCommonDivisor = (a, b) => {\n    if (b === 0) {\n        return a;\n    }\n    return greatestCommonDivisor(b, a % b);\n}\n",
            "export const allPrefixes = (s) => {\n    const prefixes = [];\n    for (let i = 0; i <= s.length; i++) {\n        prefixes.push(s.substring(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "/**\n * @param {number} n\n * @returns {string}\n */\nexport const stringSequence = (n) => {\n    return (n + 1).toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1,\");\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const countDistinctCharacters = (s) => {\n    return Array.from(new Set(s.toLowerCase())).length;\n}\n",
            "export const parseMusic = (musicString) => {\n    const durations = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    };\n    const notes = musicString.split(\" \");\n    return notes.map(note => durations[note]);\n}\n",
            "export const howManyTimes = (s, substring) => {\n    let times = 0;\n    for (let i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.slice(i, i + substring.length) === substring) {\n            times++;\n        }\n    }\n    return times;\n}\n",
            "/**\n * @param {string} numbers\n * @returns {string}\n */\nexport const sortNumbers = (numbers) => {\n    const numDict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    const numList = numbers.split(\" \").filter(num => num in numDict);\n    numList.sort((a, b) => numDict[a] - numDict[b]);\n    return numList.join(\" \");\n}\n",
            "export const findClosestElements = (numbers) => {\n    const sortedNumbers = numbers.sort((a, b) => b - a);\n    let minDiff = Infinity;\n    let closestPair = [];\n    for (let i = 1; i < sortedNumbers.length; i++) {\n        const diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @returns {Array<number>}\n */\nexport const rescaleToUnit = (numbers) => {\n    const minNum = Math.min(...numbers);\n    const maxNum = Math.max(...numbers);\n    if (minNum === maxNum) {\n        return Array.from({ length: numbers.length }, () => 0.0);\n    }\n    const denominator = maxNum - minNum;\n    return numbers.map((num) => (num - minNum) / denominator);\n}\n",
            "/**\n * @param {Array<*>} values\n * @returns {Array<number>}\n */\nexport const filterIntegers = (values) => {\n    return values.filter(x => typeof x === \"number\");\n};\n",
            "export const strLength = (s) => {\n    return s.length;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const largestDivisor = (n) => {\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "export const factorize = (n) => {\n    const factors = [];\n    let divisor = 2;\n    while (n % divisor === 0) {\n        factors.push(divisor);\n        n /= divisor;\n    }\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n",
            "export const removeDuplicates = (numbers) => {\n    const counts = {};\n    return numbers.filter((num) => {\n        counts[num] = (counts[num] || 0) + 1;\n        return counts[num] === 1;\n    });\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const flipCase = (s) => {\n    const result = [];\n    for (const ch of s) {\n        if (ch.charCodeAt(0) < 65 || 90 < ch.charCodeAt(0) || ch.charCodeAt(0) < 97 || 122 < ch.charCodeAt(0)) {\n            result.push(ch);\n        } else if (ch.toUpperCase() === ch) {\n            result.push(ch.toLowerCase());\n        } else if (ch.toLowerCase() === ch) {\n            result.push(ch.toUpperCase());\n        }\n    }\n    return result.join('');\n}\n",
            "export const concatenate = (strs) => {\n    return strs.join(\"\");\n}\n",
            "export const filterByPrefix = (strs, prefixStr) => {\n    return strs.filter(s => s.startsWith(prefixStr));\n}\n",
            "export const getPositive = (l) => {\n    return l.filter(num => num > 0);\n}\n",
            "/**\n * @param {number} n\n * @returns {boolean}\n */\nexport const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const poly = (xs, x) => {\n    let res = 0.0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n};\nexport const findZero = (xs) => {\n    let x1 = 1.0;\n    let x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        let mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "export const sortThird = (l) => {\n    const sorted = [...l].slice(0, 3).sort((a, b) => a - b);\n    const map = new Map(l);\n    const result = [];\n    for (const i of l) {\n        if (i % 3 === 0) {\n            result.push(sorted[0]);\n            sorted.shift();\n        } else {\n            result.push(map.get(i));\n        }\n    }\n    return result;\n}\n",
            "export const listUnique = (l) => {\n    const s = new Set(l);\n    return [...s];\n}\n",
            "export const maxElement = (l) => {\n    if (l.length === 0) {\n        return 0;\n    }\n    return Math.max(...l);\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const fizzBuzz = (n) => {\n    let cnt = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += String(i).split(\"7\").length - 1;\n        }\n    }\n    return cnt;\n}\n",
            "export const sortEven = (l) => {\n    const sortedEven = l.slice(0, l.length, 2).sort((a, b) => b - a);\n    const result = new Array(l.length);\n    for (let i = 0; i < l.length; i++) {\n        if (i % 2 === 0) {\n            result[i] = sortedEven[i // 2];\n        } else {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const encodeCyclic = (s) => {\n    const result = [];\n    for (let i = 0; i < s.length; i++) {\n        if (i + 2 > s.length) {\n            result.push(s.substring(i));\n        } else {\n            result.push(s.substring(i + 1, i + 3));\n            result.push(s.charAt(i));\n        }\n    }\n    return result.join(\"\");\n}\n/**\n * @param {string} s\n * @returns {string}\n */\nexport const decodeCyclic = (s) => {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const primeFib = (n) => {\n    const isPrime = (num) => {\n        if (num < 2) {\n            return false;\n        }\n        for (let i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    let fib = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        fib = [fib[1], fib[0] + fib[1]];\n        if (isPrime(fib[1])) {\n            cnt++;\n        }\n    }\n    return fib[1];\n}\n",
            "export const triplesSumToZero = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const carRaceCollision = (n) => {\n    return Math.pow(n, 2);\n}\n",
            "export const incrList = (l) => {\n    const result = [];\n    for (const i of l) {\n        result.push(i + 1);\n    }\n    return result;\n}\n",
            "export const pairsSumToZero = (l) => {\n    const seen = new Set();\n    for (const num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "/**\n * @param {number} x\n * @param {number} bas\n * @returns {string}\n */\nexport const changeBase = (x, bas) => {\n    const digits = [];\n    while (x > 0) {\n        digits.unshift(x % bas);\n        x = Math.floor(x / bas);\n    }\n    return digits.join(\"\");\n}\n",
            "/**\n * @param {number} a\n * @param {number} h\n * @returns {number}\n */\nexport const triangleArea = (a, h) => {\n    return a * h / 2;\n}\n",
            "export const fib4 = (n) => {\n    const fib = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2];\n        fib[0] = fib[1];\n        fib[1] = fib[2];\n        fib[2] = fib[3];\n        fib[3] = fib[0];\n    }\n    return fib[n % 4];\n}\n",
            "export const median = (l) => {\n    const sortedL = l.sort((a, b) => a - b);\n    if (l.length % 2 !== 0) {\n        return sortedL[Math.floor(l.length / 2)];\n    } else {\n        const midIdx = Math.floor(l.length / 2);\n        return (sortedL[midIdx - 1] + sortedL[midIdx]) / 2;\n    }\n}\n",
            "/**\n * @param {string} txt\n * @returns {boolean}\n */\nexport const isPalindrome = (txt) => {\n    const cleanTxt = txt.trim().toLowerCase().replace(/[^\\w\\s]/gi, '');\n    return cleanTxt === cleanTxt.slice(::-1);\n}\n",
            "/**\n * @param {number} n\n * @param {number} p\n * @returns {number}\n */\nexport const modp = (n, p) => {\n    let ret = 1;\n    for (let i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const encodeShift = (s) => {\n    const result = s.split('').map(ch => String.fromCharCode((ch.charCodeAt(0) - 97 + 5) % 26 + 97));\n    return result.join('');\n}\n/**\n * @param {string} s\n * @returns {string}\n */\nexport const decodeShift = (s) => {\n    const result = s.split('').map(ch => String.fromCharCode((ch.charCodeAt(0) - 97 + 21) % 26 + 97));\n    return result.join('');\n}\n",
            "/**\n * @param {string} txt\n * @returns {string}\n */\nexport const removeVowels = (txt) => {\n    const vowels = \"aeiouAEIOU\";\n    const regex = new RegExp(\"|\".join(vowels), \"g\");\n    return txt.replace(regex, \"\");\n}\n",
            "/**\n * @param {Array<number>} l\n * @param {number} t\n * @returns {boolean}\n */\nexport const belowThreshold = (l, t) => {\n    return l.every(x => x < t);\n}\n",
            "/**\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport const add = (x, y) => {\n    return x + y;\n}\n",
            "/**\n * @param {string} s0\n * @param {string} s1\n * @returns {boolean}\n */\nexport const sameChars = (s0, s1) => {\n    const set0 = new Set(s0);\n    const set1 = new Set(s1);\n    return set0.size === set1.size;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const fib = (n) => {\n    if (n <= 1) {\n        return n;\n    }\n    const fibArray = [0, 1];\n    for (let i = 2; i <= n; i++) {\n        fibArray[i] = fibArray[i - 1] + fibArray[i - 2];\n    }\n    return fibArray[n];\n}\n",
            "export const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        const b = brackets.charAt(i);\n        if (b === \"<\") {\n            depth++;\n        } else if (b === \">\") {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {boolean}\n */\nexport const monotonic = (l) => {\n    const diff = l.reduce((acc, curr, idx) => acc.push(curr - l[idx - 1]), []);\n    return diff.every(x => x <= 0) || diff.every(x => x >= 0);\n}\n",
            "export const common = (l1, l2) => {\n    const s1 = new Set(l1);\n    const s2 = new Set(l2);\n    const result = [];\n    for (const e of s1) {\n        if (s2.has(e)) {\n            result.push(e);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const largestPrimeFactor = (n) => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n",
            "export const sumToN = (n) => {\n    const result = [];\n    for (let i = 0; i <= n; i++) {\n        result.push(i);\n    }\n    return result.reduce((acc, curr) => acc + curr, 0);\n}\n",
            "export const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        const char = brackets.charAt(i);\n        if (char === \"(\") {\n            depth++;\n        } else if (char === \")\") {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const derivative = (xs) => {\n    const result = [];\n    for (let i = 1; i < xs.length; i++) {\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const fibfib = (n) => {\n    if (n <= 1) {\n        return 0;\n    }\n    let a = 0;\n    let b = 0;\n    let c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n--;\n    }\n    return c;\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const vowelsCount = (s) => {\n    const vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase()) || (i === s.length - 1 && s[i].toLowerCase() === \"y\")) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n",
            "/**\n * @param {number} x\n * @param {number} shift\n * @returns {string}\n */\nexport const circularShift = (x, shift) => {\n    const xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.split('').reverse().join('');\n    } else {\n        const shiftChars = xStr.slice(-shift);\n        return shiftChars + xStr.slice(0, -shift);\n    }\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const digitSum = (s) => {\n    const result = s.split('').reduce((acc, c) => acc + c.charCodeAt(0), 0);\n    return result;\n}\n",
            "/**\n * @param {string} s\n * @param {number} n\n * @returns {number}\n */\nexport const fruitDistribution = (s, n) => {\n    const words = s.split(' ');\n    const apples = parseInt(words[words.indexOf(\"apples\") - 1]);\n    const oranges = parseInt(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {Array<number>}\n */\nexport const pluck = (arr) => {\n    const evens = arr.filter(n => n % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n    const minEven = Math.min(...evens);\n    const index = arr.indexOf(minEven);\n    return [minEven, index];\n}\n",
            "export const search = (lst) => {\n    const freqs = {};\n    for (const n of lst) {\n        freqs[n] = (freqs[n] || 0) + 1;\n    }\n    const goodVals = [k for k in freqs.keys() if freqs[k] >= k];\n    return goodVals.length > 0 ? Math.max(...goodVals) : -1;\n}\n",
            "export const strangeSortList = (lst) => {\n    const result = [];\n    const sl = lst.slice();\n    let left = 0;\n    let right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left++]);\n        if (left <= right) {\n            result.push(sl[right--]);\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @returns {number}\n */\nexport const triangleArea = (a, b, c) => {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2.0;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "/**\n * @param {Array<number>} q\n * @param {number} w\n * @returns {boolean}\n */\nexport const willItFly = (q, w) => {\n    if (q.length === 0) {\n        return false;\n    }\n    const isPalin = q.reduce((acc, curr) => acc && curr === q[q.length - 1 - Math.floor(q.length / 2)], true);\n    const total = q.reduce((acc, curr) => acc + curr, 0);\n    return isPalin && total <= w;\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {number}\n */\nexport const smallestChange = (arr) => {\n    let ans = 0;\n    for (let i = 0; i < Math.floor(arr.length / 2); i++) {\n        if (arr[i] !== arr[arr.length - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;\n}\n",
            "/**\n * @param {Array<string>} lst1\n * @param {Array<string>} lst2\n * @returns {Array<string>}\n */\nexport const totalMatch = (lst1, lst2) => {\n    const cnt1 = lst1.reduce((acc, s) => acc + s.length, 0);\n    const cnt2 = lst2.reduce((acc, s) => acc + s.length, 0);\n    return lst1.length < lst2.length ? lst1 : lst2;\n}\n",
            "/**\n * @param {number} a\n * @returns {boolean}\n */\nexport const isMultiplyPrime = (a) => {\n    if (a < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(a)); i++) {\n        if (a % i === 0 && isPrime(i)) {\n            let cnt = 0;\n            while (a % i === 0) {\n                cnt++;\n                a /= i;\n            }\n            if (cnt === 3) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction isPrime(n) {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {number} x\n * @param {number} n\n * @returns {boolean}\n */\nexport const isSimplePower = (x, n) => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}\n",
            "export const isCube = (a) => {\n    const root = Math.floor(Math.pow(Math.abs(a), 1 / 3));\n    return Math.pow(root, 3) === Math.abs(a);\n}\n",
            "/**\n * @param {string} num\n * @returns {number}\n */\nexport const hexKey = (num) => {\n    const nums = num.split(\"\");\n    return nums.filter(n => [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"].includes(n)).length;\n}\n",
            "/**\n * @param {number} dec\n * @returns {string}\n */\nexport const decimalToBinary = (dec) => {\n    const binary = dec.toString(2);\n    return `db${binary}db`;\n}\n",
            "/**\n * @param {string} s\n * @returns {boolean}\n */\nexport const isHappy = (s) => {\n    const len = s.length;\n    if (len < 3) {\n        return false;\n    }\n    const hash = new Map();\n    let current = s;\n    while (current !== \"1\") {\n        const next = getNext(current);\n        if (hash.has(next)) {\n            return false;\n        }\n        hash.set(next, true);\n        current = next;\n    }\n    return true;\n}\nfunction getNext(s) {\n    const len = s.length;\n    let result = \"\";\n    for (let i = 0; i < len; i++) {\n        const num = parseInt(s[i]);\n        const sum = (num + num + num) % 10;\n        result += String(sum);\n    }\n    return result;\n}\n",
            "export const numericalLetterGrade = (grades) => {\n    const result = [];\n    for (const g of grades) {\n        if (g === 4) {\n            result.push(\"A+\");\n        } else if (g > 3.7) {\n            result.push(\"A\");\n        } else if (g > 3.3) {\n            result.push(\"A-\");\n        } else if (g > 3.0) {\n            result.push(\"B+\");\n        } else if (g > 2.7) {\n            result.push(\"B\");\n        } else if (g > 2.3) {\n            result.push(\"B-\");\n        } else if (g > 2.0) {\n            result.push(\"C+\");\n        } else if (g > 1.7) {\n            result.push(\"C\");\n        } else if (g > 1.3) {\n            result.push(\"C-\");\n        } else if (g > 1.0) {\n            result.push(\"D+\");\n        } else if (g > 0.7) {\n            result.push(\"D\");\n        } else if (g > 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n",
            "export const primeLength = (s) => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(length)); i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const startsOneEnds = (n) => {\n    if (n === 1) {\n        return 1;\n    }\n    return 2 * 9 * (10 ** (n - 2));\n}\n",
            "/**\n * @param {number} n\n * @returns {string}\n */\nexport const solve = (n) => {\n    const digitsSum = n.toString(2).split('').reduce((a, b) => parseInt(b, 10) + a, 0);\n    return digitsSum.toString(2).substring(2);\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const add = (lst) => {\n    return lst.filter((x) => x % 2 === 1 && x % 2 === 0).reduce((a, b) => a + b, 0);\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const antiShuffle = (s) => {\n    const words = s.split(\" \");\n    const sortedWords = words.map(word => \"\".join(Array.from(word).sort()));\n    return \" \".join(sortedWords);\n}\n",
            "/**\n * @param {Array<Array<number>>} lst\n * @param {number} x\n * @returns {Array<Array<number>>>\n */\nexport const getRow = (lst, x) => {\n    const result = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {Array<number>}\n */\nexport const sortArray = (arr) => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) {\n        return arr.sort((a, b) => b - a).reverse();\n    }\n    return arr.sort((a, b) => a - b);\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const encrypt = (s) => {\n    const result = [];\n    for (const ch of s) {\n        const shifted = ord(ch) + 4;\n        if (shifted > ord('z')) {\n            shifted -= 26;\n        }\n        result.push(chr(shifted));\n    }\n    return result.join(\"\");\n}\nfunction ord(ch) {\n    return ch.charCodeAt(0);\n}\nfunction chr(code) {\n    return String.fromCharCode(code);\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {?number}\n */\nexport const nextSmallest = (lst) => {\n    const sl = lst.sort((a, b) => a - b);\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const isBored = (s) => {\n    const sentences = s.split(/[.!?]\\s*/);\n    return sentences.filter(sentence => sentence.length >= 2 && sentence.substring(0, 2) === \"I \").length;\n}\n",
            "/**\n * @param {*} x\n * @param {*} y\n * @param {*} z\n * @returns {boolean}\n */\nexport const anyInt = (x, y, z) => {\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n        if (x + y === z || x + z === y || y + z === x) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {string} message\n * @returns {string}\n */\nexport const encode = (message) => {\n    const vowels = \"aeiouAEIOU\";\n    const result = [];\n    for (let i = 0; i < message.length; i++) {\n        const ch = message[i];\n        if (ch.isalpha()) {\n            const ch1 = ch.toUpperCase() if (ch.toLowerCase() === ch) else ch.toLowerCase();\n            if (vowels.includes(ch1)) {\n                ch1 = String.fromCharCode(ord(ch1) + 2);\n            }\n            result.push(ch1);\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n}\nfunction ord(ch) {\n    return ch.charCodeAt(0);\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const skjkasdkd = (lst) => {\n    const primes = lst.filter((n) => isPrime(n));\n    if (primes.length === 0) {\n        return 0;\n    }\n    const largest = lst.reduce((a, b) => b > a ? b : a, String(primes[0]));\n    return primes.reduce((sum, prime) => sum + parseInt(largest.split(prime.toString())[1]), 0);\n}\nfunction isPrime(n) {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {Map<string, string>} d\n * @returns {boolean}\n */\nexport const checkDictCase = (d) => {\n    if (d.size === 0) {\n        return false;\n    }\n    const keys = Array.from(d.keys());\n    return keys.every(c => c.islower()) || keys.every(c => c.isupper());\n}\n",
            "export const countUpTo = (n) => {\n    const isPrime = new Array(n + 1).fill(true);\n    isPrime[0] = isPrime[1] = false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (isPrime[i]) {\n            for (let j = i * i; j <= n; j += i) {\n                isPrime[j] = false;\n            }\n        }\n    }\n    const primes = [];\n    for (let i = 2; i <= n; i++) {\n        if (isPrime[i]) {\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n",
            "/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nexport const multiply = (a, b) => {\n    return Math.abs((a % 10) * (b % 10));\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const countUpper = (s) => {\n    const vowels = \"AEIOU\";\n    return s.match(/[A-Z]/g).filter((c) => vowels.indexOf(c.charAt(0)) > -1).length;\n}\n",
            "export const closestInteger = (value) => {\n    const num = parseFloat(value);\n    if (num >= 0) {\n        return Math.round(num + 0.5);\n    } else {\n        return Math.round(num - 0.5);\n    }\n}\n",
            "export const makeAPile = (n) => {\n    return Array.from({ length: n }, () => n + 2 * Math.floor(Math.random() * n));\n}\n",
            "const re = require(\"regexp\");\nexport const wordsString = (s) => {\n    return re.split(/[, ]/g, s).filter(w => w.length > 0);\n}\n",
            "export const chooseNum = (x, y) => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    if (x !== y) {\n        return y - 1;\n    }\n    return -1;\n};\n",
            "/**\n * @param {number} n\n * @param {number} m\n * @returns {?string}\n */\nexport const roundedAvg = (n, m) => {\n    if (n > m) {\n        return null;\n    }\n    const rAvg = (m + n) / 2.0 + 0.5;\n    return rAvg.toString(2);\n}\n",
            "/**\n * @param {Array<number>} x\n * @returns {Array<number>}\n */\nexport const uniqueDigits = (x) => {\n    const oddDigits = x.filter((num) => {\n        const digits = num.toString().split(\"\").map((digit) => parseInt(digit, 10) % 2);\n        return digits.every((digit) => digit !== 0);\n    });\n    return oddDigits.sort((a, b) => b - a);\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {Array<string>}\n */\nexport const byLength = (arr) => {\n    const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const sortedArr = Array.from(arr).filter(x => 1 <= x && x <= 9).sort((a, b) => b - a);\n    return sortedArr.map(x => digitNames[x - 1]);\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const f = (n) => {\n    const nums = Array.from(Array.from(range(1, n + 1)).reduce((acc, curr) => acc.concat(curr), []));\n    return nums.map(i => (i % 2 === 0) ? nums.slice(0, i).reduce((acc, curr) => acc + curr, 0) : Math.prod(nums.slice(0, i)));\n}\n",
            "/**\n * @param {string} txt\n * @returns {boolean}\n */\nconst isPalindrome = (txt) => {\n    const cleanTxt = txt.replace(/\\s+/g, \"\").toLowerCase();\n    const reversedTxt = cleanTxt.split(\"\").reverse().join(\"\");\n    return cleanTxt === reversedTxt;\n}\n/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const evenOddPalindrome = (n) => {\n    const cnt = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2]++;\n        }\n    }\n    return cnt;\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {number}\n */\nexport const countNums = (arr) => {\n    return arr.filter(n => digitsSum(n) > 0).length;\n}\nconst digitsSum = (n) => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n    } else {\n        return parseInt(nStr.substring(0, 2)) * 2 + digitsSum(abs(n));\n    }\n};\n",
            "/**\n * @param {Array<number>} arr\n * @returns {boolean}\n */\nexport const moveOneBall = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    const sortedArr = arr.sort((a, b) => b - a);\n    for (let i = 0; i < arr.length; i++) {\n        if (\n            arr.slice(i).sort((a, b) => b - a) ===\n            sortedArr.slice(arr.length - i) &&\n            arr.slice(0, i).sort((a, b) => b - a) ===\n            sortedArr.slice(arr.length - i)\n        ) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {Array<number>} lst1\n * @param {Array<number>} lst2\n * @returns {string}\n */\nexport const canExchange = (lst1, lst2) => {\n    const oddCount1 = lst1.filter(num => num % 2 !== 0).length;\n    const evenCount2 = lst2.filter(num => num % 2 === 0).length;\n    return evenCount2 >= oddCount1 ? \"YES\" : \"NO\";\n}\n",
            "const histogram = (test) => {\n    const words = [w.trim() for w in test.split(\" \") if w.length > 0];\n    const freq = words.reduce((acc, curr) => {\n        acc[curr] = (acc[curr] || 0) + 1;\n        return acc;\n    }, {});\n    const maxFreq = Math.max(...freq.values()) || 0;\n    const result = new Map();\n    if (words.length > 0) {\n        for (const [k, v] of freq.entries()) {\n            if (v === maxFreq) {\n                result.set(k, v);\n            }\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {string} s\n * @param {string} c\n * @returns {Array<string>}\n */\nexport const reverseDelete = (s, c) => {\n    const s1 = s.replace(new RegExp(c, \"g\"), \"\");\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"];\n}\nfunction isPalindrome(s) {\n    const cleanStr = s.replace(/[^\\w\\s]/gi, \"\").toLowerCase();\n    const reversedStr = cleanStr.split(\" \").reverse().join(\" \");\n    return cleanStr === reversedStr;\n}\n",
            "/**\n * @param {Array<string>} lst\n * @returns {Array<string>}\n */\nexport const oddCount = (lst) => {\n    const result = [];\n    for (const num of lst) {\n        const n = num.split(\"\").filter(d => (ord(d) + 0) % 2 === 1).length;\n        const rs = \"the number of odd elements in the string \" + n + \" of the input.\";\n        result.push(rs);\n    }\n    return result;\n}\nfunction ord(c) {\n    return c.charCodeAt(0) - (0x24C8 + 1);\n}\n",
            "/**\n * @param {Array<number>} nums\n * @returns {number}\n */\nexport const minSubArraySum = (nums) => {\n    let minSum = 0;\n    let curSum = 0;\n    for (const n of nums) {\n        curSum = Math.min(curSum + n, 0);\n        minSum = Math.min(curSum, minSum);\n    }\n    if (minSum === 0) {\n        minSum = Math.min(...nums);\n    }\n    return minSum;\n}\n",
            "export const maxFill = (grid, capacity) => {\n    const result = 0;\n    for (const row of grid) {\n        let sum = 0;\n        for (const num of row) {\n            sum += num;\n            if (sum > capacity) {\n                sum = capacity;\n            }\n        }\n        result += Math.ceil(sum / capacity);\n    }\n    return result;\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {Array<number>}\n */\nexport const sortArray = (arr) => {\n    return arr.sort((a, b) => {\n        const countA = countOnes(a);\n        const countB = countOnes(b);\n        if (countA !== countB) {\n            return countB - countA;\n        }\n        return a - b;\n    });\n}\nconst countOnes = (num) => {\n    return parseInt(Math.log2(num)).toString().length - parseInt(Math.log2(num)).toString();\n}\n",
            "/**\n * @param {string} s\n * @param {number} n\n * @returns {Array<string>}\n */\nexport const selectWords = (s, n) => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = s.split(\" \").filter(w => w.length > 0);\n    return words.filter(w => w.toLowerCase().match(`[${consonants}]{${n}}$`));\n}\n",
            "export const getClosestVowel = (word) => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.includes(word.charAt(i))) {\n            if (vowels.includes(word.charAt(i - 1)) || vowels.includes(word.charAt(i + 1))) {\n                return word.charAt(i);\n            }\n        }\n    }\n    return \"\";\n}\n",
            "/**\n * @param {Array<string>} lst\n * @returns {string}\n */\nexport const matchParens = (lst) => {\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    const isValid1 = check(s1);\n    const isValid2 = check(s2);\n    return isValid1 || isValid2 ? \"Yes\" : \"No\";\n}\n",
            "export const maximum = (arr, k) => {\n    if (k === 0) {\n        return [];\n    }\n    return arr.slice(arr.length - k).sort((a, b) => b - a);\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const solution = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum++;\n        }\n    }\n    return sum;\n}\n",
            "export const addElements = (arr, k) => {\n    let sum = 0;\n    for (let i = 0; i < k && i < arr.length; i++) {\n        if (str(arr[i]).length <= 2) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n",
            "export const getOddCollatz = (n) => {\n    const collatz = [1];\n    while (n > 1) {\n        if (n % 2 !== 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    return collatz.sort((a, b) => b - a);\n}\n",
            "export const validDate = (date) => {\n    const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"];\n    const feb = [\"04\", \"06\", \"09\", \"11\"];\n    const dateParts = date.split(\"-\");\n    if (dateParts.length !== 3) {\n        return false;\n    }\n    const y = parseInt(dateParts[0]);\n    const m = parseInt(dateParts[1]);\n    const d = parseInt(dateParts[2]);\n    if (isNaN(y) || isNaN(m) || isNaN(d)) {\n        return false;\n    }\n    if (m < 1 || m > 12) {\n        return false;\n    }\n    if (m === 2) {\n        if (y % 4 !== 0 || (y % 100 == 0 && y % 400 != 0)) {\n            return false;\n        }\n        return d >= 1 && d <= 28;\n    }\n    if (months.includes(m.toString().padStart(2, \"0\")) && d >= 1 && d <= 31) {\n        return true;\n    }\n    if (feb.includes(m.toString().padStart(2, \"0\")) && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "/**\n * @param {string} txt\n * @returns {Array<string>}\n */\nexport const splitWords = (txt) => {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        return [`${[c for c in txt if c.islower() && Math.floor(ord(c) / 2)].length}`]\n    }\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {boolean}\n */\nexport const isSorted = (lst) => {\n    const freq = new Map();\n    for (const i of lst) {\n        freq.set(i, (freq.get(i) || 0) + 1);\n    }\n    return Array.from(freq.keys()).sort((a, b) => lst[a] - lst[b]).reduce((acc, curr) => acc && lst[curr] === curr, true) && Array.from(freq.values()).every((val) => val <= 2;\n}\n",
            "/**\n * @param {Array<number>} interval1\n * @param {Array<number>} interval2\n * @returns {string}\n */\nexport const intersection = (interval1, interval2) => {\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n    if (length <= 0 || !isPrime(length)) {\n        return \"NO\";\n    }\n    return \"YES\";\n}\nfunction isPrime(n) {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {?number}\n */\nexport const prodSigns = (arr) => {\n    if (!arr) {\n        return null;\n    }\n    if (arr.includes(0)) {\n        return 0;\n    }\n    const sign = arr.find(n => n < 0) ? -1 : 1;\n    return sign * arr.reduce((acc, curr) => acc * curr, 1);\n}\n",
            "export const minPath = (grid, k) => {\n    const n = grid.length;\n    const minVal = n * n + 1;\n    const result = new Array(k).fill(1);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                const temp = [];\n                if (i > 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j > 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i < n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j < n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                const minTemp = temp.reduce((a, b) => Math.min(a, b));\n                if (minVal > minTemp) {\n                    minVal = minTemp;\n                }\n            }\n        }\n    }\n    for (let i = 0; i < k; i++) {\n        if (i % 2 === 0) {\n            result[i] = 1;\n        } else {\n            result[i] = minVal;\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const tri = (n) => {\n    if (n === 0) {\n        return [1];\n    }\n    const seq = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(i / 2 + 1);\n        } else {\n            const prev = seq[i - 1] + seq[i - 2] + (i + 3) / 2;\n            seq.push(prev);\n        }\n    }\n    return seq;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const digits = (n) => {\n    const strN = n.toString();\n    const odds = strN.split(\"\").filter((d) => parseInt(d) % 2 === 1);\n    return odds.length > 0 ? Math.pow(odds.reduce((x, y) => x * y), 1) : 0;\n}\n",
            "export const isNested = (s) => {\n    const openIdx = [];\n    const closeIdx = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === '[') {\n            openIdx.push(i);\n        } else if (s[i] === ']') {\n            closeIdx.push(i);\n        }\n    }\n    closeIdx.reverse();\n    let cnt = 0;\n    let i = 0;\n    let l = closeIdx.length;\n    for (let idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt++;\n            i++;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const sumSquares = (lst) => {\n    const result = lst.map(n => Math.ceil(n) ** 2);\n    return result.reduce((acc, curr) => acc + curr, 0);\n}\n",
            "export const checkIfLastCharIsALetter = (txt) => {\n    const last = txt.substring(txt.lastIndexOf(' ') + 1);\n    return last.length == 1 && last.match(/[a-zA-Z]/);\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {number}\n */\nexport const canArrange = (arr) => {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    const idx = arr.filter((a, i) => a < arr[i - 1]).map((a) => i);\n    return Math.max(...idx) || -1;\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {Array<?number>}\n */\nexport const largestSmallestIntegers = (lst) => {\n    const neg = lst.filter(i => i < 0).sort((a, b) => b - a)[0];\n    const pos = lst.filter(i => i > 0).sort((a, b) => a - b)[0];\n    const maxNeg = max(neg);\n    const minPos = min(pos);\n    return [maxNeg, minPos];\n}\n",
            "/**\n * @param {*} a\n * @param {*} b\n * @returns {?number}\n */\nexport const compareOne = (a, b) => {\n    const a1 = typeof a === \"string\" ? Number(a.replace(/\\,/g, \".\")) : a;\n    const b1 = typeof b === \"string\" ? Number(b.replace(/\\,/g, \".\")) : b;\n    if (a1 === b1) return null;\n    return a1 > b1 ? a1 : b1;\n}\n",
            "/**\n * @param {number} n\n * @returns {boolean}\n */\nexport const isEqualToSumEven = (n) => {\n    return n % 2 === 0 && n >= 8;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const specialFactorial = (n) => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "const fixSpaces = (txt) => {\n    return txt.replace(/\\s{3,}/g, \"-\"<mask_1><sep><mask_1><mask_1>\n    ).replace(/ /g, \"_\");\n}\n",
            "/**\n * @param {string} fileName\n * @returns {string}\n */\nexport const fileNameCheck = (fileName) => {\n    const suf = [\"txt\", \"exe\", \"dll\"];\n    const lst = fileName.split(\".\");\n    if (lst.length !== 2 || !lst[1] || !suf.includes(lst[1])) {\n        return \"No\";\n    }\n    if (lst[0].length === 0 || !/^[A-Za-z]/ .test(lst[0][0])) {\n        return \"No\";\n    }\n    if ([x for x in lst[0] if x.isDigit()].length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const sumSquares = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0) {\n            result += Math.pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {string} sentence\n * @returns {string}\n */\nexport const wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    return \" \".join(words.filter(w => isPrime(w.length)));\n}\nfunction isPrime(n) {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const simplify = (x, n) => {\n    const xs = x.split(\"/\");\n    const ns = n.split(\"/\");\n    const num = parseInt(xs[0]) * parseInt(ns[0]);\n    const den = parseInt(xs[1]) * parseInt(ns[1]);\n    return num % den === 0;\n};\n",
            "/**\n * @param {Array<number>} nums\n * @returns {Array<number>}\n */\nexport const orderByPoints = (nums) => {\n    return nums.sort((a, b) => {\n        const sumA = digits_sum(a);\n        const sumB = digits_sum(b);\n        return sumA - sumB;\n    });\n}\nfunction digits_sum(n) {\n    const n_str = n.toString();\n    if (n >= 0) {\n        return n_str.split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n    } else {\n        const firstTwo = n_str.substring(0, 2);\n        const rest = n_str.substring(2);\n        return parseInt(firstTwo) * 2 + digits_sum(rest);\n    }\n}\n",
            "export const specialFilter = (nums) => {\n    const odds = \"13579\";\n    return nums.filter(n => n > 10 && n % 2 === 1 && odds.includes(String(n)[0])).length;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const getMaxTriples = (n) => {\n    let c = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        const a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    const result = c[0] * c[1] * c[2];\n    let tripleProduct = 0;\n    for (let i = 0; i < c[0]; i++) {\n        for (let j = 0; j < c[1]; j++) {\n            for (let k = 0; k < c[2]; k++) {\n                tripleProduct += (i + j + k);\n            }\n        }\n    }\n    return result + tripleProduct * (tripleProduct - 1) * (tripleProduct - 2) / 6;\n}\n",
            "/**\n * @param {string} planet1\n * @param {string} planet2\n * @returns {Array<string>}\n */\nexport const bf = (planet1, planet2) => {\n    const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (planet1 === planet2) {\n        return [];\n    }\n    let l = names.indexOf(planet1);\n    let r = names.indexOf(planet2);\n    if (l > r) {\n        [l, r] = [r, l];\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n}\n",
            "export const sortedListSum = (lst) => {\n    const result = lst.filter(s => s.length % 2 === 0);\n    return result.sort((a, b) => {\n        if (a.length === b.length) {\n            return b.localeCompare(a);\n        }\n        return b.length - a.length;\n    });\n}\n",
            "/**\n * @param {number} n\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport const xOrY = (n, x, y) => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "export const doubleTheDifference = (lst) => {\n    let sum = 0;\n    for (const num of lst) {\n        if (num >= 0 && num % 2 === 1) {\n            sum += num * num;\n        }\n    }\n    return sum;\n}\n",
            "export const compare = (game, guess) => {\n    return game.map((x, i) => Math.abs(x - guess[i]));\n}\n",
            "/**\n * @param {string} className\n * @param {Array<string>} extensions\n * @returns {string}\n */\nexport const strongestExtension = (className, extensions) => {\n    let maxS = Number.MIN_SAFE_INTEGER;\n    let maxExt = \"\";\n    for (const ext of extensions) {\n        const upper = ext.split(\"\").filter(c => c.isUpperCase()).length;\n        const lower = ext.split(\"\").filter(c => c.isLowerCase()).length;\n        const s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return `${className}.${maxExt}`;\n}\n",
            "/**\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n */\nexport const cycpatternCheck = (a, b) => {\n    for (let i = b.length; i < a.length; i++) {\n        if (a.slice(i, b.length + i) + b + a.slice(0, i) in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {number} num\n * @returns {Array<number>}\n */\nexport const evenOddCount = (num) => {\n    const ds = abs(num).toString().split('').filter(d => parseInt(d) % 2 === 0);\n    const even = ds.length;\n    return [even, ds.length - even];\n}\n",
            "const intToRomanMap = [\n    [\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"],\n    [\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"],\n    [\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"],\n    [\"\", \"M\", \"MM\", \"MMM\"]\n];\nexport const intToMiniRoman = (num) => {\n    const i = 3;\n    let res = \"\";\n    while (num > 0) {\n        const val = num % 10;\n        num = Math.floor(num / 10);\n        res = intToRomanMap[i][val] + res;\n        i--;\n    }\n    return res;\n}\n",
            "/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @returns {boolean}\n */\nexport const rightAngleTriangle = (a, b, c) => {\n    const s = [a, b, c].sort((a, b) => a - b);\n    return s[0] * s[0] + s[1] * s[1] === s[2] * s[2];\n}\n",
            "/**\n * @param {Array<string>} words\n * @returns {string}\n */\nexport const findMax = (words) => {\n    let maxCnt = 0;\n    let maxW = \"\";\n    for (const w of words) {\n        const cnt = w.length;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        }\n        else if (cnt === maxCnt) {\n            maxW = min(maxW, w);\n        }\n    }\n    return maxW;\n}\n",
            "/**\n * @param {number} num\n * @param {number} need\n * @param {number} remaining\n * @returns {Array<number>}\n */\nexport const eat = (num, need, remaining) => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "export const doAlgebra = (operators, operands) => {\n    let ops = operators.slice();\n    let nums = operands.slice();\n    let i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] === \"**\") {\n            nums[i] = Math.pow(nums[i], nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n        }\n        i--;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n        }\n        else if (ops[i] === \"//\") {\n            nums[i] = Math.floor(nums[i] / nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n        }\n        else if (ops[i] === \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n        }\n        i++;\n    }\n    return nums[0];\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const solve = (s) => {\n    if (!s.includes(\"a\") && !s.includes(\"A\")) {\n        return s.split(\"\").reverse().join(\"\");\n    }\n    const result = [];\n    for (const ch of s) {\n        if (ch.isLower()) {\n            result.push(ch.toUpper());\n        } else if (ch.isUpper()) {\n            result.push(ch.toLower());\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n}\n",
            "/**\n * @param {string} txt\n * @returns {?string}\n */\nexport const stringToMd5 = (txt) => {\n    if (!txt) {\n        return null;\n    }\n    const md5 = new crypto.Hash('MD5');\n    const txtBytes = txt.toUint8Array(null);\n    md5.update(txtBytes);\n    const md5Encoded = md5.digest('hex');\n    return md5Encoded;\n}\n",
            "/**\n * @param {number} a\n * @param {number} b\n * @returns {Array<number>}\n */\nexport const generateIntegers = (a, b) => {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n    const result = [];\n    for (let i = lower; i <= upper; i++) {\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n"
        ],
        "kotlin": [
            "fun hasCloseElements(numbers: List<Double>, threshold: Double): Boolean {\n    for (i in 0 until numbers.size - 1) {\n        for (j in i + 1 until numbers.size) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "fun separateParenGroups(parenString: String): List<String> {\n    val parens = parenString.replace(\" \", \"\")\n    var groups = listOf<String>()\n    var currentGroup = \"\"\n    for (ch in parens) {\n        if (ch == \"(\") {\n            currentGroup += ch\n        } else if (ch == \")\") {\n            currentGroup += ch\n            if (currentGroup.isEmpty) {\n                groups.add(currentGroup)\n                currentGroup = \"\"\n            }\n            else {\n                groups.add(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "fun truncateNumber(num: Double): Double {\n    return num - floor(num)\n}\n",
            "fun belowZero(operations: List<Int>): Boolean {\n    var balance = 0\n    for (op in operations) {\n        balance += op\n        if (balance < 0) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun meanAbsoluteDeviation(numbers: List<Double>): Double {\n    val mean = numbers.sum() / Double(numbers.size)\n    val deviation = numbers.map { Math.abs(it - mean) }.sum() / Double(numbers.size)\n    return deviation\n}\n",
            "fun intersperse(numbers: List<Int>, delimiter: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in 0 until numbers.size) {\n        if (i != 0) {\n            result.add(delimiter)\n        }\n        result.add(numbers[i])\n    }\n    return result\n}\n",
            "fun parseNestedParens(parenString: String): List<Int> {\n    val result = mutableListOf<Int>()\n    var depth = 0\n    for (ch in parenString) {\n        when (ch) {\n            '(' -> depth++\n            ')' -> depth--\n        }\n        result.add(depth)\n    }\n    return result\n}\n",
            "fun filterBySubstring(strs: List<String>, substring: String): List<String> {\n    return strs.filter { it.contains(substring) }\n}\n",
            "fun sumProduct(numbers: List<Int>): List<Int> {\n    val nSum = numbers.sum()\n    val nProduct = numbers.reduce(1, { x, y: Int? } x * y!)\n    return [nSum, nProduct]\n}\n",
            "fun rollingMax(numbers: List<Int>): List<Int> {\n    var maxSoFar = Int.MINUS_INFINITY // or Int.MIN_VALUE\n    val result = mutableListOf<Int>()\n    for (num in numbers) {\n        maxSoFar = max(maxSoFar, num)\n        result.add(maxSoFar)\n    }\n    return result\n}\n",
            "fun isPalindrome(s: String): Boolean {\n    return s == s.reversed()\n}\nfun makePalindrome(s: String): String {\n    if (isPalindrome(s)) {\n        return s\n    }\n    for (i in 0 until s.length) {\n        if (isPalindrome(s.substring(i))) {\n            return s + s.substring(0, i).reversed()\n        }\n    }\n    return \"\"\n}\n",
            "fun stringXor(a: String, b: String): String {\n    val aList = a.toCharArray()\n    val bList = b.toCharArray()\n    val result = arrayOfNullChar(aList.size)\n    for (i in 0 until aList.size) {\n        val x = aList[i]\n        val y = bList[i]\n        result[i] = if (x == y) \"0\" else \"1\"\n    }\n    result.joinToString(\"\")\n}\n",
            "fun longest(strs: List<String>): String? {\n    if (strs.isEmpty) {\n        return null\n    }\n    var longest_s = strs[0]\n    for (s in strs) {\n        if (s.length > longest_s.length) {\n            longest_s = s\n        }\n    }\n    return longest_s\n}\n",
            "fun greatestCommonDivisor(a: Int, b: Int): Int {\n    if (b == 0) {\n        return a\n    }\n    return greatestCommonDivisor(b, a % b)\n}\n",
            "fun allPrefixes(s: String): List<String> {\n    val n = s.length\n    val prefixes = mutableListOf<String>()\n    for (i in 0 until n) {\n        prefixes.add(s.substring(0, i + 1))\n    }\n    return prefixes\n}\n",
            "fun stringSequence(n: Int): String {\n    return \" \".join(n + 1)\n}\n",
            "fun countDistinctCharacters(s: String): Int {\n    val lowerCase = s.lowercase()\n    val set = lowerCase.chars.distinct().sorted().filter { it.isalphabetic }\n    return set.size\n}\n",
            "fun parseMusic(musicString: String): List<Int> {\n    val durations = mapOf(\"o\" to 4, \"o|\" to 2, \".|\" to 1)\n    val notes = musicString.split(\"\\\\s+\")\n    return notes.map { durations[it] }\n}\n",
            "fun howManyTimes(s: String, substring: String): Int {\n    var times = 0\n    for (i in 0 until s.length - substring.length + 1) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times++\n        }\n    }\n    return times\n}\n",
            "fun sortNumbers(numbers: String): String {\n    val numDict = arrayOf(\"zero\" to 0, \"one\" to 1, \"two\" to 2, \"three\" to 3, \"four\" to 4, \"five\" to 5, \"six\" to 6, \"seven\" to 7, \"eight\" to 8, \"nine\" to 9)\n    val numList = numbers.split(\" \").filter { numDict.contains(it) }.sorted(compareBy = { numDict[it]!! })\n    return numList.join(\" \")\n}\n",
            "fun findClosestElements(numbers: List<Double>): List<Double> {\n    val sortedNumbers = numbers.sorted()\n    var minDiff = Double.POSITIVE_INFINITY\n    var closestPair = listOf()\n    for (i in 1 until sortedNumbers.size) {\n        val diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if (diff < minDiff) {\n            minDiff = diff\n            closestPair = sortedNumbers[i - 1..i]\n        }\n    }\n    return closestPair\n}\n",
            "fun rescaleToUnit(numbers: List<Double>): List<Double> {\n    if (numbers.isEmpty) {\n        return emptyList()\n    }\n    val minNum = numbers.min()\n    val maxNum = numbers.max()\n    if (minNum == maxNum) {\n        return numbers.repeated(0.0)\n    }\n    return (numbers.map { num -> (num - minNum) / (maxNum - minNum) }).toList()\n}\n",
            "fun filterIntegers(values: List<Any>): List<Int> {\n    return values.filter { it.isInt() }\n}\n",
            "fun strLength(s: String): Int {\n    return s.length\n}\n",
            "fun largestDivisor(n: Int): Int {\n    for (i in 2 until n) {\n        if (n % i == 0) {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "fun factorize(n: Int): List<Int> {\n    var factors = mutableListOf<Int>()\n    var divisor = 2\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    factors.add(n)\n    return factors\n}\n",
            "fun removeDuplicates(numbers: List<Int>): List<Int> {\n    val counts = Array.ofInt(numbers.size, 0)\n    for (num in numbers) {\n        counts[num] += 1\n    }\n    val res = mutableListOf<Int>()\n    for (i in 0 until numbers.size) {\n        if (counts[numbers[i]] == 1) {\n            res.add(numbers[i])\n        }\n    }\n    return res.toList()\n}\n",
            "fun flipCase(s: String): String {\n    var flipped = mutableList<Char>()\n    for (ch in s) {\n        if (ch.isUppercase()) {\n            flipped.add(ch.lower())\n        } else if (ch.isLowercase()) {\n            flipped.add(ch.upper())\n        } else {\n            flipped.add(ch)\n        }\n    }\n    return flipped.joinToString()\n}\n",
            "fun concatenate(strs: List<String>): String {\n    return strs.joinToString(\"\")\n}\n",
            "fun filterByPrefix(strs: List<String>, prefixStr: String): List<String> {\n    return strs.filter { it.startsWith(prefixStr) }\n}\n",
            "fun getPositive(l: List<Int>): List<Int> {\n    return l.filter { it > 0 }\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n <= 1) {\n        return false\n    }\n    for (i in 2..sqrt(n).toInt) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun poly(xs: List<Int>, x: Double): Double {\n    var res = 0.0\n    for (i in 0 until xs.size) {\n        res *= x\n        res += xs[i] * x**i\n    }\n    return res\n}\nfun findZero(xs: List<Int>): Double {\n    var x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0.0 {\n        x1 *= 2.0\n        x2 *= 2.0\n    }\n    while abs(x1 - x2) > 1e-10 {\n        val mid = (x1 + x2) / 2.0\n        if poly(xs, mid) == 0.0 {\n            return mid\n        } else if poly(xs, mid) * poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2.0\n}\n",
            "fun sortThird(l: List<Int>): List<Int> {\n    val sorted = l.sorted()\n    val map = Array(l.size, -1)\n    for (i in 0 until l.size) {\n        if (i % 3 == 0) {\n            map[i] = sorted.indexOf(l[i])\n        } else {\n            map[i] = l[i]\n        }\n    }\n    map.toList()\n}\n",
            "fun listUnique(l: List<Int>): List<Int> {\n    val set = l.stream()\n        .collect(Collectors.filteringBy(Set<Int>(Set()).add))\n        .sorted()\n        .toList()\n    return set\n}\n",
            "fun maxElement(l: List<Int>): Int {\n    if (l.isEmpty) {\n        return 0\n    }\n    return l.max()\n}\n",
            "fun fizzBuzz(n: Int): Int {\n    var cnt = 0\n    for (i in 0 until n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString().count(\"7\")\n        }\n    }\n    return cnt\n}\n",
            "fun sortEven(l: List<Int>): List<Int> {\n    val sortedEven = l.filter(it.isEven).sorted()\n    val oddIndices = (0..<l.count - 1).filter { it % 2 != 0 }\n    val result = l.clone()\n    for (i in oddIndices) {\n        result[i] = sortedEven[i / 2]\n    }\n    return result\n}\n",
            "fun encodeCyclic(s: String): String {\n    val blocks = s.chunks(3)\n    var result = \"\"\n    for (i in 0 until blocks.size) {\n        if (i + 1 < blocks.size) {\n            result += blocks[i+1]\n        }\n        result += blocks[i][1]\n    }\n    return result\n}\nfun decodeCyclic(s: String): String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2..floor(sqrt(n)).toInt) {\n        if (n % i == 0) return false\n    }\n    return true\n}\nvar fib = [0, 1]\nvar cnt = 0\nwhile (cnt < n) {\n    fib = [fib[1], fib[0] + fib[1]]\n    if (isPrime(fib[1])) {\n        cnt++\n    }\n}\nreturn fib[1]\n",
            "fun triplesSumToZero(l: List<Int>): Boolean {\n    for (i in 0..l.size - 1) {\n        for (j in i + 1..l.size - 1) {\n            for (k in j + 1..l.size - 1) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "fun carRaceCollision(n: Int): Int {\n    return n * n\n}\n",
            "fun incrList(l: List<Int>): List<Int> {\n    return l.map { i -> i + 1 }\n}\n",
            "fun pairsSumToZero(l: List<Int>): Boolean {\n    val seen = set<Int>()\n    for (num in l) {\n        if (-num in seen) {\n            return true\n        }\n        seen.add(num)\n    }\n    return false\n}\n",
            "fun changeBase(x: Int, bas: Int): String {\n    val digits = mutableList<Char>()\n    while (x > 0) {\n        digits.addFirst(x % bas + '0'.toInt)\n        x /= bas\n    }\n    return digits.reverse().join()\n}\n",
            "fun triangleArea(a: Int, h: Int): Double {\n    return a.toDouble * h.toDouble / 2\n}\n",
            "fun fib4(n: Int): Int {\n    val fib = arrayOf(0, 0, 2, 0)\n    for (i in 4 until n) {\n        fib[i % 4] = fib.sum()\n    }\n    return fib[n % 4]\n}\n",
            "fun median(l: List<Double>): Double {\n    val sl = l.sorted()\n    if (l.size % 2 != 0) {\n        return sl[l.size / 2]\n    } else {\n        return (sl[l.size / 2] + sl[l.size / 2 - 1]) / 2.0\n    }\n}\n",
            "fun isPalindrome(txt: String): Boolean {\n    return txt == txt.reversed()\n}\n",
            "fun modp(n: Int, p: Int): Int {\n    var ret = 1\n    for (i in 0 until n) {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "fun encodeShift(s: String): String {\n    val result = arrayOfNulls(s.length)\n    for (i in 0 until s.length) {\n        val ch = s[i]\n        val codePoint = ch.codePoint\n        val shiftedCodePoint = Int.bitwiseOr(codePoint + 5, 0x20)\n        result[i] = String.forCodePoint(shiftedCodePoint)\n    }\n    result.join()\n}\nfun decodeShift(s: String): String {\n    val result = arrayOfNulls(s.length)\n    for (i in 0 until s.length) {\n        val ch = s[i]\n        val codePoint = ch.codePoint\n        val shiftedCodePoint = Int.bitwiseOr(codePoint - 21, 0x20)\n        result[i] = String.forCodePoint(shiftedCodePoint)\n    }\n    result.join()\n}\n",
            "fun removeVowels(txt: String): String {\n    val vowels = \"aeiouAEIOU\"\n    return txt.filterNot { it in vowels }\n}\n",
            "fun belowThreshold(l: List<Int>, t: Int): Boolean {\n    return l.all { x -> x < t }\n}\n",
            "fun add(x: Int, y: Int): Int {\n    return x + y\n}\n",
            "fun sameChars(s0: String, s1: String): Boolean {\n    return set(s0) == set(s1)\n}\n",
            "fun fib(n: Int): Int {\n    if (n <= 1) {\n        return n\n    } else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n",
            "fun correctBracketing(brackets: String): Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == \"<\") depth++\n        if (b == \">\") depth--\n        if (depth < 0) return false\n    }\n    return depth == 0\n}\n",
            "fun monotonic(l: List<Int>): Boolean {\n    val diff = l.drop(1).map { y -> y - x }\n    return diff.all { x -> x <= 0 } || diff.all { x -> x >= 0 }\n}\n",
            "fun common(l1: List<Int>, l2: List<Int>): List<Int> {\n    val set1 = l1.toSet()\n    val set2 = l2.toSet()\n    return set1.intersection(set2).sorted()\n}\n",
            "fun largestPrimeFactor(n: Int): Int {\n    var i = 2\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i\n        } else {\n            i += 1\n        }\n    }\n    return n\n}\n",
            "fun sumToN(n: Int): Int {\n    return Int.range(n + 1).sum()\n}\n",
            "fun correctBracketing(brackets: String): Boolean {\n    var depth = 0\n    for (b in brackets) {\n        if (b == \"(\") depth++ else if (b == \")\") depth--\n        if (depth < 0) return false\n    }\n    return depth == 0\n}\n",
            "fun derivative(xs: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in 1 until xs.size) {\n        result.add(xs[i] * i)\n    }\n    return result\n}\n",
            "fun fibfib(n: Int): Int {\n    if (n <= 1) {\n        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 1\n    for (i in 2..n) {\n        a, b, c = b, c, a + b + c\n    }\n    return c\n}\n",
            "fun vowelsCount(s: String): Int {\n    val vowels = \"aeiou\"\n    var cnt = 0\n    for (i in 0 until s.length) {\n        if (s[i].toLowerCase() in vowels || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt++\n        }\n    }\n    return cnt\n}\n",
            "fun circularShift(x: Int, shift: Int): String {\n    val xStr = x.toString()\n    if (shift > xStr.length) {\n        return xStr.reverse()\n    } else {\n        return xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift)\n    }\n}\n",
            "fun digitSum(s: String): Int {\n    return IntStream.of(s.filter(CJK_UNIFIED_IDEOGRAPH_PATTERN.matches(0, c.charAt(0))))\n        .map(c -> Int.valueOf(String.valueOf(c).code))\n        .sum()\n}\n",
            "fun fruitDistribution(s: String, n: Int): Int {\n    val words = s.split(\" \")\n    val apples = words[words.indexOf(\"apples\") - 1].toInt\n    val oranges = words[words.indexOf(\"oranges\") - 1].toInt\n    return n - apples - oranges\n}\n",
            "fun pluck(arr: List<Int>): List<Int> {\n    if (arr.isEmpty) {\n        return @EmptyList\n    }\n    val evens = arr.filter { it % 2 == 0 }\n    if (evens.isEmpty) {\n        return @EmptyList\n    }\n    val minEven = evens.min()\n    return [minEven, arr.indexOf(minEven)]\n}\n",
            "fun search(lst: List<Int>): Int {\n    val freqs = arrayOf(Int::class.klass, 0).applyIndexed { i -> freqs[i] }\n    for (i in lst) {\n        freqs[i] += 1\n    }\n    val goodVals = (freqs.filter { it.value >= it.key }).keys.sorted(Comparator.comparing { a, b -> b.compareTo(a) })\n    return goodVals.isEmpty ? -1 : goodVals[0]\n}\n",
            "fun strangeSortList(lst: List<Int>): List<Int> {\n    val sl = lst.sorted()\n    val result = mutableListOf<Int>()\n    var left = 0\n    var right = sl.size - 1\n    while (left <= right) {\n        result.add(sl[left])\n        left += 1\n        if (left <= right) {\n            result.add(sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "fun triangleArea(a: Int, b: Int, c: Int): Double {\n    if (a + b > c && a + c > b && b + c > a) {\n        val s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        return -1.0\n    }\n}\n",
            "fun willItFly(q: List<Int>, w: Int): Boolean {\n    if (q.isEmpty) {\n        return false\n    }\n    val isPalin = q.all {\n        q[i] == q[q.size - i - 1]\n    }\n    val total = q.sum()\n    return isPalin && total <= w\n}\n",
            "fun smallestChange(arr: List<Int>): Int {\n    var ans = 0\n    for (i in 0 until arr.size / 2) {\n        if (arr[i] != arr[arr.size - i - 1]) {\n            ans++\n        }\n    }\n    return ans\n}\n",
            "fun totalMatch(lst1: List<String>, lst2: List<String>): List<String> {\n    val cnt1 = lst1.map { s -> s.length }.sum()\n    val cnt2 = lst2.map { s -> s.length }.sum()\n    return if (cnt1 <= cnt2) else lst2\n}\n",
            "fun isMultiplyPrime(a: Int): Boolean {\n    if (a < 2) {\n        return false\n    }\n    for (i in 2..floor(sqrt(a)) {\n        if (a % i == 0) {\n            var j = a / i\n            while (a % i == 0) {\n                a /= i\n                cnt++\n            }\n            if (cnt != 3) {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
            "fun isSimplePower(x: Int, n: Int): Boolean {\n    if (n < 2) {\n        return x == n\n    }\n    var tmp = 1\n    while (tmp < x) {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "fun isCube(a: Int): Boolean {\n    val root = if (a >= 0) pow(a, 1.0 / 3.0).toInt else -pow(-a, 1.0 / 3.0).toInt\n    return root * root * root == a\n}\n",
            "fun hexKey(num: String): Int {\n    return num.count(\"2357BD\")\n}\n",
            "fun decimalToBinary(dec: Int): String {\n    val binary = dec.toBinaryString()\n    return \"db${binary}db\"\n}\n",
            "fun isHappy(s: String): Boolean {\n    if (s.length < 3) {\n        return false\n    }\n    for (i in 0 until s.length - 2) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun numericalLetterGrade(grades: List<Double>): List<String> {\n    val result = mutableListOf<String>()\n    for (g in grades) {\n        when (g) {\n            case 4.0:\n                result.add(\"A+\")\n            case 3.7...4.0:\n                result.add(\"A\")\n            case 3.3...3.7:\n                result.add(\"A-\")\n            case 3.0...3.3:\n                result.add(\"B+\")\n            case 2.7...3.0:\n                result.add(\"B\")\n            case 2.3...2.7:\n                result.add(\"B-\")\n            case 2.0...2.3:\n                result.add(\"C+\")\n            case 1.7...2.0:\n                result.add(\"C\")\n            case 1.3...1.7:\n                result.add(\"C-\")\n            case 1.0...1.3:\n                result.add(\"D+\")\n            case 0.7...1.0:\n                result.add(\"D\")\n            case 0.0...0.7:\n                result.add(\"D-\")\n            default:\n                result.add(\"E\")\n        }\n    }\n    return result\n}\n",
            "fun primeLength(s: String): Boolean {\n    val length = s.length\n    if (length < 2) {\n        return false\n    }\n    for (i in 2..floor(sqrt(length.toDouble).toInt)) {\n        if (length % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "fun startsOneEnds(n: Int): Int {\n    if (n == 1) {\n        return 1\n    }\n    return 2 * 9 * (10 ** (n - 2))\n}\n",
            "fun solve(n: Int): String {\n    val digitsSum = (n.toString().toInt.map { it.toInt() }.toList()).sum()\n    return String(Integer(digitsSum).toByteArray())\n}\n",
            "fun add(lst: List<Int>): Int {\n    return lst.filter { i, x -> i % 2 == 1 && x % 2 == 0 }.sum()\n}\n",
            "fun antiShuffle(s: String): String {\n    val words = s.split(\" \")\n    val wordList = words.map { word -> word.sorted().toCharArray() }\n    val result = wordList.map { word -> String(word) }.join(\" \")\n    return result\n}\n",
            "fun getRow(lst: List<List<Int>>, x: Int): List<List<Int>> {\n    val coords = mutableListOf<List<Int>>()\n    for (i in 0 until lst.size) {\n        for (j in 0 until lst[i].size) {\n            if (lst[i][j] == x) {\n                coords.add(arrayOf(i, j))\n            }\n        }\n    }\n    return sorted(coords, key = { $0.plus(-$1) })\n}\n",
            "fun sortArray(arr: List<Int>): List<Int> {\n    if (arr.isEmpty) {\n        return arr\n    }\n    if ((arr[0] + arr[arr.size - 1]) % 2 == 0) {\n        return arr.sorted { it.isReversed() }\n    } else {\n        return arr.sorted\n    }\n}\n",
            "fun encrypt(s: String): String {\n    val result = arrayOfNulls(s.length)\n    for (i in 0 until s.length) {\n        val shifted = (ord(s[i]) + 4) % 128\n        if (shifted > 122) {\n            shifted -= 26\n        }\n        result[i] = chr(shifted)\n    }\n    return String(result)\n}\n",
            "fun nextSmallest(lst: List<Int>): Int? {\n    val sl = lst.sorted().distinct()\n    return if (sl.size < 2) null else sl[1]\n}\n",
            "fun isBored(s: String): Int {\n    val sentences = s.splitRegex(r\"[.!?]\\s*\")\n    return sentences.filter { it.length >= 2 && it[0..1] == \"I \" }.size\n}\n",
            "fun anyInt(x: Any, y: Any, z: Any): Boolean {\n    if (x is Int && y is Int && z is Int) {\n        if (x + y == z || x + z == y || y + z == x) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun encode(message: String): String {\n    val vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for (ch in message) {\n        if (ch.isLetter) {\n            val ch1 = ch.toUpperCase() if (ch.isLowerCase) else ch.toLowerCase()\n            if (vowels.contains(ch1.toString())) {\n                ch1 = ch1.toCharSequence().toString()\n            }\n            result += ch1\n        } else {\n            result += ch\n        }\n    }\n    return result\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) {\n        return false\n    }\n    for (i in 2..floor(sqrt(n))) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\nfun skjkasdkd(lst: List<Int>): Int {\n    val primes = lst.filter { isPrime(it) }\n    if (primes.isEmpty) {\n        return 0\n    }\n    val largest = primes.max().toString()\n    return largest.map { Int.parseInt(it) }.sum()\n}\n",
            "fun checkDictCase(d: Map<String, String>): Boolean {\n    if (d.isEmpty) {\n        return false\n    }\n    return d.keys.all { c => c.isUpperCase() } || d.keys.all { c => c.isLowerCase() }\n}\n",
            "fun countUpTo(n: Int): List<Int> {\n    val primes = mutableListOf<Int>()\n    for (num in 2 until n) {\n        if (primes.all { !@a.mod(num) == 0 }) {\n            primes.add(num)\n        }\n    }\n    return primes\n}\n",
            "fun multiply(a: Int, b: Int): Int {\n    return (a % 10) * (b % 10)\n}\n",
            "fun countUpper(s: String): Int {\n    val vowels = \"AEIOU\"\n    return s.count { i, c ->\n        i % 2 == 0 and c in vowels\n    }\n}\n",
            "fun closestInteger(value: String): Int {\n    val num = value.toDouble()\n    if (num >= 0) {\n        return (num + 0.5).toInt()\n    } else {\n        return (num - 0.5).toInt()\n    }\n}\n",
            "fun makeAPile(n: Int): List<Int> {\n    return (n + 2 * IntRange(0, n)).toList()\n}\n",
            "fun wordsString(s: String): List<String> {\n    val regex = \"\"\"\\W+\"\"\".toRegex()\n    return regex.split(s).filter { it.isNotEmpty() }\n}\n",
            "fun chooseNum(x: Int, y: Int): Int {\n    if (y > x) {\n        return -1\n    }\n    if (y % 2 == 0) {\n        return y\n    }\n    return y - 1 if (x != y) else -1\n}\n",
            "fun roundedAvg(n: Int, m: Int): String? {\n    if (n > m) {\n        return null\n    }\n    val rAvg = ((m + n) / 2.0 + 0.5).toInt().toBinaryString()\n    return rAvg\n}\n",
            "fun uniqueDigits(x: List<Int>): List<Int> {\n    val unique = mutableSet<Int>()\n    for (num in x) {\n        if (allDigitsOdd(num)) {\n            unique.add(num)\n        }\n    }\n    return unique.sorted()\n}\nfun allDigitsOdd(num: Int): Boolean {\n    val digits = num.toString().toCharArray()\n    return digits.all { it % 2 != 0 }\n}\n",
            "fun byLength(arr: List<Int>): List<String> {\n    val digitNames = arrayOf(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    val sortedArr = arr.filter { 1 <= it <= 9 }.sorted(reverse = true)\n    return digitNames[sortedArr - 1].toList\n}\n",
            "fun f(n: Int): List<Int> {\n    val nums = list(1..n)\n    return nums.mapIndexed { i, _ ->\n        if (i % 2 != 0) nums.take(i).sum() else (1 to 1 + i).reduce(Int::operator *)\n    }\n}\n",
            "fun evenOddPalindrome(n: Int): List<Int> {\n    var evenCnt = 0\n    var oddCnt = 0\n    for (i in 1..n) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCnt++\n            } else {\n                oddCnt++\n            }\n        }\n    }\n    return listOf(evenCnt, oddCnt)\n}\nfun isPalindrome(n: Int): Boolean {\n    return n == reverse(n)\n}\nfun reverse(n: Int): Int {\n    var rev = 0\n    while (n != 0) {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return rev\n}\n",
            "fun digitsSum(n: Int): Int {\n    val nStr = n.toString()\n    if (n >= 0) {\n        return nStr.chars.filter { it.toInt >= 0 }.sum()\n    } else {\n        return nStr.substring(1, 2).toInt * 2 + digitsSum(n.abs())\n    }\n}\nfun countNums(arr: List<Int>): Int {\n    return arr.filter { digitsSum(it) > 0 }.size\n}\n",
            "fun moveOneBall(arr: List<Int>): Boolean {\n    if (arr.isEmpty) {\n        return true\n    }\n    val sortedArr = arr.sorted()\n    for (i in 0 until arr.size) {\n        if (arr[i:] == sortedArr[:arr.size - i] && arr[:i] == sortedArr[arr.size - i:]) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun canExchange(lst1: List<Int>, lst2: List<Int>): String {\n    val oddCnt = lst1.count { num -> num % 2 != 0 }\n    val evenCnt = lst2.count { num -> num % 2 == 0 }\n    return \"YES\" if evenCnt >= oddCnt else \"NO\"\n}\n",
            "fun histogram(test: String): Map<String, Int> {\n    val words = test.split(\"\\\\s+\")\n    val freq = words.reduce(ofMap<String, Int>()) { acc, it ->\n        acc[it] = acc.getOrDefault(it, 0) + 1\n    }\n    val maxFreq = freq.values.max()\n    return freq.filter { it.value == maxFreq }\n}\n",
            "fun reverseDelete(s: String, c: String): List<String> {\n    val s1 = s.filterNot { it == c }.reversed()\n    return listOf(s1, \"yes\" if isPalindrome(s1) else \"no\")\n}\nfun isPalindrome(s: String): Boolean {\n    return s == s.reversed()\n}\n",
            "fun oddCount(lst: List<String>): List<String> {\n    val result = mutableList<String>()\n    for (s in lst) {\n        val n = s.count { c in ord(c) % 2 == 1 }\n        result.add(\"the number of odd elements in the string \" + n + \" in the input.\")\n    }\n    return result\n}\n",
            "fun minSubArraySum(nums: List<Int>): Int {\n    var minSum = Int.maxValue\n    var curSum = 0\n    for (n in nums) {\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if (minSum == 0) {\n        minSum = nums.min()\n    }\n    return minSum\n}\n",
            "fun maxFill(grid: List<List<Int>>, capacity: Int): Int {\n    var result = 0\n    for (i in 0 until grid.size) {\n        var fill = 0\n        for (j in 0 until grid[i].size) {\n            fill += grid[i][j]\n            if (fill > capacity) {\n                result += ceil(grid[i].size.toDouble / capacity)\n                break\n            }\n        }\n        result += if (fill == 0) 0 else ceil(grid[i].size.toDouble / fill)\n    }\n    return result\n}\n",
            "fun countOnes(num: Int): Int {\n    return Integer.bitCount(num)\n}\nfun sortArray(arr: List<Int>): List<Int> {\n    return arr.sorted(Comparator { $0, $1 in\n        val count1 = countOnes(<mask_1><sep><mask_1>`$0`)\n        val count2 = countOnes(`$1`)\n        count1 - count2\n    })\n}\n",
            "fun selectWords(s: String, n: Int): List<String> {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\"\n    val words = s.split(\" \")\n    return words.filter { w in words.contains(w) && w.count { c in consonants.contains(c.lower()) } == n }\n}\n",
            "fun getClosestVowel(word: String): String {\n    val vowels = \"aeiouAEIOU\"\n    for (i in word.indices.reverse() step -1) {\n        if (vowels.contains(word[i])) {\n            for (j in i - 1 to i + 2 step 1) {\n                if (!vowels.contains(word[j])) {\n                    return word[i]\n                }\n            }\n        }\n    }\n    return \"\"\n}\n",
            "fun matchParens(lst: List<String>): String {\n    val s1 = lst[0] + lst[1]\n    val s2 = lst[1] + lst[0]\n    val is1Valid = check(s1)\n    val is2Valid = check(s2)\n    if (is1Valid || is2Valid) {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }\n}\nfun check(s: String): Boolean {\n    var depth = 0\n    for ch in s {\n        if (ch == \"(\") {\n            depth++\n        } else {\n            depth--\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "fun maximum(arr: List<Int>, k: Int): List<Int> {\n    if (k == 0) {\n        return emptyList()\n    }\n    return arr.sorted().subList(arr.size - k...arr.size).map { it }\n}\n",
            "fun solution(lst: List<Int>): Int {\n    return lst.filter { i, x -> i % 2 == 0 && x % 2 != 0 }.sum()\n}\n",
            "fun addElements(arr: List<Int>, k: Int): Int {\n    return arr.slice(0, k).filter { len($0).toCharArray().length <= 2 }.sum()\n}\n",
            "fun getOddCollatz(n: Int): List<Int> {\n    var collatz = listOf(1)\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.add(n)\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    return collatz.sorted()\n}\n",
            "fun validDate(date: String): Boolean {\n    if (date.length != 10 || date[2] != \"-\" || date[5] != \"-\") {\n        return false\n    }\n    val m = date.substring(0, 2).toInt\n    val d = date.substring(3, 5).toInt\n    if (m in listOf(1, 3, 5, 7, 8, 10, 12) && d >= 1 && d <= 31) {\n        return true\n    }\n    if (m in listOf(4, 6, 9, 11) && d >= 1 && d <= 30) {\n        return true\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true\n    }\n    return false\n}\n",
            "fun splitWords(txt: String): List<String> {\n    if (txt.contains(\" \")) {\n        return txt.split(\" \")\n    } else if (txt.contains(\",\")) {\n        return txt.split(\",\")\n    } else {\n        return listOf(str(txt.count { c in\n            c.isLower && ord(c) % 2 == 0\n        }))\n    }\n}\n",
            "fun isSorted(lst: List<Int>): Boolean {\n    val freq = ArrayList<Int, Int>()\n    for (i in lst) {\n        freq.add(i, freq.get(i, 0) + 1)\n    }\n    return freq.max { it.value <= 2 }?.key == lst.sorted().last()\n}\n",
            "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2..floor(sqrt(n))) {\n        if (n % i == 0) return false\n    }\n    return true\n}\nfun intersection(interval1: List<Int>, interval2: List<Int>): String {\n    val l = max(interval1[0], interval2[0])\n    val r = min(interval1[1], interval2[1])\n    val length = r - l\n    if (length <= 0) return \"NO\"\n    if (!isPrime(length)) return \"NO\"\n    return \"YES\"\n}\n",
            "fun prodSigns(arr: List<Int>): Int? {\n    if (arr.isEmpty) {\n        return null\n    }\n    if (arr.contains(0)) {\n        return 0\n    }\n    val sign = arr.stream().filter { it < 0 }.count() % 2 == 1 ? -1 : 1\n    return sign * arr.stream().mapToInt { it }.sum()\n}\n",
            "fun minPath(grid: List<List<Int>>, k: Int): List<Int> {\n    val n = grid.size\n    var minVal = n * n + 1\n    for (i in 0 until n) {\n        for (j in 0 until n) {\n            if (grid[i][j] == 1) {\n                minVal = min(grid[i - 1][j], grid[i][j - 1], grid[i + 1][j], grid[i][j + 1])\n            }\n        }\n    }\n    var result = ArrayList<Int>(n)\n    for (i in 0 until k) {\n        if (i % 2 == 0) {\n            result.add(1)\n        } else {\n            result.add(minVal)\n        }\n    }\n    return result\n}\n",
            "fun tri(n: Int): List<Int> {\n    if (n == 0) {\n        return listOf(1)\n    }\n    var seq = listOf(1, 3)\n    for (i in 2 to n) {\n        if (i % 2 == 0) {\n            seq.add(i / 2 + 1)\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "fun digits(n: Int): Int {\n    val strN = n.toString()\n    val odds = strN.filter { it == '1' || it == '3' || it == '5' || it == '7' || it == '9' }\n    val product = odds.reduce(1) { acc, element -> acc * element }\n    return product if (odds.isNotEmpty) else 0\n}\n",
            "fun isNested(s: String): Boolean {\n    var cnt = 0\n    var openIdx = []\n    var closeIdx = []\n    for (i, ch) in s.indices().withIndex() {\n        if (ch == '[') {\n            openIdx.append(i)\n        } else if (ch == ']') {\n            closeIdx.append(i)\n        }\n    }\n    closeIdx.reverse()\n    var i = 0\n    for idx in openIdx {\n        if (i < closeIdx.size && idx < closeIdx[i]) {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\n",
            "fun sumSquares(lst: List<Double>): Int {\n    return lst.map { Math.pow(Math.ceil(it), 2) }.sum().toInt()\n}\n",
            "fun checkIfLastCharIsALetter(txt: String): Boolean {\n    if (txt.isEmpty) {\n        return false\n    }\n    val last = txt.substring(txt.lastIndexOf(' ') + 1)\n    return last.isNotEmpty() && last[0].isLetter\n}\n",
            "fun canArrange(arr: List<Int>): Int {\n    if (arr.size <= 1) {\n        return -1\n    }\n    val idx = arr.indices.filter(i => arr[i] < arr[i - 1]).toList\n    return if (idx.isEmpty) -1 else idx.max()\n}\n",
            "fun largestSmallestIntegers(lst: List<Int>): List<Int?> {\n    val neg = lst.filter { it < 0 }\n    val pos = lst.filter { it > 0 }\n    val maxNeg = neg.max() if neg.isNotEmpty() else null\n    val minPos = pos.min() if pos.isNotEmpty() else null\n    return [maxNeg, minPos]\n}\n",
            "fun compareOne(a: Any, b: Any): Double? {\n    val a1 = when (a) {\n        isinstance(Double::class, Double::class) -> Double(a) // Double(a) is a short-hand for Double::of(a)\n        isinstance(String::class, String::class) -> a.replace(',', '.').toDouble()\n        isinstance(Int::class, Int::class) -> Double(a)\n        isinstance(Float::class, Float::class) -> a\n        else -> throw RuntimeException(\"Type Error\")\n    }\n    val b1 = when (b) {\n        isinstance(Double::class, Double::class) -> Double(b)\n        isinstance(String::class, String::class) -> b.replace(',', '.').toDouble()\n        isinstance(Int::class, Int::class) -> Double(b)\n        isinstance(Float::class, Float::class) -> b\n        else -> throw RuntimeException(\"Type Error\")\n    }\n    if (a1 == b1) {\n        return null\n    } else if (a1 > b1) {\n        return a1\n    } else {\n        return b1\n    }\n}\n",
            "fun isEqualToSumEven(n: Int): Boolean {\n    return n % 2 == 0 && n >= 8\n}\n",
            "fun specialFactorial(n: Int): Int {\n    var fact = 1\n    var result = 1\n    for (i in 1 until n + 1) {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "fun fixSpaces(txt: String): String {\n    return txt.replacePattern(r\"\\s{3,}\", \"-\").replace(\" \", \"_\")\n}\n",
            "fun fileNameCheck(fileName: String): String {\n    val lst = fileName.split(\".\")\n    if (lst.size != 2) {\n        return \"No\"\n    }\n    if (lst[1] != \"txt\" && lst[1] != \"exe\" && lst[1] != \"dll\") {\n        return \"No\"\n    }\n    if (lst[0].isEmpty() || !lst[0][0].isAlpha()) {\n        return \"No\"\n    }\n    if (lst[0].containsAny(\"0123456789\".toSet()) && lst[0].matches(\"[a-zA-Z]+[0-9]{0,3}\")) {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "fun sumSquares(lst: List<Int>): Int {\n    var result = 0\n    for (i in 0 until lst.size) {\n        if (i % 3 == 0) {\n            result += pow(lst[i], 2)\n        } else if (i % 4 == 0) {\n            result += pow(lst[i], 3)\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "fun isPrime(n: Int): Boolean {\n    return n <= 1 || (n > 2 && n % 2 != 0 && n % 3 != 0 && n % 5 != 0 && n % 7 != 0)\n}\nfun wordsInSentence(sentence: String): String {\n    val words = sentence.split(\" \")\n    return words.filter { isPrime(it.length) }.join(\" \")\n}\n",
            "fun simplify(x: String, n: String): Boolean {\n    val xs = x.split(\"/\")\n    val ns = n.split(\"/\")\n    val num = xs[0].toInt() * ns[0].toInt()\n    val den = xs[1].toInt() * ns[1].toInt()\n    return num % den == 0\n}\n",
            "fun orderByPoints(nums: List<Int>): List<Int> {\n    return nums.sorted(key = { digitsSum(it) })\n}\nfun digitsSum(n: Int): Int {\n    val nStr = n.toString()\n    if (n >= 0) {\n        return nStr.chars.filter { it != '-' }.map { it.toInt() }.sum()\n    } else {\n        return int(nStr.substring(1, 3)) * 2 + digitsSum(n.abs())\n    }\n}\n",
            "fun specialFilter(nums: List<Int>): Int {\n    val odds = \"13579\"\n    return nums.filter { n ->\n        n > 10 && n % 2 == 1 && odds.contains(String(n).charsAt(0))\n    }.size\n}\n",
            "fun getMaxTriples(n: Int): Int {\n    var count = 0\n    var c0 = 0\n    var c1 = 0\n    var c2 = 0\n    for (i in 1 to n) {\n        val a = i * i - i + 1\n        when (a % 3) {\n            case 0:\n                c0 += 1\n                count += c0 * c1 * c2\n            case 1:\n                c1 += 1\n                count += (c0 * (c0 - 1) * (c0 - 2) + c1 * (c1 - 1) * (c1 - 2) + c2 * (c2 - 1) * (c2 - 2)) // 6\n            case 2:\n                c2 += 1\n                count += (c0 * (c0 - 1) * (c0 - 2) + c1 * (c1 - 1) * (c1 - 2) + c2 * (c2 - 1) * (c2 - 2)) // 6\n        }\n    }\n    return count\n}\n",
            "fun bf(planet1: String, planet2: String): List<String> {\n    val names = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (!names.contains(planet1) || !names.contains(planet2)) {\n        return emptyList()\n    }\n    val l = names.indexOf(planet1)\n    val r = names.indexOf(planet2)\n    if (l > r) {\n        l, r = r, l\n    }\n    if (l == r) {\n        return emptyList()\n    }\n    return names.subList(l + 1, r)\n}\n",
            "fun sortedListSum(lst: List<String>): List<String> {\n    val result = lst.filter { s -> len(s) % 2 == 0 }.sorted(Comparator { s1, s2 -> s1.length() < s2.length() || (s1.length() == s2.length() && s1 > s2) })\n    return result\n}\n",
            "fun xOrY(n: Int, x: Int, y: Int): Int {\n    if (n < 2) {\n        return y\n    }\n    for (i in 2..floor(sqrt(n))){\n        if (n % i == 0) {\n            return y\n        }\n    }\n    return x\n}\n",
            "fun doubleTheDifference(lst: List<Double>): Int {\n    val oddSquares = lst.filter { it >= 0 && it % 2 == 1 }.map { it * it }\n    return oddSquares.sum().toInt()\n}\n",
            "fun compare(game: List<Int>, guess: List<Int>): List<Int> {\n    val result = mutableListof()\n    zip(game, guess) { gameElement, guessElement in\n        result.add(abs(gameElement - guessElement))\n    }\n    return result\n}\n",
            "fun strongestExtension(className: String, extensions: List<String>): String {\n    var maxS = Int.MIN_VALUE\n    var maxExt = \"\"\n    for (ext in extensions) {\n        val upper = ext.count { c in Character.isUpperCase(c) }\n        val lower = ext.count { c in Character.isLowerCase(c) }\n        val s = upper - lower\n        if (s > maxS) {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return \"${className}.${maxExt}\"\n}\n",
            "fun cycpatternCheck(a: String, b: String): Boolean {\n    if (a.length < b.length) {\n        return false\n    }\n    for (i in b.length to a.length) {\n        if (a.contains(b.concat(i).concat(b))) {\n            return true\n        }\n    }\n    return false\n}\n",
            "fun evenOddCount(num: Int): List<Int> {\n    val ds = num.toString().toCharArray().filter { it % 2 == 0 }.count\n    return [ds, num.toString().toCharArray().size - ds]\n}\n",
            "fun intToMiniRoman(num: Int): String {\n    val values = arrayOf(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    val numerals = arrayOf(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    var res = \"\"\n    for (i in 0 until values.size) {\n        while (num >= values[i]) {\n            res += numerals[i]\n            num -= values[i]\n        }\n    }\n    return res\n}\n",
            "fun rightAngleTriangle(a: Int, b: Int, c: Int): Boolean {\n    val s = arrayOf(a, b, c)\n    return (s[0] * s[0] + s[1] * s[1] == s[2] * s[2])\n}\n",
            "fun findMax(words: List<String>): String {\n    var maxCnt = 0\n    var maxW = \"\"\n    for (w in words) {\n        val cnt = w.distinct().size\n        if (cnt > maxCnt) {\n            maxCnt = cnt\n            maxW = w\n        } else if (cnt == maxCnt) {\n            maxW = min(maxW, w)\n        }\n    }\n    return maxW\n}\n",
            "fun eat(num: Int, need: Int, remaining: Int): List<Int> {\n    if (need <= remaining) {\n        return listOf(num + need, remaining - need)\n    } else {\n        return listOf(num + remaining, 0)\n    }\n}\n",
            "fun doAlgebra(operators: List<String>, operands: List<Int>): Int {\n    val ops = operators.copy()\n    val nums = operands.copy()\n    var i = ops.size - 1\n    while (i >= 0) {\n        if (ops[i] == \"*\") {\n            nums[i] *= nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        } else if (ops[i] == \"/\") {\n            nums[i] /= nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        } else if (ops[i] == \"//\") {\n            nums[i] /= nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        } else if (ops[i] == \"%\") {\n            nums[i] %= nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        } else if (ops[i] == \"+\") {\n            nums[i] += nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        } else if (ops[i] == \"-\") {\n            nums[i] -= nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        } else if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        }\n        i -= 1\n    }\n    var i = 0\n    while (i < ops.size) {\n        if (ops[i] == \"+\") {\n            nums[i] += nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        } else if (ops[i] == \"-\") {\n            nums[i] -= nums[i + 1]\n            nums.removeAt(i + 1)\n            ops.removeAt(i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "fun solve(s: String): String {\n    if (!s.any { it.isUpperCase }) {\n        return s.reverse()\n    }\n    val result = mutableList<Char>()\n    for (ch in s) {\n        if (!ch.isLetter) {\n            result.add(ch)\n        } else if (ch.isUpperCase) {\n            result.add(ch.toLowerCase())\n        } else {\n            result.add(ch.toUpperCase())\n        }\n    }\n    return result.joinToString()\n}\n",
            "fun stringToMd5(txt: String): String? {\n    if (txt.isEmpty) {\n        return null\n    }\n    val encodedText = StringEscapeUtils.escapeHtml4(txt)\n    val bytes = encodedText.toByteArray(StandardCharsets.UTF_8)\n    val md5 = bytes.md5()\n    val md5Encoded = Md5Encoder.encodeToString(md5)\n    return md5Encoded\n}\n",
            "fun generateIntegers(a: Int, b: Int): List<Int> {\n    val lower = Math.max(2, Math.min(a, b))\n    val upper = Math.min(8, Math.max(a, b))\n    val result = mutableListOf<Int>()\n    for (i in lower..upper) {\n        if (i % 2 == 0) {\n            result.add(i)\n        }\n    }\n    return result\n}\n"
        ],
        "php": [
            "function hasCloseElements ($numbers, $threshold) {\n    foreach ($numbers as $i => $num1) {\n        foreach ($numbers as $j => $num2) {\n            if ($i !== $j && abs($num1 - $num2) < $threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "function separateParenGroups ($parenString) {\n    $groups = [];\n    $stk = [];\n    $currentGroup = \"\";\n    $parens = strtolower(preg_replace('/[^a-z0-9]/', '', $parenString));\n    foreach (range(0, strlen($parens)) as $i) {\n        $ch = substr($parens, $i, 1);\n        if ($ch == \"(\") {\n            array_push($stk, $ch);\n            $currentGroup .= $ch;\n        } elseif ($ch == \")\") {\n            if (count($stk) > 0) {\n                array_shift($stk);\n                $currentGroup .= $ch;\n                if (count($stk) == 0) {\n                    array_push($groups, $currentGroup);\n                    $currentGroup = \"\";\n                }\n            } else {\n                $currentGroup .= $ch;\n            }\n        }\n    }\n    return $groups;\n}\n",
            "function truncateNumber ($num) {\n    return $num - floor($num);\n}\n",
            "function belowZero ($operations) {\n    $balance = 0;\n    foreach ($operations as $op) {\n        $balance += $op;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function meanAbsoluteDeviation ($numbers) {\n    $mean = array_sum(numbers) / count(numbers);\n    $deviation = array_sum(array_map(function($x) use ($mean) { return abs($x - $mean); }, numbers)) / count(numbers);\n    return $deviation;\n}\n",
            "function intersperse ($numbers, $delimiter) {\n    $result = [];\n    foreach ($numbers as $num) {\n        if ($result) {\n            $result[] = $delimiter;\n        }\n        $result[] = $num;\n    }\n    return $result;\n}\n",
            "function parseNestedParens ($parenString) {\n    $result = [];\n    $parenGroups = explode(\" \", $parenString);\n    foreach ($parenGroups as $group) {\n        $maxDepth = 0;\n        $depth = 0;\n        foreach (str_split($group) as $ch) {\n            if ($ch == \"(\") {\n                $depth++;\n                $maxDepth = max($maxDepth, $depth);\n            }\n            elseif ($ch == \")\") {\n                $depth--;\n            }\n        }\n        $result[] = $maxDepth;\n    }\n    return $result;\n}\n",
            "function filterBySubstring ($strs, $substring) {\n    return array_filter($strs, function ($s) use ($substring) {\n        return strpos($s, $substring) !== false;\n    });\n}\n",
            "function sumProduct ($numbers) {\n    $nSum = array_sum($numbers);\n    $nProduct = array_reduce($numbers, function ($a, $b) {\n        return $a * $b;\n    }, 1);\n    return [$nSum, $nProduct];\n}\n",
            "function rollingMax ($numbers) {\n    $maxSoFar = floatval(\"-inf\");\n    $result = [];\n    foreach ($numbers as $num) {\n        $maxSoFar = max($maxSoFar, $num);\n        $result[] = $maxSoFar;\n    }\n    return $result;\n}\n",
            "function isPalindrome ($s) {\n    return strrev($s) == $s;\n}\nfunction makePalindrome ($s) {\n    if (isPalindrome($s)) {\n        return $s;\n    }\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (isPalindrome($s[$i:])) {\n            return $s . strrev($s[:$i]);\n        }\n    }\n    return \"\";\n}\n",
            "function stringXor ($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i] == $b[$i] ? \"0\" : \"1\";\n    }\n    return $result;\n}\n",
            "function longest ($strs) {\n    if (empty($strs)) {\n        return null;\n    }\n    $longest_s = $strs[0];\n    foreach ($strs as $s) {\n        if (strlen($s) > strlen($longest_s)) {\n            $longest_s = $s;\n        }\n    }\n    return $longest_s;\n}\n",
            "function greatestCommonDivisor ($a, $b) {\n    if ($b == 0) {\n        return $a;\n    }\n    else {\n        return greatestCommonDivisor($b, $a % $b);\n    }\n}\n",
            "function allPrefixes ($s) {\n    $prefixes = [];\n    for ($i = 0; $i <= strlen($s); $i++) {\n        $prefixes[] = substr($s, 0, $i + 1);\n    }\n    return $prefixes;\n}\n",
            "function stringSequence ($n) {\n    return implode(\" \", range(1, $n + 1));\n}\n",
            "function countDistinctCharacters ($s) {\n    return strlen(preg_replace('/[^\\w]/s', '', $s));\n}\n",
            "function parseMusic ($musicString) {\n    $durations = [\n        \"o\" => 4,\n        \"o|\" => 2,\n        \".|\" => 1,\n    ];\n    $notes = explode(\" \", $musicString);\n    return array_map(function (<mask_1><sep><mask_1> $note ) use $durations {\n        return $durations[$note];\n    }, $notes);\n}\n",
            "function howManyTimes ($s, $substring) {\n    $times = 0;\n    for ($i = 0; $i < strlen($s) - strlen($substring) + 1; $i++) {\n        if (substr($s, $i, strlen($substring)) == $substring) {\n            $times++;\n        }\n    }\n    return $times;\n}\n",
            "function sortNumbers ($numbers) {\n    $numDict = [\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n    ];\n    $numList = array_filter(explode(\" \", $numbers), function ($word) use ($numDict) {\n        return in_array($word, $numDict);\n    });\n    sort($numList, function ($a, $b) use ($numDict) {\n        return $numDict[$a] - $numDict[$b];\n    });\n    return implode(\" \", $numList);\n}\n",
            "function findClosestElements ($numbers) {\n    sort($numbers);\n    $minDiff = INF;\n    $closestPair = [];\n    for ($i = 1; $i < count($numbers); $i++) {\n        $diff = $numbers[$i] - $numbers[$i - 1];\n        if ($diff < $minDiff) {\n            $minDiff = $diff;\n            $closestPair = [$numbers[$i - 1], $numbers[$i]];\n        }\n    }\n    return $closestPair;\n}\n",
            "function rescaleToUnit ($numbers) {\n    $minNum = min($numbers);\n    $maxNum = max($numbers);\n    if ($minNum == $maxNum) {\n        return array_fill(0, count($numbers), 0.0);\n    }\n    $range = $maxNum - $minNum;\n    return array_map(function($num) {\n        return ($num - $minNum) / $range;\n    }, $numbers);\n}\n",
            "function filterIntegers ($values) {\n    return array_filter($values, function ($value) {\n        return is_int($value);\n    }, true);\n}\n",
            "function strLength ($s) {\n    return strlen($s);\n}\n",
            "function largestDivisor ($n) {\n    for ($i = 2; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            return $n // $i;\n        }\n    }\n    return 1;\n}\n",
            "function factorize ($n) {\n    $factors = [];\n    $divisor = 2;\n    while ($divisor <= $n) {\n        if ($n % $divisor == 0) {\n            $factors[] = $divisor;\n            $n /= $divisor;\n        } else {\n            $divisor++;\n        }\n    }\n    return $factors;\n}\n",
            "function removeDuplicates ($numbers) {\n    $counts = array();\n    foreach ($numbers as $num) {\n        if (!isset($counts[$num])) {\n            $counts[$num] = 1;\n        } else {\n            $counts[$num]++;\n        }\n    }\n    $res = [];\n    foreach ($numbers as $num) {\n        if ($counts[$num] == 1) {\n            $res[] = $num;\n        }\n    }\n    return $res;\n}\n",
            "function flipCase ($s) {\n    $result = '';\n    foreach (str_split($s) as $ch) {\n        if (!ctype_alpha($ch)) {\n            $result .= $ch;\n        } elseif (strtolower($ch) == $ch) {\n            $result .= strtoupper($ch);\n        } else {\n            $result .= strtolower($ch);\n        }\n    }\n    return $result;\n}\n",
            "function concatenate ($strs) {\n    return implode(\"\", $strs);\n}\n",
            "function filterByPrefix ($strs, $prefixStr) {\n    return array_filter($strs, function ($str) use ($prefixStr) {\n        return stripos(substr($str, 0, strlen($prefixStr)), $prefixStr) === 0;\n    });\n}\n",
            "function getPositive ($l) {\n    return array_filter($l, function($num) {\n        return $num > 0;\n    });\n}\n",
            "function isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function poly ($xs, $x) {\n    $res = 0.0;\n    for ($i = 0; $i < count($xs); $i++) {\n        $res += $xs[$i] * $x**$i;\n    }\n    return $res;\n}\nfunction findZero ($xs) {\n    $x1 = 1.0;\n    $x2 = -1.0;\n    while (poly($xs, $x1) * poly($xs, $x2) > 0) {\n        $x1 *= 2;\n        $x2 *= 2;\n    }\n    while (abs($x1 - $x2) > 1e-10) {\n        $mid = ($x1 + $x2) / 2;\n        if (poly($xs, $mid) == 0) {\n            return $mid;\n        } else if (poly($xs, $mid) * poly($xs, $x1) < 0) {\n            $x2 = $mid;\n        } else {\n            $x1 = $mid;\n        }\n    }\n    return ($x1 + $x2) / 2;\n}\n",
            "function sortThird ($l) {\n    $sorted_third = sort($l[::3]);\n    $result = [];\n    foreach (range(0, count($l)) as $i) {\n        if ($i % 3 == 0) {\n            $result[] = $sorted_third[$i / 3];\n        } else {\n            $result[] = $l[$i];\n        }\n    }\n    return $result;\n}\n",
            "function listUnique ($l) {\n    return sort($l);\n}\n",
            "function maxElement ($l) {\n    if (empty($l)) {\n        return 0;\n    }\n    return max($l);\n}\n",
            "function fizzBuzz ($n) {\n    $cnt = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            $cnt += strlen(strstr($i, \"7\"));\n        }\n    }\n    return $cnt;\n}\n",
            "function sortEven ($l) {\n    $sortedEven = sort($l[0..count($l):2]);\n    $result = [];\n    foreach ($l as $i => $val) {\n        if ($i % 2 == 0) {\n            $result[] = $sortedEven[$i / 2];\n        } else {\n            $result[] = $val;\n        }\n    }\n    return $result;\n}\n",
            "function encodeCyclic ($s) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($i + 2 > strlen($s) - 1) {\n            $result .= substr($s, $i);\n        } else {\n            $result .= substr($s, $i + 1, 2);\n            $result .= substr($s, $i, 1);\n        }\n    }\n    return $result;\n}\nfunction decodeCyclic ($s) {\n    return encodeCyclic(encodeCyclic($s));\n}\n",
            "function isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction primeFib($n) {\n    $f = [0, 1];\n    $cnt = 0;\n    while ($cnt < $n) {\n        $f = [$f[1], $f[0] + $f[1]];\n        if (isPrime($f[1])) {\n            $cnt++;\n        }\n    }\n    return $f[1];\n}\n",
            "function triplesSumToZero ($l) {\n    foreach ($l as $i) {\n        foreach ($l as $j) {\n            foreach ($l as $k) {\n                if ($i + $j + $k == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "function carRaceCollision ($n) {\n    return $n * $n;\n}\n",
            "function incrList ($l) {\n    $result = [];\n    foreach ($l as $i) {\n        $result[] = $i + 1;\n    }\n    return $result;\n}\n",
            "function pairsSumToZero ($l) {\n    $seen = array();\n    foreach ($l as $num) {\n        if (isset($seen[-$num])) {\n            return true;\n        }\n        $seen[$num] = true;\n    }\n    return false;\n}\n",
            "function changeBase ($x, $bas) {\n    $digits = [];\n    while ($x > 0) {\n        $digits[] = $x % $bas;\n        $x = floor($x / $bas);\n    }\n    return implode(\"\", $digits);\n}\n",
            "function triangleArea ($a, $h) {\n    return $a * $h / 2;\n}\n",
            "function fib4 ($n) {\n    $fib = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib[$i % 4] = array_sum($fib);\n    }\n    return $fib[$n % 4];\n}\n",
            "function median ($l) {\n    $sl = array_sort($l);\n    if (count($l) % 2 != 0) {\n        return $sl[count($l) / 2];\n    } else {\n        return ($sl[count($l) / 2] + $sl[count($l) / 2 - 1]) / 2;\n    }\n}\n",
            "function isPalindrome ($txt) {\n    return strrev($txt) == $txt;\n}\n",
            "function modp ($n, $p) {\n    $ret = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $ret = ($ret * 2) % $p;\n    }\n    return $ret;\n}\n",
            "function encodeShift ($s) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        $c = ord($s[$i]);\n        if ($c >= 97 && $c <= 122) {\n            $c = (($c - 97 + 5) % 26) + 97;\n        }\n        $result .= chr($c);\n    }\n    return $result;\n}\nfunction decodeShift ($s) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        $c = ord($s[$i]);\n        if ($c >= 97 && $c <= 122) {\n            $c = (($c - 97 - 21 + 26) % 26) + 97;\n        }\n        $result .= chr($c);\n    }\n    return $result;\n}\n",
            "function removeVowels ($txt) {\n    $vowels = \"aeiouAEIOU\";\n    return str_replace($vowels, \"\", $txt);\n}\n",
            "function belowThreshold ($l, $t) {\n    return all(array_map(function($x) use ($t) {\n        return $x < $t;\n    }, $l));\n}\n",
            "function add ($x, $y) {\n    return $x + $y;\n}\n",
            "function sameChars ($s0, $s1) {\n    return count(array_unique(str_split($s0))) == count(array_unique(str_split($s1)));\n}\n",
            "function fib ($n) {\n    if ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n        return 1;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n",
            "function correctBracketing ($brackets) {\n    $depth = 0;\n    foreach (str_split ($brackets) as $bracket) {\n        if ($bracket == \"<\") {\n            $depth++;\n        } elseif ($bracket == \">\") {\n            $depth--;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "function monotonic ($l) {\n    $diff = array_diff($l, array_shift($l));\n    return $diff >= 0;\n}\n",
            "function common ($l1, $l2) {\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n    $result = [];\n    $l1Size = count($l1);\n    $l2Size = count($l2);\n    $l1Index = 0;\n    $l2Index = 0;\n    while ($l1Index < $l1Size && $l2Index < $l2Size) {\n        if ($l1[$l1Index] == $l2[$l2Index]) {\n            array_push($result, $l1[$l1Index]);\n            $l1Index++;\n            $l2Index++;\n        } else if ($l1[$l1Index] < $l2[$l2Index]) {\n            $l1Index++;\n        } else {\n            $l2Index++;\n        }\n    }\n    return array_slice($result, 0, -$l2Index);\n}\n",
            "function largestPrimeFactor ($n) {\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i) {\n            $i++;\n        } else {\n            $n /= $i;\n        }\n    }\n    return $n;\n}\n",
            "function sumToN ($n) {\n    return $n * ($n + 1) / 2;\n}\n",
            "function correctBracketing ($brackets) {\n    $depth = 0;\n    foreach (str_split ($brackets) as $bracket) {\n        if ($bracket == \"(\") {\n            $depth++;\n        } elseif ($bracket == \")\") {\n            $depth--;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "function derivative ($xs) {\n    $result = [];\n    for ($i = 1; $i < count($xs); $i++) {\n        $result[] = $xs[$i] * $i;\n    }\n    return $result;\n}\n",
            "function fibfib ($n) {\n    if ($n <= 1) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    while ($n > 2) {\n        $temp = $a;\n        $a = $b;\n        $b = $c;\n        $c = $temp + $b + $c;\n        $n--;\n    }\n    return $c;\n}\n",
            "function vowelsCount ($s) {\n    $vowels = \"aeiou\";\n    $cnt = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strtolower($s[$i]) in $vowels || ($i == strlen($s) - 1 && strtolower($s[$i]) == \"y\")) {\n            $cnt++;\n        }\n    }\n    return $cnt;\n}\n",
            "function circularShift ($x, $shift) {\n    $x_str = (string) $x;\n    if ($shift > strlen($x_str)) {\n        return strrev($x_str);\n    } else {\n        return substr($x_str, -$shift, -1) . substr($x_str, 0, -$shift);\n    }\n}\n",
            "function digitSum ($s) {\n    $sum = 0;\n    foreach (str_split ($s) as $char) {\n        if (ctype_upper($char)) {\n            $sum += ord ($char);\n        }\n    }\n    return $sum;\n}\n",
            "function fruitDistribution ($s, $n) {\n    $words = explode(' ', $s);\n    $apples = intval($words[$words = trim(array_shift($words)) == \"apples\"]);\n    $oranges = intval($words[$words = trim(array_shift($words)) == \"oranges\"]);\n    return $n - $apples - $oranges;\n}\n",
            "function pluck ($arr) {\n    $evens = array_filter($arr, function ($n) {\n        return $n % 2 == 0;\n    });\n    if (count($evens) == 0) {\n        return [];\n    }\n    $min_even = min($evens);\n    return [$min_even, array_search($min_even, $arr)];\n}\n",
            "function search ($lst) {\n    $freqs = array();\n    foreach ($lst as $n) {\n        if (!isset($freqs[$n])) {\n            $freqs[$n] = 0;\n        }\n        $freqs[$n]++;\n    }\n    $good_vals = array_filter(array_keys($freqs), function ($k) use ($lst) {\n        return $lst[$k] >= $k;\n    });\n    if ($good_vals) {\n        return max($good_vals);\n    }\n    return -1;\n}\n",
            "function strangeSortList ($lst) {\n    $sl = array_sort($lst);\n    $result = [];\n    $left = 0;\n    $right = count($sl) - 1;\n    while ($left <= $right) {\n        $result[] = $sl[$left];\n        $left++;\n        if ($left <= $right) {\n            $result[] = $sl[$right];\n            $right--;\n        }\n    }\n    return $result;\n}\n",
            "function triangleArea ($a, $b, $c) {\n    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $s = ($a + $b + $c) / 2.0;\n        return sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "function willItFly ($q, $w) {\n    if (count($q) == 0) {\n        return false;\n    }\n    $isPalin = true;\n    foreach (range(0, count($q) / 2) as $i) {\n        if ($q[$i] != $q[count($q) - $i - 1]) {\n            $isPalin = false;\n            break;\n        }\n    }\n    $total = array_sum($q);\n    return $isPalin && $total <= $w;\n}\n",
            "function smallestChange ($arr) {\n    $ans = 0;\n    for ($i = 0; $i < count($arr) / 2; $i++) {\n        if ($arr[$i] != $arr[count($arr) - $i - 1]) {\n            $ans++;\n        }\n    }\n    return $ans;\n}\n",
            "function totalMatch ($lst1, $lst2) {\n    $cnt1 = 0;\n    foreach ($lst1 as $s) {\n        $cnt1 += strlen($s);\n    }\n    $cnt2 = 0;\n    foreach ($lst2 as $s) {\n        $cnt2 += strlen($s);\n    }\n    return $lst1 if ($cnt1 <= $cnt2) else $lst2;\n}\n",
            "function isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isMultiplyPrime ($a) {\n    $cnt = 0;\n    for ($i = 2; $i <= $a; $i++) {\n        if (isPrime ($i)) {\n            while ($a % $i == 0) {\n                $cnt++;\n                $a /= $i;\n            }\n        }\n    }\n    return $cnt == 3;\n}\n",
            "function isSimplePower ($x, $n) {\n    if ($n < 2) {\n        return $x == $n;\n    }\n    $tmp = 1;\n    while ($tmp < $x) {\n        $tmp *= $n;\n    }\n    return $tmp == $x;\n}\n",
            "function isCube ($a) {\n    $a = abs($a);\n    $root = intval(round(pow($a, 1.0 / 3.0)));\n    return $root * $root * $root == $a;\n}\n",
            "function hexKey ($num) {\n    $count = 0;\n    foreach (strtolower($num) as $char) {\n        if (\"2357bd\".find($char) !== -1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "function decimalToBinary ($dec) {\n    $binary = decbin($dec);\n    return \"db\" . $binary . \"db\";\n}\n",
            "function isHappy ($s) {\n    if (strlen($s) < 3) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($s) - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function numericalLetterGrade ($grades) {\n    $result = [];\n    foreach ($grades as $g) {\n        if ($g == 4.0) {\n            $result[] = \"A+\";\n        } elseif ($g > 3.7) {\n            $result[] = \"A\";\n        } elseif ($g > 3.3) {\n            $result[] = \"A-\";\n        } elseif ($g > 3.0) {\n            $result[] = \"B+\";\n        } elseif ($g > 2.7) {\n            $result[] = \"B\";\n        } elseif ($g > 2.3) {\n            $result[] = \"B-\";\n        } elseif ($g > 2.0) {\n            $result[] = \"C+\";\n        } elseif ($g > 1.7) {\n            $result[] = \"C\";\n        } elseif ($g > 1.3) {\n            $result[] = \"C-\";\n        } elseif ($g > 1.0) {\n            $result[] = \"D+\";\n        } elseif ($g > 0.7) {\n            $result[] = \"D\";\n        } elseif ($g > 0.0) {\n            $result[] = \"D-\";\n        } else {\n            $result[] = \"E\";\n        }\n    }\n    return $result;\n}\n",
            "function primeLength ($s) {\n    $length = strlen($s);\n    if ($length < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "function startsOneEnds ($n) {\n    if ($n == 1) {\n        return 1;\n    }\n    return 2 * 9 * (10 ** ($n - 2));\n}\n",
            "function solve ($n) {\n    $digits_sum = 0;\n    $n_str = strlen(base_convert($n, 10, 2));\n    for ($i = 0; $i < $n_str; $i++) {\n        $digits_sum += intval(substr($n, $i + 1, 1));\n    }\n    return decbin($digits_sum);\n}\n",
            "function add ($lst) {\n    $result = 0;\n    foreach ($lst as $i => $x) {\n        if ($i % 2 == 1 && $x % 2 == 0) {\n            $result += $x;\n        }\n    }\n    return $result;\n}\n",
            "function antiShuffle ($s) {\n    $words = explode(\" \", $s);\n    foreach ($words as &$word) {\n        $word = implode(\"\", sort($word));\n    }\n    return implode(\" \", $words);\n}\n",
            "function getRow ($lst, $x) {\n    $coords = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $val) {\n            if ($val == $x) {\n                $coords[] = [$i, $j];\n            }\n        }\n    }\n    sort($coords, function($a, $b) {\n        return $a[0] < $b[0] || ($a[0] == $b[0] && -$a[1]);\n    });\n    return $coords;\n}\n",
            "function sortArray ($arr) {\n    if (count($arr) == 0) {\n        return [];\n    }\n    if (($arr[0] + $arr[count($arr) - 1]) % 2 == 0) {\n        return sort($arr, SORT_DESC, $this->isOdd);\n    } else {\n        return sort($arr, SORT_ASC, $this->isEven);\n    }\n}\nfunction isOdd($num) {\n    return $num % 2 == 0;\n}\nfunction isEven($num) {\n    return $num % 2 != 0;\n}\n",
            "function encrypt($s) {\n    $result = [];\n    foreach (strtolower($s) as $ch) {\n        $shifted = ord($ch) + 4;\n        if ($shifted > ord('z')) {\n            $shifted -= 26;\n        }\n        $result[] = chr($shifted);\n    }\n    return \"\".join($result);\n}\n",
            "function nextSmallest ($lst) {\n    if (count($lst) < 2) {\n        return null;\n    }\n    $sl = array_unique ($lst);\n    sort ($sl);\n    return $sl[1];\n}\n",
            "function isBored ($s) {\n    $sentences = preg_split('/[.!?]\\s*/', $s);\n    $count = 0;\n    foreach ($sentences as $sentence) {\n        if (strlen($sentence) >= 2) {\n            $count += (int)substr($sentence, 0, 2) == 'I ';\n        }\n    }\n    return $count;\n}\n",
            "function anyInt ($x, $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function encode ($message) {\n    $vowels = \"aeiouAEIOU\";\n    $result = \"\";\n    foreach (str_split($message) as $ch) {\n        if (isalpha($ch)) {\n            $ch1 = strtoupper($ch) ? chr(ord($ch) - 32) : chr(ord($ch) + 32);\n            if (strpos($vowels, $ch1) !== false) {\n                $ch1 = chr(ord($ch1) + 2);\n            }\n            $result .= $ch1;\n        } else {\n            $result .= $ch;\n        }\n    }\n    return $result;\n}\n",
            "function isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction skjkasdkd ($lst) {\n    $primes = array_filter($lst, function($n) {\n        return isPrime($n);\n    });\n    if (count($primes) == 0) {\n        return 0;\n    }\n    $largest = max($primes);\n    $sum = 0;\n    for ($i = 0; $i < strlen(str($largest)); $i++) {\n        $sum += intval(substr($largest, $i + 1, 1));\n    }\n    return $sum;\n}\n",
            "function checkDictCase ($d) {\n    if (empty($d)) {\n        return false;\n    }\n    return all(array_map(function($c) use ($d) {\n        return strtolower($c) == strtolower($d);\n    }, array_keys($d)));\n} || all(array_map(function($c) use ($d) {\n        return strtoupper($c) == strtoupper($d);\n    }, array_keys($d)));\n}\n",
            "function countUpTo ($n) {\n    $primes = [];\n    for ($num = 2; $num <= $n; $num++) {\n        if (count($primes) == 0 || $num % $primes[count($primes) - 1] != 0) {\n            $primes[] = $num;\n        }\n    }\n    return $primes;\n}\n",
            "function multiply ($a, $b) {\n    $a = abs($a) % 10;\n    $b = abs($b) % 10;\n    return $a * $b;\n}\n",
            "function countUpper ($s) {\n    $vowels = \"AEIOU\";\n    return count(array_filter(str_split($s), function($c) use ($vowels) {\n        return strtolower($c) == $vowels[array_rand($vowels)];\n    }));\n}\n",
            "function closestInteger ($value) {\n    $num = floatval($value);\n    if ($num >= 0) {\n        return intval($num + 0.5);\n    } else {\n        return intval($num - 0.5);\n    }\n}\n",
            "function makeAPile ($n) {\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n + 2 * $i;\n    }\n    return $result;\n}\n",
            "function wordsString ($s) {\n    $regex = '/[, ]/';\n    $words = preg_split($regex, $s);\n    $result = [];\n    foreach ($words as $word) {\n        if (strlen($word) > 0) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n",
            "function chooseNum ($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    if ($y % 2 == 0) {\n        return $y;\n    }\n    if ($x != $y) {\n        return $y - 1;\n    }\n    return -1;\n}\n",
            "function roundedAvg ($n, $m) {\n    $rAvg = intval(floatval(($m + $n) / 2.0) + 0.5);\n    $bin = bin($rAvg);\n    return $bin;\n}\n",
            "function allDigitsOdd ($s) {\n    return (bool)preg_match('/[02468]/', $s);\n}\nfunction uniqueDigits ($x) {\n    $result = [];\n    foreach ($x as $num) {\n        if (allDigitsOdd(str($num))) {\n            $result[] = $num;\n        }\n    }\n    sort($result);\n    return $result;\n}\n",
            "function byLength ($arr) {\n    $digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    $sortedArr = array_filter($arr, function($x) {\n        return 1 <= $x <= 9;\n    });\n    sort($sortedArr, function($a, $b) {\n        return $b - $a;\n    });\n    return array_map(function($x) {\n        return $digitNames[$x-1];\n    }, $sortedArr);\n}\n",
            "function f ($n) {\n    $nums = range(1, $n + 1);\n    return array_map(function ($i) use ($nums) {\n        if ($i % 2 != 0) {\n            return array_sum($nums[0..($i - 1)]);\n        } else {\n            $result = 1;\n            foreach ($nums[0..($i - 1)] as $j) {\n                $result *= $j;\n            }\n            return $result;\n        }\n    }, range(1, $n + 1));\n}\n",
            "function isPalindrome ($txt) {\n    return strrev($txt) == $txt;\n}\nfunction evenOddPalindrome ($n) {\n    $cnt = array(0, 0);\n    for ($i = 1; $i <= $n; $i++) {\n        if (isPalindrome(string($i))) {\n            $cnt[$i % 2]++;\n        }\n    }\n    return $cnt;\n}\n",
            "function digitsSum ($n) {\n    $n_str = strval($n);\n    if ($n >= 0) {\n        return array_sum(array_map('int', strval($n_str)));\n    } else {\n        $first_two_digits = substr($n_str, 0, 2);\n        return intval($first_two_digits) * 2 + digitsSum(abs($n));\n    }\n}\nfunction countNums ($arr) {\n    return count(array_filter(array_map(function($n) {\n        return digitsSum($n) > 0;\n    }, $arr)));\n}\n",
            "function moveOneBall ($arr) {\n    if (count($arr) == 0) {\n        return true;\n    }\n    $sortedArr = array_values(sort($arr));\n    for ($i = 0; $i < count($arr); $i++) {\n        if (array_slice($arr, 0, $i + 1) == array_slice($sortedArr, $i, count($arr) - $i) && array_slice($arr, $i + 1) == array_slice($sortedArr, 0, $i + 1)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function canExchange ($lst1, $lst2) {\n    $odd_cnt = count([true for num in $lst1 if num % 2 != 0]);\n    $even_cnt = count([true for num in $lst2 if num % 2 == 0]);\n    return \"YES\" if $even_cnt >= $odd_cnt else \"NO\";\n}\n",
            "function histogram ($test) {\n    $freq = array();\n    $words = explode(\" \", $test);\n    array_filter($words, function($w) use ($freq) {\n        if (isset($freq[$w])) {\n            $freq[$w]++;\n        } else {\n            $freq[$w] = 1;\n        }\n    });\n    $result = array();\n    if (count($freq) > 0) {\n        $max_freq = max($freq);\n        foreach ($freq as $k => $v) {\n            if ($v == $max_freq) {\n                $result[$k] = $v;\n            }\n        }\n    }\n    return $result;\n}\n",
            "function isPalindrome ($s) {\n    return strrev($s) == $s;\n}\nfunction reverseDelete ($s, $c) {\n    $s1 = str_replace($c, '', $s);\n    return [$s1, isPalindrome($s1) ? \"yes\" : \"no\"];\n}\n",
            "function oddCount ($lst) {\n    $result = [];\n    foreach ($lst as $str) {\n        $n = 0;\n        for ($i = 0; $i < strlen($str); $i++) {\n            if (ord($str[$i]) % 2 == 1) {\n                $n++;\n            }\n        }\n        $result[] = \"the number of odd elements in the string \" . $n . \" of the input.\";\n    }\n    return $result;\n}\n",
            "function minSubArraySum ($nums) {\n    $min_sum = INF;\n    $cur_sum = 0;\n    foreach ($nums as $n) {\n        $cur_sum = min(($cur_sum + $n), 0);\n        $min_sum = min($cur_sum, $min_sum);\n    }\n    if ($min_sum == 0) {\n        $min_sum = min($nums);\n    }\n    return $min_sum;\n}\n",
            "function maxFill ($grid, $capacity) {\n    $count = 0;\n    foreach ($grid as $row) {\n        $sum = array_sum($row);\n        $count += ceil($sum / $capacity);\n    }\n    return $count;\n}\n",
            "function countOnes ($num) {\n    $count = 0;\n    while ($num > 0) {\n        $num = floor($num / 2);\n        $count++;\n    }\n    return $count;\n}\nfunction sortArray ($arr) {\n    return array_sort($arr, function($a, $b) {\n        $aOnes = countOnes($a);\n        $bOnes = countOnes($b);\n        if ($aOnes == $bOnes) {\n            return $a - $b;\n        }\n        return $aOnes - $bOnes;\n    });\n}\n",
            "function selectWords ($s, $n) {\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $words = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n        if (strlen($word) > 0) {\n            $numConsonants = 0;\n            foreach (strtolower($word) as $c) {\n                if (in_array($c, $consonants)) {\n                    $numConsonants++;\n                }\n            }\n            if ($numConsonants == $n) {\n                $result[] = $word;\n            }\n        }\n    }\n    return $result;\n}\n",
            "function getClosestVowel ($word) {\n    $vowels = \"aeiouAEIOU\";\n    for ($i = $n - 2; $i > 0; $i--) {\n        if (strpos($word, $vowels, $i) !== false && strpos($vowels, $word[$i - 1]) === false && strpos($vowels, $word[$i + 1]) === false) {\n            return $word[$i];\n        }\n    }\n    return \"\";\n}\n",
            "function matchParens ($lst) {\n    $s1 = $lst[0] . $lst[1];\n    $s2 = $lst[1] . $lst[0];\n    if (check($s1) || check($s2)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\nfunction check($s) {\n    $depth = 0;\n    foreach (str_split($s) as $ch) {\n        if ($ch == \"(\") {\n            $depth++;\n        } else {\n            $depth--;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "function maximum ($arr, $k) {\n    if ($k == 0) {\n        return [];\n    }\n    return array_slice($arr, -$k);\n}\n",
            "function solution ($lst) {\n    $count = 0;\n    foreach ($lst as $i => $x) {\n        if ($i % 2 == 0 && $x % 2 != 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "function addElements ($arr, $k) {\n    $result = 0;\n    foreach ($arr as $i => $n) {\n        if ($i < $k) {\n            $result += $n;\n        } else {\n            break;\n        }\n    }\n    foreach (str_split($n) as $s) {\n        if ($s == '0' || $s == '1') {\n            $result += 1;\n        }\n    }\n    return $result;\n}\n",
            "function getOddCollatz ($n) {\n    $collatz = [1];\n    while ($n != 1) {\n        if ($n % 2 != 0) {\n            $collatz[] = $n;\n            $n = 3 * $n + 1;\n        } else {\n            $n = $n / 2;\n        }\n    }\n    return sort($collatz);\n}\n",
            "function validDate ($date) {\n    if (!count($date) == 10 || $date[2] !== \"-\" || $date[5] !== \"-\") {\n        return false;\n    }\n    $m = intval($date[0] . $date[1]);\n    $d = intval($date[3] . $date[4]);\n    if ($m in [1, 3, 5, 7, 8, 10, 12] && $d >= 1 && $d <= 31) {\n        return true;\n    }\n    if ($m in [4, 6, 9, 11] && $d >= 1 && $d <= 30) {\n        return true;\n    }\n    if ($m == 2 && $d >= 1 && $d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "function splitWords ($txt) {\n    if (strpos($txt, \" \") !== false) {\n        return explode(\" \", $txt);\n    } elseif (strpos($txt, \",\") !== false) {\n        return explode(\",\", $txt);\n    } else {\n        $count = 0;\n        foreach (str_split($txt) as $char) {\n            if ($char == strtolower($char) && ord($char) % 2 == 0) {\n                $count++;\n            }\n        }\n        return [$count];\n    }\n}\n",
            "function isSorted ($lst) {\n    return all(array_slice($lst, 1, count($lst) - 1) <= $lst);\n}\n",
            "function isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction intersection ($interval1, $interval2) {\n    $l = max($interval1[0], $interval2[0]);\n    $r = min($interval1[1], $interval2[1]);\n    $length = $r - $l;\n    return $length > 0 && isPrime($length) ? \"YES\" : \"NO\";\n}\n",
            "function prodSigns ($arr) {\n    if (empty($arr)) {\n        return null;\n    }\n    if (in_array(0, $arr)) {\n        return 0;\n    }\n    $sign = $arr[0] < 0 ? -1 : 1;\n    return $sign * array_sum(array_filter($arr, function($n) {\n        return $n > 0;\n    }));\n}\n",
            "function minPath ($grid, $k) {\n    $n = count($grid);\n    $minVal = $n * $n + 1;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $temp = [];\n                if ($i != 0) {\n                    $temp[] = $grid[$i - 1][$j];\n                }\n                if ($j != 0) {\n                    $temp[] = $grid[$i][$j - 1];\n                }\n                if ($i != $n - 1) {\n                    $temp[] = $grid[$i + 1][$j];\n                }\n                if ($j != $n - 1) {\n                    $temp[] = $grid[$i][$j + 1];\n                }\n                $minVal = min($temp);\n            }\n        }\n    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        if ($i % 2 == 0) {\n            $result[] = 1;\n        } else {\n            $result[] = $minVal;\n        }\n    }\n    return $result;\n}\n",
            "function tri ($n) {\n    if ($n == 0) {\n        return [1];\n    }\n    $seq = [1, 3];\n    for ($i = 2; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $seq[] = ($i / 2 + 1);\n        } else {\n            $seq[] = ($seq[$i - 1] + $seq[$i - 2] + ($i + 3) / 2);\n        }\n    }\n    return $seq;\n}\n",
            "function digits ($n) {\n    $odds = \\array_filter(str_split($n), function($char) {\n        return intval($char) % 2 == 1;\n    });\n    return count($odds) > 0 ? \\array_product($odds, 1) : 0;\n}\n",
            "function isNested ($s) {\n    $stack = [];\n    foreach (str_split($s) as $ch) {\n        if ($ch == '[') {\n            $stack[] = $ch;\n        } elseif ($ch == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $stack[] = $ch;\n        }\n    }\n    return count($stack) <= 1;\n}\n",
            "function sumSquares ($lst) {\n    $result = 0;\n    foreach ($lst as $num) {\n        $result += pow(ceil($num), 2);\n    }\n    return $result;\n}\n",
            "function checkIfLastCharIsALetter ($txt) {\n    if (empty ($txt)) {\n        return false;\n    }\n    $last = rtrim ($txt);\n    $last = substr ($last, strrpos ($last, ' ') + 1);\n    return 1 == strlen ($last) && $last[0] >= 'a' && $last[0] <= 'z';\n}\n",
            "function canArrange ($arr) {\n    if (count($arr) <= 1) {\n        return -1;\n    }\n    $idx = array_filter(array_keys($arr), function($k) use ($arr) {\n        return $arr[$k] < $arr[max(array_keys($arr))];\n    });\n    return max($idx) if count($idx) > 0 else -1;\n}\n",
            "function largestSmallestIntegers ($lst) {\n    $neg = array_filter($lst, function ($e) use ($lst) {\n        return $e < 0;\n    });\n    $pos = array_filter($lst, function ($e) use ($lst) {\n        return $e > 0;\n    });\n    $maxNeg = max($neg) if (count($neg) > 0) else null;\n    $minPos = min($pos) if (count($pos) > 0) else null;\n    return [$maxNeg, $minPos];\n}\n",
            "function anyToReal ($o) {\n    if (is_string($o)) {\n        return str_replace(',', '.', $o);\n    }\n    if (is_int($o)) {\n        return (float)$o;\n    }\n    if (is_float($o)) {\n        return $o;\n    }\n    throw_error(PHP_LOG_ERR, \"Type Error\");\n}\nfunction compareOne ($a, $b) {\n    $a1 = anyToReal($a);\n    $b1 = anyToReal($b);\n    if ($a1 == $b1) {\n        return null;\n    }\n    if ($a1 > $b1) {\n        return $a1;\n    }\n    return $b1;\n}\n",
            "function isEqualToSumEven ($n) {\n    return $n % 2 == 0 && $n >= 8;\n}\n",
            "function specialFactorial ($n) {\n    $fact = 1;\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $fact *= $i;\n        $result *= $fact;\n    }\n    return $result;\n}\n",
            "function fixSpaces ($txt) {\n    return preg_replace(\"/\\s{3,}/\", \"_\", trim($txt));\n}\n",
            "function fileNameCheck ($fileName) {\n    $suffixes = array(\"txt\", \"exe\", \"dll\");\n    $lst = explode(\".\", $fileName);\n    if (count($lst) != 2 || !in_array($lst[1], $suffixes) || empty($lst[0]) || !$lst[0][0].isalpha() || count(array_filter(str_split($lst[0]), \"isdigit\")) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "function sumSquares ($lst) {\n    $result = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n            $result += pow($lst[$i], 2);\n        } elseif ($i % 4 == 0) {\n            $result += pow($lst[$i], 3);\n        } else {\n            $result += $lst[$i];\n        }\n    }\n    return $result;\n}\n",
            "function isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction wordsInSentence ($sentence) {\n    $words = explode(\" \", $sentence);\n    return implode(\" \", array_filter($words, function($w) use ($n) {\n        return isPrime(strlen($w));\n    }));\n}\n",
            "function simplify ($x, $n) {\n    $xs = explode(\"/\", $x);\n    $ns = explode(\"/\", $n);\n    $num = intval($xs[0]) * intval($ns[0]);\n    $den = intval($xs[1]) * intval($ns[1]);\n    return $num % $den == 0;\n}\n",
            "function digitsSum ($n) {\n    $n_str = strval($n);\n    if ($n >= 0) {\n        return array_sum(array_map('intval', explode('', $n_str)));\n    } else {\n        $first_two = substr($n_str, 0, 2);\n        return intval($first_two) * 2 + digitsSum(abs($n));\n    }\n}\nfunction orderByPoints ($nums) {\n    return array_keys($nums, digitsSum($nums));\n}\n",
            "function specialFilter ($nums) {\n    $odds = \"13579\";\n    $count = 0;\n    foreach ($nums as $n) {\n        if ($n > 10 && $n % 2 == 1 && substr($odds, 0, 1) === $n) {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "function getMaxTriples ($n) {\n    $c = array(0, 0, 0);\n    for ($i = 1; $i <= $n; $i++) {\n        $a = $i * $i - $i + 1;\n        $c[$a % 3]++;\n    }\n    $result = $c[0] * $c[1] * $c[2];\n    $sum = 0;\n    for ($i = 0; $i < 3; $i++) {\n        if ($c[$i] > 1) {\n            $sum += ($c[$i] * ($c[$i] - 1) * ($c[$i] - 2)) / 6;\n        }\n    }\n    return $result + $sum;\n}\n",
            "function bf ($planet1, $planet2) {\n    $names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!in_array($planet1, $names) || !in_array($planet2, $names)) {\n        return [];\n    }\n    $l = array_search($planet1, $names);\n    $r = array_search($planet2, $names);\n    if ($l > $r) {\n        $l, $r = $r, $l;\n    }\n    if ($l == $r) {\n        return [];\n    }\n    return array_slice($names, $l + 1, $r - $l);\n}\n",
            "function sortedListSum ($lst) {\n    $result = [];\n    foreach ($lst as $s) {\n        if (strlen($s) % 2 == 0) {\n            $result[] = $s;\n        }\n    }\n    sort(function($a, $b) {\n        return strlen($a) - strlen($b);\n    });\n    usort($result, function($a, $b) {\n        return strcmp($a, $b);\n    });\n    return $result;\n}\n",
            "function xOrY ($n, $x, $y) {\n    if ($n < 2) {\n        return $y;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return $y;\n        }\n    }\n    return $x;\n}\n",
            "function doubleTheDifference ($lst) {\n    $result = 0;\n    foreach ($lst as $n) {\n        if ($n >= 0 && $n % 2 == 1) {\n            $result += $n * $n;\n        }\n    }\n    return $result;\n}\n",
            "function compare ($game, $guess) {\n    $result = [];\n    for ($i = 0; $i < min(count($game), count($guess)); $i++) {\n        $result[] = abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n}\n",
            "function strongestExtension ($className, $extensions) {\n    $maxS = -INF;\n    $maxExt = \"\";\n    foreach ($extensions as $ext) {\n        $upper = preg_match_all('/[A-Z]/', $ext);\n        $lower = preg_match_all('/[a-z]/', $ext);\n        $s = $upper - $lower;\n        if ($s > $maxS) {\n            $maxS = $s;\n            $maxExt = $ext;\n        }\n    }\n    return $className . \".\" . $maxExt;\n}\n",
            "function cycpatternCheck ($a, $b) {\n    if (strlen($a) < strlen($b)) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($b); $i++) {\n        if (substr($b, $i, strlen($b) - $i) . substr($b, 0, $i)\n            !== substr($a, 0 - $i, strlen($b) - $i) . substr($a, 0, $i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function evenOddCount ($num) {\n    $num = abs($num);\n    $ds = strval($num);\n    $even = strlen(substr_count($ds, '0', 2)) / 2;\n    $odd = strlen(substr_replace($ds, '', 0, 2)) / 2;\n    return [$even, $odd];\n}\n",
            "function intToMiniRoman ($num) {\n    $values = array(\n        1000 => \"m\",\n        900 => \"cm\",\n        500 => \"d\",\n        400 => \"cd\",\n        100 => \"c\",\n        90 => \"xc\",\n        50 => \"l\",\n        40 => \"xl\",\n        10 => \"x\",\n        9 => \"ix\",\n        5 => \"v\",\n        4 => \"iv\",\n        1 => \"i\"\n    );\n    $res = [];\n    foreach ($values as $value => $numerals) {\n        while ($num >= $value) {\n            $res[] = $numerals;\n            $num -= $value;\n        }\n    }\n    return \"\".join($res);\n}\n",
            "function rightAngleTriangle ($a, $b, $c) {\n    if ($a <= 0 || $b <= 0 || $c <= 0) {\n        return false;\n    }\n    if ($a + $b <= $c || $b + $c <= $a || $a + $c <= $b) {\n        return false;\n    }\n    return $a * $a + $b * $b == $c * $c || $b * $b + $c * $c == $a * $a || $a * $a + $c * $c == $b * $b;\n}\n",
            "function findMax ($words) {\n    $maxCnt = 0;\n    $maxW = \"\";\n    foreach ($words as $w) {\n        $cnt = count_unique_chars($w);\n        if ($cnt > $maxCnt) {\n            $maxCnt = $cnt;\n            $maxW = $w;\n        }\n        elseif ($cnt == $maxCnt) {\n            $maxW = min($maxW, $w);\n        }\n    }\n    return $maxW;\n}\nfunction count_unique_chars($str) {\n    return strlen(strtolower(trim($str)));\n}\n",
            "function eat ($num, $need, $remaining) {\n    if ($need <= $remaining) {\n        return [$num + $need, $remaining - $need];\n    } else {\n        return [$num + $remaining, 0];\n    }\n}\n",
            "function doAlgebra ($operators, $operands) {\n    $ops = $operators;\n    $nums = $operands;\n    $i = count($ops) - 1;\n    while ($i >= 0) {\n        if ($ops[$i] == \"**\") {\n            $nums[$i] = pow($nums[$i], $nums[$i + 1]);\n            array_pop($nums, $i + 1);\n            array_pop($ops, $i);\n            $i -= 1;\n        }\n        $i--;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"*\") {\n            $nums[$i] = $nums[$i] * $nums[$i + 1];\n            array_pop($nums, $i + 1);\n            array_pop($ops, $i);\n            $i -= 1;\n        }\n        else if ($ops[$i] == \"//\") {\n            $nums[$i] = $nums[$i] / $nums[$i + 1];\n            array_pop($nums, $i + 1);\n            array_pop($ops, $i);\n            $i -= 1;\n        }\n        $i++;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"+\") {\n            $nums[$i] = $nums[$i] + $nums[$i + 1];\n            array_pop($nums, $i + 1);\n            array_pop($ops, $i);\n            $i -= 1;\n        }\n        else if ($ops[$i] == \"-\") {\n            $nums[$i] = $nums[$i] - $nums[$i + 1];\n            array_pop($nums, $i + 1);\n            array_pop($ops, $i);\n            $i -= 1;\n        }\n        $i++;\n    }\n    return $nums[0];\n}\n",
            "function solve ($s) {\n    if (empty(preg_match(\"/[a-zA-Z]+/\", $s))) {\n        return strrev($s);\n    }\n    $result = [];\n    foreach (str_split($s) as $ch) {\n        if (preg_match(\"/[a-zA-Z]/\", $ch)) {\n            $result[] = strtolower($ch);\n        } else {\n            $result[] = $ch;\n        }\n    }\n    return implode(\"\", $result);\n}\n",
            "function stringToMd5 ($txt) {\n    if (!$txt) {\n        return null;\n    }\n    $md5_hash = hash('md5', $txt);\n    return $md5_hash;\n}\n",
            "function generateIntegers ($a, $b) {\n    $lower = max(2, min($a, $b));\n    $upper = min(8, max($a, $b));\n    $result = [];\n    for ($i = $lower; $i <= $upper; $i++) {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n"
        ],
        "ruby": [
            "def has_close_elements(numbers, threshold)\n    numbers.each_cons(2) do |a, b|\n        if a.abs < threshold && b.abs < threshold\n            return true\n        end\n    end\n    false\nend\n",
            "def separate_paren_groups(paren_string)\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    parens.chars.each do |ch|\n        if ch == \"(\"\n            stk.push(ch)\n            current_group += ch\n        elsif ch == \")\"\n            stk.pop\n            current_group += ch\n            if stk.empty?\n                groups.push(current_group)\n                current_group = \"\"\n            end\n        end\n    end\n    return groups\nend\n",
            "def truncate_number(num)\n    # Implementation here\nend\n",
            "def below_zero(operations)\n    balance = 0\n    operations.each do |op|\n        balance += op\n        return true if balance < 0\n    end\n    false\nend\n",
            "def mean_absolute_deviation(numbers)\n    numbers.length.zero? {|_| raise \"Cannot calculate mean if array is empty.\" }\n    mean = numbers.sum / numbers.length.to_f\n    numbers.map { |x| (x - mean).abs }.sum / numbers.length\nend\n",
            "def intersperse(numbers, delimiter)\n    result = []\n    numbers.each_with_index do |num, i|\n        result << num\n        if i != 0\n            result << delimiter\n        end\n    end\n    result\nend\n",
            "def parse_nested_parens(paren_string)\n    result = []\n    paren_groups = paren_string.split(\" \")\n    paren_groups.each do |group|\n        max_depth = 0\n        depth = 0\n        group.chars.each do |ch|\n            if ch == \"(\"\n                depth += 1\n                max_depth = [max_depth, depth].max\n            elsif ch == \")\"\n                depth -= 1\n            end\n        end\n        result << max_depth\n    end\n    result\nend\n",
            "def filter_by_substring(strs, substring)\n    strs.select {|s| s.include?(substring)}\nend\n",
            "def sum_product(numbers)\n    n_sum = numbers.sum\n    n_product = numbers.reduce(1) { |x, y| x * y }\n    [n_sum, n_product]\nend\n",
            "def rolling_max(numbers)\n    max_so_far = -1 << INFINITY\n    result = []\n    numbers.each do |num|\n        max_so_far = [max_so_far, num].max\n        result << max_so_far\n    end\n    result\nend\n",
            "def is_palindrome(s)\n    s == s.reverse\nend\ndef make_palindrome(s)\n    if is_palindrome(s)\n        return s\n    end\n    (s.length.times do |i|\n        if is_palindrome(s[i..s.length-1])\n            return s + s[0..i-1].reverse\n        end\n    end) || \"\"\nend\n",
            "def string_xor(a, b)\n    a.chars.zip(b.chars).map do |a_char, b_char|\n        if a_char == b_char\n            \"0\"\n        else\n            \"1\"\n        end\n    end.join\nend\n",
            "def longest(strs)\n    return nil if strs.empty?\n    longest_s = strs.first\n    strs.each do |s|\n        if s.length > longest_s.length\n            longest_s = s\n        end\n    end\n    return longest_s\nend\n",
            "def greatest_common_divisor(a, b)\n    b != 0 ? greatest_common_divisor(b, a % b) : a\nend\n",
            "def all_prefixes(s)\n    prefixes = []\n    (0...s.length + 1).each do |i|\n        prefixes << s[0...i]\n    end\n    prefixes\nend\n",
            "def string_sequence(n)\n    n.times {|i| \"#{i} \"}\nend\n",
            "def count_distinct_characters(s)\n    s = s.downcase\n    s.chars.uniq.size\nend\n",
            "def parse_music(music_string)\n    durations = {\n        \"o\" => 4,\n        \"o|\" => 2,\n        \".|\" => 1\n    }\n    notes = music_string.split(\" \")\n    result = []\n    notes.each do |note|\n        result << durations[note]\n    end\n    result\nend\n",
            "def how_many_times(s, substring)\n    s.count(substring)\nend\n",
            "def sort_numbers(numbers)\n    num_dict = {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n    }\n    num_list = numbers.split(\" \").select {|x| num_dict.keys.include?(x)}\n    num_list.sort_by {|x| num_dict[x]}\n    return num_list.join(\" \")\nend\n",
            "def find_closest_elements(numbers)\n    sorted_numbers = numbers.sort\n    min_diff = nil\n    closest_pair = []\n    sorted_numbers.each_with_index do |num, i|\n        next if i == 0\n        diff = num - sorted_numbers[i - 1]\n        if min_diff || diff < min_diff\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], num]\n        end\n    end\n    closest_pair\nend\n",
            "def rescale_to_unit(numbers)\n    if numbers.length == 1\n        [0.0]\n    else\n        min_num = numbers.min\n        max_num = numbers.max\n        if min_num == max_num\n            [0.0] * numbers.length\n        else\n            numbers.map { |num| (num - min_num) / (max_num - min_num) }\n        end\n    end\nend\n",
            "def filter_integers(values)\n    values.select {|x| x.is_a?(Integer)}\nend\n",
            "def str_length(s)\n    s.length\nend\n",
            "def largest_divisor(n)\n    i = 2\n    while n % i != 0\n        i += 1\n    end\n    n / i\nend\n",
            "def factorize(n)\n    factors = []\n    divisor = 2\n    while n > 1\n        if n % divisor == 0\n            factors << divisor\n            n /= divisor\n        else\n            divisor += 1\n        end\n    end\n    factors\nend\n",
            "def remove_duplicates(numbers)\n    counts = Hash.new(0)\n    numbers.each {|num| counts[num] += 1}\n    res = []\n    counts.each {|num, count| res << num if count == 1}\n    res\nend\n",
            "def flip_case(s)\n    s.downcase.scan(/[a-z]/).map { |ch| ch.upcase }.join\nend\n",
            "def concatenate(strs)\n    strs.join(\"\")\nend\n",
            "def filter_by_prefix(strs, prefix_str)\n    strs.select {|s| s.start_with?(prefix_str)}\nend\n",
            "def get_positive(l)\n    l.select {|num| num > 0}\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..Math.floor(Math.sqrt(n))).none? { |i| n % i == 0 }\nend\n",
            "def poly(xs, x)\n    res = 0.0\n    xs.each_with_index do |e, i|\n        res += e * x**i\n    end\n    return res\nend\ndef find_zero(xs)\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0\n        x1 *= 2\n        x2 *= 2\n    end\n    while abs(x1 - x2) > 1e-10\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0\n            return mid\n        elsif poly(xs, mid) * poly(xs, x1) < 0\n            x2 = mid\n        else\n            x1 = mid\n        end\n    end\n    return (x1 + x2) / 2\nend\n",
            "def sort_third(l)\n    sorted_third = l[0..2].sort\n    result = []\n    (0..len(l)).each do |i|\n        if i % 3 == 0\n            result.push(sorted_third[i/3])\n        else\n            result.push(l[i])\n        end\n    end\n    return result\nend\n",
            "def list_unique(l)\n    l.uniq.sort\nend\n",
            "def max_element(l)\n    l.empty? ? 0 : l.max\nend\n",
            "def fizz_buzz(n)\n    cnt = 0\n    (1..n).each do |i|\n        if i % 11 == 0 || i % 13 == 0\n            cnt += i.to_s.count(\"7\")\n        end\n    end\n    return cnt\nend\n",
            "def sort_even(l)\n    even_l = l[0::2]\n    sorted_even = even_l.sort\n    odd_l = l[1::2]\n    sorted_odd = odd_l.sort.reverse\n    sorted_l = sorted_even + sorted_odd\n    result = []\n    for i in 0..(l.size - 1)\n        result.put_at(i, sorted_l[i])\n    end\n    result\nend\n",
            "def encode_cyclic(s)\n    result = \"\"\n    s.each_char.with_index do |char, i|\n        if i % 3 == 0\n            result += char\n        else\n            result += s[i - 1]\n        end\n    end\n    result\nend\ndef decode_cyclic(s)\n    encode_cyclic(encode_cyclic(s))\nend\n",
            "def is_prime(n)\n    if n < 2\n        return false\n    end\n    for i in 2..Math.floor(Math.sqrt(n))\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\ndef prime_fib(n)\n    f = [0, 1]\n    cnt = 0\n    while cnt < n\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1])\n            cnt += 1\n        end\n    end\n    return f[1]\nend\n",
            "def triples_sum_to_zero(l)\n    (0..l.length-1).each do |i|\n        (i+1..l.length-1).each do |j|\n            (j+1..l.length-1).each do |k|\n                if l[i] + l[j] + l[k] == 0\n                    return true\n                end\n            end\n        end\n    end\n    false\nend\n",
            "def car_race_collision(n)\n    n ** 2\nend\n",
            "def incr_list(l)\n    result = []\n    l.each do |i|\n        result << i + 1\n    end\n    result\nend\n",
            "def pairs_sum_to_zero(l)\n    seen = Hash.new(0)\n    l.each {|num| seen[num] += 1}\n    l.each {|num| seen[-num].times {|count| return true} if seen[-num] > 0}\n    false\nend\n",
            "def change_base(x, bas)\n    if x == 0\n        return \"0\"\n    end\n    digits = []\n    while x > 0\n        digits << x % bas.to_i\n        x /= bas.to_i\n    end\n    digits.reverse!\n    digits.map { |d| d.to_s }.join(\"\")\nend\n",
            "def triangle_area(a, h)\n    a * h / 2.0\nend\n",
            "def fib4(n)\n    fib = [0, 0, 2, 0]\n    (4..n).each do |i|\n        fib[i % 4] = fib[0] + fib[1] + fib[2]\n        fib.shift\n    end\n    fib[n % 4]\nend\n",
            "def median(l)\n    l = l.sort\n    if l.length % 2 == 1\n        l[l.length/2]\n    else\n        (l[l.length/2 - 1] + l[l.length/2]) / 2.0\n    end\nend\n",
            "def is_palindrome(txt)\n    txt == txt.downcase.strip.gsub(/[[:punct:]]/, '').reverse\nend\n",
            "def modp(n, p)\n    (1 * 2 ** (n - 1)) % p\nend\n",
            "def encode_shift(s)\n    s.chars.map { |ch| ((ch.downcase - 'a' + 5) % 26 + 'a').upcase }.join\nend\ndef decode_shift(s)\n    s.chars.map { |ch| ((ch.downcase - 'a' - 5) % 26 + 'a').upcase }.join\nend\n",
            "def remove_vowels(txt)\n    txt.chars.reject { |c| c = c.downcase; vowels.include?(c) }.join(\"\")\nend\nvowels = %w[a e i o u A E I O U]\n",
            "def below_threshold(l, t)\n    l.all? {|x| x < t}\nend\n",
            "def add(x, y)\n    x + y\nend\n",
            "def same_chars(s0, s1)\n    s0.chars.uniq.size == s1.chars.uniq.size ? true : false\nend\n",
            "def fib(n)\n    if n <= 1\n        n\n    else\n        fib(n - 1) + fib(n - 2)\n    end\nend\n",
            "def correct_bracketing(brackets)\n    depth = 0\n    brackets.each_char do |c|\n        depth += 1 if c == \"<\"\n        depth -= 1 if c == \">\"\n        return false if depth < 0\n    end\n    return depth == 0\nend\n",
            "def monotonic(l)\n    diff = l.map {|i| l[i+1] - l[i]}\n    diff.uniq.size == 1 && diff.first >= 0\nend\n",
            "def common(l1, l2)\n    l1.sort!\n    l2.sort!\n    result = []\n    l1.each do |e|\n        if l2.include?(e)\n            result << e\n        end\n    end\n    result.uniq!\n    result\nend\n",
            "def largest_prime_factor(n)\n    i = 2\n    while i * i <= n\n        if n % i == 0\n            n /= i\n        else\n            i += 1\n        end\n    end\n    n\nend\n",
            "def sum_to_n(n)\n    (n + 1).to_i.downto(1).to_a.sum\nend\n",
            "def correct_bracketing(brackets)\n    depth = 0\n    brackets.each_char do |c|\n        depth += 1 if c == \"(\"\n        depth -= 1 if c == \")\"\n        return false if depth < 0\n    end\n    depth == 0\nend\n",
            "def derivative(xs)\n    result = []\n    xs.each_with_index do |x, i|\n        result << x * i\n    end\n    result\nend\n",
            "def fibfib(n)\n    if n <= 1\n        return 0\n    end\n    a, b, c = 0, 0, 1\n    while n > 2\n        a, b, c = b, c, a + b + c\n        n -= 1\n    end\n    return c\nend\n",
            "def vowels_count(s)\n    vowels = \"aeiou\"\n    cnt = 0\n    s.chars.each_with_index do |char, index|\n        if vowels.include?(char.downcase) || (index == s.length - 1 && char.downcase == \"y\")\n            cnt += 1\n        end\n    end\n    cnt\nend\n",
            "def circular_shift(x, shift)\n    x_str = x.to_s\n    if shift > x_str.length\n        return x_str.reverse\n    else\n        return x_str[-shift..-1] + x_str[0..-shift-1]\n    end\nend\n",
            "def digit_sum(s)\n    s.chars.select{|c| c.isupper}.map{|c| c.ord}.reduce(:+)\nend\n",
            "def fruit_distribution(s, n)\n    words = s.split(' ')\n    apples = words[words.index(\"apples\") - 1].to_i\n    oranges = words[words.index(\"oranges\") - 1].to_i\n    n.times do |i|\n        if i < apples\n            puts \"apple\"\n        elsif i < (apples + oranges)\n            puts \"orange\"\n        end\n    end\nend\n",
            "def pluck(arr)\n    return [] if arr.empty?\n    evens = arr.select {|n| n % 2 == 0}\n    return [evens.min, arr.index(evens.min)]\nend\n",
            "def search(lst)\n    freqs = Hash.new(0)\n    lst.each {|n| freqs[n] += 1}\n    good_vals = freqs.select {|k, v| v >= k}.keys\n    return good_vals.empty? ? -1 : good_vals.max\nend\n",
            "def strange_sort_list(lst)\n    sl = lst.sort\n    result = []\n    left, right = 0, lst.length - 1\n    while left <= right\n        result << sl[left]\n        left += 1\n        if left <= right\n            result << sl[right]\n            right -= 1\n        end\n    end\n    result\nend\n",
            "def triangle_area(a, b, c)\n    if (a + b > c && a + c > b && b + c > a)\n        s = (a + b + c) / 2.0\n        Math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else\n        -1.0\n    end\nend\n",
            "def will_it_fly(q, w)\n    return false unless q.length.even?\n    is_palin = q.reversed.all? { |e| e == q[e] }\n    total = q.sum\n    is_palin && total <= w\nend\n",
            "def smallest_change(arr)\n    ans = 0\n    (arr.length / 2).times do |i|\n        if arr[i] != arr[arr.length - i - 1]\n            ans += 1\n        end\n    end\n    ans\nend\n",
            "def total_match(lst1, lst2)\n    cnt1 = lst1.map {|s| s.length}.reduce(:+)\n    cnt2 = lst2.map {|s| s.length}.reduce(:+)\n    lst1 <=> lst2 ? lst1 : lst2\nend\n",
            "def is_prime(n)\n    if n < 2\n        return false\n    end\n    for i in 2..Math.floor(Math.sqrt(n))\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\ndef is_multiply_prime(a)\n    cnt = 0\n    for i in 2..a\n        if is_prime(i)\n            while a % i == 0\n                cnt += 1\n                a /= i\n            end\n        end\n    end\n    return cnt == 3\nend\n",
            "def is_simple_power(x, n)\n    if n < 2\n        return x == n\n    end\n    tmp = 1\n    while tmp < x\n        tmp *= n\n    end\n    return tmp == x\nend\n",
            "def is_cube(a)\n    a = Math.abs(a)\n    root = Math.round(Math.pow(a, 1.0/3.0))\n    root * root * root == a\nend\n",
            "def hex_key(num)\n    num.scan(/[2357BD]/).size\nend\n",
            "def decimal_to_binary(dec)\n    binary = dec.to_s(2)\n    return \"db#",
            "def is_happy(s)\n    # Implementation here\nend\n",
            "def numerical_letter_grade(grades)\n    result = []\n    grades.each do |g|\n        case g\n        when 4.0\n            result << \"A+\"\n        when 3.7..3.9\n            result << \"A\"\n        when 3.3..3.5\n            result << \"A-\"\n        when 3.0..3.2\n            result << \"B+\"\n        when 2.7..2.9\n            result << \"B\"\n        when 2.3..2.5\n            result << \"B-\"\n        when 2.0..2.2\n            result << \"C+\"\n        when 1.7..1.9\n            result << \"C\"\n        when 1.3..1.5\n            result << \"C-\"\n        when 1.0..1.2\n            result << \"D+\"\n        when 0.7..0.9\n            result << \"D\"\n        when 0.0..0.6\n            result << \"D-\"\n        else\n            result << \"E\"\n        end\n    end\n    return result\nend\n",
            "def prime_length(s)\n    length = s.length\n    if length < 2\n        return false\n    end\n    2.times sqrt(length).to_i do |i|\n        if length % i == 0\n            return false\n        end\n    end\n    true\nend\n",
            "def starts_one_ends(n)\n    if n == 1\n        return 1\n    else\n        return 2 * 9 * (10 ** (n - 2))\n    end\nend\n",
            "def solve(n)\n    digits_sum = n.to_s.to_i.zero? ? 0 : n.to_s.to_i\n    bin(digits_sum).match(/0b(\\d+)/)[1]\nend\n",
            "def add(lst)\n    sum = 0\n    lst.each_with_index do |num, i|\n        sum += num if i.odd? && num.even?\n    end\n    sum\nend\n",
            "def anti_shuffle(s)\n    words = s.split(\" \")\n    words.map! do |word|\n        word.sort!\n        word\n    end\n    words.join(\" \")\nend\n",
            "def get_row(lst, x)\n    coords = []\n    lst.each_with_index do |row, i|\n        row.each_with_index do |elem, j|\n            if elem == x\n                coords << [i, j]\n            end\n        end\n    end\n    coords.sort! {|a, b|\n        a[0] <=> -a[1] <=> b[0] <=> -b[1]\n    }\n    coords\nend\n",
            "def sort_array(arr)\n    if arr.empty?\n        return []\n    end\n    if (arr.first + arr.last) % 2 == 0\n        return arr.sort.reverse\n    else\n        return arr.sort\n    end\nend\n",
            "def encrypt(s)\n    result = []\n    s.chars.each do |ch|\n        shifted = (ord(ch) + 4).to_i % (ord('z') - ord('a') + 1) + ord('a')\n        result << chr(shifted)\n    end\n    result.join(\"\")\nend\n",
            "def next_smallest(lst)\n    return nil if lst.length < 2\n    sl = lst.uniq.sort\n    return sl[1]\nend\n",
            "def is_bored(s)\n    sentences = s.split(/[.!?]\\s*/)\n    sentences.select {|sentence| sentence.length >= 2}.map {|sentence| sentence[0..1] == \"I \"}.sum\nend\n",
            "def any_int(x, y, z)\n    if x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer)\n        if (x + y == z) || (x + z == y) || (y + z == x)\n            true\n        else\n            false\n        end\n    else\n        false\n    end\nend\n",
            "def encode(message)\n    vowels = \"aeiouAEIOU\"\n    result = []\n    message.chars.each do |ch|\n        if ch.isalpha?\n            ch1 = ch.upcase? ? ch.upcase : ch.downcase\n            if vowels.include?(ch1)\n                ch1 = ch1.chr(ch1.ord + 2)\n            end\n            result << ch1\n        else\n            result << ch\n        end\n    end\n    result.join(\"\")\nend\n",
            "def is_prime(n)\n    if n < 2\n        return false\n    end\n    for i in 2..Math.floor(Math.sqrt(n))\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\ndef skjkasdkd(lst)\n    primes = lst.select { |n| is_prime(n) }\n    if primes.empty?\n        return 0\n    end\n    largest = primes.max.to_s\n    return primes.map { |n| n.to_s.chars.map { |c| c.to_i }.reduce(:+) }.max\nend\n",
            "def check_dict_case(d)\n    return false if d.empty?\n    keys = d.keys\n    keys.each do |key|\n        return false if key.is_a?(String) == false\n    end\n    all_lower = keys.map {|k| k.downcase }.uniq.size == 1\n    all_upper = keys.map {|k| k.upcase }.uniq.size == 1\n    all_lower || all_upper\nend\n",
            "def count_up_to(n)\n    primes = []\n    (2..n).step(lambda{|num| num | primes}) do |num|\n        primes << num\n    end\n    primes\nend\n",
            "def multiply(a, b)\n    abs(a) % 10 * abs(b) % 10\nend\n",
            "def count_upper(s)\n    vowels = \"AEIOU\"\n    s.chars.count { |c| vowels.include?(c) && (c.downcase == c) }\nend\n",
            "def closest_integer(value)\n    num = value.to_f\n    if num >= 0\n        int(num + 0.5)\n    else\n        int(num - 0.5)\n    end\nend\n",
            "def make_a_pile(n)\n    (0..n).map {|i| n + 2 * i}\nend\n",
            "def words_string(s)\n    s.split(/[, ]/)\nend\n",
            "def choose_num(x, y)\n    if x > y\n        return -1\n    if y % 2 == 0\n        return y\n    return y - 1 if x != y\n    -1\nend\n",
            "def rounded_avg(n, m)\n    if n > m\n        return nil\n    end\n    r_avg = ((m + n) / 2.0 + 0.5).to_i\n    bin(r_avg)\nend\n",
            "def all_digits_odd(s)\n    s.chars.all? { |c| (c.to_i % 2) != 0 }\nend\ndef unique_digits(x)\n    x.uniq.select { |num| all_digits_odd(num.to_s) }\nend\n",
            "def by_length(arr)\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = arr.select {|x| x.between?(1, 9)}.sort.reverse\n    sorted_arr.map {|x| digit_names[x-1]}\nend\n",
            "def f(n)\n    nums = (1..n).to_a\n    result = []\n    nums.each do |i|\n        if i % 2 != 0\n            result << (nums[0..i-1].sum)\n        else\n            result << (nums[0..i-1].product(1))\n        end\n    end\n    result\nend\n",
            "def is_palindrome(txt)\n    txt == txt.reverse\nend\ndef even_odd_palindrome(n)\n    even = 0\n    odd = 0\n    (1..n).each do |i|\n        if is_palindrome(i.to_s)\n            if i.odd?\n                odd += 1\n            else\n                even += 1\n            end\n        end\n    end\n    [even, odd]\nend\n",
            "def digits_sum(n)\n    n.to_s.each_char.sum\nend\ndef count_nums(arr)\n    arr.select {|n| digits_sum(n) > 0}.size\nend\n",
            "def move_one_ball(arr)\n    return true if arr.length == 0\n    sorted_arr = arr.sort\n    (0...len(arr)).each do |i|\n        if arr[i..] == sorted_arr[0...len(arr) - i] && arr[0...i] == sorted_arr[len(arr) - i..]\n            return true\n        end\n    end\n    false\nend\n",
            "def can_exchange(lst1, lst2)\n    odd_cnt = lst1.count { |num| num % 2 != 0 }\n    even_cnt = lst2.count { |num| num % 2 == 0 }\n    \"YES\" if even_cnt >= odd_cnt else \"NO\"\nend\n",
            "def histogram(test)\n    freq = Hash.new(0)\n    words = test.split(\" \")\n    words.each {|w| freq[w.downcase] += 1}\n    result = {}\n    if freq.length > 0\n        max_freq = freq.values.max\n        freq.each {|k, v| return result[k] = v if v == max_freq}\n    end\n    result\nend\n",
            "def is_palindrome(s)\n    s == s.reverse\nend\ndef reverse_delete(s, c)\n    s1 = s.gsub(c, '')\n    [s1, is_palindrome(s1) ? \"yes\" : \"no\"]\nend\n",
            "def odd_count(lst)\n    result = []\n    lst.each do |num|\n        n = num.scan(/\\d/).map(&:to_i).reduce(:+)\n        rs = \"the number of odd elements in the string #{n} of the input.\"\n        result << rs.sub(\"#",
            "def min_sub_array_sum(nums)\n    min_sum = 0\n    cur_sum = 0\n    nums.each do |n|\n        cur_sum = [cur_sum + n, 0].min\n        min_sum = [cur_sum, min_sum].min\n    end\n    if min_sum == 0\n        min_sum = nums.min\n    end\n    return min_sum\nend\n",
            "def max_fill(grid, capacity)\n    result = 0\n    grid.each do |arr|\n        result += (arr.size.to_f / capacity).ceil\n    end\n    result\nend\n",
            "def count_ones(num)\n    bin(num).count(\"1\")\nend\ndef sort_array(arr)\n    arr.sort! {|a, b| count_ones(a) <=> count_ones(b) || a <=> b}\n    arr\nend\n",
            "def select_words(s, n)\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return words.select {|w| w.length > 0}.select {|w| w.count(\"a\"|\"e\"|\"i\"|\"o\"|\"u\"|\"y\") == n}\nend\n",
            "def get_closest_vowel(word)\n    vowels = \"aeiouAEIOU\"\n    (0...len(word) - 2).reverse_each do |i|\n        if vowels.include?(word[i]) and vowels.exclude?(word[i - 1]) and vowels.exclude?(word[i + 1])\n            return word[i]\n        end\n    end\n    \"\"\nend\n",
            "def check(s)\n    depth = 0\n    s.chars.each do |c|\n        if c == \"(\"\n            depth += 1\n        else\n            depth -= 1\n        end\n        if depth < 0\n            return false\n        end\n    end\n    return true if depth == 0 else false\nend\ndef match_parens(lst)\n    s1 = \"#{lst[0]}#",
            "def maximum(arr, k)\n    return [] if k == 0\n    return arr.sort.take(k)\nend\n",
            "def solution(lst)\n    lst.select {|i, x| i % 2 == 0 && x % 2 != 0}.reduce(:+)\nend\n",
            "def add_elements(arr, k)\n    sum = 0\n    arr[0..k-1].each do |n|\n        if n.to_s.length <= 2\n            sum += n\n        end\n    end\n    sum\nend\n",
            "def get_odd_collatz(n)\n    collatz = [1]\n    while n != 1\n        if n % 2 == 0\n            collatz << n\n            n = n / 2\n        else\n            n = 3 * n + 1\n        end\n    end\n    collatz.sort\nend\n",
            "def valid_date(date)\n    if date.length != 10 || date[2] != \"-\" || date[5] != \"-\"\n        return false\n    end\n    m = date[0..1].to_i\n    d = date[3..4].to_i\n    if [1, 3, 5, 7, 8, 10, 12].include?(m) && d.between?(1, 31)\n        return true\n    end\n    if [4, 6, 9, 11].include?(m) && d.between?(1, 30)\n        return true\n    end\n    if m == 2 && d.between?(1, 29)\n        return true\n    end\n    return false\nend\n",
            "def split_words(txt)\n    if txt.include?(\" \")\n        txt.split(\" \")\n    elsif txt.include?(\",\")\n        txt.split(\",\")\n    else\n        [txt.count(\"a\")]\n    end\nend\n",
            "def is_sorted(lst)\n    return lst == lst.sort\nend\n",
            "def is_prime(n)\n    if n < 2\n        return false\n    end\n    for i in 2..Math.sqrt(n).to_i\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\ndef intersection(interval1, interval2)\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 && is_prime(length) else \"NO\"\nend\n",
            "def prod_signs(arr)\n    return nil if arr.empty?\n    return 0 if arr.sum(0) == 0\n    sign = arr.count(-1) % 2 == 0 ? 1 : -1\n    return sign * arr.abs.reduce(:*)\nend\n",
            "def min_path(grid, k)\n    n = grid.length\n    min_val = n * n + 1\n    result = []\n    for i in 0...n\n        for j in 0...n\n            if grid[i][j] == 1\n                temp = []\n                if i != 0\n                    temp.push(grid[i - 1][j])\n                if j != 0\n                    temp.push(grid[i][j - 1])\n                if i != n - 1\n                    temp.push(grid[i + 1][j])\n                if j != n - 1\n                    temp.push(grid[i][j + 1])\n                min_val = temp.min\n            end\n        end\n    end\n    for i in 0...k\n        result.push(1 if i % 2 == 0 else min_val)\n    end\n    return result\nend\n",
            "def tri(n)\n    return [1] if n == 0\n    seq = [1, 3]\n    for i in 1...n\n        if i % 2 == 0\n            seq << i / 2 + 1\n        else\n            seq << seq[i - 1] + seq[i - 2] + (i + 3) / 2\n        end\n    end\n    return seq\nend\n",
            "def digits(n)\n    n = abs(n)\n    sum = 0\n    while n > 0\n        sum += n % 10\n        n /= 10\n    end\n    sum\nend\n",
            "def is_nested(s)\n    open_idx = []\n    close_idx = []\n    s.scan(/\\[|\\]/) do |ch|\n        ch == '[' ? open_idx.push(s.index(ch)) : close_idx.push(s.index(ch))\n    end\n    close_idx.reverse!\n    cnt = 0\n    i = 0\n    l = close_idx.length\n    open_idx.each do |idx|\n        if i < l && idx < close_idx[i]\n            cnt += 1\n            i += 1\n        end\n    end\n    cnt >= 2\nend\n",
            "def sum_squares(lst)\n    lst.map {|n| pow(CelticOption.ceil(n), 2)}.reduce(:+)\nend\n",
            "def check_if_last_char_is_a_letter(txt)\n    return false if txt.empty?\n    last = txt[txt.rfind(' ') + 1..-1]\n    return last.length == 1 && last.match(/[a-zA-Z]/)\nend\n",
            "def can_arrange(arr)\n    return -1 if arr.length <= 1\n    idx = arr.select {|i| arr[i] < arr[i - 1]}\n    return idx.max || -1\nend\n",
            "def largest_smallest_integers(lst)\n    neg = lst.select {|i| i < 0}\n    pos = lst.select {|i| i > 0}\n    max_neg = neg.max if neg.size > 0 else nil\n    min_pos = pos.min if pos.size > 0 else nil\n    [max_neg, min_pos]\nend\n",
            "def any_to_real(o)\n    case o\n    when String\n        o.gsub(',', '.').to_f\n    when Integer\n        o.to_f\n    when Float\n        o\n    else\n        raise \"Type Error\"\n    end\nend\ndef compare_one(a, b)\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1\n        nil\n    elsif a1 > b1\n        a1\n    else\n        b1\n    end\nend\n",
            "def is_equal_to_sum_even(n)\n    n % 2 == 0 && n >= 8\nend\n",
            "def special_factorial(n)\n    fact = 1\n    result = 1\n    (1...n+1).each do |i|\n        fact *= i\n        result *= fact\n    end\n    result\nend\n",
            "def fix_spaces(txt)\n    txt.gsub(/\\s{3,}/, \"-\") {|m| \"_\" }\nend\n",
            "def file_name_check(file_name)\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if lst.length != 2 || lst[1] !~ /^(txt|exe|dll)$/ || lst[0].empty? || lst[0][0].to_chars.none? { |c| c.isdigit } || lst[0].scan(/\\d/).length > 3\n        return \"No\"\n    end\n    return \"Yes\"\nend\n",
            "def sum_squares(lst)\n    result = 0\n    lst.each_with_index do |num, i|\n        if i % 3 == 0\n            result += num ** 2\n        elsif i % 4 == 0\n            result += num ** 3\n        else\n            result += num\n        end\n    end\n    result\nend\n",
            "def is_prime(n)\n    if n < 2\n      false\n    end\n    (2..Math.sqrt(n)).none? { |i| n % i == 0 }\nend\ndef words_in_sentence(sentence)\n    words = sentence.split(\" \")\n    words.select! { |w| is_prime(w.length) }\n    words.join(\" \")\nend\n",
            "def simplify(x, n)\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = xs[0].to_i * ns[0].to_i\n    den = xs[1].to_i * ns[1].to_i\n    num %= den\n    num == 0\nend\n",
            "def digits_sum(n)\n    n_str = n.to_s\n    if n >= 0\n        n_str.each_char.sum\n    else\n        (2 * n_str[0..1].to_i) + digits_sum(n.abs)\n    end\nend\ndef order_by_points(nums)\n    nums.sort_by {|n| digits_sum(n)}\nend\n",
            "def special_filter(nums)\n    odds = \"13579\"\n    nums.select {|n| n > 10 && n % 2 == 1 && odds.include?(str(n)[0])}.size\nend\n",
            "def get_max_triples(n)\n    c = [0, 0, 0]\n    (1..n).each do |i|\n        a = i * i - i + 1\n        c[a % 3] += 1\n    end\n    result = c[0] * c[1] * c[2]\n    sum = 0\n    for i in 0...3\n        sum += c[i] * (c[i] - 1) * (c[i] - 2) / 6\n    end\n    result += sum\nend\n",
            "def bf(planet1, planet2)\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if !names.include?(planet1) || !names.include?(planet2)\n        return []\n    end\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r\n        l, r = r, l\n    end\n    if l == r\n        return []\n    end\n    return names[l..r].to_a\nend\n",
            "def sorted_list_sum(lst)\n    result = lst.select {|s| s.length % 2 == 0}\n    result = result.sort_by {|s| [s.length, s]}\n    result\nend\n",
            "def x_or_y(n, x, y)\n    if n < 2\n        return y\n    elsif n == 2\n        return x\n    elsif n % 2 == 0\n        return y\n    else\n        sqrt_n = Math.sqrt(n)\n        i = 3.to_i\n        while i <= sqrt_n\n            if n % i == 0\n                return y\n            i += 2\n        end\n        return x\n    end\nend\n",
            "def double_the_difference(lst)\n    lst.select! {|n| n >= 0 && n % 2 == 1}.inject(:+) do |sum, n|\n        sum + n * n\n    end\nend\n",
            "def compare(game, guess)\n    result = []\n    game.each_with_index do |num, index|\n        result << (num - guess[index])\n    end\n    result\nend\n",
            "def strongest_extension(class_name, extensions)\n    max_s = -Float::INFINITY\n    max_ext = \"\"\n    extensions.each do |ext|\n        upper = ext.count(\"A\")\n        lower = ext.count(\"a\")\n        s = upper - lower\n        if s > max_s\n            max_s = s\n            max_ext = ext\n        end\n    end\n    \"#{class_name}.#",
            "def cycpattern_check(a, b)\n    return false if a.length < b.length\n    b_cycle = b + b\n    a.each_with_index do |char, index|\n        next_index = (index + b.length) % a.length\n        if b_cycle.include?(char + a[next_index])\n            return true\n        end\n    end\n    false\nend\n",
            "def even_odd_count(num)\n    ds = num.abs.to_s\n    even = ds.count { |d| (ord(d) % 2) == 0 }\n    [even, ds.length - even]\nend\n",
            "def int_to_mini_roman(num)\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i in values.each_with_index do |value, index|\n        while num >= value\n            res << numerals[index]\n            num -= value\n        end\n    end\n    res.join(\"\")\nend\n",
            "def right_angle_triangle(a, b, c)\n    a**2 + b**2 == c**2\nend\n",
            "def find_max(words)\n    max_cnt = 0\n    max_w = \"\"\n    words.each do |w|\n        cnt = w.chars.uniq.size\n        if cnt > max_cnt\n            max_cnt = cnt\n            max_w = w\n        elsif cnt == max_cnt\n            max_w = min(max_w, w)\n        end\n    end\n    return max_w\nend\n",
            "def eat(num, need, remaining)\n    [num + need, remaining - need] if need <= remaining else [num + remaining, 0]\nend\n",
            "def do_algebra(operators, operands)\n    ops = operators.dup\n    nums = operands.dup\n    i = ops.length - 1\n    while i >= 0\n        if ops[i] == \"**\"\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.delete(i + 1)\n            ops.delete(i)\n            i -= 1\n        end\n        i -= 1\n    end\n    i = 0\n    while i < ops.length\n        if ops[i] == \"*\"\n            nums[i] = nums[i] * nums[i + 1]\n            nums.delete(i + 1)\n            ops.delete(i)\n            i -= 1\n        elsif ops[i] == \"//\"\n            nums[i] = nums[i] / nums[i + 1]\n            nums.delete(i + 1)\n            ops.delete(i)\n            i -= 1\n        end\n        i += 1\n    end\n    i = 0\n    while i < ops.length\n        if ops[i] == \"+\"\n            nums[i] = nums[i] + nums[i + 1]\n            nums.delete(i + 1)\n            ops.delete(i)\n            i -= 1\n        elsif ops[i] == \"-\"\n            nums[i] = nums[i] - nums[i + 1]\n            nums.delete(i + 1)\n            ops.delete(i)\n            i -= 1\n        end\n        i += 1\n    end\n    return nums[0]\nend\n",
            "def solve(s)\n    if s.empty?\n        return s\n    end\n    result = []\n    s.chars.each_with_index do |ch, i|\n        if ch.match(/[a-zA-Z]/)\n            result << ch\n            next\n        end\n        if i == 0\n            result << ch.downcase\n        else\n            result << ch.upcase\n        end\n    end\n    result.join(\"\")\nend\n",
            "def string_to_md5(txt)\n    if txt.nil?\n        return nil\n    end\n    md5_hash = Digest::MD5.new\n    txt_bytes = txt.to_s.encode('UTF-8')\n    md5_hash.update(txt_bytes)\n    md5_encoded = md5_hash.hexdigest\n    return md5_encoded\nend\n",
            "def generate_integers(a, b)\n    lower = [a, b].max(2).min(8)\n    upper = [a, b].min(8)\n    return (lower..upper).step(2).to_a\nend\n"
        ],
        "rust": [
            "pub fn has_close_elements(numbers: &Vec<f64>, threshold: f64) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    while j < numbers.len() as i32 {\n        if abs(numbers[i] as f64 - numbers[j] as f64) < threshold as f64 {\n            return true;\n        }\n        if j == i + 1 {\n            i += 1;\n            j += 1;\n        } else {\n            j += 1;\n        }\n    }\n    false\n}\n",
            "pub fn separate_paren_groups(paren_string: &str) -> Vec<String> {\n    let mut stk = Vec::new();\n    let mut current_group = String::new();\n    let mut groups = Vec::new();\n    for ch in paren_string.chars() {\n        if ch == '(' {\n            stk.push(ch);\n            current_group.push(ch);\n        } else if ch == ')' {\n            stk.pop();\n            current_group.push(ch);\n            if stk.is_empty() {\n                groups.push(current_group.to_string());\n                current_group = String::new();\n            }\n        } else {\n            current_group.push(ch);\n        }\n    }\n    groups\n}\n",
            "pub fn truncate_number(num: f64) -> f64 {\n    num - (num as f64).floor()\n}\n",
            "pub fn below_zero(operations: &Vec<i32>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n        balance += op;\n        if balance < 0 {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn mean_absolute_deviation(numbers: &Vec<f64>) -> f64 {\n    let mut numbers_sum = numbers.iter().sum::<f64>();\n    let mut numbers_count = numbers.len() as f64;\n    let mut abs_sum = numbers.iter().sum::<f64>();\n    for num in numbers {\n        numbers_sum += num;\n        abs_sum += abs(num);\n        numbers_count += 1.0;\n    }\n    (abs_sum / numbers_count).powf(2) / numbers_count\n}\n",
            "pub fn intersperse(numbers: &Vec<i32>, delimiter: i32) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len() {\n        if i != 0 {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    result\n}\n",
            "pub fn parse_nested_parens(paren_string: &str) -> Vec<i32> {\n    let mut result = Vec::new();\n    for group in paren_string.split_whitespace().iter() {\n        let max_depth = group\n            .par_iter()\n            .filter(|ch| ch == \"(\" || ch == \")\")\n            .count()\n            .wrap(0);\n        result.push(max_depth);\n    }\n    result\n}\n",
            "pub fn filter_by_substring(strs: &Vec<String>, substring: &String) -> Vec<String> {\n    let mut substring_set = HashSet::new();\n    substring_set.insert(substring.to_lowercase());\n    let mut result = Vec::new();\n    for s in strs {\n        if s.as_ref().to_lowercase().into() == substring_set.get(&substring.to_lowercase()).unwrap().as_ref() {\n            result.push(s);\n        }\n    }\n    result\n}\n",
            "pub fn sum_product(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut sum = 0;\n    let mut product = 1;\n    let mut n = numbers.len();\n    collect_into(&numbers, &mut sum);\n    collect_into_iter(&numbers, &mut product);\n    let mut result = vec![sum, product];\n    while n > 0 {\n        sum -= numbers[n - 1];\n        product *= numbers[n - 1];\n        n -= 1;\n        result[0] = sum;\n        result[1] = product;\n    }\n    result\n}\n",
            "pub fn rolling_max(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut max_so_far = -1_000_000_000_000_000_000;\n    let mut result = vec![];\n    for num in numbers.iter() {\n        max_so_far = max(max_so_far, num);\n        result.push(max_so_far);\n    }\n    result\n}\n",
            "pub fn make_palindrome(s: &str) -> str {\n    if s.len() < 2 {\n        return s.to_string();\n    }\n    for i in s.chars().rev().enumerate() {\n        if i.1.is_alpha() && s.extract(i.0, 1).is_palindrome() {\n            return s.to_string() + s.extract(0, i.0).reverse();\n        }\n    }\n    return \"\".to_string();\n}\n",
            "pub fn string_xor(a: &str, b: &str) -> String {\n    let a_chars = a.chars().map(|c| c.to_uppercase()).collect();\n    let b_chars = b.chars().map(|c| c.to_uppercase()).collect();\n    let mut result = String::new();\n    for i in 0..a_chars.len() {\n        if a_chars[i] == b_chars[i] {\n            result.push_str(\"0\");\n        } else {\n            result.push_str(\"1\");\n        }\n    }\n    result\n}\n",
            "pub fn longest(strs: &Vec<String>) -> Option<String> {\n    let mut max_len = strs[0].len();\n    let mut longest = strs[0].to_string();\n    for s in strs {\n        if s.len() > max_len {\n            max_len = s.len();\n            longest = s.to_string();\n        }\n    }\n    Some(longest)\n}\n",
            "pub fn greatest_common_divisor(a: i32, b: i32) -> i32 {\n    if b == 0 {\n        return a;\n    } else {\n        return greatest_common_divisor(b, a % b);\n    }\n}\n",
            "pub fn all_prefixes(s: &str) -> Vec<&str> {\n    let mut prefixes = Vec::new();\n    for i in s.len()..1 {\n        prefixes.push(&s[..i]);\n    }\n    prefixes\n}\n",
            "pub fn string_sequence(n: i32) -> String {\n    let mut result = String::new();\n    for i in 0..=n {\n        result.push_str(&i.to_string());\n        result.push_str(\" \");\n    }\n    result\n}\n",
            "pub fn count_distinct_characters(s: &str) -> i32 {\n    let chars = s.chars().map(|c| c.to_lowercase()).collect();\n    chars.iter().collect::<HashSet<_>>().len() as i32\n}\n",
            "pub fn parse_music(music_string: &str) -> Vec<i32> {\n    let mut durations = vec![4, 2, 1];\n    let mut notes = music_string.split(\" \").collect::<Vec<_>>();\n    let mut result = vec![];\n    for note in notes {\n        match note.chars().next().unwrap() {\n            'o' => result.push(durations.pop());\n            '.' => result.push(durations[0]);\n            '|' => result.push(durations[1]);\n            _ => eprintln!(\"Invalid note: {}\", note);\n        }\n    }\n    result\n}\n",
            "pub fn how_many_times(s: &str, substring: &str) -> i32 {\n    let mut times = 0;\n    for i in s.chars().zip(substring.chars()).take(s.len() - substring.len() + 1) {\n        if i[0] == i[1] {\n            times += 1;\n        }\n    }\n    times\n}\n",
            "pub fn sort_numbers(numbers: &str) -> String {\n    let mut num_dict = HashMap::new();\n    num_dict.insert(\"zero\", 0);\n    num_dict.insert(\"one\", 1);\n    num_dict.insert(\"two\", 2);\n    num_dict.insert(\"three\", 3);\n    num_dict.insert(\"four\", 4);\n    num_dict.insert(\"five\", 5);\n    num_dict.insert(\"six\", 6);\n    num_dict.insert(\"seven\", 7);\n    num_dict.insert(\"eight\", 8);\n    num_dict.insert(\"nine\", 9);\n    let mut num_list = numbers.split_whitespace().map(|s| s.to_lowercase()).collect();\n    num_list.sort_by(|a, b| num_dict[a].cmp(&num_dict[b]));\n    num_list.into(String::from)\n}\n",
            "pub fn find_closest_elements(numbers: &Vec<f64>) -> Vec<f64> {\n    let mut set = HashSet::new();\n    let mut min_diff = float!(inf);\n    let mut closest_pair = vec![];\n    for num in numbers {\n        set.insert(num);\n        for other in numbers {\n            if other != num {\n                let diff = (num - other).abs();\n                if diff < min_diff {\n                    min_diff = diff;\n                    closest_pair = vec![num, other];\n                }\n            }\n        }\n    }\n    closest_pair\n}\n",
            "pub fn rescale_to_unit(numbers: &Vec<f64>) -> Vec<f64> {\n    let mut numbers_rescaled = Vec::new();\n    let min_num = numbers.iter().min().unwrap();\n    let max_num = numbers.iter().max().unwrap();\n    if min_num == max_num {\n        numbers_rescaled = (0.0..0.0).repeat(numbers.len()).into();\n    } else {\n        for num in numbers {\n            numbers_rescaled.push((num - min_num) / (max_num - min_num));\n        }\n    }\n    numbers_rescaled\n}\n",
            "pub fn filter_integers(values: &Vec<Box<dyn Any>>) -> Vec<i32> {\n    values.into_iter()\n        .filter(|&x| x.into_inner().is_integer())\n        .map(|x| x.into_inner().into_i32_unchecked())\n        .collect()\n}\n",
            "pub fn str_length(s: &str) -> i32 {\n    s.len() as i32\n}\n",
            "pub fn largest_divisor(n: i32) -> i32 {\n    let mut largest = 1;\n    for i in 2..=n {\n        if n % i == 0 {\n            largest = n / i;\n        }\n    }\n    largest\n}\n",
            "pub fn factorize(n: i32) -> Vec<i32> {\n    let mut factors = vec![];\n    let mut divisor = 2;\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    factors\n}\n",
            "pub fn remove_duplicates(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut counts = HashMap::new();\n    let mut res = Vec::new();\n    for num in numbers {\n        if let count = counts.get_mut(num) {\n            count += 1;\n            if count > 1 {\n                counts.remove(num);\n            }\n        } else {\n            counts.insert(num, 1);\n            res.push(num);\n        }\n    }\n    res\n}\n",
            "pub fn flip_case(s: &str) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        if ch.is_ascii() {\n            if ch.is_uppercase() {\n                result.push(ch.to_lowercase());\n            } else {\n                result.push(ch.to_uppercase());\n            }\n        } else {\n            result.push(ch);\n        }\n    }\n    result\n}\n",
            "pub fn concatenate(strs: &Vec<String>) -> String {\n    strs.iter().join(\"\")\n}\n",
            "pub fn filter_by_prefix(strs: &Vec<String>, prefix_str: &str) -> Vec<String> {\n    strs.iter()\n        .filter(|s| s.as_bytes().starts_with(prefix_str.as_bytes()))\n        .map(|s| s.to_string())\n        .collect()\n}\n",
            "pub fn get_positive(l: &Vec<i32>) -> Vec<i32> {\n    l.into_iter()\n        .filter(|num| num > 0)\n        .collect()\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=(n as f64).sqrt() as i32 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn poly(xs: &Vec<i32>, x: f64) -> f64 {\n    let mut res = 0.0;\n    for i in 0..xs.len() {\n        res += xs[i] * x.powi(i);\n    }\n    res\n}\npub fn find_zero(xs: &Vec<i32>) -> f64 {\n    let mut xs_set = HashSet::new();\n    let mut xs_vec = xs.to_vec();\n    xs_set.insert(0);\n    let mut x1 = 1.0;\n    let mut x2 = -1.0;\n    while xs_set.len() < xs.len() {\n        if xs_vec.iter().any(|&x| x == 0) {\n            return 0.0;\n        }\n        if x1 * x2 <= 0.0 {\n            let mid = (x1 + x2) / 2.0;\n            if xs_set.contains(&mid) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n                xs_set.insert(mid);\n            }\n        }\n    }\n    (x1 + x2) / 2.0\n}\n",
            "pub fn sort_third(l: &Vec<i32>) -> Vec<i32> {\n    let mut l = l.to_vec();\n    l.sort(|a, b| {\n        if a % 3 == 0 && b % 3 == 0 {\n            a.cmp(&b)\n        } else if a % 3 == 0 {\n            a.cmp(&b)\n        } else if b % 3 == 0 {\n            b.cmp(&a)\n        } else {\n            a.cmp(&b)\n        }\n    });\n    l\n}\n",
            "pub fn list_unique(l: &Vec<i32>) -> Vec<i32> {\n    let mut set = HashSet::new();\n    let mut result = Vec::new();\n    for e in l {\n        set.insert(e);\n    }\n    for e in set {\n        result.push(e);\n    }\n    result\n}\n",
            "pub fn max_element(l: &Vec<i32>) -> i32 {\n    l.iter().max().unwrap()\n}\n",
            "pub fn fizz_buzz(n: i32) -> i32 {\n    let mut cnt = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += str(i).matches(\"*7*\").count();\n        }\n    }\n    cnt\n}\n",
            "pub fn sort_even(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_even = l[::2].sort();\n    let mut result = Vec::new();\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n            result.push(sorted_even[i / 2]);\n        } else {\n            result.push(l[i]);\n        }\n    }\n    result\n}\n",
            "pub fn encode_cyclic(s: &String) -> String {\n    let mut result = String::new();\n    for i in s.chars() {\n        if i == ' ' {\n            result.push_str(\" \");\n        } else {\n            result.push_str(s.chars().skip(3).collect::<String>());\n            result.push_str(i.to_string());\n        }\n    }\n    result\n}\npub fn decode_cyclic(s: &String) -> String {\n    encode_cyclic(encode_cyclic(s))\n}\n",
            "pub fn is_prime(n: &Number) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=n.as_unchecked() as &dyn Number {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn prime_fib(n: i32) -> i32 {\n    let mut f = vec![0, 1];\n    let mut cnt = 0;\n    while cnt < n {\n        f.push(f.last() + f.last());\n        if is_prime(&f[f.len() - 1]) {\n            cnt += 1;\n        }\n    }\n    f.last()\n}\n",
            "pub fn triples_sum_to_zero(l: &Vec<i32>) -> bool {\n    for i in l.iter().cartesian_product(l.iter()).cartesian_product(l.iter()) {\n        if i.0 + i.1.0 + i.2.0 == 0 {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn car_race_collision(n: i32) -> i32 {\n    n * n\n}\n",
            "pub fn incr_list(l: &Vec<i32>) -> Vec<i32> {\n    l.iter().map(|&i| i + 1).collect::<Vec<i32>>()\n}\n",
            "pub fn pairs_sum_to_zero(l: &Vec<i32>) -> bool {\n    let mut seen = HashSet::new();\n    for num in l {\n        if seen.contains(-num) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    false\n}\n",
            "pub fn change_base(x: i32, bas: i32) -> String {\n    match x {\n        0 => \"0\",\n        n if n < bas => String::from_char('0' as i32 + n),\n        n => format!(\"{:X}\", n as isize as i32),\n    }\n}\n",
            "pub fn triangle_area(a: i32, h: i32) -> f64 {\n    2 * a * h / (a + h) as f64\n}\n",
            "pub fn fib4(n: i32) -> i32 {\n    if n < 0 {\n        panic!(\"Input must be a non-negative integer\");\n    }\n    if n <= 1 {\n        return n;\n    }\n    let mut fib = [0, 0, 2, 0];\n    for i in 2..n {\n        fib[i % 4] = fib[i - 1] + fib[i - 2];\n    }\n    return fib[n % 4];\n}\n",
            "pub fn median(l: &Vec<f64>) -> f64 {\n    let mut sl = l.clone();\n    sl.sort();\n    if sl.len() % 2 != 0 {\n        sl[sl.len() / 2] as f64\n    } else {\n        (sl[sl.len() / 2] + sl[(sl.len() / 2) - 1]) / 2.0 as f64\n    }\n}\n",
            "pub fn is_palindrome(txt: &str) -> bool {\n    txt.chars().reverse().join().eq(txt.to_lowercase())\n}\n",
            "pub fn modp(n: i32, p: i32) -> i32 {\n    let mut ret = 1;\n    for _ in 0..n {\n        ret = (ret * 2) % p;\n    }\n    ret\n}\n",
            "pub fn encode_shift(s: &str) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        if ch.is_ascii() && (ch.to_uppercase() as u8 as i) - 65 < 26 {\n            result.push(((ch.to_uppercase() as u8 as i) - 65 + 5) % 26 + 65);\n        } else {\n            result.push(ch);\n        }\n    }\n    result\n}\npub fn decode_shift(s: &str) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        if ch.is_ascii() && (ch.to_uppercase() as u8 as i) - 65 < 26 {\n            result.push(((ch.to_uppercase() as u8 as i) - 37) % 26 + 65);\n        } else {\n            result.push(ch);\n        }\n    }\n    result\n}\n",
            "pub fn remove_vowels(txt: &str) -> str {\n    txt.split(\"\")\n        .filter(|&c| !c.chars().any(|&v| v.is_alpha() && v.is_ascii() && !v.is_numeric() && !v.is_whitespace() && !v.is_letter()))\n        .join(\"\")\n}\n",
            "pub fn below_threshold(l: &Vec<i32>, t: i32) -> bool {\n    l.iter().all(|&x| x < t)\n}\n",
            "pub fn add(x: i32, y: i32) -> i32 {\n    x + y\n}\n",
            "pub fn same_chars(s0: &str, s1: &str) -> bool {\n    let s0_set = s0.chars().collect::<HashSet<_>>();\n    let s1_set = s1.chars().collect::<HashSet<_>>();\n    s0_set == s1_set\n}\n",
            "pub fn fib(n: i32) -> i32 {\n    if n <= 1 {\n        return n;\n    }\n    let mut a = 0;\n    let mut b = 1;\n    let mut c;\n    for _ in 0..(n - 1) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    c\n}\n",
            "pub fn correct_bracketing(brackets: &str) -> bool {\n    let mut depth = 0;\n    for c in brackets.chars() {\n        if c == '<' {\n            depth += 1;\n        } else if c == '>' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn monotonic(l: &Vec<i32>) -> bool {\n    let mut diff = Vec::new();\n    for x, y in l.iter().zip(&l[1..]) {\n        diff.push(y - x);\n    }\n    all(x <= 0 for x in diff.iter()) || all(x >= 0 for x in diff.iter())\n}\n",
            "pub fn common(l1: &Vec<i32>, l2: &Vec<i32>) -> Vec<i32> {\n    let l1_set = l1.into_iter().collect::<HashSet<_>>();\n    let l2_set = l2.into_iter().collect::<HashSet<_>>();\n    l1_set.intersection(l2_set).into_collect::<Vec<_>>()\n}\n",
            "pub fn largest_prime_factor(n: i32) -> i32 {\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    n\n}\n",
            "pub fn sum_to_n(n: i32) -> i32 {\n    let mut result = 0;\n    for i in 0..=n {\n        result += i;\n    }\n    result\n}\n",
            "pub fn correct_bracketing(brackets: &str) -> bool {\n    let mut depth = 0;\n    for c in brackets.chars() {\n        if c == '(':\n            depth += 1;\n        elif c == ')':\n            depth -= 1;\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn derivative(xs: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(i * xs[i]);\n    }\n    result\n}\n",
            "pub fn fibfib(n: i32) -> i32 {\n    if n <= 1 {\n        0\n    } else if n == 2 {\n        1\n    } else {\n        fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n    }\n}\n",
            "pub fn vowels_count(s: &str) -> i32 {\n    let s = s.to_lowercase();\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut cnt = 0;\n    for c in s.chars() {\n        if vowels.contains(&c) {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n",
            "pub fn circular_shift(x: i32, shift: i32) -> String {\n    let x_str = x.to_string();\n    if shift > x_str.len() {\n        x_str.chars().reverse().join()\n    } else {\n        x_str.chars().skip(shift as usize).reverse().join()\n    }\n}\n",
            "pub fn digit_sum(s: &str) -> i32 {\n    s.as_cii_upper().map(|c| c.as_usi()).sum() as i32\n}\n",
            "pub fn fruit_distribution(s: &str, n: i32) -> i32 {\n    let words = s.split_whitespace().map(|w| w.to_owned()).collect();\n    let apples = words[words.len() - 2].parse::<i32>().unwrap();\n    let oranges = words[words.len() - 1].parse::<i32>().unwrap();\n    n - apples - oranges\n}\n",
            "pub fn pluck(arr: &Vec<i32>) -> Vec<i32> {\n    let mut evens = arr.iter().filter(|&n| n % 2 == 0).collect();\n    if evens.is_empty() {\n        return vec![];\n    }\n    let min_even = evens.iter().min().unwrap();\n    vec![min_even, arr.iter().zip(arr).filter(|&(a, b)| b == min_even).next().unwrap()]\n}\n",
            "pub fn search(lst: &Vec<i32>) -> i32 {\n    let mut freqs = HashMap::new();\n    for n in lst {\n        let mut count = freqs.get_or_insert(n, 0);\n        count += 1;\n        freqs.insert(n, count);\n    }\n    let mut good_vals = Vec::new();\n    for (k, v) in freqs.iter() {\n        if v >= k {\n            good_vals.push(k);\n        }\n    }\n    if let Some(max_val) = good_vals.max() {\n        max_val\n    } else {\n        -1\n    }\n}\n",
            "pub fn strange_sort_list(lst: &Vec<i32>) -> Vec<i32> {\n    let mut sl = lst.to_vec();\n    let mut result = vec![];\n    let mut left = 0;\n    let mut right = lst.len() - 1;\n    while left <= right {\n        result.push(sl[left]);\n        left += 1;\n        if left <= right {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    result\n}\n",
            "pub fn triangle_area(a: i32, b: i32, c: i32) -> f64 {\n    if a < 0 || b < 0 || c < 0 {\n        return -1.0;\n    }\n    let a_f = a as f64;\n    let b_f = b as f64;\n    let c_f = c as f64;\n    if a_f == b_f && b_f == c_f {\n        return 0.5 * a_f * b_f * sqrt(3) / 4.0;\n    }\n    if a_f == b_f {\n        let s = (a_f + b_f + c_f) / 2.0;\n        return 0.5 * sqrt(s * (s - a_f) * (s - b_f) * (s - c_f));\n    }\n    if b_f == c_f {\n        let s = (a_f + b_f + c_f) / 2.0;\n        return 0.5 * sqrt(s * (s - a_f) * (s - b_f) * (s - c_f));\n    }\n    if a_f == c_f {\n        let s = (a_f + b_f + c_f) / 2.0;\n        return 0.5 * sqrt(s * (s - a_f) * (s - b_f) * (s - c_f));\n    }\n    let p = (a_f - b_f + c_f) / 2.0;\n    let area = p * p * sqrt(p * p * (p - a_f) * (p - b_f) * (p - c_f) / p);\n    if area <= 0.0 {\n        return -1.0;\n    }\n    return area;\n}\n",
            "pub fn will_it_fly(q: &Vec<i32>, w: i32) -> bool {\n    if q.len() == 0 {\n        return false;\n    }\n    let mut rev_q = q.clone();\n    rev_q.reverse();\n    let is_palin = q.iter().zip(rev_q.iter()).all(|(&x, &y)| x == y);\n    let total = q.iter().fold(0, |a, x| a + x);\n    is_palin && total <= w\n}\n",
            "pub fn smallest_change(arr: &Vec<i32>) -> i32 {\n    let mut ans = 0;\n    for i in 0..arr.len() / 2 {\n        if arr[i] != arr.clone().reverse().get_range(i, arr.len() - i - 1).unwrap() {\n            ans += 1;\n        }\n    }\n    ans\n}\n",
            "pub fn total_match(lst1: &Vec<String>, lst2: &Vec<String>) -> Vec<String> {\n    let cnt1 = lst1.iter().map(|s| s.as_ref().len()).sum();\n    let cnt2 = lst2.iter().map(|s| s.as_ref().len()).sum();\n    if cnt1 <= cnt2 {\n        lst1\n    } else {\n        lst2\n    }\n}\n",
            "pub fn is_multiply_prime(a: i32) -> bool {\n    let mut cnt = 0;\n    for i in 2..=a.abs() as i32 {\n        if is_prime(i).into_bool() {\n            while a % i == 0 {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    cnt == 3\n}\npub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=floor(sqrt(n).into_f64).round().into_i32 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn is_simple_power(x: i32, n: i32) -> bool {\n    if n < 2 {\n        return x == n;\n    }\n    let mut tmp = 1;\n    while tmp < x {\n        tmp *= n;\n    }\n    tmp == x\n}\n",
            "pub fn is_cube(a: i32) -> bool {\n    a = abs(a);\n    let root = (a as f64).pow(1.0 / 3.0) as i32;\n    root * root * root == a\n}\n",
            "pub fn hex_key(num: &str) -> i32 {\n    let num_arr = num.chars().map(|c| c.to_uppercase() - 'A' as i32).collect();\n    let num_arr = num_arr.iter().filter(|&c| c >= 0 && c <= 15).collect();\n    num_arr.len() as i32\n}\n",
            "pub fn decimal_to_binary(dec: i32) -> String {\n    match dec {\n        0 => \"0b0\".to_string(),\n        1 => \"1\".repeat(dec)\n        _ => format!(\"db{:b}db\", dec)\n    }\n}\n",
            "pub fn is_happy(s: &str) -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    for i in 0..s.len() - 2 {\n        if s.chars().skip(i).take(3).all() {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn numerical_letter_grade(grades: &Vec<f64>) -> Vec<String> {\n    let mut result = vec![];\n    for g in grades {\n        if g == 4.0 {\n            result.push(\"A+\");\n        } else if g > 3.7 {\n            result.push(\"A\");\n        } else if g > 3.3 {\n            result.push(\"A-\");\n        } else if g > 3.0 {\n            result.push(\"B+\");\n        } else if g > 2.7 {\n            result.push(\"B\");\n        } else if g > 2.3 {\n            result.push(\"B-\");\n        } else if g > 2.0 {\n            result.push(\"C+\");\n        } else if g > 1.7 {\n            result.push(\"C\");\n        } else if g > 1.3 {\n            result.push(\"C-\");\n        } else if g > 1.0 {\n            result.push(\"D+\");\n        } else if g > 0.7 {\n            result.push(\"D\");\n        } else if g > 0.0 {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    result\n}\n",
            "pub fn prime_length(s: &str) -> bool {\n    let length = s.len();\n    if length < 2 {\n        return false;\n    }\n    for i in 2..length.as_usize().sqrt().as_usize() {\n        if length % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn starts_one_ends(n: i32) -> i32 {\n    if n == 1 {\n        return 1;\n    }\n    returnn_000_000_000_000_000_000_000_000_000_000_000_\n_000_000_000_000_000_\n_\n_\n_\n_\n_000_\n_\n_\n_000_000_000_\n_000_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n",
            "pub fn solve(n: i32) -> String {\n    let digits_sum = (n.to_str().chars().map(|c| c.as_uchar() - '0').sum() as i32);\n    let mut result = String::new();\n    while digits_sum > 0 {\n        result.push(digits_sum % 2);\n        digits_sum /= 2;\n    }\n    result.reverse();\n    result\n}\n",
            "pub fn add(lst: &Vec<i32>) -> i32 {\n    let mut result = 0;\n    for i, x in lst.iter().enumerate() {\n        if i % 2 == 1 && x % 2 == 0 {\n            result += x;\n        }\n    }\n    result\n}\n",
            "pub fn anti_shuffle(s: &str) -> str {\n    let mut words: Vec<String> = vec![];\n    for word in s.split_whitespace().collect::<Vec<&str>>() {\n        words.push(word.chars().sort_by(|a, b| a.cmp(&b)).into_owned());\n    }\n    words.into_iter().map(|&chars| chars.into_string()).collect::<String>()\n}\n",
            "pub fn get_row(lst: &Vec<Vec<i32>>, x: i32) -> Vec<Vec<i32>> {\n    let mut coords = Vec::new();\n    for i in 0..lst.len() {\n        for j in 0..lst[i].len() {\n            if lst[i][j] == x {\n                coords.push(vec![i, j]);\n            }\n        }\n    }\n    coords.sort(|a, b| {\n        if a[0] == b[0] {\n            b[1].cmp(&a[1])\n        } else {\n            a[0].cmp(&b[0])\n        }\n    });\n    coords\n}\n",
            "pub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    match (arr[0] + arr[arr.len() - 1]) % 2 {\n        0 => arr.sort_by(|a, b| b.cmp(&a)).into_owned(),\n        _ => arr.sort_by(|a, b| a.cmp(&b)).into_owned(),\n    }\n}\n",
            "pub fn encrypt(s: &str) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        let shifted = (ch as u8 - 4 + 26) as u8 % 26;\n        result.push(shifted.to_char());\n    }\n    result\n}\n",
            "pub fn next_smallest(lst: &Vec<i32>) -> Option<i32> {\n    let mut set = HashSet::new();\n    let mut min_heap = lst.clone().into_iter().peekable();\n    while let Some(e) = min_heap.peek() {\n        let mut iter = min_heap.clone();\n        let mut peek = iter.next().unwrap();\n        if peek < e {\n            return Some(peek);\n        }\n        set.extend(iter);\n        min_heap = min_heap.map(|e| e.into_inner()).into_iterator().clones();\n    }\n    if set.len() < 2 {\n        return None;\n    }\n    let mut iter = set.into_iter().clones();\n    let mut peek = iter.next().unwrap();\n    min_heap.replace(peek);\n    min_heap.extend(iter);\n    min_heap.next().unwrap();\n    Some(peek)\n}\n",
            "pub fn is_bored(s: &str) -> i32 {\n    let sentences = s.split(\". \").map(|s| s.strip()).collect::<Vec<&str>>();\n    let mut count = 0;\n    for sentence in sentences {\n        if sentence.len() >= 2 && sentence[:2] == \"I \" {\n            count += 1;\n        }\n    }\n    count\n}\n",
            "pub fn any_int(x: &dyn Box<dyn Any>, y: &dyn Box<dyn Any>, z: &dyn Box<dyn Any>) -> bool {\n    if let (Some(x_int), Some(y_int), Some(z_int)) = x.as_ref() as {Box<dyn T> }.map(|ref| if let i32(x) = ref.unwrap() { Some(x) } else { None }){Box<dyn T> }.map(|ref| if let i32(y) = ref.unwrap() { Some(y) } else { None }){Box<dyn T> }.map(|ref| if let i32(z) = ref.unwrap() { Some(z) } else { None }){Box<dyn T> } {\n        if x_int + y_int == z_int || x_int + z_int == y_int || y_int + z_int == x_int {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn encode(message: &str) -> String {\n    let mut result = String::new();\n    for ch in message {\n        if ch.is_ascii() {\n            let ch1 = ch.to_uppercase() if ch.is_lowercase() else ch.to_lowercase();\n            if ch1 == 'a' || ch1 == 'e' || ch1 == 'i' || ch1 == 'o' || ch1 == 'u' {\n                ch1 = (ch1.add_one() % 'e' + 'a').chr();\n            }\n            result.push(ch1);\n        } else {\n            result.push(ch);\n        }\n    }\n    result\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=(floor(sqrt(n)) as i32).into_inner() {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn skjkasdkd(lst: &Vec<i32>) -> i32 {\n    let mut primes = HashSet::new();\n    for n in lst {\n        if is_prime(n) {\n            primes.insert(n);\n        }\n    }\n    if primes.len() == 0 {\n        return 0;\n    }\n    let mut largest = str(max(primes.iter().map(|n| n.to_str().as_ref()).flatten()).as_ref());\n    let mut sum = 0;\n    for c in largest.chars() {\n        match c.into() {\n            Digit::Int(d) if is_power_of_two(d) => sum + d,\n            _ => nop,\n        }\n    }\n    sum\n}\n",
            "pub fn check_dict_case(d: &HashMap<String, String>) -> bool {\n    if let None = d.keys().iter().next() {\n        return false;\n    }\n    let keys = d.keys().map(|k| k.to_lowercase()).collect();\n    let values = d.values().map(|v| v.to_lowercase()).collect();\n    all(keys.iter().zip(values.iter()).map(|(k,v), (k2,v2)| k.eq(k2) && v.eq(v2)).all())\n}\n",
            "pub fn count_up_to(n: i32) -> Vec<i32> {\n    let mut primes = vec![];\n    for num in 2..=n {\n        let mut is_prime = true;\n        for p in &primes {\n            if num % p == 0 {\n                is_prime = false;\n                break;\n            }\n        }\n        if is_prime {\n            primes.push(num);\n        }\n    }\n    primes\n}\n",
            "pub fn multiply(a: i32, b: i32) -> i32 {\n    (abs(a) % 10) * (abs(b) % 10)\n}\n",
            "pub fn count_upper(s: &str) -> i32 {\n    let mut count = 0;\n    for c in s.chars() {\n        if c.is_ascii() && c.is_ascii_uppercase() {\n            count += 1;\n        }\n    }\n    count\n}\n",
            "pub fn closest_integer(value: &str) -> i32 {\n    let num = value.trim().parse().unwrap_or(0.0);\n    if num >= 0.0 {\n        (num + 0.5).round().clamp_as_usize(0, 1e9)\n    } else {\n        (num - 0.5).round().clamp_as_usize(0, 1e9)\n    }\n}\n",
            "pub fn make_a_pile(n: i32) -> Vec<i32> {\n    let mut pile: Vec<i32> = vec![];\n    for i in 0..n {\n        pile.push(n + 2 * i);\n    }\n    pile\n}\n",
            "pub fn words_string(s: &str) -> Vec<String> {\n    let mut result = vec![];\n    for w in s.split(\", \") {\n        if !w.is_empty() {\n            result.push(w.to_string());\n        }\n    }\n    result\n}\n",
            "pub fn choose_num(x: i32, y: i32) -> i32 {\n    if x > y {\n        return -1;\n    }\n    if y % 2 == 0 {\n        return y;\n    }\n    if x != y {\n        return y - 1;\n    }\n    return -1;\n}\n",
            "pub fn rounded_avg(n: i32, m: i32) -> Option<String> {\n    if n > m {\n        return None;\n    }\n    let r_avg = (m + n) / 2.0 + (0.5 as f64);\n    let mut bf = BinaryFormat::new();\n    let mut vec = Vec::new();\n    for i in 0..r_avg.ceil() as i32 - 1 {\n        vec.push(i);\n    }\n    for i in r_avg.floor() as i32..1 {\n        vec.push(i);\n    }\n    let s = vec.into_string().chars().map(|c| c.to_uppercase()).collect();\n    Some(s)\n}\n",
            "pub fn all_digits_odd(s: &str) -> bool {\n    s.chars().all(|c| (c as u8) % 2 != 0)\n}\npub fn unique_digits(x: &Vec<i32>) -> Vec<i32> {\n    x.into_iter()\n        .filter(all_digits_odd)\n        .into_collect(std::collectors::into_vec())\n}\n",
            "pub fn by_length(arr: &Vec<i32>) -> Vec<String> {\n    let mut sorted_arr = arr.to_vec();\n    sorted_arr.sort_by(|a, b| b.sub(a) as i32);\n    let mut result = vec![];\n    for x in sorted_arr {\n        if x >= 1 && x <= 9 {\n            result.push(x.to_string().to_owned());\n        }\n    }\n    result\n}\n",
            "pub fn f(n: i32) -> Vec<i32> {\n    let mut result = Vec::new();\n    let mut nums = vec![..];\n    for i in 1..=n {\n        nums.push(i);\n        if i % 2 != 0 {\n            result.push(sum(nums[..i]));\n        } else {\n            let mut product = 1;\n            for j in 1..i {\n                product *= j;\n            }\n            result.push(product);\n        }\n    }\n    result\n}\n",
            "pub fn is_palindrome(txt: &str) -> bool {\n    txt == txt.chars().reverse().collect()\n}\npub fn even_odd_palindrome(n: i32) -> Vec<i32> {\n    let mut cnt = vec![0, 0];\n    for i in 1..=n {\n        if is_palindrome(format!(\"{}\", i)) {\n            cnt[i % 2] += 1;\n        }\n    }\n    vec![cnt[0], cnt[1]]\n}\n",
            "pub fn digits_sum(n: i32) -> i32 {\n    let n_str = n.to_string();\n    if n >= 0 {\n        n_str.chars().map(|c| c.as_i32()).sum()\n    } else {\n        (n_str.chars().skip(1).map(|c| c.as_i32()).sum() * 2) + digits_sum(n.abs())\n    }\n}\npub fn count_nums(arr: &Vec<i32>) -> i32 {\n    arr.iter().filter(|n| digits_sum(n) > 0).count()\n}\n",
            "pub fn move_one_ball(arr: &Vec<i32>) -> bool {\n    let mut arr_map: HashMap<i32, usize> = HashMap::new();\n    for i in arr.iter().enumerate() {\n        arr_map.insert(i.1, i.0);\n    }\n    for i in arr.iter().enumerate() {\n        if arr_map.get_mut(i.1).and_then(|x| x % 2 == 0) == Some(i.0) {\n            arr_map.remove(i.1);\n            if arr_map.get_mut(i.1).and_then(|x| x % 2 == 1) == Some(i.0) {\n                arr_map.remove(i.1);\n                return true;\n            }\n            arr_map.insert(i.1, i.0);\n        }\n    }\n    false\n}\n",
            "pub fn can_exchange(lst1: &Vec<i32>, lst2: &Vec<i32>) -> String {\n    let odd_cnt = lst1.iter().filter(|&num| num % 2 != 0).count();\n    let even_cnt = lst2.iter().filter(|&num| num % 2 == 0).count();\n    if even_cnt >= odd_cnt {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n",
            "pub fn histogram(test: &str) -> HashMap<&str, i32> {\n    let mut freq = HashMap::new();\n    let words = test.split(\" \").map(|w| w.to_string()).collect::<Vec<&str>>();\n    for w in words {\n        let count = freq.get_or_insert(w, 0);\n        freq[w] = count + 1;\n    }\n    let mut result = HashMap::new();\n    if !freq.is_empty() {\n        let max_count = freq.values().max().unwrap();\n        for (k, v) in freq.items() {\n            if v == max_count {\n                result.insert(k, v);\n            }\n        }\n    }\n    result\n}\n",
            "pub fn reverse_delete(s: &str, c: &str) -> Vec<String> {\n    let s1 = s.chars().filter(|ch| !c.contains(ch.as_lower())).collect::<Vec<u8>>().map(|ch| ch as i8).into();\n    let is_palindrome = s1.slice(0, s1.len() / 2).reverse().eq(s1.slice(s1.len() / 2, s1.len() / 2 + s1.len() / 2))\n    vec![s1.into(), if is_palindrome { \"yes\" } else { \"no\" }]\n}\n",
            "pub fn odd_count(lst: &Vec<String>) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in lst {\n        let n = i.chars().map(|c| c.to_u32() % 2 == 1).sum();\n        let rs = format!(\"the number of odd elements in the string {} of the input.\", n);\n        result.push(rs);\n    }\n    result\n}\n",
            "pub fn min_sub_array_sum(nums: &Vec<i32>) -> i32 {\n    let mut cur_sum = 0;\n    let mut min_sum = 0;\n    let mut seen = HashSet::new();\n    for n in nums {\n        cur_sum += n;\n        if cur_sum < 0 {\n            cur_sum = 0;\n        }\n        if cur_sum in seen {\n            min_sum = cur_sum;\n        } else {\n            seen.insert(cur_sum);\n        }\n    }\n    if min_sum == 0 {\n        min_sum = *nums.iter().min_by(|&n| n.abs())\n    }\n    min_sum\n}\n",
            "pub fn max_fill(grid: &Vec<Vec<i32>>, capacity: i32) -> i32 {\n    let mut total = 0;\n    for row in grid {\n        for e in row {\n            total += ceil(f64::approx_ratio(f64::from(e), capacity.0) as i32);\n        }\n    }\n    total\n}\n",
            "pub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    let mut pq = BinaryHeap::new();\n    for e in arr {\n        pq.push(e);\n    }\n    let mut result = Vec::new();\n    while !pq.is_empty() {\n        result.push(pq.pop().unwrap());\n    }\n    result\n}\n",
            "pub fn select_words(s: &String, n: i32) -> Vec<String> {\n    let s_str = s.as_ref();\n    let words = s_str.split(\" \").map(|s| s.to_owned()).collect();\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let mut consonant_set = HashSet::new();\n    for c in consonants.to_string() {\n        consonant_set.insert(c.parse::<i32>().unwrap());\n    }\n    let mut result = Vec::new();\n    for w in words {\n        if w.chars().filter(|c| consonant_set.contains(c.to_string().parse::<i32>().unwrap())).count() == n {\n            result.push(w);\n        }\n    }\n    result\n}\n",
            "pub fn get_closest_vowel(word: &str) -> str {\n    let mut vowels = \"aeiouAEIOU\".chars().collect();\n    let mut result = \"\";\n    for i in word.chars().rev().collect() {\n        if vowels.len() < 1 {\n            break;\n        }\n        if i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u' {\n            result = i.to_string();\n            vowels.remove(&i);\n        }\n    }\n    result\n}\n",
            "pub fn match_parens(lst: &Vec<String>) -> String {\n    let s1 = lst[0].as_str() + lst[1].as_str();\n    let s2 = lst[1].as_str() + lst[0].as_str();\n    if check(s1) || check(s2) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\nfn check(s: &str) -> bool {\n    let mut depth = 0;\n    for ch in s.chars() {\n        if ch == \"(\".to_char() {\n            depth += 1;\n        } else if ch == \")\".to_char() {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn maximum(arr: &Vec<i32>, k: i32) -> Vec<i32> {\n    if k == 0 {\n        return vec![];\n    }\n    arr.sort_by(|a, b| b.cmp(&a)).into_owned();\n    arr.into_iter().take(k).collect()\n}\n",
            "pub fn solution(lst: &Vec<i32>) -> i32 {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    for x in lst {\n        if x % 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count += 1;\n        }\n    }\n    let mut result = 0;\n    if even_count > odd_count {\n        result = even_count - odd_count;\n    } else {\n        result = odd_count - even_count;\n    }\n    result\n}\n",
            "pub fn add_elements(arr: &Vec<i32>, k: i32) -> i32 {\n    let mut result = 0;\n    for n in arr.iter().take(k) {\n        if n.to_str().len() <= 2 {\n            result += n;\n        }\n    }\n    result\n}\n",
            "pub fn get_odd_collatz(n: i32) -> Vec<i32> {\n    let mut collatz = vec![];\n    while n != 1 {\n        if n % 2 != 0 {\n            collatz.append(n);\n            n = (3 * n + 1) as i32;\n        } else {\n            n = (n / 2) as i32;\n        }\n    }\n    collatz.sort();\n    collatz\n}\n",
            "pub fn valid_date(date: &str) -> bool {\n    let mut date = date.chars();\n    let m = date.next().unwrap();\n    let d = date.next().unwrap();\n    let y = std::iter::move_zip(date, date).map(|(m, d), (y, _)| (y.to_string() + y.to_string())).unwrap();\n    let m = m.to_string();\n    let d = d.to_string();\n    if m == \"01\" && d == \"01\" {\n        return true;\n    }\n    if m == \"02\" && d == \"29\" && y.len() == 4 {\n        return true;\n    }\n    if m == \"02\" && d == \"28\" && (y.len() == 2 || y.len() == 4) {\n        return true;\n    }\n    if m == \"03\" && d == \"31\" {\n        return true;\n    }\n    if m == \"04\" && d == \"30\" {\n        return true;\n    }\n    if m == \"05\" && d == \"31\" {\n        return true;\n    }\n    if m == \"06\" && d == \"30\" {\n        return true;\n    }\n    if m == \"07\" && d == \"31\" {\n        return true;\n    }\n    if m == \"08\" && d == \"31\" {\n        return true;\n    }\n    if m == \"09\" && d == \"30\" {\n        return true;\n    }\n    if m == \"10\" && d == \"31\" {\n        return true;\n    }\n    if m == \"11\" && d == \"30\" {\n        return true;\n    }\n    if m == \"12\" && d == \"31\" {\n        return true;\n    }\n    false\n}\n",
            "pub fn split_words(txt: &str) -> Vec<&str> {\n    if txt.find(\" \") != -1 {\n        txt.split(\" \").collect::<Vec<&str>>()\n    } else if txt.find(\",\") != -1 {\n        txt.split(\",\").collect::<Vec<&str>>()\n    } else {\n        vec![format!(\"{}\", txt.chars().filter(|c| c.is_lowercase() && (c - 'a' as i32) % 2 == 0).collect::<Vec<String>>().len())]\n    }\n}\n",
            "pub fn is_sorted(lst: &Vec<i32>) -> bool {\n    lst.iter().fold(true, |i, j| i && j <= i.as_ref().as_ref().as_ref().as_ref());\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=(floor(sqrt(n)) as i32).into() {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn intersection(interval1: &Vec<i32>, interval2: &Vec<i32>) -> String {\n    let mut s = HashSet::new();\n    let mut l = max(interval1[0], interval2[0]);\n    let mut r = min(interval1[1], interval2[1]);\n    while l <= r {\n        if s.insert(l) {\n            let space = alignment(l) - (l as &i32).binary_repr_bytes().len();\n            let _ = write(Precision::unlimited(), || {\n                space;\n                write!(f, \"{}\", l);\n            });\n        }\n        l += 1;\n    }\n    if s.len() == 0 {\n        return \"NO\";\n    }\n    if is_prime(s.len() as i32) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\nimpl<T: Ord + Lt> T {\n    fn __hash__(&self) -> u32 {\n        self.hash()\n    }\n}\nimpl<T: Ord + Lt> T for [T; _] {\n    fn __hash__(&self) -> u32 {\n        self[0].__hash__()\n    }\n}\nimpl<T: Ord + Lt> T for [T; _] {\n    fn __hash__(&self) -> u32 {\n        self[0].__hash__()\n    }\n}\nimpl<T: Ord + Lt> T for [T; _] {\n    fn __hash__(&self) -> u32 {\n        self[0].__hash__()\n    }\n}\nimpl<T: Ord + Lt> T for [T; _] {\n    fn __hash__(&self) -> u32 {\n        self[0].__hash__()\n    }\n}\nimpl<T: Ord + Lt> T for [T; _] {\n    fn __hash__(&self) -> u32 {\n        self[0].__hash__()\n    }\n}\nimpl<T: Ord + Lt> T for [T; _] {\n    fn __hash__(&self) -> u32 {\n        self[0].__hash__()\n    }\n}\nimpl<T: Ord + Lt> T for [T; _] {\n    fn __hash__(&self) -> u32 {\n        self[0].__hash__()\n    }\n}\nimpl<T: Ord + Lt> T for [T; _] {\n    fn __hash__(&self) -> u32 {\n        self[0].__hash__()\n    }\n}\nimpl<T: Ord + Lt> T for [T; _] {\n    fn __hash__(&self) -> u32 {\n        self[0].__hash__()\n    }\n}\nimpl<T: Ord + Lt> T for [T; _] {\n    fn __hash__(&self) -> u32 {\n        self[0].__hash__()\n    }\n}\nimpl<T: Ord + Lt> T for [T; _] {\n    fn __hash__(&self) -> u32 {\n        self[0].__hash__()\n    }\n}\nimpl<T: Ord + Lt> T for [T; _] {\n    fn __hash__(&self) -> u32 {\n        self[0].__hash__()\n    }\n}\nimpl<T: Ord + Lt> T for [T; _] {\n    fn __hash__(&self) -> u32 {\n        self[0].__hash__()\n    }\n}\nimpl<T: Ord + Lt> T for [T; _] {\n    fn __hash__(&self) -> u32 {\n        self[0].__hash__()\n    }\n}\nimpl<T: Ord + Lt> T for [T; _] {\n    fn __hash__(&self) -> u32 {\n        self[0].__hash__()\n    }\n}\nimpl<T: Ord + Lt> T for [T; _] {\n    fn __hash__(&self) -> u32 {\n        self[0].__hash__()\n    }\n}\nimpl<T: Ord + Lt> T for [T; _] {\n    fn __hash__(&self) -> u32 {\n        self[0].__hash__()\n    }\n}\nimpl<T: Ord + Lt> T for [T; _] {\n    fn __hash__(&self) -> u32 {\n        self[0].__hash__()\n    }\n}\nimpl<T: Ord + Lt> T for [T; _] {\n    fn __hash__(&self) -> u32 {\n        self[0].__hash__()\n    }\n}\nimpl<T: Ord + Lt> T for [T; _] {\n    fn __hash__(&self) -> u32 {\n        self[0].__hash__()\n    }\n",
            "pub fn prod_signs(arr: &Vec<i32>) -> Option<i32> {\n    if arr.is_empty() {\n        return None;\n    }\n    if arr.contains(0) {\n        return Some(0);\n    }\n    let mut set = HashSet::new();\n    let mut sign = 1;\n    for n in arr {\n        if n < 0 {\n            sign = -sign;\n        }\n        if set.contains(&n) {\n            return None;\n        }\n        set.insert(n);\n    }\n    sign *= arr.iter().sum::<i32>();\n    Some(sign)\n}\n",
            "pub fn min_path(grid: &Vec<Vec<i32>>, k: i32) -> Vec<i32> {\n    let mut n = grid.len();\n    let mut visited = HashSet::new();\n    let mut min_val = n * n + 1;\n    let mut path = HashMap::new();\n    for i in 0..n {\n        for j in 0..n {\n            if grid[i][j] == 1 {\n                visited.insert((i, j));\n                path.insert((i, j), vec![vec![i, j]]);\n            }\n        }\n    }\n    for i in 0..k {\n        let mut temp = vec![];\n        for (i, j) in visited {\n            if i != 0 && (i - 1, j) not in visited {\n                temp.push(grid[i - 1][j]);\n                path.entry((i - 1, j)).or_insert(vec![i, j]);\n            }\n            if j != 0 && (i, j - 1) not in visited {\n                temp.push(grid[i][j - 1]);\n                path.entry((i, j - 1)).or_insert(vec![i, j]);\n            }\n            if i != n - 1 && (i + 1, j) not in visited {\n                temp.push(grid[i + 1][j]);\n                path.entry((i + 1, j)).or_insert(vec![i, j]);\n            }\n            if j != n - 1 && (i, j + 1) not in visited {\n                temp.push(grid[i][j + 1]);\n                path.entry((i, j + 1)).or_insert(vec![i, j]);\n            }\n        }\n        min_val = temp.iter().min_by(|a, b| a.cmp(&b)).unwrap().0;\n    }\n    result = vec![];\n    for i in 0..k {\n        result.push(1 if i % 2 == 0 else min_val);\n    }\n    result\n}\n",
            "pub fn tri(n: i32) -> Vec<i32> {\n    if n == 0 {\n        vec![1]\n    } else {\n        let mut seq = vec![1, 3];\n        for i in 1..n {\n            if i % 2 == 0 {\n                seq.push((i / 2) as i32 + 1);\n            } else {\n                seq.push(seq[i - 1] as i32 + seq[i - 2] as i32 + ((i as f64) + 3.0) / 2.0);\n            }\n        }\n        seq\n    }\n}\n",
            "macro_rules! cloned {\n    ($iter:expr) => {\n        Cloned::new($iter.clone())\n    }\n}\nmacro_rules! chained {\n    ($iter1:expr, $iter2:expr) => {\n        chain($iter1.clone(), $iter2.clone()).into_iter()\n    }\n}\nmacro_rules! chained_from {\n    ($iter1:expr, $iter2:expr) => {\n        chain_from($iter1.clone(), $iter2.clone()).into_iter()\n    }\n}\npub fn digits(n: i32) -> i32 {\n    let mut digits = iter::Extend<char>::new();\n    if (n % 2) == 1 {\n        n = n / 10;\n        while (n > 0) {\n            cloned!(digits.extend(&cloned!(str(n).chars())));\n            n = n / 10;\n        }\n    }\n    let mut product = 1;\n    for c in &digits {\n        product *= c as i32;\n    }\n    product\n}\n",
            "pub fn is_nested(s: &str) -> bool {\n    let mut stack = vec![];\n    for ch in s.chars() {\n        match ch {\n            '[' => stack.push(1),\n            ']' => {\n                if stack.len() > 1 {\n                    stack.pop();\n                } else {\n                    return false;\n                }\n            }\n            _ => {\n                // ignore other characters\n            }\n        }\n    }\n    stack.len() <= 1\n}\n",
            "pub fn sum_squares(lst: &Vec<f64>) -> i32 {\n    let mut result = 0;\n    for n in lst {\n        result += pow(ceil(n) as f64, 2.0) as i32;\n    }\n    result\n}\n",
            "pub fn check_if_last_char_is_a_letter(txt: &str) -> bool {\n    if txt.len() == 0 {\n        return false;\n    }\n    let last = txt.chars().last().unwrap();\n    if last == ' ' {\n        return false;\n    }\n    let last_char = last.to_lowercase();\n    return last_char.is_letter();\n}\n",
            "pub fn can_arrange(arr: &Vec<i32>) -> i32 {\n    let mut set = HashSet::new();\n    for i in 0..arr.len() {\n        set.insert(arr[i]);\n    }\n    for i in 1..arr.len() {\n        if !set.contains(&arr[i]) && arr[i] < arr[i - 1] {\n            return i;\n        }\n    }\n    -1\n}\n",
            "pub fn largest_smallest_integers(lst: &Vec<i32>) -> Vec<Option<i32>> {\n    let mut neg = HashSet::new();\n    let mut pos = HashSet::new();\n    for i in lst {\n        if i < 0 { neg.insert(i); }\n        if i > 0 { pos.insert(i); }\n    }\n    let mut neg_deque = VecDeque::new();\n    let mut pos_deque = VecDeque::new();\n    for i in neg.iter() {\n        neg_deque.push_back(i);\n    }\n    for i in pos.iter() {\n        pos_deque.push_back(i);\n    }\n    let mut result = Vec::new();\n    if neg_deque.len() > 0 {\n        result.push(Some(neg_deque.max().unwrap()));\n    } else {\n        result.push(None);\n    }\n    if pos_deque.len() > 0 {\n        result.push(Some(pos_deque.min_by(|a, b| a.partial_cmp(&b).unwrap()).unwrap()));\n    } else {\n        result.push(None);\n    }\n    result\n}\n",
            "impl<T> Box<dyn T> {\n    fn unwrap(&self) -> &dyn T {\n        &self.0\n    }\n}\nimpl<T> Box<dyn T> for T {\n    fn hash<H: Hash>(_: &T, _: &mut H) -> u32 {\n        std::hash::std::DEFAULT.hash_with(Self)\n    }\n}\nimpl PartialOrd<dyn Any> for Box<dyn Any> {\n    fn partial_ord<R: Order>(self: &Box<T>, other: &Box<S>) -> Result<bool, bool> {\n        self.0.partial_cmp(other.0)\n    }\n}\nimpl<T> Any for T {\n    fn hash<H: Hash>(self: &dyn T, h: &mut Hash) -> Hash::Result {\n        self.hash(h)\n    }\n}\nimpl<T> Hash for T {\n    fn hash(&self, h: &mut Hash) -> Hash::Result {\n        h.hash(self)\n    }\n}\npub fn compare_one(a: &Box<dyn Any>, b: &Box<dyn Any>) -> Option<f64> {\n    let a1 = a.unwrap().as_ref().unwrap_mut();\n    let b1 = b.unwrap().as_ref().unwrap_mut();\n    if a1 == b1 {\n        None\n    } else if a1 > b1 {\n        Some(a1)\n    } else {\n        Some(b1)\n    }\n}\n",
            "pub fn is_equal_to_sum_even(n: i32) -> bool {\n    n % 2 == 0 && n >= 8\n}\n",
            "pub fn special_factorial(n: i32) -> i32 {\n    let mut fact = 1;\n    let mut result = 1;\n    for i in 1..=n {\n        fact *= i;\n        result *= fact;\n    }\n    result\n}\n",
            "pub fn fix_spaces(txt: &str) -> str {\n    let mut result = String::new();\n    let mut word_start = true;\n    for c in txt.chars() {\n        if c == ' ' && word_start {\n            result.push_str(\"-\");\n            word_start = false;\n        } else if c == '_' {\n            result.push_str(\" \");\n            word_start = true;\n        } else {\n            result.push_str(c);\n            word_start = false;\n        }\n    }\n    result.trim()\n}\n",
            "pub fn file_name_check(file_name: &str) -> str {\n    let mut lst = file_name.split(\".\").collect::<Vec<_>>();\n    if lst.len() != 2 || !lst[1].into() in [\"txt\", \"exe\", \"dll\"] || lst[0].len() == 0 || !lst[0].chars().any(|c| c.is_digit() && c.as_digit() > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "pub fn sum_squares(lst: &Vec<i32>) -> i32 {\n    let mut result = 0;\n    for i in 0..lst.len() {\n        if i % 3 == 0 {\n            result += powi(lst[i] as i32, 2) as i32;\n        } else if i % 4 == 0 {\n            result += powi(lst[i] as i32, 3) as i32;\n        } else {\n            result += lst[i] as i32;\n        }\n    }\n    result\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=(floor(sqrt(n)) as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\npub fn words_in_sentence(sentence: &str) -> String {\n    let mut words = HashSet::new();\n    let mut result = String::new();\n    for w in sentence.split(\" \") {\n        if is_prime(w.len()) {\n            words.insert(w);\n        }\n    }\n    for w in words.iter() {\n        result += &w + \" \";\n    }\n    result\n}\n",
            "pub fn simplify(x: &str, n: &str) -> bool {\n    let xs = x.split(\"/\").collect::<Vec<_>>(),\n    let ns = n.split(\"/\").collect::<Vec<_>>(),\n    let num = xs[0].parse::<i32>().unwrap() * ns[0].parse::<i32>().unwrap(),\n    let den = xs[1].parse::<i32>().unwrap() * ns[1].parse::<i32>().unwrap();\n    num % den == 0\n}\n",
            "pub fn digits_sum(n: i32) -> i32 {\n    let n_str = n.to_string();\n    if n >= 0 {\n        n_str.chars().map(|c| c.as_uchar() - '0').sum()\n    } else {\n        (n_str[:2].chars().map(|c| c.as_uchar() - '0').sum()) * 2 + digits_sum(n.abs())\n    }\n}\npub fn order_by_points(nums: &Vec<i32>) -> Vec<i32> {\n    nums.sort_by(digits_sum).into_owned()\n}\n",
            "pub fn special_filter(nums: &Vec<i32>) -> i32 {\n    let mut count = 0;\n    for n in nums {\n        if n > 10 && n % 2 == 1 && (n as isize) > 9 {\n            let first_char = (n as isize) / 10 as u8 as &str;\n            if odds.contains(&first_char) {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n",
            "pub fn get_max_triples(n: i32) -> i32 {\n    let mut c = [0, 0, 0];\n    for i in 1..=n {\n        a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n}\n",
            "pub fn bf(planet1: &str, planet2: &str) -> Vec<&str> {\n    let mut names = vec![\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let mut l = names.into_iter().map(|s| s.to_lowercase().into_owned()).filter_ok(|s| s.eq(planet1.to_lowercase())).map_ok(|i| i).unwrap();\n    let mut r = names.into_iter().map(|s| s.to_lowercase().into_owned()).filter_ok(|s| s.eq(planet2.to_lowercase())).map_ok(|i| i).unwrap();\n    if l > r {\n        std::swap(l, r);\n    }\n    if l == r {\n        return vec![];\n    }\n    names[l + 1..r].into_iter().map(|s| s.to_owned()).collect()\n}\n",
            "pub fn sorted_list_sum(lst: &Vec<String>) -> Vec<String> {\n    let mut set = HashSet::new();\n    let mut map = HashMap::new();\n    for s in lst.iter() {\n        let val = s.len();\n        if val % 2 == 0 {\n            set.insert(s.to_lowercase());\n            if let Some(count) = map.get_mut(s.to_lowercase()) {\n                *count += 1;\n            } else {\n                map.insert(s.to_lowercase(), 1);\n            }\n        }\n    }\n    let mut result = Vec::new();\n    while !set.is_empty() {\n        let mut min_str = set.entry_by(|s, _| s.len()).unwrap();\n        let mut max_str = set.entry_by(|s, _| s.len()).unwrap();\n        if map.get_map(&min_str).unwrap().iter().any(|(&_, count), &other| count < other.unwrap()){\n            result.push(min_str);\n            set.remove(&min_str);\n        } else {\n            result.push(max_str);\n            set.remove(&max_str);\n        }\n    }\n    result\n}\n",
            "pub fn x_or_y(n: i32, x: i32, y: i32) -> i32 {\n    if n < 2 {\n        y\n    } else if n % 2 == 0 {\n        y\n    } else {\n        x\n    }\n}\n",
            "pub fn double_the_difference(lst: &Vec<f64>) -> i32 {\n    let mut result = 0;\n    for n in lst {\n        if n >= 0.0 && n % 2.0 == 1.0 {\n            result += (n as f64) * (n as f64);\n        }\n    }\n    result.into_i32_unchecked()\n}\n",
            "pub fn compare(game: &Vec<i32>, guess: &Vec<i32>) -> Vec<i32> {\n    let mut result = vec![];\n    for (x, y) in game.iter().zip(guess.iter()) {\n        result.push(x - y);\n    }\n    result\n}\n",
            "pub fn strongest_extension(class_name: &str, extensions: &Vec<&str>) -> String {\n    let mut max_s = -99999;\n    let mut max_ext = \"\".to_string();\n    for ext in extensions {\n        let upper = ext.chars().filter(|c| c.is_uppercase()).count();\n        let lower = ext.chars().filter(|c| c.is_lowercase()).count();\n        let s = upper as f64 - lower as f64;\n        if s > max_s {\n            max_s = s;\n            max_ext = ext.to_string();\n        }\n    }\n    format!(\"{}.{}\", class_name, max_ext)\n}\n",
            "pub fn cycpattern_check(a: &str, b: &str) -> bool {\n    let a_len = a.len();\n    let b_len = b.len();\n    if a_len < b_len {\n        return false;\n    }\n    for i in b.chars() {\n        if (a.find(b.append(i).to_string()).is_none()) {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn even_odd_count(num: i32) -> Vec<i32> {\n    let mut ds = abs(num).to_string();\n    let mut even = ds.chars().filter(|c| c.is_ascii() && c.as_cii().is_ascii_digit() && c.as_cii().to_i() % 2 == 0).count();\n    vec![even, ds.len() - even]\n}\n",
            "pub fn int_to_mini_roman(num: i32) -> String {\n    const values: [i32; 12] = [\n        1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4\n    ];\n    const numerals: &'static [String];\n    numerals = &[\n        \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\n    ];\n    let mut res: Vec<char> = vec![];\n    for (i, v) in values.into_iter().enumerate() {\n        while num >= v {\n            res.push(numerals[i].as_bytes().into());\n            num -= v;\n        }\n    }\n    res.into_string()\n}\n",
            "pub fn right_angle_triangle(a: i32, b: i32, c: i32) -> bool {\n    a * a + b * b == c * c || b * b + c * c == a * a || a * a + c * c == b * b\n}\n",
            "pub fn find_max(words: &Vec<String>) -> String {\n    let mut max_cnt = 0;\n    let mut max_w = \"\".to_string();\n    for w in words.iter() {\n        let cnt = w.chars().collect::<Vec<char>>().iter().fold(0, |a, c| a + (c.to_lowercase() as i32 - a as i32) as i32);\n        if cnt > max_cnt {\n            max_cnt = cnt;\n            max_w = w;\n        }\n        else if cnt == max_cnt {\n            max_w = max_w.chars().sort_by(|a, b| a.cmp(&b)).to_string();\n        }\n    }\n    max_w\n}\n",
            "pub fn eat(num: i32, need: i32, remaining: i32) -> Vec<i32> {\n    if need <= remaining {\n        return vec![num + need, remaining - need];\n    } else {\n        return vec![num + remaining, 0];\n    }\n}\n",
            "pub fn do_algebra(operators: &Vec<String>, operands: &Vec<i32>) -> i32 {\n    let mut ops = operators.clone();\n    let mut nums = operands.clone();\n    let mut i = ops.len() - 1;\n    while i >= 0 {\n        if ops[i] == \"pow\" {\n            nums[i] = nums[i].pow(nums[i + 1]);\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        }\n        i -= 1;\n    }\n    let mut i = 0;\n    while i < ops.len() {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    let mut i = 0;\n    while i < ops.len() {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "pub fn solve(s: &str) -> String {\n    let mut result = String::new();\n    for ch in s {\n        if ch.is_ascii() {\n            if ch.is_ascii_upper() {\n                ch = ch.to_lower();\n            } else {\n                ch = ch.to_upper();\n            }\n        }\n        result.push(ch);\n    }\n    result.reverse()\n}\n",
            "pub fn string_to_md5(txt: &str) -> Option<str> {\n    let mut md5_set = HashSet::new();\n    let mut md5_hash = Hasher::new();\n    if let None = txt.trim().is_empty() {\n        return None;\n    }\n    md5_hash.encode(txt).unwrap();\n    let md5_encoded = md5_hash.digest().to_hex();\n    if md5_set.contains(&md5_encoded) {\n        return None;\n    }\n    md5_set.insert(md5_encoded);\n    Some(md5_encoded)\n}\n",
            "pub fn generate_integers(a: i32, b: i32) -> Vec<i32> {\n    let mut lower = max(2, min(a, b));\n    let mut upper = min(8, max(a, b));\n    let mut result = vec![];\n    while lower <= upper {\n        result.push(lower);\n        lower += 2;\n    }\n    result\n}\n"
        ],
        "scala": [
            "def hasCloseElements(numbers: Seq[Double], threshold: Double): Boolean = {\n    numbers.sliding(2).map { case Seq(a, b) => math.abs(a - b) < threshold }.forAll(_ == true)\n}\n",
            "def separateParenGroups(parenString: String): Seq[String] = {\n    val groups = mutable.ListBuffer[String]()\n    var currentGroup = \"\"\n    for (ch <- parenString.replaceAll(\" \", \"\")) {\n        if (ch == \"(\") {\n            currentGroup += ch\n        } else if (ch == \")\") {\n            currentGroup += ch\n            if (!stk.nonEmpty) {\n                groups += currentGroup\n                currentGroup = \"\"\n            }\n            else {\n                stk.pop()\n                currentGroup += ch\n            }\n        } else {\n            currentGroup += ch\n        }\n    }\n    if (!currentGroup.isEmpty) {\n        groups += currentGroup\n    }\n    groups.toList\n}\n",
            "def truncateNumber(num: Double): Double = {\n    val fraction = num - math.floor(num)\n    val sign = if (num >= 0) 1 else -1\n    val truncated = math.min(math.floor(fraction), math.ceil(fraction)) * sign\n    if (truncated == fraction) truncated else num - truncated\n}\n",
            "def belowZero(operations: Seq[Int]): Boolean = {\n    val balance = operations.scanLeft(0)(_ + _)\n    balance < 0\n}\n",
            "def meanAbsoluteDeviation(numbers: Seq[Double]): Double = {\n    val mean = numbers.sum / numbers.length\n    val deviations = numbers.map(x => Math.abs(x - mean)).sum\n    deviations / numbers.length\n}\n",
            "def intersperse(numbers: Seq[Int], delimiter: Int): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    for (i <- numbers.indices) {\n        if (i == 0) {\n            result += numbers(i)\n        } else {\n            result += delimiter\n            result += numbers(i)\n        }\n    }\n    result.toList\n}\n",
            "def parseNestedParens(parenString: String): Seq[Int] = {\n    val result = mutable.ListBuffer[Int]()\n    val parenGroups = parenString.split(\" \")\n    for (group <- parenGroups) {\n        var maxDepth = 0\n        var depth = 0\n        for (ch <- group) {\n            if (ch == \"(\") {\n                depth += 1\n                maxDepth = math.max(maxDepth, depth)\n            } else if (ch == \")\") {\n                depth -= 1\n            }\n        }\n        result += maxDepth\n    }\n    result.toList\n}\n",
            "def filterBySubstring(strs: Seq[String], substring: String): Seq[String] = {\n    strs.filter(_.contains(substring))\n}\n",
            "def sumProduct(numbers: Seq[Int]): Seq[Int] = {\n    val nSum = numbers.sum\n    val nProduct = numbers.product\n    Seq(nSum, nProduct)\n}\n",
            "def rollingMax(numbers: Seq[Int]): Seq[Int] = {\n    val maxSoFar = numbers(0)\n    val result = mutable.ListBuffer[Int]()\n    for (i <- 1 to numbers.size) {\n        maxSoFar = math.max(maxSoFar, numbers(i))\n        result += maxSoFar\n    }\n    result.toList\n}\n",
            "def makePalindrome(s: String): String = {\n    if (s == s.reverse) {\n        s\n    } else {\n        for (i <- s.indices) {\n            if (s.substring(i, s.length).equals(s.substring(0, i).reverse)) {\n                return s + s.substring(0, i).reverse\n            }\n        }\n        \"\"\n    }\n}\n",
            "def stringXor(a: String, b: String): String = {\n    val charsA = a.toCharArray()\n    val charsB = b.toCharArray()\n    val result = new Array[Char](a.length)\n    for (i <- 0 until a.length) {\n        val x = charsA(i)\n        val y = charsB(i)\n        result(i) = if (x == y) '0' else '1'\n    }\n    new String(result)\n}\n",
            "def longest(strs: Seq[String]): Option[String] = {\n    if (strs.isEmpty) None\n    else {\n        var longest_s = strs.head\n        strs.tail.foreach(s => {\n            if (s.length > longest_s.length) {\n                longest_s = s\n            }\n        })\n        Some(longest_s)\n    }\n}\n",
            "def greatestCommonDivisor(a: Int, b: Int): Int = {\n    if (b == 0) a\n    else greatestCommonDivisor(b, a % b)\n}\n",
            "def allPrefixes(s: String): Seq[String] = {\n    s.toList.map {\n        case ch :: rest => s\"$ch$rest\"\n        case _ => \"\"\n    }\n}\n",
            "def stringSequence(n: Int): String = {\n    s\"$((1 to n + 1).mkString(\" \"))\"\n}\n",
            "def countDistinctCharacters(s: String): Int = {\n    val lower = s.toLowerCase()\n    val charSet = mutable.Set[Char]()\n    var count = 0\n    for (char <- lower) {\n        if (!charSet.contains(char)) {\n            charSet += char\n            count += 1\n        }\n    }\n    count\n}\n",
            "def parseMusic(musicString: String): Seq[Int] = {\n    val durations = Map(\n      \"o\" -> 4,\n      \"o|\" -> 2,\n      \"|.\" -> 1\n    )\n    val notes = musicString.split(\" \")\n    notes.map(durations(_))\n}\n",
            "def howManyTimes(s: String, substring: String): Int = {\n    var times = 0\n    for (i <- s.indices.takeWhile(_ + len(substring) <= s.length)) {\n        if (s.substring(i, i + len(substring)) == substring) {\n            times += 1\n        }\n    }\n    times\n}\n",
            "def sortNumbers(numbers: String): String = {\n    val numDict = Map(\n      \"zero\" -> 0,\n      \"one\" -> 1,\n      \"two\" -> 2,\n      \"three\" -> 3,\n      \"four\" -> 4,\n      \"five\" -> 5,\n      \"six\" -> 6,\n      \"seven\" -> 7,\n      \"eight\" -> 8,\n      \"nine\" -> 9\n    )\n    val numList = numbers.split(\" \").filter(numDict.contains)\n    val sortedList = numList.sorted(numDict.get)\n    sortedList.mkString(\" \")\n}\n",
            "def findClosestElements(numbers: Seq[Double]): Seq[Double] = {\n    val sortedNumbers = numbers.sorted\n    var minDiff = Double.MaxValue\n    var closestPair = Seq[Double]()\n    for (i <- 1 until sortedNumbers.length) {\n        val diff = sortedNumbers(i) - sortedNumbers(i - 1)\n        if (diff < minDiff) {\n            minDiff = diff\n            closestPair = sortedNumbers(i - 1) :: sortedNumbers(i)\n        }\n    }\n    closestPair\n}\n",
            "def rescaleToUnit(numbers: Seq[Double]): Seq[Double] = {\n    if (numbers.isEmpty) {\n        Seq.empty[Double]\n    } else {\n        val minNum = numbers.min\n        val maxNum = numbers.max\n        if (minNum == maxNum) {\n            Seq.fill(numbers.size)(0.0)\n        } else {\n            val scale = 1.0 / (maxNum - minNum)\n            val offset = -minNum * scale\n            numbers.map { num =>\n                if (num == minNum) {\n                    0.0\n                } else {\n                    num * scale + offset\n                }\n            }\n        }\n    }\n}\n",
            "def filterIntegers(values: Seq[Any]): Seq[Int] = {\n    values.filter { x =>\n        x match {\n            case x: Int => true\n            case _ => false\n        }\n    }\n}\n",
            "def strLength(s: String): Int = {\n    s.length\n}\n",
            "def largestDivisor(n: Int): Int = {\n    for (i <- 2 to n) {\n        if (n % i == 0) {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "def factorize(n: Int): Seq[Int] = {\n    // Implementation here\n}\n",
            "def removeDuplicates(numbers: Seq[Int]): Seq[Int] = {\n    val counts = scala.collection.mutable.Map[Int, Int]().withDefaultValue(0)\n    for (num <- numbers) {\n        counts(num) += 1\n    }\n    val res = new scala.collection.mutable.ListBuffer[Int]()\n    for (num <- numbers) {\n        if (counts(num) == 1) {\n            res += num\n        }\n    }\n    res.toList\n}\n",
            "def flipCase(s: String): String = {\n    val resultBuilder = scala.collection.mutable.ListBuffer[Char]()\n    for (ch <- s) {\n        if (ch.isUpper) {\n            resultBuilder += ch.toLowerCase\n        } else if (ch.isLower) {\n            resultBuilder += ch.toUpperCase\n        } else {\n            resultBuilder += ch\n        }\n    }\n    resultBuilder.mkString(\"\")\n}\n",
            "def concatenate(strs: Seq[String]): String = {\n    // Implementation here\n}\n",
            "def filterByPrefix(strs: Seq[String], prefixStr: String): Seq[String] = {\n    strs.filter { s =>\n        s.startsWith(prefixStr)\n    }\n}\n",
            "def getPositive(l: Seq[Int]): Seq[Int] = l.filter(_ > 0)\n",
            "def isPrime(n: Int): Boolean = {\n    if (n < 2) {\n        false\n    }\n    for (i <- 2 to math.Sqrt(n).toInt) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    true\n}\n",
            "def poly(xs: Seq[Int], x: Double): Double = {\n    var res = 0.0\n    for (i <- xs.indices.reverse) {\n        res += xs(i) * x ** i\n    }\n    res\n}\ndef findZero(xs: Seq[Int]): Double = {\n    var x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while math.abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n}\n",
            "def sortThird(l: Seq[Int]): Seq[Int] = {\n    val sortedThird = l.slice(0, 3, 3).sorted\n    val result = mutable.ListBuffer[Int]()\n    var index = 0\n    for (i <- 0 until l.size) {\n        if (i % 3 == 0) {\n            result += sortedThird.head\n            sortedThird = sortedThird.slice(1, 3)\n        }\n        result += l(i)\n    }\n    result.toList\n}\n",
            "def listUnique(l: Seq[Int]): Seq[Int] = {\n    l.distinct.sorted\n}\n",
            "def maxElement(l: Seq[Int]): Int = {\n    if (l.isEmpty) 0\n    else l.max\n}\n",
            "def fizzBuzz(n: Int): Int = {\n    var cnt = 0\n    for (i <- 1 to n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString.count(\"7\")\n        }\n    }\n    cnt\n}\n",
            "def sortEven(l: Seq[Int]): Seq[Int] = {\n    val (even, odd) = l.partition(_ % 2 == 0)\n    odd ++ even\n}\n",
            "def encodeCyclic(s: String): String = {\n    val blocks = s.grouped(3).map(_.charAt(0)).toList\n    val result = mutable.ListBuffer[Char]()\n    for (i <- blocks) {\n        result.append(i)\n        result.append(s(s.indexOf(i) - 1))\n    }\n    result.toString\n}\ndef decodeCyclic(s: String): String = {\n    val blocks = s.grouped(4).map(_.charAt(0)).toList\n    val result = mutable.ListBuffer[Char]()\n    for (i <- blocks) {\n        result.append(i.charAt(1))\n        result.append(i.charAt(0))\n    }\n    result.toString\n}\n",
            "def primeFib(n: Int): Int = {\n    var f = mutable.ArrayBuffer(0, 1)\n    var cnt = 0\n    while (cnt < n) {\n        f.append(f(f.length - 1) + f(f.length - 2))\n        if (isPrime(f(f.length - 1))) {\n            cnt += 1\n        }\n    }\n    f(f.length - 1)\n}\ndef isPrime(n: Int): Boolean = {\n    if (n < 2) {\n        false\n    }\n    for (i <- 2 to math.Sqrt(n).toInt) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "def triplesSumToZero(l: Seq[Int]): Boolean = {\n    for (i <- 0 until l.length; j <- i + 1 until l.length; k <- j + 1 until l.length) {\n        if (l(i) + l(j) + l(k) == 0) return true\n    }\n    false\n}\n",
            "def carRaceCollision(n: Int): Int = n * n\n",
            "def incrList(l: Seq[Int]): Seq[Int] = {\n    l.map(_ + 1)\n}\n",
            "def pairsSumToZero(l: Seq[Int]): Boolean = {\n    val seen = mutable.Set.empty[Int]\n    for (num <- l) {\n        if (seen.contains(-num)) {\n            return true\n        }\n        seen.add(num)\n    }\n    false\n}\n",
            "def changeBase(x: Int, bas: Int): String = {\n    val digits = mutable.ArrayBuffer[Char]()\n    while (x > 0) {\n        digits.append(x % bas + '0'.toInt)\n        x /= bas\n    }\n    digits.reverse.mkString\n}\n",
            "def triangleArea(a: Int, h: Int): Double = {\n    val area = Math.sqrt(a * h / 2)\n    area\n}\n",
            "def fib4(n: Int): Int = {\n    val fib = Array(0, 0, 2, 0)\n    for (i <- 4 to n) {\n        fib(i) = fib.sum\n    }\n    fib(n)\n}\n",
            "def median(l: Seq[Double]): Double = {\n    val sl = l.sorted\n    if (l.length % 2 != 0) {\n        sl(l.length / 2)\n    } else {\n        (sl(l.length / 2) + sl(l.length / 2 - 1)) / 2.0\n    }\n}\n",
            "def isPalindrome(txt: String): Boolean = {\n    txt.toLowerCase.replaceAll(\"[^a-z]+\", \"\").reverse match {\n        case txt if txt.length <= 1 => true\n        case txt if txt.length == 2 && txt(0) == txt(1) => true\n        case txt if txt.length > 2 => txt(0) == txt(txt.length - 1) && isPalindrome(txt.mid(1, txt.length - 2))\n    }\n}\n",
            "def modp(n: Int, p: Int): Int = {\n    var ret = 1\n    for (i <- 1 to n) {\n        ret = (ret * 2) % p\n    }\n    ret\n}\n",
            "def encodeShift(s: String): String = {\n    val arr = s.toCharArray\n    for (i <- 0 until arr.length) {\n        val ch = arr(i)\n        arr(i) = chr(((ord(ch) - 97 + 5) % 26) + 97)\n    }\n    String(arr)\n}\ndef decodeShift(s: String): String = {\n    val arr = s.toCharArray\n    for (i <- 0 until arr.length) {\n        val ch = arr(i)\n        arr(i) = chr(((ord(ch) - 97 + 21) % 26) + 97)\n    }\n    String(arr)\n}\n",
            "def removeVowels(txt: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    txt.filterNot(vowels.contains)\n}\n",
            "def belowThreshold(l: Seq[Int], t: Int): Boolean = {\n    l.forall(x => x < t)\n}\n",
            "def add(x: Int, y: Int): Int = {\n    x + y\n}\n",
            "def sameChars(s0: String, s1: String): Boolean = {\n    val set0 = s0.toSet\n    val set1 = s1.toSet\n    set0 == set1\n}\n",
            "def fib(n: Int): Int = {\n    if (n <= 1) n else fib(n - 1) + fib(n - 2)\n}\n",
            "def correctBracketing(brackets: String): Boolean = {\n    val stack = mutable.ListBuffer[Char]()\n    for (b <- brackets) {\n        if (b == '<') {\n            stack.add(b)\n        } else if (stack.isEmpty || stack.last != '<') {\n            return false\n        } else {\n            stack.removeLast()\n        }\n    }\n    stack.isEmpty\n}\n",
            "def monotonic(l: Seq[Int]): Boolean = {\n    val diff = l.sliding(2).map { case Seq(x, y) => y - x }\n    val isPositive = diff.exists(_ >= 0)\n    val isNegative = diff.exists(_ <= 0)\n    isPositive || isNegative\n}\n",
            "def common(l1: Seq[Int], l2: Seq[Int]): Seq[Int] = {\n    val set1 = l1.distinct\n    val set2 = l2.distinct\n    set1.intersect(set2).toList.sorted\n}\n",
            "def largestPrimeFactor(n: Int): Int = {\n    for (i <- 2 to n) {\n        if (n % i == 0 && isPrime(i)) {\n            return i\n        }\n    }\n    return 1\n}\ndef isPrime(n: Int): Boolean = {\n    if (n <= 1) false\n    else if (n == 2) true\n    else !(2 to (n-1)).exists(x => n % x == 0)\n}\n",
            "def sumToN(n: Int): Int = {\n    (0 to n).sum\n}\n",
            "def correctBracketing(brackets: String): Boolean = {\n    val stack = mutable.ListBuffer[Char]()\n    for (b <- brackets) {\n        if (b == '(') {\n            stack.add(b)\n        } else if (stack.isEmpty || stack.last != '(') {\n            return false\n        } else {\n            stack.removeLast()\n        }\n    }\n    stack.isEmpty\n}\n",
            "def derivative(xs: Seq[Int]): Seq[Int] = {\n    xs.sliding(2).map { case Seq(a, b) => b - a }.toList\n}\n",
            "def fibfib(n: Int): Int = {\n    if (n <= 1) 0\n    var a = 0\n    var b = 0\n    var c = 1\n    for (i <- 2 to n) {\n        (a, b, c) = (b, c, a + b + c)\n    }\n    c\n}\n",
            "def vowelsCount(s: String): Int = {\n    val vowels = \"aeiouAEIOU\"\n    var cnt = 0\n    for (i <- s.indices) {\n        if (s(i).toLowerCase.matches(\"|\".join(vowels))) {\n            cnt += 1\n        }\n    }\n    cnt\n}\n",
            "def circularShift(x: Int, shift: Int): String = {\n    val xStr = x.toString\n    if (shift > xStr.length) {\n        xStr.reverse\n    } else {\n        val start = xStr.length - shift\n        val end = xStr.length\n        xStr.substring(start, end) + xStr.substring(0, start)\n    }\n}\n",
            "def digitSum(s: String): Int = {\n    s.filter(_.isUpper).map(_.ord).sum\n}\n",
            "def fruitDistribution(s: String, n: Int): Int = {\n    val words = s.split(\" \")\n    val apples = words(words.indexOf(\"apples\") - 1).toInt\n    val oranges = words(words.indexOf(\"oranges\") - 1).toInt\n    n - apples - oranges\n}\n",
            "def pluck(arr: Seq[Int]): Seq[Int] = {\n    if (arr.isEmpty) {\n        Seq.empty[Int]\n    } else {\n        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) {\n            Seq.empty[Int]\n        } else {\n            val minEven = evens.min\n            Seq(minEven, arr.indexOf(minEven))\n        }\n    }\n}\n",
            "def search(lst: Seq[Int]): Int = {\n    val freqs = lst.groupBy(identity).mapValues(_.size)\n    val goodVals = (freqs.values.filter(_ >= _).toList.sortWith(_ > _).flatMap { n =>\n        (1 to n).filter(_ > 0)\n    }).toList\n    if (goodVals.isEmpty) -1 else goodVals.max\n}\n",
            "def strangeSortList(lst: Seq[Int]): Seq[Int] = {\n    val sl = lst.sorted\n    val result = new mutable.ListBuffer[Int]()\n    var left = 0\n    var right = sl.length - 1\n    while (left <= right) {\n        result += sl(left)\n        left += 1\n        if (left <= right) {\n            result += sl(right)\n            right -= 1\n        }\n    }\n    result.toList\n}\n",
            "def triangleArea(a: Int, b: Int, c: Int): Double = {\n    if (a > 0 && b > 0 && c > 0 && a + b > c && a + c > b && b + c > a) {\n        val s = (a + b + c) / 2.0\n        math.sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        -1.0\n    }\n}\n",
            "def willItFly(q: Seq[Int], w: Int): Boolean = {\n    if (q.length == 0) {\n        return false\n    }\n    def isPalin(s: String): Boolean = {\n        val s1 = s.filter(_.isLetter).toLowerCase\n        val s2 = s1.reverse\n        s1 == s2\n    }\n    val isPalinQ = all(q.forall(_.isLetter && _.toLowerCase.isLetter && _.toLowerCase == _))\n    val totalQ = q.sum\n    isPalinQ && totalQ <= w\n}\n",
            "def smallestChange(arr: Seq[Int]): Int = {\n    val n = arr.length\n    val dp = Array.fill(n)(n)\n    for (i <- 1 to n) {\n        for (j <- 0 to i) {\n            dp(i) = math.min(dp(i), 1 + dp(i - j - 1))\n        }\n    }\n    dp(n - 1)\n}\n",
            "def totalMatch(lst1: Seq[String], lst2: Seq[String]): Seq[String] = {\n    val cnt1 = lst1.map(_.length).sum\n    val cnt2 = lst2.map(_.length).sum\n    if (cnt1 <= cnt2) lst1 else lst2\n}\n",
            "def isMultiplyPrime(a: Int): Boolean = {\n    if (a < 2) {\n        false\n    }\n    var cnt = 0\n    for (i <- 2 to math.floor(math.Sqrt(a)).toInt) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    cnt == 3\n}\ndef isPrime(n: Int): Boolean = {\n    if (n < 2) {\n        false\n    }\n    for (i <- 2 to math.floor(math.Sqrt(n)).toInt) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "def isSimplePower(x: Int, n: Int): Boolean = {\n    if (n < 2) {\n        x == n\n    } else {\n        var tmp = 1\n        while (tmp < x) {\n            tmp *= n\n        }\n        tmp == x\n    }\n}\n",
            "def isCube(a: Int): Boolean = {\n    val root = a.toDouble.pow(1.0 / 3.0).toInt\n    root * root * root == a\n}\n",
            "def hexKey(num: String): Int = {\n    num.count(\"2357BD\")\n}\n",
            "def decimalToBinary(dec: Int): String = {\n    dec match {\n        case x if x < 0 => \"Negative numbers not supported\"\n        case x =>\n            val sb = new StringBuilder()\n            var rem = x\n            while (rem > 0) {\n                val digit = rem % 2\n                sb.append(digit)\n                rem /= 2\n            }\n            val binary = sb.reverse.toString\n            s\"db${binary}db\"\n    }\n}\n",
            "def isHappy(s: String): Boolean = {\n    if (s.length < 3) false\n    for (i <- s.indices.dropRight(2)) {\n        if (s(i) == s(i + 1) || s(i) == s(i + 2) || s(i + 1) == s(i + 2)) return false\n    }\n    true\n}\n",
            "def numericalLetterGrade(grades: Seq[Double]): Seq[String] = {\n    grades.map { case g =>\n        if (g == 4.0) \"A+\"\n        else if (g > 3.7) \"A\"\n        else if (g > 3.3) \"A-\"\n        else if (g > 3.0) \"B+\"\n        else if (g > 2.7) \"B\"\n        else if (g > 2.3) \"B-\"\n        else if (g > 2.0) \"C+\"\n        else if (g > 1.7) \"C\"\n        else if (g > 1.3) \"C-\"\n        else if (g > 1.0) \"D+\"\n        else if (g > 0.7) \"D\"\n        else \"E\"\n    }\n}\n",
            "def primeLength(s: String): Boolean = {\n    val length = s.length\n    if (length < 2) {\n        false\n    }\n    for (i <- 2 to math.floor(math.sqrt(length)).toInt) {\n        if (length % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "def startsOneEnds(n: Int): Int = {\n    if (n == 1) 1 else 2 * 9 * (10 ^ (n - 2))\n}\n",
            "def solve(n: Int): String = {\n    val digitsSum = (n.toString.toInt * 2).toInt\n    val binary = digitsSum.toBinaryString\n    binary.substring(1)\n}\n",
            "def add(lst: Seq[Int]): Int = {\n    val oddEvenList = lst.zipWithIndex.collect { case (x, i) => (i % 2 == 1, x) }\n    oddEvenList.collect { case (_, x) if x % 2 == 0 => x }.sum\n}\n",
            "def antiShuffle(s: String): String = {\n    val words = s.split(\" \")\n    val sortedWords = words.map(word => \"\".join(word.charAt(i) for i in 0 until word.length))\n    sortedWords.mkString(\" \")\n}\n",
            "def getRow(lst: Seq[Seq[Int]], x: Int): Seq[Seq[Int]] = {\n    val coords = mutable.ListBuffer[Seq[Int]]()\n    for (i <- lst.length) {\n        for (j <- lst.head.length) {\n            if (lst.apply(i)(j) == x) {\n                coords += Seq(i, j)\n            }\n        }\n    }\n    coords.toList.sortBy(a => (a(0), -a(1)))\n}\n",
            "def sortArray(arr: Seq[Int]): Seq[Int] = {\n    if (arr.isEmpty) {\n        arr\n    } else if ((arr.head + arr.last) % 2 == 0) {\n        arr.sorted.reverse\n    } else {\n        arr.sorted\n    }\n}\n",
            "def encrypt(s: String): String = {\n    val result = new StringBuilder()\n    for (ch <- s) {\n        val shifted = ch.toChar + 4\n        if (shifted > 'z') {\n            shifted -= 26\n        }\n        result.append(shifted)\n    }\n    result.toString\n}\n",
            "def nextSmallest(lst: Seq[Int]): Option[Int] = {\n    val sl = lst.distinct.sorted\n    if (sl.size < 2) {\n        None\n    }\n    sl(1)\n}\n",
            "def isBored(s: String): Int = {\n    val sentences = s.split(\"[.!?]\\s*\")\n    val count = sentences.count(sentence => sentence.length >= 2 && sentence.startsWith(\"I \"))\n    count\n}\n",
            "def anyInt(x: Any, y: Any, z: Any): Boolean = {\n    if (x.asInstanceOf[Int] + y.asInstanceOf[Int] == z.asInstanceOf[Int]) return true\n    if (x.asInstanceOf[Int] + z.asInstanceOf[Int] == y.asInstanceOf[Int]) return true\n    if (y.asInstanceOf[Int] + z.asInstanceOf[Int] == x.asInstanceOf[Int]) return true\n    false\n}\n",
            "def encode(message: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    val result = new mutable.ListBuffer[Char]()\n    for (ch <- message) {\n        if (ch.isLetter) {\n            val ch1 = if (ch.isUpper) ch.copyWith(String.toUpperCase) else ch.copyWith(String.toLowerCase)\n            if (vowels.contains(ch1.toString)) {\n                result.append(ch1.copyWith(c => (c - 'a + 2) % 26 + 'a))\n            } else {\n                result.append(ch1)\n            }\n        } else {\n            result.append(ch)\n        }\n    }\n    result.mkString(\"\")\n}\n",
            "def skjkasdkd(lst: Seq[Int]): Int = {\n    val primes = lst.filter(_ % 2 == 1 && isPrime(_))\n    if (primes.isEmpty) {\n        return 0\n    }\n    val largest = primes.max.toString\n    largest.toInt.toChar.toInt :: largest.toInt.toChar.toInt :: largest.toInt.toChar.toInt :: largest.toInt.toChar.toInt :: largest.toInt.toChar.toInt :: largest.toInt.toChar.toInt :: largest.toInt.toChar.toInt :: largest.toInt.toChar.toInt\n    primes.map(digit => digit.toInt).sum\n}\n",
            "def checkDictCase(d: Map[String, String]): Boolean = {\n    if (d.isEmpty) {\n        return false\n    }\n    val keys = d.keys.toList\n    if (keys.exists(c => c.isUpperCase)) {\n        return keys.exists(c => c.isLowerCase)\n    } else if (keys.exists(c => c.isLowerCase)) {\n        return true\n    } else {\n        return false\n    }\n}\n",
            "def countUpTo(n: Int): Seq[Int] = {\n    // Implementation here\n}\n",
            "def multiply(a: Int, b: Int): Int = {\n    val aLast = a % 10\n    val bLast = b % 10\n    val result = aLast * bLast\n    if (a < 0 || b < 0) {\n        result *= -1\n    }\n    result\n}\n",
            "def countUpper(s: String): Int = {\n    val vowels = \"AEIOU\"\n    s.count(c => vowels.contains(c))\n}\n",
            "def closestInteger(value: String): Int = {\n    val num = value.toDouble\n    if (num >= 0) {\n        math.floor(num + 0.5).toInt\n    } else {\n        math.ceil(num - 0.5).toInt\n    }\n}\n",
            "def makeAPile(n: Int): Seq[Int] = {\n    (1 to n).map(_ + 2 * n)\n}\n",
            "def wordsString(s: String): Seq[String] = {\n    val regex = \"\\\\s*,\\\\s*|\\\\s+\".r\n    regex.split(s).filter(_.nonEmpty).toSeq\n}\n",
            "def chooseNum(x: Int, y: Int): Int = {\n    if (x > y) -1\n    if (y % 2 == 0) y\n    return y - 1 if (x != y) -1 else -1\n}\n",
            "def roundedAvg(n: Int, m: Int): Option[String] = {\n    if (n > m) {\n        None\n    } else {\n        val rAvg = (m + n) / 2.0.toInt + 1\n        val binary = bin(rAvg)\n        binary.substring(2)\n    }\n}\n",
            "def uniqueDigits(x: Seq[Int]): Seq[Int] = {\n    val digits = x.map(_.toChar.toInt).toSet\n    digits.filter(digit => (1 + digit) % 2 != 0).toList.sortWith(_ < _)\n}\n",
            "def byLength(arr: Seq[Int]): Seq[String] = {\n    val digitNames = Array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    val sortedArr = arr.filter(x => 1 <= x <= 9).sorted(Ordering[String].reverse)\n    digitNames.take(sortedArr.length).zip(sortedArr).map { case (digit, num) => s\"${digit.toUpperCase}($num)\" }\n}\n",
            "def f(n: Int): Seq[Int] = {\n    val nums = (1 to n).toList\n    val result = mutable.ListBuffer[Int]()\n    for (i <- nums) {\n        if (i % 2 != 0) {\n            result += nums.take(i).sum\n        } else {\n            result += (1 to i).product\n        }\n    }\n    result.toList\n}\n",
            "def evenOddPalindrome(n: Int): Seq[Int] = {\n    val cnt = Array(0, 0)\n    for (i <- 1 to n) {\n        if (isPalindrome(i.toString)) {\n            cnt(i % 2) += 1\n        }\n    }\n    cnt\n}\ndef isPalindrome(s: String): Boolean = {\n    val cleanStr = s.trim.toLowerCase.replaceAll(\"\\\\W+\", \"\")\n    cleanStr == cleanStr.reverse\n}\n",
            "def countNums(arr: Seq[Int]): Int = {\n    val digits = arr.map(_.toString).map(digitsStr => digitsStr.map(_.toInt).sum)\n    digits.count(_ > 0)\n}\ndef digitsSum(n: Int): Int = {\n    if (n >= 0) n.toString.map(_.toInt).sum\n    else {\n        val digits = n.toString.takeRight(2).map(_.toInt)\n        digits(0) * 2 + digitsSum(n * 10 + digits(1))\n    }\n}\n",
            "def moveOneBall(arr: Seq[Int]): Boolean = {\n    if (arr.length == 0) true\n    else {\n        val sortedArr = arr.sorted\n        for (i <- 0 until arr.length) {\n            if (arr.slice(i, arr.length - i) == sortedArr.slice(0, arr.length - i) &&\n                arr.slice(0, i) == sortedArr.slice(arr.length - i, sortedArr.length)) {\n                return true\n            }\n        }\n        false\n    }\n}\n",
            "def canExchange(lst1: Seq[Int], lst2: Seq[Int]): String = {\n    val oddCount = lst1.count(_ % 2 != 0)\n    val evenCount = lst2.count(_ % 2 == 0)\n    if (evenCount >= oddCount) \"YES\" else \"NO\"\n}\n",
            "def histogram(test: String): Map[String, Int] = {\n    val freq = mutable.Map[String, Int]()\n    val words = test.split(\" \").filter(w => w.length > 0)\n    for (w <- words) {\n        freq.put(w, freq.getOrElse(w, 0) + 1)\n    }\n    val maxFreq = freq.values.max\n    val result = mutable.Map[String, Int]()\n    if (freq.size > 0) {\n        freq.filter(_._2 == maxFreq).foreach(result += _)\n    }\n    result\n}\n",
            "def reverseDelete(s: String, c: String): Seq[String] = {\n    val s1 = s.filterNot(c.contains(_))\n    val isPalindrome = s1 == s1.reverse\n    Seq(s1, if (isPalindrome) \"yes\" else \"no\")\n}\n",
            "def oddCount(lst: Seq[String]): Seq[String] = {\n    val result = mutable.ListBuffer[String]()\n    for (s <- lst) {\n        val n = s.count(c => ord(c) % 2 == 1)\n        result += s\"The number of odd elements in the string ${n} of the input.\"\n    }\n    result.toList\n}\n",
            "def minSubArraySum(nums: Seq[Int]): Int = {\n    // Implementation here\n}\n",
            "def maxFill(grid: Seq[Seq[Int]], capacity: Int): Int = {\n    val n = grid.length\n    val m = grid.head.length\n    val dp = Array.fill(n)(Array.fill(m + 1)(0))\n    for (i <- 0 until n) {\n        dp(i)(0) = grid(i)(0)\n    }\n    for (j <- 1 until m) {\n        dp(0)(j) = grid(0)(j)\n    }\n    for (i <- 1 until n) {\n        for (j <- 1 until m) {\n            dp(i)(j) = Math.min(dp(i - 1)(j), dp(i)(j - 1), dp(i - 1)(j - 1)) + grid(i)(j)\n        }\n    }\n    val result = 0\n    for (i <- 0 until n) {\n        var remaining = capacity\n        for (j <- 0 until m) {\n            if (remaining >= grid(i)(j)) {\n                remaining -= grid(i)(j)\n            } else if (j > 0) {\n                result += dp(i)(j - 1) / grid(i)(j - 1)\n                remaining -= grid(i)(j - 1)\n            }\n        }\n    }\n    result\n}\n",
            "def sortArray(arr: Seq[Int]): Seq[Int] = {\n    // Implementation here\n}\n",
            "def selectWords(s: String, n: Int): Seq[String] = {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\"\n    s.split(\" \").filter(w => w.nonEmpty && w.count(c => consonants.contains(c.toLower)) == n).toList\n}\n",
            "def getClosestVowel(word: String): String = {\n    val vowels = \"aeiouAEIOU\"\n    for (i <- word.indices.reverse) {\n        if (vowels.contains(word(i))) {\n            for (j <- i - 1 to i + 2) {\n                if (!vowels.contains(word(j)) && (j != i - 1 || j == i - 1) && (j != i + 1 || j == i + 1)) {\n                    return word(j)\n                }\n            }\n        }\n    }\n    \"\"\n}\n",
            "def matchParens(lst: Seq[String]): String = {\n    val s1 = lst(0) + lst(1)\n    val s2 = lst(1) + lst(0)\n    if (check(s1) || check(s2)) {\n        \"Yes\"\n    } else {\n        \"No\"\n    }\n}\ndef check(s: String): Boolean = {\n    var depth = 0\n    for (ch <- s) {\n        if (ch == \"(\") {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if (depth < 0) {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "def maximum(arr: Seq[Int], k: Int): Seq[Int] = {\n    if (k == 0) Seq.empty\n    val sortedArr = arr.sorted\n    sortedArr.take(k)\n}\n",
            "def solution(lst: Seq[Int]): Int = {\n    val result = mutable.ListBuffer[Int]()\n    for (i <- lst.indices) {\n        if (lst(i) % 2 == 0 && lst(i) % 2 != 0) {\n            result += lst(i)\n        }\n    }\n    result.sum\n}\n",
            "def addElements(arr: Seq[Int], k: Int): Int = {\n    val filteredArr = arr.filter(_.length <= 2)\n    filteredArr.take(k).sum\n}\n",
            "def getOddCollatz(n: Int): Seq[Int] = {\n    var collatz = List(1)\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz = collatz :+ n\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    collatz.sorted\n}\n",
            "def validDate(date: String): Boolean = {\n    if (date.length != 10 || date.charAt(2) != '-' || date.charAt(5) != '-') {\n        return false\n    }\n    val m = date.charAt(0) + date.charAt(1)\n    val d = date.charAt(3) + date.charAt(4)\n    val isLeapYear = (m == \"02\" && d >= \"29\") || (m in Set(\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\")) || (m == \"04\" && d <= \"30\") || (m == \"06\" && d <= \"31\")\n    d.toInt >= 1 && d.toInt <= (if (isLeapYear) 29 else 28) && m.toInt in Set(1, 3, 5, 7, 8, 10, 12)\n}\n",
            "def splitWords(txt: String): Seq[String] = {\n    if (txt.contains(\" \")) {\n        txt.split(\" \")\n    } else if (txt.contains(\",\")) {\n        txt.split(\",\")\n    } else {\n        Seq(txt.count(c => c.isLowerCase && (ord(c) % 2 == 0)))\n    }\n}\n",
            "def isSorted(lst: Seq[Int]): Boolean = {\n    if (lst.size <= 1) {\n        true\n    } else {\n        val sorted = lst.reverse\n        for (i <- 0 until sorted.size - 1) {\n            if (sorted(i) > sorted(i+1)) {\n                return false\n            }\n        }\n        true\n    }\n}\n",
            "def intersection(interval1: Seq[Int], interval2: Seq[Int]): String = {\n    val l = math.max(interval1(0), interval2(0))\n    val r = math.min(interval1(1), interval2(1))\n    val length = r - l\n    if (length > 0 && isPrime(length)) {\n        \"YES\"\n    } else {\n        \"NO\"\n    }\n}\ndef isPrime(n: Int): Boolean = {\n    if (n < 2) {\n        false\n    }\n    for (i <- 2 to math.sqrt(n).toInt) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}\n",
            "def prodSigns(arr: Seq[Int]): Option[Int] = {\n    if (arr.isEmpty) None\n    if (arr.exists(_ == 0)) 0\n    val sign = if (arr.count(_ < 0) % 2 == 1) -1 else 1\n    sign * arr.map(_.abs).sum\n}\n",
            "def minPath(grid: Seq[Seq[Int]], k: Int): Seq[Int] = {\n    val n = grid.length\n    var minVal = n * n + 1\n    var result = mutable.ListBuffer[Int]()\n    for (i <- 0 until n) {\n        for (j <- 0 until n) {\n            if (grid(i)(j) == 1) {\n                minVal = 1\n            } else {\n                var temp = List[Int]()\n                if (i > 0) temp += grid(i - 1)(j)\n                if (j > 0) temp += grid(i)(j - 1)\n                if (i < n - 1) temp += grid(i + 1)(j)\n                if (j < n - 1) temp += grid(i)(j + 1)\n                minVal = temp.min\n            }\n            result += if (i % 2 == 0) 1 else minVal\n        }\n    }\n    result.toList\n}\n",
            "def tri(n: Int): Seq[Int] = {\n    if (n == 0) Seq(1)\n    var seq = Seq(1, 3)\n    for (i <- 2 to n) {\n        if (i % 2 == 0) seq = seq :+ (i / 2 + 1)\n        else seq = seq :+ (seq.tail + seq.take(2).sum + (i + 3) / 2)\n    }\n    seq\n}\n",
            "def digits(n: Int): Int = {\n    val strN = n.toString\n    val odds = strN.filter(_.toInt % 2 == 1).toList\n    if (odds.nonEmpty) {\n        odds.product\n    } else {\n        0\n    }\n}\n",
            "def isNested(s: String): Boolean = {\n    val openIdx = s.indices.filter(_ == '[')\n    val closeIdx = s.indices.filter(_ == ']')\n    val cnt = openIdx.count(openIdx.zip(closeIdx).map(_._2).contains)\n    cnt >= 2\n}\n",
            "def sumSquares(lst: Seq[Double]): Int = {\n    val result = mutable.ListBuffer[Double]()\n    for (n <- lst) {\n        result += pow(math.ceil(n), 2)\n    }\n    result.sum.toInt\n}\n",
            "def checkIfLastCharIsALetter(txt: String): Boolean = {\n    if (txt.isEmpty) {\n        false\n    }\n    val last = txt.reverse.findFirstMatchIn(java.util.regex.Pattern(\"\\\\s+.*\")).getOrElse(\"\")\n    last.length == 1 && last(0).isLetter\n}\n",
            "def canArrange(arr: Seq[Int]): Int = {\n    if (arr.length <= 1) -1\n    val idx = arr.indices.filter(i => arr(i) < arr(i - 1)).toList\n    max(idx, default = -1)\n}\n",
            "def largestSmallestIntegers(lst: Seq[Int]): Seq[Option[Int]] = {\n    val neg = lst.filter(_ < 0)\n    val pos = lst.filter(_ > 0)\n    val maxNeg = neg.maxOrElse(None)\n    val minPos = pos.minOrElse(None)\n    Seq(maxNeg, minPos)\n}\n",
            "def compareOne(a: Any, b: Any): Option[Double] = {\n    val a1 = anyToReal(a).toOption\n    val b1 = anyToReal(b).toOption\n    if (a1.isEmpty && b1.isEmpty) {\n        None\n    } else {\n        if (a1.isEmpty) {\n            Some(b1.get)\n        } else if (b1.isEmpty) {\n            Some(a1.get)\n        } else {\n            if (a1.get == b1.get) {\n                None\n            } else if (a1.get > b1.get) {\n                Some(a1.get)\n            } else {\n                Some(b1.get)\n            }\n        }\n    }\n}\n",
            "def isEqualToSumEven(n: Int): Boolean = {\n    n % 2 == 0 && n >= 8\n}\n",
            "def specialFactorial(n: Int): Int = {\n    var fact = 1\n    var result = 1\n    for (i <- 1 to n) {\n        fact *= i\n        result *= fact\n    }\n    result\n}\n",
            "def fixSpaces(txt: String): String = {\n    val regex = \"\\\\s{3,}\".r\n    regex.replaceAll(txt, \"_\")\n}\n",
            "def fileNameCheck(fileName: String): String = {\n    val lst = fileName.split(\".\")\n    if (lst.length != 2 || !lst(1).toLowerCase.contains(\"txt\") || lst(1).toLowerCase.contains(\"exe\") || lst(1).toLowerCase.contains(\"dll\") || lst(0).isEmpty || !lst(0).matches(\"[a-zA-Z][a-zA-Z0-9]{0,3}\") || lst(0).exists(c => c.isDigit() && c != \"0\")) {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "def sumSquares(lst: Seq[Int]): Int = {\n    val result = 0\n    for (i <- lst.indices) {\n        if (i % 3 == 0) {\n            result += pow(lst(i), 2)\n        } else if (i % 4 == 0) {\n            result += pow(lst(i), 3)\n        } else {\n            result += lst(i)\n        }\n    }\n    result\n}\n",
            "def wordsInSentence(sentence: String): String = {\n    val words = sentence.split(\" \")\n    val result = new mutable.ListBuffer[String]()\n    for (word <- words) {\n        if (isPrime(word.length)) {\n            result += word\n        }\n    }\n    result.mkString(\" \")\n}\ndef isPrime(n: Int): Boolean = {\n    if (n < 2) {\n        false\n    }\n    for (i <- 2 to math.sqrt(n).toInt) {\n        if (n % i == 0) {\n            false\n        }\n    }\n    true\n}\n",
            "def simplify(x: String, n: String): Boolean = {\n    val xs = x.split(\"/\")\n    val ns = n.split(\"/\")\n    val num = xs(0).toInt * ns(0).toInt\n    val den = xs(1).toInt * ns(1).toInt\n    num % den == 0\n}\n",
            "def orderByPoints(nums: Seq[Int]): Seq[Int] = {\n    nums.sortBy(digitsSum)\n}\ndef digitsSum(n: Int): Int = {\n    val nStr = n.toString\n    if (n >= 0) {\n        nStr.totals\n    } else {\n        (nStr.take(2) * 2).toInt + digitsSum(n.abs)\n    }\n}\n",
            "def specialFilter(nums: Seq[Int]): Int = {\n    val odds = \"13579\"\n    val filtered = nums.filter(n => n > 10 && n % 2 == 1 && (n.toString.head match {\n        case c: odds => true\n        case _ => false\n    }))\n    filtered.length\n}\n",
            "def getMaxTriples(n: Int): Int = {\n    val c = Array.fill(3)(0)\n    for (i <- 1 to n) {\n        val a = i * i - i + 1\n        c(a % 3) += 1\n    }\n    val result = c(0) * c(1) * c(2)\n    var triplets = 0\n    for (i <- 1 to n) {\n        triplets += i\n        if (triplets >= n) {\n            triplets -= n\n            break\n        }\n    }\n    result + triplets * (triplets - 1) * (triplets - 2) // 6\n}\n",
            "def bf(planet1: String, planet2: String): Seq[String] = {\n    val names = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if (!(planet1.toLowerCase.contains(planet1) && planet2.toLowerCase.contains(planet2))) {\n        return Seq.empty[String]\n    }\n    val l = names.indexOf(planet1.toLowerCase)\n    val r = names.indexOf(planet2.toLowerCase)\n    if (l > r) {\n        (l, r) = (r, l)\n    }\n    if (l == r) {\n        return Seq.empty[String]\n    }\n    names.slice(l + 1, r).toList\n}\n",
            "def sortedListSum(lst: Seq[String]): Seq[String] = {\n    val result = lst.filter(_.length % 2 == 0).toList\n    result.sortWith(_.compareTo(_) match {\n        case 0 => result.indexOf(_) < result.indexOf(_.reverse)\n        case 1 => true\n        case -1 => false\n    })\n}\n",
            "def xOrY(n: Int, x: Int, y: Int): Int = {\n    if (n < 2) y\n    else {\n        for (i <- 2 to Math.floor(Math.sqrt(n)).toInt) {\n            if (n % i == 0) return y\n        }\n        return x\n    }\n}\n",
            "def doubleTheDifference(lst: Seq[Double]): Int = {\n    val oddSquares = lst.filter(_ % 2 == 1 && _ >= 0).map(_ * _)\n    oddSquares.sum.toInt\n}\n",
            "def compare(game: Seq[Int], guess: Seq[Int]): Seq[Int] = {\n    game.zip(guess).map { case (x, y) => x - y }\n}\n",
            "def strongestExtension(className: String, extensions: Seq[String]): String = {\n    extensions.maxBy { ext =>\n        val upper = ext.count(_.isUpper)\n        val lower = ext.count(_.isLower)\n        upper - lower\n    }\n    s\"$className.$extensions.maxBy { ext =>\n        val upper = ext.count(_.isUpper)\n        val lower = ext.count(_.isLower)\n        upper - lower\n    }\"\n}\n",
            "def cycpatternCheck(a: String, b: String): Boolean = {\n    if (a.length < b.length) {\n        false\n    }\n    for (i <- b.length to 0 by -1) {\n        if (b.substring(i, b.length) + b.substring(0, i) in a) {\n            return true\n        }\n    }\n    false\n}\n",
            "def evenOddCount(num: Int): Seq[Int] = {\n    val ds = num.toString.map(_.toInt)\n    val even = ds.count(_ % 2 == 0)\n    List(even, ds.length - even)\n}\n",
            "def intToMiniRoman(num: Int): String = {\n    val values = List(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    val numerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    val romanNumeralMap = values.zipWithIndex.toMap\n    val romanNumerals = numerals.filter(n => values.contains(4 * values(numerals.indexOf(n))))\n    val res = new mutable.ListBuffer[String]()\n    for (i <- romanNumerals) {\n        var count = 0\n        while (num >= values(romanNumeralMap(i))) {\n            count += 1\n            num -= values(romanNumeralMap(i))\n        }\n        if (count > 0) {\n            res += i * count\n        }\n    }\n    res.reverse.mkString(\"\")\n}\n",
            "def rightAngleTriangle(a: Int, b: Int, c: Int): Boolean = {\n    if (a <= 0 || b <= 0 || c <= 0) return false\n    if (a >= b + c || b >= a + c || c >= a + b) return false\n    return true\n}\n",
            "def findMax(words: Seq[String]): String = {\n    words.groupBy(identity).mapValues(_.size).toSeq.sortBy(_._2).reverse.head._1\n}\n",
            "def eat(num: Int, need: Int, remaining: Int): Seq[Int] = {\n    if (need <= remaining) {\n        Seq(num + need, remaining - need)\n    } else {\n        Seq(num + remaining, 0)\n    }\n}\n",
            "def doAlgebra(operators: Seq[String], operands: Seq[Int]): Int = {\n    val ops = operators.toList\n    val nums = operands.toList\n    var i = ops.length - 1\n    while (i >= 0) {\n        if (ops(i) == \"**\") {\n            val power = nums(i)\n            val base = nums(i + 1)\n            nums = nums.updated(i, base * power)\n            nums = nums.updated(i + 1, Nil)\n            ops = ops.filterNot(_ == \"**\")\n            i -= 1\n        }\n        i -= 1\n    }\n    var j = 0\n    while (j < ops.length) {\n        if (ops(j) == \"*\") {\n            val mul1 = nums(j)\n            val mul2 = nums(j + 1)\n            nums = nums.updated(j, mul1 * mul2)\n            nums = nums.updated(j + 1, Nil)\n            ops = ops.filterNot(_ == \"*\")\n            j -= 1\n        } else if (ops(j) == \"//\") {\n            val div1 = nums(j)\n            val div2 = nums(j + 1)\n            nums = nums.updated(j, div1 / div2)\n            nums = nums.updated(j + 1, Nil)\n            ops = ops.filterNot(_ == \"//\")\n            j -= 1\n        }\n        j += 1\n    }\n    var k = 0\n    while (k < ops.length) {\n        if (ops(k) == \"+\") {\n            val add1 = nums(k)\n            val add2 = nums(k + 1)\n            nums = nums.updated(k, add1 + add2)\n            nums = nums.updated(k + 1, Nil)\n            ops = ops.filterNot(_ == \"+\")\n            k -= 1\n        } else if (ops(k) == \"-\") {\n            val sub1 = nums(k)\n            val sub2 = nums(k + 1)\n            nums = nums.updated(k, sub1 - sub2)\n            nums = nums.updated(k + 1, Nil)\n            ops = ops.filterNot(_ == \"-\")\n            k -= 1\n        }\n        k += 1\n    }\n    return nums.head\n}\n",
            "def solve(s: String): String = {\n    if (!s.nonEmpty && !s.containsAny(Character.isLetter)) {\n        return s\n    }\n    val result = mutable.ListBuffer[Char]()\n    for (ch <- s) {\n        if (ch.isLetter) {\n            if (ch.isUpper) {\n                result.append(ch.toLowerCase)\n            } else if (ch.isLower) {\n                result.append(ch.toUpperCase)\n            }\n        } else {\n            result.append(ch)\n        }\n    }\n    result.reverse.mkString(\"\")\n}\n",
            "object StringToMd5 {\n    def stringToMd5(txt: String): Optional[String] = {\n        if (txt.isEmpty) {\n            None\n        } else {\n            val secretKeySpec = new SecretKeySpec(txt.getBytes(StandardCharsets.UTF_8), \"MD5\")\n            val mac = Mac.getInstance(\"HmacSHA256\")\n            mac.init(secretKeySpec)\n            val md5 = mac.doFinal(txt.getBytes(StandardCharsets.UTF_8))\n            Optional.ofNullable(new String(md5, StandardCharsets.UTF_8))\n        }\n    }\n}\n",
            "def generateIntegers(a: Int, b: Int): Seq[Int] = {\n    val lower = math.max(2, math.min(a, b))\n    val upper = math.min(8, math.max(a, b))\n    (i for i in (lower to upper if i % 2 == 0)).toList\n}\n"
        ],
        "swift": [
            "func hasCloseElements(_ numbers: [Double], _ threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func separateParenGroups(_ parenString: String) -> [String] {\n    var stk = [Character]()\n    var currentGroup = \"\"\n    let parens = parenString.replacingOccurrences(of: \" \", with: \"\")\n    for ch in parens {\n        if ch == \"(\" {\n            stk.append(ch)\n            currentGroup += \"\\(ch)\"\n        } else if stk.isEmpty {\n            continue\n        } else {\n            stk.pop()\n            currentGroup += \"\\(ch)\"\n            if stk.isEmpty {\n                let group = currentGroup\n                currentGroup = \"\"\n                yield group\n            }\n        }\n    }\n}\n",
            "func truncateNumber(_ num: Double) -> Double {\n    return num - floor(num)\n}\n",
            "func belowZero(_ operations: [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func meanAbsoluteDeviation(_ numbers: [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n    let deviations = numbers.map { abs($0 - mean) }\n    let deviation = deviations.reduce(0, +) / Double(numbers.count)\n    return deviation\n}\n",
            "func intersperse(_ numbers: [Int], _ delimiter: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<numbers.count {\n        if i != 0 {\n            result.append(delimiter)\n        }\n        result.append(numbers[i])\n    }\n    return result\n}\n",
            "func parseNestedParens(_ parenString: String) -> [Int] {\n    var result = [Int]()\n    var currentMaxDepth = 0\n    for word in parenString.split(separator: \" \") {\n        for ch in word {\n            if ch == \"(\" {\n                currentMaxDepth += 1\n            } else if ch == \")\" {\n                currentMaxDepth -= 1\n            }\n        }\n        result.append(currentMaxDepth)\n    }\n    return result\n}\n",
            "func filterBySubstring(_ strs: [String], _ substring: String) -> [String] {\n    return strs.filter { $0.contains(substring) }\n}\n",
            "func sumProduct(_ numbers: [Int]) -> [Int] {\n    let nSum = numbers.reduce(0, +)\n    let nProduct = numbers.reduce(1, *)\n    return [nSum, nProduct]\n}\n",
            "func rollingMax(_ numbers: [Int]) -> [Int] {\n    var maxSoFar = Int.min\n    var result = [Int]()\n    for num in numbers {\n        maxSoFar = max(maxSoFar, num)\n        result.append(maxSoFar)\n    }\n    return result\n}\n",
            "func makePalindrome(_ s: String) -> String {\n    guard s.count > 1 else {\n        return s\n    }\n    for i in 0..<s.count {\n        if isPalindrome(s[i..<s.count]) {\n            return s + s[:i][::-1]\n        }\n    }\n    return s\n}\nfunc isPalindrome(_ s: String) -> Bool {\n    guard s.count <= 1 else {\n        return true\n    }\n    return s == s.reversed()\n}\n",
            "func stringXor(_ a: String, _ b: String) -> String {\n    let achars = a.unicodeScalars()\n    let bchars = b.unicodeScalars()\n    var result = String(bytes: Array(a.count, type: UInt8), encoding: .utf8)\n    for i in 0..<a.count {\n        let achar = achars[i]\n        let bchar = bchars[i]\n        let xor = Int(achar.value) ^ Int(bchar.value)\n        result.replaceSubrange(i...i, with: String(UnicodeScalar(xor), encoding: .utf8)!)\n    }\n    return result\n}\n",
            "func longest(_ strs: [String]) -> String? {\n    guard !strs.isEmpty else {\n        return nil\n    }\n    var longest_s = strs[0]\n    for s in strs {\n        if s.count > longest_s.count {\n            longest_s = s\n        }\n    }\n    return longest_s\n}\n",
            "func greatestCommonDivisor(_ a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    }\n    return greatestCommonDivisor(b, a % b)\n}\n",
            "func allPrefixes(_ s: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<s.count {\n        prefixes.append(s[0..<i])\n    }\n    return prefixes\n}\n",
            "func stringSequence(_ n: Int) -> String {\n    let nums = (0...n).map { $0 }\n    let strs = nums.map { String($0) }\n    return strs.joined(separator: \" \")\n}\n",
            "func countDistinctCharacters(_ s: String) -> Int {\n    let lowercasedString = s.lowercased()\n    var charCount = [Character: Int]()\n    for c in lowercasedString {\n        if let count = charCount[c] {\n            charCount[c] = count + 1\n        } else {\n            charCount[c] = 1\n        }\n    }\n    return charCount.values.count\n}\n",
            "func parseMusic(_ musicString: String) -> [Int] {\n    let durations = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    var result = [Int]()\n    let notes = musicString.split(separator: \" \")\n    for note in notes {\n        if let duration = durations[note] {\n            result.append(duration)\n        }\n    }\n    return result\n}\n",
            "func howManyTimes(_ s: String, _ substring: String) -> Int {\n    let lenSubstring = substring.count\n    var count = 0\n    for i in 0..<s.count - lenSubstring {\n        if s.substring(with: substring, options: .caseInsensitive, range: NSRange(location: i, length: lenSubstring)) == substring {\n            count += 1\n        }\n    }\n    return count\n}\n",
            "func sortNumbers(_ numbers: String) -> String {\n    let numDict = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numList = numbers.components(separatedBy: \" \").filter { numDict[$0].isValid }.sorted { numDict[$0] < numDict[$1] }\n    return numList.joined(separator: \" \")\n}\n",
            "func findClosestElements(_ numbers: [Double]) -> [Double] {\n    guard numbers.count >= 2 else {\n        return []\n    }\n    var sortedNumbers = numbers.sorted()\n    var minDiff = Double.infinity\n    var closestPair = [Double]()\n    for i in 1..<sortedNumbers.count {\n        let diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]]\n        }\n    }\n    return closestPair\n}\n",
            "func rescaleToUnit(_ numbers: [Double]) -> [Double] {\n    guard !numbers.isEmpty else {\n        return Array(repeating: 0.0, count: numbers.count)\n    }\n    let minNum = numbers.min() ?? Double.nan\n    let maxNum = numbers.max() ?? Double.nan\n    if minNum == maxNum {\n        return Array(repeating: 0.0, count: numbers.count)\n    }\n    return (numbers.map { (num) -> Double in\n        if let nan = Double.isNaN(num), nan {\n            return num\n        }\n        let scaledNum = (num - minNum) / (maxNum - minNum)\n        return scaledNum\n    })\n}\n",
            "func filterIntegers(_ values: [Any]) -> [Int] {\n    return values.filter {\n        $0 is Int\n    }.map {\n        $0 as! Int\n    }\n}\n",
            "func strLength(_ s: String) -> Int {\n    let unicode = s.unicodeScalars()\n    var count = 0\n    while let char = unicode.next() {\n        count += 1\n    }\n    return count\n}\n",
            "func largestDivisor(_ n: Int) -> Int {\n    for i in 2...n {\n        if n % i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "func factorize(_ n: Int) -> [Int] {\n    var factors = [Int]()\n    var divisor = 2\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.append(divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "func removeDuplicates(_ numbers: [Int]) -> [Int] {\n    var counts = [Int: Int]()\n    for num in numbers {\n        counts[num, default: 0] += 1\n    }\n    var result = [Int]()\n    for (num, count) in counts {\n        if count == 1 {\n            result.append(num)\n        }\n    }\n    return result\n}\n",
            "func flipCase(_ s: String) -> String {\n    var result = \"\"\n    for ch in s {\n        if !ch.isLetter {\n            result.append(ch)\n        } else if ch.isUppercase {\n            result.append(ch.lowercased())\n        } else {\n            result.append(ch.uppercased())\n        }\n    }\n    return result\n}\n",
            "func concatenate(_ strs: [String]) -> String {\n    return strs.joined(separator: \"\")\n}\n",
            "func filterByPrefix(_ strs: [String], _ prefixStr: String) -> [String] {\n    let prefix = prefixStr.lowercased()\n    return strs.filter {\n        $0.lowercased().hasPrefix(prefix)\n    }\n}\n",
            "func getPositive(_ l: [Int]) -> [Int] {\n    let result = [Int]()\n    for num in l {\n        if num > 0 {\n            result.append(num)\n        }\n    }\n    return result\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func poly(_ xs: [Int], _ x: Double) -> Double {\n    var res = 0.0\n    for i in 0..<xs.count {\n        res += xs[i] * pow(x, Double(i))\n    }\n    return res\n}\nfunc findZero(_ xs: [Int]) -> Double {\n    var x1 = 1.0\n    var x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    while abs(x1 - x2) > 1e-10 {\n        let mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0 {\n            return mid\n        } else if poly(xs, mid) * poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "func sortThird(_ l: [Int]) -> [Int] {\n    let sorted = l.sorted()\n    var result = [Int](repeating: 0, count: l.count)\n    for i in 0..<l.count {\n        if i % 3 == 0 {\n            result[i] = sorted[i // 3]\n        } else {\n            result[i] = l[i]\n        }\n    }\n    return result\n}\n",
            "func listUnique(_ l: [Int]) -> [Int] {\n    let set = Set(l)\n    return sorted(Array(set))\n}\n",
            "func maxElement(_ l: [Int]) -> Int {\n    guard !l.isEmpty else {\n        return 0\n    }\n    return l.max()\n}\n",
            "func fizzBuzz(_ n: Int) -> Int {\n    var cnt = 0\n    for i in 0...n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += String(i).components(separatedBy: \"7\").count\n        }\n    }\n    return cnt\n}\n",
            "func sortEven(_ l: [Int]) -> [Int] {\n    let sortedEven = l[::2].sorted()\n    var result = [Int](repeating: 0, count: l.count)\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            result[i] = sortedEven[i // 2]\n        } else {\n            result[i] = l[i]\n        }\n    }\n    return result\n}\n",
            "func encodeCyclic(_ s: String) -> String {\n    var result = \"\"\n    for i in stride(from: 0, to: s.count, by: 3) {\n        if i + 3 > s.count {\n            result.append(s[i:])\n        } else {\n            result.append(s[i+1..<i+3])\n            result.append(s[i])\n        }\n    }\n    return result\n}\nfunc decodeCyclic(_ s: String) -> String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "func primeFib(_ n: Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    for i in 2...sqrt(n) {\n        if n % i == 0 {\n            return 0\n        }\n    }\n    var f = [Int](repeating: 0, count: 2)\n    f[0] = 0\n    f[1] = 1\n    var cnt = 0\n    while cnt < n {\n        let fib = f[1]\n        f[0] = f[1]\n        f[1] = fib + f[0]\n        if isPrime(fib) {\n            cnt += 1\n        }\n    }\n    return f[1]\n}\nfunc isPrime(_ n: Int) -> Bool {\n    guard n >= 2 else {\n        return false\n    }\n    for i in 2...sqrt(n) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func triplesSumToZero(_ l: [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func carRaceCollision(_ n: Int) -> Int {\n    return n * n\n}\n",
            "func incrList(_ l: [Int]) -> [Int] {\n    let result = [Int]()\n    for i in l {\n        result.append(i + 1)\n    }\n    return result\n}\n",
            "func pairsSumToZero(_ l: [Int]) -> Bool {\n    var seen = Set<Int>()\n    for num in l {\n        if seen.contains(-num) {\n            return true\n        }\n        seen.insert(num)\n    }\n    return false\n}\n",
            "func changeBase(_ x: Int, _ bas: Int) -> String {\n    var digits = [String]()\n    while x > 0 {\n        digits.appendString(String(x % bas))\n        x /= bas\n    }\n    return digits.joined()\n}\n",
            "func triangleArea(_ a: Int, _ h: Int) -> Double {\n    let area = a * h / 2.0\n    return area\n}\n",
            "func fib4(_ n: Int) -> Int {\n    var fib = [0, 0, 2, 0]\n    for i in 4...n {\n        fib[i % 4] = fib[0] + fib[1] + fib[2]\n        fib[0] = fib[1]\n        fib[1] = fib[2]\n        fib[2] = fib[3]\n        fib[3] = fib[0] + fib[1]\n    }\n    return fib[n % 4]\n}\n",
            "func median(_ l: [Double]) -> Double {\n    let sortedL = l.sorted()\n    if l.count % 2 != 0 {\n        return Double(sortedL[sortedL.count / 2])\n    } else {\n        return (sortedL[sortedL.count / 2] + Double(sortedL[sortedL.count / 2 - 1])) / 2\n    }\n}\n",
            "func isPalindrome(_ txt: String) -> Bool {\n    let lowercaseTxt = txt.lowercased().replacingOccurrences(of: \" \", with: \"\")\n    return lowercaseTxt == lowercaseTxt.reversed()\n}\n",
            "func modp(_ n: Int, _ p: Int) -> Int {\n    var ret = 1\n    for _ in 1...n {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func encodeShift(_ s: String) -> String {\n    let alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    var result = \"\"\n    for ch in s {\n        let idx = alphabet.firstIndex(of: ch.lowercased())\n        if let newIdx = idx? let newCh = alphabet[(idx! + 5) % alphabet.count] {\n            result.append(newCh)\n        } else {\n            result.append(ch)\n        }\n    }\n    return result\n}\nfunc decodeShift(_ s: String) -> String {\n    let alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    var result = \"\"\n    for ch in s {\n        let idx = alphabet.firstIndex(of: ch.lowercased())\n        if let oldIdx = idx? let oldCh = alphabet[(idx! - 21 + 26) % alphabet.count] {\n            result.append(oldCh)\n        } else {\n            result.append(ch)\n        }\n    }\n    return result\n}\n",
            "func removeVowels(_ txt: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    return txt.filter { !vowels.contains($0) }\n}\n",
            "func belowThreshold(_ l: [Int], _ t: Int) -> Bool {\n    return l.all { $0 < t }\n}\n",
            "func add(_ x: Int, _ y: Int) -> Int {\n    return x + y\n}\n",
            "func sameChars(_ s0: String, _ s1: String) -> Bool {\n    let set0 = Set(s0)\n    let set1 = Set(s1)\n    return set0 == set1\n}\n",
            "func fib(_ n: Int) -> Int {\n    var a = 0\n    var b = 1\n    var c = 0\n    if n <= 1 {\n        return n\n    }\n    for i in 2...n {\n        c = a + b\n        a = b\n        b = c\n    }\n    return b\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for bracket in brackets {\n        switch bracket {\n        case \"<\":\n            depth += 1\n        case \">\":\n            depth -= 1\n        default:\n            break\n        }\n    }\n    return depth == 0\n}\n",
            "func monotonic(_ l: [Int]) -> Bool {\n    guard l.count >= 2 else {\n        return false\n    }\n    let diff = l.map { y - x in y - x }\n    let isIncreasing = diff.reduce(true) { $0 && $1 >= 0 }\n    return isIncreasing || diff.reduce(true) { $0 && $1 <= 0 }\n}\n",
            "func common(_ l1: [Int], _ l2: [Int]) -> [Int] {\n    let set1 = Set(l1)\n    let set2 = Set(l2)\n    return sorted(set1.intersecting(set2) as [Int])\n}\n",
            "func largestPrimeFactor(_ n: Int) -> Int {\n    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            while n % i == 0 {\n                n /= i\n            }\n        }\n        i += 1\n    }\n    return n\n}\n",
            "func sumToN(_ n: Int) -> Int {\n    let sum = (1...n).reduce(0, +)\n    return sum\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for bracket in brackets {\n        switch bracket {\n        case \"(\":\n            depth += 1\n        case \")\":\n            depth -= 1\n        default:\n            break\n        }\n    }\n    return depth == 0\n}\n",
            "func derivative(_ xs: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 1...xs.count {\n        result.append(xs[i] * i)\n    }\n    return result\n}\n",
            "func fibfib(_ n: Int) -> Int {\n    if n <= 1 {\n        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 1\n    for _ in 2...n {\n        let temp = a + b + c\n        a = b\n        b = c\n        c = temp\n    }\n    return c\n}\n",
            "func vowelsCount(_ s: String) -> Int {\n    let vowels = \"aeiouAEIOU\"\n    var cnt = 0\n    for char in s {\n        if vowels.contains(char) {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "func circularShift(_ x: Int, _ shift: Int) -> String {\n    let xStr = String(x)\n    if shift > xStr.count {\n        return xStr.reversed().toString()\n    } else {\n        let shifted = String(xStr.dropLast(shift).concatenating(xStr.prefix(shift)))\n        return shifted\n    }\n}\n",
            "func digitSum(_ s: String) -> Int {\n    let digits = s.filter { $0.isUppercase }.map { Int($0)! }\n    return digits.reduce(0, +)\n}\n",
            "func fruitDistribution(_ s: String, _ n: Int) -> Int {\n    let words = s.components(separatedBy: \" \")\n    let apples = Int(words[words.index(before: \"apples\") - 1]!)\n    let oranges = Int(words[words.index(before: \"oranges\") - 1]!)\n    return n - apples - oranges\n}\n",
            "func pluck(_ arr: [Int]) -> [Int] {\n    guard !arr.isEmpty else {\n        return []\n    }\n    var minEven = arr[0]\n    var index = 0\n    for i in 0..<arr.count {\n        if arr[i] % 2 == 0 && arr[i] < minEven {\n            minEven = arr[i]\n            index = i\n        }\n    }\n    if minEven == arr[0] {\n        return []\n    }\n    return [minEven, index]\n}\n",
            "func search(_ lst: [Int]) -> Int {\n    var freqs = [Int: Int]()\n    for n in lst {\n        if let count = freqs[n] {\n            freqs[n] = count + 1\n        } else {\n            freqs[n] = 1\n        }\n    }\n    var goodNums = [Int]()\n    for (num, count) in freqs.items() {\n        if count >= num {\n            goodNums.append(num)\n        }\n    }\n    return goodNums.first ?? -1\n}\n",
            "func strangeSortList(_ lst: [Int]) -> [Int] {\n    var sl = lst.sorted()\n    var result = [Int]()\n    var left = 0\n    var right = lst.count - 1\n    while left <= right {\n        result.append(sl[left])\n        left += 1\n        if left <= right {\n            result.append(sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "func triangleArea(_ a: Int, _ b: Int, _ c: Int) -> Double {\n    var s = (a + b + c) / 2.0\n    if a <= 0 || b <= 0 || c <= 0 {\n        return -1.0\n    }\n    let a = (s - a) * (s - b) * (s - c)\n    return sqrt(a)\n}\n",
            "func willItFly(_ q: [Int], _ w: Int) -> Bool {\n    guard !q.isEmpty else {\n        return false\n    }\n    let reversed = q.reversed()\n    if q == reversed {\n        return true\n    }\n    let total = q.reduce(0) { $0 + $1 }\n    return total <= w\n}\n",
            "func smallestChange(_ arr: [Int]) -> Int {\n    var ans = 0\n    for i in 0..<(arr.count / 2) {\n        if arr[i] != arr[arr.count - i - 1] {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "func totalMatch(_ lst1: [String], _ lst2: [String]) -> [String] {\n    let cnt1 = lst1.reduce(0) { $0 + $1.count }\n    let cnt2 = lst2.reduce(0) { $0 + $1.count }\n    return lst1 if cnt1 <= cnt2 else lst2\n}\n",
            "func isMultiplyPrime(_ a: Int) -> Bool {\n    if a < 2 {\n        return false\n    }\n    for i in 2..<a {\n        if a % i == 0 {\n            var n = a / i\n            while a % i == 0 {\n                a /= i\n            }\n            if isPrime(Int(n)) {\n                return true\n            }\n        }\n    }\n    return false\n}\nfunc isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func isSimplePower(_ x: Int, _ n: Int) -> Bool {\n    guard x > 1 else { return false }\n    if n < 2 { return x == n }\n    var tmp = 1\n    while tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "func isCube(_ a: Int) -> Bool {\n    let root = a.signMagnitudePower(one: 1.0)\n    return root * root * root == a\n}\n",
            "func hexKey(_ num: String) -> Int {\n    let numChars = num.filter({$0.isLetter})\n    return numChars.count { $0 in\n        [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"].contains($0)\n    }\n}\n",
            "func decimalToBinary(_ dec: Int) -> String {\n    let binary = String(dec.bitwiseShiftRight(2))\n    return \"db\\(binary)db\"\n}\n",
            "func isHappy(_ s: String) -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func numericalLetterGrade(_ grades: [Double]) -> [String] {\n    var result = [String]()\n    for g in grades {\n        if g == 4.0 {\n            result.append(\"A+\")\n        } else if g > 3.7 {\n            result.append(\"A\")\n        } else if g > 3.3 {\n            result.append(\"A-\")\n        } else if g > 3.0 {\n            result.append(\"B+\")\n        } else if g > 2.7 {\n            result.append(\"B\")\n        } else if g > 2.3 {\n            result.append(\"B-\")\n        } else if g > 2.0 {\n            result.append(\"C+\")\n        } else if g > 1.7 {\n            result.append(\"C\")\n        } else if g > 1.3 {\n            result.append(\"C-\")\n        } else if g > 1.0 {\n            result.append(\"D+\")\n        } else if g > 0.7 {\n            result.append(\"D\")\n        } else if g > 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"E\")\n        }\n    }\n    return result\n}\n",
            "func primeLength(_ s: String) -> Bool {\n    guard !s.isEmpty else {\n        return false\n    }\n    let length = s.utf16.count / 2\n    if length < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Float(length))) {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func startsOneEnds(_ n: Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * (10 ** (n - 2))\n}\n",
            "func solve(_ n: Int) -> String {\n    let digits = String(n).map { Int($0)! }\n    let digitsSum = digits.reduce(0) { $0 + $1 }\n    let binarySum = String(Int(digitsSum, radix: 2))\n    return binarySum\n}\n",
            "func add(_ lst: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n        if i % 2 == 1 && lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n",
            "func antiShuffle(_ s: String) -> String {\n    let words = s.components(separatedBy: \" \")\n    let shuffledWords = words.map { word in\n        let sortedLetters = word.sorted()\n        String(sortedLetters)\n    }\n    return shuffledWords.joined(separator: \" \")\n}\n",
            "func getRow(_ lst: [[Int]], _ x: Int) -> [[Int]] {\n    var coords = [[Int]]()\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            if lst[i][j] == x {\n                coords.append([i, j])\n            }\n        }\n    }\n    coords.sort {\n        if $0[0] < $1[0] || ($0[0] == $1[0] && -$0[1] < $1[1]) {\n            return true\n        } else {\n            return false\n        }\n    }\n    return coords\n}\n",
            "func sortArray(_ arr: [Int]) -> [Int] {\n    guard arr.count > 0 else {\n        return arr\n    }\n    if (arr[0] + arr[arr.count - 1]) % 2 == 0 {\n        return arr.sorted(by: >)\n    } else {\n        return arr.sorted()\n    }\n}\n",
            "func encrypt(_ s: String) -> String {\n    var result = \"\"\n    for ch in s {\n        let shifted = Int(UnicodeScalar(ch) + 4)\n        if shifted > 90 {\n            shifted -= 26\n        }\n        result.append(Character(UnicodeScalar(shifted)!)!)\n    }\n    return result\n}\n",
            "func nextSmallest(_ lst: [Int]) -> Int? {\n    guard lst.count >= 2 else {\n        return nil\n    }\n    let sl = Array(Set(lst))\n    return sl.sorted().first(where: { $0 > 0 })?.sorted(by: <)\n}\n",
            "func isBored(_ s: String) -> Int {\n    let sentences = s.components(separatedBy: \"[.!?]\\\\s*\")\n    let boredCount = sentences.filter { $0.count >= 2 && $0.hasPrefix(\"I \") }.count\n    return boredCount\n}\n",
            "func anyInt(_ x: Any, _ y: Any, _ z: Any) -> Bool {\n    guard let xInt = x as? Int, let yInt = y as? Int, let zInt = z as? Int else { return false }\n    if xInt + yInt == zInt || xInt + zInt == yInt || yInt + zInt == xInt {\n        return true\n    }\n    return false\n}\n",
            "func encode(_ message: String) -> String {\n    var result = \"\"\n    for ch in message {\n        if ch.isLetter {\n            let ch1 = String(ch).uppercased\n            if ch1 == \"A\" || ch1 == \"E\" || ch1 == \"I\" || ch1 == \"O\" || ch1 == \"U\" {\n                ch1 = String(ch1).lowercased\n                ch1 = (ch1 as NSCharacter).characterWithValue: (ch1 as NSUInteger).addingValue: 2\n            }\n            result.append(ch1)\n        } else {\n            result.append(ch)\n        }\n    }\n    return result\n}\n",
            "func skjkasdkd(_ lst: [Int]) -> Int {\n    var primes = lst.filter { isPrime($0) }\n    if primes.count == 0 {\n        return 0\n    }\n    let largest = String(primes.sorted().last!)\n    return largest.components(separatedBy: \"\").map { Int($0) }.reduce(0, +)\n}\nfunc isPrime(_ n: Int) -> Bool {\n    guard n >= 2 else { return false }\n    for i in 2..<n {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func checkDictCase(_ d: [String: String]) -> Bool {\n    guard !d.isEmpty else {\n        return false\n    }\n    guard all(c.islower() for c in d.keys) || all(c.isupper() for c in d.keys) else {\n        return false\n    }\n    return true\n}\n",
            "func countUpTo(_ n: Int) -> [Int] {\n    var primes = [Int]()\n    for num in 2...n {\n        var isPrime = true\n        for p in primes {\n            if num % p == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes.append(num)\n        }\n    }\n    return primes\n}\n",
            "func multiply(_ a: Int, _ b: Int) -> Int {\n    let absA = abs(a)\n    let absB = abs(b)\n    var result = 0\n    var multiple = absA % 10\n    while absB != 0 {\n        if absB % 2 == 1 {\n            result += multiple\n        }\n        multiple *= 10\n        absB /= 10\n    }\n    if a < 0 && b < 0 || a > 0 && b > 0 {\n        return result\n    }\n    return -result\n}\n",
            "func countUpper(_ s: String) -> Int {\n    let vowels = \"AEIOU\"\n    return s.enumerated().filter { $0.offset % 2 == 0 && vowels.contains($0.element) }.count\n}\n",
            "func closestInteger(_ value: String) -> Int {\n    let num = Double(value)!\n    if num >= 0 {\n        return Int(num + 0.5)\n    } else {\n        return Int(num - 0.5)\n    }\n}\n",
            "func makeAPile(_ n: Int) -> [Int] {\n    let pile = [n + 2 * i for i in 0..<n]\n    return pile\n}\n",
            "func wordsString(_ s: String) -> [String] {\n    let regex = #\"^[\\p{L}\\p{N}\\p{M}]+$\"#",
            "func chooseNum(_ x: Int, _ y: Int) -> Int {\n    if y < x {\n        return -1\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return y - 1\n}\n",
            "func roundedAvg(_ n: Int, _ m: Int) -> String? {\n    guard m > n else {\n        return nil\n    }\n    let rAvg = (m + n) / 2 + 0.5\n    let binRep = bin(Int(rAvg))\n    return binRep[2..<binRep.count]\n}\n",
            "func uniqueDigits(_ x: [Int]) -> [Int] {\n    let digits = [Int(digit) for digit in String(x).sorted()]\n    return digits.filter {\n        all_digits_odd(String($0))\n    }\n}\nfunc allDigitsOdd(_ s: String) -> Bool {\n    return s.filter { $0.isDigit }.all { $0.as? Int % 2 != 0 }\n}\n",
            "func byLength(_ arr: [Int]) -> [String] {\n    let digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    let sortedArr = arr.filter { $0 >= 1 && $0 <= 9 }.sorted { $0 < $1 }\n    return digitNames[sortedArr.map { Int($0 - 1) }]\n}\n",
            "func f(_ n: Int) -> [Int] {\n    let nums = (1...n)\n    var result = [Int]()\n    for i in nums {\n        if i % 2 != 0 {\n            result.append(nums.prefix(i).reduce(1, +))\n        } else {\n            result.append(nums.prefix(i).reduce(1, *)!)\n        }\n    }\n    return result\n}\n",
            "func evenOddPalindrome(_ n: Int) -> [Int] {\n    var cnt = [Int](repeating: 0, count: 2)\n    for i in 1...n {\n        if isPalindrome(String(i)) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}\nfunc isPalindrome(_ s: String) -> Bool {\n    let chs = s.filter({ $0.isLetter || $0.isNumber }).reversed().joined()\n    return chs.isEmpty || chs == s\n}\n",
            "func countNums(_ arr: [Int]) -> Int {\n    let digits = Array(arr.map { Int($0) })\n    let sums = digits.map { $0 + Int($0 * 2) }\n    return sums.filter { $0 > 0 }.count\n}\n",
            "func moveOneBall(_ arr: [Int]) -> Bool {\n    guard arr.count > 0 else {\n        return true\n    }\n    let sortedArr = arr.sorted()\n    for i in 0..<arr.count {\n        if arr[i..<arr.count] == sortedArr[i..<arr.count] && arr[0..<i] == sortedArr[arr.count - i..<arr.count]:\n            return true\n    }\n    return false\n}\n",
            "func canExchange(_ lst1: [Int], _ lst2: [Int]) -> String {\n    let oddCount1 = lst1.filter { $0 % 2 != 0 }.count\n    let evenCount2 = lst2.filter { $0 % 2 == 0 }.count\n    return \"YES\" if evenCount2 >= oddCount1 else \"NO\"\n}\n",
            "func histogram(_ test: String) -> [String: Int] {\n    var freq = [String: Int]()\n    var words = [String]()\n    var maxFreq = 0\n    for w in test.split(separator: \" \") {\n        if w.count > 0 {\n            words.append(w)\n            freq[w] = freq[w] ?? 0 + 1\n            maxFreq = max(maxFreq, freq[w]!)\n        }\n    }\n    var result = [String: Int]()\n    if freq.count > 0 {\n        for w in words {\n            if freq[w] == maxFreq {\n                result[w] = freq[w]\n            }\n        }\n    }\n    return result\n}\n",
            "func reverseDelete(_ s: String, _ c: String) -> [String] {\n    let s1 = s.filter { !c.contains($0) }.joined(separator: \"\")\n    return [s1, (isPalindrome(s1) ? \"yes\" : \"no\")]\n}\nfunc isPalindrome(_ s: String) -> Bool {\n    guard s.count >= 2 else {\n        return false\n    }\n    let n = s.count\n    var i, j = 0, mid = s.count / 2\n    while j < mid {\n        if s[i] != s[j] {\n            return false\n        }\n        i += 1\n        j += 1\n    }\n    return true\n}\n",
            "func oddCount(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for num in lst {\n        let n = num.filter { $0.asciiValue % 2 == 1 }.count\n        let rs = \"the number of odd elements in the string \\(n) of the input.\"\n        result.append(rs)\n    }\n    return result\n}\n",
            "func minSubArraySum(_ nums: [Int]) -> Int {\n    var minSum = 0\n    var curSum = 0\n    for n in nums {\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if minSum == 0 {\n        minSum = min(nums)\n    }\n    return minSum\n}\n",
            "func maxFill(_ grid: [[Int]]) -> Int {\n    var rows = grid.count\n    var cols = grid[0].count\n    var maxCount = 0\n    for i in 0..<rows {\n        var count = 0\n        var fill = 0\n        for j in 0..<cols {\n            fill += grid[i][j]\n            if fill > capacity {\n                count += ceil(fill / capacity)\n                fill = grid[i][j]\n            }\n        }\n        maxCount += count\n    }\n    for j in 0..<cols {\n        var count = 0\n        var fill = 0\n        for i in 0..<rows {\n            fill += grid[i][j]\n            if fill > capacity {\n                count += ceil(fill / capacity)\n                fill = grid[i][j]\n            }\n        }\n        maxCount += count\n    }\n    return maxCount\n}\n",
            "func sortArray(_ arr: [Int]) -> [Int] {\n    let sortedArr = arr.sorted {\n        if $0 == $1 {\n            return Int($0) > Int($1)\n        }\n        return $0 < $1\n    }\n    return sortedArr\n}\n",
            "func selectWords(_ s: String, _ n: Int) -> [String] {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let words = s.components(separatedBy: \" \")\n    return words.filter { w in\n        let c = w.filter { $0.isLetter && $0.isLower }.sorted()\n        return c.count == n\n    }\n}\n",
            "func getClosestVowel(_ word: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var closestVowel: String = \"\"\n    for i in (0..<word.count - 2) {\n        if word.hasPrefix(String(word[i])) && !vowels.contains(word[i + 1]) && !vowels.contains(word[i + 2]) {\n            closestVowel = word[i]\n            break\n        }\n    }\n    return closestVowel\n}\n",
            "func matchParens(_ lst: [String]) -> String {\n    let s1 = lst[0] + lst[1]\n    let s2 = lst[1] + lst[0]\n    if check(s1) || check(s2) {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }\n}\nfunc check(_ s: String) -> Bool {\n    var depth = 0\n    for ch in s {\n        if ch == \"(\" {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func maximum(_ arr: [Int], _ k: Int) -> [Int] {\n    guard k > 0 else {\n        return []\n    }\n    let sortedArr = arr.sorted()\n    return Array(sortedArr.prefix(k))\n}\n",
            "func solution(_ lst: [Int]) -> Int {\n    var count = 0\n    for i in 0..<lst.count {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            count += 1\n        }\n    }\n    return count\n}\n",
            "func addElements(_ arr: [Int], _ k: Int) -> Int {\n    let kthElements = arr[0...<k]\n    let numDigits = kthElements.count {\n        let n = kthElements[k]\n        return n if n < 100 else 0\n    }\n    return numDigits\n}\n",
            "func getOddCollatz(_ n: Int) -> [Int] {\n    var collatz = [1]\n    while n != 1 {\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = n * 3 + 1\n        }\n        collatz.append(n)\n    }\n    return sorted(collatz)\n}\n",
            "func validDate(_ date: String) -> Bool {\n    let months = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n    let days30 = [\"04\", \"06\", \"09\", \"11\"]\n    let days31 = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n    if date.count != 10 {\n        return false\n    }\n    let year = Int(date[6:])!\n    let month = String(date[:2])\n    let day = String(date[3:5])\n    if !months.contains(month) {\n        return false\n    }\n    switch month {\n    case \"02\":\n        if !days31.contains(month) {\n            return false\n        }\n    case \"04\", \"06\", \"09\", \"11\":\n        if !days30.contains(month) {\n            return false\n        }\n    default:\n        if !days31.contains(month) {\n            return false\n        }\n    }\n    if !day.isNumber {\n        return false\n    }\n    let dayInt = Int(day)\n    if dayInt < 1 || dayInt > 31 {\n        return false\n    }\n    if year < 1000 || year > 9999 {\n        return false\n    }\n    return true\n}\n",
            "func splitWords(_ txt: String) -> [String] {\n    if txt.contains(\" \") {\n        return txt.components(separatedBy: \" \")\n    } else if txt.contains(\",\") {\n        return txt.components(separatedBy: \",\")\n    } else {\n        let lowercaseLetters = txt.filter { $0.isLowercased && $0.isLetter && ord($0) % 2 == 0 }\n        return [lowercaseLetters.count]\n    }\n}\n",
            "func isSorted(_ lst: [Int]) -> Bool {\n    guard lst.count >= 2 else {\n        return true\n    }\n    for i in 0..<lst.count-1 {\n        if lst[i] > lst[i+1] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func intersection(_ interval1: [Int], _ interval2: [Int]) -> String {\n    let l = max(interval1[0], interval2[0])\n    let r = min(interval1[1], interval2[1])\n    let length = r - l\n    if length <= 0 {\n        return \"NO\"\n    }\n    if isPrime(length) {\n        return \"YES\"\n    }\n    return \"NO\"\n}\nfunc isPrime(_ n: Int) -> Bool {\n    guard n > 1 else {\n        return false\n    }\n    for i in 2..<n {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func prodSigns(_ arr: [Int]) -> Int? {\n    guard !arr.isEmpty else {\n        return nil\n    }\n    guard !arr.contains(0) else {\n        return 0\n    }\n    let sign = arr.filter({$0 < 0}).count % 2 == 1 ? -1 : 1\n    return sign * arr.reduce(1, { $0 * $1.abs })\n}\n",
            "func minPath(_ grid: [[Int]], _ k: Int) -> [Int] {\n    let n = grid.count\n    var minVal = n * n + 1\n    for i in 0..<n {\n        for j in 0..<n {\n            if grid[i][j] == 1 {\n                var temp = [Int]()\n                if i != 0 {\n                    temp.append(grid[i - 1][j])\n                }\n                if j != 0 {\n                    temp.append(grid[i][j - 1])\n                }\n                if i != n - 1 {\n                    temp.append(grid[i + 1][j])\n                }\n                if j != n - 1 {\n                    temp.append(grid[i][j + 1])\n                }\n                minVal = min(temp)\n            }\n        }\n        var result = [Int](repeating: 1, count: k)\n        if k % 2 == 0 {\n            result[k - 1] = minVal\n        }\n        grid[i][j] = minVal\n        return result\n    }\n}\n",
            "func tri(_ n: Int) -> [Int] {\n    if n == 0 {\n        return [1]\n    }\n    var seq = [1, 3]\n    for i in 2...n {\n        if i % 2 == 0 {\n            seq.append(i / 2 + 1)\n        } else {\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "func digits(_ n: Int) -> Int {\n    let digitsArray = String(n).components(separatedBy: \"\")\n    let oddDigits = digitsArray.filter { $0.isDigit && $0.isWhitespace == false }\n    let product = oddDigits.reduce(1) { $0 * $1 }\n    return product\n}\n",
            "func isNested(_ s: String) -> Bool {\n    var openIndexes = [Int]()\n    var closeIndexes = [Int]()\n    for (i, ch) in s.enumerated() {\n        if ch == \"{\" {\n            openIndexes.append(i)\n        } else if ch == \"}\" {\n            if let idx = openIndexes.last {\n                openIndexes.removeLast()\n                closeIndexes.append(idx)\n            }\n        }\n    }\n    var cnt = 0\n    var i = 0\n    let l = closeIndexes.count\n    for idx in openIndexes {\n        if i < l && idx < closeIndexes[i] {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\n",
            "func sumSquares(_ lst: [Double]) -> Int {\n    let squares = lst.map { pow(Int(ceil($0)), 2) }\n    return squares.reduce(0, +)\n}\n",
            "func checkIfLastCharIsALetter(_ txt: String) -> Bool {\n    guard !txt.isEmpty else {\n        return false\n    }\n    let last = txt.reversed().first?.unicodeScalar\n    return last != nil && (last!.isLetter || last!.\"isUppercase\" || last!.\"isLowercase\")\n}\n",
            "func canArrange(_ arr: [Int]) -> Int {\n    guard arr.count > 1 else {\n        return -1\n    }\n    var idx = [Int]()\n    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1] {\n            idx.append(i)\n        }\n    }\n    return idx.lastIndex(of: idx.sorted().first!)\n}\n",
            "func largestSmallestIntegers(_ lst: [Int]) -> [Int?] {\n    guard lst.count > 0 else {\n        return [nil, nil]\n    }\n    let neg = lst.filter { $0 < 0 }\n    let pos = lst.filter { $0 > 0 }\n    var maxNeg: Int?\n    if let negLst = neg {\n        maxNeg = negLst.max()\n    }\n    var minPos: Int?\n    if let posLst = pos {\n        minPos = posLst.min()\n    }\n    return [maxNeg, minPos]\n}\n",
            "func compareOne(_ a: Any, _ b: Any) -> Double? {\n    let a1 = a.isDouble ? a.doubleValue : anyToReal(a)\n    let b1 = b.isDouble ? b.doubleValue : anyToReal(b)\n    if a1 == b1 {\n        return nil\n    } else if a1 > b1 {\n        return a1\n    } else {\n        return b1\n    }\n}\n",
            "func isEqualToSumEven(_ n: Int) -> Bool {\n    return n % 2 == 0 && n >= 8\n}\n",
            "func specialFactorial(_ n: Int) -> Int {\n    var fact = 1\n    var result = 1\n    for i in 1...n {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "func fixSpaces(_ txt: String) -> String {\n    let regex = try! NSRegularExpression(pattern: \"[\\s]{3,}\")\n    return regex.stringByReplacingMatches(in: txt, options: [], range: NSRange(location: 0, length: txt.utf16.count), withTemplate: \"_\")\n}\n",
            "func fileNameCheck(_ fileName: String) -> String {\n    let lst = fileName.split(\".\")\n    if lst.count != 2 || lst[1] !== \"txt\" && lst[1] !== \"exe\" && lst[1] !== \"dll\" {\n        return \"No\"\n    }\n    if lst[0].isEmpty || !lst[0].hasPrefix(\"[a-zA-Z]\") || lst[0].count > 4 || lst[0].contains(\"[^[:alnum:]]\") {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "func sumSquares(_ lst: [Int]) -> Int {\n    var result = 0\n    for i in 0..<lst.count {\n        if i % 3 == 0 {\n            result += pow(lst[i], 2)\n        } else if i % 4 == 0 {\n            result += pow(lst[i], 3)\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    guard n >= 2 else { return false }\n    for i in 2..<floor(sqrt(dynType.asDouble(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc wordsInSentence(_ sentence: String) -> String {\n    let words = sentence.components(separatedBy: \" \")\n    return words.compactMap { word in\n        if isPrime(word.count) {\n            return word\n        }\n        return nil\n    }.joined(separator: \" \")\n}\n",
            "func simplify(_ x: String, _ n: String) -> Bool {\n    let xs = x.trimmingCharacters(in: .whitespacesAndNewlines).split(separator: \"/\")\n    let ns = n.trimmingCharacters(in: .whitespacesAndNewlines).split(separator: \"/\")\n    guard xs.count == 2 && ns.count == 2 else {\n        return false\n    }\n    let num = Int(xs[0]) * Int(ns[0])\n    let den = Int(xs[1]) * Int(ns[1])\n    return num % den == 0\n}\n",
            "func orderByPoints(_ nums: [Int]) -> [Int] {\n    let digits = Array(nums.map { Int($0) })\n    let sums = digits.map { digitsSum($0) }\n    return nums.sorted { sums[$0 - 1] < sums[$0 - 1] }\n}\nfunc digitsSum(_ n: Int) -> Int {\n    let s = String(n)\n    let digits = s.prefix(2)\n    if digits.isEmpty {\n        return 0\n    }\n    return Int(digits) + digitsSum(abs(n))\n}\n",
            "func specialFilter(_ nums: [Int]) -> Int {\n    let odds = \"13579\"\n    return nums.filter { n in\n        n > 10 && n % 2 == 1 && String(n).hasPrefix(odds)\n    }.count\n}\n",
            "func getMaxTriples(_ n: Int) -> Int {\n    var c = [0, 0, 0]\n    for i in 1...n {\n        let a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    let result = c[0] * c[1] * c[2]\n    var count = 0\n    for i in 1...n {\n        let a = i * i - i + 1\n        let b = 2 * i * i - 2 * i + 1\n        let c = 3 * i * i - 3 * i + 1\n        count += (c - b) * (c - a) * (c - 2 * i * i + 2 * i + 1) // 6\n    }\n    return result + count\n}\n",
            "func bf(_ planet1: String, _ planet2: String) -> [String] {\n    let names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if !names.contains(planet1) || !names.contains(planet2) {\n        return []\n    }\n    let l = names.firstIndex(of: planet1)!\n    let r = names.firstIndex(of: planet2)!\n    if l > r {\n        l, r = r, l\n    }\n    if l == r {\n        return []\n    }\n    return names[l..<r]\n}\n",
            "func sortedListSum(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for s in lst {\n        if s.count % 2 == 0 {\n            result.append(s)\n        }\n    }\n    return sorted(result, by: { $0.count < $1.count || ($0.count == $1.count && $0 < $1) })\n}\n",
            "func xOrY(_ n: Int, _ x: Int, _ y: Int) -> Int {\n    if n < 2 {\n        return y\n    }\n    for i in 2...Int(sqrt(n)) {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func doubleTheDifference(_ lst: [Double]) -> Int {\n    let oddSum = lst.filter { $0 >= 0 && $0 % 2 == 1 }.reduce(0) { $0 + $1 * $1 }\n    return oddSum\n}\n",
            "func compare(_ game: [Int], _ guess: [Int]) -> [Int] {\n    if game.count != guess.count {\n        fatalError(\"The game and guess must have the same length.\")\n    }\n    var result = [Int]()\n    for i in 0..<game.count {\n        result.append(abs(game[i] - guess[i]))\n    }\n    return result\n}\n",
            "func strongestExtension(_ className: String, _ extensions: [String]) -> String {\n    var maxS = Int.min\n    var maxExt = \"\"\n    for ext in extensions {\n        let upper = ext.filter({$0.isUppercase}).count\n        let lower = ext.filter({$0.isLowercase}).count\n        let s = upper - lower\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return \"\\(className).\\(maxExt)\"\n}\n",
            "func cycpatternCheck(_ a: String, _ b: String) -> Bool {\n    let aLength = a.count\n    let bLength = b.count\n    if aLength < bLength {\n        return false\n    }\n    for i in 0..<bLength {\n        let pattern = b.substring(offsetBy: aLength - i, length: i)\n        if (a as NSString).containsString(pattern) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func evenOddCount(_ num: Int) -> [Int] {\n    let ds = String(abs(num)).components(separatedBy: \"\")\n    let even = ds.filter { $0.isWhitespace == false && $0.unicodeScalarValue % 2 == 0 }.count\n    return [even, ds.count - even]\n}\n",
            "func intToMiniRoman(_ num: Int) -> String {\n    let romanNumerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    var result = \"\"\n    for i in values.indices {\n        var count = num / values[i]\n        num %= values[i]\n        while count > 0 {\n            result.append(romanNumerals[i])\n            count -= 1\n        }\n    }\n    return result\n}\n",
            "func rightAngleTriangle(_ a: Int, _ b: Int, _ c: Int) -> Bool {\n    let s = [a, b, c].sorted()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "func findMax(_ words: [String]) -> String {\n    var maxCount = 0\n    var maxWord = \"\"\n    for word in words {\n        let setWord = Set(word)\n        let count = word.count - setWord.count + 1\n        if count > maxCount {\n            maxCount = count\n            maxWord = word\n        }\n    }\n    return maxWord\n}\n",
            "func eat(_ num: Int, _ need: Int, _ remaining: Int) -> [Int] {\n    if need <= remaining {\n        return [num + need, remaining - need]\n    } else {\n        return [num + remaining, 0]\n    }\n}\n",
            "func doAlgebra(_ operators: [String], _ operands: [Int]) -> Int {\n    var ops = operators.replacingOccurrences(of: \"^\\*\", with: \"\", options: .regularExpression, range: nil).replacingOccurrences(of: \"^//\", with: \"\", options: .regularExpression, range: nil).sorted(by: { $0 < $1 })\n    var nums = operands\n    var i = ops.count - 1\n    while i >= 0 {\n        if ops[i] == \"*\" {\n            let product = nums[i] * nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            nums.insert(at: i, value: product)\n            i -= 1\n        } else if ops[i] == \"//\" {\n            let quotient = Int(Double(nums[i]) / Double(nums[i + 1]))\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            nums.insert(at: i, value: quotient)\n            i -= 1\n        }\n        i -= 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"+\" {\n            let sum = nums[i] + nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            nums.insert(at: i, value: sum)\n            i -= 1\n        } else if ops[i] == \"-\" {\n            let difference = nums[i] - nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            nums.insert(at: i, value: difference)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums.first!\n}\n",
            "func solve(_ s: String) -> String {\n    guard !s.isEmpty else {\n        return s\n    }\n    var result = [Character]()\n    for ch in s {\n        if ch.isWhitespace {\n            continue\n        }\n        if ch.isUppercase {\n            result.append(ch.lowercased())\n        } else if ch.isLowercase {\n            result.append(ch.uppercased())\n        } else {\n            result.append(ch)\n        }\n    }\n    return String(result)\n}\n",
            "func stringToMd5(_ txt: String) -> String? {\n    guard !txt.isEmpty else {\n        return nil\n    }\n    let md5_hash = MD5(txt.data(using: .utf8)!)\n    return String(md5_hash, encoding: .utf8)\n}\n",
            "func generateIntegers(_ a: Int, _ b: Int) -> [Int] {\n    let lower = max(2, min(a, b))\n    let upper = min(8, max(a, b))\n    return (lower...<upper).filter { $0 % 2 == 0 }\n}\n"
        ],
        "typescript": [
            "export const hasCloseElements = (numbers: Array<number>, threshold: number): boolean => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "const separateParenGroups = (parenString: string): Array<string> => {\n    const groups: Array<string> = [];\n    let currentGroup = \"\";\n    const parens = parenString.replace(/ /g, \"\");\n    for (const ch of parens) {\n        if (ch === \"(\") {\n            currentGroup += ch;\n        } else if (ch === \")\") {\n            currentGroup += ch;\n            if (!stk.length) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "export const truncateNumber = (num: number): number => {\n    return num - Math.floor(num);\n}\n",
            "export const belowZero = (operations: Array<number>): boolean => {\n    let balance = 0;\n    for (const op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const meanAbsoluteDeviation = (numbers: Array<number>): number => {\n    const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    const deviations = numbers.map(x => Math.abs(x - mean));\n    const deviation = deviations.reduce((a, b) => a + b, 0);\n    return deviation / numbers.length;\n}\n",
            "export const intersperse = (numbers: Array<number>, delimiter: number): Array<number> => {\n    const result: Array<number> = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i !== 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "export const parseNestedParens = (parenString: string): Array<number> => {\n    const result: Array<number> = [];\n    const parenGroups = parenString.split(\" \");\n    for (const group of parenGroups) {\n        let maxDepth = 0;\n        let depth = 0;\n        for (const ch of group) {\n            if (ch === \"(\") {\n                depth++;\n                maxDepth = Math.max(maxDepth, depth);\n            }\n            else if (ch === \")\") {\n                depth--;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}\n",
            "export const filterBySubstring = (strs: Array<string>, substring: string): Array<string> => {\n    return strs.filter(s => s.includes(substring));\n};\n",
            "export const sumProduct = (numbers: Array<number>): Array<number> => {\n    const nSum = numbers.reduce((acc, val) => acc + val, 0);\n    const nProduct = numbers.reduce((acc, val) => acc * val, 1);\n    return [nSum, nProduct];\n}\n",
            "export const rollingMax = (numbers: Array<number>): Array<number> => {\n    const maxSoFar = Array(numbers.length).fill(Number.NEGATIVE_INFINITY);\n    const result = Array(numbers.length);\n    maxSoFar[0] = numbers[0];\n    result[0] = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        maxSoFar[i] = Math.max(maxSoFar[i - 1], numbers[i]);\n        result[i] = maxSoFar[i];\n    }\n    return result;\n}\n",
            "export const isPalindrome = (s: string): boolean => {\n    const sTrimmed = s.trim().toLowerCase();\n    for (let i = 0; i < sTrimmed.length / 2; i++) {\n        if (sTrimmed[i] !== sTrimmed[sTrimmed.length - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const makePalindrome = (s: string): string => {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (isPalindrome(s.substring(0, i) + s.substring(i + 1, s.length))) {\n            return s.substring(0, i) + s.substring(i + 1, s.length) + s.substring(i, i) + s.substring(0, i);\n        }\n    }\n    return \"\";\n}\n",
            "export const stringXor = (a: string, b: string): string => {\n    const aChars = a.split(\"\");\n    const bChars = b.split(\"\");\n    if (aChars.length !== bChars.length) {\n        throw new Error(\"Strings must be of equal length\");\n    }\n    const result = [];\n    for (let i = 0; i < aChars.length; i++) {\n        const aChar = aChars[i];\n        const bChar = bChars[i];\n        result.push(aChar.localeCompare(bChar) !== 0 ? \"1\" : \"0\");\n    }\n    return result.join(\"\");\n}\n",
            "export const longest = (strs: Array<string>): string | null => {\n    if (strs.length === 0) {\n        return null;\n    }\n    let longest: string | null = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        if (strs[i].length > (longest ? longest.length : 0)) {\n            longest = strs[i];\n        }\n    }\n    return longest;\n}\n",
            "export const greatestCommonDivisor = (a: number, b: number): number => {\n    return b === 0 ? a : greatestCommonDivisor(b, a % b);\n}\n",
            "export const allPrefixes = (s: string): Array<string> => {\n    const prefixes: Array<string> = [];\n    for (let i = 0; i <= s.length; i++) {\n        prefixes.push(s.slice(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "export const stringSequence = (n: number): string => {\n    return (n + 1).toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1,\");\n}\n",
            "export const countDistinctCharacters = (s: string): number => {\n    return Array.from(new Set(s.toLowerCase())).length;\n}\n",
            "const durations = {\n    \"o\": 4,\n    \"o|\": 2,\n    \".|\": 1,\n};\nexport const parseMusic = (musicString: string): Array<number> => {\n    const notes = musicString.split(\" \");\n    return notes.map(note => durations[note]);\n}\n",
            "export const howManyTimes = (s: string, substring: string): number => {\n    let times = 0;\n    for (let i = 0; i < s.length - substring.length + 1; i++) {\n        if (s.slice(i, i + substring.length) === substring) {\n            times++;\n        }\n    }\n    return times;\n}\n",
            "const numDict: {[key: string]: number} = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9,\n};\nexport const sortNumbers = (numbers: string): string => {\n    const numList = numbers.split(\" \").filter(num => num in numDict);\n    numList.sort((a, b) => numDict[b] - numDict[a]);\n    return numList.join(\" \");\n}\n",
            "export const findClosestElements = (numbers: Array<number>): Array<number> => {\n    const pq = new PriorityQueue((a, b) => b - a);\n    for (const num of numbers) {\n        pq.enq(num);\n    }\n    const result: Array<number> = [];\n    while (pq.size() > 1) {\n        const num1 = pq.deq();\n        const num2 = pq.deq();\n        if (num2 - num1 < pq.peek()) {\n            pq.enq(num1);\n            pq.enq(num2);\n        } else {\n            result.push(num1, num2);\n        }\n    }\n    return result;\n}\n",
            "export const rescaleToUnit = (numbers: Array<number>): Array<number> => {\n    const minNum = Math.min(...numbers);\n    const maxNum = Math.max(...numbers);\n    if (minNum === maxNum) {\n        return new Array(numbers.length).fill(0);\n    }\n    const result: Array<number> = [];\n    for (let i = 0; i < numbers.length; i++) {\n        const num = numbers[i];\n        const scaled = (num - minNum) / (maxNum - minNum);\n        result.push(scaled);\n    }\n    return result;\n}\n",
            "export const filterIntegers = (values: Array<any>): Array<number> => {\n    return values.filter(x => typeof x === \"number\");\n};\n",
            "export const strLength = (s: string): number => s.length;\n",
            "export const largestDivisor = (n: number): number => {\n    let divisor = 1;\n    while (n % divisor !== 0) {\n        divisor++;\n    }\n    return n // divisor;\n}\n",
            "const isPrime = (n: number): boolean => {\n    if (n <= 1) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const factorize = (n: number): Array<number> => {\n    const factors: Array<number> = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0 && isPrime(i)) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors;\n}\n",
            "export const removeDuplicates = (numbers: Array<number>): Array<number> => {\n    const counts: Map<number, number> = new Map();\n    const res: Array<number> = [];\n    for (const num of numbers) {\n        counts.set(num, (counts.get(num) || 0) + 1);\n    }\n    for (const num of numbers) {\n        if (counts.get(num) === 1) {\n            res.push(num);\n        }\n    }\n    return res;\n}\n",
            "export const flipCase = (s: string): string => {\n    const result = s.split('').map((ch) => {\n        if (ch.isUpper() || ch.isLower()) {\n            return ch.toLowerCase() === ch ? ch.toUpperCase() : ch.toLowerCase();\n        }\n        return ch;\n    }).join('');\n    return result;\n}\n",
            "export const concatenate = (strs: Array<string>): string => {\n    return strs.join(\"\");\n};\n",
            "export const filterByPrefix = (strs: Array<string>, prefixStr: string): Array<string> => {\n    return strs.filter(s => s.startsWith(prefixStr));\n}\n",
            "export const getPositive = (l: Array<number>): Array<number> => {\n    return l.filter(num => num > 0);\n}\n",
            "export const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "const poly = (xs: Array<number>, x: number): number => {\n    let res = 0.0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n}\nconst findZero = (xs: Array<number>): number => {\n    let x1 = 1.0;\n    let x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        const mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "export const sortThird = (l: Array<number>): Array<number> => {\n    const sorted = l.slice(0, l.length // 3).sort((a, b) => a - b);\n    const result = new Array(l.length);\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            result[i] = sorted[i // 3];\n        } else {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}\n",
            "export const listUnique = (l: Array<number>): Array<number> => {\n    return Array.from(new Set(l.sort()));\n}\n",
            "export const maxElement = (l: Array<number>): number => {\n    if (l.length === 0) {\n        return 0;\n    }\n    return l.reduce((acc, curr) => Math.max(acc, curr));\n}\n",
            "export const fizzBuzz = (n: number): number => {\n    const cnt = n === 0 ? 0 : fizzBuzz(n - 1);\n    if (n % 11 === 0 || n % 13 === 0) {\n        cnt += String(n).split(\"7\").length - 1;\n    }\n    return cnt;\n}\n",
            "export const sortEven = (l: Array<number>): Array<number> => {\n    const sortedEven = Array.from(l).slice(0, l.length).sort((a, b) => b - a);\n    const result = new Array(l.length);\n    for (let i = 0; i < l.length; i++) {\n        if (i % 2 === 0) {\n            result[i] = sortedEven[i / 2];\n        } else {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}\n",
            "export const encodeCyclic = (s: string): string => {\n    const result: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (i + 2 >= s.length) {\n            result += s.substring(i);\n            break;\n        }\n        result += s.substring(i + 1, i + 3);\n        result += s.charAt(i);\n    }\n    return result;\n}\nexport const decodeCyclic = (s: string): string => {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "export const primeFib = (n: number): number => {\n    const pq = new PriorityQueue((a, b) => b - a);\n    let cnt = 0;\n    let f = [0, 1];\n    while (cnt < n) {\n        pq.enq(f[1]);\n        if (isPrime(f[1])) {\n            cnt++;\n        }\n        f = [f[1], f[0] + f[1]];\n    }\n    while (!pq.isEmpty()) {\n        const fib = pq.deq();\n        if (isPrime(fib)) {\n            return fib;\n        }\n    }\n    return -1;\n}\nfunction isPrime(n: number) -> boolean {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const triplesSumToZero = (l: Array<number>): boolean => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "export const carRaceCollision = (n: number): number => {\n    return Math.pow(n, 2);\n}\n",
            "export const incrList = (l: Array<number>): Array<number> => {\n    const result: Array<number> = [];\n    for (const i of l) {\n        result.push(i + 1);\n    }\n    return result;\n}\n",
            "export const pairsSumToZero = (l: Array<number>): boolean => {\n    const seen = new Set();\n    for (const num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "export const changeBase = (x: number, bas: number): string => {\n    const digits: Array<string> = [];\n    while (x > 0) {\n        digits.push(x % bas.toString());\n        x = Math.floor(x / bas);\n    }\n    return digits.reverse().join(\"\");\n}\n",
            "export const triangleArea = (a: number, h: number): number => {\n    return a * h / 2;\n}\n",
            "export const fib4 = (n: number): number => {\n    const fib = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2];\n        fib[0] = fib[1];\n        fib[1] = fib[2];\n        fib[2] = fib[3];\n        fib[3] = fib[0];\n    }\n    return fib[n % 4];\n}\n",
            "export const median = (l: Array<number>): number => {\n    const sortedL = l.sort((a, b) => a - b);\n    if (l.length % 2 !== 0) {\n        return sortedL[Math.floor(l.length / 2)];\n    } else {\n        const midIndex = Math.floor(l.length / 2);\n        return (sortedL[midIndex] + sortedL[midIndex - 1]) / 2;\n    }\n}\n",
            "export const isPalindrome = (txt: string): boolean => {\n    const cleanTxt = txt.trim().toLowerCase().replace(/[^\\w\\s]/gi, '');\n    return cleanTxt === cleanTxt.split('').reverse().join('');\n}\n",
            "export const modp = (n: number, p: number): number => {\n    let ret = 1;\n    for (let i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "export const encodeShift = (s: string): string => {\n    const result = s.split('').map((ch) => String.fromCharCode((((ch.charCodeAt(0) - 97) + 5) % 26) + 97));\n    return result.join('');\n}\nexport const decodeShift = (s: string): string => {\n    const result = s.split('').map((ch) => String.fromCharCode((((ch.charCodeAt(0) - 97) - 21) % 26) + 97));\n    return result.join('');\n}\n",
            "const removeVowels = (txt: string): string => {\n    const regExp = /[aeiouAEIOU]/gi;\n    return txt.replace(regExp, \"\");\n}\n",
            "export const belowThreshold = (l: Array<number>, t: number): boolean => {\n    return l.every(x => x < t);\n}\n",
            "export const add = (x: number, y: number): number => {\n    return x + y;\n};\n",
            "export const sameChars = (s0: string, s1: string): boolean => {\n    return Array.from(new Set(s0)).every((c) => s1.indexOf(c) > -1);\n}\n",
            "const memo: Map<number, number> = new Map();\nexport const fib = (n: number): number => {\n    if (memo.has(n)) {\n        return memo.get(n);\n    }\n    if (n <= 1) {\n        return n;\n    }\n    const result = fib(n - 1) + fib(n - 2);\n    memo.set(n, result);\n    return result;\n};\n",
            "export const correctBracketing = (brackets: string): boolean => {\n    let depth = 0;\n    for (let b of brackets) {\n        if (b === \"<\") {\n            depth++;\n        } else if (b === \">\") {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const monotonic = (l: Array<number>): boolean => {\n    const diff = l.reduce((acc, curr, idx) =>\n        idx === 0 ? [curr] :\n        [curr - l[idx - 1]].concat(acc),\n        []);\n    return diff.every((x) => (x <= 0 ? true : false));\n}\n",
            "export const common = (l1: Array<number>, l2: Array<number>): Array<number> => {\n    const s1 = new Set(l1);\n    const s2 = new Set(l2);\n    const result = s1.intersection(s2);\n    return Array.from(result);\n}\n",
            "export const largestPrimeFactor = (n: number): number => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i === 0) {\n            n = Math.floor(n / i);\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n",
            "export const sumToN = (n: number): number => {\n    return (n + 1) * (n + 2) / 2;\n}\n",
            "export const correctBracketing = (brackets: string): boolean => {\n    let depth = 0;\n    for (let b of brackets) {\n        if (b === \"(\") {\n            depth++;\n        } else if (b === \")\") {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const derivative = (xs: Array<number>): Array<number> => {\n    const result: Array<number> = [];\n    for (let i = 1; i < xs.length; i++) {\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n",
            "export const fibfib = (n: number): number => {\n    if (n <= 1) {\n        return 0;\n    }\n    let a = 0;\n    let b = 0;\n    let c = 1;\n    for (let i = 2; i <= n; i++) {\n        [a, b, c] = [b, c, a + b + c];\n    }\n    return c;\n}\n",
            "export const vowelsCount = (s: string): number => {\n    const vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase())) {\n            cnt++;\n        }\n    }\n    if (s.length > 0 && s.charAt(s.length - 1).toLowerCase() === \"y\") {\n        cnt++;\n    }\n    return cnt;\n}\n",
            "export const circularShift = (x: number, shift: number): string => {\n    const xString = String(x);\n    if (shift > xString.length) {\n        return xString.split('').reverse().join('');\n    } else {\n        const shiftChars = xString.slice(-shift);\n        return shiftChars.concat(xString.slice(0, -shift));\n    }\n}\n",
            "export const digitSum = (s: string): number => {\n    return Math.round((s.match(/[A-Z]/g) || []).map(c => parseInt(c, 36)).reduce((a, b) => a + b, 0));\n}\n",
            "export const fruitDistribution = (s: string, n: number): number => {\n    const words = s.split(' ');\n    const apples = parseInt(words[words.indexOf(\"apples\") - 1]);\n    const oranges = parseInt(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "export const pluck = (arr: Array<number>): Array<number> => {\n    const evens = arr.filter(n => n % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n    const minEven = Math.min(...evens);\n    const index = arr.indexOf(minEven);\n    return [minEven, index];\n}\n",
            "export const search = (lst: Array<number>): number => {\n    const freqs: {[key: number]: number} = {}\n    for (const n of lst) {\n        freqs[n] = (freqs[n] || 0) + 1;\n    }\n    const goodVals = [...Object.keys(freqs)];\n    goodVals.sort((a, b) => freqs[b] - freqs[a]);\n    return goodVals[0] !== undefined ? goodVals[0]: -1;\n}\n",
            "export const strangeSortList = (lst: Array<number>): Array<number> => {\n    const sl = lst.slice();\n    const result: Array<number> = [];\n    let left = 0;\n    let right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left++;\n        if (left <= right) {\n            result.push(sl[right]);\n            right--;\n        }\n    }\n    return result;\n}\n",
            "export const triangleArea = (a: number, b: number, c: number): number => {\n    const s = (a + b + c) / 2.0;\n    const area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return area < 0 ? -1 : area;\n}\n",
            "export const willItFly = (q: Array<number>, w: number): boolean => {\n    if (q.length === 0) {\n        return false;\n    }\n    const isPalin = all(q.slice(0, Math.floor(q.length / 2)).reverse() === q);\n    const total = q.reduce((acc, val) => acc + val, 0);\n    return isPalin && total <= w;\n}\n",
            "export const smallestChange = (arr: Array<number>): number => {\n    let ans = 0;\n    for (let i = 0; i < Math.floor(arr.length / 2); i++) {\n        if (arr[i] !== arr[arr.length - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;\n}\n",
            "export const totalMatch = (lst1: Array<string>, lst2: Array<string>): Array<string> => {\n    const cnt1 = lst1.reduce((acc, val) => acc + val.length, 0);\n    const cnt2 = lst2.reduce((acc, val) => acc + val.length, 0);\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n",
            "export const isMultiplyPrime = (a: number): boolean => {\n    if (a < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(a)); i++) {\n        if (isPrime(i)) {\n            let cnt = 0;\n            while (a % i === 0) {\n                cnt++;\n                a /= i;\n            }\n            if (cnt !== 3) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nfunction isPrime(n: number): boolean {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const isSimplePower = (x: number, n: number): boolean => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}\n",
            "export const isCube = (a: number): boolean => {\n    const root = Math.abs(a) ** (1 / 3);\n    const isPerfectCube = Number.isInteger(root ** 3);\n    return a >= 0 ? isPerfectCube : -isPerfectCube;\n}\n",
            "export const hexKey = (num: string): number => {\n    const numArray = num.split('').filter(n => ['2', '3', '5', '7', 'B', 'D'].includes(n));\n    return numArray.length;\n}\n",
            "export const decimalToBinary = (dec: number): string => {\n    const binary = dec.toString(2);\n    return `db${binary}db`;\n}\n",
            "export const isHappy = (s: string): boolean => {\n    const set = new Set<string>();\n    let num = s.replace(/[^0-9]/g, '');\n    while (num && num in set) {\n        num = isHappyHelper(num);\n    }\n    return num === '1';\n}\nfunction isHappyHelper(num: string): string {\n    let sum = 0;\n    for (let i = 0; i < num.length; i++) {\n        sum += Number(num.charAt(i)) ** 2;\n    }\n    return sum.toString();\n}\n",
            "export const numericalLetterGrade = (grades: Array<number>): Array<string> => {\n    const result: Array<string> = [];\n    for (const g of grades) {\n        if (g === 4) {\n            result.push(\"A+\");\n        } else if (g > 3.7) {\n            result.push(\"A\");\n        } else if (g > 3.3) {\n            result.push(\"A-\");\n        } else if (g > 3.0) {\n            result.push(\"B+\");\n        } else if (g > 2.7) {\n            result.push(\"B\");\n        } else if (g > 2.3) {\n            result.push(\"B-\");\n        } else if (g > 2.0) {\n            result.push(\"C+\");\n        } else if (g > 1.7) {\n            result.push(\"C\");\n        } else if (g > 1.3) {\n            result.push(\"C-\");\n        } else if (g > 1.0) {\n            result.push(\"D+\");\n        } else if (g > 0.7) {\n            result.push(\"D\");\n        } else if (g > 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n",
            "export const primeLength = (s: string): boolean => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(length)); i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const startsOneEnds = (n: number): number => {\n    if (n === 1) {\n        return 1;\n    }\n    return 2 * 9 * (10 ** (n - 2));\n}\n",
            "export const solve = (n: number): string => {\n    const digitsSum = (n + '').split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n    const binarySum = parseInt(digitsSum).toString(2);\n    return binarySum;\n}\n",
            "export const add = (lst: Array<number>): number => {\n    return lst.reduce((sum, x, index, lst) =>\n        index % 2 === 1 && x % 2 === 0 ? sum + x : sum, 0);\n};\n",
            "export const antiShuffle = (s: string): string => {\n    const words = s.split(\" \").map((word) => \"\".join(word.split(\"\").sort()));\n    return words.join(\" \");\n}\n",
            "export const getRow = (lst: Array<Array<number>>, x: number): Array<Array<number>> => {\n    const result: Array<Array<number>> = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n",
            "export const sortArray = (arr: Array<number>): Array<number> => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) {\n        return arr.sort((a, b) => b - a);\n    }\n    return arr.sort();\n}\n",
            "export const encrypt = (s: string): string => {\n    const result: string = \"\";\n    for (const ch of s) {\n        const shifted = (ch.charCodeAt(0) + 4).toString();\n        const encrypted = shifted.charAt(0).toUpperCase();\n        result += encrypted;\n    }\n    return result;\n}\n",
            "export const nextSmallest = (lst: Array<number>): number | null => {\n    const sl = Array.from(new Set(lst)).sort((a, b) => b - a);\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n};\n",
            "const isBored = (s: string): number => {\n    const sentences = s.split(/[.!?]\\s*/);\n    return sentences.filter(sentence => sentence.length >= 2 && sentence.substring(0, 2) === \"I \").length;\n};\n",
            "export const anyInt = (x: any, y: any, z: any): boolean => {\n    if (typeof x === \"number\" && typeof y === \"number\" && typeof z === \"number\") {\n        if (x + y === z || x + z === y || y + z === x) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "const encode = (message: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    const result = [];\n    for (let i = 0; i < message.length; i++) {\n        const ch = message[i];\n        if (ch.isUpper() || ch.isLower()) {\n            const ch1 = ch.toLowerCase();\n            if (vowels.includes(ch1)) {\n                ch1 = String.fromCharCode(Math.floor((Math.random() * 2) + 2) + ord(ch1));\n            }\n            result.push(ch1);\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n}\nfunction ord(s: string): number {\n    return s.charCodeAt(0);\n}\n",
            "export const skjkasdkd = (lst: Array<number>): number => {\n    const pq = new PriorityQueue((a, b) => b - a);\n    for (const n of lst) {\n        if (isPrime(n)) {\n            pq.enq(n);\n        }\n    }\n    const largest = pq.deq();\n    if (largest === 0) {\n        return 0;\n    }\n    return sumDigits(largest);\n}\nfunction isPrime(n: number): boolean {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction sumDigits(n: number): number {\n    const digits = n.toString().split(\"\");\n    return digits.reduce((acc, digit) => acc + parseInt(digit), 0);\n}\n",
            "export const checkDictCase = (d: Map<string, string>): boolean => {\n    if (d.length === 0) {\n        return false;\n    }\n    return d.keys().some(key => key.toLowerCase() === key.toUpperCase());\n}\n",
            "const countUpTo = (n: number): Array<number> => {\n    const isPrime = new Array(n + 1).fill(true);\n    isPrime[0] = false;\n    isPrime[1] = false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (isPrime[i]) {\n            for (let j = i * i; j <= n; j += i) {\n                isPrime[j] = false;\n            }\n        }\n    }\n    const result = [];\n    for (let i = 2; i <= n; i++) {\n        if (isPrime[i]) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n",
            "export const multiply = (a: number, b: number): number => {\n    const absA = Math.abs(a);\n    const absB = Math.abs(b);\n    return Math.abs(absA % 10) * Math.abs(absB % 10);\n}\n",
            "export const countUpper = (s: string): number => {\n    const vowels = \"AEIOU\";\n    return (s.match(/[A-Z]/g) || []).length - (s.match(/[a-z]/g) || []).length;\n}\n",
            "export const closestInteger = (value: string): number => {\n    const num = parseFloat(value);\n    if (num >= 0) {\n        return Math.round(num);\n    } else {\n        return Math.round(num - 0.5);\n    }\n}\n",
            "export const makeAPile = (n: number): Array<number> => {\n    return Array.from({ start: n, stop: n + 2 * n, step: 1 },\n        (i, acc) => n + 2 * acc\n    );\n}\n",
            "const wordsString = (s: string): Array<string> => {\n    const regex = /[, ]/;\n    const words = s.split(regex);\n    return [...words].filter(w => w.length > 0);\n}\n",
            "export const chooseNum = (x: number, y: number): number => {\n    if (y % 2 === 0) {\n        return y;\n    }\n    if (y - 1 === x) {\n        return -1;\n    }\n    return y - 1;\n}\n",
            "export const roundedAvg = (n: number, m: number): string | null => {\n    if (n > m) {\n        return null;\n    }\n    const rAvg = Math.round((m + n) / 2);\n    return rAvg.toString(2);\n}\n",
            "export const uniqueDigits = (x: Array<number>): Array<number> => {\n    const digits: Set<string> = new Set();\n    return [...x].filter((num: number) => {\n        const str = num.toString().split(\".\").pop();\n        const oddDigits = str.split(\"\").filter((d) => parseInt(d) % 2 !== 0);\n        return oddDigits.length === 0;\n    }).sort((a, b) => a - b).map(Number);\n}\n",
            "const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\nexport const byLength = (arr: Array<number>): Array<string> => {\n    const sortedArr = arr.filter(x => 1 <= x <= 9).sort((a, b) => b - a).map(x => digitNames[x - 1]);\n    return sortedArr;\n}\n",
            "export const f = (n: number): Array<number> => {\n    const nums = Array.from({ start: 1, stop: n + 1, step: 1 });\n    return [...Array.from({\n        start: 0,\n        stop: n,\n        step: 1,\n    }).map((i) => {\n        const subArray = Array.from({ start: 0, stop: i + 1, step: 1 });\n        return subArray.reduce((x, y) => x * y);\n    })].map((i) => {\n        return nums.slice(0, i + 1).reduce((x, y) => x + y);\n    });\n}\n",
            "export const evenOddPalindrome = (n: number): Array<number> => {\n    const cnt = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            cnt[i % 2]++;\n        }\n    }\n    return cnt;\n}\nconst isPalindrome = (num: number): boolean => {\n    const str = num.toString();\n    for (let i = 0; i < str.length / 2; i++) {\n        if (str.charAt(i) !== str.charAt(str.length - i - 1)) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const countNums = (arr: Array<number>): number => {\n    return arr.filter(n => digitsSum(n) > 0).length;\n}\nconst digitsSum = (n: number): number => {\n    const nString = String(n);\n    if (n >= 0) {\n        return nString.split(\"\").reduce((acc, curr) => acc + parseInt(curr), 0);\n    } else {\n        const firstTwo = nString.substring(0, 2);\n        return parseInt(firstTwo) * 2 + digitsSum(Math.abs(n));\n    }\n};\n",
            "export const moveOneBall = (arr: Array<number>): boolean => {\n    const sortedArr = [...arr].sort((a, b) => b - a);\n    for (let i = 0; i < arr.length; i++) {\n        if (\n            arr.slice(i).sort((a, b) => b - a) ===\n            sortedArr.slice(arr.length - i) &&\n            arr.slice(0, i).sort((a, b) => b - a) ===\n            sortedArr.slice(0, arr.length - i)\n        ) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const canExchange = (lst1: Array<number>, lst2: Array<number>): string => {\n    const oddCnt = lst1.filter((num) => num % 2 !== 0).length;\n    const evenCnt = lst2.filter((num) => num % 2 === 0).length;\n    return evenCnt >= oddCnt ? \"YES\" : \"NO\";\n}\n",
            "export const histogram = (test: string): Map<string, number> => {\n    const words = [w.trim() for w in test.split(\" \") if w.length > 0];\n    const freq: Map<string, number> = new Map();\n    for (const w of words) {\n        freq.set(w, (freq.get(w) || 0) + 1);\n    }\n    const maxFreq = Math.max(...freq.values());\n    return new Map(\n        [\n            [k, v]\n            for [k, v] in freq.entries()\n            if v === maxFreq\n        ]\n    );\n}\n",
            "export const reverseDelete = (s: string, c: string): Array<string> => {\n    const s1 = s.replace(/[a-zA-Z]/g, '').toLowerCase();\n    const isPalindrome = (s2: string): boolean => s2 === s2.reverse().toString();\n    return [s1, isPalindrome(s1) ? 'yes' : 'no'];\n}\n",
            "export const oddCount = (lst: Array<string>): Array<string> => {\n    const result: Array<string> = [];\n    for (const num of lst) {\n        const n = sum(num.split(\"\").map(c => parseInt(c, 16) % 2));\n        const rs = \"the number of odd elements in the string ${n} of the input.\";\n        result.push(rs);\n    }\n    return result;\n}\n",
            "export const minSubArraySum = (nums: Array<number>): number => {\n    let minSum = 0;\n    let curSum = 0;\n    for (let n of nums) {\n        curSum = Math.min(curSum + n, 0);\n        minSum = Math.min(curSum, minSum);\n    }\n    if (minSum === 0) {\n        minSum = Math.min(...nums);\n    }\n    return minSum;\n}\n",
            "export const maxFill = (grid: Array<Array<number>>, capacity: number): number => {\n    const pq = new PriorityQueue((a, b) => b - a);\n    let totalFills = 0;\n    for (const row of grid) {\n        for (const val of row) {\n            pq.enq(val);\n            if (pq.size() > capacity) {\n                pq.deq();\n            }\n        }\n        totalFills += Math.ceil(pq.size() / capacity);\n        pq.clear();\n    }\n    return totalFills;\n}\n",
            "export const sortArray = (arr: Array<number>): Array<number> => {\n    return arr.sort((a, b) => {\n        const countA = countOnes(a);\n        const countB = countOnes(b);\n        if (countA !== countB) {\n            return countB - countA;\n        }\n        return a - b;\n    });\n}\nconst countOnes = (num: number): number => {\n    return bin(num).match(/1/g).length;\n}\n",
            "const consonants = \"bcdfghjklmnpqrstvwxyz\";\nexport const selectWords = (s: string, n: number): Array<string> => {\n    const words = s.split(\" \").filter(w => w.length > 0);\n    return words.filter(w => w.toLowerCase().split('').every(c => consonants.indexOf(c) === -1));\n};\n",
            "export const getClosestVowel = (word: string): string => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.includes(word.charAt(i))) {\n            if (vowels.includes(word.charAt(i - 1))) {\n                continue;\n            }\n            if (vowels.includes(word.charAt(i + 1))) {\n                continue;\n            }\n            return word.charAt(i);\n        }\n    }\n    return \"\";\n}\n",
            "export const matchParens = (lst: Array<string>): string => {\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    if (check(s1) || check(s2)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\nfunction check(s: string): boolean {\n    let depth = 0;\n    for (let ch of s) {\n        if (ch === \"(\") {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "export const maximum = (arr: Array<number>, k: number): Array<number> => {\n    return arr.slice(arr.length - k);\n}\n",
            "export const solution = (lst: Array<number>): number => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum++;\n        }\n    }\n    return sum;\n}\n",
            "export const addElements = (arr: Array<number>, k: number): number => {\n    const kth = arr.slice(0, k);\n    return kth.filter(n => n.toString().length <= 2).reduce((a, b) => a + b, 0);\n};\n",
            "export const getOddCollatz = (n: number): Array<number> => {\n    const collatz: Array<number> = [1];\n    while (n > 1) {\n        if (n % 2 !== 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    return collatz.sort((a, b) => b - a);\n}\n",
            "export const validDate = (date: string): boolean => {\n    const [m, d, y] = date.split(\"-\");\n    if (y.length !== 4) {\n        return false;\n    }\n    const year = parseInt(y, 10);\n    if (year < 0 || year > 9999) {\n        return false;\n    }\n    const month = parseInt(m, 10);\n    if (month < 1 || month > 12) {\n        return false;\n    }\n    const day = parseInt(d, 10);\n    if (month === 2) {\n        if (day >= 1 && day <= 29) {\n            return true;\n        }\n        return false;\n    }\n    if (month === 4 || month === 6 || month === 9 || month === 11) {\n        if (day >= 1 && day <= 30) {\n            return true;\n        }\n        return false;\n    }\n    if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n        if (day >= 1 && day <= 31) {\n            return true;\n        }\n        return false;\n    }\n    return false;\n}\n",
            "export const splitWords = (txt: string): Array<string> => {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        const lowerCaseCount = [c for c in txt if c.islower() && Math.floor(ord(c) / 2) == Math.ceil(ord(c) / 2)].length;\n        return [lowerCaseCount.toString()];\n    }\n};\n",
            "export const isSorted = (lst: Array<number>): boolean => {\n    return lst.reduce((acc, curr) => acc && curr <= lst[acc], true);\n};\n",
            "export const intersection = (interval1: Array<number>, interval2: Array<number>): string => {\n    const pq = new PriorityQueue((a, b) => b - a);\n    for (const e of interval1) {\n        pq.enq(e);\n    }\n    for (const e of interval2) {\n        pq.enq(e);\n    }\n    const result: Array<number> = [];\n    while (!pq.isEmpty()) {\n        const top = pq.deq();\n        if (top === pq.peek()) {\n            pq.enq(top);\n            break;\n        }\n        result.push(top);\n    }\n    return result.length > 1 && isPrime(result[1] - result[0]) ? \"YES\" : \"NO\";\n}\nfunction isPrime(n: number) -> bool {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const prodSigns = (arr: Array<number>): number | null => {\n    if (arr.length === 0) {\n        return null;\n    }\n    if (arr.includes(0)) {\n        return 0;\n    }\n    const sign = arr.filter(n => n < 0).length % 2 === 0 ? 1 : -1;\n    return sign * arr.reduce((acc, n) => acc + Math.abs(n), 0);\n}\n",
            "export const minPath = (grid: Array<Array<number>>, k: number): Array<number> => {\n    const n = grid.length;\n    const minVal = n * n + 1;\n    const pq = new PriorityQueue((a, b) => b - a);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                pq.enq(minVal);\n            } else {\n                const temp = [];\n                if (i > 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j > 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i < n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j < n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                pq.enq(temp.sort((a, b) => b - a)[0]);\n            }\n        }\n    }\n    const result: Array<number> = [];\n    for (let i = 0; i < k; i++) {\n        result.push(i % 2 == 0 ? 1 : pq.deq());\n    }\n    return result;\n}\n",
            "export const tri = (n: number): Array<number> => {\n    if (n === 0) {\n        return [1];\n    }\n    const seq = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "export const digits = (n: number): number => {\n    const s = String(n);\n    const odds = s.match(/\\d+/g) || [];\n    return odds.length > 0 ? reduce((x, y) => Number(y) * x, 1, odds.reduce(lambda x, y: Number(y), 1)) : 0;\n}\n",
            "export const isNested = (s: string): boolean => {\n    const openIdx: number[] = [];\n    const closeIdx: number[] = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === '[') {\n            openIdx.push(i);\n        } else if (s[i] === ']') {\n            closeIdx.push(i);\n        }\n    }\n    closeIdx.sort((a, b) => b - a);\n    let cnt = 0;\n    let i = 0;\n    let l = closeIdx.length;\n    for (const idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt++;\n            i++;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "export const sumSquares = (lst: Array<number>): number => {\n    return lst.map(n => Math.pow(Math.ceil(n), 2)).reduce((a, b) => a + b, 0);\n};\n",
            "export const checkIfLastCharIsALetter = (txt: string): boolean => {\n    if (txt.length === 0) {\n        return false;\n    }\n    const last = txt.split(' ')[-1];\n    return last.length == 1 && last.charAt(0).isAlpha();\n};\n",
            "export const canArrange = (arr: Array<number>): number => {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    const idx = arr.map((i, j) => j - 1).filter((i) => i < 0);\n    return Math.max(...idx, 0);\n}\n",
            "export const largestSmallestIntegers = (lst: Array<number>): Array<number | null> => {\n    const neg = lst.filter(i => i < 0);\n    const pos = lst.filter(i => i > 0);\n    const maxNeg = max(neg) || null;\n    const minPos = min(pos) || null;\n    return [maxNeg, minPos];\n};\n",
            "export const compareOne = (a: any, b: any): number | null => {\n    const a1 = Number(anyToReal(a));\n    const b1 = Number(anyToReal(b));\n    if (isNaN(a1) || isNaN(b1)) {\n        return null;\n    }\n    if (a1 === b1) {\n        return null;\n    }\n    if (a1 > b1) {\n        return a1;\n    }\n    return b1;\n}\nconst anyToReal = (o: any) => {\n    if (typeof o === \"string\") {\n        return o.replace(/[^0-9\\.]/g, \"\");\n    }\n    if (typeof o === \"number\") {\n        return o;\n    }\n    if (typeof o === \"boolean\") {\n        return o ? 1 : 0;\n    }\n    throw new Error(\"Type Error\");\n};\n",
            "export const isEqualToSumEven = (n: number): boolean => {\n    return n % 2 === 0 && n >= 8;\n}\n",
            "export const specialFactorial = (n: number): number => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "export const fixSpaces = (txt: string): string => {\n    return re.replace(/\\s{3,}/, \"_\", txt).replace(/\\s/, \"_\");\n}\n",
            "export const fileNameCheck = (fileName: string): string => {\n    const suf = [\"txt\", \"exe\", \"dll\"];\n    const lst = fileName.split(\".\");\n    if (lst.length !== 2 || !suf.includes(lst[1]) || lst[0].length === 0 || !/^[a-zA-Z][\\w\\d]{0,3}$/.test(lst[0])) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "export const sumSquares = (lst: Array<number>): number => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0) {\n            result += Math.pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "const isPrime = (n: number): boolean => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nexport const wordsInSentence = (sentence: string): string => {\n    const words = sentence.split(\" \");\n    return words.filter((w) => isPrime(w.length)).join(\" \");\n}\n",
            "export const simplify = (x: string, n: string): boolean => {\n    const [xNum, xDen] = x.split(\"/\");\n    const [nNum, nDen] = n.split(\"/\");\n    const num = parseInt(xNum, 10) * parseInt(nNum, 10);\n    const den = parseInt(xDen, 10) * parseInt(nDen, 10);\n    return num % den === 0;\n}\n",
            "export const orderByPoints = (nums: Array<number>): Array<number> => {\n    return nums.sort((a, b) => {\n        const sumA = digitsSum(a);\n        const sumB = digitsSum(b);\n        return sumA - sumB;\n    });\n}\nconst digitsSum = (n: number) => {\n    const nString = n.toString();\n    if (n >= 0) {\n        return nString.split(\"\").sort((a, b) => a - b).reduce((acc, curr) => acc + parseInt(curr), 0);\n    } else {\n        const firstTwo = nString.substring(0, 2);\n        const rest = nString.substring(2);\n        return parseInt(firstTwo) * 2 + digitsSum(parseInt(rest));\n    }\n};\n",
            "export const specialFilter = (nums: Array<number>): number => {\n    const odds = \"13579\";\n    return nums.filter(n => n > 10 && n % 2 === 1 && odds.includes(String(n)[0])).length;\n}\n",
            "export const getMaxTriples = (n: number): number => {\n    const c = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        const a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    const a = c[0] * c[1] * c[2];\n    const b = c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2);\n    return a + b * 2;\n}\n",
            "const names: Array<string> = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\nexport const bf = (planet1: string, planet2: string): Array<string> => {\n    if (!names.includes(planet1) || !names.includes(planet2)) {\n        return [];\n    }\n    const l = names.indexOf(planet1);\n    const r = names.indexOf(planet2);\n    if (l > r) {\n        [l, r] = [r, l];\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n};\n",
            "export const sortedListSum = (lst: Array<string>): Array<string> => {\n    const result = [...lst].filter(s => s.length % 2 === 0);\n    return result.sort((a, b) => {\n        if (a.length === b.length) {\n            return a.localeCompare(b);\n        }\n        return b.length - a.length;\n    });\n}\n",
            "export const xOrY = (n: number, x: number, y: number): number => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "export const doubleTheDifference = (lst: Array<number>): number => {\n    const result = lst.filter(n => n >= 0 && n % 2 === 1).reduce((acc: number, curr: number) => acc + curr * curr, 0);\n    return result;\n}\n",
            "export const compare = (game: Array<number>, guess: Array<number>) => {\n    return game.map((x, i) => Math.abs(x - guess[i]));\n}\n",
            "export const strongestExtension = (className: string, extensions: Array<string>): string => {\n    let maxS = Number.MIN_VALUE;\n    let maxExt = \"\";\n    for (const ext of extensions) {\n        let s = 0;\n        for (const c of ext) {\n            if (c.isUpperCase()) {\n                s++;\n            } else if (c.isLowerCase()) {\n                s--;\n            }\n        }\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return `${className}.${maxExt}`;\n}\n",
            "export const cycpatternCheck = (a: string, b: string): boolean => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = b.length; i < a.length; i++) {\n        if (a.slice(i, b.length + i) + b + a.slice(0, i) in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const evenOddCount = (num: number): Array<number> => {\n    const ds = Math.abs(num).toString().split('').filter((d) => parseInt(d) % 2 === 0);\n    const even = ds.length - ds.filter((d) => parseInt(d) % 2 !== 0).length;\n    return [even, ds.length - even];\n};\n",
            "const intToRomanMap = [\n    [\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"],\n    [\"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"],\n    [\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"],\n    [\"M\", \"MM\", \"MMM\"]\n];\nexport const intToMiniRoman = (num: number): string => {\n    if (num < 1 || num > 3999) {\n        throw new Error(\"Number out of range\");\n    }\n    let result = \"\";\n    for (let i = 3; i >= 0; i--) {\n        const n = Math.floor(num / Math.pow(10, i));\n        if (n > 0) {\n            const roman = intToRomanMap[i][n];\n            if (roman) {\n                result = roman + result;\n            }\n            num %= Math.pow(10, i);\n        }\n    }\n    return result;\n}\n",
            "export const rightAngleTriangle = (a: number, b: number, c: number): boolean => {\n    const s = [a, b, c].sort((a, b) => a - b);\n    const d = Math.sqrt(s[0] * s[0] + s[1] * s[1]);\n    return s[2] * s[2] == d * d;\n};\n",
            "export const findMax = (words: Array<string>): string => {\n    let maxCnt = 0;\n    let maxW = \"\";\n    for (const w of words) {\n        const cnt = w.length;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt === maxCnt) {\n            maxW = min(maxW, w);\n        }\n    }\n    return maxW;\n}\n",
            "export const eat = (num: number, need: number, remaining: number): Array<number> => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n};\n",
            "export const doAlgebra = (operators: Array<string>, operands: Array<number>) => number {\n    let ops: Array<string> = operators.slice().reverse();\n    let nums: Array<number> = operands.slice();\n    let i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] === \"^\") {\n            nums[i] = Math.pow(nums[i], nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n        }\n        i--;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n        }\n        else if (ops[i] === \"/\") {\n            nums[i] = Math.floor(nums[i] / nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n        }\n        else if (ops[i] === \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n        }\n        i++;\n    }\n    return nums[0];\n}\n",
            "export const solve = (s: string): string => {\n    if (!s.includes(RegExp(\"[a-zA-Z]\"))) {\n        return s.split(\"\").reverse().join(\"\");\n    }\n    const result: string = \"\";\n    for (const ch of s) {\n        if (ch.isLowerCase()) {\n            result += ch.toUpperCase();\n        } else if (ch.isUpperCase()) {\n            result += ch.toLowerCase();\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}\n",
            "export const stringToMd5 = (txt: string): string | null => {\n    if (!txt) {\n        return null;\n    }\n    const md5Hash = hashlib.md5() as any;\n    const txtBytes = txt.toUint8Array(new Uint8Array(txt.length));\n    md5Hash.update(txtBytes);\n    const md5Encoded = md5Hash.hexdigest();\n    return md5Encoded;\n}\n",
            "export const generateIntegers = (a: number, b: number): Array<number> => {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n    const result: Array<number> = [];\n    for (let i = lower; i <= upper; i++) {\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n"
        ]
    },
    "ruby": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split(')'):\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n            elif ch == ')':\n                depth -= 1\n        result.append(depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = 1\n    for e in numbers:\n        n_product *= e\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def make_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return s\n    for i in range(len(s)):\n        if s[i:] == s[i:][::-1]:\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(['1' if a[i] != b[i] else '0' for i in range(len(a))])\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[0:i+1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(map(str, range(n)))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \")\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i + len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = numbers.split(\" \")\n    num_list = [n for n in num_list if n in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [num - min_num for num in numbers] / (max_num - min_num)\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n+1):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if ch.isalpha():\n            flipped += ch.swapcase()\n        else:\n            flipped += ch\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i, xi in enumerate(xs):\n        res += xi * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l[i::3] for i in range(3))\n    return [sorted_third[i // 3][i % 3] for i in range(9)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    if len(l) == 0:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += i.count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    evens = [x for i, x in enumerate(l) if i % 2 == 0]\n    evens.sort()\n    return [evens[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i+1:i+3]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(x % bas)\n        x //= bas\n    return \"\".join(str(d) for d in digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[n]\n",
            "def median(l: List[float]) -> float:\n    l.sort()\n    if len(l) % 2 != 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        result += chr((ord(ch) - 97 + 5) % 26 + 97)\n    return result\ndef decode_shift(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        result += chr((ord(ch) - 97 + 21) % 26 + 97)\n    return result\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in txt if char not in vowels])\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i] - l[i - 1] for i in range(1, len(l))]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n /= i\n    n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [i * j for i, j in zip(xs, range(len(xs)))]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    for _ in range(n - 2):\n        a, b, c = b, c, a + b + c\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isalpha())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    evens = [n for n in arr if n % 2 == 0]\n    if len(evens) == 0:\n        return []\n    return [min(evens), arr.index(min(evens))]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    lst.sort()\n    result = []\n    left, right = 0, len(lst) - 1\n    while left <= right:\n        result.append(lst[left])\n        left += 1\n        if left <= right:\n            result.append(lst[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[-i - 1] for i in range(len(q) // 2))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n            if cnt == 3:\n                return True\n            if cnt > 3:\n                return False\n    return False\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = a ** (1.0 / 3.0)\n    return root.is_integer() and (root * root * root) == a\n",
            "def hex_key(num: str) -> int:\n    return num.count(\"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)[2:]\n    return f\"db{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * (10 ** (n - 2))\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(map(int, str(n)))\n    return hex(digits_sum)[2:].upper()\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and not i % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    for i in range(len(words)):\n        words[i] = \"\".join(sorted(words[i]))\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                coords.append([i, j])\n    coords.sort(key=lambda a: [a[0], -a[1]])\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = list(set(lst))\n    sl.sort()\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split('.!? ')\n    return sum(1 for sentence in sentences if len(sentence) >= 2 and sentence[:2] == \"I \")\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower()\n            if vowels.find(ch1) != -1:\n                ch1 = ch1.upper()\n                ch1 = chr((ord(ch1) - 97 + 2) % 26 + 97)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = str(max(primes))\n    return sum(int(c) for c in largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return all(k.isupper() for k in d.keys()) or all(k.islower() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n + 1):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return abs(a % 10) * abs(b % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return [c for c in s.upper() if vowels.find(c) % 2 == 0].length\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(0, n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split()\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y - 1 if y != x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = round((n + m) / 2)\n    return format(r_avg, '0.2f')\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return sorted(set(n for n in x if all_digits_odd(str(n))))\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(list(filter(lambda x: 1 <= x and x <= 9, arr)))\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 != 0:\n            result.append(nums[:i].sum)\n        else:\n            result.append(nums[:i].reduce(lambda x, y: x * y))\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    if n >= 0:\n        return sum(map(int, str(n)))\n    else:\n        return (n * 2 + digits_sum(abs(n)))\ndef count_nums(arr: List[int]) -> int:\n    return sum(1 for n in arr if digits_sum(n) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr)-i] and arr[:i] == sorted_arr[len(arr)-i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = lst1.count(lambda n: n % 2 != 0)\n    even_cnt = lst2.count(lambda n: n % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        if w.strip() != \"\":\n            freq[w] = freq.get(w, 0) + 1\n    max_freq = max(freq.values())\n    result = {}\n    for k, v in freq.items():\n        if v == max_freq:\n            result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join([c for c in s if c not in c])\n    return [s1, \"yes\" if s1 == s1[::-1] else \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for c in num if ord(c) % 2 == 1)\n        rs = \"the number of odd elements in the string {} of the input.\"\n        result.append(rs.format(n))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum([x // capacity for row in grid for x in row])\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count(\"1\")\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda n: [count_ones(n), n])\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if w and w.count(w.lower().translate({ord(c): None for c in consonants})) == n]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels and not word[i - 1] in vowels and not word[i + 1] in vowels:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        elif ch == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    if check(s1) or check(s2):\n        return \"Yes\"\n    else:\n        return \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return arr[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum([x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 1])\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != \"-\" or date[5] != \"-\":\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if [1, 3, 5, 7, 8, 10, 12].count(m) > 0 and d >= 1 and d <= 31:\n        return True\n    if [4, 6, 9, 11].count(m) > 0 and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(sum([1 for c in txt if c.lower() == c and ord(c) % 2 == 0]))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not all(lst[i] <= lst[i+1] for i in range(len(lst)-1)):\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    return max(freq.values(), default=0) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = arr.count(n for n in arr if n < 0) % 2 == 1\n    return sign * sum(abs(n) for n in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 and 1 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n):\n        if i % 2 == 0:\n            seq.append(int(i / 2 + 1))\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + int((i + 3) / 2))\n    return seq\n",
            "def digits(n: int) -> int:\n    if n < 0:\n        n = abs(n)\n    if n == 0:\n        return 0\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    odds = [d for d in digits if d % 2 == 1]\n    return 1 if len(odds) == 0 else reduce(lambda x, y: x * y, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum([n.ceil().pow(2) for n in lst])\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[len(txt) - 1]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if len(neg) > 0 else None\n    min_pos = min(pos) if len(pos) > 0 else None\n    return [max_neg, min_pos]\n",
            "def compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = [1] * (n + 1)\n    result = 1\n    for i in range(1, n + 1):\n        fact[i] = fact[i - 1] * i\n        result *= fact[i]\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\" \", \"_\").replace(\"__\", \"-\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or lst[0].count(\".\") > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join([word for word in words if is_prime(len(word))])\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return (int(n_str[0]) * 2 + digits_sum(abs(n)))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(1 for n in nums if n > 10 and n % 2 == 1 and odds.startswith(str(n)[0]))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    result.sort(key=lambda s: (len(s), s))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    positive_odds = [n for n in lst if n >= 0 and n % 2 == 1]\n    return sum([n * n for n in positive_odds])\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -float('inf')\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[0:i]) != -1:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = ds.count('0') + ds.count('2') + ds.count('4') + ds.count('6') + ds.count('8')\n    odd = ds.length - even\n    return [even, odd]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    values.reverse.each do |value|\n        count = num / value\n        num -= value * count\n        res += numerals[values.index(value)] * count\n    end\n    res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    if a + b <= c or b + c <= a or a + c <= b:\n        return False\n    return a * a + b * b == c * c or b * b + c * c == a * a or a * a + c * c == b * b\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    while \"**\" in ops:\n        index = ops.index(\"**\")\n        nums[index] = nums[index] ** nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    while \"*\" in ops or \"//\" in ops:\n        if \"*\" in ops:\n            index = ops.index(\"*\")\n            nums[index] = nums[index] * nums[index + 1]\n            nums.pop(index + 1)\n            ops.pop(index)\n        if \"//\" in ops:\n            index = ops.index(\"//\")\n            nums[index] = nums[index] / nums[index + 1]\n            nums.pop(index + 1)\n            ops.pop(index)\n    while \"+\" in ops or \"-\" in ops:\n        if \"+\" in ops:\n            index = ops.index(\"+\")\n            nums[index] = nums[index] + nums[index + 1]\n            nums.pop(index + 1)\n            ops.pop(index)\n        if \"-\" in ops:\n            index = ops.index(\"-\")\n            nums[index] = nums[index] - nums[index + 1]\n            nums.pop(index + 1)\n            ops.pop(index)\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            result += ch\n        elif ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = md5(txt.encode())\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max([2, min([a, b])])\n    upper = min([8, max([a, b])])\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n"
        ]
    },
    "rust": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups: List[str] = []\n    stk: List[str] = []\n    current_group: str = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num // 1\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.extend([delimiter, numbers[i]])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_group = paren_string.split()\n    for group in paren_group:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = reduce(lambda x, y: x * y, numbers)\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(\n        str(int(x) ^ int(y)) for (x, y) in zip(a, b)\n    )\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if len(strs) == 0:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return list(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = defaultdict(lambda: 0)\n    durations.update({\"o\": 4, \"o|\": 2, \".|\": 1})\n    notes = music_string.split()\n    parsed_notes = [durations[note] for note in notes]\n    return parsed_notes\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict: DefaultDict[str, int] = defaultdict(int)\n    num_dict.update({\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9})\n    num_list: Deque[str] = deque(numbers.split(\" \"))\n    num_list = deque(sorted(num_list, key=lambda x: num_dict[x]))\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = SortedList(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [((num - min_num) / (max_num - min_num)) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n+1):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    num = n\n    while divisor <= num:\n        if num % divisor == 0:\n            factors.append(divisor)\n            num /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = defaultdict(int)\n    for num in numbers:\n        counts[num] += 1\n    res = [num for num in numbers if counts[num] == 1]\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * x ** i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0.0:\n        x1 *= 2.0\n        x2 *= 2.0\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2.0\n        if poly(xs, mid) == 0.0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0.0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2.0\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = [l[i] for i in range(len(l)) if i % 3 == 0]\n    sorted_third.sort()\n    return [sorted_third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    result = l.copy()\n    result.sort()\n    i = 0\n    while i < len(result) - 1:\n        if result[i] == result[i+1]:\n            result.pop(i)\n        else:\n            i += 1\n    return result\n",
            "def max_element(l: List[int]) -> int:\n    if len(l) == 0:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += i.count('7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = [x for i, x in enumerate(l) if i % 2 == 0]\n    sorted_even.sort()\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = defaultdict(bool)\n    for num in l:\n        if seen[-num]:\n            return True\n        seen[num] = True\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits)\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(sum(fib[-4:]))\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = l.copy()\n    sl.sort()\n    if len(l) % 2 != 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2.0\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for _ in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    return ''.join([chr(((ord(c) - 97 + 5) % 26) + 97) for c in s])\ndef decode_shift(s: str) -> str:\n    return ''.join([chr(((ord(c) - 97 + 21) % 26) + 97) for c in s])\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return ''.join([c for c in txt if c not in vowels])\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [y - x for x, y in zip(l, l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    result = []\n    for x in l1:\n        if x in l2:\n            if x not in result:\n                result.append(x)\n    result.sort()\n    return result\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i <= sqrt(n):\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n+1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs)][1:]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    n -= 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i:i+2].lower() in vowels or i == len(s) - 1 and s[i:i+2].lower() == \"y\":\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(c.isdigit() for c in s)\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = defaultdict(int)\n    for n in lst:\n        freqs[n] += 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst.copy()\n    sl.sort()\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = True\n    for i in range(len(q) // 2):\n        if q[i] != q[len(q) - i - 1]:\n            is_palin = False\n            break\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    if cnt1 <= cnt2:\n        return lst1.copy()\n    else:\n        return lst2.copy()\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    a = a\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    return abs(a) ** (1/3) % 1 == 0\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    return f\"db{bin(dec)[2:]}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * (10 ** (n - 2))\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(d) for d in str(n))\n    return format(digits_sum, 'b')\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    words = [sorted(word) for word in words]\n    return \" \".join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda x: [x[0], x[1]])\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    result = arr.copy()\n    if not result:\n        return result\n    if (result[0] + result[-1]) % 2 == 0:\n        result.sort(reverse=True)\n    else:\n        result.sort()\n    return result\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            result += chr(shifted - 26)\n        else:\n            result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = lst.copy()\n    sl.sort()\n    while len(set(sl)) < len(sl):\n        sl.remove(sl[0])\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences: List[str] = s.split('. ')\n    count = 0\n    for sentence in sentences:\n        if len(sentence) >= 2 and sentence[:2] == \"I \":\n            count += 1\n    return count\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower()\n            if vowels.find(ch1) != -1:\n                ch1 = ch1.upper()\n                ch1 = chr(ord(ch1) + 2)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = str(max(primes))\n    return sum(int(c) for c in largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    return all(k.islower() for k in d.keys()) or all(k.isupper() for k in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n + 1):\n        is_prime = True\n        for p in primes:\n            if num % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (a % 10) * (b % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return re.split(r\"[, ]+\", s)\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if y != x:\n        return y - 1\n    return -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = round((n + m) / 2)\n    return format(r_avg, 'b')\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(int(digit) % 2 != 0 for digit in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted({num for num in x if all_digits_odd(str(num))})\n",
            "digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\ndef by_length(arr: List[int]) -> List[str]:\n    sorted_arr = [x for x in arr if 1 <= x and x <= 9]\n    sorted_arr.sort()\n    sorted_arr.reverse()\n    return [digit_names[(x - 1) if 1 <= x and x <= 9 else -1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = [i for i in range(1, n+1)]\n    result = []\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            result.append(sum(nums[:i]))\n        else:\n            result.append(1)\n            for j in range(i):\n                result[i-1] *= nums[j]\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[(i % 2) - 1] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    if n >= 0:\n        return sum(int(d) for d in str(n))\n    else:\n        return (int(str(n)[0:2]) * 2 + digits_sum(abs(n)))\ndef count_nums(arr: List[int]) -> int:\n    return sum(1 for n in arr if digits_sum(n) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = arr.copy()\n    sorted_arr.sort()\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[len(arr) - i:]:\n            return True\n        if arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for n in lst1 if n % 2 != 0)\n    even_cnt = sum(1 for n in lst2 if n % 2 == 0)\n    if even_cnt >= odd_cnt:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = defaultdict(int)\n    words = [w for w in test.split(\" \") if w]\n    for w in words:\n        freq[w] += 1\n    if freq:\n        max_freq = max(freq.values())\n        return {k: v for k, v in freq.items() if v == max_freq}\n    return {}\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join([c for c in s if c not in c])\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for d in num if int(d) % 2 == 1)\n        rs = \"the number of odd elements in the string \" + str(n) + \" of the input.\"\n        result.append(rs)\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    total_fill = 0\n    for row in grid:\n        total_fill += sum(x // capacity for x in row)\n    return total_fill\n",
            "def count_ones(num: int) -> int:\n    return list(str(bin(num))[2:].replace('0', '').count('1') for _ in range(2))[0]\ndef sort_array(arr: List[int]) -> List[int]:\n    arr = arr.copy()\n    arr.sort(key=lambda x: (count_ones(x), x))\n    return arr\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    words = [w for w in words if w != \"\"]\n    result = []\n    for w in words:\n        if sum([1 for c in w if c.lower() in consonants[:n]]) == n:\n            result.append(w)\n    return result\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(1, len(word) - 1)[::-1]:\n        if vowels.find(word[i]) != -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        elif ch == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = f\"{lst[0]}{lst[1]}\"\n    s2 = f\"{lst[1]}{lst[0]}\"\n    if check(s1) or check(s2):\n        return \"Yes\"\n    return \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    result = arr.copy()\n    result.sort()\n    return result[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    n = n\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    collatz.sort()\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if [1, 3, 5, 7, 8, 10, 12].count(m) != 0 and d >= 1 and d <= 31:\n        return True\n    if [4, 6, 9, 11].count(m) != 0 and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [c for c in txt if c.islower() and ord(c) % 2 == 0]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    freq = defaultdict(int)\n    for i in lst:\n        freq[i] += 1\n    return all(freq[i] <= 2 for i in freq.keys())\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(-1) % 2 == 1 else 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = (n * n + 1)\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds: List[int] = [int(d) for d in str(n) if int(d) % 2 == 1]\n    if len(odds) == 0:\n        return 0\n    else:\n        return int(odds[0]) * int(odds[1]) * int(odds[2]) * ... * int(odds[-1])\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for (i, ch) in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum([int(x**2) for x in lst])\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if len(txt) == 0:\n        return False\n    last = txt[len(txt) - txt[::-1].find(\" \"):]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return o.replace(\",\", \".\")\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    else:\n        raise TypeError(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = [1]\n    result = 1\n    for i in range(1, n + 1):\n        fact.append(fact[i - 1] * i)\n    for i in range(n):\n        result *= fact[n - i]\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst: List[str] = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not any(c.isalpha() for c in lst[0]) or sum(c.isdigit() for c in lst[0]) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words: List[str] = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return int(n_str[0:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    nums_sorted = sorted(nums, key=lambda x: digits_sum(x))\n    return nums_sorted\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(1 for n in nums if n > 10 and n % 2 == 1 and odds.startswith(str(n)))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[(a % 3) % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        (l, r) = (r, l)\n    if l == r:\n        return []\n    return names[l+1:r+1]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    result.sort(key=lambda x: len(x), reverse=True)\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n * n for n in lst if n >= 0.0 and n % 2.0 == 1.0)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = abs(num)\n    even = sum(1 for c in str(ds) if int(c) % 2 == 0)\n    return [even, len(str(ds)) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = [a, b, c]\n    s.sort()\n    return s[0] ** 2 + s[1] ** 2 == s[2] ** 2\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    while \"**\" in ops:\n        index = ops.index(\"**\")\n        nums[index] = nums[index] ** nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = \"\"\n    for c in s:\n        if not c.isalpha():\n            result += c\n        elif c.isupper():\n            result += c.lower()\n        else:\n            result += c.upper()\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = md5(txt.encode()).hexdigest()\n    return md5_hash\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return list(range(lower, upper+1))[::2]\n"
        ]
    },
    "scala": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    stk = []\n    for ch in parens:\n        if ch == '(':\n            stk.append(ch)\n            current_group += ch\n        elif ch == ')':\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - num.floor()\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split(\" \")\n    paren_groups = list(filter(lambda x: len(x) > 0, paren_groups))\n    for paren_group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in paren_group:\n            if ch == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = reduce((lambda x, y: x * y), numbers)\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join([\"0\" if x == y else \"1\" for x, y in zip(a, b)])\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    result = []\n    for i in range(1, len(s) + 1):\n        result.append(s[:i])\n    return result\n",
            "def string_sequence(n: int) -> str:\n    return str(list(range(n)))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \").filter(lambda x: len(x) > 0)\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = numbers.split(\" \")\n    filtered_list = [num for num in num_list if num in num_dict]\n    sorted_list = sorted(filtered_list, key=num_dict.get)\n    return \" \".join(sorted_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [numbers[i-1], numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [((num - min_num) / (max_num - min_num)) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    res = []\n    for num in numbers:\n        if num not in counts:\n            counts[num] = 1\n            res.append(num)\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        else:\n            if ch.islower():\n                flipped += ch.upper()\n            else:\n                flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return list(filter(lambda s: s.startswith(prefix_str), strs))\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l[i] for i in range(len(l)) if i % 3 == 0)\n    return [sorted_third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    if not l:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count('7')\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(x for i, x in enumerate(l) if i % 2 == 0)\n    return [sorted_even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i + 1:i + 3] + s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return pow(n, 2)\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [e + 1 for e in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return (a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    l = sorted(l)\n    if len(l) % 2 != 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        result += chr((ord(ch) - 97 + 5) % 26 + 97)\n    return result\ndef decode_shift(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        result += chr((ord(ch) - 97 + 21) % 26 + 97)\n    return result\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return ''.join([c for c in txt if c not in vowels])\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(e < t for e in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [l[i] - l[i-1] for i in range(1, len(l))]\n    return all(e <= 0 for e in diff) or all(e >= 0 for e in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(set(l2)))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n            continue\n        i += 1\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs[1:])]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or i == len(s) - 1 and s[i].lower() == 'y':\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index('apples') - 1])\n    oranges = int(words[words.index('oranges') - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    (left, right) = (0, len(sl) - 1)\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    if cnt1 <= cnt2:\n        return lst1\n    else:\n        return lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            def loop(a: int) -> int:\n                nonlocal cnt\n                if a % i == 0:\n                    cnt += 1\n                    return loop(a // i)\n                else:\n                    return a\n            loop(a)\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a0 = abs(a)\n    root = round(pow(a0, 1/3))\n    return root**3 == a0\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)\n    return f\"db{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        match g:\n            case 4.0:\n                result.append(\"A+\")\n            case g if g > 3.7:\n                result.append(\"A\")\n            case g if g > 3.3:\n                result.append(\"A-\")\n            case g if g > 3.0:\n                result.append(\"B+\")\n            case g if g > 2.7:\n                result.append(\"B\")\n            case g if g > 2.3:\n                result.append(\"B-\")\n            case g if g > 2.0:\n                result.append(\"C+\")\n            case g if g > 1.7:\n                result.append(\"C\")\n            case g if g > 1.3:\n                result.append(\"C-\")\n            case g if g > 1.0:\n                result.append(\"D+\")\n            case g if g > 0.7:\n                result.append(\"D\")\n            case g if g > 0.0:\n                result.append(\"D-\")\n            case _:\n                result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * int(pow(10, n - 2))\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(digit) for digit in str(n))\n    return bin(digits_sum)[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    sorted_words = [word.sorted for word in words]\n    return \" \".join(sorted_words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda a: (a[0], -a[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if ((arr[0] + arr[-1]) % 2 == 0):\n        return arr[::-1]\n    else:\n        return arr.sort()\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = set(lst)\n    if len(sl) < 2:\n        return None\n    return sorted(sl)[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\"[.!?]\\\\s*\")\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith(\"I \") and len(sentence) >= 2:\n            count += 1\n    return count\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        a = x\n        b = y\n        c = z\n        if (a + b == c) or (a + c == b) or (b + c == a):\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower()\n            if ch1 in vowels:\n                ch1 = ch1.upper()\n                ch1 = chr((ord(ch1) - 97 + 2) % 26 + 97)\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = str(max(primes))\n    return sum(int(d) for d in largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return all(key.islower() for key in d.keys()) or all(key.isupper() for key in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (a % 10) * (b % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [(i + 1) * 2 for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(\",\")\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if y != x:\n        return y - 1\n    return -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = ((n + m) // 2 + 1) // 2\n    return bin(r_avg)[2:]\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return sorted([d for d in x if int(str(d).replace(\" \", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\",\", \"\")) % 2 != 0])\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(arr, key=lambda x: x)\n    return [digit_names[x - 1] for x in sorted_arr]\n",
            "def f(n: int) -> List[int]:\n    nums = [i for i in range(1, n+1)]\n    return [num if i % 2 != 0 else sum(nums[:i]) for i, num in enumerate(nums)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(digit) for digit in n_str)\n    else:\n        return (int(n_str[:2]) * 2 + digits_sum(abs(n)))\ndef count_nums(arr: List[int]) -> int:\n    return sum(1 for num in arr if digits_sum(num) > 0)\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for num in lst1 if num % 2 != 0)\n    even_cnt = sum(1 for num in lst2 if num % 2 == 0)\n    if even_cnt >= odd_cnt:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = test.split(\" \")\n    for w in words:\n        if w in freq:\n            freq[w] += 1\n        else:\n            freq[w] = 1\n    result = {}\n    if freq:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join([c for c in s if c not in c])\n    return [s1, \"yes\" if s1 == s1[::-1] else \"no\"]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = len([c for c in num if c.isdigit() and int(c) % 2 == 1])\n        rs = \"the number of odd elements in the string \" + str(n) + \" of the input.\"\n        result.append(rs)\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda arr: ceil(sum(arr) / capacity), grid))\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count('1')\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if w.count(c) == n for c in consonants if c in w.lower()]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and not word[i - 1] in vowels and not word[i + 1] in vowels:\n            return word[i]\n    return \"\"\n",
            "def match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    if check(s1) or check(s2):\n        return \"Yes\"\n    else:\n        return \"No\"\ndef check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        elif ch == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return arr[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(arr[:k] if len(str(num)) <= 2 for num in arr[:k])\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    num = n\n    while num != 1:\n        if num % 2 != 0:\n            collatz.append(num)\n            num = 3 * num + 1\n        else:\n            num = num // 2\n    return sorted(collatz)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len([c for c in txt if c.isalpha() and int(c) % 2 == 0]))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not lst[:-1].__lt__(lst[1:]):\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    return max(freq.values()) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if arr.count(-1) % 2 == 1 else 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    s = str(n)\n    return 0 if s == '0' else int(filter(str.isdigit, s)) % 9\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx = close_idx[::-1]\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(int(pow(ceil(n), 2)) for n in lst)\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if txt == '':\n        return False\n    last = txt[len(txt) - 1]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i-1]]\n    return max(idx, default=-1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [n for n in lst if n < 0]\n    pos = [n for n in lst if n > 0]\n    max_neg = max(neg, default=None)\n    min_pos = min(pos, default=None)\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    else:\n        raise Exception(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    result = 1\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n        result *= fact\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"   \", \"-\").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or lst[0].count(\".\") > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    words = [w for w in words if is_prime(len(w))]\n    return \" \".join(words)\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(digit) for digit in n_str)\n    else:\n        return (int(n_str[0] + n_str[1]) * 2) + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and odds.startswith(str(n)[0])])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    return names[l+1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    result.sort(key=lambda x: (len(x), x))\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    positive_odds = [n * n for n in lst if n >= 0 and n % 2 == 1]\n    return sum(positive_odds)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 ,5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    i = 0\n    while num > 0:\n        if num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n        else:\n            i += 1\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    if a * a + b * b == c * c or a * a + c * c == b * b or b * b + c * c == a * a:\n        return True\n    else:\n        return False\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(w, max_w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    while \"**\" in ops:\n        index = ops.index(\"**\")\n        nums[index] = pow(nums[index], nums[index + 1])\n        nums.pop(index + 1)\n        ops.pop(index)\n    while \"*\" in ops:\n        index = ops.index(\"*\")\n        nums[index] = nums[index] * nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    while \"//\" in ops:\n        index = ops.index(\"//\")\n        nums[index] = nums[index] / nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    while \"+\" in ops:\n        index = ops.index(\"+\")\n        nums[index] = nums[index] + nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    while \"-\" in ops:\n        index = ops.index(\"-\")\n        nums[index] = nums[index] - nums[index + 1]\n        nums.pop(index + 1)\n        ops.pop(index)\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                result += c.lower()\n            else:\n                result += c.upper()\n        else:\n            result += c\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = md5()\n    md5_hash.update(txt.encode())\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [x for x in range(lower, upper + 1) if x % 2 == 0]\n"
        ]
    },
    "swift": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - floor(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(delimiter)\n            result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    parenGroups = paren_string.split(\" \")\n    for group in parenGroups:\n        maxDepth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(maxDepth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = reduce((lambda x, y: x * y), numbers)\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return \"\".join([\"0\" if a[i] == b[i] else \"1\" for i in range(len(a))])\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longestS = strs[0]\n    for s in strs:\n        if len(s) > len(longestS):\n            longestS = s\n    return longestS\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i+1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(str(x) for x in range(n+1))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \")\n    return [durations[note] for note in notes]\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    if len(substring) > len(s):\n        return 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = numbers.split(\" \")\n    num_list = [str(num_dict[num]) for num in num_list if num in num_dict]\n    num_list.sort(key=lambda num: num_dict[num])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [numbers[i - 1], numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers) if len(numbers) > 0 else 0.0\n    max_num = max(numbers) if len(numbers) > 0 else 0.0\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [((x - min_num) / (max_num - min_num)) for x in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if v is int]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    if n < 2:\n        return 1\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return n // i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    num = n\n    while divisor <= num:\n        if num % divisor == 0:\n            factors.append(divisor)\n            num /= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = [num for num in numbers if counts[num] == 1]\n    return res\n",
            "def flip_case(s: str) -> str:\n    flipped = \"\"\n    for ch in s:\n        if not ch.isalpha():\n            flipped += ch\n        elif ch.islower():\n            flipped += ch.upper()\n        elif ch.isupper():\n            flipped += ch.lower()\n    return flipped\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(floor(sqrt(n))) {\n        for i in range(2, int(floor(sqrt(n)))+1) {\n            if n % i == 0 {\n                return False\n            }\n        }\n    }\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    def get_key(i):\n        if i % 3 == 0:\n            return l[i]\n        else:\n            return i\n    l = sorted(enumerate(l), key=get_key)\n    l = [e[1] for e in l]\n    return l\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(set(l))\n",
            "def max_element(l: List[int]) -> int:\n    if len(l) == 0:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    evens = [e for i, e in enumerate(l) if i % 2 == 0]\n    evens.sort()\n    return [evens[i // 2] if i % 2 == 0 else e for i, e in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result += s[i:]\n        else:\n            result += s[i+1:i+4]\n            result += s[i]\n    return result\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(sqrt(n)):\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return int(pow(n, 2))\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [elem + 1 for elem in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return float(a * h) / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 1, 2, 3]\n    for i in range(4, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3])\n    return fib[n]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n",
            "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for _ in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            result += chr(ord(c) - 5)\n        else:\n            result += c\n    return result\ndef decode_shift(s: str) -> str:\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            result += chr(ord(c) - 21)\n        else:\n            result += c\n    return result\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return ''.join(c for c in txt if c not in vowels)\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(e < t for e in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = [y - x for x, y in zip(l, l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1).intersection(set(l2))))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n //= i\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n+1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs[1:], start=1)]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[len(x_str) - shift:] + x_str[:len(x_str) - shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isupper())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(\" \")\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [e for e in arr if e % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [n for n, freq in freqs.items() if freq >= n]\n    return max(good_vals) if good_vals else -1\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left = 0\n    right = len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(map(len, lst1))\n    cnt2 = sum(map(len, lst2))\n    return cnt1 <= cnt2 else lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(sqrt(n)):\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    a_copy = a\n    if a < 2:\n        return False\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a_copy % i == 0:\n                cnt += 1\n                a_copy //= i\n    return cnt == 3\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    root = abs(a) ** (1.0 / 3.0)\n    return root == int(root)\n",
            "def hex_key(num: str) -> int:\n    return sum(1 for c in num if c in \"2357BD\")\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)\n    return \"db\" + binary[2:] + \"db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    if 2 <= int(length ** 0.5):\n        for i in range(2, int(length ** 0.5) + 1):\n            if length % i == 0:\n                return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * int(pow(10, n - 2))\n",
            "def solve(n: int) -> str:\n    digits_sum = 0\n    while n > 0:\n        digits_sum += n % 2\n        n //= 2\n    return format(digits_sum, 'b')\n",
            "def add(lst: List[int]) -> int:\n    return sum([e for i, e in enumerate(lst) if i % 2 == 1 and e % 2 == 0])\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(\" \")\n    sorted_words = [word.sorted() for word in words]\n    return \" \".join(sorted_words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda x: (x[0], x[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n",
            "def encrypt(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord(\"z\"):\n            shifted -= 26\n        result += chr(shifted)\n    return result\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(\".!?\")\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith(\"I \") and sentence.count(\" \") >= 2:\n            count += 1\n    return count\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.lower()\n            if vowels.find(ch1) != -1:\n                ch1 = ch1.upper()\n            ch1 = ch1.translate(str.maketrans(vowels, vowels.upper()))\n            result += ch1\n        else:\n            result += ch\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(floor(sqrt(float(n)))) and n > 1:\n        for i in range(2, int(floor(sqrt(float(n)))) + 1):\n            if n % i == 0:\n                return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = str(max(primes))\n    return sum(int(c) for c in largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    return all(key.isupper() for key in d.keys()) or all(key.islower() for key in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    if n > 1:\n        primes.append(2)\n        for i in range(3, n + 1):\n            isPrime = True\n            for j in range(2, int(i ** 0.5) + 1):\n                if i % j == 0:\n                    isPrime = False\n                    break\n            if isPrime:\n                primes.append(i)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(\",\")\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y - 1 if y != x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = round((n + m) / 2)\n    return format(r_avg, 'b')\n",
            "def unique_digits(x: List[int]) -> List[int]:\n    return sorted([d for d in x if int(str(d)[0]) % 2 != 0])\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(arr, key=lambda x: x)\n    return [digit_names[x - 1] for x in sorted_arr if 1 <= x and x <= 9]\n",
            "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    result = []\n    for i in range(n):\n        if i == 0:\n            result.append(nums[i])\n        else:\n            if nums[i] % 2 != 0:\n                result.append(sum(nums[0:i + 1]))\n            else:\n                result.append(nums[0] * nums[i])\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    if n >= 0:\n        return sum([int(d) for d in str(n)])\n    else:\n        return int(str(abs(n))[0] * 2 + digits_sum(abs(n)))\ndef count_nums(arr: List[int]) -> int:\n    return sum([1 for num in arr if digits_sum(num) > 0])\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[:i] == sorted_arr[:i] and arr[i:] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    oddCnt = sum(1 for num in lst1 if num % 2 != 0)\n    evenCnt = sum(1 for num in lst2 if num % 2 == 0)\n    return \"YES\" if evenCnt >= oddCnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    for c in test:\n        freq[c] = freq.get(c, 0) + 1\n    max_freq = max(freq.values())\n    return {k: v for k, v in freq.items() if v == max_freq}\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = ''.join([c for c in s if c not in c])\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"]\ndef is_palindrome(s: str) -> bool:\n    return s == s[::-1]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for c in num if int(c) % 2 == 1)\n        rs = \"the number of odd elements in the string \" + str(n) + \" i of the input.\"\n        result.append(rs)\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(map(lambda x: ceil(sum(x) / capacity), grid))\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count('1')\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [word for word in words if len(word) > 0 and n == sum(1 for letter in word.lower() if letter in consonants)]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        index = word[i]\n        if index in vowels:\n            return index\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        elif ch == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    if check(s1) or check(s2):\n        return \"Yes\"\n    return \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return arr.sorted()[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum([e for i, e in enumerate(lst) if i % 2 == 0 and e % 2 != 0])\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return collatz\n",
            "def valid_date(date: str) -> bool:\n    if date.count != 10 or date[2] != \"-\" or date[5] != \"-\" or not date.replace(\"-\", \"\").isdigit():\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(sum([1 for c in txt if c.islower() and ord(c) % 2 == 0]))]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    if not zip(lst, lst[1:]):\n        return True\n    return zip(lst, lst[1:]).all(lambda x: x[0] <= x[1])\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(floor(sqrt(n))):\n        for i in range(2, int(floor(sqrt(n)))+1):\n            if n % i == 0:\n                return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    return (-1 if arr.count(x) % 2 == 1 and x < 0 else 1) * sum(abs(x) for x in arr)\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 and 1 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    if n > 1:\n        for i in range(2, n):\n            if i % 2 == 0:\n                seq.append(i // 2 + 1)\n            else:\n                seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    odds = [int(char) for char in str(n) if int(char) % 2 == 1]\n    return 0 if len(odds) == 0 else reduce(lambda x, y: x * y, odds)\n",
            "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == \"[\":\n            open_idx.append(i)\n        elif ch == \"]\":\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum([int(ceil(x)) ** 2 for x in lst])\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[-1]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx) if idx else -1\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [n for n in lst if n < 0]\n    pos = [n for n in lst if n > 0]\n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(\",\", \".\"))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    else:\n        raise TypeError(\"Type Error\")\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    return reduce(lambda x, y: x * y, [i for i in range(1, n+1)])\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"   \", \" \").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\", maxsplit=1)\n    if len(lst) != 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or lst[0].count(\"0\") > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += int(pow(lst[i], 2))\n        elif i % 4 == 0:\n            result += int(pow(lst[i], 3))\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if 2 <= int(n ** 0.5):\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    if n >= 0:\n        return sum([int(d) for d in str(n)])\n    else:\n        return int(str(abs(n))[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return sum(1 for num in nums if num > 10 and num % 2 == 1 and odds.__contains__(str(num)))\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        (l, r) = (r, l)\n    if l == r:\n        return []\n    return names[l+1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [x for x in lst if x.count % 2 == 0]\n    return sorted(result, key=lambda x: (x.count, x))\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    if 2 <= int(n ** 0.5):\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum([x**2 for x in lst if x >= 0 and x.is_integer() and x % 2 == 1])\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(a - b) for a, b in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.endswith(b[::-1] + b[:i]) or a.endswith(b[i:] + b[:i]):\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    numerals = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]\n    res = \"\"\n    num = num\n    for i in range(len(values)):\n        while num >= values[i]:\n            res += numerals[i]\n            num -= values[i]\n    return res\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    if a + b <= c or b + c <= a or a + c <= b:\n        return False\n    if a * a + b * b == c * c or b * b + c * c == a * a or a * a + c * c == b * b:\n        return True\n    return False\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators\n    nums = operands\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.remove(nums[i + 1])\n            ops.remove(ops[i])\n            i -= 1\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(nums[i + 1])\n            ops.remove(ops[i])\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] / nums[i + 1]\n            nums.remove(nums[i + 1])\n            ops.remove(ops[i])\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(nums[i + 1])\n            ops.remove(ops[i])\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(nums[i + 1])\n            ops.remove(ops[i])\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                result += c.lower()\n            else:\n                result += c.upper()\n        else:\n            result += c\n    return result\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    txt_bytes = txt.encode('utf-8')\n    md5_hash = hashlib.md5(txt_bytes)\n    md5_encoded = md5_hash.hexdigest()\n    return md5_encoded\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [x for x in range(lower, upper+1) if x % 2 == 0]\n"
        ]
    },
    "typescript": {
        "python": [
            "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
            "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups: List[str] = []\n    stk: List[str] = []\n    current_group: str = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups\n",
            "def truncate_number(num: float) -> float:\n    return num - int(num)\n",
            "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for num in numbers]\n    return sum(deviations) / len(numbers)\n",
            "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n",
            "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split(\" \")\n    result = []\n    for group in groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
            "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]\n",
            "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = reduce((a, b) => a * b, numbers, 1)\n    return [n_sum, n_product]\n",
            "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"\n",
            "def string_xor(a: str, b: str) -> str:\n    return ''.join(['0' if c == b[i] else '1' for i, c in enumerate(a)])\n",
            "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s\n",
            "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
            "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[:i + 1])\n    return prefixes\n",
            "def string_sequence(n: int) -> str:\n    return \" \".join(map(str, range(n + 1)))\n",
            "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))\n",
            "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split(\" \")\n    notes = list(filter(lambda s: len(s) > 0, notes))\n    return list(map(lambda note: durations[note], notes))\n",
            "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
            "def sort_numbers(numbers: str) -> str:\n    num_dict: Dict[str, int] = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list: List[str] = [n for n in numbers.split(\" \") if n in num_dict]\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)\n",
            "def find_closest_elements(numbers: List[float]) -> List[float]:\n    numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = []\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [numbers[i - 1], numbers[i]]\n    return closest_pair\n",
            "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [((num - min_num) / (max_num - min_num)) for num in numbers]\n",
            "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]\n",
            "def str_length(s: str) -> int:\n    return len(s)\n",
            "def largest_divisor(n: int) -> int:\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return n / i\n    return 1\n",
            "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
            "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = defaultdict(int)\n    for num in numbers:\n        counts[num] += 1\n    return [num for num in numbers if counts[num] == 1]\n",
            "def flip_case(s: str) -> str:\n    flipped = []\n    for ch in s:\n        if not ch.isalpha():\n            flipped.append(ch)\n        elif ch.islower():\n            flipped.append(ch.upper())\n        else:\n            flipped.append(ch.lower())\n    return ''.join(flipped)\n",
            "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)\n",
            "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]\n",
            "def get_positive(l: List[int]) -> List[int]:\n    return list(filter(lambda x: x > 0, l))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def poly(xs: List[int], x: float) -> float:\n    res = 0\n    for i in range(len(xs)):\n        res += xs[i] * math.pow(x, i)\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while math.fabs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2\n",
            "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l.filter(lambda x: x % 3 == 0))\n    return [sorted_third[i // 3] if i % 3 == 0 else x for i, x in enumerate(l)]\n",
            "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))\n",
            "def max_element(l: List[int]) -> int:\n    if len(l) == 0:\n        return 0\n    return max(l)\n",
            "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt\n",
            "def sort_even(l: List[int]) -> List[int]:\n    even = sorted([x for x in l if x % 2 == 0])\n    return [even[i // 2] if i % 2 == 0 else x for i, x in enumerate(l)]\n",
            "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 <= len(s):\n            result.append(s[i+1:i+3])\n            result.append(s[i])\n        else:\n            result.append(s[i:])\n    return ''.join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]\n",
            "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "def car_race_collision(n: int) -> int:\n    return n ** 2\n",
            "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]\n",
            "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
            "def change_base(x: int, bas: int) -> str:\n    digits: List[str] = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])\n",
            "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2\n",
            "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[n % 4]\n",
            "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 == 0:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2\n    else:\n        return sl[len(l) // 2]\n",
            "def is_palindrome(txt: str) -> bool:\n    txt = txt.replace(' ', '').lower()\n    return txt == txt[::-1]\n",
            "def modp(n: int, p: int) -> int:\n    ret = 1\n    for _ in range(n):\n        ret = (ret * 2) % p\n    return ret\n",
            "def encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr((ord(ch) - 97 + 5) % 26 + 97))\n    return ''.join(result)\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        result.append(chr((ord(ch) - 97 + 21) % 26 + 97))\n    return ''.join(result)\n",
            "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return ''.join([c for c in txt if c not in vowels])\n",
            "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)\n",
            "def add(x: int, y: int) -> int:\n    return x + y\n",
            "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
            "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '<':\n            depth += 1\n        elif b == '>':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def monotonic(l: List[int]) -> bool:\n    diff = l[1:]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)\n",
            "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1).intersection(set(l2))))\n",
            "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n /= i\n        else:\n            i += 1\n    return n\n",
            "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))\n",
            "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == '(':\n            depth += 1\n        elif b == ')':\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "def derivative(xs: List[int]) -> List[int]:\n    return [x * i for i, x in enumerate(xs)][1:]\n",
            "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c\n",
            "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or i == len(s) - 1 and s[i].lower() == \"y\":\n            cnt += 1\n    return cnt\n",
            "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return \"\".join(reversed(x_str))\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n",
            "def digit_sum(s: str) -> int:\n    return sum(int(c) for c in s if c.isalpha())\n",
            "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\n",
            "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n",
            "def search(lst: List[int]) -> int:\n    freqs = defaultdict(int)\n    for n in lst:\n        freqs[n] += 1\n    good_vals = [n for n, count in freqs.items() if count >= n]\n    return max(good_vals + [-1])\n",
            "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = lst[:]\n    sl.sort(key=lambda x: -x)\n    result = []\n    start = 0\n    right = len(sl) - 1\n    while start <= right:\n        result.append(sl[start])\n        start += 1\n        if start <= right:\n            result.append(sl[right])\n            right -= 1\n    return result\n",
            "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1.0\n",
            "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[-i - 1] for i in range(len(q) // 2))\n    total = sum(q)\n    return is_palin and total <= w\n",
            "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            ans += 1\n    return ans\n",
            "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(e) for e in lst1)\n    cnt2 = sum(len(e) for e in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a //= i\n            if cnt == 3:\n                return True\n    return False\n",
            "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x\n",
            "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = round(a ** (1.0 / 3.0))\n    return root ** 3 == a\n",
            "def hex_key(num: str) -> int:\n    return list(num).count('7')\n",
            "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)[2:]\n    return f\"db{binary}db\"\n",
            "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
            "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result\n",
            "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
            "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * (10 ** (n - 2))\n",
            "def solve(n: int) -> str:\n    digits_sum = sum(int(digit) for digit in str(n))\n    return bin(digits_sum)[2:]\n",
            "def add(lst: List[int]) -> int:\n    return sum([e for i, e in enumerate(lst) if i % 2 == 1 and e % 2 == 0])\n",
            "def anti_shuffle(s: str) -> str:\n    words = s.split(' ')\n    for i in range(len(words)):\n        words[i] = ''.join(sorted(words[i]))\n    return ' '.join(words)\n",
            "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    coords.sort(key=lambda a: (a[0] == a[0], a[1] - a[1]))\n    return coords\n",
            "def sort_array(arr: List[int]) -> List[int]:\n    sorted_arr = arr.copy()\n    if len(sorted_arr) <= 1:\n        return sorted_arr\n    if ((sorted_arr[0] + sorted_arr[-1]) % 2 == 0):\n        sorted_arr.sort()\n    else:\n        sorted_arr.sort(reverse=True)\n    return sorted_arr\n",
            "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ch.lower()\n        if shifted.isalpha():\n            shifted = chr((ord(shifted) - 97 + 4) % 26 + 97)\n        result.append(shifted)\n    return ''.join(result)\n",
            "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = list(set(lst))\n    sl.sort()\n    if len(sl) < 2:\n        return None\n    return sl[1]\n",
            "def is_bored(s: str) -> int:\n    sentences = s.split(r'[.!?]\\s*')\n    return len([s for s in sentences if s.startswith('I ') and len(s) >= 2])\n",
            "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n",
            "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.lower() == ch else ch.lower()\n            if ch1 in vowels:\n                ch1 = ch1.translate({ord(c): ord(c) + 2 for c in vowels})\n            result.append(ch1)\n        else:\n            result.append(ch)\n    return \"\".join(result)\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest = str(max(primes))\n    return sum(int(c) for c in largest)\n",
            "def check_dict_case(d: Dict[str, str]) -> bool:\n    if len(d) == 0:\n        return False\n    return all(key.isupper() for key in d.keys()) or all(key.islower() for key in d.keys())\n",
            "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes\n",
            "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)\n",
            "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and vowels.find(c) >= 0)\n",
            "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
            "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]\n",
            "def words_string(s: str) -> List[str]:\n    return s.split(',')\n",
            "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y - 1 if y != x else -1\n",
            "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = (n + m) // 2\n    return bin(r_avg)[2:]\n",
            "def all_digits_odd(s: str) -> bool:\n    return all(chr(digit) % 2 != 0 for digit in map(ord, s))\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted([num for num in x if all_digits_odd(str(num))])\n",
            "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x and x <= 9, arr), reverse=True)\n    return list(map(lambda x: digit_names[x - 1], sorted_arr))\n",
            "def f(n: int) -> List[int]:\n    nums = [x + 1 for x in range(n)]\n    return [num if num % 2 != 0 else sum(nums[:i]) for i, num in enumerate(nums)]\n",
            "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len(list(filter(lambda n: digits_sum(n) > 0, arr)))\n",
            "def move_one_ball(arr: List[int]) -> bool:\n    sorted_arr = sorted(arr, key=operator.neg)\n    for i in range(len(arr)):\n        if arr[:i] == sorted_arr[:i] and arr[i:] == sorted_arr[len(arr) - i:]:\n            return True\n    return False\n",
            "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = sum(1 for num in lst1 if num % 2 != 0)\n    even_cnt = sum(1 for num in lst2 if num % 2 == 0)\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"\n",
            "def histogram(test: str) -> Dict[str, int]:\n    freq: Map[str, int] = {}\n    words = test.split(\" \")\n    for w in words:\n        if w in freq:\n            freq[w] += 1\n        else:\n            freq[w] = 1\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        result = {}\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result\n",
            "def reverse_delete(s: str, c: str) -> List[str]:\n    s1 = \"\".join([c for c in s if c != c.lower()])\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"]\ndef is_palindrome(s: str) -> bool:\n    return s == s[::-1]\n",
            "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(1 for c in num if ord(c) % 2 == 1)\n        rs = \"the number of odd elements in the string {} of the input.\"\n        result.append(rs.format(n))\n    return result\n",
            "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum\n",
            "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum(sum(n) // capacity for row in grid for n in row)\n",
            "def count_ones(num: int) -> int:\n    return bin(num).count('1')\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
            "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    return [w for w in words if [c for c in w if c.lower() in consonants][:n] == [c for c in w if c.lower() in consonants]]\n",
            "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if vowels.find(word[i]) > -1 and vowels.find(word[i - 1]) == -1 and vowels.find(word[i + 1]) == -1:\n            return word[i]\n    return \"\"\n",
            "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\ndef match_parens(lst: List[str]) -> str:\n    s1 = \"\".join(lst[0:2])\n    s2 = \"\".join(lst[1:3])\n    return \"Yes\" if check(s1) or check(s2) else \"No\"\n",
            "def maximum(arr: List[int], k: int) -> List[int]:\n    return arr[-k:]\n",
            "def solution(lst: List[int]) -> int:\n    return sum(e for i, e in enumerate(lst) if i % 2 == 0 and e % 2 != 0)\n",
            "def add_elements(arr: List[int], k: int) -> int:\n    return sum(n for n in arr[:k] if len(str(n)) <= 2)\n",
            "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted(collatz, reverse=True)\n",
            "def valid_date(date: str) -> bool:\n    if len(date) != 10 or date[2] != \"-\" or date[5] != \"-\":\n        return False\n    m = int(date[0:2])\n    d = int(date[3:5])\n    if [1, 3, 5, 7, 8, 10, 12].count(m) and d >= 1 and d <= 31:\n        return True\n    if [4, 6, 9, 11].count(m) and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False\n",
            "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [''.join([c for c in txt if c.isalpha() and ord(c) % 2 == 0])]\n",
            "def is_sorted(lst: List[int]) -> bool:\n    freq = defaultdict(int)\n    for i in lst:\n        freq[i] += 1\n    return max(freq.values()) <= 2\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if is_prime(length) else \"NO\"\n",
            "def prod_signs(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n    if 0 in arr:\n        return 0\n    sign = arr.count(-1) % 2 == 1 and -1 or 1\n    return sign * sum(map(abs, arr))\n",
            "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp: List[int] = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(i % 2 == 0 and 1 or min_val)\n    return result\n",
            "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i // 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) // 2)\n    return seq\n",
            "def digits(n: int) -> int:\n    digits = [int(d) for d in str(n)]\n    odds = [d for d in digits if d % 2 == 1]\n    return sum(odds) if len(odds) > 0 else 0\n",
            "def is_nested(s: str) -> bool:\n    open_idx: List[int] = []\n    close_idx: List[int] = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
            "def sum_squares(lst: List[float]) -> int:\n    return sum(map(lambda x: x ** 2, map(lambda x: int(x), lst)))\n",
            "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rfind(' ') + 1:]\n    return len(last) == 1 and last.isalpha()\n",
            "def can_arrange(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx, default=-1)\n",
            "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = None if len(neg) == 0 else max(neg)\n    min_pos = None if len(pos) == 0 else min(pos)\n    return [max_neg, min_pos]\n",
            "def any_to_real(o: Any) -> float:\n    if isinstance(o, str):\n        return float(o.replace(',', '.'))\n    elif isinstance(o, (int, float)):\n        return o\n    else:\n        raise TypeError('Type Error')\ndef compare_one(a: Any, b: Any) -> Optional[float]:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1\n",
            "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8\n",
            "def special_factorial(n: int) -> int:\n    fact = [1] * (n + 1)\n    for i in range(1, n + 1):\n        fact[i] = fact[i - 1] * i\n    result = 1\n    for i in range(1, n + 1):\n        result *= fact[n - i]\n    return result\n",
            "def fix_spaces(txt: str) -> str:\n    return txt.replace(\"   \", \"-\").replace(\" \", \"_\")\n",
            "def file_name_check(file_name: str) -> str:\n    suffixes = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or lst[1] not in suffixes:\n        return \"No\"\n    if len(lst[0]) == 0 or not lst[0][0].isalpha():\n        return \"No\"\n    if [c for c in lst[0] if c.isdigit()][:3].count(1) > 3:\n        return \"No\"\n    return \"Yes\"\n",
            "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
            "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join(word for word in words if is_prime(len(word)))\n",
            "def simplify(x: str, n: str) -> bool:\n    xs = x.split('/')\n    ns = n.split('/')\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0\n",
            "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(map(int, n_str))\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n",
            "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and odds.startswith(str(n)[0])])\n",
            "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6\n",
            "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        [l, r] = [r, l]\n    if l == r:\n        return []\n    return names[l + 1:r]\n",
            "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [e for e in lst if len(e) % 2 == 0]\n    result.sort(key=lambda x: len(x), reverse=True)\n    return result\n",
            "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
            "def double_the_difference(lst: List[float]) -> int:\n    return sum(n ** 2 for n in lst if n >= 0 and n % 2 == 1)\n",
            "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]\n",
            "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = -1\n    max_ext = \"\"\n    for ext in extensions:\n        upper = sum(1 for c in ext if c.isupper())\n        lower = sum(1 for c in ext if c.islower())\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"\n",
            "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i]) >= 0:\n            return True\n    return False\n",
            "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = sum(1 for d in ds if int(d) % 2 == 0)\n    return [even, len(ds) - even]\n",
            "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 , 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\" , \"v\", \"iv\", \"i\"]\n    res = []\n    for i in range(len(values)):\n        while num >= values[i]:\n            res.append(numerals[i])\n            num -= values[i]\n    return \"\".join(res)\n",
            "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    if a == b and b == c:\n        return True\n    if a == b or a == c or b == c:\n        return False\n    half = (a + b + c) / 2\n    return (half - a) * (half - b) * (half - c) == 0\n",
            "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = max_w if max_w < w else w\n    return max_w\n",
            "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]\n",
            "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = int(nums[i] / nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]\n",
            "def solve(s: str) -> str:\n    if not any(ch.isalpha() for ch in s):\n        return s[::-1]\n    result = []\n    for ch in s:\n        if not ch.isalpha():\n            result.append(ch)\n        elif ch.isupper():\n            result.append(ch.lower())\n        else:\n            result.append(ch.upper())\n    return ''.join(result)\n",
            "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = md5()\n    md5_hash.update(bytes(txt, 'utf-8'))\n    return md5_hash.hexdigest()\n",
            "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    if lower > upper:\n        return []\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n"
        ]
    }
}